multiprocessors support simple memory consistency models computers shared memory multiprocessors 
hardware systems define software allowable behavior memory 
reasonable model sequential consistency sc shared memory multiprocessor behave multiprogrammed uniprocessor 
sc appears limit optimizations useful aggressive hardware implementations researchers practitioners defined relaxed consistency models 
models just relax ordering writes reads processor consistency ibm intel pentium pro sun tso aggressively relax order normal reads writes weak ordering release consistency dec alpha ibm powerpc sun rmo 
argues multiprocessors implement sc cases model just relaxes ordering writes reads 
argue aggressively relaxed models advent speculative execution models give sufficient performance boost justify exposing complexity authors low level software 
keywords multiprocessors parallel computing shared memory memory consistency models 
computers contain multiple processors part marginal cost adding additional processors low minimal performance gain needed additional processors cost effective 
intel example cards containing pentium pro processors easily incorporated system 
multiple processor cards help multiprocessing spread servers desktop 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
ieee 
appear ieee computer mark hill computer sciences department university wisconsin madison west dayton st madison wi usa www cs wisc edu multiprocessors programmed 
evolution begun continue 
multiprocessors multiprogramming conventional single threaded programs multiplexed processors 
performance critical parts compute intensive applications parallelized expert programmers multiple threads sharing data shared memory 
game vendor example obtains performance advantage competitors rapidly follow suit 
someday may able build compilers effectively parallelize sequential programs provide tools abstractions allow people program parallel 
hardware needed support threads shared memory 
hardware provide defined interface shared memory 
second provide high performance implementation interface 
defining shared memory multiprocessor interface memory easier consider uniprocessor 
uniprocessor executes instructions memory operations dynamic execution order called program order 
simple processors execute operations program order complex processors appear 
case read return value write address uniquely defined program order 
uniprocessor multiprogrammed cases exist 
program executes single thread sharing memory programmer memory interface uniprocessor multiprogramming 
situation complex hand program multiple threads sharing memory program shares memory running programs operating system 
case write address thread thread context switched processor thread write address 
cases software uses synchronization program results meaningful 
programmers model multiprogrammed uniprocessor merging program order executing thread single total order processor execution 
programmers example expect code frag posix model java threads high perf 
fortran shared memory hardware memory consistency model sc ment table bottom page set data copy value 
computers today programmed high level languages java 
practice creates memory interface levels 
higher level hll defines memory programmers 
lower level hardware defines memory low level software call middleware 
middleware includes compilers libraries device drivers operating systems key parts important applications databases 
software written compilers translate hll memory operations lowlevel ones manner preserves memory semantics 
table example compiler reorder stores 
posix threads example recommends synchronization encapsulated library calls mutex lock 
interface memory shared memory multiprocessor called memory consistency model 
similar uniprocessor hll programming induces levels memory consistency models depicted highlevel models hll low level model hardware 
primarily concerned hardware memory consistency models 
multiprocessor relatively simple memory interface multiprogrammed uniprocessor 
memory consistency model formalized lam port sequential consistency sc 
section argues benefits sc 
surprisingly hardware memory consistency models commercial multiprocessors sc 
occurs alternative models believed better facilitate high performance implementations 
section examines drawbacks implementing sc alternative memory consistency models called relaxed models overcome 
models just relax ordering writes reads section aggressively relax order normal reads writes section 
details models primary sources excellent relaxed memory model tutorial adve gharachorloo ph theses collier tools distinguishing memory models www org diagnostics html 
reason academics including advocated relaxed models sc 
advent speculative execution changed mind 
section argues multiprocessor hardware implement sc cases models just relax ordering writes reads 
see aggressively relaxed models attractive 
argue performance gap aggressively relaxed models sc range section 
opinion performance gap sufficient justify burdening middleware authors reasoning aggressively relaxed memory models section 
discuss alternatives supporting sc optional relaxed extensions commercial models relax order writes reads especially backward compatibility involved 
sequential consistency lamport defined multiprocessor sequentially consistent sc result execution operations processors executed mark hill case making multiprocessors sequentially consistent page 
assembly language 
shared memory multiprocessor high level language hll memory consistency models upper lines hardware memory consistency model lower line 
middleware preserve hll memory semantics translating programs hardware model 
contrast assembly language programs written directly hardware model 
table 
copy set 
thread processor data new flag set thread processor flag set data copy data sequential order operations individual processor appear sequence order specified program 
principle benefit selecting sc interface shared memory hardware people expect 
ask moderately sophisticated software professionals shared memory define sc albeit precisely concisely lamport 
interfaces users sc preferred 
literal interpretation sc definition lead believe implementing requires memory module precludes processor caches 
case 
contrary sc relaxed models described section allow optimizations important high performance implementations 
models permit coherent caching 
caches may private processors shared processors 
may level multi level hierarchies 
straightforward implementation coherence processes operations processor program order perform write invalidates cached copies block 
second models non binding prefetching 
non binding prefetching moves block cache anticipation keeps block jurisdiction coherence protocol 
non binding prefetches affect memory performance memory semantics prefetched block invalidated processor wishes write block 
contrast binding prefetch moves datum register unaffected subsequent writes processors 
prefetches initiated overlap cache latency computation misses hardware software special prefetch instructions 
third models support multithreading processor contains hot threads processes run interleaved fashion 
correctness point view multiprocessor way multithreaded processors behaves multiprocessor conventional processors 
implementation multithreaded hardware switch threads long latency events hide cache misses switch cycle simultaneously execute multiple threads cycle 
summary sc relaxed models allow optimizations 
sc permits optimizations keeps software interface simple 
particular sc enables middleware authors target multiprogrammed uniprocessor 
hardware architects choose sc 
relaxed models despite sc advantages commercial hardware architectures selected alternatives sc called relaxed weak memory consistency models 
relaxed models selected facilitate additional implementation optimizations precluded sc complexity speculative execution 
sc example hard write buffers write buffers cause operations cache coherence protocol program order 
straightforward processors precluded overlapping multiple reads writes memory system 
restriction systems caches operations go memory 
systems cache coherence norm today restriction impacts activity operations bypass cache 
cache bypassing occurs uncacheable operations input output space block transfer operations writes coalescing write buffers 
definition relaxed models subtle complex 
discuss important classes adve gharachorloo aptly call relaxing write read program order relaxing orders 
relaxing write read program order class relaxing write read program order called processor consistent models exposes come serve write buffers low level software 
means processor writes may immediately affect processors writes seen program order 
processor write write flag read example sure updated flag know done reads common processors sure processor sees writes immediately write buffer bypassing 
ensures models effect uniprocessor behavior 
furthermore difference sc difference shared memory programs programs produce shared data writing data writing flag counter table 
programs observe differences sc convoluted examples code fragment illustrated table 
table 
pc ibm pentium pro tso allow copy andy copy get old values violating sc 
processor processor new new copy copy mark hill case making multiprocessors sequentially consistent page specific models class include wisconsin stanford processor consistency pc ibm intel pentium pro sun total store order tso 
pc proposed wisconsin subsequently precisely defined stanford 
full academic generality pc useful guarantee property called causality 
causality requires processors see effect processor operation processor sees 
causality processor consistency fail look sc important cases involving processors 
case illustrated table 
table 
causality needed copy set processor processor processor data new flag set flag set flag set flag set data copy data commercial models class ibm pentium pro tso hand guarantee causality ensure copy gets table 
models differ subtle ways processor reading write ensures processors see 
hardware memory consistency models easier hardware implementors hardware optimizations uniprocessors 
particular processor writes buffered come serve write buffer front cache coherence protocol 
values buffered writes bypassed subsequent reads processor address coherence permission obtained 
optimization especially important architectures general purpose registers intel architecture 
furthermore opinion having hardware memory consistency model ibm pentium pro tso processor consistency causality negligible impact middleware authors 
authors assume sc rarely 
models look exactly 
add pentium pro memory model section adve gharachorloo classification 
intel states pentium intel models virtually identical pentium pro 
strictly speaking microprocessor cooperate system support memory model 
build systems pentium pros support pentium pro memory model 
sc common idioms data sharing table table table 
relaxing orders class relaxing orders seeks allow hardware implementation options uniprocessors 
members class may completely reorder reads writes include usc rice weak ordering wo stanford release consistency rc dec alpha ibm powerpc sun relaxed memory order rmo 
models differ subtle ways programmers restore sanity examples table behave expected 
wo rc ask programmers distinguish certain reads writes synchronization hardware handle carefully 
commercial models add special operations variously called fences barriers syncs tell system order required 
table illustrates example table augmented sun relaxed memory order 
table 
memory barriers ensure data copy set sun rmo 
processor processor data new flag set written ensures flag read data 
commercial implementations models sure processor sees reads writes program order preserve simple uniprocessor behavior 
implementations models class exploit optimizations need implement order operations software asks aggressively order rest time 
processors complete reads writes cache example previous reads writes program order obtained coherence permission 
speculative execution processors retire reads writes preclude rollback previous reads writes await coherence permission 
furthermore hardware model relaxing orders class appear great challenge compiler writers 
sequential threads programmers synchronization libraries declare critical 
cases compiler library writer add appropriate fences 
sequential languages parallelizing compilers compiler mark hill case making multiprocessors sequentially consistent page flag set data copy data inserts synchronization know fences need 
summary relaxed models offer hardware implementation options sc appear information programmers know anyway 
appears hardware relaxed models sc 
multiprocessors implement sc section discusses processors trends especially transistors speculation affect performance gap relaxed sc implementations 
section explores complexity reasoning relaxed models 
section gives opinion performance gain relaxed models sufficient justify intellectual complexity add software hardware interface 
performance gap large principal argument relaxed models yield higher performance sc 
performance gap relaxed models sc 
answer depends processor implementation parameters 
observations gharachorloo reduced performance gap relative initial expectations :10.1.1.47.7147
sc hardware need serialize operations obtain coherence permission prefetches cache misses 
sc overlap operations just relaxed implementations 
sc implementations perform actual reads writes cache program order 
sc implementations handle cache misses sequence read write read write time modestly longer handling hits 
non blocking cache sc implementation pipeline get shared block get exclusive block get shared block get exclusive block rapidly perform read write read write series cache hits 
second advent speculative execution allows relaxed sc implementations aggressive 
speculative execution processor performs instructions eagerly 
instructions undone speculation previous instructions proves incorrect mispredicted branches 
processor commits retires instruction sure instruction need undone 
doing usually frees implementation resources 
instructions commit previous instruction committed instruction operation commits 
load store operation commits certain read write appropriate memory value 
speculative execution allows relaxed sc implementations speculatively perform load store operations order 
cases relaxed implementations commit memory operations sooner sc implementations 
consider example program wishes read misses read hits 
relaxed sc processors perform read read furthermore relaxed processors commit read waiting read commit 
sc processors commit read read commits obtains coherence permission block containing 
read committed may need unrolled block containing invalidated due exclusive request processor processor obtains coherence permission block 
sorts techniques hp pa intel pentium pro mips 
speculative techniques complex implication simple relaxed sc implementations speculations relaxed implementations commit memory operations sooner 
performance gap relaxed sc implementations narrow 
gap non zero sc implementations undo instructions frequently exhaust implementation resources uncommitted instructions 
quantitatively current performance gap 
answer depends depends benchmarks memory latencies myriad processor cache implementation parameters 
ranganathan provide example academic state art 
simulate workload scientific benchmarks stanford rice mips processor way instruction issue dynamic scheduling instruction window instructions concurrently active speculative execution caches support outstanding misses distinct blocks assumptions 
consider implementations 
sc aggressive implementation sc uses hardware prefetching speculative loads store buffering 
processor consistency pc aggressive implementation relaxes write read program order uses prefetching speculative loads store buffering 
relaxed consistency rc aggressive implementation relaxes orders prefetching speculative loads store buffering 
quote rc version best performance 
version disables prefetching speculative loads overheads slightly surpass mark hill case making multiprocessors sequentially consistent page benefits rc overlaps memory 
sc sc implementation uses hardware new ideas ranganathan 
table shows execution times applications table 
execution time results ranganathan 
application pc rc sc fft lu mp radix water average normalized execution time sc 
pc improves sc execution rc provides 
sc shows performance gap narrowed hardware comparison unfair pc rc hardware 
performance gap workload 
number depends long program run 
simplistically assumes program runs fixed amount time sc workload execution time model arithmetic average program execution times 
doing yields pc rc reduce execution time respectively 
numbers correspond performance improvements pc rc 
performance gap workloads different may smaller 
relaxed models designed instruction level parallelism scientific workloads tends larger workloads operating systems databases 
performance gap change years 
argument grow latency memory measured instruction issue opportunities grow 
contrary see reasons shrink 
microprocessor designers able apply transistors enhance effectiveness known techniques improving memory system performance 
techniques range mundane measures larger caches concurrent cache misses sophisticated speculation prefetching 
increasing instruction window size example improve performance sc relaxed implementations making instruction window full stalls 
increased window size reduce performance gap absolute difference stalls gets smaller 
due diminishing marginal utility additional instruction window buffer 
second architects invent new microarchitectural techniques speculation applied sc relaxed models 
confident 
techniques special issue ieee computer annual proceedings conferences acm ieee international symposium computer architecture acm international symposium microarchitecture 
second architects past invented ways waste larger transistor budget 
yu intel re examined intel predictions 
predictions accurate technology number transistors chip underestimated processor performance factor due anticipating microarchitecture innovation 
expect innovation continue close patent office 
performance gap happen relaxed models 
middleware authors find worthwhile program relaxed models 
answer depends burden adds middleware authors reason relaxed models 
reasoning relaxed models hard considering relaxed models need consider context 
authoring parallel middleware hard 
programming projects stretch intellectual limits programmers manage complexity adding features making behavior robust staying schedule 
dealing relaxed models necessarily add real cost personnel schedule delay opportunity cost done 
costs relaxed models depends large part complexity reasoning 
find reasoning relaxed models class relaxing orders difficult reasoning sc 
authored half dozen papers subject think carefully correctly precise statement existing models 
certainly middleware authors understand models want spend time dealing definitions various partial orders non atomic operations 
non atomic operation allows effects seen processors manner detectable running programs 
middleware authors understand models fairly level detail able include sufficient fences adding unnecessary ones 
unnecessary fences reduce performance gap seen practice 
addition authors portable middleware compilers need mark hill case making multiprocessors sequentially consistent page master different relaxed models different hardware targets 
disagree argue reasoning models class relaxing orders bad 
unfortunately final technical arbiter complex readers decide 
hardware memory consistency models class relaxing write read program order opinion middleware authors targeting models easier task targeting class relaxing orders assuming causality commercial models class ibm pentium pro sun tso middleware authors reason sc consider placing fences long avoid convoluted code table 
hand compiler writers understand models want ensure convoluted code behaves written 
bottom line recommend systems implement sc hardware memory consistency model 
believe performance boost implementing models class relaxing orders justify additional intellectual burden relaxed models place middleware authors complex commercial systems 
viable alternatives 
provide class sc implementation add optional relaxed support 
example provide additional instructions relaxed sun block copy instructions multiple memory consistency model modes 
care exercised adding options doing incurs implementation verification costs 
multiple modes particular add significant verification costs enable large new cross product hardware interactions 
second implement model class relaxing write read program order guarantees causality 
models allow hardware play tricks easily sc affecting middleware authors 
woe affected 
option sense new implementations existing systems relaxed write read program order lead subtle compatibility problems old systems provided sc 
third implement relaxing write read program order model add optional relaxed support 
summary computers contain multiple processors sharing memory 
hardware systems define memory consistency model precisely define allowable behavior memory 
reasonable model shared memory multiprocessor behaves multiprogrammed uniprocessor 
model formalized lamport sequential consistency sc 
sc appears limit implementation optimizations researchers practitioners defined relaxed models 
models relax order writes reads processor consistency ibm pentium pro tso aggressively relax order normal reads writes wo rc alpha powerpc rmo 
argued advent speculative execution multiprocessor hardware implement sc cases models just relax ordering writes reads 
case aggressively relaxed models effective choice performance gap aggressively relaxed models sc sufficient justify exposing complexity aggressively relaxed models authors low level software 
argue sc preferred viable alternatives exist 
support sc optional relaxed extensions 
doing speed operations pays implementation verification costs regardless relaxed support practice 
second support model ibm pentium pro tso allow hardware play tricks easily sc appears sc middleware 
option sense new systems compatible old systems models 
third support models optional relaxed extensions 
close comparing instruction sets hardware memory consistency models interfaces hardware software boundary 
current instruction sets programmers compilers sequential model processor 
current implementations complex pipelines order execution speculative execution perform instructions program order time considerable logic preserve appearance program order software 
memory consistency model interface similar choice 
sc hide order complexity software cost implementation complexity 
relaxed models complexity visible software interface 
instruction sets think sc keep complexity interface implementation belongs 
acknowledgments ideas interactions people wisconsin sabbatical sun microsystems graciously supported greg papadopoulos 
peo mark hill case making multiprocessors sequentially consistent page ple may may agree constructive comments sarita adve doug burger william collier kourosh gharachorloo andy glew john hennessy rebecca hoffman alain gi mukherjee thomas ruf sohi jim smith dan 
supported part wright laboratory avionics directorate air force material command usaf arpa order 
nsf mip mips donations sun microsystems 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright notation thereon 
views contained authors interpreted necessarily representing official policies endorsements expressed implied wright laboratory avionics directorate government 
sarita adve 
designing memory consistency models shared memory multiprocessors 
phd thesis computer sciences department university wisconsin madison november 
sarita adve kourosh gharachorloo 
shared memory consistency models tutorial 
ieee computer december 
douglas burger james goodman editors 
special issue transistor architectures 
ieee computer december 
kourosh gharachorloo 
memory consistency models shared memory multiprocessors 
phd thesis computer system laboratory stanford university december 
kourosh gharachorloo anoop gupta john hennessy 
techniques enhance performance memory consistency models 
proceedings international conference parallel processing vol 
architecture pages august 
anoop gupta john hennessy kourosh gharachorloo todd mowry wolf dietrich weber 
comparative evaluation latency reducing tolerating techniques 
proceedings th annual international symposium computer architecture pages june 
intel 
pentium pro family developer manual volume operating system writer manual january 
leslie lamport 
multiprocessor computer correctly executes multiprocess programs 
ieee transactions computers september 
parthasarathy ranganathan vijay pai abdel shafi sarita adve 
interaction software prefetching ilp processors shared memory systems 
proceedings th annual international symposium computer architecture pages june 
parthasarathy ranganathan vijay pai sarita adve 
speculative retirement larger instruction windows narrow performance gap memory consistency models 
proceedings acm symposium parallel algorithms architectures spaa pages june 
david wood mark hill 
cost effective parallel computing 
ieee computer february 
albert yu 
microprocessors 
ieee micro december 
mark hill case making multiprocessors sequentially consistent page 
