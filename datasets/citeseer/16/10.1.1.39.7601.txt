design patterns binding distributed systems stephen crane jeff magee nat np doc ic ac uk department computing imperial college science technology medicine london sw bz uk 
september reports design patterns useful regis toolkit constructing distributed applications 
regis supports construction system set components 
components interact accessing local remote services 
access implemented set communication protocols 
protocol chosen subsequently changed runtime 
application construction driven configuration description specifies application structure graph interconnected components 
structure change runtime 
design patterns describe satisfy requirement flexible support environment accommodate multiple communication protocols satisfies requirement dynamic inter component binding 
protocol structuring pattern associated binding pattern seamlessly integrate client binding third party manager binding services general application configuration management distributed systems 
regis constructs distributed application set components 
component provides services accessed components may require access services components 
components may composed hierarchically form composite components 
component clearly defined interface terms services provides requires 
components execute concurrently 
depicts simple system consisting components 
source filter sink pipeline 
diagram filled circle represents service provided component empty circle represents service required component 
binding represented arc associates required service provided service 
regis uses defined language called darwin graphical textual representation describing structures 
example binding source filter components declared darwin bind source filter general bindings requirements may bound service provision 
binding darwin results communication path runtime component requiring service providing service 
regis services implemented instances system provided user defined interaction classes 
examples system provided classes ports streams events 
primitive components implemented lightweight active objects derived class process 
active objects implement service accessed interaction object 
darwin enables specification complex structures elaborated application started may evolve execution progresses 
initial system structure may modified external configuration management requests may cause new components created bindings changed 
components may colocated heavyweight operating system process may remote hosts 
component location decided runtime 
application regis may communication protocol accessing different services atm tcp ip 
application configuration flexibility supported regis requires similar flexibility execution support environment 
outline object patterns useful designing implementing runtime architecture satisfies flexibility requirements 
section outlines pattern structure protocol layers 
sections describe various binding requirements integrated framework 
protocol framework fundamental operation regis distributed manner classes 
class implements safe efficient distributed pointer objects derived 
components service provisions derived service requirements derived 
establishing binding requirement provision involves initialising requirement provision 
requirement bound service able communicate 
previous versions regis runtime supported single fixed communication protocol udp ip managed thread dedicated receiving incoming messages udp port 
structure sufficed regis instructional testbed students 
requirements collaborative projects led decision support multiple transport layers atm multicast ip process incoming messages efficiently support multimedia communication 
satisfy requirements base classes service provisions requirements sap service access provision sar service access requirement extended dynamic configurable protocol stacks 
protocol layers channel data user level threads implementing regis components network devices managed underlying operating system 
act bi directional chains responsibility 
interfaces design object implementing protocol layer offer interfaces layers interface layer passes information consumed interface layer passes information transmitted 
interfaces encapsulated classes passing data stack passing data stack 
classes data passed interface identified data communicated transmitted received data pertinent operation protocol layers indications exceptional events configuration requests 
data communicated passed buffer objects allow protocols add headers message efficiently shared protocols copying 
indications exceptional events parameters configuration requests passed attrib objects lists name value pairs 
additional methods required connect protocols connected vice versa 
class virtual int buffer virtual int configure attrib virtual int class virtual int buffer sap virtual int exception attrib virtual int protocol layers derive receive normal circumstances 
data 
interesting cases top bottom protocol stacks 
external interfaces bottom protocol layers handle reception transmission data unix device descriptors 
means provide interface protocol layers derive handle events occurring descriptors network connection 
handling events example reactor pattern encapsulated io class 
lowest protocol layers multiply derived io classes 
deliver configure query io deliver exception mux proto name depth lowest layer class hierarchy lower protocol layers objects services multiple layers protocol demultiplexing necessary 
remote service passed bottom protocol layer message transmitted included header message 
message received contains local pointer destination 
services linear stack protocols process incoming message 
incoming message delivered service passing bottom protocol service stack 
functionality encapsulated mux class reused transport protocols 
similar protocol protocol multicasts incoming buffer services multicast communication efficient allowing multiple services share network endpoint 
topmost layers communication software pass received messages components threads accept messages guarded receive 
sap class derived remotely implements guarded receive proto name depth new proto exception receive stk sap bottom deliver configure query deliver exception arm disarm bind binding transmit stk sar insert remove top bottom class hierarchy upper protocol layers sections design pat prev prev upper lower stk lower top bottom prev snapshot typical protocol configuration terns performing configuration reconfiguration dynamic protocol stacks described familiar gang style 
configuration object behavioural pattern 
intent configure binding endpoints making optimisation decisions transmission 
known software integrated circuit 
programming inthe large 
motivation simplest connection component instances darwin configuration description performed bind statement bind source filter endpoints colocated distributed determined runtime 
furthermore model dictates transmission unbound endpoint block invoker binding taken place 
caused frequent appearance fragment pseudo code transmit data data data transmissions barring required redundant tests validity locality 
common form binding occurs open systems degree autonomy client server import source service possible implement second form binding similar fashion 
applicability transient configurational protocols create application initial structure order decouple structural issues normal execution 
structure class structure configurational protocols binding importation shown 
participants ffl attached required side binding transmission 
class deliver deliver deliver deliver proto import class diagram bind protocol 
waits binding established checking provided endpoint local destroying 
ffl efficient shortcut created provided endpoint address space required 
ffl import augments behaviour querying nameserver required service transmission 
consistent behaviour guaranteed pathological case program imports service earlier exported 
collaborations depicts collaboration initial binding establishment 
transmission requirement side protocol stack consists element 
transmission attempted deliver deliver darwin bind local send wait valid interaction diagram bind protocol 
causes invoker blocked endpoint bound configuration language darwin bind 
valid service obtained determines local address space 
creates short circuit remote protocol stack specified explicitly configuration language implicitly system default 
consequences motivation efficient communication normal execution 
transient bind protocol establish validity binding create efficient shortcut case endpoints colocated allows express result test validity absence element result test locality presence element 
implementation implementation critical assumption semantics required interfaces transmission unbound interface block thread attempting 
responsibility bind protocol wake thread binding taken place 
sample code space limitations preclude inclusion source code 
known uses distributed programming environments configuration languages clarify application structure 
conic examples 
related patterns protocols example chain responsibility pattern 
service requirements closely related proxy pattern 
classes import examples decorators adaptor 
reconfiguration object behavioural pattern 
section dealt establishment initial bindings focuses dynamically destroying re establishing bindings 
intent provide service bindings modules created subsequently modified safe fashion cooperation programmer component owning binding required 
known third party bind service 
configuration management service 
motivation long running programs require steering enable cope changing environments 
model steering comprises combination basic operations create binding destroy binding destroy component 
preservation consistency pressing concern immediacy destruction operations take account 
applicability rebind protocol provide reconfiguration hooks allow manager modify structure running application consistency endpoints preserved 
structure contains omt class diagram reconfiguration protocol layer 
sap bound unbound current previous deliver deliver request request rebind deliver request proto configure deliver deliver class diagram rebind protocol 
participants discuss classes specific rebind protocol enclosed dotted box 
ffl rebind specifies initial state protocol 
transmission attempted element creates bind service bound unbound states switches unbound state destroys 
ffl advertises bind service interface nameserver 
forwards binding requests received interface current state having filtered responded requests path provided endpoint namespace 
maintains current previous states switches demand 
handles configuration requests storing value safe status 
ffl class containing interface required concrete classes bound unbound 
stores 
classes deriving required provide routine process defer bind requests 
ffl unbound manage unbound state 
state safe perform binding operations configuration language initial binding advertised bind service 
binding performed class initiates transition bound state 
ffl bound manage bound state 
transition state occur unbind operation processed 
rebind operation received binding unsafe reconfigure kept pending 
reconfiguration driven reception request binding safe marking binding safe 
test possible reconfiguration done transmission order normal operation efficient possible 
collaborations depicts collaborations elements unbind protocol object interaction diagram 
abound export request proto deliver deliver set abound request set deliver receive unbind set receive bind collaborations rebind protocol 
phases collaboration shown 

transmission performed element 
abound created 
bind service exported nameserver transmission continues element 

transmission attempted unbound state 
invoker blocked bind request received bind service initial configuration description 
transmission completed protocol enters bound state 

unbind request received forwarded bound element 
safe change binding done protocol enters unbound state 
consequences ffl rebind allows programmer advertise long running programs bindings mutable response changes external environment 
ffl earlier implementation third party bind service required component programmer mark service safe modify protocol nature rebind necessitates operation elements protocol stack 
direct consequence potential protocol stacks encapsulate state facet connection buffers awaiting sequenced datagram protocol 
requires protocol layers possess state acknowledge shutdown command stateless layers ignore 
implementation implementation rebind protocol element leads transparent interaction class manages 
alternative implementation merging rebind functionality endpoint requires re implementation class endpoint clearly undesirable system regis endpoints unconstrained 
sample code space limitations preclude inclusion source code 
known uses third party binding widely acknowledged literature requirement interactive reconfiguration 
friedberg observes implementation efficient transparent reconfiguration requires mechanism arbitrary module create destroy binding modules active participation 
call facility third party connect 
reconfiguration provides ability change partners bound interface 
module affected change partners reconfiguration transparent 
module participate changing partners reconfiguration intrusive provides isolation 
online reconfiguration essential longrunning applications provide continuous service 
earliest recognition need telephony 
related patterns rebind protocol example state pattern 
summary status notion protocol sense described original 
terms design patterns familiar chain responsibility 
research systems kernel horus exploited concept bind protocol described properly virtual protocol terminology commercial systems concept useful orbix refers protocols proxies filters 
ultimately course systems indebted ritchie original streams eighth edition unix 
claim originality application protocols configuration managed evolution dynamic distributed systems minimal impact efficiency normal execution 
original intent merely open system variety transports atm reliable retaining flexibility interaction classes architectural support necessary allowed re engineer ideas configuration evolution consistent way 
authors acknowledge contribution colleagues distributed software engineering section formulation ideas regis 
information regis may 
doc ic ac uk regis regis html 
magee dulay kramer 
regis constructive development environment distributed programs 
iee iop bcs distributed systems engineering journal september 
magee dulay eisenbach kramer 
specifying distributed software architectures 
appear fifth european software engineering conference barcelona september 
schmidt suda 
service configurator framework exten sible architecture dynamically configuring concurrent multi service network daemons 
proceedings second international workshop configurable distributed systems pps ieee pittsburgh march 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 
isbn 
dulay kramer magee sloman 
distributed system construction experience conic toolkit 
experiences distributed systems editor pps 
springer verlag 
barbacci doubleday building fault tolerant distributed applications 
proceedings international workshop configurable distributed systems pps iee london march 
kramer magee young 
unifying fault change management 
proceedings ieee international workshop distributed computing systems pps cairo 
friedberg 
transparent reconfiguration requires third party connect 
technical report department computer science university rochester new york november 
malley peterson 
dynamic network architecture 
acm transactions computer systems may 
van renesse hickey birman 
design performance horus lightweight group communications system 
technical report department computer science cornell university ithaca new york 
orbix technical overview 
iona technologies reilly institute row dublin ireland july 
ritchie 
stream input output system 
bell laboratories technical journal october 
magee 
configurable highly available distributed services 
appear proceedings th ieee symposium reliable distributed systems bad germany september 

