detecting anomalous unknown intrusions programs ghosh james frank charron reliable software technologies circle suite sterling va com www com ubiquity internet connection desktops boon business cause concern security digital assets may exposed 
firewalls commonly deployed solution secure corporate assets intrusions vulnerable errors con guration ambiguous security policies data driven attacks allowed services insider attacks 
failure adequately protect digital assets computer attacks boon commercial intrusion detection tools 
general approaches detecting computer security intrusions real time misuse detection anomaly detection 
misuse detection attempts detect known attacks computer systems 
anomaly detection uses knowledge users normal behavior detect attempted attacks 
primary advantage anomaly detection misuse detection methods ability detect novel unknown intrusions 
presents study employing neural networks detect existence anomalous unknown intrusions software system anomaly detection approach 
connectivity internet corporate academic home users desktop machines ubiquitous 
internet enabled nearly seamless connectivity users email world wide web pages services 
internet enabled boon electronic commerce funded defense advanced research projects agency darpa contract daah 
views contained document authors interpreted representing official policies expressed implied defense advanced research projects agency government 
enabling medium computer attacks corporate university assets exposed internet 
firewalls initially touted panacea computer security problems 
restricting access computer systems known ports served eliminate computer exploitation attacks network services run host site 
commonly understood merely reduce exposure eliminate vulnerabilities computer systems 
computer attacks compromise digital assets spite exploiting errors rewall con guration exploiting ambiguities security policies obtaining access backdoors computer modems attacking network services allowed rewall insider privilege gain unauthorized access sensitive assets 
furthermore engender false sense security results relaxed security individual host machines 
result penetration rewall successful internal webs trust computers exploited obtain increasing levels access sensitive assets 
failure adequately secure computer systems led growth intrusion detection software industry 
intrusion detection software attempts detect possible attacks software systems real time critical assets compromised 
purports intrusion detection software silver bullet computer security problems combining intrusion detection security mechanisms strong access controls time passwords remote authentication secure shells regular auditing provide defense depth majority computerbased attacks 
assistance intrusion detection systems organizations aware number attacks experience daily basis intrusion detection systems 
intrusion detection systems components detection possible attacks response attacks 
addresses rst component ectively detect attacks computer systems 
second component involves implementing organization policy blocking attack progress attacker 
intrusion detection techniques partitioned main approaches misuse detection anomaly detection 
misuse detection methods attempt model attacks system speci patterns systematically scan system occurrences patterns kumar spa ord lunt garvey lunt porras kemmerer ilgun rubin 
process involves speci encoding previous behaviors actions deemed intrusive malicious 
anomaly detection assumes intrusions highly correlated abnormal behavior exhibited user application 
basic idea baseline normal behavior object monitored ag behaviors signi cantly di erent baseline abnormalities possible intrusions 
see lunt lunt jagannathan lunt lunt haeseleer porras neumann sources anomaly detection approaches 
signi cant disadvantage misuse detection approaches detect attacks trained detect 
novel attacks variants common attacks go undetected 
time new security vulnerabilities software discovered exploited day reactive approach embodied misuse detection methods feasible defeating malicious attacks 
main advantage anomaly detection approaches ability detect novel attacks software systems variants known attacks deviations normal usage programs regardless source privileged internal user unauthorized external user 
drawback anomaly detection approaches known attacks may detected particularly established pro le user 
detected di cult characterize nature attack forensic purposes 
drawback anomaly detection approaches malicious user knows pro led change slowly time essentially train anomaly detection method learn malicious behavior normal 
high false positive rate may result narrowly trained detection algorithm conversely high false negative rate may result broadly trained anomaly detection approach 
novel anomaly detection approach intrusion detection described 
new vulnerabilities software reported daily basis forums bugtraq challenge intrusion detection research create techniques detect novel attacks computer systems 
status quo commercial intrusion detection software represented misuse detection approaches scan known attacks 
techniques detect novel attacks computer systems times detect simple variations known attacks 
key distinction intrusion detection performed software programs 
intrusion detection systems analyze network tra host system logs 
focuses system processes attacks computer systems fact attacks speci software programs 
analyzing usage mis usage speci software programs computerbased intrusions tracked ner grain resolution 
forrest examines system processes anomalous behavior approach captures system calls programs uses table look algorithm detecting potential intrusions forrest haeseleer 
application machine learning intrusion detection developed lane brodley 
lane brodley similar machine learning distinguish normal anomalous behavior 
di erent build user pro les sequences individual normal user commands attempt detect intruders deviations established user pro le 
building pro les basis builds pro les software behavior attempts distinguish normal software behavior malicious software behavior 
advantages approach vagaries individual behavior abstracted program behavior individual usage studied 
approach described applies machine learning techniques learn normal behavior particular program order detect 
providing detection software process level mul bugtraq viewed line www org lsv archive bugtraq html tiple diverse overlapping detectors embedded software infrastructure provide system wide coverage 
employing anomaly detection neural networks desiring ability detect novel unknown intrusions anomaly detection approach employed research 
neural networks learn normal behavior monitored process detect potential intrusions software 
de ning aspect approach anomaly detection performed software process level machine learning techniques 
monitoring process level adds layer abstraction abnormal process behavior detected irrespective individual users behavior 
layer abstracts users individual behavior allows anomaly detection set users behavior 
approach taken research enables observable external states program input output internal states captured instrumentation employed training neural network detection misuse 
source code monitored program readily available preclude neural networks intrusion detection 
advantage black box approach detect malicious attacks commercial software source code unavailable 
added advantage white box capable approach allows access internal states program provides additional information detecting anomalous program behavior 
di erentiation anomalous normal behavior occur creating expectations program usage behavior attempting detect deviations normal behavior 
expectations normal program behavior created dynamic analysis process normal operational conditions 
approach differs model approaches specify correct usage conversely programs kumar spa ord 
architecture system analyzing programs malicious behavior shown 
system designed enable di erent applications neural networks test vectors interchangeably 
architecture constructed components extracted replaced di erent version ecting components 
approach begins training neural networks supervision feedback applied network training indicate input normal anomalous 
training supervision requires labeled input feasible line detection intrusions 
cases historical archival data exists useful training network learn normal behavior cases recognizing non normal behavior 
approach anomaly detection permits programmatic detection intrusions deviations normal behavior need detailed speci cation model correct behavior 
recall line operation mode tool neural network classi es inputs internal states anomalous normal 
anomalous inputs anomalous internal states assume indicators potentially dangerous behavior 
approach proven easily modi able monitor processes tested 
drawback approach training period neural network may take order hours days complete 
approaches build user pro les su er problem 
pitfall aware network data trained 
known ect di erent training sets results 
nal drawback implementation new data added training set neural network re trained entire training set just data added training set 
backpropagation network backpropagation network backprop probably commonly neural network 
standard architecture consists input layer hidden layer neurons directly connected input output nodes output layer 
typically connections neurons layer previous layer 
generalized capability 
produce nearly correct outputs inputs training set 
theory hidden layers needed neural network network generate arbitrarily complex regions state space lippmann 
backprop main drawbacks tends computationally complex time consuming train 
suited applications classi cation function approximation prediction jain 
purposes intrusion detection backprop suited normal test cases anomalous test driver normal anomalous 
input program analysis output neural network detect 
evaluate training recall performance architecture analyzing programs anomalous malicious behavior neural networks 
classifying normal behavior anomalous behavior 
training cycle backprop proceeds distinct phases 
input submitted network activations level neurons cascaded forward 
training phase desired output compared network output 
instance training supervision desired output anomalous data intrusion detection 
vectors agree network updates weights starting output neurons 
change weights calculated previous layer 
process continues cascade layers neurons input neurons name backpropagation 
neural network implementation backprop implementation provided advantages 
backprop networks classifying complex relationships inthe case anomaly detection useful classifying normal anomalous states 
generalized backprop neural network shown 
input layer network governs number inputs internal states network uses classi cation 
likewise output nodes govern total number classes network classifying 
backprop trained supervision desired outputs input pattern supplied network training phase 
experimental analysis objective experimentation described section determine ective implemented neural network detecting misuse programs 
approach examines program inputs internal states determine program mis 
experiment designed detect potential misuse system programs 
linux lpr program subverted certain platforms bu er ow attack 
noted experiment performed blackbox white box analysis access source code lpr program freely available 
experiment run repeatedly di erent initial weightings neural network order account potential statistical liers results 
wp wpq iq ni hp 
ij hi 
np output layer hidden layer topology elementary backpropagation network architecture hidden layer input nodes output nodes 
linux lpr exploitation experimental results set experiments explores neural network detect anomalous standard linux lpr program 
linux lpr program known bu er ow vulnerability exploited input 
exploit uses bu er ow attack speci lpr ags enable user execute root shell perform root privileged commands 
goal experimentation determine ective neural network detecting anomalous system programs 
neural network trained malicious normal cases random input 
set experiments examines internal states process anomaly detection 
general description lpr program exploited manner 
auxiliary program written lled large character bu er 
bu er speci character strings added overwrite return address stack frame address input layer new instruction executed placed bu er instruction usually bin sh 
program exec lpr child process bu er ag arguments 
experimentation auxiliary program lpr program modi ed write speci inputs internal states le inputs neural network 
neural network input patterns consisted combination inputs distinct sources 
rst source character bu er passed lpr program ag argument 
encode character bu er positions 
done attempt reduce di erence normal ag input typically order characters ow bu er approximately characters 
ow attempts characters inputs non ow attempts entire string course exceeded characters 
encode input characters value integer value character pad unused inputs 
second source input internal len variable lpr card function 
card function chosen lpr ag inputs particular procedure 
len variable interesting represents length input parameter 
len variable card constituted additional inputs procedure executed multiple times encoded len value pad unused inputs 
training sets input patterns neural networks training sets constructed sets malicious inputs normal lpr inputs random inputs 
malicious inputs generated exploit program mentioned 
malicious inputs necessarily generate bin sh generated look similar 
normal lpr inputs generated printing valid les various ag options 
random inputs generated fuzz program miller limited length characters 
recall set test performance neural networks trained recall set created lpr experiments 
recall set consisted normal lpr inputs malicious inputs random inputs 
input patterns unique training sets 
recall sets di erent networks modi ed experiments include speci subset input patterns necessary particular network 
internal state train network inputs corresponding len variable clamped network recall phase 
experiments neural network lpr exploit experiments wasa layer backpropagation network architecture consisted hidden layer input layer output layer 
nodes hidden layer output node variable number input nodes 
table summarizes experimental setup experiments 
inputs neural network nn distinguished experiments inputs external lpr inputs internal lpr states 
external inputs represent standard input lpr program 
len variable input neural network internal column checked table 
number input nodes hidden nodes output nodes neural network experiments table 
distinguishing parameter experiments random input train network 
random data training network column checked table 
neural network trained classify random data anomalous network attempts distinguish normal anomalous program 
goal experimentation determine parameters useful conversely useful detection misuse program 
discussion results table shows results experiments 
experiments run times di erent initial weights network 
performance network evaluated percentage inputs classi ed correctly percentage false positives percentage false negatives 
false positive de ned normal input anomalous network 
false negative de ned anomalous input classi ed normal network 
distinctions constitute error classi cation network 
results averages minima maxima runs categories 
summarize results best results obtained experiments neural network trained random data generation 
recall neural network trained classify random data anomalous 
including internal state variable len addition external lpr inputs impact results signi cantly 
fact experiments neural network trained tested internal len variable exclusively results weakest 
arguably training internal len variable exclusively narrow detection range anomalous malicious usage 
neural network experiment converge acceptable mean squared error results omitted 
experiment error rate approximately exclusively false negatives 
experiments false positives detected 
training heavily biased normal inputs cases neural network incorrectly classify normal input anomalous input false positive case 
simple benchmark comparison consider monkey neural network choosing input normal anomalous 
monkey uses simple algorithm determining nn inputs nn layers num external internal inputs hidden outputs random data included table experimental setup detection anomalous lpr program 
input normal anomalous ips coin 
likelihood monkey classify input normal likelihood input classi ed anomalous 
actual inputs sent program prior probabilities anomalous normal 
probability monkey commits false negative probability anomalous input sent program monkey said normal 
independent events false negative probability 
probability monkey commits false positive probability normal input sent monkey said anomalous 
false positive probability calculated similarly 
results neural network better monkey 
false positives detected compared monkey false negatives neural network ranged compared monkey 
experiments experiments neural network bad monkey false negatives explained discussion extremely compared monkey experiments 
intrusion detection systems reducing false positive rate perceived greater responsibility reducing false negative rate 
reasoning excessive false positive rate lead cry wolf syndrome pays attention intrusion detection software 
hand provided multiple overlapping detectors small false negative rate tolerable missed attempts detection unit may correctly 
discussion results experiments 
experiment experiment considered baseline lpr exploit experiments see table 
demonstrates neural network performed training accessible lpr inputs reasonably sized test set training randomly generated input 
table see baseline error rate exclusively composed false negatives 
experiment experiment extends baseline experiment experiment accessible inputs lpr program internal state represented len variable card function 
experiment attempts determine internal program state performance detection improved 
results indicate signi cant impact improvement 
results similar experiment statistically signi cant 
experiment network trained random inputs diversify notion anomalous inputs 
idea expose network number di erent types anomalous input strictly known intrusion attempts 
training randomly generated inputs may way detecting novel intrusion attempts 
performance network excellent experiment 
average error rate experiment 
conclude including randomly generated patterns training set vastly increased performance network allowing network correctly classify wide range input patterns high degree accuracy 
results indicates anomaly detection approach misuse detection detecting novel unknown intrusion attempts especially trained random data classi ed anomalous 
experiment experiment extends experiment including internal state variable len 
goal determine adding internal state information performance neural network improved 
seen table adding internal variable statistically impact results 
classi ed correct false positive false negative num avg min max avg min max avg min max table results detection anomalous lpr program 
experiment experiment uses internal state exclusively input neural network training recall 
results worst experiments signi cantly worse experiments 
closer look data revealed recall anomalous data randomly generated classi ed normal network false negative case 
contributed large false negative rate experiment 
reason randomly generated data length approximately close normal training set 
hand network correctly classifying anomalous input bu er 
strictly len variable ective detecting bu er ows detecting potential program 
problem stems fact single internal variable chosen provide su cient information classify input patterns 
inspecting training set reveals anomalous input patterns exactly looking internal variable len 
surprise network converged state input vector classi ed anomalous 
alleviate problem steps taken 
rst additional internal variables 
second pair internal state inputs done earlier experiments 
experiment reveals problematic areas encountered research identifying information provides maximum utility detection anomalous behavior 
experiment neural network experiment converge acceptable mean squared error results omitted 
describes novel neural networks detecting misuse programs 
important observations result 
results demonstrate misuse programs detected neural networks 
results indicate training randomly generated data lead best performance detection possible novel misuse attempts area misuse detection approaches weak 
furthermore results show bene applying anomaly detection process level abnormal process behavior detected irrespective individual users behavior 
approach abstracts users individual behavior allows anomaly detection set users behavior 
experiments raise interesting discussion internal program states training neural networks 
choosing useful internal states general di cult process 
particular state identi ed important time consuming task usually relying heavily code inspection 
nal experiment provides warning placing emphasis particular internal state single input matter 
best approach take broad representative sample inputs internal states 
research attempt identify important internal states anomalous programs 
results may important detecting attempted misuse programs erroneous program behavior 
haeseleer haeseleer forrest helman 

immunological approach change detection algorithms analysis implications 
ieee symposium security privacy 
forrest forrest hofmeyr somayaji 

computer immunology 
communications acm 
garvey lunt garvey lunt 

model intrusion detection 
proceedings th national computer security conference 
ilgun ilgun 

ustat real time intrusion detection system unix 
master thesis computer science dept ucsb 
jain jain mao 

arti cial neural networks tutorial 
ieee computer 
kumar spa ord kumar spa ord 

pattern matching model misuse intrusion detection 
coast project purdue university 
lane brodley lane brodley 

application machine learning anomaly detection 
proceedings th national information systems security conference pages 
lippmann lippmann 

computing neural nets chapter part pages 
ieee press piscataway nj 
neural networks theoretical foundations analysis 
lunt lunt 

ides intelligent system detecting intruders 
proceedings symposium computer security threat countermeasures 
rome italy 
lunt lunt 

survey intrusion detection techniques 
computers security 
lunt jagannathan lunt jagannathan 

prototype real time system 
proceedings ieee symposium security privacy 
lunt lunt javitz neumann garvey 

real time intrusion detection expert system ides 
technical report computer science laboratory sri 
miller miller koski lee murthy natarajan 

fuzz re examination reliability utilities services 
technical report university wisconsin computer sciences dept rubin rubin 

authentication keystroke dynamics 
th acm conference computer communications security 
porras kemmerer porras kemmerer 

penetration state transition analysis rule intrusion detection approach 
eighth annual computer security applications conference pages 
ieee computer society press 
porras neumann porras neumann 

emerald event monitoring enabling responses anomalous live disturbances 
proceedings th national information systems security conference pages 
