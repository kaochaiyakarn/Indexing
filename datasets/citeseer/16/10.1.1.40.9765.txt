tr january complexity event ordering shared memory parallel program executions robert netzer netzer cs wisc edu barton miller bart cs wisc edu computer sciences department university wisconsin madison dayton street madison wisconsin presents results complexity computing event orderings sharedmemory parallel program executions 
program execution formally define problem computing orderings execution exhibited exhibited prove computing orderings intractable problem 
formal model shared memory parallel program execution sequentially consistent processor discuss event orderings terms model 
programs considered fork join counting semaphores event style synchronization 
define feasible program execution execution program performs events observed execution may exhibit different orderings events 
program execution exhibiting data dependences shared data observed execution feasible 
define relations capture orderings feasible program executions 
happened concurrent ordered relations defined show events execute certain order execute concurrently execute order concurrently 
ordering relations defined ways 
sense show orderings guaranteed feasible program executions sense show orderings potentially occur feasible program execution due timing variations 
prove computing ordering relations np hard problem computing ordering relations np hard problem 
key words event ordering parallel processing race conditions synchronization 
research supported part national science foundation ccr office naval research digital equipment external research 
copyright robert netzer barton miller 
condensed version appears proc 
int conference parallel processing st charles il august pp 
ii ii 
tr january 
execution shared memory parallel program order events execute may enforced explicit implicit synchronization may occur chance 
events explicitly synchronized force certain order execution events may occur different order execution 
due nondeterministic timing variations program may different occasions execute exactly events exhibit different orderings events 
formally define relations capture orderings alternate executions prove computing relations intractable problem 
consider programs executing sequentially consistent processors fork join counting semaphores event variables 
formal model shared memory parallel program execution define event orderings terms model 
program execution characterize program executions execute exactly events may exhibit different event orderings 
program execution exhibiting data dependences shared data execute events set alternate program executions called feasible program executions defined considering different orderings allow data dependences exhibited occur 
various orderings exhibited exhibited feasible program executions captured defining ordering relations happened concurrent ordered 
relations defined sense sense 
relations show orderings guaranteed occur feasible program executions relations show orderings potentially occur due timing variations 
prove computing relations np hard problem computing relations np hard problem 
results shown hold programs fork join counting semaphores event style synchronization post wait clear primitives show results hold computing orderings occurring program executions exhibiting events execution regardless original shared data dependences occur 

program execution model section briefly formal model shared memory parallel program executions 
model contains objects represent program execution statements executed order axioms characterize properties objects possess 
subsequent sections model characterize behavior execution exhibited alternate event orderings behavior execution exhibited obeying semantics synchronization operations 
model provides formalism reasoning shared memory parallel program executions section brief presentation model earlier lamport theory concurrent systems 
tr january assume existence atomic operations 
consider class shared memory parallel programs execute sequentially consistent processors fork join counting semaphores event style synchronization 
program execution described collection events relations events 
event represents execution instance set consecutively executed program statements 
distinguish types events synchronization event instance synchronization operation computation event instance group statements belonging process synchronization operations 
temporal ordering relation describes temporal ordering events program execution means completes begins sense action affect action means execute concurrently completes begins 
shared data dependence relation indicates event causally affects means accesses shared variable accesses accesses modification variable 
define program execution triple finite set events relations described 
temporal ordering shared data dependence relations satisfy axioms describe properties valid program execution possess 
omit axioms required prove results 

problem statement program execution temporal ordering events guaranteed 
execution program perform exactly events due nondeterministic timing variations exhibit different temporal ordering events 
section characterize program executions exhibiting alternate temporal orderings define relations capture orderings program executions 
subsequent sections prove computing relations intractable problem 

feasible program executions program execution feasible program execution just feasible program execution implied describes execution program performs exactly events may exhibit different temporal orderings 
execution exhibits shared data dependences superscripted arrows denote relations write shorthand shorthand 
definition data dependence different standard ones definition combines notions flow anti output dependence explicitly state variable involved 
tr january execute exactly events result proven showing execution result statement instance depends values variables reads program input dependences uniquely characterize values step computation 
program execution feasible program execution satisfies axioms model conditions state valid program execution program execution obeying axioms mentioned section possessing events shared data dependences describes execution guaranteed potentially occurred 
statement holds program executes nondeterministic statements capable executing events denote set feasible program executions characterized just implied 

ordering relations program execution set feasible program executions define relations shown table summarize temporal orderings feasible program executions happened chb concurrent ccw ordered mow cow table 
ordering relations set feasible program executions relation type happened concurrent ordered defined capture orderings 
relations describe orderings guaranteed feasible program executions relations describe orderings potentially occur statement hold interactions external environment modeled shared data dependences 
double arrows denote concurrent ordered relations emphasize symmetric 
tr january feasible program executions happened relations show events execute specific order concurrent relations show events execute concurrently ordered relations show events execute order concurrently 

related problem computing event orderings previously addressed researchers 
program execution ghosh padua helmbold mcdowell wang attempt compute orderings guaranteed occur execution exhibiting events irrespective original shared data dependences 
callahan consider event orderings context static analysis parallel fortran programs 
ghosh padua attempt compute graph shows orderings programs event style synchronization 
consider ordering constraints imposed shared data dependences method overlooks orderings 
helmbold mcdowell wang consider programs counting semaphores algorithms computing orderings 
callahan prove computing orderings guaranteed occur executions program np hard problem data flow framework computing orderings 
ghosh padua describe method computing guaranteed run time ordering events program executions fork join event style synchronization post wait clear operations 
construct graph called task graph contains single node synchronization event program execution 
task start task edges added represent orderings imposed fork join operations machine edges added represent orderings events belonging process 
synchronization edges added represent guaranteed orderings imposed synchronization 
wait node post nodes triggered wait identified 
post trigger wait path wait post indicate wait preceded post path post wait includes clear node 
synchronization edges added closest common ancestors posts wait 
resulting graph intended show guaranteed ordering events iff path nodes representing events 
method account orderings imposed shared data dependences graph shows ordering ordering enforced shared data dependence 
consider program fragment shown 
task graph case created task completely executes created tasks shown 
execution shared data dependence statement instance 
dotted lines represent orderings imposed fork operation solid line represents guaranteed ordering drawn closest common ancestor post nodes wait node 
graph path post nodes 
posts execute order 
due shared data dependence statement instance possible right post execute left tr january post wait post wait wait post post fork join fork task start edge edge 
example program fragment task graph post 
shared data dependence occur clause execute causing wait issued right post 
example illustrates programmer intentionally introduce synchronization shared variables events ordered shared data dependences 
method attempts compute orderings consider dependences 
prove section exhaustively computing orderings program executions event style synchronization clear operations intractable problem 
trace program uses counting semaphores helmbold mcdowell wang algorithm compute orderings computing safe orderings 
ordering safe orderings contains guaranteed occur executions exhibit events regardless dependences 
algorithm operates phases 
semaphore order th event th event trace 
transitive closure union ordering intra process orderings defines happened relation 
relation unsafe execution performing events exhibit different pairing semaphore operations 
second phase happened relation altered event ordered events semaphore 
resulting relation safe overly conservative 
sharpen relation third phase adds additional safe orderings considering events execute certain events 
algorithms run tr january polynomial time compute happened orderings 
resulting ordering relation subset relation 
section prove computing entire relation np hard problem 
callahan consider problem static analysis fortran programs loops parallel case event style synchronization clear operations 
prove determining orderings guaranteed occur executions program np hard problem 
data flow framework computing guaranteed orderings 

complexity computing ordering relations section describe complexity computing ordering relations defined section 
prove problem computing ordering relations mow np hard problem computing ordering relations chb ccw cow np hard 
results shown hold programs counting semaphores programs event style synchronization post wait clear primitives 
briefly comment intractability results computing ordering relations shared data dependences considered 

counting semaphores theorem 
program execution uses counting semaphores problem deciding mow ordering relations nphard 
proof 
proof happened relation proofs relations analogous 
give reduction boolean formula satisfiable iff events defined reduction 
arbitrary instance set variables 
boolean formula consisting clauses 
clause disjunction literals literal variable negation 
instance construct program consisting processes uses semaphores semaphores assumed initialized zero 
execution program simulates nondeterministic evaluation boolean formula semaphores represent truth values variable clause 
show execution exhibits certain orderings iff satisfiable 
variable construct processes reduction motivated ones taylor constructed prove certain static analysis problems np complete 
tr january pass 

indicates operations occurrences literal formula semaphores represent truth value variable signaling semaphore represents assignment true false variable processes operate passes 
pass nondeterministic guessing phase variable boolean formula assigned unique truth value 
assignment accomplished allowing operations operations proceed 
second pass begins semaphore pass signaled ensure program deadlock semaphore operations allowed execute pass allowed proceed 
clause construct processes semaphores corresponding literals clause semaphore represents truth value clause semaphore signaled truth assignments guessed pass cause clause evaluate true 
create processes skip pass 
pass skip pass operations variable 
event reached semaphore clause signaled 
program contains conditional statements shared variables execution program executes events exhibits shared data dependences 
execution claim iff satisfiable 
tr january show part assume satisfiable 
clause satisfied truth values guessed pass 
operation issued pass 
event execute operation issued done second pass 
second pass occur event executes event precede event show part assume execution precedes executes concurrently contradiction assume satisfiable 
truth assignment guessed pass satisfies clauses 
event execute event contradicting assumption 
satisfiable 
iff satisfiable problem deciding np hard 
similar reductions programs constructed non satisfiability determined mow relations 
problem deciding relations np hard 
theorem 
program execution uses counting semaphores problem deciding chb ccw cow ordering relations np hard 
proof 
reduction proof theorem prove deciding chb np hard problem 
events defined reduction show chb iff satisfiable showing deciding chb np hard 
similar reductions constructed prove deciding ccw cow relations np hard 
proofs general counting ability counting semaphores hold programs binary semaphores 
addition results shown hold program execution uses single counting semaphore reduction problem sequencing minimize maximum cumulative cost 

event style synchronization theorem 
program execution uses event style synchronization post wait clear primitives problem deciding mow ordering relations np hard 
proof 
proof similar proof theorem programs semaphores hinges ability implement process mutual exclusion synchronization operations shared variables 
give reduction produces program operating manner described theorem 
variable construct process tr january post post fork clear wait post clear wait post join processes deadlock exactly post post issued 
clause construct processes wait wait wait post post post event variables corresponding literals clause create processes skip wait post 
post wait 
skip post post processes operate manner analogous created semaphores described theorem 
claim iff boolean formula satisfiable 
proof analogous argument theorem 
theorem 
program execution uses event style synchronization problem deciding chb ccw cow ordering relations nphard 
proof 
proof analogous proof theorem programs semaphores 
required reductions similar reduction theorem 
proofs rely implementation process mutual exclusion synchronization primitives shared variables 
theorems clear primitive implement process tr january mutual exclusion 
currently investigating complexity computing ordering relations program executions clear primitive 

ordering relations ignoring shared data dependences related outlined section addresses event ordering problem different notion feasibility 
methods attempt compute orderings exhibited program executions exhibiting events program execution regardless original shared data dependences occur 
complexity results section extend directly case 
programs constructed various reductions contain shared data dependences proofs suffice show original shared data dependences ignored alternate program executions considered computing ordering relations intractable problem 
showed results hold programs counting semaphores event style synchronization 

results showing program execution computing event orderings execution exhibited exhibited intractable problem 
program execution defined feasible program execution execution program performs events may exhibit different temporal orderings events 
program execution possess shared data dependences feasible program execution 
capture orderings exhibited program executions defined ordering relations 
happened ordered relations defined show events execute certain order execute concurrently execute order concurrently 
ordering relations defined ways 
sense show orderings guaranteed feasible program executions sense show orderings potentially occur feasible program execution due timing variations 
proved computing ordering relations np hard problem computing ordering relations np hard problem 
results shown hold programs counting semaphores programs event style synchronization post wait clear primitives 
addition results hold programs single counting semaphore multiple binary semaphores 
currently open problem results hold program executions single binary semaphore event style synchronization clear operations 
showed results hold computing orderings occurring program executions exhibiting events execution regardless original shared data dependences occur 
implication results exhaustively detecting data races potentially exhibited program execution intractable problem 
tr january callahan david static analysis low level synchronization proc 
sigplan sigops workshop parallel distributed debugging madison wi may 
appears sigplan notices january 
perry sanjoy ghosh david padua event synchronization analysis debugging parallel programs supercomputing pp 
reno nv november 
ferrante karl ottenstein joe warren program dependence graph optimization acm trans 
programming languages systems pp 

garey michael david johnson computers intractability guide theory npcompleteness freeman 

helmbold david charles mcdowell jian zhong wang analyzing traces anonymous synchronization proc 
intl 
conf 
parallel processing pp 
st charles il august 
kuck kuhn padua wolfe dependence graphs compiler optimizations conf 
record eighth acm symp 
principles programming languages pp 
williamsburg va january 
lamport leslie multiprocessor computer correctly executes multiprocess programs ieee trans 
computers pp 
september 
lamport leslie mutual exclusion problem part theory interprocess communication journal acm pp 
april 
mellor crummey john debugging analysis large scale parallel programs ph thesis available computer science dept tech 
rep univ rochester september 
netzer robert barton miller detecting data races parallel program executions languages compilers parallel computing ed 
gelernter gross nicolau padua mit press 
appears proc 
rd workshop programming languages compilers parallel computing irvine ca aug 
taylor richard complexity analyzing synchronization structure concurrent programs acta informatica pp 


