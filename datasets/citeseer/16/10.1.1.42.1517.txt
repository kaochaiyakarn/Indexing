formal aspects computing bcs generalised folds nested datatypes richard bird ross paterson 
nested datatypes generalise regular datatypes way context free languages generalise regular ones 
categorical semantics nested types turns similar regular case fold functions limited describe natural transformations 
practical considerations dictate generalised fold function limitation overcome 
show construct generalised folds systematically nested datatype show possess uniqueness property analogous ordinary folds 
consequence generalised folds satisfy fusion properties similar developed regular datatypes 
properties form core ective calculational theory inductive datatypes 
keywords functional programming program construction 

nested datatype parametrised inductive datatype declaration involves change accompanying type parameter 
words recursion nested change parameter 
formal de nition section 
types called non regular non uniform 
simple example provided type pow power trees declared haskell data pow zero succ pow pair type pair varied syntax slightly writing haskell 
elements pow consist pairs pairs pairs 
values type programming research group oxford university wolfson building parks road oxford ox qd uk 
department computer science city university square london ec hb uk 
bird paterson depth nesting reading associated constructor expression peano numeral 
example succ succ zero power tree height 
element represents perfectly balanced binary tree labels leaves 
example suggests nested datatypes capture certain structural invariants way regular datatypes 
connelly lockwood morris cl nested type modelling generalisation trie data structure okasaki oka puts nested datatypes variety uses design purely functional data structures 
bird paterson bp nested datatype describe de bruijn notation lambda expressions 
examples datatypes shown expressible nested declarations include avl trees trees square matrices 
aim lay groundwork useful calculational theory nested datatypes regarded successor bm 
categorical semantics straightforward complication 
regular datatype fold function induced initiality useful tool construction practical programs 
nested datatypes isn 
basic reason argument fold required natural transformation result fold natural transformation 
consequently functions inspect elements nested datatype de ned folds 
phenomenon motivates generalised fold operator limitations overcome 
rst contribution show de ne generalised fold operator nested type 
calculational theory regular inductive datatypes hinges uniqueness property fold function fold unique function type satisfying certain functional equation 
ow fusion laws fold laws fundamental importance reasoning programs improving eciency see bir mal 
second contribution show generalised folds possess uniqueness property 
having established uniqueness property set appropriate fusion laws reasoning nested datatypes 
third contribution laws discuss consequences 
rest organised follows 
sections brie review standard theory regular datatypes show theory extends nested datatypes 
sections contain formal de nitions regular nested datatypes 
section introduce generalised folds section fusion laws 
section justify proofs fusion laws showing generalised folds uniquely determined de ning equations 
familiarity basic category theory assumed 

semantics non parametrised datatypes categorical setting non parametrised inductive datatypes introduced categorical xed points appropriate functors see lam bdm hag mal ma 
suitable category xed point functor exists object arrow initial algebra category algebras 
objects category arrows arrows homomorphisms generalised folds nested datatypes algebras 
objects arrow arrow 

initiality means algebra associated unique homomorphism function satisfying equation 

unique homomorphism denoted fold consequence initiality isomorphism explains terminology xed point 
class appropriate functors polynomial functors 
category products coproducts polynomial functors de ned grammar 
hf functor ary constant functor delivering type arguments 
functor ary projection selecting th argument 
special case id superscripts omitted rest 
functor 
hf denotes composition ary functor functors arity 
hf am am am omit brackets 
write 
hf gi similarly provided category colimits countable chains category set sets total functions example unary polynomial functor possesses xed point 
examples introduce datatype nat natural numbers xed point id lists natural numbers xed point nat id binary trees natural number labels xed point nat id id declarations translated haskell fairly directly 
example datatype lists natural numbers declared data nil cons nat newtype data declaration introduces polynomial functor newtype declaration introduces isomorphic haskell type variables type constructor variables denoted lower case letters 
general haskell programs may fail terminate datatypes conceptually include additional value representing non termination language de nes non termination propagates expression 
shall subset haskell programs terminate issue programs may modelled category means unrestricted recursion show recursive de nitions unique solutions 
additional restriction comparison haskell recursively de ned types involve function types concerned solely inductive types 
constructor corresponds initial algebra converse function function de ned haskell bird paterson type lists natural numbers declared data nil cons nat version closer usual style datatype declaration functional programming polynomial functor appear explicitly 
function fold may de ned haskell follows fold fold 
fold 
haskell free type variable implicitly universally quanti ed may instantiated type 
function functorial action nil nil cons cons example fold sums list nat nat nil cons 
semantics parametrised datatypes consider extension theory parametrised datatypes haskell de nition lists data list nil cons list may rewritten equivalent form data base nil cons newtype list base list incorporate parametrised datatypes theory proceed essentially di erent ways 
rst method standard second extends nested constructors 
simplicity consider datatypes parametrised single type variable extension multiple parameters straightforward 

method families xed points rst method takes xed point binary functor respect second parameter 
observation partial application binary functor type yields unary functor xed point constructed usual way 
associated initial algebra type generalised folds nested datatypes associated fold function takes algebra ay argument uniquely de ned assertion arrow fold 

id datatype constructor functor de ning arrow fold 
id restated de nition takes form 

natural transformation 
hid class regular functors de ned closure class polynomial bifunctors xed point operations 
example list xed point bifunctor general tree constructor tree xed point bifunctor list 

list datatype constructor fold function implemented fold base list fold 
base id fold 
function base implements functorial action base base 
base base base nil nil base cons cons de ned slightly di erent way usual function fold essentially standard function foldr functional programming 
functorial action list corresponding standard function map may de ned fold list list list list fold 
base id 
second method higher order xed points second method yields larger class datatype constructors 
constructing xed points category functor categories objects ary functors arrows natural transformations functors 
shall write set natural transformations category limits colimits may constructed pointwise limits colimits mac 
example shorthand notations fact denote products coproducts category de ne functor xed point suitable higher order functor 
colimit construction shall refer functors 
generalises straightforward way functor categories arbitrary category bird paterson means initial object category algebras 
note natural transformation construction 


fold function induced initiality associates natural transformation functor natural transformation de ned unique function satisfying 

exactly de nition fold datatypes installed higher level 
major di erence functoriality construction instance fold 
de ne class polynomial form polynomial functor expression may include functor variable grammar functor expressions 
hp xed point polynomial called nested functor consider examples 
example functor list xed point polynomial id list nested functor regular functor 
haskell type constructor list may introduced declarations data base nil cons type base newtype list list type declaration introduces synonym base 
type constructor list exactly 
fold function di erent 
function may expressed haskell follows list 

function expresses part functorial action natural transformation haskell base id rst arguments polymorphic functions described rank type signature mcc 
signatures allowed extensions haskell jon pl 
polymorphic functions correspond natural transformations categorical setting 
de nition equivalent earlier de nition regular fold di erent type new version takes natural transformations deal single recursive de nitions results extended systems multiple simultaneous de nitions 
generalised folds nested datatypes natural transformations 
result new fold useful individual list elements inspected 
example fold produce natural number take nat constant functor returns nat type list nat function operate lists type satisfy naturality property 
list function depend elements list 
de ne length function little 
section see overcome limitation 
noted functor list introduced automatically part categorical semantics de ned functorial action list haskell 
inductive argument establishes list uniquely determined naturality list list express naturality condition extend de nition full functorial action simply expand de nition list yielding de nition list list list list 
base list 
equivalent de nition fold previous section 
note list de ned example type constructor nest de ned xed point id 
pair haskell corresponding declarations data base nil cons type base pair type pair newtype nest nest equivalent datatype introduced attened declaration data nest nil cons nest list datatype constructor nest regular functor occurrences nest de ning expression nested change type parameter pair ect values type nest correspond lists rst element type second element type third type 
variant nest oka basis implementation lists ecient indexing operation 
fold function nest may implemented haskell expanding terms bifunctor base base pair nest 
base id 
similarly mapping function nest may de ned bird paterson nest nest nest nest 
base nest pair 
pair pair pair pair case list naturality argument crucial de nition 
recursive occurrence de ning expression applied elements type nest pair consequently type base pair pair pair 
type signature de nition generalises requirement making fully polymorphic 
note de nition nest parameters recursive contain nest call nested datatypes linear known practical examples nested datatypes belong class 
exception see section bp 
nal example non linear variant nest example type functor host may de ned xed point id 
id haskell declaration data base nil cons type base newtype host host datatype equivalent attened version data host nil cons host host ect values type host correspond lists rst element type second element type host third element type host host host 
know practical datatype 
fold map functions may implemented base host 
base id 
host id 
host host host host 
base host host 

functions host implement functorial actions host respectively 
generalised folds nested datatypes 
generalised folds simple fold takes argument natural transformation returns natural transformation type de nition form 
form de ned 
greater exibility achieved generalise fold return natural transformation type 
example taken constant functor returns type integers 
way reducing structure integers single integer 
generalised fold take arguments series natural transformations introduced 
generalised fold gfold 

de ned equation form gfold 

gfold 
form 

develop operator observe polynomial expressed form 
hid 


id 
subsidiary may decomposed similarly example case list nest host functor 
require expanding 

hm 



component types 

suitable arguments introduce auxiliary forms 

de ned 




de ne 
id 


natural transformation 
hm 

supplied parameter gfold remains de ne inductively form 
hid 

de ne 
id 


natural transformation 
hm 


may decompositions giving rise di erent de nition gfold bird paterson natural transformation arising way provided extra parameter gfold note special case id set id obtaining simple fold special case gfold id 
id special case arises constant functors associated instance gfold called reduction 
consider detailed instantiations example datatypes 
example list list list base 
hid 
id generalised fold takes form haskell gfold base 
list gfold 
base id gfold 
list 
additional ingredients presence functor crucial second argument useful ect achieved means 
point provides greater freedom manoeuvre 
noted take constant functors delivering say types respectively 
associated instance gfold reduction type reduce base 
list viewing base pair ect reduce list produce value 

regular fold special case list reduction id list reductions important component circuit design language ruby js see bdm 
analysis reductions suggests generalised fold lists decomposed simple fold triangle 
triangle respect function takes 
function expressed fold triangle list list triangle fold 
base id list claim gfold fold 
triangle result proved section 
fact regular datatypes decompose generalised fold composition regular folds way 
generalised folds nested datatypes example nest nest nest base 
hid 
pair generalised fold form haskell gfold base pair 
pair pair nest gfold 
base id gfold 
nest 
take constant functors delivering types respectively obtain instance gfold called reduction type reduce base 
pair nest particular sum nest integers sumn reduce plus plus base int int int nil cons nest integers summed fold nests simply natural transformation right type 
summation function de ned generalised fold function types lifts natural transformation constant functors 
example host host host base 
hid 

hid 
id generalised fold form haskell gfold base 

host gfold 
base id gfold 
host 
id gfold 
host 
constant functors delivering types respectively de ne reduction host instance gfold type reduce base 

host particular sum host integers reduce plus id functions plus de ned 

remarks de ned generalised folds criticised opposing points view 
argue folds general arguments bird paterson type dropped clear contribute 
hand argue folds speci example quite possible assign type signature de nition gfold host gfold base 

host idea gfold host natural transformation di erent instances may instantiated di erent types re ected type constructors previous type gfold instance generally recall generalised fold de ned unique solution equation 
form 


equation unique solution 
shall see section suces de ned way functor may place particular may build values type write 


natural transformation contravariant functors 
general forms degrees freedom consequently er guidance program designer 
version described section associated fusion laws reasonable compromise practice bp 
experience needed determine formulations turn useful practical program construction 

fusion laws fusion laws nested datatype come fold fusion map fusion 
provides conditions 
gfold 
gfold 
map fusion law similar providing conditions gfold 

gfold 
standard theory regular datatypes map fusion special case functorial action regular datatypes de ned fold 
case higher order semantics section 
deriving fusion laws shall assume gfold 
unique function satisfying de ning equation 
assumption justi ed section 
previous section suppose 
hid 

generalised folds nested datatypes reduce clutter show calculations case generalisation straightforward 
map fusion law dealt rst 

map fusion laws abbreviating gfold 
gfold 
aim give conditions 
noted assume unique function type 
satisfying obtained replacing corresponding sucient give conditions 


general scheme calculation 


fde nition hg 
id 

bg 


tg 









tg 



bg 
id 
id 



idg 
id 


fde 
rst assumption calculation condition 


simpli ed inductive de nitions similar calculation 
eventually arrive independent having generated series side conditions 
spell details example datatypes 
bird paterson example list list id 
list obtain map fusion law list 
gfold 
list gfold 
base id 

special case id id fold 
list fold 
base id example nest pair 

pair nest pair 
nest pair 

pair obtain map fusion law nest 
gfold 
nest gfold 
base id 
pair 
example host 
id 
host 
host 
id 
host 
host 
id types similar replaced host host condition map fusion takes form 
id 
host 
host 

id 
host 
host equivalently 
id 
id 
host 


id 
host 
equation follows 
id 


map fusion law host 
gfold 
host gfold 
base id 
id 



fold fusion laws abbreviating gfold 
gfold 
aim give conditions 
hm 
sucient give conditions 


general scheme calculation 

fde nition hg 

id 


id 
generalised folds nested datatypes 
id 

id 
bg 
id 



functoriality tg 
id 





id 


fde 
second assumption calculation 



elaborated simpler assumptions inductive de nitions spell details examples 
example list fold fusion law list 
typings base 
hm 

gfold gfold 


base id 
example consider composition gfold id 
gfold base 
hm 
function gfold id list 
fold function gfold list 
list 
called triangle respect gfold id 

base id gfold id 
list id appeal fold fusion gives gfold id 
gfold gfold generalised fold lists regular type factored regular fold triangle 
fact triangle expressed regular fold gfold 
fde 
base id gfold 
list fmap 
base id gfold 
base id fusion backwards 
base id 
gfold 
base id 
base id gfold bird paterson gfold fold 
base id gfold composition regular folds 
note property base functoriality factorisation may applied generalised fold regular type 
example nest pair 

pair fold fusion law nest 
typings base 
hm 
pair 

pair pair 

pair 
gfold gfold 


base id 
fold fusion law nest takes form list types di erent 
simple example 
function listify nest list de ned listify gfold 
base id concat 
list id base 
hid list initial list algebra pair list converts pair values list values concat list 
list list concatenates list lists list 
id list furthermore function suml list 
int int sums list integers suml fold fold fold function lists 
consider combination suml 
listify fuse functions provided suml 
base id concat 
list 
base id suml 
list pair 
int int base 
hint inti int proviso calculate suml 
base id concat 
list fde nition 
base id suml 
base id concat 
list 
base id suml 
concat 
list suml functoriality listg 
base id suml 
list suml 
suml 

base id suml 
list plus suml 
listify gfold plus expression right just function sumn previous section summing nest integers directly 
generalised folds nested datatypes example host 
id 

id fold fusion require 

base id 


id required satisfy equation 

condition expands 

id 

id 

eliminate dependence suppose 

id 
argue 

id 
functoriality 
id 



functoriality tg 
id 


fold fusion law put form fold fusion law host 
typings base 
hm 
id 
id 
gfold gfold 
provided 

id 

base id 


id 

uniqueness generalised folds aim section show generalised folds unique solutions de ning equations form gfold 

gfold 
form 



turns easier solve general problem 
suppose functors categories xed point natural transformation 

seek conditions ensure unique lt 
bird paterson note naturality implies 

instances general scheme gfold nested types special case higher order functors 

action functor natural transformations yields instances special case id equation implies id 
determined id generalised fold reduces ordinary fold 
instances de ning equations form 


functions 

example zip functions form binary functor 
furthermore uniqueness property leads general fusion law stating natural transformation 
gfold gfold previous fusion laws instances scheme 
solutions problem 
rst depends details colimit construction xed point works larger class functors second approach 
example rst approach works second 

method colimits theorem 
suppose functors preserve colimits chains de ne haskell preserves initiality 
equation unique solution 
proof 
suppose colimit construct xed point consists functions construction isomorphism satis es 
preserves initiality unique arrow shall show 

arrows comprise colimit establishes existence uniqueness prove 

generalised folds nested datatypes induction base case immediate initiality 
induction step 






establish reverse implication reason 



fby cases see 
case immediate initiality 
case 






completing proof 

second method adjoints approach note seek function type lt fold supply function type recall adjunction functor de nes isomorphism rb bird paterson setting yields correspondence generalised folds ordinary folds 
theorem 
right adjoint equation unique solution 
proof 
denote isomorphism de ned adjunction 
applying sides equation 
calculate introducing counit idg 






fold fold note version strictly weaker lower level approach colimits functor right adjoint necessarily preserves colimits example functor preserves initiality colimits chains coproducts 
apply theorem generalised folds nested datatypes remains construct right adjoint 

studied problem category theory known right kan extension mac known exist de ned small complete category 
possible eliminate size condition restricting class functors say nested functors 
de ne adjunction haskell introducing continuation type cont constructing isomorphism pair 
cont functor cont declared newtype cont generalised folds nested datatypes cont wraps higher order polymorphic function 
xed functorial action cont de ned cont cont cont cont 
half isomorphism function functor cont map function map functorial action subscript added clarity haskell 
half isomorphism pair functor cont id 
function applies continuation cont cont 
isomorphism pair meaning 
id 
id rst identity veri ed calculation fde nitions id map fde nition map id cont id fde nition 
id reduction reduction de nition second identity calculate fde nitions id fde nitions bird paterson map id map id map 
final remarks subject nested datatypes provide practical programmer infancy 
published far particular oka uses nested types conceptual tool results translated programming terms embedding nested types regular ones systematic way 
reason nested types directly language support de ning functions types 
versions haskell permit rank type signatures seen move necessary implement functions nested types 
de ning functions nested datatypes explicit recursion complicated error prone similar style regular types 
real purpose concentrating fold function datatype provides structured approach inductive functional programming 
concentration added force datatype nested 
peter freyd andy pitts james worrell dominic hughes directed appropriate category theory adjunction section 
anonymous referees helpful suggestions 
bdm bird de moor 
algebra programming 
prentice hall 
bir richard bird 
functional programming haskell 
prentice hall second edition 
bm richard bird lambert meertens 
nested datatypes 
mathematics program construction volume lecture notes computer science pages 
springer 
bp richard bird ross paterson 
de bruijn notation nested datatype 
journal functional programming january 
cl connelly lockwood morris 
generalisation trie data structure 
mathematical structures computer science 
leonidas fegaras tim sheard tong zhou 
improving programs recurse multiple inductive structures 
acm sigplan workshop partial evaluation semantics program manipulation june 
hag hagino 
category theoretic approach data types 
phd thesis laboratory foundations computer science university edinburgh uk 
technical report ecs lfcs 
hoo paul hoogendijk 
generic theory data types 
phd thesis eindhoven university technology 
jon mark jones 
technical summary new features hugs 
unpublished 
generalised folds nested datatypes js geraint jones mary sheeran 
designing arithmetic circuits re nement ruby 
bird morgan woodcock editors mathematics program construction volume lecture notes computer science pages 
springer 
lam lambek 

canadian mathematical bulletin 
ma manes arbib 
algebraic approaches program semantics 
texts monographs computing science 
springer 
mac saunders mac lane 
categories working mathematician 
springer new york 
mal malcolm 
algebraic data types program transformation 
phd thesis rijksuniversiteit groningen 
mal malcolm 
data structures program transformation 
science computer programming 
mcc mccracken 
typechecking programs implicit type structure 
semantics data types volume lecture notes computer science pages 
springer 
oka chris okasaki 
purely functional data structures 
cambridge university press 
pl peyton jones launchbury 
explicit quanti cation haskell 
see www dcs gla ac uk people personal simonpj 
