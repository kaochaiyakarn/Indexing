efficient generalized folds june ralf hinze institut fur informatik iii universitat bonn bonn germany mail ralf informatik uni bonn de fold operators capture common recursion pattern algebraic datatypes 
fold essentially replaces constructors functions 
datatype parameterized corresponding fold operates polymorphic functions severely limits applicability 
order overcome limitation bird paterson bird paterson proposed called generalized folds 
show define variation folds induction structure datatype definitions 
unfortunately datatypes generalized folds efficient expect 
identify source inefficiency explain remedy shortcoming 
conceptually simple approach places high demands type system requires polymorphic recursion rank types strong form type constructor polymorphism 
fold operators functional programmer toolbox 
essence fold operator replaces constructors functions 
example consider datatype strings functional language haskell peyton jones hughes 
data string nil cons char string definition simultaneously introduces type constructor called string value constructors called nil cons types nil string cons char string string fold operator associated string folds nil cons nil nil folds nil cons cons cons folds nil cons folds nil cons takes string replaces nil nil cons cons determine folds type simply take signatures value constructors systematically replace type string type variable say string folds string 
char string string 
string string hinze similar manner folds defined non parametric datatypes regular parametric datatypes see meijer sheard fegaras 
approach works general parametric datatypes resulting fold operators limited applicability 
consider example 
definitions introduce perfectly balanced binary leaf trees hinze 
data perfect zero succ perfect fork data fork fork perfect tree height instance represented succ succ zero fork fork fork labels leaves 
note prefix succ zero encodes tree height 
definition perfect unusual recursive call perfect right hand side copy declared type left hand side 
type recursion nested types property called nested datatypes bird meertens 
perfect fork parameterized value constructors polymorphic types 
zero perfect succ perfect fork perfect fork fork perfect fold operator stands simple fold zero succ zero zero zero succ succ succ zero succ expected zero succ takes perfect tree replaces zero zero succ succ 
instance zero succ maps succ succ zero fork fork fork determine type take signatures value constructors replace type constructor perfect type variable say perfect perfect 
perfect fork perfect 
perfect perfect 
note operates polymorphic functions 
type called rank type mccracken legal haskell 
furthermore note polymorphic recursion mycroft recursive call operates different type 
type inference undecidable presence suitable extension implemented ghc peyton jones hugs jones accept definition change type signature perfect 
perfect fork perfect 
perfect perfect 
efficient generalized folds polymorphic recursion henglein haskell requires explicit type signature provided 
illustrate define wrap list wrap list fork list fork ns ns wrap flatten perfect tree list 
flatten perfect list flatten wrap note flatten implements iterative algorithm perfect tree converted singleton list trees list repeatedly split subtrees singleton trees elements remain 
interestingly usual recursive method works flattening subtrees appending results defined reason simply replaces constructors zero succ constructor fork reason sum perfect tree integers 
observations suggest provide fold perfect trees takes arguments zero succ fork maps succ succ zero fork fork fork define fold require called mapping function perfect trees 
mapp 
perfect perfect mapp zero zero delta mapp succ succ delta mapp mapf mapf 
fork fork mapf fork fork mapping functions defined completely generically parameterized datatypes see section 
general mapping function applies function element type structure type returning new structure shape different elements 
combination parameterized type mapping function referred functor 
new fold hinze perfect trees perfect 
perfect fork perfect 
fork 
perfect perfect zero succ fork zero zero zero succ fork succ succ delta zero succ fork delta mapp fork fork 
fork fork fork fork fork consider second equation fold perfect fork proceeds follows fold function nodes mapped perfect resulting element type perfect fork recursive call yields element type perfect fork succ maps perfect note type signature derived constructors types replacing perfect fork type variables 
may implement instance recursive tree traversal 
id id delta mapp wrap idiom fold map zero succ fork delta mapp captures iterative recursive algorithms perfect trees zero succ constitute iterative part fork recursive part 
quite flexible problem remains sum perfect tree integers 
reason type restricted sum type perfect int int sensible choice perfect perfect int fixing perfect way argument type int function type appear necessarily ignore argument 
interestingly problem solved generalizing types folds leaving definitions unchanged 
central idea define functions type additional type constructor provides greater freedom manoeuvre required applications 
efficient generalized folds obtain generalized folds perfect 
perfect fork perfect 
fork 
perfect perfect zero succ fork zero zero zero succ fork succ succ delta zero succ fork delta mapp fork fork 
fork fork fork fork fork examine fold perfect fork proceeds 
call mapp fork yields element type perfect fork recursive invocation takes perfect fork turn succ maps perfect solve problem summing perfect tree 
sum perfect int int sum id id 
order typecheck function sum strong form type constructor polymorphism required 
note call id id type perfect int int order unify type declared type perfect perfect equate perfect int unfortunately standard haskell typechecker higher order unification kinded order unification jones 
order unification int fails 
define sum haskell forced define type specialized variant rest organized follows 
section shows define mapping functions generalized folds generically parameterized datatypes 
section presents applications generalized folds 
section identifies source inefficiency definition generalized folds explains remedy shortcoming 
generalized folds inspired folds bird paterson bird paterson 
section explains differences approaches reviews related 
generalized folds define mapping functions generalized folds generically parameterized datatypes employ framework polytypic programming hinze 
introduce necessary background go 
reasons space confine datatypes parameterized single type variable extension multiple parameters straightforward 
start convenient rewrite hinze datatype definitions functor equations perfect zero id succ perfect delta fork fork fork id theta id id identity functor id delta denotes functor composition deltaf 
sum product defined pointwise delta delta delta delta delta delta theta delta delta delta theta theta delta delta delta theta example consider ubiquitous datatype polymorphic lists 
data list nil cons list corresponding functor equation list nil cons id theta list denotes constant functor unit type 
general functor equation form functor variable functor expression 
functor expressions formed grammar id delta delta delta theta delta delta delta theta delta set primitive types int set constructor names 
translation datatype definitions functor equations straightforward 
note resulting equations general form theta delta delta delta theta delta delta delta cn fn theta delta delta delta theta nkn ij id composition functor variables delta delta delta delta delta sequel require general combining forms sums delta delta delta products theta delta delta delta theta 
delta delta delta delta delta delta delta delta delta delta delta theta delta delta delta theta ary operator performs case analysis theta establish type constructors name ary functors 
unary sums write delta unc delta delta delta delta delta unc delta delta delta order synthesize mapping function datatype system mutually recursive datatypes simply take corresponding system functor equations transform system function definitions 
maphf maphf 
maphf maphf efficient generalized folds maphf id delta delta delta maphf delta delta delta maphf maphf theta delta delta delta theta maphf theta delta delta delta theta maphf maphf delta maphf maphf note maphf defined inductively structure functor expressions 
perfect fork obtain mapping functions 
perfect zero id succ perfect delta fork fork fork id theta id fork delta theta delta strip clothing find definitions correspond exactly ones 
necessary prerequisites hand define generalized folds systematic way 
general generalized fold takes structure replaces constructor structure corresponding function 
contrast simple fold replaces constructors listed respective datatype definition 
section introduce generalized folds steps 
simply typed variant fold type second explain modifications necessary generalize types simplify presentation assume functions replace constructors fixed advance 
denote function replaces constructor stressed merely technical convenience relieves making passing explicit 
simply typed fold defined follows 

fold hf fold hf 
fold hf fold hf fold hf fold hk id fold id fold hc delta delta delta delta fold hf delta delta delta delta fold hf fold hf theta delta delta delta theta fold hf theta delta delta delta theta fold hf fold hf delta fold hf delta maphf fold hf third line captures essential fold constructors 
replaced corresponding functions 
remaining equations preserve structure folded value 
consequently constructors replaced fold hf amounts identity function 
perfect fork hinze obtain equations 
perfect zero id succ perfect delta fork fork fork id theta id fold zero succ delta fold delta fold fold fork delta strip clothing explicate passing parameters zero succ fork obtain definitions 
turning types folds abbreviate shorthand types constructors read zero id perfect succ perfect delta fork perfect fork id theta id fork recall types corresponding functions obtained replacing type constructors type variables 
denote functor expression obtained 
running example get zero id perfect succ perfect delta fork perfect fork id theta id fork signatures folds fold perfect perfect fold fork fork general fold hf replaces value constructor discussed type fold hf restricted applications limitation overcome generalizing type deltax interestingly generalization induces changes type level 
definition fold hf remains essentially 
evaluate composition delta fact functor composition distributes leftward sums products delta delta delta delta delta delta delta delta delta theta delta delta delta theta delta delta theta delta delta delta theta delta push functor arguments constructors 
recall argument type constructor equals id delta delta delta delta delta delta cases simple delta id delta main question fold argument type delta delta delta delta delta delta delta choices 
instance apply gfold case remaining functors reduced fold conversely apply gfold functor propagated 
entail definition second fold operation type delta delta called arbitrarily decide second alternative 
viable choices discussed full version 
generalized folds gfold hf delta gfold hf delta maphf hf hf delta hf delta maphf hf efficient generalized folds remaining equations definition fold hf code variant 
functions different types 
consider generalized fold running example 
gfold perfect delta perfect gfold zero succ delta gfold delta fork delta delta fork fork delta types zero succ fork zero perfect succ perfect delta fork perfect fork theta delta fork general gfold hf delta replaces value constructor hf delta delta replaces value constructor operations id delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta products defined pointwise 
examples consider examples detail 
polymorphic lists 
generalized fold polymorphic lists gfold list delta list gfold nil cons delta id theta gfold functions nil cons types 
nil list cons theta list list data easily derive haskell definition gfold 
gfoldl list 
list list 
list list gfoldl nil cons nil nil gfoldl nil cons cons cons gfoldl nil cons definition looks exactly standard fold lists usually called foldr fact specialize type gfoldl setting list hinze bush 
bush bush bush 
bush 
bush bush bush 
bush bush gn gc kn kc nil gn gn gc kn kc cons gc gn gc kn kc mapb kn kc bush 
bush bush bush 
bush bush kn kc nil kn kn kc cons kc kn kc mapb kn kc fig 

generalized fold bush obtain foldr signature 

list 
conversely application gfoldl implemented terms foldr polymorphic lists folds generalized folds coincide 
quite pleasant finding holds essentially regular datatypes 
bushy lists 
intricate example consider type bushy lists bird meertens 
data bush nil cons bush bush type similar list step list entries th entry list type bush type bush despite bewildering form type recursion derivation generalized fold proceeds entirely mechanically 
bush nil cons id theta bush delta bush gfold bush delta bush gfold delta id theta gfold delta bush delta delta bush delta id theta delta bush non linear nested datatype bird paterson recursive call bush contains call bush require gfold 
consequently sets functions supplied 
bush theta bush delta bush bush delta bush theta delta bush delta bush delta bush corresponding haskell definitions listed passing explicit 
fortunately complicated needed applications 
instance flattening bush summing bush efficient generalized folds accomplished simpler flatten bush list flatten oe oe aas concat aas sum bush int int sum note fold hf type instance hf specialized id example id bush list 
second example instantiated constant functor int general instantiate hf type obtain signature reduction meertens 
reduction function type collapses structure values type single value type de bruijn notation 
de bruijn encoding terms bound variable represented natural number indicating distance occurrence binding place 
de bruijn terms defined nested type bird paterson 
data term var app term term lam term incr data incr zero succ corresponding functor equations term var id app term theta term lam term delta incr incr zero succ id generalized fold term form 
gfold term delta term gfold var app delta gfold theta gfold lam delta gfold delta incr delta delta incr zero succ functions var app lam zero succ types 
var term app term theta term term lam term delta incr term zero delta incr succ delta incr derivation corresponding haskell program left exercise reader 
functor term monad var unit join application gfoldt join term term term join gfoldt id app lam var zero mapt succ hinze join instance define fi reduction de bruijn terms 
reduce term term reduce app lam join mapt subst subst term incr term subst zero subst succ var explanation join reduce interested reader referred bird paterson 
efficient generalized folds fold operators replace constructors functions intuitively expect fold hf colleagues take time proportional size input plus time evaluate function applications 
unfortunately case example shows 
assume want determine free variables de bruijn term 
function implemented free term list free gfoldt wrap concat wrap consider evaluation free lam var succ recursive step subexpression form lam var succ mapped concat lam var succ wrap 
call replaces succ wrap takes linear time total running time gamma delta delta delta theta 
bad news 
fold operators fundamental combining forms lack efficiency clearly unacceptable 
fortunately relatively easy improve efficiency fold hf colleagues 
consider definition fold hf delta fold hf delta fold hf delta maphf fold hf example shows call maphf causes efficiency problem 
observation suggests define function combines fold map 
fold hf delta maphf derivation nice exercise program calculation proceeds mechanically 
base cases ti fold hk ti delta ti id delta id id fold delta id delta derivation sums products left exercise reader 
composition functors obtain delta fold hf delta delta maphf delta fold hf delta maphf fold hf delta maphf maphf fold hf delta maphf fold hf delta maphf efficient generalized folds shows succeeded eliminating call map 
summarize id delta delta delta delta delta delta delta delta theta delta delta delta theta theta delta delta delta theta delta derivation proceeds completely analogous 
equations delta different 
delta delta determine types new folds 
central insight colleagues higher order folds take folds folds 
see case note easily derive properties specification 
fold fold hf delta gi gfold hf delta gi hf delta gi properties motivate turn type signatures 

delta delta delta delta 
delta delta delta delta delta 
delta delta delta delta note type variables universally quantified case 
order check definition typed propagate functor delta arguments constructors 
consider instance constructor theta delta delta delta theta argument type delta delta id delta delta delta delta delta delta delta delta delta second case instance takes delta delta remaining cases listed 
delta delta delta delta gamma 
delta id delta gamma 
delta delta delta delta delta delta delta delta delta delta delta delta delta gamma 
delta delta delta delta delta delta consequently arguments function type delta takes delta desired 
order folds easily defined terms higher order folds instance gfold hf id type level instantiated id id type hinze perfect 
perfect fork perfect 
fork 

perfect perfect zero delta succ delta fork 

node fork fork fig 

generalized higher order fold perfect consider example 
higher order fold perfect trees delta delta 
perfect delta delta perfect delta zero delta succ delta delta delta 
fork delta delta delta fork delta fork delta theta delta corresponding haskell definition listed 
definition interesting polymorphic recursion level type constructors combines polymorphic recursion type constructor polymorphism 
recursive call type fork delta delta delta fork delta 
perfect delta fork delta delta perfect delta fork delta substitution instance declared type instantiating fork delta fork delta 
previous uses type constructor polymorphism circumvented haskell defining type specialized version polymorphic function 
trick applicable 
matters stand higher order folds nested types typed haskell 
related fold operator list usually called foldr origins reduction operator apl iverson insertion operator fp backus 
excellent tutorial foldr giving hutton 
modeling datatypes fixpoints functors folds generalized lists regular datatypes meijer 
folds nested datatypes call simple folds appeared bird meertens functorial semantics nests 
noted folds limited applicability solution problem 
bird paterson bird paterson subsequently introduced generalized folds order overcome limitation 
differences approach best explained means example 
efficient generalized folds consider bird paterson fold perfect trees 
perfect 
perfect fork perfect 
fork fork 
perfect perfect zero succ zero zero zero succ succ succ delta zero succ delta mapp parameter corresponds roughly subsidiary fold fork definition page 
type restricted type fork delta delta fork opposed fork delta delta fork fork words generalized fold sense bird paterson replaces constructors listed datatype definition 
user supply additional arguments transport functor recursive calls 
determine number types arguments functor equations rewritten special fixpoint form 
feel definition gfold hf inductive structure datatype definitions easier grasp 
approach amenable improvements described section 
stressed bird paterson main source inspiration 
different approach generalized folds proposed jones jones 
essence folds replace single constructor family functions 
instance constructor succ perfect fork perfect replaced functions family succ perfect fork fork perfect fork 
remains seen additional flexibility practical importance 
backus john 

programming liberated von neumann style 
functional style algebra programms 
communications acm 
bird richard meertens lambert 

nested datatypes 
pages jeuring 
ed fourth international conference mathematics program construction mpc sweden 
lecture notes computer science vol 

springer verlag 
bird richard paterson ross 

de bruijn notation nested datatype 
journal functional programming 
bird richard paterson ross 

generalised folds nested datatypes 
formal aspects computing 
appear 
henglein fritz 

type inference polymorphic recursion 
acm transactions programming languages systems 
hinze ralf 
march 
perfect trees bit reversal permutations 
tech 
rept 

institut fur informatik iii universitat bonn 
hinze ralf 
march 
polytypic functions nested datatypes extended rd latin american conference functional programming 
hutton graham 

tutorial universality expressiveness fold 
journal functional programming 
appear 
iverson kenneth 

programming language 
john wiley sons 
hinze jones mark 

technical summary new features hugs 
unpublished 
jones mark paul 

pragmatic approach maps folds parameterized datatypes 
unpublished 
jones mark 

functional programming overloading higher order polymorphism 
pages international spring school advanced functional programming techniques 
lecture notes computer science vol 

springer verlag 
mccracken nancy jean 

typechecking programs implicit type structure 
pages kahn gilles macqueen david plotkin gordon 
eds semantics data types international symposium sophia antipolis france 
lecture notes computer science vol 

berlin springer verlag 
meertens lambert 

calculate 
pages swierstra 
eds proceedings th intl 
symp 
programming languages implementations logics programs plilp aachen germany sept 
lecture notes computer science vol 

springer verlag 
meijer fokkinga paterson 

functional programming bananas lenses envelopes barbed wire 
pages th acm conference functional programming languages computer architecture cambridge ma 
lecture notes computer science vol 

springer verlag 
mycroft alan 

polymorphic type schemes recursive definitions 
paul robinet 
eds international symposium programming th colloquium toulouse 
lncs 
peyton jones simon 

explicit quantification haskell 
url research microsoft com users simonpj haskell quantification html 
peyton jones simon hughes john eds 
december 
haskell non strict purely functional language 
sheard tim fegaras leonidas 

fold seasons 
pages proceedings th acm sigplan sigarch intl 
conf 
functional programming languages computer architecture fpca copenhagen denmark june 
new york acm press 
