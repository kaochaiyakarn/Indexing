generating unlabeled necklaces irreducible polynomials gf kevin cattell frank ruskey joe sawada robert serra department computer science university victoria victoria canada applications call exhaustive lists strings subject various constraints group actions 
ary necklace equivalence class ary strings rotation cyclic group 
ary unlabeled necklace equivalence class ary strings rotation permutation alphabet symbols 
new fast simple recursive algorithms generating listing necklaces binary unlabeled necklaces 
generalization case substring occurs fixed algorithms optimal running times sense running times proportional number necklaces produced 
application describe implementation fast algorithm listing degree irreducible primitive polynomials gf 
natural group actions strings fixed alphabet leaving string unchanged reversing string rotating string permuting symbols string permutation alphabet symbols 
groups giving rise actions acting indices reversal cyclic group acting indices symmetric group acting alphabet assuming alphabet consists symbols 
group action composition group actions partitions set ary strings equivalence classes orbits action 
applications call exhaustive lists representatives equivalence classes 
generate equivalence classes natural choose representative lexicographically smallest string 
representation efficient algorithms known generating equivalence classes actions 
efficient mean amount computation generating objects research supported nserc 
mail csr uvic ca research supported nserc 
mail csr uvic ca mail csr uvic ca dept mathematics 
research supported nserc 
mail math uvic ca research supported nserc 
mail csr uvic ca proportional number objects generated 
algorithms said cat constant amortized time 
simply counting base known efficient 
efficient algorithms easily developed 
case equivalence classes usually called necklaces 
efficient algorithms generating necklaces developed kessler algorithms proven efficient ruskey savage wang 
closely related algorithms generating lyndon words aperiodic necklaces developed duval shown efficient berstel 
case representative strings usually called restricted growth functions efficient algorithms generating developed er kaye 
contrast case non trivial actions considered isolation composition actions gives rise equivalence classes efficient generation algorithms previously known fixed 
example composing results dihedral group resulting equivalence classes called 
efficient algorithm known simply listing necklaces rejecting larger reversals representative 
ruskey smith show orbits composition generated amortized time cat fixed 
remains interesting challenge develop efficient algorithms compositions 
contributions fold 
presentation new efficient recursive framework necklace generation 
recursive cat algorithm generating necklaces 

algorithm recognizing binary unlabeled necklaces composition 
cat algorithms generating unlabeled binary necklaces necklaces substring framework developed item 
development fastest known algorithm generating irreducible primitive polynomials gf 
algorithm suggest enumerative results irreducible polynomials results proven 
algorithm unlabeled necklace algorithm cut computation time half ordinary necklace algorithm 
combinatorial objects listing fundamental considerable interest having efficient algorithms generate 
interest comes mathematicians computer scientists electrical engineers scientists disciplines 
algorithms implemented combinatorial object server cos sue csc uvic ca cos sections generating necklaces irreducible polynomials 
cos user chooses type combinatorial object supplies input parameters output options 
cos returns client www list objects 
implementations algorithms may downloaded cos site thousands done 
pages necklaces irreducible polynomials regularly visited 
background definitions defining alphabet sigma gamma set sigma consists ary strings length define equivalence relation sigma ff fi exist sigma ff uv fi vu 
equivalence classes called necklaces identify necklace lexicographically representative equivalence class 
set necklaces length ary alphabet denoted 
def fff sigma ff fi ff fig example 
cardinality denoted 
unlabeled necklace don care color bead beads different colors 
unlabeled necklaces identical transformed interchanging position string 
formally set ary length unlabeled necklaces defined follows 
def fff ff ff example 
denote string ff periodic ff fi fi non empty 
aperiodic necklace called lyndon word 
set ary lyndon words length denoted 
def fff ff example 
cardinality denoted 
unlabeled lyndon word aperiodic unlabeled necklace 
set ary length unlabeled lyndon words denoted cardinality 
example 
word ff called pre necklace prefix necklace 
set ary pre necklaces length denoted 
def fff sigma fffi fi sigma example 
cardinality denoted 
denote number pre necklaces length numbers prove useful analyzing algorithms developed 
formally def denote unlabeled pre necklaces cardinality 
theorem formulae valid djn odd djn djn oe gamma odd djn oe proof equations known proof may graham knuth patashnik pg 
pg 

equations gilbert riordan 
equation follows lemma equation follows lemma 
case substring forbidden formulae analagous may derived 
replace gamma th fibonacci number 
generating necklaces section describe recursive algorithm generating necklaces lyndon words 
compared previous algorithms contribution recursive formulation leads simpler proofs analysis 
amenable modification example existing algorithms generate lexicographic order generate different orders 
section recursive methodology generate unlabeled necklaces generate necklaces fixed density cat algorithm 
algorithm new theorem theorem tells construct length pre necklace length gamma pre necklace 
ff sigma lyn ff length longest prefix ff lyndon word 
function defined sigma formally lyn delta delta delta def maxf delta delta delta example lyn 
note ff delta delta delta lyndon word lyn ff theorem useful 
tempted call fundamental theorem necklaces 
leads necklace generation algorithm algorithms producing lyndon factorization word determining necklace lex minimal rotation string 
theorem specifies exact conditions terms lyn character appended pre necklace remain pre necklace 
theorem ff delta delta delta gamma gamma lyn ff 
string ffb gammap gamma 
furthermore lyn ffb gammap gammap gamma prove theorem section building preliminary results 
characterizations lyndon words necklaces known pg 
clearly equivalent definitions earlier 
ff xy xy yx non empty ff xy xy yx non empty lemmas proven lemma pg 
lemma pg 
corollary follows lemma 
lemma ff ff 
lemma ffb pre necklace gamma ff 
corollary ffb pre necklace gamma ffj lemma ff delta delta delta pre necklace 
substring ff length delta delta delta proof directly definitions necklace pre necklace 
lemma ff ff fi fl fl non empty ff fi ff fi jfij 
proof ff necklace ff ff necklaces lemma 
ff fi pre necklace necklace fi 
fi ff ff ff fi fi fi fi ff fi necklace 
lemma ff delta delta delta string lyn ff 
ff gammap proof gammap ff fi ffi fi delta delta delta ffi prefix fi 
ff lemma 
conversely assume ff smallest index gammap definition string ff form fi ffia delta delta delta fi delta delta delta ffi proper prefix fi 
fl fi ffi fl symbol fl gammap definition fi ffi pre necklace fi ffi fl fi necklace lemma 
derive separate contradictions depending gammap gammap gammap ffi delta delta delta statement contradicts lemma ffia procedure gen integer local integer gammap gen fa gammap gamma gamma gen recursive algorithm generating necklaces note 
sequence type pre necklaces println lyndon words println necklaces mod println de bruijn sequence mod print table different objects output different versions 
gammap corollary string fi ffia lyndon word contradicting fact lyn ff formula follows lemma 
prove theorem 
proof theorem ff delta delta delta gamma gamma lyn ff 
ff fi fl fi lyndon word delta delta delta 
gammap ffb pre necklace lemma 
definition lyn follows lyn ffb lyn ff lyn ffb lyn ffb ffb lyndon word 
ffb lyndon word fi 
gammap ffb lyndon word lemma 
gammap ffb pre necklace string fi necklace 
fi yx xy contradiction 
ffb necklace gammap algorithm gen follows directly theorem parameters meanings theorem 
assume 
initial call gen generate strings 
symbols selected loop selected increasing order listing lexicographic opposite order listing reverse lexicographic order 
various types objects may produced depending shown table 
complicated call produce complemented cycling registers defined golomb constant amortized time see section 
show algorithm gen efficient cat property 
theorem algorithm gen cat algorithm 
proof call number nodes computation tree 
structure algorithm equal number pre necklaces length expressed 
expressions obtain bounds 
gamma gamma gamma equality valid pre necklace obtained prefix fi fi lyndon word 
gamma gamma shown expression converges gamma 
asymptotic running time necklace lyndon word constant necklace algorithms cat 
generating restricted classes necklaces recursive form algorithm gen easy add restrictions kinds necklaces generated maintain cat property 
describe restrictions 
restrict number string lie bound simply add parameter gen keeps track number far 
long small resulting algorithm cat 
restrict necklaces contain substring simply iterate process calling gen initializing gamma 
resulting algorithm cat argument parallels proof theorem 
asymptotic extended fibonacci numbers 
generating equivalence classes complemented cycling register golomb considers complemented cycling register set binary strings length complemented cycling register ccr transforms input shown 
delta delta delta delta delta delta repeated application operation eventually results initial string 
ccr denote number distinct cycles ccr taken binary strings length ccr odd djn oe shown knuth right side equal number vortex free tournaments vertices 
number number odd density binary necklaces length example show cycle ccr strings give rise distinct cycles containing elements size cycle containing 
consider mapping sends consecutive members cycle 
cycle shown 
applied members cycle circular rotation results 
true general 
phi phi delta delta delta gamma phi phi phi delta delta delta gamma phi phi phi phi phi strings shifts 
furthermore contain odd number phi phi phi phi delta delta delta phi gamma phi phi phi phi 
process reversible long value specified 
implies natural correspondence binary necklaces odd number distinct cycles ccr binary strings length making minor modifications gen generate distinct cycles ccr add additional parameter keep track number string 
resulting string number rejected 
maintain array holds representative cycle ccr necessarily lexicographic representative 
equation recursive call find bit representative cycle gamma phi gamma resulting algorithm cat proportional running time generating odd density necklaces 
generating unlabeled binary necklaces section develop cat algorithm generate unlabeled necklaces 
recall unlabeled necklace equivalence class necklaces permutation alphabet symbols 
binary case necklace complement equivalence class 
representative choose lexicographically smallest string equivalence class giving rise set 
section gave explicit expressions count 
enumerations gilbert riordan 
enumeration follows lemma 
lemma ff delta delta delta ff 
proof fi delta delta delta equivalent ff permutation symbols 
definition unlabeled necklace fi greater equal ff fi greater equal ff lemma ff necklace definition ff unlabeled necklace 
lemma ff delta delta delta string equal length longest unlabeled lyndon prefix ff 
ff gammap proof gammap ff fi ffi fi delta delta delta ffi prefix fi 
lemma fi unlabeled necklace ff conversely assume ff lyn ff exist lyndon prefix ff length greater contradicts assumption ff lyn ff lemma gammap generate unlabeled binary necklaces need add check ensure string currently generating greater complement rotations 
perform check embed pass verification algorithm recursive scheme generate necklaces 
naive method testing length necklace unlabeled representative compare necklace complemented rotations worst case time theta 
proving properties binary strings necklaces perform test pass scan necklace time 
lemma delta delta delta delta delta delta binary strings equal length proof exists smallest values 
delta delta delta gamma delta delta delta gamma 
delta delta delta gamma delta delta delta gamma 
lemma strings equal length strings jzj jz xz yz lemma ff delta delta delta 
delta delta delta xy jy delta delta delta am proof substring ff lemma delta delta delta am get result delta delta delta am lemma ff delta delta delta delta delta delta binary string 
ff delta delta delta delta delta delta delta delta delta delta delta delta gamma ff 
proof delta delta delta delta delta delta lemma strings delta delta delta delta delta delta gammai lemma strings delta delta delta delta delta delta gamma ff string delta delta delta delta delta delta know 
definition necklace 
delta delta delta delta delta delta ff lemma 
function delta delta delta am necklace boolean local integer gammac gammac return false return true verification algorithm unlabeled binary necklaces 
binary string ff delta delta delta rot ff denote set complemented rotations delta delta delta delta delta delta gamma ff note consists exactly necklaces ff satisfy ff rot ff 
theorem ff delta delta delta 
rot ff ff delta delta delta delta delta delta gammak ff 
proof definition unlabeled necklace necklace unlabeled representative equal complemented rotations 
show ff rot ff 
rot ff satisfy condition show delta delta delta delta delta delta ff delta delta delta delta delta delta gammak delta delta delta lemma yields case delta delta delta delta delta delta gammaj case delta delta delta delta delta delta gammaj case start showing gammaj delta delta delta delta delta delta considering subcases gamma gamma gamma gammaj delta delta delta delta delta delta gammaj rot ff 
ff implies gammaj delta delta delta delta delta delta gamma gammaj delta delta delta substring delta delta delta substring delta delta delta gammaj lemma gammaj delta delta delta delta delta delta gammaj delta delta delta delta delta delta lemma delta delta delta gammaj delta delta delta gives result delta delta delta delta delta delta ff 
case apply lemma 
shown ff rot ff ff 
corollary ff delta delta delta 
delta delta delta delta delta delta gammai ff unlabeled necklace 
proof delta delta delta delta delta delta gammai lemma delta delta delta delta delta delta gamma ff 
exists smallest delta delta delta delta delta delta gammai theorem ff unlabeled necklace 
ff unlabeled necklace definition 
need final definition presenting main theorem section 
define com delta delta delta smallest value delta delta delta delta delta delta gammac value exists 
example com com com examples representing extreme values com give lemma useful proving theorem 
lemma binary string ff delta delta delta unlabeled pre necklace ff pre necklace delta delta delta delta delta delta gammai proof assume ff unlabeled pre necklace 
subset ff pre necklace 
definition unlabeled pre necklace exists unlabeled necklace fl fl string ffi 
definition unlabeled necklace delta delta delta delta delta delta gammai prove converse lyn ff 
mod ff necklace 
corollary ff unlabeled necklace definition ff unlabeled pre necklace 
mod construct string fi delta delta delta dn pe length extending ff 
observing delta delta delta unlabeled necklace fact delta delta delta necklace corollary get delta delta delta delta delta delta delta delta delta gamma lemma delta delta delta delta delta delta delta delta delta gamma bn pc delta delta delta am delta delta delta am gammai noticing delta delta delta unlabeled necklace delta delta delta delta delta delta gammai delta delta delta am delta delta delta am gammai bn pc fi necklace corollary observe fi unlabeled necklace definition ff unlabeled pre necklace 
theorem ff delta delta delta gamma gamma com ff 
string ffb ffb ii gammac gammac furthermore com ffb gammac gammac proof assume ffb 
previous lemma ffb 
gammac string delta delta delta gammac delta delta delta contradiction definition unlabeled pre necklace 
gammac 
gammac gammac gammac gammac prove converse show delta delta delta delta delta delta gammai previous lemma 
ff gamma com ff observe delta delta delta gamma delta delta delta gammai lemma delta delta delta delta delta delta gammai gammac delta delta delta delta delta delta gammac definition com ff 
gammac similar argument delta delta delta delta delta delta gammac applying lemma case get delta delta delta delta delta delta gammai delta delta delta delta delta delta gammai ffb 
furthermore gammac clearly com ffb gammac convention com ffb value holds 
note case gammac occur discussion paragraph proof 
procedure integer gammac gammap gammap recursive algorithm generating unlabeled binary necklaces 
necklace ff delta delta delta theorem suggests simple pass algorithm check ff 
apply theorem prefix ff maintaining way 
pseudo code algorithm may 
generate unlabeled necklaces modify necklace generation algorithm introducing parameter described previous theorem 
algorithm 
initial call assume 
unlabeled necklaces lyndon words pre necklaces produced table 
observe computation tree subtree computation tree gen constant computation performed node tree 
furthermore number unlabeled binary necklaces half number labeled binary necklaces 
observations prove theorem 
theorem algorithm cat algorithm 
remains interesting challenge extend ideas generate unlabeled necklaces non binary alphabets obvious way extend theorem 
generating irreducible polynomials gf finite field gf denote gf set polynomials gf indeterminate non zero polynomial said irreducible gf non trivial factorization irreducible polynomial primitive root ff ff generates non zero elements gf fff ff ff gf nf 
root roots generators 
equivalent definition mod divisors gamma gamma 
number degree irreducible polynomials gf number binary lyndon words length natural correspondence sets generate irreducible primitive polynomials degree 
explain correspondence 
primitive irreducible polynomials various applications important coding theory linear finite state machines digital circuit testing applications 
polynomials generator cyclic codes particular cycle structure polynomial chosen gives different performances 
characteristic polynomial matrix represents linear operator determines behaviour associated linear finite state machine 
primitive polynomials induce maximal length cycle structure linear finite state machine code words cyclic code traverse entire space possible non zero states non zero codewords cyclic codes returning initial starting point single cycle 
irreducible polynomials induce set disjoint subcycles 
properties useful domain application 
primitive polynomial degree ff roots 
gamma setting ff equivalence class gamma size equivalence classes correspondence irreducible polynomials degree divides forming polynomial delta delta delta gamma correspondence explained golomb see reutenauer correspondence normal bases seen exploited algorithmic context 
irreducible polynomials degree noting successive powers amount circular shifts irreducible polynomials degree may generated generating lyndon words length lyndon word generated converted integer corresponding polynomial computed 
example consider length aperiodic necklace 
equivalence class rotations 
elements class binary representations numbers 
ff root arbitrarily chosen primitive degree polynomial ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff irreducible polynomial corresponding 
note depends choice primitive polynomial reciprocal degree polynomial polynomial 
reciprocal irreducible polynomial irreducible reciprocal primitive polynomial primitive 
correspondence mentioned reciprocal polynomials correspond generated complement number produce generate degree polynomial time generate irreducible polynomials lyndon words unlabeled lyndon words 
saves asymptotically factor computation time 
check irreducible polynomial primitive simply compute gcd gamma 
irreducible polynomial primitive greatest common divisor 
algorithm implemented polynomial stored single machine word obvious manner 
intermediate calculations involve polynomials gf stored length arrays words 
day middle road workstation generate irreducible polynomials degree noting way primitive 
course large values infeasible generate irreducible polynomials algorithm generate wanted 
generated irreducible polynomials program 
running times seconds shown 
program poly available cos compiled gcc run sun microsystems ultra machine 
theoretically computation irreducible polynomial takes polynomial multiplications 
multiplication routine naive algorithm implemented machine words 
larger faster algorithms discussed von zur gathen 
algorithm suited parallelization system brendan mckay natural tree structure recursive algorithm assign different subtrees different processors 
algorithm compute various statistics irreducible polynomials lead results conjectures sizes various subclasses irreducible polynomials 
example number irreducible polynomials odd number nonzero odd terms 
example number irreducible polynomials trace coefficient gamma table lists degree irreducible polynomials table degree irreducible polynomials polynomial trace trace 
built test vlsi pseudorandom techniques john wiley sons 
berstel average cost duval algorithm generating lyndon words theoretical computer science 

duval en eration une section des classes de des mots de lyndon de born ee theoretical computer science 
er fast algorithm generating set partitions computer journal 
kessler algorithm generating necklaces beads colors discrete mathematics 
necklaces beads colors ary de bruijn sequences discrete mathematics 
von zur gathen gerhard factorization polynomials technical report tr university paderborn germany 
gilbert riordan symmetry types periodic sequences illinois mathematics 
golomb irreducible polynomials synchronization codes primitive necklaces cyclotomic algebra univ north carolina monograph series probability statistics 
golomb shift register sequences holden day 
graham knuth patashnik concrete mathematics addison wesley 
kaye gray code set partitions information processing letters 
knuth axioms hulls lecture notes computer science springer verlag 
finite fields applications cambridge university press 
tools fundamental constructions combinatorial mathematics 
combinatorics words cambridge university press 
miller necklaces symmetries self reciprocal polynomials discrete math 
ruskey smith analysis algorithms listing equivalence classes ary strings induced simple group actions siam discrete mathematics 
reutenauer free lie algebras clarendon press oxford 
ruskey savage wang generating necklaces algorithms 
sawada ruskey efficient algorithm listing fixed density necklaces manuscript 
von zur gathen gerhard arithmetic factorization polynomials proc 
issac acm press 
cycles ccr program include stdio int int int void print int int int return printf printf void gen int int int int print gen gen gen void main printf enter scanf gen 
