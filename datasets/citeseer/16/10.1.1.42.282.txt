designing automation reduce operator errors nancy leveson computer science engineering university washington everett palmer nasa ames research center advanced automation accompanied particularly aircraft proliferation modes modes define mutually exclusive sets system behavior 
new mode rich systems provide flexibility enhanced capabilities increase need difficulty maintaining mode awareness 
automation eliminated types operator errors created potential new types mode related problems sw 
studying accidents incidents new highly automated aircraft woods concluded certain errors non random predictable sw regular predictable consequences variety identifiable factors 
errors accentuated poor interface design gaps misconceptions user mental model system important factor inconsistent automation behavior 
woods identified predictable error forms 
leveson lps deg defined taxonomies automation features lead mode confusion 
describes approach dealing mode confusion errors modeling blackbox software behavior analysis methods tools assist searching models predictable error forms features contribute operator mistakes 
analysis results redesign automation change operator training procedures design appropriate human computer interfaces help avoid mistakes 
approach requires model blackbox behavior formal easily readable humans 
models part software specifications methodology called specification tools requirements methodology analysis done directly system requirements specification require extra modeling effort 
includes suite analysis tools detect errors potentially hazardous behavior early system development tradeoffs changes easily 
addition providing design guidance approach provide way measuring evaluating cognitive demands involved working specific automated devices 
suggested automation complexity defined terms predictability automation behavior hans 
predictability potentially evaluated formal rl requirements language models 
rest provides information approach illustrates commonly reported mode confusion error called kill capture bust 
mode confusion analysis accidents related software behavior traced back errors omissions software requirements implementation coding errors lev lut 
great deal effort expended software engineering finding software design implementation errors accomplished terms validating requirements specifications executing test cases showing consistency formal specification various properties underlying mathematical model hl hlk 
errors omissions lead accidents techniques 
testing complex software necessarily incomplete consistency mathematical model imply consistency required properties real world application 
deal problem specified set criteria completeness correctness blackbox process control requirements specifications related safety lev 
criteria derived real accidents industrial experience process control software validated experimental application nasa voyager software lut lut industrial 
extend criteria goal reducing mode confusion errors validate real software mlr 
sensors disturbances process outputs process inputs controlled process measured variables variables controlled supervisor set points control commands controller internal model process actuators automated simple control loop model sensors disturbances process outputs process inputs controlled process measured variables variables controlled internal model supervisory interface internal model process internal model controller controller internal model process actuators supervisor displays controls automated modified model account operator error mode confusion 
apply criteria blackbox state machine model automation behavior required 
blackbox requirements specifications contain information internal design software design automated controller computer written strictly terms externally visible inputs outputs effects model process controlled see 
process model 
current process state inferred measured variables 
past measured inferred process states variables 
past outputs actuators 
prediction states controlled process 
accidents related requirements behavioral specification occur internal model process inconsistent state controlled process 
inconsistency may result incorrect model specified originally model include basic required behavior unusual infrequently occurring cases modeled system state updated incorrectly execution result incorrect input sensors 
define criteria related mode confusion need add model controller software interface automated controller 
need consider supervisors internal models expected behavior state process automated controller see 
accidents extended model may result models incorrect inconsistent true state controlled process automated controller supervisory interface human computer interface 
accidents may result models inconsistent state thing modeling decisions actions basis incorrect model 
criteria correctness safety specified terms formal models checked particular system specifications 
course suggesting possible specify human mental models 
person may different mental model system automation may change time person 
fact operators able function multiple inconsistent models luc 
possible state high level abstractions required features correct operator mental models example particular actions part operator result eventually particular changes automation system 
note assume operator models correct 
assumption obviously true 
approach involves eliminating hazards ideal case 
various types hazard analysis determine types erroneous models serious consequences 
resulting information automation design interface design operator training 
previous described categories potential design flaws lead mode confusion errors interface interpretation flaws inconsistent behavior indirect mode changes operator authority limits unintended side effects lack appropriate feedback lps 
rest shows example approach particular common cause mode confusion error indirect mode changes 
basic criteria analysis technique specified formally lev include informal description 
indirect mode change example indirect mode changes occur automation changes mode explicit instruction operator 
transitions may triggered conditions controller preprogrammed envelope protection sensor input state controlled system achievement target value 
indirect mode transitions create potential mode confusion inadvertent activation modes human controller 
example human controller may update models state process state automation incorrect models issue incorrect control command fail issue required command 
example accident attributed indirect mode change occurred landing bangalore 
case pilot selection lower altitude automation altitude acquisition mode resulted activation open descent mode 
speculated pilots notice mode indirect mode change occurred approach pilots busy expecting change sw 
example indirect mode change automation involves automatic mode transition triggered airspeed exceeds predefined limit 
example pilot selects high vertical speed results airspeed decreasing particular limit automation change open climb mode allows airplane regain speed 
palmer described example common indirect mode transition problem called kill bust noted reports pal 
show relevant parts rl specification md control logic vert spd vert spd vert spd vert spd thrust arm roll pitch cap vor alt cap hld vor alt cap hld vor alt alt cap vor alt vor alt vor vor alt vor alt spd spd spd spd spd spd spd trk trk trk trk cap ias altitude capture speed level ft enter ft set vert spd enter ft approaching push ias automatic adjust vertical flight mode fma displays example incident describe problem detected fixed 
incident crew just missed approach climbed leveled feet 
shows sequence flight mode fma values incident 
crew received clearance climb maintain feet 
captain set desired altitude feet set autopilot pitch mode vertical speed value approximately feet minute spd mode value knots 
climbing feet captain called flaps feet called retract pushed ias button 
pitch mode ias went clamp mode 
point altitude capture armed 
seconds autopilot automatically switched altitude capture mode 
arm window went blank pitch window showed alt cap 
tenth second captain adjusted vertical speed wheel value feet minute 
speed adjustment caused pitch autopilot mode switch altitude capture vertical speed 
climbing feet fma shown approaching altitude light 
altitude passed feet vertical velocity feet minute captain remarked 
oops didn arm 
pushed alt hold button switched 
aircraft continued climb feet altitude altitude voice warning sounded repeatedly 
identify fix problem formal model 
rl model parts graphical model state machine specification logic transitions 
shows part graphical rl state machine model md vertical control logic needed understand incident fix software avoid 
order keep model small fit parts shown system engineering complete model constructed 
graphical model main parts input output interface supervisory interface part operating modes automation case system process model includes process aircraft operating modes models aircraft components 
supervisory interface square boxes denote inputs outputs having finite state values 
circles represent numbers 
note model represents automated controller view state interface necessarily real state controls displays 
complete safety analysis evaluate discrepancies occur discrepancies lead hazardous system states 
state transition logic specified rl form logic tables call tables 
transition taken columns table evaluates true 
column evaluates true non blank rows column true 
shows relevant transition logic example 
problem occurs transition alt cap mode results transition capture mode altitude acquired 
pilot arm changing blank pitch mode changes alt cap absence indicator known error prone way notify pilot mode change 
detected examining logic 
general indirect mode change occurs explicit pilot action change mode 
vertical control logic example mode transitions require direct pilot input transition alt cap second column transition alt hold altitude acquired pitch mode alt cap second column transition armed armed 
mode transitions triggered change controlled system variable internal mode change automation 
assume pilot mental model includes cause effect relationship altitude capture eventually may immediately acquiring altitude holding set altitude pull alt 
alt hold 
formal analysis show path logic starting pilot pulling altitude knob result alt hold state specifically occurs automation modes armed alt cap pilot changes pitch mode case adjusting vertical speed wheel 
way fix problem change transition logic shown 
note second column transition table alt hold require direct pilot input transition indirect definition satisfies pilot model transition logic 
transition alt cap indirect longer path vertical control logic violates expected cause effect relation capture capturing altitude acquired 
note solution may violate goals desired behaviors system designers determine deciding solution 
addition sophisticated solution may required hysteresis factor may need added mode transition logic avoid rapid ping transitions pitch modes 
finding indirect mode transitions mean software changed 
identified criteria simply clues determining look potential problems 
designers may decide real problem exists changes may decide change automation changes interface design pilot training 
general feasible mode transitions direct sophisticated automated controller 
goal simplify required pilot model automation behavior possible 
case pilot expects direct mode transition setting target altitude altitude capture eventually attaining capturing altitude changing alt hold mode canceling arm command 
paths automation logic violate assumption source potential mode confusion mode change 
course pilot may sophisticated knowledge automation logic know adjusting vertical speed wheel cancel previously altitude capture command 
knowledge assumes supervisory manual thrust arm roll pitch blank blank vor blank vor alt alt vor cap vor trk hdg sel alt hold vert spd ias cap alt blank spd ga epr displays alt hold vert spd ias button ap button vertical speed controls button button button wheel altitude dial mode inputs outputs omitted space reasons operating modes aircraft engine controller operating modes engine model flight flaps retracted retracted unknown unknown level descending unknown leveling climbing modes operating autopilot capture thrust arm pitch roll spd ga epr vor vor alt alt vor cap vor trk hdg sel alt hold vert spd ias cap alt armed armed component aircraft models part graphical state machine model md vertical control logic mode change pitch ias satisfies condition start leveling mode spd pilot pushes hold alt acquired mode alt cap ap mode pitch mode result pilot sets new higher alt pilot pulls alt change arm alt result alt cap change pitch spd ias goes clamp mode pitch capture pilot pushes ias pilot adjusts spd wheel pilot pushes spd button result result change arm blank alt cap pilot pushes alt alt hold vert spd ias cap alt ap mode ap mode pitch mode result change pitch alt hold armed armed armed armed armed armed alt hold difference mcp target altitude current alt vert velocity ap mode capture mode armed change pitch alt cap start leveling result transition logic pitch capture modes change pitch alt hold result alt hold pilot pushes hold alt acquired pitch mode ap mode capture mode armed result change arm blank pilot pushes alt pitch mode alt hold armed armed revised transition logic pitch capture modes complex model automation behavior part pilot automation behavior difficult predict 
number reports error leads believe assumption realistic 
caveats important 
guessing mc software logic basis observed behavior 
real software specifications code examined determine logic implemented 
second making change recommended may feasible correct due unmodeled parts logic depend armed mode real development project entire logic modeled able appropriate tradeoffs design decisions 
deg modeling human machine systems modes error patterns interaction 
ph 
thesis georgia institute technology 
hans john 
personal communication 
hl heimdahl leveson 
completeness consistency analysis statebased requirements 
transactions software engineering june 
hlk heitmeyer labaw consistency checking scr style requirements specifications 
int 
symposium requirements engineering york 
jaffe leveson heimdahl 
software requirements analysis real time process control systems 
ieee transactions software engineering se march 
lev leveson system safety computers 
addison wesley publishing 
lev leveson nancy mode confusion modeling analysis preparation 
lps leveson koga reese analyzing software specifications mode confusion potential 
proc 
workshop human error system development march 
luc lucas mental models new technology 
new technology human error john wiley sons pp 

lut lutz analyzing software requirements errors safety critical embedded systems 
software requirements conference 
lut lutz targeting safety related errors software requirements analysis 
proc 
sigsoft foundations software engineering 
mlr leveson reese partridge integrated safety analysis requirements specifications 
requirements engineering journal appear 
pal palmer oops didn arm case study automation surprises 
nasa technical report 
sw woods world get mode mode error awareness supervisory control 
human factors 
sw woods strong silent loop 
report tr ohio state university february 
