foundations virtual types atsushi igarashi benjamin pierce department computer information science university pennsylvania south rd st philadelphia pa usa saul cis upenn edu october virtual types proposed notation generic programming object oriented languages alternative familiar mechanism parametric classes 
tradeoffs mechanisms matter current debate examples appear offer convenient interchangeable solutions situations satisfactory 
proved difficult draw rigorous comparisons approaches partly current proposals virtual types vary considerably details partly proposals described informally complicating context full scale language designs 
foundations object oriented languages established clear connection parametric classes polymorphic functions familiar typed lambda calculi 
aim explore similar connection virtual types dependent records 
means examples straightforward model objects embedded type fields typed lambda calculus subtyping type operators fixed points dependent records bounded manifest type fields 
model discuss compare features previous proposals show checked statically require run time checks 
language support generic programming plays important role development reusable libraries 
domain object oriented languages approaches genericity considered 
familiar closely classical parametric polymorphism functional languages ml haskell example template mechanism str parametric classes number proposed extensions java ow mbl afm 
alternative approach commonly called virtual types virtual classes allows classes objects contain types members addition usual field method members 
virtual types originally developed beta mmp proposed java tho 
static typing virtual types clearly understood 
early proposals statically unsafe requiring extra runtime checks produced proposals type safe variants tor bow 
proposals vary substantially details generally informal terms complicating context full scale language designs making difficult evaluate compare 
referring approach phrase virtual types may somewhat confusing see type members may may virtual sense virtual methods 
terminology standard 
primary goal establish rigorous setting understand discuss basic mechanisms virtual types 
long line past foundations object oriented programming see bcp history citations model objects classes virtual types particular style programming fairly standard typed lambda calculus 
basis examine power type theoretic features required modeling virtual types similarities differences existing proposals full version type theoretic intuitions discussed overlap virtual types parametric classes practice 
organized follows 
section reviews idea virtual types means standard example animal cow class hierarchy shang sha 
section sketches main features typed lambda calculus forms setting model 
calculus defined full appendix 
section develops animal cow example calculus 
section summarizes previous virtual types light lambda calculus model 
section adds comments smaller issues 
sake brevity concentrate earlier sections summary emphasizing definition typed lambda calculus development basic animal cow example just sketching discussion comparisons sections 
virtual types reviewing notion virtual types example 
example variant animal cow example david shang sha 
notation java exactly correspond existing proposals virtual types java 
defining generic class animals interface 
interface virtual class animal implements type foodtype food virtual type foodtype food void eat foodtype virtual void eat foodtype void foodtype void foodtype eat eat animal methods eat accepting food argument 
body eat method specific particular kinds animals omitted virtual marker defers responsibility providing implementation subclasses 
keyword virtual preference java avoid terminological confusion locutions type established meaning 
calls eat body method call body provided subclass 
similarly class animal defers specifying exactly kind food kind animal likes eat 
virtual member foodtype acts placeholder type allowing mentioned types eat just declaration eat provides placeholder eventual implementation allowing referred body 
classes virtual members types methods instantiated incomplete subclassed 
interface specifies animal object members type foodtype methods eat 
foodtype member animal known kind food foodtype 
food different animals eat different kinds food exact identity type visible 
follows immediately possible feed animal knowing kind animal object type eat method requires argument type foodtype way obtain value type building nutrient free empty value new 
specific kinds animals modeled classes inheriting animal 
example cow class interface interface extends class cow extends animal implements type foodtype grass final type foodtype grass void eat foodtype 
cow virtual method eat concrete implementation shown 
similarly virtual type member foodtype concrete value grass 
annotation final foodtype member means redefined subclasses subclass cow guaranteed grass foodtype 
interface reflects fact foodtype final effect tells world cow eats food type equal grass 
object type may validly obtain grass source pass eat methods 
virtual types useful standard examples generic programming 
example generic set class defined virtual type 
classes defined inheriting set giving final binding integer string 
examples generic programming virtual types mmp tho 
records type fields known parametric classes classes abstracted type parameters understood polymorphic functions typed lambda calculus 
similarly objects type members clearly modeled kind records type fields 
fortunately records studied extensively type theory literature car 
particular form constraints type members appearing interfaces foodtype 
food foodtype grass correspond known constructions 
records type fields constrained generalization partially types cw records type fields constrained correspond translucent manifest sums typed lambda calculi harper lillibridge hl lil leroy ler model module systems 
lambda calculus sketched section directly intuitions 
essence described system omega order polymorphic lambda calculus subtyping car cl ps com plus dependent records bounded manifest type fields 
brevity assume readers familiar system concentrate explaining dependent records somewhat familiar appendix includes summary system 
support records type fields fairly sophisticated machinery required 
deal fact fields record may refer earlier fields name type eat field refer foodtype field 
particular order fields significant 
second able deal record projection expressions foodtype appearing types values eat 
general dependent record form fi delta delta deltan fi field forms term field type field label external name th field name project outside 
internal name binder scope rest fields record significance outside record definition renamed usual conventions alpha conversion 
distinction internal external names discussed example hl 
internal external names agree write shorthand similarly internal name mentioned rest record drop writing simply example record value nat abbreviated nat 
record type form delta delta deltan binding forms term binding bounded type binding 
manifest type binding example record type nat abbreviate nat 
informative type possessed top hides representation corresponds usual existential type 
formally typing rule record gamma gamma fi delta delta deltan gamma delta delta deltan gamma fi delta delta deltan delta delta deltan rcd field definition fi satisfy corresponding binding context augmented information preceding fields gamma gamma 
term fields satisfy bindings form type fields satisfy manifest type bindings 
note directly derive record type bounded type binding rule rcd 
example type nat 
want hide identity give type top usual subsumption rule plus record subtyping rules discussed 
rule record projections basically standard record elimination rule field binding type depends fields internal name preceding field occurs free corresponding record projection substituted prevent internal name escaping scope 
gamma delta delta deltan gamma 
delta delta delta gamma 
gamma gt dot write bv bound variable binding bv bv bv subtyping rule record types gamma gamma delta delta deltan gamma bn ok gamma ok gamma delta delta deltan delta delta deltan rcd usual ordinary non dependent records width subtyping allowed extra fields st th fields dropped 
corresponding bindings compared sub binding relation 
term bindings form subtype captures ordinary depth subtyping 
type bindings clause allows exact identity type field replaced upper bound second corresponding subtyping bounded existential types allows loosen bound example derive nat top 
usual rule leads undecidable subtyping relation pie lil 
encoding virtual types typed lambda calculus hand proceed technical heart straightforward encoding animal example section terms records type fields 
sake concreteness extend familiar existential encoding objects pt hp believe methods encoding objects recursive types recursive existential types bcp yield similar results tried detail 
brevity assume reader familiar idea existential encoding 
avoid introducing additional complexities type theory give encoding purely functional objects example assume animal eat method returns new animal side effecting instance variables receiver 
imperative variants encoding discussed section 
interfaces interface object represented type operator rep delta delta deltan bound variable rep stands type object internal state type corresponding method method takes internal state object explicit argument 
interface represented rep foodtype 
food eat rep foodtype rep rep foodtype rep binding foodtype 
food direct transliteration constraint foodtype section 
similarly interface represented rep foodtype grass eat rep foodtype rep rep foodtype rep binding foodtype manifest 
note subtype allow cow objects regarded animals 
objects type objects interface written object record type including hidden existentially bound representation type rep state field type rep method vector field containing record type rep formally type operator object defined object rep state rep methods rep object choosing simple representation hungry bool internal state cows define element type object follows cow rep state 
hungry true methods 
fix self foodtype grass eat foodtype hungry false foodtype self eat self eat object cow object classes full version example extended include class animals derived subclass cows 
development follows familiar lines pt interesting subtleties concerning typing methods eat types involve virtual types 
give flavor development explanation encoding animal class hungry bool self foodtype self foodtype eat self eat foodtype self eat self eat pi self 
foodtype self foodtype eat 
foodtype 
foodtype comparisons virtual types called virtual classes original proposal introduced beta madsen mller pedersen mmp mechanism achieve genericity object oriented languages 
thorup tho introduced virtual types extension java 
virtual types classes fact virtual sense interface animal objects view better modeled rep foodtype food eat rep foodtype rep rep foodtype rep foodtype declared equal food 
allow type fields specialized rep foodtype grass eat rep foodtype rep rep foodtype rep 
want regard cows animals object object 
taken properties specifically inclusion yield unsound type system take cow regard animal feed meat type meat subtype food acceptable argument animal eat method 
various approaches suggested remedy unsoundness 
beta thorup proposed java extension run time checks added methods eat sure arguments acceptable 
observed checks omitted case type binding marked final 
tor proposed statically typesafe variant virtual types introducing essentially distinction virtual type bindings may specialized subclasses block instantiation classes containing final ones allow instantiation block specialization subclasses 
model objects virtual types corresponds closely proposal 
possible criticism idea general may lead duplication class hierarchy 
thing class animal contains virtual types virtual methods eat concrete generic implementation may want instantiate class animal 
requires making explicit subclass call animal animal foodtype equal food 
animal foodtype food animal foodtype food cow foodtype grass making cow leaf subclass hierarchy may wish allow specialization subclasses 
case change constraint foodtype grass cow virtual class introduce leaf class cow foodtype grass 
animal foodtype food animal foodtype food cow foodtype grass cow foodtype grass foodtype foodtype fortunately variants derived mechanically classes pointed 
bruce odersky wadler bow proposed statically safe variant virtual types viewed making idea explicit 
proposal light find helpful way understanding 
system virtual types large scale experiments british farms shown practice leads undesirable results 
introduced constraints write foodtype food class exact class automatically provided 
new operator generates instance exact classes expression new cow yields object type cow regarded cow forgetting exactness regarded animal animal ordinary subtyping 
discussion close discussing additional points related encoding 
brevity summary just sketch topics treated full version 
ffl overlap virtual types parametric classes remarked authors bow tt 
encoding viewed consequence inter universal existential polymorphism presence dependent types 
ffl points modeling objects classes virtual types surprisingly difficult 
currently struggling 
imperative variants encodings methods eat side effecting mutable instance variables technicalities underlying type theory subtle imperative features added instance variables virtual types mutually recursive classes involving virtual types known subject observer example 
viewed just weakness modeling framework limitation current state development type systems combining dependent types computational effects 
may turn signs unrecognized subtleties intended semantics virtual types 
acknowledgments supported indiana university university pennsylvania national science foundation ccr principled foundations programming objects 
igarashi research fellow japan society promotion science 
afm ole agesen stephen freund john mitchell 
adding type parameterization java language 
object oriented programing systems languages applications oopsla october 
bcp kim bruce luca cardelli benjamin pierce 
comparing object encodings 
theoretical aspects computer software tacs sendai japan september 
earlier version invited lecture third international workshop foundations object oriented languages fool july 
bow kim bruce martin odersky philip wadler 
statically safe alternative virtual types 
proceedings european conference object oriented programming ecoop 
car luca cardelli 
notes unpublished manuscript october 
car luca cardelli 
typeful programming 
neuhold paul editors formal description programming concepts 
springer verlag 
earlier version appeared dec systems research center research report february 
cl luca cardelli giuseppe longo 
semantic basis quest 
journal functional programming october 
preliminary version acm conference lisp functional programming june 
available dec src research report feb 
com adriana 
decidability higher order subtyping intersection types 
computer science logic september 
poland 
springer lecture notes computer science june 
available university edinburgh lfcs technical report ecs lfcs titled subtyping decidable 
cw luca cardelli peter wegner 
understanding types data abstraction polymorphism 
computing surveys december 
hl robert harper mark lillibridge 
type theoretic approach higher order modules sharing 
proceedings acm symposium principles programming languages popl portland oregon pages portland january 
hp martin hofmann benjamin pierce 
unifying type theoretic framework objects 
journal functional programming october 
previous versions appeared symposium theoretical aspects computer science pages title view objects subtyping preliminary report university edinburgh lfcs technical report ecs lfcs 
ler xavier leroy 
manifest types modules separate compilation 
conference record popl st acm sigplan sigact symposium principles programming languages pages portland january 
lil mark lillibridge 
translucent sums foundation higher order module systems 
phd thesis school computer science carnegie mellon university pittsburgh pa may 
mbl andrew myers joseph bank barbara liskov 
parametrized types java 
acm symposium principles programming languages popl january 
ole lehrmann madsen boris magnusson mller pedersen 
strong typing objectoriented languages revisited 
proceedings conference object oriented programming systems languages applications oopsla european conference object oriented programming ecoop pages ottawa canada october 
acm press new york ny usa 
published sigplan notices volume number 
mmp ole lehrmann madsen mller pedersen 
virtual classes powerful mechanism objectoriented programming 
object oriented programing systems languages applications oopsla 
ole lehrmann madsen mller pedersen nygaard 
object oriented programming beta programming language 
addison wesley 
ow martin odersky philip wadler 
pizza java translating theory practice 
acm symposium principles programming languages popl 
pie benjamin pierce 
bounded quantification undecidable 
information computation july 
carl gunter john mitchell editors theoretical aspects objectoriented programming types semantics language design mit press 
preliminary version appeared popl 
ps benjamin pierce martin steffen 
higher order subtyping 
ifip working conference programming concepts methods calculi 
full version theoretical computer science vol 
pp 
corrigendum tcs vol 

pt benjamin pierce david turner 
simple type theoretic foundations object oriented programming 
journal functional programming april 
preliminary version appeared principles programming languages university edinburgh technical report title object oriented programming recursive types 
sha david shang 
cows animals 
object currents 
www sigs com 
str bjarne stroustrup 
programming language 
addison wesley longman reading ma third edition 
tho thorup 
genericity java virtual types 
proceedings european conference object oriented programming ecoop volume lecture notes computer science pages 
springer verlag 
tor mads 
types statically safe 
th workshop foundations object oriented languages fool january 
tt thorup mads 
unifying genericity 
manuscript 
summary calculus appendix summarizes syntax reduction rules typing rules higher order polymorphic calculus subtyping system plus dependent records bounded manifest bindings 
individual features calculus studied carefully literature combination believed proved 
sound 
examples checked mechanically implementation 
syntax sets kinds types bindings terms fields fi contexts gamma defined grammer kind proper types operator kind type variable top top type polymorphic function type pi dependent function type type operator type operator application delta delta deltan type records record projection 
bounded type binding manifest type binding term binding variable polymorphic abstraction abstraction polymorphic application application fi delta delta deltan record intro record projection fix fixed point operator fi type field term field gamma ffl empty context gamma context extended binding gamma context extended type binding abbreviations def pi fv top def top top def top def top def top def top def 
top def 
top def free fields right def def reduction gamma fx 
tgs beta gamma fx 
tgt fi fi delta delta deltan gamma fi 
delta delta delta fi gamma 
gamma gt dot fix gamma fix fix plus congruence rules syntactic forms 
judgments judgments forms gamma ok gamma formed context gamma type constructor kind gamma term type gamma fi fi record field binding gamma subtype gamma gamma equivalent types gamma equivalent bindings context formedness ffl ok empty gamma ok dom gamma gamma ok gamma ok dom gamma gamma gamma 
ok leq gamma ok dom gamma gamma gamma ok eq gamma ok dom gamma gamma gamma ok term kinding rules gamma top top gamma gamma var gamma gamma gamma eq 
gamma gamma gamma leq gamma 
ok gamma 
gamma gamma ok gamma gamma pi pi gamma bn ok gamma delta delta deltan rcd gamma ok gamma gamma abs gamma gamma gamma app gamma delta delta deltan gamma gamma gamma dot typing rules gamma gamma var gamma ok gamma gamma pi abs gamma pi gamma gamma fx 
sgt app gamma 
ok gamma 
gamma tabs gamma gamma gamma fx 
tapp gamma gamma fi delta delta deltan gamma delta delta deltan gamma fi delta delta deltan delta delta deltan rcd gamma delta delta deltan gamma 
delta delta delta gamma 
gamma gt dot gamma gamma fix fix gamma gamma gamma sub typing rules record fields gamma gamma tf type gamma gamma tf value subtyping rules gamma gamma eqv gamma gamma gamma trans 
gamma gamma leq gamma gamma top top gamma gamma 
gamma 
ok gamma 
ok gamma gamma gamma gamma ok gamma ok gamma pi pi pi gamma gamma delta delta deltan gamma bn ok gamma ok gamma delta delta deltan delta delta deltan rcd gamma ok gamma gamma abs gamma gamma gamma app gamma delta delta deltan gamma 
delta delta delta gamma 
gamma gt dot sub binding rules gamma gamma sb leq leq gamma gamma sb eq leq gamma gamma sb eq eq gamma gamma sb term term type equivalence rules gamma gamma ref gamma gamma sym gamma gamma gamma trans gamma 
ok gamma 
gamma gamma ok gamma gamma pi pi pi gamma gamma gamma gamma app gamma gamma delta delta deltan gamma bn ok gamma ok gamma delta delta deltan delta delta deltan rcd gamma gamma fx 
tgs gamma gamma eq gamma delta delta deltan gamma 
delta delta delta gamma 
gamma gt dot binding equivalence rules gamma gamma beq leq gamma gamma beq eq gamma gamma beq term 
