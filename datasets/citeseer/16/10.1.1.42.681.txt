logical approach high level robot programming progress report yves lesp erance hector levesque fangzhen lin daniel marcu raymond reiter richard scherl department computer science university toronto toronto canada hector fl marcu reiter ai toronto edu describes novel approach high level robot programming highly developed logical theory action 
user provides specification robot basic actions preconditions effects environment relevant aspects environment extended version situation calculus 
specify robot behaviors terms actions programming language allows world conditions pop table pick 
programs executed drive robot 
interpreter automatically maintains world model required execute programs specification 
theoretical framework includes solution frame problem general handles dynamic incompletely known worlds perception actions 
kind domain specification possible support sophisticated reasoning task planning run time 
specification prove robot control programs correct 
simple mail delivery application approach 
ongoing implementing approach handling outstanding problems modeling noisy sensors described 
motivation virtually current research robotics concerns basic level tasks sensory processing path planning manipulator design control reactive agents artificial insects contrast ongoing research project cognitive robotics concerned theory implementation agents reason act perceive changing incompletely known unpredictable environments 
agents higher level cognitive functions involve reasoning example goals actions perceive research received financial support information technology research center ontario canada institute robotics intelligent systems canada natural science engineering research council canada 
levesque reiter fellows canadian institute advanced research 
look cognitive states agents collaborative task execution short concern integrating reasoning perception action uniform theoretical implementation framework 
objective provide progress report enterprise demonstrate far dead horse robotics researchers claim logic symbolic ai extremely fruitful approach design implementation autonomous agents 
trick earlier attempts logic controlling robots get technical foundations right 
outlines take appropriate foundations theory action consequences robotics 
logic situation calculus situation calculus enjoying new days partly expressiveness richer commonly believed gelfond lifschitz pinto partly useful precisely characterizing strengths limitations various general theories actions lifschitz 
reasons grounded theorizing cognitive robotics situation calculus 
shall show remainder formalism admits natural extensions accommodate knowledge perception descriptions complex behaviors procedural control sacrificing clarity logical precision language choice theoretical analysis 
frame problem despite thinking ai community frame problem go away 
approach cognitive robotics relies solution problem particularly attractive theoretical computational properties 
perception knowledge perceptual actions see door open distinguished ordinary ones pick block influence agent state knowledge world 
means right story perception provide account agent epistemic state affected perceptual actions 
nicer features situation calculus leads quite naturally appropriate formalization agent knowledge 
surprisingly perception contributes peculiarities frame problem 
describe suitable generalization earlier solution ordinary actions accommodate perception 
complex actions robot control results frame problem associated formal accounts ordinary actions knowledge perceptual actions apply primitive deterministic actions 
behavioral repertoire robot include complex actions example action clearing table defined object table pick place floor 
action defined terms primitive actions pick object put object floor iteration sequence 
shall see possible define complex actions situation calculus 
result golog novel logic programming language suitable declaratively defining complex behaviors capable executing actions 
golog candidate programming language high level robot control 
integrating reasoning action perception putting results frame problem perception knowledge complex actions obtain unified theory combining elements 
positioned investigate relationships hold reasoning action perception 
include kinds tasks planning acquire knowledge finding mary telephone number 
ii introspection vs perception acquiring information 
iii goal driven perception perceive look 
cognitive robotics different 
approach robotics neat 
believe brittleness current ai systems derives failure provide principled theoretical account task achieved 
accordingly follow kaelbling rosenschein focus logic synthesize reactive agents look reasoning run time user specified control programs 
adopted firm methodological commitment project implementation situation calculus specification 
surprised far able push idea 
specifications various planning tasks associated planning algorithms theories sensor noise uncertainty indexicals agent ability strips systems time golog robot programming language situation calculus semantics 
functioning golog interpreter implementations simple applications moment simulation mode 
plans include trying ideas control mobile robot 
outline running example illustrate approach 
involves mobile robot deliver letters small parcels office environment 
assume robot knows general layout environment locations peoples offices 
receives requests pick items delivery say electronic mail 
section covers logical foundations approach 
describe golog programming language 
mail delivery example detail 
discuss issues robot architecture describe experience far implementing experimenting golog 
conclude discussing topics research 
logical foundations situation calculus frame problem situation calculus presentation reiter order language representing dynamically changing worlds changes result named actions performed agent 
terms represent states world situations 
ff action situation result performing ff represented ff 
constant denote initial situation 
relations truth values vary situation situation called fluents denoted predicate symbols situation term argument 
example robot carrying means robot carrying package situation functions denotations vary situation situation called functional fluents 
denoted function symbols extra argument situation term pos robot robot position situation assumed provided action ff action precondition axiom form ff formula specifying preconditions action ff 
action precondition axiom poss ff ff action precondition axiom action drop 
oss drop pkg robot carrying pkg pos robot pos box recipient pkg says drop possible robot carrying package positioned recipient mailbox 
furthermore assumed provided fluent general effect axioms form 
general positive effect axiom fluent poss fl general negative effect axiom fluent poss fl gamma fl formula describing conditions doing action situation leads fluent true successor situation similarly fl gamma formula describing conditions performing action situation results fluent false situation 
example positive effect axiom fluent robot carrying 
oss pick package robot carrying package sentence negative effect axiom robot carrying 
oss drop package robot carrying package effect axioms provide causal laws domain application 
usually provide frame axioms specify fluents remain unchanged 
frame problem arises number frame axioms general case order theta theta number actions number fluents 
solution frame problem reiter pednault schubert haas rests completeness assumption 
assumption axioms characterize conditions action lead fluent true respectively false successor situation 
action possible truth value changes false true result doing fl true similarly change true false 
additionally unique name axioms added actions situations 
reiter shows derive set successor state axioms form axioms positive negative effect completeness assumption 
successor state axiom poss fl fl gamma similar successor state axioms may written functional fluents 
successor state axiom needed fluent action precondition axiom needed action axioms needed 
successor state axiom robot carrying obtained 
oss robot carrying package pick package robot carrying package drop package robot carrying package just picked carrying drop 
note example robot carrying follows assuming robot carrying drop 
discussion assumed ramifications sentences contributing indirect effects actions 
example sentence 
assumption state constraints axiomatization domain 
lin reiter approach discussed section extended state constraints compiling effects state constraints successor state axioms 
perceptual actions knowledge model effects perceptual actions come suitable formalization knowledge 
approach take adapt standard possible world model knowledge situation calculus done moore 
informally think binary accessibility relation situations situation understood accessible situation far agent knows situation situation known true accessible conversely known false accessible situation 
treat knowledge fluent introduce binary relation read accessible treat way fluent 
words point view situation calculus argument official situation argument expressing known situation argument just auxiliary robot carrying note convention means arguments reversed normal modal logic 
introduce notation knows read known situation abbreviation formula uses example knows ordered shipment package def ordered shipment package note notation supplies appropriate situation argument fluent expansion conventions certainly possible 
case equality literals convention supply situation argument non variable argument equality predicate 
example knows number bill number mary def number bill number mary notation generalized inductively arbitrary formulas example broken def broken turning knowledge producing actions sorts actions consider actions effect known truth value formula actions known value term 
case imagine action fluent doing truth value known 
introduce notation abbreviation formula indicating truth value fluent known 
def knows knows follow specification section second case imagine action read term doing read denotation known 
case introduce notation defined follows def appear follow specification developed section read simplicity assume type knowledge producing action associated characteristic fluent term way 
solving frame problem knowledge producing actions approach developed rests specification successor state axiom relation 
situations relation completely determined relation action non knowledge producing actions drop specification moore follows oss drop drop drop idea far agent world knows worlds 
drop far agent knows worlds drop 
change knowledge occurs moving drop knowledge action drop performed 
consider simple case action determines fluent true moore 
case poss far agent world knows worlds 
far agent knows worlds 
idea moving agent knows action performed truth value predicate observe successor state axiom guarantees true iff true similarly 
truth value worlds true 
case read action denotation term known replaced 
denotation worlds read read true 
general may knowledge producing actions 
associated knowledge producing action ff formula 
case sense type action formula form fluent 
case read type action formula form situation dependent term 
assume knowledge producing actions ff ff associated formulas form successor state axiom follows successor state axiom ff 
ff relation particular situation completely determined relation action complex actions golog actions situation calculus primitive determinate 
primitive computer instructions assignment 
need complex actions reason need programs 
complex actions treated class entities tests appear forms oe ffi ffi involve formulas means reify fluents formulas 
necessary axiomatize correspondence reified formulas actual situation calculus formulas 
results complex theory 
treat complex action expressions abbreviations expressions situation calculus logical language 
may thought macros expand genuine logical expressions 
done defining predicate ffi ffi complex action expression 
ffi intended mean agent doing action ffi state leads necessarily unique state inductive definition includes cases ffl def oss simple actions ffl ffi ffi def ffi ffi sequences ffl ffi jffi def ffi ffi nondeterministic choice actions ffl pix ffi def ffi nondeterministic choice parameters cases handle tests oe conditionals oe ffi ffi loops oe ffi oe ffi recursive procedures 
set complex action expressions forms programming language call golog algol logic suitable high level programming robots software agents discrete event simulation 
golog differs ordinary programming languages ffl situation calculus semantics ffl complex actions decompose primitives cases refer actions external world ffl executing complex action may involve arbitrary order reasoning executing robot carrying drop requires inferring robot carrying current state interpreter programming language theorem prover 
golog designed compromise classical planning detailed programming 
highlevel nondeterministic language express schematic plans 
schemas give advice robot achieve certain effects necessarily specifying detail perform action 
details figured theorem prover program executed 
example golog program robot accomplish mail delivery task need come specification application domain appropriate level abstraction 
suppose take primitives actions go position pick package drop package sense requests golog system essentially treat external procedures 
obviously choose actions implemented robot architecture 
model states robot environment fluents ordered shipment package robot carrying package pos object specify preconditions pick action axiom oss pick package ordered shipment package pos robot pos box shipper package pick possible ordered package shipped robot positioned shipper box 
precondition axiom drop earlier 
actions go sense requests assumed possible 
successor state axiom functional fluent pos goes follows oss pos pos robot robot carrying go pos pos pos robot robot carrying pos go pos objects positions unaffected actions go pos results robot pos carrying 
successor state axiom robot carrying earlier 
knowledge fluent oss sense requests ordered shipment ordered shipment sense requests results robot knowing ordered actions effects robot knowledge knowing performed 
order situation depends robot actions shipment requests agents 
robot find shipment orders sensing reasoning need provide successor state axiom fluent ordered shipment 
include axiom oss ordered shipment package pick package ordered shipment package allows robot avoid shipment picked order 
current implementation handles specifications 
completely general treatment domains multiple agents exogenous events currently development 
need specification domain initial state example pos robot ffi ordered shipment package shipper package yves recipient package daniel pos box yves pos box daniel axiomatization domain write golog programs control robot terms primitives specified example proc grab letters sense requests ordered shipment recipient go pos box shipper pick proc serve grab letters robot carrying recipient go pos box robot carrying recipient drop proc control sense requests ordered shipment pi ordered shipment recipient serve sense requests proc control sense requests ordered shipment pi ordered shipment go pos box shipper pick go pos box recipient drop sense requests note nondeterminism procedures 
control control simple examples top level procedures control event driven robot 
example assumed going position primitive action 
applications robot complete knowledge environment occasionally run obstacles know 
sketch golog write program get robot obstacles 
primitive actions finer granularity example sense pos sense current position sense path pos pos run path planner find path follow path path follow path stopping obstacle encountered add obstacle pos update robot map include obstacle primitives simple procedure get robot obstacles defined follows proc go pos sense pos sense path pos robot pos pi path path path pos robot pos follow path path sense pos pos robot pos add obstacle pos robot go pos obviously extended handle cases path exists robot gets stuck section discuss problems noisy sensors inaccurate effectors 
architectural issues central objective project explore space possible formalisms design methods architectures high level ai approaches oe ae oe ae oe oe 

user golog interpreter low level controller world map path planner collision avoidance parameters motion commands status reports sensor data map updates map data map data actions perception target positions path target high level controller written golog golog programs axioms actions initial state proposed architecture reasoning action perception knowledge usual robot programming methods 
describe proposal robot architecture arose current efforts implement robot mail delivery application 
viewed final answer questions robot architecture different applications require different solutions 
robot architecture illustrated 
high level controller programmed golog drives architecture 
user supplies action precondition effects axioms specification initial state golog program control robot golog interpreter executes program axioms maintain world model 
high level controller drive platform directly low level reactive controller performs reflex actions needed application case collision avoidance 
frees high level controller having respond real time exceptional conditions 
high level controller maintains map environment queries separate path planning module find get target positions 
sends paths low level controller execution 
adjusts parameters collision avoidance circuits monitors platform status reported lowlevel controller 
high level controller responsible getting platform obstacles 
involve examining available sensor data performing additional sensing determining nature obstacle updating map temporarily permanently path planner sending new path low level controller execution 
diagnosing type obstacle encountered handled controller specialized module 
golog nondeterminism presents difficulties architecture intended operate real world opposed simulation 
absence sensing acts completely golog program sequence basic actions takes initial state final state execute sequence actions 
technically amounts attempting prove axioms program successful answer extraction obtain binding executing sequence sensing longer generally possible tests may depend information previously sensed able evaluate test performed sensing 
possibility expand program sensing action encountered point execute expanded actions knowledge base updated information acquired sensing interpretation process start 
appears problems interpretation regime sensing actions affect control flow complex ways hard understand program hard reason conditions correct secondly expansion may get arbitrarily large action performed leads implementation problems 
adopt approach interpreting non deterministic action golog arbitrarily picks alternative tries expand reaches primitive action process fails test turns false alternative tried primitive action successfully reached golog commits alternative starts executing 
essentially golog expanding executing actions time little bit lookahead respect tests 
retain useful aspects non determinism type applications envisioned especially ability leave interpreter find object satisfies description perform actions 
interpretation regime implemented efficiently behavior generated programs easily understood straightforward specify prove correct 
golog maintains world model user 
evaluate tests program contains keep track effects previous actions world conditions revise world model incorporate information acquired sensing 
previous reiter scherl levesque proposed method reasoning condition holds sequence actions 
uses form regression reduce query involving initial state resulting query handled ordinary atemporal theorem proving method 
approach efficient plain theorem proving general handles incompletely known initial states actions context dependent effects 
proven sound complete 
regression incorporate information acquired sensing world model information acquired regressed refers initial state result added theory initial state 
problem regression approach cost increases number actions performed 
clear general need roll agent knowledge forward time actions performed 
lin reiter shown progression knowledge base kb need order representable 
identify useful special case progression kb order representable easily computable kb state dependent sentences consist ground literals actions context dependent effects 
note closed world assumption agent knowledge may incomplete 
problem regression approach handle exogenous actions cases interpreter know sequence actions occurred 
current implementation handles cases doing sensing regression performed instance fluent ordered shipment mail delivery example 
mentioned earlier working general account exogenous actions 
clearly progress kb possible regression fall back method 
way generalize progression method 
cases may possible partition kb handle fluents regression progression 
agent strive reduce kb form required progression performing appropriate sensing acts 
cases may necessary content efficiently computable approximation progression weaker strongest postcondition kb action 
vision golog architecture involves performance limited amount task level planning run time 
user provide sketchy plan golog fill details output planner complete golog program 
working planning methods appropriate agents operating incomplete knowledge 
lesp erance generalizes regression planning techniques synthesize plans include sensing acts conditionals 
way extend classical planners linear nonlinear include control information lin 
experience flexibility situation calculus useful doing 
task planning triggered explicit call user program plan achieve goal 
arise interpreter notices know condition tested program holds case planner find way achieve knowledge goal 
planner invoked interpreter noticing gone execution program precondition failing hold user provide information golog goal program intended achieve 
decide exactly responsibility program executing successfully including execution monitoring exception handling split user interpreter 
implementation experimentation prototype golog interpreter implemented prolog various applications developed test ideas explore architectural issues 
far experiments run simulation mode 
involved simple controller elevator 
various treatments sensing investigated 
experiments involved mail delivery application lines example 
case interfaced golog system simulator nguyen hanks thomas 
domain model golog domain axiomatization developed various golog control programs robot written 
working realistic version application 
golog system interfaced software developed ark robotics project jenkin robinson jenkin 
ark software includes path planner map maintenance facilities graphical user interface versions low level reactive controller type described previous section simulation operation platforms ark rwi nomad 
sense path follow path add obstacle actions mentioned example correspond operations available ark software 
operations invoked directly golog 
current focuses developing simple realistic sensor configuration simulated robot refining domain axiomatization programming interesting range behaviors application golog extending current golog interpreter functions knowledge base progression automated handling queries sensing reasoning 
intend progress non simulated experiments platforms mentioned near 
addition robotics applications investigating golog program software agents 
autonomous entities operate large software environments computer networks operating systems assist user performing various tasks etzioni 
sample tasks include monitoring bulletin boards interesting information compressing files accessed time 
looks history computer programming quite clear early forms programming directly features underlying hardware 
surprising earliest programmers electrical engineers simply forced learn quite bit failure prone machinery 
ways robot programming today similar state 
remains tightly coupled robotic hardware large extent attempted individuals conversant hardware 
argued different form robot programming formal theory action knowledge 
long run expect approach robot programming enjoy sort advantages derived high level computer languages 
ultimately feel possible fully control robot minimal attention details sensors effectors 
certainly case today 
hand apart unreliability deficiencies hardware platforms number difficult conceptual issues need resolved framework practical 
sensor noise current theory knowledge allows model sensor acquires value example distance wall certain tolerance say sigma 
model fact value range meters range meters say 
model need extend model knowledge incorporate subjective probabilities 
appear sort techniques considered bacchus readily applicable 
applies effector inaccuracy 
multiple agents concurrency exogenous actions logical framework developed single agent domains 
need devise true account exogenous actions performed 
issues raises concurrency solve frame problem concurrent actions effect actions done parallel need predictable general individual effects 
issue raised modeling mental life agents state knowledge agent example change result action performed 
temporal reasoning natural events related issue exogenous action natural events 
able model situations change sort place unrelated direct action agents example situation water flowing 
requires allowing situations time intervals time points actions start interval pinto 
exception handling form programming considering far naturally viewed directed goal goals 
program execution various exceptional situations arise require handling 
example may want robot slow collision imminent ring warning bell approaching blind corner 
develop ways integrating type bottom processing normal top execution golog 
robot centered representations true primitive actions available robots typically advance centimeters go absolute location grasp object ahead pick object 
sorts actions representable situation calculus details relations need worked see lesp erance levesque 
ability consider complex actions include non determinism conditions truth values need determined perceptually need concerned agent knowledge execute program able choices necessary levesque 
topic having robot perform run time planning mentioned section architectural issues 
far tell pose insurmountable problems admit incremental solutions 
fact partial solutions 
integrated full working robotic system remains seen 
initial version mail delivery application interface golog implemented bill millar 
useful discussions participants ark project especially michael jenkin piotr 
bacchus grove halpern koller 
statistical foundations default reasoning 
proceedings thirteenth international joint conference artificial intelligence 
chamb ery france morgan kaufmann publishing 
etzioni 
intelligence robots reply brooks 
ai magazine 
gelfond lifschitz 
limitations situation calculus 
working notes aaai spring symposium logical formalization commonsense reasoning 
haas 
case domain specific frame axioms 
brown ed frame problem artificial intelligence proceedings workshop 
lawrence ka morgan kaufmann publishing 
jenkin milios tran 
global navigation ark proceedings ieee rsj international conference intelligent robots systems 
kaelbling rosenschein 
action planning embedded agents 
robotics autonomous systems 
lesp erance levesque 
indexical knowledge robot action logical account 
appear artificial intelligence 
lesp erance 
approach synthesis plans perception acts conditionals 
ed working notes canadian workshop distributed artificial intelligence 
levesque lesp erance lin scherl 
knowledge action ability situation calculus 
preparation 
lifschitz 
semantics strips 
georgeff lansky eds reasoning actions plans 
los altos ca morgan kaufmann publishing 
lin reiter 
progress database logical foundations 
doyle sandewall torasso eds principles knowledge representation reasoning proceedings fourth international conference 
bonn germany morgan kaufmann publishing 
lin reiter 
progress database ii strips connection 
technical report department computer science university toronto 
appear 
lin reiter 
state constraints revisited 
appear journal logic computation special issue action processes 
lin 
goal ordering planning formalizing control information situation calculus 
preparation 
moore 
reasoning knowledge action 
technical report ai center sri international menlo park ca 
moore 
formal theory knowledge action 
hobbs moore eds formal theories common sense world 
norwood nj ablex publishing 

nguyen hanks thomas 
manual 
technical report department computer science engineering university washington 
forthcoming 
pednault 
adl exploring middle ground strips situation calculus 
brachman levesque reiter eds proceedings international conference principles knowledge representation reasoning 
toronto morgan kaufmann publishing 
pinto 
temporal reasoning situation calculus 
ph dissertation department computer science university toronto toronto 
available technical report krr tr 
reiter 
frame problem situation calculus simple solution completeness result goal regression 
lifschitz ed artificial intelligence mathematical theory computation papers honor john mccarthy 
san diego ca academic press 

robinson jenkin 
reactive low level control ark proceedings vision interface 
scherl levesque 
frame problem knowledge producing actions 
proceedings eleventh national conference artificial intelligence 
washington dc aaai press mit press 
schubert 
monotonic solution frame problem situation calculus efficient method worlds fully specified actions 
loui carlson eds knowledge representation defeasible reasoning 
boston ma kluwer academic press 

