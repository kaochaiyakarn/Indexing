mining sequential patterns generalizations performance improvements ramakrishnan srikant rakesh agrawal almaden ibm com ibm almaden research center harry road san jose ca 
problem mining sequential patterns introduced :10.1.1.40.9892
database sequences sequence list transactions ordered transaction time transaction set items 
problem discover sequential patterns user specified minimum support support pattern number data sequences contain pattern 
example sequential pattern customers bought foundation transaction followed second foundation transaction 
generalize problem follows 
add time constraints specify minimum maximum time period adjacent elements pattern 
second relax restriction items element sequential pattern come transaction allowing items set transactions transaction times user specified time window 
third user defined taxonomy hierarchy items allow sequential patterns include items levels taxonomy 
gsp new algorithm discovers generalized sequential patterns 
empirical evaluation synthetic real life data indicates gsp faster aprioriall algorithm :10.1.1.40.9892
gsp scales linearly number data sequences scale properties respect average size 
data mining known knowledge discovery databases recognized promising new area database research 
area defined efficiently discovering interesting rules large databases 
new data mining problem discovering sequential patterns introduced :10.1.1.40.9892
input data set sequences called data sequences 
list transactions transaction sets literals called items 
typically transaction time associated transaction 
sequential pattern consists list sets items 
problem find department computer science university wisconsin madison 
sequential patterns user specified minimum support support sequential pattern percentage data sequences contain pattern 
example database book club data sequence may correspond book selections customer transaction books selected customer order 
sequential pattern customers bought foundation foundation empire second foundation 
data sequence corresponding customer bought books books contains sequential pattern data sequence may books transaction books pattern 
elements sequential pattern sets items example foundation followed foundation empire engineers followed second foundation 
items element sequential pattern single transaction data sequence support pattern 
problem motivated applications industry including attached mailing add sales customer satisfaction 
results apply scientific business domains 
instance medical domain data sequence may correspond symptoms diseases patient transaction corresponding symptoms exhibited diseases diagnosed visit doctor 
patterns discovered data disease research help identify symptoms diseases precede certain diseases 
problem definition introduced limitations :10.1.1.40.9892
absence time constraints 
users want specify maximum minimum time gaps adjacent elements sequential pattern 
example book club probably care bought foundation followed foundation empire years may want specify customer support sequential pattern adjacent elements occur specified time interval say months 
customer support pattern customer bought foundation empire months buying foundation 

rigid definition transaction 
applications matter items element sequential pattern different transactions long transaction times transactions small time window 
element pattern contained union items bought set transactions long difference maximum minimum transaction times size sliding time window 
example book club specifies time window week customer ordered foundation monday saturday foundation empire engineers single order weeks support pattern foundation followed foundation empire engineers 

absence taxonomies 
datasets user defined taxonomy foundation science fiction empire foundation people asimov smiley perfect spy engineers second foundation le spy fig 

example taxonomy hierarchy items data users want find patterns include items different levels taxonomy 
example taxonomy 
taxonomy customer bought foundation followed perfect spy support patterns foundation followed perfect spy asimov followed perfect spy science fiction followed le generalize problem definition incorporate time constraints sliding time windows taxonomies sequential patterns :10.1.1.40.9892
gsp generalized sequential patterns new algorithm discovers sequential patterns 
empirical evaluation shows gsp scales linearly number data sequences scale properties respect number transactions data sequence number items transaction 
related addition introducing problem sequential patterns algorithms solving problem algorithms handle time constraints sliding windows taxonomies :10.1.1.40.9892
algorithms designed find maximal sequential patterns applications require patterns supports 
third algorithm aprioriall finds patterns performance better comparable algorithms 
briefly aprioriall phase algorithm 
finds itemsets minimum support frequent itemsets transforms database transaction replaced set frequent itemsets contained transaction finds sequential patterns 
problems approach 
computationally expensive data transformation fly pass finding sequential patterns 
alternative transform database store transformed database infeasible unrealistic applications nearly doubles disk space requirement prohibitive large databases 
second possible extend algorithm handle time constraints taxonomies appear feasible incorporate sliding windows 
cases extended aprioriall handle empirical evaluation shows gsp upto times faster 
somewhat related problem mining association rules 
association rules rules items bought transaction intra transaction patterns inter transaction sequential patterns 
problem finding association rules user defined taxonomy items addressed :10.1.1.144.4956
problem discovering similarities database genetic sequences relevant 
patterns wish discover subsequences consecutive characters separated variable number noise characters 
sequence problem consists list sets characters items simply list characters 
addition interested finding sequences minimum support frequent patterns 
problem discovering frequent episodes sequence events 
patterns arbitrary dag directed acyclic graphs vertex corresponds single event item edge event event denotes occurred move time window input sequence find patterns occur user specified percentage windows 
algorithm designed counting number occurrences pattern moving window single sequence interested finding patterns occur different data sequences 
organization give formal description problem mining generalized sequential patterns section 
section describe gsp algorithm finding patterns 
empirically compared performance gsp aprioriall algorithm studied scale properties gsp examined performance impact time constraints sliding windows :10.1.1.40.9892
due space limitations include details experiments reported 
include gist main results section 
conclude summary section 
problem statement definitions fi set literals called items 
directed acyclic graph literals 
edge represents relationship represents set taxonomies 
edge call parent child 
represents generalization 
model taxonomy dag tree allow multiple taxonomies 
call ancestor descendant edge transitive closure 
itemset non empty set items 
sequence ordered list itemsets 
denote sequence itemset 
call element sequence 
denote element sequence xm item 
item occur element sequence occur multiple times different elements 
itemset considered sequence single element 
assume loss generality items element sequence lexicographic order 
sequence subsequence sequence exist integers example sequence subsequence 
sequence subsequence vice versa 
input database sequences called data sequences 
data sequence list transactions ordered increasing transaction time 
transaction fields sequence id transaction id items transaction 
expect items transaction leaves require 
simplicity assume data sequence transaction transaction time transaction time transaction identifier 
consider quantities items transaction 
support support count simply support sequence defined fraction total data sequences contain sequence 
word contains strictly accurate incorporate taxonomies captures data sequence contributes support sequential pattern 
define data sequence contains sequence starting definition adding taxonomies sliding windows time constraints ffl absence taxonomies sliding windows time constraints data sequence contains sequence subsequence data sequence :10.1.1.40.9892
ffl plus taxonomies say transaction contains item ancestor item say transaction contains itemset contains item data sequence contains sequence exist integers contained contained contained taxonomy degenerates simple subsequence test 
ffl plus sliding windows sliding window generalization relaxes definition data sequence contributes support sequence allowing set transactions contain element sequence long difference transaction times transactions set user specified window size 
formally data sequence contains sequence exist integers un 
contained 
transaction time gamma transaction time window size ffl plus time constraints time constraints restrict time gap sets transactions contain consecutive elements sequence 
user specified window size max gap min gap data sequence contains sequence exist integers un 
contained 
transaction time gamma transaction time window size 
transaction time gamma transaction time gamma min gap 
transaction time gamma transaction time gamma max gap conditions earlier definition data sequence contains pattern 
third condition specifies minimum time gap constraint maximum time gap constraint 
refer transaction time start time du time 
words start time time correspond transaction times set transactions contain note taxonomy min gap max gap window size get notion sequential patterns introduced time constraints items element come single transaction :10.1.1.40.9892
problem definition database data sequences taxonomy user specified min gap max gap time constraints user specified sliding window size problem mining sequential patterns find sequences support greater user specified minimum support 
sequence represents sequential pattern called frequent sequence 
frequent sequence useful know support relationship elements sequence 
fraction data sequences support support entire sequence frequent sequence relationship easily computed 
example consider data sequences shown 
simplicity assumed transaction times integers represent instance number days january 
abbreviated version taxonomy 
assume minimum support set data sequences 
problem definition element sequential patterns engineers database sequence id transaction items time foundation engineers second foundation foundation foundation empire engineers taxonomy foundation empire foundation foundation asimov engineers second fig :10.1.1.40.9892

example setting sliding window days adds pattern foundation engineers supports pattern 
foundation period days data sequence 
setting max gap days results patterns dropped longer supported customer 
add taxonomy sliding window time constraints patterns added foundation asimov observe pattern simply replacement item ancestor existing pattern 
algorithm gsp basic structure gsp algorithm finding sequential patterns follows 
algorithm multiple passes data 
pass determines support item number data sequences include item 
pass algorithm knows items frequent minimum support 
item yields element frequent sequence consisting item 
subsequent pass starts seed set frequent sequences previous pass 
seed set generate new potentially frequent sequences called candidate sequences 
candidate sequence item seed sequence candidate sequences pass number items 
support candidate sequences pass data 
pass algorithm determines candidate sequences frequent 
frequent candidates seed pass 
algorithm terminates frequent sequences pass candidate sequences generated 
need specify key details 
candidate generation candidates sequences generated pass begins 
want generate candidates possible maintaining completeness 

counting candidates support count candidate sequences determined 
candidate generation discussed section candidate counting section 
incorporate time constraints sliding windows discussion consider taxonomies 
extensions required handle taxonomies described section 
algorithm main memory algorithm 
candidates fit memory algorithm generates candidates fit memory data scanned count support candidates 
frequent sequences resulting candidates written disk candidates minimum support deleted 
procedure repeated candidates counted 
details memory management 
candidate generation refer sequence items sequence 
item occurs multiple times different elements sequence occurrence contributes value 
denote set frequent sequences set candidate sequences 
gamma set frequent gamma sequences want generate superset set frequent sequences 
define notion contiguous subsequence 
definition sequence subsequence contiguous subsequence conditions hold 
derived dropping item 
derived dropping item element items 

contiguous subsequence contiguous subsequence example consider sequence sequences contiguous subsequences 
show data sequence contains sequence contain contiguous subsequence max gap constraint data sequence contain subsequences including non contiguous frequent candidate sequences sequences join pruning fig 

candidate generation example subsequences 
property provides basis candidate generation procedure 
candidates generated steps 
join phase 
generate candidate sequences joining gamma gamma sequence joins subsequence obtained dropping item subsequence obtained dropping item candidate sequence generated joining sequence extended item added item separate element separate element part element 
joining need add item part itemset separate element give sequence deleting item 
observe contiguous subsequences new candidate sequence 

prune phase 
delete candidate sequences contiguous gamma subsequence support count minimum support 
max gap constraint delete candidate sequences subsequence minimum support 
procedure reminiscent candidate generation procedure finding association rules details quite different :10.1.1.40.6757
proof correctness procedure 
example shows join prune phases 
join phase sequence joins generate generate remaining sequences join sequence instance join sequence sequence form prune phase dropped contiguous subsequence counting candidates making pass read data sequence time increment support count candidates contained data sequence 
set candidate sequences data sequence need find sequences contained techniques solve problem 
hash tree data structure reduce number candidates checked data sequence 

transform representation data sequence efficiently find specific candidate subsequence reducing number candidates need checked adapt hash tree data structure purpose :10.1.1.40.6757
node hash tree contains list sequences leaf node hash table interior node 
interior node non empty bucket hash table points node 
root hash tree defined depth 
interior node depth points nodes depth 
adding candidate sequences hash tree 
add sequence start root go tree reach leaf 
interior node depth decide branch follow applying hash function pth item sequence 
note apply hash function pth item pth element 
nodes initially created leaf nodes 
number sequences leaf node exceeds threshold leaf node converted interior node 
finding candidates contained data sequence 
starting root node find candidates contained data sequence apply procedure type node ffl interior node root apply hash function item recursively apply procedure node corresponding bucket 
sequence contained data sequence item hashing item ensure ignore sequences start item ffl interior node root assume reached node hashing item transaction time apply hash function item transaction time gamma window size max window size max gap recursively apply procedure node corresponding bucket 
see returns desired set candidates consider candidate sequence consecutive items contained transaction transaction time contain corresponding gamma window size window size part element interval max gap part element 
reached node hashing item transaction time contained transaction interval size max window size max gap data sequence support sequence 
need apply hash function items transaction times interval check corresponding nodes 
ffl leaf node sequence leaf check contains add answer set necessary 
discuss exactly find contains specific candidate sequence 
check sequence contained node don sequences 
checking data sequence contains specific sequence data sequence candidate sequence 
describe algorithm checking contains assuming existence procedure finds occurrence element time describe procedure 
contains test algorithm checking data sequence contains candidate sequence alternates phases 
algorithm starts forward phase element 
ffl forward phase algorithm finds successive elements long difference time element just start time previous element max gap 
recall element start time time correspond transaction times set transactions contain difference max gap algorithm switches backward phase 
element data sequence contain ffl backward phase algorithm backtracks pulls previous elements 
current element time algorithm finds set transactions containing gamma transaction times gamma max gap 
start time gamma gamma pulled time pulling gamma may necessitate pulling gamma max gap constraint gamma gamma may longer satisfied 
algorithm moves backwards max gap constraint element just pulled previous element satisfied element pulled 
algorithm switches forward phase finding elements starting element element pulled 
element pulled subsequent set transactions contain element data sequence contain procedure repeated switching backward forward phases elements 
algorithm moves back forth elements terminates element algorithm checks set transactions contains transaction times element increase 
example consider data sequence shown 
consider case max gap min gap window size 
find transaction time find time 
gap elements days transaction time items fig 

example data sequence item times null null null null null null null fig 

alternate representation max gap pull 
search occurrence time time max gap occurs time satisfy max gap constraint 
find time 
element check see max gap constraint element satisfied 
move forward 
longer occurs days search occurrence time 
find time 
max gap constraint satisfied continue move forward find time 
max gap constraint satisfied done 
finding single element describe procedure finding occurrence element data sequence discuss efficiently find single item 
straightforward approach scan consecutive transactions data sequence find item 
faster alternative transform representation follows 
create array elements number items database 
item data sequence store array list transaction times transactions contain item 
find occurrence item time procedure simply traverses list corresponding item till finds transaction time greater assuming dataset items shows representation data sequence 
transformation time overhead total number items dataset execution allocate initialize array plus overhead items data sequence 
find occurrence element time algorithm pass items element finds greater item 
difference start time time equal window size done 
set time minus window size procedure repeated 
alternate approach pull previous items soon find transaction time item high 
procedure similar algorithm contains test sequence 
example consider data sequence shown 
assume window size set days find occurrence element time 
find time time 
time gamma start time set time gamma window size try 
item remains time item time 
time gap greater window size set repeat procedure 
find item time item remains time 
time gap window size done 
taxonomies ideas discovering association rules taxonomies carry current problem :10.1.1.144.4956:10.1.1.144.4956
basic approach replace data sequence extended sequence transaction contains items corresponding transaction ancestors item example taxonomy shown foundation second foundation replaced extended sequence foundation asimov science fiction second foundation asimov science fiction run gsp extended sequences 
optimizations improve performance considerably 
pre compute ancestors item drop ancestors candidates counted making pass data 
instance second foundation candidates counted current pass replace data sequence foundation second foundation extended sequence foundation asimov science fiction asimov science fiction extended sequence foundation asimov science fiction second foundation asimov science fiction 
second optimization count sequential patterns element contains item ancestor support support sequential pattern 
transaction contains contain 
related issue incorporating taxonomies result redundant sequential patterns 
example support asimov support foundation support pattern asimov 
information expect support pattern foundation half asimov foundation actual support foundation close pattern considered redundant 
interest measure introduced carries prune redundant patterns :10.1.1.144.4956:10.1.1.144.4956
essential idea user specified interest level display patterns ancestors patterns actual support times expected support support ancestors 
performance evaluation compared performance gsp aprioriall algorithm synthetic real life datasets :10.1.1.40.9892
due lack space summarize main results section 
details experiments including performance graphs detailed explanations results 
comparison gsp aprioriall 
synthetic datasets gsp times faster aprioriall performance gap increasing low levels minimum support 
results similar customer datasets gsp running times faster aprioriall 
main reasons gsp better aprioriall 

gsp counts fewer candidates aprioriall 

aprioriall find frequent itemsets element data sequence data transformation find candidate sequences 
typically somewhat slower directly finding candidate sequences 
scaleup 
gsp scales linearly number data sequences 
constant database size execution time gsp increases number items data sequence gradually 
effects time constraints sliding windows 
see effect sliding window time constraints performance ran gsp customer datasets min gap max gap sliding window constraints 
sliding window set day effect number sequential patterns small 
similarly max gap set total time span transactions dataset min gap set day 
min gap constraint comes free performance degradation due specifying min gap constraint 
performance penalty max gap constraint sliding windows 
summary database sequences sequence list transactions ordered transaction time transaction set items 
problem mining sequential patterns introduced discover sequential patterns user specified minimum support support pattern number data sequences contain pattern :10.1.1.40.9892
addressed critical limitations earlier order sequential patterns useful real applications 
particular generalized definition sequential patterns admit max gap min gap time constraints adjacent elements sequential pattern 
relaxed restriction items element sequential pattern come transaction allowed user specified window size items 
user defined taxonomy items database available sequential patterns may include items different levels taxonomy 
gsp new algorithm discovers generalized sequential patterns 
complete algorithm guarantees finding rules user specified 
empirical evaluation synthetic real life data indicates gsp faster aprioriall algorithm :10.1.1.40.9892
gsp scales linearly number data sequences scale properties respect average data sequence size 
gsp algorithm implemented part quest data mining prototype ibm research incorporated ibm data mining product 
runs platforms including aix mvs flat files db cs db mvs 
parallelized sp shared multiprocessor 

agrawal imielinski swami 
mining association rules sets items large databases 
proc 
acm sigmod conference management data pages washington may 

agrawal srikant 
fast algorithms mining association rules 
proc 
th int conference large databases santiago chile september 

agrawal srikant 
mining sequential patterns 
proc 
th int conference data engineering taipei taiwan march 

han fu 
discovery multiple level association rules large databases 
proc 
st int conference large databases zurich switzerland september 

mannila toivonen verkamo 
discovering frequent episodes sequences 
proc 
int conference knowledge discovery databases data mining kdd montreal canada august 

srikant agrawal 
mining generalized association rules 
proc 
st int conference large databases zurich switzerland september 

srikant agrawal 
mining sequential patterns generalizations performance improvements 
research report rj ibm almaden research center san jose california december 


wang 
chirn marr shapiro shasha zhang 
combinatorial pattern discovery scientific data preliminary results 
proc 
acm sigmod conference management data minneapolis may 
