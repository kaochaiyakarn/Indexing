mnesia industrial dbms transactions distribution logical query language hans nilsson ericsson se computer science laboratory ericsson telecom ab stockholm sweden mnesia full dbms telecommunications industrial needs 
distributed transactions fast real time lookups crash recovery logical query language 
dbms written functional language erlang intended applications language 
real users developing products 
mnesia multiuser distributed dbms database management system specially industrial telecommunications applications written symbolic language erlang 
telecommunications applications needs different features provided traditional dbms 
applications see implemented erlang language need mixture broad range features 
extreme 
fast soft real time key value lookup 
complicated non realtime queries mainly operation maintenance 
distributed data due distributed applications 
high fault tolerance 
dynamic re configuration 
variable length records current version mnesia primarily known algorithms 
versions experiment alternative solutions 
telecommunications applications structured way different sets data 
crucial traffic contains maintenance data 
performance requirements traffic data severe 
means 
traffic data kept memory times 

traffic data organized way external stimuli arrives system data necessary process stimuli located efficient manner maintenance data usually contains copy traffic data structured different way 
traditionally management traffic data telecommunications applications performed general purpose dbms tailor application 
design goals mnesia provide dbms requirements traffic data maintenance data met 
rest organized follows section erlang section overview mnesia 
usage mnesia section notes section 
erlang erlang symbolic functional language intended large real time applications mainly telecommunication area 
functions may clauses correct selected pattern matching 
visibility controlled explicit export declarations modules 
processes lightweight created explicitly 
communicate asynchronous message passing 
messages received selectively pattern matching 
running unix unix process erlang node 
node internal process handling erlang processes mistaken unix processes 
erlang nodes run different types machines operating systems erlang processes communicate network processes nodes 
influence program writing message passing time critical physical transport medium slow 
extra protocol specifications necessary 
message passing competitive network communication methods wik 
kinds support error recovery language exceptions special exit messages propagated linked processes process dies 
messages caught processes activate recovery plan instance restart dying process 
erlang programs communicate hardware programs written languages ports 
ports behave similar processes receive messages processes send messages back 
difference processes ports connected non erlang software hardware 
example append function returns argument lists appended erlang append 
append append 
mnesia features dbms mnesia provides storage full erlang variant length terms primary memory fast access optional disk backup ii disk large data sets logic query language fast program interface simple queries distributed transactions query evaluation crash recovery replication data separate nodes location transparency applications written knowledge tables located run time schema alteration features mnesia fulfillment requirements 
mapping requirements features pictured table mnesia requirement feature ii requirement feature mapping feature list seen options list mnesia user 
data access time critical need survive crash user selects primary memory storage 
possible dump contents primary memory table disk regular intervals 
data survive crash high requirements access time way data kept ram write operations data logged disc 
system regular intervals checkpoint data truncate log 
data performance critical kept disc 
advanced feature mnesia system activities performed checkpointing dumping tables schema reconfigurations system 
example table copied remote node table available write operations applications 
data model schema data organized tables 
table set properties example ffl node located ffl replicated list zero nodes ffl storage ram ram disc copy ffl system maintain indices table definitions table properties collected schema may altered runtime 
individual field row table may arbitrarily complex contain compound erlang terms including object code lambda expressions regular data 
features mnesia suitable telecommunications problem single important requirement dbms individual lookup fast 
property data modeling flexible allows data model data necessary call telephony switch bundled single record 
concurrency control crash recovery operations database grouped transactions distributed network 
completed transactions logged dirty operations time critical application bypass transaction system 
lock manager uses multitude traditional techniques 
locking dynamic lock acquired transaction needed 
regular twophase locking deadlock prevention traditional wait die rsl 
time stamps wait die algorithm acquired lamport clocks lam maintained transaction manager node 
transaction restarted lamport clock maintained making mnesia live lock free 
lock manager implements multi granularity locking 
traditional phase commit gre transaction manager transaction finished 
mnesia running top distributed erlang implementation greatly simplified 
distributed application separate erlang nodes running usually different machines 
erlang takes care communication processes possibly separate nodes transparently 
processes nodes easily started supervised stopped processes nodes 
lots communication implementation problems disappear mnesia applications 
mnesia process participating node 
processes takes care updates transactions emergency reconfiguration node failure normal maintenance reconfigurations 
user api transaction system straightforward easy 
programmer presents transaction system lambda expression closure executed transaction system 
queries query construction integrated erlang language list comprehensions 
removes impedance mismatch solution embedded sql embedded kind datalog ull give functional language erlang 
list comprehension connection relational dbms known long time bre 
example erlang list comprehension name table employee table department name boss sex female extracts list names female database 
equivalent datalog expression employee name female department name think straight forward translation list comprehension datalog nice clean connection 
logical query language chosen reasons 
authors background logic programming second need sql interface 
think logical language target sql translation somewhat simpler 
cursors available users 
node querying user process running multi cpu database query parallelized run parallel user process 
implementation mnesia written erlang special key value dictionary linear hashing lar 
dictionary added erlang implementation get fast key lookups 
majority users queries nonrecursive 
chosen separate recursive non recursive parts queries 
version non recursive query evaluation efficient version recursion efficient today 
minimal cycles query flow graph collapsed node giving non cyclic graph corresponding non recursive query explicit recursion operators 
non recursive query optimized compiled standard methods partial evaluation goal reordering guided statistics database 
note optimization recursive parts 
simply put query 
query evaluated relational dbms technique operators gra 
recursive parts evaluated slg wc wcs cw resolution 
currently implemented naive straight forward interpreter 
operator technique maps extremely erlang processes messages effect queries automatically parallelized run multi cpu computer 
projects mnesia currently development projects ericsson 
projects small scale prototype projects large scale product projects 
mnesia traffic data maintenance data various ways applications include pure switch controllers intelligent network controllers office telephony internet applications 
primarily evaluate mnesia applications written 
compare performance commercial dbms modern research dbms 
preliminary performance measurements promising 
mnesia consistency checking updates today 
add integrity constraint checking near 
area query processing obvious continuations making efficient slg implementation optimize recursive queries 
try transaction locking algorithms especially real time algorithms 
need users 
provided probably interface 
enable external access dbms 
problem addressed problem partitioned networks 
network mnesia nodes fail nodes continue operate problematic situation 
experiences combining wellknown algorithms symbolic high level language erlang possible write full industrial dbms fraction manpower normally required 
obtained platform research got real world applications benchmarking 
joe armstrong robert virding mike williams 
concurrent programming erlang 
prentice hall second edition 
bre breuer 
applicative query languages 
technical report cambridge university engineering dept 
cw chen warren 
query evaluation founded semantics 
proc 
acm sigart symp 
principles database sys page washington dc may 
eswaran grey lorie traiger 
notions predicate locks system 
communications acm november 
grey lorie traiger 
granularity locks degrees consistency shared database 
technical report research report rj ibm september 
gra goetz graefe 
query evaluation techniques large databases 
acm computing surveys june 
gre grey 
notes database operating system advanced 
lecture notes computer science springer verlag berlin 
lam lamport 
time clocks ordering events distributed system 
acm transactions programming languages systems july 
lar larson 
dynamic hash tables 
communications acm 
rsl rosenkrantz stearns lewis 
system level concurrency control distributed databases 
acm transactions database systems june 
ull jeffrey ullman 
principles database knowledge base systems volume 
computer science press 
isbn 
wc david warren chen 
effective evaluation general logic programs 
technical report computer science department suny stony brook 
wcs warren chen swift 
efficient computation queries founded semantics 
technical report cse southern methodist university 
wik 
distributed computing erlang 
international symposium parallel symbolic computation sep 
