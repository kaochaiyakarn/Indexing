preemption concurrent systems erard berry ecole des mines centre de math ematiques appliqu ees sophia antipolis france mail berry cma cma fr november process preemption deals controlling life death concurrent processes 
defined preemption mechanisms essential control dominated reactive real time programming accurate handling preemption requires time dependent model 
informally discuss preemption argue need preemption primitives fully orthogonal sequencing concurrency ones 
formally preemption operators esterel zero delay process calculus theoretical version esterel synchronous programming language 
concurrent systems deals concurrent processes coordinate 
coordination result information exchange example messages circulating channels possibly implied synchronization 
result process preemption implicit control mechanism consists denying right process permanently abortion temporarily suspension 
preemption particularly important control dominated reactive real time programming consists handling interrupts controlling computation inputoutput watchdogs 
process preemption primitives available operating systems unfortunately fairly loose complex semantics reasoning difficult 
far concurrent programming languages concerned preemption far studied communication 
existing languages offer small number preemption primitives insufficient adequately program reactive applications semantics kept quite loose 
goal twofold shall informally argue preemption primitives provided class level full orthogonality respect proc springer verlag lecture notes computer science vol 
pp 

supported confer esprit basic research action indo french center promotion advanced research new delhi india 
primitives including concurrency communication second shall formally discuss preemption operators esterel imperative synchronous process calculus 
calculus novel simply rewriting esterel synchronous programming language process calculus style standard behavioral semantics due gonthier :10.1.1.17.5606
compared previous papers esterel adopt classical process calculus presentation style put emphasis preemption operators design semantics 
give illustrative example 
reader refer detailed programming examples esterel 
section basic concepts process preemption 
establish fundamental difference interpretations preemption may interpretation interpretation 
show classical time independent languages handle weaker notion may preemption interpretation really needed reactive systems 
preemption require reasoning relative timing events 
section perfectly synchronous zero delay model esterel synchronous languages 
model allows reason relative timings way 
section syntax behavioral semantics basic esterel operators sequencing communication conditional concurrency 
section esterel preemption operators discuss axiomatization 
distinguishing weak strong operators immediate delayed ones 
section show weak preemption obtained outcome general purpose escape mechanism 
conclude section summarize final esterel calculus appendix 
preemption things unix tm beginner learns abort current command typing control character 
command way looping program computer 
process abortion simplest form preemption 
gets experienced unix user learns elaborate control scheme preemption temporary typing suspends activity process restarts suspended state typing fg 
way gains fine control activity process 
abortion suspension fundamental kinds preemption shall deal 
gave unix example reader familiar concept preemption 
serious examples appear real time reactive process control number concurrent processes control physical device airplane telephone switch 
system major watchdogs cancel suspend ongoing activity condition fulfilled amount time handles anomalies aborting normal functioning mode entering safety mode 
controlling life death computation input output tasks appears difficult problem control dominated reactive systems 
may preemption consider case unix user types known unix command rm removes files removing suffix extra blank character 
realizes mistake user types clearly expects unix preempt command 
call preemption 
machine multiprocessor access passes slow asynchronous networks user discover joy may preemption files may deleted preemption request reaches infamous process 
truth typing tells system try abort command system may take potentially arbitrary amount time 
may preemption may preemption form preemption defined standard unix concurrent programming languages csp process calculi ccs family 
reason systems formalisms time independence semantics set communicating processes depend relative timings 
intrinsic simplicity natural compositional character time independence elegant useful hypothesis deal distributed computations interactive non reactive problems 
time independent formalisms may preemption operators probably may preemption fundamental concept 
example cite lotos disable operator denotes process perform aborted main operator specification abstraction programming specifies non deterministic set behaviors observed preemption system relative timings having specify timings 
preemption clearly preemption needed reactive real time systems avoid dealing timing issues 
examples actual preemption schemes ffl real time operating system provide user elaborate preemption schemes plus priorities fine control timings handle interrupts preemption basis 
ffl interrupt microprocessors handled basis 
interrupt line set high current instruction flow gets preempted right away interrupt handling instruction fetched usually fixed location 
goal lift preemption concepts level programming languages way concurrency communication primitives lifted operating systems languages 
preemption primitives orthogonality process preemption schemes true primitives operating systems act processes independently contents processes 
unix process code user mentions preemptive control characters compulsory portability precise signals unix sends process 
user define handler signals case default preemption disabled 
object code able run operating system totally different preemption mechanisms 
want adopt way thinking programming languages process know gets preempted 
derive preemption standard communication need true preemption primitives 
illustrate point example 
assume written program controls physical process 
assume extra specification aborted alarm occurs statement executed 
standard communication provoke abortion forced deeply modify code adding tests potential reception 
violate programming principles 
really need reuse code stands writing example abort want preemption primitives orthogonal primitives want restriction 
precisely want able abort suspend statement time communication ot computation want able abort statement reason 
particular time generated repetition signal able say abort meter commonly abort seconds 
orthogonality compulsory write elegant instructions run slowly seconds run full speed meter involve mixture sequencing abortion primitives 
leads naturally time model :10.1.1.17.5606
summarize requirements need develop calculi languages take care timing issues possess fully orthogonal preemption primitives course tractable formal semantics 
purpose sections 
synchronous zero delay model adding preemption statements time independent language really intrinsic contradiction time independent time accurate example delay operator ada semantically defined underlying time independent model semantics left unclear 
need timedependent model 
precisely handle timing conflict requirements 
hand thing really matters reactive real time application program runs final implementation 
hand source program implemented different ways needs reasonable abstraction level reason programs independently implementation 
zero delay paradigm adopt perfect synchrony zero delay paradigm synchronous languages register transfer level rtl hardware formalisms 
paradigm states time define externally programs flow inputs program internal bookkeeping done zero delay respect external time units 
instructions take time explicitly required wait meter lasts exactly meter 
flow events need notation 
consider set input signals set output signals 
input event subset output event subset input history sequence input events output history sequence output events 
process sort fi og maps input history output history 
event histories define flow events axiomatizing notions simultaneity succession 
intuitively index input history represents logical instant th reaction program performed input event signals considered simultaneously received environment reaction output event represents set signals emitted environment reaction way instants defined arbitrary 
establish relation logical instants physical clock 
possible activate process regular basis physical time way compulsory 
example man machine interfaces logical instants determined presses keyboard keys mouse signals reason regular time 
having mind expressions time instant referring logical input time 
zero delay hypothesis zero delay hypothesis comes composing processes 
example consider parallel composition share input output signals auxiliary signals inter process communication 
zero delay hypothesis asserts history indices match exactly reaction processes see inputs signals share common outputs merged sees signals emitted process 
parallel statement performs bookkeeping zero delay control handling operators property 
notice signal sharing amounts broadcast communication 
broadcasting adopted synchronous languages far 
far programming style concerned broadcasting convenient point point communication senders need know receivers conversely 
zero delay level abstraction exactly trivial compositionality property time independence composite process behaves just single process 
arbitrary numbers satisfy zero delay actual implementation precise place abandon zero delay hypothesis final implementation 
require exact simultaneity practice idea produce object code predictable worst case performance compare predicted performance actual timing requirements 
known digital circuits design done zero delay level expression simulation verification optimization easier 
target technology accurate timing analysis performed optimized placed routed circuit compute minimal clock cycle time time physically required obtain possible situations 
basic esterel zero delay calculus simplicity shall deal pure synchronization ignore value passing 
values fundamentally change problems add extra level bookkeeping unnecessary 
set signals split disjoint subsets set input signals set output signals set local signals 
event subset input event subset output event subset belongs said said absent basic broadcasting calculus basic calculus composed syntactically standard imperative primitives 
syntax processes follows null unit delay emission sequence loop conditional parallel pns restriction notice forbid internally emit input signals minor technical restriction 
esterel programming language syntax written emission written emit loop written loop conditional written usual fi notation parallel written restriction written signal 
new syntax simply shorter version existing 
slight difference taken primitive programming language 
halt primitive write await tick tick reaction clock signal assumed 
convinced better primitive advocated long ago 
behavioral semantics process interpreted deterministic mapping input sequences output sequences 
reaction interpreted process rewriting process calculi 
process input sequence compute output sequence stepwise chain individual reactions gamma 
gamma 
delta delta delta gamma 
gamma 
delta delta delta transition gamma 
represents single reaction 
process viewed state reacting inputs gamma 
relation defined auxiliary relation gamma gamma gamma 
defined structural induction set signals sees set signals emits receiving integer code handles termination instant set terminates set terminate case said wait reason numerical coding clear section 
terminated processes behave 
deriving transitions gamma gamma gamma 
shall maintain broadcasting invariant ae says process instantaneously receives emits technique provide simple way handling broadcasting 
process input event shall compute gamma 
transition way gamma 
iff gamma gamma 
broadcasting invariant initially established ae inference rules preserve 
structural transition rules null process terminates instantaneously rewrites gamma gamma 
null unit delay process waits current reaction rewrites reaction 
operator involves delay 
gamma gamma 
unit delay emission statement emits signal terminates fsg gamma gamma gamma 
emit component sequence waits sequence waits reasons clear section write waiting simply gamma gamma gamma 
gamma gamma gamma 
seq component sequence terminates second component started zero delay environment emitted signals merged 
gamma gamma gamma 
gamma gamma gamma 
gamma gamma gamma gamma gamma 
seq premises implements forward broadcasting proofs transitions ae application broadcasting invariant premise means receive signals emitted rule seq suggests symmetric backwards broadcasting ae second premise 
backwards broadcasting ruled see section 
loop unfolds instantaneously body allowed terminate zero delay avoid infinite instantaneous looping words body loop involve initial delay gamma gamma gamma 
gamma gamma gamma 
loop conditional selects instantaneously appropriate branch presence gamma gamma gamma 
gamma gamma gamma 
cond gamma gamma gamma 
gamma gamma gamma 
cond notice zero delay conditionals possible test arbitrary boolean combinations signals building decision trees 
example coded negation available simply parallel executes instantaneously branches merges emitted signals terminates branches 
numerical coding termination code parallel maximum branches kp gamma gamma gamma gamma 
kq gamma gamma gamma 
max kp kq gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma 
parallel notice global broadcasting invariant expresses signals broadcast branches ae holds ae ae hold 
receives receives restriction handled rules assert restricted signal emitted received emitted received broadcasting means gamma gamma gamma gamma 
fsg pns gamma gamma gamma gamma gamma gamma 
ns restr gamma gamma gamma gamma 
pns gamma gamma 
ns restr notice nested restrictions signal properly handled rules restr restr 
example process waits reaction emits waits emits receives receive compound event fo generated absent determinism causality proof theory basic calculus non trivial fact test signal presence positively negatively 
stand rules ensure determinism reactivity existence reaction 
processes transitions proved processes transition proved ffl output signal 
possible input output transitions gamma 
fog gamma 
follows gamma gamma 
proved null cond second follows fog gamma gamma gamma 
fog proved emit cond 
ffl 
possible input output transition gamma gamma 
fog gamma gamma gamma 
fog proved 
see presence boolean value process asserts solutions second process asserts impossible 
clearly causality cycles cases akin unstable feedback loops digital circuits 
determinism determinism imposed additional constraint system rules 
technically speaking remember gamma 
holds iff gamma gamma 
holds 
require unique gamma gamma 
unique proof gamma gamma 
determinism highly non trivial issue 
decidability easy established calculus regular sense finitely processes transitively rewrites :10.1.1.17.5606
determinism decided trying possible cases 
decision process exponential number signals real size programs 
practice clear determinism characterize decent processes boolean equation systems 
consider example boolean system easily simulated syntax 
happens false false unique solution definitely unclear consider decent 
causality really want guarantee behavior process causal 
example require evaluation condition depend behavior similarly sequence require behavior depend ruling backwards broadcasting see rule seq 
static analysis techniques yield sufficient conditions causality 
gonthier theory potential esterel compiler control flow analysis algorithm worst case square number signals :10.1.1.17.5606
esterel compiler translation processes boolean circuits rare worst case square size 
classical topological sorting gives linear determinism detection algorithm decent programs ruled 
algorithms ensure causality presence cycles 
analysis causal determinism far outside scope shall pursue 
just remember possible fully understood 
axiomatizing preemption operators basic calculus fixed model style shall powerful way prevent process reacting started 
basic primitives define abortion operators abort suspension operators 
define simpler delay operators wait terminate delays problem define abortion wait terminate written abort acts infinite delay halt esterel language see 
section study process preemption formally means operators behavioral rules need comfortable programming operators considered primitive ones 
abortion operators consider process running time possible termination 
behavior looks gamma gamma gamma 
gamma gamma gamma 
delta delta delta kn gamma gamma gamma gamma 
en delta delta delta consider process defined informal sentence abort signal name 
assume occurs time time things clear ffl want behave just step gamma included 
particular terminates strictly time global behavior ffl want terminate time terminated 
termination effect abortion terminated process behaves 
properly define abortion ambiguities time classical problem 
clear ambiguity time perform transition time terminate right away letting react 
experience esterel programming shown interpretations need different kinds abortion constructs 
ffl weak abortion construct process allowed react time notice test presence perform wills knows aborted occurs 
ffl strong abortion construct process aborts allowed act time example process emits continuously process emits third instant 
consider processes weak strong weak strong terminate third instant weak emits times strong emits twice 
second slightly obvious ambiguity time precisely abortion construct starts consider presence commanding immediate abortion ignore 
take choice properly sequence abortion statements 
see consider informal specification abort abort written assuming want strong abortion 
occurs time terminates starts executing instant sequencing zero delay operator unexpectedly statement aborted immediately 
get want need ignore initial 
practical experience shown possibilities provided abortion operator immediate delayed form 
left useful operators ffl delayed weak abortion simply weak abortion ignore starting time execute abortion time 
ffl immediate weak abortion delta abort starting time execute abortion time 
ffl delayed strong abortion simply strong abortion ignore starting time execute abortion time 
ffl immediate strong abortion sae delta abort starting time execute abortion time 
notice names symbols delayed operators 
practical experience shown delayed form immediate ones 
original esterel language written watching sae delta written watching immediate 
concrete syntax delta turns unfortunate weak preemption programmed traps see section 
revising language shall write operators follows abort sae delta abort immediate weakly abort delta weakly abort immediate going form just involve adding removing keywords 
rules abortion natural behavioral rules abortion operators gamma gamma gamma 
gamma gamma gamma 
delta weak abort gamma gamma gamma 
delta gamma gamma gamma 
imm weak abort gamma gamma gamma 
delta gamma gamma gamma 
delta imm weak abort gamma gamma gamma 
gamma gamma gamma 
sae delta strong abort sae delta gamma gamma 
imm strong abort gamma gamma gamma 
sae delta gamma gamma gamma 
sae delta imm strong abort leave reader check preemption applied terminated process behaves just necessary correctly handle termination global esterel set rules 
suspension operators gave example suspending resuming unix processes commands bg 
example suggests signals suspension control suspension signal resumption signal 
clocked world control process suspension signal 
write mean suspend 
controlling process suspension distinct suspension resumption signals easily done auxiliary concurrent process 
reason left ambiguity starting time introduce suspension variants delayed suspension initial ignored immediate suspension soe delta initial provokes immediate suspension obviously strong weak suspension variants 
operators termination provokes termination suspension construct possible absent 
behavioral rules suspension operators gamma gamma gamma 
gamma gamma gamma 
suspend gamma gamma gamma 
gamma gamma gamma 
soe delta suspend soe delta gamma gamma 
soe delta imm suspend gamma gamma gamma 
soe delta gamma gamma gamma 
imm suspend gamma gamma gamma 
soe delta gamma gamma gamma 
soe delta imm suspend suspension technically complex preemption 
extra rules suspend imm 
suspend needed provoke rewriting soe delta soe delta terminates 
required soe delta behave waits terminating 
show important soe delta run absent instant second instant 
intuitively terminate instant terminate second instant 
instant simply rewritten rule imm 
strong abort left second instant incorrect presence wait wait terminating 
problem appears preemption sae delta delta wait 
suspension addition esterel 
revised version language shall concrete syntax suspend soe delta suspend immediate preemption causality just conditional sequencing strong abortion suspension provoke causality problems 
consider example sae delta ns 
process consistent behavior rule restr rule restr apply assume want apply restr emitted impossible emission statement strongly aborted received 
contrary assume want apply restr emitted received abortion occur emitted contradiction 
problem identical soe delta ns 
delaying strong abortion suspension help causality problems may appear second instant consider example sae ns soe ns 
causality problems just static analysis tools studied detect 
contrary weak abortion generate causality problems 
agent delta simply emits terminates restriction context 
delta emission simply provokes gentle termination weak abortion construct course instant delta ignored 
choice preemption primitives preemption operators useful practice independent 
study metatheory process calculus useful primitives possible derive useful operators primitive ones possible 

trivial derive strong abortion weak abortion suspension 
reader check behavioral equivalences simply means obey behavioral rules sae delta delta soe delta weak abortion suspension candidate primitive 
ffi 
ffi emits receives instant 
derive delayed weak abortion immediate weak abortion equivalence delta delta ffi ns ns assumed appear extra signal needed provoke termination ffi terminates 
advantageously replaced trap 
verification left reader 
deriving delayed suspension immediate suspension similar delta oe delta ffi ns ns summarizing things immediate operators delta soe delta suffice define ones 
traps derivation delta self weak preemption mechanism enforce termination property 
section show extend self preemption class escape trap control structure fits existing ones 
weak preemption easily recovered new constructs 
esterel programming language lexically scoped trap structures form trap trap exit exit trap defines lexically scoped escape point exit exits trap provokes instantaneous termination trap construct 
body trap weakly aborted exit time 
priorities show exit statements executed time 
instance example may execute exit exit simultaneously statements concurrent 
adopt law outermost trap matters ones 
trap exit construct natural elegant previous weak preemption deriving constructs programming real applications see instance calculus prefer numbers trap names way de bruijn indices replace bound variables lambda calculus 
reserved write exit level trap exit levels traps example involving traps coded follows trap trap exit exit numerical exit codes fit coding termination delay 
calculus convenient symbols replace trap simply drop exit keyword 
trap constructs rules add process syntax new forms processes exit fpg trap shift course unify syntactic definitions null unit delay exit single termination code shift construct shift exit numbers placing trap block get property pg behaves just real primitive 
course explicitly written know text defined syntactical operator true semantic 
want defining derived constructs know argument texts 
define semantics introduce auxiliary functions integers gamma rules follows gamma gamma 
exit gamma gamma gamma 
fpg gamma gamma gamma 
trap gamma gamma gamma 
fpg gamma gamma gamma 
fp trap gamma gamma gamma 
gamma gamma gamma 
shift unify axioms null delay exit single axiom gamma gamma 
termination code rules far remain unchanged wrote predicate extends traps 
trap trap rules reads ad follows ffl trap block terminates body body exits level trap returns code 
ffl body trap block waits block 
ffl body exits outer trap exit propagated subtracting index 
case rewriting fpg fp harmless rule trap apply enclosing trap fp disappear 
careful inspection rules shows facts left reader 
ffl construct exits trap weakly preempted 
ffl constructs nicely propagate traps 
example component sequence exits trap sequence 
ffl max operator parallel rule exactly desired priority effect exits preempt termination delays outermost exits preempt innermost ones 
see traps operator derivations 
greatly simplify previous definition soe delta oe delta ffi ns second elegantly define weak preemption needs primitive 
define immediate trigger operator delta waits start delayed version delta delta notice triggers correctly propagate termination exits operator weak preemption defined delta delta useful construct derivations traps 
example show derive esterel statement await case case read follows wait start absent start deterministic process defined follows fff ae ae esterel zero delay calculus preemption operators 
reader interested knowing semantical properties language refer 
comparable preemption mechanisms exist calculi languages 
closest ones reactive 
statecharts graphical formalism weak preemption contains enter history mechanism triggers written await language 
flavor suspension strong preemption directly available 
piloting operator meije primitive data flow synchronous languages lustre signal akin suspension 
abortion sense data flow languages notion death flow 
precise comparison preemption mechanisms remains established 
far esterel project emphasis put programming style issues software hardware implementation issues 
interesting theoretical problems left 
set preemption primitives complete reasonable sense missing primitives 
algebraic laws esterel find order axiom system program equivalence 
right notion causality imperative zero delay languages 
solving problems just theoretical game solutions great impact language compiler design 
berry 
real time programming general purpose special purpose languages 
ritter editor information processing pages 
elsevier science publishers 
north holland 
berry 
programming digital watch esterel 
rapport de recherche centre de math ematiques appliqu ees ecole des mines de paris sophia antipolis 
berry 
esterel hardware 
philosophical transactions royal society london 
berry 
hardware implementation pure esterel 
academy proceedings engineering sciences indian academy sciences 
rapport centre de math ematiques appliqu ees de ecole des mines de paris num 
berry 
semantics pure esterel 
proc marktoberdorf intl 
summer school program design calculi lncs appear 
springer verlag 
berry benveniste 
synchronous approach reactive real time systems 
look real time programming proceedings ieee 
berry gonthier 
incremental development entity esterel 
comp 
networks isdn systems 
berry gonthier 
esterel synchronous programming language design semantics implementation 
science computer programming 
boudol 
notes algebraic calculi processes 
apt editor logic models concurrent systems 
nato asi series 

une du langage esterel 
research report inria 

programming reflex game esterel 
rapport de recherche centre de math ematiques appliqu ees ecole des mines de paris sophia antipolis 

reactive extension program reactive systems 
software practice experience 
de simone 
esterel language 
look real time programming proceedings ieee 
brinksma 
information processing systems open systems interconnection formal description technique base temporal ordering observable behavior 
international standard iso 
clarke long mcmillan 
language compositional specification verification finite state hardware controllers 
look real time programming proceedings ieee special issue sept 
cl ement 
programming behavior graphical objects esterel 
tapsoft springer verlag lncs 
cousineau 
algebraic definition control structures 
theoretical computer science 
gonthier 
mod eles ex ecution des langages application esterel 
th ese informatique universit orsay 
le guernic le gauthier le 
programming real time applications signal 
look real time programming proceedings ieee special issue sept 
halbwachs caspi pilaud 
synchronous dataflow program ming language lustre 
look real time programming proceedings ieee special issue sept 
harel 
statecharts visual approach complex systems 
science computer programming 
hoare 
communicating sequential processes 
prentice hall 
sharad malik 
analysis cyclic combinational circuits 
proc 
int 
workshop logic synthesis lake tahoe 
milner 
communication concurrency 
series computer science 
prentice hall 
murakami ravi sethi 
terminal call processing esterel 
proc 
ifip world computer congress madrid spain 
roux marc 
operational semantics kernel language 
theoretical computer science 
appendix summary esterel calculus final set primitives termination code emission sequence loop conditional parallel fpg trap shift soe delta immediate suspension pns restriction lack room repeat text rules 
rules termination code emit seq seq loop cond cond parallel trap trap shift imm 
suspend imm 
suspend imm 
suspend restr restr main derived operators ffi oe delta ffi ns delayed suspension delta immediate trigger delta delayed trigger delta delta immediate weak preemption weak preemption delayed strong preemption sae delta delta soe delta immediate strong preemption 
