appreciated unfold jeremy gibbons school computing math 
sciences oxford brookes university gipsy lane oxford ox bp uk 
email brookes ac uk geraint jones oxford university computing lab wolfson building parks road oxford ox qd uk 
email geraint comlab ox ac uk folds appreciated functional programmers 
dual unfolds new nearly appreciated 
believe deserve better 
illustrate calculate number algorithms computing breadth traversal tree 
specify breadth traversal terms level order traversal characterize fold 
presentation fold simple inefficient removing inefficiency longer fold 
calculate characterization unfold characterization fold unfold equally clear efficient 
calculate characterization breadth traversal directly unfold turns standard queue algorithm 
keywords program calculation functional programming fold unfold anamorphism induction traversal breadth level order 
folds appreciated functional programmers 
benefits encapsulating common patterns computation higher order operators recursion directly known understood :10.1.1.41.125
dual notion folds unfolds explored hagino malcolm popularized conference meijer :10.1.1.41.125
unfolds certainly new nearly appreciated folds 
example merit just half page disappeared altogether 
inductive types warrant pages apart mentions fourteen functional programming textbooks shelves 
believe unfolds deserve higher profile 
illustrate claim calculate number algorithms computing breadth traversal tree pure functional language 
thorny problem functional programmers contrast natural depth traversal depth traversal runs grain tree breadth traversal runs grain 
construct technical report cms tr school computing mathematical sciences oxford brookes university revised july 
appear third acm sigplan international conference functional programming baltimore maryland september 
simple elegant characterization breadth traversal terms level order traversal characterize fold 
unfortunately characterization inefficient order remove inefficiency resort mere recursive definition higher order fold 
contrast fold characterization level order traversal calculate unfold characterization 
unfold characterization equally clear apparently obvious experienced functional programmers 
talking topic various audiences years discovered unfold characterization 
unfold characterization efficient linear time 
best easier manipulate particular leads easily program unnecessary data structures 
different route calculate characterization breadth traversal directly unfold 
turns standard queue algorithm little extra queue operations efficient takes linear time 
remainder structured follows 
section briefly notation 
section define breadth traversal terms level order traversal 
section characterization traversal fold show inefficient calculate efficient characterization ceases order fold 
section calculate characterization level order traversal unfold characterization fold show linear 
section calculate unfold standard queue algorithm breadth traversal 
notation haskell notation translation nearly modern functional language straightforward 
folds lists kinds fold lists normal fold right foldr 


foldr op foldr op op foldr op function op converted binary operator op writing restricted version non empty lists determined foldr op foldr op related property non empty foldr op foldr op right unit op 
normal fold enjoys universal property essentially saying definition foldr treated equation unknown foldr op unique strict solution 
words strict foldr op op number promotion properties simple consequences universal property fold map promotion strict op op foldr op foldr op map foldr op foldr op map fold join promotion foldr op map op associative identity xs ys xs op ys fold concat promotion foldr op map op associative identity concat foldr op map unfolds lists unfolds dual folds :10.1.1.41.125
standard construction unfolds gives characterization unfold 


unfold pfg case pfg left 
right 
unfold pfg find convenient equivalent characterization unfold bool 



unfold unfold unfolds enjoy universal property saying definition considered equation unknown unfold unique solution 
words unfold setting cpo continuous functions pointed complete partial orders advocated meijer setting set total functions sets originally hagino malcolm order better match semantics functional programming languages :10.1.1.41.125
particular treatment infinite data structures set data structures generated unfolds different data structures consumed folds folds unfolds composed cpo kinds data structure 
trees trees represented datatype data tree nd tree rose trees 
tree type tree consists root label type list children type tree define root kids root tree 
root nd ts kids tree 
tree kids nd ts ts carry calculations forests lists trees turns simpler way 
type synonym type forest tree folds trees datatypes trees forests mutually recursive folds trees forests 
define folds follows foldt 

tree 
foldt nd ts ts 

forest 
ts map foldt ts example function sums tree numbers tree int 
int foldt sum sum sums list numbers corresponding function forests forest int 
int sum breadth traversal tree traversal operation tree computes list consisting elements tree order 
example tree traversal preorder traversal parent appears traversal children siblings appear left right order 
example preorder traversal tree list 
preorder traversal postorder traversal parent appears children inorder traversal sense binary trees parent appears children examples depth traversals 
easy implement pure functional language naturally follow structure tree expressed folds trees 
example preorder traversal tree tree 
foldt concat contrast breadth traversal goes structure tree 
breadth traversal tree consists root element depth elements depth 
example breadth traversal tree 
nearly obvious implement breadth traversal efficiently pure functional language 
particular breadth traversal fold traversal forest constructed traversals trees forest 
standard implementation breadth traversal imperative language involves queues awkward express functionally require fast access ends list 
contrast depth traversals stacks come free recursive programs 
possible express standard queue algorithm efficiently pure functional language section 
algorithm unsatisfactory functional language reasons 
thing little effort required implement queues amortized constant time operations necessary get linear time program 
queue algorithm really describes process value low level declarative language prefer declarative specification problem develop operational implementation 
find declarative characterization breadth traversal notion level order traversal tree 
gives elements level tree list lists strictly speaking traversal definition 
example level order traversal tree list lists level order traversal breadth traversal easy construct simply concatenate levels 
traversal fold section characterization traversal fold trees forests 
define related functions levelt tree 
levelf forest 
compute level order traversals trees forests respectively 
example level order traversal forest list lists level order traversal tree forest breadth traversal formed concatenating levels tree 
concat levelt forest 
concat levelf level order traversal forest gluing level order traversals trees forest 
lists lists glued appropriate way function lzc standing long zip concatenate 
long zip related standard function zipwith returns list long longer argument zipwith returns list long shorter argument 
formally lzc 

lzc lzw lzw 


lzw op xs ys null xs ys null ys xs head xs op head ys lzw op tail xs tail ys note lzw op associative op define function glue glue traversals trees forest follows glue 
glue foldr lzc level order traversal tree consists root tree pushed traversal forest forms children define push 

push xss xss define functions levelt levelf returning level order traversal tree forest respectively levelt tree 
levelt foldt push glue levelf forest 
levelf push glue passing observe lzw uncurry lzw unfold lzw 

lzw op unfold xs ys null xs null ys xs ys null ys head xs null xs head ys head xs op head ys xs ys tail xs tail ys tail zs null zs tail zs uncurried version inconvenient standard definition foldr requires curried operator 
version efficient direct recursion takes time proportional length result direct recursion traverses shorter argument 
traversal fold linear time characterization level order traversal breadth traversal take linear time efficient long zip lzw 
consider example forest ts nd nd trees 
unfolding definitions levelf ts lzc lzc levelt lzc levelt lzc lzc levelt lzc levelt note levelt levelt traversed compute levelf traversed compute levelf ts 
complete binary tree depth level order traversals deepest trees times algorithm takes time proportional size forest times depth 
standard technique introducing accumulating parameter remove inefficiency 
introduce functions levelt levelf defined levelt tree 

levelt xss lzc levelt xss levelf forest 

levelf ts xss lzc levelf ts xss generalization levelt levelt levelf ts levelf ts levelf levelf xss levelf lzc levelf xss levelf lzc xss levelf ts xss levelf lzc levelf ts xss levelf lzc lzc levelt levelf ts xss lzc associative lzc levelt lzc levelf ts xss levelt levelf levelt levelf ts xss levelt consider separately cases xss empty 
xss empty levelt nd ts xss levelt lzc levelt nd ts xss lzc xss empty levelt nd ts levelt levelf ts levelf levelf ts xss non empty levelt nd ts xss levelt lzc levelt nd ts xss levelt lzc levelf ts xss lzc xss non empty head xss lzc levelf ts tail xss levelf head xss levelf ts tail xss define levelt tree 

levelt nd ts xss ys levelf ts ys null xss head xss tail xss levelf forest 

levelf ts xss foldr levelt xss ts takes linear time 
efficient long zip lzw necessary unfold version lzw program quadratic worst case 
unfortunately efficient characterization traversal longer fold traversal forest constructed independent traversals trees forest trees considered right left traversal starting point constructing traversal 
sad resort expressing recursion directly losing benefits higher order operators :10.1.1.41.125
apart difficult read direct recursion longer suitable parallel evaluation accumulating parameter single threaded computation 
possible regain characterization fold linear time abstracting accumulating parameter constructing function lists lists continuation higher order fold style levelt tree 

levelt foldt hss hss foldr lzw levelf forest 

levelf complicated requires higher order language features traditional languages 
traversal unfold section calculate characterization levelf unfold 
find levelf unfold non empty forest non empty traversal levelf ts null ts determines remains consider non empty forests 
head levelf levelf head foldr lzc map levelt foldr lzc foldr lzc non empty lists head foldr lzc map levelt fold map promotion non empty xs ys head lzw xs ys head xs head ys foldr map head map levelt head levelt wrap root wrap foldr map wrap map root foldr map wrap id non empty lists map root tail levelf levelf tail foldr lzc map levelt foldr lzc foldr lzc non empty lists tail foldr lzc map levelt fold map promotion non empty xs ys tail lzw xs ys lzw tail xs tail ys foldr lzc map tail map levelt tail levelt levelf kids foldr lzc map levelf map kids foldr op foldr op non empty lists foldr lzc map levelf map kids fold concat promotion levelf concat map kids levelf unfold fold levelf unfold null map root concat map kids write levelt levelf levelt levelf gives characterization levelt unfold 
gives linear time algorithm traversal algorithm complicated arguably simpler characterization fold efficient 
see subsequently amenable manipulation conclude section deforestation eliminate intermediate list lists constructed breadthfirst traversal :10.1.1.30.9032
deforestation hinted benefits accrues expressing levelf unfold hylomorphism unfold followed fold 
hylomorphisms proceed stages producing data structure second consuming 
lazy evaluation intermediate complex data structure need exist producer consumer phases operate concurrently advantageous fuse phases reduce amount heap space turned 
transformation known deforestation standard technique performed mechanically :10.1.1.30.9032
specific deforestation functions form foldr op unfold consider case holds argument foldr op unfold assumption holds unfold foldr op foldr hold foldr op unfold assumption hold unfold foldr op unfold foldr op foldr op unfold op op applied breadth traversal deforestation gives program ts null ts map root ts concat map kids ts fact version generated automatically hylo away concat map kids 
program shown bernhard moller 
certainly elegant low level particular uses recursion directly encapsulating higher order operator 
find program arises compiler optimization characterization 
traversal queue turns standard queue traversal algorithm arises expressing directly unfold starting characterization level order traversal fold 
calculation depends crucially property lzw op associative foldr op lzw op xs ys op foldr op lzw op ys xs example concat lzc xs xs ys ys ys lzc concat xs ys xs ys ys concat xs ys xs ys ys associativity xs ys xs ys ys concat lzc xs concat lzc ys ys ys xs proof property induction xs straightforward omitted 
returning traversal clearly ts null ts non null forest nd ts levelf concat foldr lzc map levelt nd ts map foldr concat lzc levelt nd foldr lzc map levelt ts levelf concat lzc levelt nd levelf ts levelt concat lzc levelf levelf ts crucial property concat lzc levelf ts levelf fold join promotion levelf ts lzc levelf ts levelf concat levelf ts ts unfold null nd ts nd ts ts standard queue traversal algorithm 
low level able derive specification 
course program linear time appending children tree queue ts takes time proportional length ts grows linearly size tree program quadratic 
take linear time clever data structure allows queue operations amortized constant time simpler technique lists reversed suffices 
idea introduce function ts vs ts reverse vs reverse reverses list ts ts straightforward calculations lead characterization forest forest 
vs reverse vs nd ts vs ts reverse vs 
fact unfold unfold ts vs null ts null vs vs reverse vs ts vs root vs reverse vs ts vs ts reverse kids vs expressing way entails reversals second list list runs 
artifact choice characterization unfold standard characterization entail just reversal 
arose discussion late usenet newsgroup comp lang functional perform breadth traversal functional language 
wrote earlier giving derivations solutions giving complicated derivation algorithm breadth labelling kind inverse breadth traversal originally posed joe fasel tree list problem construct tree shape breadth traversal response earlier bernhard moller showed elegant traversal algorithm section 
led simpler derivations indirectly observation unfolds greatly appreciated functional programming community time 
grateful problem solving club oxford university computing laboratory graham hutton colin runciman attendees ifip working group meetings oxford help polishing derivations hu experiments hylo system 
richard bird 
promotion accumulation strategies transformational programming 
acm transactions programming languages systems october 
see 
richard bird 
addendum promotion accumulation strategies transformational programming 
acm transactions programming languages systems july 
richard bird 
functional programming haskell 
prentice hall 
richard bird philip wadler 
functional programming 
prentice hall 
warren burton 
efficient functional implementation fifo queues 
information processing letters july 
leonidas fegaras tim sheard 
revisiting catamorphisms datatypes embedded functions 
rd acm sigplan symposium principles programming languages pages st petersburg beach florida 
jeremy gibbons 
algebras tree algorithms 
phil 
thesis programming research group oxford university 
available technical monograph prg 
jeremy gibbons 
deriving tidy drawings trees 
journal functional programming 
earlier version appears technical report department computer science university auckland 
david gries 
science programming 
texts monographs computer science 
springer verlag 
hagino 
typed lambda calculus categorical type constructors 
pitt poign rydeheard editors lncs category theory computer science pages 
springer verlag september 
robert hood robert melville 
real time queue operations pure lisp 
information processing letters 
rob 
symmetric set efficient list operations 
journal functional programming 
hu iwasaki takeichi 
deriving structural hylomorphisms recursive definitions 
international conference functional programming 
acm sigplan 
john hughes :10.1.1.41.125
functional programming matters 
computer journal april 

geraint jones jeremy gibbons 
linear time breadth tree algorithms exercise arithmetic folds zips 
computer science report dept computer science university auckland may 
ifip working group working win 
malcolm 
data structures program transformation 
science computer programming 
lambert meertens 
steps theory rose trees 
cwi amsterdam ifip working group working rom 
erik meijer maarten fokkinga ross paterson :10.1.1.41.125
functional programming bananas lenses envelopes barbed wire 
john hughes editor lncs functional programming languages computer architecture pages 
springerverlag 
bernhard moller 
personal communication may 
chris okasaki 
simple efficient purely functional queues deques 
journal functional programming 
hu iwasaki takeichi 
calculational fusion system hylo 
richard bird lambert meertens editors algorithmic languages calculi pages 
chapman hall 
john peterson kevin hammond lennart augustsson brian boutel warren burton joseph fasel andrew gordon john hughes paul hudak thomas johnsson mark jones erik meijer simon peyton jones alastair reid philip wadler 
haskell report 
www haskell org report april 
simon thompson 
type theory functional programming 
addison wesley 
david turner editor 
research topics functional programming 
university texas austin addisonwesley 
philip wadler :10.1.1.30.9032
deforestation transforming programs eliminate trees 
theoretical computer science 
mitchell wand 
continuation program transformation strategies 
journal acm january 

