mapping objects tables pattern language wolfgang keller ea wien austria email com com homepages www sdm de mapping objects tables problem occurred long people want program object oriented language relational object oriented databases reasons 
mapping objects tables family problems occurs object relational access layers 
context object relational access layers described authors see bro col subject 
object orientation relational model different paradigms programming 
objects need stored relational databases gap different sights needs bridged 
data abstraction modules mapped relational database life comparably easy kel 
full blown object models concepts object oriented programming mapped relational table structures 
aggregation inheritance polymorphism associations classes data types smarter sql data types 
concepts may mapped different solutions problem 
describe different solution separate pattern 
approach allows clearly demonstrate consequences solution respect general forces 
mapping data types requires larger effort kr may treated pattern language 
leave pattern mining 
general forces performance major forces take account mapping objects tables performance 
way objects mapped tables significant influence number database accesses occur system 
database accesses executed hard disks external media measured milliseconds sec 
processor cycles hand measured nanoseconds sec 
idea waste processor cycles ram memory slow io 
read versus write update performance solutions various mapping problems different characteristics comes read versus update write performance 
mappings allow read needed single database access takes database operations write object due mapping inheritance 
sure know frequency read write update operations commit certain table design 
flexibility maintenance cost want database mapping prototyping process 
case flexibility important performance insert delete attributes add delete classes restructure class hierarchy 
hierarchy classes stable may want switch mapping optimal performance 
performance redundancy versus maintenance cost normal forms relational calculus helps eliminate redundancy normal forms factorization 
relational database applications hand show best performance minimal number accesses database 
expensive factor seek time certain record bandwidth reading data disk located disk 
applications perform best able retrieve data needed case single access database hit cluster data 
accesses database reduced eliminating factorization ignoring normal forms negative consequences maintainability application kel 
clustering influenced database administration 
maintainability data model performance conflicting goals 
harder optimize data model performance higher maintenance cost case changes application 
redundancy kinds anomalies normally prevented normal forms taken care maintenance 
space consumption versus performance mappings surplus database space fields null values leave large portions database record unused 
surprising worst space hogs fastest performers 
query processing conflicting purposes data serve business information system 
data ready online transaction processing performance 
implies restructuring data optimal performance 
see kel optimize table schemes performance 
data ready data warehouse purposes 
implies data represented form suited ad hoc queries 
normal forms redundancy maximum factorization serve purpose 
building data warehouse implies separating data data needed fast online processing 
design table mapping objects check application data warehouse online processing application 
application style database driven business information systems types information systems 
relational database persistence mechanism disaster 
examples 
cad applications cad applications manipulate large sets complex interrelated objects 
transactions long 
cad designer typically checks design works hours checks back data store 
building applications top relational database object relational database mapping doomed fail 
simple pointer dereferencing working storage faster factor joins 
relational databases intended long transactions zero collision rate 
case tools case tools characteristics similar cad systems 
ibm negative experience ad cycle repository prominent example happens applications implemented top relational database 
check check persistence applications example generalized applications complex interrelated objects allow direct manipulation allow user check database longer period time 
systems built non relational data stores 
check build applications map objects relations 
integration legacy systems business information systems seldom developed scratch 
connect legacy systems allowed touch 
case build objects top legacy data 
case mapping patterns fit legacy data 
may apply consequences sections patterns 
inform performance implications mappings 
roadmap pattern language pattern language structured problem structure 
alternative solutions patterns problems mapping aggregation inheritance associations 
mapping objects tables patterns mapping aggregation patterns mapping inheritance patterns mapping associations single table aggregation foreign key aggregation inheritance tree table class table inheritance path table objects blobs maps aggregation associations inheritance foreign key association association table cookbook aspect pattern language pattern language presents alternative solutions main problems encounter mapping objects tables 
depending project requirements want optimize mapping flexibility easy maintenance low database space consumption performance 
give impression listed patterns significant consequences matrix 
matrix help guess start reading 
matrix provide detailed technical discussion patterns 
performance pattern write update single read polymorphic queries space consumption flexibility maintainability ad hoc queries single table aggregation foreign key aggregation inheritance tree table class table inheritance path table objects blobs foreign key association association table poor irrelevant depends see detailed discussion patterns mapping aggregation question aggregation associations hard answer object oriented modeling level ooa 
purposes answer question influenced performance flexibility considerations 
may single table aggregation natural way map aggregation 
may foreign key aggregation usual way map associations discussed foreign key association section mapping associations 
pattern single table aggregation pattern shows map aggregation relational data model integrating aggregated objects attributes single table 
example consider object model string name address 
customer employee string street string city char zipcode string state 
string name 
aggregated types problem map aggregation relational tables 
forces performance optimal performance solution allow retrieve object database access join operations 
database accesses fetch minimum number pages bandwidth 
maintainability optimal maintainability aggregated types aggregated object type mapped set tables identically different spots physical data model 
normalization data model level ease maintenance ad hoc queries 
consistency database aggregation implies aggregated object life cycle coupled aggregating object life cycle 
guaranteed database application code solution put aggregated object attributes table aggregating object 
structure aggregating object table attributes 
aggregated object attributes mapped mapped transformed table physical data model 
attributes integrated table 
example resolved resolve example look table created customer object 
integrated customer database table 
customer string street string city char zipcode string state 
string name 
name char 
char char char char char char char char 
mapping aggregated object type aggregating object table prefix distinguish attributes 
similar resolution structures dot notation customer street 
consequences performance solution optimal terms performance table needs accessed retrieve aggregating object aggregated objects 
hand fields aggregated objects attributes increase number pages retrieved database access resulting possible waste bandwidth 
maintenance flexibility aggregated object type aggregated object type design results poor maintainability change aggregated type causes adaptation aggregating object types database tables 
consistency database aggregated objects automatically deleted deletion aggregating objects 
application kernel code database triggers needed 
ad hoc queries want form query scans objects database hard formulate 
implementation naming convention need think prefix naming convention aggregated object attributes appear aggregating object table 
example prefix short form attribute name 
physical database page size positive effects aggregating object table partially compensated aggregated object attributes start small fraction new database page 
situation database pages need read 
variants discussed simple case relation aggregating object type aggregated object type 
see foreign key association map relation aggregating object aggregated object 
see overflow table kel trick avoid foreign key associations case relations 
related patterns foreign key aggregation alternative solution single table aggregation 
see representing collections relational database bro 
applied ordinary relational database access layers compared kel 
reading mainstream objects book ed yourdon chapter question aggregation versus associations modeling level 
pattern foreign key aggregation pattern shows map aggregation relational data model foreign keys 
context reconsider example single table aggregation see 
presume want solution treats class object allows better maintenance single table aggregation 
problem map aggregation relational tables 
forces see single table aggregation pattern 
solution separate table aggregated type 
insert synthetic object identity table object identity table aggregating object foreign key link aggregated object 
structure aggregating object table 
char mapped aggregated object table 
char mapped foreign key mapped table 
mapped table 
aggregated object table contains synthetic object identity 
referenced foreign key field aggregating object table 
example resolved apply solution example page get customer table contains foreign key table table contains synthetic object identity field link tables 
customer string street string city char zipcode string state 
string name 
name char 
char char table char street char city char zipcode char state char retrieving customer object database costs database access operations customer invoice address case single table aggregation 
brought single join database access table equipped additional back link field points synthetic object identity customer table 
cost getting result set addresses customer attributes 
consequences performance foreign key aggregation needs join operation database accesses single table aggregation needs single database operation 
accessing aggregated objects statistical rare case acceptable 
aggregated objects retrieved aggregating object second look performance 
maintenance factoring objects tables easier maintain mapping flexible 
consistency database aggregated objects automatically deleted deletion aggregating objects 
perform task provide maintain application kernel code database triggers 
implementation issue 
chose options 
ad hoc queries factoring aggregated objects separate tables allows easy querying tables ad hoc queries 
implementation consider domain keys synthetic object identities 
domain keys drawback arbitrary links pointing back owner object owned object type know types objects 
consider inserting link back aggregated object aggregating object 
address example accomplished inserting field address table stands owner object 
owner may employee customer type aggregates synthetic object identity link type 
bi directional links offer advantages queries consistency checking purposes 
don search aggregating object table find owner aggregated object 
hand backlinks expensive terms database operations needed keep date 
related patterns alternative see single table aggregation 
foreign key association works similar 
see representing collections relational database bro 
patterns mapping inheritance various ways map inheritance hierarchies relational database tables 
patterns pure forms exactly mapping style 
practice may mix mapping styles arbitrary table mappings 
discussion cover multiple inheritance 
meaningful examples domain level multiple inheritance anyway 
uses multiple inheritance motivated protocol inheritance 
class inherits protocols base classes 
protocol classes persistent state rare 
simple inheritance covers practical cases 
running example running example part called partner system 
party form person natural person institution 
customers parties employees 
comes employees distinguish 
results object diagram 
oid string name party customer employee money string money add attributes needed real life application insert attributes needed demonstrate different mapping patterns discuss 
complex attributes relationships 
example assume classes base class 
classes may instances 
pattern inheritance tree table pattern demonstrates way map complete inheritance hierarchy single database table 
problem map inheritance hierarchy classes database tables 
forces forces relevant general forces page polymorphic read space consumption versus write update performance inheritance hierarchy need support queries party objects matching criteria 
result set polymorphic example contain employees 
solutions best support polymorphic queries waste disk space expensive terms write performance 
locking schemes database databases implement page level locking programmed locks early 
case take care database traffic single table exceed limit results excess locks poor performance 
map classes single table attract traffic 
depth inheritance hierarchy solutions acceptable flat inheritance hierarchies ugly deep inheritance hierarchies 
maintenance effort mapping solutions clutter single object data tables fast polymorphic reading 
drawback hard maintain case new object attributes added existing object attributes deleted 
schema evolution needs take account data replicated physical data model 
may easily turn maintenance nightmare 
maintenance cases insertion deletion class inheritance hierarchy 
user defined queries want give user opportunity form queries need assure table mappings understandable user perspective 
solution union attributes objects inheritance hierarchy columns single database table 
null values fill unused fields record 
structure oid table instance instance null values null values null values null values attribute values attribute values attribute values attribute values attribute values mapped example resolved table design running example looks follows 
table party attributes char name char 
customer attributes char 
employee attributes char 
attributes numeric 
attributes numeric 
consequences write update performance inheritance tree table allows reading writing descendant single database operation 
polymorphic read performance descendants single table polymorphic reading straightforward 
challenge construct correct object type selected database record 
plenty patterns task interface col 
space consumption see mapping depicted storing objects attributes requires space absolutely necessary 
waste space depends depth inheritance hierarchy 
deeper hierarchy bigger difference union attributes attributes average object bigger waste space 
balancing database load tables mapping classes single table may cause poor performance 
sources problems database behavior database uses page level locking traffic single table may severely slow access 
parts effect may compensated clever clustering 
traffic single table gets heavy expect performance degradation deadlocks 
locks single table may result lock escalation number locks cause lock escalation typically parameter relational database systems 
classes need secondary database indexes speed search 
implement classes single database table add indexes table 
indexes single table cause updates slow indexes updated 
brief discussion lock escalation see dat page 
maintenance cost mapping straightforward easy schema evolution comparably straightforward easy long inheritance hierarchy deep 
ad hoc queries mapping intuitively clear formulating ad hoc queries fairly easy 
implementation consider mapping objects single table may mapping store object types single table resulting heavy traffic table 
small applications feasible flexible approach 
waste space check relational database allows packing null values 
case mapping attractive avoid waste space null values 
type identification need insert type information table 
compute type information null values 
convenient synthetic object identities contain type information anyway 
better straight synthetic object identity contains type information 
related patterns see representing inheritance relational database bro pattern class table pattern discusses map classes inheritance hierarchy separate database table 
problem map inheritance hierarchy classes database tables 
forces forces identical discussed inheritance tree table pattern 
solution map attributes class separate table 
insert synthetic oid table link derived classes rows parent table corresponding rows 
structure oid mapped oid 
oid 
oid 
example resolved mapping running example tables results tables class 
single instance represented tables 
oid string name party table oid char employee table table numeric oid linked oid linked oid oid string name party customer employee money string money consequences write update performance pattern provides flexible mapping best performer 
consider reading instance running example 
operation costs database read operations table employee table party table 
writing costs database write operations updating indexes 
mapping expensive terms database operations write update intensive tasks 
costs rise depth inheritance hierarchy 
polymorphic read performance running example instance corresponding employee instance party instance respective tables 
polymorphic reading require reading table 
attractive sides pattern space consumption space consumption mapping near optimal space consumption 
redundant attributes additional synthetic oids needed link levels hierarchy 
maintenance cost mapping straightforward easy understand schema evolution straightforward easy 
ad hoc queries mapping generally requires accessing table retrieve object instance data ad hoc queries far straight forward hard formulate inexperienced users 
heavy database load root tables pattern causes heavy load root object type table 
running example transaction holding write lock table needs accompanied write lock party employee table 
see consequences section inheritance tree table discussion negative effects tables form bottleneck 
implementation classes note classes mapped separate table 
type identification example presume synthetic object identity contains type information 
type information needed construct accurate class result polymorphic read query 
related patterns see representing inheritance relational database bro 
pattern inheritance path table pattern demonstrates way map attributes occurring inheritance path single database table 
problem map inheritance hierarchy classes database tables 
forces forces identical discussed inheritance tree table pattern 
solution map attributes class separate table 
classes table add attributes classes class inherits 
structure oid mapped oid 
oid 
oid 
example resolved mapping running example tables results tables class 
instance represented tables 
mapped follows table party attributes char name char 
employee attributes char 
attributes numeric 
consequences write update performance mapping needs database operation read write object 
polymorphic read performance polymorphic scan party objects running example mean visiting tables 
expensive compared class table inheritance tree table 
space consumption mapping offers optimal space consumption 
redundant attributes additional synthetic oids ancestor tables 
maintenance cost inserting new subclass means updating polymorphic search queries 
structure tables remains untouched 
adding deleting attributes superclass results changes tables derived classes 
may touch search queries static dynamically generated dictionary 
pattern needs support generators dynamic queries maintainable 
ad hoc queries mapping generally requires accessing table perform polymorphic searches ad hoc queries polymorphic search hard write inexperienced users 
queries leaf classes trivial 
database load root tables bottlenecks tables near root inheritance hierarchy 
accessing object exactly locks table 
implementation classes note classes mapped tables 
type identification need insert type information tables type object cam derived table name 
synthetic object identities contain type information anyway waste effort strip type information gain bytes table space 
related patterns see representing inheritance relational database bro 
pattern objects blobs pattern demonstrates way map objects single database table blobs 
pattern covers inheritance aggregation associations 
interesting academic point view source ideas solve unusual problems mapping objects relational databases 
problem map objects relational database 
forces forces identical discussed inheritance tree table pattern 
solution table containing fields synthetic oid second variable length blob contains data object holds 
streaming unload object data blob 
structure oid table blob type object mapped example resolved table design running example example looks exactly table design 
consequences write update performance objects blobs allows reading writing descendant single database operation 
note blobs fastest way access data types rdbms 
polymorphic reads scanning classes properties difficult 
access internal structure blob need register functions database give access attributes 
see loh implement functions 
defining maintaining functions costs effort database fields 
ad hoc queries scanning classes properties difficult ad hoc queries difficult express 
additional functions need defined 
space consumption database allows variable length blobs space consumption optimal 
maintenance cost schema evolution comparable schema evolution object oriented database 
implementation sources similar implementations objects blobs research prototypes 
tried come close possible oodbms relational database storage manager 
implementing pattern similar implementing oodbms top existing storage manager 
balancing database load tables mapping classes single table results poor performance 
discussion see consequences section inheritance tree table pattern 
combining oodb properties relational databases feasible combine pattern types object relational mappings 
case blob hold complex object structures project planning chart 
additional fields hold information needed access organizational data normal ad hoc queries see 
objects blobs research prototype rei rei 
blobs hold single classes attributes may contain net objects streamed blob depicted 
approach allow coexistence relational oodbms data single database 
approach exactly pure form describe pattern 
table projects name budget schedule easy hard blob type coexistence object data relational data picture adapted rei related patterns pure form pattern similar inheritance tree table mapping 
see representing inheritance relational database bro 
patterns mapping object associations tables section presents patterns map associations objects foreign key association association table 
note problem mapping associations identical representing collections relational database bro 
pattern foreign key association pattern shows map associations objects relational tables example consider classic order example 
valid order may zero 
order set items problem map association relational tables 
forces see general forces page 
solution insert owner object oid dependent objects table 
oid may represented database key synthetic object identity 
structure oid set char char 
char links mapped foreign key consequences read performance reading order object costs join operation read operations multiple 
order object plus set 
write performance writing owned objects association pattern costs number changed owned objects write unchanged objects 
performance redundancy versus maintenance cost normal forms mapping scheme usual mapping scheme relational database applications 
collide normal forms 
allows reasonable maintenance cost 
space consumption near optimal space required foreign key column table 
ad hoc queries mapping common relational database applications ad hoc queries harder easier write relational database application 
application style mapping best suits relational style applications 
try relational database cad case applications 
reason lies exactly mapping associations relational tables foreign keys 
resolving association costs join operation second database access 
page storage systems oodbms handle similar cases faster worse tuple processing relational model 
integration legacy systems relational legacy systems exactly mapping described converting associations objects source new problems 
implementation general performance performance turns insufficient relational database access layer object relational mapping apply performance improvement patterns controlled redundancy overflow tables kel 
allows optimize physical table schemes affecting logical mapping scheme proposed pattern 
update performance updating dependent objects update really changed load working storage 
update insert operations expensive 
prefetching dependent objects case know advance need access dependent objects cases get data join operation construct owner object dependent objects result single database operation select order key key orderkey faster filling container smart pointers set object identities dereferenced 
order costs database access order object multiple read access get object identities dependent objects plus single record read accesses get 
related patterns practice association hard distinguish aggregation 
consider aggregation patterns single table aggregation foreign key aggregation 
solution slightly different problem 
alternative foreign keys consider controlled redundancy overflow tables kel 
pattern close relative mapping associations association tables 
see representing object relationships tables bro 
pattern association table pattern shows map associations objects relational tables example example association employee object type department object type 
employee department 
department usually comprises employee 
employee department oid set oid set problem map associations relational tables 
forces see general forces page 
solution create separate table containing object identifiers foreign keys object types participating association 
map rest object types tables suitable mapping patterns 
structure oid set mapped foreign keys char 
char char 
char 
oid set consequences consequences analogous foreign key association adapted slightly different context 
repeat 
implementation general performance performance turns insufficient database optimization patterns controlled redundancy overflow tables kel 
case symmetric association things get slightly complicated break symmetry order apply performance optimizations 
prefetching objects case know advance need access dependent objects employees department cases get data join operation construct department object employee objects result single database operation select ed ed ed faster filling container smart pointers set object identities dereferenced 
discussion slightly different arguments foreign key association 
related patterns pattern closely related foreign key association 
see representing object relationships tables bro 
known uses single table aggregation foreign key aggregation foreign key association association table option persistence www persistence com smalltalk framework www com persistence frameworks 
patterns object relational access layer hypo bank col kel object relational gateway poet poe 
inheritance tree table class table discussed design option concept object relational gateway poet poe inheritance path table 
pattern hypo projects col hah kel 
objects blobs research prototype rei rei 
credits acknowledgments kyle brown bruce discuss representing objects tables patterns cited crossing pattern language bro 
uwe written series short patterns mapping objects tables ste 
wolfgang hahn andreas describe similar experiences report project hah 
circle closes uwe member team 
problems discussed team working object relational gateway poet object database poe experience hypo project bar 
list continued 
express reviewers far kyle brown jens 
bar christian wolfgang keller christian objekt unter internal technical report hypo bank 
bro kyle brown bruce crossing pattern language integration white knowledge systems 
shortened version contained john vlissides james coplien norman eds pattern languages program design addison wesley 
col jens wolfgang keller ein zur juli august pp 

col jens decoupling object oriented systems collection patterns sd gmbh kg munich available www sdm de dat date database systems sixth edition addison wesley 
hah wolfgang hahn andreas eine zu informatik spektrum heft pp 
springer verlag kr der hypo bank internal technical hypo bank sd 
kel wolfgang keller christian klaus wagner ber proceedings online vi hamburg 
kel wolfgang keller jens relational database access layers pattern language collected papers plop europlop conferences washington university department computer science technical report wucs february 
loh guy lohman bruce lindsay hamid pirahesh bernhard extensions starburst objects types functions rules 
cacm pages poe poet gmbh ein zur integration daten die poet gmbh 
rei berthold stefan michael carey lehman hamid pirahesh srinivasan making real data persistent initial experiences 
pos rei lehman pirahesh storing objects relational database ibm systems journal vol 

rum james rumbaugh michael blaha william premerlani frederick eddy william lorensen object oriented modelling design prentice hall 
ste uwe personal communications 
ed yourdon whitehead jim karin paul mainstream objects analysis design approach business prentice hall 
