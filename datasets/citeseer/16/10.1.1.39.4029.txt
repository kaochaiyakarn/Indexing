haskell xml generic combinators type translation 
malcolm wallace colin runciman university york uk complementary approaches writing xml document processing applications functional language 
approach generic tree structure xml documents basis design library combinators generic processing selection generation transformation xml trees 
second approach type translation framework treating xml document type definitions dtds declarations algebraic data types derivation corresponding functions reading writing documents typed values haskell 
document markup languages xml extensible markup language simplification older sgml standardised generalised markup language standard widely publishing industry 
markup language meaning adds structural information text document 
extensible meaning vocabulary markup fixed document contain meta document called dtd document type definition describes particular markup capabilities 
xml restricted traditional idea document 
organisations proposing xml interchange format pure data produced applications graph spreadsheets relational databases 
html hyper text markup language wellknown example instance sgml html document sgml document conforming particular dtd 
xml improves sgml removing shorthand forms require application knowledge document dtd 
instance html markup numbered list requires marker forms paragraphs implicit markers understood similar form starts markup line images self contained needs appear proceedings international conference functional programming paris sept 
acm copyright 
marker 
html application needs aware specific kind markup order right thing 
xml document structure xml regular 
markup explicit marker exception document formed nesting structure syntactically clear 
important consequence xml application need know meaning interpretation markup expressions parts document selected re arranged transformed structure meaning 
xml document essentially tree structure 
basic types content document tagged elements plain text 
tagged element consists start tag tag may enclose sequence content elements text fragments 
tagged elements nested depth document formed consists single top level element containing properly nested elements 
start tags syntax tag tags tag tag arbitrary name 
special syntax empty element tag 
exactly equivalent tag tag 
start tags element contain tag name identifies semantic information structure indicating enclosed content interpreted 
start tag may contain attributes simple name value bindings providing information element 
shows example xml document illustrating components 
representing xml haskell processing xml functional language haskell 
modern functional languages deal tree structured data expects language fit application 
key issue just represent documents particular reconcile dtd datatype definitions included xml documents data types defined haskell 
investigated complementary approaches define internal data structure represents contents xml document independent dtds 
dtd xml documents interest systematically derive definitions internal haskell xml toolkit available www www cs york ac uk fp xml version 
doctype album system album dtd 
album 
title time title 
artist dave quartet artist 
style 
location thumbnail pix small timeout jpg pix covers timeout jpg 

label columbia number cl format lp 
label columbia number cs format lp 
label columbia number format lp country korea 
label sony cbs number legacy ck format cd 
personnel 
player name dave instrument piano 
player name paul instrument alto sax 
player name eugene wright instrument bass 
player name joe instrument drums 
personnel 
tracks 
track title blue la turk credit timing 
track title strange meadow credit timing 
track title take credit timing 
track title get ready credit timing 
track title kathy waltz credit timing 
track title everybody credit timing 
track title pick sticks credit timing 
tracks 
notes author unknown 
possibly famous album contains link take famous jazz track period 
experiments different time signatures dave remembered 
recorded jun aug nyc 
see sequel link cbs 
time 
notes 
album 
example xml document 
data types represent 
definitions closely specific dtd 
advantages include genericity function level scripting 
generic applications handle wide class xml documents just sharing specific dtd 
example completely generic application searching documents extract contents matching pattern 
xtract interpreter regular xml query language 
term generic applies applications assumptions document structure need know full dtd example small script add total column table recognised particular markup tag altering surrounding structure 
function level scripting mean programmer concerned details programming data structures 
details data structure manipulation hidden library high level combinators 
effect combinatory expressions serve extensible domain specific language 
advantages include stronger typing fuller control 
formed xml document said valid conforms stated dtd 
establishing correspondence dtds haskell types concept validity extended include applications process documents 
static guarantee applications fail respect document structure input xml conforms stated dtd xml output produced dtd derived type guaranteed valid 
direct access dtd specific data structure programmer fuller control computation done 
full repertoire programming techniques safeguard type checked haskell automatically produce xml valid respect specified dtd 
approaches rely toolkit basic components processing xml documents haskell instance parser pretty printer 
supporting components implemented existing combinator libraries :10.1.1.38.8777
sections develops approach generic representation combinator library including illustrative application 
develops alternative translation dtds haskell data types 
discusses pros cons approaches experience implementing 
discusses related offers suggestions 
generic combinators section generic representation contents xml documents excluding dtd 
introduce content filters suitable basic type functions processing representation combinators putting filters 
complete table basic filters combinators definitions xtract grep tool xml documents 
www cs york ac uk fp xtract light xml namespaces recommendation effect mechanism permitting multiple dtds facilities particularly useful 
see www org tr rec xml names 
example program shown 
expected property fitting set combinators satisfy algebraic laws table laws satisfied combinators 
documents transformations data modelling data element elem name attribute content data content element string functional languages processing treestructured data natural fit xml document domain haskell tree datatypes 
simplified form main datatypes model xml document element content definitions mutually recursive forming multi branch tree structure 
filter type type cfilter content 
content basic type document processing functions content filter takes fragment content xml document text complete tagged element returns sequence content 
result list empty contain single item contain large collection items 
filters select parts input document construct parts output document 
share basic type building new document intention re extract information parts old document 
result filter empty singleton filter thought predicate deciding keep input 
program wrapper cfilter 
io assume top level wrapper function gets command line arguments parses xml file content type applies filter pretty prints output document 
filter applied top level enclosing element document 
basic filters complete list predefined filters shown 
simplest possible filters takes content returns keep takes content returns just item 
algebraically zero unit filters 
ffl predicate selection filters 
filter elm predicate returning just item element 
conversely txt returns item plain text 
filter children returns immediate children element content item element 
filter tag returns item shortened name elm chosen avoid clash standard prelude function elem 
familiar detail xml entity document treated plain text 
predicates zero failure keep identity success elm tagged element 
txt plain text 
cfilter tag named element 
attr element attribute 
string 
cfilter element attribute value 
string string 
cfilter selection children children element cfilter value attribute 
synonym string 
cfilter construction literal build plain text 
synonym literal string 
cfilter build element string 
cfilter 
cfilter build element attributes string 
string cfilter 
cfilter 
cfilter replace element tag string 
cfilter replace element attributes string cfilter 
cfilter basic content filters 
element tag name string filter attr returns item element containing attribute name filter returns item element containing attribute value ffl construction filters 
function literal text content containing just string function fs builds content element tag argument fs list filters applied current item results collected children new element 
function avs fs just extra parameter avs list attribute values attached tag 
useful filter involves selection construction extracts value attribute current element returns just string piece content 
constructing new document script generates html function occurs repeatedly 
define small library list attribute filter pairs 
filter applied current element resultant content flattened string value assigned named attribute 
functions just synonyms particular applications different reducing verbosity making syntax readable 
convenience define new operators synonyms literal respectively bracketed postfix notation style programmers prefer 
combinators combinators intermediate code compilers render programs totally unfit human consumption 
idea combinator library specific class applications achieve form expression natural problem 
combinator library language extension tailored problem domain 
sense functional languages extensible just xml extensible 
combinators higher order operators serving glue assemble functions powerful combinations 
aim keep types component functions uniform possible function composed 
lexical limits host language choice notation follow application conventions haskell appropriate define new infix operator symbols combinators 
having defined basic filters ways usefully combined interesting complex filters 
see 
important useful filter combinator 
call operator irish composition reasons obvious 
plugs filters left filter applied results right filter 
instance expression text children tag title means plain text children current element provided current element title tag name 
combinators follows 
append operator joins results sequentially 
cat fs list generalisation concatenates results filters fs list 
acts guard results pruning include productive dual excludes results productive expression 

functional choice operator predicate filter productive filter applied applied 
derived directed choice operator gives results unproductive 
generalised path selectors selection subtrees path patterns familiar users unix file system patterns access directory structure notation indicate containing relation 
similar patterns xslt xml transformation language 
connection define path selection combinators 

combinators choose subtrees return results left filter contain results right filter children 
interior selector returning inner structure exterior selector returning outer structure 
left section infix operator 
filters higher order eta reduced rightmost argument disappears view 
irish composition append results guard negative guard interior search exterior search directed choice cfilter 
cfilter 
cfilter concat map 
filter null filter null 
children children 

cat concatenate results cfilter 
cfilter cat fs 
concat 
map fs disjoint union string cfilter 
cfilter 
cfilter oo tagged elm txt 
choice cfilter 
cfilter 
cfilter data 



null chip place application children deep recursive search topmost deepest recursive search deepest multi recursive search recursive application cfilter 
cfilter deep deep children deepest deepest children multi multi children chip filter combinators definitions 
editing combinator aside predicates selectors choice constructive filters useful combinator stands category editing combinator 
chip processes children element place filter applied children results rebuilt new children element 
recursion useful express recursive transformations xml documents transformations applied different levels document tree 
family expressions useful primarily se subtree arbitrarily deep location course editing filtering selection 
recursive combinator deep potentially pushes action filter deep inside document subtree 
tries filter current item productive stops results returned moves children tries recursively 
predicate strategy searches topmost matching elements tree 
variations deepest searches bottommost matching elements multi returns matches sub trees matches 
noted action combinators restricted predicates selectors 
powerful recursion combinator expression applies filter level tree leaves upwards root conceptually course lazy evaluation efficient 
example filters combinators illustrated example script 
program transforms album 
element html document provides formatted summary 
html output rendered netscape browser illustrated 
task fairly common commerce applications 
describe salient features example 
deep tag album script searches recursively topmost element tagged album applying filter 
works equally xml source document contains album 
element correctly produces output documents contain album data 
output document head 
section contains artist name album title separated colon 
note expression txt children tag artist children tag album grabs textual content artist 
element album 
element somewhat unwieldy 
trailing test album 
tag redundant calling filter performed match 
expression simplified path selectors keep 
tag artist 
txt style example 
algebraic laws section guarantee rewriting safe 
expressions assumptions structure data album 
element 
instance assumption artist 
element immediate child immediate children include text 
assumptions prove incorrect particular document filter simply unproductive error flagged 
suitable definition body expression bgcolor white 
understood set background colour attribute body 
tag literal value white 
notice attribute value described filter 
case filter exciting definition illustrates generation html looking value supplied link attribute filter 
script particular document output re ordering internal components input body 
part output notes 
section selected transformed 
elements processed filter 
absence dtd impossible sure input ordering script ensures output ordering consistent 
definition filter interesting fewer assumptions content notes 
structure addition preserves input ordering 
chained choice recursive combinator causes internal structure notes 
element retained replacement emphasised text html links 
striking features example selection testing old content construction new content uniform combined interchangeably 
return treatment 
elements section introducing extra labelling combinators 
labellings feature occasionally useful ability attach labels items sequence instance number list items treat item list differently items 
purpose library provides special labelling combinators 
choose introduce new type type content 
content cfilter attaches label results 
chosen fold label values inside content type yield uniform cfilter type keeping labels separate allows completely polymorphic type label filter example 
common labelling functions numbered cfilter 
int interspersed 
cfilter 

tagged cfilter 
string attributed cfilter 
string string labelling functions lift cfilter type numbered transforms ordinary filter new filter attaches integers upwards results interspersed attaches label results gets label tagged labels tagged element tag name non elements empty string attributed labels tagged element attribute value pairs non elements empty list 
oo cfilter 

cfilter module main import xml main deep tag album html txt children tag artist children tag album literal keep 
tag title 
txt bgcolor white keep 
tag title 
txt notes 
keep 
tag notes txt 
keep 
tag 
em 
tag 

children border album title 
keep 
tag title 
txt artist 
keep 
tag artist 
txt recording date 
keep 
tag 
txt top catalog numbers 
oo numbered deep tag li show 
label number 
format 
href link children example document processing script generic filter combinators 
html results example script rendered browser 
combinator oo new form composition drops back cfilter type application filter consumes label 
form labelling illustrated treatment example oo numbered deep tag desired elements extracted topmost positions tree numeric labels filter incorporates label generated text 
example seen definition combinator 
combines filter elements filter text 
extracted labelling function tagged 
furthermore possible combine labellings 
combinator labelling functions pairing labels produce 
cfilter 
cfilter 
cfilter algebraic laws combinators briefly show combinators defined way various algebraic laws hold 
complete set laws 
giving content filters type maximises usefulness combinators plugging functions irish composition associativity zero keep keep identity guards keep identity zero idempotence promotion promotion keep zero keep identity idempotence promotion promotion path selectors 



associativity 

zero keep 
children 
keep children keep 
keep children zero keep children idempotence 

idempotence 

promotion promotion 

promotion 

promotion 

promotion promotion directed choice associativity keep keep identity idempotence recursion deep keep keep simplification deep simplification deep children children simplification deep deep deep depth law misc elm txt txt elm keep completeness elm txt txt elm excl 
middle children elm children children txt algebraic laws combinators 
type 
helpful identify subclasses content filters offer extra guarantees 
examples classes 
predicate property gives result 

selector property gives result sequence contents taken resulting items overlap result sequence respects order contents predicate selector selector necessarily predicate 
form filter composition defined haskell list comprehension prefer equivalent higher order definition concat map convenient algebraic calculation 
composition associative zero keep identity 
form guarded composition associative laws particularly idempotence 
promotion law combined uses 
dual operator parallel laws 

path selector associative idempotence laws 
important various promotion laws changing order application 
directed choice operator viewed appears algebraically sensible useful algebraic properties connection combinators bias left operand 
simpler result appending combinator alternative directed choice operator probably lead laws application bite 
potentially serious problem combination selectors necessarily selector 
recursion operator deep minor laws depth law profound 
fully investigated properties deepest multi 
translation dtds types dtds far considered document processing generic tree transformations markup matched textually runtime account taken deeper meaning tags 
dtd document available meaning defines markup tags powerful effect 
basic confirm semantic validity stronger notion mere syntactic formedness 
dtd defines grammar document content specifies vocabulary markup tags allowed content attributes tag 
document validation straightforward check document structure conforms vocabulary grammar dtd 
irish composition fact just flipped argument version composition operator list monad 
xml version 
doctype album system album dtd element album title artist personnel tracks notes element title pcdata 
element artist pcdata 
element empty 
attlist date cdata implied place cdata implied 
element location 
attlist style cdata required 
element location empty attlist location thumbnail cdata implied cdata implied 
element empty attlist label cdata required number cdata required format cd lp implied cdata implied country cdata implied 
element personnel player element player empty attlist player name cdata required instrument cdata required 
element tracks track element track empty 
attlist track title cdata required credit cdata implied timing cdata implied 
element notes pcdata attlist notes author cdata implied 
element pcdata 
attlist link cdata required 
element pcdata 
attlist link cdata implied 
example dtd 
xml document validators readily available 
go define idea valid document processing 
valid processing script produces valid document output valid document input 
achieve demonstrating correspondence dtd document definition set algebraic types haskell consequent correspondence document content structured haskell value 
writing document processing scripts manipulate typed haskell value script validation problem just instance normal haskell type inference 
dtd translations 
example dtd document shown earlier 
immediate features note nearly 
validity encompasses minor checks instance idref attributes globally unique 
module data album album title artist personnel tracks notes newtype title title string newtype artist artist string newtype data date string place string newtype string location newtype location location data thumbnail string string newtype data label string number string format format string country string data format cd lp newtype personnel personnel player newtype player player data name string instrument string newtype tracks tracks track newtype track track data title string credit string timing string newtype notes notes string notes data notes string newtype string string newtype string string example dtd translated haskell types 
element specification allowed inner elements element declaration possibly specification allowed attribute values attlist declaration 
inner content grammar allows sequence commas choice vertical bar optionality question mark repetition star plus 
inner content declaration allows free text pcdata choice text elements permitted sequencing elements permitted 
attribute lists values mandatory required optional implied attribute values unconstrained strings cdata member pre defined set string values 
obvious correspondences restricted form type language richer type language haskell 
element declaration roughly speaking new datatype declaration 
sequence product types single constructor values 
choice sum types multi constructor values 
optionality just type 
repetition lists 
attribute lists translation unordered accessed name haskell named fields look representation 
optionality expressed types 
attribute values constrained particular value set modelled defining new enumeration type encompassing permitted strings 
implementation rules formalised appendix 
implementation rules additional rules eliminate redundancy translated dtd haskell type declarations shown 
needed type declarations functions read write values types actual xml documents 
generated automatically type declarations 
appropriate set pre defined type classes derive new instance generated type tool drift 
discussion type translation looks straightforward turns tricky issues 
type translation may datatypes type synonyms 
result needing write values xml type synonym haskell indistinguishable type abbreviates generated types distinct order able re introduce enclosing start tags correct markup 
separate type introduced collection attributes 
element represented pairing attributes content 
tagged element directly contains optional type sequence types sum types necessary interpose separate haskell type notes contains notes auxiliary type notes alternatives 
naming big issue 
case matters xml tag 
differs tag 
attribute attr differs attr 
haskell types upper case field names lower case 
auxiliary types necessary chosen append underscore character name 
factors impose restrictions translation due potential name conflicts 
furthermore mismatch haskell named fields attribute naming scoping rules xml 
xml different elements may attributes name type haskell named fields restricted single type 
system typed extensible records better fit 
despite problems expressing dtds haskell powerful dtds instance dtds notion polymorphism 
frequent occasions dtd writers resort textual macros indicate parameter entity 
detailed structuring dtds permit including polymorphism qualified typing implicit structuring validated xml tools 
significant note xml community recognition limitations dtds proposals schemas address question richer typing disciplined manner 
area type system haskell particular opposed functional languages exploited type classes 
systematic overloading mechanism useful codifying conversions 
pros cons schemes combinators compared mainstream solution xml processing new domain specific languages expressing scripting transformations combinator approach advantages ease extension variation scripting languages lack useful facilities provide convoluted ways 
extending language difficult 
combinator library enlarged comparatively straightforwardly definitions accessible short simple 
computational power scripting languages tend offer limited expression language hook programming system completely different level abstraction 
xml scripts programs language haskell full power native language immediately available 
abstraction generality reuse pattern occurring combinator program isolated defined separate re usable idea 
applies application level common ideas similar applications easily defined higher level library 
form re program development quicker error prone 
laws reasoning scripts semantics scripting language defined illustration 
hard reason confidence meanings scripts 
just stylistic variation inputs give different results 
semantics scripts defined terms equations combinators properties associativity distribution demonstrated simply 
implementation free scripting language interactive interpreter 
compiler 
type checker 
profiler 
things immediately available xml scripts directly expressed haskell programs 
www org tr xmlschema structures www org tr xmlschema datatypes 
course disadvantages 
distance target language xslt property script expression target language uses exactly xml syntax building new content 
combinator scripts different syntax due underlying language 
linguistic gap cause confusion increase learning costs 
living unfamiliar world combinator programs look scripts small domain specific language 
writers may apparent simplicity small error drop unknown corner haskell 
error messages may incomprehensible worse script utterly strange 
type translation advantages fully typed representation xml documents mentioned 
validity ability system spot errors automatically just data program prevent generation incorrect document markup 
direct programming style functional languages encourage pattern matching binding values variables left hand side equations 
higher order combinators data structures tend mentioned equations 
dtd translation approach keeping pattern binding style leads shorter programs 
combinators necessary re traverse selection path slight variations gives direct access free 
disadvantages high startup cost scripting document transformations necessary acquire check process dtd 
generation haskell types automated people familiar dtds able start immediately 
require careful study understanding correct scripts written initial investment effort pays 
incomplete type model grammar dtds small restrictive compared sophisticated type systems available functional languages 
better means xml development 
little scope full power features polymorphism 
related xml processing infant processing languages surrounding xml 
interest ffl xslt extensible style language transformation proposed declarative language expressing limited form transformations xml documents originally intended rendering format html postscript widely xml xml transformations 
ffl dsssl document style semantics specification language mature iso standard complete implementations 
similar essence xslt deals full sgml input scheme 
functional language researchers visibly engaged xml related toolkits christian lindig xml parser caml andreas neumann validating xml parser sml knowledge provides transformation capabilities combinator style type translation style 
philip wadler written short formal semantics xsl selection patterns 
application combinators parsing extensively studied application combinator libraries 
original treatment burge variations theme 
swierstra duponcheel method incorporating fly grammar analysis error correction notable example 
hope may possible incorporate dtd analysis combinators similar style 
libraries application combinators devised general design principles libraries scarcely referred literature 
hughes exposition design pretty printing combinators unique resource respect exploit fully 
tree processing operators earlier version prompted pointer eelco visser colleagues 
motivating application specification strategies program optimisation treated rewriting expression trees 
result applying strategy single term failure non determinism achieved backtracking success computed deal lists successes 
operators combining strategies include composition directed choice explicit operator recursion 
operators specifying transformation child subterms relevant xml subtree position arity fixed program syntax frequently applied operators close 
significantly visser achieve great expressive power decomposing match re build stages rewriting introducing explicit environments stages communicate 
possible deal subtleties variable bindings program terms transformation 
structure xml simpler structure programming language library benefit addition support binding variables matching subtrees 
programming functions explicitly xml datastructure abstraction combinators haskell pattern matching provides bindings subtrees 
fixed small depth root beneath explicitly stated pattern constructors 
defines extension pattern language deep matching variables pattern bound subterms arbitrary depth inside original term 
result match includes www cs tu bs de people lindig tony html www informatik uni trier de neumann context function representing original subject term holes sites matching subterms holes supplied arguments function 
contexts complements environments 
shows matching extension simplifies various tree processing tasks translated standard haskell 
provide component hybrid solution dtd specific representation generic forms traversal matching 
visser discuss approaches tree transformation problem 
experience haskell suitable language xml processing 
generic applications small set combinators designed algebraic properties mind powerful flexible describe full range selection testing construction operations uniform framework 
applications dtd fixed tool deriving corresponding types associated routines turns xml processing haskell programming typed data structures haskell typechecker validates scripts 
plenty scope directions generality combinators generality design aim combinator library scope generalising 
ffl wider functionality 
content filters current library pure selectors results sequences sub trees full document tree pure constructors creating document content values types 
design usefully extended include general class deletion operations sub trees thinned pruned various ways 
general combinators editing transforming ideas visser usefully transferred 
ffl multiple inputs outputs 
interesting extension single document scripting handling multiple documents 
producing output document great problem 
far challenging design appropriate combinators dealing inputs 
ffl general types 
labelling scheme proved useful applications need separate type 
hope generalise cfilter type incorporate special case 
making cfilter type parametric possible incorporate dtds combinator framework 
efficiency combinators current combinator library quite usable possible routes greater efficiency 
ffl algebraic normalisation far merely established laws hold occasionally appealed writing scripts 
implementation simply defines combinators specifying equations 
laws exploited implementation level 
hughes mind implementation automatically reduces combinations normal form expensive equivalent computationally 
ffl space efficient formulation lazy functional programs process trees pre order left right fashion formulated run log space 
part tree held memory corresponds path root node currently focus computation left garbage subtrees processed right subtrees evaluated 
current combinators formulated guarantee sort space behaviour favourable cases 
problem tackled normalisation approach 
ffl dtd aware combinators current combinator library just ignores dtds 
combinators maintain dtd information example achieve far efficient search cases pruning branches bound fail 
produce firstclass xml documents results queries just raw extracts unknown type 
noted dtds attached labels sense explicit values implicitly type information 
relations dtds seen approach known fixed dtds input output validation translates static type checking generic combinators principle acquire compute dtds dynamically 
represent extremes disadvantages inflexibility hand insecurity 
ways handling relations dtds 
example ffl polymorphic higher order scripts 
generic approach gain security infer dtd dtd function 
analogy functional programs natural assign scripts polymorphic higher order dtds making explicit degree genericity 
ffl inclusion dtds 
implicitly assumed practical importance right 
stock dtds refined xml documents inhabit hierarchy specialisation 
similar dtds derive dtd virtual common root intersection common descendent union 
goes abilities current type inference systems useful addition functional toolkit xml processing 
canon research centre europe suggested line funded 
philip wadler christian lindig joe english gave helpful comments earlier draft software 
anonymous referees gave useful advice 
tim bray jean paoli sperberg macqueen 
extensible markup language xml recommendation www org tr rec xml www consortium february 
burge 
recursive programming techniques 
addison wesley 
james clark ed 
xsl transformations working draft 
www org tr wd xslt www consortium april 
jon fairbairn 
making form follow function exercise functional programming style 
software practice experience june 

records variants qualified types 
dept computer science university nottingham phd thesis 
john hughes 
functional programming matters 
computer journal april 
john hughes 
design pretty printing library 
st intl 
school advanced functional programming pages 
springer lncs vol 

graham hutton erik meijer 
monadic parsing haskell 
journal functional programming july 
markus 
context patterns haskell 
workshop implementation functional languages pages 
springer lncs vol september 
doaitse swierstra luc duponcheel 
deterministic error correcting combinator parsers 
nd intl 
school advanced functional programming pages 
springer lncs vol august 
david turner 
new implementation technique applicative languages 
software practice experience january 
unknown 
document style semantics specification language dsssl final draft 
occam sjf novell com dsssl dsssl novell publications 
eelco visser el benaissa andrew tolmach 
building program rewrite strategies 
international conference functional programming pages 
acm press september 
philip wadler 
replace failure list successes 
functional programming languages computer architecture pages 
springer lncs vol september 
philip wadler 
formal model pattern matching xsl 
technical report www cs bell labs com wadler xsl bell labs january 
noel 
reflections instance derivation 
glasgow functional programming workshop 
bcs workshops computer science september 
appendix dtd translation rules type declarations element spec newtype attrs newtype spec attlist decl decl data attrs attrs decl 
decl decl 
decl rhs type declarations xk xk jx jxk 
xk list inner type expressions xk jx jxk list name xk 
unique constructor name 
ensure initial upper case 
ensure initial lower case named fields cdata required string cdata implied string js js required js js implied constrained attributes cdata 
oe js js 
data 
sk dtd translation rules 

