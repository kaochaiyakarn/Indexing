available technical report tr department computer science unc chapel hill fast proximity queries swept sphere volumes eric larsen stefan gottschalk ming lin dinesh manocha department computer science university north carolina chapel hill nc stefan lin cs unc edu www cs unc edu geom novel algorithms fast proximity queries swept sphere volumes 
set proximity queries includes collision detection exact approximate separation distance computation 
introduce new family bounding volumes correspond core primitive shape grown outward offset 
set core primitive shapes includes point line rectangle 
family bounding volumes provides varying tightness fit underlying geometry 
furthermore describe efficient accurate algorithms perform different queries bounding volumes 
novel analysis proximity queries highlights relationship collision detection distance computation 
traversal techniques accelerating distance queries 
algorithms perform proximity queries applications including virtual prototyping dynamic simulation motion planning complex models 
compared earlier algorithms bounding volume hierarchies separation distance approximate distance computation algorithms supported part aro contract daah nsf career award ccr nsf eia dmi onr young investigator award intel 
achieved significant speedups benchmarks 
cr categories subject descriptors computer graphics computational geometry object modeling key words phrases collision detection distance computation coherence computational geometry physically modeling swept volumes applications computer graphics computer simulated environments need determine spatial proximity relationship geometric objects 
common set proximity queries include ffl collision detection objects determine geometric contact occurred 
ffl separation distance computation objects disjoint find minimum euclidean distance 
ffl approximate distance error tolerance value compute separation distance precision specified tolerance 
queries frequently arise applications involving dynamics simulation virtual prototyping computer animation surgical simulation robot motion planning design haptic rendering molecular modeling computer games 
applications haptic rendering stringent performance requirements 
need perform queries millisecond large models composed hundreds thousands polygons 
algorithms queries extensively studied literature 
number specialized algorithms designed handle pair special class primitives convex polytopes spheres ellipsoids general versatile algorithms bounding volume hierarchies bvhs 
different bvhs primarily categorized choice bounding volume bv type node tree 
examples bv types include spheres axis aligned bounding boxes aabbs oriented bounding boxes obbs discretely oriented polytopes efficiency hierarchy affected choice bv type 
precisely trade tightness fit speed operations volumes 
clear single bounding volume type gives optimal performance proximity queries scenarios 
example hierarchies spheres perform collision queries separated objects 
objects close proximity hierarchies tighter fitting bounding volumes dops obbs may result superior performance 
ideally may combine multiple bv types single hierarchy 
number issues designing hierarchies mixed bounding volumes selecting particular bv type node tree particular query 
need perform geometric queries efficiently accurately 
hybrid hierarchies composed different bounding volumes may implement different tests check overlap compute distance 
applications dynamics simulation haptic rendering path planning collision detection distance computation approximate distance queries 
issues related software engineering memory usage bvh perform queries efficiently 
main contributions hierarchies swept sphere volumes fast proximity queries 
bvs nodes bvh belong family different swept sphere volumes 
correspond sphere known point swept sphere pss complex volumes obtained sweeping arbitrarily oriented line line swept sphere lss arbitrarily oriented rectangle rectangle swept sphere rss 
expensive perform proximity queries provide tightest fit underlying geometry 
specialized efficient accurate algorithms compute distance combination bvs 
study involved applying swept sphere volumes distance computation 
observations distance problem may help explain costly performance distance queries relative collision queries choice bv impacts distance queries 
specifically illustrate distance query geometric models answered performing collision tests bvs computing exact distance primitives 
furthermore demonstrate effectiveness utilizing coherence priority directed search enhance performance distance queries 
combining approaches algorithmic framework uses swept sphere volumes bvs fast collision detection separation distance approximate distance computation 
advantages approach include 
efficiency accuracy performing various proximity queries just type bv 

flexibility including bv types bvh 

potentially useful tradeoff tightness fit underlying geometries efficiency bv operations 

efficient approach distance queries takes advantage coherence successive frames uses priority directed search 

compared bvhs composed spheres aabbs obbs distance computation algorithms achieved significant speedups different benchmarks 
benchmarks include examples virtual prototyping dynamics simulation motion planning complex models composed tens thousands polygons 
organization rest organized follows 
survey related bvhs proximity queries section 
section gives overview bvhs various proximity queries cost analysis proximity queries 
section introduces family swept sphere volumes presents algorithms building bvhs performing proximity queries 
section novel analysis proximity queries show transform distance computation collision detection bvhs section describes acceleration techniques distance queries 
section summarize performance algorithms hierarchies swept sphere volumes compare performance traditional bv types different benchmarks 
related proximity queries extensively investigated decades researchers computer graphics robotics physically modeling computational geometry computer animation 
collision detection distance computation considerable bvhs ray tracing visibility culling boolean set operation intersection tests 
section briefly survey related 
computational geometry asymptotically efficient algorithms collision detection distance computation proposed researchers computational geometry 
include hierarchies dk linear programming sei algorithms intersecting convex polytopes cha 
hierarchical data structures hierarchical data structures hierarchical spatial partitions bvhs widely design efficient algorithms 
typical hierarchies include trees octrees trees variants cone trees nat extensions multi space partitions wg spatial representations space time bounds dimensional tests hub 
set bvs bvhs include spheres hub qui axis aligned bounding boxes bkss hkm oriented bounding boxes glm bcg approximation hierarchies bounds cam spherical shells dops hkm 
literature spatial partitioning structures bvhs accelerate ray tracing 
check arvo kirk ak survey 
distance computation convex polytopes algorithms compute distance proposed gilbert gjk lin canny lc cameron cam mirtich mir 
algorithms incremental exploit coherence successive queries 
distance computation pair spherically extended polytopes 
closely resemble bounding volume shapes described 
general polygonal models quinlan qui proposed algorithm bvhs spheres compute approximate distance 
johnson cohen jc bvhs composed oriented bounding boxes techniques compute distance nurbs primitives 
parametric implicit surfaces motion expressed closed form function time snyder sea algorithms interval arithmetic compute distance 
hybrid combinations researchers proposed hybrid combinations accelerate proximity queries 
public domain collision detection systems solid sys collide aabbs body tests combination aabbs obbs pairwise primitive tests 
gregory kim combinations spatial partitioning data structures bvs faster collision tests 
bounding volume hierarchies section give overview bounding volume hierarchies bvhs cost equation measure performance proximity queries bvh algorithms collision detection distance computation 
bounding volume bv bound contain sets geometric primitives triangles polygons nurbs bvh bvs stored internal nodes tree structure 
root bv contains primitives model children bvs contain separate partitions primitives enclosed parent 
leaf node bvs typically contain primitive 
variations may place primitives leaf node volumes contain single primitive qui 
bvhs different proximity queries manner collision detection models compared recursively traversing bvhs tandem 
recursive step tests bvs hierarchy overlap 
overlap recursion branch terminated 
overlap enclosed primitives may overlap algorithm applied recursively children 
leaf nodes primitives compared directly 
separation distance computation structure query similar collision query 
query proceeds smallest distance comparing primitives maintained variable ffl 
start query ffl initialized infinity distance arbitrary pair primitives 
recursive call bvs determine primitive primitive closer modify ffl 
call returns trivially bvs farther current ffl precludes primitive pairs closer ffl 
algorithm applied recursively children 
leaf nodes computes exact distance primitives new computed distance ffl updates ffl 
approximate distance computation supposes certain relative absolute error distance computation acceptable 
distance bvs gives lower limit exact distances primitives bound prevents ffl reduced acceptable tolerance recursion branch terminated 
assumptions performance bvhs proximity queries governed number design parameters 
include techniques build trees number children node choice bv type 
additional design choice descent rule 
policy generating recursive calls comparison bvs prune recursion branch 
instance bvs failed prune may recursively compare children children children children choice affect correctness algorithm may impact performance 
assume bvhs binary trees leaf node consists single triangle 
part pre process polygonal models triangulated 
simple top scheme construct hierarchies traverse 
descent rule recursively compare smaller bv children larger bv relative size determined diameter 
details section 
cost proximity queries researchers provided metrics evaluating performance bvhs 
commonly cost equation glm bv theta bv theta total cost function proximity queries bv number bounding volume pair operations bv total cost bv pair operation including cost transforming bv configuration models bv operation overhead 
number primitive pairs tested proximity cost testing pair primitives proximity overlaps distance computation 
typically tight fitting bounding volumes rss obbs dops high bv relatively low bv high 
contrast bv low bv may higher simple bv types spheres aabbs 
due opposing trends bv yields optimum performance proximity queries situations 
major motivation design hybrid hierarchies include simple shapes pss fast overlap tests tight fitting bvs rss reduce number tests 
lss may provide trade pss rss terms tightness fit cost overlap test 
swept sphere volumes section new family bvs fast proximity queries 
bvs correspond geometric shapes composed core primitive shape grown outward offset 
shape minkowski sum convolution core primitive shape sphere 
words bv corresponds set points swept sphere center moved points core primitive shape 
refer growth offset radius 
family bvs proximity queries 
ffl point swept sphere pss core primitive shape point 
resulting bv corresponds sphere 
represent point radius 
ffl line swept sphere lss core primitive shape line segment 
resulting bv forms cylinder hemispherical caps 
represent line segment center radius 
ffl rectangle swept sphere rss core primitive shape arbitrary rectangle 
resulting bv rounded box 
represent rectangle center radius 
idea shapes proximity queries novel 
examples spheres pss widely collision detection hub distance computation qui 
lss closely resembles cylinder researchers proposed cylinders proximity queries 
xiao zhang xz highlight rendering different swept sphere volumes sphere left line swept sphere center rectangle swept sphere right 
shapes describing method contact determination location uncertainty 
shapes family bvs number advantages proximity queries 
include 
efficient proximity queries relatively simple perform different proximity queries 
involves computing distance primitive core shapes subtracting offset radius bv 
set operations collision detection distance computation approximate distance computation pair bvs 

varying tightness fit different bvs provide varying tightness fit underlying geometry 
rss tightest bv 
pruning power rss similar obbs proposed glm :10.1.1.35.3436
result provide local quadratic convergence underlying geometry 
pss linear convergence underlying geometry 
pruning power lss lies pss rss 

hybrid combinations possible construct hybrid trees different nodes may correspond different swept sphere volumes 
example shapes fat symmetric objects spheres pss provide fit underlying geometry 
cad environments composed lots pipes possibly lss bvs shapes 
configurations surfaces close parallel may prefer rss choice bv 
furthermore static dynamic selection schemes choose appropriate bvs 

low storage requirements pss lss rss take bytes respectively represent assuming single precision floating point arithmetic 
building bvhs swept sphere volumes section algorithms building bvhs composed swept sphere volumes 
parts enclosing set triangles pss lss rss grouping nested bvs single hierarchy 
set triangles statistical techniques compute different bounding volumes 
approach second order statistics summarizing vertex coordinates glm bcg 
mean covariance matrix respectively dh 
vertices th triangle points mean covariance matrix expressed vector notation jk number triangles gamma gamma gamma equations represent subtracting mean row fitting algorithms eigenvectors covariance matrix initially compute obb encloses underlying geometry 
compute different bvs pss number efficient algorithms known computational geometry computing minimum enclosing sphere set points wel 
lss largest dimension obb central axis lss 
triangle vertices projected plane perpendicular axis circle computed contains projected vertices 
circle determines position central axis radius lss 
compute extremal vertices central axis compute hemispherical caps lss 
rss fitting rss smallest dimensions obb rectangle normal direction 
cases direction perpendicular nearly flat cluster triangles allow flat shape rss fit geometry tightly 
directions fix orientation rectangle rectangle dimensions grown appropriately enclose geometry 
dimensions rectangle initially determined enclose triangles side projections rss 
may triangles near corners rectangle 
result rectangle corners extended outward degree angle enclose triangles 
top strategy create nodes hierarchy 
means hierarchy built root node downward 
triangles node tree starting root contains triangles split subsets children nodes node 
nodes recursively subdivided contain single triangle corresponds leaf node hierarchy 
splitting rule obbtree glm :10.1.1.35.3436
splitting axis chosen plane orthogonal axis partition triangles sets side plane center point lies 
hybrid hierarchies main idea hybrid hierarchies different bvs query making selections bv type bvh building time query time 
selection query bvh node contain bv types algorithm dynamically select types bvs combinations tested 
alternatively simple static selection criteria fits type bv node bvh hierarchy building 
strategy base choice bv type relative dimensions axes obb initially fit triangles 
obb axes similar lengths pss 
axis length large relatively small lss 
cases rss 
current implementation chosen factor decide dimension larger 
proximity tests section specialized algorithms compute distance primitive core shapes points lines rectangles 
convex shapes different relative configurations edges possibly algorithms proposed gjk lc mir compute distances 
specialized algorithms reasons ffl efficiency minimize operation count possible primitives 
ffl accuracy algorithm configurations bv susceptible numerical errors degeneracies 
ffl ease implementation family bv implement overlap tests similar set operations 
algorithms utilize properties external voronoi regions proximity queries proposed lin canny lc 
initially algorithm computing distance arbitrary rectangles 
subroutines algorithm handle distance computation combinations points lines rectangles 
algorithm determines closest points rectangles lie boundary edges 
distance points computed returned 
closest points lie interior rectangle 
closest points edges external voronoi regions rectangles verify closest points edges rectangles 
external voronoi region edge defined region space outside rectangle points closer features rectangle 
formulation vertices treated separate features external voronoi region half space 
consequently adjacent edges overlapping voronoi regions 
region overlap set points closest corner vertex equally distant adjacent edges 
determine closest points rectangles lie edges pairs edges edge rectangle examined 
verify individual pair edges contains closest points rectangles lemma lemma point edge point edge closest points edges closest points rectangles 
point external voronoi region external voronoi region edge pair compute closest points point checked contained external voronoi region edge 
computing closest points possibly edge pairs relatively expensive 
speed computation check relative configurations edges explicitly computing closest points 
consider trying determine closest point edge contained voronoi region 
cases trivially answered 
cases ffl entirely inside voronoi region voronoi region fig 

ffl entirely outside voronoi region voronoi region fig 

ffl points inside outside voronoi region 
cases may inside outside voronoi region fig 

algorithm performs tests edge pair advantage trivial acceptance rejection permitted cases 
case needs extra analysis closest point test 
edge pair passes tests algorithm computes returns distance distance rectangles 
cases possible pair edges satisfy lemma 
cases rectangles overlapping closest point lies interior 
compute distance cases variation separating axis test proposed glm :10.1.1.35.3436
main idea project rectangle unit direction compute distance resulting intervals 
distance direction lower bound actual distance 
closest points interior rectangle rectangle normal vector gives direction maximal separation occurs 
compute consider normal direction rectangle find separation take maximum 
distances zero resulting rectangles overlapping 
distance routines algorithms compute distances primitives points lines rectangles follow rectangle rectangle distance test 
particular line rectangle distance algorithm turns special case algorithm 
queries point rectangle point line point point subroutines rectangle rectangle distance test 
improving accuracy applications lower bound actual distance bv conservative result 
doesn affect final outcome proximity query increase values bv cost equation 
implementation algorithm conservative realization 
instance division small number cause third case inclusion test fig 
fail 
corresponds ambiguity closest edges avoided simply computing separation final step 
performance proximity tests implemented overlap tests compute distance different core primitive shapes 
relative performance different tests shown table 
timings produced performing proximity queries triangle comparisons primitive pairs relative costs point point point line point rectangle line line line rectangle rectangle rectangle table relative performance distance tests primitive core shapes dividing absolute time number bv tests 
indicate relative cost operation including operation system overhead 
compared performance implementation gilbert algorithm gjk specifically optimized rectangles 
tested range rectangle configurations extracting sequence rectangle pairs tested distance queries taken applications 
timed distance computations rectangles method 
specialized algorithm approximately times faster 
analyzing proximity queries previous section introduced family swept sphere volumes 
section includes observations applying volumes collision distance queries 
number concepts introduced general bv types including bounding volume traversal tree concept transforming distance query collision query 
discussion primarily benefits intuition aspects distance query performance 
ffl discussion denote current estimate distance models ffi denote minimal separation distance 
bounding volume test tree bounding volume test tree represents hierarchy tests performed query 
introduce variants helpful example derived bvhs discussion follow 
node corresponds single collision distance test pair bvs 
query algorithms described bv test node leads additional bv tests child nodes 
root node bv test roots bvhs 
leaf nodes test bvh leaf nodes test pair nodes overlap prunes subtree 
maximal results query branches pruned 
resulting tree nodes 
may occur practice useful concept 
note bvhs fixed queries descent rule bv diameter structure maximal vary configurations models 
may look actual generated query search path subset maximal 
distance collision structure search governed configuration models 
distance computation distance estimate ffl pruning choices influences degree maximal structure searched 
recall order prune search bv pair test ffl smaller distance bvs 
best pruning search occur ffl small possible 
clearly smallest ffl ffi true distance models 
call searched ffl equal ffi minimal 
minimal provides lower bound set nodes searched distance query assumptions 
actual query hopes ffl reduced quickly limit exploration outside minimal 
transforming distance computation collision detection collision query proceeds testing bvs overlap performing recursive tests touch terminating recursion branch disjoint 
distance query basic structure test bvs measures distance termination occurs bvs separated current distance estimate ffl 
natural correspondence distance query problem modified collision detection problem 
explain transformation notion shape 
dilation shape ae means take minkowski sum origin centered sphere radius ae 
rest section subscripts denote dilations 
consider bounding volume hierarchy dilated bvh ae bvh primitives bvs dilated distance ae 
minimal exact distance query bvhs identical collision query ff fi ff fi ffi ffi distance models consider distance query test bvs primitives prunes condition satisfied dist ffl corresponding test dilated collision query prunes recursion branch ff fi expressions logically equivalent 
equation fundamental test distance query equation overlap test 
corresponding tests distance dilated collision queries identical recursion branches terminated consequently identical 
arithmetic logic required perform dilated collision query exactly required distance query 
transformation distance collision task computationally simpler 
permits bring bear distance computation problem analytic results know collision queries 
example gottschalk glm assert bounding volumes enhance performance certain situations :10.1.1.35.3436
theoretical bounds complexity intersection problems concerning fat objects may apply zs dilated bvs primitives considered fat 
approximate distance dilated collision detection approximate distance query pruning condition ffl dist relative error tolerance 
minimal produced ffl equal ffi bv pair distance compared ffi ffi 
corresponds collision query models dilated ffi provided original models overlap dilation ffi bring models contact 
dilation depends relative error may see range performance distance collision query changing value query time approximate distance computation increases 
quinlan qui noted behavior empirically 
observations concerning dilated collision detection problem consider collision detection problem resulting dilation contains contact minimal distance original models 
important consequences 
think distance computation expensive separated objects dilation equal separation distance dilation brings primitives back contact 
increasing distance merely increases dilation dilated models remain contact 
consequently complexity problem reduced increasing separation fact argue complexity increased 
consider happens bvs primitives bvh dilated greater amounts 
circumstances increases number overlapping bvs dilated bvhs 
illustrate concept plane 
separation distance ffi parallel rows primitives line segments increased bv left dilated greater amounts 
dilation radius illustrates number bv tests distance query increase parallel surfaces separated 
increases dilated bv touches bvs bvh 
expressed formally consider bvs radius primitives separated distance ffi 
row nodes right approximate rectangle thickness 
observing side lengths right triangle deduce length bvs right touched dilated bv left ffi gamma ffi gamma bvs radius 
number bvs right touched dilated bv left ffi separation ffi parallel rows primitives increases number bvs right touched dilated bv left increases 
example intended demonstrate trend relating dimensional problem 
situation complicated tessellated surfaces space similar trend observed number bv tests bv exact distance query tends increase separate approximately parallel surfaces 
observation ideal distance query models complexity begins resemble ordinary dilated collision query separation distance ffi approaches zero 
trivially true ffi case dilation zero 
observations section analyze results different benchmarks 
distance query acceleration techniques simple traversal depth search recursively process left subtree processing right subtree 
mentioned section visit distant bv pairs visiting bv pairs may opportunities prune search tree perform poorly 
section describe simple techniques improving pruning causing ffl approach ffi quickly 
techniques called priority directed search triangle caching 
priority directed search traversing strictly depth breadth search jc priority queue schedule pending tests perform 
prioritize pending visits distance closest pending bv pair higher priority visited 
goal guide search process ffl approaches ffi value traversing bv possible 
way search proceed primitives bvh possibly result lower value ffl 
sources overhead priority queue 
space required store candidate bv pairs 
priority queue pairs worst case number primitives model 
additional overhead comes insertion deletion minimum finding operations priority queue 
way ameliorate problem fixed size priority queue 
queue full recursive call queue closest bv pair 
recursive invocation creates new queue uses subtree completely processed 
limiting queue size limits worst case storage requirements performance algorithm 
triangle caching approach improve performance utilize coherence successive frames 
applications distance changes slightly queries 
take advantage closest triangle pair previous query recorded distance query initialize ffl 
motion time steps small ffl close true minimum distance ffi minimal may searched 
combining priority search triangle caching triangle caching priority directed search similar impacts pruning effects additive triangle caching initialized ffl close ffi traversal prune regardless branches take consequently priority directed search rendered effective 
demonstrated table section 
implementation performance section describe implementation algorithms compare performance bounding volumes different benchmarks 
analyze performance try highlight situations may perform better 
collision detection algorithms perform favorably compared earlier approaches 
acceleration techniques described section improve performance distance queries cases 
new algorithms separation approximate distance computation achieved significant speedups benchmarks compared bvs traversal schemes 
implementation implemented algorithms part general purpose framework performing proximity queries bvhs 
framework implemented runs top pc sgi workstations 
bv type inherited bv class defines standard interface bv centered operations fitting bv set triangles performing distance overlap operations bv 
desired bv type specified run time prior building hierarchy input model 
priority search method uses binary heap extraction closest pending bv pair 
benchmarks number benchmarks measure performance swept sphere volumes compare bvs 
main benchmarks come different applications 
goal include real world benchmarks consist variety configurations models 
include models close proximity parallel close proximity transverse contact models moving away 
highlighted video 
include engine simulation virtual prototyping algorithms perform different proximity queries engine model 
composed moving check collisions distances engine blocks 
path moving pre specified 
randomized path planner randomized path planner plan path torus cave environment 
torus polygons cave environment composed polygons 
initial final position torus path planner computes trajectory 
randomized planner probes random positions torus configuration space computes distance nearby obstacle positions information computes collision free path 
details planner 
planners randomized approaches proximity queries 
dynamics simulation falling rings chain falling rings trajectories ring computed dynamics simulator different algorithms check collisions distances trajectories 
ring composed polygons 
performed pairwise tests ring pairs step 
report average time collision distance queries different bvs 
falling tori consists torus composed triangles lying horizontally space 
path corresponds smaller warped torus composed triangles falling 
pivots clear passage falls center larger torus 
separation distance average query time seconds sphere lss rss exact distance separation sphere models log linear plot compares efficiencies exact distance queries spheres separated sphere models benchmark 
shows significantly faster bv types situations 
relative performance swept sphere volumes compared relative performance swept sphere volumes different bv types separated sphere models benchmark consisting polygon sphere models unit radius 
various separations models queries models random orientations 
log linear plot fig 
shows average query times 
plot shows significantly faster spheres 
bv types exhibit trend increasing expense increasing distance predicted analysis distance computation section observe apparent ceiling bv type 
occurs benchmark involves surfaces curve away analysis simplifying assumption surfaces parallel unbounded 
examined bv types approximate distance queries concentric sphere models triangles shown fig 

outer sphere model gap size units average query time seconds sphere lss rss approximate distance concentric sphere models log linear plot shows performance bv type approximate distance queries polygon concentric sphere models 
observe bvs gap size decreases rss increases slowly 
unit radius inner sphere model radius ranging gap size spheres ranged 
gap size performed queries giving models random orientation prior query 
average query times gap size plotted bv type 
note significantly outperform types gap size small large gaps performance differences small 
believe gap small problem resembles parallel close proximity situation tighter fit significant factor performance 
choice bv type tables highlighted performance different bounding volumes collision detection separation distance computation approximate distance computation relative error respectively 
set bvs include spheres lss rss aabbs obbs hybrid combination 
hybrid refers static selection strategy described section 
interpretations benchmarks 

lss suitable certain applications tables perform queries faster bv type dynamics simulation benchmark 
ring models simulation particularly suited section ring long thin lss bounds tightly 
prune obbs scenario due faster bv test speed lesser bv yield faster queries 
example simpler bv type fits model data nearly tightly complex 
allows simpler bv yield faster queries virtue faster bv query test 

aabbs suitable certain applications engine model virtual prototyping benchmark contains long thin triangles aligned world coordinate axes 
aabbs bound triangles tightly simple structure allows fast overlap distance tests 
aabbs outperform types tests benchmark 
general expect aabbs perform better models axis aligned components models non aligned components 
note due relatively coarse tessellation models higher order convergence obbs benefit queries pruning occur leaf level 

spheres unsuitable certain applications tables spheres perform poorly path planning application queries 
long triangles cave model poorly fitted spheres 
causes query perform bv overlap tests degrading performance 
sphere bvs suitable models containing long thin triangles algorithms 

suitable distance obbs suitable pruning power obbs comparable queries types perform similar number bv distance tests 
obb distance test expensive rss distance test distance queries complete faster distance queries obbs 
seen clearly tables 

competitive collision mentioned pruning power comparable obbs 
rss overlap test slightly expensive obb overlap test consequently collision queries tend comparable speed collision queries obbs 
seen table outperform obbs half benchmarks 
performance acceleration techniques table compared performance different traversal strategies path planning benchmark 
algorithm computes separation distance uses bvhs composed rss 
shown performance different traversal strategies path computation verification 
priority directed search queue size bv pairs 
query times average large sequence 
ideal proximity query results minimal particular configuration explained section 
computing path planner selects configurations randomly 
result little spatial coherence adjacent probe sequences see speedup due triangle caching due priority directed search 
notice combined speedup due priority directed search pds triangle caching tc limited explained section 
able achieve order speedup due acceleration techniques benchmarks 
comparison proximity query systems number public domain systems available collision detection distance computation bvhs 
directly compare average query times different benchmarks shown tables public domain systems 
wanted ensure incur system overhead terms comparing performance different bvs 
includes strategies representing data structures transformation matrices model space traversal routines fitting different bounding volumes overlap tests 
incorporated bvs systems framework compared performance swept sphere volumes 
include obbs rapid collide glm aabbs solid sys spheres distance computation quinlan qui 
quinlan implementation differs approach 
bvhs leaf node spheres may tile primitive 
bvh built bound subsets tiling spheres primitives model 
parameter max control maximum leaf node size consequently amount leaf node tiling greatly affect performance 
incorporate tiling primitives system directly compare query times 
johnson cohen jc obbs breadth search traversal schemes distance computation 
performance comparable quinlan report times speedup large models 
public domain implementation available algorithm 
candidates comparisons include dops collision detection 
aware public domain implementation dops 
introduced new family bvs swept sphere volumes perform different proximity queries 
provided novel analysis proximity queries highlight relationship distance computation collision detection 
analysis able provide unified algorithmic framework performs queries efficiently 
new acceleration techniques priority directed search triangle caching lead significant speedups distance computation cases 
compared performance algorithms bvhs traversal strategies number real world benchmarks 
terms open issues 
candidates core primitive shape 
include portions sphere higher order surfaces 
bvs provide tighter fit underlying geometry 
classify scenarios applications different bvs family bvs 
understanding need explore hybrid hierarchies detail design better static dynamic selection schemes 
develop efficient algorithms analyze relationships proximity queries penetration depth computation 
families bvs explored hybrid hierarchies 
example dops candidate 
varying value generate large family bvs 
alonso serrano 
solving collision detection problem 
ieee computer graphics applications 
ak arvo kirk 
survey ray tracing acceleration techniques 
ray tracing pages 
bar baraff 
curved surfaces coherence non penetrating rigid body simulation 
acm computer graphics 
bcg barequet chazelle guibas mitchell tal 
boxtree hierarchical representation surfaces 
proc 
eurographics 
bkss beckmann kriegel schneider seeger 
tree efficient robust access method points rectangles 
proc 
sigmod conf 
management data pages 
cam cameron 
approximation hierarchies bounds 
proceedings 
symposium solid modeling foundations cad cam applications pages austin tx 
cam cameron 
enhancing gjk computing minimum penetration distance convex polyhedra 
proceedings international conference robotics automation pages 
cha chazelle 
optimal algorithm intersecting dimensional convex polyhedra 
proc 
th annu 
ieee sympos 

comput 
sci pages 
dh duda hart 
pattern classification scene analysis 
john wiley sons 
dk dobkin kirkpatrick 
fast detection polyhedral intersection 
proc 
th internat 
colloq 
automata lang 
program volume lecture notes computer science pages 
springer verlag 
gjk gilbert johnson keerthi 
fast procedure computing distance objects dimensional space 
ieee robotics automation vol ra 
gregory lin gottschalk taylor 
real time collision detection haptic interaction dof force feedback device 
technical report department computer science university north carolina 
preliminary version appear proceedings vr 
glm gottschalk lin manocha :10.1.1.35.3436
obb tree hierarchical structure rapid interference detection 
proc 
acm siggraph pages 
hsu kavraki latombe motwani sorkin 
finding narrow passages probabilistic roadmap planners 
proc 
rd workshop algorithmic foundations robotics 
hkm held klosowski mitchell 
evaluation collision detection methods virtual reality fly throughs 
canadian conference computational geometry 
hkm held klosowski joseph mitchell 
real time collision detection motion simulation com plex environments 
proc 
acm siggraph visual proceedings page 
kelley 
efficient distance calculation polytope model 
proceedings ieee international conference robotics automation pages 
hudson lin cohen gottschalk manocha 
collide accelerated collision detection vrml 
proc 
vrml conference pages 
hub hubbard 
interactive collision detection 
proceedings ieee symposium research frontiers virtual reality october 
jc johnson cohen 
framework efficient minimum distance computation 
ieee conference robotics automation pages 
kim guibas shin 
fast collision detection multiple moving spheres 
ieee trans 
visualization computer graphics 
klosowski held mitchell 
efficient collision detection bounding volume hierarchies dops 
ieee trans 
visualization computer graphics 
krishnan lin manocha 
spherical shell higher order bounding volume fast proximity queries 
proc 
third international workshop algorithmic foundations robotics pages 
lc lin john canny 
efficient algorithms incremental distance computation 
ieee conference robotics automation pages 
mir brian mirtich 
clip fast robust polyhedral collision detection 
acm transactions graphics july 
nat naylor thibault 
merging bsp trees yield polyhedral modeling results 
proc 
acm siggraph pages 
overmars van der 
range searching point location fat objects 
algorithms 
qui quinlan 
efficient distance computation non convex objects 
proceedings international conference robotics automation pages 
sea snyder interval methods multi point collisions time dependent curved surfaces 
proceedings acm siggraph pages 
sei seidel 
linear programming convex hulls easy 
proc 
th ann 
acm conf 
computational geometry pages berkeley california 
sys solid interference detection system 
www win tue nl cs tt solid 
wel welzl 
smallest enclosing disks balls ellipsoids 
technical report fachbereich mathematik freie universitat berlin 
wg bouma 
collision detection analysis physically simulation 
proceedings eurographics workshop animation simulation pages 
xz xiao zhang 
obtaining possible contacts growing polyhedron location uncertainty 
ieee trans 
robotics automation august 
zs zhou suri 
analysis bounding box heuristic object intersection 
proceedings soda 
bv virtual falling path dynamic type prototyping tori planning simulation bv np av 
query bv np av 
query bv np av 
query bv np av 
query theta theta time ms theta theta time ms theta theta time ms theta theta time ms sphere aabb obb lss rss hybrid table performance collision detection algorithms different bv types 
bv virtual falling path dynamic type prototyping tori planning simulation bv np av 
query bv np av 
query bv np av 
query bv np av 
query theta theta time ms theta theta time ms theta theta time ms theta theta time ms sphere aabb obb lss rss hybrid table performance distance computation algorithms different bv types 
bv virtual falling path dynamic type prototyping tori planning simulation bv np av 
query bv np av 
query bv np av 
query bv np av 
query theta theta time ms theta theta time ms theta theta time ms theta theta time ms sphere aabb obb lss rss hybrid table performance approximate distance computation algorithms relative error different bv types 
traversal path planning path planning technique computation verification bv av 
query bv av 
query theta theta time ms theta theta time ms depth search priority directed search pds triangle caching tc pds tc ideal distance query table comparison different traversal schemes path planning benchmark 
average query times rss separation distance computation reported 
path computation involves querying random configurations computing path 
path verification consists steps 

