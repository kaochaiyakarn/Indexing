optimal histograms quality guarantees jagadish labs jag research att com viswanath poosala bell labs poosala research bell labs com nick koudas university toronto koudas cs toronto edu ken sevcik university toronto cs toronto edu muthukrishnan bell labs research bell labs com torsten suel bell labs suel research bell labs com histograms commonly capture attribute value distribution statistics query optimizers 
histograms considered way produce quick approximate answers decision support queries 
widespread interest histograms motivates problem computing histograms error metric 
particular interested efficient algorithm choosing bucket boundaries way minimizes estimation error amount space number buckets conversely minimizes space needed upper bound error 
assumption finding optimal bucket boundaries computationally inefficient previous research focused heuristics provable bounds quality solutions 
algorithms computing optimal bucket boundaries time proportional square number distinct data values broad class optimality metrics 
class includes optimality constraint shown result accurate histograms selectivity estimation problems 
experiments show optimal histograms achieve substantially lower estimation errors histograms produced popular heuristics 
new heuristics provably space accuracy tradeoffs significantly faster optimal algorithm 
enhancement traditional histograms allows provide quality guarantees individual selectivity estimates 
experiments quality guarantees highly effective isolating outliers selectivity estimates 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference new york usa case data set stored processed entirety summarized form stored 
typical way data summarized means histogram 
summarized data answer various kinds queries way original data 
answer obtained exact approximate contains error due information lost data summarized 
error measured appropriate metric maximum average mean squared error estimate 
basic idea long database context estimate result sizes relational operators purpose cost query optimization 
objective approximate data distribution values column approximation quick estimates result size queries involving column 
idea data analysis decision support 
recognized histograms provide fast approximate responses user queries 
consider application manages large table containing records telephone calls indicating length call uses table answer queries statistics call duration 
save time space summarizing information histogram frequencies occurrence calls lengths different ranges cost error answers provided 
context question arises types queries wish support constraint space may representation data minimizes expected error answers provided 
complementary formulation types queries constraint expected error acceptable representation data requires space 
context histograms representation data obtained partitioning subsets called buckets problem identifying best placement bucket boundaries 
section presents formal description issues 
contributions 
bulk devoted addressing questions form summarized data representation histogram 
section algorithm computing optimal histograms dynamic programming 
main result possible obtain optimal solution broad range error metrics time quadratic number distinct values attribute considered linear number buckets 
addition improved version algorithm compute optimal histograms minutes data distributions tens thousands values 
faster algorithm determines provably close optimal histogram combines dynamic programming approach additional partitioning heuristic 
section results set experiments compare algorithms previously known heuristics terms accuracy running time 
section show second question dual problem addressed similar techniques 
alternative approach takes essentially linear time compute histogram provably close optimal 
furthermore address known limitation histograms current histogramming techniques provide quality guarantees individual estimates 
say random sampling techniques usually provide probabilistic error bounds estimates 
problem significant histograms employed optimizers need report errors 
longer case applications approximate query answering systems query profilers provide estimates directly user 
applications confidence user critically dependent provision error bounds qualities estimates 
individual estimates histograms may differ widely quality regions distribution may difficult represent 
case queries involving attribute values regions may significantly accurate queries accessing buckets 
selectivity estimate accompanied quality guarantee successfully identify outliers estimates flag unsuitable processing 
section propose enhancement histograms show provide quality guarantees selectivity estimates equality range queries 
experiments indicate enhancement gives significantly better quality guarantees individual queries trivial worst case bound 
algorithms general large class error metrics sake concreteness results specific error metric sum squared error sse 
metric chosen plays important role selectivity estimation identical optimality constraint shown minimize average selectivity estimation error equality join selection queries ip 
section briefly discuss algorithms generate optimal histograms error metrics metric arising context selectivity estimation range queries join queries metrics incorporate knowledge query workload 
section offers concluding remarks 
due space constraints proofs general forms results experimental results included details mps 
related problem approximating data distribution received considerable attention scientific communities 
numerical analysis problem studied context approximating function piecewise fashion class simple functions polynomials fixed degree cdb 
attention number parameters amount space required representation 
finding optimal set breakpoints piecewise polynomial linear approximation believed hard due continuous domain non linearity problem space db 
statistics problem posed connection non parametric density estimation constructing histogram data distribution 
effort focused minimizing error space constraints account ges 
database community problem studied field query optimization specifically context selectivity estimation relational operators 
techniques proposed mcs including histograms koo sc ioa ip sampling lns hs parametric techniques 
histograms commonly form statistics practice db oracle microsoft sql server incur run time overhead effective small amount storage space 
types histograms proposed evaluated experimentally terms accuracy including koo sc maxdiff compressed biased optimal histograms ip 
formal taxonomy histograms proposed 
optimal histograms shown minimize average error selectivity estimation problems ip efficient algorithms constructing proposed 
aware prior dual question minimizing space bound acceptable error generating quality guarantees histograms 
definitions problem formulation section define histograms formulate various problems studied 
consider relation containing integer valued attribute value set set values frequency number tuples assume elements sorted sort parameter commonly numeric values fv ng iff ordering frequency vector ordered set frequencies fn histogram data distribution constructed partitioning frequency vector intervals called buckets approximating frequencies values bucket succinct fashion explained 
result approximate data distribution place actual distribution say selectivity estimation 
course accuracy operation performed histogram depends accuracy approximation determined factors partitioning technique employed grouping general assumptions possible discussed 
simplify presentation assume takes integer values 
values buckets approximation technique employed bucket 
techniques approximation bucket studied literature 
frequencies bucket commonly approximated average 
value domain approximated continuous distribution bucket range koo uniformly placing values bucket range total number distinct values grouped bucket 
approach experimentally shown accurate estimation problems 
main focus partitioning task 
interested computing histogram summary vector length 
approximates partition non overlapping intervals represent interval single summary element say average 
specify reconstruction function rh uses return element estimate frequency simplest widely reconstruction function simply piecewise constant function values bucket estimate rh set order evaluate accuracy histogram specify error metric defines total error approximation 
typically represented rh distance distance metric mean squared error original vector reconstruction rh 
define main problem consider 
definition space bounded histogram problem vector length limit length error metric find histogram minimizes 
dual problem follows 
definition error bounded histogram problem vector length limit ffl error metric find histogram smallest length ffl 
natural choices bucket approximation choose av points possible choices geometric mean bucket frequencies 
may appropriate store scalar value bucket 
instance may store number cells non zero count average 
discussion carried variants straightforward manner 
ith interval av ke gamma having fixed choice problem determining reduces finding boundaries buckets 
choice error metric important influences boundaries buckets formed determines properties distribution consideration preserved summary vector 
error metric selected intended histogram 
common metric measuring difference distributions sum squared error sse defined follows 
interval sse gamma av sum squared error natural error metrics focus results extend decomposable metrics 
space bounded histogram sse error metric known literature optimal histogram ip 
refer case space bounded optimal histogram dual definition error bounded optimal histogram 
space bounded histograms section provide algorithms computing space bounded optimal histograms algorithms attempt minimize error number buckets propose algorithms problem find provably optimal close optimal solutions basic optimal algorithm dynamic programming optimized sophisticated version basic optimal algorithm approximation algorithm provable performance bounds significantly faster optimal algorithms 
describing algorithms state important technical lemmas 
proofs simple algebraic manipulation omitted due space constraints 
lemma vector length sse gamma gamma delta av note define arrays pp length ki pp ki pp gamma pp gamma av gamma gamma gamma means spending time space compute prefix sum arrays pp sse computed constant time lemma 
lemma needed optimized version basic algorithm states useful monotonicity property sse metric 
lemma vector sse sse sse basic optimal algorithm optimal algorithm computing optimal histograms dynamic programming 
description focus computing sse sse optimal histograms corresponding bucket boundaries obtained maintaining additional array keeps track bucket boundaries partial solutions evaluated run algorithm 
point algorithm restricted sse error metric applied wide class error metrics 
define sse minimum sse prefix vector buckets 
crucial observation underlying algorithm sse min gamma sse solution buckets reduced case gamma buckets considering possible left boundaries rightmost kth bucket 
order calculate sse sse dynamic programming calculate sse increasing order fixed increasing order store computed values sse table 
new sse calculated equation sse may needed retrieved table lookup 
total delta calculations values sse involves looping values equation 
perform table lookup sse call find sse takes constant time lemma 
theorem space bounded optimal histogram buckets computed time 
faster implementation optimal algorithm algorithm described quite efficient compute large histograms thousands elements hundreds buckets minutes 
technique gives significant reduction running time input data 
note faster algorithm guarantees optimum solution worst case input data algorithm takes time 
case arise practice 
algorithm applies wide class error metrics satisfying monotonicity property lemma 
consider implementation basic optimal algorithm subsection 
recall computation sse note computed stored entries sse gamma 
entries need compute sse 
suppose algorithm computes sse min gamma sse iterating gamma 
note decreases sse monotonically increases due lemma 
soon arrive sse minimum solution far search values lead larger errors 
termination condition inner loop results performance improvement 
take process 
assume initial seed value provides upper bound sse 
binary search find minimum sse conclude optimum solution obtained observe sse gamma monotonically increases increases due lemma 
sse gamma lower bound sse gamma define gamma perform binary search finds minimum sse conclude minimum solution obtained general define sm gamma sse gamma gamma repeat process gamma lower limit innermost loop compute optimum solution 
initial value obtained running innermost loop basic algorithm iterations 
stated worstcase running time expect algorithm significantly faster basic algorithm cases 
approximation algorithm third algorithm fast approximation scheme provable performance bounds leverages dynamic programming schemes previous subsections 
idea quite simple partition array disjoint chunks algorithm previous subsection compute histogram chunk 
complication arises fact decide allocate buckets chunks exactly buckets 
solve problem implementing additional dynamic programming scheme number buckets allocated chunk repeatedly calls dynamic programming algorithm inside chunk varying numbers buckets 
details non trivial omitted space constraints 
approximation guarantee running time algorithm summarized follows 
theorem integers approximation algorithm computes histogram buckets total sse ffi ffi sse optimal histogram buckets 
chunks chosen equal width algorithm runs time 
implemented algorithm fast version optimal algorithm previous subsection additional pruning technique applied top level dynamic programming scheme 
initial partitioning chunks restrict equal sized chunks 
demonstrated section obtain significant speedups optimal algorithms slight decrease precision histogram 
experimental results assess performance various partitioning techniques conducted series experiments described section 
specifying data sets 
due space constraints give sample interesting results mps 
experimental testbed describe experiments real data sets extracted census statistics 
ffl density function third attribute sgi adult data set 
data set unique values 
ffl hourly wages people census data set 
addition comparison running times generated data randomly permuted zipf distribution zip 
frequency vectors real data sets plotted figures 
observe set relatively smooth second set large number spikes 
second set fact similar properties randomly permuted zipf distribution 
show experiments difference significant effect relative performance different techniques 
studied accuracy plotted mean squared error sse running time partitioning techniques basic optimal algorithm subsection naive dp faster optimal algorithm subsection dp approximation algorithm subsection chunk 
compared new algorithms known techniques ffl mhist greedy heuristic repeatedly selects splits bucket highest sse 
dimensional variant multidimensional mhist algorithm proposed pi 
ffl maxdiff heuristic places bucket boundaries pairs adjacent values differ frequencies 
ffl equidepth heuristic partitions distribution sum frequencies bucket approximately equal sc 
ffl trivial heuristic partitions distribution buckets equal width koo 
subsections running times accuracies various techniques 
running times compare running times new algorithms dynamic programming naive dp dp chunk 
purpose randomly permuted zipf distribution skew parameter varied number distinct values set space buckets chose number partitions chunk means available www com available www census gov des www welcome html algorithm guaranteed optimal algorithms buckets 
results shown 
limited range input sizes shows clear difference performance algorithms 
particular fastest algorithm chunk outperforms slowest naive dp orders magnitude 
increase input size tens hundreds thousands running time naive dp quickly rises hours chunk runs seconds minutes 
running time chunk course reduced increasing number partitions 
fact increasing number buckets results little decrease accuracy 
compare running times new old techniques 
purpose fixed number buckets varied number unique values 
results shown table 
note times equidepth mhist maxdiff negligibly small 
chunk hand fast small values ultimately scales quadratically 
result algorithm significantly slower heuristics faster dynamic programming algorithms 
input size algorithm dp chunk mhist maxdiff equidepth table running times seconds 
asterisk denote times seconds 
accuracy mean squared errors sse different techniques function number buckets figures 
cases chunk performs basically dp optimal 
performance techniques varies significantly data sets 
surprisingly mhist performs smooth data essentially matches chunk dp fails completely data bad trivial equidepth heuristics 
maxdiff hand essentially matches chunk dp data performs worse equidepth smooth data 
observe input size time seconds naive dp dp chunk data set data set running times various dynamic algorithms number buckets mean squared error equidepth maxdiff mhist chunk dp number buckets mean squared error equidepth maxdiff mhist chunk dp number unique values mean squared error equidepth maxdiff mhist chunk dp effect bucket space error data set effect bucket space error data set effect data size error data set equidepth benefit buckets smooth data inaccurate fail improve data 
dp chunk achieve accuracy smooth data 
presents accuracy algorithms data set function number values fixed number buckets 
relative performance various techniques remains similar drawn 
interestingly mean squared errors increase decrease grows 
due nature data irregular tapers uniform tail 
error bounded histogram section describe algorithms computing error bounded optimal histograms defined section 
results algorithm finding optimal histogram follows directly results section new dynamic programming approximation algorithm proven guarantees suitable ffl small approximation algorithm provable accuracy bounds runs essentially linear time main technical result section 
results hold wide class error metrics focus sse metric 
definition say algorithm ff fi approximation error bounded optimal histogram problem error limit ffl returns partition total sse fib buckets optimum solution 
primal approach 
algorithm immediate results section 
run algorithm space bounded optimal histogram problem terminate compute sse ffl 
theorem exists time algorithm find space bounded optimal histogram error ffl optimum solution 
dual approach 
simplicity assume error metric integral 
case sse discuss case non integral metrics 
solution dynamic programming 
focus computing optimum number buckets easy extend computing corresponding placement bucket boundaries 
define delta optimum solution error bounded optimal histogram problem prefix error bound delta 
delta min fb delta gamma sse need calculate delta delta ffl term requires time recursion employing dynamic programming 
error metric possibly sse range values delta take large 
discretize error steps suitable choice apply dynamic programming integral error metrics appropriate rounding multiple details omitted 
show theorem exists ffl approximation algorithm error bounded optimal histogram parameter ffl runs time ffl optimal number buckets 
algorithm interesting trade offs suitable choices example ffl ffl algorithm takes time achieves error ffl optimum number buckets 
algorithm faster theorem gives approximate solution 
approximation approach 
main technical result section fast approximation algorithm error bounded optimal histogram problem guaranteed accuracy 
algorithm interesting technical idea solution similar problem minimizing maximum sse bucket order get approximate solution optimal problem minimizing total sse 
approach works observations 
firstly solution minimizes maximum sse bucket efficiently solution optimal problem 
secondly prove solution simpler problem get approximate solution optimal problem 
formalize observations presenting algorithm 
lemma partitioning buckets total sse ffl exists partitioning maximum sse bucket ffl ffl ffl buckets 
proof 
provide algorithm converts partition sse ffl buckets maximum sse ffl bucket sse ffl left unchanged 
property sse metric lemma follows exist ffl ffl buckets sse greater ffl split buckets steps follows 
step traverse left right lay soon sse interval seen far exceeds ffl clearly step introduces ffl ffl additional buckets second step consider bucket sse greater ffl partition buckets containing rightmost element interval sse interval zero containing rest 
second step introduces ffl ffl additional buckets 
lemma error bounded histogram problem maximum sse bucket ffl solved log ng time time preprocessing optimal solution 
proof 
details mps 
describe approximation algorithm high level somewhat non intuitive 
simply consists determining smallest say optimum solution error bounded histogram problem maximum sse ffl bucket 
order repeatedly algorithm lemma performing binary search value algorithm returns corresponding partition solution error bounded optimal histogram problem 
shown theorem algorithm approximation algorithm error bounded optimal histogram problem takes time log log optimum solution 
proof 
running time follows lemma straightforward manner 
claim histogram computed algorithm approximation 
consider optimal partitioning error bounded optimal histogram problem sse ffl 
lemma ffl ffl exists partition sse ffl bucket buckets 
follows algorithm finds solution returned buckets 
solution maximum sse ffl bucket total sse ffl 
establishes theorem 
straightforward strategy repeatedly place just sse interval seen far exceeds ffl easy convince oneself strategy provide guarantees worse prove 
quality guarantees general accuracy selectivity estimate vary widely query accuracy histogram may different different parts frequency distribution 
previous largely ignored problem believe highly desirable histogram return measure accuracy estimate 
particularly useful applications require high degree accuracy approximate query processing 
purpose propose augment histograms additional information gives guaranteed statistical bounds quality guarantees accuracy selectivity estimate 
course return worst case error queries quality guarantee goal return bound individual query 
possible solutions equality range selection queries give experimental results show improvements achieve worst case guarantees 
quality guarantees equality range queries define quality selectivity estimate upper bound absolute error 
relation frequency value attribute buckets histogram increasing order attribute values contained 
equality selections result size equality predicate approximated average frequency bucket containing absolute error estimate gamma maximum error bucket natural choice return quality guarantee estimate equality query 
note requires storing additional value bucket 
range selections simplicity consider range predicates form scheme easily generalized 
fall bucket smallest largest attribute values estimate result size query gamma gamma delta jb delta sum frequencies bucket derive upper bound error observing error incurred gamma buckets completely range accurately captured upper bound bucket computed equality selection bound value giving quality guarantee min gamma gamma delta note require additional storage bound equality selection errors 
decide maintain bucket average absolute error 
average error returned quality measure conjunction values derive tighter bounds maximum average estimation error range queries markov inequality 
general maintaining appropriate types statistics bucket derive improved estimates quality guarantees various types queries 
course extra statistics increase space histogram may worthwhile expense 
best selection statistics depends particular space accuracy requirements application 
space tight just provide flags distinguish bad buckets 
experimental results briefly discuss results experiments quality guarantees equality range selection queries derived 
compare bounds actual errors estimating result sizes equality range selections naive worst case bound maximum error buckets 
figures compare bounds functions bucket counts averaged possible predicates form input randomly permuted zipf distribution buckets formed optimal histogram observe naive worst case bound error upper curve significantly higher average actual error lower curve bounds derived lead error bounds middle curve significantly closer actual error 
applications load information quality reduced data representation measured known expected query loads 
information available regarding expected query load case best hope minimize worst case error average error assuming uniform distribution queries sse metric done far 
bucket count predicted errors average result size naive error estimates error estimates actual errors bucket count predicted errors average result size naive error estimates error estimates actual errors quality guarantees equality predicates quality guarantees range predicates information available regarding expected query loads folded error metric affect resulting optimal histogram quite significantly 
illustrate point consider synthetic data set drawn truncated gaussian distribution shown histogram buckets created optimally sse metric 
suppose know outliers greatest interest data set queried optimize histogram situation expect attribute values selected query inversely proportional frequency occurrence attribute value 
query mix histogram created optimally minimize weighted mean square error looks 
observe difference histograms 
optimal histograms easily accommodate information weighting optimization metric 
factor weights preprocessing phase sse metric function values calculated 
rest algorithm remains unchanged details available 
techniques accommodate fact addressed issue existing literature 
surprising single heuristic possibly generate histograms remotely similar figures example 
fact know data distributions real life extremely skewed 
know access patterns data extremely skewed 
important take skew account choosing histogram boundaries 
range queries metrics discussed far focused error reconstruction single point 
queries frequently specified range selections 
buckets completely included range introduce error 
bucket range partially included error estimating total count values partial bucket included 
consequence pair adjacent attribute values counts higher lower average bucket may introduce error pair attribute values included range queries error induced attribute values included range neighboring cell excluded range 
comparison gradual drift frequencies bucket significant ranges include right bucket consistently estimated ranges include left bucket estimated 
range query mix specified mix taken account computing error metric 
sse metric evaluated determine boundaries range queries lie queries corresponding error determined depending left right boundaries query range included weighted query probability 
done pre processing step dp algorithm run normally 
results different sse metric 
example consider distribution age attribute 
suppose know typical range queries ask ranges 
words high probability range queries boundaries values multiples 
optimal histogram data set bucket boundaries multiple 
absence query probability information gaussian data sigma mu gaussian average frequency dp histogram workload information dp histogram workload information dp histogram incorporating workload knowledge dp histogram workload information gaussian data optimal histogram optimal histogram workload info incorporating workload knowledge observe general range queries estimation result sizes range queries error frequency estimate cells bucket gets weighted range extent bucket 
error metric constructed minimizes variance area inside buckets 
details available 
experimental results 
compared estimation accuracy dp equidepth maxdiff 
starting point query range uniformly distributed attribute domain point uniformly distributed starting point attribute domain 
figures trends accuracy algorithms data set number buckets increases number cells increases 
join queries histograms useful estimating result size join queries 
argued ip error estimate query result size minimized variance counts frequencies bucket minimized 
turns sse metric 
sample experimental results investigating accuracy join result size estimation various types histograms 
discussion experimental results available 
experimental results 
algorithms compared dp equidepth biased 
graphs subsection dealing accuracy estimation standard deviation prediction error previously suggested ip 
figures accuracy algorithms increasing number buckets increasing number cells 
data set small number frequencies dp able predict join result size exactly 
concluding remarks studied problem computing optimal histograms minimize error amount space 
provided algorithms dynamic programming efficiently precisely compute optimal histograms large class error metrics including known optimal histograms shown performance algorithms improved orders magnitude nontrivial optimizations 
experiments show algorithms obtain significantly better accuracy known heuristics 
studied dual problem minimizing space required meet error bound proposed way augmenting histograms return quality guarantees selectivity estimation queries 
extended techniques incorporate knowledge query load identify optimal histograms range join queries 
stefan berchtold christina carl de boor yannis ioannidis flip korn andrew odlyzko sidiropoulos sridhar ramaswamy valuable discussions comments 
reviewers comments betty salzberg preparation final 
cdb conte carl de boor 
elementary numerical analysis algorithmic approach 
mcgraw hill publishing 
db carl de boor 
personal communication 

ges gasser engel seifert 
non parametric density estimation 
ann 
stat september 
hs haas swami 
sequential sampling procedures query size estimation 
proceedings acm sigmod san diego ca pages june 
number buckets census data equidepth maxdiff dp census data equidepth maxdiff dp increasing increasing dp equidepth maxdiff number buckets census data equidepth maxdiff dp census data equidepth maxdiff dp increasing increasing dp equidepth maxdiff ioa ioannidis 
universality serial histograms 
proc 
th int 
conf 
large databases pages december 
ip ioannidis poosala 
balancing histogram optimality practicality query result size estimation 
proc 
acm sigmod pages may 
jagadish nick koudas sevcik 
choosing bucket boundaries histogram 
university toronto technical report tr may 
koo 
optimization queries relational databases 
phd thesis case western university sept 
lns lipton naughton schneider 
practical selectivity estimation adaptive sampling 
proc 
acm sigmod pages may 
mcs chu sager 
statistical profile estimation database systems 
acm computing surveys sept 
mps muthukrishnan poosala suel 
optimal histograms quality guarantees 
bell labs technical report may 
olken rotem 
simple random sampling relational databases 
proc 
th int 
conf 
large databases august 
pi poosala ioannidis 
selectivity estimation attribute value independence assumption 
proc 
rd int 
conf 
large databases august 
poosala ioannidis haas shekita 
improved histograms selectivity estimation range predicates 
proc 
acm sigmod pages june 
sc shapiro connell 
accurate estimation number tuples satisfying condition 
proc 
acm sigmod pages 
zip zipf 
human behaviour principle effort 
addison wesley reading ma 
