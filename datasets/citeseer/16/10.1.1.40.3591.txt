making design patterns explicit face framework adaptive composition environment theo dirk robert engel software composition group university berne washington university computer science department 
creating applications object oriented frameworks done relatively low abstraction level leaving large gap high abstraction level design 
framework difficult allows design realization diverge 
design patterns specific elements design reduce gap 
bridge gap making design patterns classes play role special purpose software components 
system realization matter composing special purpose class components 
introduce system face supports visual composition specifications 
comparing development applications frameworks development applications libraries scratch framework learning period significantly labour intensive 
frameworks large commercial value 
evolution framework pitfalls 
problems due large gap realizing system designing system 
realizing system framework done low abstraction level 
requires creation subclasses requires profound knowledge implementation superclass 
understanding needed classes cooperate implementation corresponds design 
hand high level simple design description understand system clearly needed currently design notations class diagram generic convey intent design 
gap relative low abstraction level realization high abstraction level design realization 
preliminary conference proceedings europlop european conference pattern languages programming 
author address institut fr informatik iam universitt bern ch berne switzerland 
tel 
fax 
mail iam unibe ch 
www unibe ch 

department computer science washington university campus box st louis mo usa 
tel 
mail engel cs wustl edu 
www cs wustl edu engel 

making design patterns explicit face framework design causally independent 
quite natural adapt realization adapting design 
realization may introduce classes design worse may break design 
design patterns provide solutions building flexible systems 
important reducing gap implementation design 
provide special purpose design elements easier understand implementation level connection design 
principal problem bridging gap design realization remains 
approach compositional software specification intends bridge gap design implementation 
specifications high level abstraction close design 
hand specification consist composition special purpose components provides information apart certain details implementation specific methods directly represent realization 
design realization longer need separate systems may specified high level abstraction terms compositions domain specific objects practice known design patterns show 
main contribution approach object level system composition complemented composition domain specific class components similar high level abstraction close traditional design unified method close realization 
composition special purpose class components especially appropriate context design patterns specific design pattern may seen composition special purpose class components roles classes play design pattern special purpose class component 
approach circumvents need subclassing system realization done composing parameterization class components context approach introduce framework adaptive composition environment face 
main contribution face really framework adaptive visual composition environment provides visual support correctly building compositions adapted kinds components objects classes needed certain domain rules composing note see domain specific set objects class components composition rules component oriented framework 
salient point face application ideas class composition mentioned 
composition rules embodied descriptive composition special purpose class components visual composition system specified descriptive composition 
shows power approach class composition 
allows visual compo 
note described cacm february possible area manufacturing similar direct connection design product realization corresponding manufacturing process 
may serve important model 

note kind parameterization goes parameterization template classes theo dirk robert engel 
sition running applications specified means visual composition form seamless 
illustrate approach 
focus ideas class level composition 
shall state design pattern example 
discussion specific terminology necessary distinguish different contexts word design pattern may occur 
pattern description design patterns book 
short description state pattern section 
instantiated pattern class component structure pattern explicit 
section show state pattern may instantiated 
composition contains information class diagram section describe composition means run time 
instantiated pattern instantiation corresponds run time objects instances class components instantiated pattern 
section shall show class composition get meaning behaviour run time objects applied pattern set rules describes possible evolution class structure kind class components may occur 
general form part complete set rules class structure evolution framework 
shall discuss combining patterns 
section show composition rules describe applied pattern embodied components 
section describe composition rules drive visual composition environment 
section related section conclude 
stress discussions specific state pattern illustrate general approach 
short description state design pattern main example state design pattern 
refer details 
state design pattern object exhibit state dependent behaviour dependent state object reacts differently requests operation execution 
solution pattern offers illustrated object implement 
making design patterns explicit face framework tcp network protocol 
object delegates requests handled state dependently object state object 
changes state exchanging object 
tcp network protocol implementation example state pattern taken 
solution somewhat different standard solution context object called protocol object directly reacting messages delegating state object request object represents operation executed 
protocol handles request giving state object sending message apply 
request sends corresponding message state object 
way protocol class generally applied pattern independent kind operation requests may need handled 
instantiation state design pattern illustrates particular instantiation state design pattern may specified composition class components 
contrast diagram merely represents design direct representation class component structure details left realization 
face may structure similar way 
called messenger object 
follow general terminology 

solution implementing state design pattern 
left object refers property state state objects 
state objects singleton instance classes right side 
shows typical sequence messages 
class hierarchy right side shows state object instance class defines basic messages sent state 
subclasses specifically defines behaviour object states commands fully implemented protocol needs states 
subclasses shown states needed establish connection closed state 
note shall call messengers requests text 
state instance close cm ts accept cm cm apply ts send close send close send close send close send close theo dirk robert engel 
user 
shall discuss kind components shown section discuss meaning composition 
different kinds components 

container component shown name represents type see section fact state design pattern instantiated 
refers special purpose slots roles pattern class components play specific role 

class components shown represented rectangles line normal unified method 
class components classes may instances run time main reasons term classes 
firstly domain specific components compositionally specify system 
specific purpose type class component represented character top right corner 
secondly class components black box 
linking parameterization visible 
show information implementation instances usual classes 
specialization class component done means parameterization linking composing 
special purpose class components different roles classes may play design pattern example corresponding terminology operation class components represented instances represent requests called messenger objects executed protocol object :10.1.1.46.4747
context class component represented name instance represents protocol object 
realization tcp protocol composition state pattern specific special purpose 
explicitly represented instantiation state design pattern 
rectangles special purpose components 
rectangles line class components 
link class components labelled class component subtyping relationship represented open triangle 
diamond represents association descriptor 
links components labelled ops represents set operations class component 
see text information 



ack ops state context state operation close close close ops ops ops ops send close ack 
send 
making design patterns explicit face framework handles request objects delegating 
state class components represented character instances handle delegated request instances 
state class components subtypes indicated open triangle class component called 
defines ops short operations property kind requests state object may handle 
different kinds special purpose components rules describe composition parameterization signature may connected class components may parameterized 
see section 
shown represented called association descriptor 
association descriptors generally specify possible link instances 

special purpose components 
state linked bent arrow transition descriptor 
state class component called transition starting point transition descriptor 
transition descriptor name corresponds name operation class components transition target class component 
meaning composition 
meaning composition main aspects meaning run time behaviour application meaning allowed compositions objects 
see 
intend give explanation full 
meaning run time behaviour 
composition determines run time behaviour totally pattern specific depends component component type 
generally valid basic principle special purpose class component role design pattern behaviour instances fixed 
links components parameters fill unknown aspects behaviour 
instantiated state design pattern transition descriptors play major role specification behaviour 
transition starting point name corresponds name operation class component transition target specifies instance named operation class component handled instance state class transition starting point 
handling request result protocol object making transition referring instance target state class component 
see section 
transition descriptor contain parameters shown give information behaviour handling request request copied send deleted meaning possible compositions objects 
mentioned complete system specification consist instantiation pattern class composition 
object composition describes initial set relevant run time objects 
theo dirk robert engel 
general association descriptor links class components describes possible link object composition instances class components 
example association descriptor name state shows object composition protocol object connected certain state object representing initial state protocol 
note kinds association descriptors differently traditional designs 
association descriptors represent links relevance specification object composition traditional design links may declared 
relevance class composition contains information regarding rules object composition directly integrated rest composition 
realizing run time meaning 
point view programming languages special purpose class components framework specific abstractions 
principal ways realizing semantics abstractions 
mapping lower level general abstractions extensible compiler 
ideas metaobject protocols mop 
approach described 
approach research group discussed 
approach class components reified explicitly represented run time objects usual mop 
links parameters class components explicitly accessible run time 
instances class components called basic objects distinction refer class components 
basic objects implement generic behaviour 
certain information supposed class component transition state basic object upcall class component query information adapt behaviour accordingly 
class component role run time accessible object implements behaviour answer queries 

association descriptor separate show corresponding component class composition 

making design patterns explicit face framework describe detail state class components linking transition descriptors determine behaviour corresponding instances see 
assume tcp protocol object refers state property instance state class component handle request instance 
default behaviour protocol object described section send message apply request state object 
result shown request send message execute state object name parameter 
state object query class component transition descriptor upcall message 
return transition descriptor 
object query transition descriptor transition target 
return class component 
state object ask instance instance 
instance returned protocol object change value state property refer state object 
short implementation aspects mentioned class component really class sense contain implementation specific information 
implementation instances specified underlying programming language 
question class component create instance 
realized applying prototype design pattern class component carries prototype instance may copy create new instance 
description state class components instance class component requested instance directly return prototype instance :10.1.1.46.4747

object interaction making state object execute transition diagram state object call class component case 
finds concrete operation descriptor 
state object retrieves information object especially class component 
state object asks instantiation 
returns prototype 
instance returned calling protocol object 


execute inst state prototype 
instantiate 
get transition object state object theo dirk robert engel 
rules describing class compositions applying pattern illustrates applied state pattern may represented composition meta class components embody rules correctly creating class compositions pattern 
structural relationship metaclass component instances class component instances see section point 
meta class component defines existence possible usage certain type special purpose class components 
example defines type special purpose state class components instances indicated 
note special type state class components defined instance meta class component supertype concrete state class components 
class components ways specifying run time behaviour specifying allowed compositions instances meta class components mainly specifying allowed compositions instances 
done means association descriptors 
instance subtype association descriptor 
give details subtyping 
see details 
basically subtype may extend specialize compositional interface defined association descriptors defined supertype extend specialize run time interface terms operations messages handled 

meta component structure state composition pattern 
metaclass components indicated double lines sides 
association descriptors indicated 
see text explanation 
note subtype transition descriptors instances really operation descriptors 
primal class primal class state primal class subtype subtype context state primal class operations operation operations transition 
making design patterns explicit face framework state describes state class component instances subtype 
shows meta class components primal classes 
primal classes serve double role prototype supertype class components may instantiated 
primal classes serve prototype copied order create instance meta class component 
primal class component object implements run time basic behaviour instances meta class component 
encompasses especially behaviour allows class components queried run time 
note principle mentioned section class components prototype 
reason prototypes class components shown specification purposes 
second role primal classes specification purposes 
second role primal classes serve supertype instances meta subtype primal class 
primal class meta protocol association descriptor primal class meta state possible meta class composition enforce certain structural descriptions inherited class composition 
meta class composition primal classes define evolution class composition define default associations exist class composition 
reified rules drive visual composition environment 
fact rules composition embodied class meta class components components major relevance face approach 
means place creation rules composition process supported visual environment 
secondly means visual composition environment application behaviour specified composition embodies rules correct composition 
shall shortly describe class meta class composition drive visual composition 
shall focus visual environment checks correctness attempted connections 
done example suppose user developing class composition 
new class component just created attempt connect subtypes property 
assume attempt corresponding association descriptor subtypes done relationship presentation real reified components outside scope 
attempted connection checked querying association descriptor similar state object behaviour adapted querying class components message parameter meta class component component connected case sent association descriptor 
association descriptor matches required type connected component parameter 
type param theo dirk robert engel 
eter may subtype required type 
case match succeeds directly association descriptor returns true indicate connection may 
user informed means graphical clue connection may 
related growing interest building systems means composition 
commercially socalled component ware successful 
visual basic vb known example component ware environment 
connections vb allows visual realization system 
components vb instantiated run time 
prototype objects instantiated copying 
class level composition supported 
cooperations components explicitly implemented methods event procedures defined thing simply connecting components specify cooperation 
vb really specify object composition 
vista visual tool support object composition adapted composition rules 
vista provide way give class level compositions run time semantic 
composition rules vista expressed compositions components approach support rule definition supports composition face 
composition level classes visually supported especially encountered generic constructs classes parameterized classes template classes 
standard template library stl shows power applying idea 
batory parameterizing class level components class level components 
mcgee kramer darwin represents form class level composition links components basically describe communication possibilities instances 
model may encompass forms composition due fact semantics connection fixed defined meta level 
describes links classes transition descriptors fit forms 
kind links play important role compositional instantiation design pattern 
jiri described possibility making design patterns concrete 
certain similarities may observed especially strong genericity 
go far genericity parameterization classes parameterization transition descriptors possible 
go bridging gap design realization visual support composition embedded approach 
furthermore total approach software composition includes object composition 
hand experience especially respect interlinking design patterns 
approach letting separate pattern class comparable container component disentangle dependencies classes interesting 
roots area open programming languages clos open implementations 
open programming languages clos reify software components classes reification black box reification complex 
making design patterns explicit face framework difficult create drastically different components intricate cooperation parts reified class 
way reification reflection close model klas neuhold 
focus adaptive data models databases systems frameworks application development 
think model simpler easier understand 
steyaert described meta level interface applied provide powerful configuration capabilities user interface builders 
reflection new kinds components described composition environment 
way steyaert opens framework corresponding visual composition restricted describe mechanisms introducing new component cooperation forms framework 
lieberherr adaptive programming shows useful programs adapt class structure 
focus adaptiveness traversal operations 
think approach broader 
may prove cover traversal adaptiveness course tuned 
making design patterns explicit purpose 
purpose bridge gap designing system implementing system context arbitrary framework level abstraction provided realizing systems heightened problem implementation independent design resolved 
attempted bridging gap 
approach may viewed viewpoints say provided high level domain specific abstractions special purpose realizing systems 
say design realization letting designer domain specific components put 
briefly system may realized supports developer providing graphical interface building compositions 
reason system fits easily ideas system specified composition composition embodies definition rules components may put system 
time believe shows power approach relative simple compositions may specify complex systems graphical composition editor 
face finished extent demonstration example described possible publication 
trust correctness ideas theoretical foundation preliminary experiments implementation experiences ideas build framework supporting visual composition 
having demonstration applied isolated design pattern sufficient demonstrate approach 
hope publish patterns applied combination making encompassing meta class structures 
important questions asked special purpose class components really useful specific implementation needed class components 
questions respect efficiency asked example totally disregarded efficiency quite clear theo dirk robert engel 
idea querying class components change run time behaviour fly efficient 
reasons allowing reasoning compositions research compiling special purpose abstractions major relevance 
don batory sean malley design implementation hierarchical software systems reusable components acm transactions software engr 
methodology october 
don batory vivek singhal jeff thomas sankar bart marty genvoca model software system generators ieee software sept pp 

grady booch james rumbaugh unified method object oriented development version rational software 
erich gamma richard helm ralph johnson john vlissides design patterns addison wesley reading ma 
hermann ralph johnson robert engel framework network protocol software proceedings oopsla acm sigplan notices appear 
ralph johnson brian foote designing reusable classes journal object oriented programming vol 
pp 

gregor kiczales jim des daniel bobrow art metaobject protocol mit press ed 
wolfgang klas neuhold michael metaclasses application database integration der gmd john lamping typing specialization interface proceedings oopsla acm sigplan notices vol 
oct pp 

simon lippman primer second edition addison wesley 
christina lopes karl lieberherr ap case study mop purposes software evolution proceedings reflection appear 
karl lieberherr silva cun xiao adaptive object oriented programming graph customization commun acm vol may pp 
jeff magee dulay jeffrey kramer structuring parallel distributed programs proceedings international workshop configurable distributed systems london march 
marti dana nau shah challenges feature manufacturing research cacm vol 
february pp 
theo dirk user level integration data operation resources means self descriptive data model ph thesis erasmus university rotterdam sept 
de mey visual composition software applications pp 

bertrand meyer eiffel language prentice hall 
microsoft visual basic programmer guide simon moser oscar nierstrasz measuring effects object oriented frameworks software process submitted publication iam berne dec 
david musser atul stl tutorial guide addison wesley 

making design patterns explicit face framework oscar nierstrasz dennis tsichritzis ed object oriented software composition prentice hall 
oscar nierstrasz research topics software composition proceedings langages objets nancy oct pp 

ramana rao implementational reflection proceedings ecoop america ed lncs springer verlag geneva switzerland july pp 

alan snyder encapsulation inheritance object oriented programming languages proceedings oopsla acm sigplan notices vol 
nov pp 

jiri implementing patterns pattern languages program design addison wesley chapter 
patrick steyaert de hondt demeyer boyen de reflective user interface builders proceedings meta zimmerman ed james byte vol 
may pp 

