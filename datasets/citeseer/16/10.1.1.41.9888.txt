control speculation multithreaded processors dynamic loop detection jordi antonio gonz lez departament de universitat polit cnica de catalunya campus nord jordi girona barcelona spain mail antonio ac upc es presents mechanism dynamically detect loops executed program 
technique detects termination iterations executions loops compiler user intervention 
propose apply dynamic loop detection speculation multiple threads control dynamically obtained sequential program 
highly predictable behavior loops history past executed loops speculate instruction sequence 
objective dynamically obtain coarse grain parallelism thread level exploited multithreaded architecture 
show context multithreaded processor speculation mechanism provides concurrent threads average 

control speculation increases potential parallelism processor exploit see :10.1.1.24.4184
branch prediction studied control speculation technique incorporated large majority past current microprocessors see 
speculation approaches oriented superscalar processors 
little research done control speculation emerging architectures 
particular focuses multithreaded architectures 
multithreaded architecture refers architecture concurrently execute threads control single sequential pro 
thread control thread short refers contiguous region dynamic instruction sequence 
gram regardless approach obtain threads 
instance multiscalar architecture belongs class architectures 
particular case partition program threads requires compiler support 
aimed obtaining multiple threads sequential program user compiler intervention 
reasons argue hardware mechanism static analysis compiler may perform accurate actual dynamic behavior obtained execution ii profiling mechanisms characterize execution program rely concrete set input data iii instruction set architecture modified giving backward compatibility previous implementations 
inter thread control speculation dynamic detection loops program 
threads obtained highly predictable behavior loops 
general mechanism allows detection loops reasonable cost describe application dynamic loop detection implement inter thread control speculation multithreaded architecture 
results show loops important source accurate thread prediction 
instance show context processor proposed thread speculation approach provide concurrent threads average 
addition inter thread control dependences proposed mechanism speculate interthread data dependences data flow 
definition implementation particular data data dependence speculation mechanism scope 
show potential preliminary statistics predictability values live registers memory locations speculative threads 
proposals literature regarding multithreaded architectures oriented execution single sequential program 
remarkable works expandable split window paradigm multiscalar multithreaded decoupled architectures 
require user compiler intervention extensions instruction set architecture 
control flow speculation multiscalar processors studied 
proposal threads called tasks delimited compile time run time mechanism responsible predicting sequence threads follow 
proposes novel approach type architectures order obtain multiple threads control means hardware mechanisms 
proposed speculation mechanism loop detection scheme 
dynamic loop detection studied mechanism proposed oriented extract statistics trace generated program execution 
adequate hardware implementation care control speculation 
organized follows 
section describes analyzes mechanism proposed dynamic detection loops 
section presents application thread control speculation 
section presents preliminary statistics data speculation issues 
main summarized section 
dynamic loop detection loops common control structure program 
high percentage instructions executed program belong loops 
addition closing branches loops highly predictable loops potentially useful perform control speculation 
section define types loops consider 
implementation dynamically detect loops performance exhibited spec benchmark suite 

loop definitions structured code unanimous definition loop non structured code different interpretations applied 
subsection particular definition loops rest 
define static 
live register live memory location register memory location live entry thread 
jmp br ret jmp br jmp br static view loop 
view loop program 
define dynamic view loop concepts loop execution loop iteration 
loop program identified address backward branch jump address may branch target address 
case consider branches closing branches loop 
main attribute loop highest address contains backward branch jump address address denoted address instructions range addresses constitute body loop entered loop body possible leave instruction forces execution control flow proceed address outside range loop 
control flow instruction may branch jump return instruction 
may number subroutine activations inside loop body 
note definition static loop body include bodies subroutines activated 
shows static view loop 
exit branches loop body case high level loop structures 
possible leave loop part case break goto return high level language instructions 
hand define dynamic view loop 
considering address highest address executed branch jump instructions target address execution loop consists certain number sequentially executed instructions delimited conditions 
execution loop initiated instruction address belongs loop body range addresses executed 
execution loop terminated instructions taken branch address ii taken branch jump address belonging loop body target address outside loop body iii return instruction address belonging loop body 
usually subroutine activation returns address call instruction consider inside loop execution may number nested subroutine activations 
note instructions belonging subroutine body belong loop execution 
loop inside recursive subroutine note different instantiations loop obtained recursive activations return considered belong loop execution 
instructions loop execution divided certain number loop iterations 
iteration loop consists certain number sequentially executed instructions belonging execution loop characteristics 
iteration loop started loop execution initiated 
rest iterations address iterations loop finish taken backward branch jump address iteration finishes loop execution finishes 
dynamic instruction may belong loop executions 
occurs loop structures nested overlapped 
loops corresponding branch addresses nested range addresses iterations loop instruction address execution loop executions loop iterations loop iterations loop instruction address executions loop executions loop iterations loop nested overlapped loops static view nested loops dynamic samples loop executions loop iterations nested loops static view overlapped loops dynamic samples loop executions loop iterations overlapped loops 
included 
case loop innermost instructions execution loop belong execution loop 
loops overlapped 
case instructions iteration loops belong execution loop 
shows samples loop executions loop iterations loops nested overlapped 

hardware mechanism loop detection order detect loop executions loop iterations introduce current loop stack cls 
stack devoted contain loops currently executed 
top stack corresponds innermost loop remaining loops stored nesting order 
elements cls contain fields 
field stores target address loop identifier field stores highest address branch jump instructions executed far address cls updated executing kinds instructions branch jump return manner consider pc instruction address 
backward branch jump instruction target executed cls searched 
entry target address branch taken means new loop execution started 
case loop pc pushed cls 
branch taken action performed 
means loop iteration executed 
loop entry cls branch taken iteration loop finished consequently new iteration loop execution started 
cls entries range top popped assume top stack corresponds highest address 
pc higher value field field updated 
branch taken value field lower equal pc means iteration execution loop finished 
cls entries range top popped 
address jump taken branch belongs loop cls checked target address outside loop body 
loops meet condition removed cls considered executions finished 
executed return instruction loops cls body comprise instruction popped 
frequent case iteration loop finishes entry related loop top cls 
note top cls corresponds innermost loop executed 
situations may cause iteration loop located top cls finish 
situations innermost loops popped described paragraphs execution finished 
situation occurs subroutine call loop body returns loop body setjmp library call 
loop nested inside iteration outer finishes implies termination inner 
happen outer loop exists loop remain cls execution 
observed cls empty entirely execution spec means event happens benchmark suite 
case situation handled periodically flushing contents cls 
second situation caused differentiating instantiations loop produced recursive subroutine activations 
instance structure recursive subroutine loop loop suppose initially loop executed 
recursive call causes new activation subroutine time part executed 
call instructions terminate loop execution considered nested previous execution 
ifs activated executed loop cls considered new iteration loop begins 
case loop popped considered terminated 
iteration considered different execution 
notice just possible way classify loop iterations loop executions presence recursive subroutines 
anyway event rarely happens low influence final performance 
dynamic loop detection identifying backward control transfer instructions 
means iteration loop execution detected finished 
loop considered second iteration begins 
way depicts iteration loop execution grey detected proposed mechanism 
cls full new loop pushed deepest entry lost 
policy tends penalize outermost loops common ones 
shown section entries guarantee overflow programs 
spec loop statistics 
previous mechanism detect loops applied obtain statistics spec benchmark suite 
methodology collect data rest data 
benchmarks compiled dec alpha compiler options tune ev migrate ifo programs tune ev fortran programs 
instrumented atom tool run input data gcc ijpeg perl programs 
programs single file input data 
table shows number instructions instr static number loops loops average number loop iterations loop execution iter exec average number instructions loop iteration instr iter average nesting level avg 
nl maximum nesting level max 
nl 
figures correspond execution programs 

gathering loop information cls allows detect start loop iterations loop executions 
information multithreaded processor create multiple threads control corresponding different iteration loop 
general control speculation approach require additional infor instr loops iter exec instr iter avg 
nl max 
nl applu apsi compress fpppp gcc go hydro ijpeg li ksim mgrid perl su cor swim tomcatv turb vortex lit wave accessed order know behavior loop 
table loop statistics 
case entries tables directly accessed pointers stored cls stack 
null pointer loop stored related table 
mation loop iterations loop executions 
instance useful know number iterations execution live register values iteration 
determine number threads created enforce data dependences threads 
general types information required level loop iteration level loop execution 
particular information stored depends concrete implementation 
subsection describe general framework common implementation 
information previously mentioned stored means tables lit 
stands loop execution table stores information previous loop executions 
lit loop iteration table characterize iterations loop 
tables associatively searched entry identified identifier loops loop target address entries tables inserted execution loop starts 
consider lru replacement policy 
concretely entry discarded lit corresponds loop initiated new iteration entry discarded corresponds loop initiated new execution 
execution program tables depicts data structures dynamically detect loops cls gather information lit 
entries cls contain target branch addresses loop fields respectively corresponding pointers lit fields lit respectively 
entries lit contain field target loop address field implement lru replacement policy 
rest fields table entry depend kind information decided gather loops particular multithreaded implementation 
ongoing focuses predict number iterations loop generate speculative threads accordingly 
order implement stride predictor entry contains addition fields iteration count difference previous counts 
lit store information related live registers memory locations iteration loop 
live register memory location stores value iteration stride live values iterations predicted stride predictor 
live memory locations stores effective address stride inter thread memory operations speculated address prediction similar scheme proposed superscalar processors 
way threads cor cls 

lit top entries lit entries cls entries cls lit structures 
average hit lit hit ratios 
lit responding different dependent iterations proceed parallel synchronization predicted values correct 
performance 
depending particular implementation contents lit useful iterations executions 
instance predict number iterations number iterations loop previous execution required 
hand prediction stride predictor executions required compute stride 
evaluate performance proposed scheme consider contents lit useful iterations executions 
performance general mechanism gather information loops measured lit hit ratios 
hit ratio measures new execution loop started complete executions loop detected stored table 
lit hit ratio measures loop iteration starts complete iterations detected stored table 
condition tested iteration executions iteration detected finishes 
shows average lit hit ratios spec benchmarks 
number cls entries store maximum number current loops shown table maximum nesting level lower 
number entries lit 
trade space needed tables hit ratio choose entries lit hit ratio entries hit ratio 
large quantity information stored table entry lit entry acceptable performance hit ratios respectively 
additional issues 
new loop executed proposed approach inserts new entry tables loop 
may convenient disable recognition loops introducing new table containing potential loops suitable speculation 
table associatively accessed inserting new entry lit 
example loops poor prediction rate may candidates store table 
way loop reliable information eliminated 
account preferable store innermost loops front outermost considered alternative replacement algorithm inhibits insertion loop lit implies eliminate loop nested 
policy needs store loop loops nested 
evaluated improvement hit ratio negligible respect lru algorithm 
nesting level loops higher number entries lit behavior policy identical lru 
shown average nesting level loops spec high 
considered policy 

control speculation multithreaded processors section show apply previous scheme dynamically generate threads obtained single sequential program general multithreaded architecture 
consider multithreaded architectural model consisting thread units tus able fetch decode instructions different parts threads sequential program 
rest instruction stages may performed replicated shared set functional units 
tus multithreaded architecture non speculative speculative idle state 
initially non speculative tu rest idle 
thread control speculation performed idle tus change speculative state 
speculative tus maintain order associated threads executed inside sequential program 
speculative tu reaches termination point waits non speculative tu confirms control flow execution speculative thread non speculative 
particular implementation multithreaded model define additional issues regarding control speculation inter thread control speculation performed 
threads speculated 
verification speculation done 
instance mechanism defined multiscalar processor define issues manner 
speculation done task initiated 
notice responsibility arrange code tasks relies compiler approach proposed 
task begins predicted task history 
verification speculation performed task provoked speculation finishes 
scheme proposed issues involving thread control speculation done entirely hardware loop detection 
define concept thread level parallelism tlp refer parallel execution threads 
parallelism measured average number active correctly speculated threads cycle tpc 
tpc main source additional parallelism provided novel control speculation approach 
addition tpc final amount parallelism exploited particular implementation depend approach deal inter thread dependences intra thread parallelism 
potential tlp exploited loops automatically detected high 
presents tpc thread speculation mechanism loop detection ideal machine infinite tus provide 
mechanism speculates non speculative thread detects loop execution 
management data dependences orthogonal issue respect control speculation considered outlined section 
program left bar corresponds tpc executing instructions right bar reflects execution instructions 
seen programs behave approximately way executing reduced part 
rest figures refer reduced part program 
important emphasize potential large amount parallelism exploited loop detection mechanism previous section 
subsections propose realistic thread control speculation technique analyze behavior 

thread control speculation dynamic loop detection thread control speculation propose answers issues described previous section manner 
speculation performed 
loop iteration starts non speculative thread 
tpc compress ksim swim apsi wave instr 
instr 
tomcatv hydro turb vortex mgrid gcc ijpeg su cor go fpppp applu li perl tpc infinite tus 
non speculative thread create speculative threads 
threads speculated 
answer question number threads speculated identification 
speculated threads consecutive iterations loop initiated iteration non speculative tu 
note iteration loop begins loop innermost may non innermost loops detected iteration loop finishes 
preserve order threads identifier tu assigned speculated thread placed entry cls associated loop 
respect number speculated threads considered policies idle 
number speculated threads equal number idle tus existing moment 
str 
number speculated threads iteration count execution plus stride executions 
stride reliable bit saturating counter number speculated threads minimum number idle tus number predicted remaining iterations current execution 
stride reliable number iterations execution known policy predicting iterations current execution 
case number iterations stride known idle tus allocated iteration loop 
str 
strategy adds parameter corresponds maximum number non speculated loops nested loop speculated 
limit exceeded speculative threads corresponding outermost loop squashed 
way idle threads threads avg applu apsi compress fpppp gcc go hydro ijpeg li ksim mgrid perl su cor swim tomcatv turb vortex wave avg applu apsi compress fpppp gcc go hydro ijpeg li ksim mgrid perl su cor swim tomcatv turb vortex wave tpc spec suite tus str policy 
tus speculate inner loops 
important issue parallel execution load balancing 
proposed speculation approach allows simultaneous speculation loops 
case speculative threads ordered innermost outermost non speculative thread corresponds iteration innermost loop corresponds loop outer loop 
usually innermost loops smaller outermost ones rarely happen thread stalled waiting termination previous thread corresponds inner loop 
measured average iterations loop follow control flow see section 
iterations amount instructions rarely happen thread stalled waiting termination previous corresponding loop 
verification performed 
verification performed non speculative thread starts loop iteration finishes loop execution 
loop iteration starts checked iteration loop speculated 
case threads threads speculative thread associated speculated iteration new non speculative thread tu associated current non speculative thread idle 
new non speculative thread updates global data structures thread speculation cls lit 
loop execution finishes speculative threads executing non existent iterations loop squashed 
corresponds control 

performance avg applu apsi compress fpppp gcc go hydro ijpeg li ksim mgrid perl su cor swim tomcatv turb vortex wave avg applu apsi compress fpppp gcc go hydro ijpeg li ksim mgrid perl su cor swim tomcatv turb vortex wave tpc active correctly speculated threads cycle obtained speculation policies computed execution instructions programs spec 
shows tpc str speculation policy 
number tus 
data shown program spec 
note achieved tpc considerable 
small number tus proposed control speculation approach keeps busy time average tpc tus tpc idle str str str str tpc spec suite tus idle str str str str policies 
respectively 
number tus increases utilization decreases acceptable tu 
case average tpc programs achieve tpc higher 
remarkable high efficiency mechanism tomcatv wave 
programs maximum tpc nearly achieved 
compares different policies described idle str str ranging 
bars show tpc averaged programs spec 
str policy behaves slightly better idle policy 
str policy behaves worse str due higher number correct speculations squashed 
notice addition policies differ selection loops speculated 
str favors speculation inner loops lower favored inner loops 
general inner loops smaller granularity may beneficial inter thread data dependences considered 
issue scope consider str policy concretely str attractive data dependences taken account 
table shows figures str speculation algorithm number tus 
columns number control speculations performed spec average number speculated threads control speculation threads spec thread control speculation hit ratio hit ratio average number instructions thread speculated performed verification instr 
tpc 
notice hit ratio quite high programs confirms accuracy control speculation approach 
spec 
threads spec 
hit ratio instr 

preliminary data speculation statistics tpc applu apsi compress fpppp gcc go hydro ijpeg li ksim mgrid perl su cor swim tomcatv turb vortex wave table control speculation statistics 
focus proposal control speculation mechanism generate threads sequential program 
management inter thread dependences ongoing outlined section 
section preliminary statistics give flavor potential approach 
identified loop different control flows iterations take 
sequence instructions iteration particular control flow called path 
evaluated frequent path loop accounts iterations spec 
iterations measured contents live registers memory locations predicted value computed iteration loop plus stride difference consecutive iterations 
depicts data obtained 
contains percentage iterations covered frequent path path percentage correctly predicted live registers lr pred percentage correctly predicted live memory locations lm pred percentage iterations live registers correctly predicted lr percentage iterations live memory locations correctly predicted lm percentage iterations percentage path data speculation statistics 
live values correctly predicted data 
figures obtained assuming lit tables capacity store loops program 
notice high potential mechanism predict live values 
current focused developing complete mechanism execute sequential programs framework multithreaded architecture dynamic detection speculation loops proposed 

lr pred technique oriented automatic detection loops dynamic computation information characterizes 
applied mechanism obtain speculative threads sequential program 
source parallelism exploited architecture supporting multiple threads control 
proposed mechanism hardware require special feature isa 
shown amount thread level parallelism obtained loops high unlimited resource machine 
feasible configuration contexts proposed mechanism achieves tpc average number active correctly speculated threads cycle respectively 
dealing inter thread data dependences follow 
preliminary results show high percentage values flow dependences predicted corresponding synchronization avoided 
lm pred supported ministry education spain cicyt tic 
lr lm data results obtained computing resources european center parallelism barcelona 
multithreaded decoupled architecture int 
high speed computing pp 

brien brien barton single program speculative multithreading architecture compiler assisted fine grained multithreading proc 
int 
conf 
parallel architectures compilation techniques pp 

franklin sohi expandable split window paradigm exploiting fine grain parallelism proc 
int 
symp 
computer architecture pp 

gonz lez gonz lez speculative execution address prediction data prefetching proc 
acm int 
conf 
supercomputing pp 
july jacobson bennet sharma smith control flow speculation multiscalar processors proc 
int 
symp 
high performance computer architecture pp 

kobayashi 
dynamic characteristics loops ieee transactions computers pp 

lam wilson limits control flow parallelism proc :10.1.1.24.4184
int 
symp 
computer architecture pp 

smith study branch prediction strategies proc 
int 
symp 
computer architecture pp 

sohi breach multiscalar processors proc 
int 
symp 
computer architecture pp 

srivastava eustace atom system building customized program analysis tools proc 
conf 
programming languages design implementation 

tsai 
yew architecture thread pipelining run time data dependence checking control speculation proc 
int 
conf 
parallel architectures compilation techniques pp 

wall limits instruction level parallelism technical report wrl digital western research laboratory 
yeh patt comparison dynamic branch predictors levels branch history proc 
int 
symp 
computer architecture pp 

