object oriented architecture text retrieval doug cutting jan pedersen kristian xerox palo alto research center coyote hill road palo alto california aspects information access systems case optimal composition functionality debated 
different application scenarios put different demands individual components 
essence able quickly build systems permit exploration different designs implementation strategies 
presents software implementation architecture text retrieval systems facilitates functional modularization mix match combination module implementations definition inter module protocols 
show object oriented approach easily accommodates type architecture 
design principles exemplified code examples common lisp 
taken code examples constitute operational retrieval system 
design principles protocols implemented instantiated large scale retrieval prototype research laboratory 
design practice building large software artifact text retrieval system decompose modules reflect identifiable pieces functionality 
especially case modules reused combined variety different ways form new systems 
particular argue text retrieval systems benefit design strategy object oriented programming appropriate method abstracting observed functionality 
illustrate point propose object oriented text retrieval architecture captures variability wide variety text retrieval systems 
modularity leads robustness flexibility careful definition protocols serve sole interconnections modules 
modules need plug compatible may replaced appropriate disturbing remainder system 
implies system variability may expressed supplying multiple implementations module selected system construction time 
explicit objectoriented programming languages designed support multiple protocol implementations 
text retrieval systems exhibit large number possible time space trade offs 
variation controversy appropriate combination components form complete systems research evaluation efforts demand flexibility choice components 
ability select subsystems range options particularly useful context 
desiderata considering composition appropriate text retrieval architecture concentrate major sources variation ffl corpus retargeting text retrieval relative collection documents corpus corpora come different formats reside different storage media corpora may require complex computations performed decompression text available processing 
ffl text analysis automatic indexing implies source text analyzed degree extract word tokens 
specific corpora may employ domain specific jargon sub languages require special handling 
text may stemmed normalized morphological analysis 
additionally may wish experiment higher level linguistic analysis part speech identification phrase parsing 
analysis modules parametrized source language multilingual environment 
ffl indexing strategies indices accelerate search 
degree acceleration traded smaller storage requirements varying indexing granularity 
signature techniques require validation appropriate static corpora 
ffl storage substrate systems may store indices private file data structures may employ standard relational database accessed local area network 
may required store indices optical disks 
alternatives different performance characteristics demand different storage layout strategies 
ffl search methods variety search methods proposed information retrieval 
preferred commercial environments undergoing validation research community 
search method places different demand underlying database layer accommodated variations basic inverted index 
ffl user interface retrieval system may user numerous different ways ranging line oriented tty approach animated information visualizations 
mode interaction places strict requirements performance underlying search engine 
architecture appropriate text retrieval architecture naturally account sorts variation outlined way affords maximal flexibility minimal overhead 
adopt position module expected source variation 
interconnections modules remains unresolved 
approach helps discover interconnections leads protocol definitions consider control data flow tasks central text retrieval system search index analysis corpus storage access maintenance user interface legend protocol implementation system architecture ffl index construction source text noticed analyzed enable accelerated search 
may time computation case static corpus continuing incremental task case dynamically changing corpus 
control begins user interface calling index maintenance module 
employs analysis module turn invokes corpus module get raw text 
analysis module provides text index terms index module stores calls storage module 
ffl query resolution search algorithms retrieval system major clients system components 
control search task begins search algorithm may invoke analysis module extract search terms query 
search terms keys calling index access module returns posting previously stored storage module 
occasion index access module may required refer back original text source completely resolve postings query 
results employed search algorithm desired 
tasks suggest hierarchical module arrangement illustrated 
note purposes corpus seen analysis module indexing module client storage layer 
search module rests access indexing analysis modules 
user interfaces logically separable indexing search engine primary access search module occasional need display reasons peek directly corpus abstraction 
address complex issue user interface 
successfully employed architecture construction high performance prototype text retrieval system incorporating approximately lines common lisp code 
object oriented programming style implement architecture incurs negligible run time overhead method calls confined protocols interconnect modules offers substantial functionality 
fact performance improved flexibility languages cost reduced method selection resolved compile time 
defclass string corpus strings initarg strings defmethod open document corpus string corpus id slots strings corpus string input stream nth id strings string corpus implementation supply alternative implementations allows application specific optimizations appropriate generic system 
demonstrated prototype proven performance excess industry standards megabyte corpus 
architecture enables experimentation ways envisaged replacement modules ways envisaged 
remainder illustrates architecture implemented objectoriented techniques focusing definition protocols appropriate attachment methods class objects 
accompanying text simple demonstration implementation suggested design written common lisp 
emphasis architecture algorithms demonstration system unencumbered optimized module implementations interconnections emphasized specific functions 
note text improved algorithms appropriate 
demonstration system fully functional 
conclude description sample run demonstration system 
demonstration system uses classical methods specialized argument rely heavily multiple inheritance 
straightforward matter translate example somewhat complicated implement smalltalk support multiple inheritance 
method invocations part protocols highlighted underline 
module abstracted object associated protocol 
intended application defines class subclass implementations protocol inherits appropriate method definitions 
programmer able mix match implementations build application desired characteristics 
corpus abstraction corpus purposes collection documents textual component 
documents may components titles authors dates super structure volumes chapters properties extraneous purpose textual access 
access non textual properties outside scope architecture amenable object oriented treatment better layered top retrieval subsystem 
purpose corpus module map document identifiers id text 
corpus protocol intentionally kept simple minimize burden placed application maximize applicability retrieval system 
corpus protocol major interface search indexing client applications 
corpus implemented class 
corpus object private state variables example table mapping id file names methods may specialized 
methods defined corpus class id provide text indicated document 
access text document rest system methods 
character streams represent text documents 
objects primarily just support sequential access characters text document 
corpus need implemented scratch 
library generic corpus implementations developed enables quickly access common corpus formats representations 
library include defclass virtual corpus sub corpora initarg sub corpora defmethod open document corpus virtual corpus id slots sub corpora corpus modulus length sub corpora open document nth mod id modulus sub corpora floor id modulus virtual corpus implementation ffl file corpus implementation corpora contain documents single file 
documents consist stretches text files 
clients generic corpus need specify start positions document fully implement protocol 
ffl directory corpus implementation facility provided allows maintenance corpora document separate file directory 
file system implements details simple case clients need specify name directory 
demonstration system implements minimal corpus protocol represents document id integers supplies single text access method open document returns text character stream see 
implementation corpora represented simply list strings document 
id supply position list 
additionally may define corpora terms corpora 
example define corpus represents union number corpora 
accomplished just renumbering id access retain uniqueness illustrated 
virtual corpus id encode corpus selector document selector integer 
text analysis analysis converts text objects form basis search 
documents analyzed prior generation index terms queries analyzed yield search terms 
analysis queries documents indexed need produce terms domain 
example delay replacement words synonym sets query time replacement risky may require human intervention 
general pre indexing analysis restricted done automatically undue loss potentially pertinent information 
convert text terms establish protocol proto terms tokens 
implementations protocol typically composed pipeline processing elements 
start pipeline tokenizer extracts tokens text 
subsequent stages act filters base tokens 
lists stemmers part speech taggers phrase spotting implemented filters 
tokens emitted pipeline terms indexing search 
token pipelines may implemented concatenated token streams 
example code illustrates technique doing object oriented languages multiple inheritance 
provides implementation basic pipeline elements tokenizer normalizing filter word filter 
tokenizer parses character stream emitting token contiguous sequence alphabetic characters 
normalizing filter just tokens defclass tokenizer char stream initarg char stream defmethod token token stream tokenizer slots char stream token stream output string string stream token nil loop char read char char stream nil cond null char eof token return return token nil alpha char char write char char string stream setq token token return defclass normalizer defmethod token token stream normalizer token call method token string token nil defclass list words initform defmethod token token stream list slots words token stream loop token call method cond null token return nil eof member token words test string return token pipeline component definition defclass simple analysis pipeline list normalizer tokenizer defclass simple analyzer defmethod token stream analyzer simple analyzer char stream instance simple analysis pipeline char stream char stream pipeline definition defclass appending token stream streams initarg streams defmethod token token stream appending token stream slots streams token stream streams token streams progn setf streams rest streams token token stream appending token stream word filter removes words appear small list 
note filters access token stream elements invoking method method inheritance 
tokens just character strings 
advanced implementation different types tokens dates numbers punctuation phrases possibly annotate tokens typographic information 
shows elements composed defining class inherits 
order pipeline processing determined precedence classes inheritance 
tokens flow right left superclasses 
implementation technique feature processing elements top level objects protocol individual elements support operations requiring elements pass message pipeline 
particularly valuable case tokenizer clients may inquire tokenizer emitted tokens occurred source character stream 
facilitates construction user interfaces wish show fragments source text query results 
see definition simple analyzer class embodies analysis protocol 
application defined 
defines token stream appends contents list token streams exhibiting token stream pipeline defined terms token pipelines 
technique useful definition corpora terms corpora experimental purposes 
implementation relevance feedback see 
storage storage module provides generic means accessing persistent store 
purpose module boundary allow systems store indices different manners may wish store indices existing relational database may require indices stored optical disks 
able accommodate sorts variation little change parts system 
support indexing broad goal different strategies indexing 
identified generic facilities hope satisfy goal ffl maps able store small records composed strings integers recall distinguished components keys 
desirable able enumerate records key order 
maps supported different ways 
trees designed solve problem ordered sets large paged secondary storage 
bim trees similar trees designed civ optical storage 
hashing usually enable efficient ordered enumeration implementation technique required 
commercial database management systems relational provide functionality usually implemented internally trees 
ffl blocks able associate blocks binary data map entries 
possible components maps pointers blocks may read written 
variety allocation strategies sort storage covered commercial database systems provide access sort functionality 
primary goal storage module support storage indices design protocol certain support 
fortuitous module able generically handle storage requirements applications maintaining author date indices 
nature ill defined usage attempt specify 
defclass hash store table initform hash table test equal defmethod get mapping store hash store term slots table store term table defmethod setf get mapping value store hash store term slots table store setf term table value hash table storage implementation dynamic static inverted indices implemented entirely structures :10.1.1.41.4893
terms typically stored map potentially frequency information postings stored blocks 
signature techniques typically similar requirements signatures stored blocks indexed map 
storage module entirely hidden indexing module implementations indexing protocol may tempted storage 
reusability variability highly valued protocol amended circumvented 
storage implementation provides access unordered mapping form common lisp built hash table facility 
keys assumed strings values pointers 
persistent store sake brevity block access implementation shown 
clients store pointers arbitrarily large structures directly map 
indexing index cache search engines 
notion search strategies employed index specified 
search methods may implemented treating terms atomic entities observation exploited analysis protocol 
indices typically accelerate enumeration statistics terms frequency documents contain 
case signature techniques lookup individual terms sets terms 
protocol accessing index consists procedures reporting statistics creating maintaining index face changing document base 
responsibility application index invoke maintenance routines necessary 
indexing implementation record certain statistics 
may match requirements desired search strategy 
reconciliation possible may viewed time space tradeoff 
details stored index extracted directly text query time 
particular application corpus hardware vary indexing detail tune index reasonable response minimizing storage 
example inverted index contains term offsets searches involving term proximity may resolved index 
term offsets recorded may recovered search time scanning text documents known contain term interest albeit somewhat slowly 
index optimizations applicable static corpora 
example postings highfrequency terms may efficiently represented bit vectors 
indices dynamic corpora require somewhat complex representations maintenance strategies 
defun map tokens function token stream loop token token token stream token funcall function token return defclass binary index defmethod index document index binary index id map tokens lambda token id get mapping index token token stream index open document index id defmethod get binary postings index binary index term get mapping index term defmethod get term frequency index binary index term length get binary postings index term defmethod get frequency postings index binary index term mapcar lambda id freq map tokens lambda token string token term incf freq token stream index open document index id cons id freq get binary postings index term binary index implementation indices reside read media special requirements 
implementation creates index accesses 
fractures indexing module separate creation access modules 
presumably common experience problem speculate appropriate sub architecture 
sample index implementation shown stores binary posting information 
term list documents contain recorded map provided storage module 
support access binary postings directly access map 
term frequency stored directly computed demand text measuring length binary postings 
access document frequencies requires scan documents named binary postings counting occurrences 
search algorithms search algorithms major clients system components 
search task encompasses query specification may include query text parsing analysis index access term postings 
search methods distinguished specification manipulation query term places different demand index 
example classical boolean search simply performs set operations postings lists presence absence term need noted index 
elaborations proximity search employ nearness constraints require sequential placement information 
ranking methods extended boolean fuzzy boolean relevance search introduce weights typically term frequencies 
proposed text retrieval architecture supports implementation search paradigms 
capability property index access protocol described determining factor information extracted database 
strategies possible 
methods may defined contracts deliver term statistics desired sort understanding information immediately available index computation may performed original source text recover get frequency postings 
alternatively indices need implement access methods serviced efficiently constraint placed pairings indices search methods coexist complete system 
constraint enforced simply allowing object system note binding provided required access method system 
demonstration system follows strategy supplying access methods binary postings implemented lists document identifiers frequency annotated postings implemented lists document identifiers paired frequencies 
methods sufficient support simple implementations boolean search negation relevance search inverse frequency term weights see 
note query input relevance search simply token stream pumped tokens usual manner 
allows possibility caller may apply different parsing strategy query supplied corpus 
feature exploited easily implement relevance feedback simply passing appending token stream effectively concatenates contents provided document set 
search algorithms top level entry points demonstration system marginal utility organizing method protocol search object 
procedures common lisp simply methods class 
advantage specifying search protocol desirable provide different implementations search method tuned different index implementations 
sample session disparate pieces demonstration system brought sample application see 
class demo defined mixes corpus implementation string corpus analyzer simple analyzer storage layer hash store index binary index inherits methods associated classes 
uses initialization protocol load corpus object string representation file directory 
directory question contains collection biographies donated members laboratory biography separate file 
method initialize instance notices indexes document accessible corpus object 
simply creating instance demo class perform computations required prior search 
illustrates output sample searches application 
example evaluates boolean search expression information access retrieval 
results returned unspecified order case document id order 
second example executes relevance search textual query information access 
results scored rank order 
feedback step document id yield final results similarity score order 
defmethod boolean search app expr labels resolve case intersection resolve second resolve third union resolve second resolve third get binary postings app resolve expr defmethod relevance search app query optional threshold terms scores map tokens lambda token token terms test string query term terms weight get term frequency app term freq pair get frequency postings app term id car freq pair freq cdr freq pair score pair assoc id scores score pair setq score pair cons id scores cons score pair scores incf cdr score pair weight freq mapcar car subseq sort scores 
key cdr threshold defmethod relevance feedback app ids relevance search app instance appending token stream streams mapcar lambda id token stream app open document app id ids generic search implementations defclass demo string corpus simple analyzer hash store binary index default strings mapcar file string directory demo corpus defmethod initialize instance app demo key allow keys dotimes id length slot value app strings index document app id defun file string pathname output string string stream open file file stream pathname loop char read char file stream nil char write char char string stream return defmethod print titles app demo ids id ids values format id read line open document app id application 
setq app instance demo demo 
print titles app boolean search app information retrieval access daniel russell system sciences laboratory george robertson system sciences laboratory user interface research jan pedersen system sciences laboratory jock mackinlay user interface research julian kupiec system sciences laboratory herb user interface research kristian system sciences laboratory natural language douglass cutting system sciences laboratory stuart card system sciences laboratory user interface research 
print titles app relevance search app token stream app string input stream information access daniel russell system sciences laboratory jan pedersen system sciences laboratory kristian system sciences laboratory natural language george robertson system sciences laboratory user interface research stuart card system sciences laboratory user interface research douglass cutting system sciences laboratory herb user interface research mark stefik system sciences laboratory julian kupiec system sciences laboratory 
print titles app relevance feedback app kristian system sciences laboratory natural language douglass cutting system sciences laboratory jan pedersen system sciences laboratory dan system sciences laboratory collaborative systems area john tukey system sciences laboratory consultant john batali ssl pat hayes embedded computation area scott minneman design shared spaces area jeff daniel bobrow system sciences laboratory sample session bayer mccreight 
organization maintenance large ordered indices 
acta informatica 
card robertson mackinlay 
information visualizer information workspace 
chi conference proceedings pages 
acm sigchi acm press april 
christodoulakis ford 
file organizations access methods optical disks 
proceedings twelfth annual international conference research development information retrieval pages june 
church 
stochastic parts program noun phrase parser unrestricted text 
proceedings international conference acoustics speech signal processing 
cutting 
pedersen 
information theater versus information refinery 
aaai spring symposium text intelligent systems stanford university stanford ca march 
available xerox parc technical report ssl 
cutting pedersen 
tdb cookbook 
xerox internal memorandum 
cutting pedersen 
optimizations dynamic inverted index maintenance 
proceedings sigir september 
available xerox parc technical report ssl 
fagan 
automatic phrase indexing information retrieval 
proceedings tenth annual international conference research development information retrieval pages june 
faloutsos christodoulakis 
signature files access method documents analytical performance evaluation 
acm transactions office information systems october 
edward fox robert france 
architecture object oriented expert system composite document analysis representation retrieval 
technical report tr virginia tech department computer science blacksburg va april 
harman candela 
fast prototype retrieval system statistical ranking 
sigir forum summer 
ibm 
stairs vs manual 
kaplan kay 
phonological rules finite state transducers 
unpublished manuscript 
karttunen koskenniemi kaplan 
compiler level phonological rules 
report csli center study language information 
knuth 
art computer programming volume fundamental algorithms 
addisonwesley 
knuth 
art computer programming volume sorting searching 
addisonwesley 
kupiec 
augmenting hidden markov model phrase dependent word tagging 
proceedings darpa speech natural language workshop pages cape cod ma 
morgan kaufmann 

fuzzy set theoretical approach document retrieval 
information processing management 
salton buckley 
improving retrieval performance relevance feedback 
journal american society information science june 
salton fox wu 
extended boolean information retrieval 
communications acm november 
salton mcgill 
modern information retrieval 
mcgraw hill 
steele jr common lisp language 
digital press second edition 
ziv lempel 
universal algorithm sequential data compression 
ieee transactions information theory september 
