parallel algorithms higher dimensional convex hulls preliminary version nancy amato michael goodrich edgar ramos icsi texas univ johns hopkins univ univ illinois amato cs uiuc edu goodrich cs jhu edu ramos cs uiuc edu give fast randomized deterministic parallel methods constructing convex hulls ir fixed methods weakest shared memory model erew pram optimal bounds high probability randomized methods 
particular show convex hull points ir constructed logn time log bd high probability 
show constructed deterministically log time log logn time bd log dd constant optimal 
show dimensional methods output sensitive small increase running time 
methods applied problems 
variation convex hull algorithm dimensions deterministically constructs cutting hyperplanes ir logn time optimal nr gamma obtain arrangement point location data structure 
appropriate modifications deterministic hull algorithm compute resource bounds intersection balls equal radius ir leads sequential algorithm computing diameter point set ir running time log arguably simpler algorithm running time br convex hull studied structure convex hull construction problem fundamental problem computational geometry 
interest right convex hull construction problem dual important problem computing intersection halfspaces 
construction dimensional delaunay triangulations voronoi diagrams reduced construction dimensional convex hulls 
ir size convex hull points bd worst case construction requires log bd 
research part bell fellowship nsf ccr 
research supported nsf iri ccr 
portion effort done author visiting university illinois urbana champaign 
research supported part nsf ccr 
related optimal deterministic sequential algorithms long known cases 
higher dimensions seidel proposed deterministic algorithms 
algorithm ran logn dd time optimal gave bd log solution 
time solutions optimal higher dimensions randomized incremental algorithm clarkson shor subsequent seidel 
chazelle gave deterministic algorithm optimal higher dimensions simplified 
optimality algorithms measured respect worst case size complexity resulting convex hull 
size output considered may possible beat worst case lower bounds size convex hull may range bd 
accounting output size lower bound log size convex hull 
output sensitive algorithm due kirkpatrick seidel computed convex hull ir log time 
clarkson shor gave optimal randomized output sensitive solution dimensional convex hulls optimally derandomized chazelle matousek 
higher dimensions deterministic output sensitive method known due seidel runs time log slightly improved gamma bd ffl log fixed ffl technique matousek 
methods inherently sequential 
parallel construction convex hull received attention 
exclusive write prams erew crew models known logn time required compute convex hull ir 
optimal deterministic dimensional convex hull algorithms running logn time logn crew pram atallah goodrich aggarwal erew pram miller stout 
dimensional convex hulls processors crew pram log time achieved chow aggarwal log log time obtained kirkpatrick log time achieved amato preparata 
time solution dimensional convex hull problem optimal respect time logn time log randomized algorithm reif sen 
de assume fixed constant 
randomizing reif sen algorithm goodrich obtained log time erew pram time optimal method ffl amato preparata crew pram ffl fixed constant 
parallel algorithm goodrich 
crcw pram model give logn time log method ir log time minfn log method ir know previous parallel algorithms dimensional convex hull construction 
results give fast randomized deterministic parallel methods constructing convex hull set points ir smallest convex set containing points methods dual problem computing intersection set halfspaces ir containing known point particular give logn time randomized parallel algorithms optimal log bd high probability 
addition give deterministic methods run log time log logn time bd log dd constant optimal show methods log slowing construction logn factor 
methods erew pram weakest synchronous shared memory models 
easiest simulate realistic parallel models scheme due cole algorithms model derive faster sequential parametric searching algorithms see possible concurrent read parallel methods 
methods parallel divide andconquer scheme subdivides space cells contain fewer halfspaces recurses cell parallel 
difficulty applying approach existing methods producing efficient produce constant factor blow total problem size recursive call 
eventually blow leads total problem size large process optimally 
get problem number new ideas 
example randomized method show parallel analogue matousek shallow cutting lemma technique call biased sampling garbage collect size blow certain number iterations 
incidentally biased sampling technique discovered independently slightly different form rajasekaran ramaswami 
addition get polynomial probability bound just expected time bound polynomial refer probability gamma constant exponential refer probability duration unknown scheduling lemma randomized computations 
optimal deterministic method dimensions get size blow problem shallow cutting analogue partition sparsity concept introduced chazelle 
get size blow problem dimensional halfspace intersection new pruning computation removes halfspaces ultimately contribute vertices final intersection 
type technique introduced reif sen randomized dimensional halfspace intersection algorithm 
pruning computation quite different theirs considerably simpler 
incidentally reif sen pose open problems achieve logn time optimal high probability erew pram model improve confidence randomized crew pram logn time optimal construction polynomial exponential 
methods answer questions affirmative 
methods developed convex hull algorithms applied problems 
give simple variation convex hull algorithm dimensions deterministically constructs cutting hyperplanes ir logn time optimal nr gamma 
method yields entire hyperplane arrangement point location data structure 
show appropriate modifications deterministic dimensional convex hull algorithm compute resource bounds intersection balls equal radius ir algorithm ball intersection parametric search previous works obtain sequential algorithm computing diameter point set ir running time log arguably simpler algorithm running time 
important constructions hyperplane set systems section 
section give convex hull methods give specialized methods section 
hyperplane set systems describing general framework set systems similar framework clarkson shor 
generated set system set elements function called generator function maps subsets subsets elements commonly referred ranges 
example call hyperplane set system denote set hyperplanes set ranges represent subsets defined intersection hyperplanes interiors simplices vertices vertices arrangement hyperplanes gamma ffi constant ffi 
vc exponent set system infimum numbers jf jy 
set systems finite vc exponent assume defined range determined subset members called triggers easy see example hyperplane set system finite vc exponent gamma jy delta combinatorially distinct simplices defined vertices 
range determined trigger hyperplanes 
assume remainder section dealing set systems finite vc exponent 
adapting definition say approximation subset fi fi fi fi jy rj jy gamma jrj jxj fi fi fi fi matousek shows compute approximation size log nr time 
specializing hyperplanes lemma construct approximation set hyperplanes ir erew pram model 
size ffl ffl logn time nr fixed constant ffl constant 
size ffl logn time fixed constant ffl constant approximation exponential probability 
size logn log time log provided ffi constant ffi 
proof part special case result goodrich set systems finite vc exponent 
part follows random sample size ffl chernoff bound see shown form approximation exponential probability 
part follows straightforward parallelization result matousek 
turns size bounds large direct convex hull algorithms 
semi nets subset parameter 
ny denote number ranges generated size 
say ranges missed define related notion known vc dimension subsumed definition set system vc dimension vc exponent 
note probability event construction yields approximation running time 
expected number missed ranges generated sized fully independent random sample samples equally 
semi net order tr tn sum ranges values ny tn non zero 
lemma implies suitably defined random sample semi net defined random variables wise independent 
wise independent version result chazelle friedman 
lemma generated set system constant vc exponent subset defined wise independent indicator random variables 
probability probability semi net order size provided non decreasing 
proof goodrich shows defined probability jy sigma 
denote set ranges size establish probability semi net apply markov inequality bound expectation tr tn denote probability pr denote probability pr re write tr tn result bound gammad constant 
requires just gamma wise independence 
range determined triggers bound additional wise independence available random variables 
bound tr jf tn delta minft gamma delta re written jf tn tr jf tn gamma clarkson shor show slightly different notation sk jf definition semi net motivated semi cutting notion introduced chazelle proof techniques 
constant 
expectation bcf tr tn gamma bounded bcf tr gamma af constant provided non decreasing 
turn allows derive lemma generated set system finite vc exponent 
construct semi net constant order size logn time nr constant erew pram model 
proof sketch lemma proof straightforward application limited independence parallel derandomization technique see luby karloff mansour 
possibly difficult step proof computation set system 
note sufficient upper bound case improve probability acceptance case construction course efficient 
achieve efficiency employ composition lemma lemma approximation set system semi net order semi net order provided constant 
proof sum tr ny tn viewed weighted sum ranges range weight maxf 
semi net ny viewed weighted sum ranges restricted range weight maxf ja rj jaj 
approximation ja rj jaj jrj gamma 
range weight corresponding range weight gamma 
gamma tr ny tn assumption 
immediately gives lemma generated set system finite vc exponent construct semi net constant order size erew pram model complexities 
logn time nr constant 
logn time log provided ff constant ff yielding semi net exponential probability 
logn log time log provided ff constant ff 
proof bounds follows applying lemma semi net constructed lemma approximation constructed lemma 
give application lemma hyperplane set system 
cuttings collection hyperplanes ir simplex js denote set hyperplanes intersecting interior set js referred conflict list relative 
hyperplane set systems ranges js sets 
cutting partition possibly unbounded simplices cover ir jh js chazelle friedman show exists cutting size size cutting number simplices chazelle shows cutting constructed nr gamma time matousek shows cutting constructed log time ff small constant ff depends goodrich gives parallel analogues results showing cuttings size constructed logn log time erew pram model nr gamma log factor removed subsection logr ff purposes convex hull construction results quite need generic cutting simplices 
produce specialized cuttings semi nets 
observed case hyperplane set systems ranges determined simplices vertices taken vertices 
define set simplices ranges generated simplex corresponding range js 
addition define set simplices canonical triangulation arrangement restricted simplices 
lemma collection hyperplanes ir sized semi net order 
hyperplane set system constant 

conflict lists simplices construct cutting size jt complete conflict lists logn time jt jn erew pram model 
proof adaptation proof techniques chazelle friedman matousek 
simplex jh js form cutting size js jh js jr done deterministically logn time constant 
method goodrich 
easily construct new conflict lists complexity 
order total size bounds claimed 
surface appears better existing cutting constructions standard hyperplane set system jt 
better restricting way ranges generated set system 
shallow cuttings restriction consider shallow cuttings 
denote fixed origin respect ir define level point ir relative number hyperplanes crossed open segment op 
collection simplices ir shallow cutting simplices cover points level possibly jh js matousek shows shallow cutting hyperplanes ir size bd dd constructed polynomial time logr time ff construction loosely follows 
subset define set system call shallow hyperplane system set subsets defined simplices generated usual hyperplane set system restricted simplices contain point level 
set system subset usual hyperplane set system finite vc exponent 
fact number vertices level bd dd 
lemma sized semi net order respect shallow hyperplane set system 
jt bd dd 
proof note jt tr tn respect shallow hyperplane set system case proportional expected number vertices taken sized random samples probability vertex level vertex fact linearity expectation jt bd dd expressed bd dd 
lemma construct semi net logn time polynomial 
derive composition lemma shallow semi nets lemma approximation hyperplane set system semi net order shallow set system jaj semi net order shallow set system 
proof proof follows lemma added observation point level level 
allows derive theorem set hyperplanes ir construct shallow cutting including conflict lists bd dd simplices erew pram model complexities 
logn time nr nk constant 
logn time logn kn constant polynomial probability allowing concurrent reads provided ff constant ff 
logn log time logr kn constant provided ff constant ff 
proof lemma gives complexities constructing approximation lemma gives complexity constructing semi net logn time simple matter construct 
order apply lemma complete construction need construct js lists 
easily logn time nk erew pram model 
alternatively build data structure dual structure build js lists 
method describe full version yields running time logn time log nk polynomial probability concurrent reads alternatively logn log time logr nk 
sparse cuttings notion prove important methods sparsity 
concept introduced chazelle extended parallel domain goodrich pellegrini design efficient sequential data structures 
define set vertices arrangement set hyperplanes interior simplex addition define restriction shallow set systems hyperplanes js simplices simplex generated usual hyperplane set system 
call restricted shallow set system observe finite vc exponent 
addition define restricted shallow cutting shallow cutting hyperplanes js restricted completely lie lemma simplex sized semi net js constant order respect restricted shallow hyperplane set system jt bd gamma dd gamma jv 
proof proof follows lemma term reflects complexity simplices intersect boundary second term simply observe probability vertex vertex lemma construct logn time polynomial 
efficiently need composition lemma 
lemma simplex ir approximation js standard hyperplane set system semi net order restricted shallow set system jaj 
semi net order js restricted shallow set system jt gamma gamma jv 
proof proof follows lemmas establish semi net properties establishes term size bound jt establish second term bound 
chazelle shows jv estimate jv fi fi fi fi jv jhj gamma jv jaj fi fi fi fi jaj jv jaj jv establishes lemma 
prove theorem simplex set js hyperplanes ir construct restricted shallow cutting js including conflict lists bd gamma dd gamma jv simplices erew pram model complexities theorem value 
proof proof follows theorem 
parallel result prove useful deterministic method dimensions 
having important ingredients methods describe algorithms 
dimensional convex hulls set halfspaces ir containing point show section optimally construct intersection parallel 
give simple suboptimal method 
simple sub optimal method observing theorem design fast simple erew pram algorithm uses bd log constant 
finding shallow cutting size bd ff conflict lists theorem constant ff 
recurse non empty js bottom level problem size constant complete construction brute force method 
easy show log log levels recursion bound characterized cn ff gammaff ff bd 
get lemma set halfspaces containing ir compute logn time bd log constant erew pram model 
optimal expected procedure runs fast efficient 
mentioned chazelle gives sequential deterministic method intersecting dimensional halfspaces optimal difficult parallelize 
involves seemingly inherently sequential application conditional probabilities derandomization method 
interestingly randomized method chazelle gives easy parallelize run log expected time bd expected erew pram model 
clear speed running time clear increase success probability making bound sub optimal 
achieve results design new method 
optimal high probability perform construction faster higher probability forming random sample size log constant determined analysis 
lemma semi net probability 
run logn time inefficient method lemma consider hyperplanes forming shallow cuttings 
bias sampling 
terminate procedure formed complete description triangulation representation conflict list respect edge triangulation 
remove edges belong canonical triangulation form canonical triangulation edges remain 
choose large total step bd log 
gives able apply lemma construct shallow cutting conflict lists cutting 
semi net size cutting bd conflict list size may complete construction applying duration unknown scheduling lemma collection tasks defined running method section js simplex lemma suppose set tasks runs independently steps erew pram probability 
perform tasks logn log log time nw erew pram exponential probability 
proof sketch method combination parallel divide conquer failure sweeping 
smaller suitably large constant solve duration unknown scheduling problem replicating tasks constant number times running copies parallel 
divide tasks groups size recursively solve duration unknown scheduling problem parallel terminate recursive calls take specified time processors 
perform parallel prefix computation compress unfinished tasks array size possible 
copies unfinished task run copies parallel 
full version show chernoff bounds scheme runs claimed bounds exponential probability 
assuming semi net total running time logn bd exponential probability 
course assumption simply implies algorithm runs bounds probability 
turn algorithm bounds high probability replicate phase algorithm logn times run versions parallel 
polynomial probability calls terminate specified time bounds discovery originally chosen semi net 
complete algorithm gives probabilistic analogue result cole vishkin 
theorem compute intersection halfspaces ir logn time bd erew pram model polynomial probability 
optimal deterministic method dimensions derive optimal deterministic convex hull method dimensions 
method section level recursion compute restricted shallow cutting theorem 
glance algorithm may appear suffer constant factor blow problem mentioned section careful analysis shows optimal dimensions 
basis cutting consists constant number simplices cover vertices simplices constructed large simplex covering vertices connecting gamma face 
inductively collection simplices gamma common apex origin cover vertices level vertices level gamma jh js gamma gamma gamma gamma gamma gamma ffl gamma obtained gamma refining gamma jh js restricted shallow ae cutting js ae jh js gamma jh js jh js ae gamma 
gammaffl gammaffl gamma ffl log log iterations obtain set covers vertices level examine size theorem get recurrence jc gamma ae gamma ae jh js jv js ar gamma jc gamma gamma gamma ar gamma jc gamma br gamma constants 
bound jv js follows fact gamma covers vertices level gamma recurrence solution jc cr gamma bd constant verifying inductively need acr gamma gamma gamma gamma acr gamma gamma gamma acr gammai gamma gamma bd ffl gamma 
note odd 
ffl chosen sufficiently small ffl 
solution valid large gamma constant size final cutting jc bd 
show algorithm optimal 
theorem perform gamma constant bd 
gamma jc gamma gammab gamma gamma gammab gamma gammaffl gamma gammaffl gamma gamma bd ffl gamma gamma fflf 
ffl sufficiently small gammaffl gamma total bd 
implies theorem set halfspaces ir deterministically compute logn time bd erew pram model 
known reductions theorem immediately implies deterministic optimal parallel methods dimensional delaunay triangulations voronoi diagrams wide number applications see 
cuttings arrangements point location method construct convex hulls dimensions applied arrangement hyperplanes single cell construct cuttings optimal nr gamma conflict list simplex part output logn time erew pram model 
solutions follow problems constructing hyperplane arrangements point location data structures hyperplane arrangements 
cutting basis single simplex covering vertices set simplices gamma covers vertices simplices required common apex 
refining simplex gamma jh js restricted jh js shallow ae cutting ae jh js gamma kr gammaffl gamma ffl appropriate choice kr gamma gammaffl log log iterations gamma jv js obtain recurrence jc ar gamma jc gamma nr gamma solution jc nr gamma appropriate jc 
constant appropriate ffl total performed gamma jc nr gamma 
obtain complete hyperplane arrangement split pieces put going backwards construction 
provides erew pram analogue crew pram result goodrich 
theorem set hyperplanes ir cutting size constructed logn time nr gamma erew pram model 
particular constructed logn time erew pram model 
hierarchical structure obtained perform point location indicated chazelle 
interested ability answer simultaneous queries construct point location data structure dobkin lipton 
reduces problem point location collection slabs collection hyperplanes restricted infinite prism section simplex intersect inside prism 
give details full version summarize result follows 
theorem set hyperplanes ir point location data structure size constructed logn time erew pram model 
searches performed logn log log time logn time polynomial probability erew pram model logn time crew pram model 
deterministic result erew pram model uses appropriate replication data structure randomized result uses technique reif sen 
dimensional convex hulls set halfspaces ir containing known point wish compute intersection simple optimal expected method describing simple randomized method achieves expected running time logn performs log expected 
structure algorithm similar sub optimal method ir section 
general approach ir clarkson shor sequential randomized output sensitive algorithm randomized parallel algorithm reif sen model 
select random sample ae construct convex polyhedron triangulate boundary 
decompose set sr simplices simplex formed triangular face point simplex sr find conflict list js ae 
method applied recursively simplex sr input js compute js clarkson shor show appropriate constants conditions hold probability sr jh js ii max sr jh js logr 
examine resource bounds level recursion sample size ffl ffl 
construct triangulate logn time ffl log 
noted reif sen set simplices cut halfspace locating point arrangement fd jp og vertex set standard duality transform ir maps points planes planes points 
theorem set simplices cut halfspace logn time ffl log log expected 
processor allocation processor plane simplex pair done prefix sums computation 
level recursion takes logn time log input size level 
size subproblem roughly gammaffl expected depth recursion log log total expected running time logn 
order entire algorithm perform log total size subproblems level recursion exceed 
unfortunately halfspaces appear multiple subproblems method constant factor blow problem method ir section log log recursive calls total size subproblems bounded log 
pruning crew pram algorithm reif sen overcome size blow problem constructing subset halfspaces known bounding halfspaces identify redundant halfspaces hn 
different approach avoid problem 
basic strategy eliminate known redundancy input subproblems 
specifically recursive call simplex halfspaces js know contribute vertex gives simple efficient way avoid size blow problem 
consider simplex show sufficient number redundant halfspaces js intersection bd boundary intersection consists dimensional convex polygon chains called contours faces contain construct contours logn time log optimal erew pram planar convex hull algorithm miller stout 
note halfspaces contributing edge contour contribute face convenient separately consider set halfspaces js ae js contribute edge contours set nc js js nh js define nc sr nc js sr js identifying redundant halfspaces nc js halfspace nc js may may contribute vertex say halfspace nc js contour generate ray originates closest point contour bounding plane shoots interior contained bounding planes halfspaces js contributed contour 
observation ray generated nc js contour intersect bounding plane contribute pruned js say halfspace nc js pinned simplex bounding plane necessarily rays generated contour observation halfspaces nc js pinned simplex need retained js closest point queries needed construct rays done binary search contours logn time erew pram 
lemma shows pruning jh nc 
lemma halfspace nc pinned simplex sr proof suppose nc pinned nc js nc js case bounding plane rays generated contours violates convexity js js identifying redundant halfspaces js consider halfspace js contribute vertex contribute face bounded edges contours bd 
call face trivial remove js trivial faces identified labeling contour edge halfspaces define lexicographically sorting labels takes logn time log erew pram 
fact contours identify trivial faces noted clarkson shor parallel algorithm reif sen 
lemma removing trivial faces jh 
proof follows facts jh halfspace retained js contributes vertex vertices degree assuming 
order construct trivial faces removed lth level recursion replaced returning gamma st level 
fortunately difficult 
full version deal boundary cases explicitly covered definition 
lemma maximal subset js contributes trivial face faces define subchain contour portion convex polyhedron returned previous level lies defined halfspaces responsible contour edges incident contour associated proof give proof full version 
achieve optimal expected time 
achieving high probability modify algorithm previous subsection achieve time bounds high probability 
denotes size initial problem size subproblem stage recursion 
polynomial probability 
assuming sufficient processors available stage time logn polynomial probability achieved stopping recursion log appropriate finishing nonoptimal algorithm example algorithm amato preparata 
total expected log log polynomial probability obtain optimal polynomial probability polling technique reif sen 
applies erew pram model 
exponential probability 
achieve higher probability need tools 
obtain sample stage exponential probability theorem obtain shallow cutting crew pram model 
algorithm 
resource bounds hold failure probability exp gamman subproblem size decreases algorithm progresses need second technique boost degrading exponential probability exponential 
achieved failure sweeping technique 
algorithm follows run subproblems size ff ff obtained middle stage ff log failure sweeping substitute stages deterministic algorithm 
summarize results theorem 
solve open problems reif sen 
theorem convex hull problem ir size solved erew pram model log time logn polynomial probability crew pram model bounds exponential probability 
deterministic output sensitive algorithms goodrich derandomized reif sen threedimensional convex hull algorithm obtain deterministic algorithm optimal log time erew pram 
techniques applied algorithm yielding simpler deterministic algorithm resource bounds 
obtain deterministic output sensitive parallel algorithm optimal jh increased running time log applying technique sequential randomized output sensitive method clarkson shor derandomized version chazelle matousek 
suppose know value jh ffl ffl log method suffices 
theorem obtain shallow cutting size 
proceeds contours computed parallel version kirkpatrick seidel output sensitive planar convex hull algorithm due goodrich implemented run log time log erew pram 
note contours part size bounded recurse sr non empty js spend log time perform log ith stage recursion total input size ith stage cutting simplices stage pruning ensures js vertex gamma 
total log log log time log log log 
known advance try sequence output sizes appropriate constant output sensitive method run values estimates ith execution performs cn appropriate constant stage recursion finds simplices containing vertices execution stopped value tried 
process terminates total log log cn log time log log log log log 
theorem convex hull points constructed log time log log time erew pram model 
ball intersection diameter ir set points ir closed ball radius centered fb xg 
interested computing intersection balls convex body linear boundary complexity 
interest object originates relevance computation diameter largest distance pair points relation pointed clarkson shor gave optimal log time random ized algorithms problems 
deterministically current best algorithms running times log log respectively 
algorithms describe match running times arguably simpler ball intersection 
appropriate variations method compute intersection halfspaces compute logn time log erew pram model 
describe necessary variations details full version 
required ingredients described 
point interior determined techniques similar solving linear programming problems log time 
ii sample ae computed brute force method 
canonical triangulation sr obtained follows boundary triangulated drawing face vertex segment great circle face vertex poles trapezoids boundary joined interior point form bricks 
iii brick sr fx set system consists sets linearization technique shown sample size ffl appropriate properties jb log sr jb computed log time 
techniques sample obtained log time log erew pram model 
iv conflict lists computed point location arrangement hyperplanes mentioned linearization technique 
alternatively sequential algorithm conflict lists obtained hierarchical decomposition determine intersection point bounding sphere boundary walking determine intersection 
contours computed dimensional version method note portion contour lies type cylindrical surface complexity contour linear number balls involved 
vi js nc js defined halfspaces 
nc js computed recursively computing js hierarchical decomposition nc js js 
note recursive computation nc js empty 

vii detection removal trivial faces similar case halfspaces point single ball contribute piece trivial face inside brick diameter 
algorithm ball intersection parametric search previous works obtain sequential algorithm diameter problem running time log 
need ball intersection algorithm oracle determines point located inside brick previous elementary techniques geometric sampling achieve running times log log respectively 
sr stage algorithm 
linearization technique problem point location hyperplanes 
total log 
moment point brick points exactly boundary second parametric search obtains straightforward manner diameter algorithm running time log parallel algorithm running time log log factor due parallel algorithm logn factor due number times oracle run resolve batch comparisons factor log due oracle 
need closer look save log factor 
specifically find construction approximation size ffl log algorithm implemented comparisons involving radius logn parallel batches 
problem approximation construction consists logn stages requiring construction approximation constant described turn requires log log stages running time log log log achieved 
verify game cole played computation graph algorithm constructing approximation log log factor saved 
bound log running time follows 
ken clarkson herbert edelsbrunner yossi matias jir matousek franco preparata jack snoeyink helpful comments concerning topics 
agarwal sharir toledo 
applications parametric searching geometric optimization proc 
rd acm siam sympos 
discrete algorithms pages 
aggarwal chazelle guibas yap 
parallel computational geometry 
algorithmica 
amato preparata 
parallel problem revisited 
internat 
comput 
geom 
appl 
amato preparata 
nc parallel convex hull algorithm 
proc 
th annu 
acm sympos 
comput 
geom pages 

dimension 
ann 
inst 
fourier grenoble 
atallah goodrich 
efficient parallel solutions geometric problems 
parallel distrib 
comput 
atallah goodrich 
parallel algorithms functions convex polygons 
algorithmica 
bernard chazelle jir matousek 
product range spaces sensitive sampling derandomization 
proc 
th annu 
ieee sympos 
comput 
sci 
focs pages 
chazelle 
cutting hyperplanes divide conquer 
discrete comput 
geom 
chazelle 
optimal convex hull algorithm dimension 
discrete comput 
geom 
chazelle edelsbrunner guibas sharir 
diameter width closest line pair parametric searching 
discrete comput 
geom 
chazelle friedman 
deterministic view random sampling geometry 
combinatorica 
chazelle matousek 
output sensitive convex hull algorithm dimensions 
technical report dept comput 
sci princeton univ 
chow 
parallel algorithms 
ph thesis dept comput 
sci univ illinois urbana il 
clarkson shor 
applications random sampling computational geometry ii 
discrete comput 
geom 
cole 
slowing sorting networks obtain faster sorting algorithms 
acm 
cole 
parallel merge sort 
siam comput 
cole vishkin 
approximate parallel scheduling part basic technique applications optimal parallel list ranking logarithmic time 
siam computing 
cook dwork reischuk 
upper lower time bounds parallel random access machines simultaneous writes 
siam comput 
kirkpatrick 
parallel subdivision hierarchies 
comput 
syst 
sci 
dobkin lipton 
multidimensional searching problems 
siam comput 
dobkin kirkpatrick 
fast detection polyhedral intersection 
theoretical computer science 
edelsbrunner 
algorithms combinatorial geometry volume eatcs monographs theoretical computer science 
springerverlag heidelberg west germany 
edelsbrunner 
dimensional alpha shapes 
acm trans 
graphics 
appear 
goodrich 
place techniques parallel convex hull algorithms 
proc 
rd acm sympos 
parallel algorithms architect pages 
goodrich 
constructing arrangements optimally parallel 
discrete comput 
geom 
goodrich 
geometric partitioning easier parallel 
proc 
th annu 
acm sympos 
comput 
geom pages 
graham 
efficient algorithm determining convex hull finite planar set 
inform 
process 
lett 
hagerup rub 
guided tour chernoff bounds 
information processing letters 
haussler welzl 
epsilon nets simplex range queries 
discrete comput 
geom 

einer von 
acta math 
acad 
sci 

karloff mansour 
construction wise independent 
proc 
acm sympos theory computing pages 
kirkpatrick seidel 
ultimate planar convex hull algorithm 
siam comput 
luby 
simple parallel algorithm maximal independent set problem 
siam comput 
luby 
removing randomness parallel computation processor penalty 
proc 
ieee sympos 
foundations computer science pages 
matias vishkin 
converting high probability time applications parallel hashing 
rd acm symp 
theory computing pages 
matousek 
approximations optimal geometric divide andconquer 
proc 
rd annu 
acm sympos 
theory comput pages 
appear comput 
syst 
sci 
matousek 
cutting hyperplane arrangements 
discrete comput 
geom 
matousek 
reporting points halfspaces 
comput 
geom 
theory appl 
matousek schwarzkopf 
deterministic algorithm dimensional diameter problem 
proc 
th annu 
acm sympos 
theory comput pages 
matousek 
efficient partition trees 
discrete comput 
geom 
matousek 
linear optimization queries 
algorithms 
results combined results schwarzkopf appear proc 
th acm sympos 
comput 
geom pages 
megiddo 
applying parallel computation algorithms design serial algorithms 
acm 
miller stout 
efficient parallel convex hull algorithms 
ieee trans 
comput 
paul vishkin 
parallel dictionaries trees 
proceedings tenth icalp pages 
pellegrini 
point location motion planning 
proc 
acm sympos 
theory computing pages 
preparata hong 
convex hulls finite sets points dimensions 
commun 
acm 
preparata shamos 
computational geometry 
springer verlag new york ny 
rajasekaran ramaswami 
optimal parallel randomized algorithms voronoi diagram line segments plane related problems 
proc 
th annu 
acm sympos 
comput 
geom 
ramos 
algorithm intersecting equal radius balls technical report uiucdcs dept computer science university illinois urbana champaign 
reif sen optimal parallel randomized algorithms dimensional convex hulls related problems 
siam comput 

reif sen randomized algorithms binary search load balancing fixed connection networks geometric applications 
proc 
nd acm sympos 
parallel algorithms architect pages 
sauer 
density families sets 
combin 
theory ser 

seidel 
convex hull algorithm optimal point sets dimensions 
sc 
thesis dept comput 
sci univ british columbia vancouver bc 
report 
seidel 
constructing higher dimensional convex hulls logarithmic cost face 
proc 
th annu 
acm sympos 
theory comput pages 
seidel 
small dimensional linear programming convex hulls easy 
discrete comput 
geom 
vapnik chervonenkis 
uniform relative frequencies events probabilities 
theory probab 
appl 
