chapter fast estimation diameter shortest paths matrix multiplication chekuri motwani consider problem computing pairs shortest paths apsp unweighted undirected graph vertices edges 
alon galil margalit agm alon galil margalit naor seidel sei led dramatic progress devising fast algorithms problem 
algorithm formulating problem terms matrices small integer entries fast matrix multiplications 
achieve time bound denotes exponent running time matrix multiplication algorithm 
current best matrix multiplication algorithm due coppersmith winograd cw 
contrast naive algorithm apsp performs breadth searches vertex requires time theta nm 
fundamental nature problem important consider desirability implementing algorithms practice 
unfortunately fast matrix multiplication algorithms far practical suffer large hidden constants running time bound 
consequently adopt view treating results primarily indicators existence efficient algorithms consider question devising purely combinatorial algorithm apsp runs time gammaffl 
admittedly vague term combinatorial algorithm intended contrast algebraic flavor algorithms fast matrix multiplication 
understand department computer science stanford university 
email donald cs stanford edu 
supported nsf graduate fellowship nsf ccr 
department computer science stanford university 
email chekuri cs stanford edu 
supported nsf ccr 
department computer science stanford university 
email rajeev cs stanford edu 
supported alfred sloan research fellowship ibm faculty development award nsf young investigator award ccr matching funds ibm schlumberger foundation shell foundation xerox 
notation denotes polylog 
tion believe instructive try interpret algebraic algorithms purely graph theoretic terms simpler matrix multiplication algorithm strassen str 
currently best known combinatorial algorithm due feder motwani fm runs time log yielding marginal improvement naive algorithm 
take step direction realizing goals outlined presenting algorithm solves apsp problem additive error time log 
algorithm returns actual paths just distances 
note running time better practical matrix multiplication algorithm strassen str 
algorithms described earlier 
explained give slightly efficient algorithms sparse graphs approximating diameter 
algorithms easy implement desired property combinatorial nature hidden constants running time bound fairly small 
results case unweighted undirected graphs generalized case undirected graphs small integer edge weights details provided final version 
crucial step development result shift focus problem computing diameter graph 
maximum pairs vertices shortest path distance vertices 
diameter determined computing pairs shortest path apsp distances graph appears known way solve diameter problem 
fact fan chung chu earlier posed question gammaffl algorithm finding diameter resorting fast matrix multiplication 
situation regard combinatorial algorithms diameter marginally better case apsp 
khanna motwani combinatorial algorithm verifies graph diameter time gamma log delta slight adaptation algorithm yields boolean matrix multiplication chekuri motwani algorithm runs time bound allowing verify diameter graph constant gamma log delta time 
consider problem devising fast algorithm approximating diameter 
easy estimate diameter ratio time perform breadth search bfs vertex depth bfs tree obtained clearly diameter lies 
better approximation algorithm known problem fact known distinguish graphs diameter 
result log algorithm distinguishing graphs diameter extended obtaining ratio approximation diameter time log log 
suggests interesting directions elementary combinatorial algorithm running time gammaffl distinguishing graphs diameter 
belief problem efficiently computing diameter solved decision algorithm provides evidence support belief 
fact view bottleneck obtaining faster combinatorial apsp algorithm precisely problem distinguishing graphs diameter 
raises question strong equivalence diameter apsp problems complexity poly logarithmic factors 
course removing additive error results remains major open problem 
rest organized follows 
presenting definitions useful observations section 
section describe algorithms distinguishing graphs diameter extension obtaining ratio approximation diameter 
section apply ideas developed estimating diameter obtain promised algorithm additive approximation apsp 
section empirical study performance algorithm pairs shortest paths 
preliminaries basic algorithm notation result concerning dominating sets graphs underlies algorithms 
definitions respect fixed undirected graph vertices edges 
definition 
distance vertices length shortest path 
definition 
diameter graph defined max 
denote diameter graph delta 
definition 
neighborhood vertex set vertices distance fu kg degree vertex denoted jn notation fvg denote set vertices distance important keep mind set contains just neighbors includes 
definition 
vertex denote depth bfs tree rooted vertex working parameter chosen serve threshold classifying vertices low degree high degree 
threshold implicit definition 
definition 
define fu sg fu sg 
generalization standard notion dominating set 
definition 
set set dominating set vertex 
vertex neighbors theorem underlies algorithms 
theorem 
exists dominating set size gamma log dominating set ns time 

easy see choosing set theta gamma log vertices uniformly random gives desired dominating set high probability 
theorem effect derandomization resulting randomized algorithm 
proof 
suppose interested standard dominating set graph problem computing minimum dominating set reformulated set cover problem follows vertex create set 
gives instance set cover problem fs goal find collection sets union set cover solution set vertices corresponding subsets forms dominating set size vertex occurs sets sw fast estimation diameter shortest paths dominating set neighbor 
similarly dominating set corresponds set cover cardinality 
greedy set cover algorithm repeatedly chooses set covers uncovered elements known provide set cover size factor log optimal fractional solution joh lov 
vertex degree corresponding set cardinality assigning weight set gives fractional set cover total weight fractional size equal gamma optimal fractional set cover size greedy set cover algorithm deliver solution size gamma log 
gives dominating set size 
implement greedy set cover algorithm keeping sets buckets sorted number uncovered vertices algorithm shown run time 
consider case construct graph adding set dummy vertices fx sg follows define sg vertex new graph degree higher preceding argument construct dominating set size gamma log gamma log 
new vertices connected vertices restriction dominating set give dominating set size gamma log 
running time increased addition new vertices edges total number edges added ns ns get desired time bound 
rest denote dominating set constructed theorem 
estimating diameter section develop algorithm find estimator delta delta 
algorithm distinguishing graphs diameter 
shown algorithm generalizes promised approximation algorithm 
distinguishing diameter basic idea algorithm rooted lemma proof straight forward 
lemma 
suppose pair vertices 
bfs tree rooted vertex depth 
algorithm called algorithm vs computes bfs trees small set vertices guaranteed contain vertex bfs trees certify diameter 
algorithm vs 
choose compute bfs tree vertices 
compute dominating set compute bfs tree vertices 
endif 
bfs trees depth return return 
assuming algorithms sets provided part input computed ns time 
theorem 
algorithm vs distinguishes graphs diameter running time ms gamma log ms 
proof 
clear algorithm outputs graphs diameter graphs bfs tree depth exceeding 
assume diameter fix pair vertices 
show algorithm bfs vertex lemma depth bfs tree rooted algorithm output 
consider cases arise algorithm 
case belong prove 
prove 
case remains see 
paths go vertex implies 
compute bfs tree vertex guaranteed bfs neighbor completing proof 
size time compute bfs trees bounded ms 
case dominating set follows immediately establishing proof correctness 
theorem chekuri motwani nodes case algorithm vs 
jdj gamma log implies bound ms gamma log cost computing bfs trees case 
choosing log obtain corollary 
corollary 
graphs diameter distinguished log time 
approximating diameter basic ideas algorithm vs generalized estimate diameter general 
fix vertices delta delta diameter graph 
suppose find vertex delta delta clear delta estimator 
find small set vertices guaranteed vertex delta delta 
compute bfs tree vertices maximum depths trees estimator reason choosing fraction apparent analysis algorithm 
follows simplify notation assume delta integer general analysis needs modified delta 
assume delta easy see case delta easy handle separately 
key tool rest algorithms notion partial bfs defined terms parameter partial bfs tree obtained performing usual bfs process point exactly vertices including root visited 
lemma 
partial bfs tree computed time 
proof 
number edges examined vertex visited bounded partial bfs process terminated distinct vertices examined 
implies total number edges examined dominates running time 
note partial bfs tree contains vertices closest root set uniquely defined due ties 
typically clear context mentioned explicitly 
definition 
set vertices visited partial bfs denote pb depth tree constructed fashion 
approximation algorithm diameter follows 
algorithm approx diameter 
compute partial bfs tree vertex 
vertex maximum depth pb partial bfs tree 
compute bfs tree vertex 
compute new graph adding edges form 
compute dominating set 
compute bfs tree vertex 
return estimator equal maximum depth bfs trees steps 
lemmas constitute analysis algorithm 
lemma 
dominating set step size gamma log 
proof 
vertex adjacent vertices respect graph jp bfs vertex degree vertex theorem follows find dominating set size gamma log 
lemma 
jn delta delta fvg vertex proof 
consider particular vertex prove 
dominating set vertex edge done ae delta 
possibility neighbor case 
condition jn delta implies ae delta turn implies delta delta 
fast estimation diameter shortest paths reader notice similarity preceding lemma case theorem 
lemma follows general set cover ideas proof theorem holds replace delta fraction delta 
crucial lemma 
lemma 
set vertices jn delta vertex step belongs addition delta vertex delta 
proof 
verified vertex pb delta conversely vertex pb delta 
conclude nonempty vertex largest depth belongs vertex delta ae 
delta vertex distance delta fact delta ae follows delta 
proof lemma clear reason estimate diameter 
essentially need ensure delta neighborhood intersects delta neighborhood vertex 
happen sufficiently small 
small want estimator 
balancing conditions gives ratio 
theorem 
algorithm approx diameter gives estimate delta delta time ms ms gamma log ns 
choosing log gives running time log log 
proof 
analysis partitioned cases 
vertices delta 
case vertices jn delta 
done 
proof lemma set vertex delta delta 
step compute bfs trees vertex desired estimator 
case exists vertex jn delta vertex step 
delta estimator done 
lemma vertex delta delta 
step compute bfs trees vertex desired estimator 
running time easy analyze 
step takes time lemma total time spent step ns 
step implemented time 
step compute bfs trees vertices requires total ms time 
time required step dominated time required compute trees step 
theorem implies step requires ns time note graph edges 
lemma step takes ms gamma log time 
cost step dominated cost computing various bfs trees steps 
running time dominated cost steps adding bounds gives desired result 
additive factor approximations possible determine diameter pairs shortest path distances additive error 
basic idea dominating set contains neighbor vertex graph contain vertex distance shortest path 
find small dominating set vertices treat vertices differently low degree allows manage partial bfs combine information gleaned dominating set 
algorithm approx apsp comment define subgraph induced 

initialize entries distance matrix infinity 
compute dominating set size gamma log 
compute bfs tree vertex update shortest path lengths obtained 
compute bfs tree vertex update shortest path lengths obtained 
minf min gg 
return apsp matrix largest entry diameter 
illustrates idea algorithm 
chekuri motwani actual shortest path path computed step hi lo bfs node lo step bfs node step graph hi lo labeled illustration algorithm approx apsp 
theorem 
algorithm approx apsp vertices distances returned satisfy gamma 
algorithm modified produce paths length merely returning approximate distances 
algorithm runs time gamma log choosing log gives running time log 
proof 
show algorithm easily modified return actual paths distances 
achieve steps associate updated entry matrix path bfs tree update 
step merely concatenate paths step sum lengths determine minimum value vertex clear shortest path distance vertex returned smaller correct values correspond actual paths 
see differ need consider cases case case bfs tree computed step clearly distances returned correct 
case definition case neighbor clearly distances vertex differ distances correct case 
assignment step guarantees 
case fix shortest path suppose path entirely contained set correctly step 
path contain vertex 
contained correct distance computed case 
nd contains neighbor clearly step possibilities considered involve path path distances involving correctly computed step means 
analyze running time algorithm 
step requires time theorem implies perform step stated time bound 
step requires ms gamma log computing bfs trees 
step may compute omega gamma bfs trees ns edges requires time 
step takes vertex pairs compares gamma log vertices implies desired time bound 
error algorithm improved special case distinguishing diameter observations 
fact 
distance delta vertex delta 
proof 
consider vertex dominates algorithm set delta step algorithm imply delta 
exact vertices possible 
fact 
algorithm reports verify time ns vertex 
performing verification vertices report distance improve algorithm approx apsp performs diameter approximation algorithms previous section 
fact appears useful bringing diameter error unfortunately vertices handled easily larger diameters 
experimental results evaluate usefulness algorithm ran families graphs compared results carefully coded algorithm breadth searches 
algorithm approx apsp tweaked heuristic improvement step avoids needless iterations node neighbor copy distances neighbor differ 
algorithm called fast approx apsp occasionally higher fraction incorrect entries fastest way solve pairs shortest path problem 
fast estimation diameter shortest paths approx apsp fast approx apsp approx apsp fast approx apsp speedup speedup accuracy accuracy gb median gb average gb standard deviation rg median rg average rg standard deviation table summary experimental results family graphs random graphs gn model bol graphs chosen uniformly random vertices edges 
experiments chose random graphs ranging ranging 
graphs fast approx apsp runs times faster bfs implementation half distances 
second family graphs come stanford knu 
tested connected undirected graphs appendix knuth knu ignoring edge weights 
heterogeneous family graphs including graphs representing highway connections american cities athletic schedules letter english words expander graphs combinatorial graphs 
results quite indicative practical performance 
bfs algorithm runs fastest certain subfamilies fast approx apsp outperformed algorithms 
results summarized table 
table gb rg refer random graphs respectively 
speedup numbers indicate inverse ratio execution time algorithms carefully coded bfs algorithm 
accuracy refers ratio total number exact entries distance matrix total number entries matrix 
families accuracy approx apsp improved subtracting step 
necessary bfs approach performed fast approx apsp fast approx apsp performed faster roughly accuracy 
numbers indicate general graphs additive factor error acceptable fast approx apsp algorithm choice specific families graphs parameters adjusted better performance 
grateful noga alon comments suggestions linial helpful discussions 
michael goldwasser david karger sanjeev khanna eric comments 
agm alon galil margalit 
exponent pairs shortest path problem 
proceedings nd annual ieee symposium foundations computer science pages 
alon galil margalit naor 
witnesses boolean matrix multiplication shortest paths 
proceedings nd annual ieee symposium foundations computer science pages 
khanna motwani 
diameter verification boolean matrix multiplication 
report 
stan cs department computer science stanford university 
bol bollob 
random graphs 
academic press 
chu fan chung 
diameters graphs old problems new results 
congressus numerantium 
cw coppersmith winograd 
matrix multiplication arithmetic progressions 
journal symbolic computation 
fm feder motwani 
clique partitions graph compression speeding algorithms 
proceedings th annual acm symposium theory computing pages 
joh johnson 
approximation algorithms combinatorial problems 
journal computer system sciences 
knu knuth stanford platform combinatorial computing 
addison wesley publishing 
lov lov asz 
ratio optimal integral fractional covers 
discrete mathematics sei seidel 
pairs shortest path problem 
proceedings th annual acm symposium theory computing pages 
str strassen 
gaussian elimination optimal 
numerische mathematik 
