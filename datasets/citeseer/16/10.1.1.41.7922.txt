xduce typed xml processing language preliminary report haruo hosoya department cis university pennsylvania cis upenn edu benjamin pierce department cis university pennsylvania cis upenn edu 
reasons popularity xml hope static typing provided dtds sophisticated mechanisms xml schema improve safety data exchange processing 
order best typing mechanisms need go types documents exploit type information static checking programs xml processing 
preliminary design statically typed programming language xduce pronounced 
xduce tree transformation language similar spirit mainstream functional languages specialized domain xml processing 
novel features regular expression types corresponding mechanism regular expression pattern matching 
regular expression types natural generalization dtds describing dtds structures xml documents regular expression operators 
regular expression types support simple powerful notion subtyping yielding substantial degree flexibility programming 
regular expression pattern matching similar ml pattern matching regular expression types embedded patterns allows flexible matching 
preliminary report show example role features writing robust flexible programs xml processing 
discussing relationship briefly sketch larger applications written xduce close remarks 
formal definition core language full version 

programming xduce develop series examples programming xduce regular expression types regular expression pattern matching 
regular expression types values types xduce values xml documents 
xduce program may read xml document value write value xml document 
values intermediate results execution program toone correspondance xml documents trivial differences 
concrete syntax user choices xml syntax xduce native syntax 
write xduce value assign variable explanation val addrbook name haruo hosoya addr tokyo name abc addr def tel name benjamin pierce addr philadelphia native syntax corresponding document standard xml syntax addrbook 
name haruo hosoya name 
addr tokyo addr 
name abc name 
addr def addr 
tel tel 
name benjamin pierce name 
addr philadelphia addr 
addrbook 
xduce provides term constructors form label sequence values 
corresponds label label 
xml notation 
enclose strings double quotes xml 
observe sequence contained addrbook 
natural impose structure children regarded entries consists fields tagged name addr optional tel 
capture structure defining regular expression types 
type addrbook addrbook name addr tel type name name string type addr addr string type tel tel string xduce definitions roughly correspond dtd element addrbook name addr tel 
element name pcdata 
element addr pcdata 
element tel pcdata 
just xduce read standard xml documents provide construct import dtds regular expression types 
type constructors label 
form term constructors classify 
addition types may formed regular expression operators repetition alternation optional elements 
show examples alternations 
instance type name addr tel stands zero repetitions sequence name addr optional tel 
notion subtyping play crucial role calculation justifies assigning type addrbook value 
subtyping showing subtyping relation need clearly state elements type xduce sequences 
example type tel contains sequences 
empty sequence tel sequence tel tel tel sequence tel type language comma type constructor concatenation sequences 
example type name tel addr contains name abc addr abc name abc tel addr abc name abc tel tel addr abc sequences name value followed zero tel values followed addr value 
comma operator types associative types name tel addr name tel addr exactly set elements 
subtype relation types simply inclusion sets denoted types 
show sequence steps involved verifying type addrbook 
intuition means optional expect relations name addr name addr tel 
name addr tel name addr tel 
notice right hand side possibilities left hand side 
similarly means zero intuitively particular combining relations obtain name addr name addr tel name addr name addr tel comma associative get rid parentheses name addr name addr tel name addr name addr name addr tel name addr mean 
combining relations enclosing sides addrbook constructor obtain addrbook name addr name addr tel name addr addrbook name addr tel def addrbook value trivially type left hand side type right hand side 
union types xduce provides union alternation type constructor 
example write name tel mean name tel basic subtyping relations union types 
name name tel tel name tel notice right hand side offers possibilities describes larger set sequences 
union types substantially increase flexibility programming 
particular union types yield interesting relations forget ordering subtyping distributivity 
distinguishing points union types opposed conventional tagged sum types say ml 
illustrate consider scenario database evolution 
suppose trivial database consisting just list names type name 
point database copied different sites maintained evolved separately 
site address information added name type database name addr telephone numbers added name tel 
suppose want re integrate databases combine copies src type name addr src type name tel concatenating src src 
type merged database course name addr name tel 
suppose want new database involves extracting common part name record 
repetitions type expect need loops program 
show program explicitly easy write 
better making loops forget ordering subtype relation name addr name tel name addr name tel intuition relation ordering information left hand side forgotten right hand side 
left hand side name tel pairs occur name addr pairs right hand side pairs appear order 
alternatives joined new type expect need branches inner loop extract name field 
don distributive subtyping law name addr name tel name addr tel reorganize type name field accessed directly 
regular expression pattern matching term language powerful form pattern matching 
pattern matching similar spirit ml haskell somewhat powerful includes regular expression types dynamically match values types 
patterns require different treatment usual checks exhaustiveness ambiguity patterns 
body xduce program series function definitions 
example function converts address book telephone list 
fun name addr tel 
name tel name string addr string tel string rest name addr tel name tel rest name string addr string rest name addr tel rest function takes value type name addr tel returns value type name tel 
body pattern match breaks possibilities input values cases 
case matches input value sequence name addr tel labels followed sequence type name addr tel 
case pick name tel elements prepend result calling recursively remainder 
second case matches find tel addr simply calls recursively 
third case matches empty sequence returns empty sequence 
example consider function takes entry tel element 
fun name addr tel 
name addr tel 
ps name addr name addr tel rest name addr tel name addr tel 
function pattern matching cases 
case skip pair entries name addr pick triple entry name addr tel entry exists 
second case matches returns empty 
second example interesting regular expression types critical example 
case example pattern matcher walk elements label name addr tel try match rest value pattern rest name addr tel 
value type 
matching meaningful 
true case second example 
pattern matcher looks pattern ps name addr case hint entries pairs 
matcher walk input value find chain pairs ends 
matching variable length sequence ml pattern matching 
examples pattern matchings exhaustive 
values type name addr tel covered patterns 
order check exhaustiveness subtyping 
instance example check subtype relation name addr tel name string addr string tel string name addr tel name string addr string name addr tel left hand side parameter type annotation right hand side type constructed patterns union patterns term variables removed 
examples subtyping way holds check allowing programming easier 
situation typically occurs pattern contains variables type information useless body 
pattern matchings kinds ambiguity 
ambiguity occurs multiple patterns match input value 
example patterns function ambiguous value matches pattern matches second pattern 
case simply take matching pattern matching policy 
second ambiguity occurs single pattern multiple ways variable bindings 
intrinsic regular expression pattern matching 
example suppose replace case es name addr tel name addr tel rest name addr tel skip pair triple entries pattern es name addr tel clear triple entry variable bound 
resolve ambiguity longest match policy patterns appearing earlier higher priority 
example name addr tel matches long sequence possible bound triple entry 
possible approach resolving ambiguity issue simply disallow ambiguity 
want write default case pattern matching restriction force write somewhat cumbersome pattern captures negation cases 
complex example folder manipulation types seen looked regular expressions strings 
interesting programs involve regular expressions trees 
consider program 
type folder record type record name string folder folder name string url string exists bool fun folder folder record record folder folder record folder fun record record 
name nm string folder fl folder name nm folder fl name nm string url string exists false name nm string url string exists true name nm url exists true mutually recursive types folder record define simple template storing structured lists bookmarks web browser folder list records record named folder named url plus boolean indicating link broken 
functions traverse bookmark list recursively preserving leaves links dropping ones bad links 

related mainstream xml specific languages divided query languages xml ql lorel programming languages xslt 
general interested simple information extraction xml databases programs programming languages succinct programs suitable query language 
hand programming languages tend suitable writing complicated transformations conversion display format 
xduce categorized programming language 
static typing programs xml processing approached different angles 
popular approach embed type system xml existing typed language 
advantage enjoy static safety typechecking features provided host language 
cost xml values corresponding dtds injected value type space host language usually involves adding layers tagging original xml documents inhibits subtyping 
lack subtyping availability restricted forms subtyping serious problem simple traversal tree structures stumbling block tasks database evolution discussed section forget ordering subtyping distributivity critically needed 
example embedding approach wallace runciman proposal haskell host language xml processing 
thing add haskell mapping dtds haskell datatypes 
allows programs mechanisms standard functional programming languages higher order functions parametric polymorphism pattern matching 
notion subtyping 
pattern matching xduce powerful haskell cases 
instance shown section concisely write patterns skip variable length sequence regular expression types 
difference direction xduce currently support higher order functions parametric polymorphism 
working extensions 
piece similar lines functional language xm xml processing proposed meijer shields 
type system described detail close haskell incorporate glushkov automata type checking resulting flexible type system 
closer relative xduce query language yat allows optional types similar dtds 
notion subtyping types somewhat weaker lacking particular distributivity laws database evolution example section 
types tree automata proposed study typechecking general form tree transformers xml milo suciu vianu 
types conceptually identical xduce 
type system xduce originally motivated observation buneman pierce untagged union types corresponded naturally forms variation semistructured databases 

examples xduce programming shown write flexible robust programs processing xml combining regular expression types regular expression pattern matching 
consider xduce suitable applications involving complicated tree transformation 
applications static typing mechanism help reducing development periods 
view built prototype implementation xduce develop small non trivial applications bookmarks viewed simple database query 
takes input netscape bookmarks file type bookmarks subset larger type html 
extracts certain folder named public formats free standing document adds table contents front inserts links contents body 
result type full html type 
total lines html latex takes html file type html converts latex format type string 
lines diff implements tree diff algorithm proposed chawathe 
takes pair xml files generic xml type returns tree annotations indicating subtree retained inserted deleted changed inputs 
lines applications written way traverses input tree simple recursive functions 
third complex 
phase dynamic programming algorithm regular expression types representing internal data structures second phase combines input trees inserts annotations node types ensure annotations actual trees confused 
course writing applications type checker gave tremendous help finding silly mistakes 
implementation xduce raises algorithmic issues 
primary source complication types patterns xduce essentially tree automata need operations tree automata general expensive 
instance decision subtyping inclusion tree automata known exptime complete 
addressed problem obtained algorithm runs efficiently practice 
particular html type applications generally considered largest xml dtds type checking programs involving takes fraction second stock hardware 
implementation issues working type inference algorithm eliminate spurious type annotations patterns pattern compilation scheme improve run time efficiency 
xduce language design far finished 
plan add standard features functional programming higher order functions parametric polymorphism 
consider support object oriented features xml schema specifications 
combination features regular expression types raises subtle issues seeking solve 
precisely xhtml xml implementation html 
prototype implementation written caml lines excluding libraries xml parser 
interested readers invited visit home page www cis upenn edu xduce html 
acknowledgments main collaborators xduce project peter buneman vouillon phil wadler 
learned great deal discussions nils klarlund volker db group pl club penn members professor yonezawa group tokyo 
supported university pennsylvania nsf career ccr 
haruo hosoya supported japan society promotion science 

abiteboul quass mchugh widom wiener 
lorel query language semistructured data 
international journal digital libraries 
buneman pierce 
union types semistructured data 
proceedings international database programming languages workshop sept 
available university pennsylvania dept cis technical report ms cis 
chawathe 
comparing hierarchical data external memory 
proceedings fifth international conference large data bases pages edinburgh scotland sept 
common dauchet gilleron tison 
tree automata techniques applications 
draft book available electronically www grappa univ lille fr tata 
deutsch fernandez florescu levy suciu 
xml ql query language xml 
www org tr note xml ql 
hosoya pierce 
xduce typed xml processing language 
www cis upenn edu xduce html 
full version 
hosoya vouillon pierce 
regular expression types xml 
www cis upenn edu xduce html 
meijer shields 
functional programming language constructing manipulating xml documents 
submitted usenix technical conference page pages 
milo suciu vianu 
typechecking xml transformers 
pods may 
appear 
seidl 
deciding equivalence finite tree automata 
siam journal computing june 
simeon 
yat build web server 
intl 
workshop web databases webdb 
wallace 
haskell xml generic combinators type translation 
proceedings fourth acm sigplan international conference functional programming icfp volume acm sigplan notices pages sept 
acm press 
extensible markup language xml tm 
www org xml 
xml schema part primer working draft 
www org tr xmlschema 
xsl transformations xslt 
www org tr xslt 
