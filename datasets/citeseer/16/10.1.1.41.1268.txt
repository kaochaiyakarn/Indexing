materialization trade offs hierarchical shortest path algorithms shekhar andrew goyal university minnesota department computer science cs umn edu www cs umn edu research group 
materialization hierarchical routing algorithms important tools querying databases shortest paths time critical applications intelligent transportation systems due growing size spatial graph databases 
hierarchical routing algorithm decomposes original graph set fragment graphs boundary graph summarizes fragment graphs 
fully materialized hierarchical routing algorithm pre computes stores shortest path view shortest path cost view graph fragments boundary graph 
storage cost fully materialized approach reduced virtual hybrid materialization approach relevant views pre computed 
explores effect materializing individual views storage overhead computation time hierarchical routing algorithms 
experiments twin cities metropolitan road map show materializing shortest path cost view boundary graph provides best savings computation time amount storage small number fragments 
materializing relevant part shortest path cost view fragment graphs provides best savings followed materializing shortest path view boundary graph 
virtual shortest path view fragments reduce storage costs order magnitude large graphs spatial graph databases form kernel important applications including transportation water electric gas utilities telephone networks urban management maintenance irrigation canal management 
shortest path queries retrieve sequence nodes edges forming optimal shortest distance travel time path node pair source destination 
shortest path cost query computes aggregate cost distance shortest path 
materialization hierarchical algorithms important processing shortest path queries time critical applications intelligent transportation systems 
hierarchical algorithms decompose large spatial graph boundary graph collection fragment graphs smaller original graph 
shortest path query large graph decomposed collection shortest path cost queries shortest path queries smaller graphs 
atis architecture path planning essential component atis aiding travelers choosing optimal path destinations terms travel distance travel time criteria 
due dynamic nature database frequency nature queries necessary explore alternatives traditional disk resident databases drdb 
main memory databases mmdb store content permanently main memory resulting high speed access data 
data stored memory hot frequently accessed data kept disk cold accessed frequently 
main memory databases store types data 
differ large caches mmdb treat data stored disk deal index structures buffer manager 
storing data permanently memory eliminates need clustering random access costly sequential access 
disk access time concern hot data performance dependent processing time 
issues performance tuning hierarchical routing system include choice views materialize ii partitioning views mmdb drdb 
issues relate decomposition graphs fragments choice number levels hierarchy view maintenance strategies 
related contributions single pair path computation problem special case single source path computation pair path computation 
traditional research database query languages transitive closure recursive query processing approached single pair path computation special case general problems 
example partial transitive closure computation transitive closures single pair path computations 
previous evaluation transitive closure algorithms examined iterative logarithmic warren depth search dfs hybrid spanning tree algorithms 
previous evaluation single pair path computation algorithms database environment examined iterative breadth best search algorithms 
study examined estimator algorithms effect path lengths edge costs relative performance search algorithms 
query language implementations inefficient 
hierarchical path finding explored context computer networks context planar graphs 
atis hierarchical routing algorithm called hepv guarantees optimal solutions investigated 
hierarchical routing algorithm divides base graph boundary graph set fragment graphs 
materialized views shortest path shortest path cost fragments boundary graph 
storage views reaches gigabytes graph nodes may prohibitively large atis maps millions nodes 
selective materialization manage storage costs 
explored performance issues decomposition graphs fragments number levels hierarchy clustering materialized view reduce io view maintenance face updates 
types view implementations possible 
fully materialized view stores relevant information shortest paths cost shortest paths pre computed 
virtual view relies line computation stores shortest paths cost 
hybrid view stores part relevant information example storing costs shortest paths shortest path 
explores hybrid materialization analyze storage computation time trade offs materializing individual views needed processing shortest path queries 
experiments twin cities metropolitan road map show materializing shortest path cost view boundary graph provides best savings computation time amount storage number fragments small 
materializing relevant part shortest path cost view fragment graphs provides best savings followed materializing shortest path view boundary graph 
virtual shortest path view fragments reduce storage cost order magnitude large graphs 
scope outline focuses primarily materialization issues simple choices resolving issues 
study hierarchical algorithm level hierarchy 
issue view maintenance face updates buffering drdb addressed 
min cut partitioning decompose base graph fragments 
shortest path cost view shortest path view clustered source node 
design decisions resolve issues orthogonal issue materialization studied literature 
section describes basic concepts hierarchical routing giving description algorithm proof correctness 
section introduces concept describes choices view materialization 
section experimental results materializations terms cpu operations ios required mmdb size storage space 
section summarizes presents challenges hierarchical routing 
basic concepts flat graph definitions graph flat graph consisting node set cost set edge set edge set subset cross product theta element edge joins node node edge associated cost cost takes values set positive real numbers 
node neighbor node degree node number neighboring nodes 
path graph source node destination node sequence nodes edges gamma cost path sum cost edges gamma optimal path node node path smallest cost 
hierarchical graph definitions hierarchical graph level representation original graph lower level composed set fragments higher level graph comprised boundary nodes bn called boundary graph bg 
boundary nodes defined set nodes neighbor fragment bn jf rag frag 
edges boundary graph called boundary edges boundary nodes fragment form clique completely connected 
cost associated boundary edge shortest path cost fragment boundary nodes 
boundary edge associated fragment identifier 
boundary path shortest path boundary graph 
theorem 
bg sp rewrite edge sp rewrite edge bn theorem 
sp rewrite 
edge set set fp ij rewrite edge ij bg sp shortest path sp nodes corresponds directly shortest path bg sp bg boundary nodes formalized theorem 
sequence boundary nodes sp identical rewrite case drops interior nodes edges path keeps just boundary nodes detailed discussion proofs theorems lemmas may www cs umn edu research group list html bg boundary graph case source destination boundary nodes bg path case source local node destination boundary node infinity bn fragment cpc fragment spc bn bg bn cpc path fragment sp bg sp case destination local node source boundary node similar case source destination reversed case source destination local nodes infinity fragment dbn fragment cpc fragment spc bg spc dbn fragment spc dbn 
cpc dbn fragment fragment fragment spc path fragment sp path fragment sp bg sp fragment sp fig 

hierarchical routing algorithm template bg sp due construction boundary edges bg 
observation generalized node pairs sequence boundary nodes shortest path sp nodes shortest path bg boundary node fragment boundary node fragment 
stated theorem 
shortest path sp constructed choosing pair boundary node fragment boundary node fragment minimize cost sp bg sp dbn sp dbn 
gives template algorithm finding path hierarchical graph 
queries sent database compute optimal path sp query returns shortest path node spc query find cost shortest path source destination query returns set boundary nodes fragment fragment query returns fragment identifier interior node query expands path boundary graph returns corresponding path query edge boundary path 
query expands boundary edge returns corresponding path computing shortest path endpoints edge fragment 
hierarchical algorithm composed steps finding relevant boundary node pair boundary graph computing boundary path expanding boundary path 
step determining shortest path compute boundary node shortest path leaves source fragment enters destination fragment 
source destination boundary nodes trivial 
source internal node destination boundary node boundary node shortest path leaves source fragment querying fragment graph cost path source boundary nodes fragment querying boundary graph cost shortest path boundary nodes source fragment destination 
source boundary destination triple lowest aggregate cost determines appropriate boundary node 
case source boundary node destination internal node similar roles source destination reversed 
source destination internal nodes appropriate boundary node pair querying fragment graphs determine cost shortest path internal nodes boundary nodes fragment 
boundary graph queried compute shortest path cost pairs boundary nodes 
path lowest aggregate cost determines boundary node pair 
appropriate pair determined boundary graph queried determine shortest path boundary nodes 
final step expand boundary path querying fragments shortest path 
adjacent nodes boundary path form source destination pairs shortest path query run fragment 
lemma 
hierarchical routing algorithm finds optimal path degree materialization view materialization terminology cost view cv graph materializes cost shortest path node pairs graph 
store path information 
compressed path view cpv stores set optimal paths points graph series hops 
fragment graph partial materialization cv cost boundary nodes view stores cost shortest path interior nodes fragment boundary nodes fragment 
shows cpv cv example graph nodes edges 
node associated table entry nodes 
node table cv contains costs shortest paths nodes 
example cost node node 
find shortest path nodes cpv table 
starting table node destination looked get node path 
case destination node cpv table node 
table node hop destination reached 
asymptotic analysis storage cost grid graph adjacency list compressed cost information path view view cost fragment boundary fragment boundary fragment boundary graph graph graph graph graph nodes raw storage gamma gamma gamma gamma gamma id id sc id sc id sc id asymptotic storage real size table 
asymptotic size complexity materialized views cost view cv compressed path view cpv fig 

path closure cost closure examples symbol explanation symbol explanation number nodes sc size storing cost id size storing node identifier number boundary nodes number fragments size boundary graph bytes average number border nodes fragment length path base graph length path boundary graph table 
table notations summary parameters remainder table 
square grid graph nodes undirected planar graph 
integer square grid graph embedded cartesian space nodes coordinates gamma 
edges connect nodes nodes 
grid graph complexity analysis transportation algorithms regular structure similarity urban road maps 
graph decomposed fragments fragment approximately nodes 
average number boundary nodes fragment total number boundary nodes approximately nf table shows view storage requirements 
storage formulas materialized views shown terms constants 
chosen minimize storage materialized views studied 
setting terms asymptotic storage sizes views computed 
storage minimizes size cv cpv boundary graph values compute asymptotic storage sizes views 
asymptotic analysis shows sizes cpv cv views fragments larger cpv cv boundary graph fragments grow 
verified real sizes views 
cpv cv views fragments take couple gigabytes storage views orders magnitude smaller shown table 
consider materialization cpv fragments 
size cpv base graph take store 
levels hybrid materialization fully materialized view relevant information pre computed stored virtual view information pre computed 
hybrid materialization forms middle ground approaches relevant data materialized left computation 
terms hierarchical routing algorithm different levels hybrid materialization table level graph level algorithm level 
hybrid materialization respect single table means part table kept materialized view 
example view materializes part cv table fragment graphs 
case cv table fully materialized stores cost information pairs table stores cost information internal nodes boundary nodes 
graph level materialization chooses materialize views related boundary graph fragment graphs 
means materialization graph level considered 
third definition hybrid materialization materialize tables necessary version hierarchical algorithm consideration 
full materialization views hierarchical algorithm researched 
hybrid materialization hierarchical algorithm focus remainder materialize subset cv cpv boundary graph fragment graphs 
shows possible hybrid materializations hierarchical algorithm 
experimental evaluation hybrid materialization experiment design goals goal experiments study effects materializing individual views fragments boundary graph storage computation cost hierarchical routing algorithm 
computation cost measured total number io required line computation effort terms heap operations heap size 
candidate hybrid materializations evaluated experimental setup shown 
benchmark maps converted input format graph load generator 
fragmented graph hierarchical routing application 
view manager responsible implementing candidate hybrid materializations 
materialized views partitioned mmdb drdb boundary graph materialization fragment materialization hepv cpv cv cpv cv cv cpv cpv cv materialization matrix boundary graph materialization fragment materialization cpv cv cpv cv cpv cv cpv cv candidate hybrid materializations experiments fig 

degree materialization hierarchical routing algorithms view partitioner 
load generator uses list nodes generate source destination pairs 
hierarchical routing application executes hierarchical routing algorithm views stored mmdb drdb source destination pairs 
statistics heap manager io manager collected data analysis 
hybrid materialization candidates chose candidate hybrid materializations direct comparison shown 
candidates chosen facilitate studying effects materializing individual views fragment graph boundary graph 
materialization boundary graph fragment graphs 
materializes table fragment graph 
materializes table fragment graph cv table boundary graph 
materializes table fragment graph cpv cv tables boundary graph 
compare candidates determine effect materialization hierarchical algorithm 
compare determine effect materializing table fragment graph 
comparing determine effect materializing cv boundary graph 
comparing determine effect materializing cpv view boundary graph 
table shows patterns access views different candidate materializations chosen study 
table summarized 
fragment cv cpv boundary cv cpv mmdb drdb list load generator manager heap manager data analysis nodelist application hierarchical routing graph map formatter map metro area map materialization decision view partitioner allocation views mmdb views drdb cities measurements fig 

experimental method evaluating shortest path algorithms adjacency list compressed cost information path view view cost fragment boundary fragment boundary fragment boundary graph graph graph graph graph nodes table 
views access patterns various algorithms run boundary graph compute paths 
fragment graph run determine cost boundary nodes expand boundary path boundary graph compute boundary path identical replaced lookups view 
identical replaced lookups cv boundary graph 
case identical boundary path determined cpv running 
partitioning views mmdb drdb experiments look partitioning strategies 
partitioning table stored drdb rest views stored mmdb 
partitioning views stored drdb adjacency list fragment graphs border graph main memory 
metrics storage cost measured number bytes needed store data structures graphs views 
computation time components commonly query processors choosing query evaluation strategy cpu time ii disk io time 
cpu time determined size graph number run 
measure cpu time total number heap operations algorithm size heap operations 
parameters give indication operations need done expensive operations 
io cost dominated number disk ios incurred fetch data loaded mmdb views 
comparing hybrid materialization candidates report cpu costs io costs storage cost candidate hybrid materialization strategies experiments twin cities metropolitan road map nodes edges 
analyzed deduce effect materializing individual views performance hierarchical routing algorithm 
cpu cost comparison measure average heap size average number heap operations hierarchical routing algorithm alternative materializations 
set randomly chosen source destination pairs experiments 
number heap operations include inserts deletes 
count operations measured path average reported 
path heap manager measures heap size operation insert delete produces average heap size source destination pair 
report average paths 
compare heap results running base graph get baseline performance measurement 
effect creating hierarchy graphs apparent hierarchical algorithms smaller average heap size running base graph shown 
large average heap size searches entire breadth graph hierarchical algorithms focused fragments boundary graph 
table materialized average heap size increases fewer run fragment graphs number run boundary graph 
effect materializing cv boundary graph apparent 
case average heap size decreases dramatically boundary graph replaced lookups 
cost running boundary graph highlighted materializing cpv boundary graph number fragments heap size vs number fragments materialization average heap size heap operation vs number fragments heap operations number fragments heap operations vs number fragments materialization fo average number heap operations path vs number fragments fig 

cpu cost vs number fragments replaces finds path boundary graph lookup 
average heap size small run fragments 
average heap size increases number fragments increases materialization cv materialized number nodes boundary graph grows 
cpv boundary graph materialized average heap size decreases run boundary graph size fragments decreases 
number heap operations count number inserts deletes heap data structure shown 
materializing hierarchical graph causes number heap operations increase compared running base graph due running boundary graph 
materializing view decreases number heap operations slightly factor dominates 
hierarchical algorithm fewer heap operations cv materialized boundary graph replaced lookups 
materializing cpv causes heap operations minimized computation done fragment graphs 
number fragments inversely affects number heap operations reasons 
greater number fragments number boundary nodes fragment decreases lowering term 
fragments means individual fragments smaller requiring fewer heap operations search 
summary number heap operations decreases views materialized 
exploited directly 
io cost comparison clustering views improves io performance drdb clustering directly exploited 
view clustered internal node 
lookup clustered table retrieves cost boundary nodes opposed lookups boundary node fragment unclustered view need 
cv clustered fragments boundary node stores cost boundary nodes fragments consecutively resulting lookups lookups 
number fragments pages accessed vs number fragments materialization page size drdb drdb drdb kb page size pages accessed number fragments pages accessed vs number fragments materialization page size drdb drdb drdb kb page size fig 

io cost path vs number fragments logical accesses measured logical ios simplify interpretation avoid platform specific noise 
experiment setup counts number access views disk converts number equivalent number pages record page size 
count page distinct io 
experiment capture effect drdb buffering page clustering related optimizations apparent interface level 
shows number accesses varies different hybrid materializations considered 
io 
io comes accessing view takes accesses 
materializes cv boundary graph accesses pages 
difference amount io length path boundary graph 
increasing number fragments increases number boundary nodes effects io performance 
cv clustered increase number boundary nodes causes size entry table grow fragments fragments 
size entries apparent order materializations change page size grew 
second increase io comes increases length boundary path 
storage costs storage costs attained creating necessary views candidate hybrid materializations 
graph fragmented min cut technique values ranging 
notations summarized table 
candidates store base fragment graphs storage requirements similar base graph 
storage view gamma id bytes 
gamma internal nodes information cost border node boundary nodes fragment 
cpv requires gamma id bytes storage 
boundary nodes stores boundary node identifier source destination identifiers gamma boundary nodes 
storing cv takes gamma id bytes 
boundary nodes stored cost gamma boundary nodes 
system id bytes bytes 
storage measured unix ls command 
shows storage requirements candidate hybrid materializations views compose materializations 
storage required view decreases number fragments increases fewer internal nodes store costs fewer boundary nodes store costs 
amount storage required cpv cv increases number fragments increases due increased size boundary graph nodes store costs paths 
requires nearly constant storage slight increase due larger boundary graph 
storage requirement dominated view requires storage number fragments increases 
materializations storage dominated cpv cv storage cost increases number fragments increases 
summary storage costs increase materialization 
summary effect materializing individual views materialization boundary graph views causes decrease number heap operations decrease average heap size 
materialization causes number io operations increase 
io shown sensitive page size order candidate materializations change 
shown caused size entries cv 
mmdb drdb partitioning candidates partitioning views mmdb separates data stored mmdb data stored drdb 
figures mb memory effect placing views mmdb partitioning views bytes number fragments storage costs different algorithms dominating data structures cpv cv boundary graph storage cost requirements various materializations fig 

view partitioning storage requirements costly operation algorithm accessing boundary graph cost view 
view virtually materialized cpu cost prohibitive view fully materialized drdb io costly 
cv candidate placement mmdb 
view placed mmdb cpv accessed times length boundary path 
view placed mmdb table accessed twice 
shows effect view partitioning number disk lookups candidate hybrid materialization 
assume graph nodes path length boundary path length variables characteristic long path graph 
experiment disk lookup access disk count number pages read 
area transitions occurs memory available place fragment graphs boundary graphs mmdb 
important transitions occur range 
time memory available cv mmdb 
memory placed mmdb eliminates io 
io eliminated memory available views occurs 
addressed important issues regarding hierarchical routing algorithm 
issue determine views materialize storage limited 
materializing shortestpath cost view boundary graph provides greatest computational savings followed materializing cost boundary nodes view fragments shortest path view boundary graph 
appropriate views materialized necessary partition views mmdb drdb size mmdb limited 
accessing shortest path cost view incurs high io cost placed mmdb followed shortest path view boundary graph cost boundary nodes view 
plan addressing clustering drdb view maintenance updates graph fragmentation multi level hierarchies 
plan implement parallel version hierarchical routing algorithm 

agrawal 
alpha extension relational algebra express class recursive queries 
ieee trans 
software engineering 

collier 
smart cars smart highways 
ieee spectrum pages april 

greg frederickson 
searching intervals compact routing tables 
algorithmica pages 

hector garcia molina kenneth salem 
main memory database systems overview 
ieee transactions knowledge data engineering 


modeling querying graphs databases 
proc 
intl 
conference large data bases 

ioannidis ramakrishnan 
transitive closure algorithms graph traversal 
acm trans 
database systems september 

jagadish agrawal ness 
study transitive closure recursion mechanism 
proc 
sigmod intl 
conference management data 
acm 

jiang 
efficiency shortest path algorithms analysis 
proc 
intl 
conference data engineering 
ieee 

ning jing yun wu huang elke 
hierarchical optimization optimal path finding transportation applications 
proc 
acm conference information knowledge management 

george karypis vipin kumar 
analysis multilevel graph partitioning 
technical report see www cs umn edu karypis university minnesota department computer science minneapolis mn august 

leonard kleinrock 
hierarchical routing large networks 
computer networks 

kung hanson heuristic search data base systems 
proc 
expert database systems 
benjamin cummings publications 

nishio hasegawa 
file access level optimization page access graph recursive query evaluation 
proc 
conference extending database technology 


lu richardson 
design evaluation algorithms compute transitive closure database relation 
proc 
intl conference data engineering 
ieee 

shekhar coyle 
path computation algorithms advanced traveler information systems 
proc 
th intl 
conference data engineering 

shekhar liu 
connectivity clustered access method networks network computation 
proc 
intl 
conf 
data engineering 
complete version appear ieee transactions knowledge data engineering 

shekhar andrew goyal 
comparison hierarchical algorithms shortest path computation advanced travel information systems 
technical report university minnesota 

gang zhou richard hull roger king jean claude 
data integration warehousing 
bulletin technical committee data engineering june 
