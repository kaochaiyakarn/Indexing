reprinted ieee transactions software engineering vol 
march test oracles generated program documentation dennis peters student member ieee david parnas senior member ieee illustrates software described precisely ld relations descriptions readable manner tabular notations way descriptions test programs 
describe algorithm generate test oracle program documentation results tool help test part commercial network management application 
results demonstrate methods effective detecting errors greatly increase speed accuracy test evaluation compared manual evaluation 
oracles unit testing situ testing constructing self checking software ensuring consistency code documentation 
index terms program testing test oracle formal specification finite state machine 
software engineering research group mcmaster university studying ways improve quality maintainability software systems precise design documentation 
authors relational documentation written tabular expressions precise readable 
documentation clearly communicates intended behavior software reader needing read code 
contributes quality system ensuring programmers reviewers maintainers designers components understand designer intentions 
addition testing ensure documentation consistent code trusted 
functional testing involves executing program test put examining output 
functional testing requires oracle determine output program correct 
oracle human process time consuming tedious error prone 
program documentation mathematical possible derive software oracle 
software oracle evaluation test results inexpensive reliable 
developed test oracle generator tog produce software oracle design documentation ffl precise relatively readable ffl minimal statement requirements ffl written terms data structure ffl written relatively expressive notation 
generated oracle meets criteria 
ffl test result input output pair oracle ffl department electrical computer engineering communications research laboratory mcmaster university hamilton ontario canada mail peters mcmaster ca ffl department computing software faculty engineering communications research laboratory mcmaster university hamilton ontario canada ieee log number 
determine put satisfied specification 
ffl determine specification allows termination particular test case program required terminate case 
ffl require precalculated expected results test cases 
ffl require unique correct answer 
ffl assume existence previous version put assumed correct 
authors addressed problem generating oracle approach characteristics unique 

documentation separate code embedded 
documentation summarizes program people read code 

tools manipulate check properties specifications 

tabular notations specifications understandable easily reviewed 

ld relations specifications popular precondition postcondition pairs able express detect cases specification requires allows program nonterminating 
program documentation method described design documentation computer system comprise documents 
ffl system requirements document 
treating complete computer system hardware software black box describes relationships values environmental quantities maintained system 
ffl system design document 
identifies computers computer system describes fl ieee reprinted ieee transactions software engineering vol 
march communicate peripheral devices 
ffl software behavior specification 
describes required behavior software 
ffl software module guide 
describes division software modules stating responsibilities module 
ffl module interface specifications 
treats module black box identifying programs invoked outside module access programs describing effects 
ffl module internal design documents 
describes module data structure intended interpretation data structure effect access program module data structure 
interested generating oracles part module internal design document describes behavior single access program 
authors discussed producing oracles module interface specifications data types adts specified algebraic trace specifications 
remainder section describes relational program documentation method described discusses applicability method 
program variables state descriptions view digital computer state machine consisting finite set memory locations input output registers finite state machine 
state computer function states components 
terminology adopted 
execution 
possibly infinite sequence states machine 
starting state 
state execution 
terminating execution 
finite execution 
stopping state 
state terminating execution 
executions program 
set possible executions described program text 
frequently intermediate states execution interest require stopping state correct starting state 
cases define execution summary 
pair containing initial final states terminating execution 
define terminology describing program behavior program variable 
state machine component computer 
program variable value 
state program variable 
data structure 
set program variables values affect affected program set programs 
term state assumed refer state program data structure 
state description 
tuple giving value program variable data structure 
note programs length tuple may vary execution 
program variable name identifier string identify program variable program text code 
note languages program variable may name variables may referred name 
adopt convention 
program names program variables ffl read denotes value program variable stopping state 
ffl read denotes value program variable starting state 
describing program testing define 
test case 
description starting state program 
test execution summary 
tes execution summary state test case second state state program terminated 
relational specification set acceptable execution summaries program binary relation 
ld relation pair hrl cl rl binary relation cl subset domain rl call competence set 
domain dl characteristic predicate domain characteristic predicate rl ld relation specify program letting rl complete set acceptable execution summaries cl set starting states executions program terminate 
program said satisfy specification ffl started state terminates state hx yi element rl ffl starting states cl terminate 
note starting state domain rl terminate way satisfies deterministic programs rl function 
convention cl exactly domain rl true deterministic programs cl need 
program assumed specified ld relation referred specification relation 
addition documentation may include text syntax programming language defining basic symbols constant names operators structure element access specification 
inductively defined predicates enable oracle enumerate elements set expression quantified special form inductive definition characteristic predicate set 
define inductively defined predicate characteristic predicate set formed way 
triple hi qi peters parnas test oracles generated program documentation ffl initial finite set elements ffl generator function ffl don quit predicate gamma gamma dom delta delta represents gamma 
set formed rules 

set constructed inductive steps 

fg proven sn sn sn finite 
inductive definition predicate providing appropriate definitions example characteristic predicate set integers min max inclusive inductively defined int max predicate logic describe ld relation giving characteristic predicate relation domain competence set 
ensure meaning specification clear require expressions total clearly defined value true false regardless values arguments 
writing program specifications necessary functions total 
overcome problem logic described allows partial functions ensuring predicates total 
logic differs traditional logic primitive relations defined logic false argument terms function application argument values outside function domain 
example functions primitive relations domain false note logics expression tautology axiom reflexivity 
definition primitive relations useful allows expressions partial functions written functions total usual meaning cases clearly defined meaning cases 
thorough treatment logic 
standard logical operators usual interpretation 

domain information redundant don tool derives domain definition relation description 
require domain information determine termination requirements 
quantification permitted order ensure oracles terminate restricted finite set 
oracles forms permitted inductively defined predicate predicate expression universal 
existential 
restriction significantly limit expressiveness logic practical specifications computer systems restricted finite sets 
complicated frequently expressions extracted program specification define auxiliary predicates functions applied expressions 
arguments application auxiliary predicate function treated terms usual way evaluated auxiliary predicate function evaluated 
auxiliary functions may partial case characteristic predicate domain supplied 
tabular expressions extend notation representing mathematical functions relations include multidimensional tabular expression forms described 
expressions equivalent expressions written traditional manner people easier read understand 
tabular expressions particularly suited describing conditional relations forms frequently occur program specifications 
expressions written conventional non tabular manner called scalar expressions 
different types tabular expressions interpreted predicate expressions terms 
tog tool handle tabular expression described model long expressions cells conform restrictions described section 
examples forms refers mixed vector normal predicate tables 
interpretation types tables described way examples 
tabular expression constructed scalar expressions grids indexed sets cells contain terms predicate expressions may tabular 
table fig 
example dimensional mixed vector table 
cells column header contain predicates evaluated determine column applicable column header true cells row header contain variable name followed read 
rows corresponding row header cell contain predicate expressions main grid cells contain terms 
mixed vector table interpreted selecting appropriate column true header cell expression conjoining predicate expressions formed 
readers familiar may want skip section 
reprinted ieee transactions software engineering vol 
march true gamma gamma fig 

mixed vector table equivalent scalar expression column way cell corresponding row header cell contains predicate expression simply predicate expression hand contains string form variable name predicate expression 
table fig 
example dimensional normal predicate table 
interpreted selecting row column respective header cell expressions true evaluating predicate expression row column main grid 
fig 

normal predicate table equivalent scalar expression applicability method documentation techniques useful specifying imperative program required give output program variables termination 
class programs difficult document method manipulate data structure manner simply changing value variables 
examples include dynamic memory allocation increasing size data structure input output peripheral devices process control 
difficult express characteristics state programs relational operators represent characteristics valid block memory heap exist general 
problems investigated members research group programs requirement intermediate states computer may execution condition true execution call procedure don call times dutch national flag example discussed difficult document methods 
relational specifications allow restrictions intermediate states execution 
solution problem add data structure information represents relevant information intermediate states number times procedure called solution form specification algebraic trace specification data structure state added data structure elements represent intended information 
oracle generation fig 
gives example program documentation 
clear program evaluates characteristic predicate specification relation oracle 
prototype tog tool part table tool system tts described generates oracle form language procedures may objects 
initial version tool described detail extensions handle new types tabular expressions described 
design allows tog optimization techniques reduce time required oracle execution 
program tested test cases oracle slower put minimizing oracle execution time important 
note choice oracle implementation language implementation language examples selected illustration 
intended application different oracle design translated significant change 
oracle interface interface oracle consists access programs described table 
table oracle access programs program return name type description void initialization program 
called oracle program called 
bool evaluates characteristic predicate relational component specification relation 
takes value data structure initial state final state tes arguments 
bool evaluates characteristic predicate competence set program relation 
argument value data structure initial state 
indomain bool evaluates characteristic predicate domain program relation 
argument value data structure initial state 
programs indomain avoid executing put test cases acceptable result test case domain put may nonterminating test case competence set 
note test cases domain competence set acceptable put nonterminating terminate results checked 
problem deciding execution peters parnas test oracles generated program documentation program specification void find int int int bool external find true find true find true true false nc auxiliary predicate definitions nc int int int int inductively defined predicates int 
gamma user definitions include defs define size array search fig 

example specification considered nonterminating solution scope 
ideally oracle indicate test execution fails program specification faults easily isolated 
unfortunately program specifications may allow correct stopping states particular test case possible oracle determine tes failed 
function prototypes give syntax oracle access programs specification illustrated fig 

convention translating variable names adopted conform syntax rules 
void void bool int pb int px int bp int xp int jp bool bool indomain void bool void internal design oracle access programs exception evaluates predicate expression 
tog generates appropriate code traversing syntax tree expressions depth order innermost subexpressions processed writing code evaluate subexpression buffer construct code parent expression 
process continues root expression translated 
procedure implementing type subexpression described sections 
clear reader algorithms described code fragments easily translated imperative programming language 
scalar expressions scalar expressions easily represented looping constructs logical operators included programming languages 
illustrated operators 
logical operators 
root node quantified expression logical operators directly translated equivalents table represent arbitrary predicate expressions 
table logical operator conversions logical operator equivalent primitive relations 
standard programming language relational operators combined information domain partial functions 
example predicate expression partial function translated code fragment 
jp jp inductively defined predicates 
idp implemented object class provides access methods enumerate elements set characterizes 
interface convenient primarily characterize sets quantification purposes 
approach encapsulates hides algorithm determining elements set allows independent copies idp created needed execution oracle code 
reprinted ieee transactions software engineering vol 
march array represent initial set component idp definition procedures implement generating expression continuation expression 
example definition see fig 
implemented code 
static int static int int return static bool int return 
idp object classes methods operator method denoted parentheses named methods 
operator method returns true set characterized idp false 
method initializes object internal variables returns element array representing method returns element set described cases 

returned element say true returned 

returned element false elements returned element returned 

elements set element set returned returns false 
idp expression oracle code creates object appropriate class determined type argument 
array procedures corresponding predicate definition passed arguments constructor function responsible initializing new copy object 
illustrated object type int quantification example 
quantification 
quantifier expressions implemented loops invoke methods enumerate elements set characterized idp 
root node quantification expression existential universal evaluates right child expression elements left child expression true elements set characterized inductively defined predicate 
ensure evaluation fast loops designed terminate soon result quantification known positive instance existential quantification negative instance universal quantification 
example quantification cell column header table fig 
translated code 
static bool int pb int px int bool result true result result pb px return result tabular expressions possible implementations tabular expressions considered 
translate tabular expressions equivalent scalar expressions translate equivalent statements described 
set procedures evaluate tabular expression procedures cell expressions 
second option chosen reasons 
ffl allows semantics tabular expressions hidden tabular expression evaluation procedures tog oracle complicated 
ffl algorithm interpreting table doesn change different specifications code designed reduce number cell expressions need evaluated improve performance 
implement tabular expressions classes table objects implements classes tabular expressions described normal inverted vector decision 
object classes instantiated implement expression 
procedures implement expressions contained cell table generated pointers table object 
table objects methods evaluate expression determines values arguments domain expression represented table value evaluates table 
auxiliary predicates functions mentioned section auxiliary predicates functions expressions complicated repeatedly 
procedure created auxiliary predicate function expression implementation forming body procedure 
domain expression auxiliary function procedure produced implement expression 
example consider auxiliary function defined follows int guarded int int ae domain implemented procedures peters parnas test oracles generated program documentation static int int int return static bool int return appropriate calls procedures code implements expressions auxiliary predicate function 
trial application applied techniques testing programs commercial product 
hope help demonstrate practicality effectiveness methods gain appreciation strengths weaknesses 
section describes programs tested procedure results 
program description programs trial application part network management application produced networks ontario canada 
programs implement module known hash module store elements data structures quick retrieval integer key 
achieved hash tables referred table table provided code lines informal description intended behavior 
developed formal specifications module access programs ffl adds element tables ffl retrieves element tables changing table ffl removes element tables 
figs 
give specification specifications reuse auxiliary predicates functions total documentation module pages cf 
pages code 
test procedure test harness calls put set test cases checks results oracle 
may perform tasks collecting statistics number failed tests usually test harnesses need changed accommodate modifications specification put 
single test harness oracle programs generated hash module access programs 
input test harness series commands instruct add remove table test suite descriptions number commands suite add remove find total find element tables 
command state hash module command executed forms test case programs 
test case executed competence set program determined appropriate program 
tes test case description state hash module execution values returned program passed appropriate program determine pass failure test 
test suites generated randomly language uniform distribution random number generator 
tests approximately uniformly distributed hash tables 
table summarizes test suites 
verify testing procedures fact detect errors occur errors introduced hash module 
done making small changes code longer satisfied specification 
follow formal procedure selecting changes feel represent typical programming errors see table 
modified version hash module presumably containing code fault tested separately test suites 
test results table summarizes results testing 
hash module part commercial software system previously carefully inspected tested surprising errors detected unmodified cases 
seen tests testing procedures successful detecting inserted errors 
large number rejected test cases tests caused fact code modifications introduced tests destroyed integrity data structure resulting tests cases competence set specification relation 
performance see quickly oracles perform measured execution time running tests unmodified hash module tests dec alpha running osf 
results summarized table 
measurements total elapsed time test suite distinguish execution test harness hash module programs oracle programs 
times time take manually verify results test executions 
reprinted ieee transactions software engineering vol 
march program specification unsigned int unsigned int unsigned int struct external struct struct true hash hash sorted sorted hash hash sorted sorted hash hash size hash size fail success sane hash hash size hash hash size hash size fail success sane hash hash size fig 

specification part inductively defined predicates unsigned int 
hash size gamma unsigned int 
hash size gamma auxiliary predicate definitions struct struct struct struct inlist struct list unsigned int id list null list gamma identifier id inlist list gamma id struct struct unsigned int id struct ptr hash id hash size id ptr jj struct struct unsigned int id struct ptr hash id hash size id ptr jj struct struct unsigned int id struct ptr null gamma identifier id gamma identifier id ptr gamma data ptr gamma data gamma gamma gamma id ptr struct table unsigned int size unsigned int id inlist table hash id size id fig 

specification part ii peters parnas test oracles generated program documentation auxiliary predicate definitions continued struct left struct right left null left null right null true false right null false left right left gamma right gamma struct left struct right left null right null left null right null left gamma identifier right gamma identifier left gamma data right gamma data sane struct list list null list list gamma list gamma null list gamma identifier list gamma gamma identifier sane list gamma sorted struct list list null list gamma null list gamma identifier list gamma gamma identifier sorted list gamma user definitions include test include hash define hash id size id size define success define fail fig 

specification part iii table summary hash module test results test 
suite code modifications passed failed rejected unmodified unmodified neglect append existing list added item neglect append added item existing list neglect set identifier return null neglect rejoin list element removed wrong size calculate hash index table table oracle performance test elapsed time time command 
suite min sec msec performance different different test suites hash module uses dynamic memory size data structure changes depending number elements stored tables processing required larger tables 
test suite twice add commands remove tables grow execution test suite commands randomly ordered test suite test suite tables increase size 
affects speed programs significant oracle test harness components hash module programs specifically designed give performance large tables 
particular test harness copy entire data structure command executed slower large tables 
difficulties process methods test commercial software highlighted difficulties arise realistic software development situation 
difficulties discussed section 
specification faults recognized dangers formal specification derive oracle testing software oracle specification derived 
occasions thought fault discovered find fault formal specification 
careful inspection specification checking reprinted ieee transactions software engineering vol 
march tools developed tts obvious methods removing faults specification oracle generated specification fault detection methods possible 
possible test specification executing oracle tes results known previous correct version put tes manually produced checked 
documentation software actively important maintenance finding error specification valuable finding error code 
data structure accessibility oracle able access data structure check properties 
cases hash module data structure hidden module may require modifications put 
hash module considered solutions 
add program hash module export data structure test harness pass oracle 

modify hash module programs call part test harness passing data structure arguments 
test harness copy data structure call oracle programs necessary 
alternative chosen involved changes parts programs tested alternative required changes 
programs tested close possible final system 
complexity test harness test harness provide value data structure starting stopping states 
copy data structure executing put 
complexity test harness dependent design data structure 
case hash module data structure consists array sorted linked lists sufficiently complex data structure program copy potential source errors 
fact preliminary testing errors portion test harness code 
procedures programs procedures hash module argument pointer procedure called elements hash table 
definitions program text determine set possible executions 
see discussion distinction programs procedures 
order specify behavior specification program actual argument required effect data structure determined 
mentioned section tes include information programs called execution put oracle check effect data structure calling program called correct number times 
reasons tested 
location sensitive data structures field hash module data structure fault detection mechanism hash module 
value set equal location memory instance data structure pointer 
unfortunately test harness copy data structure new location memory part start state tes means longer desired property 
impossible ascertain correctness value copy 
reason integrity field checked values data structure may report false failures pass reported failing 
solution problem add start state description variable representing address data structure start state 
discussion applications addition obvious application unit testing ways follows 
situ testing code software system modified adding calls oracle programs certain critical components failures components system operation system testing beta trials reliably detected reported 
behavior resulting program similar developed methods described 
situ testing test harness need constructed 
course applications performance oracle significant issue 
viability application depend amount processing done oracle performance requirements system 
self checking adts antoy hamlet describe application executable oracles 
algebraic specifications adts require user provide representation mapping map concrete data structure specification 
oracles invoked adt code test axioms specification valid change adt value 
relational program specifications terms concrete data structure representation mapping needed oracle tests concrete data structure modified prescribed manner 
oracles generated tog create adt similar antoy hamlet generating oracle programs access program adt peters parnas test oracles generated program documentation embedding calls oracle programs adt code 
enforced documentation consistency factor reduces value program documentation fact relied accurate consistent code programmers easily modify code updating documentation 
tog generated test oracle test program released assured documentation consistent code 
correct program pass thorough testing documentation correct 
limitations method clearly limited programs specified relational techniques discussed section 
limitations follows 
oracle termination possible write specification oracle terminate terminate unreasonable amount time 
nontermination caused nonterminating recursion auxiliary definition errors definition inductively defined predicate nonterminating primitive defined programming language function 
slow termination caused quantification large sets 
example consider known shortest path problem specification 
oracle specification enumerates possible paths directed graph ensure valid path smaller path weight calculation 
nontermination avoided careful definition auxiliary predicates functions judicious tested verified primitive functions 
problems shortest path problem practical test program specification graphs paths 
may practical situations test small graphs test subprograms program techniques verify top level code 
put termination testing process possible put nonterminating program 
oracle programs put invoked terminated means programs detect put terminated exceeded reasonable time limit 
nontermination put detected test harness 
note oracle programs provide means detecting test cases put terminate domain program relation terminate domain competence set indomain respectively 
inaccessible data structure assumption testing method checks properties data structure elements data structure accessed oracle 
cases valid assumption 
example data structure may include computer display program required display values 
cases form oracle additional test equipment terminal simulator necessary 
related authors described tools compare results test execution predefined correct data 
describes systems verify values program variables expected results described formal test language 
system described hamlet tests program list pairs supplied part program code 
systems require user provide expected output may difficult obtain 
compare expected actual output methods appropriate acceptable answers 
limitation partially overcome program testing assistant described chapman 
system allows user specify success criteria equal set equal isomorphic comparing actual expected output 
system requires user version program considered correct 
anna app allow program code annotated assertions evaluated code executed 
assertions constitute specification program intention anna app oracle 
annotations theses systems written specially denoted comments program source code lend analysis review separate implementation domain experts 
model specification describes intended behavior program terms operations machine model finite state automaton 
specifications meet requirement minimal statement requirements contain information describing model behavior part actual requirements 
stocks carrington discuss model specifications derive oracle templates describe notation set acceptable outputs set test cases 
richardson advocate derivation oracles formal models specifications 
papers suggest oracle automatically generated discusses problems producing oracle procedure 
discuss generation oracles sense model specifications written notation 
oracles reprinted ieee transactions software engineering vol 
march evaluate predicates specification variables values derived concrete data structure way abstraction function oracles evaluate predicates concrete data structure value abstraction function required 
assertion definition language adl project includes system generating oracles test harnesses procedure specifications 
adl quite similar doesn support tabular notations consider significant factor improving readability specifications 
adl specify nontermination cases described competence set domain relation ld relation 
addition adl uses bounded quantification quantification form set primitive language discussed complicate expressions 
current revision adl primitive defining domain quantification supports ranges integers permit quantification broader class sets 
described section tog tested evaluated small programs shown methods viable cases 
experience applying wide variety industrial software applications allow general viability usefulness methods drawn undoubtedly lead suggestions improvements tog oracle designs 
experience shown auxiliary predicates functions forms auxiliary predicates functions frequently appear specifications form 
example stated specification program variables changed denoted shorthand nc 
support shorthand expanded form predicate included documentation see fig 

convenient definition produced automatically shorthand 
straight forward basic data types programming language difficult constructed types 
suggested cases specification relation function contains stopping state starting state possible oracle output description correct stopping state test case allow test harness determine program right state 
general possible automatically generate oracle specifications form functional 
consider specification program solve system linear equations unknowns specification states final values unknowns satisfy equations functional oracle outputs correct stopping state gener table advantages disadvantages oracle generation disadvantages advantages documentation generate oracle complicated put needs checked carefully 
value usefulness program documentation greatly increased tested consistency program 
suitable test harness may nontrivial program checked carefully 
faster test analysis reduced cost 
certain classes program behavior easily specified checked methods 
reliable failure detection increased value 
ated automatically tool 
oracle check solution correct generated tool quite efficient 
possible limited set specifications automatically generate oracles output expected results require significant modifications 
tog design chosen carefully allow programming language oracle changed easily prototype 
broadly applicable tog allow user choose popular programming languages facilitate interfacing puts written languages 
accomplished providing additional submodules programming language having tog tool select appropriate user request 
development application tog prototype shown feasible automatically generate executable test oracles tabular relational program documentation 
application methods industrial software demonstrated limitations strengths outlined table 
acknowledgments jeff zucker oliver offered helpful insightful comments helped improve clarity 
anonymous referees exceptionally helpful providing thoughtful detailed comments submission 
research supported part government ontario telecommunications research institute ontario trio government canada natural sciences engineering research council nserc bell canada 
brian smith jonathan ed networks assisted providing realistic examples 
abraham evaluating generalized tabular expressions software documentation meng thesis dept electrical computer engineering mcmaster univ hamilton peters parnas test oracles generated program documentation printed crl telecommunications research inst 
ontario feb 
adl language manual ansi programmers release sun microsystems document dec 
antoy hamlet objects check formal specifications tr dept computer science portland state univ school engineering applied sciences portland oregon 
bauer documenting complicated programs meng thesis dept electrical computer engineering mcmaster univ hamilton ontario printed crl telecommunications research inst 
ontario dec 
gaudel software testing formal specifications theory tool software eng 
vol 
pp 
june 
chapman program testing assistant comm 
acm vol 
pp 
sept 
ward kirby jr core method real time requirements ieee software vol 
pp 
sept 
gannon hamlet data abstraction implementation specification testing acm trans 
programming languages systems vol 
pp 
july 
hamlet testing programs aid compiler ieee trans 
software eng vol 
pp 
july 
predicative programming part comm 
acm vol 
pp 
feb 
specifying software requirements complex systems new techniques applications ieee trans 
software eng vol 
pp 
jan 
hoover chen decision table tool proc 
ninth conf 
computer assurance compass june 
functional program testing analysis mcgraw hill 
improving software tests specifications zum formal specification notation lecture notes computer science bowen hinchey eds pp 
springer verlag 
jaffe leveson heimdahl software requirements analysis real time systems ieee trans 
software eng vol 
pp 
mar 
formal semantics parnas tables proc 
th int conf 
software eng icse pp 
apr 
parnas zucker tabular representations relational documents relational methods computer science advances computing science brink schmidt eds pp 
new york springer wien 
luckham von henke krieg bruckner owe anna language annotating ada programs manual lecture notes computer science goos hartmanis eds springer verlag 
compilation specifications automatic test result evaluation zum formal specification notation lecture notes computer science bowen hinchey eds pp 
springer verlag 
automatic software test drivers computer pp 
apr 
parnas generalized control structure formal definition comm 
acm vol 
pp 
aug 
parnas wang trace assertion method module interface specification tr queen univ telecommunications research inst 
ontario oct 
parnas madey functional documentation computer systems science computer programming elsevier science vol 
pp 
oct 
parnas madey precise documentation structured programs ieee trans 
software eng vol 
pp 
dec 
parnas tabular representation relations crl telecommunications research inst 
ontario nov 
parnas predicate logic software engineering ieee trans 
software eng vol 
pp 
sept 
parnas mathematical description specification software proc 
ifip congress vol 
pp 
north holland aug 
parnas logic describing verifying software vol 
pp 
kluwer nov 
peters shortest path algorithm formal program documentation crl telecommunications research inst 
ontario feb appear 
peters generating test oracle program documentation meng thesis dept electrical computer engineering mcmaster univ hamilton ontario printed crl telecommunications research inst 
ontario apr 
richardson aha malley test oracles reactive systems proc 
int conf 
software eng icse pp 
may 
rosenblum practical approach programming assertions ieee trans 
software eng vol 
pp 
jan 
sankar hayes specifying testing software components adl tr sun microsystems laboratories mountain view california apr 
software engineering research group table tool system developer guide crl telecommunications research inst 
ontario jan 
stocks carrington test template framework specification testing case study proc 
int symp 
software testing analysis issta pp 
june 
wang specifying simulating externally observable behavior modules phd thesis dept computing information science queen univ kingston ontario canada 
weyuker testing non testable programs computer vol 
pp 

dennis peters received beng electrical degree memorial university meng computer degree mcmaster university hamilton ontario 
phd candidate department electrical computer engineering mcmaster university 
currently researching techniques documenting requirements computer systems methods documentation automatically determine system satisfies requirements 
strong interest software engineering education 
licensed professional engineer province ontario 
student member ieee member ieee computer society acm acm sigsoft 
david parnas received phd electrical engineering carnegie mellon university eth zurich switzerland catholic university louvain belgium 
dr parnas professor faculty engineering computing software department mcmaster university ontario director software engineering program associate member department electrical computer engineering 
author papers reports dr parnas interested aspects computer system design 
dr parnas won acm best award influential awards international conference software engineering 
winner acm sigsoft outstanding research award 
licensed professional engineer province ontario 
dr parnas fellow royal society canada fellow acm senior member ieee member ieee computer society 
