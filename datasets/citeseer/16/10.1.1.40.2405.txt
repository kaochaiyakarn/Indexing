reprinted usenix technical conference ffl january ffl new orleans la new jersey machine code toolkit norman ramsey bell communications research mary fernandez department computer science princeton university new jersey machine code toolkit helps programmers write applications process machine code 
applications toolkit written assembly language level abstraction recognize emit binary 
guided short specification toolkit generates code 
toolkit specification language uses concepts fields tokens describe parts instructions patterns describe binary encodings instructions groups instructions constructors map assembly language binary levels 
concepts suitable describing cisc risc machines written specifications mips sparc intel instruction sets 
toolkit help write applications debugger linker 
toolkit generates efficient code example linker emits binary faster emits assembly language making times faster produce directly assembler 
new jersey machine code toolkit helps programmers write applications process machine code assemblers disassemblers code generators tracers profilers debuggers 
toolkit lets programmers encode decode machine instructions symbolically 
transforms symbolic manipulations bit manipulations guided specification defines mappings symbolic binary representations instructions 
written specifications mips sparc intel instruction sets 
traditional applications process machine code include compilers assemblers linkers debuggers 
applications avoid machine code assembly language unix compilers emit assembly language object code 
practical assembler generating code run time adding instrumentation code generation 
applications object code widely useful require assembly code source code executable file 
toolkit applications easier implement 
currently applications assembler implement encoding decoding hand 
different ad hoc techniques different architectures 
task intellectually demanding error prone bit manipulating code usually bugs 
toolkit automates encoding decoding providing single reliable technique variety architectures 
applications toolkit encoding decoding 
example assemblers encode disassemblers decode profilers 
applications streams instructions 
decoding applications matching statements read instructions stream identify 
matching statement case statement alternatives labelled patterns match instructions sequences instructions 
encoding applications call procedures generated toolkit 
procedures encode instructions emit stream sparc call emits word fa 
streams take forms example debugger treat text segment target process instruction stream 
toolkit parts 
translator translates matching statements modula program ordinary code 
generator generates encoding relocation procedures library implements instruction streams relocatable addresses refer locations streams 
translator generator need instruction specification usenix technical conference ffl january ffl new orleans la encoding procedures generated specification matching statements match instructions parts thereof defined specification 
library machine independent 
toolkit specification language simple designed specifications resemble descriptions architecture manuals 
uses single bidirectional construct describe encoding decoding consistency guaranteed 
toolkit checks specifications unused constructs underspecified instructions inconsistencies 
instruction set specified modest effort mips sparc specifications lines 
applications toolkit 
mld fernandez retargetable optimizing linker uses toolkit encode instructions emit executable files 
ldb ramsey ramsey hanson retargetable debugger uses toolkit decode instructions implement breakpoints :10.1.1.30.6519
toolkit provides practical benefits reducing retargeting effort 
example ldb disassembler mips requires lines code mld replaced lines hand written mips code generated encoding relocation procedures 
hiding shift mask operations replacing case statements matching statements checking specifications consistency toolkit reduces possibility error 
toolkit speed applications generate assembly language binary code 
example mld emits executable files times faster encoding procedures writing assembly language native assemblers 
speedups require hand written encoding relocation procedures target architecture 
toolkit solves part retargeting problem solves part completely 
solution elegant practical toolkit instruction set specifications clear concise reusable generated code efficient 
model machine instructions machine level concepts general specified implemented machineindependent way including conditional assembly span dependent instructions relocatable addresses segments object code relocation 
toolkit figures show toolkit applications 
code shown boxes data ovals 
code doubled boxes machinedependent version exists target architecture 
code single boxes machine burg rewrite engine handwritten code generator optimization encoding procedures data stream code stream toolkit library write header copy streams ir trees data intermediate code sparc toolkit spec toolkit generator structure mld independent 
code pointed thick dashed arrows generated toolkit 
boxes heavy borders contain code part toolkit generated toolkit 
ovals heavy borders contain instruction streams written read toolkit generated code 
names parts toolkit shown italics 
mld mld shown retargetable optimizing linker mips sparc 
mld links machine independent intermediate code optimizes generates instructions data emits machine dependent executable file 
retargeting mld requires adapting code generator writing code emit file 
mld code generators lcc compiler fraser hanson emit assembly code 
lcc code generator generated automatically burg specification fraser henry usenix technical conference ffl january ffl new orleans la ing rewrites intermediate code subtrees assembly language templates rest code generator written hand 
adapting code generator means modifying burg specification hand written parts 
toolkit simplifies modifications 
code prints assembly language replaced code calls encoding procedures generated toolkit call printf replaced call generated toolkit 
encoding procedures toolkit library emit code instruction stream mld memory 
adapted code generators call library directly emit data 
mld uses instruction streams model segments executable file 
example sparc executable contains instructions text segment initialized data data segment uninitialized data bss segment 
mld uses instruction stream segment 
instructions emitted stream refer labels positions known 
toolkit generator creates code resolve mld needs lines code relocation code machineindependent 
ldb ldb shown retargetable debugger ansi breakpoint implementation machine independent machinedependent part analysis control flow ramsey 
analysis written matching statement 
toolkit translator method fetching instructions streams works instantiating templates supplied translation time 
ldb templates fetch instructions program debugged 
translator uses templates sparc instruction specification transform analysis embedded matching statement modula nelson 
matching statements disassembly flow analysis clear concise 
analysis example takes dozen lines code section 
writing analysis disassembly hand require large nested case statements enumerated sparc opcodes 
specification concepts machine instructions don fit machine word toolkit works streams instructions just instructions 
instruction stream byte stream breakpoint implementation sparc flow analysis matching statements sparc flow analysis pure modula instruction stream program debugged debugger functions 
sparc toolkit spec templates fetch streams toolkit translator decoding ldb units may tokens size 
instruction sequence tokens example instruction include bit prefixes bit opcode bit format bytes bit immediate operand 
token instruction partitioned fields field contiguous range bits token 
fields contain opcodes operands modes information 
patterns constrain values fields may constrain fields single token sequence tokens 
simple patterns specify opcodes 
complex patterns tasks specifying structure addressing modes defining group operand arithmetic instructions 
constructors connect symbolic binary representations instructions 
symbolic level instruction opcode constructor applied list operands 
result application sequence tokens described pattern 
application programmers constructors emit instructions calling procedures derived constructor specifications decode instructions constructors matching statements match instructions extract operands 
tokens fields fields declarations specify divide tokens fields 
fields declaration class tokens fields named declaration extracted tokens class 
declaration binds field names bit ranges specifies number bits tokens usenix technical conference ffl january ffl new orleans la class 
toolkit generates shifts masks needed get value field token 
field values unsigned postfix exclamation point sign extend 
architecture manuals informal field specifications 
example fields sparc load instructions sparc op rd op rs simm instructions may different format op rd op rs rs floating point arithmetic 
fields declaration defines fields sparc instructions fields op rd op rs simm rs op imm cond disp asi disp indented lines define fields formats pictured lines define fields sparc formats aren pictured 
sparc instructions bits wide class tokens needed bit instruction token 
instructions vary size classes may needed 
intel instructions composed bit tokens different classes different sizes 
useful put tokens size different classes 
example uses byte specify addressing modes sib byte identify index registers intel page mod reg opcode sib ss index base fields declarations bytes fields mod rm fields sib ss index base dividing tokens classes helps detect errors specifications 
example putting sib tokens different classes ensures user mistakenly extract mod field index field byte 
patterns patterns constrain division streams tokens values fields tokens 
instructions decoded patterns matching statements identify interesting inputs example pattern defined matches branch instruction 
instructions encoded patterns machine specification specify tokens appended stream 
patterns composed constraints fields 
constraint fixes range values field may 
typical range single value op 
patterns may composed conjunction concatenation disjunction 
basic patterns pattern operators best understood considering affect matching 
constraint lo hi field matches input token field token falls range defined lo hi 
declared field particular class tokens determines size token matched 
wild card constraint class matches token class class example sparc matches bit token 
conjunction matches match 
concatenation matches matches initial sequence input tokens matches tokens 
disjunction matches matches 
patterns specifications patterns declaration binds names patterns 
pattern bindings typically define opcodes 
example name call bound pattern corresponds sparc opcode call patterns call op pattern op matches bit token bit zero bit 
opcodes defined multiple constraints example patterns add op op defining opcodes individually tedious result hard compare architecture manual uses opcode tables 
patterns declaration bind list names generating expression appears right 
generating expressions modeled expressions icon programming language produce value griswold conjunction permitted constraints conjoined refer fields tokens class restriction enforces rule mixing fields different classes tokens 
example pattern mod rm permitted pattern mod index 
usenix technical conference ffl january ffl new orleans la griswold 
generating expression pattern integers replaced expressions brackets denotes sequence integers 
expressions activated left right lifo order resulting list patterns bound corresponding name left 
example declaration describes opcode table sparc manual sparc patterns call op definition binds names table call table table patterns op op op op respectively 
names definitions new patterns 
manuals give tables opcode 
unused opcodes bound special name may left side binding 
example table sparc manual defines arithmetic opcodes sparc patterns add xor sub andn sll orn srl xnor sra flush save restore op columns expression columns generates sequence sequence example name bound pattern op op 
trick possible tables opcodes numbered vertically 
constructors constructor connects symbolic binary representations instruction mapping list operands pattern 
toolkit generator creates encoding procedure constructor application writers constructors 
constructors specifications applying constructor list operands produces pattern 
constructors patterns definitions helps organize description machine instruction set 
reduce possibility errors specification writer associate type constructor 
applying constructor type produces value useful operand constructor expects operand type applying untyped constructor emits tokens instruction stream 
assembly language familiar symbolic representation instructions designed constructor specifications left hand sides resemble assembly language syntax constructor name list operands 
operands may separated spaces commas brackets punctuation 
punctuation ignored syntactic sugar 
right hand side constructor specification contains pattern describes binary representation instruction specified 
pattern may contain free identifiers refer constructor operands operands may integers may patterns produced constructors type 
example constructor describes sparc floating point negate instruction constructors rs rd definition constructor relies previous definition pattern appears right hand side definition patterns name refer pattern constructor may confusing desirable architecture manuals normally names opcode tables instruction descriptions 
toolkit specification language reuse possible putting constructor names separate name space 
specification constructor bad awkward introduce integer operands refer registers rs rd simplify field operands integer operands 
constructors rs rd rs rd right hand side identifier rs stands pattern constraining field rs equal operand 
specification fewer names keep track new shortcoming names appear order sides slightly different notation 
conjunction operands opcode common risc machines usenix technical conference ffl january ffl new orleans la provide special abbreviation right hand side omitted constructors rs rd constructor type untyped 
generated encoding procedure declaration void unsigned rs unsigned rd side effect emitting instruction current instruction stream 
operands simple integers fields 
example sparc integer arithmetic instructions take second operand may register immediate operand depending value field sparc 
sparc specification defines constructor type operands immediate mode constructors constructors rs rs simm 
simm simm 
denotes field simm interpreted signed integer 
identifier operand definitions constructors example constructors add rs rd encoding procedures generated declarations unsigned rs int simm void add unsigned rs unsigned rd procedures side effects return values passed constructors add 
specifying similar constructors architecture manuals describe instructions alphabetical order group instructions related syntax semantics 
toolkit uses disjunction define patterns match group related instructions 
patterns specify constructors 
example specification patterns arith add sub save restore constructors arith rs rd avoids repeated specifications constructors add 
constructor name left hand side denotes pattern disjunct pattern generate constructor 
patterns declaration attaches name disjunct constructor name determined 
equations instructions integer operands directly field values 
common pc relative branches operand target address corresponding field contains difference target address program counter 
constructor specifications may include equations express relationships operands fields 
equations contain sums operand field values integer coefficients 
example specification sparc branch instruction constructors branch pc disp 
branch disp equation braces shows relationship target branch pc program counter disp displacement field 
toolkit detects branch defined pc mod generated encoding procedure enforces restriction 
introduce machine independent notion program counter new specification concept pc simply predefined identifier denotes place instruction stream constructor emits tokens 
instructions part operand instructions slices values example val denotes significant bits bit integer value val 
slice specify sparc sethi instruction constructors sethi val rd imm val sethi rd imm equations may inequalities equalities 
toolkit inequalities help solve equations generate code checks inequalities satisfied 
synthetic instructions conditional assembly applying constructors pattern definitions useful defining synthetic instructions instructions available assembly language part usenix technical conference ffl january ffl new orleans la constructors reg reg eaddr mod rm reg reg eaddr reg reg mod rm reg disp reg eaddr reg mod rm reg disp reg eaddr reg mod rm reg abs eaddr mod rm constructors index base index ss eaddr index base mod rm index base ss index base index ss eaddr index mod rm index base ss index base index ss eaddr index mod rm index base ss index ss eaddr index mod rm index base ss constructor definitions bit addressing modes real machine 
example synthetic instructions bit set dec decrement defined terms real instructions sub sparc constructors rd rd rd dec val rd sub rd val rd needed convert integer operand val operand type 
best expansion synthetic instruction depends values operands 
choose expansions putting alternatives right hand side constructor specification set equations 
application constructor uses alternative equations solved 
example sparc synthetic instruction set ways load signed value val register rd significant bits val zero single sethi instruction 
val fits bits immediate mode instruction operand register zero 
cut val slices instructions sethi assign high order bits add low order bits constructors set val rd val sethi val rd val val 
val rd lo val sethi val rd rd lo rd cisc instructions mips sparc instructions specified conjoining field constraints property implicit right hand sides useful 
simple 
opcode operands span tokens tokens contain parts 
fields multiple uses example field rm indicate register choice alternate addressing mode depending value 
shows constructor specifications addressing modes illustrating toolkit specification language handles cisc 
brackets asterisks meaningful simply help show constructors correspond standard assembly language 
effective addresses contain byte contains addressing mode register 
indexed modes byte followed sib byte holds index base registers scale factor 
modes take immediate displacements intel tables 
define constructors type eaddr create effective addresses bit mode 
group constructors specifies non indexed addressing modes 
simplest mode encoded mod register direct mode refer machine general registers 
modes register indirect modes displacement bit displacement bit displacement 
fields mod rm byte defined fields occupy full bit bit tokens hold displacements fields fields semicolons separate bytes displacements follow 
inequality reg shows rm may take value simple indirect mode 
denoting indirect base pointer register normally en usenix technical conference ffl january ffl new orleans la coded combination mod rm encodes bit absolute mode 
inequality reg equations associated register indirect modes shows value may encode indirect stack pointer register normally encoded 
value encode indexed modes sib byte byte 
indexed modes second group 
byte rm followed sib byte 
stack pointer may index register index 
depending value mod byte sib byte may address bit bit displacement may follow 
mod base denotes indexed address base register bit displacement 
relocation instructions refer addresses data instructions load value variable branch label 
toolkit emit instructions addresses known 
instructions data emitted relocatable blocks implement instruction stream abstraction 
application write relocatable block knowing memory block contents eventually located 
relocation assigns address relocatable block 
applications may number relocatable blocks 
label points location relocatable block 
toolkit associate names labels applications method want find identify labels 
relocatable address quantity value depends value label 
toolkit generator treats relocatable addresses values data type 
toolkit library provides particular implementation library relocatable address sum label signed offset 
simple form adequate applications compilers linkers 
authors sophisticated applications sophisticated representations linear expressions addresses labels changing toolkit 
constructor operands names relocatable addresses operand branch constructor shown 
relocatable address pc constructor equations denotes location constructor tokens 
constructor uses relocatable addresses applied checks see addresses known assigned absolute addresses 
treats ordinary integers emits instruction 
emits placeholder tokens creates relocation closure 
closure contains unknown addresses plus pointer function applied overwrites placeholder correct instruction 
application keeps closure addresses depends known point apply closure function discard closure 
flexibility applications decide organize relocation closures apply discard 
example standard linker store closures simple list discard applying absolute addresses segments don change assigned 
incremental linker keep closures re applied relocatable blocks moved 
store closures complex data structure avoid re applying closures relocatable blocks moved 
placeholders computable specification writer associate placeholder pattern class tokens 
toolkit uses shape constructor pattern compute placeholder ensuring placeholder shape instruction overwrites closure applied 
placeholders typically chosen attempts execute detected 
example chose placeholder imm placeholder sparc 
dynamic linker special trap instruction placeholder handle special traps resolving unknown address applying instruction closure run time 
conditionally assembled constructor applied relocatable address may possible determine sets equations satisfied value relocatable address may known 
case toolkit conservative decision choosing alternative equations known satisfied 
technique safe suitable emitting span dependent instructions example uses general representation forward branches 
matching statements decoding applications toolkit matching statements 
resemble ordinary case statements arms labeled patterns 
arm pattern matches executed 
free identifiers patterns binding usenix technical conference ffl january ffl new orleans la instances bound field values locations sub patterns pattern 
example matching statement match rs rd 
printf 
prints message instruction pointed floating point negate 
pattern matches arms matching statement reversed toolkit translator issue warning second arm executed 
just specifications convenient write patterns form constructor applications operands bound integers matching statement 
pattern valued operands bound integers locations instruction stream example sparc pattern add rand rd matches add instruction rs zero 
rd bound number destination register rand bound location token containing second operand 
applications decode streams instructions sequence need find address instruction part decoding current instruction 
matching statement contains special syntax common operation word match followed identifier square brackets matching statement assigns address unmatched token identifier 
translator implements matching statement building decision tree 
node tree tests field token stream matched 
tokens identified width offset location matched example bit displacement index mode add instruction bit token offset bits 
translator rewrites patterns fields tagged offset token belong 
attempts build decision tree identifies matching arm minimal number nodes 
polynomial time algorithm known heuristics 
examine trees produced heuristics see write hand 
application writers representation instruction streams 
specify representation supplying toolkit code fragments data type represent locations template add integer offset location template convert location program counter unsigned integer template fetch token specified width location 
widths measured bits offsets measured units program counter defaults bits addressing unit 
application writer supply code fetch tokens proper byte order usually byte order machine application runs 
matching statements ldb ldb retargetable debugger uses matching statements disassemble machine code help implement breakpoints 
ldb written modula 
uses object type represent instruction stream program debugged uses unsigned integers refer locations streams 
code fragments give toolkit translator representation streams address type word address add word plus address pc fetch type quoted strings fragments modula code stands address location stands offset stands width 
offsets widths measured bits 
word plus unsigned add 
argument object representing address space debugged defined context matching statements appear 
shows simplified version sparc code ldb breakpoint implementation omitting subtleties associated delayed branches 
code finds instructions executed immediately instruction breakpoint planted ramsey 
ordinary instruction instruction follow inline successor computed arm matching statement 
succ set addresses containing single element succ 
calls unconditional branches instruction follow set conditional branches 
patterns indirect jumps registers procedure gets value register order compute target address 
matching statement implemented toolkit clear code doing logic obscured implemented nested case statements 
implementation toolkit generator translator lines icon griswold griswold 
usenix technical conference ffl january ffl new orleans la procedure follow memory pc word var succ word match succ pc 
return succ call target 
return target branch target ba fba cba 
return target branch target 
return succ target rs simm rd 
return rs simm rs rs rd 
return rs rs 
error fail unrecognized instruction follow matching statement control flow analysis sparc instructions machine spec ops insts modes time mips sparc intel spec lines specification ops opcodes manual tables insts instructions specified modes address modes instructions time seconds create encoding procedures elapsed time sparcstation table characteristics machines library lines ansi table shows characteristics machine specifications including amount time needed generate complete set encoding procedures 
number addressing modes affects time encoding procedure alternative mode operand 
long generator time acceptable rarely writes specification containing hundreds new constructors 
add constructors existing specification time proportional number added constructors size specification 
translator takes seconds transform ldb sparc follow set matching statement analogous mips statement modula code 
translator time shorter generator times problematic translator run change source file matching statement 
toolkit generates efficient code 
mld example encoding application toolkit emit binary emit assembly code 
mips sparc program bin asm run bin asm run eqntott li espresso gcc bin toolkit emit binary asm emit assembly code toolkit run translate assembly code table seconds generate code executes faster emitting binary 
example linking emitting binary code integer spec benchmarks mld faster emits assembly code shown table 
emitting assembly requires running assembler increases total time required generate toolkit times longer sparc times longer mips 
comparison unfair mips assembler mips assembler schedules instructions toolkit 
application writers trade safety efficiency 
default toolkit checks widths field values calling user defined error procedure overflow 
application writers unwilling pay compare branch direct field values silently narrowed fit 
unwilling pay cost masking bits assert certain fields overflow case values masking 
choice appropriate situations example field values denote registers chosen register allocator 
usenix technical conference ffl january ffl new orleans la measured encoding costs dec memory mapped clock 
simple encoding procedures nop mov cost cycles generated safety checks cycles procedure call return 
safety checks add cycles operand checked 
encoding branch instruction requires checking relocatable addresses doing relative address computation costs cycles 
related ferguson describes meta assembler creates assemblers new architectures 
works declarative machine description macros pack fields words emit essentially macro processor bit manipulation operators special support different integer representations 
wick describes tool generates assemblers descriptions written modified form isp bell newell 
investigates different part design space machine descriptions complex comprehensive 
example describe machine organization registers instruction semantics instruction encoding 
prefer build applications simple specifications describing different properties machine build different parts 
gnu assembler provides assembly disassembly targets different techniques applied ad hoc support different architectures 
example instructions recognized hand written code mips instructions recognized selecting mask sample table applying mask word question comparing result sample 
targets operands recognized short programs written machines different machine target 
set machines encode instructions assembly 
implementations machines contain magic numbers hand written bit operations 
programs interpreted machines represented strings appear written hand 
spirit asn iso create symbolic descriptions messages network protocols differences 
asn data encoded way principle writers asn specifications details encoding 
asn encodings byte level encodings asn contains escape hatch octet string strings bytes individual bits may represent different values 
asn far complex language example contains constructs represent structured values sequences records unions describe optional default required elements messages distinguish tagged implicit encodings data 
names instructions may conflict names application writers programs generating encoding procedures names cause name space collisions 
different languages offer different solutions problem classes modula interfaces 
plausible solutions include attaching unique prefix names encoding procedures structure containing pointers encoding procedures 
choice costs run time enable multiple sets encoding procedures application emit binary emit ascii debugging 
instructive experiment multi pass strategies conditional assembly conditional assembly efficient machineindependent way specifying assemble span dependent branches 
strategies change size previously emitted instructions 
size changes accommodated putting varying instruction relocatable block awkward expose extra relocatable blocks application 
store relocatable blocks relocation closures file collection machine independent representation object code 
object code format easier write testing tools purify hastings joyce profilers tracers qpt ball larus optimizing linkers om wall manipulate object code 
add machine independent linker toolkit library extend generator generate assemblers specifications making possible take assembly code generated existing compilers assemble new format 
hard part approach externalizing function pointers contained relocation closures 
designing extension toolkit enables describe arbitrary sequences 
sequences common components network messages extension possible toolkit generate encoding decoding code messages 
investigating toolkit specifications help build compression models arithmetic cod usenix technical conference ffl january ffl new orleans la ing bell cleary witten 
may increasingly useful compress machine code gap processor speeds secondary storage widens 
better compression help reduce storage requirements large network traces consume gigabytes duffy 
discussion specification language evolved simpler language recognize risc instructions retargetable debugger ramsey appendix 
language field constraints patterns built conjunction disjunction concatenation constructors 
notion instruction stream instructions values fit machine word 
extended language specify encoding procedures writing constructor name list field operands conjoined 
scheme sufficed describe mips sparc generate encoding procedures mld 
parts sparc describe completely unable describe addition concatenation pattern operators 
changes solved problems making patterns explicit right hand sides constructor specifications constructor types permit patterns operands 
realized reason restrict constructors specifying encoding procedures possible apply constructors pattern definitions matching statements yielding language described 
patterns simple powerful way describe binary formats instructions 
field constraints conjunction concatenation architecture manuals describe instruction machines studied 
re limited traditional instruction sets opcode operand clearly separated machines instruction formats opcode bits scattered instruction 
disjunction possible specify new instructions improves specifications making possible combine descriptions related instructions 
removing need specify instruction individually disjunction eliminates potential source error 
patterns provide high level description binary encodings constructor specifications raise level abstraction assembly language 
equations seldom needed describe instructions relative branches assembly level operands differ machine level fields 
equations express constraints part definitions architectures intel 
maximize power toolkit specification language minimizing restrictions way patterns constructors equations combined 
example patterns constructors definitions possible factor complex architectures 
equations constructor specifications encoding decoding equations matching statements 
parts language hard see language simplified destroying 
obvious candidate removal conditional assembly construct natural extension equations specify constructors requiring little extra syntax 
simplicity specifications checking done toolkit combine give users confidence correctness generated code 
funded fannie john hertz fellowship phd fellowship ibm graduate research fellowship bellcore 
colleagues room mention kind review preliminary versions 
especially indebted david keppel karin petersen thorough readings suggestions 
author information career physicist norman ramsey norman bellcore com returned computing 
likes build programming tools people 
received phd degree princeton university 
mary fernandez mff cs princeton edu phd candidate princeton university user norman programming tools 
new jersey machine code toolkit available anonymous ftp ftp cs princeton edu directory pub toolkit 
home page world wide web www cs princeton edu software toolkit 
prepared noweb tools literate programming ramsey 
sparc examples checked consistency appendix examples extracted run toolkit version 
ball thomas james larus 
january 
profiling tracing programs 
conference record acm symposium principles programming languages pages albuquerque nm 
usenix technical conference ffl january ffl new orleans la bell newell 

computer structures readings examples 
new york mcgraw hill 
bell timothy john cleary ian witten 

text compression 
englewood cliffs nj prentice hall 
duffy diane allen mcintosh mark rosenstein walter willinger 
april 
statistical analysis ss traffic data working ccs subnetworks 
ieee journal selected areas communications 
dean jay march 
gnu assembler 
free software foundation 
ferguson david 
evolution program 
communications acm 
fernandez mary 
november 
simple effective link time optimization modula programs 
technical report cs tr department computer science princeton university 
fraser christopher david hanson 
october 
retargetable compiler ansi sigplan notices 
fraser christopher robert henry todd proebsting 
april 
burg fast optimal instruction selection tree parsing 
sigplan notices 
griswold ralph griswold 

icon programming language 
second edition 
englewood cliffs nj prentice hall 
hastings reed bob joyce 
january 
purify fast detection memory leaks access errors 
proceedings winter usenix conference pages 
intel 

microprocessor programmer manual 
international organization standardization 

information processing open systems interconnection specification syntax notation asn 
iso ccitt 
nelson greg editor 

systems programming modula 
englewood cliffs nj prentice hall 
ramsey norman david hanson 
july 
retargetable debugger 
acm sigplan conference programming language design implementation sigplan notices 
ramsey norman 
december 
retargetable debugger 
phd thesis princeton university department computer science 
technical report cs tr 
january 
correctness trap breakpoint implementations 
proceedings st acm symposium principles programming languages pages portland oregon 
september 
literate programming simplified 
ieee software 
sparc international 

sparc architecture manual version 
englewood cliffs nj prentice hall 
amitabh david wall 

practical system intermodule code optimization 
journal programming languages 
available wrl research report december 
wick john dryer 
december 
automatic generation assemblers 
phd thesis yale university 
partial sparc spec partial specification sparc includes examples 
omits floatingpoint instructions flavors load store read write instructions synthetic instructions 
reader encouraged compare specification equivalent information provided sparc architecture manual sparc 
page provided cross 
fields declaration defines fields sparc instructions fields op rd op rs simm rs op imm cond disp asi disp patterns represent tables 
patterns call op sethi op patterns represent table 
patterns add xor sub andn sll orn srl xnor sra flush save restore op columns usenix technical conference ffl january ffl new orleans la patterns represent table 
ld lda ldf ldc st sta stf stc stb sth std swap op columns pattern place holder instruction stream instructions refer unknown relocatable addresses 
placeholder imm address operands defined possible formats 
constructors rs simm 
address rs simm simm 
address rs simm rs rs address rs rs rs address rs rs register immediate operands defined possible formats 
constructors rs rs simm 
simm example specifies assembly syntax binary encoding load integer instructions defined 
shows address operands delimited brackets assembly language 
patterns ld constructors address rd patterns group logical shift arithmetic opcodes 
patterns logical andn orn xor xnor shift sll srl sra arith add sub save restore alu arith logical shift assembly syntax binary encoding alu instructions 
constructors alu rs rd pattern represents column table 
patterns branch bn ble bl bleu bcs bvs ba bne bg bgu bpos cond generating expression syntactic sugar generating expression delta delta delta synthetic instructions dec defined 
assembled machine instructions sub 
constructors rd rd rd dec val rd sub rd val rd assembly syntax branch instructions defined pp 

constructors branch pc disp 
branch disp conditionally assembled instruction set defined 
definition attempts assemble set single instruction possible 
constructors sethi val rd imm val sethi rd imm set val rd val sethi val rd val val 
val rd lo val sethi val rd rd lo rd usenix technical conference ffl january ffl new orleans la 
