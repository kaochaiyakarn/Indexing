architectural pattern real time control software bran selic limited ontario canada mail bran ca introduce high level design pattern applied broad class real time systems 
pattern call recursive control provides systematic method dealing traditionally considered ancillary software functions system start shut failure detection recovery line maintenance 
large systems functions represent code written lower priority system design 
result systems difficult control evolve 
recursive control pattern implements clear separation control aspects aspects real time system allowing defined modified independently 
pattern applied recursively means applicable wide range levels scopes starting highest system architectural level individual components 
show basic features object paradigm inheritance encapsulation great advantage simplify realization increase effectiveness recursive control pattern 

software system set primary functions services provides 
packet switching system example primary function transfer data physical site 
asked construct system natural proper design team focus primary functions raison etre system 
dealing real time applications particularly systems required provide continuous operation quickly notice additional set secondary functions required 
example computer packet switch necessary provide capabilities specify change subscriber data synchronize switches network endusers equipment system starts undertake recovery actions case hardware software failures 
think pertaining care feeding system 
precisely support activities required bring system operational state sustain state face various planned unplanned disruptions 
essential main functional objectives met 
term control collectively refer secondary capabilities terminology inspired classical control theory 
specifically subsume types activities mechanisms term system activation start deactivation failure detection recovery preventive maintenance performance monitoring statistics gathering synchronization external control systems line installation loading new hardware software control issues pragmatics making systems may appear glance implementation design concern 
packet switch example need provide manage subscriber data need recover equipment failures exist independently particular implementation 
fact examines software structure significant real time system type notice major portion code devoted realization control capabilities 
strong indication non trivial require care systematic treatment primary system functionality 
fact argue handling support functions provides framework functional concerns addressed 
section example simple communications system illustrate control issues clarify terminology 
section 
describe recursive control pattern ensures control properly addressed real time systems way jeopardize functional concerns 
section 
describe principles combined key characteristics object paradigm provide efficient effective means implementing recursive control design pattern 

example illustrate relationship control function consider example communication system uses called alternating bit protocol 
exact details protocol scope suffice say flow controlled protocol deals partially negative effects unreliable communications medium message duplication reordering loss 
typical execution sequence protocol depicted 

alternating bit protocol typical scenario function system transfer information users server client interconnected unreliable communications network 
system consists sender component collocated server receiver collocated client 
server periodically formulates information packet pkt sends client services sender component 
receives acknowledgment ack client system server transmits packet 
protect reordering duplication loss messages sender labels information packet sequence number refrains sending packet previous acknowledged receiver 
avoid confusion packet acknowledged receiver includes sequence number successfully delivered packet acknowledgment 
packet sequence number zero sent acknowledgment sequence number zero expected 
expected acknowledgment arrive predefined maximum time interval original information packet resent sender 
simplicity assume server sends packet previous acknowledged client 
simple case level communication protocol high level protocol client server overlayed lower level protocol sender receiver 
lower level protocol hides complexity dealing unreliable communications medium simplifying implementation higher level protocol 
common way specifying lower level alternating bit protocol pair server sender receiver client pkt pkt ack pkt ack ack pkt pkt ack pkt ack ack simple cooperating finite state machines shown 

alternating bit protocol formal specification form specification take account variety practical control related concerns addressed 
assume basic capabilities required system sender receiver need initialized configuration data address data uniquely identifies station 
assume data comes message sent external control entity 
maintenance reasons necessary able restart start protocol entities reloading data 
restart command comes form message sent external control entity 
cases necessary fully reset entire sender receiver complex 
full reset requires configuration data reloaded 
reset initiated message sent external entity 
ensure proper synchronization ends case resets restarts assume sender receiver commence protocol explicitly directed external start message 
sender receive expected acknowledgment receiver retries retries initiated time outs triggers enter error state restarted reset 
state longer responds receiver 
similarly define error state receiver entered receives wrong signals succession sender 
purpose error state identify ends protocol hopelessly sync needs done resolve deadlock 
additional messages added specification control signals serve properly synchronize operation ends realistic environment effect represent second protocol protocol sender receiver immediate controller 
details alternating bit protocol defined process controlling ends described state machine 

fact limited set failure modes considered example real implementation contend additional ones 
input sent input sent ack ack ack ack pkt pkt pkt pkt pkt pkt output received output received pkt pkt pkt pkt pkt ack ack ack ack ack pkt ack sender receiver timeout 
control state machine sender receiver operational state diagram really exist just shorthand notation finite state machines 
actual complete diagram sender shown 
reduce visual clutter transition labels shown 

complete state machine diagram sender obvious difference specification sender 

complex 
general synthetic quality graphical rendering lost cases excessive detail 
complexity removed various graphical shorthand tricks constructs state 
remains issue protocol control protocol hopelessly intertwined defined independently 
protocol depicted pure form context protocol 
hinders understanding complicates maintenance 
fully aware separate nature protocols may maintenance activity inadvertently couple violate trying fix 
serious problem 
noted control protocol sender error error reset configured operational restart config start restart reset error configured input sent input sent receiver practically 
common feature designed control systems decouples control system specifics controlled 
unfortunately merging protocols single super protocol common control protocol needs reimplemented separately cloned controlled element 
furthermore control protocol needs changed modifications manually propagated separate instance 
increases amount effort probability coding errors 

dealing control real time systems separating control function previous section said desirable keep control protocol separate possible functional protocol allow change independently 
note example implicitly assumed object controlling sender user services server object 
sound engineering practice established principle separation concerns security reasons 
enforce separation helpful separate control interface object functional interface 
step propose components system responsible control separated responsible functional service aspects 
call principle separating control function 
expected result decoupling relative complexity aspects reduced easier modify affecting 
implicit principle view areas concern equal significance 
contrast widely held notion control aspects secondary import 
principle taken directly classical control theory responsibility control typically associated component called controller distinct connected remaining functional parts system shown 

classical control system model separating control policies control mechanisms control strategies systems prone change 
example telephone switch may started stand system integrated greater corporate communications network 
means internal control system evolve autonomous unit executive agent higher authority 
simplify standardize handling situations introduce design principle partly prior design control aspects system control policies kept distinct control mechanisms 
control policies realized software decisions state feedback issues control commands secure decisions 
control mechanisms hand components provide feedback sensors respond commands actuators 
example communications system component detects failure transmission link part control mechanisms 
component fault recovery procedure part control policies 
cleanly separating possible change recovery procedure affecting failure detection software 
recursive control pattern structure recursive control pattern embodies design principles described 
structural aspect pattern illustrated 
purpose functional components canonical model provide 
terms sensors actuators typically refer software entities drivers actual hardware 
part functional controller input output required system functionality 
functionality accessed functional interfaces system 
operational state functional components controlled internal control component system 
control policy managing system may integrated internal control may come external higher level control system control interface system 
note internal control shown single monolithic component may realized confederation separate components 

structure recursive control pattern diagrams convention explicitly rendering object interfaces smaller squares appear border object 
clarity control interfaces represented white squares filled black squares denote functional interfaces 
black line segments connect object interfaces abstractions various types inter object links pointers sockets pipes 

recursive application pattern model functional component sets interfaces control interface internal system internal control functional component control interface functional interfaces functional component 
system internal control functional component control interface 
int control func cmp func cmp 
control system functional interface services provides clients 
client interface functional components exported interface system 
net result system control interface number functional interfaces 
note viewpoint functional components called internal control element acts external controller 
analogy suggests recursive application pattern complex functional components need decomposed simpler subsystem modules 
recursive nature pattern means principle arbitrarily complex systems 
collaborations control input reset received top level control interface internal controller system translates control inputs subset top level functional components 
functional components decomposed inputs received internal controllers turn resolved finer control signals functional subcomponents 
effect contained internal controllers provide set control mechanisms realizing control policies higher level controllers 
reverse direction functional components notify controllers detect control situation various types component failures requires intervention controller 
functional components collaborate external clients provide respective services 
applicability recursive control useful situations typical event driven real time applications complex software server system needs controlled dynamically non trivial manner 
particularly applicable situations high likelihood control policies may change time 
participants internal control accepts control inputs received external higher level controllers system control interface inherent control policies resolves control commands functional components directly control 
reacts internal events emanate controlled functional components 
responses may purely local control policies built controller may result control events relayed higher level controller handling 
completely autonomous systems may control interface top level 
functional components provide basic service functions system functional interfaces set mechanisms effecting control policies controllers 
responsible administering internal control policies contained internal controllers control situations require intervention controllers 
complex functional components may decomposed internal control set lower level functional components 
consequences recursive control pattern increases likelihood software control issues properly addressed design complex real time software 
greatly simplifies implementation complex systems recursive application single structural pattern 
essence provides basic architectural structure systems levels decomposition top bottom 
simplifies development understanding functional control aspects decoupling large extent 
allows control policies changed affecting basic functionality system 
relationship basic patterns recursive control pattern combination fundamental patterns 
principle separating control function embodiment strategy pattern defined 
main idea pattern protect client having contend implementation differences strategy service requires 
control component recursive control pattern plays role context strategy pattern 
delegates realization control strategy different functional components concrete strategies common interface 
structurally recursive control pattern related composite pattern described 
composite recursive pattern situations necessary treat components uniformly regardless ar primitive composite objects 

recursive control variant composite pattern structural diagram recursive control shown 
note participants pattern common control interface subclasses common class comp 
subclasses system represents control function structure 
consists exactly component number leaf functional components lower level systems 
behavior perspective recursive control incorporates chain responsibility pattern 
external controllers issuing control inputs unaware hierarchy internal controllers responsible executing corresponding control actions simply issue commands system unique control interface 

implementing recursive control look recursive control pattern implemented 
particular show hierarchical state machine formalisms statecharts commonly modeling complex event driven systems great advantage purpose especially combined inheritance mechanism 
hierarchical finite state machine formalisms allow entire state machine abstracted single state higher level abstraction 
allows complex event driven behavior modeled graduated series hierarchically related state machines 
example state machines 
sender receiver subsumed operational state control state machine 
resulting top level state machine objects depicted 
notation 
transitions reset restart emanating border containing state machine shorthand way saying transitions originate state 
system 
top level state machine sender receiver controlled component perform function appropriate operational state 
alternating bit protocol example sender receiver pass configured state received configuration data explicitly activated synchronization reasons perform primary function 
means specifying behavior control predicates function 
dominant upper level behavior control framework subsumes encapsulates functional behavior 
note sender receiver top level behavioral specification 
different functional state machines represented left right sides specification 
appears objects require separate state machines top level state machine differ way operational state decomposed 
hierarchical nature operational state indicated graphically thicker border 
point take advantage inheritance define class hierarchy common class captures top level behavior distinct subclasses sender receiver 
superclass inherits shown operational state simple leaf state subclasses refined 
sender subclass correspond left hand side 
receiver subclass matches right hand side 
effect operational state state analogous virtual function 
virtual functions equivalent purpose natural technique applications directly implemented state machines 
fact shown class serve parent components regardless place system hierarchy conform control protocol 
saves development time simplifies maintenance encourages uniform control strategies ultimately leading systems easily controlled 
net result reliable system produced significantly effort conventional development techniques 
note inheritance form template method pattern defined 
error error configured operational config start restart reset top 
inheritance hierarchy alternating bit protocol consider case complete system distributed processing nodes shown 
contains sender server application uses sender see contains client receiver 
ensure proper operation functional components node introduce internal component 
things component ensures sender receiver activated server client 
rationale introduce component synchronizes operation nodes 
example server node fails reason controller notify client node proper recovery action undertaken switching server 

client server system example sender receiver ack ack pkt config start restart reset ack pkt pkt config start restart reset config start restart reset controlled component classes server sender client receiver structure shown 
fact application recursive control pattern 
case examples internal controllers occur different levels decomposition 
subclasses class 
sender receiver server client components different subclasses class aggregate node components different subclasses class system 
operation control hierarchy illustrated boot scenario sequence start time components automatically come state shown 
controller fully activated top level system driven higherlevel external control system automatic proceeds activate node controllers proper sequence example activating server node client node controllers 
node controller activated turn activate corresponding functional components order 
analogous activities occur control situations component failures controlled shutdown 

summary design real time software standard practice treat control functions second level concerns despite fact aspects represent greater portion software 
leads unnecessary complexity diverse inconsistent control policies different levels system control functional aspects system inextricably coupled understood modified independently 
negative impacts system reliability maintainability 
introduced design pattern called recursive control helps avoid problems practically real time system need dynamic control 
characteristics pattern system service functionality encapsulated control functionality 
reasonable takes account system reach operational state properly perform service function 
recursive control pattern reverses traditional design practice places control function 
important feature pattern applied level decomposition including top level architectural pattern 
pattern applied recursively uniformly result system simple highly controllable 
recursive control pattern expressed particularly concisely effectively inheritance capture common control behavior class 
selic ward real time object oriented modeling new york john wiley sons 
bartlett wilkinson note reliable full duplex transmission half duplex lines comm 
acm vol 
pp 

gamma helm johnson vlissides design patterns elements reusable object oriented software reading ma addison wesley 
harel statecharts visual formalism complex systems sci 
comp 
programming july pp 

