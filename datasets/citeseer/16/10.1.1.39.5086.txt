warm fusion deriving build recursive definitions john launchbury tim sheard oregon graduate institute science technology box portland usa fjl cse ogi edu program fusion process separate pieces code fused single piece typically transforming multi pass algorithm single pass 
clear process especially successful loops recursions expressed catamorphisms foldr constructor abstraction build 
show transform recursive programs form automatically enabling fusion transformation applied easily 
significant advantages multi pass algorithms intermediate data structures created traversed 
particular passes may relatively simple easier write potentially reusable 
separating distinct phases possible focus single task attempting things time 
classic toy example compute sum squares numbers write sum map square 
intermediate lists 
list numbers second list squares numbers 
lists serve useful purpose acting glue binds components algorithm 
case components entirely standard shelf parts 
rub 
direct implementation sum squares literally construct traverse discard intermediate lists degrade execution time compared function written compute sum squares directly say accumulating parameter 
problem simply lists 
compiler writers commonly face challenge deciding passes compiler perform 
exactly tradeoff 
increasing number passes means simpler modular maintainable code decreasing number passes leads greater run time efficiency 
case intermediate structure tree 
telling example depth traversal graphs 
standard algorithms may expressed succinctly simply explicit manipulations graph depth spanning forest execution literal presence forest inefficient kl 
long sought solution tension modularity reuse hand efficiency increase transformation power compilers programmer may feel liberated write programs component style confident compiler fuse components removing intermediate structures 
general course expect intermediate structures removed data structures serve true computational role 
hope unnecessary intermediate structures removed possible 
show preprocess recursive function definitions turning form particularly suited enabling component fusion 
background darlington burstall showed fold unfold transformations human help produce function definitions composition functions db 
turchin applied similar ideas supercompilation process tur 
performed symbolic execution program building residual program computations performed 
patterns nesting recursive calls functions spotted single new recursive function produced 
process showed high degree automation method generalisation control termination crude 
wadler developed ideas transformer wad 
multi pass programs intermediate lists converted single loops imperative language 
clear method expressed functional language refined idea calling method deforestation wad pun stuck commonly 
order precise intermediate lists removed wadler defined treeless form function definitions functions guaranteed internal data structures 
proved compositions treeless functions single treeless function 
termination proof followed fw 
original deforestation limited order 
attempts extend higher order met limited success far 
particular hard find tie recursive knot 
termination proofs hard 
fusion process received impetus different direction entirely 
rejecting focus arbitrary recursive programs focussed fusion catamorphisms literally formers list version variously known fold ml reduce early versions miranda foldr haskell 
catamorphisms express regular recursion data structures 
generalising datatype specific bird malcolm promotion theorems category theory describe fuse catamorphisms mal 
theory turned practice sheard fegaras sf 
working language general recursion containing catamorphisms generalisation homomorphisms sheard fegaras implemented fusion algorithm promotion theorems 
problem arises practice 
user supplied guidance fusion engine attempts fuse leading combinatorial explosion 
time gill launchbury peyton jones explored step fusion algorithm relied functions written highly stylized form 
functions consume arguments catamorphism foldr produce list results abstracting cons nil new language construct called build 
unrealistic expect programmers program way list processing functions haskell standard prelude reprogrammed style 
combination standard functions automatically including example sum squares example 
builds 
generalise sheard fegaras fusion algorithm cope explicit recursion automatically derive build cata form functions definitions written common recursive style 
step fusion law achieve inter function deforestation 
steps process bear interesting physical analogy 
function definitions expose nucleus build cata form separate components program plasma able fuse single step simply bringing contact 
experiments suggest realistic attempting cold fusion original function definitions 
step approach addresses shortcoming previous methods 
ffl limited lists works large class data structures 
ffl scope fusion engine limited body function 
fusion engine deforestation 
helps control combinatorial explosion 
ffl time process need search arbitrary patterns recursive calls 
fusion engine simply needs spot recursive call function currently processing 
cost deriving build cata form amortised fusions 
pay generate form may fuse times functions 
language demonstrate techniques language 
program sequence definitions 
function definitions may directly recursive techniques direct recursion mutual recursion recursion type definitions specified explicit recursion operator rec 
example lists binary trees may defined follows 
list ff rec fi nil cons ff theta fi tree ff rec fi tip node fi theta ff theta fi formed type constructor definition constructors decomposed sequence equations recursion opened argument constructor named 
example list ff rec fi list ff fi list ff fi nil nil ff fi cons cons ff fi nil ff fi cons ff fi ff theta fi type constructors correspond functors categorical sense natural action functions types 
example natural action list function map list 
particular ec constructor functors definitions need 
ec turn stylised form ec ff fi fi variable type recursion occurs 
variable need parameterise function part ec instantiated identity function purposes 
define ec int ff fi theta theta tn xn tn xn map map usual functional component functor example get functional behaviours nil cons nil cons notation vector xn especially size depends context 
addition sigma pi definition sigma express functions sum ff ff product functions summand pi ff ff 
product constructors nil cons type list list ff list ff type cata list fi fi list ff fi 
type constructor constructors specified 
example list nil cons list list ff list ff 
variables constants en tuples en applications case 

en pattern matching case lambda abstractions vn abstractions tuples cata catamorphisms build builds constructors decl recursive function definition ff con type definition con rec fi cn tn theta theta tn ff int constructor argument types syntax semantics language standard nonstrict language addition build cata 
semantics constructs obey equations 
cata fn cata fn build cata fn build fn fn pi ff ff viewed type ff ff 
catamorphism cata fn viewed function replaces constructor data structure corresponding function example repeatedly applying equation cata list cons cons nil cata list cons nil cata list nil build applied function abstracts constructors datatype build list applies function argument constructors list nil cons equation reconstructs list cons cons nil detailed description build section 
assume renaming done danger name capture simplicity restrict singly recursive datatypes functions mutual recursion expect algorithms natural extension general case 
significantly restrict ground data types data types built function space 
hutton meijer may point way relaxing restriction mh 
practical context data types occur algorithm simply attempt fuse 
build form part language intent internal purposes exposed programmer 
method introducing build term guarantees validity cata build equation general rule valid 
build exposed programmer corresponding check required type rule gill launchbury peyton jones serves purpose example 
stage fusion stated earlier fusion process proceeds separate phases 
individual function definitions preprocessed attempt re express definition terms build catamorphism 
second separate invocations functions fused step fusion rule equation build cata cancel 
reality interplay phases 
reverse example show worth advantage having preprocessed functions body function preprocessed 
life cycle function phases distinct 
principle preparing phase simplicity 
suppose function foo body list int list int body function valued expression usually form calling foo recursively 
may redefine foo follows foo build list cata list body cata list nil cons thing going 
apply particular form identity function cata list nil cons called copy function body argument 
purpose attempt fuse body catamorphism 
successful managed recursion body catamorphism 
second change foo involves introducing build list purpose build function cor responds data structure list abstracted constructors data type 
abstraction easily achieved cata described earlier cata replaces constructor data structure associated function associated functions variables abstracting constructors 
goal fuse cata body replacing explicit output constructors parameters rewrite rules fusion algorithm expressed terms rewrite rules order fuse catamorphisms allow rule set grow shrink dynamically 
basic rewrite rules called 
syntax 
denotes capture free substitution free occurences final rule performs step deforestation 
noted section need mechanism guarantee correctness 
purposes guarantee correctness limiting build introduce corresponding cata example details section 
assuming rewrites preserve equality argument build remain equal term form cata cata build cata build cata cata cata cata cata demonstrating validity cata build law 
advantageous extend notation rewrite rule cover case lhs rhs tuples 
introduce notation case 
define xn yn mean set rules extracted component wise fx xn 
extend notation allowing functors tuples 
fec xn yn equivalent set rules fz zn term depending ec gained expanding definition ec give vector rules 
example fe cons fx fusing catamorphisms success technique depends critically ability fuse catamorphisms 
algorithm promotion theorem describes composition strict function cata expressed cata mal mfr 
yn yn cata cata instantiating theorem lists gives nil nil cons cons cata list nil cons cata list nil cons example helpful understanding promotion theorem doing 
theorem taken list cons cons nil cata list nil cons cons cons nil cons cons nil applying second hypothesis twice allows push way list changing cons cons process 
cons cons nil cons cons nil cons cons nil applying hypothesis removes altogether cons cons nil cons cons nil just cata list nil cons cons cons nil intend apply promotion theorem left right rewrite rule 
order find set functions meet conditions premise 
previous sheard fegaras described fusion algorithm computed terminated failure sf 
challenge computing presence ec term right hand side premise general case 
list instance theorem manifests call cons righthand side second hypothesis 
term immediate definition approach take generate functions introduce additional free variables extend current set rewrite rules additional temporary rules describe eliminate combinations old variables favor new free variables 
rewriting old eliminated successfully discovered definition failure reported 
see section detailed example 
note additional rules valid body function discarded rewriting body terminated 
formal introduce sequent notation 
write gamma 
mean rule set term rewrites step 
notation gamma 
reflexive transitive closure 
complete rewrite system 
rule simply applies existing rewrite rules context 
second rule interesting 
performs cata fusion 
term form cata fn encountered constructor data type extended rewriting system constructed attempt produce body functions note far rewriting system concerned vectors new variables treated literals term rewriting variables 
indicate bold font 
result rewritings contains occurrence new free variables premise rule fails cata fusion performed 
example see rules action consider fusing sum function map expressed catamorphisms deal explicit recursion 
linear vn en 
vn 
en linear case 

en 
linear cata fn cata fn cata fn build fn basic set rewrite rules fl rg gamma 
fec zg gamma 
cata gamma 
cata fv rewrite algorithm section 
definitions sum cata list map cata list nil cons enable single catamorphism rule sum ffi map gamma 
cata list nil cons successfully derive nil cons extended rewrite systems 
case nil nil fe nil sum cons cons fe cons sum sum cata list fy cata list rewriting nil case immediate nil cata list nil gamma 
cons case proceeds follows cons cata list cons gamma 
cata list cons gamma 
cata list gamma 
cases results eliminated rewriting main term may proceed resulting sum ffi map equal cata list expressing recursive functions catamorphisms 
cata fusion fusion algorithm provides mechanism computing equivalent cata function 
unary function ff express identity function catamorphism compose left apply fusion algorithm 
identity function type easily expressed constructors arguments catamorphism operator cata cn 
non unary recursive function additional difficulties 
argument catamorphism applied 
subexpression body corresponds tying knot recursive cycle 
developed heuristics address difficulties wide variety cases 
collect explicit arguments function literal outer lambdas look outermost case expression expect explicit arguments 
function written form give 
may restrictive successfully catches definitions written patternmatching arguments 
formally definition body express structure body form body xn case xk pats non case context defined build build xk fv xk fv pats 
condition occur free variables context ensures recursive call guarded case statement 
restriction xk rejects case full primitive recursion 
body structure give generate new function definition follows xn xk xk case xk pats fv pats gamma fv body gamma 
function wrapper worker sense peyton jones launchbury 
wrapper functions freely unfolded substitute new body definition recursive function outer case argument 
attempt fuse definition copy function obtain version successful may substitute non recursive definition back new obtaining definition catamorphism 
see practice consider example map 
map case nil 
nil cons zs 
cons map zs breaking definition components map map map case nil 
nil cons zs 
cons map zs unfolding new definition map obtain recursive definition map case nil 
nil cons zs 
cons map zs function body case expression argument readily fused cata list nil cons obtain definition form cata list nil cons note construction function map strict argument perform case analysis fusion theorem applies 
see fusion action consider rules 
nil time cons fy map 
nil cons computed nil map nil gamma 
nil cons map cons gamma 
cons condition eliminated resulting terms 
note implementation substitutes body map 
place information definition map guarantees unfolded exactly 
applying various rules obtain nil nil cons cons substituting map back definition map gives new definition map catamorphism 
map cata list nil cons static parameters tuples irrelevant cases astute reader notice previous example higher order catamorphism term function waiting applied generality essential useful case 
value inherited recursive applications cata identical 
possible improvement algorithm static parameters inherited recursive levels catamorphism 
done case map obtained map cata list nil cons gets 
higher original definition comes passing explicitly argument map reduce arguments worker function map case omitting arguments unchanged recursive calls similar cases catamorphism order 
note worker function right viewed definition local wrapper contains extra free variables 
definition substituted back definition worker free variables captured 
obvious extension allow tuples 
addition see couple examples pass case argument case variable 
static parameter optimisation additional generality useful critical 
complicates notation left algorithm definition 
conversely introduce additional challenges feel free assume static parameters tuples irrelevant cases handled sensibly 
linear reverse linear version reverse function provides example changing recursive parameter leading essential higher order catamorphism 
case nil 
cons zs 
zs cons definition form constructed context machinery identical ready fuse cata list nil cons 
nil nil nil gamma 
nil cons case cons fe cons fy rewriting proceeds follows cons cons gamma 
cons gamma 
cons eliminated resulting terms may rewrite ffi cata list nil cons gamma 
cata list cons define cata list cons expressing terms builds purpose build allow represent term data type function parameterised output constructors 
example literal list cons cons cons nil function 
expression longer list 
function 
introduce construct data type called build defined build 
reducing term build list simply reconstructs list cons cons cons nil 
course purpose introducing build simply reduce away 
purpose enable build cancel enclosing catamorphism performed cata gamma build law remove need construct intermediate structure 
introduce appropriate builds expression applying syntax syntax translation defined follows variable build cata consider definition function append 
append case nil 
cons zs 
cons append zs applying body gives append build list cata list case nil 
cons zs 
cons append zs aim remove unnecessary intermediate data structures build strategy appears bad idea generate new intermediate data structures 
intermediates exist temporarily fused components function definition 
typically newly introduced build cata come rest immediately surrounding existing case expression append example 
distinct ways proceed 
may distribute new cata case expression convert term single catamorphism techniques section 
may turn term catamorphism immediately fuse outer catamorphism new fusion typically higherorder fusion described section 
second fails fusion steps go succeeds give better results 
constrast robust examples tried succeeds second 
common examples methods completely equivalent succeed produce exactly term 
case append 
applying algorithm gives result append build list cata list cata list equivalent version 
difference methods shows reverse second method fails linear counterpart second superior 
reverse example define reverse usual 
reverse case nil 
nil cons zs 
append reverse zs cons nil pushing build place gives reverse build list cata list case nil 
nil cons zs 
append reverse zs cons nil strategy section distribute cata case 
simple rewriting get term reverse build list case nil 
cons zs 
cata list append reverse zs cons nil turn single catamorphism proceed section 
express reverse wrapper worker reverse build list reverse reverse case nil 
cons zs 
cata list append reverse zs cons nil unfolding reverse reverse gives reverse case nil 
cons zs 
cata append build list reverse zs cons nil recall build cata form append append build list cata list cata list ec ffi ec ffi ffi ffi cata cata strict second order fusion theorem fec ffi ec ffi rg fg zg gamma 
cata gamma 
cata fv rewrite nd order cata fusion substituting performing cata build reductions gives reverse case nil 
cons zs 
reverse zs position turn recursive definition catamorphism 
assuming optimise static parameters get higher order catamorphism 
reverse cata list substituted back definition reverse giving reverse build list cata list interestingly fusion performed append turned original quadratic definition reverse linear version build cata new definition reverse expanded obtain exactly usual linear version 
reason worker reverse abstracted tail list parameter abstraction induced build 
carry program starting linear version reverse result quite 
obtain result build list cata list cata list cons true intermediate list inherited constructed abstracted order avoid need adopt method cata distributed case fused result turning inner term cata 
second fusion typically second order address 
second order cata fusion second order catamorphism cata catamorphism traverses structure constructs function 
assuming static parameter optimization higherorder catamorphisms arise recursive invocations catamorphism really need inherited attribute 
example iterative reverse works passing reversed front list inherited attribute 
level augmented accumulated list returned 
need fusion algorithm handle higher order catamorphisms 
algorithm derived fundamental theorem 
theorem may proved easy fixed point induction 
consider instantiation theorem case lists 
ffi nil nil ffi ffi ffi cons cons cata list nil cons cata list nil cons intend interpret law left right rewrite rule 
difference function left right instantiated 
general theorem allows sufficient cases seen 
general case poses problem generating appropriate rewriting 
example example consider fusing function cata list variables iterative reverse function expressed second order catamorphism 
exactly sort situation succeed method section 
section cata list cons fusion want perform cata list nil calculate additional rules cases 
nil additional rules fe nil cata list ffi nil ffi cata list list zg 
list zg list zg cons writing cata list brevity fe cons ffi cons ffi fg zg ffi ffi fg zg fs ffi ffi zg fs zg additional rules cons fs cata list cata list cata list zg performing rewriting cons nil obtain fused version cata list nil follows nil cata list gamma 
cata list gamma 
cons case cons cata list cons gamma 
cata list cons gamma 
cata list cons gamma 
cata list gamma 
gamma 
eliminating putting context build obtain build list cata list equivalent result obtained quadratic reverse 
status algorithm described handles wide variety cases expressions consumers producers structured types 
expressions producers objects transformed build consumers objects transformed cata functions producers objects consumers objects transformed build surrounding cata function producer consumer introduce build recursion try turn recursive function cata 
methods section initially try second succeeds produce superior results 
fusion algorithm fails strategy attempt method pushing cata case attempt obtain catamorphism 
works simply give leave function defined 
examples upto function produces lists integers 
upto low high case low high false 
cons low upto low high true 
nil setting integers freely constructed upto producer consumer merely obtain build form upto low high build upto low high upto low high case low high false 
low upto low high true 
function produces consumes lists zip function 
interesting recurses arguments simultaneously zip case nil 
nil cons 
case nil 
nil cons 
cons zip resulting wrapper worker pair wraps build overs lists cata lists 
zip build list zip zip cata list case nil 
cons zs 
zs zip argument traversed cata 
second taken apart explicit case analysis 
sf zip fuses argument 
take function interesting context non trivial testing integer argument original recursive definition 
tying recursive knot take complicated fact context needs duplicated inside cata 
example take case true 
nil false 
case nil 
nil cons 
cons take gamma results take build list case true 
nil false 
cata list case gamma true 
false 
gamma flatten function trees lists illustrates case producer consumer different types 
flatten case tip 
nil node 
append latten cons latten interesting note reverse function additional abstraction introduced build produces linear flatten function flatten build flatten latten cata tree final example taken slightly richer type intended indicate algorithm perform applied syntax structures 
consider types exp num int id string plus fi fi code int string add represents expressions second postfix code form 
typical translation function defined follows 
postfix case num 
cons nil id 
cons nil plus 
append postfix append postfix cons add nil applying transformation gives postfix build list postfix postfix cata exp add 
implemented algorithm described currently form toolbox operations applied function definitions 
step combine single operation takes haskell module say rewrites definitions form 
doing provide realistic experience heuristics 
notable shortcoming presentation informal types critical deciding form build cata 
significant benefit exploring algorithm formally extended nd order polymorphic lambda calculus 
acknowledgments authors wish acknowledge leo fegaras careful reading earlier draft 
research reported supported usaf air materiel command contract 
db darlington burstall system automatically improves programs 
acta informatica pp 
fw ferguson wadler deforestation 
proc 
glasgow workshop functional programming scotland dept cs glasgow 
gill launchbury peyton jones short cut deforestation 
proc 
acm fpca copenhagen 
kl king launchbury structuring dfs algorithms haskell 
proc 
acm popl san francisco 
mal malcolm 
homomorphisms 
mathematics program construction pp 
springer verlag june 
mfr meijer fokkinga paterson functional programming bananas lenses envelopes barbed wire 
proc 
fpca lncs 
mh meijer hutton bananas space extending function space types 
proc 
fpca peyton jones launchbury unboxed values class citizens non strict functional language proc 
fpca lncs sv 
sf sheard fegaras fold seasons 
proc 
acm fpca copenhagen 
sf sheard fegaras zhou improving programs induct multiple inductive structures 
acm sigplan workshop partial evaluation semantic program manipulation pepm 
orlando florida 
june 
tur turchin concept supercompiler 
acm toplas pp 
wad wadler better laziness lazy evaluation garbage collection compile time 
proc 
acm fp austin 
wad wadler deforestation transforming programs eliminate trees 
tcs pp north holland 
