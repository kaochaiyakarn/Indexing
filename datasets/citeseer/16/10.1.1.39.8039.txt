functional programming january fl cambridge university press funct pearls poor man concurrency monad koen claessen chalmers university technology email koen cs chalmers se adding primitives language define concurrency monad transformer haskell 
allows add limited form concurrency existing monad 
atomic actions new monad lifted actions underlying monad 
extra operations fork initiate new processes provided 
discuss implementation examples illustrate usefulness construction 
concept monad wadler nowadays heavily modern functional programming languages 
monads model form computation non determinism stateful calculation 
solve traditional problems functional programming mutable state offers general framework abstracts kinds computation 
known monads model concurrency 
usually constructs imperative monad operations resemble unix fork jones hudak 
reasons efficiency control concurrent haskell peyton jones provides primitive operations defined outside language 
presents way model concurrency generalising arbitrary monads 
idea atomic actions monad lifted concurrent setting 
explore idea language add primitives 
monads express properties monads haskell type class definition 
bind operator monad denoted unit operator return koen claessen class monad 
ff 
ff fi fi return ff ff furthermore called notation syntactic sugar monadic expressions 
example illustrates traditional monadic expression left written notation right 
expr expr expr expr expr expr return expr return expr example monad output called writer monad 
monad extra operator called write takes string argument output side effect monad 
bind operator 
monad take care combining output computations 
monad having operator instance class 
class monad writer write string typical implementation monad pair containing result computation output produced computation 
type ff ff string instance monad return instance writer write note bind operator concatenates output subactions 
monads come equipped run function 
function executes computation values inside level downwards 
monad run function call output returns output computation output ff string output functional pearls monad transformers monad parametrised monad 
done add functionality existing monad 
case speak monad transformer liang 
example exception monad transformer adds way escape monadic computation error message 
general operations specific monad lifted new extended monad 
express type class 
class lift monad ff 
ff type constructor forms monad transformer operation lift transforms action monad action monad discuss monad transformer called interesting property monadic action lifted new monad considered atomic action concurrent setting 
extra operations provided monad example fork deals process initiation 
concurrency going model concurrency 
allowed add primitives language going simulate concurrent processes interleaving 
interleaving implements concurrency running part process suspending allowing process run 
continuations suspend process need grab stick away 
continuations excellent way doing 
change function continuation passing style adding extra parameter continuation 
producing result directly function apply continuation result 
view continuation computation specifies result function 
computation type action function uses continuation result type ff type 
type ff ff action action type action contains actual computation 
case want arbitrary monad want action dependent monad type ff ff action action koen claessen concurrency monad transformer 
means monad monad instance monad monad return sequencing continuations done creating new continuation left computation contains right computation 
unit operator just passes argument continuation 
actions type action specifies actual actions new monad 
type look 
reasons simplicity flexibility expressiveness scholz implement datatype describes different actions provide monad 
need atoms computations monad inside continuation want atomic computations return new action 
need constructor creating new processes 
lastly provide constructor continuation process 
call empty process 
data action atom action fork action action express connection expression type ff expression type action define function action transforms 
finishes computation giving continuation 
action monad ff action action constructors datatype action easily accessible define functions correspond 
create action monad function function atom turns arbitrary computation monad atomic action runs atomic computation returns new action continuation 
atom monad ff ff atom atom return monadic map functor superclass monad haskell map functional pearls addition function uses constructor called discards continuation computation 
monad ff access fork define operations 
called par combines computations forking passing continuation parts 
second fork resembles traditional imperative fork 
forks argument turning action continues passing continuation 
par monad ff ff ff par fork fork monad ff fork fork action type constructor monad transformer 
lifting function function atom lifted action atomic action concurrent setting 
instance lift atom defined ways construct actions type ff 
model concurrently running actions 
interpret 
semantics moment status computation going modelled list concurrently running actions 
scheduling technique called roundrobin interleave processes 
concept easy empty list processes done 
take process run part take continuation put back list 
keep doing recursively list empty 
implement idea function round round monad action round return round case atom am am round fork round round koen claessen atom executes argument puts resulting process back process list 
fork creates new processes discards process 
monad need run function 
just transforms argument action creates singleton process list applies round robin function 
run monad ff run round action see type ff disappears result type 
means lose result original computation 
odd cases examples interested side effects computation 
possible generalise type run goes scope 
examples examples monads lifted new concurrent world 
concurrent output recall writer monad example sect 

try lifting monad concurrent world 
want say instance writer monad lifted concurrent writer monad 
instance writer writer write lift write function lift atom monad transformer write action lifting atomic action 
means computation produce output write writing 
example define function loop function works writer monad 
takes argument string writes repeatedly output 
loop writer string loop write loop function define computation ff creates processes constantly writing 
process writes string fish writes cat 
want say monad transformers haskell currently allow express 
functional pearls example writer example write start 
fork loop fish loop cat result expression output run example looks string 
start 
defined write atomic action writing fish cat interfere 
want finer grained behaviour split write action write actions separate characters string 
simple way doing change lifting write instance writer writer write return write lift write write lifting done character character 
result expression output run example looks 
start 
merging infinite lists known problem called merging infinite lists follows 
suppose infinite list infinite lists want collapse list big infinite list 
property want hold element original lists reachable finite number steps new list 
technique example prove set rationals countable number elements 
writer monad new lifting solve problem infinite list infinite strings 
idea string create process writes string 
fork infinite number processes run resulting computation output desired infinite string 
take step back order piece useful theory 
monads called monoidal structure 
means operator denoted combines computations type identity element operation called zero haskell say class monad monoidal ff ff ff zero ff koen claessen function concat type monoidal ff ff uses zero concatenate possibly infinite list computations 
reason looking admits monoidal structure parallel composition par represents process represents identity element zero instance monad monoidal par zero means concat transform infinite list processes process concurrently runs computations 
merge infinite list infinite strings transform string writing process fork concat extract output 
merge string string merge output run concat map write course function works finite lists adapted act general lists strings 
concurrent state haskell called io monad provides mutable state 
monad create access update pieces storage 
type storage contains object type ff var ff 
functions control var morphisms io types 
newvar io var ff readvar var ff io ff writevar var ff ff io lifted version monad io monad concurrent processes sharing pieces state 
concurrent world want structure shared state 
concurrent haskell peyton jones extension haskell primitives creating concurrent processes recognised 
introduces new form shared state mvar var mvar contain value may empty 
mvar empty process done read operation 
processes reading empty mvar block new value put mvar mvars powerful mechanism creating higher level concurrent data abstractions 
example synchronization data sharing time 
possible integrate mvars concurrency monad transformer mutable state primitives 
think represent mvar mvar different states full containing value empty 
functional pearls type mvar ff var ff data ff just ff datatype indicate just value mvar 
define operations mvars 
function creates mvar lifts creation var puts 
io mvar ff lift newvar writevar return trick writing mvar mvar ff ff io lift writevar just hardest function define deal blocking 
avoid interference reading mvar perform atomic action pulls value var puts back 
introduce function working io monad 
mvar ff io ff am readvar writevar return am function definition blocking hard anymore 
represent blocking repeatedly trying read variable 
realise busy wait implementation inefficient methods jones easiest implementation 
mvar ff io ff am lift case am just return note atomic action processes read mvar just fortunately point mvar blocked function impossible atomic processes deserve chance blocking mvar bit sloppy real semantics mvars slightly different peyton jones 
koen claessen examples mvars refer reader concurrent haskell peyton jones mvars introduced 
discussion excellent example monads monad transformers 
power dealing different types computations way general definitely widely supported programming languages 
really push haskell type class mechanism limits order 
slightly extended class mechanism helpful peyton jones 
show idea just toy setting add concurrency graphical system tkgofer 
system increased expressive power implementation simplicity 
turns useful extension tkgofer 
experimented lifting known monads concurrent setting 
lifted lists example express infinite merging problem concisely 
problem type system forced fool order 
exception environment monads wadler expected behaviour able lift non proper morphisms monads 
need computation argument lifting non trivial 
drawbacks 
implemented real concurrency 
simply allow interleaving atomic actions atomicity plays vital role system 
atomic action terminate concurrent computation part terminate 
change step outside language interrupt evaluation expression 
source code functions classes mentioned publically available www cs chalmers se koen code pearl hs 
contains efficient slightly bigger implementation mvars 
richard bird byron cook andrew moran thomas nordin andrei sabelfeld mark shields ton van useful comments earlier drafts 
done visiting oregon graduate institute earlier version part master thesis university utrecht supervision erik meijer 
jones hudak 

implicit explicit parallel programming haskell 
yale university 
tech 
rep yaleu dcs rr 
functional pearls jones 

hugs system 
nottingham university yale university 
url www haskell org 
liang sh hudak jones 

monad transformers modular interpreters 
conference record nd popl 
acm 
peyton jones gordon finne 

concurrent haskell 
proceedings rd popl 
acm 
peyton jones jones meijer 

type classes exploration design space 
proceedings haskell workshop 
acm 
scholz 

concurrency monad constructor primitives 
universitat berlin 
schulte june 
tkgofer 
tech 
rept 

university ulm 
url www informatik 
de pm ftp tkgofer html 
wadler ph 

monads functional programming 
advanced functional programming 
lecture notes computer science 
springer verlag 
