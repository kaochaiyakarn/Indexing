theory practice cient algorithms multidimensional batched searching problems extended lars arge procopiuc torsten suel describe powerful framework designing cient batch algorithms certain large scale dynamic problems solved external memory 
class problems consider call colorable problems include rectangle intersection orthogonal line segment intersection range searching point location 
particularly interested problems higher dimensions 
numerous applications geographic information systems gis spatial databases vlsi cad design 
simpli ed algorithms problems previously solved complicated approaches rectangle intersection cient algorithms problems previously solved cient way point location higherdimensional versions range searching rectangle intersection 
give experimental results concerning running time approach applied red blue rectangle intersection problem key component extremely important database operation spatial join 
algorithm scales problem size large problems sizes greatly outperforms known sweepline approach 
past years attention focused development cient algorithms 
center geometric computing department computer science duke university durham nc 
supported part army research ce daah 
email large cs duke edu 
center geometric computing department computer science duke university durham nc 
supported part army research ce daah national science foundation ccr 
email cs duke edu 
bell laboratories murray hill nj 
email sridhar research bell labs com 
bell laboratories murray hill nj 
email suel research bell labs com 
center geometric computing department computer science duke university durham nc 
supported part army research ce daah daah national science foundation ccr 
part done visiting bell laboratories murray hill nj 
email jsv cs duke edu 
je rey scott vitter sridhar ramaswamy communication bottleneck large scale applications arising vlsi cad design spatial databases geographic information systems gis 
consider cient algorithms batched searching problems 
consider batched static batched dynamic problems correspondence exists ddimensional static problem dimensional dynamic problem obtain number new dimensional algorithms 
prominent example problems consider rectangle intersection problem key component vlsi design rule checking extremely important database operation spatial join 
illustrate practical signi cance algorithms comparing empirical performance algorithm problem known sweepline algorithm developed internal memory 
problem de nition memory model searching problem involves question asked query object respect set objects 
batched static searching problem anumber queries asked static object set concerned ciency course queries 
batched dynamic searching problem sequence insertions deletions queries report answers queries sequence actions performed 
clearly batched problem solved data structure queries answered better performance obtained 
batched problems play important role large scale performance sensitive applications problem load big allow complicated online computation computation delayed load lighter 
example banking application demand deposits checks processed banks closed night 
example database application index structure recomputed rebalanced query load low 
consider batched problems standard level model de ne parameters problem problem solution queries tting main memory queries disk block nand 
batched dynamic problems number updates problem 
computations done elements internal memory 
input output operation simply involves reading writing block disk internal memory 
measures performance algorithm number os performs amount space units disk blocks uses 
brevity address internal computation time algorithms cient optimal ram model 
transmit objects queries simultaneously notation number os needed just read objects refer linear bound 
assume bounds linear 
problems interested called decomposable 
de ne external memory version property called 
de nition searching problem denote answer respect set objects query object called partition set query computed ino additional os appropriate form 
simple important example problem dimensional range searching set integers build data structure query range points lie range reported ciently 
problem external decomposable easily compute result result query problem course generalized higher dimensions external decomposable 
important problem received lot attention computational geometry literature dimensional rectangle intersection problem problem determining intersecting pairs set axis parallel hyperrectangles dimensional space 
problem key component vlsi design rule checking databases component inthe fundamental join operator relational temporal spatial constraint models 
previous related results mentioned considerable attention development provably cient algorithms 
aggarwal vitter considered sorting permutation related problems level model proved external sorting requires log os 
cient algorithms developed problem domains including computational geometry string problems graph theory 
see mentioned papers complete survey included 
database literature lot attention cient computation emphasis practical performance real life data 
special attention development cient spatial join algorithms 
number cient algorithms developed decomposable problems formulated batched static dynamic searching problems 
goodrich technique called distribution sweeping develop cient algorithms number twodimensional problems including batched range searching problem orthogonal line segment intersection problem rectangle intersection problem 
rst problem batched problem de nition easily transformed onedimensional batched dynamic problems plane sweep paradigm 
arge considered problems developed cient algorithms looking batched dynamic dimensional problems developing cient data structures problems 
called bu er trees cient batched setting answer single queries ciently 
arge considered large number problems involving line segments plane 
internal memory setting batched dynamic problems considered edelsbrunner overmars 
motivated fact number problems dynamic data structures optimality claims comparison comparisons allowed operations internal memory 
known 
problems dynamic structures known showed batched techniques cient 
external memory motivation plays bigger role fundamental computational limitations 
simple illustration dimensional range searching problem 
obvious data structure problem tree 
tree elements uses optimal space built log os answer range query log os 
easy realize query bound optimal 
batched static version problem obviously solved building tree performing queries 
results log solution 
memory similar approach balanced binary search tree results optimal log time solution get better optimal log solution distribution sweeping bu er trees 
research done practical merits algorithms 
chiang implemented orthogonal line segment intersection algorithm developed distribution sweeping showed outperforms internal memory solutions moderately sized instances 
designed tpie transparent parallel programming environment set functions classes allow simple cient implementation level external memory algorithms 
cient tpie implementations variety sorting scienti computing applications 
results main result technique designing cient space cient batched dynamic algorithms external decomposable problems 
technique works wide range problems call colorable 
de ne colorable property section show number natural onedimensional problems range searching colorable 
section describe technique obtain algorithms dimensional problems considered 
algorithms log optimal performance previously developed algorithms sense technique provides general framework solution problems 
show technique obtain new cient algorithms providing rst dynamic version external planar point location 
section show technique recursively obtain rst known cient algorithms dimensional batched range searching orthogonal line segment intersection rectangle intersection 
algorithms log os linear space 
believe technique prove useful design cient algorithms 
section give application result batched dynamic problem solution previously known 
section demonstrate practical merits approach comparing empirical performance log algorithm developed technique optimal log time sweep algorithm developed internal memory 
problem consider special case rectangle intersection problem subproblems spatial join 
algorithms similar bound problem developed known techniques 
algorithm simple practical readily implemented tpie 
experiments show sweep algorithm breaks size sweepline structure bigger available internal memory external algorithm scales 
batched static colorable problems section de ne notion colorability show number simple dimensional batched static problems colorable 
de nition external decomposable batched searching problem 
consider problem pc color chosen set associated query set colors cv associated object objects color cv considered answering problem called colorable conditions hold 
colorings jcj number di erent color sets cv constant pc solved operations space initial sorting step 
valid instances valid instance 
call colorable problem just colorable problem 
note problem colorable show dimensional batched range searching problem number simple dimensional problems colorable 
consider general problem batched interval intersection searching problem query objects integer intervals 
query interval return intervals having point common 
sort intervals left endpoints 

scan sorted list intervals maintaining initially empty active lists color list colors set list di erent color sets 
interval query add color list scan set lists su corresponding color sets containing color time reporting intersections intervals su removing intervals su intersect 
add set list corresponding color set scan color list cc corresponding colors color set reporting intersections intervals cc removing intervals cc intersect algorithm batched colored interval intersection searching problem 
algorithm showing problem colorable 
initial sorting step sorted list intervals scanned intersections reported number active lists 
lemma batched static dimensional interval intersection searching range searching problems colorable 
proof order establish correctness algorithm observe interval query intersect classi ed cases begins ii begins step algorithm reports intersections query interval currently active intervals relevant handling case step similarly handles case ii 
note interval removed active list sure intersect relevant intervals processed scan 
complete scan initial sorting step performed os seen reasoning number active lists room block lists internal memory 
collect intervals inserted active list internal memory write disk collected 
insertions processed os 
interval added active list subsequent scan list interval removed permanently contributes intersection interval initiated scan 
simple amortization argument completes proof 
batched dynamic problems section develop general technique solving batched dynamic version colorable problem cient manner 
approach inspired approach edelsbrunner overmars 
instance batched dynamic problem consists sequence actions action insertion set object deletion set object query query object 
action ai regard time action performed 
object belongs set time possibly inserted time possibly deleted refer asv existence interval 
query performed time performed relative set objects time relative objects existence interval contains basic idea segment tree nd objects 
basic idea external segment tree complicates things considerably 
base structure external segment tree perfectly balanced tree branching factor action times 
leaf represents consecutive action times tree height logp log 
see 
rst level tree partitions action times intervals illustrative reasons call slabs separated dotted lines 
existence intervals cd completely span slab called long intervals copy object corresponding long existence interval stored root 
existence intervals long called short intervals objects corresponding intervals stored root passed recursively lower levels tree existence intervals span slabs 
ab ef examples existence intervals 
furthermore imagine cut long existence intervals leftmost rightmost boundary leftmost rightmost slab completely spans treat portions span slab small intervals 
example ce cut boundary slabs slabs portions slabs stored tree 
note objects stored leaf 
object stored nodes structure twice level total space utilization log 
answer query time search tree leaf containing visited node answer query relative relevant objects logm slabs nodes nodes external memory segment tree leaves stored node 
fact decomposable combining results individual node queries 
node lies slab de ne relevant objects objects corresponding existence intervals completely span object time relevant exactly search path 
internal memory solution segment tree binary objects node relevant queries passing node 
case external memory setting reason problem challenging solve external internal memory 
single query answered ciently perform queries simultaneously normally referred batched ltering take advantage fact problem need solve node batched static colored version realize fact consider node segment tree set objects vr assigned set queries qr passing 
imagine associate distinct color ofthe color queries qr color slab containing 
consider object vr 
existence interval completely spans set slabs relevant queries slabs 
associate colors slabs existence interval spans 
key property maximum number distinct contiguous ranges slabs normally called maximum number color sets associated objects vr quadratic function branching factor 
problem need solve colored batched static version objects vr queries qr 
complete algorithm 
theorem batched dynamic version colorable problem solved log operations space 
proof number os construct external segment tree distribute objects queries nodes steps log structure log construct level scan nodes previous level sorted list objects queries done os 
consider nodes rl level structure nri kri denote number queries assigned ri respectively 
number os solve colored batched static problems level counting initial sorting step nri kri linear nri kri furthermore queries objects logm os distributing sorted order nodes avoid sorting solving batched static problem total number os step logm 
space bound logm follows similar argument space improved noting solve batched static problem level nodes going build level need store level segment tree time idea called streaming 
simple applications twodimensional problems theorem lemma immediately give cient solutions dimensional batched dynamic range searching interval intersection 
known dimensional batched static problems regarded dimensional batched dynamic problems plane sweep technique 
example orthogonal line segment intersection problem set line segments plane parallel axes report intersecting orthogonal pairs reduced solving batched dynamic onedimensional range searching problem 
similarly dimensional batched range searching problem regarded simple version batched dynamic interval intersection queries points 
obtain cient algorithms problems combining obtain solution rectangle intersection problem 
external decomposable problems type solution just concatenation 
problem case batched static version external decomposable immediate obstacle problem set points vertical line segments plane point compute rst segment hit horizontal 
sort list actions time 

construct external segment tree distribute objects queries relevant node create leaves scanning 
repeatedly scan level nodes created list creating level segment tree distributing objects queries relevant newly created nodes 

turn solve colored batched static version colored objects queries associated algorithm sketch batched dynamic problem ray originating going right 
immediate obstacle problem solution obtained comparing segments obtained solutions see closest easily realized problem solved batched dynamic version simple colorable onedimensional search problem theorem applies 
corollary dimensional batched dynamic range searching interval intersection problems solved log os space 
orthogonal line segment intersection batched range searching rectangle intersection problems solved ino nlog os space 
batched static version immediate obstacle problem solved ino log os space 
noted similar space bounds easily obtained distribution sweeping 
subsection extend technique obtain solution problems cient algorithms previously known 
advanced higher dimensional applications decreasing fan segment tree previous section prove proof omitted brevity 
theorem batched dynamic version pbd colorable problem solved log operations space 
pdb colorable 
theorem immediately applied algorithm batched static immediate obstacle problem section algorithm batched dynamic problem theorem recursively algorithms discussed section extended dimensions 
corollary constant ddimensional batched range searching problem dimensional rectangle intersection problem solved log os space 
batched dynamic immediate obstacle problem solved ino nlog os space 
complicated application theorem batched dynamic planar point location problem 
formulation problem set non intersecting necessarily orthogonal line segments plane set points 
goal nd point rst segment hit upwards ray originating point 
complicated log solution static problem 
solution shows problem log colorable condition valid instances problem union valid instance 
details full 
union condition hold segments union intersecting 
restrict attention instances insertions deletions allowed called problems segments non intersecting condition ful lled 
corollary batched planar point location problem solved space log os 
experimental results section illustrate practical signi cance algorithms comparing empirical performance optimal algorithm developed technique optimal internal memory sweep algorithm 
problem consider variant dimensional rectangle intersection problem call red blue rectangle intersection set red rectangles set axis parallel blue rectangles plane report red blue intersecting rectangles 
problem extensively studied database literature subproblems spatial join core operation spatial database systems geographic information systems 
simple plane sweep internal memory algorithm easily derived algorithms rectangle intersection problem 
known log time algorithm sweeps plane vertical line maintaining querying interval trees 
initial sorting step algorithm viewed red blue version batched dynamic interval intersection problem 
problem interval intersection problem considered intervals colored red blue red blue intersections reported 
easy modify algorithm red blue problem theorem immediately gives optimal log algorithm red blue rectangle intersection problem 
noted new theoretical result previous solutions batched range searching problem orthogonal line segment intersection problem combined obtain optimal algorithms problem 
technique suggests new practical algorithm solves problem go 
imagine building segment tree structure level level top solving batched static problem level algorithm viewed distribution sweeping algorithm divides plane slabs performs vertical sweep slabs locate intersections recursively solves problem slab 
mentioned red blue rectangle intersection problem extensively studied database literature 
proposed algorithms roughly classi ed groups indexing structure typically tree variant built rectangle sets 
trend analyzing algorithms rely index 
example partition spatial merge algorithm patel dewitt shown outperform tree index cost building index counted 
viewed special case approach objects cross slabs duplicated slab handled sweep recursion 
algorithms try avoid duplication sophisticated partition methods vulnerable skewed data 
performance algorithm said similar algorithms algorithm prone skewed locations shapes rectangles 
implementation considerations empirical results sections notes imple algorithms 
implementations tpie system 
mentioned tpie collection functions classes basic data structure tpie stream representing list objects type 
system contains cient implementations algorithms scanning merging distributing sorting streams 
looking algorithms quickly see building blocks need scanning sorting distributing implemented tpie 
implementation algorithm relatively easy facilitated modular design 
order improve practical performance provide fair comparison modi cations implementations relative theoretical descriptions algorithms 
sweepline algorithm call internal join improved performance sorting step done sweep tpie built cient sorting algorithm 
sweep delete interval interval tree sweepline left corresponding rectangle performed lazy deletion operation tree processing queries remove expired intervals 
implemented simpli ed version interval tree similar described randomized skip list underlying structure balanced tree structure :10.1.1.15.9072
chose horizontal sweep line vertical order algorithms sweep direction 
external algorithm called external join modi ed random sampling divide slabs data extra time 
note possible solve problem quickly internal memory problem size larger internal memory size data structure size related maximum number rectangles intersect sweepline may example rectangles may small uniformly distributed case relatively rectangles intersect sweepline 
optimistic implementation external join began subproblem running internal join hoping interval trees internal memory sweep 
tpie detected available memory exhausted sweep aborted proceeded external approach 
experimental data lines chiang generated types input data sets red blue tpie system downloaded www cs duke edu tpie 
algorithms described included distribution tpie 
placed square 
order guarantee reporting cost dominate log searching cost rectangles chosen red blue rectangles 
discussed important parameter ciency algorithms average number rectangles cut horizontal sweep line sweep average overlap 
intuitively parameter decides size interval trees sweep size active lists external algorithm 
generated data varying number overlaps 
rst data set call small rect generated data meant resemble gis data small relatively uniform distributed rectangles 
chose width height rectangles randomly coordinates lower left corner chosen randomly 
shown expected number intersections red blue rectangles set approximately expected average overlap expected maximum overlap approximately 
details appear full 
second data set tall rect represents hard instance consists long skinny vertical rectangles large average overlap xed width experiments chose height uniformly chose coordinates lower left corner uniformly respectively 
xed width ensures expected approximately hn expected average overlap approximately 
order investigate uence average overlap produced third set wide rect simply rotating previous data set degrees 
wide rect data set consists long horizontally skinny rectangles number intersections expected average overlap approximately 
fourth data set wide tall rect consists wide tall rectangles 
wide rectangles placed tall rectangles 
expected average set approximately hn expected average overlap approximately 
full provide full analysis data sets 
empirical results performed experiments sun sparcstation running solaris mbytes internal memory 
order avoid network activity local disk input les scratch les 
restrict memory internal join relied virtual memory system amount memory time seconds external join int internal join int external join internal join data set small rect number rectangles small rect average 
intersections 
average 
overlaps 
time seconds external join int internal join int external join internal join data set tall rect number rectangles tall rect average 
intersections hn 
average 
overlaps 
external join limited xed amount 
experimenting di erent values parameter di erent values logical block size tpie best performance obtained main memory tpie restricted mbytes block size times physical block size kbytes 
ran programs data sets number rectangles varying 
rectangle consisted integer identi er corner points represented doubles 
rectangle bytes real size data sets varied approximately mbytes mbytes 
figures show running times programs data sets 
external join internal join curves represent total running times including sorting external join int internal join int curves represent times needed compute intersections sorted inputs 
experiments show external memory algorithm cient practice running times algorithms depend heavily time seconds external join int internal join int external join internal join data set wide rect number rectangles wide rect average 
intersections hn 
average 
overlaps 
time seconds external join int internal join int external join internal join data set wide tall rect number rectangles wide tall rect average 
intersections hn 
average 
overlaps 
average overlap 
external join algorithm steady cient performance data sets large number overlaps internal join breaks size problem bigger available main memory 
data sets small overlap performance programs comparable sorting time dominates running time 
comments results data set algorithms perform similarly small rect data set rectangles exhibit locality small number overlaps 
inputs external join algorithm breaks plane slabs basically internal join 
small di erence performance curves due variations experimental conditions operating systems interference randomization interval tree 
number rectangles need internal memory exhausted 
note sorting algorithm developed internal memory tpie algorithm breakdown small rect occurred 
tall rect average overlap large point interval trees internal memory quickly reached making internal join thrash 
seen graph thrashing point reached rectangles 
number rectangles internal join performs slightly better external join 
reason algorithm detects memory available aborts sweep algorithm starts external algorithm runtime penalty aborted sweep counteracts bene ts distribution sweep 
third data set wide rect algorithms perform small rect average number nodes interval trees small constant 
wide tall rect mixture previous breakdown external join occurs rectangles expected average number overlaps half tall rect 
demonstrated fairly general technique developing batched dynamic algorithms cient setting variety decomposable problems 
empirical study algorithms red blue rectangle intersection problem suggests approach fast practice outperforms currently methods especially problem size gets large internal memory 
avenues research regarding practical implementation 
currently studying algorithms red blue rectangle intersection improving current implementation 
way doing try predict sub problem sampling interval trees sweepline approach memory 
implementing batched dynamic algorithms decomposable problems 
agarwal arge murali varadarajan vitter 
cient algorithms contour line extraction planar graph blocking 
proc 
acm siam symp 
discrete algorithms 
aggarwal vitter 
input output complexity related problems 
communications acm 
arge 
bu er tree new technique optimal algorithms 
proc 
workshop algorithms data structures lncs pages 
complete version appears brics technical report rs university aarhus 
arge 
cient external memory data structures applications 
phd thesis university aarhus february august 
arge ferragina grossi vitter 
sorting strings external memory 
proc 
acm symp 
theory computation pages 
arge vitter 
algorithms processing line segments geographic information systems 
algorithmica appear special issues geographical information systems 
bayer mccreight 
organization maintenance large ordered indexes 
acta informatica 
bentley 
decomposable searching problems 
information processing letters 
bentley wood 
optimal worst case algorithm reporting intersections rectangles 
ieee transactions computers 

kriegel seeger 
cient processing spatial joins trees 
proc 
sig mod intl 
conf 
management data 

chiang 
experiments practical ciency geometric algorithms distribution sweep vs plane sweep 
proc 
workshop algorithms data structures lncs pages 

chiang goodrich grove tamassia vitter 
external memory graph algorithms 
proc 
acm siam symp 
discrete algorithms pages 
comer 
ubiquitous tree 
acm computing surveys 
cormen leiserson rivest 
algorithms 
mit press cambridge mass 
edelsbrunner 
new approach rectangle intersections part ii 
int 
computer mathematics 
edelsbrunner maurer 
intersection orthogonal objects 
information processing letters 
edelsbrunner overmars 
batched dynamic solutions decomposable searching problems 
journal algorithms 
goodrich 
vitter 
external memory computational geometry 
proc 
ieee symp 
foundations comp 
sci pages 
graefe 
query evaluation techniques large databases 
acm computing surveys 
gunther 
cient computation spatial joins 
proc 
ieee international conference data engineering pages 
schilling 
practical divide andconquer algorithm rectangle intersection problem 
information science 
kanellakis kuper revesz 
constraint query languages 
proc 
acm symp 
principles database systems pages 
vitter 
maximum queue size hashing lazy deletion 
algorithmica 
koudas sevcik 
size separation spatial join 
proc 
sigmod intl 
conf 
management data pages 
kumar schwabe 
improved algorithms data structures solving graph problems external memory 
proc 
ieee symp 
parallel distributed processing 

lo ravishankar 
spatial joins seeded trees 
proc 
sigmod intl 
conf 
management data pages 

lo ravishankar 
spatial hash joins 
proc 
sigmod intl 
conf 
management data pages 
mccreight 
problem 
journal algorithms 
overmars 
design dynamic data structures 
springer verlag lncs 
patel dewitt 
partition join 
proc 
sigmod intl 
conf 
management data pages 
preparata shamos 
computational geometry 
springer verlag 
pugh 
skip lists probabilistic alternative balanced trees 
commun 
acm 
samet 
applications spatial data structures computer graphics image processing gis 
addison wesley ma 
samet 
design analyses spatial data structures 
addison wesley ma 
wood 
counting reporting intersections ranges 
ieee transactions computers 
cli ord gadia jajodia segev snodgrass 
temporal databases theory design implementation 
benjamin cummings publishing 
ullman yannakakis 
input output complexity transitive closure 
annals mathematics arti cial 
transparent parallel environment 
proc 
dags symposium parallel computation 
tpie user manual 
duke university 
available www www cs duke edu tpie 
vitter 
cient scienti computation tpie 
proceedings goddard conference mass storage systems technologies nasa conference publication volume ii pages 
