steven ganz indiana university trampolined style daniel friedman indiana university trampolined program organized single loop computations scheduled execution allowed proceed discrete steps 
writing programs style supports primitives multithreading language support continuations 
various forms trampolining allow di erent degrees interaction threads 
architectures mildly intrusive trampolined style 
concurrency supported multiple levels granularity performing trampolining transformation multiple times 
trampolined style way writing programs single scheduler loop called trampoline manages transfers control 
computations executed discrete steps 
computation performs unit remaining returned scheduler 
trampolining applied interpreters re ection process abstractions 
form trampolining applied arbitrary programs proper 
im supported part science foundation cda 
author address department science indiana university bloomington indiana 
cs indiana edu 
supported part science foundation ccr 
author address department science indiana university bloomington indiana 
cs indiana edu 
supported part science foundation ccr ccr 
author address college computer science northeastern university boston massachusetts 
wand ccs neu edu 
compare kleene normal form theorem asserts computable function natural numbers represented single minimization primitive recursive operations 
mitchell wand northeastern university plementation language queinnec de roure applied transformation related trampolining arbitrary programs allowing multiprocessing primitives ned simple 
trampolined style trampolining architectures 
categorization means considered exhaustive fundamental 
choice architectures sampling meant demonstrate amount variation possible 
general style involves delaying tail calls take place loop 
rst architecture allows stepping having computation yield thread unit performed 
variants architecture aone multi thread system 
single thread variant demonstrate sequential composition breakpoints engines 
second architecture allows dynamic thread creation termination having computation yield list threads thread queue step 
trampolined style parameterized type constructor de nitions procedures bounce return 
parameter corresponds type result computation thread type state computation returning avalue type type de ned unit 
return bounce procedures correspond tothe injections respectively 
examples growing complexity illustrate style trampolining 
rely familiar programs accumulator style factorial determining 
example programs tail calls wrapped bounce lambda values tail position wrapped return 
output 
trampolined procedures define fact acc lambda acc cond zero 
return acc bounce lambda fact acc sub acc define mem 
lambda ls cond null 
ls return car ls return bounce lambda mem 
cdr ls de ne return identity bounce lambda thunk thunk programs expected 
simple trampolining rst asingle thread architecture 
initial de nition bounce packages remaining computation resumed 
returned value packaged instruct scheduler terminate 
record facility 
record types done doing correspond variants threads 
record type done represents complete computation holds result value type 
record type doing represents incomplete computation holds thunk performs 
de nitions define record done value define record doing thunk procedure return creates done thread 
de define return lambda value done value procedure bounce creates doing thread 
argument delayed computation modeled arguments 
de nition define bounce lambda thunk doing thunk computation completed scheduler called pogo stick terminates resumes computation 
type 
thread define pogo stick lambda thread record case thread done value value doing thunk pogo stick thunk rst example calculates factorial number trampolined style computation example pogo stick fact acc computation builds doing records expect done record 
discover uses pogo stick section 
interleaved trampolining arrange computations interleaved seesaw pogo stick 
di er seesaw takes computation additional argument 
execution alternates seesaw terminates computations 
type 
threads define seesaw lambda thread thread record case thread done value value doing thunk seesaw thread thunk demonstrate seesaw calculating factorial number list membership calculation computation seesaw fact acc mem 
fact acc computation terminate mem 
computation causes seesaw terminate 
possible replacement separate loops fact acc mem 
single loop seesaw 
mem 
computation builds doing records done record 
fact acc computation builds doing records trampoline entered mem 
computation completed done record processed seesaw 
trampoline generalization seesaw allows number computations interleaved 
rst trampoline natural extension seesaw threads 
choice argument order call append stipulate thread list behaves roundrobin queue 
type list 
distinguish types computations includes union 
distinguish types computations running seesaw type 
need seesaw toggle boolean value iteration determine thread process 
lead identify computation returned result 
seesaw distinguish types computations giving type trampoline 
replace toggling boolean incrementing integer modulo thenumber threads 
multiple computations define trampoline lambda thread queue record case car thread queue done value value doing thunk trampoline append cdr thread queue list thunk running endless factorial computations single list membership computation 
computation trampoline list fact acc fact acc mem 
previous example mem 
computation builds doing records done record fact acc computation builds doing records 
remainder trampolining transformation detail 
dene trampolining architectures increasing complexity extend style accordance particular idioms observing new control behavior related multithreading possible 
style programming natural possible 
section formally introduces trampolining transformation 
main part follows sections describe trampolining architectures operations supported extending style case 
section vary granularity concurrency multiple iterations trampolining 
section show way methodology continuation passing style cps call cc operator 
take closer look history trampolining section 
section concludes 
trampolining transformation trampolining possible 
trampoline fact acc mem 
de nitions 
subexpression tail position control context immediately enclosing lambda expression control context enclosed lambda expression 
program tail form non primitive applications tail position 
program tail form rewritten trampolined style 
program rst rewriting cps 
cps program nal continuation lambda trampolined nal continuation rewritten lambda return 
equivalent passing return nal continuation 
occurrence return programs 
rewrite programs trampolined style demonstrated earlier examples 
advantage approach relied variants cps 
wadler monadic transformation moggi produces programs tail form 
programs amenable transformation 
lambda set 
lambda set 
return return lambda return lambda set 
return set 
return bounce lambda lambda lambda set 
set 
trampolining transformation demonstrate transform tail form expression trampolined style 
original program tail calls user de ned procedures wrapped bounce lambda simple values tail position wrapped return 
formal presentation trampolining transformation 
takes tail form expression grammar auxiliary transformation simple expressions possibly subscripted metavariables tail position expressions simple expressions variables constants respectively 
program resulting applying wrapped scheduler 
properly executed 
transformation need handle applications programs presumed tail form 
call cc operator treated primitive 
derived forms letrec cond cases speci ed 
primitives accepting higher order arguments 
generally primitives easily implemented source language 
natural implementations tail recursive 
option convert natural implementations tail form trampoline 
calls primitive treated tail calls 
option primitives safe higher order arguments guaranteed terminate 
case arguments trampolined primitive call considered trampolined sense described 
primitive calls wrapped return forms tail position 
need trampoline entire program 
may appropriate trampoline part 
lambda expression trampolined applications operator wrapped bounce form tail position 
applications treated atomic 
nested lambda abstractions may trampolined 
occurrences lambda dictated necessary 
tail calls involved possible loop argument 
chain invocations tail recursive procedure control released 
instances bounce necessary 
aside consider calls bounce necessary trampoline program cps 
particular get just annotating calls continuations 
answer 
fact cps lambda rst continuation invoked calls recursive procedure bottom 
presence bounce call continuation argument help avoiding starvation threads 
transformation rules incomplete leave bounce return 
various de nitions return equations complete transformation rules 
chosen de ne bounce return procedures implementing system implementation consistent interpretation 
provide simpler transformed programs require lambda 
part user interface 
applies bounce return extensions style 
stepping section apply pogo stick architecture problems 
requires extension style transformation allowing expressions threads non tail position 
rst demonstrate tool drastic cps transformation extending domain trampolining transformation 
provide facilities breakpoints engines 
sequential composition example calculates presence factorial number list 
organize obvious way call fact acc tail position 
call returns thread record passed pogo stick complete fact acc computation returning number passed mem 
example runs follows pogo stick pogo stick mem 
pogo stick fact acc pogo stick ne seen generalizations allow multiple concurrent threads 
naive strategy lead starvation computations rst computation sequence runs inde nitely 
see section handled safely 
alternatively de ne sequential composition operator procedure written trampolined style thread 
procedure sequence takes procedure argument 
completes execution thread feeds result procedure 
type 
de nition define sequence lambda thread record case thread done value value doing thunk bounce lambda sequence thunk second argument trampolined expression yields thread 
computation terminates intermediate thread record dropped scheduler part call sequence ensure execution termination thevalue computation passed sequence longer involved 
generality want second argument single parameter procedure return single parameter procedure 
procedure seq comp satis es goal 
sequence implement seq comp 
type seq comp 

comp de nition define seq comp lambda lambda sequence composition procedure de ned procedures argument acc mem 
proceeding example 
trampolined procedures define fact acc curry lambda acc lambda cond zero 
return acc bounce lambda fact acc curry acc sub define mem curry lambda ls lambda cond null 
ls return car ls return bounce lambda mem curry cdr ls signi cantly necessary procedures fully trampolined 
returns lambda expression directly return 
acceptable guarantee applications inner procedure occur non tail position assumed threads 
avoid starvation threads attempted guarantee termination non tail call 
example 
trampolined test pogo stick seq comp mem curry fact acc curry breakpoints show extend protocol enable computation temporarily halted 
introduce break interface procedure intercepts thread tail position requests authorization console resume returning scheduler 
alternatively user return computation arbitrary breakpoints ground value 
assume simple pattern matching facility 
type break 
define break lambda thread letrec loop lambda printf read resume thread return exp return exp bounce loop loop run fact acc break slight variant fact acc wrap break 
single occurrence bounce 
example pogo stick fact acc break resume resume resume amore useful breakpoint facility allow arbitrary expressions evaluated computation halted 
supported language rst class environments 
example assume eval tramp tail form interpreter trampolined 
subtle uses sequence example 
compose evaluation continuation evaluation yields thread evaluation barely begun 
stepper define break env lambda thread env letrec loop lambda printf read resume thread return ret exp sequence return eval tramp ret exp env input sequence lambda printf bounce loop eval tramp input env loop engines pogo stick scheduler continues computation completed 
modify contain bound computation performed xed 
bounded pogo stick similar engine 
regulating progress computation feeding fed gasoline 
engine simpli cation captures essence engines 
takes thread returns 
returns engine directly assumed non tail position 
engine invoked giving ticks 
computation completes number ticks result done thread 
thenumber ticks exhausted result doing thread 
threads interpreted caller engine 
new engine created remaining computation passed fewer ticks 
type engine int 
define engine lambda thread lambda ticks record case thread done value thread doing thunk zero 
ticks thread engine thunk sub ticks interactive program repeatedly invokes engine obtain scheduler 
engine created thread trampolined program dot prints nite sequence dots 
engines invoked requested user console 
define interactive lambda thread printf input read zero 
input interactive engine thread input define dot lambda printf bounce dot interactive bounce dot 

dynamic thread creation form trampolining extends technique tail position expression evaluate list threads single thread 
list represents computations continue result current execution including remainder result current computation appended thread queue 
way expressions spawn new threads 
convenient terminate thread just return empty list 
notion multitasking allows communication processes shared variables 
mechanism child value returned directly parent 
important protocol completely protects threads entries thread queue currently running ected 
rede ne type constructor unit 
list 
de nitions di er range function terms 
xing unit represents information produced instruct scheduler state computations 
initially de ned rede ned list 
return bounce procedures correspond composition list injections types 
list unit 
list 
list respectively 
leave de nitions doing done modify return bounce trampoline allow dynamic creation threads 
procedures return bounce yield control returning current thread 
de nition define return lambda value list done value de nition define bounce lambda thunk list doing thunk modify version trampoline 
need enclose result continuing created return bounce 
empty 
terms oft type trampoline list 
dynamic thread creation define trampoline lambda thread queue pair 
thread queue record case car thread queue done value value doing thunk trampoline append cdr thread queue thunk thread returned value thread queue generated bounce contains element trampoline simply invokes element yielding singleton thread queue 
response done record print value continue processing threads 
second alternative return values stream printing 
order values generated order stream determined behavior scheduler order original thread queue 
returning list threads trampoline gives added exibility return lists zero threads 
potential exercised die spawn 
die simply return empty list identity operation append 
computations added list threads current computation terminates 
type unit 
list 
de nition define die lambda suppose need run return 
accomplish letting computations share variable 
result signal die setting variable 
need add clause fact acc mem 
check variable 
extend protocol enable new threads added queue 
spawn procedure may applied result bounce applications order fork computation 
point increase number threads initially provided scheduler 
case die reduces number bounce leaves unchanged 
build list threads provide spawn 
dynamically create arbitrarily long lists threads 
tail position expression evaluates arbitrarily long list threads 
procedure spawn appends lists 
type list list 
list 
de nition define spawn lambda threads threads append threads threads rede ne sequence new architecture 
works subcomputations spawned bythe second feed result rst argument procedure 
procedure nition map cons replaced append 
type 
list list 
list 
de nition define sequence lambda threads lambda thread record case thread done value value doing thunk bounce lambda sequence thunk threads rst example spawn searches speci symbol deeply nested list symbols 
pair spawn subcomputations search car cdr separately 
empty list encountered thread simply dies 
symbol encountered thread dies printing preceded distinguished returned values 
discovered returned remaining computations 
de nition define search lambda cond pair 
spawn bounce lambda search car bounce lambda search cdr null 
die eqv 
return symbol 
printf die ha search trampoline sequence lambda eqv 
return return search trampoline sequence lambda eqv 
return return search thread returned value printed second invocation search waiting wrapper function invoked 
fibonacci function provides example state communication threads 
spawn creates subcomputation recursive call 
base case thread terminated 
threads size result 
spawn define fib lambda cond set 
acc add acc die spawn bounce lambda fib bounce lambda fib define acc trampoline fib acc varying granularity parallelism multiple trampolining danvy filinski consider multiple applications cps transformation create multiple embedding contexts susceptible multiple control operators 
potential multiple levels stepping interpreter perspective referred de roure 
trampolined second time program invocation scheduler rst tail form 
trampolined program including scheduler queue single thread run higher level queue 
operations spawn speci ed operate particular level analogy danvy filinski cited 
operate additional argument 
tools complex application dependencies various levels implement way multiprocessing achieved level 
example main project spawn tasks run queue 
tasks queues spawn subtasks accomplish code task normally tasks trampolined style described 
convert task tail form trampoline 
history methodology methodology better understood comparing known example cps transformation presence call cc inspired approach 
examples trampolining transformation presence multithreading operators may shed light relationship cps call cc 
section re enact invention call cc example involving list index procedure 
programs written cps reasonable consider control operators di cult impossible implement direct style 
list index procedure returns index rst occurrence number list numbers occurences exist 
reaching list escapes chain add calls calling nal continuation directly 
index cps define list index lambda ls final lambda val val letrec list index cps lambda ls cond null 
ls final car ls list index cps cdr ls lambda ind add ind list index cps ls final restricted writing language range cps transformation choice apply incorrectly rst cond clause 
gain expressiveness imposing restriction applying final 
invocation continuation language form call cc cps easy dene regular procedure added cps program 
cc define call cc cps lambda lambda ignored call cc operator takes procedure applies current continuation 
procedures cps program call cc cps takes argument 
rst argument applied procedure ignores contin uation passes argument call cc cps continuation 
rewrite list index cps abstraction 
index cps call cc cps define list index lambda ls call cc cps lambda final letrec list index cps lambda ls cond null 
ls final car ls list index cps cdr ls lambda ind add ind list index cps ls lambda calculus interpreter transformed cps possibility arises adding new language forms take advantage new structure interpreter 
language forms provide advanced operations manipulate control context forcing source programs conform cps 
cps define interp cps lambda exp env exp 
call cc exp interp cps exp env lambda lambda ignored rst interpret procedural argument call cc 
result applied procedure representation current continuation 
current continuation passed default continuation 
having added call cc interpreter rewrite list index 
index define list index lambda ls call cc lambda final letrec li lambda ls cond null 
ls final car ls add li cdr ls li ls just cps continuation visible computation trampolining thread queue visible 
precedent cps developed rewriting technique new style standard ways style provide multiprocessing capabilities 
formalized variety operators 
interpreter tail form add new operators source language trampolined style 
procedures gain power multitasking trampolined style controlled ways correspond clauses interpreter 
history slightly involved similar examples programming styles providing contexts useful operators de ned 
danvy filinski show shift reset operators de ned cps 
queinnec shows splitter abort call pc de ned calls value transforming style cps 
queinnec standard cps operators dynamic rely structure stack 
extension cps cited 
moggi transformation monadic style extended operate languages including :10.1.1.26.2787
cooper shown arbitrary programs rewritten contain single loop involving additional boolean variables complex loop condition 
related trampolining mentioned 
bawden creates cps interpreter step returns list continuation value 
de roure enhances interpreter support multiprogramming primitives 
tarditi implementation ml programs transformed cps 
making arguments stored array address procedure returned main loop 
instances independent term trampolining 
baker appears rst term context 
wand uses continuation argument pair process representation non preemptive multi processing system 
continuations captured catch syntactic variant cc relying source program tail form 
amore ml language similar principles implemented morrisett tolmach 
haynes friedman wand demonstrated coroutines implemented call cc 
threads di er coroutines require control yielded particular coroutine provide value coroutine 
threads implemented coroutines designating coroutine scheduler requiring coroutines yield scheduler passing dummy value 
extreme preemptive systems threads interrupted 
trampolined interpreter 
dybvig hieb shown engines implemented call cc 
conversely kumar bruggeman dybvig demonstrated continuations particular partial composable continuations implemented threads 
shivers implementation threads cps 
bene ts gained partial composable continuations capture control context particularly multiple threads running described hieb dybvig anderson 
chosen focus aspects 
issue closely related multiple iterations trampolining 
language closest implements multiprocessing primitives conversion programs particular style 
style variant cps 
trampolined style intrusive structure programs 
trampolined style architectures 
style provides signi cant multithreading capabilities language support continuations 
programs asingle loop computations processed discrete steps 
trampolined information remainder computation 
architecture requires de nition procedures including scheduler invoked operator application result transformation 
architecture extended style constrained way generally operator intercepts evaluation results trampolined expressions 
wehave demonstrated operator implemented trampolined interpreter programs withthe operators rewritten avoid trampolined style 
wish investigate potential monadic implementations styles semantic properties 
expect survey domains bene perspective 
acknowledgments gratefully acknowledge assistance jonathan sobel jonathan detailed reading criticisms assorted drafts considerable clari cations presentation nal version 
henry baker 
cons cons arguments part ii cheney sig plan notices september 
alan bawden 
rei cation evaluation 
proceedings acm conference lisp functional programming pages 
daniel bobrow ben wegbreit 
model stack implementation multiple environments 
communications acm october 
david cooper 
bohm reduction ow charts 
communications acm august 
letter editor 
olivier danvy andrzej filinski 
abstracting control 
proceedings acm conference programming pages nice france june 
acm acm press 
david de roure 
qpl continuations concurrency communication 
technical report cstr department electronics computer science university southampton 
kent dybvig robert hieb 
engines continuations 
computer languages 
matthias felleisen mitchell wand daniel friedman bruce duba 
continuations mathematical semantics handling full functional jumps 
proceedings acm conference lisp functional programming pages snowbird utah usa july 
michael fischer 
lambda calculus schemata 
lisp symbolic computation 
revised proceedings acm conference proving assertions programs 
daniel friedman david wise 
indeterminate constructor applicative programming 
conference record seventh annual acm symposium principles programming languages pages las vegas nevada usa january 
christopher haynes daniel friedman 
abstracting timed preemption engines 
computer languages 
christopher haynes daniel friedman mitchell wand 
continuations coroutines 
computer languages 
robert hieb claude anderson 
subcontinuations 
lisp symbolic computation 
stephen cole kleene 
metamathematics 
north holland 
sanjeev kumar carl bruggeman andr kent dybvig 
threads yield continuations 
lisp symbolic computation may 
eugenio moggi :10.1.1.26.2787
computational lambda calculus monads 
proceedings th annual ieee symposium logic computer science lics pages paci grove california usa june acm ieee 
eugenio moggi 
notions computation monads 
information computation july 
gregory morrisett andrew tolmach 
portable multiprocessor interface standard ml new jersey 
technical report cmu cs carnegie mellon university june 
appears princeton university tr 
christian queinnec 
value transforming style 
editors wsa workshop static analysis number journal pages bordeaux france september 
christian queinnec david de roure 
design concurrent distributed language 
robert halstead jr ito editors parallel symbolic computing languages systems applications japan workshop proceedings volume lncs pages boston massachussetts usa october 
john reynolds 
de nitional interpreters higher order programming languages 
proceedings acm th national conference pages boston massachussetts usa august 
acm acm press 
olin shivers 
continuations threads expressing machine concurrency directly advanced languages 
proceedings second acm sigplan workshop continuations pages paris france january 
acm press 
david tarditi peter lee anurag acharya 
assembly required standard ml compiler 
acm letters programming languages systems june 
van wijngaarden 
recursive de nition syntax semantics 
steel jr editor formal language description languages computer programming pages 
north holland 
philip wadler 
comprehending monads 
proceedings acm conference lisp functional programming pages nice france june 
mitchell wand 
continuation multiprocessing 
higher order symbolic computation 
reprinted proceedings lisp conference pages 
