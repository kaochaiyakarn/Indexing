interface agents complex systems wayne zachary ph jean christophe le ph joan ryder ph chi systems argued interface agent concepts technology previously applied primarily generic tasks electronic mail management applicable complex systems 
interface agents specialized domains require substantial amounts domain specific task specific knowledge order useful system users 
development potentially lengthy costly 
way removing obstacle create workbench developing interface agents complex domains 
describes research create workbench cognet framework user modeling zachary 
cognet established validated technique user cognitive modeling 
cognet generator intelligent agents gina workbench described agent developer creates cognitive model user task strategy automatically translates model executable user model interface agent shell 
specific functionality added allow agent embedded user model reason help system user perform tasks solve problems manage attention 
examples gina agent applications complex system environments 
computers increasingly introduced vehicle particularly performed traditionally manual methods 
computerization working environment created problems new computer users 
suggested norman computer specifically human computer interface help solve problems 
research begun create components user interface called agents interface agents act assist human applying functional capabilities computer systems 
main benefits agents provide human operators highly complex systems reduce amount interaction human system detailed level human operator needs devote attention low level syntax interface details focus situation supervisory control free human concerns activities humans uniquely including decision making situation assessment goal setting reduce users requirements training knowledge allowing human operators devote training domain knowledge skills computer system knowledge skills 
date research interface agents focused generic tasks electronic mail management electronic purchasing 
research particularly general methodological level devoted interface agents complex domain specific 
applications related example specific systems telecommunications manufacturing finance aerospace health care education 
typically complex interfaces user integrate great deal task domain knowledge great deal system tool knowledge accomplish goals 
interface agent concepts technology highly beneficial class complex domain horizontal application areas 
major obstacle development interface agents class systems fact vertical applications nature highly complex closely tied specific task domains 
horizontal applications interface agents specialized domains require substantial amounts domain specific task specific knowledge order useful system users 
development potentially lengthy costly 
addition vertical applications numerous limited number users increasing ratio costs users 
way removing obstacle create workbench developing interface agents complex domains 
describes research create workbench notion developing interface agents cognitive models human experts performing tasks assigned agents 
workbench called gina generator interface agents 
built cognet framework creating cognitive models human computer interaction complex domains zachary 
cognet modeling framework discussed 
development computational engine execute cognet models 
execution engine means cognitive user models translated interface agents 
tools develop executable model debug translate interface agent constitute gina workbench discussed 
examples interface agents develop concepts vocabulary discussing ways interface agents support human computer interaction complex systems 
modeling human computer interaction complex systems cognet development cognitively oriented user modeling frameworks card moran newell widely cited goms descendants see olson olson kieras forthcoming permitted user modeling key component systems analysis user interface design time 
general frameworks proven difficult apply specialized types human computer environments 
example design decision support systems created need realistic models user decision making conceptually complex domains requiring development specialized approaches naturalistic decision theory klein attendant methods modeling 
area traditional user modeling approaches fallen short complex problem domains human system user contend real time problems evolve require solution real time multi tasking systems missions place multiple simultaneous demands operator attention applying domain expertise acquired knowledge experience solving similar problems domain 
real time multi tasking characteristics critically important application domains including aerospace process manufacturing control telecommunications medical applications 
domains require user modeling techniques explicitly treat mixed data directed goal directed aspects arising realtime processes competing attention demands implied multiple simultaneous requirements 
generic applications called horizontal applications cut domains 
agent applications focused specific domain called vertical applications 
response need authors developed user modeling framework called cognition network tasks cognet see zachary overview 
cognet descriptive framework integrates levels phenomena interest human performance complex systems cognition perception action including motor sensory activities 
value cognet developing user models established 
initial definition framework zachary ryder cognet applied develop user models variety domains including en route air traffic control operators helicopter pilot vehicle interaction naval command control zachary 
cognet constructed computable descriptive framework cognitive science sense having defined underlying symbol processing mechanism see pylyshyn associated descriptive notation 
theoretical property operationalized development software mechanism executing cognet models specific human system user role 
cognet execution engine application creation embedded user models major subject 
discussion cognet execution engine followed consideration ways executable user models applied specific examples executable cognet 
cognet integration concepts constructs human engineering cognitive science artificial intelligence provides theory understanding expertise human real time multi tasking performance description language modeling human competence complex naturalistic domains methodology collecting data building user models cognet theoretical concepts notation 
detailed description cognet zachary 
zachary 
brief summary provided 
cognet framework person team assumed computer mediated setting pursuing high level goal objective regard external environment 
person team sensory perceptual means gain information environment ability take actions 
usually action space defined computer system telecommunications switch factory automation system flight control system person team accomplish external environment 
similarly ability sense perceive environment telephone call status factory floor aircraft trajectory usually mediated system system senses environment presents information human user form typically visual auditory displays 
goal low level atomic actions person team undertaken part performing higher level activity called cognitive task join phone calls reconfigure assembly line capture flight plan waypoint 
tasks compete person attention may complementary may need performed essentially parallel 
tasks represents specific local goal person may pursue order achieve maintain aspect high level goal local goal corresponds chunk procedural knowledge 
way procedure instantiated heavily dependent past evolution current cognet assumes problem solving process constructive derivational single goal directed procedure achieving goal lack clear top procedure problems difficult complex 
state problem making tasks context dependent 
example way supervisor reconfigures assembly line may depend specific workers line skills repair status available machines 
procedures opposed atomic actions individual inferences high level cognitive tasks typically involve substantial sequence behaviors performed period time 
tasks may interrupt task may interrupted resumed times person team copes going sequence real time events external problem environment 
tasks may compete attention ultimately aggregate solve problem instance 
unites separate chunks procedural knowledge global problem solving strategy common problem representation problem representation declarative 
provides problem context information attention demands mediated task performance adapted 
activity performed person gains knowledge inferences problem situation incorporates information back problem representation 
problem representation evolves changing contents modify relative priority activities competing attention allowing new activity capture focus attention 
information problem gained directly perceptual processes 
cognet allows individual problem solvers cooperate communication coordination activities achieve common high level goal 
person agent may communicate agents environment structure communication process enhance communication organize problem solving activity 
cognet framework pictured 
cooperative process requires internal representation team relationships responsibilities addition representation problem solved 
framework integrates sensory perceptual cognitive motor level phenomena communicative interactional phenomena 
applied problem domain cognet provides framework building complete description way experts perform domain 
components description language notation describe representation current problem instance including elements evolution inferred state 
notation generalized multi panel blackboard structure see nii morgan content termed mental model current problem situation notation describing information processing associated person machine interaction associated high level cognitive task person perform 
notation derived goms notation card olson olson includes extensions allow accessing creating information problem representation blackboard 
extensions allow interruption suspension current task tasks 
cognitive task activated triggering condition specific patterns mental model blackboard production rule notation describing processes information registered user senses perceived introduced current representation problem blackboard 
independent processes called perceptual demons card moran newell model human processor newell soar perceptual processes operate parallel cognitive processes carry cognitive tasks motor processes executes atomic behaviors communication operators task job task environment person machine system interface display data task representation problem context 
cognet theoretical framework priority notation describing conflicting demands attention resolved tasks simultaneously demand attention 
underlying attention process pandemonium process initially described selfridge 
engine execute cognet models task essentially problems solved building software engine execute specific cognet user model simulate real time multi tasking humancomputer interaction process represents 
complex defining cognitive architecture captured principles operation defined cognet completely defined point operation defined points time possible inputs 
second fully specified syntax defined represent precisely cognet user model execution software 
third set tools defined implemented allow model builder examine test debug cognet model point produced desired simulated user behavior 
solution problems discussed sequence followed overview larger modeling built execution engine 
processing architecture cognet models shows processing architecture cognet execution engine data flow diagram form 
process components execution engine organized subsystems operate essentially parallel 
subsystems reflect perceptual cognitive motor action discussed card moran newell evolved form newell 
perception process monitors information environment reacting specific external stimuli modeled perceptual demons component cognet model executed 
fired presence information seeks perceptual demon operator actions communication task operators mental model operators roles posts specific message hypothesis blackboard structure provides updated problem context remainder model executed 
trigger evaluation process constantly monitors blackboard contents determine tasks underlying cognet model task trigger patterns enabling conditions satisfied 
task trigger patterns satisfied current problem context blackboard tasks activated allowed compete attention 
trigger evaluator considers permanent trigger patterns associated model tasks temporary triggers created tasks suspended waiting event problem context 
axiomatic cognet person performing cognitive task time 
attention focus manager operates parallel task performance process determining activated task current focus attention able capture focus currently executing task 
essentially pandemonium model attention originally proposed early writing selfridge 
activated tasks certain priority execution context sensitive dependent blackboard contents 
attention focus manager constantly compares priority task currently focus attention 
time activated task exceeds level currently executing task attention manager sends message task execution process informing resume executing task captured focus attention 
previously executing task interrupted task suspended state completion able regain focus attention 
task execution process traverses goal subgoal operator hierarchy goms model task told current focus attention 
task execution process contains sub process type operator cognet task level syntax plus handle process traversing goal hierarchy current problem context 
operators task model represent actual actions agent performs fall classes 
class operators represent actions system environment activate function select object enter information 
communication actions included class 
second class represents directed perceptual actions obtaining information particular type particular display control source 
third class represents cognitive operations information posted transformed problem representation blackboard derived current problem blackboard contents 
task interrupted current state execution saved anticipation task focus attention 
task state saved pointer location goal subgoal operator hierarchy execution proceeded relevant information problem context time interruption 
context important lapse time task focus attention indeterminate higher level decision may resumption task undertaken 
execution may intermediate subgoal performance may adjusted changes problem context task interrupted 
processes handled metacognition manager 
typical condition task suspends involves communication interaction agent event outside local human computer system sending message waiting response initiating remote action waiting result 
environment perception perceptual demons action effector problem context blackboard trigger evaluation task triggers triggers suspended tasks interrupted tasks procedural knowledge tasks activated tasks 
execution engine architecture attention focus manager metacognition manager task execution execution engine revisitation policy state task state executable cognet syntax major problem developing executable modeling languages degree detail precision included order model sufficiently defined execution computer 
fortunately essential structure cognet description language specifically goms cognitive task syntax blackboard problem representation syntax proved surprisingly close executable format 
ultimate goal research discussed create graphical version cognet user modeling language model developers interface designers develop test apply user model need rigorous syntax worst case resemble programming language 
support goal level strategy developed 
level defined purely textual cognet execution language cel close original cognet description language 
cel model representation execution engine 
second level graphical cognet representation gcr completely isomorphic cel 
gcr forms basis graphical interface cognet model entered edited graphical representation automatically translated directly executable cel representation 
language elements procedural portions cel model cognitive task perceptual demon components summarized table 
cel represents valuable intermediate representation user model sufficiently complete executed execution engine sufficiently understandable read understood familiar basic cognet notation 
cel provides needed intermediate representation agent developer human centered viewpoint execution engine symbol processing requirements 
table 
syntax task method demon elements task task name trigger condition trigger condition priority formula priority formula core goal goal name precondition precondition core post panel name level name attributes attr name value attr name value attr name value links link name hypothesis list hypotheses ink name hypothesis list hypotheses link name hypothesis list hypotheses transform hypothesis name attributes attr name value attr name value attr name value links link name hypothesis list hypotheses link name hypothesis list hypotheses ink name hypothesis list hypotheses hypothesis hypothesis list name value action function name argument argument argument determine function name variable name argument argument argument method method name argument argument argument suspend condition suspend time see discussion larger gina workbench 
gcr currently implementation 
gina workbench developing interface agents gina generator interface agents software workbench facilitates creation modification cognet models implementation debugging executable software versions models intelligent interface agents application executable models fully autonomous intelligent agents 
organization gina pictured 
components gina model execution engine cel model representation language discussed 
addition gina provides model debugging testing tools discussed cognet editing tools creating editing user models cgr graphical cognet representation translator moving gcr representation visible gina user cel representation execution engine 
addition cel compiler development allow stand executable models created 
currently execution engine needed execute model interpreted fashion 
tools shown allow executable user model encapsulated embedded larger user interface subsystem application examples discussed 
simply put execution engine way receiving input external environment way inserting actions environment 
wrapper constructed translates events host system environment logically defined events perceptual inputs action outputs execution engine 
wrapper building tools allow system designer user model wrapper correctly captures processes inputs host application factory automation system running unix motif stimulate appropriate perceptual demons translates action operators executed action effector component execution engine appropriate events host system 
tools test examine debug models great benefits executable models non executable ones execution process provides testing model correctness robustness 
user models trivial complexity goms models cognet models models expressed notation virtually impossible concretely test details hand 
execution user model quickly discovers places model fails behave correctly reasonably 
traditional computer programming finding correcting model problems easy difficult process depending tools provided support process 
easy process set debugging tools defined implemented tools allow modeler look inside model executed see doing doing 
debugging tools summarized table 
wrapper building tools scripted test inputs conversion definitions modeler designer debugging testing tools human user system events domain task expertise cognet editing tools model format translator stored model representation cel execution engine model system interface 
generator interface agents cel compiler linker table 
agent testing debugging tools executable model development environment embedded user model run time debugging tools trace tools displays messages indicate status execution task goal subgoal operator perceptual demon blackboard panel level hypothesis applied generically specific item step tools pause step execution resume execution signal cease execution display tools blackboard hypothesis display attributes link values current time display define evaluate debugging expressions execution tools developed integrated execution engine software described 
human model builder interact tools command line interface graphical interface 
gina workbench gina workbench steps develop maintain interface agent 
defi ne agent cognet model human job agent developer defines type agent desired discussed adaptive task oriented agent behaviors exhibit 
cognet model expert human perform functions developed 

automated tools translate model agent specification model developed step entered gina cgr authoring tools 
cognet model translated cel representation automatically ready execution 
agent build shell provide agent ability sense information execution environment adn take actions execution environment 

generate agent specification 
executable model linked shell create executable agent 
initially agent run gina testing debugging purposes 

test nd debug agent line environment 
gina debugging tools test behavior agent various synthetic stimulus sets ensure producing desired behaviors 

release agent targeted environment 
agent decoupled gina re linking essential run time components execution engine 
ready executed separate process intended environment 

revise update agent needs change modifying cognet model 
changes agent behavior re inserting gina workbench cognet model editing tools change model debugging tools correct test changes 
types interface agents research gina conducted practical efficient develop interface agents complex environments 
classes applications summarized examples built cognet execution engine 
adaptive interaction probably common kind interface agent provides existing user interface means adapting information presentation context see rouse 
type application embedded user models past create interface agents rubin jones mitchell rouse curry zachary ross 
type application model user constructed embedded interface interface reason adapt data presentation individual user local context 
example 
built adaptive man machine interface caution warning advisory information advanced helicopter 
problem environment managing information overload 
advanced helicopters sophisticated board processors detect announce different caution warning alert conditions interrelatedness hardware systems result single deep problem generating reported problems line elements 
flight crew deal diagnosing root cause cascading messages interpreting act response 
uses embedded cognet model flight crew mission management strategy ideal responses classes warnings advisories 
embedded mission management model executed cognet execution engine view system input formation flight crew gets pilot vehicle interface builds maintains problem representation blackboard current mission context 
wca processing portion model activated executed specific occur suggest immediate actions taken response wca message provide reminders past relevant current condition remind pilot long past alert loose door latch pilot begins maneuver cause door pop open predictions effects conditions causing wca fuel leak great reduction flight time result identifying evidence specific cause effect wca message 
applications type embedded model take specific action 
vehicle components interface software reason user knows point time provide information current user reflective expert ideal user represented embedded model 
task oriented agents type interface agent application contrast previous adaptive interaction case embedded model responsibility specific set tasks actions support user 
research type task oriented agent focused primarily horizontal applications electronic mail management maes electronic commerce hill software development genesereth schlimmer 
example task oriented agent currently developed vertical domain system called capra cancer patient retrieval agent 
capra developed gina contains embedded cognet models types individuals clinical medical database searcher 
clinical model examines line records cancer patient human clinician updating identifies features questions resolved augmented database information new treatment protocol experimental drug trial fits profile patient 
question passed database searcher model identifies proper database connects resources available modem network direct connection gateway queries database returns results clinical model presents results human clinician evaluation 
cooperative agents task oriented agent able autonomously go required close coordination person agent 
agent added responsibility doing autonomously doing coordination support person result called cooperative agent 
agent necessarily complex cognet terms maintain representation reason agents problem solved 
concept cooperative agents applied problem assisting naval commanders identifying making information available integrating information coherent comprehensive consistent tactical picture 
agents agent communities serve different functional roles assisting naval commander 
direct observations commander interaction tactical information system display staff agent acquires identifies specific information needs decision maker support team 
ideally needs identified constraints time available relative priority limits concrete narrow broadly focused search 
needs constraints sent agent agent community concerned searching information environment specific information needs 
internal organization unit invisible irrelevant information needs agent similar community information portrayal display agents receive information search agents probably original needs searches 
agent agent community prepares retrieved information presents human decision maker effectively format appropriate medium 
cooperative agent currently developed determines information commander human decision maker need particular problem setting 
information needs constraints needs inferred executable cognet model human information consumer 
specifically model backtrack desired state able take action able come environment identify pieces types information needed reach point current state knowledge mental model world 
example backtracking algorithm backward set hypotheses decision maker want attack certain target know specific object friendly hostile 
targeted state identify kinds information decision maker may need information needed possible reasoning paths connect state cognitive process state 
surrogate users probably open ended application interface agents create surrogate users particularly training system simulation contexts 
large distributed interactive simulations human interact real workstations operate shared synthetic environment networked virtual simulation 
roles played simulation human players necessary create surrogates missing human system users 
done building model human system user creating executable version mode 
executable user model encapsulated access synthetic environment alongside virtually human 
initial application cognet execution engine described type distributed training simulation submarine crews 
currently submarine crews trained large scale simulators scripted adversaries 
changing scripted behavior adversaries time consuming lead unexpected consequences 
previously developed purely pencil cognet model submarine command control cook peterson translated hand cel develop surrogate adversary new generation distributed submarine trainers 
kinds interface agent applications listed certainly exhaustive indicative kinds high risk high reward opportunities afforded kinds technology 
emergence tools described possible build evaluate interface agent applications involved sophisticated capabilities embedded user models determine short term payoffs long term research needs lie 

development technology team training case history human factors 
card moran newell 

psychology human computer interaction hillsdale nj lawrence erlbaum associates chignell hancock 

intelligent interface design 
helander ed handbook human computer interaction pp 

new york north holland 
morgan 

blackboard systems reading ma addison wesley 
genesereth 

software agents 

communications acm fry voorhees 
may 
intelligent support alarm systems advanced 
american helicopter society st annual forum fort worth tx 
hill 

electronic agents bring virtual shipping bit closer reality wall street journal vol 
pp 

kieras 
forthcoming 
goms related modeling techniques 
helander landauer prabhu eds 
handbook human computer interaction nd edition 
new york north holland 
klein 
eds 

decision making action models methods norwood ablex publishing 
kobsa wahlster 
eds 

verlag 
user models dialog systems berlin springer maes 

learning interface agent scheduling meetings 
proceedings acm sigchi international workshop intelligent user interfaces pp 

new york acm press 
newell 

unified theories cognition cambridge harvard university press 
nii 

blackboard systems blackboard model problem solving blackboard architectures part ai magazine 
nii 

blackboard systems blackboard model problem solving blackboard architectures part ai magazine 
olson olson 

growth cognitive modeling human computer interaction goms 
human computer interaction 
pylyshyn 

computation cognition cambridge mit press 
rouse 

adaptive aiding human computer control 
human factors 
rouse curry 

architecture intelligent interfaces outline approach supporting operators complex systems 
human computer interaction 
rubin jones mitchell 

inference operator intentions supervisory control blackboard architecture 
ieee transactions systems man cybernetics 
schlimmer 

software agents completing patterns constructing user interfaces 
journal artificial intelligence research 
cannon ryder purcell 

cognitive task analysis expertise air traffic control 
international journal psychology 
selfridge 
pandemonium paradigm learning 
proceedings symposium mechanization thought processes pp 

cooke peterson 

designing implementing decision aids complex environment goal hierarchies 
proceedings human factors society th annual meeting pp 

santa monica ca human factors society 
zachary ross 

enhancing human computer interaction embedded cognet models 
proceedings rd annual meeting human factors society pp 

santa monica ca human factors society 
zachary ryder le 
cognitive architecture description execution engine modeling real time multi tasking human computer interaction unpublished manuscript chi systems zachary ryder ross 

intelligent human computer interaction real time multi tasking process control monitoring systems 
helander eds human factors design pp 

new york taylor francis 
zachary ryder 
cog nitive model human computer interaction naval air mission management technical report 
spring house pa chi systems zachary ryder purcell 

cognet representation tactical decision making anti air warfare 
proceedings human factors ergonomics society th annual meeting santa monica ca 

