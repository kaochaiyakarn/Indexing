rendering complex scenes memory coherent ray tracing matt craig kolb reid pat hanrahan simulating realistic lighting rendering complex scenes usually considered separate problems incompatible solutions 
accurate lighting calculations typically performed ray tracing algorithms require entire scene database reside memory perform 
conversely systems capable rendering complex scenes scan conversion algorithms access memory coherently unable incorporate sophisticated illumination 
developed algorithms caching lazy creation texture geometry manage scene complexity 
improve cache performance increase locality dynamically reordering rendering computation contents cache 
algorithms compute images scenes containing millions primitives storing percent scene description memory 
machine memory capacity render realistic scenes order magnitude complex previously possible 
cr categories computer graphics picture image generation computer graphics dimensional graphics realism raytracing keywords scene data management caching computation reordering coherence rendering systems challenged types complexity geometric surface illumination 
geometric complexity necessary model detailed environments primitives fit memory may necessary model scene accurately 
surface complexity result programmable shading texture maps 
illumination complexity arises realistic lighting models interreflection light 
previous rendering algorithms able handle types complexity simultaneously 
generally perform illumination computations assuming entire scene fits main memory store part scene memory simplify lighting computation 
order able algorithms compute accurate illumination complex scenes coherence scene data patterns greatly improved 
exploiting coherence increase efficiency classic technique computer graphics 
increasing coherence computation reduce amount memory time requires computer science department stanford university 
example buffer rendering algorithms operate single primitive time possible build rendering hardware need access entire scene 
architecture designed exploit frame coherence means accelerating rendering reducing memory bandwidth requirements 
kajiya written whitepaper proposes architecture monte carlo ray tracing systems designed improve coherence levels memory hierarchy processor caches disk storage 
rendering computation decomposed parts ray object intersections shading calculations calculating spawned rays performed independently 
coherence memory increased careful management interaction computation memory reducing running time facilitating parallelism vectorization 
system architecture implemented 
independently developed similar algorithms main ideas caching reordering 
cache subset large geometric texture databases main memory fast access rendering system 
data added caches demand needed rendering computation 
ensure coherent access cache statically reordering scene data dynamically placing memory dynamically reordering ray intersection calculations 
reordering critical performance small caches 
algorithms possible efficiently compute images global illumination algorithms scenes containing roughly times primitives fit memory 
marks large increase complexity scenes rendered effectively monte carlo methods 
describe algorithms developed system built uses 
discuss previous rendering systems managed complexity 
introduce describe algorithms detail discuss implementation 
results applying algorithms variety realistic complex scenes discuss performance algorithms 
background previously developed techniques address problems rendering complex scenes include culling algorithms lazy evaluation caching reordering independent parts computation improve memory coherence 
section briefly describe previous draws builds 
ray tracing systems address scene memory management researchers investigated issue particularly context managing scene distribution multiprocessors 
jansen chalmers written survey past parallel rendering investigated issues particular green geometry caching techniques manage scene distribution multiprocessor 
hanrahan geometry caching manage large amounts geometry serial ray tracer 
global illumination calculations performed geometry caching systems rays traced passed coherent regions space caches performed 
general monte carlo ray tracing systems evaluate trees rays depth order access scene data caching algorithms effective 
number techniques increase coherence rays traveling scene 
fr hlich traversed ray trees iteratively order able gather rays coherent bundles 
bundles stored intersection acceleration data structure voxels rays geometry processed order rays contained 
rays voxels processed group candidate objects intersection tests overhead octree traversal reduced 
manner similar shaft culling reinhard jansen gathered rays common origins traced set objects inside frustum accelerate ray object intersection tests 
hanrahan reordered eye rays space filling curves image plane improve coherence spawned rays depth ray tracer turn improved geometry cache performance 
scanline rendering algorithms able render images scenes complex fit memory reyes architecture representative approaches 
sorting culling lazy evaluation techniques increase efficiency reyes 
startup time geometric primitives sorted screen space buckets overlap 
bucket rendered primitives overlapping subdivided grids pixel sized shaded discarded soon sampled image plane 
rendering progresses hidden geometry culled shaded algorithm similar hierarchical buffer 
sorting culling process allows reyes store memory small fraction total number potential 
major features reyes programmable shading support large amounts texture data 
texture caching scheme described possible render scenes texture fit memory 
textures pre filtered set multiresolution images antialiasing stored disk tiles approximately texels 
fixed number texture tiles cached memory cache fills tile discarded 
texture read memory needed startup time low textures contribute image affect performance 
furthermore texture resampled images shading calculation small number accesses local part texture improves locality performance 
texture cache reyes performs extremely texture scene typically kept memory degradation performance 
system uses texture caching similar manner extends ideas support efficient geometry caching 
algorithms explicitly take advantage dense occlusion large architectural models compute radiosity solutions scenes intractable 
algorithms break computation nearly independent sub problems sets mutually interacting objects 
computation reordered spatially local part data processed time computation scheduled parts scene memory minimize time spent reading additional data disk 
algorithms possible compute radiosity solutions models require enormous resources traditional techniques 
computation reordering techniques build reordering frameworks systems 
overview sections describe techniques investigated managing scene data finding exploiting coherence ray tracing rendering algorithms 
illustrates various parts system interact 
disk storage manage texture geometry queued rays image samples 
camera generates eye rays form image partitioned coherent groups 
scheduler selects groups rays trace information parts scene memory degree processing rays advance computation 
intersection tests performed chosen rays causes geometry added cache needed 
intersections shading calculations performed texture maps shading managed texture cache 
new rays spawned shading returned scheduler added queues waiting rays 
rays terminated image samples filtered image reconstructed 
ray cache queued rays displaced geometry camera scheduler intersection geometry cache patches voxelized geometry block diagram system 
caching scene data image samples shading texture cache texture tiles system uses texture caching geometry caching manage scene complexity 
texture cache texture access driven procedural shaders written language similar renderman shading language 
geometry caching scheme draws ideas texture cache limited amount geometry stored memory lazy loading limits amount data added cache needed ray intersection tests 
information needed geometry cache startup time spatial bounds model scene 
caches replacement policy 
geometry sources distinguishing feature ray tracer cache single type geometric primitive triangles 
number advantages 
ray intersection tests optimized single case memory management geometry cache easier variation amount space needed store different types primitives 
possible optimize parts renderer type primitive supported 
reyes algorithm similarly uses single internal primitive shading sampling efficient 
reyes optimize system handling large databases triangles allows system efficiently handle wide variety common sources geometry including scanned data scientific data tessellated patches 
potential drawback single representation types primitives spheres require space store tessellated 
advantages single representation outweigh disadvantage 
number different sources supply geometry cache triangles secondary storage 
store triangle meshes disk voxels 
geometry voxel stored contiguously may quickly read disk 
model bounding box stored file header efficient access startup time 
geometry may read disk times rendering stored compact format order minimize time spent parsing file 
tiled texture maps time create files negligible mesh slightly primitives stored traditional format read parsed sorted written new format minute 
tessellated patches subdivision surfaces 
system patches tessellated triangles geometry cache 
information stored memory triangles generated bounding box patch group patches possibly control points 
displacement mapping 
system supports displacement mapping 
subdivide input geometry small triangles vertices perturbed displacement shader 
result enormous amounts geometry stored triangles created size pixel individually visible 
procedurally generated geometry 
relatively simple programs describe complex objects geometry needed represent objects stored geometry cache 
program need run regenerate geometry discarded needed 
trees lake geometry cache properties geometry cache organized regular voxel grids termed geometry grids 
collection geometric objects stored grid tightly encloses 
volume grid voxels amount geometry voxel determines granularity cache cache fills discards geometry voxel block 
triangles voxel level granularity caching 
coarse granularity ray intersection acceleration insert voxel grid acceleration grid inside geometry grid voxels hold triangles 
level intersection acceleration scheme similar method described wyvill 
construction geometry voxel occupies contiguous block memory independent geometry voxels 
particular triangles span multiple voxels stored independently 
spatial locality dimensional space scene tied spatial locality memory 
types spatial locality coupled way cache perform poorly coherent access dimensional space generate coherent access memory 
memory management geometry cache complicated texture cache 
texture tiles size geometry voxel may require different amount space 
differences lead repeated allocation freeing different sized blocks memory causes heap fragmentation 
memory management addressed system fragmentation cause renderer size double triple hours execution 
replacing system library allocation routines segregated storage bitmapped usage tables coalescing heap fragmentation negligible 
preliminary experiments suggest lea allocator eliminates growth due fragmentation 
geometry cache implemented virtual memory loss direct control information contents cache 
furthermore data cached organized ensure coupled spatial locality described computation reordered cache perform 
reordering rendering computation geometry texture caching algorithms provide framework rendering large scenes 
cache misses orders magnitude expensive cache hits find way minimize misses system performance acceptable 
order ensure coherent access caches dynamically reorder ray object intersection tests 
evaluating ray trees fixed order depth breadth rays placed ray queues 
system chooses rays queues simultaneously trying minimize cache misses advance computation completion 
degree minimize number times geometry added cache determines efficiently cache system performs face extreme complexity 
order perform reordering queued ray depend results state queued rays 
independence implies store ray information needed compute contribution image furthermore space occupied information minimized potentially large number queued rays 
goals achieved decomposing computation outgoing radiance simple sum weighted incoming 
knowledge decomposition cleary reduce storage communication demands parallel ray tracing system 
computation decomposition take advantage structure rendering equation decompose rendering computation parts scheduled independently 
sample rendering equation computing outgoing radiance direction result lo le fr li cos lo outgoing radiance le emitted radiance fr bidirectional reflectance distribution function brdf li radiance incoming direction angle surface normal separability decompose computation way queued ray independent minimize amount state stored queued ray 
ray traced direction weight contribution outgoing radiance fr cos turn intersects reflective surface point additional rays spawned point determine total radiance traveling contribution spawned rays outgoing radiance simply product 
initial camera ray spawned record unit weight corresponding image plane location 
intersection secondary ray spawned compute total weight new ray store weight image plane location repeat process 
weight associated ray represents product weighted brdf values surfaces path point image plane location 
ray intersects object emitted differential irradiance carries multiplied ray weight result immediately added radiance stored ray associated image plane location 
decomposition introduce limitations 
example information point shaded discarded secondary rays generated adaptive sampling area light sources example possible 
state stored ray including information surface originated increase memory requirements 
furthermore scheduling algorithm interest deferring rays cause cache misses means state information stored great points spawned rays traced 
high resolution images samples pixel storage needed hold intermediate results image samples hundreds megabytes 
result image sample parts results generated unknown order write results disk computed storing main memory 
rendering finishes number passes file accumulating sample values filtering pixel values 
ray grouping decomposition illumination computation pieces easily reordered find effective reordering techniques 
perfect scheduling system cause primitive added geometry cache 
generally possible ray tracing algorithms strict order relationship ray trees possible spawn secondary rays find intersection positions rays cause spawned 
early reordering approach tried organizes rays nearby origins clusters 
cluster rays traced rays sorted direction increase coherence ray traced scene intersection 
technique exploiting coherence scenes majority rays spawned locations eye light sources 
drawbacks 
ray traced completion starting ray method fails exploit coherence rays beam move scene 
secondly technique fails exploit coherence exists rays pass region space origins close 
approach currently designed account spatial coherence rays including origins close 
divide scene set voxels scheduling grid 
associated scheduling voxel queue rays currently inside information geometry voxels overlap extent 
scheduling voxel processed queued ray tested intersection geometry inside overlapping geometry voxel 
intersection perform shading calculations calculate spawned rays added ray queue 
ray advanced non empty voxel enters placed voxel ray queue 
summarizes rendering process 
subset scene geometry overlaps scheduling voxel fit geometry cache cache thrash rays individual voxel traced 
conversely scheduling voxel contains geometry fit memory geometry cache thrash analogue trying render scene fit memory computation reordering 
account variations geometric complexity different regions scene regular scheduling grid replaced adaptive spatial data structure octree 
amortize expense cache misses ray intersection possible attempt defer tracing rays voxels misses 
preferentially process scheduling voxels corresponding geometry cached generate eye rays place queues queued rays choose voxel process ray voxel intersect ray voxel geometry intersection run surface shader compute brdf insert spawned rays voxel queue surface store radiance contribution image terminate ray advance ray voxel queue basic reordering algorithm 
memory accumulate rays queues voxels incur geometry cache misses 
lead prohibitively rays store memory simple mechanism manage untraced rays 
store limited number rays memory ray cache excess rays written disk needed intersection calculations 
trace rays voxel ray cache traced disk read processed 
voxel scheduling set scheduling voxels rays queues scheduler choose order process voxels 
simply loop voxels processing rays waiting rays terminated 
reduce cache misses improve efficiency carefully choosing process voxel 
associate cost value benefit value voxel 
cost computed function estimates expensive process rays voxel example cost high voxel encompasses large amount geometry currently memory 
benefit function estimates progress completion computation result processing voxel 
example voxels rays queues higher benefit 
furthermore voxels full rays large weights greater ben indoor scene dense occlusion cathedral scene 
voxels full rays low weights rays large weights spawn larger number new rays 
scheduler uses values choose voxels selecting voxel highest ratio benefit cost 
functions approximations true cost benefit processing voxel 
difficult priori cache misses caused group rays voxel geometry caching algorithms add geometry cache lazily 
rays voxel don access geometry geometry added cache 
difficult estimate new rays spawned group rays traced number weights spawned rays depend reflectances orientations surfaces rays hit 
implementation cost processing voxel estimate geometry voxel accessed memory 
geometry voxel memory reduce expected cost traced rays inside voxel geometry overlaps voxel removed geometry cache 
reduction keeps voxels geometry accessed rays currently passing expensive 
benefit product number rays voxel sum weighted contributions final image 
possible cost benefit functions account user interested seeing results part image soon possible minimizing number queued rays 
results implemented caching reordering algorithms part ray tracing rendering system 
ray tracers renderer supports mechanisms accurately simulating light transport 
specifically designed manage scene complexity system supports features usually scanline systems including displacement mapping ability render large geometric databases nurbs programmable shaders large numbers texture maps 
conducted number experiments determine algorithms performed complex scenes difficult renderer traditional approaches 
experiments performed lightly loaded mhz mips processor gb memory 
results indicative perfor mance machines memory wouldn excess memory operating system buffer disabled buffering tests 
practice performance improved buffering permitted 
running time measured wall clock time ensured time spent waiting included 
heap fragmentation caused large amount memory allocation freeing necessary manage geometry cache accounted basing memory statistics total size process 
algorithms disk number ways tests performed single disk disks raid system asynchronous prefetching data improve performance 
test scenes considered complex current standards requiring mb gb memory store entirety 
scenes cover variety common situations including indoor scene densely occluded outdoor scene little occlusion 
instantiation geometry scenes objects distinct managed individually 
test scene cathedral model demonstrate algorithms simulating effects due water flowing surfaces 
base cathedral model consists triangles displacement mapping add great deal geometric detail 
statue modeled polygons models comprised roughly polygons 
surface shaders access different texture maps point shaded displacement shader accesses texture map 
displacement mapping total geometric complexity primitives image rendered resolution pixels 
tests performed resolution samples pixel total texture maps mb disk space store displacement maps results flow simulations surface thickness dirt deposited 
illumination scene simple consisting light source fill light 
modeled room small office building 
building floors offices floors connected staircase 
floors ceilings modeled procedural displacement shaders rooms filled complex models including dense meshes cyberware scans plant models organic modeling program 
total geometric complexity primitives require approximately gb memory store memory 
light main room due sunlight window modeled large area light source 
hallway nearby offices illuminated light sources ceiling 
reflective column hallway causes light rooms directly visible camera strike image forces additional scene geometry brought memory 
rendered scene resolution pixels 
lastly constructed outdoor test scene consisting group trees lake 
tree models comprised triangles 
individual leaves trees modeled explicitly instantiated 
terrain lake created displacement mapping resulting total scene complexity test scenes rendered higher resolution samples pixel color plates 
scheduling reordering techniques performed rendering plates test cases 
primitives require approximately mb store memory entirety 
geometry scene visible eye 
direct lighting scene comes sun back lighting trees 
illumination due indirect lighting sky indirect reflections surfaces scene 
tests rendered scene pixels 
caching lazy evaluation tested impact lazy loading scene data running time memory 
started cathedral scene modeled geometry texture visible 
scene rendered twice caches unlimited size filled lazily texture geometric data read memory startup time 
shown table running time memory decreased scene data brought memory lazily 
memory reduced lazy loading indicating approximately scene data accessed 
test scene chosen case expect little improvement particularly encouraging result 
investigate rendered office scene see lazy loading data worked scene exhibiting dense occlusion 
test computed direct illumination light sources 
unable read entire database scene memory startup time due large size 
lazily read data memory memory necessary store entire scene 
cathedral cathedral indoor lazy lazy running time min min min memory mb mb mb texture accessed geometry accessed overhead introduced lazy loading data small doing improves performance scenes little occlusion 
scene dense occlusion lazy evaluation possible render scene fit memory 
cathedral scene investigated geometry cache performs standard depth ray tracing scene spawns limited number illumination rays 
rendered scene different geometry cache sizes recorded running time geometry cache hit rates 
geometry caching efficiently render scene mb memory space needed store scene entirety space needed store data accessed 
investigated performance texture cache cathedral scene 
rendered scene number times different cache size order determine hit rate running time affected 
increase number texture accesses displacement map lookups moderately sized geometry cache test ensuring displacement mapped geometry discarded cache recreated 
texture cache performed extremely 
tiles memory cache hit rate running time minutes compared minutes cache unlimited size 
cache tiles uses kb memory texture data scene 
maximum running time time memory unlimited cache mb min mb min mb min time render cathedral scene varying limits memory 
performance degraded slowly maximum memory reduced mb mb performance degrades smaller mb 
working set scene mb unable complete runs maximum memory mb 
scheduling reordering lake scene test performance reordering algorithms 
scene rendered monte carlo path tracing limit length path rays low contributions terminated probabilistically russian roulette 
ray cache rays representing total number rays traced 
shown rendering lake scene global illumination algorithms small geometry cache feasible computation reordering performed 
reordering storing scene memory caused running time increase rapidly rendering dominated cache misses 
reordering able render lake scene cache total size scene 
time minutes lake scene reordered computation reordering memory limit mb running time rendering lake scene maximum amount memory varied 
cache large hold entire scene database difference time reordered depth computation represents overhead introduced reordering 
seen overhead excessive 
maximum memory reduced small percentage scene complexity reordered algorithm performance allows efficiently render scene far memory 
performance greater impact running time decreased cache sizes significantly affected running time cache thrashing 
lake scene rendered geometry stored memory renderer performed mb read models disk 
cpu utilization indicating little time spent waiting limited total rendering memory mb renderer performed mb managing models disk cpu utilization 
tests mb ray queues done 
computation reordering performed rendered lake scene reordering mb geometry cache gb data read disk satisfy misses thrashing geometry cache 
gathered statistics gain insight interplay scheduling algorithm geometry cache 
count count count mb reordering times added cache mb computation reordering times added cache mb computation reordering times added cache histogram number times voxel geometry added geometry cache lake scene 
scene rendered computation reordering cache mb left geometry added cache times computation reordered cache size middle 
cache size limited just mb computation reordered right cache performance significantly better mb cache reordering 
histogram times voxel geometry added geometry cache lake scene rendered 
depth ray tracing led poor performance cache illustrated fact voxels added cache fifteen times 
computation reordering number times voxel added cache greatly reduced 
small cache mb computation reordering voxels inserted cache average approximately times 
compares complete passes database systems reyes rendering shadow map water reflection map final image scene 
course reyes unable accurately reproduce reflections water effects due indirect illumination 
summary set algorithms improve locality data storage locality data rendering algorithms ray tracing 
implemented algorithms part rendering system supports programmable shading large amounts texture displacement mapping global illumination 
algorithms enabled render scenes far greater geometric surface illumination complexity previously possible machine capacity 
algorithms decompose rendering computation separate parts worked order minimizing amount state needs stored rays waiting traced 
decomposition rendering computation forward ray tracing determining incorporate algorithms bidirectional path tracing interesting challenge 
questions examine include performance affected scheduling algorithms possible greatly reduce number queued rays causing performance degrade 
area applying techniques parallel hardware accelerated ray tracing 
management shared texture geometry caches distributed shared memory architectures offers challenges coordination cache access modification scheduling rays groups processors effective management increased demands multiple processors generate 
furthermore presenting framework ray tracing holding entire scene memory buffering scan conversion works suggests new approach long elusive goal effective hardware accelerated ray tracing 
improving performance gathering related data related computation powerful technique evidenced central position computer architecture today believe lead benefits areas computer graphics 
acknowledgments special jim kajiya sharing copy whitepaper ch prusinkiewicz sharing complex tree model 
john gerth source valuable discussions suggestions 
tony tom duff larry mark van renderman group explained intricacies reyes 
julie dorsey hans pedersen kindly shared cathedral model 
james davis wrote code nurbs geometry cache chase provided needed editing help minute 
research supported silicon graphics nsf contract number ccr darpa contracts dabt dabt 
tony 
personal communication 

cleary wyvill birtwistle 
multiprocessor ray tracing 
computer graphics forum march 
robert cook 
shade trees 
hank christiansen editor computer graphics siggraph proceedings volume pages july 
robert cook carpenter edwin catmull 
reyes image rendering architecture 
maureen stone editor computer graphics siggraph proceedings pages july 
julie dorsey hans pedersen pat hanrahan 
flow changes appearance 
holly rushmeier editor siggraph conference proceedings pages 
addison wesley august 
thomas funkhouser 
coarse grained parallelism hierarchical radiosity group iterative methods 
holly rushmeier editor siggraph conference proceedings pages 
addison wesley august 
stuart green 
parallel processing computer graphics 
research parallel distributed computing 
mit press 
ned greene michael kass 
hierarchical buffer visibility 
computer graphics siggraph proceedings pages august 
eric haines john wallace 
shaft culling efficient radiosity 
eurographics workshop rendering 
pat hanrahan jim lawson 
language shading lighting calculations 
forest baskett editor computer graphics siggraph proceedings volume pages august 
frederik jansen alan chalmers 
realism real time 
michael cohen claude puech francois editors fourth eurographics workshop rendering pages 
eurographics june 
david brian wyvill 
adaptive voxel subdivision ray tracing 
proceedings graphics interface pages toronto ontario june 
canadian information processing society 
james kajiya 
ray tracing 
unpublished manuscript 
james kajiya 
rendering equation 
david evans russell editors computer graphics sig graph proceedings volume pages august 
doug lea 
memory allocator 
available web edu dl html malloc html 

texture demand 
unpublished manuscript 
matt pat hanrahan 
geometry caching ray tracing displacement maps 
xavier peter schr der editors eurographics workshop rendering pages 
reinhard jansen 
rendering large scenes parallel ray tracing 
chalmers jansen editors eurographics workshop parallel graphics visualization pages september 
ivan sutherland robert sproull 
characterization hidden surface algorithms 
computing surveys march 
seth teller fowler thomas funkhouser pat hanrahan 
partitioning ordering large radiosity computations 
andrew glassner editor proceedings sig graph pages july 
jay jim kajiya 
commodity realtime graphics pc 
holly rushmeier editor siggraph conference proceedings pages 
addison wesley august 
eric leonidas guibas 
bidirectional estimators light transport 
fifth eurographics workshop rendering pages darmstadt germany june 
paul wilson mark johnstone michael neely david boles 
dynamic storage allocation survey critical review 
international workshop memory management september 
held scotland uk 
