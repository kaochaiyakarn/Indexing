restricted data types haskell john hughes september implementations type constructors restrict type parameters example implementation sets may require equality element type implementation requires ordering 
haskell mechanism restrictions hinder replacing implementation making implementations instances class 
proposes language extension called restricted data types address problem 
restricted data type definition specifies condition argument types satisfy data type formed 
type program formed add explicit notation express requirements 
programmers simply state type formed repeat restriction explicitly 
explain extension simulation multi parameter classes serves specify semantics 
show application design collection class class monads discuss extensions compile time context reduction needed implement 
suppose designing data type sets represented example lists data set set implement methods need assumptions element type example function test membership need test elements equality type reflect member eq 

set 
bool decide change representation sets example ordered binary trees greater efficiency restrictions element type change 
example type member member ord 

set 
bool change representation data type reflected change interface provides 
change interface unfortunate consequences 
functions implement sets change types general functions rest program 
explicit type signatures spread program need changed definitions attached unaffected type signatures stylistic assuming course sets program elements support ordering 
reasons haskell infamous monomorphism restriction forced insertion revising may dominate modifying set module 
worst case programmer may making desirable change module consequential changes type signatures 
acute problem arises try define interface data type haskell class different implementations provided instances 
example wish define class collection instances lists ordered binary trees hash tables class collection member 


bool 
type member function class definition 
know requirements place type collection elements requirements differ instance instance 
result write appropriate class definition 
main idea restrict parameters data types define type define methods 
define sets represented lists follows data eq 
set set interpretation types set formed supports equality call types defined way restricted data types 
state type definition elements support equality longer necessary state types methods 
example give member function type member 
set 
bool clear member types support equality set occurs type signature 
implementation sets changed ordered binary trees new constraint element type need appear type definition types methods remain unchanged 
consequently problems discussed section disappear implementations datatypes changed affecting type signatures rest program different implementations datatype instances class place different restrictions type parameters 
basic idea restricted data type intuitive details design surprisingly subtle implementation subtler 
focus simulating restricted data types haskell extended multiparameter classes 
simulation tested hugs flag 
simulation little tedious practice propose language extension semantics possible implementation simulation describe 
simulating restricted data types collection class shall explain idea simplified collection class defined restricted data types follows haskell supports syntax weaker meaning 
class collection empty singleton 
union 

member 

bool show simulate restricted data types sets ordered lists instances class 
course intention class definition element type implicitly constrained satisfy restriction data type simulate haskell restricted data types declare collection class methods explicitly restrict element type parameterise class definition particular restriction concerned different instances impose different restrictions 
parameterise classes classes write class collection cxt empty cxt 
singleton cxt 

union cxt 


member cxt 


bool declare instances instance collection set eq instance collection ordset ord 
haskell classes parameterised types 
represent class constraints eq ord suitable type 
natural represent class type associated dictionary simplifying somewhat define data eqd eqd eq 

bool data le 

bool eqd idea eqd contains implementation equality test contains implementation equality dictionary eq superclass ord 
constraint eq satisfied implementation equality available type equivalent having value type eqd available 
define class class sat dict simulate constraints 
example constraint eq simulated sat eqd satisfied precisely construct dictionary satisfy 
declare instance eq 
sat eqd dict eqd eq instance ord 
sat dict le dict redefine member function sets longer explicitly refers eq class just requires appropriate dictionary exists member sat eqd 

set 
bool member set xs eq dict xs data set cxt set unused cxt deriving show type eqd type set instance collection set eqd empty set singleton set union set xs set ys set xs ys member member set xs eq dict xs making set instance collection 
parameterise collection class definition type collections constraint elements satisfy represented types 
expect write class collection cxt empty sat cxt 
singleton sat cxt 

union sat cxt 


member sat cxt 


bool making appropriate dictionary available methods 
unfortunately definition quite right class parameter cxt appear types methods inferred methods 
attempt class lead ambiguous overloading 
fact simulating restricted data types possible type cxt collection type compilers know 
solution simply parameterise collection types context type carries restriction elements satisfy 
rewrite class definition class collection cxt empty sat cxt 
cxt singleton sat cxt 

cxt union sat cxt 
cxt 
cxt 
cxt member sat cxt 

cxt 
bool accepted 
modify definition set type accordingly define instance generic collection class 
new type instance definitions appear similar implementation collections ordered lists appears 
unpleasant hack constructor unused data type definition set 
purely order force compiler assign parameter cxt correct kind cxt appear right hand side definition assigned incorrect kind 
application cxt forces correct kind assigned embedding type cxt prevents type context interfering derivation show instance 
data ordset cxt ordset unused cxt deriving show type type ordset instance collection ordset empty ordset singleton ordset union ordset xs ordset ys ordset merge xs ys merge ys ys merge xs xs merge xs ys eq dict merge xs ys le dict merge xs ys merge xs ys member ordset xs eq dict xs making ordset instance collection 
restricted monads restricted data types limited interest useful defining collection types fact generally useful connection constructor classes classes instances parameterised types 
discuss example class monads 
monad class defined slightly simplified follows class monad return 



interesting monad mathematical sense type set implementation set instance class requires equality set elements type class declaration provide 
categorically speaking set monad subcategory category haskell types functions haskell gives way express 
just parameterised collection class condition elements satisfy parameterise monad class analogous way 
define class cxt unit sat cxt 

cxt bind sat cxt sat cxt 
cxt 

cxt 
cxt notice context bind requires types cxt cxt formed 
set instance instance set eqd unit set set bind foldr union empty map union operation bind requires equality available type set eqd formed 
interesting example monad represents computations strings data cxt string unused cxt naturally restrict monad types read shown define type represent constraint data rd string 
sh 
string instance read show 
sat dict rd read sh show instance follows instance unit sh dict bind rd dict monad related library cgi programming am developing saves computations hidden fields html forms 
fact technique applied constructor class class arrows hug 
improving simulation technique discussed certainly lets different properties collection elements different instances collection class really conveniently 
example know element type supports equality operation refer eq dict 
course prefer usual symbol syntactically appealing overloaded functions depend equality internally 
equality symbol require context eq sat 
define new instances eq terms sat extract equality function available dictionary instance sat eqd 
eq eq dict instance sat 
sat eqd dict dict definitions similar ord able freely figures 
unfortunately instance declarations rejected hugs overlap existing instances eq sat eqd 
exploration design space type classes jjm peyton jones jones meijer discuss possibility allowing overlapping instances conclude undesirable 
main problem meaning program may depend overlapping instances chosen important specify precisely choice difficult give specification simple precise 
particular case meanings programs depend instance chosen 
implementation equality particular type new overlapping instance declaration simply provides way accessing 
choice obtain implementation equality know choice affect semantics program compiler free choose instance declaration apply grounds efficiency 
overlapping instances permitted introduce risk type inference may loop 
hugs provides flag allow instances overlap turned type checker loops declarations 
understand explain process context reduction 
suppose programmer uses equality test compare lists polymorphic function 
compiler infers comparison typed context eq element type 
instance declaration instance eq 
eq compiler construct implementation equality implementation reducing problem satisfying eq simpler problem satisfying context eq process called context reduction implemented instance declarations backwards rewrite rules contexts 
see instance declarations overlap context reduction non deterministic 
worse may easily loop 
example new instance declaration instance sat eqd 
eq enables context eq reduced sat eqd instance declaration gave earlier instance eq 
sat eqd enables reduced back eq 
context reduction loops 
case compiler need search terminating context reduction existing implementations overlapping instances 
general may undecidable path tree possible context reductions terminating 
particular case loops introduced instance declarations involving sat class inspection context reduction instances increase depth terms context 
infinite context reductions instances contain finite number terms 
compiler abort attempted context reduction term reduced earlier appears reduction helpful discover example eq dictionary constructed eq dictionary pointless 
application strategy cut infinite context reductions type checking terminate 
summarise simulation restricted datatypes convenient able define overlapping instance 
normally dangerous general leads ill defined semantics type checking particular application problems arise 
require compilers easy test detect avoid looping context reductions 
approaches simulation described certainly non trivial course similar problems solved ways 
section review ways designing collection class taken alternative ways simulating restricted data types argue approach take superior 
peyton jones multiparameter collection class peyton jones proposed different design multi parameter collection class pj 
idea parameterise class type elements type collections letting instances constrain 
applying idea simplified class define class collection empty singleton 
union 

member 

bool define instances instance eq 
collection set assumption eq course implementations methods 
peyton jones idea works single element type appears occurrences collection type 
works methods operate collections different types 
collection class included method mapping collections mapc 


unclear parameters collection class 
ffl element type appears parameter example class collection mapc 


instances constrain implementation mapc required equality types instance class 
ffl hand type variables parameters class class collection mapc 


attempt methods class leads ambiguous overloading variable occur types 
problem arises try peyton jones idea define restricted monad class type return involves type involves class parameters 
approach contrast works regardless different occurrences restricted type constructor 
object oriented approach alternative way simulate restricted data types build appropriate dictionary objects type 
example define data set set eqd clear manipulate values type set requiring eq hold context obtain implementation equality directly set working 
example member set dict xs eq dict xs union set dict xs set ys set dict xs ys member problem approach guarantee arguments function provide suitable dictionary construct result 
example empty singleton construct sets place equality dictionary set argument extract 
likewise mapc 
set 
set place eqd dictionary result obtain eqd dictionary argument 
functions implemented 
object oriented approach works strong restrictions types methods want implement 
approach hand works method types 
case language extension argued restricted data types useful simulation works better proposals 
restricted data types simulated dialects haskell new language extension 
see main reasons doing 
firstly simulation requires designer constructor class anticipate need support restricted datatypes instances 
case collection class fairly clear case monad class example class designer may anticipate need 
programmer wishes declare set monad 
restricted datatypes built language compiler transform class definitions appropriately guaranteeing restricted datatype unrestricted 
secondly simulation requires programmer declare types dictionaries class datatype restriction 
types constructed internally compiler anyway part compilation class mechanism 
building restricted datatypes language spares programmer need duplicate compiler 
thirdly really simulation requires support overlapping instances general dangerous feature 
particular application overlap safe 
better extend haskell safe feature restricted datatypes dangerous feature simulate 
propose extension 
introduce new kind context wft mean type formed 
built types formed instances instance wft int instance wft instance wft 
class collection empty wft 
singleton wft 

union wft 


member wft 


bool data eq 
set set instance collection set empty set singleton set union set xs set ys set xs ys elem xs member set xs xs collection set defined restricted datatypes 

restricted datatype definition data cn 
introduces instances instance cn 
wft instance wft 

instance wft 
cn unrestricted datatype definitions just special case 
insist type appearing program formed 
expression appear context guarantees sub expression formed type 
likewise type signature carry context guarantees type formed data type newtype type synonym definition carry context guarantees types right hand side formed instance declaration carry context guarantees instance type types occurring instance methods formed 
type constructors may applied parameters formed assume wft holds polymorphic type variable instance polymorphic type instantiating type formed constraints need appear contexts 
extension define collection class set instance shown 
see example wft constraints correspond sat constraints simulation example wft set corresponds sat 
notice freely operations depend eq elem methods set instance generated instance wft set 
eq instances generated restricted applies parameters kind 
type parameters kinds restricted course applications formed 
example defined data wft 
type formed rule type constructor satisfy wft context definition context type appears right hand side 
datatype definition course implemented just sat instances saw earlier instance cn 
wft constructs dictionary wft tuple dictionaries left hand side instances instance wft 
just select appropriate dictionary tuple 
simulation overlapping instances force compiler search successful context reduction avoid detectable loops 
compiler knows formedness constraint set eq need parameterise set eq parameterise collection class separately formedness constraint 
formedness type variables 
assume constraints wft type variable satisfied instantiated formed type 
consequently constraints appear contexts corresponding dictionary passed run time 
really safe 
know dictionary wft exist construct prove needed knowing type convince dictionary needed passing parameter unnecessary 
see note dictionary corresponding wft unknown shape dictionary depending type instantiated 
dictionaries implement calls class methods requires know dictionary shape 
wft dictionary 
prove formally specify translation extended language case desirable translation glasgow haskell compiler 
translation context constraints translated types dictionary parameters constraint wft translated type variable 
translated code polymorphic type dictionary implies parametricity dictionary unused 
subtle argument needed type variables parameters classes method types polymorphic variables implementations 
example class declaration class binop binop 

instance binop type set fact set formed 
wft constraint appears type class method calls binop pass dictionary 
recall instance declaration require instance type formed 
example forced write instance wft set 
binop set binop 
dictionary wft set supplied binop set created need pass time binop method called 
discussion formedness major surprise design new kind constraint contexts wft constraints 
design requires programmers understand write new kind constraint may unsatisfactory example collection class definition initial motivation obvious set elements equality 
argue obvious types collection class methods wft hold need programmer write 
generally implicitly add wft constraints type signature require types occurring formed spare programmer need know 
chosen follow route possible general infer wft constraints hold body function typed just type signature 
example suppose extend collection class mapc method section define collection wft wft bool 

bool 

bool member true mapc notice typed collections bool wellformed collection internally definition 
type appear type impossible implicitly insert constraint wft bool just type signature 
general body function decide constraints add type signature type signature appear class definition example associated bodies appear scattered program corresponding instance declarations 
wft constraints explicit 
half way house implicitly add constraints obviously needed type signature programmer write hopefully rare additional constraints explicitly 
consider programmers wft constraints writing 
claim wft constraints naturally associated restricted datatypes declare sets may built elements equality stating types formed 
hardly surprising need reason explicitly formedness 
interesting note similar issues arise jones peyton jones proposal extensible records jj 
record type denoting record type extended field formed lacks written lacks constraints clutter types functions just jones peyton jones consider introducing automatically necessity inferred type function 
interaction proposals final design decision cases 
abstraction began article fact type member function reveals way sets implemented 
specifically replacing implementation terms lists terms ordered trees probably change type member member eq 

set 
bool member ord 

set 
bool consequential changes types functions force modification type signatures modules 
extension propose types replaced member wft set 

set 
bool set implemented lists wft set equivalent eq set implemented ordered trees wft set equivalent ord extension enables programmer write type signatures robust changes representation sets force 
example function member singleton union singleton robust type wft set 



bool type eq 



bool sets represented lists eq implies wft set case 
equally function member max robust type ord wft set 


set 
bool sets represented ordered trees type wft set 


set 
bool wft set implies ord case 
programmer chooses write type signatures validity depends conditions wft set holds course change representation sets invalidate 
proposal possible write robust type signatures guarantee type signatures robust 
sense constraint wft set behaves context synonym context definition type set synonym 
interesting consider ways restrict scope synonym example scope datatype constructors force programmers write robust type signatures 
overhead dictionary passing major problem implementation suggested requires passing dictionaries usual leading potentially high overhead 
particular definition class monad revised follows class monad return wft 

wft wft 



thought passing dictionaries call probably put implementor 
problem programs restricted datatypes pay heavy cost inclusion language passing large number empty dictionaries 
proposal generate versions code function type signature involves wft dictionaries involved empty genuinely restricted datatypes involved 
affect constructor polymorphic functions amount code duplication small performance penalty programs restricted datatypes completely removed 
related difficulty proposal adding restricted datatypes language definitions overloaded overloaded context require contains wft constraints 
definitions subject monomorphism restriction extension cause type checking fail 
believe correct solution revise monomorphism restriction 
lazy vs eager context reduction explained context reduction search suitable reduction path said little context reduction occur 
haskell stands context reduction performed eagerly part inferring type signature function 
programmer states context explicitly type signature clear compiler search way reduce context function body requires 
programmer leaves type signatures inferred compiler clear reduction compiler choose 
leads suggest context reduction lazy performed necessary match contexts explicitly programmer context reduced empty context 
non contexts inferred type signatures reduced 
peyton jones jones meijer come exploration design space classes jjm 
point particular combination overlapping instances eager context reduction type fewer programs lazy 
true situation 
consider wft set 
set 
bool set xss palindrome xs palindrome xs xs reverse xs lazy context reduction type signature inferred palindrome palindrome eq 

bool typed eq implied wft set 
eager context reduction type inferred palindrome palindrome eq 

bool ill typed reason prefer 
alternative abstracting contexts extension proposed possible way support restricted data types 
alternative allow type class definitions parameterised just types contexts 
carry simulation easily needing represent classes types declare collection class example class collection cxt empty cxt 
cxt 
course ability contexts useful ways 
natural complement give contexts names context synonyms 
interestingly haskell 
synonym context modelled new class instance class 
ab instance 
ab instance declaration allows context ab reduced class declaration enables reduced ab context reduction principle loop fact loop avoided treating class declarations specially 
approach important disadvantages 
firstly context collection class obvious way associate type set context eq 
need collection type associated context parameters collection class 
avoid ambiguous overloading sure context parameter appears method types done 
alternatively restrict instance declarations instances class may type parameters 
restriction guarantee type parameters determine context parameters effect creating association set eq 
case subtle design choices 
serious objection approach require class designer anticipate programmer wish restricted datatype instance 
class designers fail frustration restricted datatypes remain 
common implementation datatype place restrictions argument types 
consequent loss abstraction implementation changed difficulties making implementations instances general classes recurring topics haskell mailing list 
believe crying need restricted datatype construct power haskell 
simulation part enables explore semantics implementation restricted datatypes 
argue solution significantly useful peyton jones approach collection classes object oriented approach 
propose language extension simulation argue natural implemented reasonable efficiency 
believe extension invaluable live hope haskell implementors take challenge 
simon peyton jones mark jones lennart augustsson useful comments various stages 
am grateful remaining errors course 
hug hughes 
generalising monads arrows 
science computer programming appear 
jj mark jones simon peyton jones 
lightweight extensible records haskell 
haskell workshop paris september 
jjm simon peyton jones mark jones erik meijer 
type classes exploring design space 
haskell workshop 
pj simon peyton jones 
bulk types class 
electronic proceedings glasgow functional programming workshop july 

