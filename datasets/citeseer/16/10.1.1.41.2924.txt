context infrastructure smart environments anind dey gregory abowd daniel salber graphics visualization usability center college computing georgia institute technology atlanta ga usa anind abowd salber cc gatech edu 
order smart environment provide services occupants able detect current state context determine actions take context 
discuss requirements dealing context smart environment software infrastructure solution designed implemented help application designers build intelligent services applications easily 
describe benefits infrastructure applications built 
goals smart environment supports enhances abilities occupants executing tasks 
tasks range navigating unfamiliar space providing reminders activities moving heavy objects elderly disabled 
order support occupants smart environment able detect current state context environment determine actions take context information 
define context information characterize situation entity entity person place physical computational object 
information include physical gestures relationship people objects environment features physical environment spatial layout temperature identity location people objects environment 
define applications context provide task relevant information services user context aware 
example context aware tour guide may user location interests display relevant information user 
smart environment populated collection context aware applications services 
increased availability commercial shelf sensing technologies making viable sense context variety environments 
sensing technologies enable smart environments interpret understand contextual cues occupants 
prevalence powerful networked computers possible technologies distribute context multiple applications somewhat ubiquitous fashion 
hindered applications making greater context context aware 
major problem lack uniform support building executing context aware applications 
context aware applications built ad hoc manner heavily influenced underlying technology acquire context 
results lack generality requiring new application built ground 
little attempt insulate sensing context physical world context applications 
difficult build new applications transfer existing applications new environments different changing sensing technologies 
enable designers easily build context aware applications needs architectural support provides general mechanisms required context aware applications 
support include insulation layer side hide details context sensed applications side provide persistent context flexible manner worrying applications require 
georgia tech begun construction experimental home serve living laboratory experimentation number ubiquitous computing research problems including context aware application development 
goals produce aware home know contextual information information inhabitants 
number human centered arguments aware home desirable 
instance may allow elderly age place remaining familiar surroundings alternative expensive potentially assisted living centers 
environment instrumented know occupants activities relaxing place reside 
investigating human centered themes central focus long term research plan 
necessary stepping stone software infrastructure allow rapidly prototype intelligent context aware services environment 
describes distributed software infrastructure support context aware applications home environment 
provide discussion context handled previous handle generalized form user input 
earlier concept context widgets allow handle context manner analogous user input 
discusses infrastructure support necessary context context widgets 
derive requirements infrastructure examining differences uses context input 
solution supporting design execution context aware applications smart environments 
discuss benefits limitations infrastructure experiences building context aware applications 
discussion context handling discussed importance context smart environments 
reason context common way acquire handle context 
section discuss context previously acquired information aware home available www cc gatech edu fce house discuss concepts allow handle context manner handle user input 
current context handling general context handled fashion 
application developers choose technique easiest implement expense generality reuse 
look common ways handing context connecting sensor drivers directly applications servers hide sensor details 
applications drivers sensors detect context directly hardwired applications 
application designers forced write code deals sensor details protocol sensors dictate 
problems technique 
problem task building context aware application burdensome requiring application builders deal potentially complex acquisition context 
second problem technique support software engineering practices 
technique enforce separation concerns application semantics low level details context acquisition individual sensors 
leads loss generality making sensors difficult reuse applications difficult simultaneously multiple applications 
original active badge research took slightly different approach 
server designed poll active badge sensor network maintain current location information 
servers details sensors application 
applications servers simply poll servers context information collect 
technique addresses problems outlined previous technique 
relieves developers burden dealing individual sensor details 
servers separates application semantics low level sensor details making easier application designers build context aware applications allowing multiple applications single server 
technique additional problems 
applications servers proactive requesting context information needed polling mechanism 
onus application determine changes context changes interesting 
second problem servers developed independently sensor sensor type 
server maintains different interface application interact 
requires application deal server different way dealing different sensors 
may affect application ability separate application semantics context acquisition 
current input handling ideally handle context manner handle user input 
user interface toolkits support application designers handling input 
provide important abstraction enable designers input worrying input collected 
abstraction called widget interactor 
widget abstraction provides benefits 
widget abstraction standard keyboard mouse computing pen speech input unconventional input devices virtual reality 
facilitates separation application semantics low level input handling details 
example application modified pen pointing mouse 
supports reuse allowing multiple applications create instances widget 
contains polling mechanism possesses notification callback mechanism allow applications obtain input information occurs 
toolkit widgets common external interface 
means application treat widgets similar fashion having deal differences individual widgets 
analogy input handling context handling previous systems handle context way handle input 
attempts servers support polling mechanism notification mechanism 
notification mechanism relieves application having poll server determine interesting changes occur 
previous suffered design specialized servers result lack common interface servers forcing applications deal server distinct way 
results minimal range server types location 
previously demonstrated application widget abstraction context handling 
showed context widgets provided benefits gui widgets separation concerns reuse easy access context data polling notification mechanisms common interface 
context widgets encapsulate single piece context away details context sensed 
demonstrated utility value example applications 
widget abstraction clearly positive step facilitating context applications 
differences context user input gathered requiring new infrastructure support context widget construct 
remainder describe requirements architecture describe architectural solution 
infrastructure requirements applying input handling techniques context necessary help application designers build context aware applications easily 
sufficient 
due difference characteristics context user input 
important differences source user input single machine context smart environment come distributed sources user input context require abstractions separate details sensing mechanisms context requires additional abstractions form required application widgets obtain user input belong application instantiated widgets obtain context independent applications applications user input similar characteristics context groupware virtual environments deal distributed input user modeling techniques input example norm 
differences input context unique infrastructure support required handling context context widgets 
derive requirements infrastructure 
distribution context sensing network traditional user input comes keyboard mouse 
devices connected directly computer 
dealing context instrumented smart environment devices sense context attached computer running application 
example indoor infrared positioning system may consist infrared emitters detectors building 
sensors physically distributed directly connected single machine 
addition multiple applications may require location information applications may run multiple computing devices 
environments computers instrumented context sensed context coming multiple distributed machines 
support distribution context high level requirement 
need distribution clear implication infrastructure design stemming heterogeneity computing platforms programming languages collect context 
user input widgets programming languages application communicate context widgets widgets may 
infrastructure support interoperability context widgets applications heterogeneous platforms 
abstraction interpretation aggregation need extend existing notification polling mechanisms allow applications retrieve context distributed computers way retrieve input local widgets 
may multiple layers context data goes reaches application due need additional abstraction 
example application wants notified meetings occur 
lowest level location information interpreted determine various users identity information check location 
level information combined sound level information determine meeting place 
application designer perspective multiple layers transparent 
order support transparency context interpreted application 
application may interested low level information may want know meeting starts 
order interpretation reusable multiple applications needs provided infrastructure 
facilitate building context aware applications infrastructure support aggregation context entities environment 
definition context earlier describes need collect context information relevant entities people places objects environment 
context widget abstraction application communicate different context widgets order collect necessary context interesting entity 
negative impacts maintainability efficiency 
aggregation abstraction allows application communicate component entity interested 
component persistence history gui applications widgets instantiated controlled single application 
contrast context aware applications instantiate individual context widgets able access existing ones require 
leads requirement context widgets executing independently applications 
eases programming burden application designer requiring maintain context widgets allowing easily communicate 
context widgets run independently applications need persistent available time 
known priori applications require certain context information consequently context widgets running perpetually allow applications contact needed 
take call forwarding example active badge research 
phone call received application tried forward call phone nearest intended recipient 
application locate user badge server active 
final requirement linked need execution persistence desire maintain historical information 
user input widgets maintain little historical information 
example file selection dialog box keeps track files selected allows user select easily 
general complete history required left application implement 
comparison context widget maintain history context obtains 
context widget may collect context applications interested particular context information 
applications available store context 
may application requires history context 
example application may need location history user order predict location 
reason context widgets store context 
requirements summary requirements software infrastructure supports contextaware applications 
summarize requirements allow applications access context information distributed machines way access user input information local machine support execution different platforms different programming languages support interpretation context information support aggregation context information support independence persistence context widgets support storing context history 
section describe context infrastructure built address requirements 
description infrastructure infrastructure designed address requirements previous section 
object oriented approach designing infrastructure 
infrastructure consists main types objects widget implements widget abstraction server responsible aggregation context interpreter responsible interpretation context 
data flow applications context infrastructure 
shows relationship objects application 
objects autonomous execution 
instantiated independently execute threads supporting requirement independence 
objects instantiated single multiple computing devices 
base implementation written java mechanisms programming language independent allowing implementations languages 
important note infrastructure provides scaffolding context aware computing 
mean contains important abstractions mechanisms dealing context complete solution meant 
infrastructure supports building widgets interpreters required application necessarily available 
compared input larger variety sensors sense context larger variety context 
difficult provide possible combinations widgets interpreters 
context widgets context widget mentioned earlier common user interface widget 
defined attributes callbacks 
attributes pieces context available components polling subscribing 
callbacks represent types events widget notify subscribing components 
components query widget attributes callbacks don know widget capabilities design time 
context widget supports polling notification mechanisms allow components retrieve current context information 
allows components retrieve historical context information 
basic widget object provides services context widgets subclass 
creating new widget simple 
widget designer specify attributes callbacks widget provide code communicate sensor new data sensor available call methods store 
widget class provides methods 
method validates data current subscriptions 
time finds match sends relevant data subscribing component 
example multiple applications subscribed meeting widget different callbacks attributes conditions 
widget obtains new meeting information sends appropriate subscribers 
second method adds data persistent storage allowing components retrieve historical context information 
addresses requirement storage context history 
widget class provides default implementation persistent storage mysql freeware database 
persistent storage mechanism pluggable 
widget designer wanting default mechanism provide class implements temporary cache allows storage retrieval information persistent storage 
name class widget run time allowing new storage mechanism 
context servers context servers implement aggregation abstraction requirements 
collect context particular entity person example 
created ease job application programmer 
forced subscribe widget provide information person interest application simply communicate single object person context server 
context server responsible subscribing widget interest acts proxy application 
server class subclassed widget class inheriting methods properties widgets 
thought compound widget 
just widgets attributes callbacks subscribed polled history retrieved 
differs attributes callbacks determined 
server attributes callbacks inherited widgets subscribed 
server receives new data behaves widget calls store 
designer creates new server simply provide names widgets subscribe 
addition provide attributes callbacks addition widgets conditions object 
conditions object widget subscription server receives information interested 
example anind user server subscription condition name equal anind 
context interpreters context interpreters responsible implementing interpretation abstraction discussed requirements section 
interpretation context usually performed applications 
separating interpretation abstraction applications allow reuse interpreters multiple applications 
interpreter maintain state information individual interpretations provided state information interpret information format meaning 
simple example interpreter converts room location building location room maps building 
complex example takes location identity sound information determines meeting occurring 
context interpreters simple complex designer wants 
context interpreted sent interpreter method 
returns interpreted data component called interpreter 
interpreters called widgets servers applications interpreters 
designer creates new interpreter provide information incoming attributes outgoing attributes implementation 
communications infrastructure top level objects widgets servers interpreters subclassed single object called 
class provides basic communications infrastructure needed communicate distributed components away details heterogeneous platforms programming languages supporting heterogeneity distribution 
applications class communicate context infrastructure 
communications includes dealing passing high level data low level protocol details 
high level communications basic communications infrastructure needed support semantic high level communications 
provides methods communicating widgets servers interpreters 
particular facilitates subscribing querying polling retrieving historical context callback event interest component attributes particular widget attributes interest conditions conditions widget return data subscribing component options essentially act filter control data conditions context events sent widget subscribing component handled 
extension general subscription mechanism callbacks specified 
helps substantially reduce amount communication important distributed infrastructure performance reasons 
mechanism easier application programmers deal context events delivering specific information application interested 

example application interacting context widget 
arrows indicate communications flow 
widget sends callback data subscribing application application instance uses data callback determine object send data 
calls object handle method shown 
application subscribed location widget wanting know gregory arrived room 
location widget new location information available compares information see information meets subscription conditions 
sends information application application routes handle method 
communications fundamentals acts client server client server paradigm distributed computing sending receiving communications 
uses pluggable communications scheme 
default supports communications hypertext transfer protocol sending receiving messages 
language sending data default extensible markup language xml 
support communications protocols data languages 
designer wants object different protocol smtp simple mail transfer protocol example creates object speaks smtp protocol outgoing incoming communications 
passes name object time instantiation 
uses object default object 
similar fashion designer replace xml data encoding scheme 
xml chosen default implementation support lightweight integration distributed components allow meet requirement support heterogeneous platforms multiple programming languages 
xml simply ascii text platform programming language supports text parsing 
requires tcp ip ubiquitous terms platforms programming languages support 
alternatives xml include corba rmi 
deemed heavyweight requiring additional components orb rmi daemon case rmi forced specific programming language java 
experience contributions section describe benefits limitations context infrastructure building context aware applications 
discuss issues context aware applications created infrastructure 
built multiple types object widgets servers interpreters included library objects context toolkit default implementation infrastructure developed java 
abstractions mechanisms address requirements platform programming language independent 
demonstrate written applications widgets python frontier 
components infrastructure executing windows ce nt linux solaris irix macintosh platforms including mobile wearable desktop machines 
benefits benefits context infrastructure hides details context sensors supports lightweight integration components easy add context existing applications don context easy add context applications context supports reusability multiple applications 
discuss benefits applications developed examples 
hides context sensing details benefit infrastructure hides details context sensors 
allows underlying sensors replaced af context toolkit may downloaded www cc gatech edu fce application 
built multiple applications location identity context 
case change sensor provide context information applications modified 
built context widgets sense location identity www com pinpoint indoor positioning system www com texas instruments rfid system www ti com 
built context widgets determine activity context sound level information motion sensors door open closed status 
third type context built context widgets capture presentation information web browser powerpoint 
lightweight integration lightweight communications integration mechanisms supports deployment infrastructure applications multiple platforms multiple programming languages 
implemented board application keeps track building seen 
application implemented stand mode java web frontier macintosh python linux 
built application assists conference attendees choosing presentations wanted attend personal interests recommendations colleagues notes presentations automatically monitoring capturing presentation information 
conference assistant application executed windows ce device widgets servers interpreters executed java solaris windows nt 
combination motion sensors placed entrances exits research lab magnetic reed switches determine door open closed keep track number people laboratory 
application built java linux 
simple context application builder perspective infrastructure simple add context applications previously context 
dummbo application augmented whiteboard stores written spoken aid capture informal whiteboard meetings :10.1.1.46.2751
original version context began capture audio pen strokes started writing whiteboard 
application modified initiate data capture people gathered whiteboard started writing 
enables capture spoken information lost 
change required addition lines java code 
significant changes included lines added infrastructure line modified enable class handle callbacks lines application specific 
simple add context results argue simple add additional context applications infrastructure 
conference assistant application context simpler context servers user presentation room 
application builder viewpoint servers accessing context information easier see fire cc gt atl ga inout web version dealing multiple widgets individually 
new type context added application application continue context server proxy context information requiring minimal changes 
supports multiple simultaneous applications important feature infrastructure independent execution 
lets context infrastructure run independently applications allows multiple applications infrastructure simultaneously 
built number applications leverage context infrastructure running lab including board context aware tour guide conference assistant context aware mailing list delivers mail current occupants building 
current limitations infrastructure eases building context aware applications limitations remain 
particular currently support continuous context dealing unreliable sensor data transparently acquiring context distributed components dealing component failures 
discuss issues propose possible solutions 
currently infrastructure supports discrete context continuous context video feed gps location information 
large number sensors smart environment provide continuous data need support collection type context 
investigating possible solutions 
provide special mechanism supports reliable fast streaming continuous context widgets applications 
second solution interpret continuous data real time context widgets provide discrete interpretations applications 
sensors failure modes making data produce unreliable point time 
add problem data sensors interpreted sense 
way speech input recognized accurate recognizer context sensors understood 
problem context greater due fact speech input user able give feedback incorrect recognition results 
context isn case 
recognized context displayed user 
infrastructure provide support applications may unreliable context information 
support include sensor fusion multiple heterogeneous sensors different failure modes increase reliability passing reliability measure piece context 
perform sensor fusion ad hoc fashion exploring general mechanism supporting 
infrastructure completely support transparent acquisition context applications 
order application widget server interpreter know hostname port component executed 
infrastructure supports form resource discovery able effectively hide details application 
allow application really treat local context widgets user interface widgets 
application started specify type context information required relevant conditions resource discovery mechanism 
mechanism responsible finding applicable components providing application ways access 
investigated existing techniques supporting resource discovery currently process selecting implement 
limitation infrastructure dealing component failures 
component fails manually restarted 
requirement perpetual execution clearly property 
infrastructure keep track existing subscriptions component restarts 
component fails restarted knows components subscribed continue notifying context events 
infrastructure needs facility automatically restarting components fail 
currently investigating watchdog processes redundant components purpose 
related previous discussion context handling discussed influenced decision treat context input 
see cobuild workshop aaai symposium intelligent environments lot related smart environments 
review current state smart environments look supports context 
proposed situated computing service infrastructure similar intent 
insulates applications context sensors 
single server responsible context acquisition abstraction 
provides polling notification mechanisms accessing relevant information 
differs research uses single server act interface context available environment opposed modular infrastructure 
single prototype server constructed proof concept single sensor type 
system explored awareness media spaces 
architecture sensor abstraction interpretation provide awareness activity remote sites 
interpreted context site displayed sites 
system minimal context provide relevant services desktop computer user 
modular architecture separated context sensing abstraction notification 
distributed architecture support aggregation 
context infrastructure supporting software design execution context aware applications aware home prototype smart environment 
infrastructure builds previous introduced idea context widget treating context user input 
generated requirements infrastructure differences dealing con text input 
requirements designed built infrastructure easier applications deal context 
discussed benefits infrastructure example applications built 
described limitations current infrastructure part plan address suggested improvements 
intend test context infrastructure larger variety context building complex applications aware home 

arons design audio servers toolkits supporting speech user interface 
journal american voice society 

bauer collaborative wearable system remote sensing 
proceedings international symposium wearable computers 

brotherton abowd truong supporting capture access interfaces informal opportunistic meetings 
georgia tech technical report git gvu 


clark brennan grounding communication 
resnick levine eds perspectives socially shared cognition 
washington dc 


toolkit developing multi user distributed virtual environments 
proceedings virtual reality annual international symposium 

dey abowd wood framework providing self integrating context aware services 
knowledge systems 

dey conference assistant combining context awareness wearable computing 
appear proceedings international symposium wearable computers 

harrison squeeze hold tilt exploration manipulative user interfaces 
proceedings chi 

horvitz lumiere project bayesian user modeling inferring goals needs software users 
th conference uncertainty artificial intelligence 

hull bedford roberts situated computing 
proceedings international symposium wearable computers 

kidd aware home living laboratory ubiquitous computing research 
appear proceedings cobuild 

lamming design human memory prosthesis 
computer 

macintyre feiner language level support exploratory programming distributed virtual environments 
proceedings uist 

greenberg sharing views interactions single user applications 
proceedings acm ieee conference office information systems 

pederson representation presence supporting mutual awareness 
proceedings chi 

rekimoto tilting operations small screen interfaces 
uist 

salber dey abowd context toolkit aiding development applications 
proceedings chi 

schilit system architecture context aware mobile computing 
ph thesis columbia university 

schwartz comparison internet resource discovery approaches 
computing systems 

want active badge location system 
acm tois 
