crews report series conceptual modelling requirements engineering rolland naveen prakash universit de paris centre de recherche en informatique cri rue de 
paris france institute technology gate india rolland univ paris fr np dit ernet submitted annals software engineering special volume comparative studies engineering approaches software engineering conceptual modelling requirements engineering rolland naveen prakash universit paris delhi institute technology rue de la gate paris cedex delhi india rolland univ paris fr np dit ernet conceptual modelling situated broader view information systems requirements engineering 
requirements engineering re explores objectives different stakeholders activities carried meet objectives order derive purposeful system requirements lead better quality systems systems meet requirements users 
re product models concepts modelling concepts data process events conceptual models 
stable requirements engineering manages change better 
gives rationale extending traditional conceptual models introduce re product models 
furthermore contrast conceptual modelling requirements engineering lays great stress engineering process employed 
introduces re process models considers effect tool support 

number studies show mcgraw standish systems fail due inadequate insufficient understanding requirements seek address 
amount effort needed fix systems high johnson 
correct situation clearly necessary address issue requirements elicitation validation representation relatively focussed manner 
expectation result acceptable systems developed 
field requirements engineering emerged meet expectation 
traditional way engineering information systems conceptual modelling produces specification system developed 
specification concentrates system functionality 
specification acts prescription system construction 
assumptions conceptual modelling find important ones system requirements highly stable change time 
consequence system stable 
system requirements 
users just questioned requirements 
interesting problem specifying system meet requirements system analysts right persons 
validation system requirements done system functionality 
words conceptual schema appropriate support communicating negotiating reaching agreement users system stakeholders 
today clear assumptions hold longer 
due economic pressure emergence new technologies organisations change faster 
consequence expectations information systems change faster turn implies requirements longer stable 
issue understanding effect business changes recording decisions impact requirements noted issue solved 
known requirements change development cause considerable problems development reported curtis curtis 
requirements change longer possible treat 
necessary determine new requirements legacy systems carry requirements models entire systems life cycle 
central role system analysts shall replaced participation large variety stakeholders bringing various view points system finkelstein 
requirements validation rooted organisational change system functionality requirements models validated validation organisational needs system functionality 
computer systems able adapt changing organisational needs 
tackling problems area requirements engineering tries go functionality view conceptual modelling 
highlight dimensions attempt requirements engineering extends done system approach system view 
question answered terms organisational objectives impact information systems supporting organisation 
words information systems seen fulfilling certain purpose organisation requirements engineering helps conceptualisation purposeful systems 
implications elicitation validation requirements system done respect purpose organisations purposeful systems 
requirements engineering treat functionality system done system abstracted system analysts set requirements 
considers potential users system suitable provide useful realistic view points system developed 
detailed exploration various ways system activities shall carry performed 
done example looking typical interactions expected occur system cases 
exploration leads identification normal exceptional activities integration models full system behaviour 
sense determination system interesting question requirements engineering 
deliver foregoing appropriate way doing requirements engineering supported computer environments 
changing requirements imply assumptions decisions taken alternatives explored recorded available 
second requirements engineering known complex task advice guidance activities appropriate situations activities performed provided 
considerable freedom deciding activity done available requirements engineer 
foregoing indicates interesting aspects requirements engineering conceptualisation purposeful systems modelling system usage process support needed doing requirements engineering 
highlight rest 
attempt show aspects represent basic departure conceptual modelling 
section review area conceptual modelling 
turn attention requirements engineering consider separately issues purposeful systems modelling system usage process support 

conceptual modelling traditionally information system engineering assumption information system captures excerpt world history concentrated modelling information universe discourse olle 
conceptual modelling treated phase phase organisation information system life cycle shown 
aims abstracting specification required information system conceptual schema analysis relevant aspects universe discourse user community needs information dubois 
succeeding phase system engineering uses conceptual schema design implement working system verified conceptual schema 
design correction domain knowledge acquisition modelling validation conceptual modelling system engineering conceptual schema internal schema universe discourse phase organisation system life cycle classification framework conceptual models conceptual schema plays central role organisation information system life cycle information systems community developed large number conceptual models systems concepts representing conceptual schemata 
variety arisen need capture aspects real world semantics possible 
plethora models necessary develop frameworks classifying understanding 
framework classifies models perspective adopted view universe discourse developed olle 
organises models classes process oriented data oriented behaviour oriented models 
framework shown defining dimensional space conceptual models positioned 
data niam sadt process petri nets cartesian approaches behaviour business class sart systemic approaches state oriented systemic approaches change oriented framework olle addison wesley object oriented approaches dimensional framework classifying conceptual models dimensional framework highlights fact information systems looked different ways 
seen process oriented information system function organisation returns information seen data oriented information systems viewed mirroring information contents organisations expected information system supplier information seen behavioural perspective information system artefact handles interesting events occur organisation performing functions 
functions modify information contents information system available manipulation events 
different views naturally lend specific kinds treatment 
information system viewed function universe discourse analysis components function discovered 
function may complex needs broken functional elements understand better 
functional components complex decomposed recursively till simple understood functions reached 
clearly results hierarchy functions rooted original function 
hierarchy identifies functional components information system function establish inter relationship components function receives data function sends data articulated 
done conceptual models building data flow diagrams 
seen process oriented perspective views information systems processors information leads quite naturally data processing approach 
contrast data oriented approach looks information system mirroring information contents real world information 
identification information essence 
information kept real life things identification relevant things coupled abstraction information carrying entities carried 
abstracted entities inter relationships represented conceptual schema 
mirrored world changes information system reflect changes 
information system seen data manager maintaining delivering information times 
behavioural perspective attempt identify interesting events occur real world information affected occurrence functions cause effect felt 
things done real events abstracted information bearing events real world things abstracted data perspective information bearing entities relationships functions invoked carry effect event identified associated 
seen behavioural view promotes transaction management view information system 
years usefulness having completely different perspectives little integration come questioned 
distinct trends integration emerged 
development object oriented conceptual models majority integrated process data oriented perspectives conceptual models integrated behavioural developed brunet martin 
second trend loosely connected conceptual models consisted set conceptual models different perspective 
universe discourse individual connected conceptual schemata 
interconnection seen yourdon approach yourdon mid eighties loosely connected data flow er modelling state transition diagram techniques 
seen omt rumbaugh integrated object oriented model data flow diagrams event modelling 
conceptual modelling process conceptual modelling community emphasised product aspects systems expense process employed deliver product 
structure conceptual schema completeness consistency important developed 
early process models activity 
looked process consisting set activities decomposed simpler ones linearly ordered 
successive activity performed completion previous 
process models known restrictive assume possible pre define development path taken activities process model 
restrict creativity developer choosing path specific situation 
conceptual schema built afresh need keep track previously developed conceptual schemata processes built 
completion rule prohibits movement activity order backtracking earlier order 
relationship activity product built interesting 
number flexible process models built 
large conceptual modelling continued follow activity approach process models waterfall model royce 
sum felt information system served purpose organisation 
possible articulate purpose 
example process oriented approach purpose information system carry function 
small systems possible precisely identify function systems grew complexity difficult 
purpose clear difficult determine boundaries information system 
seen conceptual modelling specifies conceptual schemata functions expected system engineered 
specification expressed formal way driven technologies available system development 
focuses view system held system analysts 
contrast requirements belong users macaulay 
requirements specifications express objectives goals intentions users 
done informal manner drive technology oriented usage oriented 
requirements specification reflects views users stakeholders system system analysts 
consequence differences conceptual schemata requirements specifications relating requirements conceptual schemata difficult 
example problematic check conceptual schema meets requirements reflect changing requirements conceptual schemata 
order deliver accurate valid complete specifications requirements engineering address main issues extending conceptual modelling order establish conceptual link requirements system functions 
result purpose systems shall evident 
shall ensure purposeful systems shall built times 
deriving system functionality multiple view points users systems adapted usage stakeholders envision 
shall lead better system acceptability organisations 
modelling requirements engineering process order provide methodological guidance requirements elicitation requirements description requirements refinement activities transformations requirements system specification 
issues affect product process aspects requirements engineering consider turn sections 
requirements engineering models section deals product aspects requirements engineering process support deals process aspects 

requirements engineering models view requirements engineering proposed consider requirements come sources users hand domain environment hand 
source provides informal statements goals users intentions expressed natural language 
second source provides requirements reflecting real world facts constraints designed system implied laws physics independently user need wish 
requirements may occur sub types user defined requirements arise people organisation reflect goals intentions wishes domain imposed requirements facts nature reflect domain laws 
implies universe discourse partitioned usage world subject world jarke 
usage world describes tasks procedures interactions performed agents systems achieve including stakeholders system owners direct indirect users 
looked containing objectives met organisation achieved activities carried agents 
describes activity agents activity leads useful 
second part universe discourse subject world contains knowledge real world domain proposed system provide information 
contains real world objects represented conceptual schema 
third world system world world system specifications requirements arising worlds addressed 
system world holds modelled entities processes events subject usage worlds mapping conceptual specifications design implementation levels software system 
worlds interrelated shown 
user defined requirements sub type captured relationships usage system world intentional relationship usage fit relationship 
domain imposed requirements subtype captured domain genericity relationship 
subject world system world usage world usage fit relationship intentional relationship domain genericity relationship representation relationship ri relationships usage system subject worlds shall noticed representation relationship subject world system world relates domain representation system 
relationship focus conceptual modelling requirements engineering highlights importance relationships intentional usage fit domain genericity relationships 
relationships address question provide rationale system development 
consider relationships detail subsequent part section 
relationships usage world system world usage world consists individuals social groups organisational settings system intended function goguen 
individual pragmatic relationship system world provided usage fit relationship social semiotic relationship provided intentional relationship 
usage world provides rationale building system 
purpose developing information system outside system enterprise words context system function 
social relationship usage system world addresses issue system purpose relates system organisation goals objectives 
relationship explains system developed 
modelling establishes conceptual link envisaged system changing environment 
suggests augmentation conceptual modelling deal description context system function 
area requirements engineering approaches developed directly model organisational objectives relate system functions 
approaches address semiotic social link usage system world 
brought usage world world system users individually system meet objectives assigned organisation 
additionally view point requirements regarding system constructed 
account helps construction relatively acceptable systems 
suggests augmentation conceptual modelling include role individual enabling derivation system functionality integration users view points 
requirements engineering areas scenario modelling case development take account 
indicated earlier goal driven approaches model organisational objectives relate functions system 
sense aim conceptualisation purposeful systems 
contribute information interpretation requirements understood transformed system function specifications aim support purposeful systems 
scenario approaches focussing users view points help modelling purposeful system usage useful system functions derived 
provides dynamic meaning provides intentional setting usage world finds meaning 
foregoing view requirements engineering concerned relationship worlds 
terms conceptual modelling approaches focused representation link exclusion 
practice provides answer sorts fundamental question information handled system means tends draw attention away number equally fundamental questions concerning type knowledge required engineer information system 
looking carefully helps understanding engineer purposeful systems leads systems fitting constraints laws domain 
distinguishing subject world usage world helps making explicit relationships ignored traditional conceptual modelling 
goal driven approaches broader view requirements specification advocate goes classical conceptual schema describing system functionality 
includes enterprise modelling represents part system requirements 
part complements part provided conceptual functionality modelling 
enterprise modelling developed example project bubenko bubenko provide set models understanding requirements bridging gap ill defined problems application situations hand specification formal precise definition requirements information systems hand 
requirements specification represented structured description interrelated submodels see provide context requirements elicited 
sub model represents particular concern view requirements acquisition submodels help separating different concerns workable way 
sub models developed linear sequential manner 
process usually starts objectives model progresses actor activity models information systems requirements case 
instance existing systems activity concepts models may developed reverse engineering previous designs 
objectives sub model describes component requirements specification 
graph components goals problems opportunities weaknesses nodes connected relationships type motivates 
objectives sub model related rationale models ibis potts contains goal decomposition hierarchy close proposals dardenne rolland yu 
concept sub model define universe discourse concerns requirements engineers 
may serve dictionary user customer defined concepts 
actors sub model define actors domain relationships activities objectives 
actors may individuals groups roles organisational units systems actors sub model related goals objectives sub model represent stakeholders responsible achieving goals activities described activities sub model 
activities sub model describes organisational activities processes tasks enterprise 
components sub model created achieve goals objectives submodel referring components concepts sub model resources required carry activities described actors sub model 
information system requirements sub model meant derived models 
includes functional non functional requirements 
typically indicate needs establishing objects defining operations services object oriented terminology functions top decomposition structured systems analysis yourdon 
related environment performance quality required system 
objectives model concept model activities usage model actors model information system requirements model motivates motivates motivates motivates motivates concerns concerns concerns deals performed sub models approach enterprise modelling offers set interrelated models constructed set predefined components types relationships address question understand requirements come 
semantic links set interrelated sub models information system requirements model established reflecting rationale motivation designing specific information system 
enterprise modelling attempts understand goals primary needs expression users context problem domain 
early experiences shown goal driven approach leads improved understanding problem realm decision makers requirements holders customers developers 
convergence view goal modelling effective way identify requirements potts elicit high level goals achieved envisioned system dardenne anton bubenko help refinement goals dardenne yu yu rolland system requirements specifying goals accomplished proposed system anton 
enterprise modelling refined method support change management loucopoulos rolland rolland focus evaluation alternative scenaria change selection appropriate 
kaos approach dardenne dardenne emphasis directed supporting formal refinement high level goals system constraints meant functional requirements 
generic models advocated goal modelling refinement supplied simple guidance heuristics van lamsweerde 
approach yu yu yu create models environment system emphasises modelling agents relationships 
strategic dependency rationale models allow tracing dependencies agents goals tasks support reasoning identify trade functional requirements non functional requirements mylopoulos referred soft goals chung 
similarly emphasis agents relationships underlying albert language aiming formally specifying requirements dubois order ease validation scenario generation 
method anton built inquiry cycle potts draws attention nature elicitation process viewed deliberation process various stakeholders involved requirements engineering 
goal modelling proved useful specifying purposeful systems practical experience tends show number difficulties 
assumed systems constructed goals mind davies reality anton goals question originate anton acquires importance 
addition enterprise goals initiate goal discovery process reflect actual situation idealised environmental 
proceeding may lead ineffective requirements 
eliminating uninteresting spurious goals necessary difficult potts 
goal discovery rarely easy task 
additionally shown anton application goal reduction methods dardenne discover components goals goal straight forward literature suggests 
difficult deal fuzzy concept goal 
apparent applied goal driven approach embodied method domains air traffic control electricity supply human resource management tool set development loucopoulos 
led formalisation goal formulation prat rolland 
domain experts need discover goals real systems 
evident help provided goal modelling meaningfully performed 
help facilitate domain expert getting problem fuzzy nature goals help discover goals aid task goal reduction 
scenario approaches independently goal modelling alternative approach re scenario approach developed 
capturing examples scenes narrative descriptions contexts cases illustrations agent behaviours scenarios proved useful requirements elicitation number ways elicit requirements envisioned situations potts help discovery exceptional cases pots rolland sutcliffe derive conceptual object oriented models rumbaugh rubin understand needs scenario prototyping hsia animation reason design decisions young create context design 
underlying reason popularity scenario approaches people react descriptions real happenings real things 
reaction helps clarifying requirements expected systems 
scenario school argues typical scenarios easier get place goals 
goals explicit deeper understanding system gained 
industrial practice survey conducted crews consortium confirms scenarios useful particular modelling fails 
addition scenarios describe concrete behaviours capture real requirements 
deal examples illustrations scenarios inherently partial provide restricted requirements descriptions need generalised obtain complete requirements 
scenarios developed rolland different purposes different contents expressed different levels abstraction different notations 
far purpose concerned scenarios descriptive explanatory exploratory 
descriptive scenarios potts capture requirements enabling analyst users walk process understand operations actors events triggering process descriptive scenarios aid clarification process performs involved parties process activated conditions activated 
explanatory scenarios wright raise issues provide rationale issues 
identify happens real world leads causes commonly occurring events require handling attempt explanatory scenarios describe desirable features system developed 
exploratory scenarios holbrook useful different possible solutions satisfying system required exist 
solutions examined evaluated arrive right solution 
scenarios establish direct link requirements desired solutions 
mentioned scenarios different contents 
behavioural information identifying actions activities events carried usage world description objects subject world attributes events event histories organisational information structure groups departments agents stakeholder information including characteristics people views aspirations nardi 
large scenarios concentrate functional features required system olle potts rubin som 
scenarios expressed different levels abstraction instance type mixed 
case potts young scenario uses specific names events real argument values 
scenarios describe particular instances form basis discussion happens 
type scenarios hsia jacobson individual entities entity types 
refer smith customers 
execution type scenario instance scenario 
mixed scenarios rolland parts instance level type level 
scenarios expressed different notations ranging informal semi formal formal 
informal scenarios natural language rolland erickson holbrook videos wood story descriptions valuable cases user community unwilling unable deal formal notation 
semi formal scenarios structured notation tables potts scenario scripts rubin capturing real activities 
formal scenarios expressed modelling languages regular grammars state charts harel useful run simulations vision system look gauge user reactions 
coupling goals scenarios order overcome deficiencies limitations goal driven scenario approaches isolation proposals couple goals scenarios 
jacobson leite pohl goals considered contextual properties cases cockburn means structure cases 
goal scenario combination goals anton holbrook potts rolland check current system usage captured multimedia scenarios fulfils expected goals infer goals specifications operational scenarios van lamsweerde discover new goals scenario analysis rolland 
example approach combines goal modelling scenario authoring consider crews approach rolland rolland developed crews esprit project 
crews uses bi directional coupling allowing movement goals scenarios vice versa 
complete solution parts goal discovered scenario authored scenario authored analysed yield goals 
exploiting goal scenario relationship reverse direction scenario goals approach pro actively guides requirements elicitation process 
process goal discovery scenario authoring complementary steps goals incrementally discovered repeating goal discovery scenario authoring cycle 
order give insights approach key concepts terminology crews approach provide brief overview process 
concepts terminology requirement chunk rc pair goal sc scenario 
goal intentional scenario operational nature requirement chunk possible way achieving goal 
goal defined stakeholder hopes achieve 
approach goal prat expressed clause main verb parameters parameter plays different role respect verb 
detailed description goal structure rolland 
example goal expressed structure provide verb efficiently qual electricity tar ppc producer non eligible customer ben ppc network means normal way manner scenario possible behaviour limited set purposeful interactions place agents 
composed actions action interaction agent 
combination actions scenario describes unique path 
scenario characterised initial final states 
initial state attached scenario defines precondition scenario triggered 
final state defines state reached scenario 
distinguish normal exceptional scenarios 
leads achievement associated goal fails goal achievement 
requirement chunks classification abstraction levels introduced levels abstraction called contextual functional physical 
contextual level identifies services system provide organisation rationale 
functional level focuses interactions system users achieve needed services 
physical level deals actual performance interactions 
level corresponds type requirement chunk 
result organise requirement chunks collection level abstraction hierarchy 
relationships requirement chunks types relationships requirement chunks composition alternative refinement relationships 
lead horizontal structure rcs 
extensions conventional relationships goals 
relationships rcs link chunks require define completely functioning system 
rcs related relationships represent alternative ways fulfilling goal 
third type relationship relates requirement chunks different levels abstraction 
refinement relationship establishes vertical link requirement chunks 
requirements elicitation process crews process aims discovering eliciting requirements bidirectional coupling goals scenarios allowing movement goals scenarios vice versa 
goal discovered scenario authored 
sense coupling exploited forward direction goals scenarios 
scenario authored analysed yield goals 
leads goal discovery moving goal scenario relationship reverse direction 
exact sequence steps process follows 
initial goal identification repeat 
goal analysis 
scenario authoring 
goal elicitation scenario analysis goals elicited 
seen goal elicitation scenario authoring complementary steps goals requirements incrementally discovered repeating goal analysis goal elicitation scenario analysis cycle 
steps cycle supported mechanisms guide execution step 
guidance mechanism goal analysis linguistic analysis goal statements 
helps reformulating narrative goal statement goal template introduced previous section 
mechanism scenario authoring combines style content guidelines linguistic devices 
advise authors write scenarios provide semiautomatic help check correct conceptualise complete scenario 
goal elicitation scenario analysis defined rules offering different goal discovery strategies refinement strategy composition strategy alternative strategy 
discovers goals lower level abstraction goal second discovers goals anded original discovers goals ored original goal 
sum sum impact usage world relationships system world convergence shifting conceptual modelling intentional modelling 
permits understand information system needed helps avoiding specify system meet expectations organisation 
order relax constraints posed notations traditionally conceptual modelling informal narrative scenarios suitable ease communication users community get points view envision expect system behave 
attempts combining goal modelling scenario authoring overcome difficulties encountered practice approaches isolation 
practical evidence percentage successful systems significantly increased due move conceptual modelling enterprise modelling 
domain genericity relationship subject system worlds mentioned representation relationship subject world system world pointed long time ago researchers information systems rolland borgida brodie temporal databases rolland bubenko clifford 
focus objects events operations functional aspects information system 
non functional quality criteria confidentiality performance accuracy timeliness information attached representation relationship 
non functional requirements modelling desirable feature requirements engineering methods rarely integrated current methodologies 
modelling concern captured domain genericity relationship role impact domain knowledge jackson 
new applications share requirements known problems possibility create generic domain models problems templates requirements certain classes applications 
approaches relationship subject system worlds attempt add reuse requirements engineering providing sets predefined generic requirements developing system requirements specification 
sets reused elicit requirements specific application validate requirements specification 
hope increase efficiency requirements engineers lead better quality specification dependencies systems environment analysed detail jackson jackson jackson zave jackson 
jackson points domains impose obligations required system 
formalises event dependencies system environment inherent laws physics obligations required system avionics real time applications events may arise human failure shall impose requirements system design 
separate consideration subject world allows development called domain ontologies consider typical classes object activity abstractions reusable modelling patterns significantly reduce requirements engineering effort feather 
model library subject world example developed nature project maiden maiden sutcliffe 
model problem abstraction defines generic terms structure behaviour problem space 
unit abstraction aggregates objects linked purpose 
concepts define object models shown 
link link isa isa isa changes undertakes triggers enables attain object structure object key object agent state semantic relations state transition object property goal state stative condition event meta schema domain modelling objects key objects undergo state transitions agents undertake behaviour cause change 
objects properties states 
structure objects model containment objects example library contains books 
state transitions model behaviour objects enable goal state achieved 
events model initiating triggers time points 
stative conditions tests objects states 
goal states describe required state satisfied 
semantic relationships specify constraints objects state transitions states 
object models structured class hierarchy 
models different levels abstraction distinguished different types knowledge 
object structure purpose important constructs higher levels discriminate effectively different problem classes 
top level hierarchy defined state transitions agents states semantic relations 
lower level object models specialised adding knowledge goal states events conditions object properties 
highest levels object class hierarchy illustrated 
object containment object returning object management object hiring object placement object allocation object composition financial object exchange object sensing object manipulation objet agent objet cl transition tat hierarchy object class models library nature toolset matcher identify models relevant application hand identify generic requirements inferred domain part system requirements specification 
authors proposed generic knowledge requirements engineering requirements apprentice generalised application frames ithaca project 
software engineering libraries abstractions described level design architectures shaw reusable functions limited success practice pietro diaz 
similar classes proposed artificial intelligence chandrasekaran 
knowledge engineering methods notably kads espoused generic domain classes small number classes described detail 

requirements engineering process support turn attention third interesting aspect requirements engineering providing sufficient process support arriving accurate complete requirements specification 
recognised conceptual modelling development aspects product process aspects really investigated 
methods conceptual modelling maze steps guidelines checklists heuristics far provide help guidance build products 
assumed process development linear cartesian nature 
quite usual base methods tools process models waterfall model royce 
contrast requirements engineering explicitly considered issue process support provided 
discussed earlier requirements engineering exploratory activity driven objectives activities carried stakeholders 
important issues arise 
attention deal real productive tasks requirements engineering 
words necessary guide requirements engineering process concentrate discovering goals scenarios 
learn past practice 
decisions taken situation past benefit experience 
necessary keep trace past decisions 
aspects requirements engineering process guidance tracing actively supported computer assisted tools 
comment aspects process guidance process tracing tool support turn 
guidance far issue guidance concerned experience exists software engineering guidance classified active passive 
focussed ensuring development process employed instance process model consequently guidance directed process model enforcement 
concerned identification done development process 
feiler passive guidance defined generation subsequent presentation set legal steps available moment development process 
selected task done 
software engineering view active guidance provided 
guidance provided adequate process model 
existing process models adequate requirements engineering prescribe predefined plan actions 
current workflow software process models osterweil finkelstein directly applicable lehman assume broad coverage fairly strict control process 
activity oriented process models royce come analogy problem solving provide frame manual management projects 
linear view inadequate methods support backtracking reuse previous designs parallel engineering 
product oriented process models humphrey finkelstein represent development process evolution product 
permit design tracing terms performed transformations resulting products 
decision oriented models integrate deeply semantics attached evolutionary aspects 
notion design decision facilitates understanding designer intention better reuse results potts flexibility situatedness requirements engineering processes adequately covered existing decision oriented models 
importance situatedness process modelling acknowledged software engineering community soon strict prescription process model led dissatisfaction 
actual practice departures prescription occurred russo 
concerted effort put allow process models respond departures 
approach assume prescriptive models modify accommodate real processes 
modification achieved ways 
extent deviations prescription allowed modelled constraints cugola cugola cugola 
actual deviation satisfied constraints manageable process enactment mechanism handle 
way handling deviations took prescriptive approach logical prescribed deviations allowed prescription 
second way handling deviations allow changes prescription needed finkelstein 
level dynamicity superimposed basic prescription 
contrast requirements engineering community recognised core task generation exploration alternatives right selected situation hand 
efforts avoid prescription process model focus alternative generation 
real requirements engineering processes need prescriptive components facilities build provided 
focus alternative generation 
seen ibis process model potts ramesh number alternatives resolving issue generated 
process model high level abstraction real methods tools 
contextual model rolland rolland rolland attempted 
context defined application intention requirements engineering situation 
organised requirements engineering methods set contexts kinds executable plan choice contexts respectively 
choice context groups possible alternative ways meeting intention 
alternatives contexts leading hierarchy alternatives 
plan context collection simpler contexts execution various possible orders prescribed plan context meets intention 
executable context directly executed meet intention atomic sense 
seen contextual model attempted reconcile process prescription alternative generation plan contexts choice contexts 
attempt root notion alternatives methods decisional approach prakash 
decisions types atomic complex related different kinds dependencies 
identified decisions performed second identified performed necessarily immediately 
recognising crucial role played product situation interest generating set decisions applicable product situation 
prescriptive capability provided notion complex decisions built simpler decisions order execution prescribed 
decisions built abstractions provided high level choices application engineers 
experience contextual decisional models showed key discriminant factor real processes product situation 
situation strong bearing selecting task best suited handle strategy adopted carrying task 
strategies need reflected process model right dynamically chosen 
attempt model strategic dimension requirements engineering process set strategies select tasks adapted situations rolland 
process model represented labelled directed graph called map 
map uses fundamental notions intention strategy 
intention captures notion task requirements engineer intends perform strategy manner intention achieved 
nodes map intentions edges labelled strategies 
directed nature map identifies intention done 
way process built dynamically guidelines selection alternatives 
intention strategy decided need guideline achieve intention 
guidelines associated map intention selection guidelines determining succeeding intentions strategy selection guidelines determining strategies selected intention achievement guidelines defining way intention achieved 
enactment mechanism invoked carry tasks 
seen requirements engineering community conscious effort developing guidance meet basic needs generating set alternatives applicable product situation reducing amount prescription parts process essential 
tracing requirements engineering community longer question traceability useful thing 
capturing maintaining traces seen essential activity performed requirements engineering ramesh wright standards dod iee mandate requirements traceability practiced 
comprehensive overview possible usage trace information expected benefits ramesh pohl 
reports indicate requirement traceability vital component implementing quality system essential consistent change integration lead errors system development play important role contract situations improve system acceptance 
experience discovered true need re processes traceable 
process traceable means capture knowledge progress process order able restore entire certain decided aspects process 
key issue large projects time changing development groups rationale context key decisions confused lost curtis 
process traceability divided parts pohl process execution traceability recording data enables reassembly sequence steps executed process 
product evolution traceability recording data enables see product evolved process 
traceability relationships process execution product evolution 
pivotal goal process traceability enable tracing requirements produced re process 
hand traceability requirements specification design implementation vice versa needed understand rationale implemented system 
hand process leading requirements specification traceable understand rationale requirements 
differentiation kinds traceability referred called pre traceability davis ieee 
exists object oriented methods recommend product traceability class relation oose jacobson radar bari 
approaches flynn commercial tools rt brown engineering rmt systems technology rdd ascent logic support post traceability 
contrast research contributions pohl ramesh ramesh systems doors qss focusing pre traceability 
results gained surveys ramesh indicate requirements pre traceability important requirements post traceability especially systems embedded constantly changing environment 
interesting framework requirements pre traceability provided pohl pohl described requirements engineering process dimensional space see 
framework assumes major facets re process modelling requirements complete manner modelling formality consensus stakeholders 
facets lead dimensions framework process requirements engineering traced complexity individual cognitive aspect re process leads specification dimension describes degree completeness requirements specification 
social usage aspect leads agreement dimension describes degree members re team agree requirements specification 
system aspect leads representation dimension describes requirements technically described degree formal semantics 
specification agreement representation informal formal opaque complete personal views common view semi formal initial input desired result process chunks dimensions re process 
shown trace requirements engineering process modelled curve dimensions starting initial incomplete informal specification representative individual viewpoints desired output complete fully agreed formally described specification intended system 
capturing re process trace establishing requirements pre traceability means recording information dimensions relationships kinds information relating actual process performance process steps agents produced 
seen requirements engineering community conscious effort understand various facets traceability define information process traceable identify roles trace play development systems 
computer tool support conceptual modelling part system development facilitated automated support form case tools 
wide variety case tools case environments called integrated case icase integrated project support environment built support specific methods 
pointed norman case tools successful automating routine tasks system development 
says possible list things case tools quite large essentially successful providing documentation verification support 
today tools excellent facilities editing maintenance graphical specifications lack functional features projected case architectures bubenko bubenko 
give support distributed operative supporting integration case guiding process application development incorporating reusable specification components huang huang suggested possible features generation case tools process modelling cross platform portability learning standardisation access internet 
traditionally method came case tool 
application engineers expected select method wished follow associated case tool 
application required minor modifications methods tools selected possible changes 
case technology basically resistant change 
sum tool support lacking main directions providing process support adapting needs specific systems 
brought requirements engineering lays emphasis process change management 
evident new approach computer tools needed support requirements engineering 
presents architecture process oriented re support inspired jarke 
architecture repository 
repository extends advocated information resource dictionary framework standard 
similarly repository consists levels 
deals levels product description repository deals levels product process descriptions 
process repository process meta model way working trace model process traces uses defines improves uses uses creates process control guidance method definition learning process trace application engineer method engineer uses modifies repository process integrated environment support environment composed sub environments application engineering environment process guided executed traced method engineering environment process defined improved 
environments process repository contains information necessary provide intended functionality 
seen architecture provides process support application engineers additionally establishes link application method engineering repository 
tool support requirements engineering clearly complex task 
point view application engineering involves number different problems guidance tracing repository structuring management enactment mechanisms efficient interpretation execution process modelling languages configuration management view integration operative development 
application engineering environment needs support exploratory process way automate routine repetitive tasks attention devoted exploring alternatives elaborating usage world 
additionally help bringing different stakeholders final requirements arrived collaborative manner 
environment aid visualisation system 
functions implemented prototypes pohl support pre traceability mentor generic tool sense function method engineering tool case tool depending nature process model prime crews offers whiteboard editor creating fine grained traceability goal models multimedia artefacts sutcliffe guides generation requirements deal system exceptions crews re environment built provide guidance features described goal scenario coupling approach dealt 
decade method engineering arisen separate field study 
number case shells defined consist parts computer assisted method engineering came case generator part 
method engineered appropriate instantiation meta model came part 
case part uses method define application engineering environment 
early came parts organised product meta models metaedit kelly example 
efforts include process aspects came activity meta models 
instantiated activities tasks performed methods defined came tool meta edit kelly example 
meta model defined terms method components 
kinds components called fragments product process fragments chunks rolland realise tight process product coupling 
method engineering seen process assembling method different fragments 
point view method engineering tools support selection situated methods methods meeting contingency factors creation new methods rapidly completely new situation occurs modification existing methods handle minor changes methods assembly situated methods shelf method components gain past experience 
requirements engineering tools support feedback mechanism allows application engineers influence method definition tool construction 

thrust areas requirements engineering embedding systems larger usage context change management possible stepping back merely anticipating functionality system provide done conceptual modelling determination functionality systematic manner 
done identifying aims objectives different stakeholders activities carry meet objectives 
stakeholder driven approach leads better change management capabilities conceptual modelling 
re product keeps track conceptual link objectives activities system requirements 
consequence shift objectives activities performed meet aspects information systems engineering get affected 
new range product models directly represent 
engineering processes involved prescriptive supporting higher creativity place emphasis learning past experience 
supporting tools directed hand automation routine tasks providing direct guidance support discovering objectives activities hand process tracing order benefit past experience 
guidance tracing support needs provided transparent way possible effective obtrusive 
environment needed provides judicious mix automated semiautomated tools perform routine tasks leaving important decision making tasks done requirements engineer 

software requirements engineering methodology age eleven requirements driven design modern software engineering van nostrand reinhold 
anton anton goal requirements analysis 
proceedings nd international conference requirements engineering pp 

process modelling large slang 
proceedings nd international conference software process berlin germany pp 
bari bari 
rolland methodology object oriented design prakash 
ed data management current trends tata mcgraw hill new delhi proc 
intern 
conf 
management data pp 
melo supporting software development processes adele 
computer journal vol pp 
borgida borgida mylopoulos wong generalization specialization basis software specification 
brodie mylopoulos schmidt eds conceptual modeling springer verlag 
formalisation information systems modelling ph thesis university nijmegen thesis publishers amsterdam 
brodie brodie silva active passive component modelling acm pcm ifip wg working conference information system design methodologies comparative review north holland 
brunet brunet events high level specification proceedings international conference entity relationship modelling er lausanne switzerland 
bubenko bubenko temporal dimension information modelling architecture models data base management systems north holland pub netherlands pp 
bubenko bubenko research directions conceptual specification development conceptual modelling databases case loucopoulos zicari 
eds wiley bubenko bubenko jr 
worlds requirements acquisition modelling th european japanese seminar information modelling knowledge bases kista sweden eds ios pub 
bubenko bubenko rolland loucopoulos de facilitating fuzzy formal requirements modelling proc 
int 
conf 
requirements engineering colorado springs usa 
scenario perspective system development scenario design envisioning technology system development ed carroll 
chandrasekaran chandrasekaran tanner explanation knowledge systems roles task structures domain functional models proc 
workshop task explanation greece university 
chung chung nixon yu dealing change approach non functional requirements requirements engineering journal vol nb pp 
clifford clifford warren formal semantics time databases acm trans 
database systems vol cockburn cockburn structuring cases goals 
technical report 
human technology dell rd salt lake city ut hat tr members aol com papers htm 
cugola cugola di ghezzi deal deviations process model enactment 
proceedings th international conference software engineering icse seattle washington usa april 
cugola cugola di fuggetta ghezzi framework formalizing inconsistencies deviations human centered systems 
acm transactions software engineering methodology vol 
num 
july 
cugola cugola inconsistencies deviations process support systems 
ph thesis politecnico di milano february 
curtis curtis krasner field study software design process large systems comm 
acm vol 
briand case driven requirements engineering process 
third ieee international symposium requirements engineering re maryland ieee computer society press 
dardenne dardenne fickas van lamsweerde goal directed concept acquisition requirements elicitation proc 
th ieee workshop system specification design como italy 
dardenne dardenne fickas goal directed requirements acquisition science computer programming pp 
davies davies object functions states prentice hall englewood cliffs nj 
davis davis analysis specification systems software requirements systems software requirements engineering tayer 
eds ieee computer society press pp tutorial 
object engineering fourth dimension addison wesley masson 
dod military standard defense system software development department defense 
requirements mechanisms proc 
th european workshop software process technology 
dubois dubois formal requirements engineering philips journal research vol 
dubois eric dubois philippe du bois michal petit agent oriented requirements engineering case study albert language proc 
fourth international working conference dynamic modelling information system iv sol bots editors netherlands september 
consortium esprit program technologies business processes best business practice pilots 
electrical enterprise knowledge transforming applications 
www singular gr january june 
consortium system design specification ppc deliverable march 
erickson erickson notes design practice stories prototypes catalysts communication scenario design envisioning technology system development ed carroll 
feather feather fickas coping requirements freedoms workshop notes int 
workshop development intelligent information systems niagara ontario 
feiler feiler humphrey software process development enactment concepts definitions proceedings 
second intl 
conf 
software process 
finkelstein finkelstein kramer viewpoint oriented software development proc 
conf le ses applications toulouse 
finkelstein finkelstein kramer nuseibeh eds software process modelling technology john wiley pub 
modelling dynamic behaviour systems mechanisms classes scenarios software pages 
sigs publications ny 
flynn flynn automated requirements traceability system arts experience years systems software requirements tayer 
eds ieee computer society press tutorial pp peugeot specification object process modeling language esf report 

pernici recast tool reusing requirements conf 
caise stockholm may 
integrated formal model scenarios statecharts lecture notes computer science pages 
finkelstein analysis requirements traceability problem proceedings ont conf 
requirements engineering colorado springs cp pp ieee computer society press 
finkelstein modelling contribution structure underlying requirements proc 
int 
workshop requirements engineering foundation software quality netherlands 
social issues requirements engineering proceedings ieee symposium requirements engineering ieee computer society press 
ontolingua mechanism support portable ontologies version 
technical report knowledge systems laboratory stanford university ca 
lee acquiring software design schema machine learning perspective proc 
th knowledge software engineering conference ieee computer society press 
harel harel statecharts visual formalism complex systems sci 
computer program pp 

dobson change evolution requirements challenge practice software engineering ieee symposium requirements engineering re san diego ca jan 
computer aided method engineering existing meta case technology proc 
fourth workshop generation case tools paris france 
peter klaus pohl klaus requirements elicitation validation real world scenes appear ieee transactions software engineering vol 
special issue scenario management december 
holbrook holbrook scenario methodology conducting requirements elicitation 
acm sigsoft software engineering notes vol 
pp 

january 
hsia hsia samuel gao kung chen formal approach scenario analysis ieee software pp 

huang huang making active case tools generation case tools software engineering notes 
humphrey humphrey kellner software process modeling principles entity process models proc 
th int 
conf 
software engineering 
ieee guide software requirements specification ansi ieee std 
information technology information resource dictionary system framework iso iec international standard 
conradi process modelling evolution epos 
proceedings th international conference software engineering knowledge engineering pp capri italy 
jackson jackson zave domain descriptions ieee symposium requirements engineering ieee computer society press jackson jackson problems methods specialisation 
contributions special issue se journal software engineering year 
jacobson jacobson jonsson object oriented software engineering case driven approach addison wesley jacobson jacobson case construct object oriented software engineering 
scenario design envisioning technology system development john carroll ed john wiley sons 
jarke jarke pohl establishing visions context model requirements processes 
proc 
th intl 
conf 
information systems orlando fl 
jarke jarke pohl rolland schmitt experience method evaluation improvement process modelling approach proceedings intl 
ifip conf 
methods associated tools information systems life cycle pp netherlands 
johnson johnson chaos dollar drain project failures 
application development trends pp january 
missing link requirements engineering acm sigsoft software engineering notes 
loucopoulos aligning legacy information systems business processes 
proceedings th conference advanced information systems engineering caise 
pisa italy june 
kelly kelly rossi meta edit fully configurable multi user multi tool case came environment proceedings caise conference springer verlag 
bubenko enterprise modelling improving quality requirements specifications information research seminar iris finland august 
creating contexts design john carroll editor scenario design envisioning technology system development pages 
john wiley sons 
scenarios validation conceptual specification proceedings sixth workshop generation case tools finland june 
lehman lehman process models process programs programming support proc 
th int 
conf 
software engineering leite leite rossi kaplan enhancing requirements baseline scenarios 
third ieee international symposium requirements engineering re maryland ieee computer society press pp 

loucopoulos loucopoulos fuzzy formal view requirements engineering 
des information vol 
pp 

loucopoulos loucopoulos rolland grosz project enterprise knowledge modelling change distribution unit public power nd imacs international conference circuits systems computers imacs csc athens greece pp 

potts richer review state practice requirements modeling 
proc 
ieee symp 
requirements engineering san diego 
macaulay macaulay requirements capture cooperative activity ieee symposium requirements engineering ieee computer society press 
maiden maiden sutcliffe computational mechanisms reuse domain knowledge requirements engineering icse workshop research issues intersection software engineering artificial intelligence sorrento italy may 
maiden maiden knowledge acquisition techniques requirements engineering proc 
workshop requirements elicitation system specification keele uk july 
martin martin odell object oriented analysis design prentice hall cliffs nj 
methodology engineering case shells design issue current practice phd thesis computer science information systems reports technical report tr 
mcgraw karen mc harbison user centered requirements scenario engineering process 
lawrence erlbaum associates publishers 
mylopoulos mylopoulos chung nixon representing non functional requirements process oriented approach ieee trans 
software eng 
vol 
nardi nardi scenarios design sigchi bulletin 
norman norman forte eds case special section cacm 
grosz rolland change process modelling change management method proceedings european conference information systems 
rolland cmm electronic guide book managing change organisations submitted european japanese conference olle olle macdonald rolland sol van stuart information systems methodologies framework understanding addison wesley 
osterweil osterweil software processes software proc 
th int 
conference software engineering ieee computer society washington dc pp 
pietro diaz pietro diaz implementing faceted classification software reuse communications acm vol 
maiden sutcliffe dubois approach construction scenario methods 
proceedings international software process association th international conference software process chicago illinois usa june 
pohl pohl 
process centered requirements engineering wiley sons 
pohl pohl modelling contextual information scenarios 
proceedings third international workshop requirements engineering foundations software quality barcelona pp june 
pohl pohl dimensions requirements engineering framework application information systems vol pp 
pohl pohl jarke pro art environment enabling requirements traceability technical report informatik rwth aachen 
potts potts fitness system quality matters 
proceedings third international workshop requirements engineering foundations software quality barcelona pp 
june 
potts potts generic model representing design methods proc 
th int 
conf 
software engineering 
potts potts takahashi anton inquiry requirements analysis 
ieee software pp 

prakash prakash formal definition methods requirements engineering journal springer verlag 
prat prat goal formalisation classification requirements engineering 
proceedings third international workshop requirements engineering foundations software quality barcelona pp 
june 
rolland accepted publication proceedings th intl 
conf 
advanced information systems engineering caise springer verlag 
ramesh ramesh model requirements traceability systems development technical report naval postgraduate school monterey ca 
ramesh ramesh edwards issues development requirements traceability model proc 
ieee symp 
requirements engineering ieee computer society press san diego ca 
ramesh ramesh powers edwards implementing requirements traceability case study proceedings nd symposium requirements engineering re pp york uk 
capturing functional requirements object interactions proceedings pages 
ieee 
waters requirements apprentice automated assistance requirements acquisition ieee transactions software engineering vol 
rolland rolland richard tools information systems design management proc 
th int 
conf 
vldb 
rolland rolland richard methodology information systems design management ifip wg working conference information system design methodologies comparative review north holland 
rolland rolland expert system requirements engineering proc 
th int 
conf 
advanced information systems engineering caise springer verlag pub 
rolland rolland modelling requirements engineering process information modelling knowledge bases ios press 
rolland rolland prakash contextual approach requirements engineering process proc 
int 
ieee conf 
software engineering knowledge engineering riga 
rolland rolland moreno approach defining ways working information systems journal vol 
pp 
rolland rolland ben guiding construction textual case specifications 
data knowledge engineering journal vol 
pp 
ed 
chen van de north holland elsevier science publishers 
march 
rolland rolland grosz way working change processes international research symposium effective organisations sep uk rolland rolland ben 
guiding goal modelling scenarios ieee transactions software engineering special issue scenario management vol 
dec 
rolland rolland loucopoulos intention modelling organisational change publication rolland rolland ben sutcliffe maiden jarke pohl dubois proposal scenario classification framework 
requirements engineering journal vol pp 

rolland rolland prakash multi model view process modelling requirements engineering journal communication 
royce royce managing development large software systems proc 
ieee 
rubin rubin object behavior analysis communications acm sept pp 
rumbaugh rumbaugh blaha premerlani eddy lorensen object oriented modelling design 
prentice hall 
russo russo adaptation system development methodologies proceedings international resources management 
association conference atlanta usa shaw shaw heterogeneous design idioms software architecture th international workshop software engineering design ieee computer society press 
si said rolland grosz mentor computer aided requirements engineering environment proc th int 
conf 
advanced information systems engineering caise springer verlag automation requirements engineering scenarios journal computing information special issue th international conference computing information waterloo canada pp 
standish standish group chaos 
standish group internal report www com chaos html 
sutcliffe sutcliffe maiden theory domain knowledge requirements engineering nature report deliverable august 
sutcliffe sutcliffe maiden manuel supporting scenario requirements engineering ieee transactions software engineering special issue scenario management vol nb pp dec 
rolland tool support goal scenario approach requirements engineering submitted information software technology journal editor martin shepperd publishers elsevier science van lamsweerde van lamsweerde massonet goal directed elaboration requirements meeting scheduler problems lessons learnt proc 
re nd int 
symp 
requirements engineering york ieee pp 
van lamsweerde van inferring declarative requirements specification operational scenarios ieee transactions software engineering special issue scenario management vol 
dec 
pohl jarke scenario usage system development report current practice 
ieee software march 
modeling support information systems development phd 
thesis thesis publishers 
van de velde schreiber akkermans expertise model definition document kads project document kads ii uva university amsterdam 
amplification business cognition modelling techniques th iea congress paris wood wood christel stevens multimedia approach requirements capture modelling proceedings 
colorado springs 
wright wright scenario sigchi bulletin volume number october 
wright wright requirements traceability proceedings 
colloquium tools techniques maintaining traceability design ieee professional group se london uk 
russo system development methodologies unanswered questions research practice gap proc 
th eds 
bostrom orlando usa pp 

young young barnard scenarios human computer interaction research cumulative science chi gi human factors computing systems graphics interface toronto 
yourdon yourdon modern structured analysis prentice hall 
yu eric sk yu john mylopoulos 
understanding software process modelling analysis design 
proc 
th international conference software engineering icse sorrento italy may 
ieee acm 
yu eric sk yu john mylopoulos 
er ar modelling strategic actor relationships business process reengineering 
proc 
th international conference entity relationship approach er manchester uk december 
yu eric sk yu john mylopoulos 
modelling strategic actor relationships information systems development examples business process reengineering 
proc 
th workshop information technologies systems wits vancouver canada december 
