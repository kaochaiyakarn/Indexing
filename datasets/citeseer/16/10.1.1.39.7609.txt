programming language semantics david schmidt department computing information sciences kansas state university october programming language possesses fundamental features syntax semantics 
syntax refers appearance formed programs language semantics refers meanings programs 
language syntax formalized grammar syntax chart formalization back language manual 
language semantics formalized appear language manual 
topic chapter 
traditional computer scientists calculate semantics program testcase input tracing program execution state table flow chart 
form semantics called operational semantics forms semantics tied test cases traces study approaches 
ask gain formalizing semantics programming language 
answer consider related question gained language syntax formalized 
formalization syntax bnf rules produced benefits ffl syntax definition official syntax language 
crucial users require guide writing syntactically correct programs implementors write correct parser language compiler 
ffl syntax definition permits formal analysis properties definition ll lr ambiguous 
ffl syntax definition input compiler front generating tool yacc 
way syntax definition implementation front language compiler 
similar benefits providing formal semantics definition programming language ffl semantics definition official semantics language 
crucial users require guide understanding programs write implementors write correct code generator language compiler 
ffl semantics definition permits formal analysis properties definition strongly typed block structured single threaded 
ffl semantics definition input compiler back generating tool sis mess 
way semantics definition implementation back language compiler 
programming language syntax studied intensively presently programming language semantics undergoing similar intensive study 
acceptance bnf standard definition method syntax appears single definition method take hold semantics semantics harder formalize syntax wider variety applications 
semantics definition methods fall roughly groups ffl operational meaning formed program trace computation steps results processing program input 
operational semantics called intensional semantics sequence internal computation steps intension important 
example differently coded programs compute factorial different operational semantics 
ffl denotational meaning formed program mathematical function input data output data 
steps taken calculate output unimportant relation input output matters 
denotational semantics called extensional semantics extension visible relation input output matters 
differently coded versions factorial denotational semantics 
ffl axiomatic meaning formed program logical proposition specification states property input output 
example proposition oe 
axiomatic semantics factorial program 
survey semantics methods survey semantic methods applying turn world oldest simplest programming language arithmetic 
syntax arithmetic language stands set numerals language notion input data output data contain notion computation useful example initial case studies 
operational semantics versions operational semantics arithmetic 
learned child called term rewriting system 
term rewriting system uses rewriting rule schemes generate computation steps 
just rewriting rule scheme arithmetic sum numerals rule scheme states addition numerals computation step 
scheme rewrite 
operational semantics program sequence computation steps generated rewriting rule schemes 
example operational semantics program goes follows semantics shows computation steps led answer 
intermediate expression state operational semantics trace states computation 
noticed legal semantics example 
outcome cases operational semantics forced deterministic program exactly operational semantics 
structural operational semantics term rewriting system plus set inference rules state precisely context computation step undertaken say desire left right computation arithmetic expressions 
encoded follows sum rule second rule states left operand addition expression rewritten addition expression revised show 
third rule crucial right operand addition expression rewritten left operand numeral completely evaluated addition expression revised show 
working rules force left right evaluation expressions 
computation step deduced rules 
example deduce initial computation step step note deduce 
try 
computation step justified deduction deduction simply finished 
example shows semantics structural computation step addition affects small part program explicitly embedded structure program 
operational semantics represent internal data structures instruction counters storage vectors stacks 
example say semantics arithmetic show stack hold intermediate results 
state form hs ci stack arithmetic expression executed 
stack containing items written nil topmost item nil marks bottom stack 
component written stack 
initial state arithmetic expression written hnil nili computation proceeds state appears hv nil nili say result semantics uses rewriting rules hs ci hn ci hs ci hs add ci hn add ci hn ci sum structural operational semantics called small step semantics computation step small step final answer 
rule says numeral evaluated pushing top stack 
second rule states addition expressions decomposed evaluating expressions adding 
third rule removes top items stack adds 
previous example repeated hnil nili hnil add nili hnil add add nili nil add add nili nil add add nili nil add nili nil nili form operational semantics called state transition semantics rewriting rule operates entire state 
state transition semantics course need structural operational semantics rules 
example semantics shown typical operational semantics 
wishes prove properties operational semantics definition standard proof technique induction length computation 
prove property holds operational semantics show holds possible computation sequences generated rewriting rules 
arbitrary computation sequence suffices show holds matter long computation runs 
shows holds zero computation steps outset ii holds computation steps holds steps 
see nielson nielson examples 
denotational semantics drawback operational semantics emphasis places state sequences 
arithmetic language distracted questions regarding order evaluation subphrases issue central arithmetic 
key aspect arithmetic property meaning expression built meanings subexpressions obscured operational semantics 
denotational semantics handles issues emphasizing program underlying mathematical meaning independent computation strategy taken uncover 
case arithmetic expression meaning need worry internal computation steps taken discover 
assignment meaning programs performed compositional manner meaning phrase built meanings subphrases 
see denotational semantics arithmetic language note meanings arithmetic expressions natural numbers nat note binary function plus nat theta nat nat maps pair natural numbers sum 
denotational semantics definition arithmetic simple elegant expression nat plus line merely states name function maps arithmetic expressions meanings 
just bnf constructions expressions completely defined equational clauses 
interesting clause says meanings combined compositionally plus 
denotational semantics example program plus plus plus plus plus read follows meaning equals meanings added 
meaning meaning meaning expression 
reading says order evaluation run time data structures emphasizes underlying mathematical meaning 
alternative way understanding semantics write set simultaneous equations denotational definition plus plus plus solve equation set discover 
denotational semantics states meaning phrase terms meanings subphrases associated proof technique structural induction 
prove property holds programs language show meaning construction language property show equational clause semantic definition produces meaning property case clause refers subphrases may assume meanings subphrases property see nielson nielson examples 
natural semantics semantics method proposed halfway operational semantics denotational semantics called natural semantics 
structural operational semantics natural semantics shows context computation step occurs denotational semantics natural semantics emphasizes computation phrase built computations subphrases 
natural semantics set inference rules complete computation natural semantics single large derivation 
natural semantics rules arithmetic language sum read configuration form evaluates 
rules resemble denotational semantics written inference rule form accident natural semantics viewed denotational semantics variant internal calculations meaning explicit 
internal calculations seen natural semantics example expression denotational semantics natural semantics claim meaning program necessarily mathematical 
structural operational semantics configuration says transits intermediate state natural semantics asserts final answer reason natural semantics called big step semantics 
interesting drawback natural semantics semantics derivations drawn terminating programs 
usual proof technique proving properties natural semantics definition induction height derivation trees generated semantics 
see nielson nielson 
axiomatic semantics axiomatic semantics produces properties programs meanings 
derivation properties done inference rule set looks somewhat natural semantics 
example say wish calculate odd properties programs arithmetic set properties simply fis 
define axiomatic semantics mod odd mod odd derivation odd property example program odd odd odd odd usual case properties proved programs expressed language predicate logic see section 
axiomatic semantics strong ties interpretation denotational natural semantics definitions 
semantics programming languages semantics methods shine applied realistic programming language primary features programming language subtle features receive proper mention 
ambiguities anomalies stand thumb 
section give semantics block structured imperative language 
emphasis placed denotational semantics method excerpts semantics formalisms provided comparison 
language syntax informal semantics syntax programming language 
stated levels syntax constructions language topmost level program primary basically language loop language local nonrecursive procedure definitions 
simplicity variables just program operates follows input number read assigned location 
identifier numeral sets collections words terminal symbols phrase level syntax constructions sense chapter 
program declaration command expression identifier upper case alphabetic strings numeral proc call od language syntax rules body program evaluated completion storage vector holds results 
example program computes positive input result location proc incr call incr od 
possible write nonsense programs language example call programs meaning attempt give semantics 
nonsense programs trapped type checker elegant way defining type checker set typing rules programming language see chapter details 
domains denotational semantics give denotational semantics sample language state sets meanings called domains 
imperative block structured language primary domains domain storage vectors called store ii domain symbol tables called environment 
secondary domains booleans natural numbers 
primary domains operations displayed 
domains operations deserve study 
store domain states storage vector triple 
recall programs exactly variables 
operation lookup extracts value store lookup update updates store update 
operation init store creates starting store 
examine check momentarily 
environment domain states symbol table list identifier value pairs 
example variable name location name procedure noop environment holds information appear id nil id 
procedures discussed momentarily 
operation find locates binding identifier environment find id nil bind adds new binding bind id nil id nil 
operation init env creates environment start program 
section see job command assignment update store 
meaning command function maps current store updated 
op command identity function id store 
commands loop updated store appears 
symbol read store fhn nat lookup theta store nat lookup hn update theta nat theta store store update hn hn update hn hn update hn hn ni init store nat store init store hn check store store theta store 
store store store check environment identifier theta list elements nil store store find identifier theta environment find nil find rest find rest bind identifier theta theta environment environment bind init env environment init env nil semantic domains bottom stand looping store store stand set possible outputs commands 
meaning command function form store store 
impossible recover looping command sequence looping proceed 
check operation subsection watch situation 
commonly notations 
functions id reformatted read id general write write argument function right equals sign 
called lambda notation stems lambda calculus elegant formal system functions 
notation emphasizes function value right ii function name second common revise function takes multiple arguments takes arguments time arity theta new arity 

reformatting trick called currying haskell curry developers lambda calculus 
denotational semantics programs gives denotational semantics programming language 
syntax language levels semantics organized levels meaning 
level define valuation function produces meanings constructions level 
program nat nat 
init env init store declaration environment environment proc bind command environment store store update find check call find od 
check expression environment store 
nat bool plus lookup find denotational semantics example expression level constructions mapped meanings meaning expression say 
meaning depends location named number stored location 
meaning dependent current value environment current value store 
current environment nil current store meaning plus plus lookup find plus lookup plus simple derivation shows data structures symbol table storage vector modelled environment store arguments 
pattern semantics definition 
noted previous section command updates store 
precisely stated valuation function commands command environment store store 
example see update find update crucial point meaning assignment function stores 
uncertain current value store know environment assignment conclude update plus lookup assignment environment function updates store location 
consider example command sequence call check call check find check noted earlier section check operation verifies command sequence produces proper output store store handed second command sequence 
see meaning call store updating function bound environment 
procedures placed environment declarations see example denote nil proc call call proc call bind call bind update lookup call id id update lookup call equality marked significant assert function update lookup identical appealing extensionality law mathematics functions map identical arguments identical answers functions identical 
extensionality law denotational semantics meanings program phrases mathematical functions 
contrast extensionality law operational semantics calculations 
combine series little examples semantics complete program proc call proc call init env init store proc call semantics loop difficult clause semantics definition loop 
intuition produce output store loop od terminate finite number iterations 
measure behavior od loop iterate times loop runs iterations exhausted output 
example input store loop od produce output store greater 
output 
easy conclude family od written equivalently od exhausted meaning 
od od skip fi refer back draw od od behavior loop union behaviors loops conclude semantic union operation defined function set store store function represented set argument answer pairs 
called graph function 
union graphs functions definition succinct awkward practice 
intuitive way defining semantics od check problem definition circular circular definitions malformed 
fortunately definition claimed denote function equality holds check solution fixed point circular definition fact smallest function equality hold 
fixed point 
typically denotational semantics loop circular definition claim circular definition stands fixed point 
called fixed point semantics 
omitted technical details regarding fixed point semantics available texts 
action semantics disadvantage denotational semantics dependence functions describe forms computation 
result denotational semantics large language dense read low level modify 
action semantics easy read denotational semantics variant problems family standard operators describe standard forms computation standard languages 
action semantics standard domains called facets predefined expressions functional facet declarations declarative facet commands imperative facet 
facet includes set standard operators consuming values facet producing new ones 
operators connected combinators pipes resulting action semantics definition resembles data flow program 
example semantics assignment reads follows execute find evaluate update naively read semantics english sentence word operator combinator execute evaluate find declarative facet operator update imperative facet operator combinators 
equation accepts inputs declarative facet argument environment imperative facet argument store pipes operators 
find consumes declarative argument produces answer independently evaluate consumes declarative imperative arguments produces functional answer 
combinator pairs combinator transmits important technical details glossed 
pairs form ignored union graphs performed 
second graph subset graph ensures union graphs function 
proc bind find update find call false od true od od natural semantics pair update operator uses pair imperative facet argument generate new imperative result 
important aspects action semantics definition standard arguments environments stores implicit ii standard operators standard computation steps find update iii combinators connect operators seamlessly pass values implicitly 
lack space prevents closer examination action semantics see watt 
natural semantics language compare denotational semantics imperative language natural semantics formulation 
semantics constructions appear 
command configuration form inputs command output 
understand inference rules read bottom 
example rule says inputs find location bound calculate output update producing output 
rules denotational differences arise key constructions 
semantics procedure declaration binds function environment command pair called closure 
procedure called closure disassembled text environment executed 
natural semantics function arguments called order semantics 
denotational semantics called higher order semantics 
second loop rules circular 
second rule states order derive loop computation terminates derive test true ii body outputs iii derive terminating loop computation outputs rule feel loop running backwards termination starting point complete derivation shown shows iterations loop read root leaves derivation tree 
important aspect natural semantics definition derivations drawn terminating computations 
nonterminating computation equated computation 
nil od true find false natural semantics derivation hn si sum si hi si hi si hi si update find hc si hc hc si hc hc si hc si hc od si hif od skip fi si si si find hc si hc si hc si si proc bind si si structural operational semantics operational semantics language fragment structural operational semantics imperative language 
expressions computation step takes form si environment expression evaluated current store rewritten 
case command step appears hc si hc computation update store 
computation step uses command step appears hc si rules tedious natural semantics individual computation steps defined order steps undertaken defined 
complicates rules command composition example 
hand rewriting rule loop merely decodes loop conditional command 
rules procedure call awkward natural semantics procedure represented closure form 
execute environment oe fp oe fqg frg frg fp fqg fp fqg fp axiomatic semantics different environment exists procedure called rewriting step call retain environments new construct remembers 
similar trick 
natural semantics definition computation written nonterminating program computation state sequence countably infinite length 
axiomatic semantics language axiomatic semantics uses properties stores stores 
example write predicate assert current value store contains location positive number location 
write configuration assert predicate holds true prior evaluation command predicate holds termination terminate 
example write fx gy holds true 
ways stating semantics command axiomatic semantics ffl relational semantics meaning set pairs holds 
ffl postcondition semantics meaning function input predicate output predicate 
write slp means holds holds case implies called strongest liberal postcondition semantics 
termination demanded name strongest postcondition semantics 
ffl precondition semantics meaning function output predicate input predicate 
write wlp means holds fp holds case implies called weakest liberal precondition semantics 
termination demanded name weakest precondition semantics 
traditional study relational semantics focus 
intended behavior program written pair predicates relational semantics verify holds 
example wish show integer division subroutine div takes inputs num den produces outputs quo rem behavior den theta den rem proof claim derivation built rules 
gamma oe fp gy fp fp gz fp fp gc fp oe fp gc fp fp axiomatic semantics derivation displays rules primary command constructions 
rule states property hold completion assignment restated terms holds 
stands substitution phrase free occurrences example fx gy holds 
second rule lets weaken result 
example oe holds deduce fx gy holds 
properties command composition defined expected way third rule 
fourth rule command property hold termination holds regardless arm conditional evaluated 
note arm conditional uses information result conditional test 
fascinating rule loop 
show property preserved body loop assert matter long loop iterates hold termination 
called loop invariant 
rule encoding mathematical induction proof show holds completion loop prove basis case holds loop entry zero iterations ii induction case holds iterations holds iterations 
loop terminates number iterations induction proof ensures holds 
example shows rules action 
wish verify fx od fx zg holds true 
key proof determining loop invariant useful invariant implies leaves fx fx zg prove 
backwards rule assignment gives fx gz fx zg deduce fx gamma gy fx holds 
implies gamma assemble complete derivation 
applications semantics increasingly language designers semantics definitions formalize creations 
early example formalization large subset ada denotational semantics 
semantics definition prototyped mosses sis compiler generating system 
scheme widely language standardized denotational semantics 
notable example formalization complete standard ml language structural operational semantics 
significant application semantics definitions rapid prototyping synthesis implementation newly defined language 
prototyping systems sis psi mess actress 
process denotational semantics second process action semantics handles natural semantics 
sis interpreter generators interpret source program semantics definition psi mess actress compiler generators compilers source language synthesized 
major success formal semantics analysis synthesis data flow analysis algorithms semantics definitions 
subject area called interpretation supplies precise techniques analyzing semantics definitions extracting properties definitions applying properties data flow type inference proving soundness code improvement transformations result 
interpretation provides theory allows compiler writer prove correctness compilers 
axiomatic semantics long standing fundamental technique validating correctness computer code 
emphasis large scale safety critical systems placed spotlight technique 
current research data type theory suggests marriage techniques data type checking axiomatic semantics far 
research issues semantics techniques chapter proved highly successful defining improving implementing traditional sequential programming languages 
new language paradigms new challenges semantics methods 
functional programming paradigm higher order functional language functions arguments functions 
language domains complex 
denotational semantics understand complexities applied mathematics called domain theory formalize domains algebraic equations 
example value domain higher order scheme language takes form value nat value value legal values numbers functions values 
course cantor theorem impossible find set satisfies equation domain theory uses concept continuity topology restrict size value solution section value lim nat ctn ctn denotes topologically continuous functions challenging issues arise object oriented programming paradigm 
objects parameters messages objects procedures methods coercion laws inheritance hierarchies allow controlled mismatches actual formal parameters 
just integer actual parameter coerced floating point formal parameter coerce object contains methods addition subtraction multiplication actual parameter method expects formal parameter object just addition subtraction methods 
defined coercions lead unsound programs denotational natural semantics formalize domain hierarchies safe coercions inheritance hierarchies 
challenging topic parallelism communication arises distributed programming paradigm 
multiple processes run parallel synchronize communication 
structural operational semantics adapted formalize systems processes study varieties communication processes undertake 
new notational systems developed specifically subject area 
longstanding research topic relationship different forms semantic definitions 
say denotational semantics axiomatic semantics programming language sense semantics agree 
agreement crucial programmer axiomatic semantics reason properties programs compiler writer denotational semantics implement language 
mathematical logic uses concepts soundness completeness relate logic proof system interpretation semantics similar notions soundness adequacy relate semantics 
standard example proving soundness structural operational semantics denotational semantics program input operational semantics implies denotational semantics 
adequacy form inverse primitive value integer boolean stronger form adequacy called full abstraction proved difficult achieve realistic languages progress 
defining terms action semantics variation denotational semantics low level details hidden modularized sets operators combinators 
axiomatic semantics meaning program property specification logic 
denotational semantics meaning program compositional definition mathematical function program input data output data 
fixed point semantics denotational semantics meaning repetitive structure loop recursive procedure expressed smallest mathematical function satisfies recursively defined equation 
loop invariant axiomatic semantics logical property loop holds true matter iterations loop executes 
natural semantics hybrid operational denotational semantics shows computation steps performed compositional manner 
known big step semantics 
operational semantics meaning program calculation trace computation steps input data 
strongest postcondition semantics variant axiomatic semantics program input property mapped strongest proposition holds true program output 
structural operational semantics variant operational semantics computation steps performed prespecified contexts 
known small step semantics 
weakest precondition semantics variant axiomatic semantics program output property mapped weakest proposition necessary program input output property hold true 
abramsky hankin editors 
interpretation declarative languages 
ellis horwood chichester 
abramsky jagadeesan malacaria 
full abstraction pcf 
proc 
theoretical aspects computer software tacs lecture notes computer science pages 
springer 
apt 
years hoare logic survey part acm trans 
programming languages systems 
brown moura watt 
actress action semantics directed compiler generator 
cc proceedings th international conference compiler construction paderborn lecture notes computer science pages 
springer verlag 
cardelli 
type theory 
allen tucker editor crc handbook computer science engineering 
crc press boca raton fl 
cousot cousot 
interpretation unified lattice model static analysis programs 
proc 
th acm symp 
principles programming languages pages 
acm press 
th 
despeyroux 
executable specification static semantics 
kahn macqueen plotkin editors semantics data types pages 
lecture notes computer science springer verlag 
dijkstra 
discipline programming 
prentice hall 

formal description ada 
jones editor compiler generation 
lecture notes computer science springer verlag 

program derivation 
addison wesley sydney 
gries 
science programming 
springer 
gunter 
foundations programming languages 
mit press cambridge ma 
gunter mitchell 
theoretical aspects object oriented programming 
mit press cambridge ma 
hennessy 
semantics programming languages elementary structured operational semantics 
wiley new york 
hoare 
axiomatic basis computer programming 
commun 
acm 
hoare wirth 
axiomatic definition programming language pascal 
acta informatica 
jones 
software development rigorous approach 
prentice hall 
kahn 
natural semantics 
proc 
stacs pages 
lecture notes computer science springer berlin 
lee 
realistic compiler generation 
mit press cambridge massachusetts 
milner tofte harper 
definition standard ml 
mit press 
morgan 
programming specifications 
ed 
prentice hall 
mosses 
compiler generation denotational semantics 
mazurkiewicz editor mathematical foundations computer science lecture notes computer science pages 
springer berlin 
mosses 
denotational semantics 
van leeuwen editor handbook theoretical computer science volume chapter pages 
elsevier 
mosses 
action semantics 
cambridge university press cambridge england 
muchnick jones editors 
program flow analysis theory applications 
prentice hall 
nielson riis nielson 
level semantics code generation 
theoretical computer science january 
riis nielson nielson 
semantics applications formal 
wiley professional computing 
john wiley sons 

ong 
correspondence operational denotational semantics 
abramsky gabbay maibaum editors handbook computer science vol 

oxford univ press 
pierce 
formal models calculi programming languages 
allen tucker editor crc handbook computer science engineering 
crc press boca raton fl 
plotkin 
structural approach operational semantics 
technical report fn daimi aarhus denmark september 
rees clinger 
revised report algorithmic language scheme 
sigplan notices 
schmidt 
denotational semantics methodology language development 
allyn bacon 
schmidt 
structure typed programming languages 
mit press 
kurtz 
formal syntax semantics programming languages laboratory approach 
addison wesley reading ma 
stoughton 
fully models programming languages 
research notes theoretical computer science 
pitman wiley 
stoy 
denotational semantics 
mit press cambridge ma 
tennent 
semantics programming languages 
prentice hall international englewood cliffs new jersey 
watt 
programming language syntax semantics 
prentice hall international englewood cliffs new jersey 
winskel 
formal semantics programming languages 
mit press cambridge ma 
information best starting point reading comparative semantics text nielson nielson thoroughly develops topics chapter 
see texts kurtz watt 
operational semantics long history modern introductions text plotkin report structural operational semantics 
principles natural semantics documented kahn 
mosses useful denotational semantics textbook length treatments include schmidt stoy tennent winskel 
gunter text uses denotational semantics mathematics compare semantics approaches schmidt text shows influences data type theory denotational semantics 
action semantics surveyed watt defined mosses 
textbooks axiomatic semantics start books gries emphasize precondition semantics effective deriving correct code 
apt excellent description formal properties relational semantics text standard precondition semantics 
hoare landmark papers relational semantics worth reading 
texts written application axiomatic semantics systems development samples jones morgan 
brian howard anindya banerjee provided helpful criticism 

