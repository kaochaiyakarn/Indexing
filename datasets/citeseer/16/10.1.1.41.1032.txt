asynchronous completion token object behavioral pattern efficient asynchronous event handling timothy harrison douglas schmidt irfan pyarali harrison cs wustl edu schmidt cs wustl edu irfan cs wustl edu department computer science washington university st louis missouri appeared proceedings rd annual pattern languages programming conference allerton park illinois september 
asynchronous completion token pattern allows applications efficiently associate state completion asynchronous operations 
contemporary applications respond types events ranging user interface notifications network messages 
delay sensitive applications network management systems perform long running operations asynchronously avoid blocking processing pending events 
asynchronous operations complete applications may need information notification properly handle event 
describes applications benefit asynchronous completion token pattern 
intent efficiently associate state completion asynchronous operations 
known magic cookie motivation context illustrate asynchronous completion token pattern consider structure network management application monitors performance status multiple components distributed electronic medical imaging system emis 
shows simplified view management application emis components 
distributed emis including modalities clinical diagnostic workstations perform imaging processing image image server server agent agent host host management management application application image image server server agent agent host host monitoring station monitoring station participants emis management system 
performance reliability emis crucial physicians medical staff patients system 
important monitor state emis components carefully 
agents address need propagating events emis components image servers back management application central monitoring station 
administrators management application view control status performance emis 
shows typical sequence events management application agents emis components 
management application initially registers agent periodic updates 
example application may register receive events time image server particular host accepts new network connection 
agent detects new connection image server sends new connection event management application 
management application display new connection graphically console 
agent sends event management ap display hierarchical storage management hsm systems patient record databases 
consider image servers store retrieve medical images 
image image server server agent agent management management application application monitoring station monitoring station register image register image server connection server connection info info notify management notify management application application return connection return connection info info notify agent notify agent connection event connection event remote host remote host event registration callback 
plication application specific actions performed 
instance management application may need update graphical display record event local database 
management application register types events number agents efficiently determine appropriate action event 
specifically agents provide utility management application associate additional state event notification 
associated state sufficient management application determine appropriate response updating graphical display logging database event 
general providing asynchronous service emis agents propagating events management applications service allow clients associate state asynchronous operations 
clients state decide appropriate actions perform completion operations 
key design challenge examined efficiently associate application specific state completion notifications 
common traps pitfalls way execute multiple long duration operations simultaneously utilize threads 
instance management application spawn separate thread request agent 
request execute synchronously blocking agent replied 
approach state information required handle agent replies stored implicitly context thread run time stack 
drawbacks completely synchronous approach threading ffl increased complexity threading may require complex concurrency control schemes ffl poor performance threading may lead poor performance due context switching synchronization data movement ffl lack portability threading may available os platform 
way associate state completion asynchronous operation depend information returned asynchronous service 
example agents provide sufficient information callback management application distinguish possible events 
limitations approach ffl excessive bandwidth providing sufficient data client may require excessive amount data exchange 
may particularly costly distributed services 
ffl lack context may difficult service know data needed clients 
instance emis agents know context management application request 
ffl performance degradation client may perform time consuming processing searching large table uniquely identify completion asynchronous event data returned service 
extra processing degrade performance client 
solution efficient flexible way associate state completion events asynchronous completion token act pattern 
illustrate solution consider emis example described section 
management application registers agent periodic updates 
creates act passes agent 
emis event occurs agent calls management application passes back act originally sent 
agent change value act management application act regain state needed process event notification 
example concrete consider typical scenario emis administrator uses management application log connections particular image server 
usual management application register image server agent notified connection events 
connection events arrive management application know log data addition performing normal graphical updates 
asynchronous completion token pattern addresses need allowing management application pass image image server server agent agent remote host remote host management management application monitoring monitoring station station register agent register agent passing passing notify management notify management application application connection info connection info 
create act create act notify agent notify agent connection event connection event regain state regain state event registration callback acts 
opaque value act 
instance registering agent management application pass act state object 
state object contains user interface order updated logging object 
connection events arrive management application state object referenced act update correct user interface record event appropriate logging object 
shows order events scenario 
management application registers agent creates state needed handle event notifications 
management application passes state object act 
connection created image server agent notified subsequently calls back management application 
management application receives connection information act guide subsequent event specific actions 
applicability providers asynchronous services asynchronous completion token pattern circumstances service client asynchronous completion token structure participants token pattern 
ffl service performs client requests asynchronously 
operations synchronous may need provide explicit hook state state implicit activation record client blocks 
ffl notification provided service completion asynchronous operation sufficient clients uniquely identify operation 
ffl service knows applicationspecific nature clients 
acts provide clear separation application policy service mechanism 
acts implemented regard type void pointers services need know type system clients 
structure participants illustrates participants asynchronous completion token pattern ffl asynchronous completion token logger window state asynchronous completion token clients services returned completion asynchronous operations 
tokens indices tables direct pointers memory holding state necessary handle completion operation 
service act simply opaque object read written 
fact acts represented void avoid type intrusive 
ffl service image server agent service provides type asynchronous task clients 
emis example agents provide utility asynchronously propagating emis events management applications 
services may hold collection acts appropriate returned client asynchronous operation completes 
client client act creation act creation service service act act create asynchronous asynchronous operation operation operation operation completion completion invoke act client processing client processing notify act access operation access operation specific state specific state participant collaborations asynchronous completion token pattern 
ffl client management application requests asynchronous operations service 
requires applicationspecific state completion notification correctly handle asynchronous events 
emis example management application client agent 
collaborations shown interactions participants act pattern divided phases ffl act creation invoking asynchronous operation service client creates state associated operation 
act passed service 
ffl asynchronous operation invocation invoking operation service client passes state act 
ffl client processing client continues executing service performs request client 
ffl asynchronous operation completion operation completes service notifies client returns act 
client uses act regain needed state continues application specific actions operation 
consequences advantages asynchronous completion token pattern ffl relieves clients managing state explicitly clients need keep complicated records pending events act returned completion contains necessary information 
ffl allows efficient state acquisition acts time efficient require complex parsing data returned notification 
relevant information event stored act object pointed act 
alternatively acts indices pointers operation state highly efficient access eliminates table lookups 
ffl space efficient acts need large order provide applications hooks associating state asynchronous operations 
example acts byte void serve large objects 
ffl flexible user defined acts forced inherit interface order service acts 
allows applications pass acts objects changing type undesirable impossible 
typeless nature acts associate object type asynchronous operation 
acts implemented void type casted pointers type needed 
ffl separates client policies service mechanisms acts typically typeless objects 
typeless acts void tokens remain opaque service type intrusive clients 
ffl dictate concurrency policies long duration operations executed asynchronously operation state efficiently recovered act 
allows clients single threaded multithreaded depending application requirements 
alternatively service provide acts may force delay sensitive clients perform operations synchronously threads handle operation completions properly 
potential pitfalls avoid asynchronous completion token pattern 
include ffl memory leaks client uses acts pointers dynamically allocated memory service fails return act service crashes memory leaks result 
clients wary possibility maintain separate act repositories tables explicit garbage collection case services fail 
ffl application remapping acts direct pointers memory errors occur part application remapped virtual memory 
plausible persistent applications may restarted crashes objects allocated address space 
protect errors indices repository acts 
extra level indirection provides protection index values remain valid pointers direct memory may 
ffl authentication act returned client completion asynchronous event client may need authenticate act 
necessary server trusted treated act may changed value act 
implementation viewpoint service steps implementing act pattern defining act representation accepting act holding act returning act 
steps described 
ffl define act representation acts represented void pointers pointers base classes 
approach frequently chosen implementing act pattern low level languages 
client initiates operation service creates act casts void pointer 
important consider potential platform differences represent void pointers differently 
case developers may choose compiler language constructs defines typedefs ensure uniform representation system 
higher level object oriented language java smalltalk developer may represent acts base classes 
service typically assumptions acts class empty java object 
receiving acts clients dynamic casting narrow act meaningful type 
ffl accept act typically step straightforward 
acts passed parameters asynchronous operation invocations 
section show example acts parameters service methods 
ffl hold act depending service step simple complex 
service operates synchronously act held run time stack service 
instance service running separate thread process client perform operations synchronously providing asynchronous services client 
services internally asynchronous services may need handle multiple requests simultaneously 
instance consider management application performs requests agent turn performs requests timer mechanism 
scenario thought client management application chain services 
members chain ends clients services receive initiate requests 
member chain uses act pattern service choices performing requests clients 
member need add state operation simply pass original act received previous client 
additional state needs associated operation state contain original act new act created 
service normally assumptions values received acts 
service guaranteed act values unique indexes data structure mapping act operation state 
uniqueness assumed original act reused new state 
ffl return act emis example explained management application initiated request agent act returned response 
depending application requirements acts single request may returned multiple times 
instance stream responses tagged act receiving client act associate additional state stream 
single stream responses options acts returned clients asynchronous operations complete 
words decide clients notified asynchronous operations complete 
common approaches ffl callbacks callback approach clients specify functions class methods called service operation completes 
depending service callback functions specified request basis 
callback approach act returned parameter callback function 
section shows example callback approach 
ffl queued completion notifications approach queues completion notifications retrieved client discretion 
win completion ports approach 
win handles created associated completion ports 
completion ports provide location completion notifications queued kernel level services dequeued clients 
clients initiate asynchronous reads writes readfile specify overlapped structures queued completion port operations complete 
clients dequeue completion notifications including overlapped structures function 
ffl asynchronous callbacks variation callback approach implementations posix asynchronous 
clients specify completion notifications asynchronous operations returned unix signals 
approach similar callback approach registered signal handler called 
differs clients need explicitly wait notifications need block event loop 
win overlapped handles identify network connection endpoints open files 
win handles similar unix descriptors 
consider chain services example explained 
addition deciding acts returned clients chain services decide service calls back client 
service chain created new acts associate additional state operation service chain notify client 
optimize process case unwinding chain services unnecessary 
emis example agents associate additional state timer operations unwinding required 
regardless acts returned clients returned job service done 
clients responsible handling completed operation freeing resources associated act 
sample code sample code uses emis management applications agents illustrate acts asynchronous operations 
code defines implementation management application class handles asynchronous emis events received agents 
generic pointer 
typedef void act class emis event handler public receiver defines pure virtual recv event method 
public states passed acts invoking operations 
struct state window window display state 
logger logger log state 
called back agents emis events occur 
virtual void recv event const event event act act turn act needed state 
state state static cast act update graphical window 
state window update event log event 
state logger record event 
code defines agent interface invoked clients register emis event notifications 
class agent types events applications register 
enum event type new connections image transfers 
register get called back emis events occur 
passed back void register receiver receiver event type type act act 
code shows management application invokes operations agent receives events 
int main void create application resources logging display 
events logged database written console 
logger database logger database logger console logger console different graphical displays may need updated depending event type 
instance topology window showing iconic view system needs updated new connection events arrive 
window main window window topology window create act returned connection events occur 
emis event handler state connection act connection act window topology window connection act logger database logger create act returned connection events occur 
emis event handler state image transfer act main window console logger object handle incoming emis events 
emis event handler handler binding remote agent call back emis event handler emis events occur 
agent agent 
bind agent proxy 
register agent receive notifications emis connection events 
agent register handler agent new connections act connection act register agent receive notifications emis image transfer events 
agent register handler agent image transfers act image transfer act run event loop application starts creating resources logging display 
creates state objects identify completion connection image transfer events 
state objects contain window logger objects 
address state objects acts 
application registers management application instance agent type event 
application enters event loop gui network processing driven callbacks 
event generated emis component agent sends event management application delivered recv event upcall 
management application uses act returned access state associated event 
state object updates graphical window logs event 
note management application uses acts decide appropriate action event 
image transfer events displayed main window logged console new connection events displayed system topology window logged database 
variations ffl non opaque acts implementations act pattern services treat act purely opaque objects 
instance win overlapped structures non opaque acts certain fields modified kernel 
solution problem pass subclasses overlapped structure contain additional state 
ffl synchronous acts acts operations result synchronous callbacks 
case act really asynchronous completion token synchronous sct 
acts synchronous callback operations provides structured means passing state related operation service 
maintains decoupling concurrency policies 
code receives act synchronous asynchronous operations 
known uses described asynchronous completion token act pattern widely systems software communication middleware technical domains inventory tracking ffl os asynchronous mechanisms acts win handles win overlapped win completion ports posix asynchronous api 
application performing multiple asynchronous operations network file typically location win completion port operation completion results queued 
unix posix asynchronous read write operations results dequeued aio wait aio suspend interfaces respectively 
ffl rpc transaction identifiers client side stubs generated sun rpc acts ensure requests client match responses server 
client request carries unique opaque transaction id act represented bit integer 
id initialized random value client handle created changed time new rpc request 
server returns transaction id value sent client 
client routines test matching transaction id returning rpc result application 
assures client response corresponds request 
sun rpc example non opaque variation act pattern 
server test act equality detect duplicates allowed interpret act 
ffl emis network management example described derived distributed electronic medical imaging system developed washington university project spectrum 
network management application monitors performance status multiple components emis 
agents provide asynchronous service notifying management application emis events connection events image transfer events 
agents act pattern management application efficiently associate state asynchronous arrival emis events 
ffl inventory tracking intriguing examples asynchronous completion tokens implemented inventory tracking mechanism federal express postal services 
contains section labeled internal billing information optional characters appear invoice 
sender package uses field act 
act returned service client invoice notifies sender transaction completed 
deliberately defines field loosely maximum characters untyped 
senders field variety ways 
instance sender populate field index record internal database name file containing list performed package delivery received 
related patterns asynchronous completion token typically treated memento underlying framework 
memento pattern treat memento opaque objects 
act pattern clients give acts services treat acts opaque objects 
act memento patterns similar respect participants 
patterns differ motivation applicability 
memento pattern takes snapshots object states act pattern associates state completion asynchronous operations 
paul mckenney richard insightful comments contributions 
pyarali harrison schmidt design performance object oriented framework highperformance electronic medical imaging proceedings nd conference object oriented technologies systems toronto canada usenix june 
schmidt ace object oriented framework developing distributed applications proceedings th usenix technical conference cambridge massachusetts usenix association april 
pattern separating assembly processing pattern languages program design coplien schmidt eds reading ma addison wesley 
information technology posix realtime extension tech 
rep 
custer inside windows nt 
redmond washington microsoft press 
sun microsystems open network computing transport independent rpc june 
boyd project spectrum scalable bandwidth bjc health system health care communications pp 

gamma helm johnson vlissides design patterns elements reusable object oriented software 
reading ma addison wesley 

