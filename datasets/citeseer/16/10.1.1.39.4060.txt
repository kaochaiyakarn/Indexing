architecture approach self adaptive software michael richard taylor dennis heimbigner gregory johnson medvidovic alex quilici david rosenblum alexander wolf consider scenario 
fleet unmanned air vehicles undertakes mission disable enemy 
pre mission intelligence indicates defended mission planning proceeds accordingly 
uavs en route target new intelligence indicates mobile surface air missile launcher guards 
uavs autonomously replan mission dividing groups sam suppression unit suppression unit proceed accomplish objectives 
flight specialized algorithms detecting recognizing sam automatically upload integrated sam suppression unit software 
scenario new software components dynamically inserted fielded heterogeneous systems requiring system restart downtime 
mission replanning relies analyses include feedback current performance 
furthermore replanning take place autonomously involve multiple distributed cooperating planners major changes demanded require human approval guidance cooperate mission analysts 
system integrity requires assurance consistency correctness coordination changes 
applications uavs self adaptive software requires high dependability robustness adaptability availability 
article describes infrastructure supporting simultaneous processes self adaptive software system evolution consistent application change time system adaptation cycle detecting changing circumstances planning deploying responsive modifications 
include environment land monitoring freeway traffic management fire fighting airborne cellular telephone relay stations damage surveys times natural disaster 
wasteful construct afresh specific software platform new uav application 
far better software architects simply adapt platform application hand better platform adapts demand serving purpose 
example airborne sensor platform designed environmental land monitoring prove useful damage surveys earthquake hurricane provided change software quickly sufficient assurance new system perform intended 
software engineering aims systematic principled design deployment applications fulfill software original promise applications retain full plasticity lifecycle easy modify field drawing board 
software engineers pursued techniques achieving goal specification languages high level programming languages object oriented analysis design name just 
contributes goal sum total falls short 
self adaptive software provide key 
disciplines contribute progress wholesale advances require sys ieee ieee intelligent systems tems perspective broadly inclusive adaptation methodology spans wide range adaptive behaviors 
central view dominant role software architecture planning coordinating monitoring evaluating implementing seamless adaptation 
article examines fundamental role software architecture self adaptive systems outlines technologies considered supporting methodology 
self adaptive software 
self adaptive software modifies behavior response changes operating environment 
operating environment mean observable software system user input external hardware devices sensors program instrumentation 
application developers answer questions developing self adaptive software system conditions system undergo adaptation 
system example modify improve system response time recover subsystem failure incorporate additional behavior runtime 
system open adaptive closed adaptive 
system open adaptive new application behaviors adaptation plans introduced runtime 
systems closed adaptive self contained able support addition new behaviors 
type autonomy supported 
wide range autonomy needed fully automatic self contained adaptation human loop 
circumstances adaptation cost effective 
benefits gained change outweigh costs associated making change 
costs include performance memory overhead monitoring system behavior determining change improve system paying associated costs updating system configuration 
adaptation considered 
wide range policies opportunistic continuous adaptation lazy needed adaptation 
kind information collected adaptation decisions 
algorithm selection online algorithms deterministic randomized probabilistic accurate current information 
wide range strategies continuous precise observations sampled approximate historical observations 
conditions 
fleet uavs undergo adaptation variety conditions 
mission replanning prime example automated human mission planners redirect fleet response changing battlefield 
mechanical failure uav generator force uav rely solely battery power electronics communications sensors 
turn require substantial adaptation ensure sufficient electrical power mission duration 
change force composition loss fleet member equipment failure detection unanticipated threat force rapid substantial adaptation 
open closed adapted 
closed adaptive uav adapts isolation adaptations behaviors fleet members 
limited number adaptive behaviors onboard new behaviors introduced runtime 
uav capable limited number evasive maneuvers response threats example repertoire modified expanded flight 
conversely open adaptive uav accepts behaviors introduced outside evasive maneuver known fleet member communicated flight 
type autonomy 
uav autonomous greater lesser degree 
example uav coping subsystem failure require loop direct approve evolutionary programming algorithm generation genetic algorithms ai learning generic parameterized algorithms conditional expressions 
spectrum self adaptability 
generally approaches near bottom select predetermined alternatives support localized change lack separation concerns 
approaches near top support unprecedented changes provide clearer separation software adaptation concerns 
adaptation 
sophisticated uav onboard computing power highly autonomous interacting humans infrequently course mission 
frequencies 
adaptation cost useful desirable adaptation require resources uav afford 
example uav forced permanently discard applications system support sake additional memory accommodate adaptation adaptation cut avenues change 
implementing adaptation require processor cycles better pressing concerns adaptation desirable degrade uav performance respects 
cost effectiveness 
adaptation frequency matters 
uav opportunistic considering implementing adaptations spare processor cycles additional communications bandwidth available 
adapt continuously allocating ongoing fixed percentage computing communication resources adaptation process 
alternatively adaptation demand warranted uav condition environmental state 
information type accuracy 
uav collect information numerous sources base adaptation decisions 
information sources include real time readings internal sensors monitoring subsystem health status battery voltage fuel levels telemetry external sensors radar sampled observations processor may june load radio signal strength minutes historical data movements threat forces hours 
illustrates broad spectrum self adaptability 
extreme conditional expressions form self adaptation program evaluates expression alters behavior outcome 
simplistic conditional expressions common mechanism implementing adaptive behavior 
example just time compiler invoke aggressive code optimization techniques function called frequently 
online algorithms operate assumption events inputs uncertain 
occasionally perform expensive operation efficiently respond operations 
online algorithms adaptive leverage knowledge problem input domain improve efficiency 
memory cache paging algorithm example leverages spatial temporal locality memory determining cached page evict making room new page 
generic parameterized algorithms provide behaviors parameterized usually type instantiation external inputs 
generic polymorphic algorithms adapt conforming different data types 
standard template library example provides generic iterator classes traverse variety data structures 
algorithm selection uses properties operating environment choose effective algorithm fixed set available algorithms 
system uses algorithm selection adapts changes operating environment switching set algorithms 
self dynamic optimizing compiler example uses program profiling data collected program execution select different code optimization algorithms 
extreme evolutionary programming machine learning techniques adaptive properties operating environment knowledge gained previous attempts generate new algorithms 
generally approaches near spectrum bottom concerns regarding software adaptation application specific behavior 
example conditional expression combines adaptation specification application specification 
consequently understanding analyzing modifying independently arduous 
architectural model deploy change descriptions approaches near top clearly separate software adaptation concerns application specific functionality 
example algorithm generation separates adaptation specification produced algorithm 
separating concerns software adaptation software function facilitates independent analysis evolution 
software adaptation plan changes adaptation management enact changes collect observations evolution management maintain consistency system integrity technical advances narrow areas adaptation technology provide benefit greatest benefit accrue developing comprehensive adaptation methodology spans adaptation small adaptation large develops technology supports entire range adaptations 
illustrates just methodology investigating 
upper half diagram labeled adaptation management describes lifecycle adaptive software systems 
lifecycle humans loop fully autonomous 
evaluate monitor observations refers forms evaluating observing application execution including minimum performance monitoring safety inspections constraint verification 
plan changes refers task accepting evaluations defining appro evaluate monitor observations implementation 
high level processes comprehensive general purpose approach self adaptive software systems 
priate adaptation constructing blueprint executing adaptation 
deploy change descriptions coordinated change descriptions components possibly new observers evaluators implementation platform field 
conversely deployment extract data possibly components running application convey point analysis optimization 
adaptation management consistency maintenance play key roles approach 
mechanisms runtime software change available operating systems example dynamic link libraries unix microsoft windows component object models programming languages facilities share major shortcoming ensure consistency correctness desired properties runtime change 
change management critical aspect runtime system evolution identifies changed provides context reasoning specifying implementing change controls change preserve system integrity 
change management risks engendered runtime modifications outweigh associated shutting restarting system 
software adaptation complex process complicated change drivers ranging purposeful adjustments ieee intelligent systems deploy change descriptions architectural model plan changes adaptation management enact changes collect observations evolution management maintain consistency evaluate monitor observations fielded systems unanticipated perturbations operational environment 
changes encompass simple replacement isolated component wholesale reconfigurations pervasive physically distributed 
approach addresses demanding unprecedented requirements managing adaptation flexible infrastructure support full range adaptation processes 
infrastructure relies software agents automate tasks process explicit representations software components interdependencies environmental assumptions explicit representations environments field software deployed wide area messaging event services connect adaptation managers adaptive systems permit coordinated coherent adaptation physically distributed logically decentralized environments 
lower half labeled evolution management focuses mechanisms employed change application software 
approach architecture changes formulated reasoned explicit architectural model residing implementation platform 
changes architectural model reflected modifications application implementation implementation 
high level architecture diagram tool suite 
ensuring model implementation consistent 
monitoring evaluation services observe application operating environment feed information back diagram upper half 
software architectures view systems networks concurrent components bound connectors 
architectural perspective shifts focus away source code coarse grained components interconnections 
designers away obscuring details concentrate big picture system structure interactions components assignment components processing elements runtime change 
components responsible implementing application behavior maintaining state information 
connectors transport routing services messages objects 
components know care inputs outputs delivered transmitted sources destinations 
hand connectors know exactly talking ignorant computations components serve 
strictly separating computation communication lets system computation communication relationships evolve independently including rearranging replacing components connectors application application executes necessary insufficient mechanism self adaptive software 
enact changes collect observations observers architecture editor modification interpreter architectural model evolution implementation management architecture evolution manager maintain consistency system integrity evolution management rearrange replace portions application executing 
self adaptive systems unique set challenges respect safety reliability correctness 
example change accidental removal critical navigation component compromise uav safety reliability correctness properties 
consequently facilities guiding verifying modifications integral part approach 
details approach evolution management process change applied controlled 
variety tools adaptation mechanisms evolve application inspecting changing architectural model 
changes include addition removal replacement components connectors modifications configuration parameters components connectors alterations component connector network topology 
show approach maintains system consistency integrity examining change changes render system inconsistent unsafe 
dynamic software architectures 
supporting broad class adaptive changes architectural level requires change components fly interconnections 
simultaneously changing components connectors top may june router artist clock ports warehouses vehicles planner ology reliable manner requires distinctive mechanisms architectural formalisms 
systems dynamic limited degree embrace dynamic change fundamental consideration 
distinct approaches dynamism architectural level weaves 
features common distinguish components connectors places restrictions granularity components imple connector telemetry connector port artist warehouse artist vehicle artist connector connector router graphics 
style architecture simple cargo routing logistics system 
ports vehicles warehouses components store application state 
telemetry component tracks en route cargo 
port artist vehicle artist warehouse artist router artist components graphically depict state respective counterparts 
planner component uses simple heuristics suggest cargo routes router component handles routing requests initiated user 
graphics component renders drawing notifications sent artists user display 
time synchronized source component connector ultraviolet returns ultraviolet returns candidate returns form candidates ultraviolet returns correlate sensors candidate returns ask correlate sensors 
portion weaves architecture stereo tracking system 
candidate returns merge candidates candidate returns socket generate candidate tracks candidate returns high probability candidates mentation language require communication components occur exchanging asynchronous messages objects weaves components encapsulate functionality arbitrary complexity exploit multiple threads control 
weaves take different approaches system composition 
composes systems hierarchy concurrent components bound connectors message routing devices com ponent hierarchy aware components completely unaware components residing level beneath 
shows example style architecture simple logistics system 
component explicitly utilizes services components sending request message 
communication components occurs implicitly component changes internal state announces change emitting notification message describes state change connector 
connectors broadcast notification messages component connector connected bottom side 
notification messages provide implicit invocation mechanism allowing components react single component state change 
example telemetry component aware clock ports vehicles warehouses components 
furthermore style components assume execute address space components share common thread control 
contrast weaves dynamic centric architecture designed applications characterized continuous intermittent voluminous data flows real time deadlines 
components weaves consume objects inputs produce objects outputs object intended sense smalltalk java 
depicts example weaves architecture portion stereo tracker 
weaves embraces set architectural principles known laws blind communication component network knows sources input objects destinations output objects network component knows semantics connectors delivered input objects transmitted output objects network component knows loss connection 
laws ensure component knows location network component independent semantics connectors attached weaves architecture edited expanded contracted fly 
furthermore weaves permits connectors composed connectors components allowing connectors specially ieee intelligent systems deploy change descriptions architectural model plan changes adaptation management enact changes collect observations evolution management maintain consistency adapted characteristics operating environment corresponding performance gains 
characteristics weaves facilitate runtime change 
components communicate asynchronously weaves avoid subtle complexities inherent supporting runtime change applications utilize synchronous communication 
restriction occasionally difficult implement particular component interactions component continue respond service requests components awaiting responses experience demonstrates benefits runtime change outweigh costs 
independence hierarchical layers style architecture reduces component dependencies component unaware components oblivious runtime changes involve components 
conversely component affected runtime changes involving components strictly 
components assume execute address space components complex component dependencies resulting pointer variables global variables avoided 
similarly components share common thread control control dependencies avoided 
taken style rules ensure component completely ignorant placement function implementation fellow components 
consequently runtime add delete rearrange components evaluate monitor observations implementation 
high level architecture diagram adaptation evolution 
deploy change descriptions deployment agents able ease 
contrast weaves supports forms component manipulation emphasizes dynamic distribution modification rearrangement connectors 
lets developers optimize intercomponent communication weaves architecture executing including wholesale movement host dramatic changes semantics implementations connectors 
short optimized flexible components weaves focuses high performance flexible connectors 
research issue face blending approaches dynamic architectures single cohesive 
possible approach treat weaves implementation substrate compile style architectures lower level efficient weaves architectures 
maintaining consistency system integrity 
ongoing adaptation continuously threatens system safety reliability correctness 
facilities guiding checking modifications integral part adaptation infrastructure 
application adapts evolves face problem preserving accurate consistent model application architecture constituent parts components connectors 
maintain strict correspondence architectural model executing implementation 
deal problems deploy integral part application architectural model describes plan changes observation adaptation planners adaptation management observers architecture editor modification interpreter enact changes collect observations observation analyzers evaluate monitor observations interconnections components connectors mappings implementation artifacts 
mapping permits changes terms architectural model effect corresponding changes actual implementation 
guard change propose architecture evolution manager aem mediates change operations directed architectural model 
change expressed single basic operation change transaction composed basic operations 
changes atomic complete error leave application untouched 
change transaction includes operations forcing components connectors safe halt states adding removing replacing components connectors changing architectural topology 
aem maintains consistency architectural model implementation changes applied reifies changes architectural model implementation prevents changes violating architectural constraints 
example enforce generic constraint components connected connector 
aem tailored application domain dependent change policies dictate forms acceptable change 
uav domain aem require uav system contain navigation component 
aem maintains mapping architectural model implementation uses mapping carry modifications mapping model may june components connectors implementation artifacts translating change operations implementation actions 
enacting changes 
possible sources architectural change including application external tools replanning agents 
software architects visual interactive architecture editor construct architectures describe modifications 
variety analysis tools accompany editor example design wizard critiques architecture designer constructs application domain dependent design wizards exploiting specialized knowledge prevent semantic errors ensure minimum level performance safety 
modification interpreter acts second companion tool interpret change scripts written change description language primitive actions supported aem 
adaptation management self adaptive system observes behavior analyzes observations determine appropriate adaptations 
companion process evolution management process adaptation management illustrated 
adaptation management monitors evaluates application operating environment plans adaptations deploys change descriptions running application 
viable self adaptive systems require longterm continuity face dynamic change words standard locale information tasks required carry function adaptation focal point coordinating physically distributed logically decentralized adaptation tasks 
example complex interdependencies exist changes incorporation change require inclusion change correctly environment 
standard locale helps ensure information hand 
additionally adaptation require coordination multiple sites application physically distributed adaptation requires changes sites simultaneously 
additionally managing self adaptive software requires variety agents observers evaluating behavior self adaptive application monitoring operating environment planners utilize observations plan adaptive responses enact responses application 
hosting numerous agents supporting various activities adaptation management result requires infrastructure support right form registries 
registries application site contain resource descriptions configurations declarative information relevant site adaptive application 
registries dedicated coordinating activities individual application site registries 
registry provides standard interface disparate agents interests query managing self adaptive software requires variety agents observ ers planners deploy ers 
hosting numerous agents requires ture support right 
manipulate contents registry acts blackboard exchanging information 
communication takes forms ranging directed updates wide area messaging event notification 
promising starting point software dock infrastructure element distributed configuration deployment software systems development university colorado boulder 
collecting observations 
self adaptive software requires large numbers varieties observations measurements ranging event generation application implementation animations suitable human observers 
furthermore adjusting number extent detail observations measurements possible application executes evolves reduce measurement overhead avoid wasting communication bandwidth unnecessary observations 
minimum require embedded inline observers application notification exceptional events resource shortages violation low level constraints 
additional required capabilities include dynamic control alteration scope assertions insertion removal assertions application executing languageindependent assertions architecture sensitive assertions 
potential candidate facility app tool supports automated checking logical assertions expressed order predicate logic 
detecting noting single events occurrence pattern events distributed time place trigger adaptive strategies 
approach model application behavior abstractly terms patterns events 
way architect expectations expressed expectation agent 
expectation agent responds occurrence event patterns including generating higher level event benefit expectation agents 
expectation agent formal specification depending complexity translated observer embedded application implemented agent activity local registry 
addition monitor events occur outside application quality availability network connection adaptation events arise consequence dynamic architectural change 
provision observation human observers cooperation automated agents 
appealing technology exploits standard webbased technologies html provide powerful efficient infrastructure remote observation distributed applications 
embeds small web server application runtime environment monitors application gathers information 
information identified special url namespace html pages server generates communicates standard web browser 
new techniques emerge reducing monitoring overhead 
weaves employs statistical monitoring techniques lets observers trade accuracy favor reduced overhead 
approach reduce invasive effect instrumentation running application noise threshold obtaining useful ieee intelligent systems information 
furthermore instrumentation stay permanently embedded application observer selectively measure behaviors interest damaging application 
application developers technique variety ways including performance analysis real time animation behavior running systems 
evaluating monitoring 
adaptive demands arise inconsistencies suboptimal behavior system 
particular inconsistencies occur architectural element ranging single component connector subsystem entire architecture behaves manner inconsistent behavior required element assumptions operating environment invalid 
maintaining consistency situations requires monitoring evaluating representative behaviors running system comparing explicit formulation behavioral requirements environmental assumptions 
successful consistency management requires hybrid approach combines static dynamic analysis 
promising form static analysis exploits attributed graph grammars 
recall dynamic architectures characterized graphs components connectors 
attributed graph grammars represent set application possible configurations architectural changes regarded graph rewrite operations 
analysis tools determine invariant preserved possible architectures return example graph architectural configuration violates invariant 
static analysis insufficient case runtime checks employed detect inconsistencies 
observers inspect application environment application operates evaluate observations consistency relevant annotations obtained registries 
observers generated launched automatically constraints properties extracted annotations pertaining element observation 
observers post observed inconsistencies aggregated observations analyses registry 
planning changes 
planning vital aspect self adaptive software 
self adaptation requires distinct forms planning observation planning adaptation planning 
observation planning determines observations necessary deciding adaptations required 
observation planner takes account environmental assumptions expected behaviors availability observers observations costs 
view task classic planning problem goals information needs operators observers preconditions required event types postconditions event types operators observation notification costs 
type planning range today planning technology 
adaptation planning determines exactly adaptations 
planning vital aspect self adaptive software 
self adaptation requires distinct forms planning observation planning adaptation planning 
adaptation planner take account purpose components environmental assumptions known properties environment 
interested applications uavs adaptations planned minutes hours 
possible approach relies predefined solution frameworks limiting range variation possible adaptations drastically reduce computation required planning 
solution framework partially instantiated hierarchical solution architecture consisting connectors sockets placeholders components equivalence class candidate components socket components solution frameworks 
framework initial solution architecture selecting components socket set eligible components 
starting point system undergo incremental adaptation choosing alternatives problematic components environmental assumptions longer hold observed environment 
general approach explicitly represents preconditions postconditions component affect affected components represents socket terms required postconditions treats framework instantiation planning problem 
approach requires partial domain model additional computation longer requires candidate components form equivalence class 
demonstrated approach domain automatic generation simulation scripts tank training 
deploying change descriptions 
change agents propagate move sites carry tasks 
imagine scenario coordinated change required separate sites 
agents responsible portion coordinated change dispatch third site change descriptions installed 
included change descriptions new required components connectors affiliated annotations 
agents situated registries respective sites interact local aem translates change transactions contained change descriptions specific modifications system implementation 
individual aspect approach focus research integrating aspects comprehensive self adaptive software methodology unprecedented 
near hope complete initial integration dynamic architecture technology event monitoring evaluation technology software deployment technology support software 
acknowledgments david hilbert jason robbins discussions contributed 
dennis alexander wolf sponsored air force materiel command rome laboratory defense advanced research projects agency darpa contracts 
richard taylor medvidovic david rosenblum sponsored darpa air force research laboratory air force materiel command usaf agreement may june air force office scientific research air force material command usaf national science foundation ccr 
alex quilici partially supported darpa contract 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright annotation thereon 
views contained authors interpreted necessarily representing official policies endorsements expressed implied darpa air force research laboratory air force office scientific research government 

irani karlin online computation approximation algorithms np hard problems hochbaum ed pws publishing boston 

holzle adaptive optimization self reconciling high performance exploratory programming phd dissertation stanford univ stanford calif 

spears overview evolutionary computation proc 
european conf 
machine learning springer verlag new york pp 


perry wolf foundations study software architecture software eng 
notes vol 
pp 


medvidovic taylor architecture runtime software evolution proc 
int conf 
software eng 
icse pp 


taylor component message architectural style gui software ieee trans 
software eng vol 
pp 


weaves software construction analysis proc 
int conf 
software eng 
icse ieee cs press los alamitos calif pp 


hall architecture post development configuration management wide area network proc 
th int conf 
distributed computing systems ieee cs press pp 


hall heimbigner wolf cooperative approach support software deployment software dock proc 
int conf 
software eng icse ieee cs press 

rosenblum practical approach programming assertions ieee trans 
software eng vol 
pp 


hilbert redmiles approach large scale collection application usage data internet proc 
int conf 
software eng 
icse ieee cs press pp 


distributed debugging monitoring day proc 
california software symp univ california irvine calif pp 


woods quilici exploiting domain specific knowledge refine simulation specifications proc 
th conf 
automated software eng ieee cs press 
phd candidate university california irvine 
research interests include software evolution customization architectures 
received bs ms computer science uci 
member ieee computer society acm 
contact uc irvine information computer science bldg rm 
irvine ca ics uci edu www ics uci edu 
michael research scientist aerospace 
research interests include software architectures large scale system software engineering wearable computers 
holds msc computer science university british columbia canada 
contact aerospace mail station po box los angeles ca aero org 
richard taylor professor department information computer science uci director irvine research unit software alliance california industry university 
research interests centered software architectures hypermedia web protocols workflow process technologies 
received phd computer science university colorado boulder 
acm fellow 
contact dept information computer science uci irvine ca taylor ics uci edu www 
ics uci edu taylor 
dennis heimbigner research associate professor university colorado boulder 
research interests configuration management paradigms engineering distributed software distributed computing models software workflow federated databases 
received bs mathematics california institute technology ms phd computer science usc 
member ieee acm principal investigator darpa program 
contact dept computer science campus box univ colorado boulder dennis cs colorado edu www cs colorado edu dennis 
gregory johnson member technical staff concept shopping interests include software understanding tools algorithm visualization 
received doctorate computer science university wisconsin madison 
member ieee acm 
contact silver spur rd ste 
rolling hills ca net 
medvidovic assistant professor computer science department university southern california 
received phd department information computer science uci 
received ms information computer science uci bs computer science arizona state university 
research interests include software engineering architectures evolution reuse 
contact computer science dept henry computer center rm 
univ southern california los angeles ca usc edu sunset usc edu 
alex quilici associate professor electrical engineering university hawaii 
research interests lie applying ai techniques software engineering particular areas automated program understanding automated synthesis component systems 
received phd computer science ucla 
member aaai ieee computer society cognitive science society 
contact univ hawaii dept electrical eng st holmes bldg rm 
honolulu hi alex 
eng hawaii edu www ee eng hawaii edu alex 
david rosenblum associate professor department information computer science uci 
current research centered problems design validation large scale distributed component software systems 
received phd stanford university 
senior member ieee member acm 
contact dept information computer science uci irvine ca dsr ics uci edu www ics uci edu dsr 
alexander wolf associate professor department computer science university colorado boulder 
research interests directed discovery principles development technologies supporting engineering large complex software systems 
received ba geology computer science queens college city university new york ms phd computer science university massachusetts amherst 
member acm ieee computer society vice chair acm special interest group software engineering 
contact dept computer science campus box univ colorado boulder alw cs colorado edu www 
cs colorado edu users alw 
ieee intelligent systems 
