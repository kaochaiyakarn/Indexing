recursive types games axiomatics process representation extended marcelo fiore cogs university sussex kohei honda lfcs university edinburgh presents basic results game semantics fpc metalanguage sums products exponentials recursive types 
give axiomatic account category games introduced offering fundamental structural analysis category transparent way prove computational adequacy :10.1.1.37.813
consequence obtain intensional result standard definability argument 
extend category introducing category games optimised strategies show denotational semantics gives compilation fpc terms core pict codes asynchronous polyadic calculus summation 
process representation follows pioneering idea hyland ong :10.1.1.45.5883:10.1.1.45.5883
advance representation introducing semantically founded optimisation techniques extend setting encompass rich type structure fpc 
resulting code gives basic insight relationship categorical types possible implementations 
games semantics 
notions games strategies constructing mathematical models programming languages :10.1.1.37.813:10.1.1.45.5883:10.1.1.17.5373
basic common idea underlying works construct universe semantic domains program phrase modelled object internal structure reflecting computational behaviour way 
particular semantic points interacting research supported epsrc gr frameworks programming language semantics logic lfcs university edinburgh 
processes called strategies interaction represents behaviour program contexts 
mention salient features approach 
game semantics offers precise characterisation computational behaviour leading various full abstraction results 
second despite novel way representing programs game theoretic models equipped familiar semantic structures offering traditional mathematical tools reasoning programs 
third gametheoretic models closely related existing models interaction calculus linear logic 
expand point focussing relationship calculus 
process representation games 
full abstraction result call name pcf hyland ong observed strategies faithfully represented terms calculus :10.1.1.45.5883:10.1.1.45.5883
observation suggests close connection games model calculus representation programming languages see 
opens possibility studying dynamics programs level close implementation game semantics 
central themes investigation direction axiomatisation category games 
things aim advance hyland ong couple points :10.1.1.45.5883:10.1.1.45.5883
ffl programming languages adopt call value evaluation strategy intricate type structure sums recursive types cf 

game semantics handle features allow process representation setting 
ffl close inspection process representation reveals frequent copy cat tat behaviour results quite redundant interactions :10.1.1.45.5883
resulting code feasible implementation 
obtain better code game theoretic model programming language 
results 
addresses mentioned issues fpc example programming language 
fpc essentially functional core ml chosen rich type structure call value operational semantics 
primitive character useful examine basic features approach simple non trivial setting 
results summarised follows 
fully interpretation fpc category games introduced :10.1.1.37.813
important contribution axiomatic approach offers basic categorical analysis universe games transparent way prove computational adequacy 
second introduce new category games extending objects hom sets contain optimised versions strategies key idea represent copy cat behaviour tree isomorphism 
computational adequacy obtained axiomatisation referred 
transform interpretation fpc core pict asynchronous polyadic calculus show translation faithfully represents original strategies :10.1.1.127.1777:10.1.1.127.1777
resulting code exhibits close link type structures implementation cast setting name passing processes 
related 
comment relationship axiomatisation 
axiomatisations take conceptual standpoint interplay category partial maps subcategory total maps 
order accommodate intensional nature games weaken categorical structure modelling product types monoidal 
consequently axiomatised information system approach solving domain equations limit colimit coincidence 
yields new computationally adequate models fpc 
see section basic axiomatisation details 
know full abstraction results fpc 
mccusker obtained full abstraction result call byname fpc riecke sandholm obtained full abstraction call value fpc logical relations 
differs target language call name second uses quite different construction offers different semantic analysis 
note abramsky mccusker category call value games closely related :10.1.1.37.813
independently gave fully interpretation recursive types universe 
regarding process representation strategies discussed builds previous hyland ong :10.1.1.45.5883:10.1.1.45.5883
incorporation rich type structure new viable encoding main additional contributions 
particular treatment recursive types offers new insights relationship notion recursive type free algebras implementation pointers 
calculus representation calculi cf 
new contribution type theoretic category theoretic perspective offers 
example difference eager sum lazy sum articulated categorical level consequently operational structure 
broadens repertoire calculus representation functional calculi type theoretic background 
organisation 
section review category games introduced :10.1.1.37.813
section new axiomatic models fpc establish computational soundness adequacy 
apply result obtain intensional full abstraction fpc 
section introduce new category games optimised strategies 
computational adequacy obtained axiomatic method section 
section give compilation fpc pict denotational semantics establish computational adequacy compilation 
basic games outline basic notions games introduced :10.1.1.37.813
key difference preceding games lies interaction data driven starts arrival data environment demand driven starts inquiry data successfully modelling callby value computation 
means arenas notion type game semantics start answers questions formalised 
arena 
forest directed graph connected component tree 
nodes denoted write 
directed edge relation 
called enabling 
forest sigma 
sigma sigma set nodes 
forest node said initial 
pre arena forest sigma 
sigma labelling functions sigma fp og sigma fq ag 
satisfied def def opponent justifies layer vice versa question justifies answers questions answer justifies questions 
nodes pre arena called sorts 
write pairing labelling functions 
sigma sigma 
pre arenas 
dual pre arena set sorts enabling relation pre arena opponent layer reversed def def 
disjoint union pre arena sorts disjoint union sigma sigma enabling relation labelling functions pre arena said sub pre arena pre arena initial sort initial sigma sigma 

sigma 
arena pre arena initial sorts labelled pa action sequence 
arenas action sequence finite sequence sorts delta delta sn pre arena occurrences sorts called actions referred action action question answer labels justification relation gamma theta read justifies sort initial exists justified initial opponent layer alternate actions justify action justifies precedes enables question justifies answer 
action sequence represents possible interaction sequence process may engaged 
view part sequence process decide action 
view 
view action sequence sequence justification relation inherited inductively defined delta action delta delta delta delta delta action 
view action sequence denoted defined dually exchanging roles actions previous definition 
view action action sequence delta mean view delta action view delta action 
innocent strategy 
action sequence said legal bracketed asked questions answered satisfies visibility condition action justified action view 
position define morphisms arenas 
arenas 
innocent strategy oe symbols oe non empty set prefix closed legal action sequences satisfying contingency completeness oe ends action delta legal oe 
determinacy delta delta oe actions delta delta 
innocence action sequences delta oe action delta action sequence oe delta delta view mean view legal action sequence notice innocent strategy oe precisely characterised innocent function partial function extends view oe reaction 
innocent strategy oe total initial answer immediately reacts initial answer initial sort exists initial sort action sequence delta empty justification relation oe 
indicate oe total write oe oe 
sub arena arena induces substructure total innocent strategy strategy copies action action copies action appearing action composition 
innocent strategies oe define composition oe follows 
consider game board rows columns rows respectively called columns counted 
configuration consists game board binary relation called justification squares squares filled sorts placed square corresponding row th column square row square row squares rows filled squares columns filled squares row related justification relation projections coincide including justification relation 
configuration legal projected resp 
induces legal sequence resp 

composed play oe legal configuration resp 
projection oe resp 

shown pp set projections composed plays yields innocent strategy define composition oe category games 
category games arenas objects innocent strategies morphisms 
identities copy cat strategy strategy exactly copies preceding action action including justification relation 
shall study behaviours detail section 
write subcategory consisting total innocent strategies subcategory consisting sub structure total innocent strategies 
large cpo lubs unions 
order innocent strategies inclusion innocent functions hom set cpo 
respect order henceforth denoted composition operation theta continuous :10.1.1.37.813
equipped cpo category see chapter basic concepts enriched category theory 
restriction total innocent strategies denoted cpo category 
type structure 
outline basic construction types empty arena sorts arena distinguished single sort 
sum arenas simply disjoint union 
arena omega arenas forest consisting trees obtained coalesced sum tree forest tree forest labelling function inherited component 
higher order arena arenas forest consisting new initial sort enabling tree forest initial sort enabling copy tree forest labelling function labels new initial sort pa initial sort oq non initial sort dual sort copy label 
denotational semantics fpc fpc metalanguage sums products exponentials recursive types equipped call value evaluation 
definition fpc 
provide syntax types expressions 
types ff ff ff ff theta ff ff ff ff expressions inl ff ff inr ff ff case inl inr hm fst snd ff intro ff elim aim show category allows computationally adequate interpretations fpc axiomatic method cf 

axiomatics elucidates type structure category providing algebraic method reasoning strategies 
plays important role sections 
basic axiomatisation 
start notion basic model giving data interpreting fpc 
basic models computationally sound 
notion model introduced axiomatisation requiring axioms basic models 
axiomatisation basic models see definition understood consisting parts data bma bmb subject bm bm providing data interpreting type constructors theta datum bmc subject bm allowing interpretation recursive type constructor categorical structure interpreting sum type constructor standard binary coproducts 
follows interpretation product type constructor theta standard viz 
products cf 

category games admits constructor omega see section type structure product subcategory total innocent strategies :10.1.1.37.813
situation typical models fpc axiomatise 
structure interpreting exponential type constructor arises partial cartesian closed categories 
mentioned constructor omega category games product 
pair arenas endofunctors omega omega omega omega :10.1.1.37.813
terminology equipped family endofunctors omega omega category 
consider type judgement theta theta induces function arenas mapping pair arenas arena omega omega previous considerations extend functor interpret type judgements tn ff functors consequently interpret recursive types parameterised free algebras 
approach solving problem restrict attention subcategory type judgements interpreted functors find recursive types 
idea traditional domain theory 
example occurs solving domain equations functors mixed variance may restrict cpo category subcategory embeddings occurs solving domain equations information systems restricts category information systems pointed cpo 
various ways may restrict action omega arenas extends functor 
possibility consider centre see concept case coincides doing axiomatise information system approach done 
example amount interpreting type judgements tn ff continuous functions finding recursive types scott fixed point operator bekic parameterised version 
recursive types interpreted equality slightly simplifies proof computational adequacy cf 
chapters 
extra ingredient basic models cpo enrichment information order 
structure needed obtain computational soundness plays central role proving computational adequacy 
introduce basic models explanation definition elementary terms follow 
helpful think definition basic models basic model consists bma cpo category equipped cpo structure omega omega bmb full objects cpo subcategory equipped finite cpo coproducts finite cpo products theta bmc full objects subcategory bm inclusion strict bm cpo functor omega right cpo adjoint bm pointed cpo omega function theta 
continuous 
requirement bm amounts asking cpo functors omega omega omega omega theta ii omega theta omega theta iii map central property omega omega omega omega omega omega omega omega consequence bm functor omega preserves cpo colimits 
finite cpo coproducts canonical isomorphism ffi omega omega omega omega omega omega natural respect maps map canonical map delta def hid idi omega useful interpreting case statement 
interpretation 
sketch denotational semantics fpc basic models 
section fix basic model 
interpret formed types theta ff theta list distinct type variables containing free ff continuous functions theta ff thetaj definition induction types interpreting sum type constructor product type constructor omega exponential type constructor recursive type constructor bekic parameterised fixed point operator see 
interpretation formed types induces interpretation formed expression contexts theta gamma continuous functions theta gamma thetaj usual way 
lemma substitution lemma theta ff theta ff theta ff 
ff hid theta ff theta ff theta ff equality theta ff 
ff theta ff holds 
convention 
maps indicated 
map write indicate subcategory interpretation formed expression theta gamma ff family theta gamma ff theta gamma ff thetaj theta gamma ff map theta gamma theta ff 
definition interpretation function essentially 
write theta gamma ff indicate theta gamma ff theta gamma ff derivable evaluates call value evaluation rules 
write theta gamma ff theta gamma ff value lemma basic model theta gamma ff value theta gamma ff theta gamma ff theta gamma ff 
corollary computational soundness basic model theta gamma ff theta gamma ff 
axiomatisation 
cpo enrichment denoted maps write indicate denotes cpo enrichment roughly speaking model see definition basic model trivial composition strict accordance call value evaluation definedness observable semi decidable property information order maps form determined information order approximation structure provided corresponds standard approximation structure viz 
embeddings compositional respect type structure 
definition model model basic model satisfies 

hom set scott open hom cpo 
theta theta def pi theta ff ff def theta ff theta ff theta ff theta ff def theta ff theta ff omega theta ff ff def theta ff theta ff theta ff def theta ff 
interpretation formed types coproduct injections reflect order 
map embedding inclusion functor preserves initial object colimits chains 
writing unique arrow exists writing associated projection equalities hold omega omega theta expected provides model 
instance see holds uses fact inclusion functor preserves colimits chains chain hx lub happens id see 
relation operational semantics 
main results 
theorem computational adequacy model ff ff 
proof follows structure chapter see 
corollary category games innocent strategy ff total iff ff 
theorem full abstraction standard quotient cf 
gives fully model fpc :10.1.1.37.813
proof lines theorems definability result finite canonical forms finite type cf 

games optimised strategies issues process representation strategies 
section exploit intensional nature game semantics obtain semantically directed compilation fpc terms pict codes :10.1.1.127.1777
aim deepen understanding operational content fpc programs process representation game theoretic interpretation 
viewpoint may observe basic issues original process representation pcf strategies hyland ong :10.1.1.45.5883:10.1.1.45.5883
problem sums infinitely branching arenas involved example lists infinite sequence names infeasible index infinite set constants done infeasible complex data structures fpc :10.1.1.45.5883
problem copy cat copy cat behaviours prevalent interpretation projections injections process representation reveals significant redundancy :10.1.1.45.5883
resulting code hard understand far imaginable implementation scheme 
example process representation closed term needs steps converge def needs essentially steps converge 
omnipresent problem 
example term involves unbounded behaviour fixed point combinator impossible statically erase redundancy 
obtain feasible concise code sacrificing structure interpretation fpc address issues categorical level 
problem solved introducing lazy interpretation sums section 
solution second problem section extending slight change operational structure games 
key idea new notion games certain tree isomorphisms represent copy cats 
shall see section new relation actions represents communication free names calculus 
construction interesting right gives analysis notion copy cat fundamental idea game semantics 
strategies 
arenas section 
fix arenas consider pre arena write tree root pre arena introduce notation psi indicate psi isomorphism trees pre serves qa labels reverses op labels 
write source psi target psi sequence action sequence sense section action sequence set pointers 
pointer action sequence sn gamma triple psi satisfying gamma opponent player psi 

gamma target psi free names bind psi psi target psi target psi psi psi non ambiguity binding 
prefix equality sequences defined considering justification pointers 
sequence satisfies visibility condition action sequence pointer psi view sequence legal bracketed action sequence satisfies visibility condition 
strategy innocent strategy defined section replacing action sequences sequences 
strategy total immediately reacts codomain initial answer 
note strategies trivially strategies 
non trivial example id strategy letting psi evident isomorphism mapping initial answer strategy answers psi carrying pointer 
associated isomorphism psi actions possible 
composition strategies 
extended sequence action sequence pointers satisfies preceding subsection 
legality notions extended sequences inherited sequences 
oe strategy oe innocent function 
define oe smallest partial function views extended sequences satisfying ffl oe oe ffl range oe underlying sequence gamma pointer psi gamma view delta target psi gamma oe delta source psi pointers psi 
psi def psi gamma check oe defined partial function 
write oe strategy extended sequences generated oe strategies oe define oe procedure 
denote occurrences sorts game board 
composed plays defined section oe recording pointers 
ii composed play maximal sequence pointers phi phi 
phi gamma column target phi gamma source phi erase pointers put pointer phi phi def phi ffi phi gamma ffi delta delta delta ffi phi 
iii take projection result ii components including pointers define oe set non extended sequences 
strategy composition section composition coincide 
proposition strategies oe oe strategy composition associative id defined identity 
proof category see checking innocence :10.1.1.37.813
composed pointers 
new category games 
cpo category arenas objects strategies morphisms identities composition enrichment inclusion innocent functions 
categories type structure 
universal arrows projections injections obtained turning copy cats corresponding maps pointers 
proposition category model sense definition 
compilation fpc pict games lazy sum interpretation 
having introduced solve copy cat problem solution problem infinite sums 
approach interpretation fpc sums interpreted lazily 
consider lazy sum type phi encapsulating computation sum type 
introduce lift functor def define lazy sum functor phi composite theta simple example consider type lazy natural numbers 
lift functor comes equipped operation encapsulating value computation def omega dual operation evaluating computation value def omega ev 
construction id operations coproduct injections provide corresponding injections lazy sums viz 
def phi 
non standard version ffi see needed interpreting case statement ffi def omega phi omega omega ffi omega omega 
lazy sum interpretation denoted standard replacing phi ffi ffi see 
lazy sum interpretation computationally adequate 
theorem model sense definition lazy sum interpretation computationally sound adequate 
untyped processes 
denotation fpc terms delta faithfully represented concise core pict codes terms asynchronous polyadic calculus :10.1.1.127.1777
set processes core pict grammar 
range countable set names 
xn xn jq xn notions binding free names subject names head input output object names names carried input output standard 
stand jq common free names delta denotes jp occur free object message structural congruence reduction relation gamma 
standard 
write gamma 
gamma 
gamma 
output late transition relation labels xn ah xn fx xng 
set sub xn sub ah xn def ob xn ob ah xn def sequence input output labels say assume usual binding relation binding convention weak transition standard weak bisimilarity late early versions coincide 
notion cf 
term strongly determinate gamma 
gamma 
gamma 
imply gamma 
output implies gamma 
fpc sorting 
lifted sum interpretation types interpreted trees arenas initial sort easily verified 
extends environments 
henceforth restrict attention finitely branching arenas induced closed fpc types 
call fpc arenas 
believe fpc types lie class note closed ff theta ff 
fpc arena 
branch tree constructed structure fpc type assign ordering children nodes node respecting lexicographic ordering tensor sum composition phi initial sort smaller 
ordering enabling relation written 
sn sequence sn gives sorts enabled ordered mentioned 
fpc sorting family pairwise disjoint countable sets names ff indexed pairs consisting fpc arena sort partial function just introduced enabling relation sorts sequences 
write omitting clear context indicate name fpc sorting set sorted processes standard definition 
note sorted process 
sn name carries sequence names length sorts sn compilation 
fix fpc sorting rest section 
compilation fpc terms pict codes 
fpc term gamma ff compilation parameterised sequence pairwise distinct names say 
sn initial sort gamma initial sort ff 
assume mentioned names including vector pairwise distinct textually identical usage follows fpc sorting including length vector names 
note gamma fi fi imply fi nontrivial tensor 
case may write corresponds fi 
easy check resulting processes sorted 
intuitively compilation considered representing behaviour strategy deprived initial opponent signal 
example parameterised term ff ff ff ff mapped strategy form 
correctness compilation 
aim rest section show captures interactive behaviour result compilation computationally adequate respect operational semantics fpc 
purpose introduce notion representation 
oe strategy non zero finite non lazy sums fpc arenas satisfying involved pointers isomorphisms respect natural ordering underlying fpc sorting 
note pointers involved strategies resulting denotational semantics satisfy condition 
sn gamma oe 
assume pairwise distinct names theta gamma gamma def theta gamma inl ff ff def theta gamma ff theta gamma inr ff ff def theta gamma ff theta gamma case inl inr ff def delta theta gamma omega theta gamma ff ff ffi theta gamma ff ff theta gamma ff ff theta gamma hm ff theta ff def delta theta gamma ff omega theta gamma theta ff omega theta gamma ff theta gamma fst ff def theta gamma ff theta ff theta gamma snd ff def theta gamma ff theta ff theta gamma ff ff def theta gamma ff ff theta gamma ff def delta theta gamma ff ff omega theta gamma theta ff ff omega theta gamma ff ev theta gamma intro ff def theta gamma ff 
ff theta gamma elim ff 
ff def theta gamma ff 
interpretation formed expressions theta def theta theta phi theta gamma inl def theta gamma theta gamma inr def theta gamma theta gamma case inl inr def delta theta gamma omega theta gamma ffi theta gamma theta gamma 
lazy sum interpretation gamma ff def gamma hm fi theta fi def gamma gamma gamma inl ff fi def gamma delta gamma inr ff fi def gamma delta gamma case inl inr fi def gamma delta gamma fi gamma fi gamma ff ff fi def delta yc gamma ffi gamma fi def gamma gamma zv gamma intro ff def gamma ff 
ff gamma elim ff 
ff def gamma ff 
direct compilation def def delta ffi def ev def xv gamma ff def gamma hm fi theta fi def gamma gamma gamma inl ff fi def gamma gamma inr ff fi def gamma gamma case inl inr fi def gamma ffi gamma fi jc gamma fi gamma ff ff fi def delta yc gamma ffi gamma fi def gamma hm ev gamma intro ff def gamma ff 
ff gamma elim ff 
ff def gamma ff 
categorical compilation tm rm initial sorts respectively 
instantiation sequence non labels length say gamma sub gamma resp 
sub resp 
sub opponent resp 
player input resp 
output 
um sub ob psi pointer 
um 
source psi target psi ob ob ob occurs free object names output labels occur free case 
instantiations considered modulo ff equality 
oe instantiation say play oe instantiated definition representation follows 
definition representation oe process represents oe simply represents oe relation set fpc sorted strongly determinate processes set plays oe instantiated ii output tl play oe instantiated iff implies tl input tl play oe instantiated implies tl 
key property representation follows 
lemma resp 
represents oe resp 
represents oe proof uses alternative equivalent presentation composition strategies precisely corresponds interaction representing processes 
wish show closed fpc term pict code term terminating behaviour 
purpose introduce intermediate compilation construction closer inductive definition denotational semantics bisimilar compilation 
list intermediate compilation 
compilation parameterised names belong respective initial sorts domain codomain 
case statement term inductive definition def hh gamma def ii hx denotes standard pairing 
proposition fpc terms gamma ff strongly determinate 
ii 
iii represents case application requires analysis 
ii simple algebraic transformations 
iii proceed induction lemma 
closed fpc term 
iff theorem iii iff gamma 
output sub turn equivalent ii 
result 
theorem computational adequacy closed fpc terms iff 
abramsky jagadeesan malacaria 
full abstraction pcf 
appear 
abramsky mccusker 
linearity sharing state fully game semantics idealized algol active expressions 
electronic notes theoretical computer science 
abramsky mccusker 
call value games 
proc 
csl lncs 
springer verlag 
appear 
berry 
curien 
sequential algorithms concrete data structures 
theoretical computer science 
boudol 
calculus direct style 
popl conf pages 
brock 
process semantics graph reduction 
concur conf volume lncs pages 
springer verlag 
cartwright 
curien felleisen 
fully semantics observably sequential languages 
information computation 
edalat smyth 
categories framework solving domain equations 
theoretical computer science 
fiore 
axiomatic domain theory categories partial maps 
distinguished dissertations computer science 
cambridge university press 
fiore plotkin 
axiomatisation computationally adequate domain theoretic models fpc 
th lics conf pages 
computer society press 
freyd 
algebraically complete categories 
category theory volume lnm pages 
springer verlag 

girard 
geometry interaction interpretation system logic colloquium 
north holland 
gunter 
semantics programming languages structures techniques 
mit press 
honda 
calculus 
technical report department computer science keio university 
honda yoshida :10.1.1.37.813
game theoretic analysis call value computation full version 
available ftp ftp dcs ed ac uk export kohei ps gz extended appeared proc 
icalp volume lncs pages 
springer verlag 

note inconsistencies caused fixpoints cartesian closed category 
theoretical computer science 
hyland ong 
full abstraction pcf ii iii 
appear 
hyland ong :10.1.1.45.5883
pi calculus dialogue games pcf 
fpca conf pages 
larsen winskel 
information systems solve recursive domain equations 
information computation 
lawvere 
diagonal arguments cartesian closed categories 
category theory homology theory applications ii volume lnm 
springerverlag 
longo moggi 
cartesian closed categories enumerations effective type structures 
symposium semantics data types volume lncs 
springer verlag 
mccusker 
games full abstraction functional metalanguage recursive types 
phd thesis university london 
milner 
functions processes 
mathematical structures computer science 
milner 
polyadic calculus tutorial 
proceedings international summer school marktoberdorf 
milner parrow walker 
calculus mobile processes parts ii 
information computation 
milner tofte harper 
definition standard ml 
mit press 
moggi 
categories partial morphisms partial lambda calculus 
proceedings workshop category theory computer programming volume lncs pages 
springerverlag 
pierce sangiorgi 
typing subtyping mobile processes 
th lics conf pages 
computer society press 
pierce turner :10.1.1.127.1777
pict programming language pi calculus 
appear proof language interaction essays honour robin milner mit press 
plotkin 
denotational semantics partial functions 
lecture summer school 
power robinson 
premonoidal categories notions computation 
mathematical structures computer science 
power rosolini 
fixpoint operators domain equations 
appear 
riecke sandholm 
relational account call value sequentiality 
th lics conf pages 
computer society press 
robinson rosolini 
categories partial maps 
information computation 
sangiorgi 
calculus internal mobility agent passing calculi 
theoretical computer science 
smyth plotkin 
category theoretic solution recursive domain equations 
siam journal computing 
walker 
objects pi calculus 
information computation 
winskel 
formal semantics programming languages 
mit press 

