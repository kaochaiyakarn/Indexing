zephyr compiler infrastructure andrew appel jack davidson norman ramsey princeton university university virginia www cs virginia edu zephyr november overview high quality compilers range modern languages essential conducting experimental research computer architecture programming languages programming environments 
example compilers required run benchmarks evaluating new ideas architecture code optimization compilers new languages need optimizers code generators runtime systems existing platforms 
building compilers bottleneck compiler construction labor intensive 
nearly complete compilers constructed essential components relatively small parts 
evaluate new architecture instance requires code generator architecture architecture dependent optimizer 
writing toy compilers toy languages insufficient research community demands measurements established benchmarks spec benchmarks spec written real programming languages 
national compiler infrastructure project seeks easier perform realistic experiments making easier build high quality compilers 
goal possible build complete compilation systems pieces replacing modifying pieces relevant client researchers 
example researchers studying global optimization algorithms replace add optimizers existing front ends code generators 
national compiler infrastructure pay economic intellectual dividends 
reduce significantly costs doing computer systems research terms time barrier entry direct monetary 
encourage researchers attack computer systems problems increase rate new research results appear 
national compiler infrastructure includes suif stanford university intermediate format wilson emerging zephyr optimizer program generation tools 
shows big picture 
suif infrastructure built suif representation 
representation provides common format programs different languages expressed supports high level optimizations including automatic parallelization object oriented optimization 
zephyr infrastructure built portable optimizer vpo supports lowlevel optimizations programs expressed level machine instructions 
focus compiler zephyr infrastructure focuses strategies build different compilers 
document explains main strategies zephyr compilation strategy retargeting strategy integration strategy 
putting strategies practice connecting suif native code generator sparc 
sml nj edg ada dec fortran java mach suif suif vpo bridge vpo lcc edg ibm visualage alpha suif sparc mips alpha interprocedural analysis parallelization locality opts object oriented opts scheduling register allocation instruction selection register allocation code motion memory access coalescing induction variable elimination cse loop unrolling inlining suif infrastructure zephyr infrastructure optional item overview national compiler infrastructure zephyr compilation strategy zephyr compilation strategy assemble compilers parts 
ffl compiler writer supplies front 
front wide variety lexer generators parser generators attribute grammar evaluators commonly build front ends written programming language 
ffl zephyr toolset supplies parts machine independent optimizer vpo back components machine dependent parts compiler glue connecting compiler components 
ffl compiler writer chooses intermediate representation front target 
freedom choose intermediate representations important element compiler research example trend typed intermediate languages predicted years ago 
zephyr tools enable freedom intermediate representations integrating tree representation 
zephyr includes syntax description language asdl defining tree representations 
asdl generator helps compiler writers build interconnect tools tree representations 
ffl zephyr infrastructure gives compiler writer guide connecting intermediate representation optimizer making complete back 
ffl zephyr compilers easily retargeted new machines 
machine dependent components written hand generated compact specifications target machine 
specifications describe machine properties reused different compilers 
optimizer written hand independent target machine need modified support new targets 
vpo optimizer portable optimizer vpo crucial element zephyr infrastructure 
inserting vpo compiler means preceding stages generate naive code letting vpo ensure final code high quality 
vpo generates code gcc manufacturers compilers better worse 
characteristic properties vpo ffl optimizations expressed machine independent transformations ffl optimizations performed machine instructions apparent paradox resolved vpo representation programs control flow graphs containing register transfer lists rtls 
register transfer lists register transfer list simultaneous composition list effects 
effect conditional guard guard true effect computes value expression stores result location 
guards trivial true 
nontrivial guards typically express conditional branching predicated execution 
rtl expression may fetch value location may constant expression may apply rtl operator list expressions 
rtl operators pure functions express computational instructions include integer arithmetic floating point arithmetic bitwise operations 
examples assembly language rtl representations sparc instructions add add ld sp sp sx gamma call npc pc property distinguishing zephyr rtls rtl formalisms zephyr rtls semantics independent machine 
precisely denotation rtl expression may written function states values denotation function independent target machine 
similarly denotation rtl written function states states independent target machine 
vpo optimization invariants optimizable vpo program expressed set procedures procedure expressed control flow graph individual elements zephyr rtls 
program defined semantics drawn rtl semantics 
program vpo repeatedly improves improvement possible repeat apply code improving transformation reached fixed point registers transformation maintains invariants semantic invariant observable behavior program unchanged rtl semantics 
machine invariant rtl program equivalent single instruction target machine 
vpo uses recognizer maintain machine invariant transformations violate undone automatically 
semantics preserving transformation may added vpo 
compiler writer guarantee preservation semantic invariant semantics preserving code improving transformation ffl machine level operates representation isomorphic machine instructions ffl machine independent obligation compiler writer preserve machine independent semantics 
optimization written exploit unusual feature single machine expressed machine independent framework 
new machine incorporates feature vpo automatically exploits 
standard optimizations easily expressed transformations flow graphs containing rtls 
optimizations implemented vpo include ffl code motion ffl common subexpression elimination ffl strength reduction ffl induction variable elimination ffl loop unrolling ffl inlining ffl memory access coalescing 
preserving machine invariant vpo uses gatekeeper preserve machine invariant gatekeeper invoked code improving transformation 
presents changed rtl recognizer tells gatekeeper new rtl equivalent single instruction target machine 
changed rtls equivalent machine instructions invariant maintained gatekeeper permits transformation 
invariant violated gatekeeper rolls back transformation returns program state satisfying machine invariant 
important transformations vpo simple forward substitution value location replaced expression previously stored location 
transformation effectively peephole optimization implements technique instruction selection peephole optimization described davidson fraser gcc 
vpo compilers brief description appear vpo solves code generation problem just write program rtl vpo produce machine code 
truth rtl universal intermediate representation machine independent 
limitation easy overlook rtls passed vpo satisfy machine invariant vpo guaranteed preserve part compiler establish shows compiler uses vpo 
front emits intermediate representation compiler writer choice rtls representation 
code expander turns intermediate representation rtls satisfy machine invariant vpo produce high quality assembly language 
major machine dependent components vpo compiler shown sans serif bold 
typical front ends machine dependent components small amount machine dependent information sizes alignment requirements basic types 
section presents strategy retargeting zephyr compilers creating components new machines 
zephyr retargeting strategy machine description languages far possible zephyr compilers retargeted component generators create machinedependent compiler parts descriptions machine properties 
zephyr provides family computer systems description languages csdl front ir possibly rtl code expander rtl satisfying vpo rtl satisfying recognizer asm emitter optimizations assembly language code generator vpo compiler write descriptions 
family languages single language order limit language family description single machine property group closely related property 
strategy advantages ffl design individual description languages tailored needs property described making descriptions easier write 
ffl descriptions single properties easier understand reused monolithic kitchen sink descriptions 
ffl descriptions depend target machine particular compiler intermediate form optimizer build tools just compilers 
csdl languages family simply unrelated collection view critical aspects machines state instructions 
precisely ffl csdl description refers machine state treats state collection csdl storage spaces 
space behaves array mutable cells spaces model memory general purpose registers program counter condition codes special purpose registers general state change execution program 
ffl csdl description refers machine instructions shares model instructions csdl descriptions 
simple model equivalent algebraic datatype prefer grammar production named start symbol instruction may nonterminals effective address operand terminals register number constant absolute address 
csdl descriptions declarative 
describe properties machines don tell compiler machine 
decoupling descriptions compiler means descriptions reused multiple compilers tools 
typical parser generators generators csdl semantic actions 
csdl descriptions analyzed checked consistency way impossible arbitrary code 
machine descriptions compiler literature descriptions called machine descriptions literature descriptions particular compiler components 
ffl machine descriptions lcc describe target instruction set mapping lcc intermediate code target instruction set fraser hanson 
descriptions complicated semantic actions typically emit assembly language execute arbitrary code 
complexities impossible reuse descriptions purpose building lcc 
ffl machine descriptions version vpo benitez davidson rtl recognizers 
depend compiler intermediate code case lcc understand arbitrary code understand rtls recognized 
ffl machine descriptions gnu compiler stallman mix information representation effects pipeline requirements instructions information compiler intermediate code code included compiler 
csdl languages csdl family currently members various stages maturity 
ffl specification language encoding decoding sled specifies assembly language binary representations instructions ramsey fern andez 
generate assembly language emitters 
ffl rtl specifies rtl semantics instructions ramsey davidson 
generate rtl recognizers 
ffl calling conventions language specifies parameters passed results returned procedures bailey davidson 
generate automaton compilers derive calling sequences including procedure 
ffl pipeline unifying notation graphs expressions plunge graphical notation specifying pipeline structure processor complete function units control data path networks 
function units labelled operations paths labelled latencies widths 
plunge tool accept graph description instruction set seek find implementation instruction set pipeline 
successful emit resource vectors instruction schedulers identify inconsistencies gaps pipeline implementation 
csdl descriptions combination able generate machine dependent components vpo 
remaining retargeting task writing code expander 
writing code expander zephyr compiler code expander maps compiler intermediate representation correct machine code 
new code expander written combination intermediate representation target platform 
key writing code expanders exploit vpo ability improve extremely naive code 
recommend compiler writers create new code expanders strategies modify expander machine port existing code generator compiler 
strictly speaking software convention machine property associated machines uses csdl storage model 
modifying code expander advise compiler writers keep output code expanders simple possible 
example need load value variable stored offset stack pointer don think addressing modes available just emit rtls sp sequence vpo easily efficiently recover sp 
simple rtls advantages ffl code expander targeted small subset actual machine 
example typically ignore addressing modes register register indirect 
ffl subset targeted doesn change machine machine code expander retargeted changes simple rtls satisfy porting existing code generator way getting code expander port existing code generator 
needed way getting existing code generator representation instructions rtl representation instructions 
example existing code generator prints assembly language calls printf replaced calls encoding procedures generated zephyr tools 
rtl description zephyr tools generate encoding procedure instruction target machine instruction set 
encoding procedure creates rtl suitable passing vpo 
connecting zephyr components point presentation zephyr focused back retargeting issues particular compiler writer get optimizing code generator intermediate representation choice 
zephyr truly widely connecting code generator rest compiler easy rest compiler composed different components written different languages 
simplify communication components zephyr supports creation interchange trees syntax trees trees rtl trees trees representing calls interface functions 
trees described zephyr syntax description language asdl wang provides support multiple languages 
example shows suif front written connected code expander written ml connected vpo written asdl uses grammars describe tree data structures 
shows asdl description form rtls 
asdl tools asdl generator reads asdl descriptions produces ffl data structure definitions concrete representations trees ffl constructor functions creating trees ffl functions writing trees disk reading results 
supports java haskell standard ml 
trees written disk files sent networks 
language machineindependent provide way components written different languages interoperate 
asdl browser interactive tool create browse edit save asdl trees 
offers multiple views including file manager view planar graph view fisheye view 
research underway browsing techniques easier visualize debug data structures typically compilers 
suif suif vpo vpo rtl rtl gateway gateway suif rtl hello hello hello hello asdl asdl asdl connect suif vpo asdl design goals asdl similar purpose interface definition languages corba idl sgml document type definitions asn 
targeted tree data structures compilers asdl simpler concise alternatives 
advantages existing formalisms 
ffl asdl descriptions tend smaller corresponding language specific data structure function definitions 
ffl asdl supports multiple languages guarantees consistency representations native different languages 
support new languages easy add 
ffl code created readable uses expected idioms target programming language 
ffl asdl fit existing syntax trees intermediate representations including suif lcc standard ml new jersey 
zephyr status fall snapshot status zephyr tools components asdl ffl projects reliable 
sources binaries downloaded project web site 
ffl prototype asdl browser written tcl tk available 
second version written java progress 
ffl asdl description suif called available 
ffl suif vpo compilation path working asdl nearly complete 
compiles full lcc test suite spec benchmarks 
testing needed eliminate bugs lurking dark corners 
csdl ffl sled projects reliable 
sources binaries downloaded project web site 
ffl rtl machine descriptions available comment generated code ty int size value bits exp const const fetch location ty app operator exp location agg aggregation cell cell cell space exp effect store location dst exp src ty guarded guard exp effect rtl rtl guarded const bit vector operator function aggregation bijection space mutable store meanings unspecified terminal symbols asdl specification form rtls internally rtl tools mature tools available request 
ffl calling convention language mature related tools bundled vpo 
ffl plunge planning stages zephyr deliverable 
vpo ffl vpo version projects reliable 
sources binaries downloaded project web site 
version uses older string rtl representation hand written recognizers 
ffl code generation interfaces connecting code expanders vpo nearing maturity 
available comment project web site 
ffl compiler demonstrates new interfaces available project web site mid november 
bailey mark jack davidson 
january 
formal model specification language procedure calling conventions 
conference record nd annual acm symposium principles programming languages pages san francisco ca 
benitez manuel jack davidson 
july 
portable global optimizer linker 
proceedings acm sigplan conference programming language design implementation sigplan notices 
davidson fraser 
october 
code selection object code optimization 
acm transactions programming languages systems 
fraser christopher david hanson 

retargetable compiler design implementation 
redwood city ca benjamin cummings 
ramsey norman jack davidson 
june 
machine descriptions build tools embedded systems 
acm sigplan workshop languages compilers tools embedded systems vol 
lncs pages 
springer verlag 
ramsey norman mary fern andez 
may 
specifying representations machine instructions 
acm transactions programming languages systems 
standard performance evaluation group 

spec 
va stallman richard february 
porting gnu cc version 
free software foundation 
wang daniel andrew appel jeff korn christopher serra 
october 
zephyr syntax description language 
proceedings nd usenix conference domain specific languages pages santa barbara ca 
wilson robert robert french christopher wilson saman amarasinghe jennifer anderson steve tjiang shih wei liao tseng mary hall monica lam john hennessy 
december 
suif infrastructure research parallelizing optimizing compilers 
sigplan notices 

