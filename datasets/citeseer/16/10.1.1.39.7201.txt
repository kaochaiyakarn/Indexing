categorical analysis multi level languages extended el benaissa eugenio moggi walid taha tim sheard oregon graduate inst portland usa disi univ di genova genova italy moggi disi univ di genova genova italy tel fax mail moggi disi unige 
propose categorical models fl metaml aim 
focus underlying logical modalities interactions investigate interactions logical modalities computational monads 
give examples categorical model simpler limitations complex able model features aim 
keywords categorical models semantics type systems multi level typed calculi combination logics modal temporal 
proposes categorical semantics multilevel languages fl metaml aim see :10.1.1.16.4975
developing semantics number benefits including ffl suggesting simplifications extensions 
simplified type system metaml proposed extension closed code types called aim see 
ffl validating equational reasoning principles 
established computational adequacy results formally claim equality model entails observational equivalence code inspection allowed observations 
expect results hold proof exploit kripke logical relations see 
ffl explaining multi level languages terms primitive concepts logical modalities sense modalities characterized universal properties computational monads 
multi level languages provide generic constructs manipulation code fragments 
viewed instances level languages object language multi level language 
study multi level languages ffl proving constructs construction execution closed code 
language useful machine code generation 
ffl fl providing constructs manipulating open code fragments :10.1.1.16.4975
language useful highlevel program generation inlining 
ffl metaml providing additional construct execution fragments cross stage persistence 
cross stage persistence ability level variable declared lower level 
features important pragmatic reasons 
ffl aim revising extending metaml closed code type expressivity modularity 
fl clean logical foundations see curry howard isomorphism fl linear time temporal logic modal logic :10.1.1.16.4975
metaml foundations formal hygiene promote 
metaml complex type system number ad hoc restrictions see demanded deeper investigation possibly simplification 
starting categorical account twolevel languages arrive number results multi level languages ffl analyze categorical point view logical modalities interact 
borrowing ideas benton categorical models linear logic specifically adjoint calculus give definition constitutes categorical model simply typed multi level languages fl aim consider examples 
replace notion symmetric monoidal adjunction fp adjunction 
ffl give interpretation denotational semantics aim cross stage persistence computational effects aim model 
ffl investigate interaction modalities computational monads computational effects pervasive feature programming languages 
particular refine interpretation aim presence computational effects discuss subtleties involved interpretation run construct 
notation introduce notation terminology 
ffl category write jcj set objects hom set maps ffl write gf ffi gfa fa functors functions object 
ffl write arrow ae full faithful functor adjunction right adjoint 
ffl write xn jn infinite sequence ji finite sequence length identify natural number set predecessors 
write ji clear context 
sequence element write sequence obtained adding front ffl write gamma gamma 
ffl haskell notation ret monads notation 
op mb write op ma mb monadic extension op delta op multi level languages describing syntax type systems multi level languages investigated fl metaml aim 
adopt unified notation types hti base types functions open code fragments closed code fragments 
features function closed code types 
typing judgments form delta gamma delta gamma fx ji mg 
syntax follows box box type system 
fl metaml aim feature function open code types 
typing judgments form gamma gamma fx ji mg natural called level term 
syntax fl follows hei constructs standard ones calculus constants 
bracket escape called prev allow construction combination open code :10.1.1.16.4975
brackets construct code escapes splice code fragment context bigger code fragment 
term fn 


yields 
executed 
rules constants variables applications essentially standard 
metaml uses relaxed type rule variables fl variables bound level lower level 
called cross stage persistence 
furthermore metaml extends syntax fl run run allows execution code fragment 
example run 
typed evaluates 
aim extends metaml analog box type yielding expressive language simpler type judgment metaml syntax aim extends metaml follows run fx ji mg box fx ji mg unbox run generalizes run metaml allows additional variables body satisfy certain typing requirements 
type systems fl metaml aim big step operational semantics aim sub languages 
basic multi level constructs introduced illustrate need open closed code types staged programming 
presentation metaml uses simpler type judgment aim reasons space 
uses open code taylor series 
consider generating code embedded system controller robot requires computing sin function taylor series polynomial gamma 
gamma 

write function add coefficients val int 
real 
real determine time generating program brackets escapes derive similar function manipulates representations value result representation desired polynomial val int 
real 
real 
construct definition desired code fragment need construction fun fn 
int 
real 
real 
allows derive expansion val fn 
val val val val 
real 
real 
bound 
code factorial expressions precomputed fairly efficient code generated perform computation 
construction desired expression performed symbolically know value achieve kind unfolding symbolic computation reduction lambda necessary apply open code fragment bound free variable 
unfolding achieved execute run construct val sin run real 
real caveat typing run unfortunately typing run problematic 
fact typing run code fragment constructed previous declaration problematic trivial example val val 
run standard interpretation typing val fn 
run 
fn 
run 
derivable metaml type system reason open code fragment general executed 
solution type checking purposes interpretation statement direct substitution 
declaration typable impairs efficiency typechecking 
existing implementation metaml ad hoc solutions overcome problem top level declarations see 
solution closed code aim type system addresses cause typing problem described ensure code fragment executed ensure closed 
achieved adding box type metaml 
programmer viewpoint main new concept code fragments functions construction new closed fragment boxed ensure free variables 
trivial example binding simply rewrite expression val val box 
run unbox example basic function type val int 
real 
real 
easily accomplished surrounding definitions symbolic box 
describe desired computation typed aim terms val box fn 
fn 

int 
real 
real 
val sin run unbox real 
real categorical models section define categorical model various multi level languages fl aim see definition 
ignore computational effects focus logical modalities underpinning languages 
previous davies pfenning established correspondence closed code types necessity modality open code types modality linear time temporal logic 
show modalities described terms explain interact provide model aim 
definition oe fp adjunction iff adjunction category categories finite products functors preserving equivalently adjunction left adjoint preserves finite products 
fp prefix indicate categorical notion category functor monad adjunction specialized category introduced 
fp adjunction special case symmetric monoidal adjunction give elegant definition categorical model intuitionistic linear logic see 
recall properties fp adjunctions exploited sequel 
proposition ccc ae oe fp adjunction exponential ideal iso definition fp functor induces simple indexed fp category op cat ffl js delta jdj sx delta fx theta 
ffl hffi delta gi sx sx sx fx theta fx projection 
identity sx second projection fx theta ffl substitution sx sy delta delta ffi ff theta id 
called simple action objects substitution functor identity 
proposition simple indexed category definition categorical structure ffl finite products sx sx ffl simple existential quantification delta fy theta sx thetay sx ffl exponentials sx theta sx provided ccc ffl simple universal quantification delta fy sx thetay sx provided ccc ffl simple comprehension sx ga provided fp adjunction 
definition model ccc fp adjunction oe pattern interpreting interpret type object fg term fx ji mg fx jj ng map sx delta 
fp adjunction induces fp comonad fg needed interpreting fact objects relevant interpretation form ga take kleisli category db ccc model required ccc 
separation typing contexts parts essential 
fact bijection modulo semantic equality terms form delta gamma form delta gamma 
box 
box analogy adjoint calculus may consider variant category context separation prominent role 
definition fl model ccc fp adjunction ae oe pattern interpreting fl interpret type object hti term fx ji mg fl map 
assumption full faithful ensures preserves ccc structure see proposition may safely confuse formalizing section 
aim closed open code types key point clarify modalities fl interact 
basic idea model aim model category structure fl model parameterized precise formulation uses simple indexed category definition 
definition aim model ccc fp adjunction oe indexed fp adjunction ae oe definition aim model fails capture cross stage persistence 
easily fixed requiring natural transformation na satisfying additional properties prefer include definition aim model see models 
pattern interpreting aim mimics fl type interpreted object fg hti term fx ji mg map 
proposition aim model canonical isomorphisms compile gna ga pfx fx 
isomorphisms suggest extension aim cross stage persistence close code types compile hti 
examples give examples aim models parameterized category making explicit additional structure properties needed 
example define category action objects functors example set naturals 
ccc indexed products take ffl delta object jdj sequence map sequence bn jn 
ffl na delta terminal object pa delta jn 
ffl fx delta sequence constantly ga delta example support cross stage persistence 
suitable interpreting fl metaml aim defined 
example op category natural numbers reverse order oe oe ccc finite op limits take ffl delta op map amounts commuting diagram oe oe oe bn fn oe bn fn object sequence maps ffl na delta map pa delta jn 
ffl fx delta id sequence constantly id ga delta lim 
op model define natural transformation na modeling cross stage persistence delta delta note exponentials defined pointwise 
existence exponentials finite limits ensures exponentials finite limits 
interpretation terms interpretation types aim computational effects cross stage persistence aim model hti section gives corresponding interpretation terms 
doing introduce auxiliary morphisms simplify definition interpretation clarify similarities interpretation calculus ccc 
ffl global element interpretation constant 
preserve finite products define delta ffl preserves ccc structure iso ffl theta essentially instance evaluation eval theta ffl ba comonad unit ffl ba multiplication ffi ba delta ffl 
ffl ba bb ba functors preserve finite products suffices say delta bf ffi ffi ba bb ba delta ffl theta ba nc theta ba case suffices give theta ba nc theta ba delta canonical iso see proposition theta ba theta pba 
delta unit induced fp adjunction iso pna unit adjunction full faithful 
modulo canonical isos theta pba theta pba pf defines interpretation formed term gamma induction typing derivation type system 
modalities monads simplified interpretation aim multi level languages absence computational effects 
interpretation analogue interpretation simply typed calculus ccc 
interested multi level programming languages mini ml mini ml fl metaml see logical modalities coexist computational effects 
section define cbv monadic interpretation aim aim model equipped strong monad see 
definition monadic aim model aim model strong monad canonical morphism mnb 
mnb na iso call mnb na mnb inverse 
idea models computation level 
extend aim models examples monadic aim models 
example strong monad induces strong monad ma delta ma ma delta immediate check additional requirement satisfied exponentiation pointwise 
example strong monad induces strong monad op ma ma oe ma ma man oe man man additional requirement holds provided monad preserves pullbacks commuting square mb pullback delta ret fx delta interaction pullbacks important exponentials op computed exponentials pullbacks monads category cpos lifting state exception monad satisfy properties required example notable exceptions power domains continuations 
interpretation types 
type interpreted usual object bm hti nm introduce shorthand mn mn mn call mna type stage computations returning stage value type monadic aim model term fx ji mg interpreted map mn 
interpretation refinement interpretation section recovered replacing identity monad extends cbv interpretation simply typed calculus ccc strong monad 
mn functor general monad 
auxiliary morphisms 
introduce auxiliary morphisms similar section 
exception morphism unable define general specific models 
notation introduced notation ffl jn induction id mn ma unit monad ffl induction id ma ji delta ret ji exploit preservation finite products ffl delta ma jn ma mna ma global element ma 
ffl varn delta ma jn ma mna 
ffl mnb mn mb induction mb mb mn mnb mn mb ffl mn mb theta mna mnb eval ffi eval mb theta mb instance evaluation 
ffl mna ffl ffl bma ma instance unit ffl bf ffi ffi ffi bma mb ffi instance multiplication exploit preservation finite products interpretation terms 
defines interpretation formed term gamma induction typing derivation type system run 
give interpretation run monadic aim models example 
interpret run need auxiliary morphism ffl theta mnb nc theta bma mn simplicity sequel assume call example monadic aim model define replaced model mna ma am gamman delta theta mnb define mth component gm map case analysis gm fm fm theta gn mx fn fn delta man fn theta fn theta mb mx gamma theta mb absence computational effects defined applying functor functor replaces mth component fm codomain terminal object don lose information 
monadic interpretation codomain 
informally speaking definition loose information maps collapses maps interpretation serious caveat natural transformation ma generic way lifting natural transformation mna example monadic aim model op define imposing restriction model mna ae am gamman delta gma nc theta fx mn define theta mnb ffl define mb fx nc mn fx mn mb fx ffl define mb fx mn mb fx mth component rm case analysis gamma rm delta gamma rn gamma delta rm delta mb gamma exponentiation op pointwise special case exponentiation fx ffl define theta mnb theta ffi theta id mn mb fx theta mnb monadic aim model op serious caveat mentioned property call cross stage persistence computational effects exists iso mpa pma commuting monad structure 
monadic interpretation compile 
aim model iso compile bna ba see proposition pure interpretation hti isomorphic 
monadic interpretations types isomorphic monadic aim models described morphism compile suitable interpreting compile hti operational semantics 
box 
hv compile 
box define compile model assume preserves op limits 
note bma delta ma theta theta easy define mth component compile case analysis compile delta ret vg compile delta delta gamma delta gamma delta gamma delta gamma delta gamma delta delta gamma box delta gamma delta gamma delta gamma delta gamma delta gamma delta gamma box type system gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma hei hti gamma hti gamma fl type system gamma gamma gamma hti gamma run metaml type system gamma gamma fx ji mg hti gamma run gamma fx ji mg gamma box gamma gamma unbox aim type system 





hvi 

box 
box 
box 
unbox 


hv 
run 

hei 
hvi 





box 
box 




unbox 
unbox 

run 
run big step operational semantics gamma delta ffi gamma delta gamma gamma theta gamma delta ffi gamma ba gamma unbox delta ffi gamma gamma hei hti delta na gamma hti na gamma delta gamma ba fx jig ba gamma box delta ffi hf jii ba gamma gamma gamma delta ffi hf gamma ba gamma fx jig hti nc theta ba na gamma run delta ffi hid hf delta gamma delta delta delta 
pure interpretation aim models gamma delta ffi mn gamma delta varn ffi mna gamma gamma theta mnb gamma delta ffi mn mb gamma mn bma gamma unbox delta ffi mna gamma mn gamma hei hti delta mn nma gamma hti mn nma gamma delta mn gamma mn bma fx jig bma ma gamma box delta ffi hf jii mn bma gamma mn mb gamma mna gamma delta ffi hf mnb delta gamma delta delta delta 
monadic interpretation aim models run benton 
mixed linear non linear logic proofs terms models 
lncs 
benton wadler 
linear logic monads lambda calculus 
th lics new brunswick new jersey july 
ieee computer society press 
bierman 
categorical model intuitionistic linear logic 
lncs 
davies :10.1.1.16.4975
temporal logic approach bindingtime analysis 
th lics new brunswick new jersey july 
ieee computer society press 
davies pfenning 
modal analysis staged computation 
rd popl st petersburg beach florida january 
martini masini 
computational interpretation modal proofs 
wansing editor proof theory modal logic 
kluwer 
masini 
sequent calculus intuitionism natural deduction 
journal logic computation 
moggi 
notions computation monads 
information computation 
moggi 
categorical account level languages 
mfps 
moggi 
functor categories level languages 
fossacs volume lncs 
springer verlag 
moggi taha benaissa sheard 
idealized metaml simpler expressive includes proofs 
technical report cse ogi october 
taha benaissa sheard 
multi stage programming axiomatization type safety 
th icalp aalborg denmark 
taha sheard 
multi stage programming explicit annotations 
pepm 
acm 
