appeared aaai workshop knowledge discovery databases eds 
usama fayyad uthurusamy pages seattle washington july 
efficient algorithms discovering association rules heikki mannila hannu toivonen verkamo university helsinki department computer science box fin helsinki finland mail cs helsinki fi association rules statements form rows relation row value columns set column 
agrawal imielinski swami introduced problem mining association rules large collections data gave method successive passes database 
give improved algorithm problem 
method careful combinatorial analysis information obtained previous passes possible eliminate unnecessary candidate rules 
experiments university course enrollment database indicate method outperforms previous factor 
show sampling general efficient way finding rules 
keywords association rules covering sets algorithms sampling 
data mining database mining knowledge discovery databases recognized promising new field intersection databases artificial intelligence machine learning see 
area loosely defined finding interesting rules exceptions large collections data 
agrawal imielinski swami introduced class regularities association rules gave algorithm finding rules database binary data 
association rule expression set attributes single attribute 
intuitive meaning rule rows database attributes value true attribute tends value true 
instance rule state students courses cs cs take course cs 
sort information assigning classrooms courses 
applications association rules include customer behavior leave nokia research center 
analysis example supermarket banking environment telecommunications alarm diagnosis prediction 
study properties association rule discovery relations 
give new algorithm problem outperforms method factor 
algorithm basic idea repeated passes database method 
difference algorithm careful combinatorial information obtained previous passes way avoids considering unnecessary sets process finding association rules 
experimental data consists databases university course enrollment data fault management database switching network 
empirical results show solid performance method 
type improvement independently suggested 
study theoretical properties problem finding association rules hold relation 
give probabilistic analysis aspects problem showing sampling efficient way finding association rules random relations association rules small 
give simple information theoretic lower bound finding rule show algorithm suggested loveland different framework meets lower bound 
rest organized follows 
section introduces problem notations 
section describes algorithm finding association rules 
analysis sampling section 
empirical results comparison results section 
section short 
appendix contains probabilistic analyses random relations lower bound result 
appendix gives overview implementation 
refer related 
problem introduce basic concepts formalism 
fi mg set attributes called items binary domain 
input ft data mining method relation relation schema fi mg set binary vectors size row considered set properties items 
set attributes row relation 
write 
association rule expression real numbers fl confidence threshold oe support threshold say satisfies respect fl oe jfi wb gj oen jfi wb gj jfi gj fl fraction oe rows attributes wb fraction fl rows having attributes set attributes say covering respect database support threshold oe jfi gj oen fraction oe rows relation attributes example suppose support threshold oe confidence threshold fl consider example database abcd bk rows contain set support jfi ab gj supports correspondingly 
fag fbg supports larger threshold oe covering fcg 
database satisfies fag covering confidence larger fl 
database satisfy fbg confidence threshold fl 
coverage monotone respect contraction set covering fi covering 
hand association rules monotonicity properties respect expansion contraction left hand side holds wa necessarily hold wa holds necessarily hold 
case rule wa necessarily sufficient support second case rule necessarily hold sufficient confidence 
finding association rules basic algorithm approach finding association rules find covering attribute sets separately test rule fbg holds sufficient confidence 
follow approach concentrate algorithms search covering subsets 
know subset covering read fraction gamma oe rows relation small values support threshold oe relation considered 
pass database course check subsets covering 
database large important passes data possible 
extreme method just pass check subsets covering 
infeasible smallest values agrawal term large 
easy see approach sense optimal problem finding covering subsets reduced problem finding association rules hold confidence 
relation find covering sets adding extra column finding association rules right hand side hold certainty 
method multiple passes database 
database pass new candidates covering sets generated support information collected evaluate candidates covering 
candidates derived database tuples extending previously covering sets frontier 
database pass frontier consists covering sets extended 
set frontier extended point extension longer expected covering 
candidate unexpectedly turns covering included frontier database pass 
expected support required decision derived frequency information items set 
originally frontier contains empty set 
essential property method candidate generation evaluation performed database pass 
method uses techniques prune candidate space database pass 
briefly described appendix take slightly different approach 
method tries available information previous passes prune candidate sets database passes passes kept simple possible 
method follows 
produce set collection covering sets size collection contain candidates sets size possibly covering sets 
ffag rg 


database pass elements covering 
candidate generation compute 

od implementation database pass line simple just uses counter element candidate generation compute collection certain include possible elements contain unnecessary elements 
crucial observation 
recall denotes collection covering subsets jxj includes sets claim follows immediately fact subsets covering set covering 
observation independently 
despite triviality observation powerful 
example know fab bc ac ae af cgg conclude abc abe possible members sets size subsets size included means empty 
particular contain sets specification computation take sets property fx jxj includes members fact smallest possible candidate collection general 
relations collection covering sets size collection coverings sets size specified 
computation collection holds interesting combinatorial problem 
trivial solution inspect subsets size obviously wasteful 
possibility 
compute collection forming pairwise unions covering sets size attribute common fx jx gamma computed checking set defining condition holds 
time complexity jc jc jl bound rough 
alternative method form unions sets fx xg compute checking inclusion condition 
note done generating depend size database size collection computing compute families directly computational complexity algorithms analyzed terms quantities jl jc jc size database 
running time linear exponential size largest covering set 
reasons space omit detailed analysis 
database passes dominate running time methods large values algorithms quite slow 
section shall see analyzing small samples database obtain approximation covering sets 
analysis sampling consider sampling finding covering sets 
show small samples usually quite finding covering sets 
support set attributes 
consider random sample replacement size relation 
number rows sample contain random variable distributed binomial distribution trials having success probability chernoff bounds state gamma results possible relative sizes 
probability estimated support ff ff gamma ff gamma ff bounded quantity exponential example ff probability gamma 
similar results easily obtained standard normal approximation 
means sampling powerful way finding association rules 
fairly low values support threshold oe sample consisting rows gives extremely approximation coverage attribute set 
algorithms working main memory quite useful problem finding association rules 
appendix contains analysis covering sets random relations lower bound result problem finding association rules 
experiments evaluate efficiency methods compare original algorithm algorithm 
candidate generation performed extending sets sets achieve extensions 
compare aggressive extending strategy aggressive strategy size candidate sets doubled iteration step 
refer algorithm offline candidate determination variants noted ocd ocd addition original algorithm noted ais orig implemented minor modification refrains extending set item covering set noted ais mod 
details implementations appendix data datasets evaluate algorithms 
course enrollment database including registration information students tuple student 
row contains courses student registered total possible courses 
average row contains courses 
simplified version database includes students courses interesting generating rules database consists tuples average items tuple 
figures tables represent course enrollment data 
second database telephone fault management database containing records switching network notifications 
total number attributes 
database basically string events map relational form considering terms overlapping windows 
experiments data support achieved course database 
database sizes representative sampling result approximations concluded section 
size support oe table number covering sets 
support oe count max size table number maximal size rules fl 
results algorithm finds course covering sets rules 
number covering sets different support thresholds table 
correspondingly number association rules table confidence threshold fl experiments 
tables show number covering sets rules increases fast decreasing support threshold 
presents total time seconds function inverse support threshold oe prefer inverse oe corresponds common sense idea rarity items 
shows clearly ocd time efficient ais 
time requirement ocd typically time requirement ais advantage ocd increases lower oe 
difference algorithms notable large oe 
difference variants ocd large modification implemented ais affect performance significantly 
look total time function jlj number covering sets observe algorithms behave linearly respect jlj time requirements ocd increase slowly 
measure amount database processing examine effective volume candidates denoted eff total volume candidates evaluated weighted number database tuples examined evaluate 
measure representative amount processing needed database passes independent implementation details 
time inverse support oe ais ocd ocd time number covering sets ais ocd total time seconds function inverse support function number covering sets 
eff inverse support oe ais ocd ocd eff number covering sets ais ocd ocd effective volume candidates function inverse support function number covering sets 
principal reason performance difference ais ocd seen figures behavior eff support threshold oe decreases jlj number covering sets increases 
number candidate sets volume considered ocd smaller ais difference increases sets 
figures explain aggressively extending variant ocd perform better basic ocd aggressive strategy reduce number passes results candidates reduction time offset 
table presents number candidates considered method 
numbers ais higher may generate candidates database pass 
hand ocd generates candidate generation time checks subsets covering evaluating database 
number potential candidates generated ocd smaller ais fewer candidates need evaluated database pass 
sampling samples large data remain support oe ocd ocd ais orig ais mod table generated candidates 
eff iteration pass ais ocd effective volume candidates iteration pass 
main memory passes reloaded pass 
important minimize number data passes 
want overlap database reads processing amount processing performed database pass small 
presents typical profile eff passes run oe 
area beneath curve corresponds total volume height curve point describes processing needed pass 
high peaks correspond passes overlapping processing may endangered database large 
confidence threshold fl affects number rules generated covering sets varied experiments 
hand suitable values support threshold oe depend database 
concluding remarks association rules simple natural class database regularities useful various analysis prediction tasks 
considered problem finding association rules hold relation 
algorithm uses existing information database passes avoid checking coverage redundant sets 
algorithm gives clear empirical improvement compared previous results simple implement 
see similar results 
algorithm extended handle nonbinary attributes introducing new indicator variables special properties candidate generation process 
analyzed theoretical properties problem finding association rules 
showed sampling efficient technique finding rules type algorithms working main memory give extremely approximations 
appendix give additional theoretical results 
give simple lower bound special case problem note algorithm different framework matches bound 
considered finding association rules sequential data 
problems remain open 
pruning ideas probably quite useful certain situations recognizing methods help practice 
algorithmic problem find efficiently possible candidate sets occur database row 
currently simply check candidate separately ab ac candidates entry row checked twice 
certain stages search candidates heavily overlapping useful utilize information 
general problem data mining choose interesting rules large collection rules 
support confidence thresholds way pruning uninteresting rules methods needed 
course enrollment database discovered rules correspond normal process studies 
eliminated considering partial ordering courses saying rule interesting greater elements respect ordering 
agrawal imielinski swami 
mining association rules sets items large databases 
proceedings international conference management data sigmod pages may 
agrawal srikant 
fast algorithms mining association rules large databases 
vldb sept 
alon spencer 
probabilistic method 
john wiley new york 
bollob 
combinatorics 
cambridge university press cambridge 
ellis stroustrup 
annotated manual 
addison wesley 
hagerup rub 
guided tour chernoff bounds 
information processing letters 
loveland 
finding critical sets 
journal algorithms 
mannila toivonen verkamo 
association rules sequential data 
manuscript july 
mehlhorn 
data structures algorithms volumes 
springer verlag berlin 

leda user manual version 
technical report max planck institut fur informatik im stadtwald saarbrucken 
piatetsky shapiro frawley editors 
knowledge discovery databases 
aaai press mit press menlo park ca 
probabilistic analysis lower bound appendix results describing theoretical properties problem finding association rules 
show model random relations covering sets small 
consider random relation ft attributes fi mg assume entry relation probability probability gamma assume entries independent 
probability jxj 
number rows distributed chernoff bounds obtain oen nq gamma gamma gammaq furthermore bounded oe 
oe means oe means 
expected number covering sets size bounded provided oen ln ln 
random relation typically covering sets 
course relations occurring practice random 
describe lower bound observations 
note relation row consisting satisfies association rules 
output algorithm produces association rules holding relation exponential size number attributes relation 
give information theoretic lower bound finding association rule restricted model computation 
consider model computation way getting information relation asking questions form set covering 
model realistic case relation large stored database system model quite close underlying design algorithm 
assume relation attributes 
worst case needs log log questions form set covering locate maximal covering set size covering set 
proof claim simple 
consider relations exactly maximal covering set size different possible answers problem finding maximal covering set 
question form set covering provides bit information 
loveland considered problem finding critical sets 
function downwards monotone set critical supersets maximal covering sets critical sets function covering 
lower bound matches exactly upper bound provided loveland algorithms 
lower bound easily extended case task find maximal covering sets 
interesting open problem loveland algorithm extended meet generalized lower bound 
pruning methods implementations method uses techniques prune candidate space database pass 
remaining tuples optimization occurrences frontier set counted 
candidate pruned optimization method occurrences frontier set left needed candidate covering 
remember total number occurrences frontier set evaluated earlier passes 
pruning function optimization items assigned weights rarity tuples assigned weights items synthesized functions 
method prunes candidate weight rare covering 
know weight threshold set frontier candidate set expected covering frontier database pass oen highest total weights database rows containing set maintained 
lowest values stored weights candidates compared weight threshold corresponding frontier set 
success method depends distributional properties items 
implementations algorithms kept reasonably straightforward 
attention paid realization ideas optimizations time space 
wrote algorithms data structures leda library 
implementations algorithms basic data structures algorithms representing manipulating sets attributes 
ensures timing comparisons fair 
attributes represented names strings 
attribute sets implemented sorted sequences strings collections attribute sets sorted sequences attribute sets 
sorted sequences implemented trees 
mentioned pruning methods require additional data structures 
remaining tuples optimization needs counter frontier set plus checking pruning condition support count candidate increased 
pruning function optimization weights items stored randomized search tree database pass 
weight thresholds stored randomized search tree database pass utilized iteration 
candidates pruned method soon created 
implemented memory saving techniques referred decrease precision pruning 

