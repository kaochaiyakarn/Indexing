correctness issues conceptual modeling maria orlowska crc distributed systems technology school information technology university queensland qld australia email maria cs uq edu au conceptual modeling workflows arguably important step understanding business processes 
defined workflow conceptual model leads development effective reliable workflow application 
presents graphical modeling technique workflows 
introduce graphical modeling objects task condition synchronizer flow 
modeling objects workflow modeling constructs identified ordering alternative exclusive join concurrency synchronization iteration start nesting contingency 
possible easily get error situations building large workflow specifications 
set constraints ensuring correctness workflow specifications 
concepts introduced applied foundation development case tool modeling syntactical verification workflow graphs 
today business environments computers extensively automating business processes 
organizations partitioned functional areas information systems developed divided areas 
essential understand operations business processes information systems developed implemented 
purpose business data process modeling methodologies applied 
activities functional business areas manual automated combination 
big organizations systems supporting functional areas run heterogeneous distributed hardware software reported funded part cooperative research centres program department prime minister cabinet commonwealth government australia 
platforms 
systems communicate coordinate achieve functional objectives 
coordination automated manual activities historically performed manually 
years possibility automating coordination different processing activities explored called workflows 
workflows represent organizational flow information processing entity manual automated 
processing entities information accomplish assigned tasks 
tasks take information preceding tasks perform information received services assigned processing entities proceed tasks workflow 
workflow management systems partially fully take responsibility coordinated execution tasks human coordinators 
execution coordination tasks processing entities accomplished enforcing procedural rules 
literature clear cut classification workflows 
trade press classifies workflows categories ad hoc administrative production basis predictability control functionality requirements tasks workflows 
classification basis processing entities system oriented human oriented georgakopoulos 
ad hoc workflows defined pattern moving information processing entity 
ad hoc workflow management systems typically require extensive human coordination operations 
execution path may different different workflow instances defined time workflow performed 
administrative workflows similar nature ad hoc workflows workflow execution repetitive predictable follows defined execution path 
ad hoc administrative workflows usually mission critical interact organizational information processing systems 
primary workflow management systems coordinate flow office information people documents reports emails production workflows involve coordination organizational information processing systems usually database management systems 
workflows defined procedures repetitive coordination business activities may span heterogeneous information systems organization 
production workflow management systems complex ad hoc administrative workflow management systems 
extensive features define internal task structures control execution tasks involving different types processing entities support reliable failure recovery 
transactional workflows fall definition production workflows 
concept transactional workflows active area workflow research past years rusinkiewicz sheth hornick sheth kuo 
transactional workflows extend basic workflow model introducing tested transactional features transaction management systems 
workflow management coalition founded mission promote workflows establishment standards workflow technology 
coalition proposed model development workflow management systems workflow management coalition 
model assembles generic components workflow systems groups 
groups contains process definition tools may analyze model describe business processes 
defines set workflow modeling objects constructs conform specifications process definition tools group workflow model 
workflow management system manage workflows apply process definition tools techniques model workflow processes 
modeling information procedural rules stored workflow repository 
workflow management systems extensive workflow repository operation 
basis stored process definitions repository workflow management systems create execute workflow instances coordinate interactions tasks workflow instance 
conceptual modeling workflows objective conceptual workflow model produce high level specifications workflows independent workflow management software 
workflow modeling techniques proposed reviewed literature targeting specific workflow aspects rusinkiewicz sheth casati georgakopoulos kuo orlowska kamath ramamritham 
working generic workflow modeling methodology process definition applicable kinds workflow applications orlowska 
methodology completely defined cover important aspects workflow applications 
primary objective workflow management system coordinate activities tasks organization 
correspondingly workflow modeling methodology cover techniques tools capture analyze specify different aspects tasks coordination graphical modeling objects constructs task characteristics properties task structures data exchange properties tasks inter task dependencies task execution scheduling constraints task failure recovery management exception management criteria assigning tasks processing entities correctness reliability verification evolution management repository specifications 
workflow specifications may vary different application areas 
example may want capture task failure recovery management properties ad hoc workflows 
motivation specify framework development case tool workflow modeling 
introduce conceptual workflow modeling objects constructs proposed methodology graphical representation 
set constraints verify syntactical correctness graphical workflow specifications 
specifications important aspects workflow modeling essential develop case tool modeling syntactical verification workflow graphs 
modeling objects information modeling techniques include graphical representation enhances understanding model 
workflow specification represented graphical objects 
workflow specifications model proposed includes types objects task condition synchronizer flow 
flows link types objects build workflow specifications 
shows graphical representation objects model 

workflow modeling objects task task represents done achieve objectives 
primary object workflow specifications represent automated manual activities 
tasks performed assigned processing entities 
workflow specifications place emphasis internal workings tasks 
aim capture coordination requirements performing set tasks business process 
capture information execution tasks needed coordination 
information represented set externally visible states task execution 
modeling objects task internal workflow management system specify rules constraints coordination workflow execution 
rectangle graphically represent task 
tasks properties representing different aspects temporal transactional user oriented properties identified 
modeling internal task structures specialized area workflows vital importance design operations workflow enactment services 
concentrate workflow modeling higher level emphasize coordination tasks consider internal working tasks 
condition condition applied represent alternative paths workflow specification depending conditional value dependent external parameters 
circle graphically represent condition object 
synchronizer certain points workflows essential wait completion execution path proceed 
synchronizer represented triangle purpose simply waits incoming flows activated 
flow flow graphically represented directed arrow defines connection objects flows workflow 
shows flow information control data parameters object 
connecting workflow objects help flows build directed graphs workflow specifications flows represent edges tasks conditions synchronizers represent vertices 
conceptually tasks conditions synchronizers incorporate information containers input output 
object completes execution puts output output container proceeding objects 
flow object takes information output container completed object connected start point puts input container proceeding object connected point 
task characteristics tasks characteristics primary objects workflow specifications 
characteristics task representation classification 
proposed model workflow encapsulated task characteristics apply workflow definitions 
primarily types characteristics generic workflow specific 
task workflows workflow 
generic characteristics apply occurrences task 
workflow specific characteristics may different different occurrences task 
example automation generic characteristic 
manual task manual occurrences 
location characteristic workflow specific 
task initial task workflow intermediate task 
task characteristics graphical representation proposed model defined repository shown workflow graph 
brief characteristics 
identify task properties shall include 

graphical representation task characteristics generic characteristics automation automation characteristic classifies tasks categories manual automated hybrid 
manual task performed humans involve computing resources 
automated task performed completely independently computer 
hybrid task involves computers humans complete operation 
atomicity proposed model allow nesting construct encapsulate workflow task encapsulated task workflows 
characteristic called atomicity distinguishes tasks decomposed workflows tasks decomposed 
atomic task single task workflow management sys tem point view 
nested task encapsulates workflow tasks encapsulated workflow executed successful completion nested task 
possible atomic task complex nested task 
depends workflow specifications 
long decompose workflow call atomic task 
scope classification types tasks external internal 
tasks workflow specification belong category 
external task automated manual activity performed accomplish business objective 
internal task workflow management system activity performed coordinate external internal tasks 
example internal task may represent computer program takes output computer program represented preceding external task generates condition value required proceeding condition object selecting alternative paths 
workflow specific characteristics placement task placed different types positions workflow 
task workflow called initial task 
terminating task called final task 
tasks workflow intermediate tasks 
task called forcible underlying system guarantee task successfully executed 
forcible task fails system failure workflow management system keep trying repeatedly execute eventually succeed 
task may may succeed execution 
model tasks require undo case workflow rollback associated compensation task defined 
compensation task executed rollback required executed tasks undone runtime 
classification task insignificant 
task undone required associated compensation task 
task undone case workflow failure 
insignificant task require undo impact successful rollback workflow 
tasks may significant workflow execution may may associated compensation tasks insignificant compensation nature 
task compensation important aspect workflow modeling covered task failure recovery management aspect methodology 
criticality critical task initiated finish execution successful completion workflow 
non critical task affect completion workflow 
generally tasks workflow critical 
non critical tasks graphically represented dotted rectangle 
non critical tasks part execution path initial task final task 
represented adding extra outgoing flow preceding task non critical task having outgoing flow noncritical task 
temporal temporal task time constraints attached 
example may define deadline completion particular task 
may require particular task executes specified time day specific delay initiated 
non temporal task time constraints starts executing immediately initiating finishes executing soon possible deadline completion 
specification temporal constraints important aspect workflow modeling 
nev complexity workflow specifications 
characteristics require investigation covered task execution scheduling constraints aspect methodology 
modeling workflow constructs workflow modeling objects create workflow specifications building joining different constructs 
section define explain constructs sub graphs example workflow specifications 
ordering ordering basic construct workflow modeling specifies order tasks workflow executed connecting modeling objects flows 
example shows simple ordering construct 

modeling objects task start execution finished executing 
similarly start finished executing 
ordering construct enforces sequential execution tasks construct 
alternative alternative construct model mutually exclusive alternative paths workflow 
constructed condition object outgoing flows 
condition primitive object model depends external parameters 
takes set control data parameters condition value preceding task run time 
basis condition value selects alternative workflow execution paths instance business process activating outgoing flows 
essential model condition exclusive complete 
exclusive characteristic ensures alternative paths selected 
complete characteristic guarantees instances workflow alternatives shall selected 
need complete characteristic avoid deadlocks condition object 
complete characteristic achieved ensuring preceding task result possible condition values identifying alternatives default 
example shows alternative construct 

alternative merging constructs completing execution pass condition value set data control parameters 
condition value exclusively select execution 
exclusive join exclusive join construct opposite alternative construct 
applied join mutually exclusive alternative paths path attaching incoming flows task condition object 
task represents exclusive join task 
concurrency concurrency construct represent concurrent execution paths workflow 
modeled connecting outgoing flows task synchronizer 

concurrency synchronization construct example shows concurrent execution paths workflow 
completing start executing simultaneously independent 
synchronization synchronization opposite concurrency just exclusive join alternative 
uses synchronizer object incoming flows outgoing flows 
outgoing flows activated incoming flows activated 
construct lets model situa tions want concurrent execution paths complete proceeding 
synchronizer wait paths complete execution proceeding 

possible deadlock situation synchronization synchronization useful construct easily result deadlocks modeled carefully 
shows case workflow get deadlock 
condition value selects flow selects flow wait indefinitely flow activate proceed 
semantically related way take path independently workflow get deadlock situation 
example illustrates loose potential overview problem deadlocks workflow specifications 
iteration need iteration construct model repetition group tasks workflow 
iteration construct results cyclic representation workflow graphs adds complexity 
iteration modeled condition object 
long condition selects iteration path sub graph workflow repeated 
iteration construct flow exists introduces iteration 
call flow iteration flow 
iteration flow connects object iteration object iteration 
furthermore flow iteration construct exist called exit flow connects path outside iteration condition object 

iteration construct example shows iteration construct concurrency synchronization construct iteration 
important note execution iteration iteration objects new instance different parameters 
tasks control execution iteration 
flow iteration flow flow exit flow iteration 
tasks change value passed 
start initial final tasks represent start constructs workflow specifications 
workflows initial tasks final tasks 
types tasks represent alternative initiation termination workflow execution 
workflow initial final task initial final task take part specific workflow execution instance 

workflow initial task final tasks generally initial task outgoing flows incoming flows 
possible model initial task incoming outgoing flows part iteration 
final task incoming flows outgoing flows 
final task completes execution workflow execution considered successful 
allow synchronizer act final task model 
useful want workflow finish execution completing concurrent execution paths task perform synchronization 
default tasks incoming flow treated initial tasks 
reverse true final tasks 
task outgoing flow final task non critical task 
workflow instance reach final tasks complete execution 
shows workflow specification initial task final tasks 
model workflow may contain disconnected workflow subgraphs 
subgraphs allow model mutually exclusive alternative user selected execution paths business process 
require initial tasks final tasks connected workflow subgraphs 
task object workflow specifications performs 
condition synchronizer flow objects internal workflow management system coordinate control execution tasks 
workflow specification task valid 
modeling initial task provides entry point workflow similar alternative construct 
difference condition object alternative initial tasks 
initial task defined selection initial task human oriented depend specific condition 
similarly final task allows model alternative paths complete workflow 
workflow starts execution exactly initial tasks finishes execution completing exactly final tasks 
modeling final task possible alternative constructs model 
alternative paths joined exclusive join construct result mutually exclusive final tasks 
nesting nesting construct simplifies workflow specifications abstraction 
construct encapsulate workflow specification task nested task workflow specifications 
execution nested task underlying workflow executed 
important perform nesting logical way modular approach add complexity workflow specifications simplification 

encapsulation workflow task example uses nesting construct represent workflow specification section 
workflow specification shown right side encapsulated task left side workflow specification 
contingency contingency construct define contingency plan case semantic task failure 
classify task failures categories system failures semantic failures 
system failure occurs task successfully complete execution problem unavailability processing entity 
example computer breaks processing task workflow left incomplete state 
means task able execute computer available 
system available workflow management system rollback workflow consistent state immediately preceding failed task start execution 
semantic failure occurs task complete operation underlying task constraints specific workflow instance 
case functionally equivalent contingency plan specified workflow 
plan executed parent task results semantic failure 
represent contingency plan condition object 
simple example shows contingency representation book issuing workflow library 
task access patron record database task record book issuing details 
cases proceed 
cases possible valid patron record database 
case result semantic failure proceed contingency plan cont entering patron details library database 

contingency representation workflows internal null tasks workflow management coalition identifies primary control workflow control structures split join split join 
represented model alternative exclusive join concurrency synchronization constructs respectively 
graphical objects model alternative synchronization constructs condition synchronizer 
exclusive join concurrency represented simply directly connecting flows objects 
incoming flows tasks conditions represent exclusive join 
outgoing flows tasks synchronizers represent concurrency 
approach keeps number modeling objects minimum 
certain cases requires null internal tasks purpose coordination flow compliance syntactical correctness criteria workflow constructs 
shows cases internal null tasks necessary 
internal null tasks highlighted examples 

internal null tasks identifying constructs table summarizes identification constructs basis object types number incoming outgoing flows connected 
primarily types objects model tasks conditions synchronizers interconnected flows build workflow graphs 
object may incoming outgoing flows attached 
number flows identify type construct object involved 
example table shows incoming flows task build exclusive join construct 
table 
identification constructs incoming flows outgoing flows objects task condition synchronizer simple ordering alternative exclusive join concurrency synchronization initial task final task non critical task illegal syntactical correctness workflows constructs defined previous section build workflow specifications 
case tool process definition important component workflow management system applied workflow modeling 
possible easily get error situations building complex workflow specifications 
identification errors obvious trivial workflows consist objects 
verification workflow conceptual specifications containing large number objects known complex ter hofstede 
extensive condition synchronizer objects workflows increase complexity verification problems 
inherent difficulty manually verifying correctness workflows strong case development automated verification engine 
engine essential component process definition case tool workflows 
early detection errors workflow specifications modeling stage vital importance facilitates development reliable correct workflow applications 
identification set constraints avoiding errors workflow specifications step developing verification engine 
section identify explain correctness constraints 
classify workflow specification errors categories syntactic semantic 
invalid workflow modeling constructs results syntactical errors 
verify syntactical correctness model need information regarding underlying operations tasks processing entities 
example condition node outgoing flow syntax error 
means condition node alternatives select 
semantic errors occur due incorrect modeling business processes getting error situations certain combinations task execution 
verify semantic correctness need information internal structure tasks 
example condition node selects outgoing flows conditional values provided preceding task 
assume condition node outgoing flows selected values respectively 
construct semantically correct long guarantee preceding task result mentioned values 
condition value result deadlock workflow instance semantic error modeling 
identified types possible syntactical errors workflow model incorrect usage synchronizer object incoming flow deadlocks synchronization mutually exclusive alternative paths livelocks iteration exit path unintentional multiple execution merging concurrent paths active termination concurrent paths leading final tasks 
classify workflows correctness constraints categories simple complex basis algorithmic complexity 
simple 
flows different objects connected sides 
flow represent flow information form object connected starting side object side empty side invalid 
similarly allow object sides object result iteration condition 

direct flows objects 
single flow represent flow information objects need having independent flows objects 

examples constructs violating rule 
conditions incoming outgoing flows 
condition select alternative execution paths 
condition outgoing path represents trivial construct condition unnecessary construct invalid 

synchronizers incoming flows 
synchronizer waits incoming flows activate proceeding 
synchronizer incoming flow represents trivial construct synchronization unnecessary construct allowed 

non critical task outgoing flow condition object preceding node preceding node outgoing flow object non critical task 
non critical tasks limited usage workflows require specific verification treatment 
require non critical tasks outgoing flows occur direct workflow execution path initial task final task 
second non critical task condition preceding node workflow reach final task selects path non critical task 
third ensure preceding node non critical task outgoing flow leads final task 

non critical task usage 
connected workflow subgraph contain initial final task 
tasks objects workflow specifications perform workflow task invalid 
necessary identify tasks initial task way represent valid starting point workflow 
default tasks incoming flows represent initial tasks 
cases shown initial task part iteration path necessary explicitly identify 
hand task outgoing flow final task non critical task 
critical task synchronizer outgoing flows represents final task 

initial task iteration construct complex 
flows preceding synchronizer activate possible instances workflow 
rule eliminates possibility synchronizer deadlock 
deadlock occurs execution incoming flow synchronizer activate possible execution instances workflow specification 
workflow alternative construct produce exactly workflow instance graph equivalent workflow definition graph 
alternative constructs workflow graph possible workflow instance graph subset workflow definition graph 
deadlock occurs model synchronization mutually exclusive alternative paths 
example takes path synchronizer wait indefinitely finish 
takes path wait indefinitely finish 

example synchronizer deadlock 
flows leading task condition activates possible instances workflow 
rule eliminates possibility task activated different execution paths 
generally task incoming flow 
preceded concurrent execution paths synchronizer just task wait concurrent execution paths finish 
cases task preceded alternative execution paths 
cases synchronizer incoming flows connected task exclusive join construct 
rule ensures incoming flows task condition mutually exclusive 
example concurrently activate 
activate completion independently resulting unintentional multiple execution path 

example unintentional multiple execution 
workflow objects activated possible instances workflow part iteration 
rule eliminates modeling loop condition workflow specifications 
type loop allowed workflow specifications iteration 
diagram shows construct violates rule 

example loop condition 
workflow reaches exactly final tasks possible instances 
rule avoids incomplete termination workflow 
workflow incompletely terminated finished executing final tasks critical tasks workflow executing 
happen concurrent execution paths workflow synchronized terminating workflow 
workflow violates rule 

invalid multiple final tasks 
concurrent paths initiating objects iteration path synchronized object iteration path 
iteration construct workflow model represented simple acyclic directed graph 
iteration construct introduces cycles workflow graph syntactical verification complex 
rule ensures objects iteration path activate object outside iteration path iteration progress 
activation result unintentional multiple execution workflow path part iteration 
example flow takes execution flow path outside iteration construct 

invalid iteration construct 
condition object controlling iteration alternative paths leading final task 
rule prohibits modeling livelocks iteration 
ensures paths iteration leads final task 
example shows workflow outgoing flows part iteration resulting livelock 

livelock iteration construct implementation correctness algorithms workflow conceptual model represented set directed graphs having tasks conditions synchronizers vertices flows edges 
rules verifying syntactical correctness workflow graphs implemented graph algorithms 
algorithms implement correctness constraints depend implementation workflow repository 
example repository defined relational database specifications verified implementing algorithms sql queries running workflow repository 
implementation correctness rules applied develop syntactical verification engine case tool modeling workflow graphs 
algorithms complex constraints exponential nature 
possible reduce workflow graph removing syntactically correct subgraphs running algorithms complex rules 
developed prototype graphical modeling workflow verification engine incorporates algorithms correctness constraints described previous section 
graphical modeling prototype stores workflow graph information repository nodes edges 
verification engine uses graph information workflows identify error situations workflow model 
graphical conceptual modeling technique workflows 
graphical modeling objects include tasks conditions synchronizers flows 
task primary object workflow specifications generic workflow specific characteristics 
modeling objects workflow modeling constructs identified ordering alternative exclusive join concurrency synchronization iteration start nesting contingency 
constructs specify rules constraints workflow execution 
workflow specifications built combination modeling constructs 
specifications may contain syntactic semantic modeling errors 
set constraints identifying avoiding syntactical errors workflow specifications 
primary motivation framework development workflow modeling case tool 
aspects covered case tool applied facilitate modeling verification workflow graphs 
workflows represented directed graphs having tasks conditions synchronizers vertices flows edges 
ways verify syntactical correctness workflows apply graph algorithms 
developed prototype graphical modeling workflows implemented verification engine incorporates algorithms correctness constraints 
alonso agrawal el abbadi kamath mohan advanced transaction models workflow contexts 
proceedings th international international conference data engineering new orleans 
attie pc singh mp sheth rusinkiewicz specifying enforcing intertask dependencies 
proceedings th vldb dublin ireland 
breitbart schek hj sheth weikum merging application centric data centric approaches support multi system workflows 
sigmod record 
casati ceri pernici pozzi conceptual modeling workflows 
papazoglou editor proceedings th international object oriented entity relationship modeling conference volume lecture notes computer science pages 
springerverlag 
casati ceri pernici pozzi workflow evolution 
proceedings th international conference conceptual er cottbus germany 
springer verlag lecture notes computer 
ellis ca nutt gj modeling enactment workflow systems 
theory petri nets 
ajmone ed volume lecture notes computer science new york 
springer verlag 
georgakopoulos hornick sheth overview workflow management process modeling workflow automation infrastructure 
journal distributed parallel databases 
ter hofstede orlowska verification problems conceptual workflow specifications 
technical report department computer science university queensland australia 
ter hofstede orlowska verification problems conceptual workflow specifications 
proceedings th international conference conceptual er cottbus germany 
springer verlag lecture notes computer pp 

kuo lawley liu orlowska general model transactional workflows 
proceedings international workshop advanced transaction models architecture 
goa india 
pp 

kamath ramamritham bridging gap transaction management workflow management 
proceedings nsf workshop workflow process automation information systems state art directions athens georgia 
kamath ramamritham modeling correctness systems issues supporting advanced database applications workflow management systems 
computer science technical report university massachusetts massachusetts orlowska graphical transactional workflow specification language 
proceedings australian systems conference 
rusinkiewicz sheth specification execution transactional workflows 
kim editor modern database systems object model interoperability 
addison wesley 
orlowska modeling verification workflow graphs 
technical report department computer science university queensland australia 
workflow management coalition workflow management coalition specifications terminology glossary 
issue document number wfmc tc 
