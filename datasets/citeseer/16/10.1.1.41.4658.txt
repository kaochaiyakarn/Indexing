snowball extracting relations large plain text collections eugene agichtein luis gravano department computer science columbia university amsterdam avenue new york ny usa eugene gravano cs columbia edu text documents contain valuable structured data hidden regular english sentences 
data best exploited available relational table answering precise queries running data mining tasks 
explore technique extracting tables document collections requires handful training examples users 
examples generate extraction patterns turn result new tuples extracted document collection 
build idea snowball system 
snowball introduces novel strategies generating patterns extracting tuples plain text documents 
iteration extraction process snowball evaluates quality patterns tuples human intervention keeps reliable ones iteration 
develop scalable evaluation methodology metrics task thorough experimental evaluation snowball comparable techniques collection newspaper documents 
keywords text databases information extraction bootstrapping 
text documents hide valuable structured data 
example collection newspaper articles contain information location headquarters number organizations 
need find location headquarters say microsoft try traditional information retrieval techniques finding documents contain answer query 
alternatively answer query precisely available table listing organization location pairs mentioned document collection 
tuple table indicate headquarters organization location information document collection 
tuple redmond table provide answer query 
web contains millions pages text hides data best exploited structured form 
build structured tables information hidden unstructured text able run complex queries analysis tables report precise results 
develop snowball system extracting structured data plain text documents minimal human participation 
techniques build ideas general approach introduced brin describe :10.1.1.101.3197
dipre dual iterative pattern expansion extract structured relation table collection html documents brin introduced dipre method :10.1.1.101.3197
dipre works best environment world wide web table tuples extracted tend appear uniform contexts repeatedly collection documents available html pages 
dipre exploits redundancy inherent structure collection extract target relation minimal training user 
fact dipre requires user just provide handful valid tuples target relation training 
contrast way traditional information extraction systems operate 
describe dipre method forms basis snowball system section 
rest focus presentation organization location scenario defined 
context dipre goal extract table tuples appear document collection 
initially provide dipre handful instances valid organization location pairs 
example may indicate valid pair meaning microsoft organization headquarters located redmond 
similarly provide dipre examples table shows 
addition user provides general regular expression entities match 
example potential organization value match regular expression za za 
regular expression says organization capital letter microsoft number com followed characters letter number 
training dipre requires user 
organization location headquarters microsoft redmond exxon irving ibm boeing seattle intel santa clara table user provided example tuples dipre 
computer servers microsoft headquarters redmond 
exxon irving said boost stake 
trading shares irving exxon fell 
ibm introduced new line 
operate boeing headquarters seattle 
intel santa clara cut prices pentium 
occurrences initial example tuples text documents 
initial training phase dipre looks instances example organizations locations text documents 
occurrences example tuples documents listed 
dipre examines text surrounds initial tuples 
example dipre inspects context surrounding microsoft redmond computer servers microsoft headquarters redmond construct pattern headquarters possible patterns listed 
dipre algorithm generating patterns described detail :10.1.1.101.3197:10.1.1.101.3197
briefly algorithm represents occurrence seed tuple tuple order url left middle right url url source document order appeared left middle right parts context surrounds occurrence document 
pattern represented tuple right created grouping occurrences equal middle string order setting left right pattern longest common substrings url left right strings respectively 
patterns filtered requiring pattern supported seed tuple left middle right non empty 
generating number patterns initial seed tuples dipre scans available documents search segments text match patterns 
result process dipre generates new tuples uses new seed 
dipre starts process searching new tuples documents identify new promising patterns 
seen machine learning systems information extraction dipre requires training headquarters initial dipre patterns 
regular expressions match organization location respectively 
providing handful initial seed tuples specifying general pattern elements extracted tuples match 
acquiring additional training examples automatically dipre aims capturing tuples mentioned collection 
key assumption method table extracted appears redundantly document collection question 
result assumption patterns dipre generates need overly general capture instance organization location tuple 
critical goal discard patterns selective may generate invalid tuples 
combat problem suggests assigning weights patterns tuples notes potential relationship problem latent semantic indexing :10.1.1.101.3197
effect system dipre method perform reasonably certain instances tuple missed long system captures instance 
related brin dipre method snowball system introduce address issues long subject information extraction research 
task different attempt extract relevant information document goal traditional information extraction systems 
major challenges information extraction necessary amount manual labor involved training system new task 
challenge addressed different ways 
approach build powerful intuitive graphical user interface training system domain experts quickly adopt system new task 
systems require substantial expert manual labor port system new domain 
contrast snowball dipre require handful example tuples new scenario 
approach train system large manually tagged corpus system apply machine learning techniques generate extraction patterns 
difficulty approach need large tagged corpus involves significant amount manual labor create 
combat problem methods proposed untagged corpus training 
describes generating extraction patterns automatically training corpus consists sets documents manually separated relevant vs irrelevant set topic 
approach requires manual labor tag documents effort involved substantial 
describes machine learning techniques creating knowledge base web consisting classes entities relations exploiting content documents link structure web 
method requires training large set web pages relevant document segments manually labeled large training set page page relations 
number systems unlabeled examples training 
direction research closest 
specifically approach falls broad category bootstrapping techniques 
bootstrapping attractive alternative automatic text processing 
demonstrates bootstrapping technique disambiguating senses words starting small set seed collocations word seed collocation life disambiguate biological sense noun plant iteratively classifies occurrences word appropriate senses 
uses bootstrapping classify named entities text 
exploit orthogonal features classifying named entities spelling entity having suffix context entity occurs 
algorithm classifies named entities high accuracy 
presents bootstrapping technique extract patterns recognize classify named entities text 
methodology theoretical framework combining unlabeled examples labeled examples boost performance learning algorithm classifying web pages 
underlying principle systems output generate training input iteration approaches tasks different require specialized methodologies 
contributions discussed describes method extracting relations web bootstrapping :10.1.1.101.3197
snowball system builds dipre 
main contributions include techniques generating patterns extracting tuples propose named entity tags anchoring search new tuples documents 
develop new strategy defining representing patterns time flexible capture tuples hidden text collection selective generate invalid tuples sections 
strategies evaluating patterns tuples amount training snowball requires minimal crucial patterns tuples generated extraction process evaluated 
way snowball able eliminate unreliable tuples patterns consideration 
develop strategies estimating reliability extracted patterns tuples section 
evaluation methodology metrics evaluating systems snowball dipre challenging systems designed large document collections manually inspecting documents build perfect table extracted just feasible 
introduce scalable evaluation methodology associated metrics section sections large scale experiments collections training test documents 
collections total real documents 
snowball system section snowball system develops key components basic dipre method described previous section 
shows snowball architecture follows general dipre outline 
see snowball introduces key ideas result substantially better performance 
specifically snowball presents novel technique generate patterns extract tuples text documents describe sections 
snowball introduces strategy evaluating quality patterns tuples generated iteration extraction process section 
tuples patterns regarded sufficiently reliable kept snowball iterations system section 
new strategies generation filtering patterns tuples improve quality extracted tables significantly experimental evaluation section show 
generate extraction patterns seed tuples generate new seed tuples tag entities augment table find occurrences seed tuples main components snowball 
generating patterns observed section crucial step table extraction process generation patterns find new tuples documents 
ideally patterns selective generate incorrect tuples high coverage identify new tuples 
section introduce novel way generating patterns set seed tuples document collection 
snowball initially handful example tuples 
organization location tuple snowball finds segments text document collection occur close just dipre analyzes text connects generate patterns 
key improvement snowball basic dipre method snowball patterns include named entity tags 
example pattern pattern match pair strings connected 
match string identified tagger entity type location 
similarly match string identified tagger entity type organization 
understand impact named entity tags snowball patterns consider pattern pattern matches text surrounding correct organization location tuples ibm introduced 
unfortunately pattern match strings connected computer learning alcohol 
result inclusion invalid tuples computer alcohol organization location table 
generate patterns tuples may turn result wrong patterns 
contrast version pattern involves named entity tags better chance avoiding kind spurious matches 
shows additional patterns snowball generate examples involve tags 
headquarters patterns exploit named entity tags 
key step generating matching patterns finding entities occur text 
snowball uses state ofthe art named entity tagger mitre alembic workbench 
addition organization location entities alembic identify person entities trained recognize kinds entities 
see section discussion 
entities text documents tagged snowball ignore unwanted entities persons focus occurrences location organization entities analyze context surrounds pair entities check connected right words match patterns 
define patterns precisely snowball follow dipre approach pattern consist left middle right string 
occurrence organization location entity regarded match pattern text surrounding entities matches strings pattern exactly 
see approach results somewhat selective patterns patterns tend generate invalid tuples suffers limited coverage patterns capture instances valid tuples 
snowball represents context organization location entities patterns flexible way 
result minor variations extra comma determiner matching contexts close patterns 
specifically snowball represents left middle right contexts associated pattern analogously vector space model information retrieval represents documents queries 
left middle right contexts vectors associating weights numbers terms arbitrary strings non space characters 
weights indicate importance term corresponding context 
describe compute weight vectors section 
definition snowball pattern tuple middle tag right tag tag tags left middle right vectors associating weights terms 
example snowball pattern tuple location organization 
pattern match strings irving exxon word left context precedes location irving turn followed strings middle context organization 
appears right organization string unimportant case empty right context pattern 
slight variations string match pattern smaller extent 
introduce notion degree match section 
example string said 
redmond microsoft reportedly tend match example pattern location redmond preceded terms left context 
extra flexibility results better coverage patterns 
match text portions tuple representation patterns snowball associates tuple document portion contains named entities correct tag location organization scenario 
identifying entities string snowball creates weight vectors ms analyzing left right middle contexts named entities respectively 
non zero weight term term window left leftmost named entity predefined window size similarly non zero weight term term window right rightmost named entity ms non zero weight term named entities weight term vector function frequency term corresponding context 
vectors scaled norm 
multiplied scaling factor indicate vector relative importance 
experiments english language documents middle context indicative relationship elements tuple 
typically assign terms middle vector higher weights left right vectors 
extracting tuple representation string snowball matches tuple pattern inner product corresponding left middle right vectors 
definition degree match match tp tuples mp tags ms tags defined match tp ts ibm introduced new line 
intel santa clara cut prices pentium 
portions document location organization entities occur near 
mp ms rp rs tags match order generate pattern snowball groups occurrences known tuples documents contexts surrounding tuples similar 
precisely snowball generates tuple string seed tuple occurs clusters tuples simple single pass clustering algorithm match function defined compute similarity vectors minimum similarity threshold sim left vectors tuples clusters represented centroid similarly collapse middle right vectors respectively 
centroids original tags tuples cluster form snowball pattern find new tuples document collection 
shows complete algorithm computing patterns clustering 
explain line section sub foreach seed seed str occurrences ts ms rs str cluster best ts sim best best add ts best ts best seed seed seed seed ts patterns clusters sup return patterns clustering algorithm tuple occurrences text documents 
generating tuples generating patterns section snowball scans collection discover new tuples 
basic algorithm outlined 
snowball identifies sentences include organization location determined named entity tagger 
text segment associated organization location snowball generates tuple 
candidate tuple generated pattern match sim sim clustering similarity threshold section 
candidate tuple number patterns helped generate associated degree match 
snowball uses information information selectivity patterns decide candidate tuples add table constructing 
filtering process clear section address crucial issue evaluate candidate tuples patterns 
sub patterns foreach text segment corpus ms rs text segment tc foreach patterns sim match ms rs sim sim tc sim sim sim tc patterns return algorithm extracting new tuples set patterns 
evaluating patterns tuples generating patterns challenging 
example may generate pattern location text occurrences intel santa clara announced 
pattern matched string includes organization followed comma followed location 
unfortunately sentence great time invest microsoft new york analyst jane smith said generate tuple york incorrect microsoft headquarters redmond 
summary pattern selective generate incorrect tuples 
snowball try identify patterns trust focus selective patterns 
redundancy assumption tuples occur different contexts collection snowball afford selective pattern able extract tuple example section different selective pattern 
estimating selectivity patterns trust patterns tend generate wrong tuples problems address section 
weigh snowball patterns selectivity trust tuples generate accordingly 
pattern selective low weight 
tuples generated pattern discarded supported selective patterns 
organization location headquarters com santa clara minneapolis air china beijing federal express memphis fruit apple merrill lynch new york netscape mountain view tokyo table tuples discovered snowball iteration 
case tuples analogous 
consider example candidate tuples table generated snowball iteration 
clear tuples valid 
example tuple invalid generated alembic incorrectly tagged apple location fruit organization 
tuples new seed tuples snowball iteration may generate extraneous patterns turn result wrong tuples iteration 
explored different pruning schemes select new seed tuples valid 
keep tuples high confidence 
confidence tuple function selectivity number patterns generated 
intuitively confidence tuple high generated highly selective patterns 
pattern tuple evaluation key part system responsible improvement dipre scheme 
initial filter eliminate patterns supported fewer sup seed tuples step algorithm 
experimentally evaluated alternative methods defining sup concluded simple static value sup works 
addition filter number seed tuples generated patterns compute selectivity pattern step algorithm 
step call function checks candidate tuple generated pattern question 
high confidence tuple generated earlier iteration system organization function compares locations locations tuple considered positive match pattern 
match negative 
intuitively candidate tuple pattern generates known organizations match locations organizations 
confidence pattern low 
note confidence computation assumes organization key relation extracting different tuples valid instance relation agree organization attribute 
estimating confidence snowball patterns relations single attribute key part section 
definition confidence pattern conf positive positive negative positive number positive matches negative number negative matches 
example consider pattern referred previous section 
assume pattern matches lines text exxon irving said intel santa clara cut prices invest microsoft new york analyst jane smith said lines generate candidate tuples irving knew previous iterations system 
third line generates tuple york 
location tuple conflicts location tuple redmond line considered negative example 
pattern confidence conf 
definition confidence pattern possibilities 
alternative evaluate experimentally section account pattern coverage addition selectivity 
adopt metric originally proposed riloff evaluate extraction patterns generated autoslog ts information extraction system formula relevance rate log frequency 
define conf pattern similarly 
definition confidence pattern conf positive positive negative log positive pattern confidences defined values 
normalize conf values dividing largest confidence value pattern 
having scored patterns able evaluate new candidate tuples 
recall tuple store set patterns produced measure similarity context tuple occurred matching pattern 
consider candidate tuple set patterns generate simplicity assume matched patterns perfectly degree match equal 
assume moment know probability rob pattern generates valid tuples 
probabilities independent probability valid rob calculated rob rob incorrectly rob confidence metric conf designed rough estimate prob probability pattern generating valid tuple 
account cases occurred contexts match patterns perfectly 
scale conf term degree match corresponding pattern context definition confidence candidate tuple conf conf match set patterns generated context associated occurrence matched example suppose just generated tuple mountain view patterns patterns confidences means individually patterns generate valid tuples generate invalid tuples 
confidence tuple generated patterns conf new note described calculation pattern confidence ignored confidence values previous iterations snowball 
control learning rate system set new confidence pattern conf conf new update conf old update parameter update control speed learning new examples 
update system effect trusts new examples iteration lead conservative patterns damping effect 
experiments set update 
similarly rediscover tuples extracted previous iterations 
case set new confidence tuple conf conf new update conf old update determining confidence candidate tuples definition snowball discards tuples low confidence 
tuples add noise pattern generation process turn introduce invalid tuples degrading performance system 
set tuples seed snowball iteration seed conf prespecified threshold 
illustration purposes table lists representative patterns snowball extracted document collection describe section 
conf middle right headquarters table actual patterns discovered snowball 
patterns left vectors empty tag organization tag location 
evaluation methodology metrics goal snowball extract valid tuples possible text collection 
discussed attempt capture instance tuples 
exploit fact tuples tend appear multiple times types collections consider 
long capture instance tuple consider system successful tuple 
system extracts tuples documents collection combines table 
evaluate task adapt recall precision metrics information retrieval quantify accurate comprehensive combined table tuples 
metric evaluating performance extraction system collection documents determining ideal set tuples appear collection section 
identifying ideal compare tuples produced system extracted adapted precision recall metrics section 
methodology creating ideal set small text collections inspect documents manually compile ideal table hand 
unfortunately evaluation approach scale infeasible kind large collections snowball designed operate 
address problem start considering large publicly available directory organizations provided hoover online web site directory cover organization large purposes covering publicly traded corporations 
structured directory generate table organization location pairs 
unfortunately table organizations occur text collection experiments 
determine target set tuples ideal hoover table need keep tuples organization mentioned location collection 
find instances identify variations organization name hoover table may appear collection check headquarters test organization mentioned nearby 
task generate list organization location pairs www hoovers com occur line text collection 
whirl research tool developed research laboratories integrating similar textual information match organization name occurs collection organization hoover table 
example microsoft microsoft microsoft organization microsoft location redmond mentioned line variations organization name tuple redmond counted occurring collection included ideal table 
ideal metric created ideal table evaluate quality snowball output extracted table 
initial directory organizations hoover contained possible organizations just measure fraction tuples extracted ideal precision fraction tuples ideal extracted recall 
unfortunately large collection contain tuples contained single manually compiled directory 
estimate training collection contains valid organization location tuples 
just calculated precision valid tuples extracted snowball contained ideal set unfairly lower reported value precision system 
address problem create new table join join tables ideal extracted unique key organization tuple ideal table find matching tuple extracted table 
describe deal variations organization names section values create new tuple include join table 
table ideal join table just created define recall precision formally 
define recall recall join ideal iverson notation equal test value matches extracted value 
sum numerator number correct tuples ideal set extracted divide size ideal table obtain recall 
similarly define precision recision join join alternative ideal metric estimate precision sample extracted table check value sample tuples hand 
similarly estimate recall system sampling documents collection checking tuples mentioned documents system discovers 
evaluation method time consuming potentially error prone redone new collection 
system specifically designed large collections possible human manually examine significant portion collection 
sense sampling technique inferior ideal metric proposed 
sampling extracted table detect invalid tuples organization mentioned hoover directory determine ideal example 
similarly detect invalid tuples result tagging errors 
report precision estimates sampling section 
matching location organization names problem calculating ideal metric introduced proliferation variants organization names 
combine variations self join extracted table 
whirl match organization names create table extracted 
pick arbitrary variation organization name standard pick location max set matching tuples highest confidence value 
insert tuple max extracted table 
similarly need decide location extracted organization correct 
example system conclude california location headquarters intel 
answer correct specific 
scoring system fact consider tuple california correct 
specifically consider tuple valid organization city state headquarters organization outside city country headquarters 
experimental setting describe training text collections experiments section 
enumerate different extraction methods compare experimentally section 
training test collections experiments large collections real newspapers north american news text corpus available ldc corpus includes articles los angeles times wall street journal new york times 
split corpus collections training test 
training collection consists documents 
test collection composed documents table 
snowball dipre rely tuples appearing multiple times document collection hand 
analyze redundant training test collections report table number tuples ideal set frequency level 
example organizations ideal set mentioned training collection mentioned line text location 
www ldc upenn edu collection document source documents year new york times training wall street journal los angeles times new york times wall street journal test los angeles times los angeles times table document collections experiments 
wanted evaluate system performs extracting tuples occur training collection ideal set create evaluation contain tuples 
organization location pairs occurrences training collection test collection table occurrence statistics test tuples experiment collections 
row table corresponding zero occurrences deserves explanation 
wanted evaluate performance system organizations mentioned corpus appropriate location occurred near organization name collection include organizations ideal set 
system attempts guess value location organization value system extracts automatically considered wrong evaluation 
evaluating alternative techniques compared snowball techniques baseline method implementation dipre method 
methods require minimal training input user comparable snowball respect 
contrast state art information extraction systems require substantial manual labor train system create training corpus 
method baseline purely frequency occurrence organization location 
specifically baseline reports location occurs line organization headquarters organization 
baseline uses input lines text collection tagged alembic named entity tagger creates index organizations locations occur line 
baseline simply selects frequent location organization 
despite simplicity method works surprisingly setting 
second method implementation dipre described section 
access original implementation reimplement 
testing implementation author title task best knowledge application dipre method reported literature modifications motivated nature collections :10.1.1.101.3197
original dipre implementation uses restrict pattern generation application 
documents came just sources dipre able feature originally intended generate patterns apply documents urls match pattern 
second important modification fact dipre designed extract tuples html marked data inherently structured plain text experiments 
html tags dipre find occurrences seed tuples plain text surrounded exactly non empty left middle right contexts 
solve problem named entity tagger pre tag input dipre 
way organizations locations consistently surrounded named entity tags 
dipre incorporate tags part surrounding context generate patterns take advantage named entity tags 
original dipre implementation low recall having access named entity tags results report dipre original dipre implementation results achieved dipre method named entity tags 
snowball described section basic snowball process requires finding occurrences seed tuples corpus 
efficiency indexed collections glimpse search engine supports boolean queries 
scheme issue boolean query seed tuple requiring elements tuple text segment 
example query microsoft redmond issued find contexts seed tuple appears collection 
experiments required tuple elements occur line text approach retrieve occurrences example tuples arbitrary text segments 
example occurrences retrieved snowball act differently number parameters 
attempted determine best combination parameters running snowball system training corpus 
parameters experimented include punctuation experimented discarding punctuation non alphanumeric characters contexts surrounding entities 
hypothesis punctuation may just add noise carry little content help extract tuples 
report results snowball snowball plain snowball uses punctuation snowball plain discards 
choice pattern scoring strategies tried variations basic framework weighing patterns described section metric described 
refer strategies metric 
additionally normalize patterns tuples dividing largest value 
normalized strategies referred norm normalized ones raw 
list strategies raw norm norm 
choice weighting strategy significant effect quality new seed tuples start iteration system 
choice pattern similarity threshold sim threshold controls flexible patterns pattern generation stage similar occurrences example tuples order grouped cluster tuple extraction stage sim controls minimum similarity context surrounding potential tuple pattern determining tuple generated 
choice tuple confidence threshold threshold determines minimum confidence tuple included seed set start iteration 
experimental results section experimentally compare performance snowball alternative techniques discussed section 
experiments training test collections section 
section training collection determine test settings snowball parameters section 
section compare performance snowball dipre baseline test collection 
training phase summarizes experimental results training collection 
discussed section consider tuples ideal different groups number occurrences collection 
dipre snowball assume scenario tuples occur redundantly collection 
reports average recall techniques function minimum number times tuple appear training collection order included ideal 
example focus tuples occur times training collection define ideal accordingly baseline achieves average recall snowball value highest 
see average recall dipre snowball improves require tuples occur times collection 
consistent design principles underlying dipre snowball tailored collections redundancy 
shows important punctuation extraction process recall snowball twice high 
reports average precision values various techniques 
ran experiments training collection determine optimal values sim sup optimal weight distribution left middle right left middle right con parameter value description sim minimum degree match section minimum tuple confidence section sup minimum pattern support section max number iterations snowball middle weight middle context section left weight left context section right weight right context section table parameter values evaluating snowball test collection 
text vectors pattern 
pattern scoring strategies norm performed best terms precision recall producing new seed tuples allow snowball sustain acceptable rate acquiring new patterns 
section report results tables extracted iteration various techniques 
see performance dipre tends deteriorate iteration snowball remains stable 
test phase discussed input snowball system evaluation test collection seed tuples table 
extraction patterns learned scratch running snowball system operational parameters listed table worked best training collection 
norm metric score patterns generating set seed tuples iteration 
results reported 
plot shows performance systems attempt extract test tuples mentioned times corpus 
see snowball performs increasingly number times test tuples required mentioned collection increased 
notice dipre better precision snowball occurrence level vs snowball snowball occurrence levels significantly higher recall dipre baseline 
consistent training results 
attempted determine remedy dipre low recall running iterations 
unfortunately iteration recall precision decreased 
demonstrates snowball stable sense converges reasonable values dipre quickly diverges 
reason dipre behavior dipre way selecting reliable tuples seed iteration snowball takes advantage tuple confidence metric 
report data iterations snowball plain converged iteration produce new seed tuples 
discussed section complete evaluation precision extraction systems manually examining sample output 
randomly selected tuples extracted tables manually checked tuples valid organization location pair 
separate errors categories errors recall precision baseline dipre snowball training collection table parameter settings 
recall precision baseline dipre snowball snowball plain test collection 
recall precision baseline dipre snowball snowball plain function number iterations ideal tuples occurrence test collection 
due location assigning valid organization location error errors due including non existing organization organization error errors due deducing incorrect relationship valid organization location relationship error 
different types errors significant highlight different culprits location organization errors prevented perfect named entity tagger relationship errors wholly extraction system fault table 
column table ideal precision calculated ignoring organization errors computing fraction valid organizations correct location 
values effect correspond values precision calculated ideal table included valid organizations random samples 
figures capture invalid tuples generated due improper tagging string organization 
manual inspection random sample tuples extracted table observed dipre sample contained correct tuples incorrect ones 
snowball sample contained correct tuples incorrect tuples baseline majority incorrect tuples vs 
see breakup errors table virtually snowball errors tagging related location organization errors 
prune snowball final output include tuples conf spurious tuples disappear 
effect random sample tuples pruned table tuples valid invalid 
furthermore invalid tuples due relationship errors third row table 
far results reported snowball table contains candidate tuples generated snowball iteration 
saw table precision snowball answer varies dramatically prune table tuple confidence threshold course step pruning result lower recall values 
explore tradeoff precision recall different values step pruning threshold 
user interested high precision tables want high values threshold user interested high recall tables want lower values threshold 
example setting filtering extracted table accordingly estimate absolute precision snowball output recall higher corresponding metrics dipre output 
summary snowball dipre exhibit significantly higher precision baseline 
effect baseline tends generate tuples results high recall expense low precision 
snowball recall high baseline tests higher precision values 
snowball recall generally higher dipre precision techniques comparable 
presents snowball system extracting relations large collections plain text documents requires minimal training new scenario 
introduced novel strategies generating extraction patterns snowball techniques evaluating quality patterns tuples generated step extraction process 
large scale experimental evaluation system shows new techniques produce high quality tables scalable evaluation methodology introduce 
experiments involved newspaper articles 
evaluated techniques plain text documents require adopt methodology html data 
html tags naturally incorporated snowball pattern representation problematic extract tags arbitrary html documents 
effect state ofthe art taggers rely textual clues text surrounding entity may absent html documents rely visual formatting convey information example 
handling arbitrary html documents important part 
related note assumed attributes relation extract organization location correspond named entities tagger identify accurately 
mentioned named entity taggers alembic extended learn recognize entities distinct context independent way numbers dates proper names 
attributes need extend snowball pattern generation matching anchored say noun phrase opposed named entity 
generalize snowball relations attributes 
crucial open problem generalize tuple pattern evaluation strategy section rely attribute key relation 
acknowledgments ralph grishman hatzivassiloglou helpful comments eskin fruitful discussions 

avrim blum tom mitchell 
combining labeled unlabeled data training 
proceedings conference computational learning theory 

sergey brin 
extracting patterns relations worldwide web 
proceedings international workshop web databases webdb march 

william cohen 
integration heterogeneous databases common domains queries textual similarity 
proceedings acm international conference management data sigmod 

michael collins yoram singer 
unsupervised models named entity classification 
proceedings joint sigdat conference empirical methods natural language processing large corpora 

craven dipasquo freitag mccallum mitchell type error correct incorrect location organization relationship ideal dipre snowball tuples snowball baseline table manually computed precision estimate derived random sample tuples extracted table 
recall estimated precision function threshold step pruning snowball tables ideal tuples occurrence test collection 
nigam slattery 
learning construct knowledge bases world wide web 
artificial intelligence 

david day john aberdeen lynette hirschman kozierok patricia robinson marc vilain 
mixed initiative development language processing systems 
proceedings fifth acl conference applied natural language processing april 

scott deerwester susan dumais george furnas thomas landauer richard harshman 
indexing latent semantic analysis 
journal american society information science 

fisher soderland mccarthy feng lehnert 
description umass systems muc 
proceedings th message understanding conference 
columbia md 

william frakes ricardo baeza yates editors 
information retrieval data structures algorithms 
prentice hall 

ralph grishman 
information extraction techniques challenges 
information extraction international summer school 
springer verlag 

udi manber sun wu 
glimpse tool search entire file systems 
proceedings winter usenix conference january 

ellen riloff 
automatically generating extraction patterns untagged text 
proceedings thirteenth national conference artificial intelligence pages 

ellen riloff rosie jones 
learning dictionaries information extraction multi level bootstrapping 
proceedings sixteenth national conference artificial intelligence 

gerard salton 
automatic text processing transformation analysis retrieval information computer 
addisonwesley 

gerard salton michael mcgill 
modern information retrieval 
mcgraw hill 

roman yangarber ralph grishman 
nyu description proteus pet system muc 
proceedings seventh message understanding conference muc 
morgan kaufman 

yarowsky 
unsupervised word sense disambiguation rivaling supervised methods 
proceedings rd annual meeting association computational linguistics pages 
cambridge ma 
