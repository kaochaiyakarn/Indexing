lisp symbolic computation international journal fl kluwer academic publishers manufactured netherlands threads yield continuations sanjeev kumar cs princeton edu department computer science princeton university princeton nj usa carl bruggeman cse uta edu department computer science engineering university texas arlington arlington tx usa kent dybvig dyb cs indiana edu computer science department indiana university bloomington usa received revised keywords concurrency continuations control delimiters control operators threads 
just traditional continuation represents rest computation point computation subcontinuation represents rest subcomputation point subcomputation 
subcontinuations expressive traditional continuations shown useful controlling tree structured concurrency previously implemented uniprocessors 
article describes concurrent implementation shot subcontinuations 
continuations shot subcontinuations class may invoked restriction obeyed nearly programs continuations 
techniques implement shot subcontinuations may applied directly shot continuation mechanisms may generalized support multi shot continuations 
novel feature implementation continuations implemented terms threads 
implementation model rely special language features compilation techniques model applicable language language implementation supports small set thread primitives 

continuations proven useful implementing variety control structures nonlocal exits exceptions backtracking material supported part national science foundation numbers cda cda 
kumar bruggeman dybvig nondeterministic computations coroutines multitasking source level 
subcontinuations expressive traditional continuations may implement similar control structures presence tree structured concurrency 
article describes thread implementation shot subcontinuations incorporated multithreaded implementation chez scheme sgi power challenge multiprocessor 
just traditional continuation represents rest computation point computation subcontinuation represents rest subcomputation point subcomputation 
base subcomputation specified explicitly subcontinuation subcomputation rooted base 
contrast traditional continuation rooted implicitly base entire computation 
subcontinuations may implement traditional continuations introducing explicit root top level evaluation function 
shot subcontinuations shot continuations class may invoked restriction obeyed nearly programs continuations 
hieb describe subcontinuations detail give operational semantics small language incorporates subcontinuations describe sequential implementation subcontinuations 
describe briefly subcontinuations implemented concurrent setting concurrent implementation realized 
implementation requires control state concurrent computation represented tree stack segments just control state sequential computation represented stack stack segments support traditional continuations 
implementation shot subcontinuations described article uses threads represent stack segment tree stack segments required hieb implementation model 
threads represent stack segments advantages incorporating support subcontinuations lowest levels language implementation 
particular simplifies implementation threads continuations provides clear operational semantics interaction 
provides time viable model adding continuations existing threaded implementations languages java 
remainder article organized follows 
section discusses various continuation mechanisms relate threads 
section describes subcontinuations detail gives examples 
section describes concurrent implementation shot subcontinuations 
section identifies small set thread primitives describes implementation subcontinuations terms primi threads yield continuations tives 
section discusses implementation generalized support multi shot subcontinuations 
section presents 

background continuation capture operation traditional continuations creates object encapsulates rest computation 
invoking traditional continuation discards aborts entire current continuation previously captured continuation 
finer control required part continuation needs captured part current continuation needs discarded continuation reinstated 
felleisen introduced prompt operator identify base continuation capture continuation prompt 
continuation captured functional composable invoking abort returns current continuation 
shift reset modified cps transformation similar differing primarily captured continuations include prompt 
subcontinuations generalize felleisen single prompt multiple nested prompts allow continuations control tree structured concurrency 
related sitaram felleisen show nested prompts may obtained single prompts sequential setting 
splitter extends notion continuation manner similar subcontinuations sequential setting separates continuation capture mechanism continuation abort mechanism 
gunter describe support multiple prompts may added statically typed languages 
uniprocessor traditional functional continuations sufficient implement threads source level 
systems support continuations provide primitive support threads 
continuations implement threads multiprocessors 
mp low level interface designed provide portable multiprocessing platform 
provides abstraction physical processor operations manage state spin locks mutual exclusion 
various concurrency abstractions including threads implemented class continuations top interface 
systems provide native support threads continuations 
example sting dialect scheme provides general low level support concurrency 
cooper describe mach multiprocessor threads implementation standard ml 
package modula threads package 
includes mechanisms mutual exclusion synchronization thread state 
supports kumar bruggeman dybvig futures continuations 
systems support continuations form threads continuation operations local threads control abort reinstate groups cooperating threads 
katz weise address relationship continuations futures providing mechanism controlling concurrency enforce sequential semantics concurrency transparent programmer 
shot continuations differ ordinary multi shot continuations shot continuation may invoked 
continuations implemented efficiently multi shot continuations stack implementations stack segments representing shot continuation need copied continuation reinstated 
applications continuations shot manner 
shot continuations implement nondeterminism prolog continuation invoked multiple times yield additional values 
application requires multi shot continuations shot continuations 

subcontinuations subcontinuation represents rest subcomputation point subcomputation 
presence tree shaped concurrency subcontinuations provide complete control process tree allowing arbitrary nonlocal exits reinstatement captured subcomputations may involve multiple threads 
procedure spawn marks root subcomputation creates controller capture abort current subcontinuation including root 
spawn takes procedure argument creates controller passes controller invoked dynamic extent procedure invocation 
controller invoked value call spawn value returned expression spawn lambda cons returns 
controller applied procedure subcontinuation point controller invocation back root controller captured applied captured subcontinuation continuation controller invocation 
subcontinuation invoked effect merely abort current subcomputation 
subcontinuation non aborting composable 
subcontinuation captured includes root controller 
root reinstated subcontinuation invocation allowing controller invoked 
threads yield continuations simple example cons spawn lambda cons lambda cons call spawn creates controller rooted cons 
invoking controller cons captures aborts continuation disturbing cons captured continuation includes cons 
invoking captured continuation cons cons value entire expression 
subcontinuation captured controller invocation invoked multiple times 
example controller invoked base case factorial computation subcontinuation fact takes argument multiplies 
entire expression returns 
define fact lambda lambda fact gamma fact spawn lambda fact fact fact presence concurrency subcontinuation captured aborted controller invocation may encapsulate multiple threads control 
invoking subcontinuation encapsulates multiple threads control causes concurrent subcomputation resume 
parallel search procedure concurrently traverses tree looking nodes satisfy specified predicate 
encountering node invokes controller suspend search returns node continuation resume search 
pcall section illustrate tree structured concurrency mechanism introducing tree structured concurrency suffice including primitive fork operator 
pcall evaluates subexpressions parallel applies procedural value subexpression values remaining subexpressions 
subexpressions involve side effects pcall expression behaves normal procedure call 
traditional continuations implemented terms kumar bruggeman dybvig define parallel search lambda tree predicate 
spawn lambda letrec search lambda tree empty 
tree pcall lambda predicate 
node tree lambda cons node tree search left tree search right tree search tree node satisfies predicate parallel search invokes controller suspend search returns pair containing node continuation may search additional nodes 
tions introducing explicit root spawn top level evaluation function 
traditional continuation operator call cc defined terms controller rooted top level evaluation function 
possible implement spawn call cc sequential setting doing straightforward involves explicit simulation stack stack segments required direct sequential implementation subcontinuations 
shot subcontinuations similar shot continuations captured shot subcontinuation may invoked 
shot continuations stack segments representing shot subcontinuation need copied subcontinuation reinstated 
particular shown section threads represent stack segments required implement shot subcontinuations concern restarting thread point multiple times 

implementation section describes implementation subcontinuations terms threads organized follows 
section describes small set threads yield continuations thread fork thunk forks thread invoke thunk 
thread self returns current thread 
mutex returns new mutex 
mutex acquire mutex acquires mutex 
mutex release mutex thread releases mutex thread specified 
condition mutex returns new condition associated mutex 
condition signal condition signals condition 
condition wait condition thread releases mutex associated condition thread specified waits condition signaled point mutex 
thread block thread blocks thread 
thread unblock thread unblocks thread 
thread system features implement shot subcontinuations 
thread primitives sufficient implementing subcontinuations 
section presents concurrent thread implementation shot subcontinuations 
section describes multi shot subcontinuations implemented threads discusses certain problems restrictions 

thread primitives shot subcontinuations implemented language thread system powerful support set thread system features shown 
addition ability dynamically fork threads set features includes mutexes mutual exclusion condition variables synchronization 
includes primitives allow thread block unblock threads 
features supported indirectly modern thread systems including sgi irix thread system implementation 
thread created dynamically thread fork invokes thunk argument separate thread 
threads executed effects 
kumar bruggeman dybvig mutexes condition variables provide structured way accessing shared resources 
order threads waiting mutex succeed acquiring systems unspecified 
implementation subcontinuations convenient allow thread releasing mutex specify thread succeed acquiring mutex 
primitives release mutex mutex release condition wait take optional second argument thread succeed acquiring mutex 
absence direct thread system support feature equivalent functionality implemented associating thread field mutex 
thread successfully acquires mutex nonempty thread field thread check see thread expected hold mutex 
designated thread release mutex wait 
eventually specified thread acquire mutex 
primitives thread block thread unblock required control concurrent computations 
asynchronous thread block unblock thread point thread execution 
operations synchronous return specified thread blocked unblocked 
threads interface described simple implemented top existing thread packages 
mutexes condition variables supported systems systems sgi irix linux solaris posix extend unix signal mechanism support threads 
signal mechanism implement thread blocking unblocking procedures systems support functionality directly 
subcontinuations threads described section pcall provides way create tree shaped concurrency spawn provides ability control tree shaped concurrency 
example tree shaped concurrent computation shown 
pcall essential subcontinuation mechanism implementation described implementation spawn illustrate spawn interacts pcall 
implementation pcall representative implementation operator introduce tree structured concurrency 
systems provide semaphores mutexes condition variables implemented terms semaphores 
requires user signal handler needed synchronize blocker blocking 
threads yield continuations subcontinuation controller pcall base blocked executing process tree containing subcontinuation controller pcall base nodes subcontinuation capture invoking controller subcontinuation reinstatement invoking captured subcontinuation 
pcall expression evaluates subexpressions concurrently applies value expression values remaining expressions 
leaf pcall executed branch point separate branch subexpressions 
execution takes place leaves tree 
subexpressions evaluated branch point leaf procedure applied arguments 
call spawn causes subcontinuation controller inserted current execution point 
control returns normally point controller removed tree execution resumed 
controller say invoked leaves say subtree root subtree pruned packaged subcontinuation 
subsequent invocation subcontinuation leaf say causes subcontinuation grafted process tree leaf 
kumar bruggeman dybvig index list returns list gamma 
insert pcall node 
threads creates inserts pcall node current leaf 
insert controller node 
thread creates inserts controller node current leaf 
delete child node 
deletes child current thread 
delete pcall edge 
node edge deletes edge pcall node 
prune subtree 
node prunes subtree rooted controller node 
graft subtree 
node subtree rooted controller node tree current leaf 
controller root node returns thread controller node 
node leaves node returns list leaves subtree rooted controller node 
procedures pcall spawn maintain subcontinuation data structures 
subcontinuations implemented maintaining tree stack segments stack segment simply stack activation records 
key observation supporting thread implementation continuations thread essence stack activation records 
threads represent stack segments 
subcontinuation capture subtree threads packaged subcontinuation blocking currently executing threads subcomputation leaves subtree 
subcontinuation reinstated subtree threads grafted back process tree computation resumed unblocking threads leaves 
unblocked threads may overwrite activation records stacks subcontinuations represented manner invoked shot subcontinuations 
implementations pcall spawn share common set procedures manipulate data structures process tree 
procedures listed 
code required implement procedures straightforward 
threads yield continuations operations process tree atomic 
implementation uses single global mutex serialize operations 
time sufficient thread performing operation acquire mutex perform operation release 
operations require code executed different threads 
ensure atomicity entire operation thread initiating operation acquires mutex performs half operation uses optional parameter mutex release procedure pass mutex second thread completes operation releasing mutex 

implementation pcall code pcall shown help procedure pcall pcall syntactic extension 
syntactic extension simply thunks pcall form subexpressions effectively delaying evaluation passes pcall pcall invoked obtains mutex gain exclusive access process tree 
forks thread arguments updates tree releases mutex waits condition done signaled arguments computed 
child thread concurrently computes argument 
result computed child communicated parent thread specified slot vector result 
variable counter decremented time child thread terminates keep track number arguments computed 
child finishes counter goes zero child wakes parent thread signaling condition done 
parent tree releases mutex applies resulting procedure resulting arguments 

implementation spawn spawn invoked obtains process tree mutex creates subcontinuation controller 
forks child thread adds node tree mark controller releases mutex waits condition done 
child thread applies procedure passed spawn controller 
control return call explicit invocation controller ordinary return flag controller invoked 
distinguish cases 
simpler case controller invoked call returns value 
case child thread enters critical section stores value result visible parent thread wakes parent signaling condition done 
child thread terminates parent thread resumes execution result value returned spawn 
kumar bruggeman dybvig define syntax pcall syntax rules proc arg pcall length proc arg lambda proc lambda arg define mutex mutex define pcall lambda args result vector pcall node done condition mutex parent thread self counter mutex acquire mutex thread list map lambda fn index thread fork lambda vector set 
result index fn mutex acquire mutex delete pcall edge 
pcall node index set 
counter gamma counter counter condition signal done mutex release mutex parent mutex release mutex args index list set 
pcall node insert pcall node 
thread list condition wait done delete child node 
mutex release mutex lst vector list result apply car lst cdr lst implementation pcall 
threads yield continuations define spawn lambda define controller node define controller invoked 
define controller invocation thunk define result define done condition mutex define controller wait lambda set 
controller invoked 
condition wait done controller invoked 
controller invocation thunk delete child node 
mutex release mutex result define controller see lambda mutex acquire mutex thread thread fork lambda value controller mutex acquire mutex parent controller root controller node set 
result value condition signal done mutex release mutex parent set 
controller node insert controller node 
thread controller wait implementation spawn 
kumar bruggeman dybvig define controller lambda mutex acquire mutex val continue condition mutex root thread controller root controller node set 
controller invocation thunk lambda prune subtree 
controller node leaves node leaves controller node thread block leaves mutex release mutex lambda mutex acquire mutex graft subtree 
controller node thread unblock leaves set 
val condition signal continue controller wait set 
controller invoked 
condition signal done condition wait continue root thread mutex release mutex val implementation controller 
complicated case controller invoked leaves 
happens subcontinuation represents subtree rooted controller captured aborted 
mutex acquired ensure thread starts continuation operation process tree 
thread invokes controller determines thread root thread waiting subcontinuation controller packages done thread thunk controller invocation thunk updates variable controller invoked 
inform controller invoked wakes controller signaling condition done 
waits condition continue handing mutex root thread 
root thread starts executing controller invoked 
flag indicates threads yield continuations controller called explicitly invokes controller capture subcontinuation 
causes tree rooted controller pruned threads executing leaves blocked 
leaving critical section creates subcontinuation applies controller argument subcontinuation 
subcontinuation invoked thread executing leaf thread obtains process tree mutex process subtree captured part subcontinuation current leaf unblocks threads leaves grafted subtree 
stores value returned point controller invoked val signals condition continue thread invoked controller waits condition done 
signaled thread returns value stored val point controller invoked 
avoid deadlock thread blocked holding mutex 
maintain invariant blocking thread holds mutex synchronous blocking operation succeeded 

multi shot subcontinuations implementation described preceding section extended support multi shot subcontinuations 
requires thread cloning operator thread dup allows threads captured subcontinuation cloned 
clones restart subcomputation captured subcontinuation original ones kept subsequent invocations subcontinuation 
complications arise method extending implementation support multi shot subcontinuation 
single controller pcall node exist multiple locations process tree 
data structures communicate parent threads children moved procedures currently encapsulated process tree data structure cloned corresponding node tree cloned 
start operation correct node tree located corresponding data structures 
second condition variables node basis 
condition variable thread waiting thread awakened signaling condition 
simple replication condition variables order retain property thread wait condition variable time 
threads waiting condition variables cloned replaced 
solution problem accept fact multiple threads waiting condition kumar bruggeman dybvig variable wake condition broadcast primitive 
thread awakened check see intended target wakeup message 
wait condition variable 
third compiler support required allow stack encapsulated thread copied 
particular mutable variables data structures stored outside stack accessed original stack extra level indirection 
contrast compiler support required implement shot subcontinuations 

long known continuations implement threads 
article shown threads implement continuations 
doing provided detailed implementation model subcontinuations concurrent setting understanding relationship continuations threads provided straightforward operational semantics interaction threads subcontinuations 
implemented complete thread package supports primitives described section part chez scheme sgi power challenge multiprocessor package implement shot subcontinuations available www cs princeton edu 
extended implementation support multi shot subcontinuations 
subcontinuation mechanism described uses higher order procedures essential mechanism implementation 
implementation shot subcontinuations rely higher order procedures special compilation techniques model applicable language language implementation supports small set thread primitives described section 
model demonstrates time straightforward way add support class continuations threaded versions languages java changes language compiler 
languages automatic storage management programmer responsible deallocating unused subcontinuations data structures threads represent subcontinuations 
new programmers languages face similar problem threads killed computations aborted longjmp nonlocal exits 
techniques implement shot subcontinuations threads yield continuations adapted support shot variants continuation mechanisms described section including call cc 
multi shot variants mechanisms supported subject complications discussed section 
absence concurrency asynchronous thread operators needed active thread blocked waiting condition variables 
comments oscar waddell anonymous reviewers led substantial improvements presentation material 

halstead jr robert multilisp language concurrent symbolic computation 
acm transactions programming languages systems october 

birrell andrew guttag john horning james levin roy 
synchronization primitives multiprocessor formal specification 
proceedings eleventh symposium operating systems principles november 

bruggeman carl waddell oscar dybvig kent 
representing control presence shot continuations 
proceedings sigplan conference programming language design implementation may 

clocksin william mellish christopher programming prolog 
springer verlag second edition 

cooper eric morrisett gregory 
adding threads standard ml 
technical report cmu cs computer science department carnegie mellon university december 

danvy olivier filinski andrzej 
representing control study cps transformation 
mathematical structures computer science 

dybvig kent hieb robert 
engines continuations 
computer languages 

felleisen matthias 
prolog scheme 
technical report indiana university october 

felleisen matthias 
theory practice class prompts 
conference record fifteenth annual acm symposium principles programming languages january 
kumar bruggeman dybvig 
felleisen matthias friedman daniel duba bruce merrill john 
continuations 
technical report indiana university computer science department 

felleisen matthias wand mitchell friedman daniel duba bruce continuations mathematical semantics handling full functional jumps 
proceedings acm conference lisp functional programming july 

friedman daniel haynes christopher wand mitchell 
obtaining coroutines continuations 
computer languages 

gunter emy riecke jon generalization exceptions control ml languages 
proceedings acm conference functional programming computer architecture june 

haynes christopher logic continuations 
lisp pointers 

haynes christopher friedman daniel engines build process abstractions 
proceedings acm conference lisp functional programming august 

hieb robert dybvig kent 
continuations concurrency 
proceedings second acm sigplan symposium principles practice parallel programming 

hieb robert dybvig kent anderson iii claude subcontinuations 
lisp symbolic computation march 

hieb robert dybvig kent bruggeman carl 
representing control presence class continuations 
proceedings sigplan conference programming language design implementation june 

hoare monitors operating system structuring concept 
communications acm 

jagannathan suresh philbin james 
customizable substrate concurrent languages 
acm sigplan conference programming language design implementation june 

jagannathan suresh philbin james 
foundation efficient multi threaded scheme system 
proceedings conference lisp functional programming june 
threads yield continuations 
katz weise daniel 
continuing interaction futures class continuations 
proceedings acm conference lisp functional programming june 


indefinite time continuation 
transactions information processing society japan 

lampson butler redell david experience processes monitors mesa 
communications acm 

miller james parallel processing system mit scheme 
phd thesis massachusetts institute technology september 

queinnec christian bernard 
dynamic extent control operator partial continuations 
conference record eighteenth annual acm symposium principles programming languages january 

sitaram dorai felleisen matthias 
control delimiters hierarchies 
lisp symbolic computation january 

sussman gerald steele jr guy scheme interpreter extended lambda calculus 
ai memo massachusetts institute technology artificial intelligence lab 

tolmach andrew morrisett gregory 
portable multiprocessor interface standard ml new jersey 
technical report tr princeton university june 

wand mitchell 
continuation multiprocessing 
conference record lisp conference august 
