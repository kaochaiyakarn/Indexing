proceedings international conference computer languages iccl pp 
toulouse france may 
fl ieee 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
taming control flow structured approach eliminating goto statements ana laurie hendren school computer science mcgill university montr eal qu ebec cs mcgill ca designing optimizing parallelizing compilers simpler efficient deal programs structured control flow 
programmers naturally program structured fashion remain important programs benchmarks include number goto statements rendering entire program unstructured 
unstructured programs handled compilers built analyses transformations structured programs 
straight forward algorithm structure programs eliminating goto statements 
method works directly highlevel syntax tree ast representation program easily integrated compiler uses ast intermediate representation 
actual algorithm proceeds eliminating goto applying sequence transformations followed appropriate goto elimination transformation 
implemented method mccat mcgill compiler architecture testbed optimizing parallelizing compiler experimental results demonstrate method efficient effective 
motivation years substantial discussion explicit gotos high level programs arguments frequent gotos software engineering program understandability point view 
discussion led relatively infrequent gotos typical programs 
languages special occasions programmers gotos 
include gotos exit deeply nested conditionals loops gotos branch common piece code shared branches switch statement gotos automatically generated code code produced lex gotos handle exceptions 
concerned automatically eliminating explicit gotos order facilitate construction analyses transformations required optimizing parallelizing compilers 
source programs may contain gotos wish automatically transform equivalent structured compositional programs gotos 
implemented method mccat mcgill compiler architecture testbed parallelizing optimizing compiler compiler assume fully structured programs intermediate forms analyses transformations 
pragmatic point view reasons programs gotos simpler handle compilers 
important consequence programs gotos compositional structured analyses techniques compute data flow information 
example efficient techniques available structured data flow graphs simple interpretation techniques need consider continuation semantics 
program transformation standpoint compositional programs lend simpler efficient algorithms 
consider example efficient creation static single assignment ssa form structured programs consisting straight line code statements statements structured transformations alpha dependence representation efficient construction program dependence graphs structured programs 
compositional programs naturally represented trees intermediate representations compositional representations manipulated transformed wide variety strategies including attribute grammars 
approach eliminating gotos set straight forward transformations operate high level structured intermediate representation original program 
transformations come categories goto eliminations 
intuitively method relies observations goto statement target label statement sequence goto elimination transformation directly applied eliminate goto goto statement different statement sequence target label goto movement transformations move goto statement sequence target label apply appropriate goto elimination transformation 
remainder structured follows 
section goto elimination goto movement transformations 
show applied remove single goto statement program highlevel algorithm eliminating gotos program producing equivalent structured program 
section show optimizations method improve resulting code 
completely implemented method section give experimental results unoptimized optimized methods 
section compare method related methods section give discuss 
eliminating goto statements section goto elimination transformations transformations show apply successive goto movements order reach point goto elimination applied 
simplify explanation method assume goto statement conditional goto form condition goto li 
assume unconditional goto form goto li transformed equivalent conditional statement form true goto li 
important point chosen directly support break continue statements 
form control flow similar gotos quite tame sense compositional easily handle compiler framework 
benefit eliminating statements 
method easily modified eliminate break continue statements required 
goto elimination transformations goto statement label statement sequence directly eliminate goto statement 
possibilities goto statement occurs program label statement label statement 
case goto eliminated replaced conditional second case goto eliminated replaced loop 
goto statement label statement goto statement label statement obvious transformation conditional statement 
illustrated goto eliminated statements goto statement label embedded conditional statement guarded negation condition original goto statement 
stmt cond goto li stmt 
li stmtn stmt cond stmt 
li stmtn eliminating goto conditional goto statement label statement goto statement label statement goto eliminated embedding statements label goto loop 
example program illustrates case 
stmt li stmt stmtn cond goto li stmt li stmt stmtn cond eliminating goto loop goto elimination transformations obvious programmer goto situations conditional loop reasonable constructs 
tool generates code easily produce programs 
furthermore goto elimination transformations provide backbone complete method 
described section eliminate goto moving goto appropriate place applying goto eliminations 
goto movement transformations order categorize goto movement transformations require precise notion offset level sibling statements directly related statements indirectly related statements 
definition offset goto label statement statement nth goto label statement appears source program relative program 
definition level label goto statement label goto statement nested inside exactly loop switch statements 
definition label statement goto statement siblings exists statement sequence stmt 
stmt label statement corresponds stmt goto statement corresponds stmt statement sequence 
definition label statement goto statement directly related exists statement sequence stmt 
stmt label goto statements corresponds stmt matching goto label statement nested inside stmt statement sequence 
definition label statement goto statement indirectly related appear procedure body siblings 
definitions clear transformations previous subsection applied exactly goto statement target label statements siblings 
goto elimination transformation offset goto statement offset target label statement transformation applied offset goto statement greater offset target label statement 
restate strategy follows 
goto label pair eliminate goto moving goto sibling label applying appropriate transformation 
illustrates situations may occur 
illustrates case label goto directly related level goto greater level target label 
objective move goto level label 
case apply outward movement transformations transformation moves goto level 
illustrates case label goto directly related level goto level label 
case apply inward movement transformations transformation moves goto level 
figures illustrate complicated situations goto label indirectly related 
label goto entirely different statements goto moved outward movements directly related label move goto level label 
label goto different branches switch statements goto moved directly related enclosing switch inward movements move level label 
switch expr expr case cond goto expr expr switch cond goto case directly related directly related level goto level label level goto level label switch case expr cond goto expr expr cond cond goto expr expr expr indirectly related indirectly related different statements different branches switch cases goto label relationships 
situations may handled inward outward goto movements remaining problem define outward inward movement transformations kind construct loop conditional switch 
transformations subsections 
outward movement transformations outward movement transformations straight forward 
basically cases moving goto loop switch statement moving goto statement 
moving goto loop switch statement transformation simple break statement exit switch loop 
break compositional compiler handle easily 
note possible complicated transformation break statement desired 
complete transformation illustrated 
note new variable introduced store value conditional point goto encountered 
value reused goto statement introduced exit switch loop 
switch case stmt cond goto stmt stmti break case default 
stmtn switch case stmt gotol cond gotol break stmt stmti break case default gotol goto 
stmtn moving goto switch moving goto statement case break statement new conditional introduced shown 
expr stmt cond goto stmti 
stmtn expr stmt gotol cond gotol stmt stmti gotol goto 
stmtn moving goto inward movement transformations previous section relatively simple outward movement transformations 
inward movement transformations slightly complicated 
firstly take advantage break statements secondly consider goto appears target label 
describe inward movement transformations cases goto appears label show apply goto lifting transformation see section move goto appears label 
moving goto loop statement transformation introduces conditional embeds statements occur goto start loop modifies loop condition entered goto expression true original loop expression true 
transformation illustrated 
note short circuit evaluation ensure original loop expression evaluated entry loop due goto 
note goto variable set false point label order preserve correct behaviour loop succeeding iterations force evaluation loop expression 
cond goto stmt stmti expr stmtj 
stmtn gotol cond gotol stmt stmti gotol expr gotol goto stmtj 
gotol false stmtn moving goto loop transformation loops similar condition loop need modified 
handle loops labels body simply transform equivalent loop apply appropriate inward movement transformation 
moving goto statement case transformation similar loop transformation condition modified differently depending label part 
label part modification condition condition 
label part condition modified lead part goto condition true condition false 
illustrates case 
moving goto switch statement order move goto switch statement locate case contains target label 
order force control enter case new variable defined switch variable conditional introduced initialize new variable constant expression case question condition goto true cond goto stmt stmti expr stmtj stmtn gotol cond gotol stmt stmti gotol expr stmtj gotol goto stmtn moving goto switch expression condition goto false 
illustrated 
cond goto stmt stmti switch case stmtj default 
gotol cond gotol stmt stmti switch case gotol goto stmtj default 
moving goto switch goto lifting transformation previous inward movement transformations moved goto appeared target label offset goto offset label 
situations target label appears matching goto 
case move goto just statement containing target label transformation apply appropriate inward movement transformation 
goto lifting transformation illustrated 
example stmt label statement contains label goto statement originally stmt label 
lift goto stmt label introducing loop iteration ignores goto subsequent iterations uses value conditional bottom loop 
goto lifted inward movement transformations move goto inside stmt label 
stmt stmt contains cond goto stmtn int gotol false stmt stmt gotol goto contains gotol cond gotol stmtn lifting goto statement containing label examples inward outward transformations illustrates series outward transformations followed goto elimination transformation illustrates series inward transformations followed goto elimination transformation 
note dotted arrows indicate movement just applied dashed arrows indicate movement 
avoiding capture break continue statements directly supporting break continue statements twist consider applying goto elimination section goto lifting section transformations introduce new loops 
transformation quite simple innocent subtle point arises due presence break continue statements 
crucial point rare occasions loop introduce captures break continue statement belongs enclosing loop switch statement 
consider example original program incorrect capturing break statement 
order avoid situation add transformation captured break continue 
illustrated need introduce new logical variable loop captures break set variables false procedure set appropriate variable true point break check variable exit introduced loop true reset logical variable false issue proper break enclosing loop 
similar method captured continue statements may 
eliminating goto statements goto elimination goto movement goto lifting transformations state complete algorithm removing goto statements true li stmti stmtj exp break exp goto li stmtn true li stmti stmtj exp break exp stmtn int true li stmti stmtj exp break exp break stmtn original program incorrect capture break correct treatment captured break avoiding capture break continue statements switch expr expr goto cond goto break case goto li goto switch expr expr goto cond goto break case goto goto goto outward movement switch outward movement switch expr expr goto cond goto break case goto goto break goto goto switch expr expr goto cond goto break case goto goto break 
goto goto outward movement application goto elimination outward movements followed goto elimination 
program 
complete algorithm 
procedure algorithm proceeds steps 
steps simple initializations 
step collects list label goto statements procedure 
implementation store gotos list order appear store labels hash table 
second step introduces logical variable label initializes variable false inserts reinitialization false point label 
initializations required sure value logical variable false paths path coming point appropriate conditional test evaluated true 
third step converts unconditional gotos conditional gotos 
fourth step heart algorithm goto eliminated time 
simplest order eliminate order occur goto list 
point section may better orderings considered 
goto matching label located 
implementation hash table labels efficiently 
goto label pair located simply matter applying goto movement transformations goto label pair siblings applying appropriate goto elimination transformation 
implementation algorithm able support efficient operations get level offset label goto efficient means determine goto label indirectly related directly related siblings 
implementation store level offsets goto list label hash table parent pointers simple tree find common ancestors efficiently determine relationship goto label 
fifth step elimination labels gotos labels eliminated noted implement initialization steps pass ast passes required subsequent goto expr expr switch goto cond goto goto goto case goto expr goto goto goto expr switch goto cond goto goto case inward movement inward movement goto expr goto goto 
goto switch switch goto expr switch switch goto cond 
goto 
goto case goto expr goto goto case goto switch switch goto expr switch switch goto cond goto goto inward movement switch application goto elimination inward movements followed goto elimination steps done directly information collected pass 
store information location goto label statements allow direct manipulation required parts ast 
optimizations simple optimizations goto elimination goto movement transformations applied 
illustrates case goto immediately label 
situation may occur movement transformations clearly case may just eliminate goto 
illustrates situations goto statement sequence moved 
case avoid introducing conditional statement block statements goto guarded 
similarly figures illustrate goto immediately procedure get list labels gotos procedure labels procedure gotos procedure introduce initialize logical variables label li introduce var 
initialized false introduce stmt 
just label li resets false change unconditional gotos conditional gotos unconditional goto change conditional goto eliminate gotos empty select goto label pair select goto label matching force directly related move outward movement transf 
directly related diff 
branches switch move outward movement transf 
directly related switch containing force siblings level level move level outward movement transformations level level offset offset lift stmt containing goto lifting transformations move level inward movement transf 
guaranteed siblings eliminate offset offset eliminate conditional eliminate loop eliminate labels label li eliminate li high level algorithm removing gotos loop switch avoid introducing conditional statement loop switch 
common situation optimized occurs goto associated label inside switch loop statement 
apply transformations blindly introduce goto conditional check exit switch loop 
clear goto statement label preferable insert conditional check label 
ex stmt cond goto stmtn stmt 
stmtn goto label expr stmt cond goto 
stmtn expr stmt gotol cond gotol goto 
stmtn goto block cond goto expr stmt 
stmtn gotol cond gotol expr gotol goto stmt 
stmtn goto immediately loop cond goto switch case stmt 
stmtn default gotol cond gotol switch case gotol goto stmt 
stmtn default 
goto immediately switch simple optimizations ample transformation case multiple gotos label switch 
implement optimization checking see appropriate conditional inserted avoiding duplicating code 
experimental results section give experimental results implementation algorithm 
mccat compiler shown mccat compiler family intermediate representations range high level representation low level representation 
design intermediate representation driven requirements analysis trans switch case break case goto error case break case goto error error switch case break case true break case break case true break goto error error optimizing multiple gotos switch formations consider important level 
note implemented restructuring phase simple level 
convenient place insert restructuring statements conditional expressions simplified point 
note simple representation dump program mccat source source compiler continue backend phases mccat 
note analyses transformations done restructuring goto elimination assume structured programs 
compiler front processing simplify native compiler code generator simple register allocation instruction scheduling low level loop transformations source linker program structuring function inlining loop unrolling gen const 
propogation points analysis dependency analysis high level loop parallelization transformations mccat compiler program description test vectorizing compilers test vectorizing compilers compress file compression tomcatv mesh generation fsm implementation finite state machine lex output program generated lex cq tests compiler par program filter synthetic benchmark frac finds rational fp value table benchmark description benchmarks order test restructuring method collected set benchmarks contain goto statements 
practical terms required programs contain goto wanted test effect complexity approach benchmarks contained significant number goto statements 
benchmarks described table 
experimental method order measure effectiveness restructuring phase performed experiment 
benchmark mccat compiler source source compiler produced semantically equivalent versions benchmark simple version program dumped conversion high level simple intermediate representation 
goto statements remain 
gte version program dumped simple representation restructured transformation rules section 
optimizations transformation rules 
gte opt version program dumped simple program restructured transformation rules section optimizations section 
note gte versions eliminated goto statements reverse order appeared source code 
versions program compiled version gnu gcc benchmarks experiments obtained contacting cs mcgill ca 
appreciate receiving benchmarks contain numerous goto statements version option timed resulting executables unix time command sparcstation 
reported user time experiments 
results discussion table gives experimental measurements benchmark 
section columns give name benchmark number gotos program number lines source code 
provide fair comparison number lines source code ran script strips comments formats programs standard form 
second section columns gives execution times version benchmark times collected described previous section 
third section columns gives count total number transformations applied number statements inserted gte gte opt versions programs 
note number extra statements gte versions really number statements inserted minus number goto statements eliminated 
count statements inserted gte versions counted new statements including added statements initialization logical variable goto condition re initialization logical variables 
consider effect restructuring execution time 
expected restructuring programs goto statements little impact execution time 
example true cq goto respectively 
important observation programs goto statements method allows handle structure compiler low cost 
extreme fsm benchmark irreducible loop nested gotos ratio gotos total statements high 
furthermore execution time spent part program implements finite state machine 
see significant performance impact optimized gte version executing significantly slower 
result indicate explore optimizations goto intensive programs 
experimenting various orderings goto statements observed order elimination important programs source optimization consider 
ratio gotos number statements high observed transformations applied simple gotos siblings labels exit loop 
name time time time gte opt transf new stat transf new stat benchmark gotos stats 
simple gte gte opt simple gte gte gte opt gte opt compress tomcatv fsm lex cq par frac table experimental measurements consider expense measured number transformation applied number new statements introduced 
note apply transformations goto eliminated 
means apply movement transformations goto 
see introduce statements goto giving net increase statements goto 
results consistent results study done maccabe indicated functions examined gotos 
gotos characterized simple gotos target label function associated gotos goto label siblings goto exit control structure 
summarize stating results show applying small number simple transformations eliminates goto statements benchmarks effect execution speed minimal 
vast majority programs exploit structured representations designing compilers paying minimal penalty due restructuring 
related approaches restructuring bohm 
restructuring method done context normalizing flow graphs flow graph represented mappings set 
result historical theoretical interest give complete algorithm presents set pattern matching rules transformations 
approaches restructuring program flowgraphs 
peterson proof flowgraph transformed equivalent formed flowchart loops conditionals properly nested entered 
graph algorithm transformation technique proved transformation correct 
william osher node splitting problem recognizing basic unstructured sub graphs show replace sub graphs equivalent structured forms 
ashcroft manna tackled problem restructuring presenting algorithms converting program schemas schemas 
node splitting extra logical variables achieve transformations 
previous methods intended restructure flow charts 
approaches suggested restructure programs order expose natural structure program leaving gotos unstructured 
method baker method restructuring fortran programs order understandable 
goal understandable fortran programs restructures situations clear structured construct leaves gotos program 
historical interest leaves gotos program method applicable complete restructuring programs purposes compilation 
cifuentes algorithm restructuring context decompilation 
similar spirit baker problem structures parts program correspond naturally structured control constructs 
relevant structuring methods proposed allen vectorizing compilers parallelizing compilers 
allen conversion method converts control dependences data dependences eliminating goto statements introducing logical variables control execution statements 
goal vectorize statements loops contain conditional transfers fortran programs 
goal method applied restructuring fact similar characteristics 
method divided dif ferent steps categorize branches types exit branches exits loop forward branches backward branches 
branch classification conversion uses different transformations eliminate branches programs branch relocation branch removal 
branch relocation moves branches loops branch label nested number loops 
accomplished introducing guard expressions enforce conditional execution statements 
branch removal takes place removing forward branches 
eliminate backward branches 
method similar methods consist step step transformations applied structured intermediate representations program result transformation structured code 
idea branch relocation branch removal somewhat similar goto elimination 
logical variables guard execution statements 
differences methods include fact restructure programs treating break continue switch statements fortran programs 
furthermore interested removing gotos just associated forward branches 
difference way introduce guards code 
interested vectorization introduced new conditional action statement method preferable introduce conditional block statements 
potential advantage approach pass program collecting information gotos labels directly modify intermediate representation program 
approach requires passes program different stages branch categorization branch relocation branch removal 
method calls control flow normalization closest terms goals restructuring 
wish fully restructure programs order facilitate program transformations program analysis automatic parallelization 
intermediate representations restructure quite different 
restructuring high level representation programs directly supports break continue restructures lisp intermediate representation requires loops single exit 
approach problem different 
converts program system simultaneous equations unknowns represent continuations associated programs labels 
transformations applied system equations distribution factorization substitution elimination solves system continuation equations 
quality normalizing form program terms code duplication code size running time resolution process depends order unknowns eliminated 
study order consider control flow program eliminate back cross edges graph sort resulting graph topological order 
example irreducible loop 
compare result control flow normalization goto elimination 
illustrated example results similar create new logical variables store conditions guard execution statements create cycles control flow implicit cycle 
replicates code case irreducible loops case study best order unknowns 
cases backward branches imply cycles introduce loop 
loop execute times original program imply increase execution time program 
distinction require loops compiler analysis framework easily handles continue break statements 
easily modify approach force loops required 
appears method easier explain straight forward implement need set simple transformations require collection solution equations 
structured approach eliminating goto statements programs 
goal transformation provide structured compositional intermediate representation amenable structured approaches analysis optimization parallelization 
method straight forward easily implemented directly tree representation programs 
approach built set goto elimination goto movement transformations 
goto statement removed goto movement transformations move goto statement sequence applying appropriate goto elimination transformation 
completely implemented method simple intermediate representation mccat parallelizing optimizing compiler experimental measurements benchmark programs implementation 
appears goto stmt stmt goto pred pred stmt pred pred pred stmt stmt pred pred gotol gotol gotol stmt gotol stmt gotol gotol irreducible loop control flow normalization method comparison methods irreducible loop programs goto statements relatively sparsely programs restructured programs similar execution speeds original programs 
programs restructuring performance penalty time allowing structured analysis transformations phases compiler 
programs dense goto statements programs produced scanner generator tools lex performance penalty may worth studying optimizations restructuring methods 
example may want study best order eliminating gotos look elimination redundant conditional checks initializations 
feel major advantage approach restructuring method straight forward integrate compiler structured intermediate representation 
furthermore shown experimental results approach efficient applying small number simple transformations goto statement 
experience presence restructuring phase eliminate gotos allows develop efficient simpler analyses transformations remainder compiler 
aho sethi ullman 
compilers principles techniques tools 
addison wesley pub 
corrected edition 
allen ken kennedy carrie porterfield joe warren 
conversion control dependence data dependence 
conf 
rec 
popl pages austin texas jan 

control flow normalization algorithm complexity 
ieee trans 
software eng 
baker 
algorithm structuring flowgraphs 
journal acm 
robert balance arthur maccabe 
program dependence graphs rest 
technical report university new mexico oct 
bohm 
flow diagrams turing machines languages formation rules 
comm 
acm may 
cifuentes 
structuring algorithm decompilation 
xix de inform atica pages buenos aires argentina august 
centro de en inform atica 
ron cytron jeanne ferrante barry rosen mark wegman kenneth zadeck 
efficiently computing static single assignment form control dependence graph 
acm transactions programming languages systems oct 
dijkstra 
go statement considered harmful 
communications acm march 
ashcroft manna 
translating programs schemas 
siam comput 
hendren emami gao sridharan 
designing mccat compiler family structured intermediate representations 
conf 
rec 
th 
languages compilers parallel computing pages new haven conn aug 
dept comp 
sci yale available acaps sch 
comp 
sci montr eal qu 
hendren gao sreedhar 
alpha dependence intermediate representation optimizing parallelizing compiler 
acaps tech 
memo sch 
comp 
sci mcgill montr eal qu nov 
knuth 
structured programming go statements 
computing surveys pages dec 
peterson kasami 
capabilities repeat exit statements 
comm 
acm 
wegner 
programming languages years 
ieee transactions computers pages dec 
williams 
generating structured flow diagrams nature 
comput 

williams ossher 
conversion unstructured flow diagrams structured 
comput 


