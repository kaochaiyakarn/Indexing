transparent flexible resource adaptive image processing autonomous service robots michael beetz tom armin cremers markus mann 
describes structured reactive image processing plans tailored needs autonomous service robots 
implemented top modular dynamically configurable architecture called recipe specified subplans written robot control plan language rpl 
specifying image processing routines transparently explicitly part robots plans hiding separate modules robots visual capabilities effective efficient robust 
enables robots generate reason revise image processing routines 
synchronize image processing activities actions control structures recover image processing failures 
autonomous service robots act dynamically changing environments need acquire interpret various kinds visual information 
consider office delivery robot accomplish job get red envelope wolfram desk 
job specification contains visual descriptions objects delivered locations collection delivery objects 
achieve task robot perform different kinds visual tasks recognizing pieces furniture parts thereof visually searching regions images detecting people 
making image processing ip capabilities efficient reliable requires robots contextual information simplify ip tasks tailor ip routines specific situations tightly integrate ip capabilities operation control system optimal robot computational resources 
particular consider features essential successfully integrating ip capabilities robot control systems 
ffl stability 
robot control system function stably case system failure 
ffl resource management 
ip capabilities efficient limited facilities available robot cameras processing memory communication resources 
employing resources optimally requires strategy managing ip resources adaptive 
ffl distributed control 
robot control system physically distributed different computers 
generally bandwidth communication limited information transferred system concise possible 
ffl image processing routines actions 
ip routines activated controlled synchronized robot control system 
partially supported ec contract tmr programme 
university bonn dept computer science iii 
bonn germany 
email beetz abc mann cs uni bonn de actions visual routines desired effects acquisition new information side effects pointing camera consuming computational resources 
ffl image processing routines plans 
robot reformulates ip tasks local information gathers sensors adjusts way solves tasks depending information 
ffl image context 
ip tasks autonomous robots embedded complex activities 
visual routines need 
better apply methods high probability return results conjunction methods failure detection repair 
design programming system ip routines satisfies requirements 
solution consists ffl recipe dynamically loadable modular architecture distributed robot control system provides basic ip functionality manages images ip data structures 
provides variety standard ip routines edge detectors convolutions noise reduction segmentation ffl rpl ip extension machine provided robot control plan language rpl 
rpl ip provides suitable abstractions images regions interest supports tight integration vision routines robot control system 
ffl image processing plans provide various methods combining ip methods ip pipelines 
ip plans support implementation robust vision routines integration sensors laser range finders sonars object recognition tasks scene analysis 
vision routines rpl programs constructed revised reasoned robot control program executed 
significant contribution idea having single language control physical actions perception actions internal operations ip routines 
uniform framework views ip routines actions need controlled monitored synchronized plans generated reasoned revised 
features crucial constituents effective efficient robust image processing service robot applications 
going describe structure remainder give short example need requirements demonstrated 
image processing part robot control implemented part control system robot control system designed robust efficient execution delivery plans autonomous mobile robot rhino see fig 
rwi robot 
rhino equipped pcs fl beetz cremers mann ecai 
th european conference artificial intelligence edited henri prade published john wiley sons connected computer network radio link 
sensor system consists ultra sonic proximity sensors laser range finders ccd stereo color camera system 
fig 
rhino operates part office building see uses symbolically annotated world model includes items walls doorways rooms static pieces furniture 
world model provides information required fast collision free navigation accurate robot localization 
robot possesses navigation system determine robot position environment average position accuracy centimeters average orientational error degrees 
start table shelf robot fig 
navigates front shelf turns face shelf runs routines recognizing shelf 
consider example showing having image processing integral explicit transparent part control system 
consider classic task visual place recognition recognition known pieces furniture office environment 
problem context specialization adaptation environment promise great simplifications visual processing required 
ip functionality type task known permitting focus added functionality comes employing 
simply put employs geometric projection algorithm takes rhino position direction camera pointing arguments retrieves furniture items robot view predicts corners furniture item appear camera image 
applies compound ip routine searches predicted lines suggested geometric projection algorithm 
responsible control ip operations required object recognition 
operations represented plans tailor visual recognition furniture items selecting lines sorting lines order promise fast reliable recognition 
example specialization suppose color item furniture differs significantly background 
object recognition procedure look boundary corners 
example proximity sensors detect object standing front item furniture process adapt plan sequence ip operations prefer vertical lines high corners 
procedure run routines detecting recognizing lines parallel sequentially depending cpu load 
confidence value successful recognition set specified deadlines recognition process 
case recognition failures robot control program running recognition procedure try robot move robot different location near furniture item get better view 
figures show output different steps recognition procedure 
see region interest black computed degree confidence robot location white lines edges detected edge detector region 
shows final result recognizing shelf 
black lines predicted ones white ones recognized lines 
results expected type ip 
impossible achieve level flexibility robustness image processing hidden discrete fixed ip modules limited predefined way controlled stored sequences ip requests 
ip routines approach dynamically generated revised robot operation robot control system needs direct access visual information sensed robot 
control routines concurrent programs may simultaneously need read modify shared visual information 
context ip facility enforce controlled access visual information ensure stability optimal available resources 
fig 

edge detection step 
fig 

recognizing shelf 
remainder organized follows 
section describes interface ip facilities plan language rpl 
section shows plans specify ip routines implemented 
demonstrate modularity transparency generated revised automatic planning techniques 
section describes requirements stability resource management distributed control met recipe runtime configurable image processing system 
summarize results giving directions research 
robot control ip interface explain ip operations embedded robot control system explain robot control system functions interface plans ip operations 
ip routines run parts structured reactive controllers 
specify robot respond events feedback generated low level control modules robot 
main components fluents process modules structured reactive plan 
fluents registers program variables signal values 
store events sensor reports feedback generated low level control modules 
fluents set sensing processes physical control routines assignment statements trigger guard execution high level control routines 
image processing introduce new categories fluents store basic data structures images regions interest lines segments confidence values indices 
process modules elementary program units constitute uniform interface high level plans low level continuous control processes ip routines 
process module grab image example provided ip extension rpl activated camera name image size image color grayscale parameters 
module updates fluents image grabbed image stored done pulsed process completion 
robotics vision signal understanding beetz cremers mann process module process image takes image region interest ip operator additional parameters tuning arguments 
ip operators include edge detectors sobel canny line followers segmentation operators 
image region interest parameters indices images regions interest image roi tables recipe module 
fluents updated process image module image roi done fluents contain image resulting application operator done signal 
process modules matching lines generating regions interest segmenting images displaying images 
structured reactive plans high level control routines concurrent reactive control programs 
executing srp activates deactivates parameterizes process modules 
realize structured reactive image processing plans obvious extension augmented interface high level control language low level control processes 
rpl image processing control structures 
robot plans ip routines implemented rpl reactive plan language 
rpl provides conditionals loops program variables processes subroutines high level constructs interrupts monitors synchronizing parallel actions 
plans reactive robust incorporates sensing monitoring actions reactions triggered observed events 
rpl provides concepts crucial realization integration ip routines 
plan statement form plan steps constraints 
steps form tag name subplan tag subplan name name 
constraints form order name tags plan steps 
steps executed parallel constrained 
try rpl control structure run alternative methods parallel 
compound statement succeeds methods succeeds 
success remaining processes terminated 
example program 
follows program segment grabs theta pixel image left camera returning index image 
program segment creates local fluents img id fl done fl 
passes fluents call parameters process module grab image 
module sets img id fl index grabbed image pulses fluent done fl completion 
fluents img id fl done fl grab image camera left size color true grabbed image img id fl done done fl wait done fl fluent value img id fl segment activates module grab image waits image capture complete returns value fluent image id fl 
structured reactive image processing plans reason ip routines implemented plans 
plans control programs executed automatically transformed 
ip pipelines appropriate means representing complex ip routines plans pipelines modular transparent sequencing ip operations explicit 
image processing pipelines data flow programs directed graphs node represents ip operation directed arc represents path data images regions images extracted lines flow 
shows image processing pipeline recognizing corner known item furniture discussed section 
pipeline provided image captured camera predicted coordinates corner image region image line occur considering current uncertainty robot position 
inputs pipeline names predicted line roi spec image 
pipe predicted line roi spec image create roi roi image roi spec detected line confidence value process image image image img op sobel roi roi process image image image img op roi roi recognize line line image line roi conf fig 
image processing pipeline 
line sequence operations 
create roi extracts region specified image provides region named roi outputs 
second pipeline step applies edge detector called sobel region region line algorithm 
recognize line takes region lines compares candidate lines predicted line provided pipeline input 
best match pipeline step confidence line image predicted line outputs pipeline 
image processing pipelines rpl plans 
ip pipelines specified macro image processing pipeline form image processing pipeline pipeline interface pipeline steps connections pipeline connections pipeline interface specifies input output data paths pipeline steps ip operators pipeline connections data paths pipeline steps 
macro image expanded rpl plan contains fluents statement plan statements 
connections implemented shared fluents declared fluents statement ip operator writes fluent takes input 
plan step starts ip operation waits completion 
connections transformed order constraints plan statement pipeline step run steps produce step inputs completed 
image processing details hidden defining procedure takes input output fluents pipeline arguments 
def interp proc find predicted line pred line fl roi spec fl img fl detected line fl confidence fl done 
image processing pipeline controlling image 
piece code shows synchronization ip routines rest robot control system 
valve wheels valve camera try wait time wait 
confidence fl seq find predicted line pred line fl 
done 
wait done avoid destructive cross process interferences process able robot leave current location redirect camera 
done valves semaphores processes order issue particular kinds commands 
process causes robot move place request valve wheels move robot receiving valve release valve completion movement 
robotics vision signal understanding beetz cremers mann important aspect controlling ip routines assignment computational resources ip tasks 
example try statement 
try statement succeeds seconds passed confidence fluent exceeds confidence threshold find predicted line routine completed 
code segment runs find ip pipeline evidence correctly recognized object seconds 
valves wheels camera ensure robot camera moved 
application alternative methods 
apply rpl control structures order combine alternative ip methods example different methods recognizing piece furniture 
instance item distinctive color robot extract similarly colored segments apply operations segments 
different methods applied parallel sequentially method acquires evidence accumulated evidence methods surpasses threshold 
specified rpl control structures try 
failure recovery 
robust control systems deal failures ip routines 
consider routine find predicted line fail furniture moved robot uncertain position piece furniture partly occluded 
plans execute ip routines try detect routines fail signal failures situations 
predicted line signals failure predicted line recognized recognized low confidence 
case failure robust control structures check robot position estimate laser sonar range finders detect possible occlusions recover recognition failures 
tailoring pipelines 
ip parameters robot adjust sensing 
example quality lighting room perceived robot sensors robot know advance room adequately lit 
ip pipelines tailored fit robot particular circumstances environment 
requiring ip routines general applicability reliability applies selection context specific ip routines contexts tailored 
possible ip pipelines plans specific tools provided rpl permit processes project happen robot controller executes infer wrong projected execution scenario perform complex revisions explicitly representing ip routines robot plan enables robot apply various methods simplify vision tasks 
pose specialized vision problems adapt computer vision strategies particular context environment task image execution 
mechanisms revising plans execution described 
recipe modular ip system recipe reconfigurable extensible capture image processing environment system module responsible capture processing visual information controlled modeled 
principal components capture server copies image processing ip server 
capture server lightweight robust process main responsibilities 
stores images captured system facilities fully implemented physical actions robot fully applicable image processing routines 
cameras 
stores important system data configuration information recipe 
supported architectures stored information stored persistently making system restart possible case total system failure 
capture server acts watchdog ip servers restarting reconfiguring processing cause hang crash 
parser module loader dynamically loaded configured modules control messages images cache shared memory pipe fast control loops fig 
ip server design 
ip server forms heart recipe system 
script controlled modular architecture implementation image processing operations pipelines 
ip server loads image processing functionality commands sent controlling 
communication capture server established way shared memory especially images pipes sockets fast control configuration information 
ip server shown 
recipe designed satisfy requirements stability distributed control resource management 
capture server small lightweight process limited clearly defined functionality additionally acts system watchdog 
restarts reconfigures ip servers event partial system failure giving system greater tolerance badly implemented ip modules 
stores relevant system status images central usually persistent location 
criterion distributed control recipe performs ip robot 
run time configuration dependent robot context brief control messages need transferred external controlling processes recipe system 
recipe encourages distributed control 
management available resources recipe essential features 
ip operations largely written efficient possible optimizations system efficiency employing context specific algorithms problem solving 
recipe modules loaded unloaded demand permitting contextual implementation 
employing dynamic linking recipe restricts memory footprint process reduces complexity system code 
related contrast ip systems matlab moment recipe provides restricted dense subset ip operations tailored task hand 
manages resources available robot loading unloading functionality demand monitoring operational status 
consider recipe provide subset functionality offered ip systems manner suited operation autonomous robot 
research active vision area focuses increasing performance robustness ip routines selectively applying special purpose routines extract purposive information image 
recipe focus particular aspects active vision specify subplans perform active ip robot control plan language resource management facilities necessary robust performance scarce resource constraints 
horswill studies specialization methods deriving fast ip methods environmental constraints 
ullman theory visual routines proposes visual perception achieved modular visual routines 
vision signal understanding beetz cremers mann posed simple visual actions small set registers containing visual data 
conjunction fluents analogously considered expressive high level programming language implementation vision routines 
recipe conjuction rpl common system embedded tiered robot control architecture 
modular platform independent ip environment assemble execute ip pipelines 
recipe interface high level robot control system case ip routines plans control system reason 
recipe component design robust lightweight component acts system watchdog restarting reconfiguring failed processes emphasizes recipe focus system robustness 
recipe specialized role ip system running robot 
modular architecture run time configurability give greater configurability recipe able effect conjunction rpl 
number robot control systems tightly integrate ip modules 

best knowledge systems concerned reasoning ip routines symbolic level 
discussion discussion 
discussed task place recognition processing delays tolerable 
version robot office courier hard real time tasks collision avoidance localization handled sensor interpretation systems employ ip 
current research investigating ip tasks people detection gesture detection recognition firm scheduling requirements 
scheduling requirements met fast feedback loops sending asynchronous signals handled rpl 
concerning topic robustness concerned fault tolerance ip routines programs control fault avoidance 
directly address robustness ip algorithms 
aim ensure ip algorithms routines capable detecting success failure high level control system specify appropriate control structures recover failures 
similarly concerned ip algorithms handle uncertainty manner evaluate likelihood results 
sought exploit robot knowledge uncertainty state estimation function probability distribution state estimate provided localization routines select parameterize ip algorithms 
case distribution multi modal handled appropriately rpl ability speculatively concurrently execute different ip methods parameterizations 
course uncertainty give rise incorrect ambiguous ip results 
cases cause planned actions fail robot perceive failures handle correctly 
complex service applications need able reason goal sequencing plan step scheduling 
high level plan language rpl perform necessary transparent embedding ip control system 
developed similar embeddings natural language understanding action planning 

research shown processes general robot control system combined ip transparent way suitable protocol support control abstractions high level language 
represent abstraction lowlevel image processing ip operations domain high level robot control language 
having ip operations integral part control language provides additional flexibility prevents artificial distinction ip sensing actions robot 
addition explicit transparent modular representation ip routines allows application ai plan generation plan revision techniques ip tasks 
implementation ip routines supported underlying plan language provides concurrency event driven execution 
flexible robust execution ip routines autonomous mobile robots possible facilities provided dynamically configurable ip engine 
recipe system fulfills requirements providing additional system robustness flexibility run time resource management 
research focus automatic planning learning ip operations depending robot context exploit modular architecture processing abilities provided recipe 
alami chatila ghallab ingrand architecture autonomy int 
robotics research 
aloimonos weiss active vision international journal computer vision 
bajcsy active perception proc 
ieee 
ballard animate vision artificial intelligence 
beetz burgard fox cremers integrating active localization high level control systems submitted robotics autonomous systems 
beetz mcdermott improving robot plans execution second international conference ai planning systems ed kris hammond pp 
morgan kaufmann 
beetz mcdermott local planning ongoing behavior third international conference ai planning systems ed brian pp 
morgan kaufmann 
bonasso firby gat kortenkamp miller slack experiences architecture intelligent reactive agents experimental theoretical artificial intelligence 
crowley christensen vision process springer 
donald planning multi step error detection recovery strategies int 
robotics research 
horswill analysis adaptation environment artificial intelligence 
kannan blum designing programs check proc 
symposium theory computing 
mcdermott reactive plan language research report yaleu dcs rr yale university 
mcdermott transformational planning reactive behavior research report yaleu dcs rr yale university 
peter michael swain james firby roger kahn environment real time context sensitive active vision proc 
fourteenth national conference artificial intelligence pp 

young open environment image processing software development proceedings spie symposium electronic imaging spie february 
thrun burgard fox hofmann map learning highspeed navigation rhino ai mobile robots case studies successful robot systems eds kortenkamp bonasso murphy mit press cambridge ma 
appear 
ullman visual routines cognition 
robotics vision signal understanding beetz cremers mann 
