spread wide area group communication system yair amir jonathan stanton department computer science johns hopkins university jonathan cs jhu edu building wide area group communication system challenge 
presents design protocols spread wide area group communication system 
spread integrates low level protocols local area networks called ring wide area network connecting called hop 
spread decouples dissemination local reliability mechanisms global ordering stability protocols 
allows optimizations useful wide area network settings 
spread operational publicly available web 

exist fundamental difficulties high performance group communication wide area networks 
difficulties include characteristics loss rates amount buffering performance latency bandwidth vary widely different parts network 
packet loss rates latencies significantly higher variable lans 
easy implement efficient reliability ordering top available wide area multicast mechanisms top local area hardware broadcast multicast 
available best effort wide area multicast mechanisms come significant limitations 
difficulties traditional group communication community provide adequate solutions wide area networks years solutions local area networks developed 
bulk today addresses wide area network settings comes networking community starting best effort ip multicast building reliability services ordering weaker semantics group communications 
describes spread group communication system definitely coming group communication community point view 
implements techniques design features different techniques provide reliability scales dissemination flow control wide area networks 
group communication system extensive accurate knowledge system protocols precise deliver better performance general networking protocols 
improvement comes cost 
spread node scale number users 
deployed wide area scale number groups state needs maintained network routers group 
spread group communication system addresses difficulties encountered wide area networks main structural design issues spread allows different low level protocols provide reliable dissemination messages depending configuration underlying network 
protocol different tuning parameters applied different portions network 
particular spread integrates low level protocols local area networks called ring wide area network connecting called hop 
spread uses daemon client architecture 
architecture benefits important wide area settings resultant ability pay minimum necessary price different causes group membership changes 
simple join leave processes translates single message 
daemon disconnection connection pay heavy cost involved changing wide area routes 
network partitions different local area components network requires heavy cost full fledged membership change 
luckily strong inverse relationship frequency events cost practical system 
process daemon membership correspond common model lightweight groups heavyweight groups rg 
spread decouples dissemination local reliability mechanisms global ordering stability protocols 
decoupling allows messages forwarded network immediately despite losses ordering requirements 
permits pruning data messages sent minimal necessary set network components compromising strong semantic guarantees provided typical group communication systems 
particular spread supports extended virtual synchrony model 
spread configurable allowing user control type communication mechanisms layout virtual network 
spread provides priority channels application 
priority channels give expedited service messages sent preserving ordering guarantees requested 
believe priority service implemented group communication system 
spread supports open group semantics sender member group order multicast 
semantics useful practice 
attempt publishing design protocols spread group communication toolkit available research practical projects 
toolkit supports cross platform applications ported unix platforms windows java environments 
related evolves authors previous totem transis group communication systems research multicast group communication systems ip multicast related research 
group communication systems lan environment developed history isis br system systems transis horus rbm totem rmp newtop ems 
systems explored different models group communication virtual synchrony bj extended virtual synchrony 
newer area focuses scaling group membership wide area networks 
systems added type support wide area group communication multi lan group communication 
hybrid rfv discusses difficulties extending lan oriented protocols dynamic costly wide area setting 
hybrid system group communication application switch token symmetric vector ordering algorithm depending communication latency applications 
system provides total order whichever protocol efficient participant hybrid handle partitions network provide support orderings total 
multi ring totem protocol extension single ring totem protocol allows rings interconnected gateway nodes forward packets rings 
system provides substantial performance boost compared single ring totem protocol large lan environments keeps basic assumptions low loss rates latency fairly similar bandwidth nodes limit applicability wide area networks 
totally ordered multicast protocol rgs scales ways protocol executed processes receiving message message size scales size destination group supports open groups 
protocol explicitly consider issues heterogeneous wide area environment requires large number messages sent order message probably unsuitable high latency limited bandwidth setting wide area networks 
transis wide area protocols pivots nabil provide ordering delivery guarantees partitionable environment 
protocols hierarchical model network level hierarchy partitioned small sets nearby processes set static representative member higher level hierarchy 
messages contained subtree sender specifies subtree 
ip multicast actively developed support internet wide unreliable multicasting scale millions users 
reliable multicast protocols run ip multicast developed srm rmtp lp local group concept gg 
development reliable multicast protocols ip multicast focused solving scalability problems ack nack implosion bandwidth limits providing useful reliability services multimedia isochronous applications 
protocols srm developed localized loss recovery protocols 
srm uses randomized timeouts backoff request missed data send repairs minimizes duplicates enhancements localize recovery ttl field ip multicast request lost packet nearer nodes expand request close 
variations localized recovery administrative scoping separate multicast groups recovery discussed 
reliable multicast protocols distribution tree localize retransmits local group leader root subtree main tree 
spread additional information exact dissemination messages copies buffered precise local recovery gets packet nearest source 
gg reliable multicast protocol provides local recovery ring wide area recovery done ack tree 
similar design uses ring protocol local reliability dissemination building multicast tree wide area reliability dissemination 
analyzes predicted performance protocol shows better protocols utilizing ring tree 
validates provides experimental support 

system architecture spread system daemon client model generally long running daemons establish basic message dissemination network provide basic membership ordering services user applications linked small client library reside network connect closest daemon gain access group communication services 
model opposed having membership ordering services provided client application important wide area setting daemons minimize number membership changes expensive system carry wide area links provide basic stable infrastructure build effective widearea routing reliability ordering 
cost level daemon client model interference different client applications daemon configuration possible discussed rg 
minimized ability run multiple daemon configurations serving separate applications dissemination model sends data messages daemons need minimizes cost extra active daemons application 
pay cost additional context switches inter process communication 
think benefits outweigh costs 
spread highly configurable allowing user tailor needs 
spread configured just daemon world daemon machine running group communication applications 
best performance faults achieved daemon machine fewer daemons decreases cost recovery 
principle spread daemons placed network routers cost memory buffers router reliability important messages improved 
ip multicast hardware multicast hardware broadcast routing tree site routing tree site routing tree site site routing tree shown clarity reasons 
wide area network configuration spread 
sample network distinct sites shown geographically dispersed different cost links 
site defined collection machines potentially reach machines message hardware broadcast hardware multicast ip multicast 
site tens machines impact scalability spread system operations local site scale number sites total number machines involved 
daemons participating spread configuration know complete potential membership started knowledge actual membership active daemons gathered dynamically operation 
site daemon acts representative site participating wide area dissemination 
representative determined current membership local site hardwired 
network hop ring hop udp ip uni broad mult cast routing transport membership session groups spread daemon sp lib application sp lib application sp lib application spread architecture 
spread architecture 
user applications link sp lib java class provides entire client interface described 
connection sp lib daemon reliable point point connection ipc network 
session groups modules manage user connections manage process group memberships translate daemon membership changes process group membership changes 
shaded area depicts internal protocols daemon 
details protocols described section 
highlights multiple queues exist session transport modules session 
allows priority handling 
routing module computes routing trees data network module 
transport module consults routing module determine links hops ring message sent 
instantiations hop module may exist represents edge routing trees 
ring module provides dissemination reliability local site daemon active site 
hop ring instances may destroyed instantiated membership changes 
spread supports extended virtual synchrony model group membership 
evs handle network partitions re merges joins leaves 
provides types reliability unreliable reliable ordering unordered fifo causal agreed stability safe services application messages 
implementation site daemon membership discussed 
global orderings stability causal agreed safe provided groups 
messages sent different clients different groups joined groups receive messages ordering guaranteed received different groups 
fifo ordering provided connection daemon acting separate fifo source ordering purposes 
global orderings fifo order preserved groups 
wide area networks reliable delivery useful principle latency penalty compared unreliable delivery delivered soon received 
fifo delivery useful message blocked delivered messages prior application connection missing 
sp connect char spread name char private name int priority int group membership mailbox mbox char private group sp disconnect mailbox mbox sp join mailbox mbox char group sp leave mailbox mbox char group sp multicast mailbox mbox service service type char group int mess type int mess len char mess sp receive mailbox mbox service service type char sender max group name int max groups int num groups char groups max group name int mess type int endian mismatch int max mess len char mess sp error int error spread application programming interface 
complexity spread hidden simple complete programming api lan oriented services wan services application changes provides clear model group communications 
spread api shown 
application written functions sp connect sp join sp leave sp multicast sp receive complete api allows advanced features scatter gather sends receives multi group sends polling connection comparing group ids 
api experience gained transis project experience spread 

protocols overview core spread system dissemination reliability ordering stability protocols 
separate protocol layers provide services spread 
network layer layer comprised components link level protocols provide reliability flow control packets 
spread implements protocols hop protocol point point connections ring protocol multicast domains 
protocol optimized target domain 
routing constructs network hops rings current membership connected daemons knowledge underlying network 
constructed network implements different dissemination tree rooted site 
transport layer layer provides message delivery ordering stability global flow control 
transport layer operates active daemons system 
building routing tree rooted site important reasons 
clear having optimized tree source site efficient shared tree 
spread meant scale tens sites containing tens daemons cost computing trees storing forwarding tables manageable 
benefit enormous especially state routing information maintained nodes 
important remember overhead building trees amortized long lifetime site membership 
contrast multicast routing protocols assume tree built needed group membership changes common cost constructing tree paid quickly group membership changes way invalid 
utilize underlying network efficiently possible necessary send full packets possible 
order utilize different packet sizes able pack multiple user messages control packets network packet link level protocols act packets objects vary size bytes bytes 
packet sent network packed objects fit 
improve readability protocols described terms packets 
practice link level reliability flow control done object 
packet dissemination reliability basic service comprehensive multicast communication protocol dissemination data messages receivers interested 
application level message sent group range size bytes data kb 
spread fragment reassemble large messages fit normal packet size underlying network pack small messages full packets possible introducing unacceptable latency 
spread builds multicast dissemination trees site active membership forming node tree leaf interior 
key observation general purpose multicast routing stability routing trees important achieve workable reliable routing 
spread systems separation membership levels enables core routing stable configuration sites individual application membership groups highly dynamic 
actual creation metrics decide connect sites efficient trees investigated 
currently trees built applying dijkstra shortestpath algorithm current dynamic membership underlying complete graph weights defined statically 
routing trees constructed forwarding data packets trees principles non blocking packets forwarded despite loss packets ordered earlier 
fast retransmits immediate parent link loss occurred handles retransmission lost packets 
pruning packets forwarded child links tree members interested packet 
non blocking fast retransmit properties provided hop protocol described pruning provided routing lookup code filters child links sites links member groups packet destined 
resolution sites interested packet packet created source site 
decision slightly conservative possibly non interested sites may get packet site interested guaranteed get 
comes effect period application asked join leave group join leave gone effect 
provide ordering stability guarantees aggregated control information sent sites 
packet dissemination reliability flow control provided link level protocols hop protocol point point connections ring protocol multicast broadcast domains described 
req req time message arrived message transit message lost 
data messages generated site scenario demonstrating hop protocol 
hop protocol hop protocol operates unreliable datagram service udp ip 
core idea hop protocol provide lowest latency possible transferring packets networks consisting hops handling loss packets hop hop basis forwarding packets immediately order 
cases possible run spread protocol routers connect sites involved group communications advantages higher 
hop protocol uses negative request retransmission packets positive determine sequence value removed sender buffers 
flow control provided token leaky bucket regulator limits number packets sent time limits maximum rate 
addition sliding window limits total outstanding packets link prevent arbitrarily long delays getting missing packets 
demonstrates hop protocol 
hop link bi directional side send 
sender side uses local variables highest linkseq highest link seq attached packet far 
aru link sequence aru reported link 
cur window current size sliding window flow control 
receiver variables highest seq highest sequence value seen link far 
link aru sequence value packets received 
retransmit list linked list sequence values missed waiting retransmit sender 
variables sender receiver sides pkt cnt number packets sent received link ack sent 
max pkt btw ack tuning value limiting packets sent received sending link ack 
types packets sent hop link data portion user data message internal spread message created higher layer 
ack copy receivers current link aru value senders highest linkseq 
nack list sequence values receiver missed resent 
acks nacks limited link originate 
normal operation sender side hop link send data packets occasional link ack receive link acks receiver side 
continues long receiver side keeps sender size sliding window packets lost 
receiver gets packet higher sequence highest seq missed packets adds sequence values highest seq received object sequence retransmit list 
sets timer wait short time see missing packets just delayed reordered network timer expires packets retransmit list link nack sent requesting packets 
link nack resent current list missing packets time timer expires missing packets received 
receiver keep count times sequence value requested resent 
count gets certain value receiver declares sender dead initiates membership change 
membership change occurs receiver received data sender important eliminate failure receive problem system forced block eventually due buffering 
sender receives link nack adds requested packets queue data sent receiver deletes nack 
retransmitted packets included sent data flow control calculations 
presents pseudo code hop protocol 
ring protocol ring protocol active daemon site 
note site collection machines potentially reach machines message hardware broadcast hardware multicast ip multicast 
member unique identifier static crashes restarts 
ring protocol modification ring protocol hop protocol 
totem transis 
totem transis ring protocol provide reliability global flow control global ordering 
spread uses ring protocol main purpose packet level reliability flow control local site secondary purpose message level stability members hop send data linkid update token bucket hop token available bucket hop packet assigned unique link seq value stored link linkid open pkts 
send linkid pkt data available hop event queue hop send data linkid hop send ack linkid ack link aru link linkid link aru ack link max sent link linkid highest linkseq send linkid ack event queue hop send ack linkid hop send nack linkid add link seq values retransmit list nack req list send linkid nack event queue hop send nack linkid hop recv recv pkt case pkt type ack link linkid aru remove packets linkseq link linkid aru ack link aru link linkid highest seq add sequence numbers highest seq link max sent retransmit list event queue hop send nack linkid nack nack num req req linkseq nack req list pkt link linkid open pkts req linkseq queue packets send linkid pkt data pkt link linkid pkt count link linkid pkt count event queue hop send ack linkid link linkid pkt count max count acks send link ack linkid msg frag link seq link linkid highest seq right time packet drops link linkid link aru link linkid highest seq link linkid link aru link linkid highest seq msg frag link seq duplicate delayed packet remove msg frag link seq retransmit list update lowest missing linkseq duplicate packet return null lowest missing linkseq link linkid link aru link linkid highest seq event dequeue hop send nack linkid msg frag link seq link linkid link aru lowest missing linkseq missed packets add seq numbers highest seq msg frag link seq retransmit list link linkid highest seq msg frag link seq event queue hop send nack linkid return packet return packet upper layers call event queue hop send data linkid data queued send 
ring 
crucial point token functions 
token circulation ring aru calculation algorithm updates packet message aru fields 
paying complexity latency protocol get message level knowledge 
contrast totem transis global ordering flow control provided transport layer protocol described 
limits usage ring protocol tasks effective local area ordering reliability dissemination 
extreme entire collection daemons configured site connected routed ip multicast 
configuration take advantage wide area reliability protocols poor performance 
rotating token fields type regular membership changes 
link seq highest sequence number reliable packet sent ring 
link aru sequence number reliable packets received members ring 
control link discard local packet 
flow control count number packets sent ring rotation token including retransmits 
rtr list list sequence values previous token holder asking retransmitted 
site seq highest sequence number reliable message originating ring 
sequence local site combined site id provides unique identifier message sent system 
site lts highest lts value seen member ring far 
provide causally consistent ordering agreed safe messages 
site aru lts number members site received messages lts value lower 
site aru modifier identifier site member modified site aru value 
receiving token daemon handle retransmits requested previous token holder process messages received client applications send packets limit imposed flow control update token new information send daemon ring 
sending token daemon attempt deliver messages client applications 
message processed system new site seq site lts value assigned counters incremented 
reliable packet sent unique link seq assigned counter incremented 
update link site aru values token daemon compares local aru values token local value token value lowered local value site aru modifier field set id daemon 
local value equal higher token value daemon raises token value site aru modifier daemons id site aru modifier zero indicating daemon lowered round 
members ring calculate highest aru value locally lesser just calculated token aru value token aru value previous round token 
ring provides flow control limiting number packets member send rotation token 
number packets sent entire ring round limit individual member send round tuning parameters 
daemon simply sends lesser individual limit total limit minus value flow control field plus sent time 
presents pseudo code ring protocol 
ring handle token token drop token malformed duplicate wrong size 
link linkid highest seq answer retransmit requests token update values assign site values new application messages calculate flow control ring send data linkid update tokens flow control fields add link seq values am missing token req list update link linkid aru update token link aru token set aru token link seq token site seq token site lts token site aru token site aru modifier send token daemon ring calculate link linkid ring aru token link aru token link aru discard packets link seq calculate site aru highest aru site token site aru token site aru copy token token deliver mess ring protocol 
message delivery ordering stability transport layer upper layer protocol provides required guarantees message delivery ordering stability service semantics 
transport layer uses network layer dissemination local flow control packet reliability 
message spread typically pass links sent daemons 
presence faults transport protocol daemon keeps copy complete messages sent received stable entire system provide retransmissions messages missed membership change triggered faults 
recovery protocols case faults discussed 
ordering stability provided symmetric transport level protocol run active daemons 
uses unique sequence values assigned message originating site unique id assigned site logical clock defined happened relation provide total order messages system calculate messages stable 
stability defined message daemon knows relevant daemons received removed system 
message assigned values dissemination site id site sequence 
lamport time stamp lts 
session sequence 
message completely ordered strictly information contained message 
logical clocks sequence values substantial benefit completely decentralized making recovery partitions merges manner consistent evs possible 
born ordered messages agreed safe delivery achieved network partitions 
unreliable messages separate session sequence need support provided reliable messages 
dropped want loss interfere reliability protocols 
reason sequence value sure daemon deliver duplicate copies message application way identifying specific unreliable message daemon reassemble packets 
portion unreliable message arrive specific time piece message arrived portions arrive discarded 
unreliable messages sent daemon token local ring flow control issues 
unreliable messages delivered soon full message arrives take part main delivery protocol described 
reliable messages network layer reliability 
link guarantees reliable transport bounded time absent processor network faults 
reliability provided case faults eventually packet hops rings daemons need 
reliable messages delivered soon complete message received provide ordering guarantees 
delivery delayed due messages 
fifo messages provide reliability guarantee reliable messages 
guarantee delivered messages session lower session sequence values 
provide session fifo ordering spread incurs cost small amount memory session 
active system sessions cost small compared required message buffers may yield considerable benefit message latency 
agreed messages delivered order consistent fifo traditional causal ordering 
order consistent groups 
provide agreed order local daemon delivers messages lexicographic order lts site id fields message 
cost totally order message daemon received message pseudo update message site values indicate message lesser lts site id transmitted 
spread minimizes cost requires message site daemon 
potentially faster method requires sequencer introduces centralized resource 
sequencer provide evs presence network partitions 
safe messages delivered order consistent agreed ordering 
stability determined hierarchical manner 
site uses site aru field local ring generate site wide upto value 
value represents local site stability status 
aru value propagated sites network layer 
minimum aru values sites determines global message stability 
safe messages equal value delivered delivered messages equal discarded 
spread employs techniques optimize calculations required orderings hash tables multi dimensional linked lists caching 
details optimizations scope due lack space 

implementation practical experience spread system implemented daemon written ansi posix specified interfaces ported number unix systems solaris irix linux sunos windows nt library written java linked client application lines code 
library supports multi threaded client applications quite small kbytes depending architecture 
sample applications documentation system provided 
currently support versions spread daemon 
robust production version publicly available web 
second research version described 
versions share library interface service semantics 
applications may interchangeably 
protocols publicly available version spread limited support wide area settings described 
particular employ adapted ring structure direct point point dissemination sites multiple trees 
research version robust production version protocols described implemented 
version test bed current experiments membership flow control 
conducted experiments internet test correctness implementation get preliminary measurements performance 
testbed consisted sites johns hopkins university maryland university california santa barbara rutgers university new jersey connected public internet 
sites consisted machines ranging sparc ultra workstations running solaris operating system pentium pro ii workstations running linux operating sytems 
tests machines normal user load changes operating system 
average conducting experiments multicasting kbyte messages receivers located site throughput system bits second 
values varied slightly depending site source receivers 
logical network optimal dissemination trees happen 
routing configured non optimally ucsb forwarding hopkins rutgers throughput showed decrease 
evaluate gains achieved spread architecture ran tests production version spread described 
version average throughput network bits second 
amounts gain times new architecture 
way evaluate benefit new architecture look configuration sites hopkins ucsb connected internet 
isolates limitations ring architecture high latency links 
case difference greater bits second vs bits second amounts times improvement 
experimental results reinforce observations gg 
experiments showed local area network wide area links support different transfer rates dissemination reliability decoupled 
local traffic supported higher rates wide area traffic 
experiments showed different hop links supported widely varying throughput 
result pruning effective 
local area networks versions spread achieve excellent performance comparable basic transis totem protocols 
note experiments preliminary adequate chance tune new protocols 
spread toolkit research projects prototype military system classes undergraduate graduate students 
spread record connectivity data machines connected different locations internet 
data gathered months evaluate different quorum systems practical setting aw 
spread serves group communication subsystem web replication system shaw 
single web server replicated clusters identical server cluster resides different part internet 
spread utilized disseminate load information web servers track membership 
allows balance load different clusters 
researchers usc information studies institute spread implement group security protocols stw 
jhu applied physics lab collaboration naval surface warfare center spread advanced prototype combat control system named hiper 
main reasons group communication hiper fold efficient reliable multicast dissemination synchronized state transfer 
enable fault tolerance services maintain real time response events system experiences server failures 
project uses cross platform support spread inter operate solaris nt machines 

spread wide area group communication system 
spread architecture allows different link level protocols 
ring protocol lans hop protocol wan integrated site routing trees pruning provide high performance reliable dissemination network 
efficient global ordering stability protocols implemented top network 
preliminary experiments validate usefulness techniques utilized system 
spread operational publicly available web research development projects inside outside group 
bibliography amir 
replication group communication partitioned network 
ph thesis institute computer science hebrew university jerusalem jerusalem israel 
chockler dolev keidar 
scalable group membership services novel applications 
appear dimacs book series proceedings workshop networks distributed computing 
edited michael merritt nir shavit 
amir dolev kramer malki 
transis communication subsystem high availability 
digest papers nd international symposium fault tolerant computing systems ieee computer society press los alamitos ca 
agarwal moser melliar smith 
totem multiple ring ordering topology maintenance protocol 
acm transactions computer systems may 
amir moser melliar smith agarwal 
totem single ring ordering membership protocol 
acm transactions computer systems 
nov 
aw amir wool 
evaluating quorum systems internet 
proceedings th annual international symposium fault tolerant computing june 
bj birman joseph 
exploiting virtual synchrony distributed systems 
th annual symposium operating systems principles nov 
br birman van renesse 
reliable distributed computing isis toolkit 
ieee computer society press march 
ems macedo shrivastava 
newtop fault tolerant group communication protocol 
proceedings th ieee international conference distributed computing systems vancouver canada may june 
ieee computer society press los alamitos ca 
floyd jacobson liu mccanne zhang 
reliable multicast framework light weight sessions application level framing ieee acm transactions networking dec pp 

gg gu garcia luna aceves 
new error recovery structures reliable networking 
proceedings sixth international conference computer communications networking los vegas nevada sept 
efficient ordering messages wide area networks 
masters thesis 
institute computer science hebrew university jerusalem jerusalem israel 
hofmann 
generic concept large scale multicast 
proceedings international zurich seminar digital communications zurich switzerland 
springer verlag 
lamport 
time clocks ordering events distributed system 
communications acm 
lp lin paul 
rmtp reliable multicast transport protocol 
proceedings ieee infocom 
march 

moser amir melliar smith agarwal extended virtual synchrony 
proceedings ieee th international conference distributed computing systems poznan poland june 
ieee computer society press los alamitos ca 
rbm van renesse birman maffeis 
horus flexible group communication system 
communications acm apr 
rfv rodrigues fonseca 
dynamic hybrid protocol total order large scale systems 
selected portions published proceedings th international conference distributed computing systems hong kong may 
rgs rodrigues guerraoui schiper 
scalable atomic multicast 
published proceedings seventh international conference computer communications networking 
lafayette louisiana oct shaw shaw 
low latency high throughput web service replication 
masters thesis department computer science johns hopkins university baltimore maryland 
stw steiner tsudik waidner 
cliques new approach group key agreement 
proceedings th international conference distributed computing systems amsterdam netherlands may 
montgomery kaplan 
high performance totally ordered multicast protocol 
theory practice distributed systems international workshop lncs sep 
