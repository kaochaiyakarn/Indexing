opal single address space system bit architectures jeff chase hank levy baker harvey ed lazowska department computer science engineering university washington seattle wa appearance architectures flat bit virtual addressing opens opportunity reconsider way operating systems virtual address spaces 
building operating system called opal wide address architectures 
key feature opal single global virtual address space extends data long term storage network 
outline case single virtual address space model addressing protection opal discuss problems opportunities raised approach 
opal project investigation effect wide address architectures structure operating systems applications 
premise generation workstations servers processors bit data paths sparse flat bit virtual addressing 
mips mip digital alpha family examples trend wider addresses 
goal determine software best exploit large virtual address spaces emerging architectures 
view move bit addressing qualitative shift far significant move bit architectures 
bit architectures remove basic addressing limitations driven operating system design decades consider full bit address space consumed rate megabytes second years 
bit architectures virtual addresses scarce resource multiply allocated order supply executing programs sufficient name space 
small address spaces reason traditional model virtual storage dominates today operating systems program executes private virtual address space 
building bit operating system called opal single virtual address space maps primary secondary storage network chase chase 
simply means virtual address usage coordinated piece shared data named unique address programs access 
protection independent global name space executing program address piece data system programs execute protection domains restrict access memory 
opal protection domain ways analog unix process 
example typically domain executing application containing private data threads rpc connections domains 
difference opal domain private set access privileges globally addressable pages private virtual naming environment 
opal domains grow shrink overlap arbitrarily sharing transferring page permissions 
special hardware support opal assumed required 
believe opal run efficiently dec alpha mips processors 
single address space operating systems benefit hardware optimized way virtual memory 
supported part national science foundation 
ccr ccr mip washington technology center digital equipment systems research center engineering external research program graduate engineering education program 
global address space 
common virtual address space eliminate obstacles sharing cooperation inherent traditional unix model processes private virtual address spaces communicating messages byte stream files 
basic problem systems stored virtual address pointer meaning boundaries process stored information containing pointers easily shared pointers may interpreted differently process uses data 
single address space system separates naming protection virtual addresses globally unique interpretation 
simplifies sharing ways 
addresses passed domains messages shared data byte data named virtual address protection domain permission access 
second domain import data containing embedded virtual addresses risk name conflict data domain 
uniform virtual addressing single address space systems effects obvious subtle 
fundamental claimed benefits ffl shared memory easier 
linked data structures meaningful shared regions 
creative shared memory reduce need explicit communication programs executing separate protection domains 
important communication mechanisms popular today rpc data copying protection domain switches increased cost relative integer performance processors ousterhout anderson 
ffl hardware memory protection cheaper flexible 
protection domains created efficiently system freed setting new address space domain 
protection needed introducing nonuniform naming shared code data allows complex programs decomposed multiple domains share data structures 
opal possible create domain execute procedure call passing arbitrary data structures input receiving arbitrary structures output 
ffl persistent storage integrated global virtual address space 
single level store allows programs store data structures disk expense complexity converting pointers separate format 
systems today support mapped files pointers preserved addresses assigned file unused domain file 
single address space system guarantee property fully general way 
argument shared memory may sound convincing 
conventional wisdom says shared memory compromises isolation claim uses shared memory inherently safe expensive mechanisms cooperation 
domains limit interactions restricting scope shared region way 
memory shared sequentially transferring access permissions programs verify data 
asymmetric trust relationships common exploited 
example server domain trusts clients client trust server degree servers may pass data memory read clients write directly client private memory 
similarly child domain trusts parent parent fully trusts child 
believe improved support sharing storage data structures useful integrated software environments difficult build private address space systems 
example cad systems structured groups tools operating common data structure various ways editors design verifiers simulators 
opal system section opal model virtual storage describe benefits 
focus opal protection handling shared code data avoiding aspects system execution structures storage management cross domain control transfers rpc 
basic model threads executing protection domains making synchronous rpc calls domains 
threads executing domain protection identity 
thread create new protection domain attach code data start threads 
threads synchronization primitives implemented standard runtime library user level approach suited handling synchronization shared persistent data structures 
opal designed distributed environment composed nodes connected network 
node contains physical memory processors attached memory possibly longterm storage disk 
assume processors homogeneous 
global address space extended network placing servers node maintain partitioning address space ensure global uniqueness allow data located virtual address 
problems similar faced systems distributed name management 
virtual segments addressing simplify access control virtual address assignment global address space partitioned virtual segments composed variable number contiguous virtual pages contain related data 
segment occupies fixed range virtual addresses assigned segment created disjoint address ranges occupied segments 
protection domain complete memory segment establish access segment explicit attach operation 
domains attached segment share physical copy data node 
memory fully qualified flat virtual address domain sufficient privilege operate linked data structures segment name conflicts pointer translation 
pointer structures span segments different access controls placed different parts connected data structure 
domain special permission attach segment 
segments named capabilities capabilities amoeba system mullender tanenbaum passed protection domains shared persistent memory 
segment capability confers permission holder attach segment address contents directly load store instructions 
memory segment reflected back domain segment fault handled standard runtime package 
segments attached dynamically response segment faults useful application navigating pointer graph spanning multiple segments 
segments attached eagerly application anticipate storage resources needs 
case segment faults trap report stray memory 
persistent memory persistent segment continues exist attached domain 
recoverable segment persistent segment backed nonvolatile storage survive system restarts 
opal segments potentially persistent recoverable 
persistent virtual memory viewed replacement traditional filesystem recoverable segments share characteristics mapped files 
policies managing persistence recovery vary segment type scope prototype mechanisms quite primitive 
persistent segments assigned virtual address ranges way segments opal supports true single level store uniform addressing data long term storage 
access persistent data transparent explicit operations may commit flush modified data segments strong failure recovery semantics 
domain name segment address piece data lies segment attached 
essence allows pointers files file mapped specifying symbolic name simply dereferencing pointer 
symbolic name space data exists shared virtual address space form name server associates symbolic names segment capabilities arbitrary pointers 
code modules executable code resides persistent segments called modules contain group related procedures 
module pure static assumptions load address data operates 
linking utilities modules pure expressing private static data offsets base register 
pure modules statically linked global address space assigned address 
distinct benefits global linking code modules 
domains dynamically load attach modules risk name conflicts code overhead linking runtime 
need know domain creation time code run domain domain call procedure access simply knowing address code compiled domain activated 
example domain call procedure pointers passed shared data 
dynamic loading allows parent choose create new protection domain child longer necessary create new protection domains trusted programs simply statically linked assume private name space 
second benefit global linking pure modules freely shared domains 
comparable support shared libraries private address space systems requires dynamic linking indirect addressing linkage tables 
reclamation addressing model permits encourages sharing system cope difficulty managing sharing 
example clear data deleted single address space system 
believe existing approaches reclamation applicable 
opal track merely provides hooks allow servers runtime packages manage shared segments plug reclamation policies 
prototype places active passive counts segment provides means clients manipulate counts protected way 
client responsibility runtime package language implementation counts appropriately 
clients resulting policy exactly process systems segment deleted iff symbolic names name server 
course clients may misuse counts prevent storage reclaimed 
accounting problem 
approach reflects view reclamation continue language level knowledge pointer structures application level knowledge usage patterns deletion data explicit user command 
system promises domains harm reclamation errors mutually trusting 
mean issue reclamation belief support simple useful sharing patterns built relatively easily 
single mapping 
alternative global virtual address space reserve regions private address spaces mapping shared data 
example virtual addresses saved directly mapped file processes file agree map address 
dynamic sharing patterns supported system applications coordinates address bindings 
solution buys benefits single address space sacrificing private address spaces 
fact original proposal global addressing bit architectures suggested hybrid approach chase levy 
abandoned hybrid approach reasons mix shared private regions introduces dangerous ambiguity virtual memory hardware software continue support multiple sets address translations 
pure single address space approach forces confront effects eliminating private address spaces altogether 
interesting issues handling full global allocation address space linking shared address space handle private static data shared code implications discarding unix fork primitive assumes private address spaces effect existing programs losing contiguous address space abstraction 
related cedar swinehart predecessor pilot redell single virtual address space hardware supported protection domain 
systems hardware memory protection relied solely defensive protection name scoping type rules programming language 
proposal generalizes model multiple protection domains 
term uniform addressing introduced psyche scott single virtual address space shared multiple protection domains 
psyche uses cooperating protection domains primarily means separating different components single parallel application different models parallelism different scheduling needs 
interested general sharing relationships leading differences system abstractions 
importantly extend uniform addressing encompass data long term storage multiple autonomous nodes network 
benefits claimed context independent addressing opal apply equally non persistent storage psyche 
segmented systems multics daley dennis support uniform sharing degree 
phase address translation segmented architectures concatenates global segment identifier segment offset yielding long form address global virtual address space 
segment identifier retrieved vector segment registers associated current domain 
domains define local view portions global address space overlaying global segments private segment registers 
uniform addressing systems subject restrictions pointers supported multiple pointer forms treated differently applications software coordinate segment register usage create illusion single address space 
hewlett packard precision lee differs segmented architectures allows applications specify long form virtual addresses directly 
long form pointer dereference expensive software uses segmented addressing 
capability architectures organick levy support uniform sharing data structures 
possible achieve benefits conventional page hardware problems common capability systems restrictive object oriented data model performance lack support distribution 
status currently prototyping opal unmodified mach kernel bit mips machines 
prototype consists standard runtime libraries threads segment fault handler mach server implements opal kernel abstractions crew linking bootstrap utilities 
opal protection domains segments mapped server mach task memory object abstractions 
prototype environment explore ways shared address space improve structure performance applications operating system 
long term goal implement single address space kernel explore effect single address space operating system kernel mechanisms 
anderson anderson levy bershad lazowska interaction architecture operating system design 
proceedings fourth conference architectural support programming languages operating systems pages april 
chase levy chase levy supporting cooperation wide address computers 
department computer science engineering technical report university washington march 
chase chase levy baker harvey lazowska bit virtual address space 
technical report university washington department computer science engineering february 
chase chase levy baker harvey lazowska lightweight shared objects bit operating system 
technical report university washington department computer science engineering march 
daley dennis daley dennis virtual memory processes sharing multics 
communications acm may 
britton chao conrad ladd leary madden meyer rajagopalan mhz bit dual issue cmos microprocessor 
international solid state circuits conference february 
chase eggers architectural support single address space operating systems 
technical report university washington department computer science engineering march 
lee lee precision architecture 
ieee computer pages january 
levy levy capability computer systems 
digital press bedford massachusetts 
mip mips computer systems sunnyvale ca 
mips microprocessor user manual edition 
mullender tanenbaum mullender tanenbaum design capability operating system 
computer journal 
organick organick programmer view intel system 
mcgraw hill 
ousterhout ousterhout aren operating systems getting faster fast hardware 
proceedings summer usenix conference pages june 
redell redell dalal lauer lynch mcjones murray purcell pilot operating system personal computer 
communications acm february 
scott scott leblanc marsh multi model parallel programming psyche 
proceedings second acm sigplan symposium principles practice parallel programming pages march 
swinehart swinehart zellweger beach hagmann structural view cedar programming environment 
acm transactions programming languages systems october 
