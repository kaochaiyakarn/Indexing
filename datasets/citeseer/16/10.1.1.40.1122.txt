slam calculus programming secrecy integrity nevin heintze bell laboratories lucent technologies mountain avenue murray hill nj usa nch bell labs com jon riecke bell laboratories lucent technologies mountain avenue murray hill nj usa riecke bell labs com slam calculus typed calculus maintains security information type information 
type system propagates security information object forms object creators readers object indirect creators readers agents flow control actions agents influence influenced content object 
prove type system prevents security violations give examples power 
build system manipulates stores information secrecy integrity preserved 
information example contain employee salaries tax information social security numbers involve data integrity essential global system security unix tm passwd file database public keys 
solution provide secure persistent store controls access location store maintain access control lists specify may read write location 
addresses part problem trace security information computation 
example privileged user write program reads secret location copies contents public location 
trust central usability system user shares secrets trust intentions 
trust competence may release secrets accidentally result programming error 
alternative secure persistent store associate security data objects locations track security computation runtime 
object come equipped security information specifies access rights capability 

track flow information build new objects old 
example secret string concatenate string treat new string secret 
scheme problems 
explicitly tracing security information computation expensive 
second system guarantee security information forged 
address problems annotating programs information flow levels static analysis system rejects programs leak information 
example view program black box output secret inputs 
similarly view program output having higher integrity inputs 
approach tracing information flow thoroughly explored security literature 
unfortunately classic information flow systems data quickly floats highest level security 
example consider program takes input string representing user id string representing user password output object built security level entire object security level appropriate user passwords password information may small component show programming language provide finer grained control security 
vehicle study core functional programming language called secure lambda calculus slam calculus 
focus role strong static typing 
assume programs compiled trusted compiler enforces type discipline backdoors inserting executing unchecked code operations direct access modification raw memory locations 
types slam calculus security information type information 
feature allows accurate flexible security information attach different levels security different components object 
instance passwd list password hashes come higher security components records 
security information takes forms readers creators indirect readers indirect creators 
intuitively agent reader object order inspect object contents 
agent creator object constructs 
agent indirect reader object may influenced object contents 
agent indirect creator object may influence object construction 
example consider statement partial information available variable agent read find partial information indirect reader statement executed agent require read access creator content 
created third agent indirect creator content 
readers indirect readers specify object secrecy finds object creators direct creators specify integrity responsible object 
readers creators capture access control indirect readers indirect creators capture information flow 
conjunction higher order functions rich underlying type structure records sums security forms provide flexible basis controlled sharing distribution information 
example higher order functions build complex capabilities 
system ability read function right apply 
specifying set readers indirect readers functions additionally restrict capability shared specified group agents 
incorporating access control information flow type system adds flexibility 
illustrate utility having suppose just security levels high security low security type called users list containing strings direct readers indirect readers ignore direct indirect creators write direct readers indirect readers type definition ml style syntax look type users list string suppose want look names value type users return true name list 
write code follows fun lookup users name false bool lookup tail users name name true bool lookup tail name type system guarantees high security agents write lookup function code branches values strings list 
low security agents call lookup function get direct access strings held list 
information flows strings boolean output labeled indirect readers strings low security program type correct 
direct readers determine object revealed indirect readers 
course reveal information agents indirect readers 
extreme direct reader reveal object indirect readers 
agent indirect reader object direct reader information agent finds object direct reader 
simplify presentation describe slam calculus stages 
section define purely functional core slam calculus restricting security properties direct indirect readers 
operational semantics explicitly checks security errors 
prove type soundness result typed programs cause security errors run time security checks may omitted 
prove noninterference theorem indirect readers creators 
borrowing ideas reynolds prove noninterference theorem denotational semantics logical relations 
style proof common languages literature novel security world 
believe proof technique carries extensions basic calculus 
sections extend core calculus assignments effects style extension type system concurrency integrity 
sections conclude discussion limitations system 
purely functional slam calculus illustrate core ideas calculus language functions recursion tuples sums restricting security properties direct indirect readers 
extend treatment language assignment concurrency section creators indirect creators section 
types terms types slam calculus essentially comprise monomorphic type system products sums functions type annotated security properties 
add primitive types booleans integers strings examples essential typing properties covered sums products 
define security properties types secure types grammar ir unit theta readers ir indirect readers range collection basic security descriptions ordering security properties ir satisfy ir words restrictive represents smaller set agents ir 
assume lattice partially ordered set meets joins top element bottom element 
higher lattice means secure secure element 
intuitively element represents set agents users reason refer elements security groups 
example simple multilevel security system security descriptions low medium high ordering 
alternatively unix security system built lattice sets users ordered superset 
purposes presenting static type system assume static 
assumption unrealistic practice new users added system users may privileges revoked 
briefly discuss issue section 
slam calculus call value language terms contain set values represent terminated computations 
sets basic values values defined grammar bv inj hv vi lx bv security properties values describe agents may read object agents may indirectly depend value 
terms slam calculus grammar inj ei proj protect ir case inj inj term defines recursive function protect ir increases security property term 
bound free variables defined usual way variables may bound case 
notice destructors application projection case come labeled security group group represents security group programmer code 
annotations appear terms entirely technical reasons operational semantics section terms mixed annotations arise code written different programmers gets mixed 
example root write function lx body root annotations 
run called function body accesses files data structures root setuid behavior 
user write application body access data access 
mixed annotations arise applications reduced substituted body result contain root annotations 
compiler slam calculus check annotations programs consistent programmer security 
example compiler prevent arbitrary users writing programs destructors annotated root 
operational semantics relation represents single atomic action taken agent 
definition uses structured operational semantics evaluation contexts 
set evaluation contexts delta proj inj ei hv ei protect ir case inj inj defines left right call value deterministic reduction strategy 
basic rules operational semantics appear table 
rules reduce simple redexes 
lift arbitrary terms rules table operation increasing security properties terms ir expression ffl ir security property ir ir ir 
abusing notation extend operation values bv ffl ir denotes value bv note operational semantics essentially untyped types bound variables type checking rules section depend ignored reduction 
security properties values destructors course checked reduction corresponds checking instance argument projection pair say function abstraction 
see programs get stuck security errors suppose security lattice elements bool unit unit true inj bool false inj bool abbreviate term case inj inj variable occurring term true true false reduced programmer code permissions branch high security boolean 
value indirect readers value increase secrecy result protect 
tracks information flow value result 
instance changed statement example reductions permitted true true false 
protect true true tracks flow information test result 
change indirect reader annotation boolean test true true false 
protect true true case high security direct reader test boolean information test revealed low security agents 
type system type system slam calculus appears tables 
system includes subtyping subsumption rule 
subtyping rules table start lifting relation security groups relation security properties 
define ir ir iff ir ir subtyping rules formalize idea may increase security property value 
typing rules appear table 
denote typing contexts finite partial maps variables secure types denote empty context 
abusing notation write ffl ir denote secure type ffl ir 
rules type checking constructors straightforward 
type checking destructors rules guarantee destructor permission destruct value apply function project pair branch sum 
instance recall term true true false previous section reduced operational semantics 
term typed rules 
type rules track information flow manner analogous operational semantics 
instance type term true true false previous section bool 
type system satisfies subject reduction progress see appendix proofs 
theorem subject reduction suppose theorem progress suppose value 
reduction theorems show typed closed expressions security checks operational semantics redundant 
follows subject reduction progress type system enforces reader security 
consider object created reader annotation wish establish typed programs agents read object specified consider operational semantics 
inspection operational semantics ensures properties reader annotations ffl object created way reader annotation change protect increases security sets restrictive access object 
ffl agent attempts read object current reader annotation allow agent perform read operational semantics get stuck 
operational semantics ensures agent specified initial annotation attempts read reduction get stuck 
subject reduction progress show typed programs get stuck 
follows type system enforces reader security 
similar kind argument show type system enforces indirect reader security 
argument rely claim agent specified ir initial indirect reader annotation attempts find information reduction get stuck 
operational semantics contains information flow aspects claim certainly self evident inspection reduction rules case direct readers 
table operational semantics 
lx ir 
protect ir proj hv ir 
protect ir case inj ir inj inj 
protect ir lx ir ir protect ir ffl ir table subtyping rules pure functional language 
unit unit theta theta table typing rules pure functional language 
var unit unit sub rec function type lam lx app ir ffl ir pair theta proj theta ir proj ffl ir inj inj protect protect ir ffl ir case ir case inj inj ffl ir employ direct argument indirect reader security 
show high security variable respect indirect readers low security expression contains matter value give resulting evaluation change assuming terminates 
generally show expression low security high security subexpression arbitrarily change high security subexpression changing value property called noninterference security literature states high security subexpressions interfere low security contexts 
statement noninterference slam calculus requires technical conditions arise fact base type language trivial type unit 
language contains function expressions checked meaningfully equality theorem considers terms ground types types containing unit sums products 
instance bool ground type bool 
bool 
second values constructed unit sums products may contain components different security annotations 
example consider bool theta bool clearly acceptable high security components value depend high security variable acceptable low security components depend high security simplify statement non interference restrict attention transparent types security properties increase descend type structure formal definition transparent types appears appendix 
instance type transparent type bool bool transparent 
formally state noninterference property contexts delta denotes context expression hole denotes expression obtained filling context delta expression define special equivalence relation factor termination issues expressions halt values values stripped security information identical 
theorem noninterference suppose ir ir transparent ground type ir ir 
simplicity restricted theorem closed terms generalized open terms 
proof uses denotational semantics language logical relations style argument appendix gives sketch 
proof particularly simple especially compared proofs direct reasoning operational semantics cf 

proof method extended complicated type systems including ones recursive types see necessary foundations 
notice noninterference theorem requires expressions halt 
reveals problem type system vulnerable timing attacks protect execution time computations termination nontermination properties 
example suppose external observer simply test program terminated 
write fun bool unit true bool liberties syntax observer discover partial information value 
problem worse observer timer 
example consider term fun int extension slam calculus integer base type 
observer get information simply timing computation 
add primitive calculus covert channel observable usable calculus write val int val tmp bool val int val bool computation takes longer computation 
contents leaked 
vulnerability dependent accuracy primitive latency issues scheduling properties controlled restricting access primitives restricting ability external observers 
depending nature secret information low rate covert channel disastrous des key leaked minute bit second channel 
type system modified reduce exposure timing attacks 
critical rule case rule current rule ensures expression tested case statement high security value produced arm case statement high indirect security 
address timing attacks need protect just values returned arms case statement values returned computation 
approach introduce notion current security context computation propagate rules type system 
type system described section employs idea 
approach force case statement take time space resources adding timeout mechanisms various padding operations 
approach may system essentially correspond restricting case statements test expression case statement low 
security 
assignment concurrency calculus previous section single threaded sideeffect free 
inadequate model behavior collection agents execute concurrently interact shared store file system 
model system extend basic calculus assignment ml style cells generalize evaluation multi process setting add spawn operation create new processes 
type system language concurrency side effects carefully designed nave adaptation purely functional system sufficient 
fact problems arise side effects 
problem lies sequencing expressions sequencing calculus programmed ld fresh dummy variable 
purely functional case sequencing expressions communicates termination behavior boundary sequencing side effecting expressions communicate data 
consider instance term leakage information concurrency setting 
fun loop orelse loop loop true true fun loop orelse loop loop false true bool true bool false bool assuming high security type expression high security boolean 
side effect leaked value 
operational semantics type system track information flow destruction values side effects 
concurrency raises difficult issues 
documented notion noninterference problematic concurrent setting see 
recap problem consider system agents suppose variable contains information kept secret agent agent generates random number puts variable tmp read 
agent waits time copies contents tmp 
agent reads tmp immediately terminates 
tell captured contents random value information leaked 
interaction repeated determine high degree certainty 
standard set behaviors semantics system find set behaviors particular values generates independent initial value standard concurrency semantics employed conclude system secure 
second issue closely related issue timing attacks discussed previous section 
section justified ignoring timing attacks viewing external system excluded calculus 
concurrent setting ignoring timing attacks cause serious security holes calculus concurrent communicating processes ability time processes implicit 
see helpful consider version main example 
example run complementary versions looping example section parallel loops secret true loops secret false 
loop terminates process leaks true second terminates process leaks false 
force entire system terminate killing processes loop terminates 
specifically write processes syntax similar standard ml global variable initially false 
value ready true 
summarize timing style attacks concurrent setting part system reasonable analyze security concurrent setting account 
fact attack detailed clearly generalization notion types terms construct enhanced language extend definition basic values bv expressions bv ref spawn ir location assume infinite sequence locations type new location needed available location sequence 
modify definition types include types change arrow types carry latent effect ir representing lower bound security cells may written function executed ir unit theta ir gamma 
ref operational semantics operational semantics enhanced language uses basic style purely functional case rewrite rules redexes evaluation contexts denote position redexes 
notion evaluation contexts simple extension previous definition ref semantics keep track new pieces information 
multiple processes single term keep track current form process 
configuration system contains list processes 
second process keep track security levels previously values side effects appropriately coerced 
instance reducing term bool true bool false bool rules track information flow values stored cell 
third semantics keep track values locations state finite partial function typed locations values 
basic rewrite rules enhanced language table 
specifically rules defines reduction relation ir ir ir ir timing attack sequential setting clear phrase timing attack appropriate 
table operational semantics effects 
ir lx ir 
ir ir protect ir ir proj hv ir 
ir ir protect ir ir case inj ir inj inj 
ir ir protect ir ir protect ir 
ir ffl ir ir 
ir ir ir ir spawn ir ir ir ir ir ref ir 
ffl ir dom ir ir ir 
ffl ir ir ir ir ffl ir table typing rules effects 
sub ir ir var ir unit ir unit lam ir ir lx ir gamma 
pair ir ir ir theta inj ir ir inj app ir ir gamma 
ir ir ir ffl ir ir ir proj ir theta ir ir proj ffl ir ir ir case ir ir ir ir ir case inj inj ffl ir ir ir protect ir ir protect ir ffl ir ir ir spawn ir ir spawn ir unit ir ir loc ir ref ref ir ir ref ref ffl ir assign ir ref ir ir ir ffl ir deref ir ref ir ir ffl ir states 
rules define relation reductions purely functional redexes 
reductions lifted general configurations form ir ir evaluation contexts 
rules assignments dereferencing process creation non local rules specified directly configurations 
type system subtyping system effects exactly rule function types ir gamma 
ir gamma 
rule types ref ref note subtyping types affects top level security properties subtyping invariant types 
restriction follows standard subtyping rule 
table presents typing rules extended calculus 
type system essentially previous system effect system layered top style 
effect system tracks potential information leakage dependency may introduced cells 
context carries security group ir lower bound security cells may written context expected security group carried arrow types 
spawn terms may change security context increasing context 
analogs subject reduction theorem progress theorem established system proofs quite similar proofs appendix 
theorem subject reduction suppose typed 
suppose ir ir ir ir ir ffl typed ffl ir ffl ir theorem progress suppose typed 
suppose ir ir ir 
value reduction ir ir ir ir proved noninterference theorem concurrent setting mentioned earlier notion unclear concurrency setting 
noninterference guarantee set possible values low security objects independent initial values high security objects 
expect proof noninterference 
ideally rule timing attacks observers able get information values high security objects watching termination nontermination timing behavior programs 
raises interesting issue notion observer setting 
suppose consider observers internal system observers simply processes running parallel 
observers internal conjecture system secure 
intuitively processes may communicate cells writes cells protected current security context see operational rule table corresponding type rule assign table 
instance example type check calculus 
simpler example modifying looping example previous section fun bool unit true term type check context type ref bool 
high security agents may branch value held external observers observe final answers processes simply termination behavior processes system secure 
instance term fun bool unit true bool section type checks context 
point view internal observers expression secure value true bool communicated process system 
point view external observers expression secure type expression bool 
conjecture type system easily modified address issue 
distinction external internal observers familiar security world 
spi calculus instance assumes observers protocols processes programmed spi calculus 
course limits observers precise underlying assumptions model 
integrity sketch add integrity basic calculus section extended calculus section concepts creators indirect creators 
recall creators track agents directly built value indirect creators track agents may influence eventual choice value 
creators indirect creators drawn underlying hierarchy security groups readers indirect readers 
high integrity modeled points near top hierarchy low integrity points near bottom 
twist respect subtyping 
recall readers may restrict access value change reader annotation higher security group 
creators works just opposite way may weaken integrity value change creator annotation lower security group 
security properties incorporate creator indirect creator information ir ic variables ir ic range security groups maintain invariant ic subsumption ir ic ir ic iff ir ir ic ic formalizes intuition may weaken integrity value 
definition ffl extended new context ir ic ffl ir ic ir ir ir ic ic ic extend operation ffl values types straightforward manner 
operational semantics track indirect creators 
example rule case case inj ir ic inj inj 
protect ir note protect operation take account indirect creators 
rule registers reader injected value indirect creator result computation 
typing rules involve ffl operation modified 
example case rule ir ic case inj inj ffl ir ic proven subject reduction progress theorems analogous theorems system 
prove security result indirect creators analogous theorem theorem noninterference suppose ir ic 
suppose ir ic transparent ground type ir ir ic ic 

intuitively indirect creators subexpression include entire computation influence result computation 
proofs results techniques established appendix 
creators indirect creators added calculus section 
recall case readers type system guarantee information leak side effects 
similar property guaranteed case creators sure indirect creators computation carried values written cells 
judgements ir changed ir ic ic lower bound integrity values may written cells evaluation indirect information placed represent latent effects computation 
type checking rules abstraction application lam ir ic ir ic lx ir ic gamma 
app ir ic ir ic gamma 
ir ic ir ic ir ic ffl ir ic ir ir ic ic proven subject reduction progress theorems system proofs follow structure proofs appendix pure case 
related certainly static system programming language framework security 
addresses pure modified information flow models type systems security problems 
information flow reaches back denning mid implemented variety contexts interpreter perl put special dynamic taint checking mode tracks information flow rejects programs may reveal secret information 
modern treatments reformulate denning system static type system 
instance volpano smith irvine provide reformulation simple language programs prove version noninterference theorem 
volpano smith extends language firstorder procedures types similar types section annotations latent effect function part type written types 
volpano smith consider covert flows language programs exceptions explore example language nondeterminism 
covert flows example eliminated restriction tests bodies loops lowest security 
cases prove system correct modification noninterference theorem low security program halts starting state different values high security variables halts produces low security outputs 
noninterference theorems weaker say programs halt produce low security outputs 
hand practicality restrictions loops unclear 
considered means alleviate problems information flow 
myers liskov instance describe system tracks information flow agents may declassify information 
ownership corresponds quite closely notion direct reader direct readers may reveal information 
fact may build declassify operations primitives slam calculus relatively straightforwardly induction types 
known formal properties system rough ideas typing rules correctness theorems stated proved 
type systems security 
example abadi type system spi calculus reason protocols 
type systems related problem reasoning trustworthiness data 
instance introduces calculus explicitly annotate expressions trusted distrusted check trust distrust status system enforces consistent annotations freely coerce trusted distrusted vice versa 
concurrency issues addressed appear difficulties approach see 
main novelties 
consider purely functional language isolation extend side effects concurrency 
type rules restrictive purely functional case full language programming pure subset lead cleaner programs 
second type system combines access control information flow language higher order functions data structures studies system formally 
elements essential development practical languages provide mechanisms security introduce number new technical issues previously addressed 
discussion view slam calculus step providing language basis secure systems programming 
deals essence computing secure information number important issues remain 
security systems slam calculus relies tcb trusted computer base trusted type checking compilation runtime infrastructure 
failure components potentially breaks entire security system 
possible factor critical components moving bytecode bytecode verifier organization la java benefits doing unclear 
second type system monomorphic 
clearly restrictive need able write code behaves uniformly variety security groups writing generic string editing searching package 
currently investigating approaches problem parametric security types notion type dynamic security types 
involves bounded quantification clear compute concise intuitive representations types involves runtime overheads 
third type system static security changes dynamically 
instance file system files read today probably different read tomorrow 
accommodate new files new objects new cells new agents changing security groups 
plan address issues dynamically typed object manager 
basic idea access shared objects object manager program statically typed program interface object manager dynamic types runtime dynamically typed object returned object manager unpacked security properties checked raw object contains passed internals program 
fourth practical language slam calculus provide ways reduce amount type information specified programmer core slam calculus explicitly typed calculus 
perform effective type reconstruction 
kinds language support provide 
example useful introduce statically scoped construct defines default security group objects created scope unix 
investigating issues context implementation type system java 
appropriate typing rules java adapted easily slam calculus new issues arise exceptions break continue return instanceof 
implementation joint philip 
interesting investigate static analysis techniques determine information flow 
instance language side effects time security context may change spawn expression 
may restrictive practice statements executed say secure case statement need restrict information flow 
interpretation set analyses prove helpful 
kathleen fisher geoffrey smith ramesh subrahmanyam dennis volpano philip anonymous referees helpful comments 
abadi 
secrecy typing security protocols 
theoretical aspects computer software third international symposium volume lect 
notes computer sci 
springer verlag 
abadi gordon 
calculus cryptographic protocols spi calculus 
proceedings th acm conference computer communications security pages 
andrews reitman 
axiomatic approach information flow programs 
acm trans 
programming languages systems 
banatre bryce metayer 
compile time detection information flow sequential programs 
european symposium research computer security number lect 
notes computer sci pages 
springerverlag 
cardelli 
amber 
combinators functional programming languages proceedings th summer school volume lect 
notes computer sci 
springer verlag 
denning 
secure information flow computer systems 
phd thesis purdue university 
denning 
lattice model secure information flow 
commun 
acm 
denning denning 
certification programs secure information flow 
commun 
acm 
felleisen 
theory practice class prompts 
conference record fifteenth annual acm symposium principles programming languages pages 
acm 
mccullough 
noninterference composability security properties 
ieee symposium security privacy pages 
milner tofte harper macqueen 
definition standard ml revised 
mit press 
mitchell 
foundations programming languages 
mit press 
myers liskov 
decentralized model information flow control 
proceedings sixteenth acm symposium operating systems principles 
acm press 
palsberg 
trust calculus 
proceedings static analysis symposium number lect 
notes computer sci 
springer verlag 
pitts 
relational properties domains 
information computation 
plotkin 
structural approach operational semantics 
technical report daimi fn aarhus univ computer science dept denmark 
plotkin 
logic computable functions 
unpublished manuscript csli summer school notes 
reynolds 
types abstraction parametric polymorphism 
mason editor information processing pages 
north holland amsterdam 
smith volpano 
secure information flow multithreaded imperative language 
conference record fifth annual acm symposium principles programming languages 
acm 

talpin jouvelot 
polymorphic type region effect inference 
journal functional programming 
volpano smith 
eliminating covert flows minimum typings 
proceedings tenth ieee computer security foundations workshop 
ieee computer society 
volpano smith 
type approach program security 
tapsoft theory practice software development volume lect 
notes computer sci 
springer verlag 
volpano smith irvine 
sound type system secure flow analysis 
journal computer security 
proofs pure functional language secrecy basic facts proposition suppose ir ir ffl ir ffl ir proposition secrecy property type 
ffl ir ffl ir ffl ir ffl ir 

ffl ir ffl ir ffl ir ffl ir 
substitution lemma lemma proof induction proof consider representative cases leave reader 

obvious 

done 

ly induction rule lam ly desired 
completes induction proof 
subject reduction theorem lemma suppose proof cases depending reduction rule 
give representative cases 

lx ir 
protect ir 
assumption lx ir derivation possibly empty series sub applications immediately preceded application app 
exists derivation rule application app 
inspection app exist derivations lx ir ir ffl ir derivation lx ir ir possibly empty series sub applications immediately preceded application abs 
exists ir derivation lx ir rule abs 
abs rule derivation ir ir ir implies ir ir combining implies sub rule 
substitution lemma protect rule protect ir ffl ir 
ir ir proposition ffl ir ffl ir sub protect ir 
proj hv ir 
protect ir exist derivation proj hv ir rule application pro 
pro rule hv ir theta ir ffl ir hv ir theta ir derivation hv ir pair rule theta ir 
pair rule derivations theta ir protect rule protect ir ffl ir 
theta ir theta ir ir ir ffl ir ffl ir proposition protect ir sub 

protect ir 
exists derivation protect ir rule protect 
derivation ffl ir derivation consist application unit rule followed number applications sub 
unit applying unit rule gives unit ffl ir unit ffl ir unit ffl ir unit follows proposition unit ffl ir ffl ir sub 
concludes case analysis proof 
theorem subject reduction suppose proof note rules table 
simple induction evaluation contexts lemma completes proof 
progress theorem theorem progress suppose value 
reduction proof suppose way contradiction reduction case forms 

proj 
case inj inj consider case leave reader 
typed ir note form lx ir functional type seen easy induction typing derivations 
gives room complete proof 
rule abs know ir ir ir lx ir ir ir follows application reduction rule applies 
contradicts initial assumption reduction reduction term 
noninterference assign standard denotational semantics language adopting partial function model 
define meaning type expression denoted unit ir fg ir theta ir theta ir set partial continuous functions note semantics ignores security properties 
meaning terms partial function 
typing context theta theta 
order important rely fixed ordering pairs 
case empty unit object unit 
environment write projection component corresponding variable 
environment component extended overwritten definition meaning function terms types ignores security properties similar definitions may say 
model adequate observing final answers programs theorem plotkin typing judgement environment defined iff value proof noninterference uses logical relations see uses logical relations 
define family relations indexed secure types indirect readers ir 
ir ir ir ir 
unit ir ir ir ir 
ir ir ir ir inj inj ir 
theta ir ir ir ir hd hd ir 
ir ir ir ir ir ir ir means defined ir intuitively ir index specifies secrecy group indirect reader group ir secrecy group ir group type indirect reader permission find information value 
proposition 
ir directed complete 
ig ir directed set ir 
ir ir proof induction types 
theorem suppose 
suppose ir ir proof induction proof suppose type 
transparent security property 
unit 
transparent security property 
theta transparent security property 
transparent security property transparent transparent lemma suppose ir ground type transparent ir 
ir proof induction base case unit obvious 
ir ir ir follows definition ir inj ir induction theta ir follows definition ir omega ff ir ir note ffl ir ir ffl ir ir ir ir similarly ffl ir ir ffl ir 
ir ir ir tir ir ir similarly ir ir ir induction proves desired 
theorem noninterference suppose ir ir transparent ground type ir ir 
proof simplify notation unit stand secure unit type unit lowest security unit denote secure value type unit 
consider open term unit easy see formed typing judgement 
consider 
lx unit 
unit easy show unit ir ir ir unit 
theorem ir defined lemma defined simple show value 
done 
october 
