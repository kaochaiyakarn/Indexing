mining access patterns ciently web logs jian pei jiawei han asl hua zhu school computing science simon fraser university canada han cs sfu ca 
explosive growth data available world wide web discovery analysis useful information world wide web practical necessity 
web access pattern sequence accesses pursued users frequently kind interesting useful knowledge practice 
study problem mining access patterns web logs ciently 
novel data structure called web access pattern tree tree short developed cient mining access patterns pieces logs 
web access pattern tree stores highly compressed critical information access pattern mining facilitates development algorithms mining access patterns large set log pieces 
algorithm nd access patterns web logs quite ciently 
experimental performance studies show method general order magnitude faster conventional methods 
explosive growth data available world wide web discovery analysis useful information world wide web practical necessity 
web mining application data mining technologies huge web data repositories 
basically domains pertain web mining web content mining web usage mining 
process extracting knowledge content sites known web log mining process extracting interesting patterns web access logs 
web servers register web log entry single access get important pieces information accessing recorded including url requested ip address request originated timestamp 
fragment log le shown follows 
pm bc ca oct get www sfu ca academic programs htm mozilla compatible windows pm bc ca oct get images bullets gif www cs sfu ca mozilla compatible windows supported part natural sciences engineering research council canada nserc networks centres excellence canada nce iris hewlett packard lab 
orts mining various patterns web logs 
web access patterns mined web logs interesting useful knowledge practice 
examples applications knowledge include improving designs web sites analyzing system performance network communications understanding user reaction motivation building adaptive web sites 
essentially access pattern sequential pattern large set pieces web logs pursued frequently users 
research orts try employ techniques sequential pattern mining association rule mining discovering web access patterns web logs :10.1.1.40.9892
sequential pattern mining discovers frequent patterns sequence database rst introduced agrawal srikant follows sequence database sequence list transactions ordered time transaction consists set items nd sequential patterns user speci ed minimum support support number data sequences contain pattern :10.1.1.40.9892
studies cient mining techniques extensions sequential pattern mining method mining frequent patterns :10.1.1.40.8600
srikant agrawal generalized de nition sequential patterns include time constraints sliding time window user de ned taxonomy developed generalized sequential pattern mining algorithm gsp outperforms aprioriall algorithm :10.1.1.40.9892
gsp mines sequential patterns scanning sequence database multiple times 
rst scan nds frequent items forms set element frequent sequences 
scans generates step wise longer candidate sequences set frequent sequences check supports 
gsp cient sequences long transactions large 
length sequences increase transactions large number candidate sequences generated may grow exponentially gsp encounter di culties 
studies time related sequential periodic frequent pattern mining adopt apriori paradigm promotes generate method rst generate set candidate patterns test candidate may su cient support database passing minimum support threshold test 
apriori heuristic generate reduced set candidates iteration 
algorithms level wise apriori nature encounter di culty length pattern grows long exactly case web access pattern mining 
web log mining length web log pieces pretty long pieces quite huge practice 
investigate issues related ciently mining web access large set pieces web log 
main contributions follows 
concise highly compressed wap tree structure designed implemented handles sequences elegantly 
second cient mining algorithm wap mine mining complete nonredundant web access patterns large set pieces web log 
third performance study conducted demonstrates wap mine algorithm order magnitude faster apriori counterpart mining web access patterns 
remaining organized follows 
problem de ned section general idea novel method section 
section focus construction wap tree mining tree respectively 
show experimental results conclude section 
problem statement focus mining web access patterns 
general web log regarded sequence pairs user identi er event 
investigation web log les divided pieces mining purpose 
preprocessing applied original web log les pieces web logs obtained 
piece web log sequence events user session timestamp ascending order event happened early goes rst 
model pieces web logs sequences events mine sequential patterns certain support threshold 
set events 
log piece web access sequence en ei sequence events called length access sequence 
access sequence length called sequence 
please note necessary ei ej access sequence repetition allowed 
example aab ab di erent access sequences events 
access sequence called subsequence access sequence en super sequence denoted exist il eij 
access sequence proper subsequence sequence denoted subsequence access sequence en subsequence ek en super sequence pattern ek subsequence ek called pre respect pattern set access sequence fs smg called web ac cess sequence database si access sequences 
support access sequence de ned denoted sup clear context 
sequence said pattern simply web access pattern please note access sequences web access sequence database need length 
events repeated access sequence pattern pattern get support access sequence 
problem statement 
problem web access pattern mining web access sequence database support threshold mine complete set patterns 
example 
fa fg set events identi ers users 
fragment log records information follows 
ci ci preprocessing divides log le access sequences individual users applied log le resulting access sequence database denoted rst columns table 
totally access sequences database 
length 
rst access sequence sequence ab subsequence 
access sequence user pre xes respect ac 
fc pattern gets supports access sequence user 
please note fc appears twice access sequence user sequence contributes count 
user id web access sequence frequent subsequence abac table 
database web access sequences 
wap mine mining access patterns ciently web logs access patterns mined sequential pattern mining techniques 
previously proposed methods sequential pattern mining sequential pattern version apriori heuristic stated follows 
property 
sequential pattern apriori seq sequence database sequence pattern seq super sequence pattern seq 
example pattern example access sequence containing pattern 
sequential pattern apriori property may substantially reduce size candidate sets 
combinatorial nature sequential pattern mining may generate huge set candidate patterns especially sequential pattern long exactly case web access pattern mining 
motivates study alternative structures methods web access pattern mining 
key consideration facilitate tedious support counting candidate generating operations mining procedure 
novel approach mining web access patterns called wap mine heuristic follows property 
property 
su heuristic frequent event set pre xes sequences pattern sequence ep access pattern 
example frequent event set pre xes ac example claim bac access pattern 
basically general idea method summarized follows 
nice data structure wap tree devised register access sequences corresponding counts compactly tedious support counting avoided 
maintains linkages traversing pre xes respect su pattern ciently 
tree registers information needed rest mining 
data structure built remaining mining processing wap tree original access sequence database needed 
size wap tree usually smaller original access sequence database shown mining easier 
shown section construction wap tree quite cient simply scanning access sequence database twice 
cient recursive algorithm proposed enumerate access patterns wap tree candidate generation required mining procedure patterns support consideration 
philosophy mining algorithm conditional search 
searching patterns level wise apriori conditional search narrows search space looking patterns su count frequent events set pre xes respect condition su conditional search partition divide conquer method bottom generation combinations 
avoids generating large candidate sets 
essential structure wap mine algorithm follows 
algorithm scans access sequence database twice 
rst pass determines set frequent events 
event called frequent event appears access sequences denotes number access sequences support threshold respectively 
scan wap mine builds tree data structure called wap tree frequent events register count information mining 
wap mine recursively mine wap tree conditional search nd web access patterns 
overview algorithm algorithm 
algorithm wap mine mining access patterns web access sequence database input access sequence database support threshold 
output complete set patterns 
method 
scan nd frequent events 

scan construct wap tree set frequent events algorithm section 
recursively mine wap tree conditional search section 
key techniques method constructing wap tree mining access patterns wap tree explored detail sections 
section focuses concept construction wap tree section investigates mining access patterns wap tree construction wap tree observations may help design highly condensed web access pattern tree 

sequences frequent ones useful construction frequent sequences 
event set frequent sequences need include construction web access pattern tree 

access sequences share common pre pre shared wap tree sharing bring advantages 
saves space storing access sequences facilitates support counting subsequence pre observations web access pattern tree structure wap tree short de ned follows 

tree registers pieces information label count denoted label count 
root tree special virtual node empty label count node labeled inthe event set associated count registers number occurrences corresponding pre ended event web access sequence database 

wap tree constructed follows access sequence database lter events insert resulting frequent subsequence wap tree insertion frequent subsequence started root wap tree considering rst event denoted increment count node label exists create child labeled set count 
recursively insert rest frequent subsequence subtree rooted child labeled 
auxiliary node linkage structures constructed assist node traversal wap tree follows 
nodes tree label linked shared label linkages queue called event node queue queue label ei called ei queue 
header table wap tree head event node queue registered example 
consider access sequence database example 
suppose support threshold set required nd web access patterns supported access sequences database 
scan database derives set frequent events fa cg 
convenience frequent subsequences listed rightmost column table 
header root wap tree header root conditional wap tree header root conditional wap tree ac fig 

wap tree conditional wap tree frequent subsequences table 
wap tree shown constructed follows 
insert sequence abac initial tree virtual root 
creates new node labeled count set child root derives branch 


arrows point parent nodes children ones 
second insert second sequence 
starts root 
root child labeled count increased 
similarly wehave 
event match existing node new child node created inserted 
remaining sequence insertion process derived accordingly 
algorithm constructing wap tree web access sequences algorithm 
algorithm wap tree construction web access sequences input access sequence database set frequent events fe obtained scanning 
output tree method 
create root node 
access sequence access sequence database extract frequent subsequence removing events appearing fe 
sn si events current node point root 
current node child labeled si increase count current node point create new child node si current node point new node insert si queue 

return analysis wap tree registers access sequence counts 
shown sections mining process web access patterns needs wap tree original database 
wap mine needs scan access sequence database twice 
easy show height tree plus maximum length frequent subsequences database 
width wap tree tree bounded number access sequences database 
wap tree may generate explosive number nodes 
access sequences pre share upper part path root 
statistically considering factor pre sharing size wap tree smaller size access sequence database 
algorithm construction wap tree observe important property tree stated follows 
lemma 
access sequence sequence database exists unique path wap tree starting root labels nodes path order exactly events sequence 
lemma ensures number distinct leaf nodes paths wap tree number distinct frequent subsequences access sequence database height tree bounded root plus maximal number instances frequent events access sequence 
easy show wap tree partitioned structured form similar tree implemented pure sql 
wap tree mining wap tree highly scalable 
mining web access patterns wap tree wap tree structure constructed algorithm provides interesting properties facilitate mining web access patterns 
property 
node link property frequent event ei frequent subsequences contain ei visited ei queue starting record ei header table wap tree property facilitates access pattern information related frequent event ei branches wap tree linked ei queue 
node labeled ei wap tree nodes path root tree node excluded form pre sequence ei count node labeled ei called count pre sequence 
please note path root may node labeled ei pre sequence ei may contain pre sequence ei 
example sequence aba pre sequence pre sequence counting ab sequence abab wemust sure double counting abab contributes count 
concept count follows 
pre sequences ei formed subpath root formed called super pre sequence sub pre sequence instance aba super pre sequence pre sequence ei super pre sequences de ne count sequence count 
pre sequence ei super pre sequences count count sequence minus counts super pre sequences 
example 


path root count rst pre sequence path totally counts rst node devotes super pre sequence aba property 
pre sequence count property count ofa sequence ended ei sum counts pre sequences ei super sequence properties apply conditional search mine web access patterns wap tree conditional search means searching web access patterns time turns search web access patterns su su condition narrow search space 
su longer remaining search space smaller potentially 
conditional search paradigm advantages apriori ones 
node link property wap tree ensures frequent event ei sequences su ei visited ciently ei queue tree 
hand pre sequence count property sure count frequent events set sequences su caring count su cient 
simpli es counting operations 
properties wap tree conditional search cient 
basic structure mining web access patterns wap tree follows 
wap tree branch ordered combinations events branch web access patterns tree 
needs done just return complete set combinations 
frequent event ei wap tree ei queue started header table ei conditional access sequence base constructed denoted ps ei contains pre sequences ei 
pre sequence ps ei carries count wap tree pre sequence ei count inserted ps ei sub pre sequences ei inserted ps ei count easy show accumulating counts pre sequences pre sequence ps ei holds count 
complete set web access patterns pre sequence ei mined concatenating ei web access patterns returned mining conditional wap tree ei 
algorithm follows 
algorithm mining web access patterns wap tree input tree support threshold output complete set patterns 
method 
wap tree branch return unique combinations nodes branch 

initialize web access pattern set wap event tree web access pattern insert wap 

event ei wap tree construct conditional sequence base ei ps ei ei queue count conditional frequent events time 
set conditional frequent events empty build conditional wap tree ei ps ei algorithm 
recursively mine conditional wap tree web access pattern returned mining conditional wap tree concatenate ei insert wap 
return wap 
example 
mine web access patterns wap tree 
suppose support threshold set 
start conditional search frequent event conditional sequence base listed follows 
aba ab ab baba abac aba quali ed conditional frequent event event count 
conditional frequent events 
conditional wap tree wap tree built shown 
recursively conditional sequence base ca built 
ab ab 
wap tree built shown 
branch conditional tree combinations generated 
web access patterns su ac aac bac abac ac 
construct conditional sequence base wap tree mine conditional wap tree frequent patterns abc bc 
point conditional search nished 
frequent events turn nd web access patterns 
properties ahead considering enumerating access patterns algorithm correctness wap mine shown 
theorem 
wap mine returns complete set access patterns redundancy 
seen example shown experiments mining web access patterns wap tree signi cant advantages 
wap tree ective data structure 
registers count information pattern mining frees mining process counting candidates pattern matching 
secondly conditional search strategies narrow search space ciently best uses wap tree structure 
avoids overwhelming problems generating explosive candidates apriori algorithms 
performance evaluation experiments pursued compare ciency wap mine gsp algorithm proposed 
dataset experiment generated principle introduced :10.1.1.40.9892
experiments conducted mhz pentium pc machine megabytes main memory running microsoft windows nt 
programs written microsoft visual 
run time sec 
support threshold wap mine gsp run time sec 
fig 

experimental results 
wap mine gsp number access sequences web access sequence database experimental results shown 
compare wap mine gsp threshold number access sequences database 
experimental result shows wap mine outperforms gsp quite signi cant margin wap mine better scalability gsp 
wap mine gsp show linear scalability number access sequences database 
wap mine outperforms gsp 
wap tree ective structure facilitating web access pattern mining wap mine outperforms gsp solution wide margin 
success wap tree wap mine credited compact structure wap tree novel conditional search strategies 
believe certain extensions methodology wap tree wap mine applied attack data mining tasks ciently sequential pattern mining episode mining 

agrawal srikant 
fast algorithms mining association rules 
proc 
int 
conf 
large data bases pages santiago chile september 

agrawal srikant 
mining sequential patterns 
proc 
int 
conf 
data engineering pages taipei taiwan march 

bettini sean wang jajodia 
mining temporal relationships multiple granularities time sequences 
data engineering bulletin 

cooley mobasher srivastava 
data preparation mining world wide web browsing patterns 
journal knowledge information systems vol 

graham cumming 
hits misses year watching web 
proc 
th int world wide web conf santa clara california april 

han dong yin 
cient mining partial periodic patterns time series database 
proc 
int 
conf 
data engineering icde pages sydney australia april 

lu han feng 
stock movement dimensional inter transaction association rules 
proc 
sigmod workshop research issues data mining knowledge discovery dmkd pages seattle washington june 

mannila toivonen verkamo 
discovery frequent episodes event sequences 
data mining knowledge discovery 

ramaswamy silberschatz 
cyclic association rules 
proc 
int 
conf 
data engineering icde pages orlando fl feb 

perkowitz etzioni 
adaptive sites automatically learning user access patterns 
proc 
th int world wide web conf santa clara california april 

spiliopoulou 
wum tool web utilization analysis 
proc 
th int conf 
extending database technology edbt valencia spain march 

srikant agrawal 
mining quantitative association rules large relational tables 
proc 
acm sigmod int 
conf 
management data pages montreal canada june 

sullivan 
reading reader reaction proposal inferential analysis web server log les 
proc 
rd conf 
human factors web denver colorado june 

tauscher 
people revisit web pages empirical ndings implications design history systems 
int journal human computer studies special issue world wide web usability 

zaiane xin han 
discovering web access patterns trends applying olap data mining technology web logs 
proc 
advances digital libraries conf 
adl melbourne australia pages april 
