ontologies defining tasks problem solving methods mappings fensel motta decker zdrahal institut aifb university karlsruhe karlsruhe dieter fensel stefan decker aifb uni karlsruhe de knowledge media institute open university milton keynes mk aa united kingdom motta zdrahal open ac uk 
years main technologies knowledge sharing reuse emerged ontologies problem solving methods psms 
ontologies specify reusable conceptualizations shared multiple reasoning components communicating problem solving process 
psms describe domain independent way generic reasoning steps knowledge types needed perform task 
typically psms specified task specific fashion modelling frameworks describe control inference structures knowledge requirements competence 
discuss novel approach psm specification formal ontologies 
particular specifications control data flow dynamic aspects psms focus logical theory associated psm method ontology 
approach concentrates competence knowledge requirements psm internal control details enabling black box style reuse 
look nature psm specifications show characterised task independent style generic search strategies 
resulting modelling gap task specifications task independent method ontologies bridged constructing relevant adapter ontology reformulates method ontology task specific terms 
important aspect approach described contrast characterisations task independent psms away simple binary distinction weak strong methods 
argue method defined task dependent style distinction limited utility psm reuse 
differences psms affect reuse concern ontological commitments respect domain knowledge goal specifications 
concept generic problem solving method psm frameworks generic tasks chandrasekaran configurable role limiting methods commonkads schreiber method task approach eriksson components expertise steels gdm mike angele 
general psm describes domain independent way reasoning steps types knowledge needed perform task 
libraries psms developed appear proceedings european knowledge acquisition workshop ekaw lecture notes artificial intelligence lnai springer verlag 
see benjamins breuker van de velde chandrasekaran motta zdrahal support reuse centred models kbs development improving efficiency development process robustness target application system 
look fundamental issues associated psm specifications epistemology modelling frameworks characterise psms ii nature psm specifications 
issues discussed 
reuse centred psm descriptions describing psms style commonkads schreiber requires specify internal reasoning process psm 
particular descriptions need internal reasoning steps psm data flows reasoning steps control guides dynamic execution internal reasoning steps knowledge requirements psm goals achieved psm 
aspects understanding psm achieves goals 
assess applicability psm needs knowledge competence domain requirements 
van de velde akkermans 
particular approach specification competence psm formal ontologies 
approach provides main advantages formal specification adds precise meaning enables mechanised support 
specifications natural language necessarily imprecise contain ambiguity difficult verify completeness consistency van harmelen fensel 
establishing competence psm relation ontological assumptions may require difficult proof processes realistic mechanised proof support provided fensel 
ontology provides explicit specification conceptualization gruber shared multiple reasoning components communicating problem solving process 
ontological engineering describing psms provides important benefits respect reuse 
resulting psm specification grounded common shared terminology ii knowledge requirements ontological commitments gruber 
nature psm descriptions psms normally described task specific way 
main reasons 
task independent psms regarded weak methods mc kbs research past decades seen reaction weak task independent problem solving paradigms sixties early seventies newell simon 
reaction taken different forms formulated different principles see instance knowledge power principle lenat feigenbaum knowledge interaction hypothesis bylander chandrasekaran 
essentially message efficient knowledge problem solving subscribes task application specific paradigms 
reason explains limited appeal task independent psms trade usability reusability klinker 
reusable psm larger distance psm application specification means required bridge representation gap psm application 
years renewed interest task independent specifications psms cf 
van heijst 
van heijst point task specific formulation psms unnecessarily limits applicability psms van heijst suggest applicability conditions psms specified terms domain independent meta characteristics target domain model 
trade usability reusability requires techniques facilitate process configuring task independent psm particular task domain 
see problem ontology mapping characterise psm configuration specialization process ontological commitments introduced 
specifically approach comprises phases specification method independent ontologies define task problem types 
task independent specification generic search methods 
specification adapters fensel map ontology generic search method task specific terms produce task specific psms 
adapters stacked top cf 
fensel view task specific refinement generic search strategies stepwise process overcoming view weak strong psms 
approach postulates continuum extremes step task specific variant psm achieved means relevant adapter 
contents illustrate approach formal way discussing test case involves configuration task independent specification psm class tasks 
specifically discuss model components 
section describes specification method independent ontology parametric design tasks wielinga motta zdrahal 
section specifies method ontology propose revise psm marcus mcdermott zdrahal motta 
method ontology expresses competence propose revise terms assumptions properties types state transitions propose transitions revise transitions 
enrich completeness state specify transition incorrect correct state 
commitments 
method specification highly task independent 
applied task problem space expressed search process correct complete preferred states 
section describes adapter specialises propose revise method ontology parametric design 
similar adapters defined adapt propose revise tasks see fensel description configuration propose revise psm assignment tasks 
section discusses significance compares approach alternative proposals outlines directions research 
task ontology parametric design task ontology parametric design 
provide informal description ontology 
discuss specification logic 
logic rich semantic modelling primitives framework defined frame logic kifer see fig 

sketch parametric design design characterised generic terms process constructing artifacts 
essential feature design problem solving constructive nature solutions constructed retrieved pre existing set 
order construct artifact needs building blocks technology chandrasekaran 
addition design process subjected number constraints related design technology technological limitations impose constraints minimum size supporting walls external factors countries require minimum ceiling height living rooms 
design goal driven process goals specified terms number functionalities target artifact provide 
way informally characterizing goal oriented nature design process see driven needs desires wielinga 
design process characterised function takes input set needs desires constraints possibly incomplete set building blocks produces artifact output 
restricted class design problems configuration design mittal defined design problem building blocks input design process 
mittal show complexity configuration task decreases significantly assuming artifacts configured known functional architectures 
instance computer configuration functionally described terms processor printing memory data communication assumption possible impose structure space feasible designs restricting number possible configurations 
assumption characterised postulating existence functional solution templates 
stronger assumption restricts space possible designs postulates existence parametrised solution template target artifact 
scenario design problem solving described process assigning values design parameters accordance needs constraints desires 
applications assumption holds called parametric design 
course idealised description design process 
applications 
vt elevator design problem marcus yost provides known example parametric design task 
problem configure elevator accordance requirement specification applicable constraints 
parametrised solution template consists design parameters specify various structural functional aspects elevator number doors speed load precisely parametric design application characterised mapping dimensional space set solution designs parameters vr value ranges constraints requirements pr preferences pr pr cf cost function 
concepts discussed section illustrate semi formal specification logic different entities parametric design task ontology 
semiformal specification parametric design logic basic element parametric design concept parameter 
model parameters means class parameter see def fig 

parameter value range constrains possible values parameter take design model 
union value ranges defines set legal parameter values 
modelled means class value range 
attribute allowed values associates range set values def 
attribute range models association parameter range def 
expect parameter directly associated value 
parameter gets value assigned design model value 
functional dependency parameters values 
design model introduces mapping parameters values 
design model modelled partial function parameters values provided ranges see def 
incomplete design models design models assign value parameter partial functions 
class design model models solution space task 
sets characterize subspaces solution space 
requirements satisfied solution constraints violated 
model requirement set design models fulfils constraint set design models violate 
introduce classes requirement constraint defined sets design models see def def def 
definitions confused extensional intensional representation 
actual set design models fulfil requirement described extensionally sol sol enumerating design models providing intensional characterisation sufficient necessary conditions fulfilling requirement 
attributes fulfil violate deliver design model set fulfilled requirements violated constraints see def 
axioms ax ax ensure appropriate relationships design models requirements 
reader find surprising requirements constraints modelled set design models 
advantage approach chosen require postulate existence additional domain lexicon support specification constraints requirements 
instance parametric design framework discussed wielinga introduces domain vocabulary notion domain theory 
chosen minimise number concepts required discuss ontology characterise requirements constraints subset design models 
rationale choice pragmatic ontological 
def class definition def link def class definition attribute having range 
attribute def class definition attribute having power set range attribute set def class describing relation element class element relation 
def class describing function def class describing set relations element class relation 
def class element class function def class powerset class set fig 
legend logic 
attribute relation class function link power set attribute power set range class range attribute def 
relations functions graphical notation def def def def def def def def linear notation constraints 
shows taxonomy types design models 
solution design defined design model valid complete def 
valid design model suitable consistent def 
suitable design model fulfils requirements def ax 
consistent design model violate constraint def ax 
complete design model parameter value def ax 
def introduces notion preferences 
preferences describe task knowledge design models specify better accordance criterion 
model preference binary relation specifies partial order design models 
element class preference relation 
preferences typically define local criteria choose alternative design models cost function provides global criterion assessing cost design model 
class cost founded introduce order costs def 
ontology associates cost solution design generic design def parameter range value range def value range allowed values set value def value def design model parameter value def design model fulfil set requirement violate set constraint design model holds allowed values range defined def design models set design model def requirement design models def constraint design models ax design model requirement holds fulfil ax design model constraint holds violate parameter fig 
entities parametric design task ontology 
value range values allowed values design model constraint requirement violate fulfil range design models model order minimise ontological commitments gruber 
feasible envisage situations cost defined non solution models 
instance design system uses case approach design cost number criteria selecting design model case library 
scenario selected model necessarily solution model 
ax ax define goal task 
find optimal solution design cheapest possible solution design models 
psm ontology propose revise known problem solving method parametric design design model consistent design model suitable design model complete design model valid design model solution design model cost cost fig 

types design models 
def preference design model design model def suitable design model design model def consistent design model design model def complete design model design model def valid design model suitable design model consistent design model def solution design model cost cost valid design model complete design model def cost associated total order 
ax suitable design model design model requirement holds fulfil ax consistent design model design model violate ax complete design model design model parameter 
range ax goal solution design model ax 
solution design model cost goal preference problem solving propose revise marcus mcdermott zdrahal motta 
argued zdrahal motta term propose revise better describe class specific psm different control regimes revision strategies basic propose revise framework 
basic idea underlying propose revise knowledge backtracking focus search 
backtracking chronological choice point dependency directed backtracking propose revise problem solver reacts inconsistency means application specific fix knowledge 
approach removes need blind backtracking improving performance problem solver 
define method ontologies weak strong versions propose revise 
specification shown section describes problem solver assumed capable finding complete correct optimal states 
achieve competence strong assumptions available heuristic knowledge 
particular method assumes available propose fix knowledge sufficient reach complete correct optimal states 
specification obviously quite optimistic section discuss realistic version propose revise replaces assumption global optimality assumes locally optimal transitions exhibiting weaker competence 
propose revise optimal competence take state view describe task independent psms 
psms described terms state cf 
def elementary complex state transition def 
approach accordance motta zdrahal characterise kbs problem solving search process 
provide task independent specification propose revise search process 
propose revise distinguishes types state transitions result types states transitions applied 
propose transition cf 
def extends completeness state revise transition cf 
def transforms illegal state correct 
ontological commitment formulated task specific terms terms generic notions completeness correctness 
words assume problem solver able identify complete correct states cf 
def def 
def introduces preference states model assumption propose revise steps problem solver result optimal states ax ax ax 
course assumption formulates strong requirements propose revise knowledge 
specifically assumes search space defined propose revise steps complete respect optimality 
assumption strong instance satisfied fix knowledge vt domain section substitute weaker notion optimality contextualised respect space possible moves 
competence method characterized ax ax 
output complete correct optimal state 
achieve competence 
completeness guaranteed vt case 
requirements propose revise knowledge necessary propose knowledge fails monotonically extends state ax application propose terminology def state def preference state state def complete state def partial completeness state set associated total order equality def correct state def state transition state state def propose state transition def revise state transition competence ax output state ax output complete correct optimal state complete output correct output 
state complete correct output preference knowledge requirements ax propose knowledge fails monotonically extends state complete partial completeness partial completeness propose ax application propose leads optimal state complete 
state correct propose partial completeness partial completeness propose ax revise knowledge fails correct correct revise ax application revise change completeness state partial completeness revise partial completeness ax application revise leads optimal state correct 
state correct partial completeness revise partial completeness revise fig 

method ontology globally optimal propose revise 
state state preference revise complete partial set total order completeness correct propose equality transition transition leads optimal state ax revise knowledge fails ax application revise transition change completeness state ax application revise transition leads necessarily complete optimal design model ax 
need notion partial completeness states formulating requirement propose monotonically extend completeness state revise change partial completeness def 
completes description method ontology optimal complete propose revise problem solver 
weakening propose revise requiring global optimality may realistic require local optimality 
propose revise transitions optimal respect local environment current state 
idea generalize definition ax ax ax 
generalized definitions provided fig 

ax ax ensure local optimality propose revise transitions 
properties domain knowledge define environments axioms define relatively weaker stronger requirements 
definitions correspond original axioms section case environment consists entire problem space 
terminology def states set state def environment states competence ax output complete correct local optimal state complete output correct output local optimal output local optimal 
state complete correct environment environment complete correct preference knowledge requirements ax application propose leads local optimal state complete 
state correct propose partial completeness partial completeness propose environment ax application revise leads local optimal state correct 
state correct partial completeness revise partial completeness revise environment fig 

extended method ontology locally optimal propose revise 
states environment state drawback generalized specification weakened notion competence method 
guarantee optimality sense successor state local optimum environment predecessor state see ax 
integrating method task ontologies produce versions psm previous sections specified task ontology parametric design weaker stronger versions task independent propose revise problem solver 
remains connect configure propose revise parametric design 
step consists producing relevant adapter see fig 

main ontological decision interpret state terms design model 
specifically definitions fig 
identify correct states valid design models complete states complete design models partial completeness set parameters assigned value design model 
order equality partial completeness defined terms set inclusion set equality parameter sets 
crucial axiom ax ensures output method corresponds goal task 
proof axiom trivial 
main effort verifying ontological specification ensure optimality output propose revise assumed ax 
methodologies tools verifying axioms described fensel 
related defined ontology parametric design task independent domain psm ii ontology propose revise independent domain task model iii adapter integrates task method specifications 
resulting model constitutes task specific variant propose revise propose revise parametric design 
provided descriptions enable reuse task specifications reuse task 
infix notation distinguish terms parametric design infix pd terms propose revise infix 
def state design model pd def complete complete design model pd def set total order equality set parameter pd def pd pd def correct valid design model pd ax preference cost pd pd pd pd ax partial completeness pd pd pd pd ax output goal pd fig 

psm ontology propose revise parametric design 
independent task specific psms 
number authors discussed task independent psm specifications 
particular van heijst formulate task independent psms terms acceptance criteria 
instance task independent formalization cover differentiate states cover part method applicable domains relation transitive anti symmetric anti reflexive 
formulation say feasibility applying method domain 
words provide replacement problem solving model paradigm task specific model provided cover differentiate 
matter fact time won sense apply cover sub method relation properties 
contrast approach task independent psms described variations search methods substitute task specific problem solving paradigm generic 
approach taken van heijst postulates clear separation task specific task independent descriptions psms 
similar view taken mcdermott mc compares methods weak methods indicates weak method open respect control role limiting method weak method put limits nature complexity task specific control knowledge uses 
believe characterization strong vs weak methods coarse grained 
instance weak method precise assumptions existence heuristic knowledge possible converge optimal solution 
shows possible reformulate strong method propose revise specialised task independent search mechanism 
task independent propose revise weak strong method 
basically search algorithm just hill climbing strong assumptions availability domain specific knowledge avoid backtracking inconsistent state 
nutshell strong weak methods continuum define search strategies stronger stronger assumptions availability task specific control knowledge 
sharp dividing line 
characterised method specialization process consists carrying appropriate ontology mappings 
approach clearly separates specification task independent reasoning strategy issue adapting strategy alternative classes tasks 
example approach fensel investigated board game method 
method refinement chronological backtracking player board games 
board game method task specific refinement generic search strategy 
specialized applicable assignment parametric design tasks cf 
eriksson 
ontologies characterising tasks psms completely new 
example defines task ontology diagnostic problems gennari proposed ontologies way specify knowledge requirements problem solving method 
define mainly names knowledge types approach provides black box style specification competence psms abstracts heuristic search knowledge essential specifying psms 
contrast approaches formal ontologies provide declarative axiomatic specifications generic problem classes task ontologies psms method ontologies 
demonstrated adapters formal technique integrate tasks method ontologies 
ontology driven bottom development process described shows derive reasoning method expert ontology 
aim orthogonal approach concerned reuse existing reasoning methods 
worthwhile investigate approach select refine psms ontological characterization proposed 
mizoguchi ontologies characterize tasks 
task ontology decompose task subtasks identify required knowledge types construct problem solver simulates problem solving behaviour domain expert 
main distinction approach aim declarative black box characterization problems psms refer internal details problem solving process 
shown approach centres formal axiomatic reuse oriented specifications generic kbs components 
research software reuse ultimate effectiveness approach validated empirically trying number different application domains 

annette frank van harmelen mark willems anonymous reviewers helpful comments drafts 
akkermans akkermans wielinga th 
schreiber steps constructing problem solving methods 

eds knowledge acquisition knowledge systems lecture notes ai springer verlag 
angele angele fensel studer domain task modelling mike 
sutcliffe 
eds domain knowledge interactive system design chapman hall 
benjamins benjamins problem solving methods diagnosis role knowledge acquisition international journal expert systems research application 
benjamins van heijst tradeoff problem solving methods 
proceedings th banff knowledge acquisition knowledge system workshop kaw banff canada november 
breuker van de velde breuker van de velde eds commonkads library expertise modelling ios press amsterdam netherlands 
bylander chandrasekaran bylander chandrasekaran generic tasks knowledge reasoning right level abstraction knowledge acquisition 
gaines 
eds knowledge acquisition knowledge systems vol pp 

academic press london 
chandrasekaran chandrasekaran design problem solving task analysis 
ai magazine winter issue 
chandrasekaran chandrasekaran johnson smith task structure analysis knowledge modeling communications acm 
eriksson eriksson shahar tu puerta musen task modeling reusable problem solving methods artificial intelligence 
farquhar farquhar fickas rice ontolingua server tool collaborative ontology construction international journal human computer studies 
fensel fensel ontology broker making problem solving method reuse 
proceeedings workshop problem solving methods knowledge systems ijcai japan august 
fensel fensel tower adapters method developing reusing problemsolving methods 
appear proceedings european knowledge acquisition workshop ekaw lnai springer verlag 
fensel fensel specifying knowledge systems reusable components 
proceedings th international conference software engineering knowledge engineering madrid spain june 
fensel fensel specifying verifying knowledgebased systems kiv 
proceedings european symposium validation verification knowledge systems leuven belgium june 
fensel fensel eriksson musen studer developing problemsolving introducing ontological commitments international journal expert systems research applications vol 
gennari gennari tu musen mapping domains methods support reuse 
proceedings th banff knowledge acquisition workshop kaw banff canada 
gruber gruber translation approach portable ontology specifications knowledge acquisition 
gruber gruber principles design ontologies knowledge sharing international journal human computer studies 
kifer kifer lausen wu logical foundations object oriented frame languages journal acm 
klinker klinker marques mcdermott usable reusable constructs knowledge acquisition 
lenat feigenbaum lenat feigenbaum thresholds knowledge 
proceedings th international joint conference artificial intelligence ijcai 
marcus marcus stout mcdermott vt expert elevator designer uses knowledge backtracking ai magazine 
marcus mcdermott marcus mcdermott salt knowledge acquisition language propose revise systems artificial intelligence 
mc mc preliminary steps taxonomy problem solving methods 
marcus ed 
automating knowledge acquisition experts systems kluwer academic publisher boston 
mittal mittal generic model configuration tasks 
proceedings th international joint conference artificial intelligence ijcai san mateo ca morgan kaufman 
mizoguchi mizoguchi ikeda task ontologies reuse problem solving knowledge 
mars ed large knowledge bases ios press 
motta zdrahal motta zdrahal parametric design problem solving 
proceedings th banff knowledge acquisition knowledge system workshop kaw banff canada november 
newell simon newell simon human problem solving prentice hall 
systematic expert systems knowledge representation problem solving methods springer verlag berlin 
explicit ontologies create problem solving methods international journal human computer studies 
schreiber th 
schreiber wielinga akkermans van de velde de commonkads 
comprehensive methodology kbs development ieee expert 
steels steels components expertise ai magazine 
automated configuration problem solving methods diagnosis phd thesis university amsterdam amsterdam nl 
van heijst wielinga shadbolt knowledge acquisition support generalised directive models 
david 
eds second generation expert systems springer verlag 
top akkermans top akkermans tasks ontologies engineering modeling international journal human computer studies 
van heijst van heijst propositions concerning specification problem solving methods 
supplementary proceedings th european knowledge acquisition workshop ekaw nottingham england may 
van de velde van de velde inference structure basis problem solving 
proceedings th european conference artificial intelligence ecai munich august 
van harmelen fensel van harmelen fensel formal methods knowledge engineering knowledge engineering review 
van heijst van heijst schreiber wielinga explicit ontologies knowledge system development international journal humancomputer interaction appear 
wielinga wielinga akkermans th 
schreiber formal analysis parametric design problem solving 
proceedings th banff knowledge acquisition workshop kaw banff canada january 
yost yost configuring elevator systems international journal human computer studies 
zdrahal motta zdrahal motta depth analysis propose revise problem solving methods 
proceedings th banff knowledge acquisition workshop kaw banff canada january 
