dynamic configuration corba components rodriguez roberto ierusalimschy renato departamento de informatica puc rio rio de janeiro brazil roberto inf puc rio br existing support dynamic reconfiguration assumes component interfaces specify input output channels 
corba model supports specifically client server architecture component interfaces describing provided services 
existing bindings corba static stubs impose considerable difficulties dynamic configuration 
investigates interpreted language lua tool dynamic configuration distributed applications corba components 

systems support idea configuration clear distinction programming components programming applications 
configuration application idea joining existing components frequently language different coding component 
described distinction programming large building complete applications programming small building components 
different languages programming levels reflects existence different concerns 
cases meeting point levels kind component interface description 
different components distributed application typically interact exchange information 
interface descriptions contain information kind exchange expected component 
languages conic darwin interface component described terms input output channels 
darwin example component described terms communication objects provides roughly comparable input channels communication objects requires roughly comparable output channels 
approach allows specification different paradigms interaction processes 
filtering structures easily built components shown 
component filter provide left require right output 
example component specification darwin 
attention components corba model interface component described terms method calls accepts interface description language idl 
shows example idl 
approach clearly aimed supporting client server interaction paradigm 
approaches common emphasis typed communication interfaces define type number objects passed component 
essential ensure applications built components correctly 
approaches goals support component reusability 
differ largely level abstraction supported 
stated required provided communication objects darwin seen required provided services 
corba provided services declared interface component known methods turn called component 
hand gives programmer control construction complete application 
hand struct book string author string title interface foo boolean add book book boolean test long div long long 
example component specification corba 
specific case client server applications mechanism supports existing services black boxes implementation programmer needs worry 
coupling service requirements service provisions building application case consists mainly decisions services 
new application view requiring services 
configuration specially reconfiguration distributed applications focus traditional approach 
corba approach little discussed subject 
need dynamically reconfigurable applications corba increasingly apparent specially areas network management real time control systems 
fault tolerance dynamic integration newly available services important goals areas 
existing bindings corba compiled stubs making dynamic incorporation new facilities complex operation 
investigate lua interpreted extension language configuration tool corba applications :10.1.1.45.2941
discussion organized follows 
review common features interpreted languages special attention role configuration applications 
brief presentation lua 
describe luaorb binding corba dynamic invocation interface dii allows corba components dynamically incorporated application 
examples lua configuration language corba applications 

interpreted languages say language interpreted precise statement reasons 
place language usually interpreted compiled 
secondly language implementations combination techniques 
order try precise adopt definition language said interpreted offers mechanism execution chunks code created dynamically words interpreter directly accessible language 
definition languages lisp lua tcl interpreted pascal java 
important features interpreted languages interactivity user programming reflexivity follow directly preceding definition 
properties dynamic typing absence declarations direct consequence definition design interpreted languages easier 
powerful features frequently associated interpreted languages garbage collection dynamic arrays direct relation interpretation fact compiled languages 
programs frequently developed environment installed configured different target environment 
configuration activity relates setting program variables ip addresses local directories server names appropriate values 
configuration may done environment variables simple text files system resource files 
programs complex configuration possibilities increase specially interface related issues 
programs allow menus created modified new operations macros defined 
support flexibility configuration times controlled full fledged programming language 
need fueled development extension languages tcl lua :10.1.1.45.2941
incorporation interpreter run time environment program configuration files contain list data options 
configuration file contain initialization routines expressive power available programming language conditionals loops abstractions 
configuration languages expressive employed classes users 
roughly distinguish basic categories 
composed systems administrators technically advanced users expressiveness language adapt program environment 
include definition security policies adaptation local directory structures 
second class users called expert users usually final users application natural interest programming 
users general employ expressiveness configuration language may program basic chores menu configuration conditional graphical ter application running 
preceding paragraphs term configuration sense tailoring application specific needs environments 
noted task different goals configuration distributed applications 
different points continuum complexity levels 
sense explore utilization language lua proving useful extension configuration sequential applications tool configuration distributed applications 
weaknesses generally associated interpreted languages efficiency robustness 
fact interpreted languages normally slower compiled counterparts factor uncommon 
application domains substantial amount execution time spent primitive operations communication input output calls execution times independent coding application 
programs efficiency compiled languages little value 
similarly robustness language evaluated context 
static verification certainly important ally development large software projects 
conventional programming languages pay price static typing loss polymorphism flexibility 
hand static typing available hand interpreted languages usually rely run time error checking mechanisms uninitialized variables dangling may useful program debugging 
case corba applications important emphasize corba component typically developed conventional statically typed language 
interpreted language glue components may result run time error attempt invoke non existing method call method incorrect parameters 
explained section situation generate fallbacks lua ways similar exceptions may appropriately handled program robustness 

extension language lua lua general purpose configuration language arose need group single extension language customize industrial applications :10.1.1.45.2941
lua integrates design data description facilities reflexive facilities familiar imperative constructs 
believe integration simple syntax powerful programming constructs important role accommodating needs different classes programmers 
simple example lua code shows implementation map function lua function receives list represented table indexes 
function returns new list 
function map local new table local return 
example lua code 
lua dynamically typed 
variables handle values type 
operation performed checks correctness argument types 
basic types number floats string type function lua provides data types nil single value called nil main property different value provided allow arbitrary host data typically pointers stored lua variables table 
type table implements associative arrays arrays indexed integers strings reals tables function values 
associative arrays powerful language construct algorithms simplified point triviality required data structures algorithms searching implicitly provided language 
typical data containers ordinary arrays sets bags symbol tables directly implemented tables 
tables implement records simply field names indices 
lua supports representation providing name syntactic sugar name 
pre defined function provides iteration tables returning index corresponding value time called 
lua functions class values assigned table fields 
feature allows implementation interesting object oriented facilities easier syntactic sugar 
instance expression receiver foo params syntactic sugar receiver foo receiver params function stored field foo object receiver called receiver argument plays role self 
complete treatment lua object oriented facilities may :10.1.1.45.2941
features lua role reflexive character 
instance records objects represented tables easy browse object runtime traversing fields simply checking presence particular fields 
explicit type checking needed primitive function type may returns string describing type argument 
part reflexive nature lua provided fallbacks tag methods lua 
fallbacks allow programmers change normal behavior lua especially abnormal conditions 
instance consider statement receiver foo params receiver lua object foo method receiver expression usually signals error 
fallbacks program catch error give expression meaningful semantics context 
kind facility key implementation luaorb discussed section 
way part language lua event driven environments 
traditional event driven programming deal graphical interfaces 
paradigm useful situations 
describe event driven extension lua distributed programming 
section discusses event driven approach configuration application 

corba corba standard provides communication facilities applications distributed environment 
communication corba objects mediated object request broker orb 
client interact broker idl stubs dynamic invocation interface 
omg idl technology independent syntax describing object interfaces 
specifications written idl compiled client stubs called simply stubs server stubs called skeleton programs 
client program directly linked idl stub 
approach clients recompiled time change server interface takes place time new type object server 
dynamic invocation interface dii generic facility invoking operation runtime defined parameter list 
perform invocation dii program executes steps identification desired object retrieval interface type invocation construction actual request invocation receiving results 
dii allows discovery object type methods run time possible implement mechanisms dynamic typing dii 
dii corba services trading naming services offer basic mechanisms support dynamic distributed object environment 
dynamic environments applications find incorporate new components run time 
applications adapted fly component changes 
level flexibility important applications desktops operating systems network management tools cooperative applications 
dii offers support applications access new object types naming trader services offered corba address problem finding new objects system 
difficulty building method calls 
dii activity involves querying constructing complex structures 
practice easy task applications incorporate new objects dii 
traditional bindings programming static interfaces simpler results robust code developer 
dii programmer access method call modes static stubs 
corba supports types calls synchronous stands traditional rpc semantics oneway allows client invoke method continue execution waiting completion deferred synchronous allows client continue execution immediately method call poll server result 
possibility available dii 
clear dii interesting cases represents difficult task current existing support 
mechanisms offer better support dynamic composition corba objects important topic 
section presents luaorb binding interpreted language lua corba 
luaorb offers suitable support develop open applications allows dynamic composition corba objects 

luaorb binding definition mapping lua corba tried respect common lua 
way possible corba objects way lua objects 
reach goal reflexive characteristics lua corba fully explored 
corba objects accessed lua object generation stubs necessary interesting 
corba objects struct book string author string title interface foo boolean add book book boolean test long div long long 
idl interface 
sible lua need previous declarations dynamic typing 
achieve goal binding built dii 
lua program executes method call luaorb binding intercepts fallbacks dynamically maps parameters types lua idl actual invocation maps results back lua 
mapping parameter types done trying coerce lua values idl types vice versa result types 
binding specifies coercions performed 
interesting notice mapping done dynamic type descriptions actual types lua arguments accessed lua api formal types method parameters accessed interface repository 
lua binding implemented library called luaorb 
explain works example idl interface previously 
example repeated 
create proxy distributed object implements foo interface function way foo foo foo foo master shown examples receive parameters mandatory name interface created second optional name specific instance interface specified parameter 
second parameter specified succeed server object name parameter 
function basically direct mapping equivalent function orb api 
proxy created services related object requested 
example methods foo interface called follows book author title new book foo add book book foo test foo div example shows program handles corba objects way handles lua objects 
example lua table book dynamically mapped idl structure book add book called 
coercion allowed long lua table fields idl structure 
coercion works recursively list lua tables automatically converted array records instance 
dynamic nature coercion allows changes idl interface affect uses lua reordering removing struct fields changes idl types similar representations lua short long array sequence 
discussion scope worth noticing type system emerges properties structural compatibility enforced 
mentioned previously dii allows mode invocation called deferred synchronous client triggers method polls completion 
server point view transparent invocation mode 
specify deferred synchronous call lua programmer prefix method name deferred foo deferred test deferred method call returns handler retrieving method result 
deferred synchronous calls specially natural event driven programming 
setting interesting able define function called completion method 
supported luaorb function completion event takes parameters handler returned deferred synchronous method call function 
method completion function called method results parameters 

configuring corba applications section discuss examples application configuration corba definition components lua configuration language 

interactive configuration important simple lua configuration tool applications corba objects command console 
lua interpreter interactively console linked luaorb console provides user interactive environment access corba objects 
months command console specific context network management 
strong trend network related services offered corba objects specially area telecommunications 
existing network devices provide management information snmp protocol 
library lua developed access snmp network management agents 
linking lua console luaorb results quite flexible environment experienced network administrators 
dynamic characteristic luaorb means access new servers may dynamically incorporated management applications 
interface nameserver typedef sequence string seq string seq string service string domain string subdomain string string domain string subdomain string host string string domain string subdomain string host 

idl interface name server 
instance name server implemented corba object help network manager get specific host 
snmp queries performed host 
presents idl specification name server shows example luaorb combination snmp 
example name server accessed find mail server snmp get information 
user network management system available lua command console perform operation available lua environment user interface graphic facilities access corba servers snmp agents 
way corba component possibly discovered trading server alternative means message ns nameserver dom puc rio inf hosts ns mail dom hosts error mail server domain ns dom hosts ns dom hosts session snmp open peer community snmp get session print var string 
accessing name server luaorb 
newsgroup help management activity 

sets workers subsection consider program illustrate workers supervisor application 
program computes approximation calculating area curve numerical integration 
program structured set workers computing part integration supervisor combining results 
main configuration problem case bind output generated workers partial integration result input supervisor object collects 
solution useful cases specify supervisor object parameter worker call 
worker component idl definition interface worker oneway void long id long nw long intervals supervisor parameter indicates object called completion required 
note presence oneway modifier indicates invocation method asynchronous 
illustrates possible implementation worker interface 
supervisor object shown 
sake simplicity details related corba usage example code 
preceding definitions complete application defined lua code shown 
class worker 
void worker long id long nw long intervals supervisor double area double width intervals int id double width area width result area class supervisor 
double area long nr number calls result long nw number workers supervisor supervisor long area nr nw void supervisor result double area nr nw printf approx pi lf area exit 
worker supervisor classes program 
way structuring application event driven configuration script 
case supervisor object necessary role performed configuration script 
supposing idl definition worker component interface worker double long id long nw long intervals configuration script shown implements structure 
code deferred synchronous call mode function completion event function combine called time deferred call completed 
function adds total checks workers finished 
local supervisor local local worker pi worker nw intervals 
lua code program version 
interesting note versions program dynamic instantiation handled function call 
effective creation new object instance called depends explained section non existence active instance name 

final remarks problem distributed application configuration traditionally addressed supposing interface component provides information provided required services 
years corba style components provided services known widespread 
discussed possibilities limitations associated interpreted language tool dynamic configuration distributed applications corba components 
believe shown promising approach 
points remain open study 
place mentioned previous section corba framework give control dynamic object instantiation 
specifying distributed application frequently essential define application instance class components requires explicit creation new instance 
corba programmer control instance creation dedicated runtime system 
hand ease new application bound existing object instances advantages corba 
issue study specification instantiation constraints way compatible corba standard 
second interesting point event driven approach coupled deferred synchronous method calls 
far seen technique successfully applied small examples discussed sec function combine partial area area partial answers answers answers nw print format approx pi area combine nw intervals answers area local workers workers worker completion event workers deferred nw intervals combine 
lua code program second version 
tion 
intend evaluate approach real sized context network management applications 
interested integrating configuration distributed applications language extension message passing mentioned section 
extension allows lua programs incorporate new code dynamically received messages 
mechanism application controlled lua script may dynamically reconfigured messages sent controlling script 
lua implemented ansi currently running wide range platforms information see www puc rio br lua 
luaorb library implemented visibroker corba compliant implementation 
believe porting luaorb platforms bring major problems implementation relies standard corba components 
run time performance penalty normally associated dii greatly reduced caching queries interface repository 
preliminary tests performance penalty remote call compared call static pre compiled stub 
partially supported cnpq brazilian research council 
andrews 
paradigms process interaction distributed programs 
computing surveys 
ban 
generic management model corba snmp 
phd thesis university zurich 
rodriguez ierusalimschy 
uma experi em ao por 
panel 
sbc 
crane magee 
design patterns binding distributed systems 
sigplan notices 
oopsla proceedings 
ierusalimschy figueiredo :10.1.1.45.2941
lua extensible extension language 
software practice experience 
magee dulay kramer 
constructive development environment parallel distributed programs 
iee iop bcs distributed systems engineering 
magee kramer sloman 
constructing distributed systems conic 
ieee trans 
software engineering se 

geib 
generic object oriented dynamic environment corba 
technical report universite de lille 
object management group framingham ma 
common object request broker architecture specification revision jul 
ousterhout 
tcl tk toolkit 
professional computing series 
addison wesley 
rodriguez ierusalimschy moura 
oes de com 
pages 
rodriguez ierusalimschy 
types school 
sigplan notices 
rodriguez ierusalimschy 
interpreted languages implementing parallel algorithms distributed systems 
euro par parallel processing lyon france aug 
springerverlag 
lncs 
siegel 
corba fundamentals programming 
john wiley sons 
stallings 
snmp snmpv practical guide management standards 
prentice hall 
software visibroker programmer guide version 
