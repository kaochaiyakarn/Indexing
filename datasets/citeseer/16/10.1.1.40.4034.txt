fast similarity search presence noise scaling translation time series databases rakesh agrawal king ip lin sawhney kyuseok shim introduce new model similarity time sequences captures intuitive notion sequences considered similar non overlapping time ordered pairs subsequences similar 
model allows amplitude sequences scaled suitable amount set adjusted appropriately 
subsequences considered similar enclosed envelope speci ed width drawn 
model allows non matching gaps matching subsequences 
matching subsequences need aligned time axis 
model similarity fast search techniques discovering similar sequences set sequences 
techniques nd sub sequences similar sequence 
applied matching system mutual funds data discovered interesting matches 
time series databases naturally arise business scienti decision support applications 
capability nd time sequences subsequences similar sequence able nd pairs similar sequences applications including current address department computer science university maryland college park maryland :10.1.1.128.6559:10.1.1.45.9405
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish special permission endowment 
proceedings st vldb conference zurich switzerland ibm almaden research center harry road san jose ca identify companies similar pattern growth 
determine products similar selling patterns 
discover stocks similar price movements 
find portions seismic waves similar spot geological irregularities 
indexing structure proposed fast similarity searches time series databases assuming data query sequences length 
discrete fourier transform dft map time sequence frequency domain drop rst frequencies remaining ones index sequence tree structure 
generalized allow subsequence matching 
data sequences di erent lengths query sequence smaller data sequences 
sliding window data sequence map window frequency domain save rst frequencies 
data sequence mapped trail feature space 
trails divided represented minimum bounding rectangles turn stored tree answer queries 
earlier pioneering limitations employing practical applications similarity measure euclidean distance subject sequences 
distance measure quite sensitive outliers 
problems amplitude scaling set translation addressed 
consider sequence sequence sequence sequence original sequences removing gap sequence sequence set translation amplitude scaling price history stocks 
proper amplitude scaling set translation necessary determining sequences similar 
straightforward global scaling method sensitive scale points particularly happen outliers 
problem ignoring unspeci ed portions sequences matching sequences addressed 
contribution propose new model similarity time sequences addresses concerns fast search techniques discovering similar sequences 
informally consider sequences similar non overlapping time ordered pairs sub sequence sequence subsequence matching illustration sequence matching sequences similar 
allow amplitude sequences scaled suitable amount set adjusted appropriately 
testing similarity oftwo subsequences check lies envelope speci ed width ignoring outliers 
matching subsequences need aligned time axis 
captures intuition underlying similarity model 
determine sequences similar ignore small non matching regions called gaps translate set align vertically scale amplitude subsequences lie envelope speci ed width corresponding subsequences condition holds total length gaps small compared total length sequences considered similar 
wish handle large number long say years daily data sequences 
primary focus data mining environment user wishes nd similar time sequences set sequences 
able nd similar subsequences match sequence 
user able vary runtime various similarity parameters width envelope tolerance outliers maintaining ciency matching 
matching system consists main parts atomic subsequence matching ii long subsequence matching iii sequence matching 
basic idea create fast indexable data structure small atomic subsequences represents sequences amplitude scaling set 
chosen tree family structures representation arbitrary precision maintained sequence values allowing similarities de ned respect ned distance norm atomic subsequences 
atomic subsequences matches distance ciently computed 
second stage employs fast algorithm stitching atomic matches form long subsequence matches allowing non matching gaps exist atomic matches 
third stage linearly orders subsequence matches second stage determine similar pieces exist sequences 
stage system allows exibility user system de ned dynamic parameters sacri cing ciency 
related nding text subsequences approximately match string 
text sequences normally consist discrete symbols opposed continuous numbers similarity measures search methods quite di erent 
cient indexing matching dimensional models views images addressed computer vision pattern recognition 
geometric hashing proposed technique fast indexing 
key features technique matching max qij vectors invariant respect certain geometric transformations indexing generate initial hypothesis 
classical geometric hashing typically ne invariant coordinates feature model shape pattern generated possible base coordinate system 
invariant coordinates represented cell index table 
matching repeats process index generation collecting high votes matching indices patterns 
application sequence matching classical hashing scheme appropriate 
consider typical case sequences length 
order allow global set scale changes index chosen 
sequences points leads mn indices 
dimension quantized buckets number indices cell order mn example 
real situations relatively smooth sequences indices cluster cell 
matching ciency su ers lot potentially false matches may generated 
furthermore quantization needs xed time index generation making hard vary tolerance allowed de nition similarity match time 
alternatively index table populated take account variance allowed de nition similarity uence index spread index table decreasing ciency 
multidimensional indexing proposed alternative classical geometric hashing context dna sequence matching visual shape matching respectively 
problem ine ciency due high saturation index table false matches alleviated extent 
need xed quantization table compile time drawback technique inappropriate application 
furthermore multidimensional indexing scheme works alphabet size small instance context dna sequence matching index table prohibitively large moderate alphabet size 
expect large alphabet sizes application 
instance sequences amplitude ranges result alphabet size coarse quantization levels alphabet symbol 
dynamic time warping matching popular technique context speech processing sequence comparison shape matching 
method match pattern time series data 
essential idea match dimensional patterns allowing local stretching time parameterization 
matching process compute intensive match time speeded indexing complexity matching mn sequences lengths organization organization rest follows 
section formally model similarity time sequences 
give approach nding similar time sequences model section 
give detailed algorithms section 
section sample results similarity matches applying proposed model algorithms mutual funds data 
conclude summary section 
similarity model time sequences said similar non overlapping time ordered pairs subsequences similar 
sequences scaled suitable amount translated appropriately determining subsequences match subsequences sequence 
subsequences considered similar lies envelope width ignoring outliers 
notions formalized 
notation time sequence ordered set real values 
ith element sequence subsequence consisting elements 
rst referred rst element 
length sequence equal 
relationship de nes total order elements subsequences overlap rst rst rst rst 
norm distance measure 
assume unit time sequences database 
sequence similarity time sequences said similar contain nonoverlapping subsequences sm tm respectively 
si sj ti tj 
scale translation 
si ti subsequence similarity operator de ned 
si represents scaled translated version subsequence si 
pm length si pm length ti length length fraction match length total length sequences speci ed threshold depending application changes de nition similarity 
example sequences database widely varying lengths may length smaller sequence test fractional match length constraint satis ed 
change condition length si length ti min length length additional constraints may placed subsequence pairs contribute match length sequences 
example constraint si ti overlap 
subsequence similarity subsequence similarity operator satis es desiderata subsequences similar lies envelope speci ed width drawn 
able ignore noise outliers 
atomic unit matching subsequence length 
window outlier allowed 
matching window subsequence length maximum gap size may ignored 
sequence sequence projection say projection sequence satis es conditions elements order ii elements corresponding consecutive elements ins say projection sequence projection additionally corresponding elements consecutive elements corresponding consecutive 
shows graphically concept projection 
say subsequences similar exist projections write easy add application dependent constraints subsequence similarity de ned 
example wemay require corresponding gaps outliers equal size 
accommodated changing somewhat de nition projection 
approach approach problem determining sequences decompose problem subproblems 
atomic matching find pairs gap free subsequences length called windows ins similar 
account amplitude scaling set translation normalize sequence values window range form new window formula min max max min min max minimum maximum values window normalized windows similar give section fast algorithm subproblem 

window stitching similar windows form pairs large similar subsequences 

sm 
normalized windows sequences si similar ii starting point window window 
sm 
pair similar subsequences conditions satis ed windows true si overlap si gap holds si overlaps si length overlaps 
windows normalization scale roughly equal holds windows shows stitching possibilities assuming scaling constraint satis ed 
match denoted bold horizontal lines connected dotted line 
top diagram shows pairs windows overlap length 
middle diagram shows pairs windows having gaps bottom diagram shows stitched pair similar subsequences formed combining conditions 
section gives fast stitching algorithm 
condition somewhat weaker requiring global scale sequence goes spirit similarity 
possible fast window stitching algorithm 
sequence sequence sequence sequence sequence sequence illustration stitching possibilities 
subsequence ordering find non overlapping ordering subsequence matches having longest match length 
sk tk pairs subsequences determined similar previous step 
nd subset sl tl slm ofs sli tli scaling matching sli roughly equal 
holds 
total match length subset maximal pm length sli length tli match length subset section gives fast algorithm task 
algorithms give algorithms subproblems identi ed previous section 
atomic matching step need nd pairs subsequences length windows similar 
straightforward brute force approach compares window windows determine similarity take time number sequences length 
better solution 
consider window dimensional space reformulate problem set points dimensional space nd pairs points distance distance de ned norm 
multi dimensional indexing structure store points self join algorithm retrieve pairs matching windows 
building index scan sequence extracting normalizing dimension point corresponding window insert normalized point index 
attached point coordinates ii sequence id corresponding sequence iii starting point window iv scale translation arrive coordinate needed time window stitching 
considerations index structure characteristics problem uenced choice index structure dimensionality 
window sizes typically 
index structure capable handling dimensions range 
self join 
wewant able primarily self joins structure opposed join di erent structures 
data values 
windows normalized range point value coordinates 
points lie hyperplane 
rst considered hashing borrowing ideas geometric hashing techniques recognizing shapes 
unfortunately static hashing scheme hash table boundaries pre set disadvantages hashing means quantization implies errors precision 
matter interval hash region join algorithm look adjacent hash table entries avoid false dismissals 
number hash table entries large making hash table unmanageable 
considered grid index structure grid le decided 
points typically high dimension growth size structure intolerable 
methods partition space adjacent regions doing self join non zero value distance joins adjacent grids performed 
nally settled tree family multi dimensional structures tend resilient higher dimensionalities 
tree methods store dead space regions larger separation 
result fewer pages joined speeding join time 
speci cally implemented tree variants tree tree specialized better problem :10.1.1.141.6518
discuss emphasizing customizations implementation 
tree tree enhanced original tree major ways 
added perimeter bounding regions important factor heuristics node splitting 
second introduced notion forced reinsert shape tree dependent order insertion 
node full immediately portion node reinserted top level 
de nition window data points lying lower dimension hyperplanes hyperplanes zero volume dimension 
tree implementation de ned new measure deciding branch insertion tree viewed extension tree multi dimensions 
tree balanced tree node represents region space 
parent child pair tree children regions parent 
tree achieves balance splitting propagating split upwards 
determining splits 
measure takes account volumes lower dimension hyper surfaces 
dimensional region tree measure region de ned dimensional vector values dimension volume sum dimensional regions volume sum dimensional regions volume perimeter lexicographical ordering order measures 
components measure computed needed basis 
tree tree imposes constraint bounding regions non leaf node overlap :10.1.1.141.6518
boundary surfaces path leaf region reduce search join costs 
drawback splitting internal node split axis may completely divides bounding regions non overlapping regions causing split propagated downwards upwards 
minimum space utilization guaranteed split certain coordinate leading uneven distribution 
turn leads lled internal leaf nodes tree grows faster 
range searching problem may signi cant tree height grow logarithmically 
case similarity self join problem troubling nodes lead pairs nodes getting joined 
attack problem adopting tree reinsertion idea 
downward split results lled leaf node leaf node released tree data points reinserted immediate parent 
need reinsert root case tree overlap rule guarantees insertion algorithm traverse tree back parent 
problem arises inserting point inr tree illustrated 
matter branch taken enlargement introduce overlap regions case nodes restructured 
store problem points temporary structure reinsert time hope splitting restructure allow insertion problem points smoothly 
insertion problem tree procedure node path input node path root output set pairs points distance 

node type non leaf 
forall child node children 
output child node path 


output output join node node 
forall leaf intersect node path 
output output join node leaf 

return output self join algorithm self join algorithm previous join algorithms tree variants focused join di erent index 
contrast application requires lends opportunity traverse tree intelligently 
shows self join algorithm wehave implementation 
algorithm calls recursively node non leaf node 
leaf node join node leaf node overlapping region 
function join compute joins distance points leaf nodes 
function intersect determines leaf nodes regions overlap node traversing index 
self join algorithm ensure leaf nodes joined 
accomplished ancestor list root recursive call algorithm imposing arbitrary order children node 
function intersect returns leaf nodes come ordering 
cpu cost important factor spatial joins 
reduce cpu cost redundant comparisons points nodes rst screen points lie distance boundary surface node sort merge join screened points 
experiments performed datasets showed performance tree better tree application 
window stitching formulate window stitching problem nding longest path acyclic graph 
output window matching step pairs matching windows pair sequences construct match graph follows pair represent pair matching windows vertex 
draw arc vertex corresponding match mi si ti corresponding match mj sj tj starting points windows mj starting points corresponding windows mi 
rst si rst sj rst ti rst tj true corresponding windows matches overlap gap si sj ti tj rst sj si rst tj ti amount sj si amount tj ti assign label lij fsi arc mi mj fsi rst si sj rst ti tj lij fsi length arc lij represents total match length including gaps shows pairs window matches named corresponding match graph 
edge graph maximum gap constraint satis ed 
similarly edge overlapping windows unequal overlap 
sequence sequence match graph consider path obtained composing path arc labels lij fsi ij fs ls ft lt respectively 
ne label ls fsi lt fsi ls lt de nition path composition property paths length length rst rst arc wehave length length 
traverse reverse topological sort order nd longest path correspond longest match 
nal detail concerns ensuring normalization scale roughly windows stitched subsequence 
incorporated graph traversal algorithm checking scales windows corresponding arc path extended consistent scales windows path 
depending application de nition length lij changed exclude gaps match length 
subsequence ordering having pairs similar subsequences determine maximal length match sequences minor variation window stitching algorithm 
form match graph nd longest path 
di erence subsequence matches contribute vertices arcs created somewhat di erent constraint 
match graph sequences arc match mi si ti match mj sj tj created si rst sj ti rst tj corresponding subsequences mj overlap mi come 
length arc sum lengths subsequences si sj ti tj 
fact subsequence ordering step combined window stitching step 
separate steps clarity 
addition applications interested nding subsequences similar sequence 
case require window stitching 
experiments get feel kinds similarity matches algorithm experimented time series database closing prices mutual funds 
data available mit ai laboratories experimental stock market data server www ai mit edu stocks mf html 
test 
show pairs similar mutual funds discovered algorithm 
axis closing price fund dollars axis gives date fund price 
data harbor international fund ivy international fund fidelity selective precious metal mineral fund period july february excluding holidays weekends data points 
data international investor fund january february points 
solid lines graphs represent portions sequences similar algorithm 
dotted lines represent non matching part sequences 
funds group generally perform similarly fund managers maintain di erent portfolios 
price price harbor international fund time ivy international fund time similar mutual funds fund group funds international funds managed di erent fund managers 
funds interesting 
belong di erent groups international fund precious metal mineral fund 
summary addressed problem sequence similarity applications involving dimensional time series data 
intuitive notion sequence similarity parameters user vary runtime maintaining ciency matching 
robust measure allows non matching gaps amplitude scaling set translation 
similarity model fast search techniques discovering similar sequences set sequences 
techniques nd sub sequences similar sequence 
matching system price price international investor fund time fidelity selective precious metal mineral fund time similar mutual funds di erent fund groups consists main parts atomic subsequence matching ii long subsequence matching iii sequence matching 
rtree family structures speci cally tree create fast indexable data structure small atomic subsequences represents sequences amplitude scaling set 
atomic subsequence matches user speci ed distance ciently computed doing self join structure 
second stage employs graph algorithm stitching atomic matches form long subsequence matches allowing non matching gaps exist atomic matches 
third stage linearly orders subsequence matches second stage determine similar pieces exist sequences 
applied matching techniques mutual funds data discovered interesting matches 
example nd funds belonging category funds similar price behavior 
interestingly identify funds belonging di erent fund categories price movements similar 
agrawal faloutsos swami 
efcient similarity search sequence databases 
proc 
fourth international conference data organization algorithms chicago october 
lecture notes computer science springer verlag 
agrawal imielinski swami 
database mining performance perspective 
ieee transactions knowledge data engineering december 
special issue learning discovery knowledge databases 
beckmann 
kriegel schneider seeger 
tree cient robust access method points rectangles 
proc 
acm sigmod pages atlantic city nj may 
berndt cli ord 
dynamic time warping nd patterns time series 
kdd aaai workshop knowledge discovery databases pages seattle washington july 

kriegel seeger 
cient processing spatial joins 
proc 
acm sigmod pages washington may 
califano mohan 
multidimensional indexing recognizing visual shapes 
ieee transactions pattern analysis machine intelligence 
califano rigoutsos 
flash fast look algorithm string homology 
proc 
st international conference intelligent systems molecular biology pages bethesda md july 

graphs networks 
press oxford 
erickson sellers 
recognition patterns genetic sequences 
kruskal editors time warps string edits macromolecules theory practice comparison 
addison wesley ma 
faloutsos ranganathan manolopoulos 
fast subsequence matching time series databases 
proc 
acm sigmod conference management data may 
grimson huttenlocher 
sensitivity geometric hashing 
proc 
rd intl 
conf 
computer vision pages 
guttman 
trees dynamic index structure spatial searching 
proc 
acm sigmod pages boston mass june 
hinrichs nievergelt 
grid le data structure support proximity queries spatial objects 
nagl perl editors proc 
wg intern 
workshop graph theoretic concepts computer science pages linz austria 
lamdan wolfson 
geometric hashing general cient model recognition scheme 
proc 
nd intl 
conf 
computer vision pages 
mcconnell correlation dynamic time warping methods tracking ice oes sar images 
ieee transactions geoscience remote sensing 

approximate matching high dimensionality trees 
sc 
scholarly dept computer science univ maryland college park maryland 

search common patterns sequences 
computer applications biosciences 
sakoe chiba 
dynamic programming algorithm optimization spoken word recognition 
ieee transactions acoustics speech signal processing 
sellis roussopoulos faloutsos 
tree dynamic index multidimensional objects 
proc 
th international conference vldb pages england 
argos 
fast sensitive multiple sequence alignment algorithm 
computer applications biosciences 

wang 
chirn marr shapiro shasha zhang 
combinatorial pattern discovery scienti data preliminary results 
proc 
acm sigmod conference management data minneapolis may 
wu manber 
fast text searching allowing errors 
communications acm october 

