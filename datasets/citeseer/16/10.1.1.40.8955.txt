bayou architecture support data sharing mobile users alan demers karin petersen mike spreitzer douglas terry marvin theimer brent welch computer science laboratory xerox palo alto research center palo alto california contact terry parc xerox com bayou system platform replicated variable consistency mobile databases build collaborative applications 
presents preliminary system architecture design goals influenced 
take fresh bottom critical look requirements mobile computing applications carefully pull new existing techniques architecture meets requirements 
emphasis supporting application specific conflict detection resolution providing application controlled inconsistency 

bayou project xerox parc designing system support data sharing mobile users 
system intended run mobile computing environment includes portable machines ideal network connectivity 
particular user computer may wireless communication device cell modem packet radio transceiver relying network infrastructure universally available unreasonably expensive 
may short range line communication infrared ports available commercial personal digital assistants pdas 
alternatively computer may conventional modem requiring physically connected phone line sending receiving data may able communicate rest system inserted docking station 
communication device may diskette transported machines humans 
main characteristic communication capabilities mobile computer may experience extended involuntary disconnection devices wants share data 
believe mobile users want share appointment calendars bibliographic databases meeting notes evolving design documents news bulletin boards types data spite intermittent network connectivity 
focus bayou project exploring mechanisms mobile clients actively read write shared data 
system cope voluntary involuntary communication outages look users extent possible centralized highly available database service 
presents detailed goals system architecture discusses design decisions meet goals 

architectural design decisions goal support portable computers limited resources 
design flexible client server architecture 
devices envision commonly pdas parctab developed lab insufficient storage holding copies data users want access 
reason architecture division functionality servers store data clients read write data managed servers 
server machine holds complete copy databases 
term database loosely denote collection data items data managed relational database simply stored conventional file system left unspecified architecture 
clients able access data residing server communicate conversely machine holding copy database including personal laptops willing service read write requests nearby machines 
expect portable computers servers databases clients 
commonly occurring case may users disconnected rest system actively collaborating canonical example group colleagues business trip 
giving members disconnected working group access data foresight copy personal machine bayou design lets group member access data available group 
bayou architecture differs systems coda maintain strong distinction servers hold databases file volumes clients hold personal caches 
permitting lightweight servers reside portable machines similar approach taken support mobility lotus notes ficus 
goal high availability reads writes 
design read write weakly consistent replication 
replication absolutely required order users access common database 
algorithms managing replicated data maintaining strong data consistency atomically updating available copies partitioned network particularly site failures reliably detected 
server initiated callbacks cached data invalidation similar problems 
quorum schemes accommodate types network partitions disconnected individuals small groups 
algorithms pessimistic locking unattractive severely limit availability perform poorly message costs high generally case mobile environments 
maximize user ability read write data completely disconnected rest computing environment chose read write replication scheme grapevine 
user able read write copy database 
guarantee timeliness writes propagate replicas communication replicas may currently infeasible 
replicated databases weakly consistent 
techniques managing weakly consistent replicated data desired high availability scalability simplicity employed variety systems 
goal reach eventual consistency minimizing assumptions communication characteristics 
design peer peer anti entropy propagation updates 
servers propagate writes copies database anti entropy protocol 
process called reconciliation synchronize file systems 
anti entropy ensures copies database converging state eventually converge identical states new updates 
achieve servers receive writes order consistently 
peer peer anti entropy adopted ensure machines able communicate able propagate updates 
machines directly communicate exchange updates intermediaries 
server periodically selects server perform pair wise exchange writes server selected depends availability expected costs benefits 
process servers identical copies database writes effectively performed order 
anti entropy structured incremental process servers intermittent asymmetrical connections eventually bring databases mutually consistent state 
goal system support detection update conflicts 
design dependency checks write 
clients may concurrent writes different servers may attempt update data reading date copy update conflicts unavoidable read write replication scheme 
conflicts basic forms write write conflicts clients update data item sets data items incompatible ways read write conflicts client updates data reading value data item concurrently updated second client previously updated different server read 
version vectors developed locus simple timestamps popularly detect write write conflicts 
read write conflicts detected recording checking application read set 
techniques ignore applications semantics 
consider calendar manager users interactively schedule meetings selecting blocks time 
conflict viewed application occur simply users concurrently edit file containing calendar data conflicts arise users schedule meetings time involving attendees 
bayou system detects update conflicts application specific manner 
write conflict occurs state database differs application relevant way expected write operation 
write operation includes data written updated dependency set 
dependency set collection application supplied queries expected results 
conflict detected queries run server current copy database return expected results 
bayou dependency sets provide traditional optimistic concurrency control having dependency queries check version stamps data read update depends 
dependency checking mechanism general example permit blind writes client access copy database wishes inject database update assuming condition holds 
example client laptop wishes schedule meeting particular room assuming room free desired time currently copy room calendar 
goal application specific resolution update conflicts 
design merge procedure passed write automatically resolve conflicts 
system detecting update conflicts provide means resolving conflicts 
approach taken database systems optimistic concurrency control simply abort conflicting transaction 
systems rely humans resolving conflicts detected 
human resolution problematic mobile computing environment user may submit update server disconnect write propagating background time write conflict detected dependency check fails user may inaccessible 
bayou allows writes specify automatically resolve conflicts premise significant number applications order concurrently issued write operations problem suitably dealt application specific manner server maintaining copy database 
bayou write operation includes application specific procedure called invoked write conflict detected 
program reads database copy residing executing server resolves conflict producing alternate set updates appropriate current database contents 
resemble mobile agents originate clients passed servers executed protected environment adversely impact server operation 
general agents read write server database 
execution deterministic function database contents static data 
automatic resolution concurrent updates file directories proposed time employed systems ficus coda 
systems added support application specific resolution procedures similar registered servers invoked automatically conflicts arise 
appropriate resolution procedure invoke chosen file properties type file updated 
flexible may customized write operation semantics application intended effect specific write 
example calendar application may include list alternate meeting times tried choice taken 
summary bayou write operation consists proposed update dependency set 
dependency set dictated application semantics may vary write operation issued application 
verification dependency check execution application update set done atomically respect database accesses server 
goal commit data stable value soon possible 
design include primary purpose commit data set order data committed 
bayou weak consistency means write operation may produce desired update server detected conflict server producing completely different update result executing 
write may produce different results different servers execution may depend current database state 
varying results arise servers seen different sets previous writes process writes different orders 
achieve eventual consistency servers receive writes agree order apply writes databases 
new writes obtained anti entropy may need ordered writes previously obtained may cause previous writes undone reapplied server database copy 
reapplying write may turn cause update database different way previous execution 
user sure outcome write issued stabilized 
way detect stability write gather information server determine writes exist accepted ordered prior write 
unfortunately rate writes stabilize fashion depend rate anti entropy propagates information servers 
server disconnected extended periods time essentially delay stability possibly cause large number writes rolled back 
bayou design includes notion explicitly committing write 
write committed non committed writes ordered outcome stable 
write committed called tentative 
bayou client inquire write committed tentative 
way commit write run sort consensus protocol majority servers 
protocols types network partitions occur mobile computers 
bayou database distinguished server primary responsible committing writes 
secondary servers tentatively accept writes propagate primary 
secondary servers contact primary tentative writes converted committed writes stable commit order chosen writes primary server 
knowledge committed writes ordering propagates primary back secondaries anti entropy 
existence primary server enables writes commit secondary servers remain disconnected 
cases primary may placed near locus update activity database allows writes commit soon possible 
goal permit disconnected clients groups see updates 
design clients read tentative data expectation committed effect possible 
clients issue writes generally wish see updates reflected subsequent read requests database may issue writes depend reading previous writes 
hold client disconnected primary copy updates immediately committed 
extent possible clients unaware updates tentative see change updates commit tentative results equal committed results possible 
bayou system allows clients read tentative data desire 
essentially server maintains views database copy reflects committed data full copy reflects tentative writes currently known server 
full copy estimation database contain tentative writes reach primary 
secondary servers exchange tentative writes anti entropy agree tentative ordering writes 
order timestamps assigned write server accepted servers identical sets writes order identically 
group servers disconnected primary reach agreement order writes resolve internal conflicts 
write ordering tentative may differ order primary chooses commit writes 
case clients outside disconnected group perform conflicting updates writes eventually committed primary tentative order produce effect committed database tentative 
goal provide client view replicated data consistent actions 
design session guarantees 
serious problem read write replication inconsistencies appear single user application making data modifications 
example mobile client issue write server issue read different server 
client see inconsistent results servers performed anti entropy operations 
alleviate problems added session guarantees bayou design 
session abstraction sequence read write operations performed database execution application 
guarantees requested session basis read writes read operations reflect previous writes 
monotonic reads successive reads reflect nondecreasing set writes 
writes follow reads writes propagated reads depend 
monotonic writes writes propagated writes logically precede 
intent individual applications view database consistent actions read write various potentially inconsistent servers 
previous causal operations tried provide similar guarantees weakly consistent replicated data application fine grain control 
session guarantees address problem isolation concurrent applications 
practical implementations guarantees developed system wide state maintained additional coordination servers needed 
amount session state needed ensure guarantees small consisting version vectors 
cost checking version vectors server vectors determine server sufficiently date small frequently amortized session operations 
session guarantees implementation described detail published 
goal permit applications choose appropriate point consistency availability trade 
design individually selectable session guarantees choice committed tentative data age parameter reads 
different applications different consistency requirements different tolerances inconsistent data 
reason bayou permits applications choose just session guarantees require 
main cost requesting session guarantees potential reduction availability set servers sufficiently upto date meet guarantees may smaller available servers 
second applications may choose committed tentative data 
applications deal tentative data inherent instability may limit read requests return committed data 
choice similar strict loose read operations provided tait duchamp file system 
applications specify age parameter reads ensure see committed data timely fashion 
parameter implicitly affect rate secondary servers perform anti entropy primary 
provides clients type bounded inconsistency resembles quasi copies 
goal give users ultimate control placement databases 
design fluid replication number locations database vary time primary server 
bayou system uses fluid replication managing copies database 
database copies allowed flow system changing degree replication locations 
number servers copies vary time 
specified clients possibly determined system usage patterns network characteristics 
example user database laptop free pass copy database user machine 
creating new server database 
primary server database may changed 
dynamic replication important mobile environment deal anticipated network disconnections minimize communication costs 

status bayou architecture supports shared databases read updated users may disconnected users individually group 
individual design choices similar taken previous systems similar reasons 
contribution fresh bottom critical look requirements mobile computing applications carefully pulling new existing techniques architecture meets requirements 
emphasis supporting application specific conflict detection resolution providing inconsistency 
minimal assumptions sorts communication capabilities available mobile computers pattern network partitions re merging occur 
motivation arose experiences xerox parc wireless networks portable devices developed explore ubiquitous computing vision 
bayou architecture outlined fully implemented implementation currently underway 
initially building clients servers run running unix running linux clients types devices parctab follow 
database provides relational model query language read operations dependency checks subset sql 
bayou application meeting room calendar manager scheduler completed linked client stub implementation tested rudimentary server 
anticipate experience obtained building applications cause architecture implementation evolve practical artifact 

acknowledgments bayou project goals system design benefited conversations number colleagues especially tom anderson mary baker brian bershad helen davis hector garcia molina dan greene carl hauser david nichols dan swinehart watson mark weiser 
atul adya summer intern mit implemented current bayou client stub meeting room scheduling application 

alonso korth 
database system issues nomadic computing 
proceedings acm sigmod international conference management data washington may pages 
alonso barbara garcia molina 
data caching issues information retrieval system 
acm transactions database systems september 
barbara garcia molina 
mutual exclusion partitioned distributed systems 
distributed computing 
bernstein goodman 
algorithm concurrency control recovery replicated distributed databases 
acm transactions database systems december 
birrell levin needham schroeder 
grapevine exercise distributed computing 
communications acm april 
carey livny 
conflict detection tradeoffs replicated data 
acm transactions database systems december 
oki kolodner 
limitations database availability networks partition 
proceedings fifth acm symposium principles distributed computing calgary alberta canada august pages 
davidson garcia molina skeen 
consistency partitioned network survey 
acm computing surveys september 
demers greene hauser irish larson shenker sturgis swinehart terry 
epidemic algorithms replicated database maintenance 
proceedings sixth symposium principles distributed computing vancouver canada august pages 
gifford 
weighted voting replicated data 
proceedings seventh symposium operating systems principles pacific grove california december pages 
guy heidemann mak page jr popek 
implementation ficus replicated file system 
usenix conference proceedings pages usenix june 
heidemann page guy popek 
primarily disconnected operation experiences ficus 
proceedings second workshop management replicated data monterey california november pages 
howard 
reconciliation share files occasionally connected computers 
proceedings ieee workshop workstation operating systems napa california october pages 
honeyman 
disconnected operation afs 
proceedings usenix mobile location independent computing symposium cambridge massachusetts august pages 
imielinski badrinath 
mobile wireless computing challenges data management 
communications acm october 
jr greif 
replicated document management group communication system 
proceedings conference cooperative portland oregon september 
kistler satyanarayanan 
disconnected operation coda file system 
acm transactions computer systems february 
kumar satyanarayanan 
supporting applicationspecific resolution optimistically replicated file system 
proceedings ieee workshop workstation operating systems napa california october pages 
ladin liskov shrira ghemawat 
providing high availability lazy replication 
acm transactions computer systems november 
lu satyanarayanan 
isolation transactions mobile computing 
acm operating systems review april 
parker popek stoughton walker walton chow edwards kline 
detection mutual inconsistency distributed systems 
ieee transactions software engineering se may 
reiher heidemann ratner skinner popek 
resolving file conflicts ficus file system 
proceedings summer usenix conference june pages 
satyanarayanan kistler kumar okasaki siegel steere 
coda highly available file system distributed workstation environment 
ieee transactions computers april 
schilit adams gold tso want 
parctab mobile computing system 
proceedings ieee workshop workstation operating systems napa california october pages 
tait duchamp 
service interface replica management algorithm mobile file system clients 
proceedings international conference parallel distributed information systems december pages 
terry demers petersen spreitzer theimer welch 
session guarantees weakly consistent replicated data 
proceedings international conference parallel distributed information systems pdis austin texas september pages 
weiser 
computer science issues ubiquitous computing 
communications acm july 
white 
mobile agents network open platform third party developers 
ieee computer hot topics column november pages 
