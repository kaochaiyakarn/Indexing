representing programs hypertext kurt kasper aalborg university discusses representation programs hypertext 
representing programs hypertext confronts issue program structures represented external node link structure program structures represented internal nodes 
concept anchors plays important role interface external internal structure 
examine different models interplay internal external structures 
obtained ftp ftp auc dk pup reports papers 
exact copy published program representation called internal program representation clarity data structure represents program 
program representation seen contrast external presentation program screen called view 
text syntax trees asts common program representations today 
problem text system structures representing basic syntactic semantic knowledge program 
ast systems capture syntactic structures extended handle static semantics issues 
problem asts representing programs go programming environments narrow sense want find representation suitable artifacts produced software development 
confronted large amounts information different formats 
hypertext geared uniform representation information different formats 
relationships information fragments represented links nodes importantly possible anchors relate internals node internals node 
see hypertext promising way integrate programs related documents provided find acceptable way represent programs hypertext 
hypertext attractive representation combines simplicity text expressive power asts 
experience structure editing real payoff large scale units procedures classes edited structures 
find little payoff statement expression levels 
hypertext interesting way department mathematics computer science fredrik vej aalborg denmark 
internet auc dk kasper auc dk represent structures explicitly keeping statement expression levels text 
purpose research examine hypothesis 
order experiment hypertextual program representation build prototype system called 
system functional year gained deeper understanding representational issues storing programs hypertext 
needless say design uncovered problems 
interested able show node different levels abstraction typically done ast systems pretty printing schemes 
calls ways part node say signature procedure 
fundamentally different ways representing aspects independent actual node leading double representations consistency problems break nodes smaller units accessed independently combined get 
breaking node smaller units refer internal node structure 
discuss alternative ways organizing internal structures nodes discuss traditional hypertext model accommodate proposals 
start description basic hypertext concepts followed variation introduced called rich hypertext 
follows main section describes different models internal node structure rich hypertext 
briefly describe similar outline thoughts programming environments hypertext concepts 
basic hypertext concepts section briefly introduces basic hypertext model 
serve definition vocabulary form basis discussions 
hypertext composed nodes intended information containers contents links relates nodes 
node major parts contents attributes anchors 
link major parts specifiers attributes 
entity generalization nodes links 
contents node information hypertext stored 
storing primary information useful keep auxiliary information author names node names modification dates forth nodes 
done attributes thought named fields hold values simple types formally partial mapping entity theta name value 
notion anchors fundamental part modern hypertext model constituting encapsulation allowing links relate internals node internals 
representation contents attributes affected anchoring 
anchor unique identity relative node designates subpart position node 
nodes textual contents point anchors region anchors typical 
point anchors specifies specific point text region anchors specifies span text 
links attributes manner nodes 
link name source destination 
simplicity binary links talk source destination link 
endpoints described specifiers 
link specifier specifies node anchor identification node relates 
basic hypertext model summarized 
dexter model differs points noticeable allows attributes anchor table contents attributes anchor table contents attributes specifiers link connects nodes 
node consists contents attributes anchor table value anchor designates subpart point contents 
link consists parts attributes specifiers specifier link designates node anchor node 
links arity allows links connect links nodes 
dexter model emphasizes distinction storage layer internal structure node consequently semantics anchor values known system runtime layer internals known 
runtime layer typically editor manipulating contents nodes maintaining anchor values 
notice extensible system storage layer aware internals certains types nodes able manipulate anchor values certain nodes 
rich hypertext addition basic hypertext concepts introduced introduce notion rich hypertext 
rich hypertext hypertext additional characteristics 
typing nodes links typed entities 

internal structure contents nodes broken structural subunits 
addition may attractive ensure rich hypertexts obey topological constraints involve types node link instances 
typed nodes links attractive enables identify register roles nodes roles links 
broad sense hypertext system may take advantage typing entities 
particular drawn types nodes links interaction engine governs presentation interpretation events hypertext 
task presentation framework implemented interaction engine compose hierarchical textual presentation network nodes links node starting point 
main objective framework decide set anchored links node contributes presentation node 
primarily types involved links secondarily values attributes determined links nodes links contribute recursively 
single text broken pieces understood relative isolation form context focus single aspect description 
piece contents node 
source programs named abstractions usually candidates nodes procedure class type size node contents large convey coherent balanced meaning text small fit window screen 
programming terms idea factor fragment abstraction node especially write separate explanation node give fragment name 
example initialization parts procedure factored giving alternative procedural abstraction 
compositional organizational relations nodes represented links may anchored contents source node 
regard modeling programs hypertext certain aspects program structure currently done means naming naturally done explicit links 
example superclass class specified name hypertext natural direct link node contains superclass 
encountered phenomenon cases represent programs hypertext graph representation takes aspects currently handled static semantics 
structure individual node evidently needed single node represent program abstraction entire procedure 
seen come right approach modeling principles organizing information hypertext general representing source code particular 
presentation serves needs 
consequently goal able define range different presentations supports user different application situations 
believe important provide clear aesthetically pleasing views complex descriptions documentation 
important control layout indentation decoration font color resulting presentations 
information presentation framework reader referred separate report interaction engine 
motivating internal structure nodes noticed starting point hypertext modeling subsumes determination logical units information belongs types nodes 
outline hypertext modeling principles useful 
presenting hypertext screen need access defined substructures nodes 
access substructures may form alternative views hypertext 
alternative views may useful buttons anchored links typically name abstraction generally kinds node extracts procedure signature composed procedure names parameter list 
possible edit alternative views way integrity node maintained 
notice want affect basic hypertext model concerns terms breaking nodes subnodes finer granularity disturb hypertext modeling principles 
internal structures nodes section discuss number different models internal node structure context rich hypertexts 
recall look solutions fit hypertext starting point research 
models currently implemented 
model attribute aggregation original idea model simple described follows 
contents node holds textual representation node primary information 

number auxiliary attributes represent secondary information node author creation date editing mode information language 

links anchored text contents 
actual contents node defined aggregation contents auxiliary attributes number text constants 
intention contents inside shell auxiliary attributes fixed text appropriate decoration user easily distinguish different parts presentation 
soon clear attractive represent parts contents attributes order provide immediate access parts presentation framework 
attributes called constituent attributes 
order avoid double representation consistency problems constituent attributes contents define actual contents aggregation remaining contents constituent attributes text constants needed auxiliary attributes 
worth noticing formation actual contents possible existing presentation framework attractive purely pragmatic point view 
editing able keep track positions various attributes store properly back internal attribute structure node instance 
shows sample node model presentation actual contents 
node represents class eiffel programming language 
dots node contents illustrate anchor points 
anchors maintained node referred links see 
terms example conjecture dot anchor point link attribute dots anchor points routines class 
sake example name class type parameter class represented attributes 
actual contents aggregated string class attribute name attribute contents 
number problems model 
hand want maximize coverage node contents anchoring attributes allowed part node hand want allow anchor table node contents attribute table name point attribute name value id value export feature invariant class point export feature attribute routine routine invariant representation node model left node presentation right 
fragments contents factored constituent attributes allow greater variation possible presentations node 
desires contradictory reality model breaks constituent attributes equally distributed entire span actual contents 
second model suited define level structure nodes consisting actual contents level attributes 
presentation framework recursively defined macroscopic node link level recursive definition single node presentation attributes easy obtain model 
presentation node list presentation elements element corresponding contents contains nested presentations presentations links anchored contents turn presentations destination nodes links recursive pattern 
third aggregation node attributes simple primitive compared usual presentation asts compared presentation framework node link level 
definition presentation node attribute values text strings contents ad hoc nearly elegant powerful presentation framework node link level 
model just described course repaired generalized directions 
anchoring links allowed attribute cost added complexity 
difficult realize generalization multiple levels attributes 
third problem discuss number different models may considered versions 
model point anchored attributes concept anchored links primary elements basic hypertext model 
idea generalize anchoring concept include anchored anchor table node contents attribute table name point attribute name value id value class export feature invariant representation node model 
attributes 
model characterized properties 
textual contents model 
number auxiliary attributes constituent attributes similar kinds attributes model 
links attributes may anchored main textual contents 
illustrates representation node terms example models 
seen actual contents may assembled determining anchored values attributes links inserted contents node sake generating node presentation 
different model actual contents formed concatenation text constants attribute values node contents 
insertion anchored attribute value may involve filtering condition include 
insertion anchored link involves type specific filtering condition recursive activation presentation framework link 
link presentation similar model 
cases involve determination decoration inserted elements 
positive side coverage node contents slightly broadened possible anchor links places model 
model problem attribute middle node contents 
model better anchoring concept attributes links may anchored avoiding ad hoc creation actual contents model 
situations node contents forced aggregate presentation text constants attribute values 
negative side left level structures nodes actual contents nested attributes 
anchor table node contents attribute table name attribute name value id value export list exported names class point export feature invariant representation node model 
model region anchored attributes models handled anchors associated points node contents 
addition introduce anchors associated regions text 
concept region valued anchor realized aggregation anchors 
idea embodied model represent entire actual contents node contents part node superimpose number region valued anchors main contents 
attributes may refer region valued anchor 
real value attributes may course regarded spanned region anchor 
shows example region valued anchors attributes 
value attribute name anchor value anchor region main contents 
example extended comparison export list region list names region 
compared previous models concatenation insertions attributes necessary order form actual contents node 
specifications decoration presentation node may necessary 
model straightforward nest regions multi level internal structure imposed main contents 
possible point anchored links middle regions leaving impression links anchored text attributes 
alternative presentations buttons terms concatenated attribute values node contents textual constants formed exact means model model 
added power model comes slightly complicated concept regions 
kernel manages representation nodes needs concerned bookkeeping regions 
furthermore may need check overlapping regions nested properly 
region valued anchors useful areas internal node structure 
useful region valued anchors destination link 
clear region valued anchors source anchoring links 
model system masters project jesper care jens peter designed reflexive hypertext model named 
point discussion important aspect allow anchoring attributes node contents different view presentation 
authors logically distinguish plain nodes main contents structural nodes single main contents composed attributes possible anchoring attributes 
plain nodes useful representing documentation simple paragraphs text structural nodes better suited representing programs 
model representation eiffel example shown 
notice expanded example include class comment specify anchor links invariant comment 
model allows point anchored links 
presentation structural nodes specified fixed text presentation scheme openings attributes particular attributes embedded anchors 
presentation specification allows presentation un anchored links 
presentations specified hypertext functionality similar specifying presentation class name comment export export feature invariant invariant meaning actual attribute value inserted meaning links particular type embedded point 
strong points model treats different levels abstraction full contents buttons node extracts uniform manner solves problem try extend coverage possible enable anchoring consistent manner 
weak sides model idea storing logical contents handle hierarchical structuring 
addition currently means handle mutual presentation sequencing links type 
current system support point anchors necessary bookkeeping delegated entirely textual editor front system 
current version source link associate point valued anchors 
considered limitation presentation framework may user believe link presentation region text 
implemented anchoring destination link 
class point class export feature attribute routine routine invariant anchor table attribute table name point attribute name value id value export 
invariant 
comment class 
model structured node notice absence node contents possibility anchor attributes 
model ast internal structure alternative previous models choose represent programs internally syntax trees asts 
give model programs levels detail draw years experience manipulating accessing structures 
see attractive properties approach refrained model 
reason part research investigate far go problems encounter text representations 
decide point able come text reconsider integrated hypertext ast model 
anchoring mechanism interesting integrated model anchor values pointing subtrees ast 
provide appropriate editors handle new type nodes anchor encapsulation allow handle ast nodes equal footing text nodes 
moment view ast nodes new media type set problems direct solution text related representation research 
model directly comparable system fundamental model information ast possibilities link ast 
approach model able merged efforts 
problem asts starting point asts geared representation relatively unstructured text documentation 
related dynamic design described riley earliest works representing source code hypertext 
eminent difference dynamic design emphasis language independence dynamic design designed specifically support programming language 
commit system specific language issues pertaining semantics programming languages easily support handled dynamic design 
noticeable automatic conversion existing source code hypertext links reflecting static semantic aspects language example links name applications name declarations 
hand dynamic design support ideas presentation flexible interaction patterns guided research 
issue modeling principles riley states principles piece data referenced place node 
applications hypertext final arbitrator goes node example discuss granularity incremental compiler compile single procedure module 
second point interesting perspective paid attention facilities aggregating text 
free chose finer granularity demanded applications combine text different nodes attributes form text handed specific application 
taken approach node granularity kept certain level guided set principles project described directed attributed graphs 
attributes attached nodes related directed edges 
nodes edges types 
going fine grained structure longer need anchors cost structure represented graph oriented form 
believe hypertext concept anchors appropriate provides convenient information hiding principle allows integrate information different formats system 
promising aspect graph grammars 
graph grammars provides formally founded technique restructuring graph addresses need felt occasions define high level commands manipulate hypertext way structural constraints violated 
far avoided graph grammars evident need solve problem specifying enforcing formed hypertext 
perspectives discussed represent source programs terms basic hypertext concepts nodes links attributes anchors 
main emphasis discussion internal node structure fit external hypertext structure traditional hypertext model accommodate internal node structure 
section somewhat broader perspective argue hypertext may interesting underlying foundation programming environments 
find hypertext offer important levels programming environment ffl storage level handle persistency alternative way file systems amount multi user coordination may done server manages hypertext store 
ffl level internal representation hypertext modeling general interesting structuring programs links systematic representations relations pieces program documentation hypertext concepts strong provide internal structure nodes argued 
ffl user interface level hypertext user interface metaphor creating links may interesting alternatives specialpurpose browsers structure oriented editors 
parts demonstrated user interface hypertext programming environment managed component call interaction engine 
motivations research reported comes interaction engine 
concerned handle versioning information hypertext 
clearly prime interest case want hypertext main foundation programming environment 
important areas programming environments weak arguments favor hypertext support 
area program execution testing debugging analysis dynamic properties program 
areas identified problems current hypertext support 
problem related effective interaction appropriate abstraction level hypertext 
may tedious manipulate single links interaction system 
cases attractive manipulate subnetworks handle problem link unlink subnetwork relative existing network 
mentioned interesting try graph editing techniques developed graph grammar systems hypertext systems 
problem related situation cross links needed 
example imagine link applied name definition 
realistic programmer creates links manually 
notion transient links created result program analysis may interesting 
areas research experiments needed 
james victor riley 
manipulating code dynamic design 
proceedings hypertext conference pages 
jesper care jens peter 
meta systems hypertext 
aalborg university department mathematics computer science institute electronic systems fredrik vej dk aalborg 
danish 
engels nagl schafer schurr 
building integrated software development environments part tool specification 
acm transaction software engineering methodology april 
frank halasz mayer schwartz 
dexter hypertext model 
communication acm february 

program text hypertext program dependencies transient linking 
unpublished department computer science information systems univeristy po box sf finland 
bertrand meyer 
object oriented software construction 
prentice hall 
kurt kasper 
representing programs hypertext 
boris magnusson sten minor editors proceedings nordic workshop programming environment research pages 
lund institute technology lund university sweden 
lu cs tr 
kasper 
structural cognitive problems providing version control hypertext 
nanard nanard editors echt proceedings acm conference hypertext pages 
kasper kurt 
tailorable interaction interaction engine 
technical report aalborg university department mathematics computer science 
fredrik vej aalborg denmark april 

object oriented environments chapter pages 
prentice hall 

