applications intelligent agents jennings wooldridge queen mary westfield college university london intelligent agents new paradigm developing software applications 
agent computing significant breakthrough software development sargent new revolution software ovum 
currently agents focus intense interest part sub fields computer science artificial intelligence 
agents increasingly wide variety applications ranging comparatively small systems email filters large open complex mission critical systems air traffic control 
sight may appear extremely different types system little common 
case key abstraction agent 
aim article help reader understand agent technology seen fundamentally important new tool building wide array systems 
precisely aims fold introduce reader concept agent agent systems help reader recognize domain characteristics indicate appropriateness agent solution introduce main application areas agent technology successfully deployed date identify main obstacles lie way agent system developer provide guide remainder book 
section introducing basic concepts importantly notion agent 
section give general guidelines types domain agent technology appropriate 
section survey key application domains intelligent agents 
section discuss issues agent system development section outline structure book 
discuss development agent systems detail describe mean terms agent agent system 
unfortunately immediately run difficulties key concepts agentbased computing lack universally accepted definitions 
particular real agreement core question exactly agent see franklin graesser discussion 
believe researchers jennings wooldridge find broad agreement definitions wooldridge jennings :10.1.1.119.2204
agent computer system situated environment capable autonomous action environment order meet design objectives 
autonomy difficult concept pin precisely mean simply sense system able act direct intervention humans agents control actions internal state 
may helpful draw analogy notion autonomy respect agents encapsulation respect objectoriented systems 
object encapsulates state control state accessed modified methods object provides 
agents encapsulate state just way 
think agents encapsulating behavior addition state 
object encapsulate behavior control execution methods object invokes method object control executed just sense object autonomous control actions 
contrast think agent having exactly kind control actions performs 
distinction think agents invoking methods actions agents tend think requesting actions performed 
decision act request lies recipient 
course autonomous computer systems new development 
examples systems existence 
examples include process control system monitor real world environment perform actions modify conditions change typically real time systems range simple example extremely complex example nuclear reactor control systems software daemons monitor software environment perform actions modify environment conditions change simple example unix program monitors user incoming email obtains attention displaying icon new incoming email detected 
may strange choose call systems agents 
intelligent agents 
intelligent agent computer system capable flexible autonomous action order meet design objectives 
flexible mean system responsive agents perceive environment may physical world user collection agents internet respond timely fashion changes occur proactive agents simply act response environment able exhibit opportunistic goal directed behavior take initiative appropriate applications intelligent agents social agents able interact deem appropriate artificial agents humans order complete problem solving help activities 
term agent understood abbreviation intelligent agent 
researchers emphasize different aspects agency including example mobility adaptability 
naturally agents may additional characteristics certain types applications attributes important 
believe presence attributes single software entity provides power agent paradigm distinguishes agent systems related software paradigms object oriented systems distributed expert systems see wooldridge detailed discussion 
agent system mean key abstraction agent 
principle agent system conceptualized terms agents implemented software structures corresponding agents 
draw parallel object oriented software entirely possible design system terms objects implement object oriented software environment 
best unusual worst counterproductive 
similar situation exists agent technology expect agent system designed implemented terms agents 
number software tools exist allow user implement software systems agents societies cooperating agents 
note agent system may contain non zero number agents 
multi agent case system designed implemented interacting agents general significantly complex single agent case 
number situations single agent case appropriate 
example shall see chapter class systems known expert assistants agent acts expert assistant user attempting computer carry task 
agent application domain characteristics better understanding terms agent agentbased system mean obvious question ask agents offer 
new technology considered useful computer marketplace offer things ability solve problems hitherto scope automation existing technology solve problem considered expensive difficult time consuming risky develop solutions existing technology ability solve problems solved significantly better cheaper natural easier efficient faster way 
jennings wooldridge solving new types problem certain types software system inherently difficult correctly design implement 
simplest general class software systems functional 
systems input computing function giving result output 
compilers obvious examples functional systems 
contrast reactive systems maintain ongoing interaction environment inherently difficult design correctly implement 
process control systems computer operating systems computer network management systems known examples reactive systems 
examples computer system required operate independently typically long periods time 
long recognized reactive systems complex types system design implement pnueli deal effort devoted developing software tools programming languages methodologies managing complexity limited success 
certain types reactive system specialized software engineering techniques tools fail new techniques required 
broadly subdivide systems classes open systems complex systems ubiquitous computing systems 
open systems open system structure system capable dynamically changing 
characteristics system components known advance change time may highly heterogeneous implemented different people different times different software tools techniques 
computing applications increasingly demanded users operate domains 
best known example highly open software environment internet loosely coupled computer network expanding size complexity 
design construction software tools exploit enormous potential internet related technology important challenges facing computer scientists reason worth case study 
internet viewed large distributed information resource nodes network designed implemented different organizations individuals widely varying agendas 
computer system operate internet capable dealing different organizations agendas constant guidance users defined bounds 
functionality certain require techniques negotiation cooperation lie firmly domain multi agent systems bond gasser 
complex systems applications intelligent agents powerful tools handling complexity software development modularity abstraction 
agents represent powerful tool making systems modular 
problem domain particularly complex large unpredictable may way reasonably addressed develop number nearly modular components specialized terms representation problem solving paradigm solving particular aspect 
cases interdependent problems arise agents systems cooperate ensure interdependencies properly managed 
domains agent approach means problem partitioned number smaller simpler components easier develop maintain specialized solving constituent subproblems 
decomposition allows agent employ appropriate paradigm solving particular problem forced adopt common uniform approach represents compromise entire system optimal subparts 
notion autonomous agent provides useful abstraction just way procedures data types objects provide abstractions 
allow software developer conceptualize complex software system society cooperating autonomous problem solvers 
applications high level view simply appropriate alternatives 
ubiquity despite innovations human computer interface design past decades wide availability powerful window user interfaces computer na users find software difficult 
reason user software product typically describe step needs performed solve problem smallest level detail 
power current software applications fully utilized users fundamental rethink needed nature interaction computer user 
equal partnership machine just act dumb receptor task descriptions cooperate user achieve goal 
wrote computing driven delegating manipulating computers 
deliver functionality software applications autonomous vague imprecise specification determine problem best solved solve constant guidance user proactive wait told suggestions user jennings wooldridge responsive take account changing user needs changes task environment adaptive come know user preferences tailor interactions reflect 
words needs behave intelligent agent 
considerations give rise idea agent acting expert assistant respect application knowledgeable application user capable acting user order achieve user goals 
discuss prototypical expert assistants section 
improving efficiency software development agent technology gives tools build applications previously unable build 
provide better means conceptualizing implementing application 
important domain characteristics cited rationale adopting agent technology cf 
bond gasser data control expertise resources inherently distributed system naturally regarded society autonomous cooperating components system contains legacy components interact possibly new software components 
distribution data control expertise resources domain involves number distinct problem solving entities data sources physically logically distributed terms data control expertise resources need interact order solve problems agents provide effective solution 
example distributed health care setting general practitioners hospital specialists nurses home care organizations provide appropriate care sick patient huang 
domain distribution data general practitioner data patient different hospital nurse concerns person distribution control individual responsible performing different set tasks distribution expertise specialist knowledge different general practitioner nurse distribution resources specialist responsible beds required patients general practitioner paying hospital bills applications intelligent agents cases agents provide natural way modeling problem realworld entities interactions directly mapped autonomous problem solving agents resources expertise able interact order get tasks done 
case distributed data sources sensor networks lesser corkill seismic monitoring mason agents means significant amounts processing carried data source high level information exchanged 
alleviates need send large amounts raw data distant central processor making efficient communications bandwidth 
natural metaphor notion autonomous agent appropriate metaphor presenting software functionality 
example program filters email user metaphor personal digital assistant maes meeting scheduling software naturally empowered autonomous social agent interact similar agents user behalf 
applications fact functions implemented series local agents means personalized reflect preferences user 
computer games wavish graham virtual reality systems bates characters naturally represented agents :10.1.1.47.8186
legacy systems large organizations software applications especially information systems perform critical organizational functions 
keep pace changing business needs systems periodically updated 
modifying legacy systems general difficult system structure internal operation corrupted passage time designs documentation lost individuals understanding software move 
completely rewriting software tends prohibitively expensive simply impossible 
long term way keep legacy systems useful incorporate wider cooperating community exploited pieces software 
done example building agent wrapper software enable interoperate systems genesereth ketchpel jennings 
process transforming software application database agent referred shoham 
jennings wooldridge limitations agent solutions agent technology important role play development leading edge computing applications 
applications currently agents built non agent techniques 
mere fact particular problem domain distributed data sources involves legacy systems necessarily imply agent solution appropriate feasible 
system designs ultimate choice dictated factors 
section identified types situation agent solution considered opposed deployed 
noted nature agent paradigm leads number problems common agent applications system controller 
agent solution may appropriate domains global constraints maintained domains real time response guaranteed domains deadlocks livelocks avoided 
global perspective 
agent actions definition determined agent local state 
realistic agent system complete global knowledge possibility may mean agents globally sub optimal decisions 
issue reconciling decision making local knowledge desire achieve globally optimal performance basic issue multi agent systems research bond gasser 
trust delegation 
individuals comfortable idea delegating tasks agents trust 
individuals organizations need accustomed confident notion autonomous software components widely 
users gain confidence agents behalf process take time 
period agent strike balance continually seeking guidance needlessly distracting user seeking guidance exceeding authority 
put crudely agent know limitations 
agent application domains agents major computing paradigm pervasive market year 
orthogonal dimensions agent applications classified 
classified type agent technology implement agent application domain 
choose domain type view fits best objectives structure rest chapter see nwana alternative typology 
aim producing classification scheme simply give feel breadth variety applications intelligent agents agent applications 
comprehensive descriptions specific agent systems aa chaib draa nwana paam van parunak 
industrial applications industrial applications agent technology developed early parunak reports experience applying contract net task allocation protocol manufacturing environment see 
today agents applied wide range industrial applications 
process control process control natural application intelligent agents multi agent systems process controllers autonomous reactive systems 
surprising number agent process control appli cations developed 
best known archon soft ware platform building multi agent systems associated methodology building applications platform jennings 
archon applied process control applications including electricity transportation management application northern spain particle accelerator control 
archon distinction earliest field tested multi agent systems world 
agents archon fairly heavyweight computational systems main components high level communication module manages inter agent communication planning coordination module pcm essentially responsible deciding agent agent information management module aim responsible maintaining agent model world underlying intelligent system represents agent domain expertise 
pcm aim constitute kind agent wrapper encapsulate existing intelligent system pre existing software application turn agent 
manufacturing parunak describes manufacturing system applies known contract net protocol smith manufacturing control 
basic problem described follows 
manufacturing enterprise modeled hierarchy 
example milling grinding painting 
grouped flexible manufacturing systems fms provide functionality assembly paint buffering products 
collection grouped factory 
single organization may different factories factories may jennings wooldridge duplicate functionality capabilities 
goal efficiently manage production process plants 
process defined constantly changing parameters products manufactured available resources time constraints 
order achieve enormously complex task adopts multi agent approach factory factory component represented agent 
agent collection plans representing capabilities 
contract net protocol allows tasks production orders delegated individual factories individual factories individual 
contract net idea negotiation views problem deciding best process product manufacturing requirements negotiation problem 
similar approach developed wooldridge problem determining optimal production sequence factory analyzed tools game negotiation theory 
air traffic control kinny 
describe sophisticated agent realized air traffic control system known oasis 
system undergoing field trials sydney airport australia agents represent aircraft various air traffic control systems operation 
agent metaphor provides useful natural way modeling real world autonomous components 
aircraft enters sydney airspace agent allocated agent instantiated information goals corresponding real world aircraft 
example aircraft goal land certain runway certain time 
air traffic control agents responsible managing system 
oasis implemented dmars system 
system allows agent implemented belief desire intention model agency popular approaches reasoning agents theoretical multi agent systems 
commercial applications information management richness diversity information available everyday lives grown need manage information grown 
lack effective information management tools rise colloquially known information overload problem 
put simply sheer volume information available internet world wide web www represents real problem 
potential resource immediately apparent superficial experience www 
reality disappointing 
reasons 
human factors users getting bored distracted organizational factors poorly organized pages semantic markup conspire users attempting applications intelligent agents resource systematic way 
characterize information overload problem ways information filtering 
day enormous amounts information email news example tiny proportion relevant important 
need able sort wheat chaff focus information need 
information gathering 
volume information available prevents finding information answer specific queries 
need able obtain information meets requirements information collected number different sites 
important contributing factor information overload certainly user required constantly direct management process 
principle reason searches carried agents acting autonomously search web behalf user 
idea compelling projects directed doing exactly 
projects described maxims maes describes electronic mail filtering agent called maxims 
program learns prioritize delete forward sort archive mail messages behalf user 
works looking shoulder user works email reading program uses action user performs lesson 
maxims constantly internal predictions user message 
predictions turn inaccurate maxims keeps 
finds having useful degree success predictions starts suggestions user 
newt maes describes example internet news filtering program called newt 
program implemented unix plat form takes input stream usenet news articles output gives subset articles recommended user reads 
newt agent programmed means training examples user gives newt examples articles read feedback modify internal model term loosely user interests 
user desired explicitly program newt giving precise rules give articles containing word agent 
newt retrieves words interest article performing full text analysis vector space model documents 
digital library digital library organized managed collection data services assist user making data 
digital library system multi agent system enables user obtain single coherent view incoherent disorganized data sources world wide web user data collections articles publishing house sites 
agents play roles jennings wooldridge consumer representing users system thought consuming information producer representing content providers information customers consume facilitator mapping consumers producers 
consumer agents system responsible representing user interests 
maintain models users models assist proactively providing information require shielding information interest 
acts information filter information gatherer 
electronic commerce currently commerce entirely driven human interactions humans decide buy goods willing pay 
principle reason commerce automated 
mean commercial decision making placed hands agents 
lest reader suppose sensible commercial organization decision making money spending responsibility computer program remembered precisely happens today electronic trading stocks shares 
widespread electronic commerce lie distance 
near term electronic trading applications mundane small scale 
example chavez maes describe simple electronic marketplace called kasbah 
system realizes market place creating buying selling agents purchased sold respectively 
commercial transactions take place interactions agents 
business process management managers informed decisions combination judgement information departments 
ideally relevant information brought judgement exercised 
obtaining pertinent consistent date information large complex time consuming process 
reason organizations sought develop number systems assist various aspects manage ment business processes 
project adept jennings tackles problem viewing business process community negotiating agents 
agent represents distinct role department enterprise capable providing services 
example design department may provide service designing telecom network legal department may offer service checking design legal marketing department may provide service costing design 
agents applications intelligent agents require service agent enter negotiation service obtain mutually acceptable price time degree quality 
successful negotiations result binding agreements agents 
agent approach offers number advantages typical workflow solutions problem 
proactive nature agents means services scheduled just time fashion pre specified responsive nature agents means service exceptions detected handled flexible manner 
current version system tested british telecom bt business process involving activities departments plans move full scale field trials 
medical applications medical informatics major growth area computer science new applications computers day health industry 
surprising agents applied domain 
earliest applications areas health care patient monitoring 
patient monitoring guardian system described hayes roth intended help manage patient care surgical intensive care unit 
system motivated concerns patient care model essentially team collection experts distinct areas expertise cooperate organize patient health care second important factors patient health care adequate sharing information members critical care team 
particular specialists tend little opportunity monitor minute minute status patient task tends fall nurses contrast expertise interpret information obtain way appropriate expert 
guardian system distributes patient monitoring function number agents different types perception action agents responsible interface guardian world mapping raw sensor input usable symbolic form translating action requests guardian raw effector control commands reasoning agents responsible organizing system decision making process control agents top level control system 
agents organized hierarchies system closely blackboard model control different agents knowledge sources cooperate sharing knowledge common data structure known blackboard 
jennings wooldridge health care huang 
describe prototypical agent distributed medical care system 
system designed integrate patient management process typically involves individuals 
example general practitioner may suspect patient breast cancer suspicion con rejected assistance hospital specialist 
specialist confirms hypothesis care programme devised treating patient involving resources individuals 
prototype system allows natural representation process agents mapped individuals potentially organizations involved patient care process 
agents prototype contain knowledge intelligent system containing domain expertise agent human computer interface allowing user add remove view system goals communications manager realizes message passing functionality agents 
intelligent system component kads model expertise agent architecture implemented prolog 
message passing realized extensions standard email 
entertainment leisure industry taken seriously computer science community 
leisure applications frequently seen peripheral serious applications computers 
leisure applications computer games extremely consider number copies id software quake sold release 
agents obvious role computer games interactive theater related virtual reality applications systems tend full semi autonomous animated characters naturally implemented agents 
games wavish 
describe applications agent technology com puter games 
example developed version popular tetris computer game user try wall irregularly shaped falling blocks 
agent game takes part user control blocks fall 
trying program agent traditional symbolic ai techniques require going knowledge elicitation stage repre senting knowledge game role user terms symbolic data structures rules 
approach entirely un realistic game tetris hard real time constraints 
wavish colleagues alternative reactive agent model called rta real time able 
approach agents applications intelligent agents programmed terms behaviors 
behaviors simple structures loosely resemble rules require complex symbolic reasoning 
interactive theater cinema interactive theater cinema mean system allows user play role analogous roles played real human actors plays films interacting artificial computer characters behavioral characteristics real people 
agents play part humans theater style applications known believable agents term coined joe bates 
vision agents provide illusion life permitting audience suspension disbelief 
bates number projects set investigate development agents :10.1.1.47.8186
example hayes roth describe directed system human players act roles dynamic narrative creating new user directed 
comments certain level abstraction applications share common features 
individual agents designed built enact particular roles 
agents autonomous goal directed entities responsive environment 
typically interact agents order carry role 
interactions natural consequence inevitable interdependencies exist agents environment design objectives 
agents autonomous interactions usually fairly sophisticated involving cooperation coordination negotiation 
view important observations developing agentbased applications detailed problem solving actions agent determined run time 
individual behavior regulated complex interplay agent internal state external influences environment agents 
precise trajectory agent follow discovered running agent environment 
behavior individual agents uniquely determined design time behavior system emerge run time 
points obvious alarming implications agent approach safety critical application domains air traffic control essential system satisfies specification 
comment issue section 
jennings wooldridge applications illustrate different dimensions analyze agent systems sophistication agents 
agents seen performing broad types behavior 
simplest level gopher agent carries comparatively simple tasks defined pre specified rules assumptions 
level sophistication involves service performing agents carry high level defined task request user arrange meeting find appropriate flight 
predictive proactive agents capable flexible autonomous behavior way discussed 
simple examples agents volunteer information services user asked deemed appropriate 
role agents 
agents play types role 
example industrial commercial applications discussed role agent system provide decision support functionality 
agents act autonomously proactively gather information recommendations human operator ultimate decisions 
contrast entertainment domain example agent completely automates problem solving role delegated particular activity entirely responsible carrying 
granularity view 
applications discussed significant unit analysis design individual agent applications society agents key 
decision adopt single agent multi agent approach generally determined domain similar nature decisions monolithic centralized solutions distributed decentralized solutions appropriate 
single agent systems sense simpler multi agent systems require designer deal issues cooperation negotiation 
agent development bottleneck time writing expertise designing building agent applications scarce 
little way production quality software support building agent applications general understanding issues need addressed building systems 
worse today agent systems built scratch tools techniques easily applied types system 
particularly worrying lot infrastructure required main components agent system built 
moment developers rebuild infrastructure scratch new case process clearly sustainable 
increasing awareness situation change agents mainstream software development kinny applications intelligent agents wooldridge 
support required agent system development process 
follows traditional software engineering model basis structuring discussion issue 
discussion requirements specification stage precedes requirements analysis differ significant way types software system 
requirements analysis stage typically concludes user requirements document statement properties analyst developer believes user client wants new system 
document usually written non technical language understood client developer 
requirements specification understanding reached client needs respect newly commissioned system precise statement required developers intend build 
document tends written formally possible aims precise statement properties system developers build 
number approaches developed agent system requirements specification particular formal mathematical approaches wooldridge 
details formalisms tend complex broadly speaking characterize agents rational decision makers 
mean systems internal state expressed terms mentalistic constructs belief desire intention 
agent decision making characterized terms constructs 
may difficult see specify computer system way idea really quite straightforward 
builds specification set rules strictly speaking logical formulas somewhat agent believes agent believes runway clear agent believe agent erroneous information agent intend agent informed error 
wonder terms believe intend 
beliefs generally refer information agents environment 
information incorrect just way information environment beliefs wrong 
term intention refer goal agent pursue succeeds fails completely admits possibility failure realistic possibility complex systems traditional formalisms tend ignore 
chapter georgeff rao clearest expression view volume 
reader referred wooldridge detailed discussion approaches 
jennings wooldridge system design design robust efficient systems important issues addressed software engineers great deal effort devoted making system design methodical rigorous process 
time writing comparatively workers agent research community considered design methodologies applied agent systems 
situation clearly change agent systems widely particular key questions need addressed adopting agent approach 
goes agent banner rationale choice agent approach arguably simpler alternatives unclear 
analysis appropriate domain properties sections represents step 
macro system structure 
high level system specification need transform specification agents relate agents system structure 
process known refinement 
just way object oriented design methodologies exist give guidelines relating identification objects object interdependencies expect soon see agent oriented design methodologies offer clear guidelines decompose problem agents effects decomposition system performance 
design problem exacerbated fact legacy systems need incorporated agent systems 
design needs done top perspective problem decomposed ideally 
bottom perspective software groupings exist changed 
perspectives accommodated 
system implementation agent system design describe various different roles exist system characterize relationships exist roles 
design generally prescribe implementation agents 
having identified various agent roles system step determine roles best realized 
agent architecture needs devised adopted role deliver required functional non functional characteristics role 
agent architectures developed intelligent agents community different properties wooldridge jennings :10.1.1.119.2204
extreme strong ai systems allow users build agents knowledge systems logic theorem provers 
order build agents systems goes standard knowledge system process knowledge elicitation representation coding agent behavior terms rules frames semantic nets 
extreme agent frameworks simply offer enhanced versions example java applications intelligent agents programming language include ai techniques 
extremes strictly right wrong merits drawbacks 
general course simplest solution effectively solve problem best 
little point complex reasoning systems simple java agents 
obviously detailed guidelines assist decision making process desirable 
system testing debugging verification long ago les gasser wrote concurrency problem domain uncertainty non determinism execution conspire difficult comprehend activity distributed intelligent system urgently need graphic displays system activity linked intelligent model tools help developer reason expected observed behavior 
gasser gasser comments remain true agent system development late mid 
sadly testing debugging neglected areas agent development process 
developers need assistance visualizing happening need debugging facilities step execution amend behavior appropriate 
visualization particularly important determining happening asynchronous concurrent systems exceedingly difficult task 
true agent agents 
traditional debugging features allow execution stopped internal states examined states changed message arrivals simulated essential 
systems features tools developed scratch clearly undesirable state affairs 
structure book chapters book cover wide spectrum issues related applications intelligent agents multi agent systems 
introductory chapters explain basic concepts summarize state art vision chapters look agent applications technical marketing perspective experience chapters deal specific agent systems applications 
detail technological issues addressed include architectures individual agents multi agent systems frameworks implementing agent applications methodologies designing agents multi agent systems techniques attaining efficient coherent communication cooperation jennings wooldridge coordination techniques personalizing agents reflect needs individual users 
predictions issues types markets agents highest impact economic value various agent markets time scales agent technology enter various aspects mainstream software solutions technical non technical obstacles need overcome agents achieve potential 
application domains agent systems described include telecommunications systems personal digital assistants information management information economies business applications air traffic control computer simulation transportation management financial management 
range author affiliations british telecom west ibm gpt sharp daimler benz siemens gte labs france telecom treasury swiss bank covers significant proportion large commercial organizations currently investing agent technology illustrates forcefully pervasive nature exciting new technology 
introductory chapters chapters introduce basic terms concepts agent systems 
provide underpinning remainder book offer point entry new field 
nwana ndumu provide broadly date basic concepts terminology agent systems 
define typology specifies range agents currently exist offer assessment key problems promises different agent types describe number exemplar systems 
takes complementary approach nwana ndumu 
identifies specifies ideal intelligent agent shows current agent landscape divided considering extant systems highlighting particular attributes ideal model 
different related views agents agents automated personal assistants agents cooperating problem solvers agents communicating software entities 
concentrates third view outlines strategy software development lead substantially improved agent applications near term 
vision chapters chapters assess agents today years time 
taken chapters convey excitement potential field highlight key open problems 
applications intelligent agents presents analysis current state agent enabled applications describes change coming years 
identifies broad classes agents user interface agents act behalf user capturing goals translating actions process agents responsible enacting goals 
analysis current market agent technology see contribution notes current generation applications exist self contained niches agents proprietary formats standards interconnection see contributions huhns singh kearney 
circumvent shortcomings presents agent design model acts unifying framework agent applications standard re useable parts 
view building different applications plug play start scratch endeavor 
presents series commercial challenges need overcome agents reach full potential 
presents analysis market agent technology see contribution 
identifies main areas agent technology impact main vendors currently active field 
assesses current trends agent applications offers various predictions size direction market expand time 
foss concentrates concept information brokerage key agent application domains identified 
outlines role intelligent agents intermediary service consumers infor mation sources presents vision commercial information trading environment rich true electronic commerce take place 
view includes dealing adequately currently neglected issues taxation rights revenues 
case pivotal role agent technology vision see plu contribution indication vision realized current generation technology 
kearney concentrates solely class agents personal digital assistants pdas 
important current market agent technology identified 
application class posits role agent software involves mediating individual user range online services see contributions foss 
suggests path current state art successive generations pdas state agents ubiquitous providers personalized services 
vision attained identifies agent interoperability key problem solved see contribution huhns singh 
systems applications chapters section represent current state art applied agent systems 
outline types agent frameworks architectures jennings wooldridge currently develop implement agent systems discuss detail wide range agent applications built technology 
georgeff rao results related design implementation rational software agents 
address fundamental problems agent research gap theory practice 
gap currently large sides field isolation 
authors formal framework specify implement agents 
particular class agents address belief desire intention bdi agents see contribution burmeister 
sketch theoretical foundation agents realized practical agent implementation 
discuss implementation build large scale real world agent applications domains air traffic management business process management air combat modeling 
burmeister discuss agent techniques applied domains traffic management manufacturing 
core technology realizing agent applications cosy modular agent architecture concepts behaviors resources intentions see contribution georgeff rao development environment building agents cf 
development environment steiner 
application architecture traffic applications traffic management freight logistics manufacturing applications flexible manufacturing plant control discussed 
steiner conceptual design specification agent architecture multi agent language called mail implementing single agents cooperative interaction 
design refined multi agent environment constructing cooperative applications model cf 
framework burmeister 
architecture environment demonstrated sample applications areas group scheduling road traffic management see contribution burmeister 
velthuijsen provide overview role agent systems domain telecommunications 
identify types cations applications agent solutions constructed 
include process support see contributions huhns singh network control service management see plu contribution network management transmission switching network design 
discuss justification intense interest part telecommunications organizations agent technology number detailed system case studies offer balanced analysis agents telecommunications 
huhns singh describe set autonomous agents cooperate provide coherent management transaction workflows 
particular concentrate problem agents diverse heterogeneous applications intelligent agents information models interoperate cf 
approach advocated kearney 
approach interoperation predicated fact agents maintain models information resources 
models mapped common ontology ensure coherent semantics cooperating group 
approach exemplified considering multi agent system telecommunication service provisioning 
plu presents agent view organizations design build computer infrastructures provide sophisticated information electronic commerce services customers 
iso standard architecture open distributed processing shows aid scenarios central role agent technology play model distinct levels 
discusses issues related mobile agents identifying appropriate types advantages confer static counterparts 
sycara design implementation series agents tasks filtering evaluating integrating information internet 
agents team demand depending user task situation retrieve filter information 
agents organizational structure adapt prevailing task user 
system demonstrated domain financial portfolio management see wenger probst contribution 
goldberg senator detail system links evaluates reports large cash transactions identify potential money laundering activities 
system operational designed implemented cooperative endeavor involving humans software agents see steiner contribution thoughts human computer cooperation 
main focus presently implemented system knowledge discovery information analysis large data spaces 
system range applicability increased need greater agent agent cooperation emerged 
authors describe generation discuss adopting agent perspective eases system migration task 
wenger probst analyse potential role impact agent paradigm general area providing financial services 
highlight characteristics typical agent applications provide illustrative scenarios domains mortgage sales corporate financial management portfolio management see contribution sycara 
discuss various ways intelligent agents add value financial operations detailed scenario investment sales transaction service assess role agent technology market segment 
jennings wooldridge aa proceedings international conference autonomous agents marina del rey ca 
acm press 
bates 
role emotion believable agents 
communications acm 
bond gasser 
eds 
readings distributed artificial intelligence 
morgan kaufmann 
chaib draa industrial applications distributed ai 
communications acm 
chavez maes 
kasbah agent marketplace buying selling goods 
proceedings international conference practical application intelligent agents multi agent systems london uk 
crabtree jennings 
eds 
proceedings international conference practical application intelligent agents multi agent systems london uk 
franklin graesser 
agent just program 
proceedings third international workshop agent theories architectures languages budapest hungary 
gasser herman 
mace flexible testbed distributed ai research 
huhns ed 
distributed ai 
morgan kaufmann 
genesereth ketchpel 
software agents 
communications acm 
hayes roth 
distributing intelligence individual 
gasser huhns eds 
distributed ai volume ii 
morgan kaufmann 
huang jennings fox 
agent approach health care management 
int 
journal applied artificial intelligence 

pragmatic application information agents 
bis strategic report 
jennings varga fuchs 
transforming stand expert systems community cooperating agents 
int 
journal engineering applications artificial intelligence 
jennings 
developing industrial multi agent systems 
proceedings international conference multi agent systems icmas 
jennings faratin johnson norman brien wiegand 
agent business process management 
int 
journal cooperative information systems 
lesser corkill 
distributed vehicle monitoring testbed tool investigating distributed problem solving network 
ai magazine fall 
maes 
agents reduce information overload 
communications acm 
applications intelligent agents mason 
cooperative interpretation seismic data nuclear test ban treaty verification dai approach 
int 
journal applied artificial intelligence 

digital 
stoughton 
ovum report intelligent agents new revolution software 
paam proceedings international conference practical application intelligent agents multi agent systems london 
parunak 
manufacturing experience contract net 
huhns ed 
distributed ai 
morgan kaufmann 
parunak 
applications distributed artificial intelligence industry 
hare jennings eds 
foundations distributed artificial intelligence 
wiley 
pnueli 
specification development reactive systems 
information processing elsevier north holland 
sargent 
back school brand new abc 
guardian march 
shoham 
agent oriented programming 
artificial intelligence 
smith 
contract net protocol 
ieee trans 
computers 
wavish graham 
situated action approach implementing characters computer games 
int 
journal applied artificial intelligence 
wooldridge jennings 
intelligent agents theory practice 
knowledge engineering review 
wooldridge 
agent software engineering 
iee proceedings software engineering 
wooldridge bussmann 
production sequencing negotiation 
proceedings international conference practical application intelligent agents multi agent systems london 
see www dlib com 
