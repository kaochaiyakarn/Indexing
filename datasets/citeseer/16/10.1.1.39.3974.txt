structuring functional programs monads university pennsylvania may notion monads originates category theory 
popular programming languages community moggi proposed way monads structure denotational semantics 
wadler showed effectively methodology building interpreters 
monads capable capturing individual language features modular way 
evaluates modular approaches building monadic interpreters steele pseudomonads liang hudak jones monad transformers 
consider problem feature interaction monad transformers setting 
monads motivation practical category theory 
certainly programming language theory example 
categorical concepts led important discoveries programming languages vice versa ideas category theory motivated programming languages research 
monads probably fit groups 
category theorists invented monads express certain properties universal algebra 
decades people started studying programming language aspects monads 
biggest contributors promising idea eugenio moggi philip wadler 
original idea monads presenting denotational semantics complex languages 
monads able capture variety commonly language properties 
time clean extensible technique implementing features interpreters 
key feature monads provide convenient notion computation 
enrich computational model distinguishing values computations 
example programs computations calculate answer generate different screen outputs certainly considered different 
hard achieve setting computations viewed statically pure functions 
monads precisely specify desired level distinction computations 
balances tradeoff impure pure functional languages language implementor point view 
hand pure languages haskell benefit power equational 
hand desired features hard implement impure constructs arrays certainly monads provided solutions combined best approaches 
note monads special programming language constructs simply example data abstraction 
particularly data abstraction 
say program written monadic style uses monads 
precisely big advantages monads apart support higher order functions don impose restrictions underlying programming language environment 
monadic style just simple methodology turned surprisingly general variety situations 
capture individual properties keeping abstraction level appropriately high saving concern technical details 
monad 
mentioned earlier concept monads coined category theory adopted computer scientists 
section describes monads functional programming categorical standpoint 
standard haskell notation additions chapter 
reason haskell purely functional programming language close actual mathematical language commonly 
formal interpreters easier 
functional programmer thinks monad triple unitm bindm type constructor unitm bindm polymorphic functions unitm 
bindm 


laws satisfied ffl left unit unitm bindm ffl right unit bindm unitm ffl associativity bindm bindm bindm 
bindm 

notice haskell syntax infix version bindm bindm lambda abstraction written 
intuitively think type type computations resulting value type unitm embeds values computations value unit computation yields value similarly computation 
function bindm computation performs applies resulting value performs computation returned word important bindm control order evaluation 
monad define functions joinm 
mapm 


joinm bindm id mapm bindm 
unitm 
easy see appropriate types holds monad joinm joinm joinm 
mapm joinm joinm unitm id joinm 
mapm unitm id symbol denote functional composition 
far category theorists concerned monad category triple functor id natural transformations diagrams commute gamma 
ja gamma 
ta ta uta gamma 
gamma ta id id ta definitions expected isomorphic certain sense 
regard category objects types arrows functions standard functional composition identity 
functor acts objects types type constructor arrows functions mapm 
polymorphic functions unitm joinm correspond natural transformations respectively 
commutative diagram corresponds derived rule second corresponds 
simple monads see couple simple examples 
simplest identity monad type type constructor identity function 
just ordinary functional application 
monad extreme case exactly identifies values computations 
interesting example case list monad haskell syntax type lists elements type 
assume standard list functions map 


maps function list join 
flattens list lists single list 
list monad type join map 
notice monadic functions really standard map join list functions just normally expect 
similar example tree monad type tree leaf node tree tree leaf leaf 
node 
node type tree type regular binary trees leaves hold values type bind ing function tree results new tree obtained original appending leaf new tree 
new tree obtained applying value stored leaf 
monadic interpreters ready interesting examples 
section see monads implement simple interpreter lambda calculus suggested philip wadler 
wadler demonstrated flexibility idea showing build couple quick variations interpreter 
interpreter deals terms values 
terms consist variables integer constants additions lambda abstractions applications 
value wrong indicating error number function 
implementing interpreter key idea interpret function type 
target language function type 
meta language haskell 
nice thing actual monad description includes details computations exactly represented carried completely separated 
think unitm identity function bindm application particular monad 
communication monad interpreter done operations 
actual code interpreter type name string data term var name con int add term term lam name term app term term data value wrong num int fun value 
value type environment name value showval value 
string showval wrong wrong showval num showval fun function interp term 
environment 
value interp var lookup interp con unitm num add interp bindm 
interp bindm 
add interp lam unitm fun 
interp interp app interp bindm 
interp bindm 
apply lookup name 
environment 
value lookup unitm wrong lookup unitm lookup add value 
value 
value add num num unitm num add unitm wrong apply value 
value 
value apply fun apply unitm wrong test term 
string test interp notice rule application function argument evaluated call value interpreter 
ll shortly see small modification implement call name strategy 
give meaning interpreter 
ordinary interpreter substitute identity monad interpreter defining showval 
try test evaluating test term term app lam add var var add con con conveniently written term get result expected 
error messages error reporting added interpreter defining monad data suc err string unite suc suc err err err suc success showval err error replace monad interpreter 
notice error soon discovered top level function 
introduce error messages simply replace occurence unite wrong appropriate call lookup unbound variable add numbers showval showval apply function showval evaluating test app con con returns error function 
output modify interpreter include output features 
monad included interpreter accumulates output evaluation order occurs 
type string output value showval pair value output generated value 
simply returns value output application concatenates generated outputs 
notice enforces correct order generating output strings 
generally evaluated dependency introduced just describes output propagated 
generate output introduce new function 
need extend language terms interpretation function value 
showval data term 
term interp interp 

interpreting returns value result sends output emptying output buffer time 
interesting detail notice behaves similarly sequencing operator imperative languages usually denoted semicolon 
function body write similar imperative code interp return bind typically behave sequencer monads states 
nondeterminism want model nondeterminism results going lists values single values 
way course list monad map showval 
function translates list strings single string 
include monad interpreter updates data term 
fail amb term term interp fail interp amb interp interp terms ambiguous amb results list values results example evaluating test app lam add var var amb con con yields 
call name call value evaluation strategy functions applied evaluated arguments type functional values fun value 
value 
call name interpreter arguments passed unevaluated functions functional values represented type fun value 
value 
changes shown 
apply function basically looks different type 
data value wrong num int fun value 
value type environment name value interp app interp bindm 
apply interp lookup lookup apply value 
value 
value variables bound computations final values change environment type 
lookup function wrap result monadic type anymore result wrapped 
change application rule reflects fact argument passed unevaluated evaluated function 
combine call name evaluation previously described enhancements 
example nondeterministic version call name interpreter evaluate old example test app lam add var var amb con con 
overview general idea easily extend interpreter deal continuations call need evaluation 
sounds true 
briefly summarize main points problems wadler approach ffl approach benefits reasonably separation interpreter underlying monad 
ffl uniformity monadic approach implementation clean simple easy understand 
ffl type information valuable 
vital properties visible just looking types recall call name modification difference types functional values 
instance easily localize parts program side effects don 
usage different stateful monads haskell closely studied :10.1.1.100.9674
ffl problem interaction multiple monadic features single interpreter addressed gradually build monad captures multiple features 
ffl efficiency monadic implementation drawback 
monadic implementations common features may require heavy higher order functions continuations typical examples 
certain common monads hopefully optimized provided language primitives 
composing monads guy steele really liked wadler 
things 
steele wanted able incrementally add new features existing interpreter precisely specifying 
showed construct monadic building blocks stack obtain monads 
previous chapter saw wadler interpreter flexible usually requires modifications data structures done hand new feature 
steele proposed way process automatic 
main idea pseudomonads 
pseudomonad behaves monad hole 
monad composed pseudomonad certain sound way result new monad 
repeatedly composed pseudomonads enriching interpreter 
interpreter deals terms values 
exist multiple levels multiple levels monads 
terms values hierarchically connected projections form towers data types 
chapter describes monads pseudomonads steele environment 
monads pseudomonads guy steele introduces monads pseudomonads haskell code supports reason quotation clear shortly 
notice names monad pseudomonad type constructors data constructors 
type 
type 


type monad 



data monad monad data pseudomonad pseudomonad unit monad 
unit monad bind monad 
bind monad pseudomonad 
pseudomonad pb pseudomonad 
pseudomonad pb pb wadler defines monad haskell triple unitm bindm containing type constructor polymorphic functions 
steele hand defines monads tuples types necessarily polymorphic functions 
intuitively steele treat type type wadler function bindm 


strictly polymorphic 


definitions match exactly isomorphism establish natural correspondence data types 
monad unitm bindm corresponds completely described family steele monads form 
wadler monads polymorphic deal type constructors steele monads appear special instances 
example define identity monads type monad type monad monad 

pseudomonads essentially monads parametrized monads 
pseudomonad encapsulates types operations 
role unit function ordinary monads kind bind parametrized monad 
convenient keep infix notation defining operators 
haskell way write 
bind 
pseudomonads just monads required certain natural properties ffl left unit unit 
ffl right unit 
unit ffl associativity 





specify compose monads pseudomonads 
done operator 
monad unit 



monad pseudomonad new monad 
left right unit monad laws guaranteed hold associativity needs checked separately 
monads generally compose 
serious problem haskell code 
definition type free type variable legal language 
steele motivation declaration comes fact don priori complete type information monads eventually want compose pseudomonad 
ideally treat type variable existentially 
reasonable requirement quite compatible current haskell type system 
probably easiest way problem include type variable declaration type steele rejects cumbersome solution 
uses preprocessor called program simplifier circumvents certain language restrictions produces correct haskell program 
expected type composition operator monad 
pseudomonad 
monad important confuse operators 
expressions bear special resemblance apart fact definition 
fact different types 

expression 
sense 
requires normally expect compose pseudomonads natural way obtaining pseudomonads 
pa pb pseudomonads composition pb pa satisfies pb pa pb pa building interpreter interpreter mapping terms values 
adding new feature types generally need modified 
idea guy steele introduces notion building blocks 
building block function takes interpreter terms type values type produces new interpreter maps terms type values type 
lifting pseudomonads type pseudomonad type pseudomonad 
multiple composition blocks generates towers data types terms values 
complete interpreter level corresponding package 
package set list routines data certain fixed set vital functions interpreter 
case package contain routines kinds ffl parser parsing ffl interpr interpreting ffl printing ffl error reporting ffl constructing number values ffl constructing function values ffl applying functions ffl namer string names interpreter immediately see inflexibility approach 
set routines nearly exhaustive kinds interpreters consider 
certainly disadvantage approach 
price pay making things bit automatic 
certainly benefit fact don change data structures hand time limited constructing interpreters certain kinds 
meta objection treating parser fundamental component package 
parser completely irrelevant monadic implementation interpreter 
steele probably concerned technical issues parsing parts haskell code tedious read 
package carries type information current types terms values top types terms values types values stored environment 
datatype definitions package 
data routine parser string 
string interpr 
string 

string string 
int 




name string data package package routine notice interpreter accepts term current type produces value top type 
value current type projected top value type tower unit function 
interpr top gamma 
delta delta delta delta delta delta interpr gamma 
interpr gamma 
interpr gamma 

mt pseudomonad mt pseudomonad 
mv pseudomonad mv pseudomonad 
package package package assume existence functions interpr parser package extract corresponding component 
base tower describe construct simple base interpreter type towers 
term interprets projected top term tower resulting value wrong projected top value tower 
data data wrong interpreter tmt tmv top package parser interpr namer unit tmt top invalid expression unit tmv wrong wrong wrong interpreter function interpreter takes parameters produces package 
function called 
parameters top monad terms tmt top monad values tmv top package top 
tmt tmv projecting terms values top towers 
top reporting errors report top level 
complete need give suitable parameters 
building base level top bottom levels 
identity monad candidate tmt tmv 
get top package 
just working constructing 
little lazy trick define top cyclically terms 
complete top top top type term type value complete interpreter complete function ties knot top returns top package 
typically refinements interpreter 
stack pseudomonads stacking corresponding building blocks obtaining 
simply apply complete function finish construction yield top package 
steele problems recursive definitions haskell 
point program simplifier intervene 
floor section describes extend interpreter adding building block 
describe example numbers building block 
term type extended constant constructor addition value type extended numerical values 
data con int add data num int pseudomonad 
con unit con add unit add pseudomonad 
num unit num numbers tmt tmv top update oldpkg list new routines 
oldpkg tmt tmv top con unit tmv num add env interpr top env tmv 

interpr top env tmv 

case num num 
unit tmv num 
top numbers showval top unit tmv showval top unit tmv env interpr env num show oldpkg unit tmv num 
numbers function example building block 
takes old produces new 
case old interpreter 
get new package need complete resulting new 
function complete 
compose pseudomonads identity monad leave top fixpoint knot return final package 
code type term term type value value complete numbers interpreter 
perform multiple extensions similar fashion 
stage interpreter typically evaluated expression form complete bn interpreter bn building blocks 
see building blocks composition generally commutative functional composition 
interesting problem find optimal order building blocks set features 
general kinds issues involved comparing building blocks implementations set features 
program simplifier program simplifier guy steele environment multiple function ffl inlining certain functional definitions ffl fi reductions ff conversions terms way keeps simple readable ffl substitution simplification explicitly provided type declarations term value ffl problems original type checker suggested declarations transformations done program simplifier sound 
usually simple equational reasoning haskell compiler perform finds useful 
transformations attempt correct certain parts steele code failed produce desired effects rejected erroneous compiler 
introducing transformations idea reasons ffl potentially unsound 
ffl sound rules standard language attempts tool needs know exactly 
obstacle wide approach 
benefit program simplifier implementation 
overview give overview basic pros cons steele approach building monadic interpreters 
pros ffl making monads extensible pseudomonads 
ffl dealing multiple upgrades modular fashion 
cons ffl nonstandard definition monad clearly related standard definition 
ffl fixed set possible routines package contain 
ffl lists routines representing packages 
inefficient especially extend notion package 
ffl tight dependence program simplifier actions clearly defined 
monad transformers philip wadler described general monadic methodology building programming language interpreters 
technique promising isn modular nature 
builds monad interpreter scratch 
works certain simple cases job creating monad harder number desired features grows 
question divide job multiple steps 
previous chapter described guy steele attempt solve problem introducing pseudomonads chained form complex monads 
approach wasn general implementation faced various problems due certain language restrictions haskell 
biggest problems type system 
chapter describes liang paul hudak mark jones tries remedy steele problems 
gofer language environment enhanced variant haskell 
key notion monad transformer generalizes pseudomonads 
idea essentially simpler general steele idea 
treat problem lifting operations lower layers higher layers monad transformers natural way 
gofer environment section give brief gofer constructor class system couple illustrative examples 
idea constructor classes similar idea modules structures sml 
want able generically express common features types type constructors 
consider instance map function haskell map 


maps function list 
may interested similar function mapping trees 
data tree leaf node tree tree map 

tree 
tree map leaf leaf map node node map map general may want arbitrary number type constructors 
purpose gofer provides way define signatures type constructor classes instances 
class functor map 


instance functor list map map xs map xs instance functor tree map leaf leaf map node node map map natural define constructor class monads 
functions map join automatically derived unit bind described 
class monad unit 
bind 


map 


join 
map bind 
unit join bind id gofer allows elegantly define terms values extensible union types 
steele program simplifier job flatten data types multiple levels single union type 
consequently eliminates steele typing problems 
traditionally disjoint union types constructed operator shown 
data injections subtypes supertype 
conversely value supertype projected subtypes pattern matching 
generally define subtyping relation specifying injection projection 
class subtype sub sup inj sub 
sup proj sup 
sup data just instance subtype inj prj just prj express subtyping relation reach levels nesting 
instance subtype 
subtype inj inj prj prj prj example declare type value int fun type checker automatically infer int fun subtypes value 
interpreters gofer basics main components interpreter seen liang hudak jones type term type value monad interpm 
wadler idea interpm encodes computations 
call interpreter monad final answers 
components independent richness depends complexity interpreter want build 
interpreting function maps terms computations values 
interp term 
interpm value define class term types interpreted 
class interp 
interpm value gofer automatically build instances class unions term types 
instance 
interp interp interp interp monad transformers wadler idea building single monad interpreter hard realization want implement structurally different features need specify feature interacts 
idea monad transformers capture features individually incremental way build feature top 
require additional order lift common top level 
monad transformer type constructor monad want able embed computations computations need lift operator member function class monad transformers 
class monad monad 
monadt lift 
want embedding natural sense doesn change nature existing computations 
formally require monad transformer satisfies laws ffl lift unitm ffl lift bindm lift lift unitm bindm refer monad refer monad error monad transformer give example simple monad transformer interpreter 
monad transformer errort transforms monad error monad 
typical steps defining monad transformer 
define type constructor data error ok error string type errort error gofer system deduces declaration type constructor 
step define transformation monads introduced type constructor 
instance monad 
monad errort unit unit ok bind bind 
case ok 
error msg 
unit error msg step establish errort monad transformer defining lifting operator 
instance monad monad errort 
monadt errort lift map ok ok 
error map function satisfy map ok 
error shows defined lift appropriate type 
easy check lift naturally embeds computations computations errors 
want play define special class error monads capable encoding erroneous computations special member function err 
establish fact monad monad errort error monad 
class monad 
err string 
instance monad 
errort err unit error unit function definition monad ready construct interpreter small arithmetic language described 
interpreter monad error transformation identity monad final interpreter simply instance class 
type term type value int type type interpm errort data num int add term term instance interp num interp add interp 
interp 
int unit inj bind 
case prj just 

err type error err string 
interpm interpreter somewhat artificial impossible introduce error 
expression type evaluated number 
change declaration term type term obviously possibility errors 
environment monad transformer suppose want extend arithmetic interpreter deal functions 
need extend term type define appropriate operations deal functional computations 
terms functional arithmetic expressions including combinations type term type var name name term name term app term term type name string perform respectively call byname call value abstractions 
assume existence functions handling environment name 
env 
interpm value name interpm value 
env 
env carry computations environments 
generally transform monad environment monad environment monad transformer 
type environments monad type envt 
type computations environments 
corresponding monad transformation 
instance monad 
monad envt unit 
unit bind 
bind 
unit computation ignores environment returns unit computation evaluate bind environment simply evaluate environment yielding result evaluate environment lifting easy lift simply constant function ignores environment 
instance monad monad envt 
monadt envt lift 
define class environment monads 
computations environments inenv read current environment rdenv 
see example 
class monad 
env inenv env 

rdenv env instance monad 
envt inenv 
rdenv 
unit get back functional interpreter 
define value type instance class 
sure interpm environment error monad 
ensure errort envt monad transformers 
type value int fun type fun interpm value 
interpm value instance interp var rdenv bind env 
case env just val 
val 
err unbound variable interp rdenv bind env 
arg inenv arg env interp interp rdenv bind env 
arg 
arg bind 
inenv unit env interp interp app interp 
rdenv bind env 
inenv env interp interpreting variable amounts looking value environment 
call name call value abstractions return function injected value type embedded monad 
difference soon apply call value version immediately reduces argument call name version stores unevaluated argument environment 
state monad transformer state monad transformer adds state monad 
suppose want introduce states type consider type type statet 

view type stateful computations result value type function type takes old state argument returns computation new state result 
base state transformer 
define corresponding monadic transformation 
instance monad 
monad statet unit 
unit bind 
bind 
unit computation simply returns changing state 
evaluate bind state evaluate state yielding result new state 
evaluate state 
complete definition state transformer introducing lift operator 
notice lifted computations don change state expect lifting shouldn change nature old computations 
instance monad monad statet 
monadt statet lift 
bind 
unit naturally state monads able update state 
update member function return old state result time change old state applying argument 
class monad 
statemonad update 

instance monad 
statemonad statet update 
unit notice update id simply reads current state 
state monad transformer implement support 
locations represented integers 
internal representation storage space irrelevant 
important functions available interpm loc loc 
interpm value loc interpm value 
interpm type loc int terms extended constructs 
data ref term deref term assign term term data term semantics obvious 
interpret ref evaluate allocate new cell store result 
location new cell returned result 
dereferencing simply lookup 
assignment updates value stored location returns new value result 
instance interp ref interp bind val 
bind loc 
loc unit val bind 
loc interp deref interp loc 
loc interp assign lhs rhs interp lhs loc 
interp rhs bind val 
loc unit val bind 
unit val notice checks computation computes location time extracts raw location number 
lifting operations preceding examples saw nature certain monads requires come equipped additional monadic operations unit bind 
example error monads err string 
environment monads inenv env 

state monads update 

happens operations apply monad transformer monad 
don exist top level anymore 
break modularity original idea 
solution 
lift operations common top level 
unfortunately way may obvious certainly doable automatically 
state problem precisely 
suppose monad set types possibly monadic operations grammar type constants type variables 
function types product types monad types 
monad transformer inductively define mapping de maps type corresponding lifted type transformer dae dae dm de problem finding natural lifting monad transformer consists finding type operator de conditions met 
la id 
id 
delta delta shown commuting diagram gamma 
gamma 


lm lift delta map conditions ensure naturality lifting 
naturality priori guaranteed just lifting pure computations requirements lift function 
see problematic case lifting functional types 
liang hudak jones giving couple examples don give additional insight try find natural lifting 
deal problem ad hoc manner 
propose simple scheme provides way find lifting operators systematically 
idea try find pseudoinverse operator de delta id operator projects lifted operations 
help build vice versa 
realize inversion basic levels 
formally look pseudoinverse lifting operator lift looking function delta lift id intuitively speaking operator exist cases lift embeds computations layer 
suppose operator 
construct satisfy inductively type la id ua id id id delta delta delta delta lm lift delta map um map delta easy inductive proof shows holds 
show naturality conditions hold just need verify case functional lifting cases trivial 
definition get delta delta delta delta delta delta id give couple examples 
case environment transformer lift 
fixed environment define pseudoinverse 
obviously lift case state monad transformer lift 
bind 
unit 
arbitrary state define pseudoinverse bind 
unit 
get lift 
bind 
unit bind 
unit bind 
unit associativity bind 
unit bind 
unit bind 
unit bind unit overview approaches discussed monad transformers capture originally wished elegant way 
main accomplishments ffl say gofer type system constructor classes definitely hit 
key benefit comes usage extensible union types eliminates need steele towers data types 
automatic inference class instances class methods injections projections instance simplifies code prone errors 
ffl monad transformers modularity steele pseudomonads code smaller efficient 
example case monad transformers don deal lists routines packages level 
need naturally lift monadic operations monad transformers 
helps develop better understanding nature operations want lift 
ffl generality 
monad transformers certainly generalize pseudomonads 
steele case implementor limited fixed set operations package contain 
ffl liang hudak jones spent time technical details parsing 
concentrated essential ideas 
problems approach ffl finding natural lifting 
number potential liftings grows quadratically number monad transformers 
systematic procedure simple schema described section depends finding pseudoinverse lift operator 
ffl sequence monad transformers applied build interpreter monad order apply matters lot just set transformers 
nontrivial task determine order yield efficient code simplest implementing 
ffl nonstandard environment 
gofer undoubtedly useful application considered major haskell standard 
author faced serious problems trying run examples 
related shown monads provide general framework modelling programming language features 
core idea monad define notion computation 
classical calculus types values types computations 
doing fail capture interesting computational aspects various kinds states control evaluator 
monads implementation way structure language description 
moggi pointed traditional denotational semantics lacks modularity provide general mechanism looking various language aspects separately 
monad transformers achieve monad setting 
provide way understanding language features interaction documentation language design 
philip wadler described monads build interpreters 
idea construct monad interpreter 
approach points right direction quite practical scale rebuild monad start new feature added 
guy steele tried fix introducing way compose monads 
purpose pseudomonads essentially higher order monads monads parametrized monads 
developed method creating interpreter building blocks implement separate feature 
blocks glued single interpreter 
approach failed aspects 
nonstandard notion monads 
second struggled limitations haskell type system circumvented program simplifier 
actions program simplifier clearly defined system nonstandard hard possibly erroneous 
sacrificed generality order process upgrading interpreter automatic 
improvement came liang hudak jones attacked problem monad compositionality better weapon monad transformers 
monad transformers generalize pseudomonads give generally simple mechanism building monads multiple layers 
gofer type system constructor classes proved useful purpose 
approach faced problem lifting monadic operations top level 
correctness criteria natural lifting authors didn provide guideline finding actual lifting general case 
different aspects monads studied authors 
jones wadler showed imperative features imported haskell designing model enables invocation functions :10.1.1.100.9674
interesting combination realization requires support unboxed types somewhat unnatural lazy programming languages 
launchbury jones closely studied applications state transformers encapsulating kinds stateful computations haskell 
may wondering computational aspects modeled monads 
answer surprisingly 

philip wadler types certain kinds continuations general interpreted monad 
looks area research need kind generalized monads 
general conclude monads witness close relationship programming languages category theory 
important investigate connection may reveal valuable discoveries areas 
extent continue happen remains seen 
mark jones 
system constructor classes overloading implicit higher order polymorphism 
fpca conference functional programming languages computer architecture copenhagen denmark 
simon peyton jones philip wadler :10.1.1.100.9674
imperative functional programming 
conference record popl 
guy steele jr building interpreters composing monads 
conference record popl 
john launchbury simon peyton jones 
state haskell 
lisp symbolic computation 
sheng liang paul hudak mark jones 
monad modular interpreters 
conference record popl 
eugenio moggi 
view programming languages 
technical report university edinburgh 
philip wadler 
comprehending monads 
mathematical structures computer science 
philip wadler 
essence functional programming 
conference record popl 
philip wadler 
monads composable continuations 
lisp symbolic computation 

