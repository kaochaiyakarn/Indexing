tv tree index structure high dimensional data king ip lin department computer science univ maryland college park cs umd edu jagadish bell laboratories murray hill nj jag research att com christos faloutsos department computer science inst 
systems research isr univ maryland college park christos cs umd edu propose file structure index high dimensionality data typically points feature space 
idea features utilizing additional features additional discriminatory power absolutely necessary 
detail design tree structure associated algorithms handle varying length feature vectors 
report simulation results comparing proposed structure tree successful methods low dimensionality spaces 
results illustrate superiority method savings disk accesses 
type contribution new index structure high dimensionality feature spaces 
algorithms performance measurements 
keywords spatial index similarity retrieval query content applications require enhanced indexing capable performing similarity searching non traditional exotic data types 
target scenario follows research partially funded national science foundation iri iri pyi matching funds software thinking machines collection objects images medical brain scans simply english words find objects similar sample object 
rely domain expert provide appropriate similarity distance functions objects 
list potential applications system follows ffl image databases showed query similar shapes describing shape ordinates rectangles cover features shape 
supported queries color shape texture 
colors color histograms attributes image feature vectors shapes moments 
ffl medical databases objects images rays images mri brain scans stored 
ability retrieve quickly past cases similar symptoms valuable diagnosis medical teaching research purposes 
ffl time series financial databases stock price movements 
goal aid forecasting examining similar patterns may appeared past 
features discrete fourier transform dft 
ffl multimedia databases audio voice music video 
users want retrieve similar music scores video clips 
ffl dna databases large collection strings letter alphabet new string matched old strings find best candidates 
blast algorithm uses successive overlapping grams index 
regarding grams features need features features 
ffl searching names addresses say customer mailing list partially specified errors 
example springs road spring rd john smith dr smith jr similar applications include spelling typing ocr error correction 
wrong string search dictionary find closest strings 
triplets letters assess similarity words case features word assuming words consist exclusively english letters ignoring digits upper case letters 
applications rely expert derive features adequately describe objects interest 
proposed objects mapped points feature space accelerate searching organizing points spatial access method 
feature space low dimensionality known spatial access methods 
applications number features object may order 
spatial access methods past mainly concentrated dimensional dimensional spaces tree methods linear quadtree ones ordering 
conceptually extended higher dimensionalities usually require time space grows exponentially dimensionality 
propose tree structure tries avoid dimensionality problem 
idea variable number dimensions indexing adapting number objects indexed level tree 
nodes close root dimensions store branches enjoy high fanout descend tree discriminating utilizing dimensions 
feature vectors contract extend dynamically resembling telescope called method telescopic vector tree tv tree 
organized follows section gives survey related highlighting problems high dimensionality 
section presents intuition motivation proposed method 
section presents details implementation method 
section gives experimental results 
section lists 
survey mentioned variety applications feature extraction functions map objects points feature space points stored spatial access method 
prevailing methods form classes trees rest tree family linear quadtrees grid files 
different kinds queries arise typical ones listed ffl exact match queries 
find query object database 
example check certain inventory item exists database 
ffl range queries 
query object find objects database certain distance object 
similarity queries falls category 
example find buildings miles washington national airport find words letter substitution word tex find shapes look boeing 
ffl nearest neighbors queries 
query item find item closest similar query item 
example find fingerprint similar 
similarly nearest neighbor queries asked 
ffl pair queries 
set objects find pairs distance ffl find closest pairs 
example map find pairs houses feet 
ffl sub pattern matching 
looking objects want find sub pattern object matches description 
example want find stock movements contain certain pattern want find ray images contain tissue tumor texture 
previous comparing performance different spatial data structures appeared 
compared tree tree tree concluded tree tree give better performance 
pmr quadtree compared tree variants large line segment databases 
results show data structure suited different kind queries 
multidimensional indexing methods explode exponentially dimensionality eventually reducing sequential scanning 
linear quadtrees effort proportional hypersurface bounding query region hypersurface grows exponentially dimensionality 
grid files face similar problems require directory grows exponentially dimensionality 
tree variants suffer single feature vector requires storage space disk page hold case tree fanout reducing linked list 
similar problems high dimensionality reported methods mainly focus nearest neighbor queries voronoi diagrams dimensionalities higher 
method friedman linear scanning dimensionalities 
spiral search method bentley weide complexity grows exponentially dimensionality 
relevant wide variety clustering algorithms see example surveys 
main goals detect patterns data assess quality clustering scheme precision recall measures usually little attention measures space overhead time required create search update structure 
intuition proposed method mentioned target applications require indexing high dimensional feature space 
current spatial access methods suffer dimensionality curse typically exploding exponentially dimensionality 
solution propose contract extend feature vectors dynamically features necessary discriminate objects 
agrees intuitive way humans classify objects example zoology species grouped broad classes features vertebrates versus invertebrates 
classification refined features gradually utilized feature warm blood versus cold blood vertebrates similarly feature lungs versus 
basis proposed tv tree dynamically contracting extending feature vectors 
tree organizes data hierarchical structure objects feature vectors clustered leaf nodes tree description minimum bounding region mbr stored parent node 
parent nodes recursively grouped root formed 
compared tree uses fixed number features tree provides higher fanout top levels basic features opposed possibly irrelevant ones 
objects inserted tree features needed discriminate objects 
time new features introduced 
key point features introduced needed basis soften effect dimensionality curse 
basic telescopic vector concept applied tree nodes describing bounding regions shape cubes spheres rectangles 
flexibility choice telescoping function selects features focus level tree 
discuss design choices subsections 
telescoping function general telescoping problem described follows theta feature vector theta contraction matrix am theta vector am contraction sequence matrices am describes telescoping function provided condition satisfied contractions vectors equal respective contractions variety telescoping functions defined see appendix natural choice simple truncation 
matrix am positions diagonal 
assume truncation telescoping function selected 
proposed method treats features asymmetrically favoring ones rest truncation telescoping function 
similarity queries frequent application domains mind intuitive ordering features result focussed search 
exact match queries depth tree typically considered features choice order boost response time method 
notice correctness affected difference ordering poor ordering may method examine false alarms create false dismissals 
applications appropriate transform feature vector achieve ordering 
ordering features importance order exactly karhunen loeve transform achieves set vectors features returns new features linear combinations old ones sorted discriminatory power 
gives example vectors results karhunen loeve transform illustrated set points 
details karhunen loeve transform see 
karhunen loeve transform optimal set data known advance transform data dependent 
sets data rare updates appear real applications example databases published cd rom dictionaries files customer mailing lists updated batches karhunen loeve transform large sample data available advance new data statistical characteristics old ones 
completely dynamic case resort data independent transforms discrete cosine dct discrete fourier dft hadamard wavelet transform fortunately data independent transforms perform karhunen loeve data follows specific statistical models 
example dct gamma gamma gamma gamma gamma gamma gamma feature feature illustration karhunen loeve transform excellent choice features highly correlated 
case images nearby pixels similar colors 
jpeg image compression standard exactly exploits phenomenon effectively ignoring high frequency components discrete cosine transform 
retained components carry information jpeg standard achieves compression negligible loss image quality 
observed similar behavior discrete fourier transform time series 
example random walks known brown noise brownian walks exhibit skewed spectrum lower frequency components strongest important indexing 
specifically amplitude spectrum approximately gamma frequency 
stock movements exchange rates successfully modeled random walks 
birkhoff theory claims interesting signals musical scores works art consist pink noise spectrum similarly skewed gamma 
general statistical properties data understood data independent transform common situations obtain near optimal results producing features sorted importance order 
stress transform orthogonal tv tree suitable transform just accelerate retrieval 
shape bounding region mentioned earlier points grouped minimum bounding region mbr stored parent node 
shape mbr chosen fit application may hyper rectangle cube sphere shape simplest represent sphere requiring center radius 
sphere radius set points euclidean distance center sphere 
note euclidean distance special case metrics gamma metric manhattan city block distance equivalent sphere diamond shape metric equivalent shape cube 
definition sphere center radius set points distance center coming algorithms tv tree sphere modifications tv tree manipulation algorithms 
algorithm depends chosen shape algorithm computes mbr set data 
diamond shape algorithm appendix minor modifications required tv tree algorithms accommodate popular shapes rectangles ellipses 
compared spheres shapes differ fact different radius dimension 
required changes tv tree algorithms decision making steps criteria choosing split choosing branch traverse insertion 
rest concentrate spheres minimum bounding regions 
tv tree node structure node tv tree represents minimum bounding region sphere descendents 
region represented center vector determined telescoping vectors representing objects scalar radius 
call center region telescopic vector sense contracts extends depending objects stored region 
term telescopic minimum bounding region denote mbr telescopic vector center 
definition telescopic sphere center radius dimensionality ff active dimensions contains set points gamma ff gammaff gamma example inactive dimension active dimension second 
active dimension 
dimensionality dimension taken account specifying dimensionality dimensions considered 
reason need concept tree grows leaf node eventually consist points agree say dimensions 
case exploit fact dimensions inactive dimensions sense dimensions distinguish node descendents 
algorithms tv tree active dimensions ones 
control number active dimensions ff ensure tree ff 
number design parameter tv tree 
definition number active dimensions ff tv tree common number active dimensions 
notation tv denotes tv tree ff shows tv tv trees 
ff determines discriminatory power tree 
discriminatory power needed new dimensions introduced ensure number active dimensions remains 
data structure follows struct integer radius struct list float feature value integer dimensions stands telescopic vector 
center denotes extend indefinitely direction number active dimensions number active dimensions number active dimensions center radius center radius center radius center radius center radius center radius example diamonds spheres different ff tree structure tv tree structure bears similarity tree 
node contains set branches branch represented denoting space covers descendants branch contained allowed overlap 
node occupies exactly disk page 
examples tv tv trees figures 
denote data points dimensions shown 
example tv tree diamonds tv tree number active dimensions diamonds extend ss ss ss ss example tv tree spheres dimension time 
result shapes straight lines rectangular blocks extended infinitely 
tv case resemble dimensional circles 
stage number active dimensions exactly specified 
level tree may involve active dimensions 
fig 
instance pair active dimensions levels tree shown 
commonly new active dimensions level 
case fig 
split 
algorithms search exact range queries algorithm starts root examines branch intersects search region recursively branches 
multiple branches may traversed allowed overlap 
algorithm straightforward pseudo code omitted brevity 
spatial join handled 
recall query requires pairs points close closer tolerance ffl 
recursive algorithm prunes remote branches tree efficient improvements algorithm appeared 
similarly nearest neighbor queries handled branch bound algorithm 
algorithm works follows query query point examine toplevel branches compute upper lower bounds distance descend promising branch disregarding branches far away 
insertion insert new object traverse tree stage choosing branch suitable hold new object 
reach leaf level insert object leaf 
overflow handled splitting node re inserting contents 
insertion split re insert update affected nodes path 
example may increase radius decrease dimensionality contract telescopic vector center accommodate new object 
center radius center radius decrease dimensionality insertion routine node element examines branches node returns suitable accommodate element point inserted 
choosing branch criteria descending priority 
minimum increase overlapping regions node 
choose updating number new pairs overlapping node introduced minimized 
example 

minimum decrease dimensionality 
choose new object agree coordinates possible accommodate new object contracting center little possible 
example picked avoid contracting 

minimum increase radius 

minimum distance center point case previous criteria tie 
shows different instances branch selection 
handling overflowing nodes important aspect insertion algorithm 
overflow caused insertion full node attempt extend telescopic vector 
splitting node obvious way handle overflow 
reinsertion applied selecting certain items reinserted top 
provides chance discard dissimilar items node usually achieving better clustering 
implementation chosen scheme handle overflow treating leaf node internal node differently ffl leaf node pre determined percentage ri leaf contents reinserted time leaf node overflows current insertion 
leaf node split 
different policies choose elements reinserted 
choose furthest away center region 
ffl internal node node split split may propagate upwards 
algorithm insert algorithm insert element tree rooted proc insert node element choose best branch follow descend tree leaf node reached 
insert element leaf node leaf overflows time insertion choose ri elements furthest away center re insert top 
split leaf leaves 
update changed insertion splitting 
split internal node overflow occurs 
splitting goal splitting redistribute set vectors leaves split groups facilitate operations provide high space selected smaller radius resulting region selected center closer point inserted selected selecting result decrease dimensionality selected extending lead new pair overlapping regions new new new illustration choose branch criteria utilization 
ways split 
way clustering technique 
goal try group vectors similar ones reside 
algorithm splitting clustering assume internal node similar leaf nodes proc split node branch float min percent pick seeds branches un similar smallest common prefix centers tie pick pair largest distance centers 
groups headed respectively 
remaining branches add group function way doing split ordering vectors centers ordered way best partition ordering 
current criteria descending priority 
minimum sum radius formed 
minimum sum radius distance centers words try minimize area cover minimize overlap diamonds 
ordering done different ways 
implemented sorts vectors lexicographically 
orderings form space filling curves hilbert curve 
algorithm splitting ordering assume internal node similar leaf nodes min ill minimum percentage bytes node occupied proc split node branch float min ill sort branches ascending row major order centers 
find best break point ordering create sub sets ignore case subsets empty min ill bytes rest cases choose break point sets total radius 
break ties minimum sum radius distance centers 
requirement leaves candidates sort branches byte size repeat step skipping step course 
step algorithm guards rare case long vector center rest short vectors 
case seemingly split leave new nodes highly utilized 
step sure new nodes similar sizes byte wise 
deletion deletion straightforward causes underflow 
case remaining branches node deleted re inserted 
underflow may propagate upwards 
extending contracting mentioned previously extending contracting telescopic vectors important aspects algorithm 
extending done time split reinsertion 
objects inside node redistributed splitting removing reinsertion may case remaining objects values active dimensions 
recalculation new extending occur meaning new active dimensions introduced objects agree rendered inactive 
example extending diamonds 
extending diamond extends dimension 
hand contracting occurs insertion 
object inserted inactive dimensions agree completely object new dimensions contracted resulting lower dimensionality 
extending extending center radius center radius extending diamond ff experimental results implemented tv tree described unix ran experiments 
experiments form sets tried determine value number active dimensions ff tv tree second set compared proposed method tree believe fastest known variation trees 
experimental setup test database collection objects fixed size dictionary words usr dict words keys 
queries exact match range queries find closest matches presence typing errors 
features letter count word ignoring case letters 
word mapped vector dimensions english alphabet letter extra non alphabetic characters 
distance vectors measure editing distance reason spheres diamonds bounding shapes 
apply hadamard transform hadamard transform unix registered trademark unix system laboratories dimension hadamard transform matrix padding extra feature vectors 
matrix defined follows gamma gammah letter count vectors appropriately zero padded 
hadamard transform order give letter weight especially dimensions 
tv trees experiment algorithms described section forced re insertion ordering method splitting 
min ill percentage elements reinserted ri 
numbers comparable parameter optimal tree parameters 
number chosen order provide fair comparison insertion behavior 
experiments words run words randomly drawn dictionary 
varied parameters number active dimensions ff tolerance ffl range query ffl exact match 
exact match queries tried successful searches query word dictionary half database words query points 
experiments unsuccessful search gave similar results omitted 
issued range queries words randomly drawn dictionary number queries half database words 
measured number disk accesses assuming root core number leaf accesses 
measure corresponds environment limited buffer space approximates environment buffer space leaves rest tree fits core 
results analysis number active dimensions set experiments tries determine value ff 
different number active dimensions tv tree tried 
results shown figures 
page size bytes objects size bytes 
measured total number pages accessed assuming tree root stored disk buffer internal levels available 
results similar 
results indicate ff gives best results tv tree outperforms rest 
interpreted optimization conflicting factors tree size number false drops 
smaller ff fewer dimensions available differentiate number active dimensions words words words words words exact match queries leaf accesses vs ff number active dimensions words words words words words range queries tolerance leaf accesses vs ff number active dimensions words words words words words range queries tolerance disk accesses vs ff entries branches searched 
larger ff lead decrease fanout node making necessary branches retrieved search space large 
effectively clustering objects higher dimensions difficult giving constraints shapes allowed 
sort numbers order method breaks higher dimensions 
experiments ran ff best compromise 
comparison tree index creation measured number disk accesses read write needed building indices 
assume update index reflected disk 
general insertion cost cheaper tv tree 
due fact tv tree usually shallower corresponding tree fewer nodes need retrieved fewer potential updates need written back disk 
table show result object size bytes page size 
big jump tv tree addition level introduced 
tv tree fewer level tree 
increase disk access tv tree slower 
table disk access insertion object size bytes dictionary size disk access insertion tree tv tree search set experiments compare proposed tv tree tree 
figures show number disk leaf accesses function database size number records 
number leaf accesses lower curve set 
page size results objects size bytes 
dictionary size tree disk access tree leaf access tv tree disk access tv tree leaf access disk leaf accesses vs db size exact match queries seen figures tv tree consistently outperforms tree savings total disk accesses exact matches similar savings leaf accesses 
savings range queries high large dictionary size 
savings increase size database indicating proposed dictionary size tree disk access tree leaf access tv tree disk access tv tree leaf access disk leaf accesses vs db size range queries tolerance dictionary size tree disk access tree leaf access tv tree disk access tv tree leaf access disk leaf accesses vs db size range queries tolerance method scales database size grows elements savings number leaf accesses increased consistently exact match queries range queries tolerance ffl range queries ffl 
assume leaves stored disk non leaf levels read memory buffer tv tree outperform tree significantly exact match range queries ffl 
experimented various size database objects 
method show significant improvement object size small 
object size increases leaf fan decreases making tv tree grow faster offsetting advantages 
object size improvement exact match range queries ffl 
dictionary size trees tv tree comparison space requirements comparison space requirements shows number nodes pages trees 
tv tree requires fewer number nodes space 
savings 
object size indices number leaf nodes similar fact identical utilization 
implies savings tv tree internal nodes means non leaf levels require smaller buffer significant buffer space limited 
discussion proposed tv tree method indexing high dimensional objects 
novelty lies ability adapt dynamically variable typically small number dimensions needed distinguish objects groups objects 
number required dimensions usually small method saves space leads larger fan 
result tree compact shallower requiring fewer disk accesses 
manipulation algorithms detail guidelines choose design parameters optimal active dimension ff minimum fill factor 
implemented method reported performance experiments comparing method tree 
tv tree achieved access cost savings time resulting reduction size tree storage cost 
savings increase size database indicating method scale 
short believe tv tree method choice high dimensional indexing 
acknowledgments authors ibrahim kamel help write 
appendix calculation telescopic minimum bounding diamond find set points diamonds find largest centers diamond vectors corresponding data points agree dimensions 
project ff dimensions ff number active dimensions tv tree 
projected diamonds reside ff dimensional space 
example table assuming diamonds tv tree 
table ff definition tv tree 
note projected second diamond radius third fourth dimensions active table example diamond projection tv tree original diamond projected diamond center radius center radius dimensions 
means points inside diamond coordinates start 
find minimum bounding diamond projected diamonds center active dimensions final 
non active dimensions common dimensions 
finding minimum bounding diamond projected diamonds formulated linear programming problem 
decided faster approximation algorithm find approximate 
algorithm calculates bounding hyper rectangle projected diamonds center diamond center 
smallest radius needed cover diamonds calculated 
algorithm finding ff number active dimensions proc array diamonds integer ff find min minimum dimensionality diamonds find maximum diamonds dimensions 
ff min set set min gamma ff special case diamonds small dimensionality 
step ensure ff active dimensions project diamond dimensions ff gamma setting radius non projected dimension active retain original radius 
find minimum bounding rectangle projected diamonds 
center 
set center result diamond common dimensions diamonds concatenated find minimum distance needed contain diamonds set radius 
continuing example table bounding rectangle projected diamonds boundary dimension second 
center 
radius required cover diamonds 
final center radius 
appendix telescoping truncation feature vector length contraction length achieved multiplication matrix am example simple summation telescoping function involve truncation 
required series matrices am am position gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma 
words gamma rows single diagonal remaining gamma rows pairs stretched continuation diagonal 
call halving step 
obtain matrix ceiling halving step apply halving step length vector create length vector 
am obtained product matrices application halving step 
similarly value applications halving step produce required contraction 
contraction simply summation elements induced matrix am vector 
rakesh agrawal christos faloutsos arun swami 
efficient similarity search sequence databases 
fodo conference evanston illinois october 
appear 
altschul gish miller myers lipman 
basic local alignment search tool 
journal molecular biology 
freund willet 
automatic spelling correction trigram similarity measure 
information processing management 
arya william cody christos faloutsos joel richardson arthur toga 
prototype medical image database system 
ieee data engineering bulletin march 
franz aurenhammer 
voronoi diagrams survey fundamental geometric data structure 
acm computing surveys september 
beckmann 
kriegel schneider seeger 
tree efficient robust access method points rectangles 
acm sigmod pages may 
jon louis bentley bruce weide andrew yao 
optimal expected time algorithms closest point problems 
acm trans 
mathematical software toms december 
thomas brinkhoff hans peter kriegel bernhard seeger 
efficient processing spatial joins trees 
proc 
acm sigmod pages may 
christopher chatfield 
analysis time series 
chapman hall london new york 
third edition 
jerome friedman forest baskett leonard 
algorithm finding nearest neighbors 
ieee trans 
computers toc october 
fukunaga 
statistical pattern recognition 
academic press 
nd edition 
fukunaga narendra 
branch bound algorithm computing nearest neighbors 
ieee trans 
computers toc july 
greene 
implementation performance analysis spatial data access methods 
proc 
data engineering pages 
guttman 
trees dynamic index structure spatial searching 
proc 
acm sigmod pages june 
john hartigan 
clustering algorithms 
john wiley sons 
hoel samet 
qualitative comparison study data structures large line segment databases 
proc 
acm sigmod conf pages june 
hunter steiglitz 
operations images quad trees 
ieee trans 
pami pami april 
jagadish 
spatial search polyhedra 
proc 
sixth ieee int conf 
data engineering february 
jagadish 
retrieval technique similar shapes 
proc 
acm sigmod conf pages may 
mark jones guy story bruce ballard 
integrating multiple knowledge sources bayesian ocr post processor 
international conference document analysis recognition saint malo france september 
appear 
ibrahim kamel christos faloutsos 
hilbert tree improved tree fractals 
systems research center src tr univ maryland college park 
karen kukich 
techniques automatically correcting words text 
acm computing surveys december 
mandelbrot 
fractal geometry nature 
freeman new york 
murtagh 
survey advances hierarchical clustering algorithms 
computer journal 
desai narasimhalu stavros christodoulakis 
multimedia information systems unfolding reality 
ieee computer october 
wayne niblack ron barber equitz myron flickner eduardo petkovic peter yanker christos faloutsos gabriel taubin 
qbic project querying images content color texture shape 
spie intl 
symposium electronic imaging science technology conf 
storage retrieval image video databases february 
available ibm research report rj feb computer science 
nievergelt hinterberger sevcik 
grid file adaptable symmetric multikey file structure 
acm tods march 
orenstein manola 
probe spatial data modeling query processing image database application 
ieee trans 
software engineering may 
mary beth gregory beylkin ronald coifman ingrid daubechies stephane mallat yves meyer louise raphael 
wavelets applications 
jones bartlett publishers boston ma 
salton wong 
generation search clustered files 
acm tods december 
samet 
design analysis spatial data structures 
addison wesley 
manfred schroeder 
fractals chaos power laws minutes infinite paradise 
freeman new york 
gregory wallace 
jpeg picture compression standard 
cacm april 
contents survey intuition proposed method telescoping function shape bounding region tv tree node structure tree structure algorithms experimental results experimental setup results discussion appendix calculation telescopic minimum bounding diamond appendix telescoping truncation 
