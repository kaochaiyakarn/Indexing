appears proceedings acm conference computer communications security acm november 
random oracles practical paradigm designing efficient protocols mihir bellare phillip rogaway october argue random oracle model parties access public random oracle provides bridge cryptographic theory cryptographic practice 
paradigm suggest practical protocol produced devising proving correct protocol random oracle model replacing oracle accesses computation appropriately chosen function paradigm yields protocols efficient standard ones retaining advantages provable security 
illustrate gains problems including encryption signatures zero knowledge proofs 
department computer science engineering mail code university california san diego gilman drive la jolla ca 
mail mihir cs ucsd edu department computer science university california davis davis ca usa 
mail rogaway cs davis edu cryptographic theory provided potentially invaluable notion cryptographic practice idea provable security 
unfortunately theoretical gain provable security cost efficiency 
due part 
theorists view certain primitives way functions basic build powerful primitives pseudorandom functions inefficient ways practice powerful primitives readily available called basic ones easier implement 
fact theorists deny capabilities practical primitives satisfy strongest kinds assumptions strengths defined formalized 
order bring practice benefits provable security sense incorporate models objects capture properties practical primitives really possess view objects basic assumptions theoretical point view strong 
highlights efficacy potential approach 
idea simple provide parties bad alike access public random oracle prove correct protocol model replace random oracle object hash function 
stress proof random oracle model step heuristic nature 
thesis significant assurance benefits remain 
idea paradigm builds goldreich goldwasser micali fiat shamir 
guided previous unjustified uses hash functions 
incorporates viewpoints shared verbally articulated members community regarded folklore 
light view contribution follows 
raise implicit philosophy random oracle explicitly articulated paradigm maintain brings significant benefits practice 
second systematically apply paradigm diverse cryptographic problems obtain efficient solutions 
third provide definitions proofs show previously unjustified uses hash functions find justification random oracle model 
suggest constructions hash functions believe appropriate instantiate random oracle 
proceed describing paradigm detail 
details background related see section 
random oracle paradigm aforementioned disparity theoreticians views primitives illustrated example 
theorists view way function basic object build pseudo random functions 
practice indicated luby rackoff des provides pseudorandom function bits bits 
ironically needs practical protocol way function construct des reducing simple primitive complex 
trying design efficient protocols sense start making strong realistic assumptions primitives 
paragraph pseudorandom function bit strings excellent starting point 
describe reasonable adopt generous assumptions 
powerful primitives 
look second efficiently computable primitive map defined md algorithm restricted inputs length say 
expectations function hard find hard see section prefer md 
find hamming weight exceeding xa practice pseudorandom function family really object 
date satisfactory answer 
formal definition captures large fraction nice properties function possess clear 
paradigm 
answer function accomplish say thought random function sense design methodology role suppose protocol problem pi problem independent primitive 
order devise protocol pi find formal definition pi model computation parties including adversary share random oracle 
devise efficient protocol pi random oracle model 
prove satisfies definition pi 
replace oracle accesses computation thesis method properly carried leads secure efficient protocols 
protocols constructed paradigm far proven secure practice 
stress claims provable security claims random oracle model instantiating oracle heuristic success trust experience 
note really random function short description 
ways different random oracle 
altered success method 
stress protocol problem pi protocol independent hash function 
easy construct unnatural problems protocols description goals depend explicitly protocol secure random oracle model fails random oracle instantiated hash function 
notion independence formalized 
instantiation 
body assume random oracle oracle explanation provide random maps convenient describing protocol 
instantiating random oracle concrete function care taken ensure adequately conservative design cryptanalytic attack second ensure exposes relevant structure attributable defined lower level primitive 
examples types pitfalls section 
explained section standard hash functions md sha don replacements random oracles doesn look 
candidate instantiations include hash functions outputs truncated hash functions input lengths restricted hash functions nonstandard way md xx 
see section 
results results divided kinds 
new efficient solutions various cryptographic problems 
second justifications known heuristics 
third theoretical results random oracle model investigations lead prove 
case provide protocols theorems new definitions appropriate random oracle setting 
efficient encryption 
goals possible impractical standard setting practical random oracle setting 
illustrate example public key encryption 
follows random generator security parameter random hash function trapdoor permutation inverse gamma phi denotes bitwise xor jxj bits output denotes concatenation 
concrete implantation squaring rsa 
suggest schemes encrypt efficiently random oracle model set phi random value domain 
set phi rx random value domain message encrypted recipient public key gamma secret key 
background definitions precise statements results efficiency comparisons known schemes see section briefly argued scheme achieves polynomial semantic security defined second secure chosen ciphertext attack sense non malleable sense significantly efficient previous provably secure schemes goals 
justification known heuristics 
variety known tricks find formal justification moving random oracle setting 
mean existing protocols usually justified adopting random oracle model contrary appears exception rule 
illustrate pair examples 
popular signature schemes rsa instance trapdoor permutation hash function signature message gamma 
widely recognized usual properties hash function collision freeness don suffice method secure signature scheme 
random hash function show scheme secure adaptive chosen message attack 
see section 
heuristic eliminate interaction zero knowledge interactive proof attributed blum prover essentially ask queries verifier ask computing queries hash messages exchanged parties 
show construction provably secure random oracle model 
providing proof necessitated giving formal definitions zero knowledge random oracle model 
see section 
theoretical results 
generalizing result just described show language interactive proof proof efficiently transformed non interactive zeroknowledge 
model computation parties including cheating provers afforded polynomially queries random oracle 
show random oracle model constant round information theoretically secure function evaluation possible 
definitions proofs results omitted lack space 
background related basic idea proving correct protocol model parties random oracle instantiating oracle appropriate cryptographic primitive originates 
cryptographic primitive suggested constructed purpose pseudo random function prf 
prf retain properties seed specified enables computation remain unknown adversary 
applicability paradigm restricted protocols adversary denied access random personal communication micali rudich 
application suffice replace pseudorandom generator random generator 
oracle 
applications ones particular prfs don suffice 
note setting permits instantiation oracle prfs resulting protocol usually proven correct standard model computation standard complexity theoretic assumption instantiation hash functions suggest achieve 
explicitly adopts public random oracle model parties adversary included access oracle fiat shamir 
authors model turn identification scheme digital signature scheme totally sacrificing rigor course transformation 
blum aforementioned idea making interactive proofs non interactive thought extension fiat shamir idea 
exciting result computationally bounded checking due micali exploits part technique 
impagliazzo rudich model way functions random oracles 
order show proving existence secret key exchange protocol black box way function hard separating np 
random oracles positive results formalize prove existence private key cryptosystem random oracle model 
concurrent independent leighton micali view hash functions public random oracles justify security new efficient signature scheme 
random oracle model define prove exact non asymptotic security 
authors hash functions viewed random oracles give new secret key exchange schemes 
breadth topics history specific particular goal summarized section describes goal 
directions brought limited way current fully fact random oracle model facilitates giving definitions results precise sense avoiding complexity theory asymptotics 
feasible desirable results precise sense 
typical theorem express advantage adversary gains terms number oracle queries 
know complexity theoretic assumption job capturing nice properties public random oracle 
way extend notion pseudorandom function family equally useful compelling notion involves hidden randomness 
preliminaries notation 
denotes space finite binary strings denotes space infinite ones 
strings finite say 
denote just ab string concatenation strings empty string denoted polynomial time algorithm runs time polynomial argument 
ppt stands probabilistic polynomial time 
function ffl negligible exists ffl gammac function said non negligible negligible 
ll notation gamma mean class negligible functions particular anonymous function class 
adversary denied direct access oracle 
particular problem permit adversary indirect access oracle interaction parties 
notation probabilistic algorithms spaces experiments follows 
probabilistic algorithm inputs notation refers probability space string oe assigns probability input outputs oe 
probability space denote support set elements positive probability 
probability space denotes algorithm assigns element randomly selected case consists element write probability spaces notation pr delta delta delta delta delta delta denotes probability predicate delta delta delta true ordered execution algorithms function 
extend notation define probability spaces algorithms experiments 
example delta delta delta delta delta delta denotes probability space string oe assigns probability pr delta delta delta oe delta delta delta delta delta delta delta delta delta delta delta delta denotes algorithm inputs runs sequence experiments outputs delta delta delta delta delta delta 
oracles 
convenience random oracle map chosen selecting bit uniformly independently course actual protocol uses infinitely long output just saves having say long sufficiently long denote set random oracles 
letter denote generic random oracle denote random generator random hash function 
multiple oracles mentioned independently selected 
sorts natural encodings single random oracle provide independent random oracles wants 
usual oracles provided algorithm indicated superscripts 
oracle understood omitted notation 
trapdoor permutations 
trapdoor permutation generator ppt algorithm input outputs encoding triple algorithms gamma 
deterministic probabilistic 
require subset gamma permutations inverses 
require exist polynomial gamma computable time nonuniform polynomial time adversaries pr gamma negligible 
mentioned squaring modulo appropriate composite number variations rsa examples trapdoor permutations 
call trapdoor permutation generator uniform gamma case uniform distribution encryption relied definitional 
simplicity consider adversaries nonuniform polynomial time algorithms possibly probabilistic extensions uniform case 
encryption 
extend notion public key encryption random oracle model 
scheme specified ppt generator takes security parameter outputs pair probabilistic algorithms called encryption decryption algorithms respectively run time bounded time complexity 
user runs get public keeping secret 
encrypt message compute send decrypt ciphertext user computes 
require assume simplicity encryption string polynomial security background 
basic security goal public key encryption finds formalization goldwasser micali equivalent notions polynomial semantic security 
denotes hard core predicate cf 
security sense achieved setting jxj randomly chosen domain restriction yields encryption length delta jxj requires jxj evaluations encrypt jxj evaluations gamma decrypt practical 
efficient construction blum goldwasser yields encryptions size jxj requiring jxj modular operations encrypt modular exponentiations plus jxj modular squaring decrypt expensive 
embed message random value set 
example exactly specifies 
embeddings practice usually guarantee hard find properties hidden 
definition 
adapt notion polynomial security random oracle model 
similarly extended notion semantic security remains equivalent 
cp adversary adversary pair nonuniform polynomial time algorithms access oracle 
encryption scheme secure random oracle model require cp adversary pr ff ff gamma note oracle encrypt decrypt adversary tries distinguish encryption strings example hash derived certainly appear secure encryption string encryption phi specify encryption scheme trapdoor permutation generator random generator 
input generator runs get gamma 
sets algorithm phi phi denotes xor jxj bits course decryption function ys phi gamma 
theorem 
appendix show scheme polynomially secure random oracle model 
efficiency 
achieve encryption size jxj hashing negligible cost encryption needs application decryption needs application gamma setting squaring means modular squaring encrypt modular exponentiation decrypt 
efficient scheme discussed 
chosen ciphertext security background 
naor yung provided definition chosen ciphertext security scheme provably achieve 
rackoff simon suggested stronger notion corresponding solution solution de santis 
exploit proofs knowledge suggested earlier 
known schemes provably secure standard assumptions rely non interactive zero knowledge proofs prohibitively inefficient 
damgard suggests efficient scheme achieve definition scheme proven achieve definition achieve interested 
scheme zheng closely related discussed 
definition 
adapt definition random oracle setting 
rs adversary rackoff simon adversary pair nonuniform polynomial time algorithms access oracle black box implementation job come pair equal length messages encryption ff random won able guess long allowed ask ff decryption oracle 
formally forbidden asking oracle query equal final argument 
encryption scheme secure rs attack rs adversary pr ff ff gamma encryption phi rx 
easy see scheme previous section secure rs attack 
specify efficient scheme trapdoor permutation generator 
random generator random hash function independently derived random oracle 
generator scheme runs get gamma 
sets algorithm phi rx decrypt string parse jaj jbj define phi gamma gamma phi gamma 
theorem 
appendix show scheme secure chosen ciphertext attack 
efficiency 
achieve encryption size 
hashing negligible cost encryption needs application decryption needs application gamma setting squaring means modular squaring encrypt modular exponentiation decrypt 
efficient schemes discussed 
translated random oracle model notation scheme zheng phi xh 
scheme efficient believe security properties 
random oracle model serves justify construction 
non malleability background 
notion non malleability introduced dolev dwork naor 
informally encryption scheme non malleable witnessing encryption string produce encryption related string example encryption shouldn able produce encryption notion extends polynomial security particular implied 
construction non malleable schemes 
construction completely impractical involving huge public keys computation multiple signatures non interactive zero knowledge proofs 
definition 
adapt random oracle setting definition 
interesting relation ae theta satisfy ae ae furthermore ae computable polynomial time turing machine 
adversary malleability adversary pair non uniform probabilistic polynomial time algorithms access oracle runs outputs description algorithm takes oracle runs time complexity greater encryption scheme non malleable require interesting relation ae adversary exists nonuniform polynomial time gamma negligible pr ff ff ff ae ff pr ff ae ff see explanations intuition underlying definition including restriction relation ae 
encryption phi rx 
encryption scheme previous section 
theorem 
appendix show scheme non malleable 
signatures definition 
extend definitions random oracle setting 
digital signature scheme triple sign verify polynomial time algorithms called generator signing algorithm verifying algorithm respectively 
probabilistic access random oracle 
input generator produces pair pk sk matching public secret keys 
sign message compute oe sign sk verify oe compute verify pk oe 
case verify pk oe oe sign sk 
adversary signing adversary nonuniform polynomial time algorithm access signing oracle 
output pair oe queried signing oracle 
signature scheme secure adversary function defined pr pk sk oe sign sk delta pk verify pk oe negligible 
say successful output oe satisfies verify pk oe 
protocol 
fix trapdoor permutation generator simplicity assume uniform see patch things standard ones 
denote usual random hash function 
input compute gamma set pk sk gamma output pk sk 
signature scheme sign verify sign gamma gamma verify oe oe 
words just classical method signing aid hash function 
uniformity technicality 
standard trapdoor permutations squaring rsa uniform scheme patched handle 
ways patching 
rsa squaring defined dense domains membership efficiently tested 
sign modify scheme compute member domain return gamma 
verification defined obvious way 
alternative functions apply construction section uniform 
squaring functions defined don efficiently testable domains various patches 
fact isn necessary function permutation rabin squaring function patched 
security 
proof scheme secure adaptive chosen message attack appears appendix zero knowledge provide definitions zero knowledge zk proofs random oracle show zk interactive proofs non interactive model 
transformation efficient get non interactive zk proofs complexity equal interactive zk ones 
definitions definitions zero knowledge random oracle model involve little simply standard ones 
follows extends formulation usual interactive setting formulation common random string model 
setting 
simplicity discuss proofs language np 
fix np relation ae defining witness membership means string satisfying ae 
witness selector function input returns witness membership verifier polynomial time function common input conversation far private random tape returns message prover bit indicating decision accept reject 
prover ppt function common input conversation far auxiliary input returns message verifier 
auxiliary input witness fact empty string 
random oracle model prover verifier take oracle 
oracle denote conv space transcripts conversations common input random tape denote acc verifier decision accept 
acc pr conv acc principle results random oracle model require restrict number oracle calls running time prover 
time instantiation hash functions running time restricted anyway assumption straight away 
argument model 
denote probability accepts interaction common input proofs protocols ll abuse notation prefixes infinite string relevant 
proof systems 
say interactive proof random oracle model error ffl ffl conditions hold 
completeness condition asks witnesses membership case acc pw 
soundness condition asks ppt sufficiently long case acc ffl jxj 
views 
define zero knowledge view verifier updated include random oracle define rview conv simulators 
random oracle part view part output simulator simulator allowed construct simulation oracle 
analogous non interactive zero knowledge simulator allowed construct output simulation common random string 
random oracle infinite object ask simulator output 
allow simulator prescribe small polynomial sized piece oracle rest magically filled random 
formally simulator ppt algorithm input outputs triple sequence pairs strings property distinct 
random oracle completion operation roc takes input returns oracle random subject constraint prefixed convenient similarly define random string completion operation rsc takes string appends infinite sequence random bits 
define completion probability space roc rsc 
distinguisher polynomial sized oracle circuit family fd write output circuit oracle inputs rview equal pr gamma pr rview zero knowledge 
say simulator simulator verifier distinguisher witness selector constant sufficiently long case rview jxj gammad say defines computational zk protocol random oracle model verifier exists simulator statistical zk defined analogously 
zk proof random oracle model error ffl proof system error ffl defines zk protocol understood operation refers oracle generic underlying random hash function returned satisfying constraint infinite string giving input dx means look finite prefix 
multi theorem proofs 
applications important able prove polynomially adaptively chosen theorems zero knowledge zero knowledge common random string model 
simplicity stuck theorem case final general definitions 
proofs knowledge 
final define proofs knowledge random oracle model show construct efficient non interactive zero knowledge proofs knowledge 
protocol problem 
zk proof np standard random oracle devoid model achieving error probability 
log 
want non interactive zk proof random oracle model achieves error ffl gammak increasing computing time communicated bits factor 
simplifying assumptions 
zk proofs assume moves ff followed followed fi 
random bit random tape think just bit auxiliary input message ff consists set envelopes size theta subset envelopes opened challenge string ff exactly value exists fi acc 
zero knowledge captured algorithm outputs acc witness selector ensembles computationally indistinguishable ff fi ffb transformation 
random hash function 
new prover computes ff ff sets th bit ff ff computes fi ff fi ff sends ff ff fi fi sets th bit ff ff accepts iff acc ff fi fact new protocol non interactive efficient claimed clear 
zk proof system error gammak completeness clear 
show oracle queries acc delta gamma gammak sufficiently long zk lack interaction implies need simulate view honest verifier corresponding simulator follows 
algorithm chooses 
lets ff fi 
sets ff ff outputs 
random oracle completion operation applied results map random subject constraint ff ff assumption definitions check simulator omit details 
comment 
consider protocol resulting instantiating random oracle hash function 
standard random oracle devoid model note claiming zk usual sense 
result goldreich krawczyk indicates zk usual sense show assuming np bpp moves necessary give black box simulatable computational zk negligible error proof np complete language standard model 
instantiation expanding discussion section provide guidance instantiating random oracles primitives hash functions 
foremost necessary desirable pay attention particulars target protocol random oracles instantiated 
matters oracles input output length requirements 
thesis appropriate instantiation random oracle ought protocol intentionally frustrate method anticipating exact mechanism instantiate oracles 
significant amount care taken choosing concrete function instantiate oracle 
examples things don 
consider map md 
function suitable replacement random oracle observed md xyz easily computed jxj md structure shows applications particular points means md ax message authentication code string key trying overcome difficulties avoiding structured operation md prefer lower level primitive compression function suitable replacement random oracle demonstrated collisions efficiently map 
standard hash functions structured random oracles illustrated doesn look natural candidates include constructs combinations hash function output truncated folded manner bits md 
hash functions input lengths suitably restricted md jxj 
hash function nonstandard way md xx 
block compression function cryptographic hash function compression bit md computed 
example suppose settles purely heuristic choice map defined bits xx phi randomly chosen bit constant extend domain range needed application define xh kh xh kh xh delta delta delta jxj hii encoding bits 
extends encoding input consisting bit jx multiple bits 
jx define phi phi delta delta delta phi hni yielding map practical purposes takes course lots equally simple ways instantiate random oracle example 
choosing instantiation time ensures algorithmic goal independent choice oracle separates instantiation random oracles different applications provides simple means creating multiple independent random oracles 
protocols practice designed iterated process positing concrete protocol searching successful attack finding attempting close 
method worked 
insistence defining goals provably achieving modern cryptography offers practice specific set results methodology process iterated design solve poorly specified tasks 
paradigm ends result says protocol secure extent instantiates random oracle achieved declaring protocol sound come successful attack 
acknowledgments early discussions bob blakley license server problem helped idea 
got useful suggestions oded goldreich birgit pfitzmann steven rudich 
members acm program committee comments 
done author ibm watson research center new york second author ibm austin 
beaver micali rogaway round complexity secure protocols proceedings nd annual symposium theory computing acm 
bellare micali sign trapdoor permutation jacm vol 
january 
blum blum shub simple unpredictable pseudo random number generator siam journal computing vol 
may 
blum goldwasser efficient probabilistic public key encryption scheme hides partial information advances cryptology crypto proceedings lecture notes computer science vol 
ed springer verlag 
blum micali generate cryptographically strong sequences pseudorandom bits siam journal computing vol 
november 
blum feldman micali non interactive zero knowledge applications proceedings th annual symposium theory computing acm 
blum de santis micali non interactive zero knowledge proof systems siam journal computing december 
den boer collisions compression function md advances cryptology eurocrypt proceedings lecture notes computer science vol 
ed springer verlag 
brassard chaum cr minimum disclosure proofs knowledge jcss vol 
october 
damg ard practical public key cryptosystems secure chosen ciphertext attacks advances cryptology crypto proceedings lecture notes computer science vol 
feigenbaum ed springer verlag 
de santis zero knowledge proofs knowledge interaction proceedings rd symposium foundations computer science ieee 
diffie hellman new directions cryptography ieee trans 
info 
theory november 
dolev dwork naor non malleable cryptography proceedings rd annual symposium theory computing acm 
fiat shamir prove practical solutions identification signature problems advances cryptology crypto proceedings lecture notes computer science vol 
odlyzko ed springer verlag 
feige fiat shamir zero knowledge proofs identity journal cryptology vol 
pp 

feige shamir multiple non interactive zero knowledge proofs single random string proceedings st symposium foundations computer science ieee 
galil haber yung symmetric public key cryptosystems manuscript july 
goldreich uniform complexity treatment encryption zero knowledge journal cryptology vol 
pp 

goldreich foundations cryptography class notes spring technion university 
goldreich goldwasser micali construct random functions journal acm vol 

goldreich goldwasser micali cryptographic applications random functions advances cryptology crypto proceedings lecture notes computer science vol 
ed springer verlag 
goldreich krawczyk composition zero knowledge proof systems icalp proceedings lecture notes computer science vol 
paterson ed springer verlag 
goldreich levin hard predicate way functions proceedings st annual symposium theory computing acm 
goldwasser micali probabilistic encryption computer system sciences april 
goldwasser micali rackoff knowledge complexity interactive proof systems siam comp vol 
pp 
february 
goldwasser micali rivest digital signature scheme secure adaptive chosen message attacks siam journal computing april 
impagliazzo rudich limits provable consequences way permutations proceedings st annual symposium theory computing acm 
leighton micali provably fast secure digital signature algorithms secure hash functions manuscript march 
leighton micali new approaches secret key exchange advances cryptology crypto proceedings lecture notes computer science vol 
stinson ed springer verlag 
luby rackoff construct pseudorandom permutations pseudorandom functions siam computation vol 
april 
luby rackoff study password security manuscript 
micali cs proofs manuscript 
micali rackoff sloan notion security probabilistic cryptosystems siam computing april 
naor yung public key cryptosystems provably secure chosen ciphertext attacks proceedings nd annual symposium theory computing acm 
rabin signatures public key functions intractable factorization mit laboratory computer science tr january 
rackoff simon non interactive zero knowledge proof knowledge chosen ciphertext attack advances cryptology crypto proceedings lecture notes computer science vol 
feigenbaum ed springer verlag 
rivest md message digest algorithm ietf network working group rfc april 
rivest shamir adleman method obtaining digital signatures public key cryptosystems cacm 
rsa data security pkcs rsa encryption standard june 
rogaway blakley asymmetric authentication protocol ibm technical disclosure bulletin 
tsudik message authentication way hash functions ieee infocom 
williams modification rsa public key encryption procedure ieee transactions information theory vol 
november 
yao theory applications trapdoor functions proceedings rd symposium foundations computer science ieee 
zheng practical approaches attaining security adaptively chosen ciphertext attacks advances cryptology crypto proceedings lecture notes computer science vol 
ed springer verlag 
proofs encryption proofs security encryption schemes 
assume wlog algorithm oracle algorithm queries oracle distinct 
phi scheme polynomially secure 
proof contradiction 
adversary defeats protocol infinitely gains advantage inverse polynomial construct algorithm gamma manages significantly compute gamma 
algorithm defines specified scheme 
simulates oracle natural way flipping coins answer queries samples 
asked outputs halts 
terminates chooses ff jm simulates ff watching oracle queries see oracle query outputs event asks query gamma 
advantage distinguishing case ask image pr succeeds delta pr pr succeeds delta pr pr 
pr nonnegligible succeeds inverting phi rx scheme secure chosen ciphertext attack 
rs adversary succeeds probability nonnegligible function 
construct algorithm computes gamma non negligibly gamma 
algorithm begins running defined specified scheme 
takes oracles queries answered follows 
query satisfies outputs halts returns random string appropriate length 
query rx satisfies outputs halts returns random string appropriate length 
answer query algorithm sees asked query ru phi returns returns invalid 
completes running obtains output 
runs ff ff jm simulate behavior queries done exactly run see construction works consider real environment running oracles 
denote event oracle call ru denote event asks query gamma phi gamma asked oracle image gamma phi gamma 
denote total number oracle queries 
easy verify pr gammak easy see pr succeeds jl pr succeeds bounded pr succeeds pr pr succeeds pr pr succeeds pr gammak pr 
pr gamma gammak returning simulation note fails behave probability bounded pr pr inverts gamma gammak nonnegligible 
completes proof 
phi rx scheme non malleable 
intuitively presence valid tag encrypted string ff copy encryption provided adversary acts proof knowledge knows recover suppose seeing ff encrypting gamma phi manages come encryption string correlated asked adversary correlate known value having idea value 
ask image reasonably 
effectively inverted trapdoor permutation 
argument formalized sketch 
adversary interesting relation ae computed polynomial time machine define polynomial time algorithm follows computes ff phi ff ff 
ff ff outputs encryption 
outputs ff prove gamma negligible quantities definition non malleability 
case analysis required show claim 
considering related experiments define second define 
describing experiment 
gamma hx phi rx phi rx ff ff ff 
write ff gamma phi interested value expectation denote ae precisely 
performing experiment distinguish cases case ff ff 
case ae definition interesting relation 
case assume case hold oracle query case 

event happens probability gammak case 

case encryption garbled decryption ae definition interesting relation 
case suppose case case holds 
case 
string queried phix ae 
case 
ff valid encryption extract distinguish 
denote probability case 
distinguish case 
oracle call case asks query ffl negligible function bounding probability case 
probability case 
case asks query case ii 
oracle call ffl negligible function bounding probability case 
upper bound ae ae pr case delta gammak pr case delta ae pr case ii gammak ffl ffl describe experiment 
defined gamma phi rx phi ff ff ff 
write ff gamma phi ff ff 
interested value expectation denote ae precisely 
analyzing experiment perform case analysis 
important observation experiments distribution third arguments identical 
pr case pr case 
easy see ae ae lower bound ae ae pr case delta ae gamma ffl je ae gamma ae ffl gammak done 
proof security signature scheme suppose adversary successful probability negligible 
construct algorithm def pr gamma negligible contradicting fact trapdoor permutation generator 
works follows 
lets pk flips coins starts running pk 
assume exactly queries distinct signing query queried easily seen wlog 
chooses random 
replies queries follows denote th query 
answers returning chooses returns 
suppose signing query halts admitting failure 
answers satisfies oe output 
halts admitting failure 
oe outputs oe halts admits failure 
analysis consider experiment chosen random run oracles usual manner pk sk oe sign sk delta pk denote event succesful experiment 
note succesful output oe satisfies definition queried signing oracle 
follows pr probability experiment just defined 
probability estimated follows 
fm succeeds probability gammak gamma gammak pr chosen random pr gamma gammak 
gamma gammak negligible desired 

