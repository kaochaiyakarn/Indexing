learning patterns unix process execution traces intrusion detection wenke lee salvatore stolfo computer science department columbia university west th street new york ny wenke sal cs columbia edu philip chan computer science florida institute technology melbourne fl pkc cs fit edu research supported part darpa nsf iri cda 
describe preliminary experiments extend pioneered forrest see forrest learning normal abnormal patterns unix processes :10.1.1.47.6145
patterns identify intrusions unix systems 
formulated machine learning tasks operating system call sequences normal abnormal intrusion executions unix sendmail program 
show methods accurately distinguish abnormal executions sendmail normal ones provided set test traces 
preliminary results indicate machine learning play important role generalizing stored sequence information provide broader intrusion detection services 
experiments reveal interesting challenging problems research 
keywords machine learning intrusion detection execution trace unix system call misuse intrusion computer systems pervasive problem computers invented 
rapid deployment network systems intrusions common patterns diverse damage severe 
result effort devoted problem detecting intrusions quickly possible 
basic approaches intrusion detection misuse intrusion detection known patterns past intrusions identify intrusions happen kumar spafford stat ilgun 
anomaly intrusion detection recognizes behaviors deviate recorded normal behavior forrest :10.1.1.47.6145
intruders constantly inventing new priori unknown attacks misuse intrusion detection method inadequate fully protecting computer system 
systems example ides system lunt approaches 
goal anomaly detection produce statistical measures rules user audit trails represent normal usage patterns profiles 
audit trail shows large deviation threshold value user recorded profile flagged abnormal 
main difficulties approach user behaviors change dynamically frequently environments establishing right deviation threshold value requires ad hoc fine tuning 
researchers tried determine normal behavior privileged processes run root 
forrest 
forrest introduced novel simple method :10.1.1.47.6145:10.1.1.47.6145
gathered traces normal runs program analyzed local short range ordering system calls 
discovered local orderings appears remarkably consistent suggests simple definition normal behavior forrest page :10.1.1.47.6145
key idea build normal database contains possible short sequences length system calls program sendmail lpr needs guarded 
normal database examine behavior running program instance sendmail 
total number percentage abnormal sequences normal database empirically established threshold value current run flagged abnormal misuse intrusion possibly detected 
studying application machine learning meta learning chan stolfo fraud intrusion detection financial information systems stolfo 
consider means applying technologies explore closely related tasks 
stephanie forrest provided set traces sendmail program experiment 
traces experiments reported forrest :10.1.1.47.6145
goal investigate machine learning approach learn normal abnormal patterns data generalizing rote learning static normal sequence information 
importantly want study approach produce accurate efficient intrusion detection capabilities improve forrest reported :10.1.1.47.6145
experiments sendmail traces conducted sets experiments 
sequences consecutive system calls extracted sendmail traces supplied machine learning algorithm learn patterns normal abnormal sequences 
patterns examine new trace determine contains sufficient abnormal sequences identified intrusion anomaly 
second set experiments goal machine learning tasks generate rules predict nth system call preceding system calls middle system call sequence system calls 
rules normal sendmail system calls analyze new trace detect violations system calls appearing place 
large number violations suggest intrusion 
forrest indicated sequence length gave best performance terms detecting intrusions experiments sequence length experiments order compare results :10.1.1.47.6145
sequence length repeat experiments learn effects sequence length performance models 
system call data obtained sets sendmail system call data 
procedures generating traces described forrest :10.1.1.47.6145
file trace data columns integers process ids second system call numbers see table 
numbers indices lookup table system call names 
example number represents system call open 
sendmail fork child processes traced separately traces included trace current run sendmail 
set traces include normal traces trace sendmail daemon concatenation invocations sendmail program 
abnormal traces traces sscp intrusion traces syslog remote intrusion traces intrusion traces decode intrusion trace sm intrusion trace sm intrusion 
traces various kinds abnormal runs sendmail program 
sendmail daemon deals incoming mail processes deal outgoing mail 
process ids 
system calls 

table 
system call data file columns process ids system call numbers 
describe detail experiments learning patterns system call sequences discuss experiments learning system call prediction rules compare results sets experiments terms effectiveness intrusion detection 
pre processing create training data intuitively temporal ordering system calls important characteristics program normal behavior 
simplest way representing short distance temporal information sliding window create sequences consecutive system calls system calls close time steps single unit 
sliding window scan normal traces create list unique sequences system calls 
call list normal list 
scan intrusion traces 
sequence system calls look normal list 
exact match sequence labeled normal 
labeled abnormal 
needless say sequences normal traces labeled normal 
see table example labeled sequences 
noted intrusion trace contains normal sequences addition abnormal sequences illegal activities occur places trace 
system call sequences length class labels normal 
abnormal 
table 
pre processed system call data 
system call sequences length labeled normal abnormal 
experimental setup applied ripper cohen rule learning program training data 
ripper fast generates concise rule sets 
stable shown consistently best algorithms past experiments see stolfo 
formulated learning tasks followings record positional attributes system calls sequence length plus class label normal abnormal 
training data composed normal sequences taken normal traces plus abnormal sequences traces sscp intrusion trace syslog local intrusion trace syslog remote intrusion 
testing data includes normal abnormal traces training data 
ripper outputs set rules minority classes default true rule remaining class 
exemplar ripper rules generated system call data normal 
meaning sequence normal normal 
meaning sequence normal abnormal true 
meaning sequence abnormal ripper rules predict sequence abnormal normal 
intrusion detection system needs know trace analyzed intrusion 
say predicted abnormal sequence trace intrusion 
depends accuracy rules classifying sequence abnormal 
close predicted abnormal sequence part intrusion trace just error ripper rules 
post processing intrusion detection post processing scheme detect trace intrusion ripper predictions constituent sequences 
sliding window length sliding shift step scan predictions ripper 

length regions ripper predictions generated step predictions abnormal current region predictions abnormal region 
note input parameter 
percentage abnormal regions threshold value say trace intrusion 
scheme attempt filter spurious prediction errors 
intuition scheme intrusion occurs majority adjacent system call sequences abnormal prediction errors tend isolated sparse 
note sliding step obviously step greater efficient 
fact sliding step ensures majority group occurrences abnormal predictions region consecutive predictions missed window slides 
forrest percentage mismatched sequences total number matches lookups performed trace distinguish normal abnormal :10.1.1.47.6145
mismatched sequences abnormal sequences context 
scheme different look abnormal regions contains abnormal sequences normal ones calculate percentage abnormal regions total number regions 
scheme sensitive temporal information sensitive noise errors 
results analysis recall ripper outputs rules minority class 
example experiments training data fewer abnormal sequences normal ones output ripper rules identify abnormal sequences default prediction normal 
conjecture set specific rules normal sequences identity program detect known unknown intrusions anomaly intrusion detection 
having rules abnormal sequences gives opportunity identify known intrusions misuse intrusion detection 
compare results experiments different distributions abnormal versus normal sequences training data 
experiment normal abnormal 
sequence length 

experiment normal abnormal 
sequence length 
experiment abnormal normal 
sequences length 

experiment abnormal normal 
sequences length 
traces forrest sscp sscp sscp syslog remote syslog remote syslog local syslog local decode decode sm sm sendmail table 
comparing detection anomalies 
column forrest percentage abnormal sequences traces 
columns percentages abnormal regions measured respective experiment traces 
forrest reported sscp decode single trace report available trace intrusions :10.1.1.47.6145
sendmail normal traces training data 
traces bold included training data traces testing data 
normal sequences taken normal sendmail traces 
sequences constituted possible unique normal sequences entire set normal sendmail traces 
abnormal sequences taken intrusion traces sscp sscp syslog local syslog remote 
tested performance ripper generated classifiers intrusion trace supplying sequences abnormal normal trace classifiers 
tested classifiers remaining normal sendmail traces training data 
post processing scheme sliding window region length applied predictions classifiers 
experiment repeated times normal sequences different subset normal traces part training data different remaining normal traces part testing data 
results runs averaged experiment 
table shows average anomaly detection results experiments alongside results forrest :10.1.1.47.6145
columns percentages abnormal regions measured respective experiment traces 
column forrest percentage abnormal sequences traces table see general intrusion traces generate larger percentages abnormal regions normal traces 
call measured percentages scores traces 
order establish threshold score identifying intrusion traces desirable sufficiently large gap score normal sendmail traces low scores intrusion traces 
observe gap experiments sequence length larger gap experiments sequence length 
gaps larger gaps columns ripper rules experiments describe patterns normal sequences 
results show rules identify intrusion traces including seen training data decode traces sm sm traces 
confirms earlier conjecture rules normal patterns anomaly detection 
ripper rules experiments specify patterns abnormal sequences intrusion traces included training data 
results indicate rules capable detecting intrusion traces known types seen training data sscp trace trace syslog local trace 
comparing rules rules perform poorly intrusion traces unknown types 
confirms conjecture rules abnormal patterns misuse intrusion detection may effective detecting unknown intrusions 
results forrest showed method required low threshold order correctly detect decode sm intrusions :10.1.1.47.6145
results show approach generates stronger signals anomalies intrusion traces noted method forrest abnormal sequence intrusion traces training :10.1.1.47.6145
ripper rule sets experiments rules 
rule typically positional attribute tests 
average rules checked sequence classified normal abnormal 
forrest sequence looked matched normal sequences database entries order classify sequence :10.1.1.47.6145
clearly ripper rule sets smaller sizes storage requirements 
speculate ripper rule sets efficient faster classifying sequences 
plan study optimize compile rule sets boost efficiencies 
learning predict system calls second set experiments aim learn normal correlation system calls nth system calls middle system calls normal sequences length learning tasks formulated record positional attributes plus class label system call nth position middle position 
training data composed normal sequences taken normal sendmail traces 
testing data traces included training data remaining normal sendmail traces intrusion traces 
ripper outputs rules form 
meaning lstat write th system call stat 

bind th system call 
true 
meaning th system calls open 
ripper rules confidence information number matched examples records conform rule number unmatched examples records conflict rule training data 
example rule stat covers matched examples unmatched examples 
measure confidence value rule number matched examples divided sum matched unmatched examples 
rules analyze trace examining sequence trace 
violation occurs actual system call predicted rule score trace incremented times confidence violated rule 
example sequence trace score trace incremented 
average score total number sequences trace decide intrusion occurred 
table shows results experiments 
experiment predict th system call 

experiment predict middle system call sequence length 

experiment predict th system call 

experiment predict middle system call sequence length 
experiment repeated times different subset normal traces part training data different remaining normal traces part testing data 
results runs averaged experiment 
table columns scores traces measured respective experiment 
traces sscp sscp sscp syslog remote syslog remote syslog local syslog local decode decode sm sm sendmail table 
detecting anomalies predicted system calls 
columns scores traces measured respective experiment 
sendmail normal traces training data 
intrusion traces training 
see table ripper rules experiments effective gaps score normal sendmail low scores intrusion traces large 
rules perform poorly 
fact results runs experiments showed unusually large variations 
predicts middle system call sequence length predicts th system call reason training data normal traces stable patterns th th position system call sequences 
rule sets experiments comparable sizes performance terms effectiveness detecting anomalies rule sets normal sequence patterns experiments described previous section 
analysis show intrusion traces large numbers consecutive violations rules confidence values unmatched examples normal traces nearly consecutive violations 
measurement consecutive rule violations similar post processing scheme counting abnormal regions alternative detect anomalies 
important side effect system call prediction rules analyzing intrusion traces rules record system calls deviate normal correlation 
system administrators possibly information learn nature intrusions 
discussion experiments show normal behavior program needs established order detect anomalous usage 
confirms results related anomaly detection 
weakness model forrest may recorded rote learned normal sequence database may specific :10.1.1.47.6145
approach essentially requires construction nearly complete normal database 
show ripper able generalize system call sequence information set rules 
demonstrated rules learned subset normal traces able identify unseen intrusion traces normal traces 
order approaches methods forrest real time intrusion detection model rule set normal database privileged program guarded needs built maintained :10.1.1.47.6145
sizes complexities models critical performance detection system 
rule sets experiments small concise 
approach potentially incorporated real time systems 
ultimate goal intrusion detection system capabilities predict intrusion occur detect unfolding 
approaches methods forrest detect intrusion occurred analyzing trace :10.1.1.47.6145
information program execution needed order detect ongoing intrusion 
example addition action information system call subject user issues action object resources touched action included building models normal program execution 
oates cohen introduced algorithm finds dependency rules patterns values occur multiple streams categorical data 
plan apply related algorithms program audit trails streams subject action object 
extend experiments predicting system calls ontology information system calls 
stat ilgun unix system calls categorized action types read write create audit record preprocessor 
believe similar grouping system calls resultant ripper rule sets general concise 
needs investigated accuracy detecting intrusions 
applied machine learning approach learn normal abnormal patterns program behavior execution trace generalize method introduced forrest :10.1.1.47.6145
resultant normal patterns classifiers shown able accurately detect anomalous intrusions 
experiments demonstrate machine learning play important role intrusion detection computer systems 
research needs pursued order build system rapidly correctly detect intrusions 
grateful stephanie forrest steven hofmeyr university new mexico providing system call data explaining details experiments 
wish david wei fan columbia university helpful inputs 
philip chan salvatore stolfo 

parallel distributed learning meta learning 
working notes aaai 
knowledge discovery databases 
william cohen 

fast effective rule induction 
machine learning proceedings twelfth international conference 
lake california morgan kaufmann 
stephanie forrest steven hofmeyr anil somayaji thomas longstaff 

sense self unix processes 
proceedings ieee symposium security privacy 
ieee computer society press los alamitos ca 
tim oates paul cohen 

searching structure multiple streams data 
proceedings thirteenth international conference machine learning 
ilgun richard kemmerer phillip porras 

state transition analysis rule intrusion detection approach 
ieee transactions software engineering 
kumar spafford 

software architecture support misuse intrusion detection 
proceedings th national information security conference 
lunt jagannathan neumann javitz valdes garvey 

real time intrusion detection expert system ides final technical report 
computer science library sri international menlo park california 
salvatore stolfo david fan wenke lee andreas prodromidis phil chan 

credit card fraud detection meta learning issues initial results 
technical report cucs computer science department columbia university 
