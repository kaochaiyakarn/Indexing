appear proceedings icse may acm press 
model testing practice dalal jain patton horowitz bellcore bellcore south street corporate place morristown nj usa piscataway nj usa jain bellcore com cc bellcore com model testing new evolving technique generating suite test cases requirements 
testers approach concentrate data model generation infrastructure hand crafting individual tests 
relatively small studies demonstrated combinatorial test generation techniques allow testers achieve broad coverage input domain small number tests 
conducted relatively large projects applied techniques systems millions lines code 
complexity testing modelbased testing approach conjunction test automation harnesses 
large empirical study conducted measure efficacy new approach report experience developing tools methods support model testing 
case studies offer details results applying combinatorial test generation techniques large scale diverse applications 
projects offer insights works practice thoughts obstacles transferring technology testing organizations 
keywords model testing automatic test generation aetg software system 
product testers developers placed severe pressure short release cycles expected today software markets 
telecommunications domain customers contract large custom built systems demand high reliability software 
due increased competition telecom markets customers demanding cost reductions maintenance contracts 
issues encouraged product test organizations search techniques improve traditional approach hand crafting individual test cases 
copyright acm bellcore 
rights reserved 
test automation techniques offer hope testers 
simplest application running tests automatically 
allows suites hand crafted tests serve regression tests 
automated execution tests address problems costly test development uncertain coverage input domain 
researching developing applying idea automatic test generation call model testing 
approach involves developing data model generate tests 
model essentially specification inputs software developed early cycle requirements information 
test selection criteria expressed algorithms tuned response experience 
ideal case regression test suite generated solution testing piece software suite includes inputs expected outputs necessary infrastructure run tests automatically 
model test approach panacea offers considerable promise reducing cost test generation increasing effectiveness tests shortening testing cycle 
test generation especially effective systems changed frequently testers update data model rapidly regenerate test suite avoiding tedious error prone editing suite hand crafted tests 
commercially available tools expect tester developer system engineer tester 
unfortunately savvy testers budget hire testers simply 
mistake develop technology adequately address competence majority users 
efforts focused developing methods techniques support model testing adopted readily testers goal influenced ways 
discuss approach model testing including details modeling notations test selection algorithms section 
section surveys related 
large scale applications model testing section 
offer lessons learned works practice section 
requirements test data model test tuples test inputs expected outputs system test test infrastructure actual outputs failures architecture generic test generation system methods tools model testing model testing depends key technologies notation data model test generation algorithm tools generate supporting infrastructure tests including expected outputs 
generation test infrastructure model notations algorithms portable projects 
gives overview problem shows data flows generic test generation system 
discuss different levels model testing applied describe model notation algorithm 
levels testing development maintenance life cycles tests may applied small units collections units entire systems 
model testing assist test activities levels 
lowest level model testing exercise single software module 
modeling input parameters module small rich set tests developed rapidly 
approach help developers unit test activities 
intermediate level application model testing checking simple behaviors call single step application 
examples single step performing addition operation inserting row table sending message filling screen submitting contents 
generating tests single step requires just input data model allows computation expected outputs creating oracle complex system test 
greater challenge offers comparably greater benefits model testing level complex system behaviors known flow testing 
step oriented tests chained generate comprehensive test suites 
type testing closely represents customer usage software 
chosen sequences steps operational profiles combinatorial test generation approach choose values tested step 
alternate approach flow testing uses models system behavior inputs generate tests approach surveyed briefly section 
model notation ideal model notation easy testers understand describe large problem easily small system form understood test generation tool 
data model information essentially requirements information ideal notation appropriate requirements documents customers requirements engineers 
reconciling goals difficult 
believe ideal modeling language purposes implies notations may required 
ideally data model generated representation requirements 
practice requirements data model specifies set possible values parameter test generation data model specifies set valid invalid values supplied parameter test 
example input parameter accept integers range data model valid values invalid values 
experience values chosen boundary value analysis 
additionally model specify constraints specific values chosen 
constraints capture semantic information relationships parameters 
example parameters accept empty null values empty time 
test generation data model specify combinations values seeds appear set generated test inputs 
seeds allows testers ensure known critical combinations values included generated test suite 
approach meeting challenge employed relatively simple specification notation called part aetg tm software system 
product testers demonstrated notation capture functional model data simple effective crafting high quality set test cases 
notation especially large deliberately stayed away constructs increase expressiveness expense ease 
example complex relational operators join project provided constructs input test specifications demonstrate practical constructs 
aetg trademark bellcore 
data model fields 
field relation describes fields 
rel valid values fields 
constraints fields 
ifb andd appear generated tuples 
seed abcd example data model notation example model written notation appears 
constructs shown example supports hierarchy fields relations relation relations field fields model 
complete syntax language scope 
relative simplicity notation experience teaching testers write data model generate test data 
experience discussed section showed testers learned notation hour soon able create data model generate test tuples 
input data model developed checked 
deficiencies model incorrect range data item lead failed tests wasted effort analyzing failed tests 
approach minimizing defects model ensuring traceability requirements data model 
words users able look test case trace requirement tested 
simple engineering techniques including information possible tuple reduce effort associated debugging model 
defects remain model detected tests generated 
incorporating iterative changes model drastically altering output vital difficult 
seed values data model help ultimately test selection algorithm significantly perturbed introducing new value new constraint resulting entirely new set test cases 
test generation algorithm aetg software system generate combinations test parameters factors table test cases parameters values input values 
approach described extensively just summarize 
central idea aetg application experimental designs test generation 
separate element test input tuple parameter treated factor different values parameter treated level 
example set inputs parameters possible values design appropriate factors levels 
design ensure value level parameter factor tested level factor called pairwise coverage input domain 
pairwise coverage provides huge reduction number test cases compared testing combinations 
applying combinatorial design techniques example combinations tested just cases assuming combinations allowed 
generated cases shown table illustrate pairwise combinations values 
combinatorial design technique highly scalable pairwise coverage parameters values attained just cases 
practice combinations valid constraints considered generating test tuples 
aetg approach uses avoids combinations appear 
aetg algorithms allow user select degree interaction values 
commonly degree interaction results pairwise combinations 
higher values obtain greater coverage input domain accordingly larger test sets 
approach generating tuples values pairwise combinations offer significant value computing expected values prohibitively expensive 
idea generated data test data 
generated data set subsequently craft high quality tests hand 
example fairly complex database easily modeled large data set quickly generated database 
generated data set ensures pairwise combinations occur difficult attain hand 
data set smaller far richer combinations arbitrary field data 
initial product testers facilitated offering access aetg software system web 
service named aetg web 
eliminating expensive delays installing configuring software testers service immediately 
strengths weaknesses applicability major strengths approach automatic test generation tight coupling tests requirements ease testers write data model ability regenerate tests rapidly response changes 
weaknesses approach need oracle demand development skills testers skills unfortunately rare test organizations 
approach applicable system data model sufficient capture system behavior control information required model 
words complexity system test response stimulus relatively low 
behavioral model account sequences operations operations depend actions taken earlier operations sequence database update query operations additional modeling constructs required capture controlflow information 
actively researching area scope 
related heller offers brief design experiment techniques choose small sets test cases 
describes experience applying experiment design techniques compiler testing 
report experience attaining code coverage pairwise triplet wise higher coverage values test tuples 
able attain high block coverage relatively cases attaining high path coverage required far cases 
argues test selection algorithms result high code coverage highly desirable result 
burr presents experience deriving data model high level specification generating tests aetg software system 
researchers worked areas automated test data test case generation 
offers brief survey 
burgess offers design criteria apply constructing systems generate test data 
ostrand discuss closely related 
approach tester uses modeling notation record parameters values constraints parameters subsequently tool generates tuples automatically 
algorithm guarantee pairwise coverage input elements 
clarke reports experience testing telecommunications software behavioral model 
effort commercially available tool represent behavioral model generate tests paths model 
clarke reports impressive numbers con category examples arithmetic add subtract multiply string concat match logical xor time date date time table table manipulators tested project field type type type field value value value field op op rel type type type int float hex value value value min max nominal op op data model expression operators cost generating tests indicators tests effectiveness revealing system failures 
case studies experience results applications technology bellcore products 
project arithmetic table operators project addressed highly programmable system supported various basic operators 
parallels compiler testing focus narrow 
test generated arithmetic table operators shown table 
data model developed manually 
individual data values chosen manually special attention boundary values 
data model included valid invalid values 
tuples combinations test data generated aetg software system achieve pairwise coverage valid values 
testing table manipulators slightly different tables table operations generated 
manipulator tests run test infrastructure written language provided programmable system 
infrastructure service logic performed operation compared result expected value reported success failure 
effort create required service logic required time project element 
testing arithmetic string manipulators shows model aetg software system relation generating test cases 
example test case consists arithmetic expression operators operands 
table lists possibilities 
exam type val op type val op type val float min float nom float min int nom int min hex nom hex max hex min int max int min int max float max hex max float max hex min float nom hex nom int nom hex nom float max float nom int min hex min int min float max int nom hex max hex min hex max int nom float nom float min float max int max int nom hex nom int min int min hex min hex max int nom hex min float max hex max float max int nom float max int min float max int min int max float max hex nom hex min table cases operator expression pairwise coverage ple test case int min float max hex nominal implemented ab aetg software system creates test cases shown table covering pairwise interactions compared test cases required exhaustive testing 
created expressions operators 
exhaustively testing combinations aetg software system generated just test cases 
similar tables create test cases basic manipulators 
test cases generated expected output computed manually feasible due small number test cases 
set invalid test cases generated invalid values parameters 
appropriate logic appended test cases check report results 
testing table manipulators steps required test table manipulators generation tables data generation queries run newly generated tables 
step aetg software system generate table selection schemas 
table schema specifies number columns data type column column indication column key table 
selection schema states columns participate query 
gives relation creating table selection schemas column tables 
operation operations specify selection criteria 
example field type type type field key key key field sel sel sel rel data type columns type type type hex int float string date column key 
key key key column selection criteria 
sel sel sel data model testing column tables aetg software system creates table selection schemas approximately exhaustive case 
due environmental constraint columns maximum table tables modeled columns 
exhaustively testing test cases test cases created 
generation table selection schemas instances created 
exactly instance created table schema random data generator populate table instance 
selection schema generated particular table selection instances created 
example selection schema table indicated columns participate selection instance look table column table column abc selection instances chosen arbitrarily selections rows existed table rows exist 
target rows successful selections randomly chosen newly generated table instance program rows middle table favored 
unsuccessful queries generated successful cases 
results models generate tests cases approximately failed 
failures analyzed discover patterns resulting identification problem classes 
problem classes included boundary values unexpected actions taken invalid inputs numerous inconsistencies implementation documentation 
failures revealed certain combinations values 
example table compound key key consisted column subset key columns specified selection criteria system ignore non key column criteria selection 
lead wrong rows updated deleted selected 
developing test generation system release software test suites generated subsequent releases just staff week effort 
addition increasing reliability product testing organization gained tool generate compact potent test suite 
project changes functionality basic manipulators need regenerate suite 
major implication stability straightforward transfer test suite testing organization needed understand tests generator 
project main benefit generated tests discovery failures detected reaching customer 
project message parsing building project generated tests exercised message parsing building functionality telephone network element 
testing message set parsing building functionality meant checking parameters messages read network sent network 
message set test consisted query messages associated response messages total unique messages 
message parameters 
parameters included scalars integers fixed collections scalars structs variable length collections arbitrary types 
ultimately parameters viewed collections scalars 
project data model extracted specification message set created project order guarantee traceability requirements code 
valid values invalid value selected automatically specification scalar 
selected focusing boundary values empty null value shown optional parameters 
included generated tests deliberate mismatches values rule false positive matches 
test generation system step generating tests extracting model data test specification message set specification 
challenges overcome developing data model included null values message parameters complex parameters lists variable length types upper bounds total message size 
message parameter values chosen individually 
aetg software system construct messages tuples values pairwise combinations parameter values covered 
invalid messages exactly parameter value invalid 
strategy testing outgoing message build message network element send message compare output expected result tool 
strategy testing incoming mes sage send message network element call simulation tool compare message received expected values embedded logic making case self checking 
selection tuples required elements generated 
elements included scripts simulate calls expected outputs logic test specifications 
test case run simulating telephone call 
tests incoming messages initiated sending message full set parameter values success failure indicated contents return message 
tests outgoing messages initiated sending message just information cause outgoing message sent success failure determined comparing output expected output 
results data models generate approximately test cases approximately revealed system failures 
failures revealed developing test generation system running generated tests 
analysis problems distinct failure classes identified submitted repair 
just failures revealed detected concurrently test team 
model testing approach revealed new failures delivered field 
transfer technology testing organization project able generate test suites subsequent revisions message set extremely low cost 
significantly test suite generated early release cycle tests executed soon executable version available 
project rule system system test helps manage workforce 
uses rules encoded proprietary language assign requests technicians 
database stores information requests job location estimated time job skills required times done information technicians working hours skills overtime policies locations meetings 
day progresses data reflects assignments completed schedule ahead schedule running late respect estimated times 
run day system extracts information database assigns requests technicians stores assignments back database 
assignment run affected control parameters priority requests due day 
modeling testing challenges separate models generate tests 
data models establish initial state database model requests parameters technicians parameters external assignments locks technicians specific jobs parameters 
actual job times travel setup duration modeled relation estimated times scheduled requests percentage estimated times fourth data model 
fifth model information control parameters affect assignment requests technicians technicians considered request parameters 
types tests generated run 
tested initial assignment jobs initial state database 
tests created rapidly initial state generated 
second type test checked assignment jobs course day estimated time jobs replaced actual times 
second type test difficult create updates correlate perfectly existing jobs existing state database extracted test generation step 
system differed sharply systems applied model testing multiple valid outputs result single dataset 
example trivial case simple requests skilled technicians criteria result jobs assigned 
evaluation results short difficult 
data application related change piece input data start time request change output record 
case easy detect automatically crash output 
difficult determine request assigned optimally technician business rules technicians requests 
computation expected results primary weakness model testing 
experience demonstrated need creative solutions constructing oracle reimplementing system test 
oracle assignments analyzed manually ways 
broad analysis checked requests assigned reasonably conformance business rules 
deep analysis performed selected technicians determine tech time efficiently determine tech assigned jobs requests available 
similar deep analyses performed particular jobs scheduled despite availability technicians 
results database loaded updated generated data data models 
total tests run test consisted requesting assignments outstanding requests 
tests generated model system control parameters valid invalid 
measurements code coverage code coverage tool developed bellcore showed relatively high block cover age running test sets 
may significant object oriented system rule processing mechanism 
total failures revealed submitted repair just concurrently testers 
failures due combinatorial problems time relations failures resulted combination stressed priority parameter appropriate combinations values apparently tried 
relatively small number problems detected directly caused difficulty analyzing large amount output results generated test inputs 
experience recommend test sets generated product test developers run prior delivering application product test 
developers trace facilities tools check output carefully possible product tester 
recommend minimum test sets generated parameter interaction values data models increased create large numbers tests performance load stress testing 
recommend product testers generated test data starting point creating hand crafted test cases input data modified small controlled ways output may easily understood relation change 
data model application modeling easy recommend testers 
analysis effort shows modeling updating models new releases took days harness development took total time spent analysis large amounts test output took total time 
research necessary develop methods decreasing analysis time develop methods easily creating test harnesses develop automated test analysis techniques 
increase tests test automation brings imperative robust automated test output analysis techniques test harnesses run tests automatically 
project user interface objective project model generate tests single gui window large application 
tests verify application responded appropriately inputs 
related focused discovering model window automatically scope 
challenges modeling window menus items 
displayed window tabs frequently seen windows gui window really frame housed pages information displayed time 
clicking tab completely changed window controls behavior 
modeling attempt single relation constraints constraints difficult understand eventually prevent valid cases 
ultimately relation data model constraints created 
main difficulty menu items essentially different values parameter menu item clicked test 
meant relations parameters case cut copy paste items care values parameter indicated text field target cut copy paste operation 
relation cut copy paste parameters value question 
difficult part modeling effort reading requirements determining constraints 
fact constraints covered requirements run application see exactly implemented 
expected applications model requirements complete developers forced decisions missing cases 
results test generation model yielded test cases covered pairwise interactions 
subsequent developed test harness tests executed automatically 
output analysis easy consisted solely determining correct window displayed action key clicked 
test correct window implemented test harness harness checked test determine correct window appeared 
total failures revealed reported 
failures detected concurrently test team 
model testing approach revealed new failures caught test team 
interesting problem automatic execution tests 
problem occurred code processed manipulation cut copy paste icons leaked resources time characters selected text box 
problem windows invariably disappear running automated tests 
close look trace file showed cut copy icons called frequently simple construct script repeatedly selected unselected text text field 
loop ran times failure triggered 
type problem manual test approach 
summary results table gives overview results case studies 
failed test case deviation expectation 
failure class aggregates similar failures 
example failure class incorrectly handling null parameter message class represented hundreds failures 
total failed failure project test cases test cases classes basic manipulators messaging rule system user interface multiple models test case large numbers project misleading 
table results testing manipulators lessons learned offer lessons developing system generates documents executes evaluates tracks thousands test cases data model starting implications model testing 
model test data fundamental 
model developed carefully include constraints data values 
important model properly maps software test 
domain experience crucial developing quality checking model interacted heavily project developers testers 
iteration required 
method operation building layer testing system build sample data artifacts manually script files test specification text segments write software produced similar artifacts 
iterate incorporate updated complete models 
iterative approach effective apply similar projects 
find abstractions 
takes effort experience layer testing software interface layers 
developed number intermediate data artifacts software layers having multiple layers allowed encapsulate functionality layers help software readability maintenance 
intermediate files 
managing artifacts testing system large part test generation effort 
chose file interface software layers allowed layer files test specification documents placed revision control altered manually necessary 
payoff effort execute layers software succession traditional makefile minimize effort managing change 
support managing change critical minimizing human effort 
testing system development analyzing test results data model testing system problems 
non trivial require minimal regeneration test case execution layer data software changed 
helped limited way nally changes required regeneration downstream file re execution test suite costly 
revision control manual updates tracking test results challenging handle respect regeneration 
prototype testing systems ignore issues expense maintainability conforming quality standards 
restart middle 
running thousands generated test cases invariably machine restarted power fail unfortunate event interrupt session 
tester able continue execution tests interruptions 
technique helps making tests independent starting test known base state chaining 
obstacles technology transfer model testing represents significant departure conventional testing practice researchers face number problems transferring approach testing organization 
tests mysterious 
testing objectives particular test case clearly defined typical manually authored test case 
words comment test feature testing objective covering input domain spread large number cases 
lend unwanted element mystery test 
development expertise wanted 
test generation system readily applied testers development system requires staff experience software quality profession software development 
mix skill sets imperative making tradeoffs involved designing data flows implementing tools difficult find testing organizations 
local practices may hinder automation 
local practices may directly conflict automation generation system respect 
example test specification document may required establish audit trail 
tracking number test cases run failed passed may required interface tracking system generated tests invisible project management 
issues dramatically increase effort required develop testing system vital acceptance 
test process reengineered 
substantial initial investment required benefit model testing 
appropriate changes test strategies test planning additionally large development effort required establish needed support infrastructure running logging thousands test cases 
brute force test data generation approaches immediately drive contention automation lagging 
fine tuning generation process go select tests critical coverage highly redundant high coverage set tests help 
case studies generated test cases revealed numerous defects exposed traditional approaches 
defects observed certain pairs values offers considerable support efficacy aetg software system approach 
believe modeling test generation approach satisfies goal usability testers 
experience testers activity specifying software component inputs natural straightforward 
aetg software system testers required minimal training hours write data model generate test tuples pairwise combinations 
noted tuples offer immediate value test data sets inputs hand crafted tests 
course significantly greater investment software script development required develop infrastructure oracle allow tests run wholly automatically 
investments revealed significant numbers failures pilot projects ultimate justification investments testing technology 
identified questions challenges applying model testing different phases testing 
modeling language different phases testing 
benefits model testing deliver different phases testing 
commonalities successive versions generated test suite identified order avoid unnecessary regeneration 
explore combining behavioral models covering possible paths input models covering pairwise combinations inputs reach new heights test effectiveness input domain coverage 
free trials aetg software system offered secure server world wide web 
please visit https com burgess 
software testing automatic generator test data 
ross editor international conference software quality management pages southampton uk apr 
comput 
mech 
burr 
combinatorial test techniques table test generation code coverage 
proceedings international conference software testing analysis review star west oct 
clarke 
automated test generation behavioral model 
proceedings eleventh international software quality week san francisco ca may 
software research cohen dalal fredman patton 
aetg system approach testing combinatorial design 
ieee transactions software engineering july 
dalal jain 
model testing highly programmable system 
editor proceedings ninth international symposium software reliability engineering pages nov 
dalal mallows 
factor covering designs testing software 
technometrics aug 
ehrlich mallows 
applying design experiments software testing 
proceedings nineteenth international conference software engineering pages 
acm press may 
heller 
doe structures generate software test cases 
proceedings twelfth international conference testing computer software pages washington dc june 

automatic generation test data 
computer journal 

orthogonal latin squares application experiment design compiler testing 
communications acm oct 
musa 
software reliability measurement prediction application 
mcgraw hill 
ostrand 
category partition method specifying generating functional tests 
communications acm june 

