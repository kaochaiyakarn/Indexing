proceedings international conference knowledge discovery data mining kdd pages montreal canada august 
discovering frequent episodes sequences extended heikki mannila hannu toivonen verkamo department computer science box fin university helsinki finland cs helsinki fi sequences events describing behavior actions users systems collected domains 
consider problem recognizing frequent episodes sequences events 
episode defined collection events occur time intervals size partial order 
episodes known produce rules describing predicting behavior sequence 
describe efficient algorithm discovery frequent episodes class episodes experimental results 
machine learning data mining techniques adapted analysis unordered collections data 
important application areas data analyzed inherent sequential structure 
instance telecommunications network monitoring empirical user interface studies easy log lot information behavior actions user system 
abstractly log viewed sequence events event associated time occurrence 
example event sequence event types different types notifications network different types user actions numbers indicate times events occurred 
basic problem analyzing sequence find frequent episodes collections events occurring frequently close 
example sequence episode followed occurs times sequence viewed window say time units 
episodes general partially ordered sets events 
described directed acyclic graphs obvious way 
consider instance episodes episode serial episode occurs sequence events occur order sequence relatively close 
note sequence events occurring 
episode parallel episode constraints relative order 
episode occurs sequence occurrences precede occurrences constraints relative order 
occurrences close time 
user defines close close giving width time window episode occur 
user specifies episode occur considered frequent 
analysis sequences user interested finding frequent episodes class episodes 
class serial episodes parallel episodes episodes partial order matches part network topology consider class partial orders 
episodes known obtain rules prediction 
example know serial episode occurs windows serial consisting occurs windows estimate seeing window occur order chance occur window 
compute strengths rules information obtained algorithm easy obtain confidence intervals rule strengths 
discovery frequent episodes consider problem 
class episodes input sequence events window width frequency threshold find episodes class occur frequently 
describe general algorithm solving task 
algorithm alternating phases building new candidate episodes evaluating occur sequence 
efficiency algorithm observations 
potentially large number episodes checked search space pruned building larger episodes smaller ones certain way 
serial episode abc frequent window width serial subepisodes ab bc ac frequent 
holds general subepisodes frequent 
algorithm utilizes observation opposite direction necessary test occurrences episodes subepisodes frequent 

episodes recognized efficiently sliding window input sequence 
typically adjacent windows lot overlap similar 
take advantage similarity recognizing episodes window incremental updates data structures recognize episodes occur window 

recognition complex episode reduced recognition simple ones episode seen recursive combination parallel serial episodes 
example episode serial combination episodes parallel episode consisting parallel episode consisting occurrence episode window tested structure specialized methods recognition parallel serial episodes 
see episode occurs check method serial episodes occur order check occurrence method parallel episodes verify occur 
implemented method analysis telecommunication network alarm data 
discovered episodes considered useful domain experts 
related excellent survey patterns sequential data see laird 
wang consider problem discovering patterns number input sequences 
algorithm finds patterns similar serial episodes respect minimum length edit distance frequency threshold 
consider probabilistic pruning patterns sampling wang 
idea building candidate patterns smaller ones profitably discovery association rules mannila toivonen verkamo agrawal srikant agrawal occurs contexts 
wang 
advantage slowly changing contents group events recognition phase studied different fields 
ai similar problem spirit pattern object pattern match problem production system interpreters see 
forgy 
active databases related problem efficient detection trigger events see 
gehani jagadish shmueli 
comparable strategies sliding window study locality virtual memory denning 
methods matching sets episodes sequence similarities algorithms string matching see aho survey 
similarly learning regular languages strings similarities 
string matching learning regular languages typically interested finding substrings may interleaved events occurrence episode 
formulation event sequences class elementary event types event pair integer 
event sequence triple ts starting time closing time ordered sequence events gamma 
window event sequence event sequence ts tw consists pairs tw width window width gamma tw event sequence integer denote aw set windows width gamma gamma windows 
windowing strategies windows starting time units considered windows starting event 
episodes elementary episode set nodes partial order mapping associating node event type 
interpretation episode events occur order described generalize definition allow recursive decomposition recognition episodes 
composite episode episode mapping mapping set event types sigma sigma set composite episodes 
example decomposition episode composite episode consisting episodes composite elementary episodes consisting nodes parallel 
episode parallel partial order relation trivial 
episode serial partial order relation total order 
crucial observation elementary episode equivalently described composite episode built recursively parallel serial composite episodes 
writing serial parallel episodes consisting episodes write episode 
episode ae episode immediate episode 
episode immediate 
class episodes closed episode subepisodes 
frequent episodes elementary episode occurs event sequence ts exists injective mapping ng 
definition generalized composite episodes need generalization serial parallel composite episodes 
parallel episode occurs event sequence episodes occur serial episode occurs event sequence exist mappings ng occurs event sequence 
necessary duplicate event node obtain decomposition note similarity graphs 
consider instance partial order node duplicated 




recognition read sequence frequent elements respect min fr 
building compute ae 

od 
output main algorithm 
episode occurs write 
frequency set aw windows size fr aw gj jaw threshold min fr frequency episode frequent fr min fr 
frequent subepisodes frequent 
problem 
sequence closed class episodes window width frequency threshold min fr find frequent episodes algorithm give algorithm finding frequent episodes event sequence closed class episodes frequency threshold min fr 
algorithm works iteratively alternating building recognition phases 
building phase iteration collection new candidate episodes elementary events built information available smaller frequent episodes 
candidate episodes recognized event sequence frequencies computed 
collection consists frequent episodes iteration candidate episodes built information frequent episodes algorithm starts constructing contain episodes consisting single elementary events 
frequent episodes output 
building new episodes remember subepisodes frequent episode frequent 
specification candidate episodes iteration candidates episodes size subepisodes frequent 
method compute candidate collection generate episodes size test immediate subepisodes gamma see mannila toivonen verkamo agrawal srikant agrawal similar ideas 
generation phase implemented efficiently pairs episodes gamma overlap gamma nodes 
recognizing episodes sequences episodes recognized sequences incremental fashion 
adjacent windows typically similar 
take advantage recognizing episodes incremental updates data structures achieve shift window obtain remember elementary episode viewed composite episode consisting composite parallel serial episodes 
recognition episodes sequences recursively decompose elementary episodes parallel serial composite episodes 
check parallel episode occurs apply method parallel episodes check serial episode occurs apply method serial episodes 
parallel episodes simplicity consider parallel episodes mapping injection events type episode 
candidate parallel episode maintain counter count indicates events window 
count equal indicating entirely included window save index window count decreases indicating longer entirely window increase field occur number windows remained entirely window 
carry efficiently collection candidate episodes organized event episodes containing linked list contains 
window shifted set events window changes corresponding lists traversed counters episodes updated 
requirement mapping parallel episode injection easily removed allowing multisets 
serial episodes serial candidate episodes recognized state automata accept candi interesting alternative approach recognition decomposition necessary inverse structures 
frequent episode save indexes presenting windows recognition phase candidate episode compute fw fw 
holds serial episodes additional information needed mannila toivonen toivonen 
date episodes ignore input 
initialize new instance automaton serial episode time event comes window automaton removed event leaves window 
automaton reaches accepting state indicating entirely included window automata accepting state save index window automaton accepting state removed automata accepting state indicating longer entirely window increase field occur number windows remained entirely window 
note useless multiple automata state 
suffices maintain reached state removed 
automata episode 
automata need know window index automata initialized 
represent automata arrays size represents contains events array contains window indices automata 
access traverse automata efficiently organized way 
event type automata accept linked list waits 
event enters window shift list waits traversed transition performed automaton 
automaton reaches common state automaton older removed overwritten 
event window automata initialized linked list 
event removed window automata list removed 
analysis time complexity simplicity suppose candidate episodes size class event types fixed assume exactly event takes place time unit 
denote length event sequence gamma windows 
parallel episodes consider successive shifts time unit 
sequence shifts candidate episodes undergo changes event episode dropped taken window 
due fact event taken dropped time units 
supposing class event types fixed finding change set events shift window takes constant time 
obvious practical improvement approach combine similar prefixes episodes avoid maintaining redundant information 
alternative approach altogether handle serial episodes basically parallel episodes check correct ordering events window 
serial episodes parallel episodes time time table characteristics runs fixed frequency threshold min fr varying window width reading input takes time total time complexity kj trivial nonincremental method sequence preprocessed windows time requirement recognizing candidate episodes windows plus time required read windows size mw larger factor serial episodes input sequence consists worst case events event type serial episode events type 
potentially shift window results update prefix 
shifts episodes prefixes episode time read input worst case time complexity close complexity trivial nonincremental method mw 
practical situations time requirement considerably smaller approach savings obtained parallel case 
experimental results applied methods telecommunications network fault management database 
database consists alarms covering time period days 
examined sequence alarm types different types diverse frequencies distributions 
experiments run pc mhz pentium processor mb main memory linux operating system 
sequence alarm type time pairs resided flat text file 
performance overview tables give overview discovery frequent episodes empirical setting 
table serial parallel episodes discovered fixed frequency threshold min fr varying window width table episodes discovered fixed window width varying frequency threshold min fr 
denotes total number frequent episodes 
experiments show approach efficient 
running times seconds min serial episodes parallel episodes min fr time time table characteristics runs fixed window width varying frequency threshold min fr 
size hs jc jl match delta delta delta delta delta delta delta table number serial candidate frequent episodes iteration frequency threshold min fr averaged window widths hs size hypothesis space match fraction jl jc time hundreds frequent episodes 
relatively small changes parameters influence number episodes method robust sense change parameter result replacement episodes 
quality candidate generation table presents number serial candidate frequent episodes iteration averaged number test runs 
iteration size elementary events checked 
larger episodes combinatorial information exists take advantage 
size half candidates turned frequent 
incremental recognition presents ratio times needed trivial vs incremental recognition candidate episodes 
shows possible improvement combine iterations generating candidate episodes iterations avoid reading input sequence times 
pays iterations candidates recognize match 
efficiency ratio window width ratio times needed trivial vs incremental recognition methods parallel solid line serial episodes dotted line functions window width time relative size database scale results parallel solid line serial episodes dotted line min fr 
incremental methods faster factor approximately linearly respect window width 
matches worst case analysis recognizing parallel episodes indicates incremental recognition method useful practice serial episodes 
scale performed scale tests fold multiples database sequences events 
shows time requirement linear respect length input sequence expected analysis 
framework discovering frequent episodes sequential data 
framework consists defining episodes partial orders looking windows sequence 
described algorithm finding episodes class episodes frequent 
algorithm discovery episodes considering episode subepisodes frequent incremental checking episode occurs window 
implementation shows method efficient 
applied method analysis alarm flow telecommunications network 
discovered episodes considered useful domain experts 
currently investigating inverse structures recognition phase algorithm 
preliminary results quite encouraging 
agrawal srikant 
fast algorithms mining association rules large databases 
th international conference large databases vldb 
agrawal mannila srikant toivonen verkamo 
fast discovery association rules 
fayyad piatetsky shapiro smyth uthurusamy eds advances knowledge discovery data mining 
aaai press 
appear 
aho 
algorithms finding patterns strings 
van leeuwen ed handbook theoretical computer science volume algorithms complexity 
elsevier 

denning 
working set model program behavior 
communications acm 
forgy 
rete fast algorithm pattern object pattern match problem 
artificial intelligence 
gehani jagadish shmueli 
event specification active object oriented database 
international conference management data sigmod 

efficient discovery interesting statements databases 
journal intelligent information systems 
laird 
identifying patterns sequential data 
algorithmic learning theory th international workshop 
springer verlag 
mannila toivonen 
discovering frequent episodes sequences inverse structures 
manuscript preparation 
mannila toivonen verkamo 
efficient algorithms discovering association rules 
aaai workshop knowledge discovery databases kdd 
toivonen 
ph thesis preparation 
wang chirn marr shapiro shasha zhang 
combinatorial pattern discovery scientific data preliminary results 
international conference management data sigmod 

