prcs project revision control system josh macdonald paul hilfinger luigi university california berkeley department electrical engineering computer sciences berkeley ca usa national energy research scientific computing center lawrence berkeley national laboratory berkeley ca usa 
prcs attempt provide version control system collections files simple operational model clean user interface high performance 
prcs characterized project description files input commands point click line oriented interface 
employs optimistic concurrency control encourages operations entire project individual files 
current implementation uses rcs back interface completely hides presence 
prcs free 
describes advantages disadvantages approach discusses implementation issues 
overview prcs attempt producing version control system collection files competitive existing commercial free systems regard ease implementation maintenance 
prcs borrows freely wellestablished concepts ideas area re engineers small set orthogonal features clean version model simple powerful user interface text editing 
design development prcs partly motivated authors dissatisfaction existing systems 
commercial systems tend large feature laden expensive 
fancy graphical user interfaces operations intuitive typically sharp threshold conceptually simple operations exceedingly cumbersome 
cvs concurrent version system standard non commercial solution widely find aspects operation administration user interface unnecessarily complex choice version model explicit dependency rcs 
cvs systems designed idea version control group files achieved grouping single file version control operations 
prcs defines project version labeled snapshot group files provides operations project versions 
experience shows focusing model results cleaner system model cast explicitly groups single file operations 
notable difference prcs systems user interface 
prcs model version group files contains distinguished file called version descriptor 
file contains description files included particular version 
user controlled project settings entered manipulated file 
user interface issues problems start requiring graphical user interface numerous command line utilities maintaining project state 
additionally prcs includes novel features including improved keyword replacement mechanism flexible way incorporating prcs external programs 
remainder provide small example discuss system design operational model related branch control distinguishing features implementation considerations implications back storage management 
operational model prcs presents user abstraction named projects collections project versions simply versions snapshot set files arranged directory tree 
project version labeled version name unique version project 
prcs repository contains group projects 
version contains distinguished file top level directory known project version descriptor simply version descriptor 
ordinary text file identifies version contains list version constituent files 
file added project version time assigned unique internal identifier follows file history renamed 
identifier known internal file family 
version descriptor contains mapping internal file families file names 
give detail 
users modify directory structures files independently repository 
adjective working distinguish files directories stored repository working version working file working version descriptor 
say project version snapshot directory structure typically mean snapshot working project version 
working version checked usual term snapshot prcs modifies descriptor reflect new repository version 
particular resulting version descriptors contain record identity versions derived inducing partial order versions serves define ancestry 
framework prcs provides major operations checkin deposits labeled snapshot working version repository 
checkout reconstructs project version identified project version label 
diff compares project versions 
merge reconciles project versions interactively modifying working project version 
prcs uses notion ancestry described determine common ancestor version allows determine proper handling inconsistencies versions merged 
see list operation locking project version file 
prcs employs optimistic concurrency control 
users expected merge changes prior check conflicts occur informed necessary 
example section presents example basic prcs give flavor interactions involved 
consider programmers jack jill performing maintenance system ll call 
illustrative purposes ll assume initially source code control 
jack acquires directory structure files 
places prcs control commands lines jack jill prompt user input 
jack prcs checkout prcs project repository initial checkout 
prcs may edit file prj jack prcs populate prcs files added 
jack version descriptor file new project prj containing names files current directory 
added repository 
jack edits version descriptor add descriptive text project desired remove uninteresting files list 
performs command jack prcs checkin takes snapshot collection listed files labels repository 
performs set edits adding new files version descriptor needed jack prcs checkin takes snapshot current state working version project names version jack 
jack continue editing performing periodic checkpoints jack prcs checkin jill gets copy project jill prcs checkout retrieves version jack started 
jill modifications creates branch jill prcs checkin performs cycle edits just jack 
eventually jack completed coherent set modifications checks main branch labeled jack prcs checkin creating snapshot project named 
jill attempts say version jill prcs tells latest version main branch ancestor checking 
alerted look changes branched jill prcs diff eventually merge changes jill prcs merge commences dialog prcs asks deal conflict changes version common ancestor jill versus changes jill 
complete jill edits needed reconcile changes jack perform checkin jill prcs checkin jack jill continue indefinitely cycle edits merges 
interactions prcs command line simple 
related list available version control configuration management systems quite long 
systems deserve special attention concurrent version system cvs de facto standard free systems commercial system tm shares prcs similar approaches problems 
compare systems respect features labeling sets file versions branch control 
research software evolution case tools focused augmenting traditional entity relation design analysis techniques version histories dependencies 
attempt proteus configuration language pcl 
pcl allows description control software variability tracking changes requirements tools required build variation variations may include different hardware platforms releases customer configurations 
branch control variation scm systems today reduced differing notions definitions branches labels change numbers 
branch division project development logical split occurring particular ancestor descendent 
branches typically manage help reintegration variants project development 
easy fast operations branches essential exploiting version control system full potential 
section defines common approaches branch management discusses limitations implications ease 
labels vs change numbers terminology labels change numbers mechanisms naming sets revisions files contained project 
label known tag rcs cvs names arbitrary set file revisions chosen user 
file revisions named label may change time may consist revisions created different times different developers 
change number labeled change refers set revisions committed single transaction 
cvs provides allows group operations atomically mechanism naming transaction retrieving contents project moment changes committed 
simulate change numbers cvs tags directly supported 
supports mechanisms allows user construct views project named label change number 
cvs reconstruct change numbers repository 
cvs treats operation group operations individual rcs files repository information obtained check time clustering carefully applying immutable label commit 
issue labeling change project great importance 
labels reconstruction project history straightforward think 
example cvs difficult request operation display changes user commit 
examine logs affected files search changes user request list differences project time time commit occurred 
contrast operation simple prcs look change user request view changes change number 
prcs supports change numbers call version names 
version names form major version name string chosen user vendor broken branch typical examples term project refer depot cvs module prcs project 
minor version name positive integer numeral assigned consecutively system 
user free ascribe desired semantics major version names 
labeling scheme proved satisfactory far evidence system labels worse having feature 
branching labels change numbers cvs branching accomplished creating label branch point name new branch 
file repository tagged new label expensive large repository 
system supporting change numbers branching simpler 
branch may created transaction change number assigned 
notion parent predecessor version straightforward define contrast cvs version history tree project versions easy construct 
prcs major version names serve identify branches 
explicit notion hierarchy branches user free adopt desired scheme reflecting relationships branches names 
fact minor versions branch just independent arbitrary pair versions 
features section describes detail distinguishing features prcs 
version descriptors syntax version descriptor file slight variant lisp syntax 
displays sample project descriptor 
project settings entered editing file check 
fields provided prcs check time 
example project version parent version version log checkin time checkin login identify project version 
allow users supply arbitrary information version 
example may placed new version log field check version log version 
project keywords field contains list keyword value pairs added standard set keywords keyword replacement 
keyword replacement described 
files entries contain lists files symbolic links empty directories contained version 
main function associate name file seen user internal identification repository 
example line src parser parser indicates file named src parser associated version data repository internal label parser 
line src lexer indicates working file src lexer repository added current working version checked 
user point view internal file labels simply arbitrary label strings having somewhat unusual form simple semantics uniquely identifies particular file snapshot 
internal label different version descriptors project denotes file contents modulo keywords see 
check automatically updates internal labels modified files version descriptor check occurs 
files working directory mentioned files entries included snapshots directory 
files entries may attach set attributes file 
tag attribute allows arbitrary labels attached files 
keywords attribute turns keyword replacement file question 
attributes set programs display files differences perform way file merging respectively 
illustrated files lists allow files grouped common attributes brevity 
particularly elegant result design version descriptors simply text files format intended readable numerous operations needed version control reduce text editing 
adding subtracting renaming files including moving directories accomplished editing working copy version descriptor file checking new version 
example file list version descriptor project consisting files hello hello look 
files hello hello hello hello suppose working version rename hello greetings moving new include subdirectory add new file include cards new empty directory doc delete hello modify working version descriptor follows 
files include greetings hello include cards doc directory assuming change contents hello prcs check modify list new version creates project version vendor parent version vendor project description sample project version log version log vendor new version log version log working changes eventually vendor checkin time wed jan checkin login populate ignore project keywords release files tag prcs prcs emerge src main main src parser parser src lexer files keywords tag image img logo jpg logo jpg jpg diff img icon gif icon gif gif diff files lib directory include lib directory empty core dev null symlink fig 

sample working version descriptor files include greetings hello include cards cards doc directory internal label associated include greetings change reflects particular file contents independent name 
suppose decide re introduce file hello version renaming greetings possible adding line greetings working descriptor files list prcs allows establish association file previous hello copying internal labels greetings hello effect doing put greetings file family hello means versions containing files compared merged prcs recognize relationship 
old internal labels recovered checking earlier versions version descriptor 
creating version project special case 
creates working descriptor file checking project repository 
file empty files list 
fill done far entries having internal label 
avoid tedium error prcs provides convenience command populate finds files current directory generates new files entries 
editing resulting working descriptor remove wanted 
prcs course implicitly trust contents working version descriptor subjects verification check ins 
may dangerous allow user directly modify administrative information systems kept hidden appropriate gui 
experience shows users show tendency hang consistency checks suffice prevent accidents 
text editor project administration admittedly controversial 
surprisingly effective 
common consists adding log entry simple exercise text insertion addition files 
deleting files project changing names likewise correspond standard editing operations 
execute command prcs execute command facilitates efficient open ended extension functions provided prcs 
command syntax allows command script executed name file directory project 
regular expressions may filter list files allowing selection exclusion file name extension attribute 
special tag file attribute special meaning prcs simply included allow grouping files relevant characteristics 
various options allow elaborate commands constructed 
run project version repository prcs supply copy file 
executing command file directory prcs execute command just affected files 
prcs supply contents file command standard input 
example command prcs execute pipe match cc wc pipes file working version project cc extension wc command 
keyword replacement prcs version control systems allows keyword replacement selected files 
abstractly may think replacement performed check file 
internally prcs order avoid having store changes keywords part change information file 
files version prcs recognizes forms keyword instance simple formatted 
simple keyword instances rcs forms keyword keyword value check instances replaced instance second form appropriate value 
needs keyword replacement data leading key word trailing 
novel feature prcs formatted keyword instance allows 
prcs encounters text arbitrary text format format string arbitrary text current string check time replaces line reading current string format string substituting simple keywords 
line containing format instance altered 
example illustrates contents file formatted keyword replacement project version 
replacement format char version char version replacement format char version char version fig 

formatted keyword replacement predefined keywords values dependent project version individual file version 
date author date modified version file checked identity user checking familiar users rcs 
project related date check identity user doing 
addition users may introduce keywords project descriptor illustrated 
prcs explicit facilities managing projects super project 
possible get effect typically minimalist fashion simply including version descriptor files files included super project 
checking super project consists checking needed checking 
checking version gets descriptor files 
uniquely identify constituent versions checking descriptor simple operation prcs recovers 
clear simple recursive process represents sufficiently common error prone really need explicit support 
automated support process conceivable furthermore clear best policy mapping operations super project sub project 
example branching super project may may desirable create new branch sub project 
questions lack experience sub project management kept automated support sub projects current design 
implementation prcs implemented rcs back storage mechanism 
helped quick implementation robust prototype limitations long term strategy 
starting new process revision control operation file expensive 
rcs calling locking conventions interfacing higher level version control systems rcs unnecessarily complicated 
binary files supported 
branching mechanism rcs unexpected performance implications difficult optimize automatically user intervention 
problems rcs ideal back tool 
process startup costs avoided implementation rcs set thread safe library routines fix interface problems 
current implementation prcs example complicated code manage locking unlocking rcs files placing linking files correct path performing batch check ins 
additionally delta mechanism rcs date 
new delta algorithms developed outperform lcs delta algorithms handle binary files text files demonstrated hunt 
rcs branching model inappropriate higher level tools 
rcs forces version placed tree 
location tree greatly effects performance operations 
experience prcs shown difficult high level version control tool place versions 
prcs extensive timestamps md checksums minimize file rcs invocations 
md optimizations complicated keyword replacement reduce greatly situations timestamps prevent comparison 
completing system immediately identified need distributed multi user version control involving sort client server structure 
design distributed version control architecture reductions data transfer carefully caching data transmitting changes 
problem efficiently distributing version control repositories nicely addressed cvs update protocol 
client server implementation currently underway 
introduce distributed prcs repositories planning allow users distinguish local network check ins 
users global shared repository feel uncomfortable checkpointing progress extra possibly branch versions shared nature repository 
personal possibly local modifications belong global repository 
users forced multiple repositories local shared group 
plan address problem allowing certain branches marked local 
local branches shared global repository invisible user repository 
operations local versions network context treat local versions transparent ancestry network version 
allows example user check latest version network branch check versions local branch intermediate checkpoints return network repository checking version possibly merge head network branch 
merge head network branch local working version treat original network version immediate parent 
investigated replacement delta algorithms similar vdelta algorithm improvements rcs avoid branching problems mentioned 
conceptually get rid rcs branching retain deltas computed file version parent aspect rcs devised version control library computes reverse delta new file entire version file 
checked version head rcs terms 
quickest easiest extract 
repository versions version requires application gamma deltas regardless set versions related 
type construction leads versioned storage format performance problems associated branches similar storage efficiency 
branches avoided content previous deltas addition checked file 
prcs began study engineering conceptually simple solution version control problem making reuse existing tool text editor simplify operations user point view 
evolved system believe easy presents simple model user design uncompromised ease difficulty particular implementation 
observed snapshot labeled version model project versions works simpler mechanisms treat version control groups files grouped operations individual files 
conclude system version labeling paradigm change numbering adequate sufficiently powerful meet needs sophisticated version control tool simpler competing approaches 
availability 
information prcs source binary distributions available www berkeley edu prcs html 
experimental rcs replacement delta algorithm implementation described available www berkeley edu html 

wish national automated highway system consortium helped fund initial development prcs cooperative agreement federal highway administration 

berliner cvs ii parallelizing software development 
proceedings winter usenix conference january washington dc usa berkeley ca usa jan usenix association ed usenix pp 


hunt vo tichy empirical study delta algorithms 
lecture notes computer science july 

program source 
ftp ftp freebsd org pub 

inter file branching practical method representing variants 
lecture notes computer science july 

gulla conradi modelling systems variability proteus configuration language 
lecture notes computer science 
