mining association rules item constraints ramakrishnan srikant vu rakesh agrawal ibm almaden research center harry road san jose ca almaden ibm com problem discovering association rules received considerable research attention fast algorithms mining association rules developed 
practice users interested subset association rules 
example may want rules contain specific item rules contain children specific item hierarchy 
constraints applied postprocessing step integrating mining algorithm dramatically reduce execution time 
consider problem integrating constraints boolean expressions presence absence items association discovery algorithm 
integrated algorithms mining association rules item constraints discuss tradeoffs 

problem discovering association rules introduced agrawal imielinski swami 
set transactions transaction set literals called items association rule expression form sets items 
intuitive meaning rule transactions database contain tend contain example association rule transactions contain beer contain transactions contain items 
called confidence rule support rule 
left hand side right hand side rule sets items 
problem find association rules satisfy userspecified minimum support minimum confidence constraints 
applications include discovering affinities market basket analysis cross marketing catalog design loss leader analysis store layout customer segmentation buying patterns 
see case study application health insurance ali srikant case studies applications copyright fl american association artificial intelligence www aaai org 
rights reserved 
predicting telecommunications order failures medical test results 
considerable developing fast algorithms mining association rules including agrawal savasere omiecinski navathe toivonen agrawal shafer han karypis kumar 
taxonomies hierarchies items available 
example taxonomy shown 
taxonomy says jacket outerwear ski pants outerwear outerwear isa clothes taxonomies users usually interested generating rules span different levels taxonomy 
example may infer rule people buy outerwear tend buy hiking boots fact people bought hiking boots ski pants hiking boots 
generalization association rules algorithms finding rules described srikant agrawal han fu :10.1.1.144.4956
practice users interested subset associations instance containing item user defined subset items 
taxonomies set items may specified taxonomy descendants item 
output current algorithms filtered post processing step efficient incorporate constraints associations discovery algorithm 
consider constraints boolean expressions presence absence items rules 
taxonomies allow elements boolean expression form ancestors item footwear ski pants shirts outerwear shoes hiking boots example taxonomy item just single item 
example jacket shoes descendants clothes ancestors hiking boots expresses constraint want rules contain shoes contain clothes descendants clothes contain hiking boots footwear 
organization give formal description problem section 
review apriori algorithm agrawal mining association rules section 
algorithm basis presenting integrated algorithms mining associations item constraints section 
techniques apply algorithms apriori candidate generation including published toivonen 
discuss tradeoffs algorithms section conclude summary section 
problem statement fl set literals called items 
directed acyclic graph literals 
edge represents relationship represents set taxonomies 
edge call parent child represents generalization 
call ancestor descendant directed path set transactions transaction set items say transaction supports item ancestor item say transaction supports itemset supports item set generalized association rule implication form ae ae 
rule holds transaction set confidence transactions support support rule support transaction set transactions support boolean expression assume loss generality disjunctive normal form dnf 
form dm disjunct form ff ff ff taxonomies element ff ij ij ij ij taxonomy ff ij ancestor ij descendant ij ancestor ij usually impose condition item ancestor item rule support confidence rule ancestor redundant 
boolean expression converted dnf expression 
descendant ij 
bound number ancestors descendants included 
evaluate implicitly replace descendant ij ij ij ij descendant ij ij ij ij ij ij descendants ij perform similar operation ancestor 
evaluate rule consider items appear value true items value false 
set transactions set taxonomies boolean expression problem mining association rules item constraints discover rules satisfy support confidence greater equal user specified minimum support minimum confidence respectively 

review apriori algorithm problem mining association rules decomposed subproblems ffl find combinations items support greater minimum support 
call combinations frequent itemsets 
ffl frequent itemsets generate desired rules 
general idea say abcd ab frequent itemsets determine rule ab cd holds computing ratio support abcd support ab 
rule holds minimum confidence 
note rule minimum support abcd frequent 
apriori algorithm finding frequent itemsets agrawal 
algorithm basis presentation 
itemset denote itemset having items 
represent set frequent itemsets set candidate itemsets potentially frequent itemsets algorithm multiple passes data 
pass consists phases 
set frequent gamma itemsets gamma gamma th pass generate candidate itemsets candidate generation procedure ensures superset set frequent itemsets 
algorithm scans data 
record determines candidates contained record hash tree data structure increments support count 
pass examined determine candidates frequent yielding algorithm terminates empty 
candidate generation set frequent itemsets candidate generation procedure returns superset set frequent itemsets 
assume items itemset lexicographically ordered 
intuition procedure subsets frequent itemset frequent 
function works follows 
join step joined insert select item item item item item item item gamma item gamma item item prune step itemsets subset deleted 
proof correctness candidate generation procedure agrawal 
illustrate steps example 
ff gg 
join step ff gg 
prune step delete itemset subset left notice procedure longer complete item constraints candidates frequent generated 
example item constraint want rules contain item apriori join step generate candidate contain counted second pass 
discuss various algorithms candidate generation presence constraints section 

algorithms algorithms considering taxonomies items sections discuss taxonomies section 
split problem phases ffl phase find frequent itemsets itemsets support greater minimum support satisfy boolean expression recall types operations problem candidate generation counting support 
techniques counting support candidates remain unchanged 
mentioned apriori candidate generation procedure longer generate potentially frequent itemsets candidates item constraints 
consider different approaches problem 
approaches reorder share approach section 
generate set selected items itemset satisfies contain selected item 

modify candidate generation procedure count candidates contain selected items 

discard frequent itemsets satisfy third approach direct directly uses boolean expression modify candidate generation procedure candidates satisfy counted section 
ffl phase generate rules frequent itemsets need find support subsets frequent itemsets satisfy recall generate rule ab cd need support ab find confidence rule 
ab may satisfy may counted phase 
generate subsets frequent itemsets phase extra pass dataset count support subsets output phase 
ffl phase generate rules frequent itemsets phase frequent itemsets phases compute confidences apriori algorithm 
discuss techniques finding frequent itemsets satisfy phase 
algorithms notation 
approaches selected items generating selected items recall boolean expression dm ff ff ff element ff ij ij ij ij want generate set items itemset satisfies contain item example set items 
consider 
sets property non empty itemset satisfies contain item set 
set property 
note inverse hold itemsets contain item satisfy expression may different sets itemset satisfies contains item choose set items sum supports items minimized 
intuition sum supports items correlated sum supports frequent itemsets contain items correlated execution time 
show generate choosing element ff ij disjunct adding ij elements gamma fl ij ff ij ij ij respectively 
define element ff ij ij ij element ff ij ij items gamma fl ij lemma set items ff ij ff ij ij ij ff ij ij gamma fl ij non empty itemset satisfies contain item proof itemset satisfies satisfies exists true lemma statement exists ff ij dm disjuncts ff ff ff conjuncts ff ij ij ij item ij set items itemset satisfies contains item selected itemset itemset contains item itemset itemset items 
set frequent itemsets minimum support contain item set frequent itemsets minimum support satisfy set candidate itemsets potentially frequent itemsets contain item set candidate itemsets potentially frequent itemsets satisfy set frequent items notation algorithms ff ij ij ij ff ij ij gamma fl ij done true ij contain item gamma fl ij contain ij empty set 
gamma fl ij contains item naive optimal algorithm computing set elements support minimum require time number conjuncts disjunct alternative greedy algorithm requires time optimal literal define ff ij ij ff ij ij gamma fl ij ff ij ij dm ff ff ff cost ff ij support ff ij support ff ip ff ij minimum cost 
ff ip consider boolean expression literal different disjuncts 
example 
assume higher support 
greedy algorithm generate optimal 
partial fix problem add check 
literal ij different disjuncts add ij remove redundant elements operation decrease support overlapping duplicates duplicated literals disjunct result optimal set items 
overlapping duplicates algorithm may choose optimal 
consider problem generating candidates contain item candidate generation set selected frequent itemsets candidate generation procedure return superset set selected frequent itemsets 
recall apriori algorithm subsets candidates subsets frequent selected itemset frequent may selected itemsets 
join procedure apriori algorithm generate candidates 
generate simply take theta set frequent items 
subsequent passes solution join elements gamma items common 
selected itemset subsets selected item join generate candidates 
candidate may frequent selected subsets gamma pairs frequent subsets gamma common items 
solution quite expensive large number itemsets efficient approaches 
algorithm lemma presents intuition algorithm 
itemset lemma corresponds candidate need generate 
recall items itemset lexicographically ordered 
lemma frequent itemset 
selected item gamma items exist frequent selected subsets gamma items selected item min gamma items exist frequent selected subsets gamma items itemset second item selected item exist frequent selected subsets item second item item second item example consider frequent itemset 
selected subsets items 
selected subsets items 
frequent itemset selected item frequent selected subsets 
generating efficient join algorithm straightforward joins correspond directly cases lemma 
consider candidate itemset 
case join generate 
join similar join step apriori algorithm performed subset itemsets second case join generate covered possible locations selected item need join case selected item second item 
illustrates algorithm itemsets 
join fp gamma items sg insert select item item item item item item item gamma item gamma item item join fp min gamma items sg insert select item item item item item item item item item item join insert select item item item item item item item selected note joins generate duplicate candidates 
gamma items candidate resulting joins different 
items candidates resulting join selected item selected candidates resulting join item selected candidates resulting join 
results join overlap join join 
prune step drop candidates selected subset algorithm reorder generate theta lemma simplify join step 
lemma ordering items itemsets items precede items join join join join example join reorder example procedure apriori algorithm applied generate superset intuition lemma item frequent selected itemset selected item 
candidate exist frequent selected subsets gamma items shows example shown items ordered items apriori join step 
lexicographic ordering items itemset impose ordering 
items precede items lexicographic ordering items efficient implementation association rule algorithm map strings integers keep strings internal data structures 
mapping re ordered frequent selected items get lower numbers items 
frequent itemsets strings re mapped original values 
drawback approach reordering done points code including mapping strings integers data structures represent taxonomies 
algorithm direct generating set selected items finding frequent itemsets contain items applying filter frequent itemsets directly candidate generation procedure 
pass data find set frequent items set frequent itemsets satisfy intuition candidate generation procedure lemma 
lemma itemset satisfies exists subset satisfies true exactly non negated elements 
generate steps 
theta 
delete candidates satisfy 
delete candidates subset satisfies minimum support 

disjunct ff ff ff exactly non negated elements ff ip ff ip ff add itemset fff ip ff ip ff ff ip frequent example 
assume items frequent 
ff gg 
generate take theta get satisfy dropped 
step change subsets satisfy frequent 
add get ff gg 
taxonomies enhancements apriori algorithm integrating item constraints apply directly algorithms mining association rules taxonomies srikant agrawal :10.1.1.144.4956
discuss cumulate algorithm 
algorithm adds ancestors item transaction transaction runs apriori algorithm extended transactions 
example taxonomy transaction replaced outerwear clothes shoes 
cumulate performs optimization including adding ancestors candidates extended transaction counting itemset includes item ancestor 
basic structure operations cumulate similar apriori get taxonomies free 
generating set selected items expensive elements include ancestor descendant function need find support ancestors descendants 
checking itemset satisfies expensive may need traverse hierarchy find item ancestor 
cumulate count candidates item ancestor support itemset support itemset ancestor 
cumulate checks candidates second pass candidates size 
subsequent passes apriori candidate generation procedure ensures candidate fast algorithm srikant agrawal similar cumulate uses sampling decrease number candidates counted :10.1.1.144.4956
contains item ancestor generated 
example itemset outerwear generated deleted property hold item constraints specified 
case need check candidate pass ensure candidates contain item ancestor 

tradeoffs reorder similar performance count exactly set candidates 
reorder little faster prune step candidate generation checking subset contains selected item takes time reorder versus time 
itemsets small difference time significant 
execution times typically dominated time count support candidates candidate generation 
slight differences performance reorder justify choosing purely performance grounds 
choice whichever easier implement 
direct quite different properties reorder 
illustrate tradeoffs reorder direct example 
reorder characterize reorder rest comparison 

assume itemsets frequent itemsets frequent itemsets frequent 
reorder count itemsets find frequent count itemsets 
direct count itemsets 
reorder counts total itemsets versus direct itemsets itemsets versus itemsets direct 
lower frequent reorder count additional theta gamma candidates third pass 
reorder prune candidates direct fourth passes information itemsets frequent 
example reorder prune candidate frequent direct counted 
hand direct count candidates satisfy reorder count candidates include 
gap number candidates widens little 
fourth pass direct count candidates 
minimum support level previous paragraph reorder count candidates second pass candidates third pass frequent candidates candidates fourth pass total candidates 
direct count fewer candidates reorder 

items subsets frequent sets 
reorder count candidates direct count 
general expect direct count fewer candidates reorder low minimum supports 
candidate generation process significantly expensive direct subset checked potentially complex boolean expression prune phase 
direct may better lower minimum supports larger datasets reorder higher minimum supports smaller datasets 
needed analytically characterize trade offs empirically verify 

considered problem discovering association rules presence constraints boolean expressions presence absence items 
constraints allow users specify subset rules interested 
constraints applied post processing step integrating mining algorithm dramatically reduce execution time 
integrated algorithm discussed tradeoffs 
empirical evaluation algorithm real life datasets showed integrating item constraints speed algorithm factor item constraints selectivity 
restricted discussion apriori algorithm ideas apply algorithms apriori candidate generation including toivonen 
main idea toivonen run apriori sample data find itemsets expected frequent subsets expected frequent 
need count ensure frequent itemsets missed 
itemsets counted complete dataset 
ideas directly applied part algorithm itemsets counted reorder direct sample counted entire dataset 
candidates frequent sample frequent datasets extensions candidates satisfied constraints counted additional pass 
agrawal shafer 
parallel mining association rules 
ieee transactions knowledge data engineering 
agrawal mannila srikant toivonen verkamo 
fast discovery association rules 
fayyad piatetsky shapiro smyth uthurusamy eds advances knowledge discovery data mining 
aaai mit press 
chapter 
agrawal imielinski swami 
mining association rules sets items large databases 
proc 
acm sigmod conference management data 
ali srikant 
partial classification association rules 
proc 
rd int conference knowledge discovery databases data mining 
han fu 
discovery multiple level association rules large databases 
proc 
st int conference large databases 
han karypis kumar 
scalable parallel data mining association rules 
proc 
acm sigmod conference management data 

applying data mining techniques health insurance information system 
proc 
nd int conference large databases 
savasere omiecinski navathe 
efficient algorithm mining association rules large databases 
proc 
vldb conference 
srikant agrawal 
mining generalized association rules 
proc 
st int conference large databases 
toivonen 
sampling large databases association rules 
proc 
nd int conference large databases 
