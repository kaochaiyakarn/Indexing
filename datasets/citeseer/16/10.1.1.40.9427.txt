path category alf agda ilya december compare di erent de nitions path category type theory implementations alf agda 
purposes alf agda implement logical framework nps support di erent versions inductive de nitions 
appears alf de ne path category natural way agda possible 
equality type theory controversial issue 
notions equality de nitional equality sides de nition 
relation syntactic objects propositional equality represented set theory classi ed intensional extensional 
book equality arbitrary equivalence relation want build quotient set setoid di erent theories treat equality di erently treatment equality important di erence type systems intensional extensional martin type theory 
intensional type theory propositional equality inductively de ned inside di erent schemata martin ml coquand cpm 
practical issue 
intensional type theory systems alf agda writing functional programs support nicely reasoning natural deduction predicate logic 
facilities equational reasoning primitive 
reason fact propositional equality preserved formation dependent types family types parameterised natural numbers natural numbers propositionally equal general prove formulate equal 
developing category theory alf agda problem equational reasoning acute 
bey implement substantial diagrams 
proved low level time consuming task 
started developing support diagram chasing 
diagram chasing seen equational reasoning paths category 
natural develop notion path internally system 
trying achieve faced new problems related equality particular restrictions agda facility inductive de nitions 
systems alf family proof assistants martin logical framework nps 
modern members family window alf see user guide agda see coquand cc web page coq 
purpose systems facilitate experiments various theories 
system works modules consisting de nitions types typed constants turn may correspond sets propositions lemmas functions proof checker veri es types formed constants belong declared types 
proof assistant user interface proof checker supports type sensitive editing functional programs 
alf implements logical framework literally agda introduces certain variations 
top framework systems implement inductive de nitions di erent schemata 
section shortly framework extensions provided implementations 
logical framework idea logical framework xes general logical structure common variety theories 
martin logical framework forms judgement type read type type types equal equal objects type 
de nes minimal list constructions table appropriate rules de nitional equality introduce primitive sets 
dependent function types type type function application lambda abstraction type sets set type type elements set set type table logical framework typing rules alf alf implements framework literally 
deviation equality judgements hidden user replaced normalisation 
equality covers reduction extended new inductive sets introduced 
pure framework assume existence sets constants equalities 
alf allows assigning names types contexts substitutions treat rst class citizens instance sets types contexts 
agda agda extends framework adding named records packages expressions give better structure theories see cc 
agda framework de ne setoid set de ned equivalence relation record type open prelude rel basic relations library setoid type de ning type setoids sig record type set consisting carrier set called eq rel binary relation called eq ref eq proof eq reflexive sym eq symmetric trans eq transitive access components record dot notation open prelude sfun setoid setoid set function setoids sig map consists function carriers req eq eq map respecting eq build theory setoids staying completely framework 
alf developing require inductive de nitions 
distinction agda framework cumulative hierarchy universes set type rst 
universe element subset higher ones 
constructions sig struct universe level 
special judgement forms concerning type eliminated 
inductive recursive de nitions theoretical schemata variety type theories implemented logical framework depending set formation elimination schemas accepted 
original martin formulation type theory included standard set formers universes 
possible represent inductive sets terms ones collection natural add necessary datatypes directly type theory encoding 
introducing new sets arbitrary manner easy theory inconsistent see altenkirch alt examples 
dybjer dyb dyb analyses commonly de ned datatypes uniformly presents schema set forming elimination rules covers wide class inductive de nitions gives set theoretic semantics de nitions 
schema internalised dybjer ds 
cf calculus inductive constructions paulin coq chapter alf basically alf allows de ne inductive family constructors implement checks type correctness 
interestingly supports powerful mechanism patternmatching allows implement elimination equality rules inductive families 
consider instance identity relation called literature id alf library id set set id set id gives generic equality relation set set id inhabited conversion 
type theory gives elimination rule id id id hand alf pattern matching turns stronger 
instance proves inhabitants id identical set id id id id id id id id id id property independent derived elimination rule hofmann streicher hs 
summarise alf allows kinds de nitions introduced dybjer dyb cases 
means system allows introduce arbitrary sets general inductive de nitions 
ideally user able specify theory works assistant switch necessary checks 
alf typechecks terms rules logical framework verify structure de nitions job left user 
result proofs libraries written just alf speci ed theory 
proof assistant alf provides convenient user interface possibility hide redundant parameters heavily development bigger computer screen 
alf powerful lacks features necessary bigger projects support local de nitions abstraction mechanism quite sucient give name type function type type treat record types directly 
de nitions done pattern matching give rise constraints solved insure cases covered 
general form require uni cation signi cantly complicates typechecking theory practice 
see magnusson mag details 
reasons agda restricted de ned form datatype pattern matching taken basis 
time abstraction mechanisms improved useful constructions programming world introduced making easier develop theories despite stronger theory 
agda agda new syntax inductive de nitions data inspired haskell 
de nition inductive family data constructor name new datatype set assumptions 
constructor form name constructors sets 
corresponds rules set set set hand general schema dyb gives set arbitrary expressions possibly see agda syntax enforce strictly positive datatype name done external foundedness checker di erence essential 
important type constructors parameters datatype 
call agda restriction 
means inductive families form identity set id implemented literally 
encoded book equality encoding necessarily weaker type theoretic counterpart 
hand agda datatypes type set directly translated alf 
agda facility de nition pattern matching case lets de ne elimination equality rules inductive families la dybjer satisfy agda restriction 
agda allows general recursion syntax optional foundedness checker veri es rhs structurally smaller lhs 
agda set closed need introduce type dybjer schema 
current implementation agda allows type position agda consistent theoretical schemas dyb cp 
extension allows de ne nested datatypes form 
nested datatypes useful functional programming bm apparently partial substitute dependent types importance type theory evident 
implementing path category categories type theory basically di erent ways representing graphs categories type theory put arrows set obj arr set src tgt arr obj organise family sets indexed source target objects 
called hom sets categorical literature obj set hom source target obj set choice sets equipped equivalence relation properties assume relation 
categories agreed natural de nition arises second alternative called category obj set equality hom family setoids sets equivalence relation 
approach barthe bar sa bi sa mohri moh 
cds categories partial equivalence relation equivalence gives nicer subset properties context distinction important 
avoiding equality objects may restriction fact saves trouble known working setoid indexed families needs new layer coherence axioms see dyb current trend de ne categories equivalence external equality objects eventually replaced isomorphism 
allows repeat useful constructions nasty exceptions 
path category 
categories alf works ne problem size built universe hierarchy record types 
practical problems diagram chasing proofs big easily structured 
categories agda principle works nicely universe hierarchies record types 
category theory implemented nicely 
problems arise de ne universal constructions functors equality functors general requires equality object sets 
cat set cat obj set hom obj obj set obj hom obj hom hom hom obj hom set obj hom syme obj hom obj hom ao obj hom hom hom lo obj hom ro obj hom oe obj hom hom cat de nition category alf de ning particular instances categories agda elegant reasons equality arrows de ned hand case analysis arguments 
path category type theory path category path underlying graph path category object set arrows path category paths identity arrow de ned empty path composition concatenation paths 
note de nitions underlying graph categorical structure 
path category isomorphic free category generated underlying graph alf consider simplest setting homomorphisms form discrete set syntactic de ned equality 
set objects arr family hom sets 
paths de ned inductive family path set nil path cs arr path path operation path concatenation de ned structural induction append path path path append nil append cs cs append prove induction path append associative wrt de nitional equality similarly left right units 
fact congruence proved induction id append congr path path id id id append append append congr id id id append missing de nition path category equality paths de ned means translation hom obj path hom de ne path category category cat cat cat obj hom syme ao lo ro oe cat obj path nil append hom syme hom hom hom hom hom append ass hom append id hom hom append nil see availability id solves problem 
agda agda reproduce previous construction referring equality objects data path obj nil nil requires cs obj hom path de ne datatype paths starting object data path obj nil path cs obj hom path path tgt tgt obj path obj case de ne equality predicate paths constructing path category 
suggest path category impossible de ne agda 
build analogy free category generated set existence free category generated set immediately gives equivalence relation mikael shown relation substitutive existence free category arbitrary 
just analogy prove existence path category generated graph identity loops set 
specify path category universal property 
universal property path category categories graph morphism inj jcj say path category category inj jcj unique functor diagram category graphs commutes 
jcj inj inj de nes object arrow part path category isomorphism 
need freedom obvious instances path categories inherit object set assume categories objects set inj inj preserve object part 
saves bit trouble comparing functors unrelated object parts equality functors general relies equality objects 
de ne type categories object set obj set type sig hom obj set id obj hom comp obj 
hom 
hom 
hom obj rel hom obj hom id comp rede ne standard constructions hom setoid functor pre functor homomorphism underlying graphs done package agda 
de ne path category universal property package obj set obj open obj func obj inj type obj 
inj pp setoid func cp setoid suchthat pp set cp eq inj inj fst pp suchthat obj inj ok inj conjecture de ne agda path category particular category de nition completed 
note universal property de ned terms equality arrows weak 
particularly derive general induction principle predicate de ned paths holds identity arrows singleton arrows preserved compositions holds path obj hom 
holds predicates respect equality paths 
actual proof pages long available agda directory relevant de nitions 
cleanest way extend agda postulate additional sets principles 
particular postulate existence id type alf postulate id set set postulate id set id standard elimination rule type type set 

ab id 
xy id set 
id ab postulate type id relatively easy de ne paths data path obj obj nil az id obj cs obj ab hom bz path construct path category satisfying universal property 
accept postulates postulate path datatype path category 
thorsten altenkirch veronica bengt nordstr om von 
user guide alf 
draft january 
alt thorsten altenkirch 
consistency alf 
la ote january 
bar gilles barthe 
formalising mathematics type theory 
manuscript 
www di pt gilles html 
bey ilya 
alf proof mac lane coherence theorem 
thesis department computing science chalmers university technology 
bm bird meertens 
nested datatypes 
johan jeuring editor mathematics program construction volume lncs pages 
springer verlag 
cc coquand thierry coquand 
structured type theory 
types june 
cds peter dybjer philip scott 
normalization yoneda embedding 
mathematical structures computer science 
available www cs chalmers se 
coq coq proof assistant 
manual july 
pauillac inria fr coq doc main html 
coq coquand 
agda homepage 
www cs chalmers se agda 
cp thierry coquand christine paulin 
inductively de ned types preliminary version 
lncs international conference computer logic 
springer verlag 
cpm th 
coquand paulin mohring 
inductively de ned types 
martin mints editors proceedings volume lncs 
springer verlag 
ds peter dybjer anton 
nite axiomatization de nitions 
jean yves girard editor typed lambda calculi applications volume lecture notes computer science pages 
springer april 
dyb peter dybjer 
general formulation simultaneous de nitions type theory 
appear journal symbolic logic 
dyb peter dybjer 
inductive families 
formal aspects computing 
dyb peter dybjer 
internal type theory 
types types proofs programs number lncs pages 
springer verlag 
michael 
coherence theorem martin type theory 
functional programming july 
hs martin hofmann thomas streicher 
groupoid model refutes uniqueness identity proofs 
lics pages 
ieee press 
mag lena magnusson 
implementation alf proof editor martin monomorphic type theory explicit substitution 
phd thesis chalmers 
ml martin 
models intuitionistic type theories notion de nitional equality 
kanger editor proceedings rd scandinavian logic symposium pages 
moh mohri 
formalization category theory 
master thesis tokyo university march 
ftp nicosia tokyo ac jp pub staff mohri st ps 
nps bengt nordstr om kent petersson jan smith 
programming martin type theory 
oxford university press 
sa sa bi 
en de mod de pour la formalisation des math ematiques en th eorie des types 
application la th eorie des cat egories 
phd thesis inria rocquencourt 
pauillac inria fr publi html 
