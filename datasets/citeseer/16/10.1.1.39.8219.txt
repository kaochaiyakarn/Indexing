garbage collection faster stack allocation andrew appel department computer science princeton university princeton nj june revised jan old simple algorithm garbage collection gives results physical memory larger number reachable cells 
fact overhead associated allocating collecting cells heap reduced instruction cell increasing size physical memory 
special hardware intricate garbage collection algorithms fancy compiler analysis unnecessary 

modern programming environments heap storage garbage collection 
allocated cells reachable chain pointers runtime stack garbage collected re traversal algorithm 
algorithm typically marks reachable cells depth search collects unmarked cells takes time proportional total number reachable garbage cells 
languages garbage collection pascal programmer write bookkeeping code keep track heap allocated cells free explicitly longer needed 
programs significantly complex 
languages garbage collection lisp mesa icon ml programmer need worry bookkeeping allocated cells programs simpler straightforward 
hand garbage collector slow expensive simpler straightforward programs typically efficient garbage collection 
trend optimizing compilers garbage collected languages compiler deduce statically cells may freed 
approach compromise cells freed automatically reduces load garbage collector complexity optimizing compiler compiled program 
shows memory computer expensive explicitly free cell leave garbage collector cost freeing cell single machine instruction 

copying garbage collection traditional mark sweep algorithm puts free cells linked list re takes time proportional number reachable cells plus number garbage cells 
purposes need algorithm time complexity independent number garbage cells 
simplest form copying garbage collector works equal sized memory spaces time 
time collect garbage collector traverses reachable cells active space copies inactive space 
spaces switched space active space left empty garbage collection 
traversal reachable cells done depth search takes time proportional number reachable cells 
copying takes constant overhead cell addition time proportional total size cells copied 
important property copying garbage collection algorithm visits garbage cell execution time garbage collector dependent number size reachable cells independent amount garbage 
cost garbage collection may computed follows number reachable cells average size cell 
size memory spaces 
depth traversal copying requires constant number operations cell plus constant number operations pointer garbage collection just depth traversal plus copying time spent independent assuming number reachable cells approximately garbage collection compute cost cell garbage collection 
calculate cell amount garbage collection overhead associated 
number cells allocated garbage collections divided cost garbage collection 
assuming change number garbage cells 
compute parameters wait active space full collecting just number cells remaining active space permanent reachable cells copied 
compute cost cell garbage collection glance formula shows smaller making bigger 

explicit freeing expensive section show memory available optimizing compiler effort stack allocation compiled programs run slower 
suppose cost popping record stack explicitly freeing garbage cell constant 
fact operation typically cheaper long constant analysis similar conditions cost explicit free operation greater cost garbage collecting cell 
crossover point sa sa technically possible pop cells stack frames stack subtraction stack pointer usually difficult practice entail returning procedures time 
sa larger garbage collection cheaper explicit freeing 
illustration assume values constants imaginary implementation instructions instructions words instructions find crossover point sa ratio physical memory average reachable data 
willing times memory data garbage collection essentially free 
really half machine memory size spaces 
enhancements copying algorithm spaces unused time need additional factor 
furthermore size data truly size space spaces overlap memory needed time really sa 
program uses megabytes real data need run megabytes physical memory achieve free garbage collection 

massive memory machine massive memory machine project princeton designed allow experiments test performance improvements memory increases 
current machine megabyte vax 
confirm results predicted previous section garbage collection time goes dramatically memory increases simple experiment run edinburgh standard ml system compiling lines standard ml code 
system designed portability optimality particularly fast garbage collector written assembly language provides convincing demonstration advantages massive memory 
runs done compilation different memory sizes megabytes 
memory cpu time gc time gc time gc sa typical meg meg sec sec sec space memory organization megabyte run megabytes time 
cpu time user time process runs similar system times 
gc time calculated just subtracting time megabyte run times run garbage collected may completely accurate caching effects close 
number garbage collections declines expected importantly average time garbage collection increase decreases 
probably explained fact run times sa approached garbage collector started thrashing repeatedly collecting little garbage collect 
note column sa measures ratio excess memory reachable data strictly linear measurement taken garbage collection time garbage collections occurred different points different runs 
table supports memory garbage collector invoked time savings 
may consider megabyte run useful calibrate measurement come stronger memory increases number garbage collections proportionately fewer time garbage collection increase 
section predicts garbage collection time inversely proportional sa 
graph versus sa supports total garbage collection time approximately inversely proportional excess memory sa 
allocating heap previous section shows freeing heap cell garbage collection cheaper memory popping stack 
consider cost allocating cell 
lisp typically expressed cons meaning allocate word cell containing values return pointer 
assume scheme values stored memory instructions ones store count overhead 
compacting garbage collector unallocated memory contiguous region 
free list free area memory 
function cons implemented machine instructions 
test free space pointer free space limit 

limit reached call garbage collector 

subtract size cons cell free space pointer 

store new cell 

store new cell 

return current value free space pointer 
code sequence assumes cells allocated starting higher addresses moving lower addresses 
instruction sequence costly corresponding instructions pushing stack 
virtual memory hardware computer accomplish test line 
inaccessible page mapped region just free space attempt store line cause page fault 
trap returned run time system initiate garbage collection 
free space pointer kept register simplify access 
furthermore vax subtraction free space pointer implemented means auto decrement addressing mode 
new instruction sequence cons 
movl fp 
movl fp point pointer new cell available free space pointer fp register appropriate 
instructions take time pair stores memory overhead attributable allocation heap exactly zero 
instruction sequence implement cons identical sequence pushes values allocating cell heap identical cost pushing cell stack 
appropriate modifications simple idea procedure call frames may heap allocated just cheaply allocated stack 
shown previous section overhead deallocation cell approach zero popping stack takes instruction 

remarks programming language garbage collection allows simpler cleaner programming style programmer return cells heap explicitly 
easy believe pay price efficiency ease programming explicit freeing cells painful yields faster program 
simply true 
old simple garbage collection algorithm cost garbage collection negligible 
lisp programmers go way avoid consing programs needlessly 
algorithm analyzed copy algorithm concurrent 
guaranteed upper bound response time disadvantage real time environment 
total garbage collection overhead algorithm concurrent algorithm baker instructions overhead cell allocated 
algorithms cheaper proportion amount memory system non concurrent version lieberman hewitt algorithm example 
system incorporates garbage collector automatically improve speed memories cheaper larger 
time megabytes memory chips obtained dollars need complex garbage collection algorithms special garbage collection hardware 
techniques counting ephemeral garbage collection closure analysis may really necessary possible massive memories 

john mccarthy recursive functions symbolic expressions computation machine communications acm vol 
pp 
acm 

guy steele rabbit compiler scheme ai tr mit 

robert fenichel jerome lisp garbage collector virtual memory computer systems communications acm vol 
pp 
acm 

henry lieberman carl hewitt real time garbage collector lifetimes objects communications acm vol 
pp 
acm 

robin milner proposal standard ml acm symposium lisp functional programming pp 
acm 

baker list processing real time serial computer communications acm vol 
pp 
acm 

oki goes court pact electronic news vol 
july 

collins method overlapping erasure lists communications acm vol 
pp 
acm 

david moon garbage collection large lisp system acm symposium lisp functional programming pp 
acm 
