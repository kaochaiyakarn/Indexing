asynchronous process algebra multiple clocks henrik reif andersen michael mendler technical university denmark department computer science building dk lyngby denmark 
mail id dth dk 

introduce novel approach specification real time behaviour process algebras 
contrast usual pattern involving fixed measurable global notion time suggest represent real time constraints indirectly uninterpreted clocks enforcing broadcast synchronization processes 
approach advocates asynchronous process algebras admit faithful representation nondeterministic distributed computations 
technically non trivial extension calculus communicating systems ccs mil multiple clocks associated timeout clock ignore operators 
illustrate flexibility proposed process algebra called pmc presenting examples different nature 
timeout operators generalize timeout atp ns multiple clocks 
main technical contribution complete axiomatization strong bisimulation equivalence class finite state processes complete axiomatization observation congruence finite processes 
consolidating tradition timed process algebras real time system perceived operate regime global time parameter constraining occurrence actions ns 
time algebraic structure typically totally ordered commutative monoid express quantitative timing constraints 
semantics timed process transition system enriched quantitative timing information absolute duration actions time occurrence 
puts forward process algebra bother 
salient approaches mt wan lia ns primarily aim describing completely global real time behaviour timed systems fairly realistic fashion 
means abstracting real time restricted choice time domain instance working real numbers may decide go rational discrete time 
believe approaches overly realistic disadvantages specification modelling real time systems 
firstly specifying timed process complete quantitative information intended timing behaviour implementation required 
includes specification relevant safety critical timing specification irrelevant timing parameters believe constitute majority practice 
forced include lot irrelevant timing information left implementation unfortunate unnecessarily cutting design space preventing designer finding reasonable implementation 
secondly real time process algebras require give exact numbers duration actions time units enter valid login response 
examples timed acp described timed csp ns wan 
exact delays general difficult implement due uncontrollable fabrication parameters operating conditions circuit temperature external events 
best hope implement delay intervals 
process algebra delay intervals exact time proposed liang lia 
algebra suffers cluttered irrelevant timing information 
process algebra interval durations am 
disadvantage time intervals severe problems cause simulation particular time dense feasible faithfully simulate time intervals purpose timing validation 
propose approach specification modelling real time systems captures nature timing constraints multiple clocks 
clocks enforce global synchronization actions compromising abstractness time referring concrete time domain globally fixed 
concept time underlying clocks qualitative local 
firstly prejudice particular way realizing clock 
free interpret clock global real time watch measuring absolute process time system clock synchronous processor completion signal distributed termination protocol 
clocks general flexible means bundling asynchronous behaviour intervals 
secondly concept time underlying clocks qualitative absolute occurrence time duration actions constrained relative ordering sequencing wrt 
clocks 
approach analysis timing inequations concrete realization fixed assigning specific delays actions clock distances 
timing critical aspects course particular delay constraint imposed particular clock specification time 
clocks admit local notion time different subprocesses independent clocks may may realized referring time base 
contribution introduce syntax semantics process algebra pmc non trivial extension ccs mil multiple clocks 
semantics pmc transition systems separate action clock transitions 
actions local constraints progress clocks expressed 
important features pmc demonstrated flexibility expressing timing constraints fact admits complete axiomatization strong bisimulation equivalence class finite state processes observation congruence finite processes 
syntax semantics pmc pmc concurrent systems described ability perform actions synchronize clocks 
ccs assume set action names complemented versions bijection inverse denoted assume additional silent action take set actions act def fg 
communication takes place synchronization complementary actions actions considered input actions actions output actions 
sequel ff fi range act 
addition ordinary actions ccs pmc assumes finite set clocks sigma elements ranged ae oe oe oe actions synchronization parallel processes clocks enforce broadcast synchronization processes parallel composition take part 
fact clocks mimic properties time effect clock tick reaches syntactic operators 
range set process variables 
process terms generated grammar ff bt coe oe rec roughly meaning process operators terms ability perform actions take part clock ticks follows 
nil process action admit clock tick 
prefix ff process performs ff behaves prevents clocks motivates calling prefix 
term taken hennessy hen 
prefixes time progressing called urgent bl immediate ns 
sum process behave choice action 
composition represents performing concurrently possible communication 
restriction behaves actions allowed occur 
processes takes part clock tick oe having components take part 
timeout bt coe process behaves initial action performed clock tick different oe occurs oe occurs transformed name timeout 
ignore process oe behaves just take part oe clock tick changing state 
recursion rec distinguished solution process equation notion closed term set free variables term defined usual 
variable weakly guarded term occurrence subexpression scope ff 
require ff definition strongly guarded term weakly strongly guarded variable occurring weakly strongly guarded 
symbol denote syntactic equality 
semantics pmc labelled transition system set closed process terms def act sigma set labels theta theta transition relation 
distinguishing pure action ff ff ff ff ff ff ff ff ff ff ff ff ff ff rec ff rec ff ff ff ff oe ff oe fig 

action rules 
pure clock time transitions semantics follows popular pattern timed process algebras ns 
course ways incorporating time 
mention am transitions carry action time information 
transition relation pmc defined plotkin style relation closed set action rules clock progress rules figs 

oe oe oe oe oe oe oe oe rec oe rec oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe fig 

clock progress rules 
action rules fig 
processes ff rec follow usual rules ccs 
clock progress rules fig 
processes require little comment 
idea clock tick global time synchronization synchronously affects subterms process 
action clock progress rules oe reflect informal explanation 
convenient extend timeout operator possibly empty sequences oe oe delta delta delta oe clocks inductive definition btc delta delta delta oe un delta delta delta oe gamma un gamma coe un shall vector notation abbreviate delta delta delta oe un 
list important derived constructions special cases timeout oe def rec coe delta delta delta oe relaxed nil ff oe def rec bff delta delta delta oe relaxed prefix oe def coe wait oe oe def rec coe delta delta delta oe oe relaxed wait clock progress rules fig 
notice absence rule nil prefix 
clocks dramatic effect stopping clocks indefinitely time lock 
contrast process oe table relaxed version nil perform action allows clocks oe proceed 
maximally relaxed nil process enables clocks abbreviated def oe delta delta deltaoe sigma foe oe sigma empty coincide 
process ff oe relaxed version prefix lets clocks oe tick away freely changing state ff action occurs transforms derived process oe may common construct applications waits clock oe proceeding doing stopping clocks 
oe oe relaxed wait waits clock oe allows clocks oe tick 
mentioned generalization constructions relaxing processes ignore oe eliminated closed processes induction structure mean redundant syntactically derived operator elimination open terms 
example signal analyzer initial ideas motivation leading pmc developed attempt formally specify vehicle signal analyzer 
vehicle signal analyzer instrument measuring noise machines rotating objects cars 
instrument receives input microphones computes running spectra amplitudes frequencies presents results screen 
various measuring scenarios presentation modes available 
analyzer operated real time results visualized screen computed 
example illustrate application pmc simplify real design describe part instrument collects sound samples microphone speed pulses tachometer computes spectrum 
gives overview simplified system 
features communication channels represented solid lines clocks represented dashed lines 
signal analyzer reads sound samples channel pulses outputs channel speed related spectrum computed case study done operation manufacturing part design project department computer science dth 
ms filter watch tp oe oe ms oe sp fig 

signal analyzer 
samples information 
clocks reflect central timing aspects system behaviour 
sampling rate modelled clock oe ticks fixed frequency determined input bandwidth 
clock oe measuring time pulses 
ticks fixed frequency determining precision time measured instrument 
third clock oe ms synchronizing exchange information processes filter ms 
abstracting away actual values sent channels concentrating communication patterns real time aspects system consists processes ffl process filter reads tick oe sample computes spectrum modelled delivers spectrum sp response tick oe ms waits sample arrive 
ffl process watch keeps track time ticks clock oe reset channel current time read channel ffl process records number pulses arriving clock oe ms ticks delivers pulse count tp time distance delivery measured watch 
safe real time operation occasionally prevent oe 
ffl measuring process ms collects tick clock oe ms spectrum sp count time distance tp 
computes speed related spectrum delivered 
depending spectrum received value count involved 
model ms process making internal choice delivering result immediately performing lengthy internal computation modelled sequence doing 
pmc description system filter boe ms sp filter watch br watch watch bp oe ms oe tp oe ms oe ms sp tp ms delta delta delta ms filter watch processes constitute input system inp filter oe oe watch oe oe ms complete system sys inp ms oe oe sp tp formal description system hand precise role clocks oe oe ms oe correct real time operation important sure input action obtains exact number oe ticks arrived time read watch 
implies tick oe fall reading current time watch action resetting action real time requirement conveniently dealt pmc prefix process prevents oe reading resetting watch 
ordinary actions clock distribute time signals mutual exclusion watch process encoded protocol 
clock oe ms ensures filter ms ready consistent pairs spectra values sent 
relies broadcast feature clocks forcing parties synchronize 
normal actions effect requires complex protocol quite hard ensure values filter arrive synchrony 
clock oe plays role 
argued long samples environment arrive right speed channel clock oe unnecessary 
samples available environment values state variable read important happens certain defined points 
enforced clock 
imagine adding filter process sampling parallel input channel synchrony 
synchronization filters comes free clock oe encoded protocol 
example synchronous hardware hardware design dealing frequently architectures consisting number interconnected synchronous systems driven independent local clocks 
systems called multi clock synchronous systems locally synchronous machines cha 
synchronous subsystems exchange data communication buffers decouple computations compensate different relative clock speeds 
simplest case communication buffer input synchronizer shown fig 

input synchronizer prepared accept input data environment time offers synchronous system output tick local clock oe sequence input data arriving clock tick input transmitted 
output value synchronizer offers may change clock tick output behaviour preserved clock transitions 
shown am expressed merely wait nil prefixes relaxed :10.1.1.40.6943
clock oe input synchronizer clock oe synchronous system synchronous system fig 

input synchronizer 
general timeout operator synchronizer defined def bx coe encode value passing ccs abbreviations def sigma def assuming finite domain values families distinct actions indexed elements synchronizer process parameters represents state input line changed new value action time 
second parameter state output line 
passed synchronous system time updated value parameter clock oe ticks 
input synchronizer connect single clock synchronous systems say sc sc running independent clocks oe oe mc def sc oe sc oe single clock synchronous systems modelled pmc explained am :10.1.1.40.6943
idea prefixes synchronize function blocks globally force timing constraint clock signal 
leads compositional calculus synchronous systems subcomponents sc special cases synchronous systems 
axiomatization having set syntax semantics pmc going formal calculus reasoning equivalence pmc processes 
wish axiomatize notions equivalence viz 
strong bisimilarity observation congruence 
notions carry naturally ccs mil treating clock ordinary action transitions way definition 
relation theta strong bisimulation symmetric act sigma processes strongly bisimilar union strong bisimulations 
example 
processes equivalent formulations filter watch sec 
filter rec oe oe ms oe ms oe sp watch rec oe filter filter watch watch notice equivalence holds abstracting away values 
values considered watch surely ignore time 
define observation congruence need auxiliary concepts act sigma ln sequence obtained deleting occurrences delta delta delta write delta delta delta sn delta delta delta sn note particular definition 
relation theta weak bisimulation symmetric processes weakly bisimilar union weak bisimulations 
observation congruence written largest congruence contained extend equivalences open terms usual way stipulating substitution closed terms free variables eu processes clock transitions definitions coincide corresponding notions ccs extra equivalences introduced ccs sublanguage pmc 
words pmc conservative extension ccs 
show offset nature ccs 
lemma 
iff equivalent properties holds oe oe ff ff holds symmetrically interchanged 
symmetric binary relation property ff act oe sigma ff ff ii oe oe characterization reason fails congruence localized sum operator 
respect situation precisely ccs 
second characterization brings difference ccs congruent processes need strong match actions pmc need match initial clock sequence followed third characterization coincides moller observation congruence tccs mt 
equivalence characterizations due property ff ff coe coe coe oe oe bt coe coe oe oe cr ff ff ff ff ff ae ff ff ff bt oe coe oe ff oe bff oe coe ff oe oe oe oe oe bt oe oe oe fig 

equational laws sum timeout restriction ignore 
delta delta delta oe terms ffi ff cae delta delta delta ae ffi fi coe delta delta delta oe ae oe ae oe term ffi ff ffi fi ffi ff fi fig 

expansion law 
rec rec free rec rec rec rec guarded rec rec coe weakly guarded interpreted strongly guarded stands case regular 
fig 

laws recursion 
ff ff ff ff ff ff vc ff fig 

tau laws 
proposition clock determinism 
oe oe definition congruence wrt 
operators including recursion operator rec difficult verify congruence wrt 
operators 
important shows axiomatization equivalences leibniz rule substituting equals equals sound proven interchanged context 
shall symbol denote equality derivable equational reasoning special laws shall consider sequel 
theorem soundness 
laws fig 
sound laws fig 
sound example 
prove equational reasoning axioms equivalence example watch process watch oe oe oe oe br watch coe oe bt watch coe oe br watch watch coe oe oe br watch watch coe watch rule conclude watch watch 
definition 
term said regular built nil prefix sum timeout variables recursion operator 
process term rs free rs abbreviates recursion static operators subterm rec regular 
process finite contain recursion ignore operators 
theorem completeness 
rs free processes equational reasoning laws figs 
cr 
finite processes equational reasoning laws figs 

proof completeness am appear :10.1.1.40.6943
proofs basically adaptation milner technique mil mil involved due complicated normal form representation larger gap view completeness theorem hope lot mathematical theory ccs carried easily pmc 
situation quite simple 
subtle technical complications making pmc non trivial extension ccs 
firstly standard approach extending completeness finite finite state processes mil builds fact ccs unguarded processes transformed guarded ones 
unfortunately property fails hold pmc consequence completely axiomatized finite state processes new proof strategy 
instance take unguarded process rec coe 
state reachable possibly zero actions weak oe transition 
property enjoyed process weakly bisimilar fulfill property infinite state loop 
see consider state oe exist assumption 
state oe reachable sequence 
sequence empty oe contradicting clock determinism prop 

argument applies go constructing sequence delta delta delta 
means loop infinite state 
secondly sum dynamic operator ccs static behaviour wrt 
time steps disappear number clock transitions 
obtain transition system transition systems take disjoint union respect ordinary action transitions product respect clock transitions 
means equational characterization sums equations added needed pure ccs fragment 
connection recursion situation involved static nature wrt 
clock transitions regular processes infinite syntactic unfolding 
instance process rec coe oe admits infinite transition sequence oe oe oe delta delta delta oe oe delta delta delta oe oe delta delta delta producing bigger bigger terms 
pure ccs fragment hand regular process finite syntactic unfolding 
regular pmc processes finite number states modulo cf 
am :10.1.1.40.6943
related terminology 
distinguished feature pmc notion clock 
purposes term denote means measuring time order time stamp observations 
process language am timed automata alur dill ad clocks sense 
pmc intended interpretation clock hardware clock viz 
global signal synchronize asynchronous computations lock step fashion 
believe context asynchronous process calculi concept multiple synchronization clocks sense novel 
entirely new synchronous real time description languages 
lustre language synchronous data flow multiple clocks clocks derived master clock boolean expressions 
lustre developed originally real time programming describing digital circuits 
quite successful real time language multi form notion time esterel bc 
noted languages clocks built ordinary signals variables independent semantical concept pmc 
synchronous language clocks possess genuine semantical meaning associated clock calculus signal bbg 
obvious albeit stringent path technical comparison published view pmc single clock discrete time process algebra time delay size corresponds successive clock ticks 
instance fix particular clock oe define timing operators ffi follows oe ffi rec ranging natural numbers 
process waits clock transitions oe evolves remains quiet 
process ffi delayed version allows oe proceed time environment ready communicate 
constructs taken primitives timed process calculus tccs moller mt 
mt complete axiomatization tccs observation congruence finite sequential processes 
pmc tccs action prefixes pmc timeout operator produce relaxed actions relaxed behaviour introduced tccs different nonstandard primitive weak sum phi behaves exactly ordinary actions contrast forces components take part time transition time transition 
admit time transition considered stopped case process engage time step stopped process simply dropped computation 
hinted mt phi plays important role obtaining expansion law tccs turn crucial proving completeness 
interesting note equational axiomatization pmc considerably simpler tccs expansion law parallel composition consider various special cases phi pmc single equation scheme suffices 
possible view discrete time tccs pmc modulo syntactic encoding phi phi def bt coe oe oe 
bs coe oe 
oe 
tccs constructs ffi replaced definitions 
constructs represented pmc respective equivalents 
shown condition oe 
encoding phi decided syntactic structure delta fact defined syntactic operation am closed terms :10.1.1.40.6943
conjecture closed tccs processes variables guarded operational behaviour encoding pmc precisely obtained tccs 
different class timed process algebras relaxed actions maximal progress wan hr 
principles reflect rigid phase view real time execution phase component allowed perform arbitrary finite number internal communications zero time cost 
internal chatter ceased component stabilized time allowed proceed second phase 
duration second phase amount time component internally unstable 
ns phase model generalized arbitrary set urgent actions maximal progress enforced 
urgent actions play role internal communication actions performed time allowed proceed 
phase model globally synchronous locally asynchronous type behaviour 
major mode synchronous operation phases asynchronous cooperation bundled subcomponents process synchronize time advance 
pmc adopt flexible scheme allows localize notion time progress 
obtain simpler specifications distributed systems covering globally synchronous locally asynchronous systems class globally asynchronous locally synchronous behaviour cf 
sec 

possible extend maximal progress approach direction idea suggested hen major modification localizing maximal progress appropriate way 
remarks timeout operators order 
timeouts extension multiple clocks nicollin sifakis timeout introduced originally process algebra atp 
ns complete axiomatization atp strong bisimulation equivalence 
atp single clock version pmc notable differences 
atp restricted rs free guarded processes time locks generalized restriction parallel composition 
mention syntax pmc involved due multiple clock constructs normal form representation uniform atp 
pmc normal form scheme needs handled atp different cases treated separately 
time variants timeouts literature differ basically perform oe time step process prevent time progressing case 
examples constructs nicollin sifakis ns bpc hennessy regan hr 
relaxed time behaviour wrt 
important pmc allows derive number useful time relaxed constructs relaxed prefixes 
time timeout relaxed prefixes added language primitives resulting additional axioms complicated normal forms 
instance ns normal form treat separately different cases 
central design decision simplifying normal form pmc processes clock transitions clocks oe oe treated way ordinary actions remove timeout 
extension ccs multiple clocks timeout ignore operators complete axiomatization strong bisimulation equivalence class finite state processes observation congruence finite processes 
process algebra pmc developed capture quantitative nature realtime constraints aimed applications real time requirements essential 
believe pmc offers promising compromise expressiveness realizability executability 
pmc currently specification language industrial case study department computer science dth 
prototype implementation value passing version pmc development ml kit 
authors anders ravn matthew hennessy gerard berry moller various comments anders particular encouragement 
due referees criticism various suggestions improving 
authors supported danish technical research council second author european human capital mobility program network ad alur dill 
theory timed automata 
de bakker pages 
am aceto murphy 
ill timed caused 
best editor proc 
concur pages 
springer lncs 
am andersen mendler :10.1.1.40.6943
process algebra multiple clocks 
technical report id tr department computer science technical university denmark august 
bbg benveniste le le guernic 
hybrid systems signal approach 
grossman nerode ravn rischel editors hybrid systems pages 
springer lncs 
bc berry 
esterel synchronous programming language mathematical semantics 
brookes roscoe winskel editors seminar concurrency pages 
springer lncs 
bk baeten klop editors 
proceedings concur volume lncs 
springer verlag 
bl 
timed process algebras urgent interactions unique powerful binary operator 
de bakker pages 
birkedal rothwell tofte turner 
ml kit version 
technical report diku march 
cha daniel 
reliable high speed arbitration synchronization 
ieee transaction computers october 
de bakker huizing de roever rozenberg editors 
real time theory practice volume lncs 
springer verlag 
hen hennessy 
timed process algebras tutorial 
technical report department computer science university sussex january 
halbwachs pilaud 
glory 
specifying programming verifying real time systems synchronous declarative language 
workshop automatic verification methods finite state systems grenoble france june 
springer lncs 
hr hennessy regan 
process algebra timed systems 
computer science technical report department computer science university sussex april 
appear information computation 

abstraction real time process algebra 
de bakker pages 
lia chen liang 
interleaving model real time systems 
technical report ecs lfcs laboratory foundations computer science university edinburgh november 
mil robin milner 
complete inference system class regular behaviours 
computer system sciences june 
mil robin milner 
communication concurrency 
prentice hall 
mil robin milner 
complete axiomatisation observational congruence finite state behaviours 
information computation 
mt moller chris 
temporal calculus communicating systems 
baeten klop bk pages 
mt moller ch 

behavioural abstraction tccs 
kuich editor proc 
icalp pages 
springer lncs 
ns nicollin sifakis 
algebra timed processes atp theory application 
technical report rt imag grenoble france december 
ns nicollin sifakis 
atp timed graphs hybrid systems 
de bakker pages 
ns nicollin sifakis 
overview synthesis timed process algebras 
de bakker pages 
schneider davies jackson reed reed roscoe 
timed csp theory practice 
de bakker pages 
wan yi wang 
real time behaviour asynchronous agents 
baeten klop bk 
article processed macro package llncs style 
