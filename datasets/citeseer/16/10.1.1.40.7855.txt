category theory coherently constructive lattice theory working document roland backhouse marcel rik van jaap van der june contents basic definitions categories initial objects functors natural transformations examples categories discrete category opposite category category categories functor category sum category elementary illustrations initial functor yoneda lemma lattice theory evaluation functor hom functors generalised lemma corollaries adjunctions galois connections examples elimination rules pointwise ordering functions properties suprema parameterised suprema definition properties category theory june ii sharp flat limits colimits parameterised colimits colimit preservation existence adjoints algebras definition properties initial algebras initial algebra functor map operator fixed point calculus fusion rule abstraction theorem beautiful theorem rolling rule square theorem exchange rule diagonal rule half half mutual recursion monads monads adjunctions basic adjunction lifted adjunction decomposition theorem applications lists preliminaries theorems category theory june chapter document programming 
type theory lattice theory category theory means programming 
document contains lots programs transforming datatype 
programs written conventional programming language language mathematics 
may document contains programs programming 
offer 
working document authors collate ongoing research available interested reading 
working document contains material subject ongoing revision 
document faint main purposes repository complete proofs properties included articles submitted conferences space constraints force omit proofs 
ultimately intention write document emphasise relevance programming accessible 
reported origins named author interest constructive type theory 
importance relevance constructive type theory program design argued shall reiterate arguments concluded follows relationship reported categorical accounts type structures just hinted 
discussed depth capable doing point time 
topic believe receive particular attention 
current document give particular attention categorical formulation type structure relationship constructive type theory 
category theoreticians view preordered set particular sort category arrow pair objects 
view concepts lattice theory instances concepts category theory shown table 
category theory june 
lattice theory instance concept category theory concept preorder category monotonic function functor pointwise ordering natural transformation functions functors supremum colimit initial galois connection adjunction prefix point algebra closure operator monad table lattice theory versus category theory alternative viewpoint advocated lambek lattice theory valuable source inspiration novel results category theory 
thesis document purposes advancing programming methodology category theory may profitably regarded coherently constructive lattice theory 
say arrows objects category may seen witnesses objects 
category theory constructive theory construct witnesses theory solely existence 
category theory coherently constructive theory relations witnesses existence commuting diagrams naturality properties 
adopting view category theory theory contribution programming methodology likened contribution constructive type theory viz 
emphasis program construction product manipulation types 
idea new 
apart lambek cited earlier scott clear progression lattice theory category theory smyth plotkin acknowledge known analogy partial orders categories basis generalisation solution fixed point equations construction initial fixed points 
textbook rydeheard burstall hand idea category theory constructive explicit theme link lattice theory 
pratt observed relationship curry howard isomorphism propositions types known focal point constructive type theory residuated lattices 
lattice theoretic properties studying organisation properties documented 
gained looking category theory way 
turns beneficial improving understanding category theory 
able explain category theory extension lattice theory basic difference remarked say preorder theory lattice theory 
point view computing science category sums products little relevance 
lattice theory source inspiration 
category theory june witnesses category theory understandable wider audience 
familiar publications category theory surprised contains diagrams 
don reject diagrams 
small problems illuminating save writing 
particular nodes diagram written normal calculations repeated times 
want avoid diagrams diagram doesn clear order arrows drawn construction correct 
furthermore diagram drawn particular category 
frequently deal category 
idea situations effectively diagrams 
contains large number detailed proofs 
done reasons 
authors limited experience category theory 
wanted verify minute details publication normally omitted 
second category theoreticians construction witnesses proof product relevant calculations existence needed 
knowledge elements isomorphic witnesses considered relevant 
interest construction programs witnesses relevant 
stating theorem tried separate specific details theorem putting name specifics 
oriented derivation categorical fixed point rules corresponding basic fixed point rules lattice theory abstraction theorem fusion rule rolling rule diagonal rule 
unavoidable preliminaries basic definitions category theory elementary properties explained point view important categorical concepts correspond lattice theoretical concepts 
content chapter immediately followed chapter substantial examples methodology deriving category theoretic results generalising lattice theory 
chapter notion algebra introduced corresponds lattice theory notion prefix point 
chapter important concepts category theory viz 
adjunction corresponds lattice theory galois connection 
chapter derive basic categorical fixed point rules 
chapter ll immediately derive categorical fixed point rule turns useful 
chapter categorical fixed point rules establish isomorphisms certain list structures time construct corresponding witnesses 
category theory june 
category theory june chapter basic definitions chapter summarise elementary notions category theory category functor natural transformation 
emphasise viewpoint category constructive preorder witnesses orderings coherent 
chapter presents substantial illustrations viewpoint 
definitions taken notational adaptations 
categories definition category notions graph deductive system 
graph consists classes class arrows class objects mappings class arrows class objects called codomain domain mappings 
codomain domain mappings denoted cod dom respectively 
denote collection arrows synonymous cod dom say deductive system graph object associated arrow id codomain domain equal id pair arrows associated arrow ffi codomain domain ffi arrow id called identity arrow ffi called composition category deductive system equations hold arrows id ffi ffi id ffi ffi ffi ffi category theory june 
basic definitions notation denote object category graph said small classes objects arrows sets locally small pair objects class arrows set 
similarly talk small deductive system small category case underlying graph small 
note membership symbol definitions taken imply consider small categories 
rule stated solely terms domain codomain mappings 
specifically dom cod cod ffi cod dom ffi dom refer elementary rules domain codomain mappings domain calculus 
case category defined terms 
example category define objects category subclass arrows category arrows arrows arrows prevent confusion mention explicitly category arrow belongs 
example arrows denote arrow general expression may clear category working ll tag expression way intended category 
objects category said isomorphic arrows ffi id ffi id inverses 
case write want explicit arrows write say equal isomorphism 
notion denote inverse arrow result write means isomorphic exists arrow inverse 
transitive ffi suppose define relation objects deductive system reflexive transitive 
objects small deductive system form preordered set relation 
borrowing jargon constructive type theory read witnesses ordering 
sense category theory constructive theory construct witnesses theory existence witnesses 
axioms category say witnesses coherent 
consider identity axiom requirement id ffi ffi id assuming category theory june 
initial objects ways concluding immediately arguing www reflexivity assumption transitivity arguing assumption reflexivity transitivity augment arguments construction witnesses ordering obtain id ffi ffi id identity axiom says 
similar argument applies associativity axiom requirement ffi ffi ffi ffi specifically yw different ways combine orderings ordering may combine transitivity obtain combine yw may combining yw obtain xw combine augment arguments construction witnesses ordering obtain ffi ffi ffi ffi respectively 
definition category decomposed parts graph deductive system category 
understanding category theory concepts theory admit decomposition underlying category theory concept concept lattice theory added constructive element mechanism building witnesses orderings construction witnesses required coherent 
general coherence requirements state order basic rules category theory applied effect obtained witnesses 
initial objects simplest illustration coherently constructive nature category theory notion initial object category 
initial object category object object category unique arrow corresponding concept lattice theory element 
constructive element definition initial object exists arrow object object category 
coherence requirement uniqueness arrows 
malcolm fokkinga denote unique arrow category object initial object initial arrows objects drop parameter remainder section elementary properties theorems concerning initial objects 
section presents substantial example 
elementary consequences definition initial object 
initial object 
instantiating id obtain id second fusion theorem 
give theorem name gives conditions arrow fused arrow initial object 
category theory june 
basic definitions alternatively read right left transformation theorem seen rule arrow initial object arrows 
theorem initial object arbitrary objects category 
furthermore suppose ffi proof ffi ffi composition third partially ordered set pre ordered set ordering anti symmetric elements unique 
category initial objects unique isomorphism 
theorem initial objects category isomorphic 
proof left easy exercise reader 
taken liberty calling theorems relative importance 
theorem forms basis number program transformation rules enabling programs efficient 
rules ones loop fusion state repetitions loops combined fused 
word fusion precedent 
proofs theorems trivial hard applying done 
importance conceptual 
emphasise importance identifying mathematical notions initial objects suitable categories 
functors concept monotonic function lattice theory captured category theory concept functor 
definition functor categories called covariant functor maps objects objects arrows arrows way objects category theory june 
functors furthermore satisfy coherence requirements 
arrows dom cod ffi ffi object id id coherence requirements functors reflect fact proofs properties wf wf monotonic function 
anti monotonic function lattice theory corresponds contravariant functor 
definition contravariant functor categories called contravariant functor maps objects objects arrows arrows objects note reversal furthermore satisfy coherence requirements 
arrows dom cod ffi ffi object id id note reversal category id denotes identity functor maps objects arrows 
subscript omitted 
category theory june 
basic definitions natural transformations natural transformation functors category theory corresponds pointwise ordering monotonic functions 
specifically lattice theory pointwise ordering monotonic functions defined monotonic functions category theory similar definition usual category theory extra coherence requirement 
definition natural transformation categories functors natural transformation family arrows object arrow ffi ffi coherence requirement arises fact arrow constructed different ways 
shown diagram provides useful way remembering requirement 
note arrows diagram point right left bottom top 
facilitates reading coherence requirement just remember read left right top bottom normal way 
examples categories discrete category trivial examples categories discrete categories 
discrete category category arrows identity arrows 
formally discrete category objects arrows id category theory june 
examples categories discrete categories finite number objects denoted number objects bold font 
example denotes discrete category objects discrete category exactly objects 
trivial may discrete categories particular called shape categories 
exercise simplify definition functor case domain category suppose functors type mean ff natural transformation opposite category category called opposite category op category class objects class arrows codomain domain turned 
arrow op arrow existence opposite category don give special treatment contravariant functors separately covariant functors 
specifically contravariant functor viewed covariant functor replacing codomain op domain op initial object category unique arrow object category opposite category op unique arrow object category op object called terminal object 
category categories having introduced concept small category talk category small categories denoted cat objects cat small categories arrows cat functors 
notation previously introduced arrows denote functor category category 
notation non small categories 
composition functors denoted ffl note cat small category just way set containing sets 
functor category pre ordered sets set monotonic functions forms pre ordered set pointwise ordering functions 
correspondingly categories 
fun constructed follows category 
objects functors arrows natural transformations 
notation category theory june 
basic definitions previously introduced arrows denote natural transformation composition arrows defined ffi ffi 
identity arrows identity transformations 
id ffl defined id ffl id 
category endofunctors fun denoted note functors arrows category cat objects category fun write meaning arrow category cat codomain domain write fun meaning object functor category 
meanings boil thing case emphasis fact functor arrow second case object 
may confusing gets idea 
monotonic function pre ordered set construct monotonic functions ffl ffl monotonic functions monotonic functions 
defined ffl ffl ffl ffl ffl denotes function composition 
similarly functor category construct ffl fun fun ffl fun fun functors functor category functor category 
definition ffl follows 
functor fun ffl ffl application ffl natural transformation fun denoted ffl defined pointwise ffl object similarly functor fun ffl ffl application ffl natural transformation fun denoted ffl defined pointwise ffl object leave verification coherence requirements needed prove defined functors exercise 
having introduced functors ffl ffl kinds coherence properties relating natural transformations ffl ffl commonly referred rules 
proof state 
suppose functors natural transformations type 
ffl id id ffl category theory june 
examples categories ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffi ffl ffi ffl ffi ffl ffl ffi ffl suppose composed form natural transformation denoted type ffl ffl called vertical composition 
specifically ffl ffi ffl ffl ffi ffl different equal ways defining vertical composition expressed equality terms commonly known interchange law functors natural transformations 
define ffl ffl ffl functors functors ffl ffl ffl ffl ffi ffl ffl ffi ffl ffl natural transformation 
specifically ffl ffl ffl furthermore ffi ffl ffl ffi ffl id ffl ffl id ffl ffl words function mapping ffl ffl functor category fun fun fun category fun similarly define ffl ffl ffl functors function mapping ffl ffl functor category fun fun fun category fun sum category suppose category cat category object functor arrow define sum category sigma way 
objects pairs 
objects elements collections objects accompanied tag indicating collection drawn 
arrows pairs satisfying sigma category theory june 
basic definitions identity arrow object id id composition arrows defined ffi ffi ffi case contravariant functor functor type cat op define sigma objects pairs arrows pairs satisfying sigma identity arrow object id id composition arrows defined ffi ffi ffi contravariant functor construction called grothendieck construction 
functor called indexed category sigma notation desired category explicit 
exercise definition composition arrows sigma simplifies considerably category discrete category 
simplification 
suppose discrete category objects 
suppose cat usual write sigma apply definition sigma case determine objects arrows 
exercise construction sum category sigma maps functors categories 
question immediately arises definition sigma extended map natural transformations arrows functor category cat functors arrows category cat way functor 
done 
exercise tedious involves careful unfolding definitions 
worthwhile working details order gain familiarity various definitions 
order derive educational benefit tedium details 
define natural transformation ff suppose ff functor arrow cat type sigma sigma task define application objects arrows category sigma guided type requirements define objects ff verify meets requirement sigma 
need fact ff functor 
definition functor 
guided type requirements define arrows ff verify meets requirement sigma 
need fact ff natural transformation 
verify addition preserves identities distributes composition 
category theory june 
examples categories important category category algebras treated chapter 
category theory june 
basic definitions category theory june chapter elementary illustrations chapter elementary illustrations methodology deriving categorical results generalising lattice theoretic results 
second yoneda lemma view transformed way relatively difficult proposition straightforward tedious 
initial functor section relatively straightforward substantial illustration constructive nature category theory 
lemma prove combines notion sum category notion initial object illustration categorical concepts se 
useful 
statement lemma lattice theory 
suppose poset fx xg set sets suppose set element antimonotonic function xy function monotonic 
proof elementary 
obtain categorical version fact replace poset category antimonotonic function contravariant functor indexed set sets fx xg sigmas initial monotonic function covariant functor 
get lemma suppose category cat contravariant functor 
suppose category initial object functor init sigmas state lemma simultaneously provide details 
case postpone giving details functor init want illustrate definition constructed provide details immediately suggest guess definition verify guess correct case 
category theory june 
elementary illustrations referring definition functor definition define init objects arrows case object define init obvious way satisfy requirement init sigmas arrows requirement init functor init init sigmas init arrows sigmas definition pairs postulate init ff fi calculate suitable definitions ff fi follows ff fi init sigmas init definition arrow sigmas definition init init ff fi ff ffl ff fi initial fi unique way satisfying type requirement init letting init verify init maps identity arrows identity arrows distributing composition arrows 
brevity denote second component init verification identity arrows mapped identity arrows 
init id id init definition init definition identity arrows sigmas id id id id pair forming id id initiality id id id category theory june 
yoneda lemma id id construction true prove init distributes composition 
suppose init ffi init ffi init definition ffi ffi ffi definition composition sigmas ffi ffi ffi ffi pair forming ffi ffi initiality terms domain cod ffi cod ffi construction cod ffi cod ffi cod contravariant functor covariant functor ffl cod cod true completes proof 
yoneda lemma section illustrate idea category theory coherently constructive lattice theory showing formulate prove yoneda lemma 
lattice theory monotonic predicate mean predicate lattice theory lemma 
category theory june 
elementary illustrations lemma suppose monotonic predicate arbitrary element domain lemma simple doesn name 
corollaries rule call indirect equality rule equally simple deserves name ubiquity 
corollary indirect equality arbitrary elements proof instantiate lemma noting monotonic 
result follows interchanged anti symmetry 
formulate prove lemma similar categorical framework 
observation 
suppose denote function domain domain clear context 
extensionality times rewrite equality monotonic monotonic note predicates equality monotonic functions 
predicate evaluation function restricted monotonic predicates 
function denoted infix dot 
refrained writing just dot lefthand side equation probably confuse great readers 
monotonic argument definition respect pointwise ordering predicates qj monotonic argument virtue simple calculation monotonic monotonic definition pointwise ordering monotonic definition monotonic predicate familiar lambda notation written fx freedom include domain information useful device particularly restricting domain function 
category theory june 
yoneda lemma similarly functions monotonic 
urge write trivial verifications 
help shortly understand categorical equivalents 
order lift category theory replace equality isomorphism monotonic function functor predicate functor set locally small category addition define functorial counterparts monotonic functions just discussed 
evaluation functor evaluation function 
define evaluation functor locally small category map set object set object obvious candidate 
map arrow natural transformation fun set arrow set binary functor means constructively monotonic arguments 
objects arrow functors set natural transformation fun set construct arrow set words satisfy compare requirement monotonicity evaluation function wg compare proof assuming monotonic proof left reader construction functor 
ffl ff ffi ff definition natural transformation ff ffi satisfies requirement 
alternative step calculation fact functor 
leads defining ffi coherence property natural transformations guarantees choice irrelevant 
verify coherence requirement evaluation functor 
binary functor check ffi ffi ffi category theory june 
elementary illustrations natural transformations arrows 
note compositions different categories 
check id ffl id id set functors objects leave simple checks reader 
completes construction evaluation functor verification functor 
order maintain suggestive link lattice theory shall denote fun set commonly general introduce quantified expressions indicated square brackets dummies range objects arrows relevant categories 
case ranges objects arrows functor category fun set ranges objects arrows category final thing note evaluation functor structure category set just arbitrary category 
hom functors generalised define functors corresponding functions pays define general functor instances 
suppose arbitrary monotonic predicates necessarily domain 
predicate monotonic anti monotonic lift observation statement category theory 
suppose arbitrary functors 
consider function mapping set arrows category 
function extended binary functor covariant argument contravariant argument codomain functor category set 
domain cartesian product category opposite category arrows define ffi ffi straightforwardly note switch order unlabelled arrow right denotes class arrows category set 
function 
id id ffl ffi ffi convenience assume category locally small 
arrows pair objects form set 
shall see avoided 
category theory june 
yoneda lemma suitable type 
note switch order defined functor 
denote functor square brackets indicating abstraction dummies instantiated identity functor category functor obtain maps pair objects set arrows set called hom set hom short homomorphism functor called hom functor 
category theoreticians recognize functor composition hom functor common codomains product functors opposite lemma binary functor construct unary functor fixing arguments 
binary functor instances covariant functor defined arrow id ffi contravariant functor defined arrow id ffi bits pieces needed formulate categorical counterpart lemma lemma commonly referred yoneda lemma 
lemma yoneda lemma suppose locally small 
fun set fun set proof yoneda lemma required construct witnesses constructing candidates natural transformations candidate suppose arbitrary object observe set function define id candidate observe set category theory june 
elementary illustrations take object fun set natural transformation 
objects arrows set ffi ffi ffi function define remains verify naturality property take ffi definition composition functor ffi definition ffi derived candidates inverses prove inverses 
definition id definition id functor id second definition id ffi ffi ffi category theory june 
yoneda lemma naturality prove naturality property ffi ffi note set function defined ffi ffi ffi ffi application definition id ffi ffi ffi ffi particular id ffi id definition composition ffi naturality follows extensionality 
verify naturality property unnecessary proof yoneda lemma complete lemma 
lemma natural isomorphism functors ffi ffi category theory june 
elementary illustrations proof lemma follows immediately definition isomorphism natural transformation 
remarkable thing part assumed naturality holds follows calculation 
ffi ffi ffi id ffi id leibniz directions ffi ffi ffi ffi ffi ffi ffi id ffi id ffi ffi corollaries just indirect equality direct consequence lemma rule indirect isomorphism direct consequence yoneda lemma lemma indirect isomorphism suppose objects locally small category proof lemma dummy renaming natural isomorphism arbitrary object similarly derive isomorphism arbitrary object ae witnesses defined proof lemma 
part assume ae prove ffi ae id composition reverse order completely symmetric category theory june 
yoneda lemma ffi ae definition id id ffi id ffi ffi ffi ffi ffi ffi id ffi id id part assume reasons symmetry prove ffi id suppose ffi definition ffi ffi definition ffi ffi ffi id concludes proof 
clear example progression lattice theory category theory causes explosion lengths calculations 
hope demonstrated process systematic 
construction witnesses add lengths proofs add extra detail 
verification coherence properties additional burden fact functor introduced define objects arrows 
time coherence properties give theorem category theory added value 
tremendous amount detail needs borne mind view effort organising streamlining proofs lattice theory essential prerequisite tackling non trivial problems category theory 
subsequent chapters novel theorems discovered way probably able discover 
category theory june 
elementary illustrations category theory june chapter adjunctions concept galois connection lattice theory captured category theory concept adjunction 
giving definition adjunction give definition galois connection show elementary examples properties 
lattice theory alternative equivalent definitions galois connection 
show give alternative equivalent definitions adjunction 
sections prove properties concerning adjunctions 
galois connections combination partially ordered sets functions forms galois connection formula holds xw function called lower adjoint function called upper adjoint 
concept galois connection supposedly known see known reader simple elegant concept difficulty experienced verifying properties state proof 
concept introduced ore definition due schmidt 
importance galois connections lies ubiquity simplicity 
mathematics particular computing science abounds instances galois connections rarely recognised 
elementary examples section 
concept known may skip section 
spite name galois connections invented famous mathematician galois instance galois connection galois correspondence groups extension fields galois owes fame 
shall say galois correspondence attention devoted connections functions broader setting 
wishing know galois correspondence referred 
category theory june 
adjunctions examples lots examples galois connections instance observing inverse functions galois connected 
suppose sets inverse functions 
inverse expressed equivalence galois connection view ordered sets ordering relation identical equality relation 
elements ordered equal 
example doubt familiar connection exponential logarithmic functions ln simpler example negation arithmetic negation self inverse galois connected 
just slightly complex connection addition subtraction formula states function add inverse function subtract 
describes family galois connected functions elements family indexed inverse functions galois connected useful observation study galois connections tell didn know inverse functions draw inspiration existing knowledge properties inverse functions guide study galois connected functions 
golden rule galois connections discussed discovered precisely way 
examples galois connections hard find immediately evident 
connection conjunction implication predicate calculus pq denote predicates connection functions 
precise sets definition galois connection taken set predicates ordering relation implication 
formula describes family galois connections instance variable interesting example provided negation predicate calculus 
category theory june 
galois connections example interesting involves different orderings set 
specifically order predicates implication converse ordering follows 
predicates ordered implication predicates ordered quite different partially ordered sets 
point elements definition galois connection ordered sets functions ordered sets 
elements form integral part definition mistakes exploitation properties galois connections may occur clear 
reinforce point return addition subtraction real arithmetic 
identity identities express different families galois connections 
involve functions functions endofunctions real numbers ordered equality second ordering usual relation 
elementary example galois connection immediately evident afforded binary maximum operator real numbers 
denoting infix operator max sight doesn look galois connection principally account conjunction righthand side equation 
identify follows 
note max binary function function cartesian product ir set pairs real numbers set ir ir ordered relation relation extended pointwise ordering relation ir specifically denoting relation theta define theta ux define doubling function denoted having done rewrite definition max follows max theta max function mapping ir ordered pointwise relation theta ir ordered relation defined galois connection connecting doubling function 
texts define maximum case analysis beautifully compact definition little known 
shame 
category theory june 
adjunctions elimination rules equivalent definitions notion galois connection 
far examples schmidt definition 
gentzen sequent calculus defines logic operators called elimination rules 
section show example rules define galois connection albeit form proposed schmidt 
disjunction example 
rules pq pq gentzen turnstile implication operator 
subtleties ignored discussion 
elimination rule disjunction difficult see rules equivalent rule pq general combination partially ordered sets functions forms galois connection xw cancellation law xw monotonic 
see form taken gentzen rules rewrite elimination rule way maximum 
doing identify doubling function disjunction theta check required cancellation law corresponds rules 
formally theta pq conjunction pq pq obvious doubling function monotonic 
category theory june 
galois connections gentzen laws existential quantification generalise laws binary disjunction 
predicate defined state space defined elimination rule combined rule introduce lifted ordering predicates specifically introduce denote constant function mapping proposition predicates specifically predicate aid definitions elimination rule existential quantification rule noting monotonic function recognise galois connection 
pointwise ordering functions suppose partially ordered set 
set carrier reflexive transitive anti symmetric ordering relation elements carrier 
partially ordered set abbreviated poset 
fact assumption preorder suffices fits better discussion generalisation category theory 
introduce additional complications prefer postpone 
suppose poset 
function monotonic write case 
shall restrict attention monotonic functions specific cases unnecessary 
trivial vital observations identity function set monotonic composition monotonic functions monotonic 
functions type ordered pointwise 
specifically define relation carrier set easily verified partially ordered set 
useful strategy borrowed category theory study posets lift statements orderings elements statements orderings functions 
shall adopt strategy frequently sequel 
example formulation monotonicity function terms purely functions function composition category theory june 
adjunctions function application 
specifically denoting composition functions infix operator ffl monotonic gw ffl ffl letting ffl denote function 
ffl express strikingly monotonic ffl monotonic letting ffl denote function ffl ffl monotonic subscripting symbol type functions involved indicate pointwise ordering functions symbol point serving remind reader ordering pointwise 
disadvantage symbol different ordering relations rule ordering intended ambiguous 
properties galois connections interesting soon recognise immediately deduce number useful properties adjoints 
instantiate way side true obtain cancellation properties 
point free properties expressed follows ffl id id ffl id denotes identity function 
furthermore cancellation properties straightforward prove monotonic 
properties galois connection give rise alternative definition galois connection equivalent previous formulation 
galois connection iff clauses hold ffl wf ffl monotonic 
stating definition galois connection terms points useful restate terms functions 
specifically combination posets functions forms galois connection functions appropriate type wf ffl ffl category theory june 
galois connections way expressing equivalence forms galois connection ffl ffl forms galois connection functions inverses galois connected 
suppose inverse functions domain domain poset orderings needed establish connection trivial orderings ordered elements equal elements 
observation significance whatsoever study inverse functions gained study instantiating general theorems galois connections predicted simpler direct calculations fact composition function followed identity function 
main benefit gained observation suggest properties investigate galois connected functions 
important example inverse functions inverse algebraic properties 
exponential function instance inverse logarithmic function exp exp ln ln exp exp delta exp ln ln ln delta general inverse functions functions appropriate type generally expressed function level pairs inverse functions functions appropriate type ffl ffl ffl ffl generalisation galois connections takes form 
suppose combination posets functions forms galois connection 
arbitrary monotonic functions 
ffl ffl ffl ffl subscripts omitted ordering relations inferred type information 
category theory june 
adjunctions useful aide property suggest slogan galois connected functions pseudo inverse algebraic properties 
property widely known soon learnt particularly useful captures rule calculational properties galois connected functions 
subsuming includes special cases instantiating identity function respectively obtain forms galois connection ffl ffl forms galois connection fact equivalence proved 
take care note switch order rule states upper adjoint ffl lower adjoint ffl second instantiating identity function note time switch order subscripts 
adjoints uniquely defined 
suprema defining galois connection suppose posets monotonic function 
supremum solution equation aw readers may familiar definition supremum upper bound 
supremum upper bound xw upper bounds aw entirely equivalent easily verified 
easily seen solutions equal 
specifically solves aw solves category theory june 
galois connections indirect equality solve equation need course solution 
denote solution sup definition fj aw suppose fix posets consider functions type suppose function sup mapping functions supremum 
recognise galois connection 
specifically aw define function definition pointwise ordering functions supposition function sup lower adjoint called constant combinator type poset called shape poset existence galois connection posets put words saying cocomplete 
cocomplete posets say cocomplete 
dual suprema may define infima leading dual notion completeness completeness cocompleteness posets equivalent reason redundant 
retain order emphasise link category theory examples point set ordered equality set functions correspondence pairs elements precise 
function corresponds pair ordering relation functions corresponds elementwise ordering pairs functions correspond 
writing sup galois connection corresponds category theory june 
adjunctions known galois connection defining supremum bag elements 
empty poset exactly function type identity function empty function thing 
right side vacuously true words poset cocomplete element 
third example case natural numbers ordered usual way 
functions correspondence chains say cocomplete equivalent chains having supremum parameterised suprema suppose wa posets suppose cocomplete 
motivated strategy lifting statements points statements functions naturally led question poset cocomplete 
answer question answering question 
consider function phi brevity denote application phi arguments phic assume function phic defined phic phic supremum denoted sup phic note phic function type existence sup phic implied cocompleteness question information sufficient guarantee phi supremum 
express question formally need refine notation order avoid ambiguity 
wrote write ka ka function type defined ka assumption element sup phic satisfying wa sup phic ka phic goal solve equation ka phi obvious candidate function sup phic function monotonic composition monotonic functions function sup monotonic adjoints galois connection inevitably monotonic function phi defined phi phic satisfies straightforward calculation 
order show benefit exploiting 
category theory june 
galois connections sup phic see definition phi extensionality sup ffl phi sup upper adjoint ka assumption sup ffl upper adjoint ka ffl ka ffl phi try express ka ffl terms ka ffl definition definition defining function flip flip ka ffl flip flip phi flip clearly order isomorphism phi flip phi ka phi verified sup phic sup phi element sup phic called parameterised supremum theorem just proved call abstraction theorem suprema 
words says result abstracting parameter parameterised supremum supremum 
existence supremum phic implied cocompleteness direct corollary cocomplete cocomplete independently 
particular complete complete 
example parameterised supremum binary supremum operator definition thetaa define phi phi phi definition ta sup phic applying abstraction theorem sup phi category theory june 
adjunctions category theoreticians recognise special case theorem page mac lane classic text concerning parameterised limits 
fact sup phi general abstraction theorem suprema significant 
corresponding limit theorem category theory 
proof just particular easily adapted attractive alternative mac lane proof shall demonstrate section 
definition category theoretic concept corresponding notion galois connection adjunction 
large number equivalent definitions adjunction 
give particularly suited goal 
recall defining equation galois connection functions appropriate types xw extensionality rewrite universally quantified proposition equation functions 
specifically xw extensionality xw form galois connection function mapping pair equal function mapping pair replacing function functor generalise form definition category theory 
suppose functors type respectively 
id id functors type 
recall definition functors section isomorphic said adjoint functors 
writing id id definition 
definition adjunction suppose functors adjunction functor called lower adjoint functor called upper adjoint 
spell details definition 
expanding definition natural isomorphism get natural transformations category theory june 
definition inverses db ce id bd ec id natural transformations called upper lower respectively 
expanding definition natural transformation get ffi ffi similar result derived natural transformation 
functions pair 
defined discrete category functors 
extensionality definition functor give alternative definition adjunction 
theorem form adjunction natural transformations satisfying bfc furthermore suppose equalities hold 
ffi ffi dg ffi ffi ge dually ffi bhc ffi bf ffi ffi gc equivalence bfc hold 
usually omit subscripts lower upper 
category theory june 
adjunctions example section argued elimination rules existential quantification amounted galois connection 
categorical generalisation galois connection adjunction sum functor sigma discussed section constant functor discrete category suppose discrete category 
id suppose cat cat sigma note discrete category composition arrows sigma componentwise 
define bfc fun cat require bfc cat bfc ffl bfc trivially satisfied assumption discrete category 
property expands bfc bfc bfc bfc bfc id id bfc ffi bfc ffi bfc satisfy define bfc satisfy define bfc id property bfc id definition id id id id id id definition id category theory june 
definition property easily verified bfc ffi definition id ffi composition sigma componentwise discrete category id ffi id functor id ffi id definition bfc ffi bfc suppose ff fun cat construct cat sigma ffi ffi recalling discrete category requirements satisfied defining ff id ff remains verify properties theorem 
leave verification reader 
refer exercise complete definition functor sigma exercise simplest examples discrete categories discrete categories containing exactly elements respectively 
details example cases 
particular give interpretation lower upper 
elementary consequences galois connection cancellation properties 
adjunction similar result derived 
construction ff calculate follows category theory june 
adjunctions ff ffl id definition natural transformation ff ffi ff ff ffi ffl ff bid ffi bid bid ffi true category theory natural transformation ff commonly known unit adjunction 
immediate consequence adjunction natural transformation unit unit ffl id unit bid dually natural transformation counit known unit adjunction counit id ffl counit corresponding lattice theory give alternative definition adjunction unit unit 
theorem form adjunction natural transformations unit counit unit ffl id counit id ffl coherence requirements satisfied counit ffl ffi ffl unit id ffl ffl counit ffi unit ffl id ffl proof construct lower upper 
assumption construct lower follows ff ffl ff fi ffi unit fi functor fi category theory june 
definition ffi unit dually counit ffi gives candidates pointwise definition lower upper respectively 
verification coherence requirements goes follows 
give verifications similar 
ffi ffi unit ffi unit ffl id ffi ffi ffi unit dom functor ffi ffi ffi unit dom ffi unit leibniz counit ffi ffi unit counit ffi functor counit ffi ffi unit counit ffi counit id ffl ffi counit ffi unit counit ffi counit ffl ffi ffl unit id ffl counit ffi shown lower upper construct unit unit vice versa 
adjunction determine lower upper uniquely unit unit 
constructions show take lower upper unit unit way properties hold bfc ffi unit counit ffi ll rest chapter property 
category theory june 
adjunctions proof valuable property proven 
specifically ffi unit counit ffi property equivalent coherence requirements stipulated theorem 
specifically coherence requirements give rise property shown proof 
way instantiating counit id obtain counit ffi unit id extensionality obtain coherence requirements 
derived similar way 
third alternative definition adjunction theorem form adjunction natural transformations unit counit unit ffl id counit id ffl coherence requirement satisfied arrows ffi unit counit ffi monotonic function corresponds covariant functor 
anti monotonic function corresponds contravariant functor 
covariant functors give rise covariant adjunction 
contravariant functors give rise contravariant adjunction 
definition contravariant adjunction contravariant functors form contravariant adjunction mappings bfc ffi ffi dg ffi ffi ge ffi bhc ffi bf ffi ffi fc bfc category theory june 
properties remainder chapter notation 
adjunction denote unit unit unit counit upper lower df bg respectively 
introduced notation mean adjoint unimportant definition units 
parameters introduced remind reader adjunction belong 
notation computation rules df ge ffi unit counit ffi bg fc follow immediately 
confusion possible parameters omitted 
exercise partially ordered sets 
galois connection maps element element specifically elements respectively 

definition element 
inclusion argue follows 
galois connection line holds definition element 
mutual inclusion proven 
preserves elements 
generalising category theory propose exercise 
suppose functor lower adjoint adjunction 
show maps initial object initial object 
provide proof general theorem 
properties categories 
functor construct functor ffl fun fun lifting functors object functor level gives rise theorem 
theorem forms adjunction iff ffl ffl forms adjunction 
proof assume adjunction unit counit unit unit respectively construct unit unit adjunction ffl ffl unit construction goes follows category theory june 
adjunctions ff ffl ffl ffl id fun definition natural transformation ff ffl ffl ffl ffl ffi ff ff ffi ffl ff unit ffl ffl ffl ffi unit ffl unit ffl ffi vertical composition unit ffl id true define unit ffl dually counit ffl unit ffl unit ffl counit ffl counit ffl remains coherence requirements stated theorem proven extensionality 
counit ffl ffl ffl ffi ffl ffl unit ffl counit ffl ffl ffi ffl unit ffl definition ffl unit ffl counit ffl counit ffl ffl ffi ffl unit ffl rules counit ffl ffi ffl unit ffl coherence property adjunction id ffl ffl rules id ffl ffl verification second coherence requirement similar 
proof direction constant functor maps object constant functor defined objects id arrows maps arrow natural transformation objects defined left exercise reader 
bbg ffl cc ddf ffl ee adjunction ffl ffl type bbg ffl ffl ffl category theory june 
properties ddf ffl ee ffl ffl relationship adjunction adjunction ffl ffl easily constructed 
natural transformations defined bbg ffl bg ddf ffl ee df 
note bbg ffl ffl ffi unit ffl ddf ffl ee counit ffl ffi ffl rules derive functor bbg ffl ffl bbg ffl ffl lcc ddf ffl ee ffl ddf ffl ffl lee inverse functions inverse algebraic properties 
functions form galois connection pseudo inverse algebraic properties 
expressed theorem 
suppose wc wd partially ordered sets pairs functions form galois connection 
monotonic functions ffl wf ffl ffl wh ffl rule captures nutshell calculation properties galois connections 
corresponding theorem category theory adjoint functors constructively pseudo inverse algebraic properties 
theorem suppose categories pairs functors form adjunction 
functors bbg ffl ffl counit ffi ffl cc ffl ffl ffl ffl ddf ffl ffl ffi ffl unit ee ffl ffl ffl ffl note bbg ffl cc ddf ffl ee denote adjunction ffl ffl whilst counit unit denote counit unit respectively adjunction proof prove follows equivalences 
assume right hand side construct witness left hand side 
implications proven showing constructed witnesses inverses 
construction ff calculate follows ff ffl ffl ffl ffl adjunction ffl ff bbg ffl category theory june 
adjunctions fi ffl ffl ffl fi fl ffi ffi fl ffl ffl ffi ffl ffl ffl ffl rules fl ffl counit ffi ffl construction witness left hand side equivalence similar 
prove constructed witnesses inverses 
ddf ffl bbg ffl ffl counit ffi ffl cc ffl ffi ffl unit ee ddf ffl bbg ffl ffl counit ffi ffl cc ffl ee ffi ffl ffl unit bbg ffl cc ddf ffl ee inverses ffl counit ffi ffl ffl ffi ffl ffl unit rules ffl counit ffl ffi ffl ffl ffi ffl ffl unit vertical composition ffl ffl unit ffl id ffl counit ffl ffi ffl ffl unit ffi rules ffl counit ffl ffi ffl unit ffi coherence property adjunction ffl id ffl ffi identity sharp flat suppose categories 
section suppose mappings 
maps functor known upper adjoint canonical upper adjoint opposite 
maps functor known lower adjoint canonical lower adjoint assume furthermore relevant units adjunctions known 
final assumption inverse functions 
category theory june 
sharp flat theorem contravariant functors 
functors inverses 
proof objects maps functor upper adjoint fixed upper adjoint 
arrows 
suppose upper adjoints 
theorem take identity functor bbf ffl counit ffi ffl cc note reversal typing arrows 
arrows define bbf ffl counit ffi ffl cc remains verify coherence properties 
functors upper adjoint natural transformations 
ffi definition bbf ffl counit ffi ffl cc ffi bbg ffl counit ffi ffl cc bbf ffl counit ffi ffl ffi ffl bbg ffl counit ffi ffl cccc vertical composition bbg ffl counit ffi ffl cc bbf ffl counit ffi ffl bbg ffl counit ffi ffl cc ffi ffl cc bbf ffl counit ffi ffl ffi ffl cc definition ffi id ffl definition bbf ffl counit ffi id ffl ffl cc identity counit ddf ffl id ffl ee id ffl symmetrically functors lower adjoint arrow part defined ddg ffl ffl ffi unit ee category theory june 
adjunctions final part theorem inverses comprises statements inverses mappings functors inverses mappings natural transformations 
statement true assumption second statement immediate general fact constructions inverses 
theorem form contravariant adjunction 
proof functor upper adjoint apply furthermore functor lower adjoint apply lower upper adjunction want construct functors remains verify coherence requirements specified definition 
property verified 
statement functors inverses 
verify functor upper adjoint functor lower adjoint 
furthermore suppose oe natural transformations 
appropriate instantiation ffi ffi oe oe ffi ffi verification elementary ffi ffi oe inverses ffi ffi oe contravariant functor oe ffi ffi upper adjoint functor may unique jargon category theory unique isomorphism 
theorem assumptions theorem words adjoint functors unique isomorphism 
category theory june 
limits colimits proof suppose natural transformations composition order gives identity transformation 
defining ffi contravariant functor ffi inverse id way ffi identity transformation 
limits colimits category theoretic notion corresponding notion supremum colimit order define colimits need define diagonal functor place diagonal function straightforward 
categories define functor maps objects arrows arrow id left reader check define functor type particular coherence properties satisfied 
extend definition arrows category define natural transformation functor functor letting equal objects category left reader check define natural transformation 
fun functor functor category fun category suppose colimit solution equation dummies range objects functors defined minor variation definition functor introduced section 
specifically set arrows category set arrows category fun name diagonal functor mac lane 
mac lane uses symbol confusingly mac lane uses name diagonal functor symbol functor doubles argument justification presumably generalises 
functor defined general doubling functor introduced 
category theory june 
adjunctions function ffi mapping arrows arrows function ffi 
unfolding definition function ffi maps natural transformation natural transformation ffi object ffi ffi easy see colimits functor isomorphic 
suppose colimits functor colimit colimit follows law indirect isomorphism lemma category cocomplete iff diagonal functor fun lower adjoint 
cocomplete functor col fun col dummies range objects category objects category fun functors respectively 
dually limit solution equation example denote empty category 
functor category category consisting object say arrow identity arrow 
diagonal functor ka functor maps object suppose colimit functor satisfies ka object ka ka consists precisely arrow viz 
id precisely arrow initial object colimit initial object 
arguments obvious converse true 
example category theory june 
limits colimits parameterised colimits just lattice theory poset cocomplete cocomplete posets case category cocomplete functor category fun cocomplete categories mentioned earlier theorem 
alternative proof illustrate process transforming proofs lattice theory proofs category theory 
encouraged whilst reading suppose categories 
suppose phi brevity denote application phi arguments phic assume functor phic defined phic phic colimit denoted col phic note phic functor type existence col phic implied cocompleteness question information sufficient guarantee phi colimit 
need differentiate diagonal functors wrote write ka assumption object col phic satisfying col phic ka phic goal solve equation ka phi candidate obtained extending mapping col phic objects category functor 
easily done observe col phic coincides object part functor col ffl flip phi flip functor flips order arguments functor type form functor type 
flip phi functor phi type phic accordingly verify col ffl flip phi satisfies 
clearly satisfies conjunct composition functors types 
second conjunct col ffl flip phi col upper adjoint ka assumption 
col ffl upper adjoint ka ffl ka ffl flip phi ka ffl flip just lattice theory flip flip phi flip clearly isomorphism categories ka phi emerges clearly proof parameterised colimit theorem instance 
category theory june 
adjunctions mac lane proof theorem involves explicit construction witnesses isomorphism followed verification naturality properties 
equational proof includes construction witnesses mechanical byproduct 
specifically letting bb cc dd ee denote lower upper adjunction col ffl ka ffl dd ee flip phi ffl flip col ffl flip phi ka phi flip ffl bb cc flip phi ka phi col ffl flip phi compositions arise transitivity isomorphism subterms witnesses isomorphism steps proof 
standard example parameterised colimit coproduct functor 
category consisting exactly objects arrows identity arrows 
thetaa define phi objects phi phi arrows id phi id phi assuming cocomplete defines coproduct functor functor col ffl flip phi definition col phi applying abstraction theorem coproduct colimit functor phi just defined 
expanding definitions colimit adjunction find gives theorems free called wadler 
briefly lower adjunction defining col boils mapping arrows pair ffi inl ffi inr inl inr natural transformations upper boils mapping pairs arrows codomain arrow codomain common codomain domain coproduct domains property yields ffi inl ffi inr property yields conjunction ffi inl inl ffi ffi inr inr ffi simplifications needed reduce obtained compact form 
conjunctions arise equalities pairs 
boils ffi ffi ffi ffi ffi ffi category theory june 
limits colimits colimit preservation lower adjoint galois connection distributes universally suprema 
correspondingly theorem lower adjoints preserve colimits 
proof adjunction 
suppose colimit functor fun prove ka fun ffl colimit ffl upper adjoint note ffl ffl fun id id extensionality ffl ka ffl ka fun ffl ffl lower adjoint ka fun ffl theorem beautiful theorem applications 
particularly proud calculational proof theorem 
traditional style proof see 
showed initial object special instance colimit 
theorem immediately gives corollary corollary lower adjoints preserve initial objects 
lattice theory set minimal element minimal element infimum set 
category theory theorem resemblance property 
category theory june 
adjunctions theorem initial object category functor limit viz 
proof see mac lane 
existence adjoints definition cone category functor denote cone category objects pairs arrow objects defined follows ffi refer component pair carrier note lattice theory category corresponds set fx xw xg dually define cone category objects pairs lemma carrier initial object iff proof prove part 
suppose bid 
bid conjecture bid initial construct unique arrow ff object bid follows ff bid definition arrow ff ff ffi bid computation rule ffi ffi ffi ffi ff inverses ff category theory june 
existence adjoints part assume initial define mappings pointwise prove natural inverses 
initial definition arrow ffi define definition ffi functor ffi define ffi prove natural naturality follows automatically 
suppose 
ffi ffi ffi ffi application ffi bh ffi ffi ffi ffi ffi ffi functor true proof inverse functions 
suppose definition unique arrow ffi category theory june 
adjunctions completes proof 
immediate consequence lemma examples 
example ii implication suppose forms adjunction 
lemma carrier initial object take look proof see case forms adjunction bid corresponds unit adjunction applied forms adjunction unit initial example iii colimit functor satisfies lemma colimit carrier initial object category theorem functor lower adjoint iff object category initial object 
proof lemma object category initial object solution prove part suppose lower adjoint fix second argument carrier initial object part suppose ffi construct lower adjoint obvious candidate functor maps object ffi see defines lower adjoint need verify natural transformation natural define ffi ffi ffi ffi take ffi ffi ff ffi ff ff ffi category theory june 
existence adjoints ffi ffi ffi ffi verify naturality calculate follows ffi ffi definition ffi ffi ffi ffi ffi inverses ffi leave reader define arrows 
hint contravariant 
suppose functor 
define forgetful functor note limit corresponds lattice theory xw theorem functor lower adjoint preserves limits limit proof dual theorem gives upper adjoints preserves limits 
furthermore example ii know upper adjoint adjunction object category initial object theorem functor limit 
category theory june 
adjunctions category theory june chapter algebras notion category theory corresponds notion prefix point lattice theory known algebra 
definition properties monotonic element xw called prefix point category theory corresponds object necessarily unique arrow functor 
arrow deduce corresponding object cod leads definition 
definition algebra category endofunctor algebra arrow dom cod cod algebra case codomain referred carrier 
lattice theory prefix point contains prefix point containments 
prefix points second contains monotonicity follows containment wf result containment xw constructed different ways 
category theory containment prefix points captured construction arrows algebras 
algebras arrows certain objects underlying category called base category view algebras objects construct arrows algebras 
words construct category algebras 
definition category alg category endofunctor category alg defined follows 
objects alg algebras 
category theory june 
algebras arrows constructed arrows base category specifically suppose algebras 
arrows characterised equation alg cod cod ffi ffi note coherence condition ffi ffi follows fact arrow cod cod constructed different ways corresponds lattice theory different proofs xw discussed 
decoration alg omitted deduced context 
claim alg category proven course 
straightforward exercise fact known 
trivial element proof abundant fact identity arrows alg identity arrows base category 
precisely algebra id alg id cod id cod alg superscripts alg usually omitted 
result lemma algebras isomorphic algebra category carriers isomorphic underlying base category 
witnesses isomorphisms 
proof category endofunctor suppose isomorphic algebras 
arrows alg oe alg inverses ffi oe id alg oe ffi id alg arrows algebra category arrows base category 
specifically cod cod oe cod cod furthermore identity arrows algebra category identity arrows base category ffi oe id cod oe ffi id cod conclude oe witness isomorphism cod cod category wish emphasise isomorphism algebras relevant functor introduce infix operator denote isomorphism category alg write isomorphic algebras 
leave proof lemma simple exercise notation 
lemma category theory june 
definition properties oe ff fi oe ff ffi cod ff fi ffi cod fi partially ordered sets monotonic functions lattice theory easily shown maps prefix points prefix points provided ffl wh ffl monotonic wf ffl wh ffl transitivity wh denote set prefix points pre formally pre pre ffl wh ffl category theory corresponds existence functor alg alg similar conditions 
lemma functors suppose natural transformation ffl ffl define functor alg alg way ffi cod object alg 
arrow alg 
proof step prove maps algebras algebras 
functor ffl ffl ffi step prove maps arrows alg arrows alg precisely algebras arrow alg construct definition alg definition objects fact arrows algebra category arrows base category conjecture cod cod verify conjecture follows category theory june 
algebras ffi alg ffi definition arrow alg cod ffi cod ffi ffi ffi ffi ffi domains ffl ffl functor ffi ffi ffi ffi functor leibniz ffi ffi definition arrow alg alg ffi alg ffi alg verify coherence requirements functors 
id id object alg ffi ffi arrow alg 
easy verify fact identity arrows alg identity arrows base category 
follows immediately definition arrows assumption functor 
lemma corollaries prove useful 
proofs easily supplied 
corollary assumptions lemma ffi cod corollary functors 
functor alg ffl alg ffl alg ffl alg ffl alg ffl alg ffl specialising isomorphisms category theory june 
definition properties ffl ffl particular instance corollary obtained endofunctor identity functor 
deduce algebra algebra 
instantiate function identity function get pre pre wh words function maps function set prefix points antimonotonic 
note reversal orderings 
set prefix points pre corresponds category alg category theory gives rise theorem alg contravariant functor 
theorem functor alg category contravariant functor alg category endofunctors category categories alg cat proof definition alg defines alg omitting subscript object arrows natural transformations alg satisfy alg alg alg note reversal typing arrows alg arrow cat functor 
definition functor alg follows lemma 
specifically alg ffi cod object alg alg arrow alg remains check coherence requirements prove alg functorial 
trivial 
trivial lemma proves worth lemma algebra alg proof alg definition arrow alg cod cod ffi ffi definition algebra 
category theory june 
algebras trivial lemma confusing 
says object alg arrow alg confusion may occur consider functor alg applying functor clear applied object arrow 
initial algebras lattice theory notion prefix point monotonic translating concepts corresponding concepts category theory notion initial algebra endofunctor lattice theory denote prefix point function category theory usually denote initial algebra endofunctor muf codomain carrier denoted muf initial algebras equivalence obtained instantiating appropriately 
specifically endofunctor suppose algebra muf initial algebra 
alg muf alg muf announced time notation introduced omit parameter alg expressions form alg 
muf easy see alg intended category 
necessary avoid confusion write muf state consequences equivalence lemma 
lemma endofunctor suppose algebra muf initial algebra 
muf alg muf cod ffi ffi muf muf ffi muf muf ffi muf id muf id muf muf ffi muf muf alg typing base category known property right hand side follows replaced ffi ffi refer properties terms typing uep computation rule identity catamorphism fusion respectively 
uep short unique extension property 
category theory june 
initial algebras proof instantiating muf obtain property 
property follows writing definition arrow algebra category 
property follows immediately instantiating righthand side true 
property argue follows 
instantiating id muf muf obtain id muf muf muf equality id muf id follows earlier identity arrows algebra category identity arrows base category 
property proven follows ffi muf muf ffi muf alg muf alg theorem initial objects general 
initial algebras derive 
lemma endofunctors suppose muf initial algebra arbitrary algebra mug initial algebra 
suppose natural transformation muf ffi muf ffi mug ffi cod mug proof muf ffi muf ffi mug ffi cod mug muf ffi cod alg muf ffi muf alg muf true lattice theory prefix point fixed point 
category theory initial algebra fixed point sense category theory june 
algebras theorem muf initial algebra muf algebra isomorphic muf witnesses muf muf alg muf muf muf muf alg muf proof assume muf initial algebra 
corollary muf algebra 
lemma muf muf alg muf initiality muf muf muf muf alg muf suffices prove muf ffi muf muf id muf muf muf ffi muf id muf muf ffi muf muf id muf identity muf ffi muf muf muf muf fusion muf muf alg muf true muf muf ffi muf computation rule muf ffi muf muf functor muf ffi muf muf id muf functor id muf category theory june 
initial algebra functor completes proof 
theorem due lambek referred lambek lemma 
initial algebra functor lattice theory function monotonic sense fwg wg category theory constructively monotonic functorial 
section formulate prove theorem 
complication formulation wish assume endofunctors initial algebras 
known example power set functor initial algebra 
assumption endofunctors certain shape initial algebras 
assumed shape specified detail moment relevance discussion 
standard technique category theory postulate shape category say covariant functor category postulate functor canonical initial algebra mu carrier noting mu initial object category alg equals alg ffl functor alg ffl contravariant see immediately apply lemma 
obtain functor mu sigma alg ffl defined mu mu mu alg alg mu mu expanding definition functor alg arrows see theorem obtain lemma suppose covariant functor functor canonical initial algebra mu carrier functor mu sigma alg ffl defined mu mu mu alg mu ffi mu category theory june 
algebras name mu purely local current construction outside section 
explains explicit fact parameterised need sort carrier functor maps pair muf cod muf lemma car sigma alg ffl functor defined way 
objects car defined car cod arrows car defined car proof sigma alg ffl alg ffl alg ffl definition alg ffi cod alg ffl definition arrow alg codomain calculus cod cod definition car objects car car arrows define car coherence properties straightforward 
combining functors car mu functor theorem functor suppose covariant functor functor canonical initial algebra mu carrier functor defined alg mu ffi mu category theory june 
map operator map operator come important constructions computing science construction inductive types 
functor list example inductive type 
informally list defined considering binary functor phi phiy thetay fixing argument constructing initial thetay algebra abstracting section process precise 
assume phi thetad binary functor 
suppose objects endofunctor phi canonical initial algebra mu phi carrier phi going prove called map operator phi maps objects object phi functor 
theorem clearly instance theorem order instantiate formally need elementary lemmas 
proof left reader 
lemma phi functorial arguments 
words fixing arguments binary functor obtain unary functor 
object phi endofunctor obtained fixing argument phi suppose object phi defined phi phiy arrows defined phi id symmetrically phiy unary functor obtained fixing second argument phi lemma app functor definition objects app phi arrows app phi phi natural transformation defined phi proof lemma stated phi endofunctor arrow construction ff category theory june 
algebras ff app app ff phi phi phi phi functors definition natural transformation ff phi ffi ff ff ffi phi ffl ff lemma id phig ffi ffi id phig phi binary functor coherence requirement true coherence properties straightforward 
give main result theorem suppose phi thetad binary functor object functor phi initial algebra denoted mu phi map operator phi functor defined way phi phi phi phi mu phi ffi phi mu phi proof instantiate theorem functor app immediately derive computation rule phi ffi mu phi mu phi ffi phi phi introduce functor 
lemma functors 
phig functor phig phi objects phig phi arrows category theory june 
map operator rewrite phi ffi mu phi mu phi ffi id phi phi similarly phi phi give typing mu phi base category mu phi phi id phi phi words natural transformation phi id phi phi defined objects mu phi derive map fusion rule mu phi ffi phi ffi cod mu phi category theory june 
algebras category theory june chapter fixed point calculus chapter basic fixed point theorems theorems result combining basic theorems 
basic fixed point theorems respectively fusion rule abstraction theorem rolling rule diagonal rule 
fusion rule combines concept initial algebra concept adjunction abstraction theorem combines concept initial algebra concept parameterisation 
combining fusion rule abstraction theorem enables prove section beautiful theorem concerning limit properties fixed point constructions 
rolling rule generalises property commonly known category theoreticians lambek lemma initial algebras fixed points 
lattice theory generalises property prefix point monotonic function fixed point rolling rule elementary called important right extremely useful combination rules 
illustration combine rolling rule fusion rule section prove theorem exchange rule 
exchange rule called states lower adjoints may exchanged construction initial algebras 
basic fixed point rule diagonal rule captures basic principle decomposing construction initial algebra construction succession algebras 
lattice theory calculations concerning fixed points performed complete lattice 
knaster tarski theorem states monotonic function prefix point coincides fixed point 
chapter similar assumption categories working 
theorems form functors 
initial algebras ff fi 
functor initial algebra fl defined follows 
section state corresponding theorem lattice theory 
category corresponds pre ordered set state lattice theoretic theorem complete partially ordered set set reflexive transitive anti symmetric ordering 
presenting theorem pre ordered set introduces additional complications category theory june 
fixed point calculus prefer avoid 
fusion rule complete partially ordered sets suppose monotonic functions 
recall pre pre ffl wh ffl particular pre ffl wh ffl furthermore prefix point ffl wh ffl gives inspiration look similar result ordering equality 
assume lower adjoint upper adjoint instantiating get pre pre ffl wg ffl pseudo property ffl ffl ffl wg ffl ffl ffl form galois connection pre pre pre pre furthermore lower adjoints preserve elements proven theorem call fusion rule lower adjoint ffl ffl goal derive similar result category theory 
assumptions categories functors adjoint pair functors unit counit unit unit left right respectively 
assumed isomorphism swap ffl ffl swap recall theorem pair functors ffl ffl forms adjunction bb cc dd ee defined equation 
construct adjunction categories alg alg adjoint pair functors alg alg alg alg theorem natural transformation ffl ffl category theory june 
fusion rule precisely bbf ffl ffl counit ffi swap ffl cc re going information relate objects categories alg alg 
lemma defined way functor alg alg ffi swap cod alg arrow alg 
lemma applied construct definition result construction defined way functor alg alg ffi cod alg arrow alg 
verify defined previous way adjunction 
similarity suggests adjunction left right equal domains limited arrows alg alg respectively 
verify types correct alg alg alg alg symmetric verify 
suppose algebra algebra cod cod alg ffi alg definition domains ffi ffi ffi ffi bh counit ffi swap ffi ffi category theory june 
fixed point calculus bh ffi counit ffi swap ffi cc ffi gc leibniz ffi counit ffi swap ffi ffi swap ffl ffl functor ffi counit ffi ffi swap ffi counit counit ffi ffi ffi swap ffi swap isomorphism ffi ffi ffi swap definition alg ffi swap alg remaining coherence properties ffi ffi fl ffi ffi flc ffi ffi fl dk ffi ffi fle follow immediately assumption adjoint pair functors left right respectively 
summary proven theorem suppose categories 
functors adjunction 
assume isomorphism swap ffl ffl adjunction categories alg alg specifics unit counit denote unit unit denote left right adjunction respectively 
define equation bb cc dd ee equation 
functor alg alg defined ffi swap cod alg arrow alg category theory june 
fusion rule lower adjoint functor alg alg defined ffi cod alg arrow alg upper adjoint 
left adjunction defined arrows alg 
defined arrows definition correct arrow arrow base category right defined similarly 
corollary fusion rule functors isomorphism swap ffl ffl furthermore functor upper adjoint assumed alg initial object mug mug ffi swap initial object category alg initial algebra mug ffi swap consequence isomorphism base category specifics isomorphisms alg mug ffi swap arrow alg ffi mug mug inverse 
proof mug ffi swap initial object category alg follows immediately previous theorem fact lower adjoints map initial objects initial objects 
unique arrow mug ffi swap ff alg mug ffi swap theorem ffl ff mug definition fi ffi alg mug initiality mug alg fi ffi mug category theory june 
fixed point calculus arrows witnessing isomorphism follow initiality alg instantiating respectively 
abstraction theorem lattice theory abstraction theorem prefix points 
complete preordered sets monotonic function phi thetad monotonic binary function written infix operator 
element denote prefix point function phi phi monotonic function phi defined phi phig phi prefix point specifically phi phi justification name abstraction theorem comes observation 
expression phi take prefix point leads phi take prefix point leads phi 
equality says cases expression 
allow extensionality equality says define prefix point phi pointwise 
section translate theorem category theory 
assumptions 
categories functor phi thetad binary functor written infix operator 
assumed object initial object mu phi exists alg phi guided discussion task define phi fun fun functor 
objects phi maps functor functor phig defined lemma 
lemma phi fun fun functor phi phig functor natural transformation functor category fun natural transformation phi fun defined phi id phij 
category theory june 
abstraction theorem phi functor follows immediately observation phi phi ffl phi ffl map operator section 
show alg phi initial object assumption states alg phi constructing initial object theta alg phi way theta phi ffl carrier 
theorem showed initial objects category isomorphic theta isomorphic initial phi algebras 
lemma immediate consequence carrier theta phi ffl isomorphic functor category carriers initial phi algebras 
mu phi denote particular initial phi algebra conclude phi phi ffl construction initial phi algebra carrier phi ffl goes follows 
construct candidate theta phi ffl phi phi ffl composition theta phi ffl id phi phi ffl rules ffl theta ffl phi id phi phi mu phi candidate natural transformation theta defined theta mu phi object remains prove theta initial unique arrow phi algebra 
suppose phig phi algebra 
construct unique arrow theta construction ff ff alg phi theta arrow alg phi ffi phi ff ff ffi theta ff fun phi ffl extensionality definition natural transformation ffi id ff ffi theta ff phi ffi ff ff ffi phi category theory june 
fixed point calculus id phi ff definition theta ffi phi ff ff ffi theta ff cod cod theta ffi ff ff ffi phi definition natural transformation theta objects alg phi ff alg phi theta ffi ff ff ffi phi theta mu phi ff mu phi ffi ff ff ffi phi see verification ff mu phi able prove conjunct implies second conjunct proven natural transformation ff defined objects ff mu phi arrow theta construction steps equivalences verified uniqueness ff verification goes follows ffi mu phi mu phi ffi phi map fusion ffi mu phi ffi phi id mu phi fusion ffi phi id alg phi definition arrow alg phi arrow base category trivial ffi phi id ffi phi ffi phi id phi coherence property binary functor ffi phi ffi phig true conclude theta initial phi algebra 
category theory june 
abstraction theorem reached final part proof 
suppose mu phi denotes particular initial phi algebra 
theorem theta mu phi witnesses isomorphism theta mu phi theta alg phi mu phi follows assumed initiality mu phi ff mu phi alg phi theta defined ff mu phi mu phi object follows proof 
composition arrows order gives identity arrow follows assumed initiality mu phi proven initiality theta result uniqueness arrow mu phi theta lemma carriers theta mu phi isomorphic phi phi witnesses 
state theorem full 
theorem abstraction theorem categories functor phi thetad binary functor written infix operator 
assume object initial object mu phi exists alg phi phi denote functor 
phi type fun fun natural transformation theta defined pointwise theta mu phi initial phi algebra 
mu phi denotes particular initial phi algebra having codomain phi phi phi specifics isomorphisms theta mu phi carriers theta mu phi arrow phi phi natural transformation ff defined ff mu phi mu phi object inverse 
category theory june 
fixed point calculus beautiful theorem section combines abstraction theorem fusion theorem prove category theory theorem dubbed beautiful dijkstra scholten 
dijkstra scholten formulate beautiful theorem context predicate calculus 
terms lattice theory theorem stated follows 
suppose complete lattices suppose phi monotonic function 
denote prefix point phi phi consider function phi denote phi beautiful theorem phi enjoys type supremum preserving property enjoyed uncurried binary function phi precisely letting sup denote supremum phi sup sup phi ffl sup phi sup sup phig definition phig function mapping phi ffl denotes function composition 
proof theorem lattice theory straightforward combination abstraction fusion theorems lattice theory 
show done 
proof abstraction theorem designed get position fusion applicable 
phi ffl extensionality definition composition phi definition phi phi abstraction theorem phi phi sup sup phi ffl definition phi applied lhs calculation applied rhs sup phi sup phi fusion applicable sup lower adjoint extensionality sup phi sup sup phig proved phi sup sup phi ffl sup phi sup sup phig category theory june 
beautiful theorem beautiful theorem follows elementary calculus 
remarkable aspect proof whatsoever details galois connection defining suprema 
fact supremum operator lower adjoint galois connection needed 
section formulate prove categorical version theorem 
suppose categories suppose cocomplete 
col col denote colimit operators type fun fun respectively 
fact operators col lower adjoint adjunction categories fun suppose phi adopt notational conventions assumptions section 
assume functor phi initial object denoted mu phi codomain mu phi denoted phi phi denote functor action objects map phi precisely define phi car ffl mu ffl app see section definitions functors right side equation 
goal prove phi commutes col phi commutes col precise prove phi col col phi ffl col phig col phi col dummy ranges functors type dummy functors type consider premise 
eliminating quantification col ffl phi col phi ffl col suppose witnessing isomorphism fusion theorem fact col lower adjoint col mu phi ffi phi initial col phi algebra mu phi initial phi algebra 
abstraction theorem defined mu phi initial phi algebra 
phi col col phi ffl phi col definition codomain initial col phi algebra definition phi ffl cod cod col ffi phi col cod codomain calculus true category theory june 
fixed point calculus proved phi col col phi ffl col phig col phi col categorical beautiful theorem follows elementary calculus 
completeness course provide details witnesses constructed isomorphism 
details complicated entirely mechanical 
denote inverse denote lower upper counit counit adjunction col ka col phi algebra col cod ffi ka cod ffi unique arrow col ffi phi furthermore phi col car ffl mu ffl app col cod mu col phi mu col phi ffi mu col phi unique arrow phi col cod col ffi phi 
recall arrow algebras algebra category arrow carriers base category 
cod col ffi phi col cod cola phi ffl defining mu col phi ffi mu col phi phi col col phi ffl col ffl phi col phi ffl col important special instance beautiful theorem preserved process constructing initial algebras 
striking feature proof whatsoever structure adjunction defining colimits fact cocompleteness category equivalent existence adjunction structure colimit functor upper adjoint entered picture 
marked contrast proofs preservation details construction category cocones plays prominent role 
emphasises fundamental nature abstraction fusion theorems 
category theory june 
rolling rule rolling rule complete partially ordered sets monotonic functions called rolling rule lattice theory states ffl ffl section give corresponding theorem category theory 
categories functors 
suppose mu ffl initial ffl algebra 
show construct initial ffl algebra 
mu ffl ffl algebra assumption corollary conclude mu ffl ffl algebra 
candidate initial ffl algebra 
show unique arrow mu ffl ffl algebra 
prove existence arrow 
suppose ffl algebra 
construct arrow ff category alg ffl mu ffl follows 
ff alg ffl mu ffl lemma alg ffl constructive transitivity ffl ff ffi fi fi alg ffl mu ffl corollary ffl fi fl fl alg ffl mu ffl mu ffl initial ffl algebra fl mu ffl constructed arrow ffi mu ffl alg ffl mu ffl show constructed arrow unique 
suppose alg ffl mu ffl definition cod ffl ffi ffi mu ffl verify ff ff constructed 
key insight proof arrow mu ffl mu ffl mu ffl witnesses fact mu ffl mu ffl isomorphic ffl algebras see theorem 
know specifically construct mu ffl necessary exploit details construction 
category theory june 
fixed point calculus ff mu ffl ffi mu ffl id mu ffl id ffl ff ffi mu ffl ffi mu ffl ff ffi mu ffl see ffi mu ffl ffi ffi mu ffl functor mu ffl ffi mu ffl ffi mu ffl alg ffl mu ffl mu ffl mu ffl alg ffl mu ffl alg ffl mu ffl alg ffl mu ffl true concludes proof mu ffl initial ffl algebra 
suppose mu ffl initial ffl algebra 
theorem mu ffl mu ffl witnesses isomorphism mu ffl mu ffl mu ffl alg ffl mu ffl follows assumed initiality mu ffl mu ffl ffi mu ffl mu ffl mu ffl alg ffl mu ffl follows proof 
lemma isomorphism carriers ffl ffl witnesses isomorphism 
state theorem full 
theorem rolling rule categories functors 
suppose mu ffl initial ffl algebra 
mu ffl category theory june 
square theorem initial ffl algebra 
initial ffl algebra mu ffl mu ffl mu ffl consequence isomorphism base category ffl ffl specifics isomorphisms mu ffl mu ffl arrow ffl ffl mu ffl ffi mu ffl mu ffl inverse 
theorem stated proved 
square theorem suppose monotonic partially ordered set 
assume suppose ffl prefix point ffl prefix point ffl prefix point 
proof straightforward 
specifically suppose prefix point prefix point ffl shown elementary calculation xw transitivity xw monotonic xw prefix points form subset prefix points ffl ffl lower bound prefix points ffl lower bound prefix points follows prefix point prefix point rolling rule ffl ffl case 
section prove categorical version theorem 
theorem due freyd called iterated square theorem 
proof follows lines lattice theoretic argument particular exploiting rolling rule 
freyd rolling rule uses square theorem prove mutual recursion theorem derives rolling rule 
see discussion mutual recursion theorem 
category theory june 
fixed point calculus suppose endofunctor suppose ffl initial algebra mu ffl goal prove initial algebra 
suppose lattice theoretic proof step establish algebra ffl algebra 
case 
case carrier algebra carrier ffl algebra 
case functor mapping algebras ffl algebras 
proving property task 
suppose algebra carrier 
construct ffl algebra carrier follows ff ffl ff fi ffi fl fi fl functor ffl fl fi fi assumption fi conclude 
ffi mapping objects alg objects alg ffl arrow part functor trying construct simple matter derive ff ffi alg ffl ffi ff alg leave calculation reader 
identity function looking identity function know immediately constructed functor 
denote functor constructed sq definition sq ffi algebras sq ff ff arrows ff alg mu ffl range object part functor sq specifically construction theta mu ffl sq theta lambek lemma lemma mu ffl unique arrow alg ffl mu ffl ffl mu ffl sq theta mu ffl alg ffl ffl mu ffl sq theta theta ffi theta definition straightforward calculation definition arrows alg ffl category theory june 
square theorem theta mu ffl alg ffl mu ffl rolling rule theta mu ffl ffi mu ffl mu ffl note details construction theta shall need details 
property theta isomorphism mu ffl mu ffl want verify theta initial algebra 
show unique arrow alg algebra theta supposing algebra ff alg theta definition sq ff sq alg ffl sq theta sq theta mu ffl ff alg ffl sq mu ffl initiality theta demands establish equivalence implication 
proof completed showing alg ffl sq mu ffl alg theta introduce abbreviation psi alg ffl sq mu ffl psi alg theta definition alg psi cod cod theta ffi psi psi ffi theta psi sq alg ffl sq theta codomain calculus ffi psi psi ffi theta theta isomorphism ffi psi ffi theta psi unicity psi ffi psi ffi theta sq alg ffl mu ffl theta mu ffl alg ffl mu ffl ffi psi sq alg ffl mu ffl psi sq alg ffl mu ffl corollary sq alg ffl sq sq ffi ffi sq category theory june 
fixed point calculus sq alg ffl sq sq arrow sq functor alg lemma true completes proof 
summarising shown theorem square theorem endofunctor mu ffl initial ffl algebra theta mu ffl ffi mu ffl mu ffl initial algebra 
algebras alg ffl ffi mu ffl alg theta exchange rule lattice theory combine rolling fusion rule establish useful equality prefix points 
specifically complete partially ordered sets monotonic functions upper adjoint 
theorem call exchange rule states ffl ffl ffl ffl ffl ffl possible proof theorem 
calculate follows calculation suppose monotonic endofunctions anti symmetric fwg prefix point reflexive summarising calculation prove category theory june 
exchange rule ffl ffl ffl ffl ffl ffl fusion rule twice upper adjoint ffl ffl ffl ffl ffl ffl ffl ffl rolling rule twice true section going prove similar result category theory 
constructing similar result 
category endofunctors initial algebras denoted muf mug respectively 
want show construct initial algebra carrier conversely construct initial algebra carrier consequence introduce assumption isomorphism ffl ffl lemma mug ffi algebra muf ffi algebra 
corresponds assumption mug ffi initial algebra muf ffi initial algebra 
calculate follows 
mug ffi unique arrow algebra particular mug 
mug mug ffi mug alg mug ffi theta denote mug mug ffi abbreviation rest section 
theta mug mug ffi furthermore restated theta mug alg mug ffi definition arrow alg computation rule follows immediately mug ffi theta theta ffi mug ffi see theta algebra observe arrow base category specifically theta category theory june 
fixed point calculus show theta initial algebra showing isomorphic muf definition theta muf theta alg muf gives half required isomorphism 
arrow direction observe symmetrically interchanging arrow psi properties psi muf muf ffi psi muf alg muf ffi muf ffi psi psi ffi muf ffi psi definition psi mug psi alg mug base category psi mug arrow cod psi cod theta conjecture psi mug inverse theta muf theorem suffices show muf ffi psi mug psi mug ffi theta verification goes follows muf ffi psi mug psi mug ffi theta lemma definition theta muf ffi psi mug psi mug ffi mug ffi initial algebra muf ffi psi mug psi alg mug ffi ffl ffl psi mug psi ffi alg mug ffi muf psi alg psi ffi definition arrow alg typing base category trivial psi ffi muf muf ffi psi ffi true category theory june 
exchange rule summary proven theta muf theta alg muf psi mug muf alg theta assumed initiality muf know arrows alg muf algebra unique particular identity arrow id muf unique arrow muf muf composition psi mug theta muf arrow alg muf muf immediately psi mug ffi theta muf id alg muf symmetrically theta muf ffi psi mug id alg mug identity arrows algebra identity arrows base category id alg mug id id cod theta id alg theta muf theta isomorphic alg symmetrically mug psi isomorphic alg cod theta isomorphic base category summary proven lemma category endofunctors initial algebra denoted muf mug respectively 
isomorphism ffl ffl oe mug mug ffi muf muf ffi oe muf oe muf mug mug oe muf mug oe algebra carrier base category oe mug mug ffi muf muf ffi oe muf oe muf mug category theory june 
fixed point calculus continue proof exchange rule 
categories functors lower adjoint adjunction lower adjoint adjunction 
details adjunctions needed section 
simply results fusion rule 
initial ffl algebra initial ffl algebra exist denoted mu ffl mu ffl respectively 
show ffl ffl mirror ffl ffl ffl ffl recall rolling rule fusion rule give existence isomorphisms type appropriate swap roll mu ffl ffl mu ffl lower adjoint fuse swap mug ffi swap prove isomorphism ffl ffl simultaneously construct witnesses ff fi ff ffl ffl fi ff lemma ffl ffl ffl ff fl mu ffl fi ffi mu ffl fl mu ffl ffl ffl mu ffl ffi ffl ffi mu ffl ffl ffl mu ffl ffi ffl ffl ffl ffl ffl ffl ffl ffl ffl mirror fl mu ffl ffl ffl mu ffl ffi ffl mirror ffl ffi mu ffl ffl ffl mu ffl ffi ffl mirror ffl ffl mu ffl ffi ffl mirror ffl rules functor mu ffl ffi mirror ffl ffl fusion rule ffl fuse ffl ffl mirror lemma mu ffl category theory june 
exchange rule ffl rolling rule ffl roll mu ffl 
roll ffi fuse ffl ffl mirror mu ffl ffl ffl symmetrically roll ffi fuse ffl ffl mirror mu ffl ffl ffl arrows inverses ffl ffl isomorphic 
state theorem full 
theorem exchange rule categories functors lower adjoint adjunction lower adjoint adjunction 
furthermore natural isomorphism mirror ffl ffl ffl ffl assume initial ffl algebra mu ffl initial ffl algebra mu ffl exist 
ffl ffl specifics isomorphism roll ffi fuse ffl ffl mirror mu ffl witness ffl ffl roll ffi fuse ffl ffl mirror mu ffl inverse 
way construct similar result ffl ffl specifically fuse ffl ffl mirror ffi roll mu ffl ffl ffl fuse ffl ffl mirror ffi roll mu ffl ffl ffl arrows inverses ffl ffl isomorphic 
exercise exchange rules combined 
specifically suppose categories functors lower adjoint adjunction lower adjoint adjunction 
furthermore suppose natural isomorphism mirror ffl ffl ffl ffl ffl ffl assume initial ffl ffl algebra mu ffl ffl initial ffl ffl algebra mu ffl ffl exist 
ffl ffl ffl ffl establish theorem 
category theory june 
fixed point calculus diagonal rule complete partially ordered set phi thetac monotonic binary function 
lattice theoretic diagonal rule states phix phiy section derive corresponding theorem category theory 
unusual length section due fact prove existence initial algebra directions 
specifically initial phix algebra construct initial phiy algebra vice versa initial phiy algebra construct initial phix algebra 
category binary functor phi thetac furthermore assume element initial object mu phi exists alg phi introducing notation 
unary functor phi denote functor defined objects arrows respectively phix phix note functor phiy corresponds map operator section 
assumptions prove statements equivalent initial object mu phi exists alg phi initial object mu exists alg specifically initial algebra category construct initial algebra category carrier 
may derive isomorphism carriers initial phi algebras initial algebras 
half proof implies 
assumption mu phi exists alg phi show initial object ff exists alg carrier phi step construct ff object alg arrow base category phi phi ff phi phi definition ff phi phi phi mu phi initial alg phi category theory june 
diagonal rule ffl ff fi mu phi phi fi phi phi phi phi initial phi algebra fi mu phi conclude calculation mu phi mu phi phi phi phi object alg brevity theta denote mu phi mu phi phi computation rule immediately theta ffi mu phi phi mu phi ffi id phi phi theta suppose construct unique arrow alg theta construction ff ff alg theta alg ffl ff ffi fi fi alg theta definition arrow alg ffi fi fi ffi theta fi phi ffi fi phi definition definition theta mu phi ffi ffi fi mu phi phi fi ffi mu phi mu phi phi fi phi fusion mu phi ffi ffi fi ffi id phi fi ffi mu phi fi phi coherence requirement binary functor phi mu phi ffi ffi fi fi ffi mu phi fi phi uep fi mu phi ffi mu phi alg cod ffi mu phi ffi mu phi alg theta show ffi mu phi ffi mu phi unique arrow alg theta assume alg theta assume phi ffi ffi theta category theory june 
fixed point calculus want show ffi mu phi ffi mu phi order exploit need find arrow fi theta ffi fi id phi calculation fi carried follows theta ffi fi id phi id phi id mu phi mu phi mu phi ffl fi fl mu phi aiming fusion theta ffi fl mu phi mu phi mu phi fusion theta phi phi mu phi ffi theta phi theta theta ffi fl cod fl phi ffl fl mu phi phi ffi ffi leibniz theta phi theta id phi phi theta ffi ffi phi binary functor ffi theta phi summarise calculation theta ffi mu phi phi ffi theta phi mu phi id phi go back main calculation 
ffi mu phi ffi mu phi ffi id phi ffi theta ffi mu phi phi ffi theta phi mu phi ffi mu phi ffi mu phi assumption remove ffi ffi mu phi phi ffi theta phi mu phi mu phi ffi mu phi fusion phi phi phi mu phi ffi ffi phi ffi mu phi phi ffi theta phi phi computation rule map mu phi ffi ffi phi mu phi ffi phi ffi theta phi coherence requirement binary functors leibniz ffi ffi theta category theory june 
diagonal rule assumption true concludes proof implies 
half proof implies 
assumption time category alg initial object mu show initial object ff alg phi carrier steps proof part 
construct candidate arrow ff phi base category 
assume object alg phi construct unique arrow ff category alg phi step calculation ff phi mu ffl ff mu ffi fi fi phi definition fi phi phi mu phi phi phi phi ffl fi mu phi ffi fl fl phi phi phi definition theorem mu inverse denoted mu fl id phi mu mu ffi mu phi ffi id phi mu phi suppose phix construct arrow alg phi mu ffi mu phi ffi id phi mu follows 
ff alg phi mu ffi mu phi ffi id phi mu definition arrow alg phi ff ffi ff ff ffi mu ffi mu phi ffi id phi mu inverses coherence property binary functor category theory june 
fixed point calculus ff ffi ff phi ff ffi mu ff ffi mu ffi mu phi coherence requirement binary functor ff ffi ff ffi id phi ff ffi mu ff ffi mu ffi mu phi uep ff ff ffi mu ffi ff mu phi definition theorem ff ff ffi mu mu phi ffi ff uep ff mu phi mu mu phi mu alg phi mu ffi mu phi ffi id phi mu construction steps equivalences time proven uniqueness arrow 
completes proof implies 
reached part proof 
assume mu phi initial object alg phi mu initial object alg previous part proven assumptions mu phi mu phi phi initial algebra mu ffi mu phi ffi id phi mu initial phi algebra 
theorem isomorphisms mu phi mu phi phi mu mu ffi mu phi ffi id phi mu mu phi furthermore mu phi mu phi phi phi carrier isomorphism base category phi note follows fact mu ffi mu phi ffi id phi mu carrier show construction witnesses 
substituting mu obtain category theory june 
diagonal rule mu ffi mu phi ffi mu phi id mu phi mu alg mu phi mu phi phi similarly substituting mu phi obtain mu phi mu phi phi mu mu phi alg phi mu ffi mu phi ffi id phi mu assumed initiality mu alg conclude mu phi mu phi phi mu mu phi mu phi phi alg mu symmetry suggests mu ffi mu phi ffi mu phi id mu phi mu ffi mu phi ffi id phi mu alg phi mu phi initiality mu phi alg phi verify follows mu ffi mu phi ffi mu phi id mu phi mu ffi mu phi ffi id phi mu mu phi fusion typing base category trivial mu ffi mu phi ffi mu phi id mu ffi mu phi ffi id phi mu ffi mu phi mu coherence requirements phi true arrows algebra category arrows base category conclude arrows mu phi mu phi phi mu mu ffi mu phi ffi mu phi id mu phi witnesses isomorphisms 
state theorem full 
theorem diagonal rule category phi thetac binary functor 
furthermore assume element initial object mu phi exists alg phi mu phi initial object alg phi mu phi mu phi phi category theory june 
fixed point calculus initial object category alg initial algebra mu mu phi mu phi phi mu conversely mu initial object alg mu ffi mu phi ffi id phi mu initial object category alg phi initial phi algebra mu phi mu ffi mu phi ffi id phi mu mu phi consequence isomorphism base category phi 
phix phiy specifics isomorphisms mu phi mu phi phi mu arrow phi mu ffi mu phi ffi mu phi id mu phi inverse 
mutual recursion fixed point rule consider problem computing initial algebras product category 
supposing categories endofunctor product category thetad determine information needed initial algebras endofunctors order able compute initial algebra 
shall see main tool analysis diagonal rule 
particular problem able determine solution lattice theory really pays 
discuss section 
discuss solution 
suppose partially ordered sets 
thetad partially ordered relation theta function thetad course broken functions thetad broken binary functions types thetac thetad may state problem way 
suppose fi thetac omega thetad monotonic 
conditions existence prefix points endofunctors sufficient guarantee existence prefix point monotonic 
omega answer lemma 
proof give diagonal rule appears original authors colleagues eindhoven university mathematics program construction group lemma 
lemma attributed bekic 
simple lemmas dealing special cases general problem 
category theory june 
mutual recursion lemma 

ffi ffi proof lemma straightforward fusion noting projection functions lower adjoints square theorem theorem second 
lemma 
omega 
omega fi 
fi omega omega omega fi omega fi fixed points individual equations 
proof 
omega diagonal rule phi defined phi omega 
omega lemma definition omega fi 
fi omega square theorem specifically lemma fi omega omega fi definition fi omega 
omega fi 
fi omega diagonal rule twice 
omega fi 
fi omega proof guide shall show formulate prove theorem category theory 
category theory june 
fixed point calculus ff initial 
omega algebra diagonal rule theorem phi defined phi omega ffl ff fi ffi mu cod fi phi ffi id cod fi phi fi fi initial algebra initial 
omega algebra lemma definitions omega fi fi initial 
fi omega algebra square theorem theorem ffl fi fl ffi phi phi phi fl fl fl initial phi algebra phi fi omega omega fi ffl fl ffi ffi initial fi omega algebra initial omega fi algebra definition fi omega ffi initial 
omega fi algebra initial 
fi omega algebra diagonal rule theorem twice ffl ffi 
omega cod fi mu 
omega cod fi ffl 
fi cod omega mu 
fi cod omega initial 
omega fi algebra initial 
fi omega algebra theorem mutual recursion fi thetac omega thetad binary functors omega omega fi omega id initial algebras 
functor defined omega initial algebra 
freyd defines category algebraically complete endofunctors initial algebras 
relaxing conditions existence initial algebras theorem obtain corollary due freyd 
category theory june 
mutual recursion corollary algebraic completeness product algebraically complete categories algebraically complete 
category theory june 
fixed point calculus category theory june chapter monads chapter generalise basic theory closure operators lattice theory monads category theory 
equivalent definitions closure operator 
closest usual definition monad reflexive idempotent monotonic partially ordered set 
monotonic complete lattice unique minimal closure operator 
prefix point proof example galois connections 
consider pre set prefix points observe infimum base set subset pre prefix point pre complete lattice particular function embedding pre base lattice distributes universally infima 
just identity function 
lower adjoint composition embedding function lower adjoint closure operator 
adjoint functions preserve limits lower adjoint applied element base set prefix point short step argument known knaster tarski theorem monotonic function complete lattice fixed point suffices note prefix point monotonic function fixed point function 
short step tarski theorem fixed points monotonic function complete lattice form complete lattice shown prefix points form complete lattice 
dually postfix points form complete lattice 
suffices observe fixed point point simultaneously prefix point postfix point monotonic function maps prefix points prefix points monotonic function pre 
notation closure operator operation mapping properties common kleene star theory regular languages 
elementary example powers including zeroth power identity function 
substantial examples category theory june 
monads prefix point function mapping function id ffl id identity function star decomposition rule ftg ffl ffl chapter generalisation premise function embedding pre base set lower adjoint 
theorem generalises construction prefix point theorem fact prefix point 
monad decomposition rule generalising star decomposition rule proved section 
monads adjunctions closure operator function preorder preorder monotonic reflexive idempotent 
monad coherently constructive closure operator 
definition monad category consists endofunctor natural transformations unit id mul ffl mul ffi ffl mul mul ffi mul ffl mul ffi ffl unit ffl id mul ffi unit ffl id ffl suggested notation unit called unit monad mul called multiplication monad 
common refer functor monad strictly component monad 
starting natural transformations unit id mul ffl identity transformations ffl id id ffl straightforward construct natural transformations ff denotes fold composition 
exception ff constructed unbounded number ways 
requirements guarantee coherence constructions sense ways constructing transformation give rise equal transformations 
terms correspond elementary constructions natural transformations shown diagram 
mul ffl ffl mul mul ffl ffl ffl ffl mul category theory june 
basic adjunction terms correspond elementary constructions natural transformations 
second fourth terms course equal 
inductive proof properties sufficient guarantee uniqueness ff left reader 
standard theorem lattice theory composition lower adjoint galois connection upper adjoint closure operator 
corresponding theorem category theory standard 
theorem suppose adjunction 
unit ffl id unit counit id ffl counit 
triple consisting ffl unit ffl counit ffl monad details proof theorem left reader 
verification coherence property straightforward application interchange law obtained applying theorem combination laws 
basic adjunction recall sketched proof knaster tarski theorem 
assuming complete lattice embedding prefix points monotonic lattice lower adjoint closure operator applied bottom element lattice prefix point fixed point key theorem argument states function domain complete lattice distributes universally infima lattice lower adjoint 
corresponding theorem category theory known freyd adjoint functor theorem involves conditions want go 
section assumption adjunction exists category algebras base category 
denote endofunctor category ff fi denote objects alg oe denote arrows alg 
note objects arrows alg arrows category denote objects denote arrows necessarily arrows alg denote functor alg defined ff cod ff functor called forgetful functor forgets structure algebra mapping carrier 
note dependent notation dependency explicit 
moment unnecessary dependency explicit 
suppose lower adjoint denoted lower upper adjunction denoted respectively 
introduce special notation composition denote ffl lower upper assumed adjunction definition satisfy rules 
ff cod ff ff alg category theory june 
monads dfe ff ff alg cod ff db ff ff ff alg ff ff cod ff ffi ff ffi ffi ffi gc fi fi alg ff ff alg ffi dfe ff ffi ffi ffi ge fi fi alg ff cod ff denote bid recall cod note theorem functor part monad unit 
easily derive computation rules 
ffi fi fi alg particular dfe ff ffi cod ff definition arrow alg ff ffi dfe ff dfe ff ffi cod ff id lemma ffl ffl ffl defined ff ff proof category theory june 
basic adjunction ffl ffl ffl ffl ffl ffl ffl ffl functor ffl natural transformation ff ff alg ff ff ff ff alg fi ffi fi ff ffi definition ff ff alg ff cod ff cod ff ff alg fi ffi fi ff ffi ff ff definition arrow alg true 
denote initial object category 

lower adjoints map initial object initial object immediately theorem 
theorem 
initial algebra 
carrier 
proof lower adjoints preserve initial objects see unique arrow alg object ff 
cod ff ff 
catamorphisms base category defines catamorphisms category alg letting muf denote 
define alg ff muf cod ff ff 
note initiality 
alg immediately gives catamorphism fusion rule ffi alg ff muf alg fi muf fi alg ff instantiating cod ff 
gives computation rule ff ffi alg ff muf alg ff muf ffi muf category theory june 
monads lifted adjunction lattice theory useful technique study lift galois connection base set pre galois connection monotonic endofunctions base set pre ffl adopting strategy lead lemma lemma adjunction alg induces adjunction alg ffl specifically dummy ff ranging alg ffl dummy ranging ff ff alg ffl ffl ffl ff cod ff proof note calculation 
ff fi alg ffl ff alg ffl fi definition cod ff cod fi ff ffi ffl ffi fi definition nat 
trans pointwise rearrangement cod ff cod fi ff ffi ffi fi cod ff ffi ffi cod fi cod ff cod ff definition algebra ff alg fi cod ff ffi ffi cod fi proof obligations construct lower upper prove satisfy certain coherence requirements 
ff alg ffl suppose cod ff construction derive candidate upper 
ff alg ffl ffl ffl ffl ffl ffl ffl ffl ff alg cod ff ffi ffi assumption doe ff fusion rules oe cod ff cod ff ffi oe oe ffi category theory june 
lifted adjunction cod ff oe upper dd ee defined ff dj ff suppose ff alg ffl ffl ffl construction derive candidate lower 
cod ff natural transformation cod ff cod ff ffi ffi assumption ff fusion rules ff alg cod ff ffi ffi ffl ffl ffl ffl ffl lower bb cc defined bb cc ff ff coherence requirements follow immediately pointwise definition 
result family isomorphisms ff alg ffl ff alg ffl ffl cod ff id dd ee ff id witness right left bb cc ff id inverse 
furthermore previously defined bid terms newly established adjunction ffl cc ffl id id ready theorem justifies kleene star notation 
theorem define functor ffl ffl ffl initial alg ffl carrier 
proof id ffl ffl ffl ffl ffl id ffl ffl id ffl ffl ffl ffl definition addition ffl ffl algebra ffl carrier 
suppose ff alg construct unique arrow alg ff ffl ffl category theory june 
monads ff alg ffl ffl definition arrow alg cod ff ffl ff ffi id ffl ffl ffi ffl ffl oe inl ffi inr ffi oe cod ff ffl ff ffi inl ffl inr ffi ffl ffi ffl ffl computation rules cod ff ffl ff ffi inl ffl ffi ff ffi inr ffi ffl ffi ffl ffl definition arrow alg ffl ffl cod ffl ff ffi inr alg ffl ffl ffl ff ffi inl ffl ffi ffl cc ffl id fusion ff ffi inr alg ffl ffl ffl ff ffi inl ffl bb cc ff ffi inr lemma inverse ffi inl ffl ee ff ffi inr proof steps equivalences time proven uniqueness 
decomposition theorem section prove categorical generalisation theorem ffl ffl denotes closure operator denotes binary supremum operator lifted pointwise functions 
proof lattice theory straightforward calculation ffl ffl definition 
id ffl ffl 
id ffl ffl diagonal rule id ffl id ffl ffl rolling rule 
id ffl ffl 
ffl id ffl definition 
ffl id ffl 
ffl id ffl category theory june 
decomposition theorem reflexivity true categorical theorem want prove functors monad isomorphic monad ffl ffl proof ingredients lattice theoretic proof 
order apply theorem need differentiate forgetful functors general shall denote forgetful functor alg base category similarly unit monad natural transformation ffl respectively 
proof twice style calculational style 
reader may choose appealing 
proof steps 
rolling rule functor ffl maps initial object alg 
id ffl ffl initial object alg 
ffl id ffl theorem ffl ffl ffl ffl ffl initial 
ffl id ffl algebra 
second observe theorem ffl ug ffl id ffl initial object functor mapping id ffl ffl functor ffl id ffl carrier 
third defining binary functor phi phij id ffl ffl map functor phi theorem note applying diagonal rule theorem ffl initial object alg phi initial object alg phi carrier 
detail application diagonal rule isomorphic id ffl follows associativity definition lifting definition fourth note theorem ffl id ffl carrier initial algebra ffl ug ffl id ffl definition map functor phi objects phi equals ffl id ffl functors 
combining third fourth observations functor 
ffl id ffl initial algebra ffl carrier combining observation ffl ffl ffl ffl ffl ffl isomorphic 
carrier ffl ffl second functors isomorphic 
calculational proof steps ffl ffl carriers preserves isomorphism ffl ffl ffl ffl ffl ffl ffl initial 
id ffl algebra ffl ffl ffl ffl ffl initial 
id ffl algebra diagonal rule initial 
ffl id ffl category theory june 
monads algebra initial 
id ffl algebra ffl ffl ffl ffl ffl initial 
ffl id ffl algebra rolling rule ffl ffl ffl ffl initial 
id ffl ffl algebra theorem true category theory june chapter applications lists chapter categorical fixed point theorems previous chapter prove isomorphisms certain list structures simultaneously construct witnesses 
isomorphisms going prove correspond known properties regular algebra 
start proofs give categorical definitions corresponding basic elements regular algebra give elementary properties 
preliminaries needs revised exploit previous material limits particular parameterised limit theorem 
giving definition sum product objects 
sum frequently introduced instance called colimit 
involve giving full explanation colimit colimit corresponds lattice theory supremum wish avoid 
similarly definition product instance limit 
definition sum sum coproduct objects object injections inl inr object pair arrows unique arrow omitting subscripts ffi inl ffi inr definition product product objects object thetay projections exl thetay exr thetay object pair arrows unique arrow thetay omitting subscripts exl ffi exr ffi category theory june 
applications lists sums products unique isomorphism 
product objects category sum objects opposite category 
result product sum similar properties 
proof state isomorphisms thetab thetac theta thetac expressions assume lower precedence theta expression thetab parsed thetab definition distributive category category initial object terminal object product sums pairs objects exist satisfies isomorphisms objects theta thetab thetac thetac thetac thetac theta thetaa called distributive category 
assume categories chapter distributive categories 
having terminal object derive isomorphisms thetaa theta repeat isomorphisms far introduced furthermore give specific names corresponding witnesses 
note isomorphisms hold categories chapter 
objects thetaa theta category theory june 
preliminaries proass thetab thetac theta thetac rdist thetac thetac thetac theta thetab thetac cases witness isomorphism denote inverse distributive category sums objects exist extend definition sum binary functor maps objects object arrows argue follows suppose arrows inl ffi inr ffi unique arrow denote arrow similarly define binary functor theta fun denote category functors distributive categories consideration 
distributive categories referred base categories 
sum category fun related sum base categories follows 
assume fixed sum functor base categories 
functors domain codomain define object arrow 
functor 
inl inl inl inr similarly triple inl inr sum category fun constructor turned binary functor fun defining similarly theta defined binary product functor fun fun distributive category instance frequently need forthcoming proofs isomorphisms 
want able arguments isomorphisms sum product listed 
remarks isomorphisms functor category argue follows 
suppose object denote category theory june 
applications lists constant functor object arrow id extend definition arrows arrows define natural transformation letting equal objects category 
leave reader verify functor 
definitions calculations similar functors denote objects instantiate id id id definition 
id 
id definition id 
denote isomorphism 
similarly denote isomorphism 
recalling notation functors ffl ffl definition cartesian closed category category cartesian closed objects functors theta thetay functors obtained fixing turn arguments binary functor theta upper adjoints 
assume categories section cartesian closed 
chapter frequently construct binary functors functors theta fix arguments 
result functor phi binary functor phi assume functors initial algebra 
talk codomain initial phi algebra denoted phi lists defined various isomorphic ways 
examples follow cons lists 
assume functor defined object thetay contrast normal functor applications skip dot functor applied object 
note functor follows immediately fact map operator defined section 
category theory june 
preliminaries seen lift binary sum product functor theta defined base categories binary sum product functor theta defined functor category 
want similar result abstraction theorem algebras proven ffl carrier particular initial phi algebra 
may choose mu phi ffl carrier 
phi ffl phi definition remarks abstraction calculation ffl definition thetay ffl composition 
theta heading abstraction define phiy theta phi abstraction theorem 
id phig id phig phi theta thetag extensionality 
thetag define functor objects 
thetag write ffl recall previous chapter functors appropriate type isomorphisms roll ffl ffl fuse swap swap ffl ffl upper adjoint diag phi phiy phix exch mirror ffl ffl category theory june 
applications lists upper adjoint mirror ffl ffl ffl ffl inverse witness denoted instantiate id get id upper adjoint fuse id swap swap functors inferred typing natural isomorphism swap case equals identity functor explicitly mention functors anymore fuse swap chapter employ notation witnesses isomorphisms included hints marked bullet ffl 
specifically proof step form hint ffl ff short ff hint theorems section prove isomorphisms certain list structures simultaneously construct witnesses 
example chosen simplicity 
theorem list fusion theta 
thetay proof construct witness ff follows ff theta 
thetay definition ff 
thetay theta 
thetay thetab lower adjoint fusion ffl ff fuse fi thetab 
thetay 
thetay fi 
thetay thetab 
theta thetab isomorphisms ffl fi rdist ffl theta ffi fl category theory june 
theorems fl 
thetab thetay thetab 
theta thetab definition fl thetab 
thetay thetab theta thetab definition fl proass constructed fuse rdist ffl theta ffi proass theta 
thetay thetab 
thetay 
thetay corollary theta theta proof straightforward combination abstraction theorem theorem theorem 
remainder section denote witness list fusion theta 
thetay example chosen relative difficulty practical relevance 
instance called lines problem sequence types characters delimiters non delimiters write program divide sequence possibly empty lines non delimiters separated single delimiters 
construct addition inverse program 
expressed isomorphism datatypes problem boils showing star decomposition theorem regular languages constructively valid 
theorem list decomposition theta theta proof theta theta definition theta 
theta thetay category theory june 
applications lists rules ffl id theta fuse ffl proass theta 
theta theta rolling rule ffl roll theta denote 
thetay 
theta thetay fusion rule ffl fuse ffl 
thetay diagonal rule ffl diag phi thetay 
thetay thetay fusion rule ffl fuse ffl theta theta ffi ffl rdist 
thetay definition conclude id theta fuse ffl proass ffi roll theta ffi fuse ffl ffi diag phi ffi fuse ffl theta theta ffi ffl rdist theta theta 
thetay thetay alternative higher level proof monad decomposition theorem corollary 
instructive exercise left reader 
suppose denote witness decomp abstraction lift isomorphism level functors 

theta theta introducing functors exl exr exl exr 
exl theta exr theta exl abstraction ffl exl theta ffl exr theta ffl exl category theory june 
theorems abstraction exl theta exr theta exl theorem ffl decomp exl exr exr exl abstraction 
full details definition decomp exl exr required instantiate witness way exl exr theta theta theorem leapfrog preservation suppose functor omega binary functor omega lower adjoint object define object part functor ffl omega suppose natural isomorphisms ass omega omega omega omega leapf omega omega omega omega omega omega omega omega proof start left hand side omega omega definition omega omega omega ffl id omega fuse ffl ass omega omega omega ffl roll omega ffl omega 
omega omega category theory june 
applications lists ff omega omega omega omega calculation ffl ff id omega fuse ffl ass ffi roll omega ffl omega ffi fi fi 
omega omega omega omega definition fi 
omega omega omega omega omega omega lower adjoint ffl fi fuse omega fl omega omega omega omega fl 
omega omega omega 
omega omega omega ffl fl omega ffl ffl ass ffi ffi ffi omega ffl ffl ass ffi 
omega omega omega 
omega omega omega rules assumption ffi leapf ffl omega conclude id omega fuse ffl ass ffi roll omega ffl omega ffi fuse omega omega ffl ffl ass ffi leapf ffl omega ffi omega ffl ffl ass omega omega omega omega omega omega omega omega corollary list leapfrog theta thetaa thetab theta proof instantiate theorem omega theta leapf rdist thetab ffi ffi proass ffi thetaa category theory june 
theorems added substitution ass proass theorem suppose id omega omega id lower adjoints isomorphism leapf omega omega omega omega define map functors ffl omega ffl omega proof abstraction theorem definition ffl omega define phiy omega phi abstraction id phi id phi phi omega ffl ffl id omega ffl ffl id omega ff ff ffl ffl id omega ffl ffl omega id exchange rule id omega omega id lower adjoints category theory june 
applications lists ffl ff exch ffl id omega omega id fi fi omega id ffl ffl ffl id omega id omega ffl ffl ffl omega id assumption fi leapf id exch ffl id omega omega id leapf id corollary cons snoc list isomorphism defining cons lists equation clist 
thetay snoc lists equation slist 
thetaa clist slist proof instantiate theorem omega theta leapf rdist thetab ffi ffi proass ffi thetaa category theory june bibliography aarts backhouse hoogendijk van der 
relational theory datatypes 
available world wide web www win tue nl cs wp papers september 
backhouse chisholm malcolm 
type theory 
formal aspects computing 
bekic 
programming languages definition volume lncs 
springer verlag 
selected papers edited jones 
garrett birkhoff 
lattice theory volume american mathematical society colloquium publications 
american mathematical society providence rhode island rd edition 
davey priestley 
lattices order 
cambridge mathematical textbooks 
cambridge university press edition 
dijkstra scholten 
predicate calculus program semantics 
springer verlag berlin 
maureen 
galois correspondence 
birkhauser boston 
maarten fokkinga 
calculate categorically 
formal aspects computing 
maarten fokkinga 
law order algorithmics 
phd thesis universiteit twente netherlands 
peter freyd 
algebraically complete categories 
rosolini carboni editor category theory proceedings como volume lecture notes mathematics pages 
springer verlag 
freyd scedrov 
categories allegories 
north holland 
gentzen 
investigations logical deduction 
szabo editor collected papers gerhard gentzen pages 
north holland amsterdam 
category theory june 
applications lists lambek 
fixpoint theorem complete categories 
mathematische zeitschrift 
lambek scott 
higher order categorical logic volume studies advanced mathematics 
cambridge university press 
mac lane 
categories working mathematician volume graduate texts mathematics 
springer verlag 
lehman smyth 
algebraic specification data types synthetic approach 
math 
syst 
theory 
malcolm 
algebraic data types program transformation 
phd thesis groningen university 
malcolm 
data structures program transformation 
science computer programming october 
manes arbib 
algebraic approaches program semantics 
texts monographs computer science 
springer verlag berlin 
eindhoven university technology mathematics program construction group 
fixed point calculus 
information processing letters february 
ore galois connexions 
transactions american mathematical society 
vaughan pratt 
action logic pure induction 
van eijck editor proc 
logics ai european workshop jelia volume pages 
springer verlag lecture notes computer science 
rydeheard burstall 
computational category theory 
prentice hall international 
schmidt 
fur 
ii 
math 

dana scott 
data types lattices 
siam computing september 
smyth plotkin 
category theoretic solution recursive domain equations 
siam journal computing 
wadler 
theorems free 
th symposium functional programming languages computer architecture acm london september 
category theory june 
theorems category theory june index theta fusion alg alg cat col fun pre car cod decomp diag dom exch exl exr fuse inl inr proass rdist roll abstraction theorem adjoint lower upper adjunction contravariant lower upper algebra carrier initial algebraically complete arrow identity arrows graph base category beautiful theorem bekic burstall rod cancellation properties carrier algebra isomorphic carrier functor car cartesian closed category algebraically complete small categories cat algebra alg category theory june 
theorems base base cartesian closed cocomplete discrete distributive empty endofunctor functor fun indexed opposite small sum closure operator unit adjunction cocomplete category codomain calculus coherence requirement initial object natural transformation contravariant functor covariant functor functor category associativity axiom identity axiom colimit preservation composition functor post pre vertical constant combinator coproduct curry howard isomorphism deductive system small diagonal functor diagonal rule lattice theory dijkstra edsger distributive category domain calculus doubling functor empty category evaluation function evaluation functor exchange rule fixed point fokkinga forgetful functor freyd peter adjoint functor theorem functor carrier category fun composition alg contravariant covariant diagonal doubling endo category evaluation forgetful identity fusion rule catamorphism list galois connection gentzen rules category theory june 
applications lists graph grothendieck construction hom functor set identity arrow functor indexed category indirect equality isomorphism initial algebra object algebra initial object injection interchange law isomorphic carriers objects isomorphism cons snoc list iterated square theorem see square theorem knaster tarski theorem lambek leapfrog list preservation limit preservation lines problem list decomposition fusion leapfrog cons snoc locally small mac lane malcolm map fusion map operator monad decomposition definition mutual recursion mutual recursion theorem natural isomorphism lemma natural transformation object initial isomorphic preservation initial terminal objects graph category plotkin pratt vaughan prefix point set pre product projection regular algebra rolling rule rydeheard david scholten carel scott dana sequent calculus small graph category theory june 
theorems category categories cat smyth square theorem star decomposition sum sum category tarski theorem tarski alfred terminal object category unit adjunction monad vertical composition yoneda lemma category theory june 
