angewandte mathematik und informatik universit zu report fast parallel sat solver efficient workload balancing max bohm ewald appear annals mathematics artificial intelligence institut fur informatik universitat zu 
fast parallel sat solver efficient workload balancing max bohm ewald institut fur informatik universitat zu 
mail boehm informatik uni de esp informatik uni de fast parallel sat solver message mimd machine 
input formula dynamically divided disjoint subformulas 
small subformulas solved fast sequential sat solver running processor davis putnam procedure special heuristic variable selection 
algorithm uses optimized data structures modify boolean formulas 
additionally efficient workload balancing algorithms achieve uniform distribution workload processors 
consider communication network topologies dimensional processor grid linear processor array 
tests processors shown efficiency values 

satisfiability problem boolean formulas conjunctive normal form sat problem problem shown np complete see 
time sat problem attracted interest researchers 
due simple structure side 
side sat problem important applications area logic programming fault testing switching circuits important algorithms able solving wide range instances sat problem tolerable time 
know classes instances sat problem solved linear time 
class horn formulas sat formulas formulas implication operator variable occurring twice 
classes instances sat problem studied order show proof systems resolution exponential time provers classes pigeonhole formulas tseitin graph formulas 
satisfiability test instances hard certain proof systems human solver knows advance due understanding idea construction principle formulas satisfiable 
random formulas form really hard class formulas asking satisfiable 
lot knowledge average time complexity probabilistic behavior algorithms solving certain parametrized classes random instances see 
despite attempts direction wide range instances research supported federal state az iv sat problem remains intractable experimental point view 
idea test formulas efficiently satisfiability 
essentially interested solving hard random instances 
developed davis putnam satisfiability solver 
quality solver heavily depends ability predicting unset literals set true order hold search space small possible 
experiments sat formulas clauses fixed length varying ratios clauses variables singled strategy essentially computing unset literal vector weighting occurrences literal complement clauses length literal highest vector lexicographic order chosen see chapter 
step truth setting literal consequently complementary literal causes update current subformula 
update efficient possible data structure representing formulas needed 
order able represent boolean formula conjunctive normal form purely pointer data structure 
data structure needs linear storage space allows optimal execution nearly data structure operations performed algorithm see chapter 
implementation algorithm turned fastest program programs sat competition organized hans university paderborn see 
order able speed algorithm implemented parallel computer built processors inmos mb 
enable programmer realize net topology restriction processor connected processors 
experiments reported run dimensional grids theta processors linear processor arrays 
want mention advance sparc processor works times faster processor 
interested achieved speed sequential sat solver factor nearly running copy processors distributing workload processors convenient way 
able substitute processor sparc processor reported runtimes processor times faster sparc network 
mentioned parallel sat solver runs copy sequential sat solver processor processors cooperate searching solution space partial truth assignments partitioning space 
way processor provided certain amount workload represented subspace partial truth assignments 
difficult part solved running sat solver parallel computer consists balancing workload processors way side idle times processors avoided side workload balancing phase consume computing time possible 
nontrivial task 
parallel algorithm redistributes workload processors certain points time 
necessary reliable estimation workload represented partial truth assignment singled lead satisfying truth assignment known 
workload estimation function ff partial truth assignment unset variables varying values ff depending parameters class formulas input formula chosen 
workload redistribution phase activated estimated workload processor goes limit 
case linear processor array steps performed 
step prefix sums workload estimations processors determined linear array processors 
second step processor knows total amount estimated workload number processors broadcasts ratio amount workload processor case uniform workload distribution processors processors 
third step processor knows due knowledge rank linear processor array processors left workload sent left right neighbor receive workload left right neighbor 
steps performed time 
workload redistribution phase rectangular grids achieved performing workload balancing phase linear arrays processors linked dimension linear arrays processors linked second dimension 
case square grids processors workload distribution phase performed time 
run experiments parallel sat solver processors see chapter 
want stress point obtained efficiency close 
obtaining results trivial task requires lot tuning 
sequential sat solver consider boolean formulas conjunctive normal form cnf 
notations ffl set boolean variables 
ffl fx called set literals 
ffl called clause 
clause disjunction literals 
clause length jcj clause clause allowed contain literal complement 
ffl clauses called formula conjunctive normal form 
define jf jcj total number literals ffl truth assignment ae set literals fa denotes formula obtain assigning value true literals value false complements 
write shorthand fxg satisfiability test cnf formula performed algorithm solve variant davis putnam procedure see special heuristic variable selection 
described algorithm briefly 
input formula satisfiable iff solve returns true 
function solve 
empty return true 
contains empty clause return false 
contains unit clause return solve 
select literal branching lexicographic heuristic solve return true return solve formula clauses satisfied definition contains empty clause unsatisfiable justifying steps solve 
reasons efficiency formula simplified possible branching 
powerful simplification unit clause rule unit resolution done step 
clause length unit clause containing literal forces assignment true 
simplified formula solved recursively 
strategy implemented slight modification speed program assignment unit clause rule formula checked complementary unit clauses 
case formula determined unsatisfiable 
want mention included pure literal rule sat solver slowed run time algorithm experiments 
step branching step 
literal chosen special heuristic described 
value true assigned resulting subformula solved recursively 
solution value false assigned resulting formula solved recursively 
satisfiable iff subformulas satisfiable 
idea lexicographic heuristic assign value literal occurring possible shortest clauses formula 
way length shortest clauses reduced result clauses length steps 
formula collapses fast 
literal maximal vector lexicographic order chosen ff max fi min number clauses length containing ff fi function simplifies equal number positively negatively occurrences literal clauses length order get subproblems size want prefer literals differ 
experiments shown choice ff fi leads shorter run times 
note 
having determined literal proceed subformula fewest number clauses 
implementation calculate compare elements vector length shortest clauses formula 
improves efficiency calculation 
size search trees generated change significantly due simplification 
data structures branching heuristic keeps search tree small efficient data structure representing formulas important 
run time sat algorithm slowed orders magnitude due poor implementation underlying data structures 
reflected results sat competition described 
design suitable data structures depends operations supported efficiently 
data structure stores boolean formula initially input formula 
basic operation consists modifying truth assignment variable 
operation executed edge search tree 
operation executed node search tree consists looking unit clauses 
data structure chosen order support efficient execution operations 
having look shape search tree see nodes especially leaves represent subformulas small size compared size input formula 
subformula stored accessed efficiently input formula run time linear time operation linear size current subformula represented data structure size input formula 
backtracking algorithm remember subproblems evaluated subformulas done copying subproblem run time step linear size subproblem 
additionally subproblem copied new memory space storing problem needed 
typically leads quadratic space requirement 
order avoid inefficiency approach data structure represents formula modified situ 
operation assign modifies removed parts formula satisfied clauses removed literals linked stack 
case backtrack formula reconstructed reverse operation modifies stack 
implementation assign performs operations time jf gamma jf 
direct access clauses containing clauses containing supported 
unit clauses detected time 
implemented forward backward chained list structures ffl formula stored list clauses ordered clause length 
direct access parts formula constant clause length supported 
ffl clause represented clause head list literals 
ffl literal list clauses containing exists literal occurrence list 
example data structure shown 
clause length clause length clause length clause length clause list literal occurrence lists data structure representing operation calculating lexicographic heuristic executed branching nodes nodes degree search tree 
experiments shown number branching nodes small compared total number nodes search tree hard random sat formulas formulas clause variable ratio 
operation needs time jf implementation 
accepted time bookkeeping speed operation increase running time assign operations 
literal complement treated inverse elements 
knowledge positive negative important simple renaming literals influence behavior program 
random sat formulas fixed ratio clauses variables average number occurrences literal equal kr 
formulas operations assign need constant time average 
table summarizes execution times operations performed data structure 
operation running time assign jf gamma jf find clause length find clause find literal clause calculate lexicographic heuristic jf table time complexity operations performed data structure implemented operations assign described assigning true remove clauses delta delta delta delta delta delta containing clauses immediately looking literal occurrence list literal knows clause head 
clause literals literal list exception unlinked shown 
unlink literal list unassigned literals 
remove literal occurrence list literal occurrence list remove clauses delta delta delta delta delta delta time jcj second step shorten clauses delta delta delta delta delta delta containing literal literal occurrence list find clauses containing literal unlinked clause head moved sublist clauses length gamma clause length operation 
shown 
unlink literal list unassigned literals 
move remove clause length clause length literal occurrence list remember position clause length clause length literal occurrence list remove literal clauses delta delta delta delta delta delta time reverse operations follow literal occurrence list link removed clauses literals current formula old pointers elements kept valid find original locations formula 
done exactly reverse order unlinking operation described leads original formula 
workload balancing set processors communication network 
fixed point time processor holds workload wl ir estimation time needed solve problems placed assume wl divisible infinitely small pieces exchanged processors 
processor allowed send wl neighbored processor linked network 
workload balancing problem consists exchanging wl processors resulting uniformly distributed wl 
algorithm solves problem linear array processors pn time 
main task algorithm determine amount wl exchanged processor right neighbor achieve uniform distribution wl 
algorithm linear arrays processor performs steps 
calculate delta delta delta 
pn calculates optimal wl broadcast processors 
calculate overload gamma gamma gamma gamma 
send wl receive wl jl gamma receive wl gamma gamma send wl jl gamma gamma algorithm starts precomputation phase 
processor determines total wl processors done gamma steps pn processor pn calculates optimal workload broadcasts processors gamma steps 
step processor calculates overload processors balanced link overload gamma processors gamma balanced link gamma send receive steps step need special sequence executions processor send wl greater may wait receipt sufficient wl processors 
algorithm achieves uniform distribution wl processors gamma steps moving wl easily seen optimal 
particularly want stress point algorithm achieves uniform distribution wl moving smallest possible amount wl processors important case wl consisting huge data packets 
algorithm dimensional sided grids algorithm easily extended dimensional sided grids algorithm linear arrays dimension 
leads run time delta mg parallel execute algorithm linear array processor set fp delta delta deltai delta delta deltai mgg note dimensional hypercubes dimensional sided grids 
algorithm solves problem dimensional hypercubes time 
parallel implementation input formula divided subformulas way sequential case 
generated subformulas represent workload distributed processors processors amount workload possible 
small subformulas solved sequential sat solver running process processors 
determine estimation workload function measured run time sequential sat solver samples random sat formulas clause variable ratio varying numbers variables sample consisted unsatisfiable instances 
average run times experiments indicated solid line grows approximately function defined workload subformula fa fa ff ff input formulas variables 
similar experiments random sat formulas clause variable ratio chosen experimentally formulas sample unsatisfiable 
considering unsatisfiable formulas samples determined growth ff average search trees corresponding formulas 
results summarized table 
subformula fa represented string literals subset partial truth assignment string contains literals chosen branching step algorithm 
variables truth assignments forced unit clause rule represented 
sufficient achieving variables sequential run times processor random sat formulas clauses variables sample contains instances ff sat sat sat sat table workload estimation parameter ff random sat formulas percentage branching nodes respect size search tree unique reconstruction fa processor able send neighbored processor consuming little communication time 
initialization phase input formula sent processors network 
processor holds list strings representing subformulas fa solved list contains empty string representing input formula lists empty 
processor runs processes parallel worker balancer 
worker process tries split solve subformulas list 
takes string representing subformula fa top list 
list empty worker process waits new termination message balancer process 
workload fa goes certain limit subformula solved sequential sat solver 
fa split disjoint subformulas assigning true resp 
false literal chosen lexicographic heuristic 
strings representing subformulas inserted top list 
processing repeated terminated balancer process 
subformula fa solved fast sequential sat solver fa fi lp fa 
chosen fi order hold sufficient number subformulas list 
especially useful phase computa tion small subformulas residing lists 
balancer process processor performs steps periodically estimated workload sampled 
information precomputation phase algorithm performed calculates amount wl sent received processor 
additionally information broadcasted ffl lists empty termination 
ffl solution 
ffl list contains subformulas 
balancing wl processors performed processor holds problems list reduce communication overhead 
chosen 
case balancing activity processors try resolve send receive requests workload parallel 
processor send request list contains workload may wait receipt wl processors 
execute send request wl size balancer process takes problems bottom list sends neighbored destination processor reduces appropriately 
repeated ffi 
workload needs balanced exactly 
chosen ffi reduce communication activity 
experimental results implemented parallel sat solver parallel mimd machine university paderborn called sc 
consists transputers mbyte local memory 
transputer bit processor inmos peak performance mips 
includes serial links mbits sec communication 
sc allows configure network maximal degree software 
connections processors established physically crossbar switches 
transputer runs program code local memory 
chip exists performance single transputer slow 
sun sparc station times faster 
measured speedup values indicate usefulness parallel approach 
random sat formulas class test formulas randomly generated sat formulas variables clauses 
clause generated randomly selecting different variables 
variables negated probability 
clauses generated independently 
generation scheme ensures double complementary occurring literals clause allows double clauses formula 
guaranteed variables occur formula 
generated sample random sat formulas variables clauses 
test formulas unsatisfiable 
table shows average run times standard deviation seconds network topologies linear array dimensional grid 
average speedup efficiency values shown 
average speedup value calculated dividing sum run times processor algorithm sum run times processor algorithm 
efficiency value speedup value divided number processors 
speedup network topology grid nearly linear 
network topology linear array large diameter acceptable speedup measured 
indicates usefulness grid algorithm processors 
linear array dimensional grid proc 
time std 
dev 
speedup eff 
proc 
time std 
dev 
speedup eff 
theta theta theta theta theta table sample unsatisfiable random sat formulas variables clauses speedup processors linear array dimensional grid efficiency processors linear array dimensional grid average speedup efficiency values generated sample hard random sat formulas variables clauses ratio clauses variables 
formulas satisfiable formulas unsatisfiable 
results shown table 
field contains value unsatisfiable formulas atop value satisfiable formulas 
network topology dimensional grid chosen 
shows run times seconds speedup values instance small dash 
dash drawn left vertical grid formula satisfiable right vertical grid formula unsatisfiable 
speedup nearly linear unsatisfiable formulas 
satisfiable formulas speedup values varies 
note average speedup may linear indicates sequential algorithm improved see 
proc 
sat 
time std 
dev 
speedup eff 
branching nodes table sample random sat formulas variables clauses processors satisfiable unsatisfiable processors satisfiable unsatisfiable average run times speedup values generated samples hard random sat formulas 
experimentally determined ratios clauses variables result satisfiable instances 
average run times theta processor grid contrast run times processor shown table 
additionally number branching nodes search tree standard deviation shown 
sat 
time time speedup eff 
br 
nodes std 
dev 
table hard random sat formulas efficiency processor algorithm graph formulas second class test formulas consists tseitin graph formulas defined 
unsatisfiable formulas hard solved davis putnam sat solvers 
briefly describe generate formulas 
randomly choose undirected graph nodes node degree node randomly labeled mod 
unique literal assigned edge node generate gamma possible clauses involving literals incident number complemented literals opposite parity 
obtained sat formulas consists df variables gamma clauses 
generated samples unsatisfiable random graph formulas 
parameter ff workload approximation adjusted class formulas 
test results shown table 
time time speedup eff 
branching nodes ff table unsatisfiable graph formulas efficiency processor algorithm helpful discussions branching heuristic implementing parts parallel algorithm 
buro report sat competition eatcs bulletin feb cook complexity theorem proving procedures proceedings rd annual acm symposium theory computing davis putnam computing procedure quantification theory assoc 
comput 
mach 
dowling gallier linear time algorithms testing satisfiability propositional horn formulae logic programming 
franco elimination infrequent variables improves average case performance satisfiability siam comput 
haken intractability resolution theor 
comput 
sci der dissertation institut heinrich heine universitat monien solving satisfiability steps discrete applied mathematics 
purdom jr haven backtracking probing indiana university computer science technical report average superlinear speedup possible 
proc 
csl springer verlag lncs 
tseitin complexity derivation propositional calculus ed studies constructive mathematics mathematical logic part ii translated russian consultants bureau new york 
