functional programming bananas lenses envelopes barbed wire erik meijer maarten fokkinga ross paterson develop calculus lazy functional programming recursion operators associated data type definitions 
operators derive various algebraic laws useful deriving manipulating programs 
shall show example functions bird wadler functional programming expressed operators 
styles methodologies construction computer programs style opinion deserves attention functional programming community 
goal calculate programs specification way mathematician calculates solutions differential equations uses arithmetic solve numerical problems 
hard state prove laws known operations addition multiplication function level composition 
quite hard state prove laws arbitrarily recursively defined functions mainly difficult refer recursion scheme isolation 
algorithmic structure obscured unstructured recursive definitions 
crack problem treating various recursion schemes separate higher order functions giving notation independent ingredients constitutes recursively defined function 
university nijmegen department informatics toernooiveld ed nijmegen mail erik cs kun nl cwi amsterdam university twente imperial college london philosophy similar spirit structured programming methodology imperative programming 
arbitrary goto abandoned favour structured control flow primitives conditionals loops replace fixed patterns goto reasoning programs feasible elegant 
functional programs question recursion schemes chosen basis calculus programs 
shall consider recursion operators naturally associated algebraic type definitions 
number general theorems proven operators subsequently transform programs prove correctness 
bird meertens identified laws specific data types notably finite lists calculated solutions various programming problems :10.1.1.100.9674
embedding calculus categorical framework bird meertens lists extended arbitrary inductively defined data types 
group backhouse extended calculus relational framework covering 
independently paterson developed calculus functional programs similar contents dissimilar appearance australian animals referred 
syntactic differences laws derived paterson cases slightly general developped 
gives extension theory context lazy functional programming type cpo consider continuous functions types categorically working category cpo 
working category set done example malcolm hagino means finite data types defined initial algebras infinite data types defined final algebras constitute different worlds 
case possible define functions induction catamorphisms applicable finite infinite data types arbitrary recursive definitions allowed 
working cpo advantage carriers initial algebras final algebras coincide single data type comprises finite infinite elements 
price paid partiality functions values unavoidable 
data type lists shall illustrate recursion patterns interest means specific data type 
definitions specific instances 
modern functional languages allow definition cons lists type putting nil cons aka recursive structure definition employed writing functions destruct list called catamorphisms greek preposition ffff meaning downwards catastrophe 
anamorphisms functions greek preposition ffff meaning upwards generate list type seed functions type call tree shape cons list called hylomorphisms aristotelian philosophy form matter meaning dust matter 
catamorphisms phi list catamorphism function form nil cons phi notation bird wadler write foldr phi 
write catamorphisms wrapping relevant constituents called banana brackets jb phij countless list processing functions readily recognizable catamorphisms example length num filter bool 
length phij phi filter phij phi cons separating recursion pattern catamorphisms ingredients phi feasible reason programs algebraic way 
example fusion law catamorphisms lists reads ffi jb phij jc omega phi omega special notation pinpointing foldr forced formulate fusion law follows 
nil nil cons phi cons omega ffi phi omega 
clumsy way stating simple algebraic property 
anamorphisms predicate bool function list anamorphism defined nil cons anamorphisms known functional programming folklore called unfold bird wadler spend words 
denote anamorphisms wrapping relevant ingredients concave lenses db ec important list valued functions anamorphisms example zip 
zips pair lists list pairs 
zip db ec bs nil bs nil cons cons bs bs anamorphism iterate constructs infinite list iterated applications iterate db false ffl ec ffl denote constant function map function applies element list 
fnil nil cons cons fas list appears sides type suspect map written catamorphism anamorphisms 
case 
catamorphism phij phi bs cons bs anamorphism db ec nil cons 
hylomorphisms recursive function call tree isomorphic cons list linear recursive function called hylomorphism 
phi bool determine hylomorphism phi exactly structure anamorphism nil replaced cons phi 
write hylomorphisms wrapping relevant parts envelopes 
phi hylomorphism corresponds composition anamorphism builds call tree explicit data structure catamorphism reduces data object required value 
phi jc phij ffi db ec proof equality 
archetypical hylomorphism factorial function fac theta paramorphisms hylomorphism definition factorial correct unsatisfactory theoretic point view inductively defined data type num num 
simple fac 
problem factorial eats argument keeps brute force solution fac return pair 
able compute 
paramorphisms investigated meertens cover pattern primitive recursion 
type num paramorphism function form phi lists paramorphism function form nil cons phi write paramorphisms wrapping relevant constituents barbed wire hb phii may write fac phii phi theta function tails gives list tail segments list defined paramorphism tails nil nil phii phi tls cons cons tls 
algebraic data types preceding section specific notations recursion patterns connection particular type cons lists 
order define notions cata ana paramorphism arbitrary data types generic theory data types functions 
consider recursive data type called algebraic data type miranda defined fixed point functor functors bifunctor binary operation types types functions functions preserves identities composition id id id ffi ffi ffi bifunctors denoted unary type operation operation functions 
af bf preserves identity composition 
denote 
view notation write application functor postfix af 
show functor 
data types current functional languages defined basic functors 
product lazy product types operation functions defined give definitions various concepts category theory special case category cpo 
functors really endo functors 
fkg closely related functor projection tupling combinators express fkg fkg ffi ffi 
define doubling combinator delta fkg ffi delta 
sum sum operation functions defined 
arbitrarily chosen numbers tag values summands distinguished 
closely related functor injection selection combinators 
write ffi ffi 
removes tags argument define ffi arrow operation forms function space continuous functions action functions wrapping function ffi ffi alternative notation ffi ffi swapped arrow application arguments need moved localizing changes occurring calculations 
functional ffi hf ffi wraps ed argument closely related combinators curry uncurry eval note contra variant argument 
ffi ffi 
ffi 
identity constants identity functor defined types di functions fi type induces functor name operation objects cd functions fd id lifting mono functors bi functor define mono functors fg fyg fg xf fyg xf xg types functions view equation need write parenthesis 
notice fyg bi functor lifted act functors objects fyg mono functor 
sectioning analogous sectioning binary operators phi phi phi define sectioning bi functors ay fy id ay ay id similarly define sectioning second argument 
yb yf 
difficult verify properties functors fy ffi ay ffi fy fy ffi gy ffi fy fffi gives nice laws function composition 
laws basic combinators various equations involving combinators state 
parsing expression function composition binding power binds stronger ffi fkg ffi ffi ffi ffi ffi ffi fkg ffi ffi ffi ffi ffi ffi ffi ffi ffi strict id id fkg ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi strict fkg hkj nice law relating law varia element type denoted model constants type nullary functions type member called void denoted 
examples predicate bool function 

true false ffi 
models familiar conditional fi 
function void maps argument void void 
laws hold functions void ffi void 
ffi ffi ffi 
order recursion explicit operator defined assume recursion defined meta language 
functors af ag type called polymorphic function 
natural transformation family functions omitting subscripts possible ffi ff fg ffi convenient shorthand delta denote natural transformation 
theorems free theorem wadler reynolds states function definable polymorphic calculus natural transformation 
defined conclude holds strict recursive types stuff functors armed sufficiently peculiarities cons lists formalize recursively defined data types general 
operation functions continuous defined basic functors map functors introduced 
exists type strict functions lf lf omitting subscripts possible inverse id 
denote pair say fixed point 
inverses lf isomorphic upto isomorphism fixed point example xl defines data type type put nil ffi cons ffi aka get familiar nil cons example data types binary trees leaves type results fixed point xt 
backward lists elements type snoc lists called fixed point xl 
natural numbers specified fixed point xn recursion schemes generic way defining recursive data types define cata ana hylo paramorphisms arbitrary data types 
af af akl define db ec hi ffi id ffi confusion arise omit subscripts 
definition agrees definition wrote je phij write je ffl phi 
definition agrees informal earlier notation db ec db void ffi ec 
definition agrees earlier sense ffl phi void ffi 
ffl phi equal 
definition agrees description paramorphisms sense hb phii equals hb ffl phi 
program calculation laws letting programmer explicit recursion encourage fixed recursion patterns providing shopping list laws hold patterns 
omega morphism omega ana give evaluation rule shows morphism evaluated uniqueness property canned induction proof function omega morphism fusion law shows composition function omega morphism omega morphism 
laws proved mere equational reasoning properties general recursive functions 
free theorem fixed point operator strict ffi ffi theorem appears different names places 
called fixed point fusion 
strictness condition relaxed ffi ffi ffi ffi welcome 
fixed point induction predicate prove 
hylomorphisms prove split ana catamorphism show computation may shifted hylomorphism 
number derived laws show relation certain cata anamorphisms 
laws valid set 
hylomorphism laws follow theorem ffi ffi id catamorphisms evaluation rule evaluation rule catamorphisms follows fixed point property ffi ffi states evaluate application arbitrary element returned constructor apply recursively argument result 
cons lists nil cons xl fl id catamorphism jc phij evaluation rule reads jc phij ffi nil jc phij ffi cons phi ffi jc phij variable free formulation 
notice constructors nil cons parameter pattern matching 
catamorphisms uniqueness property prove equality functions induction explicitly 
ffi ffi ffi ffi fl typical induction proof showing takes steps 
check induction base ffi ffi 
assuming induction hypothesis fl proceed calculating ffi ffi fl induction hypothesis ffi evaluation rule ffi conclude 
schematic set proof done built law 
saved standard ritual steps lines calculation plus declaration induction proof complete 
part proof follows directly evaluation rule catamorphisms 
part fixed point fusion theorem fffi 
gives ffi ffi id done 
fusion law catamorphisms fusion law catamorphisms transform composition function catamorphism single catamorphism intermediate values avoided 
law way split function order allow subsequent optimizations 
ffi ffi ffi ffi ffi fl fusion law proved fixed point fusion theorem fffi ffi 
slight variation fusion law replace condition ffi ffi ffi strict 
ffi strict ffi ffi fl law follows 
actual calculations law valuable applicability conditions easier check 
injective functions catamorphisms strict function left inverse af ffi jf ffi ffi strict ffi id get strict injective function written catamorphism 
jf ffi ffi strict ffi id result write terms ffi ffi 
catamorphisms preserve strictness laws catamorphisms demonstrate importance strictness generally behaviour function respect 
poor man strictness analyser reason put 
ffi 
ffi 
proof fixed point induction ffi 
specifically catamorphisms ffi ffi strictness preserving 
part proof directly follows definition catamorphisms 
way shown follows premise ffi ffi 
ffi ffi evaluation rule ffi ffi preserves strictness ffi examples unfold fold transformations usually accomplished unfold simplify fold technique restated fusion 
num nil cons xl fl id type lists natural numbers 
fusion derive efficient version sum ffi squares sum ffl squares cons ffi 
sum strict just start calculating aiming discovery satisfies condition 
sum ffi nil cons ffi sum ffi nil sum ffi cons ffi nil ffi ffi nil ffi ffi nil ffi ffi suml conclude sum ffi squares ffi 
slightly complicated problem derive pass solution average div ffi sum length tupling lemma fokkinga ffi ffi simple calculation shows average div ffi ffl ffi ffl ffi 
accumulating arguments important item functional programmer bag tricks technique accumulating arguments extra parameter added function accumulate result computation 
stated terms catamorphisms cons lists technique applicable data types kind morphisms 
jc ffl phij omega ffl phi psi fi omega phi omega 
phi omega omega fi theorem follows fusion law accu ffi jc ffl phij phi ffl accu omega naive quadratic definition reverse catamorphism ffl phij phi cons nil derive linear time algorithm instantiating phi fi cons get function accumulates list reversed additional argument psi bs cons bs 
function appends lists defined bs ffl phij bs phi bs cons bs 
general catamorphisms higher type 
form interesting class correspond attribute grammars 
anamorphisms evaluation rule evaluation rule anamorphisms ffi db ec db ecl ffi says result arbitrary application db ec looks constituents produced applying equivalently obtained applying applying db ecl recursively result 
anamorphisms real old explain 
instantiate cons list define hd ffi tl ffi nil true ffl false ffl ffi assuming db void ffi ec find little calculation nil ffi hd ffi tl ffi corresponds characterization unfold bird wadler page 
anamorphisms anamorphisms slightly simpler catamorphisms base case checked 
db ec ffi fl ffi prove fixed point fusion theorem ffif 
gives ffi id done 
fusion law anamorphisms strictness requirement needed catamorphisms dropped anamorphism case 
dual condition ffi strictness ffi vacuously true 
db ec ffi db ec ffi fl ffi law proved fixed point fusion theorem ffif 
surjective function anamorphism results anamorphisms 
surjective function right inverse db ec ffi db gl ffi ffi ec ffi id ffi fl ffi gl ffi ffi 
special case equals yields surjective function written anamorphism 
db gl ffi ffi ec ffi id right inverse express db outl ffi ffi ec db outl ec 
examples reformulated notation function iterate iterate db ffi id ec db ffi id ec db void id ffi false ffl ec db id false ffl ec notation section 
useful list processing function takewhile selects longest initial segment list elements satisfy conventional notation takewhile nil nil takewhile cons nil cons takewhile anamorphism definition may look little daunting takewhile db void id ffi ffi 
ffi ec function contains repeated applications long predicate holds takewhile ffi iterate fusion law long calculation show db void id ffi ec 
hylomorphisms splitting hylomorphisms order prove hylomorphism split anamorphism followed catamorphism ffi db ec total fusion theorem 
shifting law hylomorphisms nice decomposability cata anamorphism allows respective fusion laws shift computation hylomorphism 
shifting law shows computations shifted hylomorphism 
ffi ffi delta proof theorem straightforward 
ffi definition hylo ffi ffi fl ffi delta ffi fm ffi ffi definition hylo ffi admittedly example shows left linear recursive functions transformed right linear recursive functions 
fl id fr id define functors express left respectively right linear recursion phi phi phi ffi phi ffi swap ffi swap delta phi swap ffi ffi phi ffi swap id 
relating cata anamorphisms splitting shifting law fact db ec derive number interesting laws relate cata anamorphisms 
jin ffi db ffi ec delta law easily show ffi ffi db ffi ec delta ffi jin ffi delta db ffi ec jin ffi ffi db ec delta db ffi ec ffi db ec delta set laws 
total fusion theorem derive db ec ffi id ffi id example reflecting binary trees type binary trees leaves type tree xl fl id id 
reflecting binary tree defined reflect jin ffi swap id id 
simple calculation proves reflect ffi reflect id reflect ffi reflect swap ffi fl fl ffi swap db swap ffi ec ffi jin ffi swap ffi ffi ffi swap id id paramorphisms evaluation rule paramorphisms ffi ffi id paramorphisms similar catamorphisms ffi ffi ffi ffi id fusion law paramorphisms reads ffi strict ffi ffi function right type course 
paramorphism 
hf ffi ffi li usefulness theorem read proof 
hf ffi ffi li definition ffi ffi ffi id ffi functor calculus ffi ffi example composing paramorphisms ana catamorphisms nice result paramorphism written composition cata anamorphism 
define xm hm natural numbers get xm 
num type lists natural numbers 
define preds follows preds db deltal ffi ec naturals get preds db id delta ffi ec natural number expression preds yields list 
preds start calculating ffi preds ffi db deltal ffi ec ffi fm ffi deltal ffi ffi ffi id id ffi ffi id ffi ffi preds 
id immediately get preds parametrized types defined map function laws id id ffi ffi laws precisely state functor 
characteristic property map leaves shape argument unchanged 
turns parametrized data type comes equipped map functor 
parametrized type type defined fixed point bifunctor 
contrary approach map defined catamorphism anamorphism 
maps bi functor define functor objects parametrized type ay functions jin ffi fy ay fy ay delta 
immediately get alternative version anamorphism db fy ffi ec functoriality calculated follows ffi definition jin ffi fy ffi jin ffi gy jin ffi fy ffi gy jin ffi ffi definition ffi maps shape preserving 
define shape void shape ffi void ffi shape 
cons list nil cons ay id fkg get db id ffi ec 
find conforms usual definition map 
ffi nil nil ffi cons cons ffi important laws maps factorization promotion :10.1.1.100.9674
ffi ffi fy ffi db ec db fy ffi ec ffi ffi jj ffi ffi strict ffi db ec db ec ffi ffi ffi know functor recognize iy delta delta iy natural transformations 
ffi ffi ffi ffi iterate promotion recall function iterate db ffi id ec law turns algorithm algorithm assumption evaluating ffi takes steps 
ffi iterate iterate ffi ffi ffi law immediate consequence promotion law anamorphisms 
interestingly may define iterate cyclic list iterate xs cons fixed point fusion prove 
map reduce factorization data type ay xf called free type free type write strict jf ffi ffi 
get jin ffi idj join ffi idj ffi tau ffi join ffi 
define reduction factorization law shows catamorphisms free type factored map followed reduce 
jf ffi idj ffi ffi fact tau join natural transformations give evaluation rules free types 
ffi tau tau ffi ffi tau id ffi join join ffi ff ffi join ffi early completely map reduce factorization 
laws old days reduce promotion map promotion 
ffi join ffi ffi join join ffi monads free type gives rise monad notation tau delta join delta join ffi tau id join ffi tau id join ffi join join ffi join wadler gives thorough discussion concepts monads functional programming 
considered various patterns recursive definitions lot laws hold functions defined 
illustrated laws recursion operators examples usefulness practical program calculation evident reader 
unfortunately space give elaborate examples 
aspects program calculation just series combining forms db ec laws 
calculating large programs certainly needs high level algorithmic theorems 
reported provides necessary tools develop theorems 
theory lists bird started success 
aspect program calculation machine assistance 
experience including colleagues shows size formal manipulations greater textbooks mathematics may comparable size computer algebra done systems macsyma maple mathematica fortunately appears manipulations easily automated quite equalities depend natural transformations 
cases type checking suffices 
clearly machine assistance fruitful difficult 
observe category theory provided notions concepts indispensable get clean smooth theory example notions functor natural transformation 
reading category theorist may recognize notions silently 
doubt categorical knowledge useful program calculation just exciting development 
results case set appeared numerous notes algorithmics club featuring roland backhouse johan jeuring doaitse swierstra lambert meertens nico jaap van der 
graham hutton provided useful remarks draft versions 
roland backhouse jaap van der ed malcolm 
relational theory types 
technical report tue 
rudolf 
composition transformational programming 
technical report tum tu munchen 
bird 
theory lists 
broy editor logic programming calculi discrete design pages 
springer verlag 
technical monograph prg oxford university october 
richard bird :10.1.1.100.9674
constructive functional programming 
broy editor marktoberdorf international summer school constructive methods computer science nato advanced science institute series 
springer verlag 
richard bird phil wadler 
functional programming 
prentice hall 
bos 
category theoretic solution recursive domain equations 
technical report eindhoven university technology october 
manfred broy 
transformation parallel programme 
phd thesis tu munchen munchen 
de bruin de 
retractions comparing prolog semantics 
computer science netherlands pages 
sion 
peter de bruin 
naturalness polymorphism 
technical report cs rug 
maarten fokkinga 
tupling 

maarten fokkinga johan jeuring lambert meertens erik meijer 
translating attribute grammars catamorphisms 

maarten fokkinga erik meijer 
program calculation properties continuous algebras 
technical report cwi 
gunter mosses scott 
semantic domains denotational semantics 
marktoberdorf international summer school logic algebra computation 
appear handbook theoretical computer science north holland 
hagino 
ml 
journal symbolic computation 
kodratoff 
techniques recursion removal 
acm toplas 
lehmann smyth 
algebraic specification data types synthetic approach 
math 
systems theory 
malcolm 
algebraic types program transformation 
phd thesis university groningen netherlands 
lambert meertens 
algorithmics programming mathematical activity 
proceedings cwi symposium mathematics computer science pages 
north holland 
lambert meertens 
paramorphisms 
appear formal aspects computing 
john jules ch 
meyer 
programming calculi fixed point transformations semantics applications 
phd thesis vrije universiteit amsterdam 
ross paterson 
reasoning functional programs 
phd thesis university queensland brisbane 
john reynolds 
types abstraction parametric polymorphism 
information processing 
north holland 
david schmidt 
denotational semantics 
allyn bacon 
smyth plotkin 
category theoretic solution recursive domain equations 
siam journal computing november 
joseph stoy 
denotational semantics scott strachey approach programming language theory 
mit press 
nico 
homomorphisms factorisation promotion 

technical report ruu cs utrecht university 
phil wadler 
views way pattern matching cohabit data abstraction 
technical report programming methodology group university goteborg chalmers university technology march 
philip wadler 
theorems free proc 
acm conference lisp functional programming pages 
philip wadler 
comprehending monads 
proc 
acm conference lisp functional programming 
wand 
fixed point constructions order enriched categories 
theoretical computer science 
hans 
programmierung mit und anwendung auf die auswertung 
technical report tum tu munchen 

