security static typing dynamic linking drew dean computer science laboratory sri international ravenswood avenue menlo park ca dynamic linking requirement portable executable content 
executable content know ahead time going executed know proper operating system interface 
imposes requirement dynamic linking 
time languages supporting executable content statically typable increased efficiency security 
static typing dynamic linking interact security relevant way 
interaction subject 
solution modeled pvs formally proven safe 
world wide web composed static html documents gif jpeg graphics fairly little concern security browsers 
main objective avoid buffer overflow problems lead execution arbitrary machine code 
web left research domain entered mass market security problem users wanted electronic commerce 
ssl protocols designed provide cryptographically strong identification web servers privacy protection information credit card numbers 
early implementation ssl problem seeding random number generator cryptographic protocols tricky design situation appeared hand 
java arrived 
java tremendously popular primarily due support embedding executable content world wide web pages 
course executable content dramatically changes security web 
java promoted addressing security issue problems 
java offers new challenge computer security protection mechanisms language 
course really partially supported darpa rome laboratory contract 
author address department computer science princeton university olden st princeton nj cs princeton edu java java marks trademarks registered trademarks sun microsystems united states countries 
copyright fl acm 
rights reserved 
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
appear fourth acm conference computer communications security april zurich 
old idea seen 
java meant safe language typing rules language provide sufficient protection serve foundation secure system 
important safety property mean program go wrong certain ways variable value consistent variable declaration function calls method invocation case java right number type arguments data abstraction mechanisms documented 
security java depends properties enforced 
described inspired java uses java concepts terminology systems base protection language mechanisms face similar issues 
critical issue design dynamic linking 
java statically typed language exists potential java applet run different environment verified leading security problem 
shown ability break java type system leads attacker able run arbitrary machine code point java security claims 
type theory developed field relatively little semantics linking linking security critical operation 
addresses design type safe dynamic linking system 
safe dynamic linking sufficient building secure system necessary linking break language properties 
rest structured follows 
section discusses related section gives informal statement problem section informally discusses problem ramifications solution section discusses formal treatment problem pvs section briefly discusses implementation assurance issues section concludes 
pvs specification provided appendix 
related little linking 
traditional view linkage editing informally linking performed linker static process replaces symbolic object modules actual machine addresses 
linker takes takes object modules unix files produced compiler assembler necessary runtime libraries unix files input produces executable program laying separate pieces memory replacing symbolic machine addresses 
static linking copies code unix registered trademark open standard library printf function data runtime libraries executable output 
alternative strategy dynamic linking 
dynamic linking old idea appearing multics systems popular unix pc worlds late early advent systems sunos microsoft windows 
dynamic linking delays replacement symbolic machine addresses program loaded memory disk 
practice dynamic linking lazy symbolic replaced time 
dynamic linking saves disk space memory needs copy library disk multiple processes share code assuming self modifying data areas memory 
dynamically linked programs start little slower statically linked programs generally problem modern cpus 
memory disk savings dynamically linked code offers increased flexibility 
bug fixes library routines require installation new libraries dynamically linked programs system acquire fix 
routines interfaces different behavior substituted behavior dynamically linked programs installed system changes 
feature essential executable content portable 
runtime system abstracts operating system system call interface portable set libraries 
libraries implementation platform dependent implementations interface java applet need know kind computer running 
unix macintosh pc operating systems cobol fortran pascal treated linking process replacing symbolic machine addresses 
compilers compile single file time detect variable declared differently different source files 
declaring variable integer file pointer leads unsafe program trying interpret integer pointer usually leads core dump 
protection java depends preventing users forging object type mismatch completely undermine system 
designed languages module systems provide support separate compilation problems 
introduced name way encode type information linking prevent inter module type errors standard linkers 
drossopoulou eisenbach considers type safety subset java 
accounts forward assumes looking entire program closed world 
model interleaving type checking linking program execution 
cardelli addresses type safety issues separate compilation linking 
introduces simple language simply typed calculus primitive module system supports separate compilation 
informally rigorously proves linking algorithm terminates algorithm successful resulting program type error 
hostname lookup sunos prime example default standard library provided sun uses sun nis look hostnames 
system administrator rebuild library internet domain name system 
compilers replace function names symbols encode argument return types function 
standard algorithm doing interferes interoperability various compilers machine 
hack introduced standard unix linkers way associate type information symbols 
type error means calling function wrong number type arguments number function 
assumes types known link time address mutually recursive modules 
janson removes dynamic linking multics kernel 
janson argues multics dynamic linker security relevant part security kernel 
redesign dynamic linking moves process happens user mode kernel mode 
sunos dynamic linker design similar 
dynamic linking java security relevant multics hardware rings protection 
situation java different situations 
java type information available link time type checking byte code verification interleaved dynamic linking 
safety system relies turn relies proper dynamic linking linker critical security multics case 
considers security critical interaction linking type checking 
informal problem statement java runtime system may interleave type checking linking program execution 
implementation javasoft netscape web browser takes advantage freedom 
implementations java statically typed need sure linking action invalidate results previously performed type checking 
linking invalidate type checking java system vulnerable time check time tocttou attack 
potential vulnerability follows applet downloaded verified 
part verification procedure involves type checking 
applet general composed multiple classes runtime library components arbitrary ways mutually recursively 
type correctness applet depends types external classes 
classes loaded type checking 
applet ask arbitrary class loaded class forname call 
class load new class place type checked system type safe 
actual rules exactly java classes loaded complicated proofs tractable simplified system described 
exact correspondence classes types subtle 
fisher mitchell model classes correspondence implementation types implementation types subtypes interface types define externally visible structure class 
interface types roughly correspond java interfaces 
say subtype written expression type context expression type required 
implementation types iff name 
java classes iff name classloader 
interface types structurally equivalent 
interface types fit nicely objects records model define structurally equivalent having fields corresponding fields type 
implementation type impl write corresponding interface type 
interested reader referred fisher thesis details 
need define standard terms type theory proceed 
gamma type context form gamma fx oe xk oe distinct identifier case represent classes oe implementation type 
notation oe assigns type oe 
gamma oe iff oe gamma 
define iff inter inter define gamma gamma gamma gamma gamma call gamma consistent extension gamma 
range java classes objects type checking 
write gamma mean type context gamma called typing judgment 
assume proposition holds proposition gamma gamma gamma gamma justification proposition combination mitchell add hyp axiom lemmas 
intuitive reading proposition consistently extend environment changing typing judgments type system satisfies proposition 
rigorous proof require formalization java type system see direction scope 
definitions relate security 
consider user preparing run java applet embedded web page 
system provides runtime libraries applet user control 
applet code completely author control compiled hopefully 
tested system copy runtime libraries 
user java runtime implementation may supply additional classes author doesn 
author know affect execution applet 
user wants know applet verified type checked applet adding changing type context verifier rejected 
mutual suspicion problem 
restrictions programmer user safely cooperate 
restriction linking program change type context gamma new type context gamma way gamma gamma summary limiting type context modifications consistent extensions safely perform dynamic linking presence static type checking 
rest considers formalization proof statement consequences ignoring limitation 
informal discussion linking restriction necessary condition linking operations break type safety language 
designers java provided flexible dynamic linking facility designed classloader mechanism 
basic system knows load link code local file system exports interface class classloader allows java program ask runtime system turn array bytes class 
runtime system know bytes came merely attempts verify represent valid java byte code 
byte code instruction set machine standard way transmitting java classes network 
class tagged classloader reader familiar object oriented type theory expect definition inter inter java objects really object java class hierarchy acyclic partial order just pre order statically sound subtype relation equality 
loaded 
class needs resolve symbolic asks classloader map name gives class object 
model passes classloader explicit argument prove safety 
original java development kit jdk implementation jdk place restrictions behavior 
led complete breakage type safety integers object vice versa 
type safety failure led untrusted applet able run arbitrary machine code completely compromising security java applets 
discussion sun language added definition java restricting safe behavior 
code implement restriction essentially linking restriction shipped expected shortly jdk 
absence linking restriction directly led problems jdk implementation 
rogue classloader break semantics java supplying inconsistent mappings names classes 
earlier jdk releases netscape navigator led complete compromise system 

bug jdk handling array classes 
java arrays objects suitable class definitions automatically generated 
possible trick system loading user defined array class program running aliasing memory location object integer 
static type checking performed real array class program loaded bogus array class request consistent extension type context 
bug supplied sun exploitable web applets 
led running arbitrary machine code completely compromising security system 
pvs specification specifies simple implementation dynamic linking 
restricts linking consistent extensions current type context 
shows relevant operations invariantly preserve consistency type context 
proves initial context cut version java runtime library consistent 
combination properties inductive proof safety system 
formal treatment pvs pvs prototype verification system current sri research project formal methods theorem proving 
pvs verify different projects including microprocessor floating point division fault tolerant algorithms multimedia frameworks users sri sites 
pvs combines specification language variety theorem proving tools 
proposition states security preserved program linked run consistent extension type context compiled 
actual implementation dynamic linking quite complex obvious particular implementation satisfies proposition 
builds model dynamic linking quite similar java implementation proves model ensures type safety 
writing concrete specification pvs proving desired properties get information pvs see www csl sri com pvs html specification looks functional program correctness proof 
specification writers prefer specification key properties defined axioms functions unspecified chose give concrete specification easier relate actual implementation 
pvs proof facilities strong specification verifiable undue difficulty 
pvs model noted model fairly closely related sun java implementation performs dynamic linking model java 
certain simplifications java model fixed design problems observed jdk implementation 
sun working system coincidentally certain features similar independent designs careful confuse results products 
model merely shows dynamic linking exist static typing 
pvs types core structure model classtable contains mappings environment mapping name classloader pairs second store mapping class objects 
terms environment store meant reflect similar structures programming language semantics 
environment associates names locations physical machine memory addresses store simulates ram 
indirection name classloader pairs classes exists linking change environment changes store 
allows show environment change time actual objects names bound 
note keep mapping name classloader pair list correctness proof classid associated name mapping partial function 
keep list set tell order things happened break 
define state safe iff name classloader pair maps classid 
declare classloader uninterpreted type element 
natural model java classloader mutually recursive datatype class pvs handle mutual recursion java implementation conveniently 
model uses classloader part key classtable suffices classloader uninterpreted 
class datatype represents classes model 
class resolved linked unresolved case class pointers classes unresolved symbols 
tempted resolved constructor pvs requires datatype non recursive constructor 
classid imported identifiers theory 
merely unique identifiers currently implemented obvious fashion integers 
better define theory identifiers representations model defined way set name classloader classid mappings monotonically increasing 
property safety definition sufficient 
formal proof mapping time invariant nice 

changing proofs 
plays role store semantics giving mapping classes 
pair consisting unused identifier 
represent objects type object merely records class object instance 
representation fairly suffices proofs 
pvs implementation structure model roughly follows sun java virtual machine implementation 
major exception pvs global variables mutation explicitly pass state system function 
rearranged data structures ease modeling 
primitive operations function takes classtable name class requested classloader returns list 
applies current store mapping classes result 
function takes classtable name classloader new class new class inserts classtable 
returns new classtable 
note insertion generates new classtable destroy old 
low level utility function enforce invariants supplied higher level 
function takes classtable old new classes appropriate classloader updates store iff appropriate class 
returns new classtable 
appropriate class returns unchanged classtable 
class loading define function modeled java function 
takes classtable name new class unresolved new class classloader 
returns pair new class updated class table 
invariants checked level 
corresponds java design protected method classloader called appropriate safety checks 
function plays role similar properly operating java classloader 
java system method runtime system uses request classloader provide mapping name class object 
model checks class provided runtime system checking result 
check classloader defined class return 
define new class 
class come contain assume valid classes tell pvs external exist input cons string construction specifying particular external 
function plays supporting role defined pvs allow forward 
function takes classtable class linked class classloader returns linked class updated classtable 
linking algorithm simple unresolved find class refers loading necessary create new classtable resolve 
function returns resolved classes may partially resolved recursive calls linking process 
resolve function modeled java method 
takes classtable class class loader links class respect classloader updates classtable 
returns new classtable 
classes classes operations ability create new instance class ask name class get class classloader load new class 
loading new class non trivial operation simply invokes 
java runtime system provides classes special sense java lang object root class hierarchy java lang class class class objects java lang classloader defines dynamic linking primitives 
classes play important roles system model behavior assuming pre loaded startup 
proofs offers contributions proposition simple statement necessary restriction importance overlooked especially initial design implementation java 
concept generic language type system satisfies proposition results 
operational semantics language inspection completely formal safety proof constructed 
drossopoulou eisenbach available began 
second contribution proof requirements proposition satisfied model 
proofs discussed high level pvs takes care details 
lemmas putative theorems labeled conjectures theorems establish result 
putative theorems checks specification conveys intent author 
formal proof theorems increases confidence correctness specification 
theorems show system starts operation safe state operation takes system safe state safe state 
theorems universally quantified class names classes class tables interleaving functions assuming function atomic unit safe 
theorems formally proven pvs brief outlines proofs 
details routine taken care pvs 
lemmas map function takes function list returns list results applying function element list 
simply asserts length resulting list equals length argument list 
proof induction length list definition map 
map standard function functional programming languages 
standard pvs definition slightly complicated equivalent map list function recursive list null null cons car map cdr endif proj lemma asserts independence environment mapping name classloader pairs classid lists store mapping classes 
lemma states looking name environment gives result matter store supplied 
proof induction size environment 
clearly true empty environment store referenced examination binding 
safe proj technical lemma needed proof resolve inv 
states safe classtable safe store replaced arbitrary store 
safety function environment store intuitively obvious 
proof uses lemma 
conjectures add putative theorem proven check understanding specification 
states looking class inserting returns class 
pvs automatically proves theorem 
resolve putative theorem states linking terminates producing class unresolved 
model failure find unresolved 
proof induction number unresolved 
clearly holds completely resolved class recursive call resolves class 
theorems forname inv case invariant 
states forname function preserves safety 
proof follows lemmas proj 
initial safe theorem states system initially starts safe state 
aid string lemmas theory written sam owre pvs proves theorem automatically 
initial state finite size safety property simple check 
inv case consider proving invariant 
states function safe sense bind name classloader pair class binding exists 
proof similar forname inv 
inv case invariant states preserves safety 
intuitive idea modifies store environment 
proof fairly complicated inv lemma proceeds induction number unresolved class 
resolve inv case invariant 
states resolve operation safe 
intuitively obvious resolve composition modifies environment 
proof uses inv lemma case split result 
returns list safe proj lemma leads desired result 
returns null result immediate 
implementation assurance discussed model dynamic linking proven safety property assumption 
nice result systems real world get implemented humans 
couple simplifications respect java 
class names assumed canonical form java requires mapping point 
correspondence needs handled consistently 

fact array classes classes names special form modeled 

failure locate class modeled 
assume failure halt program execution unspecified mechanism 
basic implementors class definition loaded exactly classloader 
simplest way runtime system track classes loaded ask classloader provide definition class 
assume classloader provide class fail consistently 
assurance level final system depend factors 
note mechanism conceptually simple specified pages 
proofs performed lists simple inductive proofs 
real implementation probably efficient data structure 
simple show data structures hash table satisfy required properties 
specification contains axioms essentially functional program sense shows exactly computed serve prototype implementation 
clearly dynamic linking part trusted computing base java similar systems system assurance level higher assurance dynamic linking 
presents models dynamic linking 
formal proof show dynamic linking need interfere static type checking 
system java closely related serve proof concept java implementors 
studying jdk implementation purpose modeling led discovery failure jdk netscape navigator 
proofs unduly hard generate greatly improve confidence safety dynamic linking 
acknowledgments reported done author visiting computer science laboratory sri international 
visit arranged peter neumann john rushby 
technical assistance possible provided david calvert natarajan shankar sam owre 
content presentation greatly enhanced comments andrew appel princeton university ed felten princeton university peter neumann john rushby natarajan shankar 
members laboratory stay pleasant productive experience 
cardelli semantics multiple inheritance 
information computation 
cardelli program fragments linking modularization 
proceedings th acm sigplan sigact symposium principles programming languages jan 
appear 
dean felten wallach java security hotjava netscape 
proceedings ieee symposium security privacy may pp 

dean felten wallach java security hotjava netscape 
computers attack denning ed nd ed 
acm press 
appear 
drossopoulou eisenbach java type system sound 
proceedings fourth international workshop foundations object oriented languages paris jan 
appear 
fisher type systems object oriented programming languages 
phd thesis stanford university 
fisher mitchell relationship classes objects data abstraction 
proceedings th international summer school mathematics program construction marktoberdorf germany lncs springer verlag 
appear 
lee dang weeks shared libraries sunos 
usenix conference proceedings phoenix az pp 

goldberg wagner randomness netscape browser 
dr dobb journal jan 
gosling joy steele java language specification 
addison wesley 
janson removing dynamic linker security kernel computing utility 
master thesis massachusetts institute technology june 
project mac tr 
lincoln rushby formal verification algorithm interactive consistency hybrid fault model 
computer aided verification cav greece june july courcoubetis ed vol 
lecture notes computer science springer verlag pp 

milner tofte harper definition standard ml 
mit press cambridge ma 
mitchell type systems programming languages 
handbook theoretical computer science van leeuwen ed vol 
formal models semantics 
elsevier science publishers ch 

organick multics system examination structure 
mit press cambridge massachusetts 
owre shankar rushby user guide pvs specification verification system 
computer science laboratory sri international menlo park ca feb 
volumes language system prover manuals new edition pvs version expected late 
rajan rangan vin formal basis structured multimedia collaborations 
proceedings nd ieee international conference multimedia computing systems washington dc may ieee computer society pp 

shankar srivas modular verification srt division 
computer aided verification cav new brunswick nj july august alur henzinger eds vol 
lecture notes computer science springer verlag pp 

srivas miller formal verification microprocessor 
applications formal methods hinchey bowen eds prentice hall international series computer science 
prentice hall hemel uk ch 
pp 

stroustrup design evolution 
addison wesley 
wirth programming modula nd ed 
springerverlag 
pvs specification pvs specification language builds classical typed higher order logic 
base types consist booleans real numbers rationals integers natural numbers lists forth 
primitive type constructors include forming function nat nat record nat list nat tuple types int list nat 
pvs terms include constants variables abstractions lambda nat applications mod record constructions cons null tuple constructions cons null function updates record updates cons 
note application access field record application proj access second component tuple pvs specifications packaged theories 
types theory importing string lemmas identifiers classloader type class datatype resolved name string list string loader classloader linked list class resolved 
unresolved name string list string loader classloader unresolved 
class classid type ident type list class type function classid class type classid classtable type list string classloader list classid object type cl class classloader nm string refs list string ldr classloader class unresolved nm refs ldr class null classtable null id classid ct classtable nm string cldr classloader recursive list classid cases proj ct null null cons hd tl tab proj ct db proj ct proj hd nm proj hd cldr proj hd tl db nm cldr endif measure length proj ct ct classtable nm string cldr classloader map proj proj ct ct nm cldr ct classtable nm string cldr classloader cl class classtable old ct nm cldr newid proj proj ct proj proj ct newid cl cons nm cldr cons newid old proj ct newid ct classtable cl class cldr classloader classtable proj proj ct id proj proj ct tab proj ct ct name cl cldr cases cons hd tl tab id hd null define ct classtable nm string refs list string cldr classloader class classtable cl nm refs cldr cl ct nm cldr cl ct classtable nm string ct nm foo list string cons foo null input cons string ct classtable nm string cldr classloader class classtable local ct nm loaded ct nm cldr null local cons loaded car loaded ct define ct nm input cldr endif car local ct endif ct classtable cl class cldr classloader recursive class classtable getclass string ct cldr cases cl null unresolved cl resolved name cl null loader cl null ct cl ct endif cons hd tl res getclass hd cases cl unresolved name loader resolved name tl loader cons res null resolved name loader linked resolved name tl loader cons res linked cldr measure length cl resolve ct classtable cl class cldr classloader classtable ct cl cldr cl cldr forname ct classtable nm string cldr classloader class classtable cases ct nm cldr cons hd tl hd ct null ct nm cldr newinstance class object cl cl class classloader loader cl getname cl class string name cl class java lang object null class java lang class cons java lang object null class java lang classloader cons java lang object cons java lang class null classtable java lang object java lang class java lang classloader ct var classtable nm var string cldr var classloader cl var class lemma function classid class list classid length map length proj lemma ct classtable nm string cldr classloader proj ct nm cldr ct nm cldr add conjecture cll ct nm cldr cl nm cldr cons cl cll resolve conjecture cl class ct classtable cldr classloader proj ct cl cldr null safe ct classtable bool nm string cldr classloader cll length ct nm cldr cll safe proj lemma ct mapping safe ct oe safe proj ct proj proj ct mapping forname inv theorem ct nm cldr safe ct oe safe proj forname ct nm cldr initial safe theorem safe inv theorem ct nm cldr safe ct oe safe proj ct nm cldr inv theorem ct cl cldr safe ct oe safe proj ct cl cldr resolve inv theorem ct cl cldr safe ct oe safe resolve ct cl cldr types 
