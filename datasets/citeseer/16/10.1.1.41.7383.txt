generic downwards accumulations jeremy gibbons school computing mathematical sciences oxford brookes university gipsy lane oxford ox bp uk 
email brookes ac uk 

downwards accumulation higher order operation distributes information downwards data structure root leaves 
concept originally introduced ad hoc way just couple kinds tree 
generalize concept arbitrary regular datatype resulting de nition inductive 
notion scans accumulations lists known proved fruitful expressing calculating programs involving lists 
gibbons generalizes notion accumulation various kinds tree generalization proved fruitful underlying derivations number tree algorithms parallel pre algorithm pre sums reingold algorithm drawing trees algorithms query evaluation structured text 
varieties accumulation lists leftwards rightwards 
leftwards accumulation labels node list function successors tail segment starting node passing information right left list rightwards accumulation labels node function predecessors initial segment node passing information left right 
similarly varieties accumulation trees upwards downwards 
upwards accumulation labels node function descendants subtree rooted node passing information tree downwards accumulation labels node function ancestors path root node passing information tree 
aw de nitions accumulations trees ad hoc 
formal relationship accumulations di erent kinds tree new kind tree considered scratch 
trend constructive algorithmics development theories copyright jeremy gibbons 
revised version polytypic downwards accumulations lncs mathematics program construction ed 
johan jeuring 
jeremy gibbons generic polytypic operations parameterized datatype 
name kind abstraction higher order polymorphism 
generic program sense eliminates unwanted ad 
categorical approach datatypes popularized malcolm early example generic programming allows single uni ed de nition operations map fold unfold parameterized datatype concerned 
bird generalize upwards accumulation arbitrary regular datatype unifying previous ad hoc de nitions 
generalize downwards accumulation arbitrary regular datatype 
dicult problem descendants node data structure kind tree form data structure type tree ancestors node general completely di erent type path 
conclude introductory section summary notation 
remainder structured follows 
section recall de nitions accumulations lists trees 
brie summarize theory datatypes section 
section discuss bird generic de nition upwards accumulation 
section develop generic de nition downwards accumulation section collect properties generic downwards accumulations 
section concludes 
functions type judgement declares value type type 
denotes type functions function application denoted juxtaposition identity function written id id unit type just element denoted unique total function type function const ignores second argument returns rst satis es const pair calculus functors denote separated sum cartesian product respectively binds tighter 
product projections fst snd product morphism called split fork type 
lists elements type list nite sequences elements type empty list denoted singleton lists list concatenation 
accumulations provide motivation intuition follows review de nitions leftwards rightwards accumulations lists known generic downwards accumulations functional programming upwards downwards accumulations binary trees 
bird generalization upwards accumulation generalization downwards accumulation specialized types reduce essentially de nitions 
accumulations lists standard leftwards rightwards accumulations lists de ned follows 
leftwards accumulation distributes information right left list 
traditionally confusingly called parentheses collect right hand list 
list list head non empty list head tail function head satis es head notation essentially haskell :10.1.1.41.7383
example addition operator passed argument list elements :10.1.1.41.7383
rightwards accumulation course distributes information opposite direction scanl list list scanl scanl scanl example scanl analogy trees clearer rst adapt standard list accumulations operate type non empty lists data plist wrap plist informally non empty list singleton wrap element pre xed non empty list type accumulations return list length argument list element longer 
clear leftwards accumulation lists kind upwards accumulation rename function plist plist wrap wrap jeremy gibbons returns rst element non empty list plist wrap example id rightwards accumulation call downwards accumulation list generalized extra parameter accumulating parameter appears result function label node 
accumulating parameter node function accumulating parameter label node 
plist plist wrap wrap example complicated example making generalization allowing accumulating parameter di erent type result labels compute running averages list averages accumulations binary trees elements datatype homogeneous binary trees trees internal external labels type data tree leaf bin tree tree tree leaf label bin label subtrees 
upwards accumulation trees fairly straightforward tree tree leaf leaf bin bin root root root returns root label tree root tree root leaf root bin generic downwards accumulations archetypical example upwards accumulation count descendants node sizes tree tree int sizes plus plus downwards accumulation little trickier need functions generating new accumulating parameters left children treated differently right children 
tree tree leaf leaf bin bin archetypical example downwards accumulation count ancestors node depths tree tree int depths label label datatypes section brie review construction regular datatypes style malcolm 
assume setting continuous functions pointed complete partial orders contrast malcolm setting total functions sets 
bifunctor datatype type functor type isomorphic isomorphism provided constructor destructor strict 
fokkinga meijer building reynolds show determines isomorphism terms call canonical xpoint functor 
strict function induces fold catamorphism fold universal property fold id necessarily strict function induces unfold anamorphism unfold universal property unfold id function map applies element argument words map action functor de ned fold unfold map fold id unfold id jeremy gibbons example 
datatypes running examples 

cons lists constructed functor data list nil cons list corresponding fold foldl list foldl phi nil phi left foldl phi cons phi right foldl phi haskell datatype de ned data left right corresponds roughly disjoint sum 
example function returns size length list fold list int foldl left right 

leaf labelled binary trees built functor data ltree bint ltree ltree corresponding fold foldt ltree foldt phi phi left foldt phi bint phi right foldt phi foldt phi function returns size number elements leaf labelled binary tree fold ltree int foldt left right 
internally labelled binary trees constructed functor data btree empty btree btree corresponding fold btree phi empty phi left phi phi right phi phi generic downwards accumulations function de ned follows btree int left right 
rose trees constructed functor list data rtree list rtree tree type rtree consists label type list children 
corresponding fold foldr list rtree foldr phi ts phi map foldr phi ts map xs applies function element list xs 
function de ned follows rtree int foldr list int int ns sum ns sum sums list integers 
ut generic upwards accumulations bird generalize upwards accumulation arbitrary regular datatype 
summarize construction 
related meertens generic de nition predecessors data structure 
section serves partly motivation provide intuition de nitions section upwards accumulations simpler downwards accumulations 
importantly part construction 
section assume bifunctor canonical xpoint 
labelled types essential idea upwards accumulation data structure computes partial results involved folding partial result fold subtree stored resulting data structure root subtree 
consequence approach result type upwards accumulation may di erent argument type result type label node argument type need 
example upwards accumulation leaf labelled binary tree produce homogeneous binary tree 
bird call datatype homogeneous binary trees labelled variant type leaf labelled binary trees give general construction 
jeremy gibbons de nition 
labelled type corresponding datatype canonical xpoint functor de ned 
ut informally labels type removed ensures node carries precisely label 
example 
datatype cons lists constructed functor functor induces labelled type non empty lists data nlist consn nlist type similar datatype plist section 
unfold type nlist phi case phi left consn left right consn right phi give folds ordinary datatypes unfolds labelled variants accumulation consumes ordinary datatype produces labelled 

datatype leaf labelled binary trees constructed functor functor induces labelled type homogeneous binary trees desired data htree htree htree type similar datatype tree section 
corresponding unfold htree phi case phi left left right right phi phi generic downwards accumulations 
datatype internally labelled binary trees constructed functor functor induces labelled type homogeneous binary trees just binary trees 

datatype homogeneous binary trees constructed functor functor homogeneous binary trees labelled type 
call type isomorphic labelled variant homogeneous non homogeneous type heterogeneous 
general independent generated type homogeneous 
particular constructing labelled variant idempotent operation 

datatype rose trees constructed functor list functor list list rose trees homogeneous 
corresponding unfold unfoldr list rtree unfoldr phi case phi bs map unfoldr phi bs purpose subsequent examples de nitions rational programmer come thought show de nitions instantiations constructions 
term instantiation little loosely literal instantiations involve extra super uous units suppressed 
example literal characterization gives cons lists instantiation corresponding type declaration data nlist consn nlist example suppressed super uous 
ut jeremy gibbons upwards accumulations upwards accumulation constructs labelled data structure type data structure type argument suitable argument fold data structure returned contains partial results obtained process computing fold de ne unfold unfold dependent 
type considerations reveal necessarily form 
simply corresponding fold fold de ne destruct node discard root labels id de nition 
de nition 
upwards accumulation de ned unfold fold id ut de nition illustrated 
dotted arrow product morphism induced independent parts diagram 
outf fst id outf 
snd id fig 

anatomy upwards accumulation example 
labelled variant cons lists non empty cons lists ual de ned terms generic downwards accumulations ual list nlist ual phi psi psi nil foldl phi nil left psi cons foldl phi cons right example function labels node list length tail segment starting node returning list form list nlist int ual de ned example :10.1.1.41.7383
labelled variant leaf labelled binary trees homogeneous binary trees ltree htree phi psi psi foldt phi left psi bint foldt phi bint right example function labels node leaf labelled binary tree size subtree rooted ltree htree int 
internally labelled binary trees labelled variant homogeneous binary trees uab btree htree uab phi psi psi empty phi empty left psi phi right corresponding sizes function trees btree htree int uab 
rose trees homogeneous unfoldr uar list rtree rtree uar phi unfoldr psi psi ts foldr phi ts ts corresponding sizes function rtree rtree int uar ut jeremy gibbons course taken literally de nition inecient program substructures rooted node folded independently exploiting fact results folding children node reused folding substructure rooted node 
fortunately immediate consequence de nition root data structure returned upwards accumulation fold original data structure straightforward matter calculate ecient characterization described theorem 
de nition 
function root returns root homogeneous data structure root fst ut lemma 
root fold ut proof 
proof depends universal property unfold id unfolds 
root root fst universal property unfold fst id fold id id fst id id fold id pairs fold ut theorem 
fold id root id ut proof 
properties unfold proof depends universal property fold id folds particular fold id generic downwards accumulations property calculate appropriate isomorphism datatypes id ua unfold id fold id id pairs fold composition distributes backwards fork isomorphism datatypes fold fold id fold lemma id root composition distributes backwards fork id root id id fold id root id ut improved characterization upwards accumulation takes asymptotically longer compute ordinary fold fold 
example 
cons lists ual list nlist ual phi foldl psi psi left consn phi left left psi right consn phi right right returns root rst element non empty list nlist consn 
leaf labelled binary trees ltree htree phi foldt psi psi left phi left left psi right phi right rooth rooth right jeremy gibbons rooth returns root label homogeneous binary tree rooth htree rooth 
internally labelled binary trees uab btree htree uab phi psi psi left phi left left psi right phi right rooth rooth right 
rose trees uar list rtree rtree uar phi foldr psi psi phi map returns root label rose tree rtree ts ut generic downwards accumulations just upwards accumulations downwards accumulation data structure returns data structure possibly di erent type labelled variant original datatype 
downwards accumulation di ers upwards accumulation takes extra accumulating parameter carry contextual information ancestors subtree 
section generalize function section generic downwards accumulation arbitrary regular datatype 
section assume bifunctor induced datatype labelled variant induced bifunctor 
essential ideas de ne function daf type 
operation characterizing particular accumulation type accumulating parameter result labelled data structure labels type write daf unfold unfold dependent 
type considerations reveal type generic downwards accumulations question de ne construct separately value type values type combine values single value type 
order combine values suppose function zip function partial de ned arguments shape 
particular constructs sum type arguments choices sum 
zipping gives discarding extra fst id yields required result second value easier construct 
applying second component input type yields value type 
discarding applying id produces required type equivalently 
rst value keep root labels discard subtrees second component argument type applying id second component 
produces values type 
suppose argument downwards accumulation complete job takes pair argument returns pair result 
rst component argument type accumulating parameter 
second component argument type data structure recursive components stripped away leaving labels attached node 
rst component result type label generated node result 
second component type contains accumulating parameters recursive calls subcomponent 
extra requirement second component result shape second component argument order subsequent zip combine 
illustrates process 
dotted arrow product morphism induced independent parts diagram 
shape preservation function downwards accumulation behaved respect shape sense precise 
intuitively produce appropriate collection new accumulating parameters recursive calls accumulating parameter call 
particular yields sum type accumulating parameters produced type variant argument type consumed 
jeremy gibbons id id id outf id fst id id id 
snd zip fst id fig 

anatomy downwards accumulation formalize follows 
shape data structure obtained discarding data data structure retaining structure 
particular shape value type type 
de nition 
shape ut require shape shape zipping data structures component construction outlined function zip function purely structural relying values type words polymorphic natural transformation satisfying free theorem zip zip generic downwards accumulations function opposite direction easy de ne unzip unzip fst fst snd snd requirement zip post inverse unzip zip unzip id composition way round general identity zip usually partial function data structures shape 
note unzip returns pair data structures shape 
hoogendijk thorough study functions zip generalizations involving functors pair setting relations 
merely assume existence possibly partial natural transformation zip required type post inverse unzip de ned 
putting conclude 
de nition 
function shape preserving shapes shape shape equivalently shape snd shape snd 
ut de nition 
shape preserving type downwards accumulation daf de ned daf unfold id id fst id zip point free characterization fst id zip id id id id harder comprehend easier calculate 
computed linear time takes constant time 
ut jeremy gibbons example 
de ne generic depths function depths daf const 
cons lists dal list nlist dal phi psi psi list list psi nil left left phi left psi cons right cx right cx phi right example depths function lists list nlist int dal phi phi int int int phi left left phi right right returning list form original list elements 

non empty lists dan nlist nlist dan phi psi psi nlist nlist psi consn left left left phi left psi consn right right cx right cx phi right strictly speaking shape preservation requirement forces extra unit result type phi dan nlist nlist simply discarded generic downwards accumulations left phi left right cx phi right de nitions example equivalent closer rational programmer written 
depths function non empty lists nlist nlist int dan phi phi int int int phi left left phi right right returning list form original list elements 

leaf labelled binary trees dat ltree htree dat phi psi psi ltree ltree ltree psi left left phi left psi bint right ct cu right ct cu phi right depths function trees ltree htree int dat phi phi int int int int phi left left phi right right 
internally labelled binary trees dab btree htree dab phi psi psi btree btree btree psi empty left left phi left psi right ct cu right ct cu phi right depths function trees jeremy gibbons btree htree int dab phi phi int int int int phi left left phi right right 
homogeneous binary trees dah htree htree dah phi psi psi htree htree htree psi left left left phi left psi right right ct cu right ct cu phi right depths function trees htree htree int dah phi phi int int int int phi left left phi right right 
rose trees dar list list rtree rtree dar phi unfoldr psi psi rtree list rtree psi ts zip cs ts cs phi map const ts zip list list list zips lists length produce list pairs 
depths function rose trees rtree rtree int dar phi phi int list int list int phi zs map const zs ut generic downwards accumulations example 
homogeneous types de ne paths function labelling node list ancestors 
heterogeneous type need label node heterogeneous list di erent nodes di erent kinds label 
want record direction taken intermediate node reach particular node data structure 
characterization paths incorporating re nements basis de ning downwards accumulations approach complicated taken :10.1.1.41.7383:10.1.1.41.7383
homogeneous types isomorphism 
write fg isomorphism direction 
de ne paths daf list list list const fst fg 
non empty lists paths function nlist nlist dan phi phi phi left left phi right right returning initial segments list 

homogeneous binary trees htree htree dah phi phi phi left left phi right right 
rose trees rtree rtree dar phi phi list list phi zs map const zs ut jeremy gibbons properties downwards accumulations section collect theorems properties downwards accumulations 
universal property fusion law special cases fusion map accumulation lemma 
earlier sections assume bifunctor induced datatype labelled variant induced bifunctor 
recall de nition daf unfold fst id zip id id id id universal property recall universal property unfolds unfold id downwards accumulation simply unfold obtain free universal property downwards accumulations 
theorem 
daf fst zip id ut proof 
daf da unfold fst id zip id universal property unfold id fst id zip id functors fst zip id ut generic downwards accumulations fusion law likewise corresponding fusion law unfolds fusion law downwards accumulations 
fusion law unfolds follows 
lemma 
unfold unfold id ut proof 
unfold unfold universal property unfolds unfold id unfold unfold evaluation id unfold id unfold functors leibniz id ut instantiating unfolds downwards accumulations gives rise fusion law downwards accumulations 
corollary 
daf daf zip id id zip id ut maps downwards accumulations common special cases fusion map downwards accumulation 
theorem 
map daf daf id ut jeremy gibbons proof 
map daf daf universal property map daf fst map daf zip id evaluation map da map fst daf zip id fst map daf zip id leibniz fst id zip id fst id zip id naturality zip pairs id ut theorem 
daf id map daf id id ut proof 
daf id map daf universal property daf id map fst daf id map zip id evaluation da fst daf zip id id map fst daf id map zip id leibniz evaluation map zip id map id id map zip id leibniz naturality zip id map id id map pairs relationship id map id map id id map id id id id map id id map leibniz id id ut accumulation lemma homogeneous datatypes seen example paths function homogeneous datatype expressed downwards accumulation 
accumulation lemma generic downwards accumulations downwards accumulations kind converse observation downwards accumulations expressed terms paths 
lemmas turned convenient program calculation 
section presents lemma 
note partial converse downwards accumulation homogeneous datatypes expressed terms paths 
particular paths function discards information distinguishing different children node downwards accumulation treats left child di erently right child expressed way 
approach taken de ning downwards accumulations hand involved polytypic de nition paths function maintained information :10.1.1.41.7383:10.1.1.41.7383
consequence accumulation lemma applied downwards accumulation downwards accumulation de ned construction complex 
de nition 
accumulating fold lists de ned follows afold list afold afold afold ut equation afold afold alternative characterization behaviour non empty lists 
reveals motivation name accumulating fold second argument acts accumulating parameter 
function called foldl haskell 
example 
length function lists de ned length afold ut theorem 
map afold paths daf const fst fg ut example 
depths function homogeneous datatype viewed computing lengths path depths map length paths jeremy gibbons theorem concludes depths daf const just characterization depths example 
ut proof theorem 
proof assume de ned example 
map afold paths paths map afold da fusion theorem daf afold id extract afold accumulation explore conditions 
daf afold id daf fusion zip id afold id id afold id zip id naturality zip pairs leibniz afold id id afold id pairs afold id id afold afold id commutes id absorbs id afold id id afold order extract afold accumulation nd afold id id afold afold id start right hand side id afold afold id fst fg afold afold const relationship afold const afold afold afold const afold const fst fg afold generic downwards accumulations obtaining desired 
map afold paths rst calculation daf afold id extracting afold daf ut shown generalize notion downwards accumulation arbitrary regular datatype building bird generalization upwards accumulation 
de nition unfold evidence usefulness appreciation author part taken long discover characterization higher order operator 
earlier version attempted solve problem constructing generic de nition downwards accumulation considering paths elements arbitrary data structure :10.1.1.41.7383:10.1.1.41.7383
path element records ancestors element data structure downwards accumulation consists fold mapped paths 
symmetrically descendants element data structure form subtree data structure upwards accumulation consists fold mapped subtrees data structure 
similar simpler example model path merely list elements include directions path consider nodes di erent kinds label :10.1.1.41.7383:10.1.1.41.7383
retrospect appears starting paths wrong way approach problem 
modelling paths arbitrary datatype involves linearizing type functor type reasons determine branching degree node 
quite complicated construction approach taken simpler 
advantage approach leads generic parametric higher order polymorphic polytypic ad hoc higherorder polymorphic construction 
mean construction semantic properties type functors concerned bird labelling construction 
mean construction induction syntactic presentation type functor style jeuring 
fact characterization general jeuring scheme required functor polynomial sum products regular jeuring allows :10.1.1.41.7383:10.1.1.41.7383
hoogendijk argues inherent superiority generic polytypic de nitions added bonus applicability regular non polynomial datatypes rose trees 
jeremy gibbons members problem solving club oxford university computing laboratory especially richard bird jes pedro borges helpful suggestions comments ross paterson anonymous mathematics program construction science computer programming referees suggested improvements 
commuting diagrams drawn paul taylor macros 

richard bird oege de moor paul hoogendijk 
generic functional programming types relations 
journal functional programming 

richard bird 
promotion accumulation strategies transformational programming 
acm transactions programming languages systems october 
see 

richard bird 
addendum promotion accumulation strategies transformational programming 
acm transactions programming languages systems july 

richard bird 
theory lists 
broy editor logic programming calculi discrete design pages 
springer verlag 
available technical monograph prg programming research group oxford university 

richard bird jeremy gibbons geraint jones 
formal derivation pattern matching algorithm 
science computer programming july 

maarten fokkinga erik meijer 
program calculation properties continuous algebras 
technical report cs cwi amsterdam january 

jeremy gibbons 
algebras tree algorithms 
phil 
thesis programming research group oxford university 
available technical monograph prg 

jeremy gibbons 
upwards downwards accumulations trees 
bird morgan woodcock editors lncs mathematics program construction pages 
springer verlag 
revised version appears proceedings massey functional programming workshop 

jeremy gibbons 
deriving tidy drawings trees 
journal functional programming 

jeremy gibbons 
polytypic downwards accumulations 
johan jeuring editor lncs proceedings mathematics program construction sweden june 
springer verlag 

jeremy gibbons geraint jones 
appreciated unfold 
proceedings third acm sigplan international conference functional programming pages baltimore maryland september 

paul hoogendijk 
generic theory datatypes 
phd thesis tu eindhoven 

paul hoogendijk roland backhouse 
datatypes commute 
eugenio moggi rosolini editors lncs category theory computer science pages 
springer verlag september 
generic downwards accumulations 
patrick jansson johan jeuring 
polyp polytypic programming language extension 
conference record popl th acm sigplan sigact symposium principles programming languages pages 

richard ladner michael fischer 
parallel pre computation 
journal acm october 

ian macleod 
query language retrieving information hierarchical text structures 
computer journal 

malcolm 
data structures program transformation 
science computer programming 

lambert meertens 
steps theory rose trees 
cwi amsterdam ifip working group working rom 

lambert meertens 
paramorphisms 
formal aspects computing 

john peterson kevin hammond lennart augustsson brian boutel warren burton joseph fasel andrew gordon john hughes paul hudak thomas johnsson mark jones erik meijer simon peyton jones alastair reid philip wadler 
haskell report 
www haskell org report april 

edward reingold john 
drawings trees 
ieee transactions software engineering march 

john reynolds 
semantics domain ow diagrams 
journal acm 

david skillicorn 
foundations parallel programming 
number international series parallel computation 
cambridge university press 

philip wadler 
theorems free 
functional programming languages computer architecture pages 
acm 
