symmetry breaking distributed networks alon itai michael rodeh computer science department ibm israel scientific center technion israel institute technology technion city haifa israel haifa israel ring processors required design processors able choose leader uniquely designated processor sending messages ring 
processors indistinguishable exists deterministic algorithm solve problem 
overcome difficulty probabilistic algorithms proposed 
algorithms may run forever terminate finite time average 
synchronous case algorithms simplest requires average transmission bits time 
sophisticated algorithms trade time communication complexity 
processors asynchronously average nlogn bits transmitted 
cases size ring assumed known processors 
size known finding may done high probability algorithm may yield incorrect results nonzero probability values difficulty insist correctness processors may explicitly terminate 
entire ring reaches inactive state processor initiates communication 

network processors required program processors solve network problems adding numbers stored local memory processors finding maximum 
task easier processors distinguishable having unique names 
processors identical problem symmetric solving global network problems harder 
concrete example consider ring cycle indistinguishable processors id discuss global problems choosing leader uniquely designated processor processor knows leader ii finding size ring 
angluin investigated problem choosing leader milne milner mm model distributed systems results may applied models 
shown exists single program runs vertices ring arbitrary size designates unique leader finite time 
fundamental phenomenon symmetry broken allowing infinite computation erroneous result 
global information knowing size ring help 
termination correctness compromised shall construct probabilistic algorithms algorithms usually terminate correct result 
assume processors identical independent random number generator 
probabilistic algorithms symmetry breaking shared memory environment see 
theme break symmetry develop probabilistic routine suggest improve solutions routine test correctness proposed solution 
obviously interested efficient algorithms communication complexity number bits transmitted low 
problem choosing leader known example case correctness achievable 
proven sections section discusses synchronous case section algorithms asynchronous case 
problem choosing leader easier august metric networks 
example processor unique id processor maximum id may serve leader bu cr hs pe 
problem finding size ring discussed section 
problem directly related termination 
usually processor computed required value aware fact terminates 
algorithm processor terminates processors terminated 
activities may cease processors reach state initiate communication receiving message pending messages system 
weaker notion message termination 
external observer may example detect message termination examining links 
section show notions distinct value known exists algorithm find processor terminates section 
exists terminating algorithm bounded probability error section 
resort weaker notion message termination 
section develop algorithm polynomial time communications cease high probability computed result correct 
results appeared ir 
correcting minor errors reformulated computational model selection verification paradigm unifying approach algorithms 
contains improved algorithm choose leader asynchronous ring section algorithm find possible section 
ir abrahamson considered subproblem verification verifying live processor 
gave upper lower bounds asynchronous rings known rings estimate exists 
considered message termination considered probability error 
galil dg shown lower bound average time required finding maximum ring average taken distributions input 
pa itai give lower bound randomized algorithms 

choosing leader synchronous ring lord august 
model unidirectional ring consists processors 
connected directed edges processor possibly infinite set states 
network synchronous time divided infinite number time slots 
processors start executing time slot 
time slot processor reads message sent time slot message exits exactly state transition perform arbitrary computation may send message new state message sent depend previous state message sent previous time slot 
algorithm ring state diagram processors 
time slot state network completely determined state processor messages sent time slot 
processor halting state state transitions lead back state generating messages 
algorithm terminates processors arrive halting state 
time complexity synchronous algorithm number time slots algorithm terminates message complexity bit complexity total number messages bits sent processors entire run algorithm 
add randomization assume processor infinite sequence real numbers th transition depends 
message complexity algorithm function denoted 
values drawn uniform probability average 
reason choosing random real numbers random bits algorithms perform actions probability power simulated finite number bits 
aim study effect symmetry restricted attention network topologically symmetric processors indistinguishable state diagram 
particular unique id 
processor may independent random number generator modeled aforementioned infinite sequence section assume processors know size ring 
computations indices done modulo size ring 
lord august may different algorithm 

choosing leader ring show leader may chosen average bit complexity 
exact constant depends amount memory processor 
subsection processors logn bits record choices processors 
subsection local memory required bit complexity reduced 
algorithm proceeds phases time slots 
phase processors active 
phase active processors may inactive eventually reducing 
phase active processor decides probability candidate 
phase processor calculated number candidates phase 
sole candidate leader 
active processors phase candidates current phase 
phase useless active processors remain active number reduced 
time processors active start algorithm 
initially compute candidate sends pebble phase 
pebble passed ring returning phase exactly time slots originator 
processor deduces counting number pebbles passed 
program gives details program processor denote probability active processors chose candidates 
active processors chose candidate probability theorem denote expected number phases required reduce number active processors 
converges 
proof calculate 
lord august initialization time active candidate true case time time divisible pebble buffer send ii time divisible including case time candidate terminate am leader terminate am leader active candidate executed active time candidate true send pebble candidate false 
program definition 
observations claim proof induction basis 
induction step induction hypothesis inequality holds monotonic decreasing sequence converges 
lord august claim lim proof product factors converges fixed second converges 

claim converges proof definition 
converges converges 
claim 
proof inspection 
monotonically increases 

claim fixed converges function proof claim converges 
claim claim bounded away 

claim 
proof 
claim proof definition 
sum positive terms positive 
claim claim lord august claim exists aa proof claim sufficiently large claim claim converging sequence proof cauchy convergence criterion suffices show exists choose sufficiently large claim shows limit tends infinity claim claim converges limit claim proof 


claim 
claims get claim simple calculation yields 
completing proof theorem lord august combining results yields corollary ring synchronous processors know may choose leader ln time average 
average bit complexity ln 
proof processors active processor sends pebble time probability processor sends pebble average number pebbles sent phase kp 
expected bit complexity phase corollary follows average number phases converges phase requires time slots 

better algorithms choose leader 
algorithm processors counted number candidates 
follow suggestion lempel lem consider algorithm uses additional information available processors 
algorithm exhibits tradeoff time communication complexity introducing parameter known processors 
algorithm proceeds phases length prior termination processors active start phase sending pebble probability processor assign bit vector follows iff pebble passed th time slot phase 
different processors circular shifts processor calculate processors 
distinct leader chosen vertex lexicographically minimum 
algorithm rerun 
notice processors remain active leader chosen 
state proof theorem ir improved algorithm expected number phases converges expected bit complexity processor converges space complexity processor needs bits space compute lexicographically maximal word 
expected number pebbles generated phase relatively small 
keep track consecutive zeroes reduce space complexity 
allowing pebbles declaring phase useless time bit complexity increased slightly space complexity reduced bits 
lord august results exhibit tradeoff time communication order reduce communication time spent 
expected number phases 
communication cost processor 
decreasing expected number phases increases infinity bit complexity decreases processor 

choosing leader asynchronous ring 
model previously assumed global clock governs actions processors communication 
assume clock exists processor clock relation processors 
main issue distinction randomization nondeterminism introduced asynchrony processors 
shall try brief formal expense omitting straightforward generalizations 
global clock longer say message sent arrives time slot 
associate directed edge buffer unbounded size 
message sent enters buffer associated edge 
processor waits longest waiting message released buffer 
processor changes state may send message may add computation time time outgoing message held buffer assume state transitions instantaneous time message stays buffer unbounded depend states processors 
instance state network completely determined state processor contents buffers 
initially buffers contain wake message 
arrival message message processor activates computation 
activity network event driven arrival messages 
assume time message arrives 
order arrivals governed schedule define sequence edges edge appears infinitely 
schedule determines buffer sends message target processor 
requirement edge appears infinitely lord august implies message sent eventually arrives guaranteeing property closely related weak channel fairness defined 
algorithm asynchronous ring state diagram processors 
ring schedule set wakeup messages execution algorithm completely determined 
message complexity total number messages takes terminate terminate 
sup 
randomization introduced section infinite sequences 
th transition depends 
message complexity algorithm 
drawn uniform probability average 
defined behavior time depends values 
need finite 
sup 

extensions model ring bi directional edge buffer variants may considered processors agree local directionality agreement promised 
topology network may directed graph ring 
processors may nondeterministic 
may ask message state terminating computation processors probability termination 

choosing leader ring preview angluin shown exist algorithm find leader ring indistinguishable processors 
argument considers ring processors antipodal processors state 
processor decides leader image comes leaders chosen algorithm terminate 
lord august lemma election algorithm ring processors know may terminate leader exists algorithm properties selects unique leader 
ii terminates correctly terminates correctly 
iii terminates probability chooses unique leader probability terminates correctly probability 
proof algorithm terminate incorrectly selecting leader ii choosing leader 
overcome difficulty leader chosen sends verification message ring 
having special field message count number processors message travelled sender recognize messages compare value field 
additional candidates leader algorithm 
distinguish various invocations phase numbers may added 
overcome second difficulty algorithm leader chosen 
known suitable distributed termination detection algorithm adapted situations superimposed algorithm bf 
technique detect termination sf processor individually check processors halted 
incorrect termination replaced algorithm 
assume terminates probability chooses unique leader probability 
probability invoked exactly times average number invocations proves probability diverge 

algorithm consider selection algorithm initially processors active 
general phase processors may inactive relay messages received 
active processor performs lord august step times inactive 
choose probability send choice active processor 
active processor inactive chose active processor preceding chose 
simple algorithm uses ideas dolev rodeh peterson pe 
algorithm ends processor remains active processor may inactive chose processor chose 
algorithm guarantee leader chosen possible processor remained active 
follow lemma introduce verification phase active processor sends counter ring check active processor 
give intuitive reason logn complexity nlogn bits selection phase consists rounds 
probability active processor inactive round chosen predecessor chose 
expected number processors inactive round pr processor inactive 
general quarter active processors round inactive active processor 
expected number rounds processor remains active log choose log logn probability processor remains active rounds small 
expected bit complexity repetition negligible 
bit complexity round selection phase edge exactly bit transmitted 
total bit complexity selection phase nlogn 
verification phase active processors sends counter logn bits travels distance total 
expected value expected cost phase nlogn 
probability repetition small total cost nlogn 
give formal analysis due prof number active processors inactive stage algorithm 
notation lord august pr develop formula distribution notice order processors inactive round choices processors form runs 
runs start places ways processors inactive factor arises border points possibilities processor chosen 
processors choices ways pr 
generating function immediate pr second moments easy compute successive stages independently conditioned number active processors stage 
results may replaced overcome difficulty define surrogate process 
connection processes implies 
investigate 
lord august lemma 
proof definition pr 
solving recurrence relation get 
similarly pr pr 
get 
lord august lemma pr proof chebychev inequality pr corollary logn log expected communication complexity algorithm nlogn bits 
proof case pr average cost selection phase nlogn 
cost verification phase nlogn 
probability leader chosen selection phase expected cost additional phases negligible 

finding size ring 
definition problem ring processors processor special register algorithm finds size applied state message terminates contains value lemma exists algorithm find size ring leader requires time units bits ring size ring asynchronous finding requires messages nlogn bits 
bounds tight 
concentrate finding setup indistinguishable processors 

impossibility results algorithm partially correct respect predicate ring holds state message terminates 
partially correct algorithm finding ring terminates note trivial algorithm terminates vacuously partially correct 
lord august theorem processor terminating algorithm partially correct ring size partially correct ring size 
proof similar angluin 
corollary exists partially correct processor terminating algorithm calculate size rings 
algorithm correct investigate algorithms correct time 
algorithm correct probability respect ring wakeup messages distribution schedule terminates probability holds greater theorem shows insist processor termination probability error bounded away 
theorem exist processor terminating asynchronous algorithm calculate size ring correct probability 
proof suppose contrary algorithm existed 
exists ring 
schedule wakeup messages probability finds size particular may assume algorithm starts single wakeup message schedule sweeps ring 

time slot enables edge modn intend show probability larger certain processors ring larger run erroneous size ring processors simulate processor difficulty simulation behavior processor depends messages receives random sequence 
probability zero processors exactly random sequences state incorporates prefix random sequence probability zero states identical 
exhibit series messages positive probability occurring cause processors decide size ring show probability random sequences causing processor participate computation positive 
probability processors similar sequences 
making ring larger probability tends processors lord august exhibit behavior processors ring size execution triple 
sequence messages 
prefix schedule integer 
meaning time slot enabled message read 
processor read value written halting state 
execution correct size ring 
note correct execution processors set value processor terminates correctly exist finite executions 
execution bit complexity correct zero 
random variable lemma exists positive probability natural number pr proof lemma hold pr 
pr means probability infinite 
step finite number bits transmitted infinite number steps infinite algorithm diverges 
lemma hold probability algorithm halt correctly 
particular probability algorithm correctly computes size ring smaller partially correct algorithm may applied rings various sizes 
communication pr 
lemma exists correct execution probability execution observed 
proof lemma subsequent exist probability bit complexity finite number correct executions bit complexity exists correct execution probability occurred 
ring consisting segments copy 
lord august 


consists wakeup message edge segment 

facilitate discussion partition time slots consisting time slots 
consists time slots 
second time slots 
sweeps ring segment segment 
th time slot edge enabled th edges form enabled 



consider execution lemma denote event behaved time slots sent messages set set 
lemma pr ii pr iii pr 
proof issued communication processors rings initial state exhibited identical behavior 
ii entire algorithm received messages probability behaved particular receiving messages time slots probability behavior point 
iii similar ii 
vertex effected vertices distance partition disjoint consisting segments 
lord august lemma th vertex 
pr mod 
proof induction basis 
follows lemma 
induction step 
lemma ii pr induction hypothesis states pr law conditional probabilities pr pr pr case follows similarly lemma iii 
proof theorem shown probability th vertex concludes erroneously size behavior th vertex disjoint statistically independent 
probability vertex concludes size expression tends zero approaches infinity 

finding choosing leader section give partially correct algorithms choose leader known lie interval 
known precisely processors unique id processors recognize messages 
may fact message travelling distance visits processors passes originator exactly 

synchronous model proposed algorithm algorithms section consists phases selection verification 
selection phase iterated times candidates leadership chosen 
iteration lasts time slots 
time slot iteration processor chooses id probability id 
processor id called candidate 
candidate sends bit time slot pass additional bits may received 
processors wait receiving bit send 
processor chose id communication iteration processors aware lord august selection phase repeated 
selection phase terminates iteration exist candidates 
verification phase consists 
subphase necessarily processors know single candidate chosen 
remaining processors learn second subphase 
subphase verification phase similar selection phase candidates selection phase initiate communication send single bit time slot pass bits may received 
processors send bit receiving 
entire subphase lasts time slots 
candidate message sent subphase 
subphase consists time slots message complete tour candidate receive message subphase 
candidate exist candidates distance 
candidates receives message originating candidate receives message subphase knows candidate 
consequently subphase candidate exists candidate knows necessarily know 
single candidate subphase sure 
purpose second subphase notify processors 
second verification subphase similar previous phases lasts time slots 
candidates know candidate initiated communication pass bits may arrived 
remaining processors just pass bits receive 
consequently bits sent subphase remains single candidate 
sensing absence communication subphase processors discover single candidate leader 
bit sent second subphase processor receives bit candidate 
case entire algorithm 
analyze complexity note candidate chosen selection phase communication 
regardless number times selection phase repeated invocation algorithm selection phase requires exactly bits communication 
verification subphase requires bits single candidate remained bits 
lord august second subphase requires exactly bits 
single candidates remains invocation requires bits invocation requires bits 
time invocation sel sel number times selection algorithm iterated single invocation algorithm 
expected value sel probability algorithm depend random variable denote number candidates 
pr 
note probability processor chose id 
probability single iteration selection phase sufficient pr sel pr pr expected number iterations selection phase sel pr sel probability entire algorithm performed pr alg pr pr pr pr sel pr expected number iterations entire algorithm alg lord august exp exp exp exp exp exp exp get alg exp exp theorem synchronous ring leader chosen expected bit complexity alg expected time alg 
sel sel alg exp exists tradeoff consider equation fixed decreases alg converges converges 
infeasible sel approach corollary synchronous ring leader chosen expected bit complexity expected time 
proof choose 
entire problem trivial 
need consider bound alg decreasing function alg exp exp 
expected bit complexity alg 
sel expected time lord august alg 
sel 
leader elected size ring sending bit ring measuring time slots takes travel 
convey size processors bit traverse ring twice size ring equal number time slots second traversal 

asynchronous model algorithm section applicable 
difference known verification message travel distance 
processor message stops knows leader message passes leader times 
processor notifies unique leader elected 
expected communication complexity message total nlogn logn nlogn bits 
finding requires additional nlogn bits 
crossing sequence argument may show nlogn lower bound deterministic algorithms 
formal proof may results mz 

message terminating algorithm find low probability error section asynchronous algorithm properties processor terminates 
time communication complexities polynomial 
ii probability error depends external parameter arbitrarily small independently size ring 
execution algorithm processor candidate size ring initially 
processor may create pass cancel messages 
messages tests may increase confidence show value rk successive tests conducted 
tests fail indication implies processor increases repeats test rk times new value 
algorithm terminates processors tested value finished tests successfully 
point communication issued processors 
shown algorithm terminates termination lord august processors value high probability value equal 
description algorithm prior termination processors active 
active processor tries send message carrying direction ring distance message returns message terminates node knew message deduce update active 
main difficulty known processor identify messages certainty 
help identification processor randomly chooses identity id identity incorporated message sent message contains fields id count 
message starting initially id assume message id count terminates count 
cases may arise case message cancelled 
processor sets originates message id 
processor sent message id id processor originator message proceed 
id id originated message id processor runs erroneous message returned 
test succeeded rk times additional test initiated 
formal description 
initially processor randomly chooses identity id prob id executes procedure originate 
procedure originate integer times delete messages input buffer send id time initialization processor ready send receive messages 
input buffer empty reads message input buffer sends 
lord august receiving message id count processor executes program 
program uses procedure confirm 
properties algorithm lemma algorithm count ii proof count increased lines turn called count 
ii max initially may increased line case count message originate id id node distance deduce increasing ii holds 
value nondecreasing 
processor originates messages value total number messages originating processor rn consequently procedure confirm times times send id count originate send id count originate count send id count id id skip id random confirm originate true program lord august algorithm finite lemma communication complexity rn messages logn bits 
denote final value lemma shows algorithm consistent 
lemma processors proof suppose contrary exist processors procedure originate increases message carrying existed 
message cancelled result arrival message 
message disappear node sent message value exactly times 
message carrying succeeds passing node particular increasing denote processors 
denote common value sends messages id 
id 
messages terminate sent identical messages increase 
consequently id id 
id id 
equivalence relation defined follows fv exists lf mod 
discussion clear fv id id 
id id 

equivalence classes containing processors 
gcd lf mod lg 

equivalence classes 
probability id id equivalence class probability holds 
hold equivalence classes probability error ra lemma prime probability error lord august ii probability error equal nr proof follows fact prime gcd 
ii follows gcd 

limiting size buffers time messages 
follows initially processor sent message new messages generated old ones cancelled 
implies size input buffers exceed large space requirement nlogn excessive 
size buffer limited provided processor receive message output buffer full 
deadlock occur buffers full 
space requirement reduced logn bits processor 
summary substituting nr yields theorem exists message terminating algorithm find asynchronous ring error probability communication complexity loge messages logn bits space requirements logn bits processor 

conception distributed programming face problem symmetry example processors demanding resource 
investigated effects symmetry distributed randomized algorithms 
processors recognize messages problems solvable asymmetric network algorithmic solution symmetric case 
problems solvable algorithms greater complexity processor acts independently message sent times 
natural continuation look types networks 
asymmetric networks identical processors take advantage asymmetry topology network known 
lord august pointed negative results applicable network independent algorithms 
exists terminating algorithm choose leader find interesting problems reliably maintaining leader symmetric network subject processor communication failure 
ii developing lower bounds complexity probabilistic algorithms symmetry breaking rings general networks 
lord august angluin local global properties networks processes th annual acm symp 
theory computing los angeles california april 
abrahamson adler kirkpatrick probabilistic verification ring th acm symp 
principles distributed computing podc august 
bf francez compositional approach superimposition th acm symp 
principles programming languages popl san diego ca jan 
bo existence symmetric algorithm find leaders networks communicating sequential processes tr univ paris appear acta informatica 
bu burns formal model message passing system tr indiana university sept 
cr chang roberts improved algorithm decentralized extrema finding circular configurations processes comm 
acm vol 

dg galil lower bound asynchronous distributed computation focs 
dolev rodeh nlogn unidirectional distributed algorithm extrema finding circle 
journal algorithms 
franklin improved algorithm decentralized extrema finding circular configuration processes 
acm vol 
francez fairness text monographs computer science series gries ed springerverlag 
hs hirschberg sinclair decentralized extrema finding circular configurations processes comm 
acm vol 
nov 
itai moran preparation 
ir itai rodeh symmetry breaking distributed network proceeding nd annual ieee symp 
foundations computer science focs 
distributed systems formal approach information processing northholland pub 
amsterdam 
lem lempel private communication 
mm milne milner concurrent processes syntax journal acm vol 

mz mansour bit complexity distributed computations ring leader inf 
computation vol 

lord august pa lower bound probabilistic distributed algorithms research report cs univ waterloo august 
pe peterson nlogn unidirectional algorithm circular extrema problem ieee transactions programming languages systems vol 

rabin probabilistic algorithms proc 
symp 
new directions results algorithms complexity traub ed academic press 
rabin choice coordination problem acta informatica 
sf shavit francez new approach detection locally indicative stability proc 
icalp rennes france july lncs ed 
springer verlag 
lord august 
