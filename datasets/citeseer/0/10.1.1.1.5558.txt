implementing testing virus throttle jamie matthew williamson trusted systems laboratory hp laboratories bristol hpl may st mail jamie milieu net matthew williamson hp com build previous theoretical describe implementation testing virus throttle program new approach able substantially reduce spread damage caused mobile code worms viruses 
approach different current signature anti virus paradigms identifies potential viruses network behaviour preventing programs entering system seeks prevent leaving 
results show approach effective stopping spread real worm nimda second different configurations 
internal accession date approved external publication proceedings th usenix security symposium th august washington dc usa copyright hewlett packard implementing testing virus throttle build previous theoretical describe implementation testing virus throttle program new approach able substantially reduce spread damage caused mobile code worms viruses 
approach different current signature anti virus paradigms identifies potential viruses network behaviour preventing programs entering system seeks prevent leaving 
results show approach effective stopping spread real worm nimda second different configurations test worm 
cnet dubbed year worm confirm highspeed mobile code forming majority entries top infectious programs 
weekend completed worm infected currently estimated machines minutes caused major network disruption 
finding effective ways prevent activity high priority 
provides just extremely effective way halting propagation jamie jamie milieu net matthew williamson matthew williamson hp com hewlett packard labs bristol may certain classes worms 
approach virus throttling observation normal activity machine fairly outgoing connections new machines regularly connect set machines 
contrast fundamental behaviour rapidly spreading worm attempt outgoing connections new machines 
idea virus throttle put rate limit connections new machines normal traffic remains unaffected suspect traffic slowed quickly detected stopped 
approach different current approaches key ways focuses network behaviour virus prevents certain types behaviour case attempted creation large number outgoing connections second 
unique stopping mobile code entering system restricts code leaving 
lastly connections allowed rate delayed dropped system tolerant false positives robust 
give detailed description implementation virus throttle experimental setup results number tests 
tests show virus throttle able quickly detect prevent worms spreading infected machine 
example throttle able nimda worm second 
furthermore throttle prevents subsequent infection effect global spread virus depend widely deployed 
results show machines installed throttle global spread real constructed worms substantially reduced 
throttled machines contribute network traffic spite infected significantly reducing amount network traffic produced virus 
section section paints background stands briefly reviewing mobile code propagates discussing current approaches limiting propagation 
goes outline foundations perspective briefly reviews related 
section describes detail design implementation virus throttle performance experimental setup describe section 
concluding remarks section 
background section offer brief review mobile code current approaches limiting spread 
go introduce conceptual framework rests section summary related 
mobile code interested class software broadly known mobile code 
purposes define mobile code pragmatically program able transfer system system little human intervention 
examples mobile code real life common viruses worms increasingly prevalent feature internet 
mobile code propagate different media example removable storage particularly interested propagation networks restrict discussion code spreads medium 
technical difference exist virus worms follows terms mobile code interchangeable 
archetypal piece mobile code general seen repeating cycle composed distinct stages 
code perform form scan attempt locate target machines vulnerable infection attempt exploit target machines 
successful exploit allow mobile code transfer copy target machine scan exploit transfer cycle 
current approaches current approaches virus protection involve preventing virus entering system predominantly signature detection methods 
methods concentrate physical characteristics virus program code parts code create unique signature virus 
programs entering system compared signature discarded match 
terms stage scan exploit transfer cycle described current approaches seen focusing transfer stage 
approach fairly effective protecting systems limitations number virus samples increases decrease effectiveness 
fundamentally reactive case case approach new signature needs developed new virus variant appears 
signature development usually performed skilled humans able produce certain number signatures time 
number viruses increases time initial detection release signature increases allowing virus spread interim 
furthermore viruses techniques polymorphism memory residency sidestep signature detection entirely 
agents complex systems alternative fruitful approach gained viewing mobile code autonomous agent acting complex system 
paradigm shift leads emphasis different concepts allows vast amount literature complex adaptive systems fields concerned entities drawn 
example viewed agent question agent behaves environment inhabits important purely mech details construction current approach described section 
distinction mechanism behaviour lead simple potentially powerful 
virus able instantiate effective spreading mechanism extremely large number ways requiring separate signature number ways virus behave spread effectively limited 
especially case class high speed worms increasingly prevalent due high speed nature need scan large number hosts second 
behaviour powerful discriminator employed current signature methods potentially allows automatic identification removal entire class worms 
considering behaviour leads obvious insights productive focus preventing viruses leaving system opposed stopping entering strategy taken current methods 
seemingly altruistic approach may sight appear ineffective williamson discussed section indicates extremely preventing spread viruses networks 
related approach related behaviour blocking messmer seeks specify policies defining normal acceptable behaviour applications 
application breaches policy reported administrator 
approach take differs able automatically respond abnormal behaviour administrator loop respect 
benign facet response particularly important throttle tolerant false positives 
example benign response intrusion detection application somayaji forrest application implements response relation abnormal sequences 
discuss various ways hosts prevented participating network attacks describe tool angel prevent systems participating attacks 
angel relies signature algo rithm detect attacks inspecting network packets predefined sequences data example shellcode unusual requests contrast behaviour approach 
virus throttle outlining context section go give detailed explanation design implementation virus throttle initial description concept theory simulation 
main focus section tcp virus throttle tested udp smtp exchange similar designs 
design virus throttle program limits rate outgoing connections new machines host able time interval 
purposes simplicity section assume host unique address source ip address implementation described allows multiple source ip addresses 
connections remote machine established known way handshake initiator connection source machine sends tcp syn packet target machine identified destination ip address 
target machine sends back syn ack packet source machine replies ack packet 
controlling number syn packets transmitted source machine control number connections able 
note relationship connection attempts syn packets 
application layer connection usually initiated opening socket 
results sending initial tcp syn packet response received certain time sending identical syn packets 
continues maximum time socket timeout socket give return control application 
attempting open single connection machine may transmit syn packets 
implementation attempt differentiate initial syn packets retries count retries separate connection attempts 
machine establish connections course normal usage example requesting web page delivery email 
worms connections scanning order establish existence configuration remote machines high speed worms nimda codered initiating large numbers connections different targets second 
virus throttle rests observation patterns connections due normal usage different patterns connections created mobile code 
research suggested normal usage connection target connected second majority connections destination addresses connected 
virus throttle parses outgoing packets machine tcp syn packets 
destination address intercepted syn packet compared list destination addresses machines connections previously term working set 
working set hold addresses 
destination address working set connection allowed immediately 
addresses working set working set full holds addresses destination address added working set connection allowed proceed immediately 
conditions met syn packet added term delay queue transmitted immediately 
second delay queue processed syn packet head syn packets destination address popped sent allowing establishment requested connection 
destination address packet added working set oldest member discarded working set full 
delay queue empty processing time working set full oldest member working set discarded allowing potential establishment connection second target connected 
design summarised schematically allows hosts create connections sec ond want machines 
connection attempts delayed second attempted 
delaying connections simply dropping important benign response allows virus throttle certain amount leeway conception normal behaviour response incorrectly targeted legitimate connection attempts introduce imperceptible delay connection prohibiting entirely 
process request new working set new add update delay queue queue length detector rate limiter clock schema control flow virus throttle argued rate connections new targets high case worms delay queue rapidly grow resulting attempted connections severely delayed 
implementing throttle took idea introduced upper limit size delay queue reached disallow connection requests host 
throttle said behave certain limits 
observation normal behaviour range users saw delay queue rarely grew bigger handful packets concluded size delay queue offer indication presence worm host large delay queue sizes certainly indicate application behaving suspect manner 
throttle set upper limit delay queue size packets 
lastly mentioned previously implemented udp smtp exchange versions throttle 
udp throttle works exactly way tcp counterpart parsing outgoing network traffic tcp syn packets looks outgoing udp packets considered separate connection attempt 
email throttle described fully 
implementation section describe virus throttle implemented short overview structure linux network stack 
necessarily section fairly technical reader referred complete works information 
linux network stack strictly consists data structures ptype linked list ptype base hash table containing pointers packet handler functions conceptual level simply thought list packet handler functions 
outgoing packets placed list packet handler traverse list reach head packets passed hard start xmit function supplied appropriate network device driver transmission wire 
virus throttle works replacing pointer hard start xmit function registered network device driver pointer function 
means hard start xmit function called time packet finished traversing network stack ready transmitted network interface able intercept control packet leaving network device 
essence throttle viewed level ethernet device driver wrapper 
accomplish wrapping virus throttle implemented linux kernel module init module routine fetches pointer net device structure registered current network device driver 
net device structure contains entries pointers packet handling functions registered network device driver including hard start xmit function pointer replace pointer transmit function 
transmit function simple packet parser looks tcp syn packets packets establish stream connections applications 
packet parsed tcp syn packet passed original hard start xmit function transmission usual 
tcp syn packet de scribed previous section allowed pass immediately case handed original hard start xmit function possibly added working set working set full added delay queue transmission 
working set delay queue data structures instantiated linked lists linked list structure provided linux kernel 
working set list stores destination address packet delay queue list stores source destination addresses packet copy sk buff data structure associated packet time enqueued 
limit size delay queue implemented monitoring size delay queue packet parser setting flag size increases specified upper limit 
packet parser allow connection attempt commence flag set 
processing delay queue handled kernel thread wakes specified number times second case second 
delay queue processed described previous section packets deemed suitable transmission dequeued passed original hard start xmit function 
due fact delay queue working set data structures shared packet parsing routines delay queue routines data structures carefully protected 
order allow fact host may different ip addresses virus throttle may placed intermediate system bridge gateway see packets transmitted number different source ip addresses implementation keeps array working set delay queue data structures 
entry array corresponds working set delay queue particular source ip address 
testing detailed design implementation throttle section move describe evaluated performance 
initially outline experimental setup go experiments performed results 
experimental setup order effectively test throttle range different scenarios develop secure testbed virus throttle exposed real constructed mobile code 
testbed describe details 
testbed testbed consists rack mounted hp blade server bh providing physical infrastructure separate lans housing includes port switches bh server blades 
blade mhz pentium iii processor gb onboard graphics network interfaces 
network interface provided management lan remote management card rmc provide connections remaining lans 
physically separate functional roles lans separated 
management lan provides access rmc server blade tasks power cycling blade 
second lan designated administrative lan handle installation configuration blades coordination experiments data experiments 
third lan experimental lan 
network experiments performed 
setup summarised 
addition blade server employing ghz pentium boxes act servers administrative experimental lans respectively 
administrative lan server running services dhcp ftp necessary configuration server blades coordinates experiments 
third machine acts data collector essence network sniffer 
monitoring port configured switch experimental lan sniffer machine running tcpdump listens port keeps copy traffic lan 
fourth machine start experiments bring inject copy virus study management lan administrative lan switch switch blade blade blade blade blade admin server injector sniffer expt server switch configuration testbed experimental lan machines experimental lan 
machine brought plays role experiments 
coordination purposes sniffer machines network connections experimental administrative lans particular care taken ensure traffic lans able cross lan 
redhat linux installation custom kernel forms operating system server blades 
experiments involve variety operating systems settings ease configuration save time run vmware workstation server blade 
vmware allows running operating system guest operating system inside operating system host operating system case linux 
experiments standard installation windows professional guest os vmware configured bridged networking mode 
setting vmware guest os bridged networking means guest largely network stack opposed host os host networking configured 
results realism network behaviour applications running guest os bridged networking employs proprietary vmware driver located fairly low linux network stack places constraints implementation virus throttle necessarily production version throttle 
configuration testbed allows automate process running experiments large extent essential necessary repeat experiments number times reduce noise inherent random nature programs studying 
obviously network machines known infected viruses security isolation network prime importance 
measures described careful configuration testing software testbed housed secure laboratory physically preventing connections networks strict policies concerning data transfer imposed 
test worm order test effectiveness virus throttle spread worms scan different rates test worm developed 
test worm consists basic stream socket server listens connections specified port 
receives connection attempt server starts scanner properties scan rate address range specified 
scanner scans ip address space attempting connections addresses port test worm server listening 
type scanning tcp connect scanning scanner discovers ip address machine running test worm server trigger server start scanner machine 
scheme allows fairly realistic simulation scan exploit transfer worm lifecycle actual exploit file transfer involved machines infected worm priori infected worm guarantees test worm spread autonomously 
results testbed setup described able securely observe variety different viruses spreading experimental network performed number different experiments virus throttle go detail 
stopping speed interested time take worms scanning number different rates cause delay queue reach upper limit packets implementation 
remembering delay queue reached limit disable connection attempts time effectively time takes throttle worm 
experimental lan testbed configured machines gateway server blade running windows professional guest os 
table records time taken delay queue reach number connection attempts time blade server infected real nimda virus test worm configured scan various rates 
table shows virus throttle takes seconds nimda scans rate connections second spreading seconds application scans rate connections second 
nimda case throttle allows packet wire networking shut maximum packets test worm configured scan connections second 
stopping times worm udp implementation throttle included table show throttle able worm seconds 
mobile code propagation order test effectiveness virus throttle reducing propagation real worm testbed set class network containing server blades running copy windows professional vulnerable nimda virus 
machine acted default gateway dhcp server network configured 
windows machines infected nimda progress network observed gathering data sniffer configured described 
data analysed time system connections stopping allowed second time connections nimda test worm average time taken throttle real test worms infected nimda virus determined 
varying number machines network throttle installed repeating experiment times able calculated average time taken number machines infected assuming certain percentage machines network virus installed 
results shown 
number infected machines infection times different numbers installed virus nimda shows installed machines nimda takes average just minutes spread machines 
time slightly reduced machines installed 
machines installed throttle nimda able spread av erage half machines network amount time spread machines minutes 
represents decrease number machines infected substantial increase time taken worm spread 
machine installed throttle worm unable spread 
aside damage caused malicious payloads high speed worms worms cause denial service attacks amount network traffic generate 
sapphire worm caused network saturated due sheer quantity traffic infected machines generated nimda generating substantially quantities network traffic caused routers firewalls fall due inability process increased number connection requests generated infected machines 
shows experiment described start section traffic load time test network 
effect having network protected throttle marked approximately reduction viral traffic network protected throttle 
machines throttled traffic load reduced half throttled average 
having machines installed throttle quickly reduces viral traffic zero 
results show ability virus throttle substantially reduce amount network traffic generated mobile code 
traffic generated kb sec time minutes traffic loads different numbers installed virus nimda user trials previous section shows virus throttle extremely effective slowing stopping spread certain classes worms equally important aspect determining utility establishing impact performance applications legitimately establish connections course normal user behaviour 
throttle example prevents users accessing emails slows unacceptable speed soon 
preliminary tests throttle installed number researchers machines received reports impaired network performance 
currently involved series larger user trials throttle installed gateway considerable number users running wide range network capable applications different operating systems 
initial results point noticeable degradation network performance 
explore interaction throttle legitimate network aware applications implemented throttle simulator takes packet traces input 
gather packet traces configured monitoring port port switch hp internal network ran packet sniffer port 
allowed gather large quantities data extended periods time range different machines 
separating traces machine machine basis running simulator allows rapidly assess applicability throttle different classes machines running different services 
preliminary results simulator show majority network traffic throttled machine passes network large quantities legitimate network traffic gathered mistaken viral traffic 
fuller discussion applicability approach 
presenting necessary background described detail implementation testing virus throttle 
tests de scribed able show virus throttle highly effective detecting slowing stopping real worms nimda test worm configured scan different rates 
results show virus throttle substantially reduce global spread worm amount network traffic produced 
demonstrated virus throttling powerful tool prevention high speed worm propagation 
believe throttling combined current methods essential ingredient multilayered anti virus solution 

understanding linux kernel 
reilly associates 

enable defense 
proc 
new security paradigms workshop pages ireland 

angel tool disarm computer systems 
proc 
workshop new security paradigms 
cert advisory ca 
cert coordination center 
www cert org advisories ca html 
chess 
viruses internet 
virus bulletin international conference october 
cohen 
computer viruses theory experiments 
proc 
th security conference pages 
cohen 
formal definition computer worms related results 
computers security 
cohen 
short course computer viruses 
john wiley sons 

art port scanning 
phrack magazine volume issue 
grimes 
malicious mobile code 
reilly associates 
hp series switches management configuration guide 
hewlett packard 
hp blade server bh service guide 
hewlett packard 
lifeline 
building linux network layer 
phrack magazine volume issue 

year worm 
new com com html 
messmer 
behaviour blocking new viruses 
www com news antivirus html 
moore paxson savage shannon staniford weaver 
spread sapphire slammer worm 
www cs berkeley edu sapphire 
postel 
transmission control protocol 
rfc darpa 

linux device drivers 
reilly associates 
schuster 
complex adaptive systems 
verlag 
somayaji forrest 
automated response system call delays 
proc 
th usenix security symposium pages 
nimda 
anti virus 
www org analysis html 

anti virus 
www org analysis html 
stevens 
unix network programming 
prentice hall 
tcpdump 
www tcpdump org 

studying mobile code experimental setup 
technical report hewlett packard labs 
vmware workstation 
vmware www vmware com 
williamson 
throttling viruses restricting propagation defeat malicious mobile code 
proc 
acsac security conference las vegas nevada 
williamson 
design implementation testing email throttle 
submitted annual computer security applications conference las vegas 
williamson 
epidemiological model virus spread 
appear proceedings annual virus bulletin conference 
williamson griffin norman 
virus throttling 
virus bulletin 
