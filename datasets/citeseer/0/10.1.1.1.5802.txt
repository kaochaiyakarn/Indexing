acm conference object oriented programming systems languages applications oopsla november ownership types safe programming preventing data races deadlocks chandrasekhar boyapati robert lee martin rinard laboratory computer science massachusetts institute technology technology square cambridge ma lcs mit edu presents new static type system multithreaded programs typed programs system guaranteed free data races deadlocks 
type system allows programmers partition locks xed number equivalence classes specify partial order equivalence classes 
type checker statically veri es thread holds lock thread acquires locks descending order 
system allows programmers recursive treebased data structures describe partial order 
example programmers specify nodes tree locked tree order 
system allows mutations data structure change partial order runtime 
type checker statically veri es mutations introduce cycles partial order changing partial order lead deadlocks 
know sound static system preventing deadlocks allows changes partial order runtime 
system uses variant ownership types prevent data races deadlocks 
ownership types provide statically enforceable way specifying object encapsulation 
ownership types useful preventing data races deadlocks lock protects object protect encapsulated objects 
describes type system statically enforce object encapsulation prevent data races deadlocks 
contains detailed discussion di erent ownership type systems encapsulation guarantees provide 
categories subject descriptors programming languages language constructs software engineering program veri cation general terms languages veri cation keywords data races deadlocks ownership types encapsulation permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
oopsla november seattle washington usa 
copyright acm multithreaded programming mainstream programming practice 
multithreaded programming dif cult error prone 
multithreaded programs synchronize operations shared mutable data ensure operations execute atomically 
failure correctly synchronize operations lead data races deadlocks 
data race occurs threads concurrently access data synchronization accesses write 
deadlock occurs cycle form thread holds lock thread waiting lock mod synchronization errors multithreaded programs dicult programming errors detect reproduce eliminate 
presents new static type system multithreaded programs typed programs system guaranteed free data races deadlocks 
static type system prevent data races 
extends race free type system prevent data races deadlocks 
basic idea follows 
programmers write multithreaded programs locking discipline mind 
system allows programmers specify locking discipline programs form type declarations 
system statically veri es program consistent type declarations 
deadlock freedom prevent deadlocks programmers partition locks xed number lock levels specify partial order lock levels 
type checker statically veri es thread holds lock thread acquires locks descending order 
type system allows programmers write code polymorphic lock levels 
programmers specify partial order formal lock level parameters clauses 
system allows programmers recursive treebased data structures order locks lock level 
example programmers specify nodes tree locked tree order 
system allows mutations data structure change partial order runtime 
type checker uses intraprocedural intra loop ow sensitive analysis statically verify mutations introduce cycles partial order changing partial order lead deadlocks 
know sound static system preventing deadlocks allows changes partial order runtime 
data race freedom prevent data races programmers associate object protection mechanism ensures accesses object create data races 
protection mechanism object specify mutual exclusion lock protects object unsynchronized concurrent accesses threads safely access object synchronization object immutable object accessible single thread unique pointer object 
unique pointers useful support object migration threads 
type checker statically veri es program uses objects accordance declared protection mechanisms 
type system signi cantly expressive previously proposed type systems preventing data races :10.1.1.143.5635:10.1.1.143.5635
particular type system lets programmers write generic code implement class create di erent objects class di erent protection mechanisms 
introducing way parameterizing classes lets programmers defer protection mechanism decision time class de ned times objects class created 
ownership types variant ownership types prevent data races deadlocks 
ownership types provide statically enforceable way specifying object encapsulation 
ownership types useful preventing data races deadlocks lock protects object protect encapsulated objects 
previous prfj type system uses variant ownership types statically prevent data races 
prfj rst type system combine ownership types unique pointers :10.1.1.16.5732
enables prfj express constructs ownership types unique pointers express 
prfj rst type system combine ownership types ects clauses 
extends prfj prevent data races deadlocks 
developed ownership type system statically enforces object encapsulation supporting subtyping constructs iterators :10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566
ownership type systems enforce object encapsulation enforce weaker restrictions expressive support subtyping constructs iterators :10.1.1.59.6498
detailed discussion ownership types section 
describe type system combined type system statically enforce object encapsulation prevent data races deadlocks :10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566
contributions contributions static type system prevent deadlocks presents new static type system prevent deadlocks java programs 
system allows programmers partition locks xed number lock levels specify partial order lock levels 
type checker statically veri es thread holds lock thread acquires locks descending order 
formal rules type checking simplify presentation key ideas approach formally presents type system context core subset java called concurrent java :10.1.1.23.8118:10.1.1.23.8118:10.1.1.143.5635:10.1.1.143.5635:10.1.1.143.5635
implementation works java language 
type inference algorithm type system explicitly typed principle onerous fully annotate method extra type information system requires 
combination intra procedural type inference chosen defaults signi cantly reduce number annotations needed practice 
approach permits separate compilation 
lock level polymorphism type system allows programmers write code polymorphic lock levels 
system allows programmers specify partial order formal lock level parameters clauses 
feature enables programmers write code exact levels locks known statically ordering constraints unknown lock levels known statically 
support condition variables addition mutual exclusion locks type system prevents deadlocks presence condition variables 
system statically enforces constraint thread invoke wait thread holds locks lock thread releases lock executing wait constraint implies thread waiting condition variable holds locks 
turn implies deadlock involves condition variable 
system prevents nested monitor problem :10.1.1.1.8566
partial orders mutable trees system allows programmers recursive tree data structures order locks lock level 
system allows mutations change partial order runtime 
type checker uses intra procedural intra loop ow sensitive analysis statically verify mutations introduce cycles partial order changing partial order lead deadlocks 
partial orders monotonic dags system allows programmers recursive data structures order locks lock level 
dag edges modi ed initialized 
newly created nodes may added dag initializing newly created nodes contain dag edges existing dag nodes 
runtime ordering locks system supports imposing arbitrary linear order runtime locks lock level 
system provides primitive acquire locks linear order 
class account int balance int balance accesses return balance void deposit int accesses balance void withdraw int accesses balance class new final account new account final account new account void transfer int locks synchronized synchronized withdraw deposit int locks synchronized synchronized return balance balance 
combined account example experience prototype implementation system context java 
implementation handles features java including threads constructors arrays exceptions static elds interfaces runtime downcasts dynamic class loading 
gain preliminary experience modi ed java libraries multithreaded server programs implemented system 
programs exhibit variety sharing patterns 
system suciently expressive support sharing patterns requires little programming overhead 
outline rest organized follows 
section introduces type system examples 
section presents basic type system preventing data races deadlocks 
section describes inference techniques signi cantly reduce programming overhead 
section presents extensions basic type system support lock level polymorphism condition variables tree partial orders dag partial orders runtime ordering locks 
section describes experience type system 
section contains discussion ownership types 
section presents related section concludes 
examples section introduces type system examples 
sections explain type system greater detail 
combined account example presents example program implemented type system 
program account class class 
class new node root new node class node tree node left tree node right synchronized void locks final node right null return synchronized final node left null return synchronized final node right right null left right right 
tree example prevent data races programmers associate object system protection mechanism 
example class declared immutable 
may modi ed initialization 
account class generic di erent account objects may di erent protection mechanisms 
class contains account elds 
key word self indicates account objects protected locks 
type checker statically ensures thread holds locks account objects accessing account objects 
prevent deadlocks programmers associate lock system lock level 
example class declares lock levels 
lock levels purely compile time entities preserved runtime 
example declared rank lower partial order lock levels 
belongs belongs 
type checker statically ensures threads acquire locks descending order lock levels 
methods system may contain accesses clauses specify assumptions hold method boundaries 
methods account class accesses clause speci es methods access account object synchronization 
prevent data races callers account method hold lock protects corresponding account object callers invoke account method 
accesses clauses account methods typed 
methods system may contain locks clauses 
defn defn class cn extends body cn object body eld meth meth mn arg feg eld nal opt fd arg nal opt int boolean new fd fd mn arg feg feg synchronized feg fork feg cn class names fd eld names mn method names variable names grammar concurrent java methods class contain locks clause indicate callers may acquire locks belong lock levels lower 
prevent deadlocks type checker statically ensures callers methods hold locks greater lock levels 
accesses clauses locks clauses useful enable separate compilation 
tree example presents part implemented type system 
tree nodes 
node object declared protected lock 
prevent data races type checker statically ensures thread holds lock node object accessing node object 
node class parameterized formal lock level node class node elds left right 
nodes left right belong lock level system allows programmers recursive tree data structures order locks belong lock level 
example key word tree indicates nodes left right ordered lower node object partial order 
prevent deadlocks type checker statically veri es method acquires locks nodes tree order 
method example performs standard rotation operation tree restore tree balance 
type checker uses intra procedural intra loop analysis statically verify mutations introduce cycles partial order changing partial order lead deadlocks 
type system statically veri es absence data races deadlocks examples 
basic type system section describes basic type system 
simplify presentation key ideas approach describe type system formally context core subset java known concurrent java :10.1.1.143.5635
implementation works java language 
concurrent java extension sequential subset java known classic java type structure semantics classic java :10.1.1.23.8118
shows grammar concurrent java 
thisthread thread objects potentially shared objects thread objects thisthread ownership relation 
owner object change time 

ownership relation forms forest rooted trees roots self loops 

necessary sucient condition thread access object thread hold lock root ownership tree object belongs 

thread implicitly holds lock corresponding thisthread owner 
thread access object owned corresponding thisthread owner synchronization 
ownership properties object concurrent java associated lock states locked unlocked initially unlocked 
expression fork feg spawns new thread arguments evaluate evaluation performed ect result 
note java mechanism starting threads code form start expressed equivalently concurrent java ft start gg 
expression synchronized fe works java 
evaluate object 
evaluating thread holds lock object evaluating value synchronized expression result thread holds lock thread attempts acquire lock blocks lock released 
newly forked thread inherit locks held parent thread 
concurrent java program sequence class de nitions followed initial expression 
prede ned class object root class hierarchy 
variable eld declaration concurrent java includes initialization expression optional nal modi er 
modi er variable eld updated initialization 
concurrent java constructs similar corresponding constructs java 
type system prevent data races section presents type system preventing data races context concurrent java 
programmers associate object protection mechanism ensures accesses object create data races 
programmers specify protection mechanism object part type variables point object 
type specify mutual exclusion lock protects object unsynchronized concurrent ac defn class formal extends body owner formal self thisthread final meth mn arg accesses final feg final formal owner names grammar extensions race free java cesses threads safely access object synchronization object immutable object accessible single thread variable contains unique pointer object 
unique pointers useful support object migration threads 
type checker uses type speci cations statically verify program uses objects accordance declared protection mechanisms 
section describes basic type system handles objects protected mutual exclusion locks objects accessed synchronization 
race free type system supports unsynchronized accesses immutable objects objects unique pointers migrate threads 
race free type system described greater detail 
key basic race free type system concept object ownership 
object system owner 
object owned object special thread owner called thisthread 
objects owned thisthread directly transitively local corresponding thread accessed thread 
presents example ownership relation 
draw arrow object object gure object owns object type system statically veri es program respects ownership properties shown 
shows obtain grammar race free java extending grammar concurrent java 
shows tstack program race free java 
simplicity examples extended language syntactically closer java 
tstack stack objects 
tstack implemented linked list 
class de nition race free java parameterized list owners 
parameterization helps programmers write generic code implement class create di erent objects class di erent protection mechanisms 
tstack class parameterized thisowner towner 
thisowner owns tstack object towner owns objects contained tstack 
general rst formal parameter class owns object 
case owner thisthread parameters instantiate tstack class 
means main thread owns tstack objects contained tstack 
case main thread owns tstack objects contained tstack 
ownership relation tstack objects depicted assuming stacks contains elements 
example illustrates complete race free type system owner object change unique pointer object 
thisowner owns tstack object towner owns objects stack 
class tstack tnode head null pop accesses head null return null value head value head head return value 
class tnode value tnode value accesses return value tnode accesses return 
class int tstack new tstack tstack new tstack stack objects race free java head tnode tnode head head tnode head tnode head value head value head value head head tnode tnode tstack thisthread tstack head value head value head value ownership relation di erent di erent protection mechanisms created tstack implementation 
race free java methods contain accesses clauses specify assumptions hold method boundaries 
methods specify objects access assume protected externally acquired locks 
callers required hold locks root owners objects speci ed accesses clause invoke method 
example value methods tnode class assume callers hold lock root owner tnode object 
accesses clause value methods typed 
type system prevent deadlocks section presents type system preventing data races deadlocks context concurrent java 
prevent deadlocks programmers specify partial order locks 
type checker statically veri es thread holds lock thread acquires locks descending order 
section describes basic type system allows programmers body eld meth level new cn cn owner formal self cn thisthread final meth mn arg accesses final feg locks cn lock opt lock final lock level names grammar extensions deadlock free java 
lock levels form partial order 

objects locks 
lock belongs lock level 
lock level lock change time 

necessary sucient condition thread acquire new lock levels locks thread currently holds greater level 
thread may acquire lock holds 
lock acquire operation redundant case 
lock level properties partition locks xed number equivalence classes specify partial order equivalence classes 
system allows programmers recursive tree data structures describe partial order describe extensions basic type system section 
describes obtain grammar java extending grammar race free java 
call resulting language safe concurrent java 
safe concurrent java allows programmers de ne lock levels class de nitions 
lock level static eld java lock level class entity object entity 
static elds java lock levels compile time type checking preserved runtime 
programmers specify partial order lock levels syntax lock level declarations 
program xed number lock levels type checker statically verify lock levels form partial order 
lock safe concurrent java belongs lock level 
note set locks race free java exactly set objects roots ownership trees 
lock object self rst owner 
safe concurrent java self owner augmented lock level corresponding lock belongs 
properties lock levels summarized 
example shown class de nes lock levels 
declared 
contains 
objects self rst owners objects locks 
declared belong declared belong 
example methods acquire locks descending class vector new int 
int size locks synchronized return boolean isempty locks synchronized return size self synchronized vector order acquiring lock acquiring lock 
methods safe concurrent java locks clauses addition accesses clauses specify assumptions method boundaries 
locks clause contain set lock levels 
lock levels levels locks corresponding method may acquire 
ensure program free deadlocks thread calls method hold locks higher level levels speci ed locks clause 
example methods contain locks clause 
thread invokes methods hold locks level greater 
locks clause contain lock addition lock levels 
locks clause contains object thread invokes corresponding method may hold lock object re acquiring lock method redundant case 
useful support case synchronized method class calls synchronized method class 
shows part self synchronized vector implemented safe concurrent java 
self synchronized class class self rst owner formal owner parameter 
methods self synchronized class assume object owns methods synchronize access object requiring external locks accesses clause 
example isempty method acquires lock invokes size method acquires lock 
violate condition locks acquired descending order second lock acquire redundant 
rules type checking previous sections grammar safe concurrent java figures 
section describes important rules type checking 
full set rules complete grammar appendix 
core type system set rules reasoning typing judgment ls min program checked included provide information class de nitions 
environment providing types free variables ls describes set locks held evaluated 
min minimum mentioned examples extended language syntactically closer java 
level levels locks held evaluated 
type judgment states type judgment ls min states type provided ls contains necessary locks safely evaluate min greater levels locks newly acquired evaluating typing environment de ned follows formal owner parameter class locks clause method 
nal opt owner lock set ls de ned follows ro root owner ls thisthread ls lock ls ro nal minimum lock level min de ned follows lub cn cn note lub 
computed just expression type checking 
lock level denotes locks currently held 
min cn lub cn cn rule acquiring new lock synchronized checks lock level cn min enclosing method locks clause contains lock rule checks object level level rule type checks extended lock set includes min set cn lock nal expression owns 
nal expression nal variable eld fd nal expression fd nal eld 
exp sync nal cn cn cn min locks cn level ls cn ls min synchronized proceed rules give formal de nition rootowner 
root owner expression points object root ownership tree object belongs 
thisthread object owns 
rootowner thisthread rootowner thisthread rootowner self cn rootowner rootowner final transitive nal rootowner rootowner owner expression formal owner parameter determine root owner expression static scope enclosing class 
case de ne root owner ro 
rootowner formal owner rootowner ro rule accessing eld fd checks typed expression type actual owner parameters 
veri es class cn formal parameters declares inherits eld fd type eld nal thread hold lock root owner declared inside class contain occurrences formal class parameters 
outside class rule renames expression formal parameters corresponding actual parameters 
exp ref ls min rootowner fd cnhf ls nal fd cnhf ls min fd fn rule invoking method checks arguments right type thread holds locks root owners nal expressions accesses clause method 
rule ensures min greater levels speci ed locks clause method 
locks clause contains lock rule ensures level min level equal min lock set case re acquiring method redundant 
rule appropriately renames expressions types outside declared context 
exp invoke renamed def fn ls min mn accesses locks cn opt 
cnhf ls min renamed rootowner renamed ls cn min renamed level min level min ls ls min mn renamed rule type checking method assumes thread holds locks root owners nal expressions speci ed accesses clause 
rules assumes lock held thread level lock greater levels speci ed locks clause 
locks clause method contains lock rule assumes lock held thread level lock greater level lock object rule type checks method body assumptions 
method arg locks cn opt nal rootowner ls thisthread min lub cn ls min mn arg accesses locks cn opt feg soundness type system type checking rules ensure program typed program respects properties described figures 
particular type checking rules ensure thread read write object thread holds lock root owner object thread holds lock thread acquires locks descending order 
properties imply program free data races properties imply program free deadlocks 
typed programs system guaranteed free data races deadlocks 
complete syntactic proof type soundness constructed de ning operational semantics safe concurrent java extending operational semantics classic java proving typed programs reach error state generalized subject reduction theorem holds typed programs :10.1.1.23.8118:10.1.1.44.5122
subject reduction theorem states semantic interpretation term type invariant reduction 
proof straight forward tedious omitted 
runtime overhead system described far purely static type system 
ownership relations lock levels compile time type checking need preserved runtime 
consequently safe concurrent java programs runtime overhead compared regular concurrent java programs 
fact way compile run safe concurrent java program convert concurrent java program type checking removing type parameters lock level declarations accesses clauses locks clauses program 
extra type information available system enable program optimizations 
example objects known thread local allocated thread local heap global heap 
thread local heap separately garbage collected thread dies space thread local heap reclaimed 
class class extends class void incompletely typed method type inference type system explicitly typed principle onerous fully annotate method extra type information system requires 
combination inference chosen defaults signi cantly reduce number annotations needed practice 
emphasize approach inference purely intra procedural infer method signatures types instance variables 
default completion partial type speci cations cases 
approach permits separate compilation 
intra procedural type inference system usually unnecessary explicitly augment types method local variables owner parameters 
simple inference algorithm automatically deduce owner parameters typed programs 
illustrate algorithm example 
shows class hierarchy incompletely typed method types local variables inside contain owner parameters explicitly 
inference algorithm works rst augmenting incomplete types appropriate number distinct unknown owner parameters 
example type algorithm augments type owner parameters 
shows augmented types example 
goal inference algorithm nd known owner parameters place unknown parameters program typed 
inference algorithm treats body method bag statements 
algorithm works collecting constraints owner parameters assignment function invocation method body 
shows constraints imposed statements example 
note constraints form equality owner parameters 
consequently constraints solved standard union find algorithm linear time 
solution inconsistent known owner parameters constrained equal solution inference algorithm returns error program type check 
solution incomplete known parameter equal unknown parameter algorithm replaces unknown parameters thisthread 
anonymous owners consider code 
tstack class parameterized thisowner towner 
owner pa types augmented unknown owners statement oc thisthread statement constraints unknown owners rameter thisowner static scope visible 
similarly owner parameter thisowner class body class class body method body owner parameter unnecessary name parameter 
system allows programmers anonymous owner parameters 
example tstack class declared class class declared class th default types addition supporting intra procedural type inference anonymous owners system provides chosen defaults reduce number annotations needed common cases 
considering allowing user de ned defaults cover speci sharing patterns occur user code 
default types currently provided system 
class declared default single threaded system adds default type annotations explicitly speci ed programmer 
type instance variable class method argument return value explicitly parameterized system augments type appropriate number thisthread owner parameters 
method class contain accesses locks clause system adds empty accesses locks clause method 
default types single threaded programs require extra type annotations 
class declared default self synchronized system adds default type annotations explicitly speci ed programmer 
type instance variable explicitly parameterized system augments type appropriate number owner parameters 
type method argument return value explicitly parameterized system augments type fresh formal owner parameters 
method class contain accesses clause system adds accesses clause contains method arguments 
method class contain locks clause system adds locks clause 
default types self synchronized classes require extra type annotations 
extensions basic type system section presents extensions basic type system 
lock level polymorphism section describes type system supports polymorphism lock levels 
type system described defn class formal extends body formal self cn locks lock opt formal lock level names grammar extensions level polymorphism class stack vector vector vec new vector 
int size locks synchronized return vec size self synchronized stack vector section level lock known compile time 
programmers may want write code exact levels locks known statically ordering constraints unknown lock levels known statically 
lock level polymorphism enables kind programming 
simplify presentation section describes type system supports lock level polymorphism context safe concurrent java 
shows grammar extensions safe concurrent java support lock level polymorphism 
programmers parameterize classes formal lock level parameters addition formal owner parameters 
programmers specify ordering constraints lock level parameters clauses 
shows part self synchronized stack implemented self synchronized vector 
lock level stack object formal parameter clause constrains greater vector legal synchronized stack size method call synchronized vector size method 
type checker veri es program acquires locks descending order 
condition variables section describes system prevents deadlocks presence condition variables 
java provides condition variables form wait notify methods object 
thread wait condition variable lock possible deadlock involves condition variables locks 
simple rule ordering rule locks avoid kind deadlock 
lock ordering rule depends fact thread holding lock keep thread waiting lock 
case conditions thread notify distinguished simple way 
simplify presentation section describes type system handles condition variables context safe concurrent java 
shows grammar extensions safe concurrent java support condition variables 
expression wait notify similar wait notifyall methods java 
nal expression evaluates object current thread hold locks opt lock opt wait notify grammar extensions condition variables eld nal opt tree opt fd grammar extensions tree ordering lock executing wait current thread releases lock suspends 
thread resumes execution thread invokes notify object 
thread re acquires lock resuming execution wait 
prevent deadlocks presence condition variables system enforces constraint 
thread invoke wait thread holds locks lock thread releases lock executing wait constraint implies thread waiting condition variable holds locks 
turn implies deadlock involves condition variable 
statically verify program respects constraint type system requires method contains call wait locks clause locks clause 
locks clause indicates thread holds locks invokes locks clause indicates thread hold lock invokes method type checker ensures type checking wait lock set contains lock rules type checking shown 
exp wait locks opt nal ls feg ls min wait int exp notify nal ls ls min notify int tree partial orders section describes type system supports treebased partial orders 
shows grammar extensions safe concurrent java support tree partial orders 
programmers declare elds objects tree elds 
object tree eld fd contains pointer object say tree edge fd parent child type system ensures graph induced set tree edges heap forest trees 
data structure tree backbone describe partial order system 
includes doubly linked lists trees parent pointers threaded trees balanced search trees 
locks belong lock level ordered stmt information environment checking statement right left right right root tree left tree tree right root tree left tree tree right root tree left tree right left right illustration flow sensitive analysis tree order 
suppose locks objects belong lock level 
suppose thread holds lock reads tree eld fd get pointer child type system allows thread acquire lock holding lock note long holds lock thread modify thread child type checking rule shown assuming pair nal variables environment contains information objects related tree edges 
exp sync child ls level min ancestor ls child level level min ls min ls min synchronized presents example tree partial order 
node class self synchronized node object owns 
lock level node object formal parameter node tree elds left right 
nodes left right belong lock level nodes left right ordered node object partial order 
example method acquires locks nodes tree order 
type system allows limited set mutations trees runtime 
type checker uses simple intra procedural intra loop ow sensitive analysis check mutations introduce cycles trees 
illustrate analysis example 
type checker keeps additional information environment pair nal variables objects related tree edge root tree root tree rooted contains information stored environment type checking vari eld nal opt tree opt fd nal dag fd grammar extensions dag ordering defn class formal extends dynamic opt body dynamic implements dynamic synchronized feg grammar extensions runtime ordering ous statements method 
analysis ow sensitive environment changes checking statement 
rules mutating tree follows 
deleting tree edge example setting tree eld null writing tree eld requires extra checking 
tree edge may added root tree tree rooted rule shown 
note unique pointer object example newly created trivially root 
similarly local variable contains unique pointer tree rooted exp tree assign ls min tree fd cnhf rootowner ls ls min fn root tree ls min fd fn dag partial orders type system allows programmers directed acyclic graphs dags describe partial order 
shows grammar extensions safe concurrent java support dag partial orders 
programmers declare elds objects dag elds 
type system ensures object part tree part dag 
locks belong lock level ordered dag order 
dags partial orders monotonic 
dag elds modi ed initialized 
newly created nodes may added dag initializing newly created nodes contain dag edges existing dag nodes 
runtime ordering locks type system described far partial order locks known statically 
programmers may want write code order determined statically 
example consider transfer method receives self synchronized account objects 
transfer method acquires locks transfers money 
ordering may known statically transfer class account implements dynamic int balance int balance accesses return balance void deposit int accesses balance void withdraw int accesses balance void transfer account account int locks synchronized withdraw deposit runtime ordered accounts method 
avoid deadlocks programs system supports imposing arbitrary linear order runtime group unordered locks 
system provides primitive acquire locks linear order 
shows grammar extensions safe concurrent java support runtime ordering locks 
programmers declare class subtype dynamic 
objects classes contain tree dag edges objects 
runtime imposes arbitrary linear order dynamic objects assigning unique id 
example runtime choose time creation object unique id runtime stores unique id dynamic object 
locks type dynamic belong lock level ordered linear order 
system provides primitive acquire multiple dynamic locks lock level synchronized 
prevent deadlocks runtime sorts locks linear order acquires locks sorted order 
example locks type dynamic belong lock level :10.1.1.143.5635
synchronized statement acquires locks linear order avoids causing deadlocks 
experience prototype implementation type system 
implementation jvm compatible 
translate typed programs system bytecodes run regular jvms 
implementation handles features java language including threads constructors arrays exceptions static elds interfaces runtime downcasts dynamic class loading 
type system implemented expressive type system described formally earlier sections 
implementation supports unsynchronized accesses immutable objects objects unique pointers 
implementation supports parameterized methods addition parameterized classes 
useful cases 
example class print object method 
say object argument owned ob implementation feature runs regular jvms 
translate synchronized statement multiple locks code acquires locks individually linear order 
translate code constructors dynamic objects store unique ids objects 

parameterized methods class parameter 
unnecessarily tedious mean objects printed protection mechanism 
having parameterized methods allows implement generic print object method 
support safe runtime downcasts implementation 
important java fully language 
allows downcasts checked runtime 
suppose object declared type downcast ei 
verify compile time right owner parameter assume object vector 
type passing support safe runtime downcasts keep runtime ownership lock level information objects potentially involved downcasts types multiple parameters 
companion technical report describes eciently space time overhead 
note implementation type passing approach jvm compatible 
gain preliminary experience implemented number java programs system including classes java libraries 
implemented multithreaded server programs including elevator real time discrete event simulator server chat server stock quote server game server phone database backed information sever 
programs exhibit variety sharing patterns 
type system expressive support programs 
case determined sharing pattern program adding extra type annotations fairly straight forward process 
average change lines code 
experience threads rarely need hold multiple locks time 
cases threads hold multiple locks simultaneously threads usually acquire multiple locks cross abstraction boundaries 
example elevator threads acquire lock floor object invoke synchronized methods vector object 
programs unbounded number locks locks classi ed small number lock levels 
programs easily expressed type system 
note cases threads hold multiple locks simultaneously usually conservative programming 
elevator example mentioned vector object contained floor object 
acquiring lock vector object unnecessary 
fact programmers arraylist vector 
reason java programs conservative mechanism java prevent data races deadlocks 
example java programs risk data races may accessed appropriate synchronization shared contexts 
type system guarantees data race freedom deadlock freedom programmers employ aggressive locking disciplines sacri cing safety 
ownership types encapsulation variant ownership types prevent data races deadlocks 
ownership types provide statically enforceable way specifying object encapsulation 
idea object may subobjects part representation 
ownership types useful preventing data races deadlocks lock protects object protect subobjects 
developed ownership type system statically enforces object encapsulation supporting subtyping constructs iterators :10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566
ownership type systems enforce object encapsulation enforce weaker restrictions expressive support subtyping constructs iterators :10.1.1.59.6498
section presents detailed discussion ownership types 
section describes type system combined type system statically enforce object encapsulation prevent data races deadlocks :10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566
object encapsulation object encapsulation gives programmers ability reason locally program correctness 
reasoning class object oriented program involves reasoning behavior objects belonging class 
typically objects point subobjects represent containing object 
local reasoning class correctness possible subobjects fully encapsulated subobjects accessible containing object 
condition supports local reasoning ensures outside objects interact subobjects calling methods containing object 
containing object control subobjects 
full encapsulation needed 
encapsulation required subobjects containing object depends 
object depends subobject calls methods furthermore calls expose mutable behavior way ects invariants stack items implemented linked list stack depends list items contained list 
code outside manipulate list invalidate correctness stack implementation 
code outside safely access items contained stack stack call methods depends identities items identities change 
similarly set immutable elements depend elements invokes equals ensure elements set equal elements immutable 
ownership types provide statically enforceable way specifying object encapsulation 
object depends object programmers declare owns ownership type system enforces object encapsulation enforces property 
owners encapsulating objects object owns object object directly transitively access property says inside encapsulation boundary outside encapsulation boundary access object accesses object methods obtain pointer invoke methods pointer may stored eld local variable method consider illustration 
owns 
directly transitively 
access 
objects access children ancestors children objects globally accessible thread objects owned self thisthread 
ownership type systems ownership type systems naming enforce encapsulation 
type object includes name owner 
access object program fragment name type object name owner object 
section presents discussion various ownership type systems encapsulation guarantees provide 
shows extend type system statically enforce object encapsulation prevent data races deadlocks 
ownership types rst systems introduce ownership types 
presents formalization type system 
systems enforce object encapsulation signi cantly limiting expressiveness 
systems subtype owners super type 
subtype 
express constructs iterators systems 
ownership types subtyping joe builds previous :10.1.1.59.6498
joe supports natural form subtyping similar subtyping parametric type systems :10.1.1.21.2609:10.1.1.21.2609
subtype di erent owners super type 
rst owners match rst owners corresponding object 
support subtyping joe enforces constraint type ho oni multiple owners ng 
recall ownership relation forms forest trees 
notation means descendant ownership tree special owner self 
type illegal self 
constraint subtyping joe provided meaningful encapsulation guarantees 
illustrates example 
support constructs iterators joe allows programs temporarily violate object encapsulation property 
presents example code joe violates object encapsulation 
adopted example joe :10.1.1.59.6498
examples syntax slightly di erent syntax original papers 
example shows iterator tstack note analogy nested procedures proc fvar proc fvar proc ggg 
say xn pn children pn pn access pn children ancestors pn children global variables procedures 
class tstack tnode head null 
tstackenum elements return new tstackenum head class tstackenum tnode curr tstackenum tnode head curr head getnext 
boolean hasmoreelements 
class void test tstack new tstack tstackenum elements violates owner instantiated local variable 
violation object encapsulation :10.1.1.59.6498
example tstack object owns iterator object 
object outside encapsulation boundary tstack object accesses iterator object violating object encapsulation property 
note type iterator contains tstack object 
object access iterator tstack object scope 
ensures violation object encapsulation temporally bounded 
joe enforces weak property 
owners dominators paths heap root object object pass owner 
property implies application thread rst access owner object access furthermore joe thread creates path local variable path go thread local variable pointing type contain ownership types safe concurrent programming previous described prfj type system uses variant ownership types statically prevent data races multithreaded programs 
extend type system prevent deadlocks 
type systems support subtyping constructs iterators 
joe constraint rst owner owners 
absence constraint allows program create path subobject go owner 
systems effects clauses ensure path may exist program exploit path access subobject owner scope 
ects clauses require thread hold lock root owner object thread accesses object 
ects clauses ultimately enable type systems enforce weak encapsulation property 
owners capabilities owner object scope application accesses property states application accesses owner accessible local variable eld access fd 
application class foo int void class supertype void method class subtype extends supertype foo owner parameter owns subtype foo owner parameter owns void method owner parameter owns class foo new foo supertype new subtype supertype get return class main void supertype null new get method violates subtype encapsulated method subtype accesses foo object owned violates path owner parameter owns go violates method accesses owner parameter owns owner garbage violates violation encapsulation able call methods owner acquire lock owner 
property helps prevent data races 
owner accessible current stack frame preceding stack frame 
case application may formal owner parameter name owner current stack frame 
note joe enforces property :10.1.1.59.6498
property couples right access subobject ability name owner 
uses ownership types aid program understanding 
ownership type systems allows programmers ownership information reason aliasing 
example variables types respectively formal owner parameter enclosing class locally infer de nitely aliased refer objects di erent owners 
transitively tracing ow owner annotation variable method calls identify variables refer objects owner identify variables potential aliases ownership type systems enforce properties disallow violations object encapsulation entirely temporally limit violations 
subtyping constraint rst owner owners joe ects clauses prfj :10.1.1.59.6498
presents code violates 
syntax original slightly di erent 
example passes encapsulated object publicly accessible object leading violation ob class tstack tnode head null 
tenumeration elements return new tstackenum class tstackenum implements tenumeration tnode current tstackenum current tstack head getnext current null return null current value current current return boolean hasmoreelements return current null class void test tstack new tstack tenumeration elements tstack iterator ject encapsulation property :10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566
interaction subtyping ownership enables creation path go owner 
parts program access path relationship owner 
decoupling owner illustrated fact program access owner garbage 
enforce properties exible ownership type systems 
example iterator object accesses encapsulated subobjects collection outlive collection object 
trades encapsulation guarantees favor added exibility allowing programmers reason aliasing 
ownership types subtyping iterators ownership type systems described enforce object encapsulation enforce weaker restrictions expressive support subtyping constructs iterators :10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566
enforcing object encapsulation supporting subtyping constructs iterators open problem 
provide satisfactory solution problem :10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566
consider implementation stack iterator stack 
stack iterator ownership relation 
stack owns iterator iterator object outside stack object 
iterator owns stack iterator object stack object 
solve problem implementing iterator inner class stack allowing objects inner classes privileged access representations corresponding objects outer classes :10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566
approach allows programmers express constructs iterators allows reason locally correctness classes 
system allows local reasoning programmers reason class inner classes module 
shows iterator implementation tstack 
enforces encapsulation property owners encapsulating objects object owns object object directly transitively access inner class object ownership types concurrency encapsulation type system combined type system statically enforce object encapsulation property prevent data races deadlocks :10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566
type system modi ed follows enforce object encapsulation 
formal owner parameter instantiated formal owner parameter thisthread outer class lock 
relation extended handle thread local variables unique pointers follows descendant ownership tree special owner self thisthread unique 
related type systems euclid rst languages considered problem aliasing 
stressed need better treatment aliasing object oriented programs 
early islands balloons focused fully encapsulated objects subobjects object access accessible outside object :10.1.1.1.8566
universes enforces full encapsulation read 
full encapsulation signi cantly limits expressiveness needed 
esc java pointed encapsulation required subobjects containing object depends esc java unable enforce encapsulation 
unique pointers linear types unique pointers control object aliasing :10.1.1.16.5732
linear types low level languages support safe explicit memory deallocation track resource usage :10.1.1.1.8566:10.1.1.1.3704
linear types unique pointers orthogonal ownership types conjunction provide expressive type systems 
prfj rst system combine ownership types unique pointers 
type system extends prfj 
combines ownership types unique pointers 
type system ownership types unique pointers express constructs ownership types unique pointers express enforcing object encapsulation 
provides illustration 
example adopted stock quote server implemented prfj 
type systems unique pointers joe express example violating object encapsulation property :10.1.1.59.6498
region types ownership type system related type systems doing region memory manage class 
socket socket 
null 
class main void 
socket new 
quote server preserves object encapsulation ownership types unique pointers ment 
system objects protected locks 
region types objects belong regions 
system contains information structure object graph 
system objects contain objects forming ownership trees 
programmers specify locks roots ownership trees 
lock protects root protects objects tree 
region types programmers directly specify regions objects 
information region types corresponds attening ownership trees 
region types combined ownership types keep information regions object containment 
ects ects clauses useful specifying assumptions hold method boundaries 
ects enable modular checking programs 
prfj rst system combine ects ownership types statically prevent data races 
uses ects ownership types prevent data races deadlocks 
combine ects ownership types program understanding supporting safe software upgrades respectively :10.1.1.59.6498:10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566
data groups data groups name groups objects ects clause write modular speci cations presence subtyping 
ownership types provide alternate way writing modular speci cations 
ownership types name groups objects ects clause name owner name objects transitively owned owner 
data groups implemented theorem prover data groups reason precisely ects 
pivot uniqueness similar unique pointers :10.1.1.16.5732
ownership types combined unique pointers exible system pivot uniqueness allow arbitrarily pointers encapsulated object objects encapsulation boundary 
shape analysis systems tvla pale roles specify shape local object graph detail ownership types 
tvla verify properties input program tree output tree 
pale verify data structures expressed graph types 
roles verify global properties participation objects multiple data structures 
contrast systems take exponential time veri cation ownership types provide lightweight practical way constrain aliasing 
parametric types ownership type system similar parametric type systems java parameters values types :10.1.1.21.2609:10.1.1.21.2609
type system ts naturally language parameterized types 
related research approaches detect prevent data races deadlocks multithreaded programs 
static tools tools sema annotations supplied programmers statically detect potential data races deadlocks program 
extended static checker java esc java annotation system uses theorem prover statically detect kinds errors including data races deadlocks 
assumes bugs deviant behavior statically extract check correctness conditions system obey requiring programmer annotations 
tools useful practice sound certify program race free deadlock free 
example esc java verify partial order locks declared program partial order 
dynamic tools systems detect data races deadlocks dynamically 
include systems developed scienti parallel programming community tools eraser tools detecting data races java programs :10.1.1.161.222
eraser dynamically monitors lock acquisitions test linear order exists locks respected thread 
dynamic tools advantage check unannotated programs 
tools comprehensive may fail detect certain errors due insucient test coverage 
annotated programs easier understand maintain explicitly contain design decisions programmers 
language mechanisms knowledge concurrent pascal rst race free programming language 
programs concurrent pascal synchronized monitors prevent data races 
monitors concurrent pascal restricted threads share data monitors copying data 
thread pass pointer object monitor 
researchers proposed type systems prevent data races object oriented programs 
race free java extends static annotations esc java formal race free type system :10.1.1.143.5635
guava dialect java preventing data races 
race free type system published earlier lets programmers write generic code implement class create di erent objects class di erent protection mechanisms 
systems prevent deadlocks 
type system extends race free type system prevent data races deadlocks 
message passing systems systems statically check data races deadlocks message passing systems :10.1.1.10.9481
systems di erent programming model 
example programs systems access shared objects heap 
presents new static type system multithreaded programs typed programs system guaranteed free data races deadlocks 
type system allows programmers partition locks xed number lock levels specify partial order lock levels 
system allows programmers recursive tree data structures order locks lock level 
type checker statically veri es thread holds lock thread acquires locks descending order 
type checker uses intra procedural intra loop ow sensitive analysis check mutations trees describing partial order introduce cycles partial order changing partial order lead deadlocks 
know sound static system preventing deadlocks allows changes partial order runtime 
describes extend type system statically enforce object encapsulation prevent data races deadlocks 
implemented type system java 
experience indicates type system suciently expressive requires little programming overhead 
acknowledgments grateful viktor li rodrigo rodrigues alexandru anonymous referees comments 
jonathan aldrich having lengthy discussions 
research supported part darpa afrl contract nsf ccr nsf ccr singapore mit alliance 
agesen freund mitchell 
adding type parameterization java language 
object oriented programming systems languages applications oopsla october 
aldrich chambers 
alias annotations program understanding 
object oriented programming systems languages applications oopsla november 
almeida 
balloon types controlling sharing state data types 
european conference object oriented programming ecoop june 
bacon strom 
guava dialect java data races 
object oriented programming systems languages applications oopsla october 
boyapati lee rinard 
safe runtime downcasts ownership types 
technical report tr mit laboratory computer science june 
boyapati liskov shrira :10.1.1.1.8566:10.1.1.1.8566:10.1.1.1.8566
ownership types safe lazy upgrades object oriented databases 
technical report tr mit laboratory computer science july 
boyapati rinard 
parameterized type system race free java programs 
object oriented programming systems languages applications oopsla october 
bracha odersky stoutamire wadler 
making safe past adding genericity java programming language 
object oriented programming systems languages applications oopsla october 
brinch hansen 
programming language concurrent pascal 
ieee transactions software engineering se june 
chaki rajamani rehof 
types models model checking message passing programs 
principles programming languages popl january 
choi lee callahan sarkar sridharan 
ecient precise datarace detection multithreaded object oriented programs 
programming language design implementation pldi june 
clarke drossopoulou :10.1.1.59.6498
ownership encapsulation disjointness type ect 
object oriented programming systems languages applications oopsla november 
clarke noble potter 
simple ownership types object containment 
european conference object oriented programming ecoop june 
clarke potter noble 
ownership types exible alias protection 
object oriented programming systems languages applications oopsla october 
cormen leiserson rivest 
algorithms 
mit press 
crary walker morrisett :10.1.1.1.8566:10.1.1.1.3704
typed memory management calculus capabilities 
principles programming languages popl january 
day gruber liskov myers 
subtypes vs clauses constraining parametric polymorphism 
object oriented programming systems languages applications oopsla october 
deline fahndrich 
enforcing high level protocols low level software 
programming language design implementation pldi june 
detlefs leino nelson saxe 
extended static checking 
research report compaq systems research center december 
schonberg 
detecting access anomalies programs critical sections 
acm onr workshop parallel distributed debugging may 
engler chen hallem chelf 
bugs deviant behavior general approach inferring errors systems code 
symposium operating systems principles sosp october 
flanagan freund :10.1.1.143.5635
type race detection java 
programming language design implementation pldi june 
flatt krishnamurthi felleisen :10.1.1.23.8118
classes mixins 
principles programming languages popl january 
gosling joy steele 
java language speci cation 
addison wesley 
grossman morrisett jim hicks wang cheney 
region memory management cyclone 
programming language design implementation pldi june 
hogg :10.1.1.1.8566
islands aliasing protection object oriented languages 
object oriented programming systems languages applications oopsla october 
hogg lea wills de 
geneva convention treatment object aliasing 
oops messenger april 
igarashi kobayashi 
generic type system pi calculus 
principles programming languages popl january 

sema lint tool analyzing semaphore usage multithreaded unix kernel 
usenix winter technical conference january 
lam rinard 
role analysis 
principles programming languages popl january 
lampson horning london mitchell popek 
report programming language euclid 
sigplan notices february 
leino 
data groups specifying modi cation extended state 
object oriented programming systems languages applications oopsla october 
leino nelson 
data abstraction information hiding 
research report compaq systems research center november 
leino poetzsch ter zhou 
data groups specify check side ects 
programming language design implementation pldi june 
lindholm yellin 
java virtual machine speci cation 
addison wesley 
:10.1.1.1.8566
problem nested monitor calls 
operating systems review july 
lucassen gi ord 
polymorphic ect systems 
principles programming languages popl january 
minsky :10.1.1.16.5732
alias free pointers 
european conference object oriented programming ecoop july 
moeller schwartzbach 
pointer assertion logic engine 
programming language design implementation pldi june 
muller poetzsch ter 
universes type system controlling representation exposure 
poetzsch ter meyer editors programming languages fundamentals programming 

myers bank liskov 
parameterized types java 
principles programming languages popl january 
sagiv reps wilhelm 
solving shape analysis problems languages destructive updating 
transactions programming languages systems toplas january 
savage burrows nelson sobalvarro anderson :10.1.1.161.222
eraser dynamic data race detector multi threaded programs 
symposium operating systems principles sosp october 
sterling 
static data race analysis tool 
usenix winter technical conference january 

parametric polymorphism java approach translation re ective features 
object oriented programming systems languages applications oopsla october 
von praun gross :10.1.1.1.8566
object race detection 
object oriented programming systems languages applications oopsla october 
wadler 
linear types change world 
broy jones editors programming concepts methods 

wright felleisen :10.1.1.44.5122
syntactic approach type soundness 
information computation november 
appendix type system safe concurrent java appendix presents type system described section 
grammar type system shown 
defn defn class formal extends eld meth owner formal self cn thisthread final level new cn cn meth mn arg accesses final locks cn lock opt feg eld nal opt fd arg nal opt int boolean formal new fd fd mn arg feg feg synchronized feg fork feg final lock final cn class names fd eld names mn method names variable names owner names lock level names rst de ne number predicates type system informally 
predicates similar predicates :10.1.1.23.8118:10.1.1.143.5635
refer reader papers precise formulation 
predicate meaning class declared twice cycles class hierarchy class contains elds name declared inherited class contains methods name overriding methods return type parameter types methods overridden accesses clause overriding method subset overridden methods locks clause overriding method subset overridden methods cycles lock levels typing environment de ned nal opt owner lock set de ned ls thisthread ls lock ls ro final ro root owner minimum lock level de ned min cn lub cn lub cn cn note ro lub 
computed just expressions type checking 
de ne type system judgments 
typing rules judgments 
judgment meaning program yields type defn defn formed class de nition wf formed typing environment formed type subtype owner owner level cn cn formed lock level cn cn cn partial order formed lock levels cn min cn min partial order formed lock levels level cn nal expression owns lock level cn level min nal expression owns lock level min nal nal expression type eld init eld init formed eld initializer eld cnhf class cn formal parameters declares inherits eld meth cnhf class cn formal parameters declares inherits meth meth meth formed method rootowner root owner nal expression expression type ls min expression type evaluating create data races deadlocks prog defn defn thisthread defn class self cn thisthread owner owner nal cnhf eld meth class cnhf extends eld meth wf env wf env owner wf dom owner wf env wf dom nal opt wf type int int type boolean boolean type object owner type shared class class cn self cn owner type thread local class class thisthread owner type class cnhf self cn thisthread owner subtype refl subtype trans subtype class cn ho class cn hf extends cn hf 
cn ho cn hf fn owner owner thisthread owner thisthread owner owner owner self level cn owner self cn owner exp final owner owner formal wf owner owner level cn level class cn 
level cn cn level class cn 
cn cn cn level class cn 
cn cn cn cn min level min level cn cn min level lub min lub cn 
level cn cn min level cn min cn cn cn min level trans cn min cn cn min level cn level exp final cn cn level cn level min level level min level cn cn min level min final final var wf nal final final ref nal fd cnhf final final fd fn eld init field init thisthread nal opt fd eld field declared class cnhf 
eld eld cnhf field inherited eld cnhf class cn hg extends 
eld fn cn hg meth method declared class cnhf meth meth cnhf method inherited meth cnhf class cn hg extends 
meth fn cn hg method method arg locks cn lock opt nal rootowner ls thisthread min lub cn ls min mn arg accesses locks cn lock opt feg rootowner rootowner thisthread rootowner thisthread rootowner rootowner rootowner self cn rootowner rootowner final transitive final rootowner rootowner rootowner formal owner rootowner ro exp type ls ls ls exp sub ls min ls min ls min exp new ls min new exp var wf nal opt ls min exp var assign wf ls min ls min exp seq ls min ls min ls min exp arg nal opt ls min arg ls min ls min arg fe exp ls min boolean ls min ls min fe exp ref ls min rootowner fd cnhf ls nal fd cnhf ls min fd fn exp assign ls min rootowner fd cnhf ls ls min fn ls min fd fn exp sync level cn min locks cn level ls cn ls min synchronized exp sync redundant ls ls min ls min synchronized exp invoke renamed def fn yk ls min mn accesses locks cn lock opt 
cnhf ls min renamed rootowner renamed ls cn min renamed lock level min level min ls ls min mn renamed exp fork ls min nal thisthread thisthread ls min fork feg int 
