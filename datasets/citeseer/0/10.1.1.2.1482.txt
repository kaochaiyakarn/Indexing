tom mens programming technology lab vrije universiteit brussel pleinlaan brussels belgium tom mens vub ac famous statement measurable measurable galileo major goal science quantify observations way understand control underlying causes 
growing awareness evolution key aspect software increasing number computer scientists investigating metrics applied evolving software artifacts 
provides classification various approaches metrics understand control software evolution process gives concrete examples approaches identifies topics require research 
expect stimulate emerging research area 
categories subject descriptors software software engineering software engineering metrics software engineering distribution maintenance enhancement keywords software evolution evolution metrics 
improving software quality performance productivity key objective organisation develops software 
quantitative measurements software metrics particular help provide formal means estimate software quality complexity 
aim explore software metrics software evolution process 
better tool support evolution essential numerous scientific studies large scale software systems shown bulk total software development cost devoted software maintenance 
mainly due fact software tom mens postdoctoral fellow fund scientific research flanders belgium 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
vienna austria copyright acm xxxxx xx xx xx 
evolution metrics serge demeyer lab re engineering universiteit antwerpen belgium serge demeyer uia ua ac systems need evolve continuously cope changing software requirements 
metrics number interesting characteristics providing evolution support simple precise general scalable large size software systems 
provide overview kinds evolution support provided software metrics 
distinction software metrics evolution occurred predictive evolution occurred retrospective 
terminology adopted gall 

predictive analysis evolution software metrics analyse software aim assess parts need evolved evolution critical parts evolved parts suffer evolution 
cases existing research identified investigation experimental validation results remains crucial 
evolution critical parts evolution critical parts parts software need evolved due lack quality software parts violate design principles badly structured contain errors incomplete 
evolving parts software necessary improve software quality structure reverse effects software aging 
situations refactoring appropriate 
metrics long studied way assess quality large software systems applied objectoriented systems 
simple measurement sufficient assess complex thing software quality mention reliability results 
simon proposed metrics identify refactorings applied 
approach demonstrated typical refactorings move method move attribute extract class inline class 
generic distance cohesion metric property set superclasses attributes set methods 
metric parts software visually clustered easily identify anomalies suggest particular kind refactoring 
metrics recognise duplicated code removed applying appropriate refactorings 
code duplication typical phenomenon systems evolve relevance topic 
experiment metrics detect incom plete code 
specifically identified leaf classes object oriented framework 
indication bad design object oriented design heuristics proposed classes base classes 
stated leaf class contain methods 
reason leaf classes instantiated give rise run time error methods invoked 
metric calculates number methods understood class defined class ancestors metric calculates number direct children leaf class application tested leaf classes contained unimplemented method 
original developer application agreed conceptual error removed version application 
metrics detect obsolete code code anymore 
situations candidates removed versions software code understandable maintainable 
note easy find certain part software 
problem worse object oriented software due dynamic notions late binding self 
called dynamic metrics run time information extracted different executions software helpful 
evolution prone parts evolution prone parts parts software evolved wrong structure quality 
unstable parts correspond highly volatile software requirements 
possible way detect investigating release histories software identifying parts software frequently changed past 
detect situations needs version management system gain access previous versions software 
metrics example give measure number times change certain class module component 
change timestamp version applied 
changes past part software unstable evolve 
cope scalability issue typical examples approach visualise measurements 
example ball eick annotate code views colours showing code age jazayeri dimensional visual representation examining systems software release history 
lanza combines software visualisation software metrics simple effective way recover evolution object oriented software systems 
evolution sensitive parts evolution sensitive parts parts software cause problems evolution estimated effort managing impact changes high 
typically case parts software tightly interwoven 
changed parts may high impact parts 
obviously highly coupled parts software sensitive changes typically consist software entities strongly connected 
coupling metrics cbo coupling object classes cf coupling factor rfc response set class detect situations give measure evolution sensitive parts 
investigated cohesion metrics changeability indicators concluded case common cohesion metrics lcc loose class cohesion lcom lack cohesion methods 
long suitable cohesion metrics defined trusted changeability indicators 
concrete suggestion cohesion metric assess evolution sensitivity object oriented inheritance hierarchy base class non leaf class performs self sends subclasses perform super sends 
due intricate interaction self super sends replacing common base class new version lead problems subclasses easy detect cf 
fragile base class problem 
detect situation combine metrics count number self sends super sends class 
research remains necessary find metrics cohesion coupling detect parts software 

retrospective analysis evolution analyse previous releases software find structure quality improved 
alternatively study evolution process understand changed detect places substantial intrusive changes appear 
cases software metrics certain extent 
analysing software comparing current version software previous version try assess goals evolution achieved 
example evolution restructuring assess new version better structured old 
metrics detect kind evolution took place 
gall coupling metrics retrospective empirical analysis multiple releases large telecommunication switching system 
results estimate accurately maintenance activities 
demeyer evaluated number existing size inheritance metrics releases medium sized object oriented framework visualworks smalltalk 
framework documentation deduce transition release second release restructuring transition second third release mainly extension 
restructuring extension confirmed measurements 
restructuring phase substantial number classes changed hierarchy nesting level number superclasses number methods defined 
implies changes middle class hierarchy typical major restructuring 
extension phase classes changed hierarchy nesting level significant amount increased decreased number children 
changes leaves inheritance hierarchy typical extensions 
consequently restructuring improve inheritance structure subsequent transition really exploited inheritance hierarchy 
experiment metrics compare versions soul logic language implemented top visu smalltalk 
evolution release release mainly extension new classes introduced class removed 
apart existing classes extended detected increase methods old release new 
extensions involved methods classes introduced new methods 
class refactored detected change hierarchy nesting level combined decrease number defined methods 
information provide significant help identify candidate classes look trying get better understanding evolution took place 
experiments indicate metrics detect kind evolution took place needed find metrics appropriate purpose 
analysing process analysing changes applied obtain new version software possible reconstruct evolution process deduce underlying design rationale 
metrics quite applicable data analyse 
example demeyer measure successive versions software system order discover refactorings applied version software 
small medium sized case studies conclude possible reverse engineer implementation drifted original design 
lehman applied metrics long term evolution decade system determine productivity significantly changed period 
specifically discuss detection change points points time highlight sudden changes evolutionary behaviour case productivity changes 
metrics assess cost estimation evolution software system 

classification various approaches metrics understand predict plan control software evolution 
classification consisted main categories predictive analysis evolution order detect evolution critical evolution sensitive evolution prone parts software retrospective analysis evolution taken place subdivided software process 
categories concrete examples literature provided 
overview identified number topics research 
coupling cohesion metrics 
coupling cohesion measure system structural complexity assess design quality guide improvement efforts 
numerous metrics proposed quantify coupling cohesion 
unfortunately strong disagreement literature constitute coupling cohesion metrics reluctant indicators evolution critical evolution sensitive system parts 
feel coupling cohesion coarse criteria complemented finer grained factors method class module variables attributes invocations inheritance 
easier assess trade involved design activity possible see system evolving right direction 
scalability issues 
scalability issue software engineering respect metrics look particularly appealing 
analysing evolving software easily results exponential explosion number measurements interpreted 
visualisation interesting path explore pictures intrinsic ability help human eye brain focus relevant issues glance 
key question visualisation interpreting measurements 
number possible combinations vast area explore 
empirical research realistic case studies 
context software evolution need empirical research 
case dealing evolution metrics provide significant results approach tested sufficiently large sets representative examples 
unfortunately current day research initial evaluation technique case study relies single small toy example chosen favour technique study 
serious impact credibility results especially concerning 
researcher picks toy example difficult compare results 
agree set case studies representative kinds problems want solve 
amount open source projects available today feasible agree benchmark 
long term evolution 
important look long term evolution software give different perspective nature software system consideration 
detecting different kinds evolution 
initial experiments indicated metrics detect different kinds evolution restructuring extension 
remains open question kinds software evolution identified metrics metrics appropriate finding particular kind software evolution 
change configuration management final issue needs tools maintain precise logs concerning changes applied order achieve version software 
currently configuration management systems state record course grained intermediate states precise changes applied 
heuristics infer changes intermediate states possible assess precision heuristics 
change configuration management tools shortcoming widely 
measuring software quality 
important difficult research topic remains metrics measure quality software respect certain goal reusability measure quality improved degraded releases software 
process issues 
essential difficult topic measure predict changes evolution process 
includes issues programmer productivity cost estimation effort estimation 

acknowledgments research carried part international research network foundations software evolution involving research institutes different european countries belgium germany portugal switzerland austria 
network financed fund scientific research flanders belgium 
anonymous referees useful comments suggestions 

ball eick 
software visualization large 
ieee computer april 
bieman 
kang 
cohesion reuse object oriented system 
proc 
symp 
software reusability pages april 
briand daly unified framework coupling measurement object oriented systems 
ieee transactions software engineering 
brito abreu 
design quality evaluation object oriented software systems 
proc 
th int conf 
software quality pages october 
chidamber kemerer 
metrics suite object oriented design 
ieee trans 
software engineering june 
coleman ash oman 
metrics evaluate software system maintainability 
ieee computer pages august 
conradi westfechtel 
version models software configuration management 
acm computing surveys june 
demeyer ducasse 
metrics really help 
proc 
languages mod les objets pages 
hermes science publications 
demeyer ducasse lanza 
hybrid reverse engineering approach combining metrics program visualization 
proc 
working conf 
reverse engineering wcre 
ieee computer society press october 
demeyer ducasse nierstrasz 
finding refactorings change metrics 
proc 
int 
conf 
oopsla 
acm press 
demeyer mens 
software evolution benchmark 
proc 
int 
workshop principles software evolution september 
davis li 
practical look lack cohesion methods metrics 
journal object oriented programming september 
fenton pfleeger 
software metrics rigorous practical approach 
international thomson computer press london uk second edition 
gall hajek jazayeri 
detection logical coupling product release history 
international conference software maintenance icsm 
ieee computer society press november 

managing application program maintenance expenditure 
comm 
acm 
henderson sellers 
object oriented metrics measures complexity 
prentice hall 
hitz 
measuring coupling cohesion object oriented systems 
proc 
int 
symp 
applied corporate computing pages october 
jazayeri riva gall 
visualizing software release histories color third dimension 
yang white editors proc 
int conf 
software maintenance icsm 
ieee computer society 
keller 
cohesion changeability indicator object oriented systems 
sousa ebert editors proc 
th european conf 
software maintenance reengineering pages 
ieee computer society press 
kemerer slaughter 
empirical approach studying software evolution 
ieee trans 
software engineering july august 
kontogiannis 
evaluation experiments detection programming patterns software metrics 
proc 
working conf 
reverse engineering wcre pages 
ieee computer society press 
merlo 
assessing benefits incorporating function clone detection development process 
proc 
int conf 
software maintenance icsm 
ieee computer society press 
lanza 
evolution matrix recovering software evolution software visualization techniques 
proc 
int workshop principles software evolution 
lewerentz simon 
product metrics tool integrated software development environment 
demeyer bosch editors object oriented technology ecoop workshop reader lncs pages 
springer verlag 
li henry 
object oriented metrics predict maintainability 
journal systems software february 
swanson 
software maintenance management study maintenance computer application software data processing organizations 
addison wesley 
lorenz kidd 
object oriented software metrics practical approach 
prentice hall 

object oriented metrics automatic design flaws large scale systems 
demeyer bosch editors object oriented technology ecoop workshop reader lncs pages 
springer verlag 

managing oo projects better 
ieee software july 
opdyke 
refactoring object oriented frameworks 
phd thesis university illinois urbana champaign 
lehman 
metrics software evolution effort predictors case study 
proc 
int 
conf 
software maintenance pages october 
lehman 
defining applying metrics context continuing software evolution 


object oriented design heuristics 
addison wesley publishing april 
simon lewerentz 
metrics refactoring 
proc 
european conf 
software maintenance reengineering pages 
ieee computer society press 
szyperski 
component software object oriented programming 
acm press wesley 
wuyts 
declarative reasoning structure object oriented systems 
proc 
int conf 
tools usa pages 
ieee computer society press 
yourdon constantine 
structured design fundamentals discipline computer program systems design 
prentice hall 
