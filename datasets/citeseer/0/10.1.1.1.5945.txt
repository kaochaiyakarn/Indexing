safe runtime downcasts ownership types chandrasekhar boyapati robert lee martin rinard laboratory computer science massachusetts institute technology technology square cambridge ma chandra rinard lcs mit edu 
possibility aliasing objects constitutes primary challenges understanding reasoning correctness object oriented programs 
ownership types provide principled way specifying statically restrictions object aliasing 
ownership types aid program understanding evolution verify absence data races deadlocks multithreaded programs verify absence memory errors programs explicit deallocation 
describes efficient technique supporting safe runtime downcasts ownership types 
technique uses type passing approach avoids associated significant space overhead storing runtime ownership information objects potentially involved downcasts 
technique interprocedural analysis preserves separate compilation model java 
implemented technique context safe concurrent java extension java uses ownership types guarantee absence data races deadlocks typed programs 
approach jvm compatible implementation translates programs bytecodes run regular jvms 
possibility aliasing objects constitutes primary challenges understanding reasoning correctness object oriented programs 
unexpected aliasing lead broken invariants mistaken assumptions security holes surprising side effects may lead defective software 
ownership types provide principled way specifying statically enforceable restrictions object aliasing 
ownership types introduced flexible alias protection formalized :10.1.1.23.2115
parameterized race free java prfj extends ownership types support inheritance dynamic aliases allow description iterators uses statically ensure absence data races java programs 
prfj uses effects clauses combines ownership types unique pointers read fields objects allows important idioms expressed 
safe concurrent java scj extends prfj prevent data races deadlocks java programs :10.1.1.1.5802
uses chandrasekhar boyapati ownership types aid software evolution 
cyclone uses similar type system guarantee absence memory errors programs explicit deallocation 
ownership type systems programmers parameterize classes methods owners 
enables writing generic code different contexts 
parameterization somewhat similar proposals parametric types java :10.1.1.21.2609
ownership type systems primarily static type systems 
type checker uses ownership type annotations statically ensure absence certain classes errors data races prfj memory errors cyclone usually unnecessary preserve ownership information runtime 
languages java purely statically typed languages 
java allows downcasts checked runtime 
support safe runtime downcasts system preserve ownership information runtime ownership types context language java 
primarily techniques implement parametric polymorphism language java 
type erasure approach idea deleting type parameters stack erases stack :10.1.1.21.2609
approach preserve ownership information runtime unsuitable supporting safe runtime downcasts ownership types 
code duplication approach polymorphism supported creating specialized classes methods supporting different instantiation parametric class method 
parameters ownership types usually objects approach lead unacceptably large number classes methods 
type passing approach information type parameters explicitly stored objects passed code requiring 
system stores owners object runtime approach potential drawback adding space overhead 
java objects typically small adding single field object may increase size objects significant fraction 
describes efficient technique supporting safe runtime downcasts ownership types 
technique uses type passing approach avoids associated significant space overhead storing runtime ownership information objects potentially involved downcasts 
technique inter procedural analysis preserves separate compilation model java 
implemented technique safe concurrent java extension java uses ownership types guarantee absence data races deadlocks typed programs :10.1.1.1.5802
approach jvm compatible implementation translates programs bytecodes run regular jvms 
rest organized follows 
section gives overview ownership types safe concurrent java scj 
section describes support safe runtime downcasts scj 
section presents related section concludes 
safe concurrent java safe runtime downcasts ownership types safe concurrent java scj extension java guarantees absence data races deadlocks typed programs :10.1.1.1.5802
basic idea system follows 
programmers write multithreaded programs locking discipline mind 
system allows programmers specify locking discipline programs 
resulting specifications take form type declarations 
prevent data races scj programmers associate object protection mechanism ensures accesses object create data races 
protection mechanism object specify mutual exclusion lock protects object unsynchronized concurrent accesses threads safely access object synchronization object immutable object accessible single thread variable contains unique pointer object 
unique pointers useful support object migration threads 
type checker statically verifies program uses objects accordance declared protection mechanisms 
prevent deadlocks programmers partition locks fixed number lock levels specify partial order lock levels 
type checker statically verifies thread holds lock thread acquires locks descending order 
scj allows programmers recursive tree data structures order locks belong lock level 
example programmers specify nodes tree locked tree order 
scj allows mutations data structure change partial order runtime 
type checker uses intra procedural intra loop flow sensitive analysis statically verify mutations introduce cycles partial order changing partial order lead deadlocks 
ownership types subset safe concurrent java section presents mini safe concurrent java subset scj prevents data races typed programs 
simplify presentation key ideas approach rest discussion context 
implementation works scj handles features java language 
key type system concept object ownership 
object owner 
object owned object special thread owner called thisthread 
objects owned thisthread directly transitively local corresponding thread accessed thread 
presents example ownership relation 
draw arrow object object object owns object type system statically verifies program respects ownership properties shown 
chandrasekhar boyapati thisthread thisthread thread objects thread objects potentially shared objects fig 

ownership relation 
owner object change time 

ownership relation forms forest rooted trees roots self loops 

necessary sufficient condition thread access object thread hold lock root ownership tree object belongs 

thread implicitly holds lock corresponding thisthread owner 
thread access object owned corresponding thisthread owner synchronization 
fig 

ownership properties shows grammar 
shows tstack program 
simplicity examples extended language syntactically closer java 
tstack stack objects 
tstack implemented linked list 
class definition parameterized list owners 
parameterization helps programmers write generic code implement class create different objects class different protection mechanisms 
tstack class parameterized thisowner towner 
thisowner owns tstack object towner owns objects contained tstack 
general formal parameter class owns object 
case owner thisthread defn defn class cn owner extends field meth cn owner object owner owner self thisthread final meth mn arg accesses final field final opt fd arg final opt int new fd fd mn arg synchronized fork final cn class names fd field names mn method names variable names owner names fig 

grammar safe runtime downcasts ownership types thisowner owns tstack object towner owns objects stack 
class tstack thisowner towner tnode towner head null tstack void push towner value accesses tnode towner newnode new tnode towner value head head newnode towner pop accesses towner value head value head head return value class tnode thisowner towner towner value tnode thisowner towner tnode towner tnode thisowner towner accesses value towner value accesses return value tnode thisowner towner accesses return class thisowner int tstack thisthread thisthread new tstack thisthread thisthread tstack thisthread self new tstack thisthread self tstack fig 

stack objects thisthread tstack head head head head head head tnode tnode tnode tnode tnode tnode head value head value head value head value head value head value fig 

ownership relation parameters instantiate tstack class 
means main thread owns tstack objects contained tstack 
case main thread owns tstack objects contained tstack 
ownership relation tstack objects depicted assuming stacks contain elements 
method contain accesses clause specifies objects method accesses protected externally acquired locks 
callers required hold locks root owners objects specified accesses clause invoke method 
example value methods tnode class assume callers hold lock root owner tnode object 
accesses clause value methods typed 
static type checking section describes important rules static type checking ownership types 
full set rules :10.1.1.1.5802
core type chandrasekhar boyapati system set rules reasoning typing judgment ls program checked included provide information class definitions 
environment providing types free variables ls describes set locks statically known held evaluated 
type rule accessing field fd checks typed expression class type cn actual owner parameters 
verifies class cn formal parameters declares inherits field fd type thread holds lock root owner declared inside class contain occurrences formal class parameters 
outside class rename expression formal parameters corresponding actual parameters 
expression ls cn fd cn rootowner ls ls fd fn rule invoking method checks arguments right type thread holds locks root owners expressions accesses clause method 
expressions types inside method renamed appropriately outside class 
expression invoke ls cn mn tj yj accesses cn ls ej tj fn rootowner fn ls ls mn fn rule checking method assumes locks root owners expressions specified accesses clause held 
rule type checks method body assumption 
method arg final ei ti rootowner ei ri thisthread mn arg accesses rule subtyping ensures parameters supertype instantiated constants self thisthread owners scope preserving owner position 
owner preserved owner system special owns object 
subtype cn class cn extends cn 

self thisthread fj cn cn fn safe runtime downcasts safe runtime downcasts ownership types section describes support safe runtime downcasts efficiently 
describe technique context mini safe concurrent java section 
type system described section purely static type system 
fact way compile run program convert java program type checking removing type parameters accesses clauses program 
program compiled run regular java program 
language java purely statically typed language 
java allows downcasts checked runtime 
support safe downcasts system preserve ownership information runtime ownership types context language java 
express runtime casts extend grammar follows 

cn fig 

grammar extensions support runtime casts static type checking rules runtime casts 
casting object supertype declared type safe 
casting object subtype declared type requires runtime checking 
section contains rule subtyping 
expression ls ls expression downcast requires runtime check ls ls support downcasts store information type parameters explicitly objects pass information code requiring information 
system stores owners object runtime approach potential drawback adding object space overhead 
java objects typically small adding single field object may increase size objects significant fraction 
technique avoids associated significant space overhead storing runtime ownership information objects potentially involved downcasts 
technique efficient implementation type passing key observations nature parameterization ownership types 
remainder section organized follows 
sections describe key observations enable support downcasts efficiently 
sections presents technique supporting safe downcasts 
chandrasekhar boyapati class thisowner 
class tstack thisowner towner 
class tstack thisowner towner extends tstack thisowner towner 
object thisthread object thisthread object thisthread 
thisthread self 
tstack thisthread thisthread tstack thisthread self 
tstack thisthread thisthread tstack thisthread self 
thisthread safe iff belongs class self compile time error 
tstack thisthread thisthread requires checking runtime ownership tstack thisthread self requires checking runtime ownership 
tstack thisthread thisthread safe iff belongs class tstack tstack thisthread self compile time error fig 

runtime downcasts downcasts types single owners key observation enables efficient implementation downcasts follows 
consider code 
line object declared type object thisthread downcast type thisthread downcast owner declared type matches owner type downcast 
downcast safe iff belongs class runtime 
unnecessary check ownership information runtime downcast 
general object downcast type matching owners necessary check ownership information runtime ensure downcast safe 
owners declared type object match owners type object downcast downcast safe iff object belongs appropriate class runtime lines 
owners match downcast fail line 
primary benefit observation object downcast type single owner unnecessary check ownership information runtime ensure downcast safe 
vast majority classes system ownership types single owners implies unnecessary check ownership information runtime downcasts 
classes usually multiple owners collection classes 
times necessary check ownership information runtime ensure downcast safe object downcast type multiple owners lines 
anonymous owners safe runtime downcasts ownership types key observation enables efficient implementation downcasts follows 
consider code 
tstack class parameterized thisowner towner 
owner parameter thisowner static scope visible 
similarly owner parameter thisowner class body class owner parameter unnecessary name parameter 
system allows programmers anonymous owner parameters 
shows extend grammar support anonymous owner parameters 
shows tstack example implemented anonymous owners tstack class class 
defn 
class cn extends field meth fig 

grammar extensions support anonymous owners primary benefit having anonymous owners owner parameter class named unnecessary store owner parameter class runtime pass owner parameter code uses class runtime 
system ownership types classes usually named owners collection classes multiple owners 
examples include vector hashtable classes single owners anonymous 
unnecessary store ownership information classes pass ownership information code uses classes 
system incurs runtime space time overhead code uses classes named owner parameters collection classes 
rest code overhead system 
preserving ownership information runtime section describes system preserves ownership information runtime classes named owner parameters context 
grammar extensions figures 
section presents rules translating program equivalent program java language ownership types 
support safe runtime downcasts translation process simple 
converted program equivalent java program simply removing owner parameters accesses clauses 
support safe runtime downcasts preserve ownership information translation process 
core translation set rules form rule translates code fragment code fragment program checked included provide information class definitions 
chandrasekhar boyapati 
defn defn defn class cn extends cn field meth class cn extends cn object field method defn class cn extends cn field meth class cn extends cn object field method meth mn arg accesses final mn arg field final opt fd final opt fd arg final opt fd final opt fd cn owner cn int int cn temp cn temp throw new temp fn throw new temp new cn temp new cn temp temp fn temp class cn 
new cn temp new cn temp temp fn temp class cn 
thisthread owner thisthread self owner self fd fd fd fd mn mn arg arg arg synchronized synchronized fork fork fig 

translation function safe runtime downcasts ownership types public class owner public static object self self public static object self return self public static object thisthread return thread fig 

owner class environment containing formal owner parameters scope translated code uses owner class shown 
owner class contains static methods return objects represent thisthread owner self owner respectively 
translation rules 
section explains translation process examples 
implementation section illustrates examples implementation preserves ownership information runtime classes named owner parameters 
safe concurrent java scj program typed respect rules static type checking implementation translates program equivalent java program 
implementation translates scj program java bytecodes directly 
ease presentation describe equivalent translation java code 
translation mechanism illustrated figures 
shows tstack class anonymous owners 
shows client code uses tstack class 
figures show translation tstack code client code 
classes classes translated code contain extra owner fields named owner parameter class 
example translated tstack class extra towner field 
translated tnode class extra fields thisowner towner 
translated class extra fields class named owner parameters 
constructors constructors translated code contain extra owner arguments named owner parameter class 
constructors translated code initialize owner fields class owner arguments constructor 
example constructor tstack extra towner argument 
constructor initializes towner field tstack object towner argument 
allocation sites client code translated version creates new object class pass extra owner arguments constructor named owner parameter class 
owner expression evaluates object client code passes object constructor 
example push method tstack passes object chandrasekhar boyapati tstack anonymous owner towner owns objects stack 
class tstack towner tnode towner head null tstack void push towner value accesses tnode towner newnode new tnode towner value head head newnode towner pop accesses towner value head value head head return value class tnode thisowner towner towner value tnode thisowner towner tnode towner tnode thisowner towner accesses value towner value accesses return value tnode thisowner towner accesses return class int fig 

tstack anonymous owners class 
class tstack towner 
class tstack towner extends tstack towner 
object thisthread object thisthread 
tstack thisthread thisthread new tstack thisthread thisthread tstack thisthread self new tstack thisthread self 
tstack thisthread thisthread tstack thisthread self 
tstack thisthread thisthread tstack thisthread self 
tstack thisthread thisthread tstack thisthread self 
boolean instanceof tstack thisthread thisthread boolean instanceof tstack thisthread self fig 

client code tstack safe runtime downcasts ownership types tstack anonymous owner towner owns objects stack 
class tstack object towner tnode head null tstack object towner towner towner void push value tnode newnode new tnode towner value head head newnode pop value head value head head return value class tnode object thisowner towner value tnode tnode object thisowner object towner tnode thisowner thisowner towner towner value value return value tnode return class int fig 

translation tstack class 
class tstack 
class tstack extends tstack 
object object 
tstack new tstack owner thisthread tstack new tstack owner self 
tstack tstack 
tstack towner owner thisthread throw new tstack towner owner self throw new tstack towner owner thisthread throw new tstack towner owner self throw new 
boolean instanceof tstack tstack towner owner thisthread boolean instanceof tstack tstack towner owner self fig 

translation tstack client code chandrasekhar boyapati argument tnode constructor 
owner formal parameter client code passes value formal parameter stored extra owner fields 
example push method tstack passes value stored towner field second argument tnode constructor 
owner thisthread self client code passes object returned owner thisthread owner self constructor 
example client code creates passing owner thisthread owner self tstack constructor respectively 
casts casts translated code check java types match check owners match 
example line translated code checks java type tstack checks owner elements tstack thisthread 
line translated code checks java type tstack checks owner elements tstack self 
instanceof instanceof operation translated code returns true iff java types match owners match 
example line instanceof operation returns true iff java type tstack owner elements tstack thisthread 
line instanceof operation returns true iff java type tstack owner elements tstack self 
parameterized methods parameterized methods handled similar parameterized classes 
ease presentation language described section parameterized classes parameterized methods 
implementation handles parameterized classes parameterized methods 
named owner parameters methods explicitly passed arguments methods translated code 
related ownership types ownership types introduced flexible alias protection formalized :10.1.1.23.2115
parameterized race free java prfj extends ownership types support inheritance dynamic aliases allow description iterators uses statically ensure absence data races java programs 
prfj uses effects clauses combines ownership types unique pointers read fields objects allows important idioms expressed 
safe concurrent java scj extends prfj prevent data races deadlocks java programs :10.1.1.1.5802
uses ownership types aid software evolution 
cyclone uses similar type system guarantee absence memory errors programs explicit deallocation 
parametric polymorphism java safe runtime downcasts ownership types implementation parameterized ownership types related type passing approach implementing parametric polymorphism java 
type passing approach information type parameters explicitly stored objects passed code requiring 
system stores owners object runtime approach potential drawback adding object space overhead 
java objects typically small adding single field object may increase size objects significant fraction 
describes efficient technique implementing ownership types type passing approach avoids associated significant space overhead storing runtime ownership information objects 
types safe concurrent programing researchers proposed language mechanisms safe concurrent programming 
extended static checker java esc java annotation system uses theorem prover statically detect kinds errors including data races deadlocks 
race free java extends static annotations esc java formal race free type system 
guava dialect java preventing data races 
parameterized race free java prfj builds race free java lets programmers write generic code implement class create different objects class different protection mechanisms 
prfj supports objects unique pointers read objects fields accessed synchronization 
safe concurrent java scj extends prfj prevent data races deadlocks multithreaded programs :10.1.1.1.5802
possibility aliasing objects constitutes primary challenges understanding reasoning correctness object oriented programs 
ownership types provide principled way specifying statically restrictions object aliasing 
ownership types aid program understanding evolution verify absence data races deadlocks multithreaded programs verify absence memory errors programs explicit deallocation 
describes efficient technique supporting safe runtime downcasts ownership types 
technique uses type passing approach avoids associated significant space overhead storing runtime ownership information objects potentially involved downcasts 
technique inter procedural analysis preserves separate compilation model java 
implemented technique context safe concurrent java extension java uses ownership types guarantee absence data races deadlocks typed programs 
approach jvm compatible implementation translates programs bytecodes run regular jvms 
chandrasekhar boyapati 
agesen freund mitchell 
adding type parameterization java language 
object oriented programming systems languages applications oopsla october 

aldrich chambers 
alias annotations program understanding 
object oriented programming systems languages applications oopsla november 

bacon strom 
guava dialect java data races 
object oriented programming systems languages applications oopsla october 

boyapati lee rinard 
ownership types safe programming preventing data races deadlocks 
object oriented programming systems languages applications oopsla november 

boyapati rinard 
parameterized type system race free java programs 
object oriented programming systems languages applications oopsla october 

bracha odersky stoutamire wadler 
making safe past adding genericity java programming language 
object oriented programming systems languages applications oopsla october 

cartwright steele 
compatible genericity run time types java programming language 
object oriented programming systems languages applications oopsla october 

clarke noble potter 
simple ownership types object containment 
european conference object oriented programming ecoop june 

clarke potter noble 
ownership types flexible alias protection 
object oriented programming systems languages applications oopsla october 

detlefs leino nelson saxe 
extended static checking 
research report compaq systems research center 

flanagan freund 
type race detection java 
programming language design implementation pldi june 

gosling joy steele 
java language specification 
addison wesley 

grossman morrisett jim hicks wang cheney 
regionbased memory management cyclone 
programming language design implementation pldi june 

hogg lea alan wills de 
geneva convention treatment object aliasing april 

lindholm yellin 
java virtual machine specification 
addison wesley 

minsky 
alias free pointers 
european conference object oriented programming ecoop july 

myers bank liskov 
parameterized types java 
principles programming languages popl january 


parametric polymorphism java efficient implementation parametric methods 
symposium applied computing sac march 


parametric polymorphism java approach translation reflective features 
object oriented programming systems languages applications oopsla october 
