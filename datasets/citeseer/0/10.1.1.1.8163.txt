appeared focs decision problems propositional linear logic patrick lincoln john mitchell andre scedrov natarajan shankar linear logic introduced girard refinement classical logic natural intrinsic accounting resources 
show propositional quantifier free logics full propositional linear logic undecidable 
prove modal storage operator indicates unboundedness resources decision problem pspace complete 
establish membership np multiplicative fragment np completeness multiplicative fragment extended unrestricted weakening undecidability certain fragments noncommutative propositional linear logic 
linear logic introduced girard refinement classical logic may derived gentzen style sequent calculus axiomatization classical logic steps 
resulting sequent system lincoln cs stanford edu department computer science stanford university stanford ca computer science laboratory sri international menlo park ca 
supported bell laboratories doctoral scholarship sri internal funding 
cs stanford edu department computer science stanford university stanford ca 
supported part nsf pyi award matching funds digital equipment powell foundation xerox nsf ccr wallace davis faculty scholarship 
andre saul cis upenn edu department mathematics university pennsylvania philadelphia pa 
partially supported nsf ccr onr young scientist award natural sciences association university pennsylvania 
completed sabbatical computer science department center study language information stanford university stanford ca 
shankar csl sri com computer science laboratory sri international menlo park ca 
supported sri internal funding 
appendix standard notation defined 
step deriving linear logic classical logic eliminate structural rules contraction weakening view hypothesis resources requirements met resources 
formula implies means resource meet requirement contraction allows property follows assumptions formula derived single assumption formula 
example formula implies derivable contraction 
weakening allows deductions hypotheses formula implies derivable weakening 
contraction weakening possible assumption little desired rules responsible see hindsight loss control resources classical intuitionistic logic 
excluding rules produces linear system assumption exactly 
resulting linear logic formulas indicate bounded finite resources necessarily discarded duplicated 
second step deriving linear logic involves propositional connectives 
briefly change structural rules leads naturally forms conjunction called multiplicative additive similarly forms disjunction 
multiplicative forms disallow sharing resources additive forms require resource sharing 
order recover full deductive power classical logic storage reuse operator added 
intuitively formula provides unlimited resource computational metaphor formula means datum stored memory may referenced unlimited number times 
dual modal operator definable negation 
formula allows unlimited consumption basic framework remains linear unbounded reuse consumption allowed locally formulas specifically marked 
respectively 
resulting logic natural proof theoretic computational 
particular cut elimination central property tradition see example established linear logic 
cut elimination establishes consistency provides natural computational mechanism resembles reduction lambda calculus 
early application resource sensitive aspect logic implementation functional programming language garbage collection replaced explicit duplication operations linear logic 
studies demonstrated connections petri nets models concurrency 
regard concurrency similarity proof nets inherent model computation associated cut elimination multiplicative linear logic connection graphs designed model connection machine computation 
applications include optimization copying lazy functional programming language implementation control structure logic programs 
natural characterization polynomial time computations bounded version linear logic obtained limiting reuse specified bounds bounding number datum memory 
study complexity provability fragments propositional quantifier free linear logic 
notable result full propositional linear logic undecidable 
description results smallest fragment considered called multiplicative linear logic 
multiplicative fragment contains linear implication negation forms conjunction disjunction require available resource partitioned subformulas shared 
show decision problem fragment np 
unrestricted weakening allowed multiplicative fragment np complete 
natural fragments extending pure multiplicative linear logic 
show extension additive multiplicative connectives pspace complete 
note passing second extension multiplicative connectives storage hard reachability problem petri nets equivalently commutative semi thue systems vector addition systems 
follows conservativity properties established previous relating linear logic petri nets 
reachability decidable best known lower bound expspace 
upper bound primitive recursive ackermann function 
show provability full propositional linear logic additive multiplicative connectives modal storage operator undecidable 
provability trivially proof system effective 
establish undecidability noncommutative variant linear logic additive connectives system extends calculus see 
remainder state requisite lemmas give brief overview proofs theorems 
complete detailed proofs may technical report :10.1.1.1.8163
multiplicative additive linear logic pspacecomplete section deals fragment propositional linear logic called mall contains multiplicative connectives omega additive connectives phi constants excludes modal storage operators 
proof rules mall rules appendix associated connectives constants 
mall studied girard andreoli pareschi 
contrast classical propositional logic npcomplete show provability mall pspace complete 
cut elimination theorem mall fragment follows cut elimination theorem subformula property linear logic 
lemma provability mall sequent decided polynomial space bounded turing machine 
proof 
linear bound depth cut free mall proofs alternating turing machine generate check branches proof parallel 
informal outline pspace hardness mall pspace hardness mall provability demonstrated reduction validity problem quantified boolean formulas qbf 
brief key intuitions emphasized 
quantified boolean formula prenex form quantifier free boolean matrix quantifying boolean variables syntactic variable ranges ranges quantifier free boolean formulas ranges boolean variables 
assignment maps free variables truth values validity written qbf validity problem closed qbf 
provide succinct encoding closed qbf mall sequent provable exactly valid 
part encodes boolean matrix second part encodes quantifier prefix 
encoding carried sided formulation mall sequent calculus example provable sequent gammaffib written omega encoding boolean evaluation 
encoding boolean connectives quantifiers mall described means example 
valid qbf restatement quantifier reversed falsifiable 
encoding boolean matrix describes formula circuit signals labeled mall literals 
assignment encoded sequence mall formulas hii mall formula encoding output labeled literal encoded sequent hii encoded hii assignment hfx gi encoded sequence formulas literals input signals encoding boolean formula 
encoding output labeled formula expressing truth table negation mall 
omega phi omega negation formula 
sequent encodes situation input asserts correctly output sequent easily seen proof omega omega phi omega similarly sequent representing fx tg provable 
hand sequent asserts falsely fx tg sequent provable mall refinement classical logic falsifiable sequents ordinary propositional logic provable 
truth tables boolean connectives similarly expressed mall formulas entire matrix encoded 
subtlety fanout signal exceeds encoding provide explicit means duplicating corresponding mall literal mall lacks contraction rule 
encoding boolean quantification encode boolean quantification need encode individual quantifiers dependencies quantifiers 
encoding assignments boolean connectives correct way encode boolean quantifiers encode formula phi 
reason formula phi behaves existential quantification proof search nondeterministic choice gamma phi gamma gamma phi gamma assignment respectively valid 
similarly formula sequent behaves universal quantification requiring proofs gamma gamma gamma gamma gamma representation quantifiers mall encoding formula valid expresses 
guarantee correctly encoded need ensure encoding provable proof choice witness depend dependency shown proof 
gamma gamma phi gamma phi gamma phi gamma phi phi omega omega phi 
omega omega omega phi omega omega failed proof attempt omega omega omega omega phi omega omega phi omega omega phi omega omega correct deduction respecting quantifier order solution encode quantifier order way forces phi introduced cut free proof 
introduce new mall atoms define encoding omega phi omega omega quantifier encoding hides key needed unlock quantifier encoding attempt violate quantifier ordering shown subgoal unprovable mall due absence applicable weakening rule 
attempts violating quantifier ordering fail deduction respect quantifier order succeeds shown 
proof pspace hardness mall lemma boolean formula assignment variables 
iff hii 
iff hii lemma establishes correctness encoding quantifiers 
lemma boolean formula variables xn assignment xm xn iff hii mxm provable 
lemma closed qbf iff xn provable mall 
size sequent encoding qbf polynomial encoding takes place polynomial time 
lemmas yields final result 
theorem mall provability pspace complete 
sided sequents intuitionistic fragment mall constrains right hand side sequent contain formula 
sided reformulation proof carried entirely intuitionistic fragment mall intuitionistic mall pspace complete 
propositional linear logic undecidable show propositional linear logic undecidable reduction halting problem form counter machine 
specifically extending linear logic theories axioms may number times proof 
describe form branching counter machines undecidable halting problem show encode machines propositional linear logic theories 
axioms theories special form able show faithfulness encoding natural form cut elimination non logical axioms 
illustrate encoding machines example simulation simple computation section 
reading reader may wish jump ahead section demonstrates basic mechanism undecidability proof 
linear logic augmented theories augmenting linear logic notion theory 
essentially theory set non logical axioms sequents may occur leaves proof tree 
theories described extension earlier multiplicative theories 
define positive literal propositions negative literal propositions atomic formula positive negative literal 
theories interest axiom may linear logic sequent form linear logic formula remainder sequent negative literals 
example sequents omega may axioms 
omega may 
restriction axioms achieve strict control shape proof provided lemma 
control lost definition theory generalized applications weaker available results sufficient 
finite set axioms theory 
consider finite theories theories may encoded formulas linear logic impossible allowed arbitrary sets axioms 
theory say sequent gamma provable exactly able derive gamma standard set linear logic proof rules axioms axiom treated reusable sequent may occur leaf proof tree 
directed cut premise axiom cut formula negative literal axiom 
cut axioms directed 
directed standardized proof cuts directed 
definitions may obtain result 
lemma cut standardization proof gamma theory directed proof gamma theory proof lemma follows induction length proofs 
step induction appeal modified version usual cut elimination procedure 
coding theories formulas define translation theory axioms pure linear logic formula ft delta delta delta delta delta delta defined axiom follows delta omega omega omega delta delta delta omega axiom reusable formula parity subformulas axiom inverted formula 
translation able achieve result 
lemma finite set axioms sequent gamma provable theory gamma provable 
branching counter machines zero test introduce nondeterministic counter machine branching zero test instruction 
intuitively ork instruction allows machine state continue computation states computation continuing current counter values 
brevity proofs emphasize counter machines 
formally branching counter machine zero test acm short finite set states finite set ffi transitions distinguished initial final states qf follows 
instantaneous description id acm list ordered triples hq bi natural numbers corresponding counter machine 
define accepting triple 
define accepting id id element id accepting triple 
computation reached accepting triple 
say acm accepts input computation initial id ig accepting id essential undecidability result counters zero elements accepting id set ffi may contain transitions form increment hq bi hq bi increment hq bi hq decrement hq bi hq bi decrement hq hq bi fork hq bi hq bi hq bi states note decrement instructions apply appropriate counter zero 
example single transition increment takes acm id delta delta delta hq bi delta delta deltag id delta delta delta hq bi delta delta deltag may simulate zero test fact branches terminate counters set zero acceptance machines undecidable 
lemma undecidable counter machine zero test accepts input 
remains transition relation machine restricted outgoing transitions final state 
machines logic write indicate sequence separated commas 
seen linear connective may achieve branching proof pspace completeness mall 
machinery simulate acm computation 
acm hq ffi qf define linear logic theory transition relation ffi follows increment 
omega increment 
omega decrement 
decrement 
fork 
phi linear implication increment transition may viewed gammaffi omega state move state add element id acm hq yi define translation hq yi delta sequents correspond elements acm id exactly positive literal number multiplicity correspond values counters acm exactly negative literal corresponds current state acm 
translation acm id simply set translations elements id claim acm halts id element id provable theory corresponding transition relation machine 
lemma machine branching counter machine accepts id id provable theory derived halting computation acm machine id build proof id theory derived may accomplished induction length accepting acm computation 
lemma machine branching counter machine accepts id id provable theory derived proof id theory derived show halting computation acm state id extracted proof 
achieve aid cut standardization lemma case leaves cuts proof correspond applications acm instructions 
may simply read description computation normalized proof 
formal proof lemma proceeds induction length standardized proof depends particular encoding acm state 
example computation section intended give overview mechanisms defined lend insight undecidability result stated 
simple computation ordinary counter machine zero test instruction corresponding acm computation corresponding linear logic proof 
structure searching proof sequent analogous searching accepting acm computation 
transition relation ffi standard counter machine zero test consists ffi increment ffi decrement qf ffi machine may perform transitions instantaneous description phi cut cut zero test proof omega phi 
cut cut cut proof corresponding computation counter machine triple consisting current state values counters hq ffi gamma 
hq ffi gamma 
hq ffi gamma 
computation starts state increments counter steps state tests counter zero moves decrements counter moves qf accepts 
transition relation ffi may translated transition relation ffi branching counter machine zero test 
modified relation ffi shown left may encoded linear logic theory shown right transitions ffi increment ffi decrement qf ffi fork zb ffi zb decrement zb ffi zb fork qf qf theory axioms omega phi phi notice transitions ffi ffi standard counter machine preserved translation ffi ffi instruction ffi encoded acm transitions ffi ffi ffi transition ffi fork special state zb state extra transitions ffi ffi embody encoding special zero testing state zb acm 
transitions branching machine may perform moves ig ffi gamma 
ig ffi gamma 
hq ig ffi gamma 
hq ig ffi gamma 
hq ig ffi gamma 
ig note instantaneous descriptions machine list triples machine accepts able reach branches computation 
particular computation starts state increments counter steps state forks separate computations verifies counter zero proceeds state counter zero proof branch proceeds decrementing counter zero essentially jumping final state qf branch state simply decrements moves qf branches computation terminate final state counters zero resulting accepting computation 
linear logic proof corresponding computation displayed figures 
proofs application theory axiom rule corresponds step acm computation 
represent values acm counters unary copies formulas example counter zero occurrences proof shown linear logic theory corresponds acm verifying counter zero 
reading proof bottom begins cutting theory axiom leaving sequent intermediate step 
correlating acm computation corresponds decrement instruction ffi exactly step cut axiom application rule sequents left prove correspond acm triple accepting triple provable identity rule 
attempted prove sequent occurrences unable complete proof 
proof shown theory demonstrates remainder acm machinery 
lowermost theory axiom cut correspond application increment instruction ffi traded application cut correspond fork instruction ffi requires branches proof successful way branching machines require branches reach accepting configuration 
elided proof appears corresponds verification counter zero 
application cut identity correspond final decrement instruction computation complete proof 
earlier lemmas main result provable 
theorem provability problem propositional linear logic recursively unsolvable 
mentioned earlier linear logic classical logic intuitionistic fragment 
briefly intuitionistic fragment restricted positive formula sequent 
fact entire construction carried intuitionistic linear logic undecidability result holds logic 
additional results pure multiplicative fragment additive connectives storage operator simplest fragment linear logic investigated 
theorem free multiplicative linear logic np 
proof straightforward connective sequent principle connective exactly proof step cut free proof giving polynomial bound size cut free proofs 
entire proof may guessed polynomial time 
unable prove fragment np complete 
believe may difficult due lack redundancy problem 
part investigation need discard arbitrary resources achieve np completeness studied propositional logic weakening contraction called direct logic 
equivalent linear logic structural modification adding weakening rule 
weakening sigma sigma theorem free multiplicative linear logic weakening np complete 
provability logic np reasoning previous fragment multiplicative sequent proofs polynomially short may guessed 
provability np hard reduction vertex cover 
reduction weakening appears essential edge may covered selecting endpoint 
investigate linear logic consider sequents cyclic lists formula multisets add explicit exchange rule limited reusable formulas 
add rotate rule allows formulas circulate proof rules appendix applicable just formulas sequent 
logic called noncommutative linear logic cyclic linear logic call circular logic 
exchange sigma gamma sigma gamma rotate sigma sigma theorem noncommutative propositional multiplicative linear logic undecidable additives 
result obtained reduction semi thue systems 
rule abc de faithfully represented circular logic formula omega omega gammaffi omega logic omega commutative 
main idea reduction straightforward substantial proof theoretic machinery required demonstrate reduction correct 
immediate corollary theorem full noncommutative propositional linear logic additives undecidable 
investigated complexity provability fragments propositional linear logic 
significant results provability full propositional linear logic undecidable provability pspace complete modal storage operator removed 
gives interesting insight power reuse combined linear propositional connectives 
shown decision problem multiplicative fragment np np complete presence unrestricted weakening 
shown provability circular logic noncommutative fragment linear logic additive connectives undecidable 
open problems remain 
unable establish tight bounds multiplicative fragment settle decidability multiplicatives storage operator 
particularly difficult positive solution involve extension reachability algorithm petri nets 
final open problem may logical interest decidability free fragment extended propositional quantifiers 
abramsky vickers 
quantales observational logic process semantics 
preprint january 

andreoli pareschi 
linear objects logical processes built inheritance 
proc 
th international conference logic programming jerusalem may 
asperti 
logic concurrency 
technical report dipartimento di informatica universit di pisa 
asperti 
ferrari gorrieri 
formulae proofs computations analogy 
proc 
th acm symp 
principles programming languages san francisco pages january 
bawden 
connection graphs 
proc 
acm symp 
lisp functional programming pages 

mechanizing proof theory resource aware logics proof transformations extract implicit information 
phd thesis stanford university 

linear semantics allowed logic programs 
proc 
th ieee symp 
logic computer science philadelphia june 

finite containment problem petri nets 
theoretical computer science 
danos regnier 
structure multiplicatives 
archive mathematical logic 
engberg winskel 
petri nets models linear logic 
arnold editor proceedings caap 
lecture notes computer science vol 
springer 
garey johnson 
computers intractability guide theory npcompleteness 
freeman 
gunter 
normal process representatives 
proc 
th ieee symp 
logic computer science philadelphia june 
gentzen 
collected works 
edited szabo 
north holland amsterdam 

girard 
linear logic 
theoretical computer science 

girard 
multiplicatives 
del dell universit politecnico torino special issue logic computer science pages 

girard 
geometry interaction 
contemporary math 
amer 
math 
soc 


girard 
la logique lin 
pour la science edition de scientific american april 

girard lafont taylor 
proofs types 
tracts theoretical computer science cambridge university press 

girard scedrov scott 
bounded linear logic modular approach polynomial time computability 
proc 
math 
sci 
institute workshop feasible mathematics cornell university june 
birkhauser 
gunter 
nets tensor theories 
de michelis editor proc 
th international conference application theory petri nets bonn pages 
guzman hudak 
single threaded polymorphic lambda calculus 
proc 
th ieee symp 
logic computer science philadelphia june 
hindley seldin 
combinators lambda calculus 
london mathematical society student texts cambridge university press 
weyhrauch 
decidable fragment predicate calculus 
theoretical computer science 
kosaraju 
decidability reachability vector addition systems 
proc 
th acm symp 
theory computing pages 
lafont 
linear machine 
theoretical computer science 
lafont 
interaction nets 
proc 
th acm symp 
principles programming languages san francisco pages january 
lambek 
mathematics sentence structure 
amer 
math 
monthly 
lincoln mitchell scedrov shankar :10.1.1.1.8163
decision problems propositional linear logic 
technical report sri csl csl sri international 
lipton 
reachability problem hard 
technical report department computer science yale university january 
marti oliet meseguer 
petri nets linear logic 
springer lncs ed 
pitt 

mayr meyer 
complexity word problems commutative semigroups polynomial ideals 
advances mathematics 
mayr 
algorithm general petri net reachability problem 
proc 
th acm symp 
theory computing milwaukee pages 
mcaloon 
petri nets large sets 
theoretical computer science 
yetter 
quantales noncommutative linear logic 
journal symbolic logic 
propositional linear logic proof rules linear logic sequent followed multiset linear logic formulas 
assume set propositions associated negations give inference rules linear sequent calculus definition negation implication 
reader note negation defined concept operator 
notational conventions followed positive propositional literal negative propositional literal arbitrary formulas sigma gamma delta arbitrary multisets formulas identity rule restricted atomic formulas fact identity rule arbitrary formulas derivable system 
notational convenience usually assumed gammaffi omega associate right omega higher precedence gammaffi 
notation sigma denote multiset formulas 
english names rules identity cut tensor par plus weakening contraction dereliction storage bottom top respectively 
note rule constant 
cut sigma gamma sigma gamma omega sigma gamma sigma gamma omega sigma sigma ab phi sigma sigma sigma phi sigma phi sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma linear negation defined follows delta delta omega delta ab delta omega phi delta delta phi delta delta delta delta delta delta linear implication gammaffi defined follows gammaffib delta 
