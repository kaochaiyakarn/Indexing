systematic testing aspect oriented programs roger alexander james bieman colorado state university department computer science fort collins colorado rta bieman cs colostate edu andrews washington state university school electrical engineering computer science washington eecs edu code provides solutions key software requirements security fault tolerance tends spread cross cut program modules implement primary functionality software system 
aspect oriented programming emerging programming paradigm supports implementing cross cutting requirements named program units called aspects 
construct system aspect oriented program aop develops code primary functionality traditional modules code cross cutting functionality aspect modules 
compiling running aop requires aspect code woven code 
aspect oriented programming supports separation concerns named program units explicit implicit dependencies aspects traditional modules result systems new testing challenges include new sources program faults 
introduces candidate fault model associated testing criteria aops interactions unique aops 
identifies key issues relevant systematic testing aops 
copyright 
rights reserved 
aspect oriented programming new technology dealing explicitly separation concerns software development 
just object oriented programming aspectoriented programming brings unique set benefits challenges 
far compelling argument aspect oriented programming significantly increases modularity cohesion increasing understandability easing maintenance burden 
particular aops abstractions representing concerns cross cut program modules implement primary functionality 
example code implements particular security policy commonly distributed set classes methods responsible enforcing policy 
aops code implementing security policy factored typically aspect 
aspect localizes cohesive place code affects implementation multiple classes methods 
aops alters development process 
classes methods core concerns developed tested 
embedding code cross cutting actions method bodies separate aspects defined contain code 
aspects woven classes rep resent core concerns system 
complete woven targets composite behavior core cross cutting concerns 
advantages approach include greater modularity cohesion cleaner separation concerns improved locality change 
regardless programming technology primary development goal production high quality software 
consequently aops tested quality 
key questions related quality include adequately test aspectoriented programs 
know testing quality objectives attained 
objective way determine tested 
questions easy answer issues aspects independent identity existence 
depend context class identity execution context 
aspect implementations tightly coupled woven context 
aspects depend internal representation implementation classes woven 
changes classes propagate aspects 
control data dependencies readily apparent source code aspects classes 
due nature weaving process developer classes aspects knows resulting control flow data flow structure resulting woven artifact 
relating failures corresponding faults may difficult 
emergent behavior 
root cause fault may lie implementation class aspect may side effect particular weave order multiple aspects 
challenges addressed traditional unit integration testing techniques 
unit level techniques depend availability source code techniques applicable classes implement core concerns applicable aspects 
aspects complete code units behavior depends woven context 
test scaffolding possible simple aspects practically feasible realistic situations 
existing integration testing techniques focus interactions occur modules interfaces 
aops integration fine grained occurs respect intra method control data flow 
level defined interfaces 
systematic testing aop systems fault models reflect structural behavioral characteristics aspect oriented programs 
criteria strategies testing aops developed terms fault model 
propose initial fault model 
show fault models develop criteria strategies testing aops 
section explains aops summarizes existing research testing aop code 
section develops fault model aops 
section uses fault model derive testing criteria 
section draws points 
background copyright 
rights reserved 
sub sections basic concepts aspect oriented programming briefly survey related 
aspect oriented programming concepts core software system subject matter application domain 
example library subject matter include books periodicals library patrons catalog works 
system designed manage operation library incorporate subject matter items 
collectively subject matter system form core concerns system constitute domain information managed 
implementation system core concern typically represented single abstraction corresponding implementation concrete mechanism class objectoriented language 
concerns represented discrete manner 
implementation concerns depend context provided behavior concrete representation concerns 
concerns referred cross cutting concerns 
simple example library system policy concern restricts number type publications patron may checked time 
behavior enforcement policy spans core concerns including books periodicals patrons 
core concerns role play enforcement policy concern 
consequently encapsulated single location behavior policy concern spread participating concerns 
terms conventional implementation object oriented oo procedure oriented languages code policy enforcement tangled code implements behavior participating core concern 
necessary code entanglement reduces cohesiveness core concerns decreasing modularity reducing locality changes 
basic tenet aspect oriented concerns treated modular units regardless limitations implementation languages 
primary mechanism defining solutions cross cutting concerns aspect 
aspects encapsulate behavior state crosscutting concerns implementations span core concerns form subject matter system 
aspects possible create cohesive modules implement specific cross cutting concerns distributed core concerns 
placing crosscutting concerns separately aspect core concerns cohesive implementations relieved burden managing concepts unrelated purpose 
aspectj language designed support aspectoriented programming conjunction java programming language 
aspectj achieves modularity aspect abstraction mechanism encapsulates behavior state cross cutting concern 
classes aspects directly instantiated objects 
activation aspect depends context provided core concerns represented classes 
cross cutting concerns expressed separate modular units definition execution depend context core concern copyright 
rights reserved 
control data flow 
example simple aspect expressed aspectj 
syntactic definition aspect consists set patterns referred pointcuts select elements called join points appear bodies methods 
join points correspond defined locations control flow method concern 
examples join points include method calls method execution field access object construction 
examples pointcuts appear lines 
shows sample method having method call join point line position method control flow graph 
note node control dependent node 
join point matches pattern specified aspect pointcut advice applied composition process called weaving matching join point method body 
advice method construct express cross cutting actions take place method body matched join point 
advice woven target concern 
advice similar notion method body complete modular unit 
advice generally represents fragment control data added body existing method 
advice may take forms 
advice consists instructions execute method body execution element matched join point 
similarly advice instructions execute element corresponding matched join point executed 
shows examples advice aspect shown line 
parts depict control flow schematic respective advice 
schematic shows control flow weaving adds control flow graph method having join points selected operation pointcut 
fragmentary nature advice depicted incomplete control flow graphs 
entry nodes represented circle white center exit nodes reversed having black centers 
circles represent advice connected method control flow graph 
thick dashed nodes correspond method control flow node join point matched pointcut 
advice consists instructions 
sample aspect 
sample method control flow graph copyright 
rights reserved 
weaving surround matched join point elements may alter control flow data dependencies method 
advice bypass matched join point elements altogether matched join point execution control dependent advice 
shows advice aspect depicted gives control flow schematic advice 
example shows advice add new branch code core concern location matched join point 
advice adds additional control flow edge node encapsulates original join point value return statement line 
example shows aspect oriented programming possibility significant changes semantics core concern creating new testing challenges 
related aspect oriented programming aspects capture functionality cross cuts code modules 
research extends aspects design level 
research testing software built aspect oriented programming scarce 
conducted informal survey 
sample advice copyright 
rights reserved 

sample advice www citation databases citeseer acm digital library ieee computer society digital library 
surprised find researchers working testing aops 
appears majority done aspectoriented methods build testing tools 
zhao proposes approach data flow testing unit testing aops 
approach combines testing individual aspects classes potential affected aspects 
definition pairs du pairs computed determine interactions aspects classes tested 
du pairs computed ability variable definition module reach corresponding module module 
monga model checking verify properties aspects suitable formal verification 
consider environment aspects rely verified properties holding system evolution 
illustrate approach verifying concurrency concerns set aspects 
similar approach 
approach valued model checking li 
approach allows reasoning features interactions occur result composition weaving 
course existing black box white box testing strategies functional specifications code available focuses testing unique relationships modules due aspect oriented programming 
effective efficient testing techniques focus testing results weaving aspects code representing primary concerns 
testing methods specifically tailored aspect oriented programming depend model potential sources faults occur aops 
aop fault model fault model aops reflect characteristics aops distinct object oriented procedure oriented programming 
key issue identifying fault types unique aops 
aspect oriented programming new copyright 
rights reserved 
technology new fault types identified practical experience 
background developing testing analysis techniques object oriented programs fault model suggests aspect oriented programming introduces new types faults 
fault models aops nature faults failures aops unique characteristics testing aops challenging 
nature faults failures aops failure occurs challenge diagnose failure detect fault 
non aspectoriented programs examines code possibly instruments probes isolate localize fault 
dealing failures aspect oriented programs requires similar approach 
detect fault aop code woven aspects examined 
potential sources faults program woven aspects 
fault resides portion core concern affected woven aspect 
fault peculiar primary abstraction occur weaving 

fault resides code specific aspect isolated woven context 
fault composition included aspect 
fault resides aspect code independent data control dependencies induced weaving process 

fault emergent property created interactions aspect primary abstraction 
faults occur weaving introduces new data control dependences primary abstraction aspect 
new dependencies arise integration interaction code data primary abstraction aspect 

fault emergent property created aspect woven primary abstraction 
difficulty locating source faults compounded multiple aspects involved 
fault may arise particular permutation aspects respect primary abstraction 
testing effort greater faults involve aspect 
essential differences aops object oriented programs aops similar object oriented programs classes interfaces methods packages obviously java program degenerate case aspectj program aspects 
types faults occur java program occur aspectj program source faults alternative 
new types faults occur result aspectoriented features aspect oriented programming language 
addition aspect weaving affect types faults commonly object oriented programs oops procedural programs 
way identify potential sources faults aops examine programmer develop aop 
obviously aop developer consider additional concepts oops 
computational model aop dynamic call graph resulting method invocations 
execution call graph represents join points advice applied pointcut match 
specify patterns pointcut developer analyze syntactic structure core concern determine join points participate cross cutting behavior supplied aspect 
syntactic structure join points aspect developer specify appropriate set pointcuts advice weaving result desired behavior 
cases aspect developer consider wider context provided particular join point 
occurs example aspect maintain information object basis 
common example cache management aspect track access time object stored cache 
consideration flow control dynamic call graph respect particular join copyright 
rights reserved 
point 
certain situations information collected flow control executing body code corresponding particular join point call method example information collected thread execution control returns caller cases information collection may restricted thread execution returned caller executing body addition execution aspect developer consider information join point passed advice 
aspectj information available automatically 
example predefined pointcuts target args collect information context join point 
information includes arguments method calls constructor invocations target object return values 
clearly unique characteristics aops occur object oriented procedure oriented programs 
characteristic possibility manifest new fault types ultimately lead program failures 
candidate fault model aops candidate fault model peculiarities aops 
defined careful analysis unique constructs aspectj reflects initial evaluation classes potential faults 
incorrect strength pointcut patterns pointcuts contain specifications select join points particular type signature includes pattern 
pointcut matching join point concern advice associated woven strength pattern signature determines join points selected 
pattern strong necessary join points selected 
pattern weak additional join points selected ignored 
case cause incorrect behavior woven target 
statements woven advice statements executed woven join point determine pattern strength error introduce fault 
infections invalid state caused program fault induced woven advice subsequently canceled coincidental correctness 
incorrect aspect precedence order advice multiple aspects woven concern affects system behavior especially mutual interactions aspects state variables core concern 
aspectj weave order determined specification aspect precedence 
example aspect highest precedence executes advice join point prior executing advice lower precedence aspect 
precedence specified order advice applied remains undefined 
precedence concern long effects woven advice mutually independent 
failure establish expected postconditions clients core concerns expect concerns behave contracts 
client responsibility ensure method precondition holds prior calling method 
precondition ensured client reasonably assume method postcondition satisfied 
basic requirement behavioral inheritance subtyping 
clients expect method postconditions satisfied regardless aspects woven concern 
behavioral contracts concern hold weaving process 
correct behavior woven advice allow methods core concerns satisfy postconditions 
defining advice cause behavioral contracts broken weave contexts combinations aspects difficult challenge aspect developers source errors 
failure preserve state invariants concern behavior defined terms physical representation state methods act state 
addition establishing postconditions methods ensure state invariants satisfied 
ensuring weaving cause violations copyright 
rights reserved 
state invariants difficult challenge aspect developers source errors 
incorrect focus control flow pointcut designator selects method join points capture 
selection determined weave time 
cases information needed correctly decision available run time 
join points selected particular execution context 
context control structure particular object control flow occurs point execution 
consider pointcut shown lines 
example join points selected called recursive call execution currently executing call 
expression int pointcut designator restricts selection join points 
failure restrict execution proper context result failure difficult diagnose 
incorrect changes control dependencies shows logical control flow resulting weaving advice method 
grey region highlights control flow resulting advice 
control flow nodes edges denote advice represented thick edges 
thin edges nodes control flow graph method 
node corresponding matched join point node depicted thick dashed circle 
careful examination resulting control flow graph reveals change control dependencies 
node control dependent decision node node control dependent node 
change due branch occurs node 
example clear advice significantly alter behavioral semantics method 
similar ar actual control flow may different depending implementation weaver 
example aspectj advice woven method call 

changes control flow weaving advice changes data dependencies du pairs 
primary goals develop detailed thorough understanding faults failures occur aops 
step defined candidate fault model reasoning aops 
fault model need extended adjusted 
proposed testing criteria testing criteria derived fault model 
assume strategy requires core concerns tested weaving deemed relatively fault free respect testing criteria 
criteria specify additional testing requirements 
testing criteria focus behavior core concern behavior aspect behavior weaver 
brief descriptions proposed criteria types faults described section 
incorrect strength pointcut patterns faults cause aspects fail core functionality 
test aspect required 

incorrect aspect precedence faults occur multiple aspects interact affected weave order 
testing weave orders reveal faults 

failure establish postconditions faults cause core concern methods fail 
reasonable criteria re test methods code weaving original test set 

failure preserve state invariants faults cause core concern methods fail 
retesting concern methods appropriate 

incorrect focus control flow faults cause advice activate wrong time 
criteria reveal faults may form condition coverage point cut designators 

incorrect changes control dependencies faults affect core concern behavior fault types 
testing strategies criteria fault types involve aspects cause core concerns fail similar regression testing strategies criteria 
fault types involve incorrect weaving aspects woven wrong core concerns 
fault type involves errors run time behavior aspect 
copyright 
rights reserved 
complexity software development motivated aspect oriented programming approach separate concerns build high quality software easily higher maintainability better chance successful evolution 
believe aspect oriented programming tremendous potential building software pair effective efficient testing techniques aspect oriented programming software construction methods 
see combination sound aop construction methods systematic aop testing important step broad acceptance aspectoriented programming software development approach 
step developed candidate fault model aops derived testing criteria candidate fault model 
constitute fully developed testing approach 
candidate fault model needs empirically validated possibly extended refined 
ongoing study validate define fault model 
second answers open questions 
ways test aspects 
approach coverage criteria woven target test core concern 
difficult weave process aspect oriented programming languages weave directly byte code 
analyze byte code difficult refer back source code core concern aspects 
compiler optimizations increase difficulty 
weaving process produce byte code direct connection available source artifact core concerns aspects 

reverse engineer weave process 
goal back weave steps order connection woven source artifacts 

measure test coverage weaving 
need understand types coverage metrics reliability collected individual aspects execution woven target 

test aspects interact core concern 
execution aspects logging example sideeffects concern woven 
execution aspects object persistence effect 
developers need able determine core concern affected execution aspects testing maintenance activities 

test aspects mutually interfere 
aspects woven possible aspects interact ways may apparent examination source 

test aspects effects span concern 
example consider authentication policy enforcement authentication aspect woven class clients modified account new postcondition induced authentication failure 
policy cause chaining effects clients clients require modification 
believe important step developing effective approach systematic testing aops 
copyright 
rights reserved 
alexander offutt bieman 
syntactic fault patterns oo programs 
proceedings eighth ieee international conference engineering complex computer systems maryland december 
aspectj 
aspectj tm programming guide 
clarke murphy 
developing tool support application aspect oriented programming principles design phase 
proceedings 
international conference software engineering icse kyoto japan april 
monga 
experience verification aspect properties 
proceedings th international workshop principles software evolution pages 
acm press 
kiczales lieberherr ossher 
discussing aspects aop 
communications acm 
filman bader 
aspect oriented programming 
communications acm 
fiadeiro lopez 
algebraic semantics ordination signature 
procs 
th international conference algebraic software technology amast volume lecture notes computer science pages brazil january 
springer verlag 
france ray georg ghosh 
aspect oriented approach design modeling 
iee proceedings software special issue early aspects aspect oriented requirements engineering architecture design appear 
gray 
handling crosscutting constraints domain specific modeling 
communications acm october 

demo aspectj language development tools november 
kiczales hilsdale hugunin kersten palm griswold 
overview aspectj 
th european conference object oriented programming budapest hungary 
kiczales hilsdale hugunin kersten palm 
getting started aspectj 
communications acm october 

aspectj action 
manning publications 
li krishnamurthi 
verifying cross cutting features open systems 
proceedings tenth acm sigsoft symposium foundations software engineering pages 
acm press 
lieberherr 
aspectoriented programming adaptive methods 
communications acm october 
liskov wing 
behavioral notion subtyping 
acm trans 
program 
lang 
syst 

layered approach building aspect oriented systems 
communications acm october 
offutt alexander wu xiao hutchinson 
fault model subtype inheritance polymorphism 
proceedings th international symposium software reliability engineering pages hong kong china november 
ieee computer society press 
ossher tarr 
hyper multi dimensional separation concerns java 
proceedings nd international conference software engineering pages 
acm press 
copyright 
rights reserved 
pace campo 
analyzing role aspects software design 
communications acm 

aspect oriented programming model checking 
proceedings st international conference aspect oriented software development pages 
acm press 
voas 
pie dynamic failure technique 
ieee trans 
software engineering august 
zhao 
data flow unit testing aspectoriented programs 
proc 
th annual ieee international computer software applications conference compsac pages dallas texas december 
