reactive petri nets workflow modeling rik crp henri rue luxembourg luxembourg rik lu institute computation information structures cis technical university berlin en berlin germany cs tu berlin de 
petri nets widely modeling analyzing workflows 
token game semantics petri net workflow models analyzed model run time 
run time workflow model prescribes behavior reactive system workflow engine 
token game semantics models behavior closed active systems 
token game semantics behavior petri net workflow model differ considerably behavior run time 
define reactive semantics petri nets 
semantics model behavior reactive system environment 
compare semantics token game semantics prove conditions reactive semantics token game semantics induce similar behavior 
apply reactive semantics workflow modeling show workflow net transformed reactive workflow net 
prove conditions soundness property workflow net preserved workflow net transformed reactive workflow net 
result shows analyze soundness token game semantics safely semantics reactive 
petri nets popular technique formally model workflows :10.1.1.30.3125
offer formal counterpart bubbles arrows people draw modeling workflows 
formal token game semantics enables analysis petri net workflow models 
token game semantics workflow model describes behaviors allowed 
computing behavior workflow model token game semantics errors workflow model spotted workflow model put cf 
:10.1.1.30.3125
workflow model put feeding workflow management system wfms 
heart wfms workflow engine wf engine actual management 
wf engines reactive systems 
reactive system part done author working university twente 
runs parallel environment tries enforce certain desirable effects environment 
reacting changes called events environment 
response reactive system depends current state 
giving response may change state reactive system 
wf engine sees workflow model prescription 
behavior reactive systems usually modeled event condition action eca rules known production rules 
meaning eca rule event environment occurs condition true reactive system action 
part condition test state system 
part action change state 
eca rules easily incorporated petri nets associating transition petri net eca rule tells transition changes state reactive system case state wf engine 
insight pioneering workflow modeling done seventies 
case petri net workflow model models behavior wf engine 
unfortunately token game semantics petri nets model behavior reactive systems model behavior wf engine 
non reactivity token game semantics seen immediately definition firing rule 
transition petri net enabled input places filled 
environment petri net influence firing transitions 
contrast reactive system transition relevant needs additional input event enabled 
token game semantics models closed systems reactive system open interact environment 
furthermore reactive system enabled transition fire immediately system fail respond certain event 
token game semantics enabled transition may fire 
worst case firing postponed forever transition enabled fires enabled transition 
clearly contradicts reactivity 
illustrate point real life example consider petri net fig 

explanation example refer sect 

suppose task check credit just finished new marking 
task check credit finished presumably wf engine decide credit ok 
actual outcome decision depends environment wf engine modeled nondeterministic choice place see sect 
token game semantics possible fire transition check order firing transition ok transition ok suppose order checked days firing sequence implies wf engine takes days decision 
clearly inappropriate behavior decision immediately check credit finished 
token game semantics reactive petri net model behavior wf engine 
unclear behavior petri net token game semantics relates behavior wf engine workflow model put 
consequently unclear outcome analysis workflow model semantics carries reactive setting 
words analysis results token game semantics valid reactive setting 
purpose define reactive semantics petri nets relate new semantics standard petri net token game semantics 
particular study respect conditions semantics induce similar behavior 
application result show soundness property preserved transforming workflow net reactive workflow net workflow net reactive semantics :10.1.1.30.3125
give justification token game semantics safely analyse workflow models absence deadlocks reactive setting token game semantics reactive 
commercially petri net workflow management systems available 
claim reactive semantics precisely describes behavior wf engine wfms think semantics closer behavior wf engine token game semantics 
remainder structured follows 
sect 
recapitulate standard terminology notions petri net theory 
sect 
define reactive semantics petri nets relate semantics standard token game semantics 
particular prove conditions semantics induce similar behavior 
sect 
recall definition workflow net soundness property :10.1.1.30.3125
different interpretations transitions workflow net 
different interpretations sect 
show workflow net transformed reactive workflow net 
sect 
prove soundness property preserved workflow net mapped reactive workflow net 
proof build results obtained sect 

related discussed sect 


preliminaries recall definition petri net net 
petri net triple finite set places finite set transitions finite set arcs flow relation 
transition input output places 
place input output transition directed arc 
input places transition denoted output places denoted 
place contain zero tokens 
token represented black dot 
global state petri net called marking distribution tokens places 
formally state marking function assigns place number tokens reside introduce terminology 
transition enabled marking written iff input place contains token 
transition enabled marking fire input place token removed output place token added 
write denote firing enabled transition marking results marking write indicate firing transition marking reached 
write denote firing sequence tn marking reached mn tn mn mn write denote sequence reactive nets section adapt definition petri net reactive 
call new petri net variant obtain reactive net 
explained token game semantics models closed systems reactive system open wouldn able interact environment 
limitation petri nets circumvented modeling environment petri net 
distinguish external transitions environment internal transitions reactive system 
set transitions set internal transitions set external transitions 
explained may firing rule petri nets model reactivity 
reactive system enabled transition fire immediately system fail respond certain event 
token game semantics enabled transition 
worst case firing postponed forever conflicting transition enabled fires disables straightforward way token game semantics reactive change firing rule may firing firing enabled transitions possible fire 
undesirable petri nets model closed systems environment system included petri net 
environment active reactive 
environment may firing rule appropriate 
internal transitions done reactive system firing rule external transitions done environment may firing rule 
certain marking internal transition external transition enabled conflict arise 
avoid conflict require internal transitions fire higher priority external transitions 
environment reactive system transition reactive system fire 
corresponds perfect synchrony hypothesis assumption frequently design reactive systems reactive system faster environment controls 
note perfect synchrony hypothesis assumption guarantee 
informally describe behavior reactive petri nets way borrowing terminology statemate 
state marking stable internal transition enabled unstable 
stable state unstable external transition fires 
unstable state reactive system fire enabled internal transitions 
firing transitions new state reached 
new state stable system finished reaction 
system reacts transition entering new state 
sequence transition entering new state repeated stable state reached 
possible system reaches stable state case system diverges 
definition 
describe reactive nets behavior formally 
reactive net rn tuple 
sets transitions 
reactive semantics net defined follows 
internal transition enabled marking iff input places filled token unstable 
external transition enabled marking iff input places filled token enabled internal transition stable 
firing enabled transition input place token removed output place token added 
firing encoded priority rule enabled internal transitions priority external transitions 
unstable markings instantaneous interpretation attach 
model explicitly semantics switch timed petri nets 
token game semantics reactive nets 
possible token game semantics reactive net transforming reactive net petri net function takes union sets 
function defined follows show relation transition relation rn semantics tg transition relation rn reactive semantics define terms tg ti ti tg te te tg ti ti tg relation reactive token game semantics 
indirectly provided different semantics reactive nets reactive traditional token game semantics 
respect semantics induce similar behavior 
answer question look behavior reactive system reactive setting 
reactive setting system moves typically stable state stable state 
possible system diverges loop internal transitions reactive net 
course reactive behavior simulated token game semantics transition enabled marking reactive semantics enabled token game semantics 
theorem corollary follow immediately 
theorem reactive net rn state reactive semantics fire reached fire token game semantics reached corollary reactive net rn reachable state rn reactive semantics reachable state rn token game semantics 
clearly token game semantics simulate reaction starting stable state reactive semantics 
reverse hold behavior token game semantics simulated reactive semantics 
reason reactive semantics external transitions enabled enabled internal transitions fired 
marking reachable token game semantics reachable reactive semantics 
outcome reaction system semantics stable marking eventually reached semantics 
constraints token game semantics particular stable marking reached stable semantics means internal transition enabled marking reached reactive semantics 
constraints needed enforces listed table 
constraint necessary reactive semantics internal transitions priority external transitions token game semantics case 
see constraint needed consider example reactive petri net fig 

reactive net satisfy conflicts 
token game semantics stable marking sequence stable marking 
intermediary markings sequence unstable 
impossible table 
constraints reactive nets external transition te conflict internal transition ti ti te 
internal transitions free choice reachable marking token game semantics tg tg fig 

example reactive net motivate constraint 
black transitions internal white transitions external reactive semantics sequence 
transition taken taken 
marking unreachable reactive semantics 
constraint deliberately formulated syntax semantics petri nets syntax 
syntactic constraint internal transitions free choice ruled certain reactive petri nets constraint allows 
shows petri net internal transitions cancel pick satisfy constraint free choice 
proceed prove main theorems 
theorem states constraints token game semantics reactive semantics similar behavior 
theorem terms stable unstable states introduced 
theorem reactive net rn satisfies constraints 
suppose token game semantics sequence transitions stable state intermediary states unstable tg tg tg tg tn tg mn mn stable mi unstable 
permutation possibly taken reactive semantics stable state mn reached 
proof 
sequence possible reactive semantics done 
assume possible reactive semantics 
unstable state mi external transition taken ti 
reactive semantics disabled mi 
mi unstable enabled internal transitions mi 
mn stable internal transitions say taken sequence state mj disable tokens input places removed taken vice versa 
modify removing tj inserting just 
denote fig 

example reactive net illustrate theorem 
black transitions internal white transitions external modified sequence clearly taken token game semantics state mn reached 
course sequence may possible reactive semantics unstable state external transition taken 
procedure sketched applied 
repeatedly applying procedure sketched sequence final obtained 
procedure terminates sequence finite internal transitions place earlier sequence 
final unstable state internal transition taken 
final taken reactive semantics 
example 
consider example reactive net fig 

satisfies constraints 
token game semantics possible sequence stable state stable state ist 
intermediate states sequence unstable 
sequence taken reactive semantics unstable state external transition fired 
applying procedure sketched proof obtain sequence 
sequence taken reactive semantics 
note sequence intermediate stable state original sequence 
workflow nets section recall definition workflow nets give different interpretations transitions workflow nets :10.1.1.30.3125
definition 
workflow net wf net petri net input place output place place incoming arcs 
place outgoing arcs 
node path wf nets standard petri net token game semantics 
shows wf net handling incoming order mobile telephone 
reduced version real life business process telephone 
process involves departments department handles payment sales department handles distribution 
check credit process order check order ok cancel pick ok arrange payment notify cancel wrap deliver accept cancel fig 

wf net modeling process handling incoming order archive process starts incoming order processed different departments 
modeled transition process order splits execution parallel threads 
bottom part models tasks sales side 
order handled executing tasks check order pick wrap 
top part models tasks accounting side 
customer standing checked check credit 
result task ok ok case result positive payment arranged arrange payment case order refused notify cancel 
cooperation departments follows pessimistic strategy 
sales department waits outcome credit check performed 
depending outcome picks wraps item cancels processing 
transitions wf nets 
wf net states modeled places transitions model active behavior 
transitions different purpose 
common case model activities tasks 
examples tasks process fig 
check order pick wrap deliver cancel check credit arrange payment notify cancel archive 
transitions represent making decisions 
examples transitions ok ok representing outcome task check credit 
note outcome decision determined environment wf engine come back issue 
transitions may employed depict occurrence external events 
gives example 
wf net models part library process returning books 
borrowing books system waits external event may reader bringing books back reader asking extension timeout 
depending particular event occurring task executed 
reader returns books reader asks extension term elapsed return books shelf renew term send reminder fig 

part library process return books transitions sole purpose routing case 
usually occurs case needs split parallel parts fork parallel parts case need merged join 
examples case process order cancel accept fig 

function type assigns transition purpose transition 
type task event decision routing van der aalst distinguishes task decision transitions treat differently :10.1.1.30.3125
wf nets transitions firing rule 
distinction different types transitions 
sect 
attach different semantics different types transitions 
exist interesting dependencies transitions different type 
transition type decision follow task transition 
task transition models processing kind test 
evaluation refers external data 
transitions type decision occur choice 
conflict 
furthermore assumed corresponding choice free choice 
means evaluation external information decides outcome choice 
transitions type event occur choice assume choice free choice 
reasonable assumption occuring events preclude 
means particular external event occurs decides outcome choice 
instance library example fig 
timeout event occurs reader returns book person asks extension email telephone 
depending kind external event books returned shelf term renewed reminder send 
outcome mentioned choices depends evaluation external data event occurring 
choices clustered notation non controllable choice 
notation suggests outcome choice depends environment 
choices outcome depend environment called controllable controlled wf engine 
table 
choice classification initiative outcome choice event transitions free choice environment environment choice decision transitions free choice wf engine environment choice task routing transitions wf engine wf engine orthogonal criterion distinguish choices moment choice moment alternative transitions executed 
distinction van der aalst coworkers 
distinguish implicit explicit choices 
implicit choice deferred choice moment external event occurs corresponds choice consists event transitions 
explicit choice moment previous task completed 
framework explicit choices correspond choices consisting decision transitions 
framework moment choice determined having initiative execute transition 
events depict behavior environment initiative execute event transition environment 
contrast initiative transitions type decision side wf engine 
wf engine executes transitions 
sect 
map wf nets reactive nets 
event transitions external decision transitions internal 
reactive setting implicit choice behaves differently explicit choice 
remaining choices choices consist transitions type task type routing 
controllable explicit choices 
choices furthermore necessarily free choice 
example choice task transitions pick cancel fig 

table summarizes possible influences wf engine environment different choices 
correctness criteria wf nets 
consider soundness introduced van der aalst :10.1.1.30.3125
soundness requires wf net terminate single token place places empty 
addition requires dead transition transition executed 
recall definition soundness defined :10.1.1.30.3125
stress soundness defined token game semantics label transition relation tg 
definition 
soundness wf net sound iff marking reachable marking exists firing sequence leading marking marking tg tg 
ii marking marking reachable marking token place proper termination 
tg iii wf net dead transitions 
tg tg wf net going input wf engine soundness essential 
sound wf net firing sequences terminates properly 
executions executions spare tokens remain net impossible 
process description base operation run time soundness necessary requirement order guarantee reliable execution 
soundness criterion defined token game semantics 
saw semantics reactive 
section show transform wf net reactive wf net 
sect 
show transformation preserves soundness 
reactive wf nets soundness defined replacing definition tg workflow nets reactive workflow nets workflow management current issue business re engineering projects 
comprises support modeling analysis run time execution business processes 
approaches aiming providing support workflow management petri nets mapped petri nets 
approaches cover modeling analysis business processes provide limited support execution run time 
reasons gap discussed concern mismatch reactive behavior workflow wf engine active behavior petri nets wf nets token game semantics 
section discuss wf net transformed reactive wf net 
reactive wf net petri net reactive semantics 
serve input wf engine specifying wf engine 
properties wf nets entirely suitable input wf engine 

transitions fire instantaneously 
match requirement model tasks time consuming entities 

usually transitions wf net model tasks 
wf engine monitors tasks 
hard detect wf net actual behavior wf engine 

token game semantics petri net models active system 
wf engine reactive system 
system may firing rule token game semantics introduces unintended non determinism allowing execute enabled task defer execution 
show overcome obstacles 
change perspective wf net modeling process monitoring 
way obtain description desired behavior wf engine 
task refinement 
recall sect 
transitions wf net model occurrence event type event making decision type decision routing tasks type routing actual task executed external actor type task 
firing transitions considered instantaneous 
abstraction adequate transitions model events decisions routing generalization fit tasks 
changing perspective active task execution monitoring tasks performed external actors modeled time consuming 
refine modeling depict task sequence transitions announce task task task task completion 
illustrates described task refinement 
transition announce task models placing task possible actor 
may mean pushed basket task put common list pulled actor 
precise implementation depends mode wfms 
actual processing task starts transition task ends task 
way instantaneous firing transitions retained matching acceptable abstraction 
note duration implicitly assigned execution task wf net assigned place refined wf net 
division powers wf engine environment 
changing perspective wf net monitoring distinguish precisely behavior wf engine environment 
wf nets 
monitoring perspective transition executed wf engine executed environment wf engine 
perspective wf engine call transitions executed wf engine internal transitions environment external 
split set transitions wf net pn external transitions 
internal transitions denoted black external transitions represented white boxes 
announce task task announced task task execution task task waiting task completion fig 

task refinement task ended record task completion table 
mapping wf net reactive wf net transition type internal external announce task task task record task completion event decision routing reviewing different transition types task event decision routing classify transitions internal external follows see table tasks announce task record task completion transitions internal task task transition external 
denotes wf engine initiates task actor outside wf engine actual task 
wf engine waits completion task 
events transitions external 
natural transitions model occurrence events coming environment 
decisions transitions internal 
done wf engine outcome decision presumably depends task executed immediately cf 
sect 
particular table 
routing transitions internal routing done wf engine 
reconsidering table see party wf engine environment having initiative transition executes transition 
reactive semantics changing firing rule 
obstacle concerns may firing rule token game semantics 
rule states transition enabled may fire 
worst case conflicting transition enabled fires disabling firing rule adequate model behavior wf engine modeled internal transitions 
transform refined wf net reactive wf net previously introduced distinction internal external transitions table 
reactive wf net mapped original refined wf net function 
replace semantic refined wf net reactive semantics replace relation tg see sect 

illustrate mapping fig 
shows reactive wf net corresponding example wf net fig 

due space limitations show task transitions refined just depict shortcut transition subdivided sections start black middle white 
note 
stated reactive wf nets wf engine control monitor processes 
transition reactive wf net check credit process order check order ok cancel pick ok arrange payment notify cancel wrap deliver accept cancel archive fig 

reactive wf net 
black transitions internal white transitions external 
task transitions decomposed fig 
executed wf engine internal transitions 
wf engine reactive wf net contains information 
removing external transitions external places places filled external transitions wf net prescription wf engine obtained 
note filling places place task ended fig 
token environment trigger wf engine start doing transition record task completion 
observe reactive wf nets presupposes wf engine faster environment wf engine satisfy perfect synchrony hypothesis see sect 

soundness reactive workflow nets previous section defined mapping wf nets reactive wf nets steps 
refined task transitions multiple transitions 
second mapped refined wf net reactive wf net 
section show soundness property wf net preserved wf net mapped reactive wf net provided wf net meets constraints defined table 
constraints table defined wf nets lifted wf nets mapping defined table provided function type defined 
note task refinement fig 
satisfies constraints 
wf net pn denote refined variant denote reactive variant token game semantics reactive semantics 
theorem sound pn sound proof 
straightforward 
theorem shows reactive wf net sound wf net sound 
note soundness property see sect 
defined token game semantics reactive semantics 
obtain soundness property reactive wf nets replace definition tg theorem sound sound 
proof 
follows immediately theorem corollary 
prove main theorems 
proof terminology stable unstable states introduced sect 

state stable definition 
assume state stable 
possible relax constraint proofs difficult 
prove theorem build theorem need constraints defined table 
theorem assume satisfies constraints 
sound sound 
proof 
consider cases definition soundness 
arbitrary state 
corollary reachable sound firing sequence token game semantics 
denote sequence 
cases 
stable split subsequences tg 
tg mn stable states visited sequence unstable 
applying theorem sequences permutations sequences 

unstable sequence transitions stable state stable state mn leads 
sequence 
mn argue previous case 
remainder follows easily 
ii reachable state reachable state corollary 
state reachable reachable sound 
contradiction 
iii transition state sequence transitions stable state stable state mn passes 
sequence 
theorem permutation taken sot taken 
dead transitions 
fig 

sound reactive wf net diverge 
net satisfies constraints 
black transitions internal white transitions external desired result soundness preserved transforming wf net reactive net follows immediately 
corollary assume satisfies constraints 
pn sound sound 
proof 
theorem pn sound sound 
theorems sound sound 
note soundness reactive net guarantee net divergence free 
reactive net diverges loop internal transitions 
easy prove sound reactive net satisfying constraints loop internal transitions exited internal transition leaves loop 
soundness states taken guarantee taken system loop 
example fig 
system staying forever loop 
guarantee absence divergence additional constraint needed 
sufficient necessary constraint require input places internal free choice transitions filled external transitions 
constraint rule reactive wf net fig 

related argues may firing rule suited prescribe behavior system 
proposes may firing rule petri net describes behavior firing rule net prescribes behavior 
net uses may firing 
contrast reactive nets descriptive external prescriptive internal transitions reactive nets mixture may firing 
look uses petri nets modeling reactive systems 
look related done priority nets 
discuss reactive semantics authors defined uml activity diagrams 
petri nets modeling reactive systems 
past extensions petri nets proposed motivated desire petri nets control process 
discuss signal event nets 
signal event nets introduced model combined behavior process controller controls monitors process 
reactive nets signal event nets transitions environment called spontaneous controller called forced 
spontaneous transitions trigger forced transitions transition synchronization 
way specified controller reacts events environment 
reactive nets external transition triggers internal transition ti indirectly filling ti input places 
standardized graphical language specifying logic controllers 
petri nets extended boolean variables set environment system 
boolean variables represent state environment 
transition model transition reactive system logic controller 
transition corresponding event condition action eca rule 
event occurs condition true input places filled transition fire immediately 
multiple transitions fire simultaneously time 
contrast reactive nets interleaving firing rule 
general differences approaches reactive nets 
reactive nets stay closer token game semantics related approaches 
definition reactive nets considerably simpler definition signal event nets models 
approaches attach token game semantics reactive model relate reactive semantics 
priority nets 
reactive nets resemble petri nets priorities 
priority nets close 
extends net defining static priority ordering transitions 
shows certain condition properties liveness net preserved net extended static priorities 
condition similar constraint internal transitions free choice 
constraint general allowing internal transitions free choice 
example petri net fig 
satisfy condition satisfy constraints 
motivated domain stochastic petri nets considers weighted petri nets transitions partitioned multiple priority classes motivated domain reactive systems consider unweighted petri nets transitions partitioned priority classes internal external transitions 
uml activity diagrams 
authors defined formal reactive execution semantics activity diagrams 
design choices semantics existing statechart semantics 
token game semantics semantics reactive 
reactive nets reactive petri nets having token game semantics exist lot subtle differences activity diagrams reactive nets 
example activity diagrams refer temporal events 
modeled reactive nets switch timed petri nets model 
activity diagrams data reactive nets 
data modeled switching colored nets activity diagrams differ colored petri nets 
consequently reactive wf nets conflicting decision transitions example ok ok fig 
enabled time net behaves non deterministically activity diagrams decisions deterministic 
defined reactive variant petri nets called reactive nets 
reactive nets assume systems model perfectly synchronous 
reactive nets reactive semantics differs token game semantics traditional token game semantics 
shown conditions reactive token game semantics induce similar behavior stable states eventually reached 
reactive nets motivated domain workflow management 
shown wf net transformed reactive wf net conditions soundness property preserved 
offered justification soundness analyzed wf nets token game semantics semantics model behavior reactive systems wf engine reactive 
shows addition soundness extra constraints needed 
soundness rule divergence 
interesting topic investigate extra constraints restrictive cover large class workflow models 
topic extending semantics reactive nets simple real time constructs addition data 
interesting see definition reactive nets changed perfect synchrony hypothesis longer needed 

author partially supported national research fund fnr luxembourg partially performed scope luxembourg international advanced studies information technologies institute 

van der aalst 
application petri nets workflow management 
journal circuits systems computers 

van der aalst verbeek 
alternative way analyze workflow graphs 
proc 
th int 
conference advanced information systems engineering caise volume lecture notes computer science 
springer verlag 

van der aalst ter hofstede kiepuszewski barros 
advanced workflow patterns 
editors proc 
th ifcis int 
conference cooperative information system coopis volume lecture notes computer science pages 
springer verlag 


analysis petri nets static priorities 
acta informatica 

berry gonthier 
esterel synchronous programming language design semantics implementation 
science computer programming 

david 
powerful tool specification logic controllers 
ieee transactions control systems technology 


non controllable choice robustness expressing controllability workflow processes 
esparza editors proc 
rd int 
conference application theory petri nets volume lecture notes computer science pages 
springer verlag 


steps sound business process models 
ehrig 
appear 

desel erwin 
modeling simulation analysis business processes 
van der aalst desel oberweis editors business process management models techniques empirical studies volume lecture notes computer science 
springer verlag 

ehrig reisig rozenberg weber editors 
petri net technology communication systems lecture notes computer science 
springer verlag 
appear 

ellis nutt 
modelling enactment workflow systems 
ajmone marsan editor proc 
th int 
conference application theory petri nets volume lecture notes computer science pages 
springer 


semantics verification uml activity diagrams workflow modelling 
phd thesis university twente 

wieringa 
comparing petri net activity diagram variants workflow modelling quest reactive petri nets 
ehrig 
appear 


analyzing reducing simultaneous firing signal event nets 
fundamenta informaticae 


der 
signal extension petri nets controller design 
fundamenta informaticae 

harel naamad 
statemate semantics statecharts 
acm transactions software engineering methodology 

harel pnueli 
development reactive systems 
apt editor logics models concurrent systems volume nato asi pages 
springer 

oberweis 
modellierung und ausf hrung von workflows mit petri german 
reihe wirtschaftsinformatik 
stuttgart leipzig 

wieringa 
design methods reactive systems yourdon statemate uml 
morgan kaufmann 


modular process nets 
technical report tr international computer science institute 


representation specification automation office procedures 
phd thesis university pennsylvania wharton school 
