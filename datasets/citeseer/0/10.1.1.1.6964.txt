model approach reactive self configuring systems brian williams nayak recom technologies nasa ames research center ms moffett field ca usa mail williams nayak ptolemy arc nasa gov describes livingstone implemented kernel model reactive self configuring autonomous system 
presents formal characterization livingstone representation formalism reports experience implementation variety domains 
livingstone provides reactive system performs significant deduction sense response loop drawing past experience building fast propositional conflict algorithms model diagnosis framing model configuration manager propositional feedback controller generates focused optimal responses 
livingstone representation formalism achieves broad coverage hybrid hardware software systems coupling transition system models underlying concurrent reactive languages qualitative representations developed model reasoning 
livingstone automates wide variety tasks single model single core algorithm making significant progress achieving central goal model reasoning 
livingstone hsts planning scheduling engine raps executive selected part core autonomy architecture nasa new millennium spacecraft 
desiderata nasa put forth challenge establishing virtual presence space fleet intelligent space probes autonomously explore nooks solar system 
presence established apollo era pace software probe completed probe deep space launched 
final pressure low cost equal magnitude 
poses extraordinary challenge opportunity ai 
achieve robustness years harsh space spacecraft need radically reconfigure response failures navigate failures remaining days 
achieve low cost fast deployment oneof kind space probes need plugged authors listed reverse alphabetical order 
quickly component models possible automatically generate flight software 
space failure scenarios associated responses far large software requires enumeration contingencies 
spacecraft reactively think consequences reconfiguration options 
substantial progress fronts system called livingstone implemented kernel model reactive self configuring autonomous system 
presents formalization reactive model configuration manager underlying livingstone 
contributions key 
approach unifies dichotomy ai deduction reactivity agre chapman brooks 
achieve reactive system performs significant deduction sense response loop drawing past experience building fast propositional conflict algorithms modelbased diagnosis framing model configuration manager propositional feedback controller generates focused optimal responses 
second modeling formalism represents radical shift order logic traditionally characterize modelbased diagnostic systems 
achieves broad coverage hybrid hardware software systems coupling transition system models underlying concurrent reactive languages manna pnueli qualitative representations developed model reasoning 
reactivity respected restricting model concurrent propositional transition systems synchronous 
third long held vision modelbased reasoning single central model support diversity engineering tasks 
modelbased autonomous systems means single model support variety execution tasks including tracking planner goals confirming hardware modes reconfiguring hardware detecting anomalies isolating faults diagnosis fault recovery 
livingstone automates tasks single model single core algorithm making significant progress achieving model vision 
livingstone integrated hsts planning acc legend valve pyro valve main engines regulators tanks helium tank engine schematic 
valves solid black closed open 
scheduling system muscettola raps executive firby demonstrated successfully navigate simulated spacecraft saturn orbit hour insertion window despite half dozen failures 
consequently livingstone raps hsts selected fly deep space forming core autonomy architecture nasa new millennium program 
architecture pell hsts translates high level goals partially ordered tokens resource timelines 
raps executes planner tokens translating low level spacecraft commands enforcing temporal constraints tokens 
livingstone tracks spacecraft state planner tokens reconfigures failed tokens 
rest organized follows 
section introduce spacecraft domain problem configuration management 
introduce transition systems key formalism modeling hybrid concurrent systems formalization configuration management 
discuss model configuration management key components mode identification mode reconfiguration 
introduce algorithms statistically optimal model configuration management conflict directed best search followed empirical evaluation livingstone 
example autonomous space exploration shows idealized schematic main engine subsystem cassini complex spacecraft built date 
consists helium tank fuel tank tank pair main engines regulators latch valves pyro valves pipes 
helium tank tanks regulators acting reduce high helium pressure lower working pressure 
paths main engine open tanks forces fuel main engine combine spontaneously ignite producing thrust 
pyro valves fired exactly change state exactly open closed vice versa 
function isolate parts main engine subsystem needed isolate failed parts 
latch valves controlled valve drivers shown accelerometer acc senses thrust generated main engines 
starting configuration shown high level goal producing thrust achieved variety different configurations thrust provided main engine number ways opening paths main engine 
example thrust provided opening latch valves leading engine left firing pair opening set latch valves leading engine right 
configurations correspond various combinations pyro firings 
different configurations different characteristics pyro firings irreversible actions firing pyro valves requires significantly power opening closing latch valves 
suppose main engine subsystem configured provide thrust left main engine opening latch valves leading 
suppose engine fails fails provide desired thrust 
ensure desired thrust provided situation spacecraft transitioned new configuration thrust provided main engine right 
ideally achieved firing pyro valves leading right side opening remaining latch valves firing additional pyro valves 
configuration manager constantly attempts move spacecraft lowest cost configurations achieve set high level dynamically changing goals 
spacecraft chosen configuration due failures configuration manager analyzes sensor data identify current configuration spacecraft moves spacecraft new configuration achieves desired configuration goals 
sense configuration manager discrete control system ensures spacecraft configuration achieves set point defined configuration goals 
models concurrent processes reasoning system configurations autonomous reconfiguration requires concepts operating failure modes failures configuration changes 
concepts expressed state diagram failures transitions failure state nominal state configuration changes nominal states failures transitions nominal failure state 
selecting restricted adequately expressive formalism describing configurations hybrid hardware software system essential achieving competing goals reactivity expressivity 
firstorder formulations expressive overly general lend efficient reasoning 
propositional formulations lend efficient reasoning inadequate representing concepts state change 
concurrent transition system formulation temporal logic specification manna pnueli starting point modeling hardware software 
components operate concurrently communicating wires modeled concurrent communicating transition systems 
likewise software routines broad class reactive languages represented naturally concurrent transition systems communicating shared variables 
model differs manna pnueli reactive software procedurally modifies state explicit variable assignments 
hand hardware component behavior state governed set discrete continuous declarative constraints 
constraints computationally expensive reason detail 
experience applying qualitative modeling diagnostic tasks digital systems spacecraft propulsion suggests simple qualitative representations small finite domains quite adequate modeling continuous discrete systems 
added advantage qualitative models extremely robust changes details underlying model 
behaviors states represented constraints finite domains encoded propositional formulae reasoned efficiently 
authors kuipers astrom nerode kohn poole zhang mackworth developing formal methods representing reasoning reactive autonomous systems 
major difference focus fast reactive inference propositional encodings finite domains 
transition systems model concurrent process transition system 
intuitively transition system consists set state variables defining system state space set transitions states state space 
definition transition system tuple pi sigma ffl pi finite set state variables 
state variable ranges finite domain 
ffl sigma feasible subset state space 
state state space assigns variable pi value domain 
ffl finite set transitions states 
transition function sigma sigma representing state transforming action denotes set possible states obtained applying transition state trajectory sequence feasible states oe assume transitions called designated nominal transition transitions failure transitions 
state component may nondeterministically choose perform nominal transition corresponding correct functioning failure transition corresponding component failure 
furthermore response successful repair action nominal transition move system failure state nominal state 
transition system pi sigma specified propositional temporal logic 
specifications built state formulae fl operator 
state formula ordinary propositional formula propositions form state variable element domain 
fl operator temporal logic denoting truth state trajectory 
state defines truth assignment natural way proposition true iff value state satisfies state formula oe precisely truth assignment corresponding satisfies oe 
set states characterized state formula oe set states satisfy oe 
specify set feasible states state formula ae transition specified formula ae conjunction formulae ae form phi fl psi phi psi state formulae 
feasible state follow feasible state trajectory transition iff formulae ae satisfies antecedent ae satisfies consequent ae transition models formula ae called 
transition corresponds note specification adds fl operator standard propositional logic 
severely constrained temporal logic essential property allows perform deductions reactively 
example transition system corresponding valve driver consists state variables mode represents driver mode failed represents commands driver associated valve reset open close represents commands output valve open close 
feasible states driver specified formula mode open open close close open close mode formulae mode mode assert variables unique values 
driver nominal transition specified set formulae mode mode fl mode mode mode fl mode mode failed reset fl mode mode reset fl mode mode failed fl mode failed driver failure transitions specified formulae fl mode failed fl mode respectively 
configuration management view autonomous system combination high level planner reactive configuration manager controls plant 
planner generates sequence hardware configuration goals 
configuration manager evolves plant transition system desired trajectory 
combination transition system configuration manager called configuration system 
precisely definition configuration system tuple hs theta oei transition system theta feasible state representing initial state oe sequence state formulae called goal configurations 
configuration system generates configuration trajectory oe theta satisfies failure transition configuration management achieved sensing controlling state transition system 
state transition system partially observable set variables pi 
state transition system controlled exogenous set variables pi 
assume exogenous transitions system determine values variables assume values state independent values state may depend values previous state 
definition configuration manager transition system online controller takes input initial state sequence goal configurations sequence values sensed variables incrementally generates sequence values control variables combination configuration system 
model configuration manager configuration manager uses specification transition system compute desired sequence control values 
discuss detail shortly 
plant transition system model plant transition system composed set concurrent component transition systems communicate shared variables 
component transition systems plant operate synchronously plant transition component performs state transition 
motivation imposing synchrony section 
require plant specification composed components specification follows definition plant transition system pi sigma composed set cd component transition systems transition system ffl set state variables transition system cd subset pi 
plant transition system may introduce additional variables component transition systems 
ffl state sigma restricted appropriate subset variables feasible transition system cd cd ae ae ae stronger conjunction ae ffl transition performs transition transition system cd 
means ae cd ae concept synchronous concurrent actions captured requiring component performs transition state change 
nondeterminism lies fact component traverse nominal transition failure transitions 
nominal transition plant performs nominal transition components 
multiple simultaneous failures correspond traversing multiple component failure transitions 
returning example hardware component modeled component transition system 
component communication denoted wires modeled shared variables corresponding component transition systems 
model configuration management introduce configuration managers extensive model infer plant current state select optimal control actions meet configuration goals 
essential situations mistakes may lead disaster ruling simple trial approaches 
model configuration manager uses plant transition model determine desired control sequence stages mode identification mi mode reconfiguration 
mi incrementally generates set plant trajectories consistent plant transition model sequence plant control sensed values 
uses plant transition model partial trajectories planner mi plant high level goals confirmation configuration goals control actions sensed values configuration manager model configuration management generated mi current state determine set control values predicted trajectories achieve configuration goal state 
mi reactive 
mi infers current state knowledge previous state observations current state 
considers actions achieve configuration goal state 
commitments decision model component transitions synchronous key 
alternative model multiple transitions interleaving 
places arbitrary distance current state state goal achieved defeating desire limit inference small number states 
abstraction component transitions occur synchronously underlying hardware may interleave transitions 
abstraction correct different interleavings produce final result 
formally characterize mi recall transition corresponds ij transition defined apply set states natural way similarly define ij ij show ij set possible states time control values asserted control values asserted time observations time set states control sensed variables values specified respectively 
set possible states time characterize mi ways model theoretically state formulas 
mode identification mi incrementally generate sequence model transitions knowledge control actions follows thetag sigma jk sigma final inclusion follows equation 
equation useful characterization terms jk allows develop characterization terms state formulae ae ae aes phi jk psi jk ae sigma ae sound potentially incomplete characterization state satisfies ae states satisfy ae necessarily generating ae requires entailment antecedent checked 
hand generating complete characterization equation require enumerating states computationally expensive contains states 
mode reconfiguration incrementally generates set control values model nominal transition desired goal configuration current set possible states model theoretic characterization set possible control actions take time follows jn sigma nk sigma inclusion follows equation 
mi weaker characterization useful terms nk allows develop characterization terms state formulae ae ae consistent ae ae phi nk psi nk ae sigma ae part says control actions consistent current state condition goals simply achieved making world inconsistent 
equation sound potentially incomplete characterization set control actions control action satisfies condition right hand side necessarily vice versa 
checking adequate control action requires entailment antecedent checked 
hand generating complete characterization equation require enumerating states computationally expensive contains states 
empty actions achieve required goal 
planner initiates replanning dynamically change sequence configuration goals 
statistically optimal configuration management previous section characterized set feasible trajectories control actions 
practice trajectories control actions need generated 
just trajectories optimal control action need generated 
efficiently generate recasting mi combinatorial optimization problems 
combinatorial optimization problem tuple finite set variables finite domains set constraints objective function 
feasible solution assignment variable value domain constraints satisfied 
problem find leading feasible solutions generate prefix sequence feasible solutions ordered decreasing order mode identification equation characterizes trajectory generation problem identifying set transitions previous state yield current states consistent current observations 
recall transition system nominal transition set failure transitions 
state transition system non deterministically selects exactly transitions evolve state 
quantify non deterministic choice associating probability transition probability plant selects transition viewpoint recast mi task identifying trajectories plant 
keeping reactive nature configuration management mi incrementally tracks trajectories extending current set trajectories transitions 
change required equation disjunct ranging transitions ranges subset transitions 
likelihood transition posterior probability jo 
posterior estimated standard way bayes rule jo gamma disjoint sets clearly 
similarly gamma entailed posterior probability proportional prior 
simplifying assumption probability transition independent current state 
situations arises 
estimating probability difficult requires research see de kleer williams 
view mi combinatorial optimization problem recall plant transition consists single transition components 
introduce variable component plant values possible component transitions 
plant transition corresponds assignment values variables constraint states resulting plant transition consistent observed values 
objective function probability plant transition 
resulting combinatorial optimization problem identifies leading transitions state allowing mi track set trajectories 
mode reconfiguration equation characterizes reconfiguration problem identifying control action ensures result nominal transition yields states configuration goal satisfied 
recasting combinatorial optimization problem straightforward 
variables just control variables identical domains 
constraint equation satisfy noted earlier different control actions different costs reflect differing resource requirements 
take negative cost control action 
resulting combinatorial optimization problem identifies lowest cost control action achieves goal configuration state 
conflict directed best search solve combinatorial optimization problems conflict directed best search similar spirit de kleer williams dressler struss 
conflict partial solution solution containing conflict guaranteed infeasible 
single conflict rule feasibility large number solutions focusing search 
conflicts generated checking see solution satisfies constraints conflict directed best search algorithm shown 
major components agenda holds unprocessed solutions decreasing order procedure generate immediate successors solution 
main loop removes solution agenda checks feasibility adds solution immediate successors agenda 
solution infeasible assume process checking constraints returns part conflict focus search generating immediate successors subsumed agree variables 
intuitively solution immediate successor solution differ function agenda solution gg result agenda empty soln pop agenda soln satisfies add soln result solutions return result succs immediate successors soln conf conflict subsumes soln succs immediate successors soln subsumed conf endif insert solution succs agenda decreasing order endwhile return result conflict directed best search algorithm combinatorial optimization value assigned single variable ties broken consistently prevent loops successor graph 
show definition immediate successors solution suffices prove correctness show feasible solutions generated decreasing order implemented algorithm refines notion immediate successor 
major benefit refinement time solution removed agenda new solutions added size agenda bounded total number solutions checked feasibility preserving reactivity details scope 
mi full propositional satisfiability check transition consistency interestingly reactivity preserved causal nature plant state constraints means full satisfiability requires little search 
preserve reactivity unit propagation check entailment goals reflecting fact entailment usually harder satisfiability 
note require minimal conflicts 
empirically conflict constraint checker provides focusing extra effort find minimal conflicts unnecessary 
implementation experiments implemented livingstone ideas described 
livingstone part rapid prototyping demonstration autonomous architecture spacecraft control hsts planning scheduling engine raps executive pell 
architecture raps decomposes orders hsts output handing goals livingstone 
evaluate architec number components average modes component number propositions number clauses table spacecraft model properties failure mi scenario time time iru burn acc hot acc low table results failure recovery scenarios ture spacecraft engineers jpl defined spacecraft scenario 
spacecraft scaled version cassini spacecraft retains challenging aspects spacecraft control 
scenario complex mission phase cassini spacecraft successful insertion saturn orbit event single point failure 
table provides summary information livingstone model spacecraft demonstrating complexity 
scenario included failure scenarios 
livingstone viewpoint scenario required identifying failure transitions mi deciding set control actions recover failure table shows results running livingstone scenarios 
column names scenarios discussion details scenarios scope 
second fifth columns show number solutions checked algorithm applied mi respectively 
see spacecraft model large conflicts dramatically focuses search 
third column shows number leading trajectory extensions identified mi 
limited sensing available spacecraft impossible identify unique trajectories 
generally true spacecraft adding sensors increases spacecraft weight 
fourth sixth columns show time seconds sparc spent mi scenario demonstrating efficiency approach 
livingstone mi component tested combinational circuits standard test suite fujiwara 
component circuits assumed modes ok stuck stuck unknown 
probability transitioning stuck modes set unknown mode set 
ran devices components clauses checked time table testing mi standard suite circuits experiments circuit random fault random input vector sensitive fault 
mi stopped generating trajectories leading trajectories generated trajectory times trajectory 
table shows results experiments 
columns self explanatory time number seconds sparc 
note power conflict directed search dramatically focus search 
interestingly results comparable results best atms implementations livingstone uses atms 
furthermore initial experiments partial demonstrated order magnitude speed 
livingstone applied autonomous real time control scientific instrument called 
project underway final results forthcoming 
success demonstration launched livingstone new heights livingstone hsts raps going part flight software new millennium mission called deep space launched 
expect final delivery livingstone project 
introduced livingstone reactive model self configuring system provides kernel model autonomy 
represents important step goal developing fully model autonomous system williams 
technical features livingstone particularly worth highlighting 
modeling formalism achieves broad coverage hybrid hardware software systems coupling transition system models underlying concurrent reactive languages manna pnueli qualitative representations developed model reasoning 
second achieve reactive system performs significant deduction sense response loop propositional transition systems qualitative models synchronous components transitions 
interesting important result deep space livingstone models restricted inference expressive solve important problems diverse set domains 
third livingstone casts mode identification mode reconfiguration combinatorial optimization problems uses core conflict directed best search solve 
ubiquity combinatorial optimization problems power conflict directed search central themes livingstone 
livingstone hsts planning scheduling system raps executive selected form core autonomy architecture deep space flight nasa new millennium program 
nicola muscettola barney pell valuable discussions comments 
agre chapman 
pengi implementation theory activity 
procs 
aaai 
fujiwara 
neutral netlist combinational benchmark circuits 
int 
symp 
circuits systems 
brooks 
intelligence reason 
procs 
ijcai 
de kleer williams 
diagnosing multiple faults 
artificial intelligence 
de kleer williams 
diagnosis behavioral modes 
procs 
ijcai 
dressler struss 
model diagnosis default diagnosis engine effective control strategies practice 
procs 
ecai 
firby 
rap language manual 
working note aap university chicago 
kuipers astrom 
composition validation heterogenous control laws 
automatica 
manna pnueli 
temporal logic reactive concurrent systems specification 
springer verlag 
muscettola 
hsts integrating planning scheduling 
fox zweben eds intelligent scheduling 
morgan kaufmann 
nerode kohn 
models hybrid systems 
grossman eds hybrid systems 
springer verlag 

pell bernard chien gat muscettola nayak wagner williams 
remote agent prototype spacecraft autonomy procs 
spie conf 
optical science engineering instrumentation 
poole 
sensing acting independent choice logic 
procs 
aaai spring symp 
extending theories action 
williams 
model autonomous systems new millennium 
procs 
aips 
zhang mackworth 
constraint nets semantic model hybrid dynamic systems 
journal theoretical computer science 
