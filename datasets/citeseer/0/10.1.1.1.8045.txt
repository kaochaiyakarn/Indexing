conchord cooperative sdsi certificate storage name resolution sameer clarke chuang hue moh steven richman mit laboratory computer science technology square cambridge ma usa richman lcs mit edu 
conchord large scale certificate distribution system built peer peer distributed hash table 
conchord provides load balanced storage eliminating administrative difficulties traditional hierarchical server architectures 
conchord specifically designed support sdsi fully decentralized public key infrastructure allows principals define local names link namespaces delegate trust 
discuss particular challenges conchord address support sdsi ciently novel algorithms distributed data structures address 
experiments show techniques ective practical large sdsi name hierarchies 
sdsi simple distributed security infrastructure proposed public key infrastructure powerful flexible existing systems :10.1.1.111.1818
sdsi names defined local namespaces longer names link multiple namespaces delegate trust 
design obviates central certification authorities allowing principals declare modify complex trust relationships 
example suppose acme wants allow access web site partner companies employees 
sdsi allows acme define group acme partners delegate trust partner define group employees 
acme web server enforce access control policy requiring client prove membership group acme partners employees 
client satisfies requirement presenting certificates shows employee shows partner acme 
locating certificates client needs simple certificates stored central server defeats purpose sdsi decentralized design scales poorly 
distribute certificate storage server hierarchy dns 
dns sdsi single root requires non hierarchical way locate server stores certificate 
authors alphabetical order 
spki sdsi ietf working group suggests embedding uris public keys purpose undesirable changes key uri invalidate certificates issued key 
sdsi name defined terms sdsi name resolution fundamentally complex dns name resolution 
certificates di erent organizations may required create proof clear organization store partial completed proof 
server hierarchies su er administrative problems 
large fraction dns tra caused misconfiguration faulty implementation name servers 
making systems fault tolerant requires expertise resources 
address challenges conchord distributed sdsi certificate directory built peer peer storage system 
peer peer systems configure provide immense storage capacity high reliability balanced load cient lookups :10.1.1.1.1674:10.1.1.159.9358
conchord uses chord lookup system storage caching techniques cooperative file system cfs :10.1.1.159.9358:10.1.1.105.3673
conchord locates certificates relevant information name certificate resolves eliminating need embed uris public keys 
conchord supports operations inserting new certificate resolving name checking name resolves specific key 
conchord prototype implementation supports operations support replication recovery network partitions 
conchord current design handle server failures restrict access certificates enforce storage quotas resist malicious attacks issues left 
rest organized follows section describes capabilities semantic richness sdsi naming system 
section presents conchord data structures algorithms storage design section presents brief evaluation 
section discusses related section concludes 
sdsi background main innovation sdsi local names 
dns names unique global namespace sdsi name meaning relative principal defining name 
instance professor professor define name ras refer respective research assistants 
groups ras referred local names ras ras kp principal public key 
system uses sdsi authorization professor add ras access control list file ectively stating ras principals allowed access file 
principals define local names kinds cryptographically signed certificates reducing non reducing 
reducing certificate binds local name principal 
professor wants add bob carol group certificates chord ras issue reducing certificates ras bob ras carol value sdsi name union keys bound value name ras set bob carol 
call operation returns value name name resolution simply resolution 
call operation verifies specified principal set keys bound name membership checking 
call issuance new sdsi certificate insertion 
certificates issued local names exactly string component resolutions membership checks carried longer extended names 
instance mit issues certificate faculty resolve extended name mit faculty ras 
semantically name denotes principals designated ras principals designated mit faculty 
certificates name resolves set bob carol 
mit issued certificate mit faculty mit faculty ras include professor ras 
bob prove member mit faculty ras presenting sequence certificates verify proof checking signatures certificates 
second type certificate non reducing certificate binds local name local extended name sta faculty sta faculty ras sta visiting notice right hand sides called subjects non reducing certificates names subjects reducing certificates principals keys 
non reducing certificate states value local name includes value subject 
certificates resolve mit sta union values mit faculty mit faculty ras hr visiting 
name bound reducing certificate mit faculty prefix subject non reducing certificate certificates called compatible compose yield new derived certificate sta ras new certificate doesn introduce new trust relationships 
represents trust relationship exists original signed certificates prove fact 
repeatedly perform possible compositions certificate set compositions possible eventually set reducing certificates directly bind local name key name value 
call set closed name reduction 
closure important supporting cient name resolutions membership checks 
design conchord key design assumption membership checking far common operation sdsi names followed name resolution 
insertion comparatively rare 
accordingly conchord maintains closure certificates insertion reducing amount required name resolution membership checking 
users accelerate resolutions checks extended names inserting non reducing certificates 
conchord algorithms hash tables check value compatible proposed 
tables summarized table 
membership checking certificate inserted conchord stored check table hash key certificate function applied tuple name subject 
multiple certificates bind name subject inserted check table certificate latest expiration time overwrites 
check key bound name resolve check resulting set 
local name mit sta closure property guarantees binding exists check table fetch directly check 
name resolution local name bound certificate value stores set keys bound name 
hash key value function name 
resolve local name just look value 
resolve extended name look value name prefix prefix extended name 
nm local name recursively resolve rest name 
instance resolve mit sta spouse fetch table 
conchord hash tables table index value check name subject entry name name subject subject value name set entries name name subject public key compatible name set entries subject name starts name value mit sta 
sta member fetch value spouse take union values compute result 
insertion algorithms rely invariants 
check value date respect name binding value corresponding certificate check vice versa 
maintain invariant updating tables new certificates inserted 
second closure maintained certificates 
maintain invariant compose new certificate compatible certificate system 
recursively insert resulting derived certificates may trigger compositions 
new non reducing certificate inserted locate compatible reducing certificates looking prefix new certificate subject value table 
new reducing certificate inserted locate compatible non reducing certificates 
fast conchord maintains third table compatible stores non reducing certificates hash key certificate function prefix subject 
maintaining proofs said check stores certificates value stores keys compatible stores non reducing certificates 
reality tables store entries proofs name bindings single proof consist sequence certificates binding derived composition 
entry consists name subject certificate sequence proves name bound subject 
example entry derived certificate name sta subject ras sequence mit mit xk represents digital signature private key 
certificates entries composed case sequences concatenated 
expiration time entry earliest expiration certificate sequence 
presents complete insertion algorithm entries 
peer peer architecture conchord locates entries servers chord distributed lookup system :10.1.1.105.3673
conchord distributes hash tables mapping hash key chord id clients access hash tables calculating chord id hash key contacting appropriate server 
conchord pastry tapestry :10.1.1.111.1818:10.1.1.140.3129:10.1.1.28.5987
insert certificate entry name name bound subject subject sequence insert insert entry check name subject empty check name subject subject public key value name value name set compatible name set insert compose compatible prefix subject compatible prefix subject set value prefix subject set insert compose check name subject expires check name subject requires subject name possibly empty sequence strings returns composed entry compose entry entry name name subject subject sequence sequence sequence return fig 

insertion closure problem arises maintaining invariants insertion 
invariant entry check value compatible vice versa violated client crashes insertion 
second invariant closure maintained certificate set violated compatible certificates inserted concurrently client crashes inserting derived certificates 
solve problems synchronization provide transactional consistency insertions slow wide area 
allow system temporarily violate invariants rare case problem occurs 
restore consistency server periodically check entries stores compositions eventually happen 
cient solution reinsertion spread servers infrequent 
allowing temporary inconsistencies safe respect security entries temporarily unavailable 
spki sdsi semantics monotonic inability locate certificates authority 
storage details value compatible tables store sets entries single entries 
large set value usa citizens cause load imbalance exceed capacity single server 
conchord distributes entries set servers 
consider cfs style merkle trees distribute large data sets data structures support concurrent modification multiple clients :10.1.1.159.9358
conchord periodically entries expired entries sets support concurrent modification 
conchord distributes elements set servers serializes set modifications single server 
members set chord id stored chord ids hash 
hash size set 
value stored set size record id servers support atomic operations set size records get size increment get 
fetch members set client calls get size calculates chord ids set members retrieves parallel 
optimize singleton sets client fetches entry set parallel size 
add new entry set client calls increment get 
increments returns updated size client stores new entry id hash 
entry set expires server storing looks updated versions expired certificates check table 
new certificates server storing tells set size server longer valid 
set size server compacts set fetching element set overwriting decrementing set size 
optimization set size server direct set insertion overwrite recall servers periodically reinsert entries involves checking entry appears appropriate value compatible set checking entry composed compatible entries 
check involves scanning appropriate set done check need repeated 
second check needs repeated indefinitely case new compatible entries added 
common case set compatible entries unchanged previous reinsertion 
checking changes fast store version number alongside set size record 
version number incremented time element added set 
reinsertion usually needs check version number unchanged single chord lookup 
network partitions network partition splits set conchord servers servers di erent partitions may store di erent values chord id partition heals conchord automatically resolves inconsistencies 
server responsible storing set entry partition temporarily stores entries accepted id lazily entry set 
similarly server responsible set size record temporarily accepts maximum size value proposed server lazily corrects size necessary 
load imbalance balance request load popular entries conchord caches entries lookup paths cfs 
cached entries full cache lru order 
cached copies may date servers assign time live values 
cached set size records small ttls insertions change actual size values 
cached set entries relatively larger ttls invalid server temporarily stores multiple entries partition heals set compacted expiration 
clients servers detect recover date set size records fetching past expected set entries locations 
set modifications cached set size records update original record 
accelerating operations resolution extended name requires value lookup part name resolution latency scales name length 
reduce number lookups allow clients share resolutions caching extended name resolutions value check tables 
clients cached prefixes resolving name 
example mit faculty assistant ka kb cached resolving mit faculty assistant supervisor resolve supervisor supervisor directly 
binary search possible fetching presents name resolution algorithm takes advantage cached resolutions 
calls yield return proofs resolution calls insert mark resolutions cached back conchord 
way accelerate extended name resolutions leverage closure 
example know need resolve name mit faculty assistants create entry name subject name sequence empty 
call entry simply states name bound 
subject name stored compatible table 
closure causes values name stored value table name resolved single lookup 
li propose membership checking adapt subject subject issuer searches avoid large branching factors certificate graph 
implementing algorithm conchord simply requires maintaining subject issuer table entries area 
evaluation dns traces evaluate ectiveness name resolution sharing trace dns requests captured mit laboratory computer science :10.1.1.28.5987
propose conchord replacement dns trace generate simple sdsi name hierarchy realistic name resolution workload 
dns address query form www foo com generate name resolution request dns com foo www set certificates dns com dns com dns com foo dns com foo dns com foo www dns com foo www certificates expire trace 
run trace single client server count number sequential lookups request 
total number lookups name length due fetching prefixes parallel number sequential lookups latency 
lookup singleton set value table expect exactly sequential lookups resolution 
evaluate ectiveness name resolution sharing run trace caching caching full name resolutions dns proxy caching full names name prefixes 
resolution caches results prefixes begins 
plots cumulative distribution sequential lookups name resolution trace 
caching lookup part created dns hostname reduced name resolution single lookup 
reasonable domain owner knows advance hostnames valid resolved 
resolve name entry name subject sequence resolve resolve entry name subject length set value prefix set entry compose subject public key yield insert resolve entry extract insert requires name subject name public key possibly empty sequence strings returns extracted entry extract entry name subject sequence sequence return fig 

name resolution sequential lookups resolution caching name caching prefix name caching fig 

cumulative distribution sequential lookups dns name resolution 
caching distribution equivalent distribution dns name lengths 
dns name distribution lookups distribution name lengths 
full name caching reduces mean variance high names requested 
prefix caching reduces mean requests succeed lookups suggesting requests share common prefix 
conclude prefix caching quite ective reducing latency name resolutions dataset 
particularly surprising prefix caching analogous ns record caching dns shown particularly ective :10.1.1.28.5987
believe prefix caching benefit datasets hierarchical structures 
mailing lists dns dataset simple require closure certificates evaluate overhead closure second dataset mit course mailing lists 
course lists composed section lists turn composed students forming widely branching hierarchy large groups 
gathered mailing lists courses containing sections students distinct lists generate total certificates 
entry form students sec alice course number add certificates insertion trace suppressing duplicates mit registered mit courses students mit students mit alice mit alice alice mit courses mit mit students secs students secs sec sec sec sec students mit alice insertions number lookups averaged insertions puts gets successful puts fig 

number chord lookups averaged insertions mit course mailing list dataset 
lookup put data get data system 
insertion triggers nearly constant number insertions maintain closure 
insertions grouped course raised parts curves indicate additional compositions insertions courses sections 
course sections students added directly course students group 
dataset designed support number useful queries determining alice registered enumerating students registered mit courses 
count number chord lookups required insert certificate resulting derived certificates 
shows number lookups insertion fairly constant 
number compositions needed maintain closure adding member group proportional number parent groups ected usually small 
example adding student section requires closure groups transitively contain section 
raised parts curves correspond insertions courses sections require addition composition maintain section list 
reordering trace changes distribution lookups insertion ect total number lookups 
conclude maintaining closure practical datasets 
access trace available dataset evaluate total benefit closure provides name resolutions membership checks 
specific examples show benefit substantial closure membership check local name requires single check lookup 
closure check name mit registered require successive lookups retrieve necessary certificates 
related alternatives sdsi exclusively internet host identification applications webs trust access control :10.1.1.111.1818
support richer applications deployed way facilitates 
pgp supports user authorized names webs trust linked namespaces named groups :10.1.1.140.3129
policymaker keynote support general policies sdsi specify way locate certificates needed satisfy particular policy 
previous proposes algorithms resolving sdsi names distributed set certificates address practical challenges storing locating certificates 
describe deploy spki sdsi dns support sdsi name resolution :10.1.1.105.3673
qcm introduced policy directed certificate retrieval general technique locating certificates needed satisfy assertion 
qcm successor sd authoritative servers implement distributed resolution sdsi names rely embedded uris ips map principals servers 
conchord supports policy directed certificate retrieval resolve sdsi names eliminates need mapping principals servers 
conchord loses benefits authoritative servers online signing control certificate dissemination conchord gains scalability self configuration load balance 
conchord distributed sdsi certificate directory built peer peer system 
conchord supports operations membership checks name resolutions certificate insertions 
accelerate checks resolutions conchord maintains closure insertion supports name resolution sharing 
experiments show techniques ective practical 
conchord provides novel deployment design ers number practical advantages traditional hierarchical server architectures 
conchord eliminates need embed location information certificates automatically balances load storage servers 
servers periodically reinsert entries guarantee eventual consistency automatically resolve conflicts occur due network partitions 
prototype implementation supports basic features described 
includes implementing replication supporting spki sdsi authorization certificates revocation limiting user storage handling malicious failures generalizing conchord certificate systems 
acknowledgments barbara liskov valuable advice presentation 
russ cox robert morris muthitacharoen ronald rivest emil sit anonymous referees helpful comments 


trusted execution platform multiparty computation 
master thesis mit 
app certificate chain algorithms 

blaze feigenbaum keromytis 
keynote trust management public key infrastructures position 
security protocols workshop pages 

blaze feigenbaum lacy 
decentralized trust management 
technical report 

clarke ellison rivest 
certificate chain discovery spki sdsi 
journal computer security 

cox muthitacharoen 
serving dns chord 
proc 
iptps 

dabek kaashoek karger morris stoica 
wide area cooperative storage cfs 
proc 
acm sosp oct 

dns extensions ietf mar 
www ietf org html charters charter html 

druschel rowstron 
past large scale persistent peer peer storage utility 
hotos viii may 

ellison lampson rivest thomas 
spki certificate theory 
rfc sept 

ellison clarke 
high speed tuple reduction 
memo intel 

gunter jim 
policy directed certificate 
technical report ms cis penn sept 

halpern van der meyden 
logic sdsi linked local name spaces 
journal computer security 

jim 
sd trust management system certified evaluation 
proc 
ieee symposium security privacy may 

jung sit balakrishnan morris 
dns performance ectiveness caching 
proc 
acm sigcomm internet measurement workshop 

li winsborough mitchell 
distributed credential chain discovery trust management 
proc 
th acm ccs nov 


storing retrieving internet certificates 
proc 
rd nordic workshop secure systems 

public key infrastructure ietf feb 
www ietf org html charters charter html 

ratnasamy francis handley karp shenker 
scalable network 
proc 
acm sigcomm 

rivest lampson 
sdsi simple distributed security infrastructure 
apr 

rowstron druschel 
pastry scalable distributed object location routing large scale peer peer systems 
proc 
ifip acm middleware 

simple public key infrastructure ietf spki feb 
www ietf org html charters spki charter html 

stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
proc 
acm sigcomm aug 

zhao kubiatowicz joseph 
tapestry infrastructure faulttolerant wide area location routing 
technical report ucb csd uc berkeley apr 

zimmermann 
cial pgp user guide 
mit press 
