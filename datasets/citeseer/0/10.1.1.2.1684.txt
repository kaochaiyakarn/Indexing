proceedings th acm symposium principles programming languages popl san antonio texas usa january jflow practical static information flow control andrew myers laboratory computer science massachusetts institute technology www pmg lcs mit edu promising technique protecting privacy integrity sensitive data statically check information flow programs manipulate data 
previous proposed programming language extensions allow static checking resulting languages restrictive practical implemented 
describe new language jflow extension java language adds statically checked information flow annotations 
jflow provides new features information flow checking flexible convenient previous models decentralized label model label polymorphism run time label checking automatic label inference 
jflow supports language features integrated successfully static information flow control including objects subclassing dynamic type tests access control exceptions 
defines jflow language presents formal rules check jflow programs correctness 
checking static little code space data space run time overhead jflow implementation 
protection privacy data increasingly important data programs increasingly mobile 
conventional security techniques discretionary access control information flow control including mandatory access control significant shortcomings mechanisms 
hard problem protecting privacy preventing private information leaking computation 
access control mechanisms help kind leak research supported part darpa contract monitored usaf rome laboratory part darpa contract monitored usaf rome laboratory 
copyright fl association computing machinery permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
request permissions publications dept acm fax permissions acm org 
control information release propagation released 
mandatory access control mac mechanisms prevent leaks propagation associating run time security class piece computed data 
computation requires security class result value computed multi level systems approach slow 
systems usually apply security class entire process tainting data handled process 
coarse granularity results data security class overly restrictive difficult write useful applications 
promising technique protecting privacy integrity sensitive data statically check information flows programs manipulate data 
static checking allows fine grained tracking security classes program computations run time overhead dynamic security classes 
simple programming languages proposed allow static checking dd vsi ml sv hr 
focus languages correctly checking information flow statically providing realistic programming model 
describes new language jflow extension java language gjs permits static checking flow annotations 
jflow practical programming language allows checking 
approaches vsi ml sv hr ml jflow treats static checking flow annotations extended form type checking 
programs written jflow statically checked jflow compiler prevents information leaks storage channels lam 
jflow intended support writing secure servers applets manipulate sensitive data 
important philosophical difference jflow static checking information flow focus usable programming model 
despite long history static information flow analysis widely accepted security technique 
major reason previous models static flow analysis limited restrictive practice 
goal add power static checking framework allow reasonable programs written natural manner 
involved new contributions jflow extends complex programming language supports language features previously integrated static flow checking including mutable objects subsume function values subclassing dynamic type tests exceptions 
jflow provides powerful new features information flow checking restrictive convenient previous programming languages ffl supports decentralized label model ml ml allows multiple principals protect privacy presence mutual distrust 
supports safe statically checked declassification downgrading allowing principal relax privacy policies weakening policies principals 
ffl provides simple powerful model access control allows code privileges checked statically allows authority granted checked dynamically 
ffl provides label polymorphism allowing code generic respect security class data manipulates 
ffl run time label checking class label values provide dynamic escape static checking restrictive 
run time checks statically checked ensure information leaked success failure run time check 
ffl automatic label inference unnecessary write annotations required 
jflow compiler structured source source translator output standard java program compiled java compiler 
part translation involves removal static annotations jflow program checking course 
little code space data space run time overhead checking performed statically 
remainder structured follows section contains overview jflow language rationale decisions taken 
section discusses static checking sketches framework check program constructs manner similar type checking formally informally presents rules 
section describes translations performed compiler 
section compares related areas section provides 
grammar jflow provided appendix language overview section presents overview jflow language rationale design 
jflow extension java language incorporates decentralized label model 
section previous decentralized label model ml ml reviewed 
language description succeeding sections focuses differences jflow java java widely known documented gjs 
labels decentralized label model data values labeled security policies 
label generalization usual notion security class set policies restrict movement data value label attached 
policy label owner principal data observed order create value 
principals users authority entities groups roles 
policy set readers principals allows observe data 
single principal may owner multiple policies may appear multiple reader sets 
example label policies separated semicolons owned respectively 
policy principal allows read policy principal allows read 
effective reader set contains common reader restrictive label possible label fg contains policies 
principal expresses privacy interest label data labeled fg completely public far labeling scheme concerned 
important intuitions model data may read user system policies data list user reader 
effective policy intersection policies data 
second principal may choose relax policy owns 
safe form declassification safe policies data enforced 
process authority act behalf possibly empty set principals 
authority possessed process determines able perform 
principals authorized act principals creating principal hierarchy 
principal hierarchy may change time revocation assumed occur infrequently 
meaning label affected current principal hierarchy 
example principal act principal listed reader policy effectively listed policy 
meaning label different principal hierarchies discussed extensively earlier ml 
variable statically bound static label 
alternative dynamic binding largely prevents static analysis simulated jflow needed 
value label variable label assign value variable relabeled written vl definition binary relation labels intuitive vl policy policy restrictive ml 
assignment leak information 
system label assigned programmer writes code uses power select label give programmer ability leak static checker permits assignment label sufficiently restrictive 
assignment static binding label prevents leakage 
changes read value effected modifying principal hierarchy changes principal hierarchy require appropriate privilege 
computations multiplying numbers cause joining labels label result restrictive label restrictive labels values computation upper bound labels 
join sets policies simply union sets policies 
relation generates lattice equivalence classes labels lub operator 
lattice properties important supporting automatic label inference label polymorphism ml ml 
notation shorthand mean labels equal ml 
declassification provides escape hatch strict information flow tracking 
authority process includes principal value may declassified dropping policies owned principals acts 
ability declassify provides opportunity choose release information sophisticated analysis 
practical information flow control systems provide ability declassify data strict information flow control restrictive write real applications 
complex mechanisms inference controls den decide declassification appropriate 
previous systems declassification performed trusted subject code having authority highly trusted principal 
key advantage new label structure decentralized require principals system trust principal declassification decision weaken policies principals act 
labeled types section begins description new jflow programming language incorporates label model just summarized 
jflow program label denoted label expression set component expressions 
section component expression form owner reader reader denotes policy 
label expression series component expressions separated semicolons fo program component expression may take additional forms example may simply variable name 
case denotes set policies label variable 
label fag contains single component meaning label value labels restricted variable label fa rg contains components indicating labeled value restricted principal restricts value read jflow value labeled type consists parts ordinary java type int label describes ways value propagate 
type label parts labeled type act largely independently 
type expression may labeled label expression flg 
labeled type expression written example labeled type represents integer principal owns read owner policy implicitly reader 
goal type checking ensure apparent int implicit flow example static type expression supertype actual run time type value produce similarly goal label checking ensure apparent label expression restrictive actual label value produce 
addition label checking guarantees declassification apparent label value restrictive actual label value affect 
principle actual label computed precisely run time 
static checking ensures apparent static label conservative approximation actual label 
reason typically unnecessary represent actual label run time 
labeled type may occur jflow program places type may occur java program 
example variables may declared labeled type int label may omitted labeled type declaration omitted label local variable inferred automatically uses 
contexts label omitted context dependent default label generated 
example default label instance variable public label fg 
cases default label assignment discussed 
implicit flows jflow label expression value varies depending evaluation context 
somewhat unusual property needed prevent leaks implicit flows channels created control flow structure 
consider code segment 
examining value variable segment executed determine value secret boolean assigned constant values 
problem assignment allowed 
prevent information leaks implicit flows compiler associates program counter label pc statement expression representing information learned knowledge statement expression evaluated 
program value pc consequent statement fbg 
statement pc fg information deduced fact statement statement executed 
label literal expression pc fbg case 
unsafe assignment lb switch label case throw new switch label example prevented label restrictive label expression fbg 
run time labels jflow labels purely static entities may values 
class values new primitive type label represent labels 
functionality needed label value determined statically 
example bank stores number customer accounts elements large array account different label expresses privacy requirements individual customer 
implement example jflow account labeled attached dynamic label value 
variable type label may class value label values 
example methods accept arguments run time labels method declaration static lbg compute int xf lbg label lb example component expression lb denotes label contained variable lb label variable lb 
preserve safety variables type label lb may construct labels immutable initialization java terminology final 
java arguments jflow final 
important power run time labels add ability examined run time switch label statement 
example statement shown 
code attempts transfer integer variable variable transfer necessarily safe label lb known statically 
statement examines run time label expression executes case statements 
statement executed associated label restrictive expression label statement assignment expression value declared variable case legal 
case arm switch executed transfer occur safely code throws exception 
lb run time value information may transferred 
occur example observing arms switch executed 
prevent information channel information leak pc arm augmented include lb label flg 
code passes static checking assignment legal flg fyg 
class account final principal customer name balance bank account run time principals run time labels manipulated statically conservatively treated unknown fixed label 
presence opaque labels problem static analysis lattice properties labels 
example labels vl case third label tl tl implication possible opaque label appear label preventing static analysis 
unknown labels including run time labels propagated statically 
authority declassification jflow capability access control dynamically statically checked 
method executes authority granted 
authority essentially capability act set principals controls ability declassify data 
authority build complex access control mechanisms 
point program compiler understands code running ability act set principals called static authority code point 
actual authority may greater principals may able act principals 
principal hierarchy may tested point actsfor statement 
statement actsfor executes statement principal act principal statement skipped 
statement checked assumption acts relation exists example static authority includes static checking augmented include program authority declassify value 
expression declassify result expression label declassification checked statically static authority point declassification 
declassify expression may relax policies owned principals static authority 
run time principals labels principals may class values run time 
type principal represents principal value 
final variable type principal may real principal 
example policy may final variable type principal name owner reader 
variables may actsfor statements allowing static reasoning parts principal hierarchy may vary run time 
labels constructed run time principals declassification may performed labels 
public class vector label extends private length private flg elements public vector public object elementat int fl ig throws return elements public void public size return length public void parameterization labels run time principals needed order model systems heterogeneous respect principals system resorting declassification 
example bank store bank accounts structure shown run time principals run time labels 
structure account may owned different principal customer account 
security policy account similar structure owned principal instance variable customer 
code manipulate account manner generic respect contained principal determine run time principal 
principal customer may manipulated actsfor statement label may switch label statement 
classes type domain parameterizing classes important building reusable data structures 
important polymorphism information flow domain usual way handle absence statically checked type polymorphism perform dynamic type casts approach works poorly applied information flow new information channels created dynamic tests 
allow usable data structures jflow classes may parameterized generic respect number labels principals 
class interface declarations extended include optional set explicitly declared parameters 
example java vector class translated jflow shown 
vector parameterized label represents label contained elements 
assuming secret public appropriately defined types vector vector represent vectors elements differing sensitivity 
ability parameterize classes labels necessary reimplement vector distinct element label 
addition label principal parameters jflow parameterized classes simple dependent types car types contain values 
ensure dependent types defined meaning immutable variables may parameters 
note case vector vector subtyping invariant parameter subtype relation denoted 
relation sound parameter may declared covariant label label places additional restrictions 
example method argument mutable instance variable may labeled parameter 
class implicit label parameter label represents label object class 
vl implies cfl acts subtype cfl label necessarily covariant parameter restricted manner covariant parameters 
class may authority granted objects adding authority clause class header 
authority clause may name principals external program principal parameters 
authority clause names external principals process installs class system authority named principals 
authority clause names principals parameters class code creates object class authority actual principal parameters call constructor 
class superclass authority covered authority clause possible obtain authority inheriting superclass 
methods class declarations jflow method declarations contain extensions 
optional annotations manage information flow authority delegation 
method header syntax form java language specification gjs modifiers opt identifier opt opt opt throws opt opt identifier return value arguments exceptions may individually labeled 
subtle change java arguments implicitly final allowing type parameters 
change convenience programmer significantly change power language 
optional labels called label label 
label specify restriction pc point invocation method 
label final pc specifies information learned observing method terminates normally 
individual exceptions return value may distinct labels provides finegrained tracking information flow 
examples jflow method declarations 
labels omitted jflow program default label assigned 
effect defaults methods require label annotations 
labels may static yg add int int return boolean compare str string name string pwd fname throws nullpointerexception boolean throws notfound jflow method declarations omitted method declaration signifying implicit label polymorphism 
example arguments add compare str unlabeled 
argument label omitted method generic respect label argument 
argument label implicit parameter procedure 
example method add called integers regardless labels 
label polymorphism important building libraries reusable code 
math routine add reimplemented argument label 
default label return value label joined labels arguments 
add default return value label exactly label written fx yg return value written just int 
default label exception label compare str example 
label omitted add implicit parameter method 
method called regardless caller pc 
pc method contains implicit parameter method prevented causing real side effects may course modify local variables mutate objects passed arguments appropriately declared true side effects create static checking errors 
java method may contain list constraints prefixed keyword constraints constraint authority principals caller principals actsfor principal principal different kinds constraints ffl authority pn clause lists principals method authorized act 
static authority method includes set principals listed clause 
principals listed may names global principals names class parameters type principal 
listed principal listed authority clause method class 
mechanism obeys principle privilege methods class need possess full authority class 
ffl caller pn calling code may dynamically authority method caller constraint 
authority clause authority object authority case class authority root public boolean check string user string password authority root return password correct boolean match false try int names length names user passwords password match true break catch nullpointerexception fg catch fg return declassify match private string names private string root passwords jflow password file caller 
method caller clause may called calling code possesses requisite static authority 
principals named caller clause need constants may names method arguments type principal 
passing principal corresponding argument caller principal authority code 
dynamic principals may class principals example may labels 
ffl actsfor actsfor constraint may prevent method called specified acts relationship acts holds call site 
method body checked static principal hierarchy assumed contain acts relationships declared method header 
constraint allows information principal hierarchy transmitted called method dynamic checking 
example essentials jflow language covered ready consider interesting jflow code 
contains jflow implementation simple password file passwords protected information flow controls 
method checking passwords shown 
method check accepts password user name returns boolean indicating string right password user 
statement conditional elements passwords variables user password labels implicit parameters 
body statement pc password root variable class protected final lb content public label ll lb ll occur call super super content checked assuming lb ll public get label flg throws switch label content case unwrapped return unwrapped throw new public label get label return lb protected class match label order allow assignment match true 
label prevents match returned directly result label return value default label 
method match desired label compiled authority act root 
note exceptions nullpointerexception explicitly caught method explicitly declare 
precise reasoning possibility exceptions jflow code convenient write 
little difference code equivalent java code 
annotations added authority clause stating principal root trusts code declassify expression label elements passwords 
labels local variables return values inferred automatically assigned sensible defaults 
task writing programs easier jflow label annotations tend required interesting security issues 
method implementor class decided declassification match results acceptably small leak information 
login procedures method leak information exhaustively trying passwords eventually extract passwords password file 
assuming space passwords large passwords difficult guess amount information gained trial far bit 
reasoning processes acceptable leaks information lie outside domain information flow control system reasoning processes accommodated natural decentralized manner 
example protected class protected provides convenient way managing run time labels bank account example mentioned earlier 
implementation shown 
implementation shows protected immutable pair containing value content type object label lb protects value 
value extracted get method caller provide label extraction 
label insufficient protect data exception thrown 
value type protected behaves value dynamic checked information flow systems carries run time label 
protected obvious analogue type domain value dynamically associated type tag dynamic type 
key making protected convenient label instance variable lb 
labeling protected need additional explicit covariant label parameter label lb 
limitations jflow completely superset java 
certain features omitted information flow control tractable 
jflow eliminate possible information leaks 
certain covert channels particularly various kinds timing channels difficult eliminate 
prior addressed static control timing channels resulting rules restrictive ar sv 
covert channels arise java language features threads 
jflow prevent threads communicating covertly timing asynchronous modifications shared objects 
covert channel prevented requiring single threaded programs 
timing channels 
jflow prevent threads improperly gaining information timing code system clock removing access clock 
hashcode 
java built implementation hashcode method provided class object communicate information covertly 
jflow class implement hashcode 
static variables 
order static variable initialization communicate information covertly 
jflow channel blocked ruling static variables 
static methods legal 
restriction significantly hurt expressive power program uses static variables usually rewritten program static variables instance variables object 
order initialization objects explicit susceptible analysis 

run separate thread main program communicate covertly 
part jflow 
resource exhaustion 
communicate information covertly conditionally allocating objects heap exhausted 
jflow treats error fatal preventing communicating single bit information program execution 
exhaustion errors treated similarly 
wall clock timing channels 
jflow program change run time private information ob served 
extreme example enter infinite loop 
jflow attempt control channels 
unchecked exceptions 
java allows users define exceptions need declared method headers unchecked exceptions practice described atypical gjs 
jflow unchecked exceptions serve covert channels 
type discrimination parameters 
jflow supports run time cast instanceof operators standard java may invoked classes lack parameters 
reason restriction information parameters available run time 
operators permitted parameters statically known matched currently supported 
backward compatibility 
jflow backward compatible java existing java libraries provide flow annotations 
cases java library wrapped jflow library provides reasonable annotations 
static checking translation section covers static checking jflow compiler performs translates code translation process 
exceptions important limitation earlier attempts create languages static flow checking absence usable exceptions 
example denning original static flow checking exceptions terminated program dd treatment exceptions seemingly leaked information 
subsequent avoided exceptions entirely 
unnecessary treat exceptions directly languages function generates exceptions desugared function returns discriminated union oneof 
problems approach 
obvious way handle causes exceptions carry label unacceptable loss precision 
java exceptions objects try catch statement functions typecase 
model translated directly oneof 
useful consider oneof types handled jflow 
obvious way treat oneof types analogy record types 
arm oneof distinct label associated 
addition added integer field tag indicates arms oneof active 
problem model assignment oneof require vpc attempt oneof implicitly read 
result arm oneof effectively carry label 
modeling exceptions unacceptable 
expression statement static checker determines path labels labels information transmitted various possible termination paths normal termination termination exceptions termination return statement 
fine grained analysis avoids unnecessary restrictiveness produced desugaring exceptions 
exception raised evaluating statement expression possibly distinct label transferred pc catch statements intercept 
finer resolution provided normal termination return termination example label value expression may differ label associated normal termination 
termination statement break continue statement tracked confusing distinct break continue targets 
path labels statement expression represented map symbols labels 
mapping represents termination path statement expression take label mapping indicates information may transmitted path known actual termination path 
domain map includes different kinds entities ffl symbol represents normal termination 
ffl symbol represents termination return statement 
ffl classes inherit throwable 
mapping class represents termination exception 
ffl symbols nv rv represent labels normal value expression return value statement respectively 
represent paths convenient include part map 
labels restrictive labels corresponding paths 
ffl tuple form li represents termination executing named break continue statement jumps target break continue statement name target represented tuple ffli 
tuples mapped label static checking rules actual label 
path labels denoted letter members domain paths denoted expression denotes label maps expression denotes new map exactly bound path labels may map symbol pseudo label indicating statement terminate path label acts bottom label lattice tl labels including label fg 
special path labels map paths corresponding expression terminate 
type checking vs label checking jflow compiler performs kinds static checking compiles program type checking label checking 
aspects checking entirely labels type constructors appear rules subtyping 
checks needed show theta gi label idi vq theta extends gi ts interp ts class env ts subtype rules statement expression safe largely classified type label checks 
focuses rules checking labels type checks exactly java 
kinds judgements static checking 
judgment means type environment judgment information flow counterpart means path labels environment symbol denote inferences type domain 
environment maps identifiers class names parameter names variable names various kinds entities 
path labels notation binding symbol notation new environment rebound rules assumed declarations classes global environment comments notation helpful point 
large brackets indicates optional syntactic element 
letter represents type represents type expression 
letter represents name class 
letter represents label represents label expression 
represents labeled type expression pair containing type expression optional label expression 
function interp converts type expressions types function interp converts label expressions labels 
letter represents variable name 
letter represents formal parameter class letter represents actual parameter instantiation parameterized class 
subtype rules interesting interactions type label checking 
consider judgment meaning subtype 
judgement jflow languages subtyping 
ordinary unlabeled types 
subtype rule shown java take account class parameters 
instantiation parameterized class subtyping invariant parameters label parameter declared covariant 
subtyping rule shown 
function class env generates extension global environment formal parameters class true literal pc nv pc true pc theta final pc nv pc nv extend pc phi phi tx simple label checking rules bound actual parameters param id rule vector subtype java arrays written treated internally special type parameters java covariant jflow classes invariant user defined types may parameterized types 
instantiations class necessary walk type hierarchy rewriting parameters shown second rule 
rules inductively prove appropriate subtype relationships 
label checking rules consider examples static checking rules 
space restrictions prevent presentation rules complete description static checking rules jflow available mye 
consider contains basic rules static checking 
rule shows literal expression terminates normally value labeled current pc described earlier 
second rule shows empty statement terminates normally pc start 
third rule shows value variable labeled label variable current pc 
note environment maps variable identifier entry ea xa pc xa pc ev xv exc xa phi phi xv xa nv nullpointerexception exc xa nv tx nv exc xa nv nv ea xv nv tx la ea ev xe pc xe nv pc xe nv xe phi phi fresh variable pc ffli xe pc xe nv xs xs xe phi xs ffli pc li continue li break li fn rg paths pc paths symbols nv rv exc phi nv label checking rules form final variable type label uid unique identifier distinguishing variables name 
fourth rule covers assignment variable 
assignment allowed variable label restrictive value assigned include current pc 
label restrictive inferred current environment contains information static principal hierarchy 
complete rule checking statement additional antecedent type checking rules omitted interest space 
final rule covers statements performed sequence 
second statement executed statement terminated normally correct pc checking second statement normal path label statement 
function extend extends environment add local variable declarations statement path labels sequence restrictive path labels statements condition captured operator phi merges sets path labels joining corresponding paths 
contains complex rules 
rule array element assignment mirrors order evaluation expression 
array expression evaluated yielding path labels completes normally index expression evaluated yielding assigned value evaluated 
java checks possible exceptions performing assignment 
function exc defined bottom simplify conditions 
function creates set path labels just include additional path exception path label observation normal termination value normal termination nv conditional exception thrown exc joins label mappings 
avoiding leaks requires label array elements restrictive label information stored nv 
rule shows check statement 
path labels xe expression determined 
execution conditional pc statements include value label xe nv 
statement terminate paths terminate normal termination cause executed 
statement clause statement considered empty statement second rule applied 
rule statement subtle presence loop 
rule introduces label variable represent information carried continuation loop various paths 
represents unknown label solved 
essentially loop invariant information flow 
may carry information exceptional termination break continue statements occur inside loop 
entry added environment tuple ffli capture information flows break continue statements loop 
rules checking break continue shown rule environment entries apply proper restriction information flow 
assuming entering pc label xs final pc label 
final condition requires may class xe exc xe nv throw xs pc exc label pc pc final fresh uid phi uncaught try fsg catch fs phi try fs fs exc label ccc uncaught exception handling rules restrictive establishes loop invariant 
rule applies statement important relaxing restrictive path labels 
intuitive statement sequence statements terminate normally pc pc 
true statement terminate return statement 
rule called single path rule 
safe rule apply exception paths 
see suppose set path labels formally contains single exception path path include multiple paths consisting exceptions subclasses multiple paths discriminated try catch statement 
unusual java exception model prevents single path rule applied exception paths 
java language extend static flow analysis ways fully specifies evaluation order 
property static checking information flow simpler rules tend encode possible evaluation orders 
non determinism evaluation order encoded adding label variables manner similar rule statement 
throwing catching exceptions exceptions thrown caught safely jflow usual java constructs 
shows rule throw statement try catch statement lacks clause try statement 
try statement catch clauses clause desugared true try throw new false catch implicit flow throw try catch inside try 
rule throw straightforward 
idea try catch rule catch clause executed pc includes paths cause clause executed paths exceptions exception class subclass superclass class named catch clause 
function exc label joins labels paths 
path labels statement merge path labels various catch clauses plus paths xs caught catch clause include normal termination path xs 
try rule similar rule sequencing statements 
difference statement checked exactly initial pc executed matter terminates 
see exception rules consider code 
example boolean variables 
code transfers information implicit flow resulting exception 
fact code equivalent assignment rule path labels throw statement fe path labels statement fe fxg 
assignment false checked pc fxg code allowed fxg fyg 
restriction correct exactly equivalent assignment statement required 
applying try catch rule single path rule value pc code fragment seen start 
throwing catching exception necessarily taint subsequent computation 
run time label checking interesting aspect checking jflow checking switch label statement inspects dynamic label run time 
inference rule checking statement 
intuitively switch label statement tests equation xe nv vl arm finds equation holds executes 
test evaluated statically run time 
test split stronger conditions tested statically tested dynamically 
rule naturally contains static part test 
lrt join possible run components components mention formal label principal parameters 
static test xe nv vl equiva xe interp xe nv interp pc xe pc pc gamma label nv tl pc pc final fl fresh uid xe phi switch label case fl inference rule switch label xe nv vl dynamic test xe nv vl tests imply full condition xe nv vl test may information channel check pc include labels xe nv point 
rule uses label function achieve 
applied label generates new label joins labels variables mentioned presence label constraint equations change process solving label constraints fundamental way 
checking method calls look static checking associated objects 
static checking object oriented languages complex various features jflow add complexity 
section shows despite complexity method calls constructor calls operator new checked statically 
rules checking method constructor calls shown figures 
defines generic checking performed varieties calls defines rules checking ordinary method calls static method calls constructor calls 
avoid repetition checking static method calls constructor calls expressed terms predicate call defined 
predicate turn expressed terms predicates call call 
predicate call checks argument expressions establishes constraints calling method satisfied 
rule functions type part label part interpret type label parts labeled type rule determines label default return label def rv argument environment binds method arguments appropriately labeled types 
invoking method requires evaluation arguments producing corresponding path labels argument labels bound labels line nv vl ensures actual arguments assigned formals 
required restrictive pc call def rv call def rv call theta static theta fig theta frg throws pc pc gamma fresh variable uid fresh uid class env final type part fl uid theta fig interp max labeled label part tl nv max def rv void fg nv satisfies constraints call def rv interp interp call case authority true caller auth interp actsfor interp interp satisfies constraints theta static theta fig theta frg throws lr theta frg interp fg lr labeled label part def rv type part class env lr nv phi label part tlr call def rv checking calls evaluating arguments max 
call site satisfy constraints imposed method checked predicate satisfies constraints 
rule predicate uses function interp call maps identifiers method constraints corresponding principals 
perform mapping function needs environments corresponding calling code called code special environment binds actual arguments 
environment entry auth contains set principals code known statically act 
judgement means known statically act 
static principal hierarchy es signature es xs pc xs nv call es interp signature call interp theta theta authority signature hc theta fig theta frg throws theta fig theta frg throws call parameters auth interp class env new rules specific calls placed environment 
predicate call produces path labels method call assuming method returns path labels signature claims 
label def rv label return value case return type labeled 
joins labels arguments typically return value function depends arguments 
rules various kinds method calls built top framework shown 
rules function signature obtains signature named method class 
rule constructors contains subtle steps constructors checked static methods similar signature 
second call constructor requires caller possess authority principals authority class parameters 
caller need authority external principals named authority clause 
constraint solving rules static checking applied generate constraint system label variables method ml 
example assignment rule generates constraint nv vl 
constraints form tam vb tbn constraints split individual constraints vb tbn lattice properties labels 
individual terms actsfor dynamic ph actsfor switch label case fl se xe nv lrt lrt xe nv lrt lrt se interesting jflow translations constraints may policies label variables label parameters dynamic labels expressions label label constraints efficiently solved modification lattice constraint solving algorithm rm applies ordering optimization shown produce best commonly iterative dataflow algorithms kw 
approach initialize variables constraints restrictive label 
iteratively relax labels satisfying assignment contradiction 
label create problems monotonic 
relaxation steps ordered topologically sorting constraints looping components 
number iterations required nh maximum height lattice structure rm nd maximum back edges depth traversal constraint dependency graph 
bounded reasonable programs 
observed behavior jflow compiler constraint solving negligible part run time 
translation jflow compiler static checker source source translator 
output standard java program 
annotations jflow run time representation translation erases leaving java program 
example type labels erased produce corresponding unlabeled java type 
class parameters erased 
declassify expression statement replaced contained expression statement 
uses built types label principal translated java types jflow lang label jflow lang principal respectively 
variables declared types remain translated program 
constructs translate interesting code actsfor switch label statement dynamically test principals labels respectively 
translated code simple efficient shown 
note translation rule switch label uses definitions 
discussed earlier runtime check xe nv vl effect test labels completely representable run time 
translated code uses methods actsfor classes jflow lang label jflow lang principal respectively 
methods accelerated hash table lookup cache results translated code fast 
related information flow control static analysis security guarantees 
lattice model information flow comes early bell lapadula bl denning den 
subsequent information control models dynamic labels static labels checked statically 
decentralized label model similarities model models provide approximation originator controlled release labeling dod intelligence community model dynamically checked 
static analysis security guarantees long history 
applied information flow dd ar access control jl rsc integrated models sto 
interest programming languages treating information flow checks domain type checking 
focused formally characterizing existing information flow integrity models po vsi vol 
smith volpano examined difficulty statically checking information flow multithreaded functional language sv jflow address 
rules define prevent run time program depending way non public data 
abadi aba examined problem achieving secrecy security protocols typing rules shown encryption treated form safe declassification primitive encryption operator 
heintze riecke hr shown labels applied simple language types slam calculus 
show statically check integrated model access control information flow control integrity 
labels include components enforces conventional access control enforces information flow control 
model limitation entirely static run time access control declassification run time flow checking 
provide label polymorphism objects 
heintze riecke prove useful soundness theorems model 
step desirable jflow important features objects inheritance dependent types formal proofs correctness difficult point 
earlier ml introduced decentralized label model suggested simple language writing information flow safe programs 
jflow extends ideas simple language important ways shows apply real programming language java 
jflow adds support objects fine grained exceptions explicit parameterization full decentralized label model ml 
static checking described formal inference rules specify jflow compiler 
performance label inference algorithm constraint solver improved 
privacy increasingly important security concern static program checking appears technique provide security reasonable efficiency 
described new language jflow extension java language permits static checking flow annotations 
knowledge practical programming language allows checking 
goal add static checking framework allow reasonable programs written natural manner 
jflow addresses limitations previous area 
supports language features previously integrated static flow checking including mutable objects subsume function values subclassing dynamic type tests dynamic access control exceptions 
avoiding unnecessary restrictiveness supporting complex language required addition sophisticated language mechanisms implicit explicit polymorphism code written generic fashion dependent types allow dynamic label checking static label checking restrictive static reasoning access control statically checked declassification 
list mechanisms suggests reason static flow checking widely accepted security technique despite having invented decades ago programming language techniques type theory sophisticated support sound practical programming model 
adapting techniques jflow useful step usable static flow checking 
acknowledgments people read gave useful suggestions including sameer reviewers 
bala miguel castro stephen garland particularly helpful reviewing static checking rules 
nick mathewson compiler able steal code barbara liskov support project 
grammar extensions jflow contains extensions standard java grammar order allow information flow annotations added 
productions added modified standard java language specification gjs 
java grammar modifications grammar required grammar input parser generator 
grammar modifications fact code jflow compiler considerable extent derived extension java supports parametric polymorphism mbl lmm 
label expressions components opt components component components component component principal principals opt identifier identifier principals principal principals principal principal name labeled types types extended permit labels 
new primitive types label principal added 
opt opt name opt opt boolean label principal production represents instantiation array index expression 
brackets ambiguity resolved parsing 
name expression name expression new class declarations modifiers opt class identifier params opt super opt interfaces opt authority opt modifiers opt interface identifier params opt opt interfaces opt params parameter parameter parameter label identifier covariant label identifier principal identifier authority authority principals method declarations modifiers opt identifier opt opt opt throws opt opt modifiers opt void identifier opt opt opt throws opt opt modifiers opt identifier opt opt throws opt opt identifier constraints constraints constraint constraints constraint constraint authority caller principals actsfor principal principal avoid ambiguity classes throws list placed parentheses 
label confused method body 
throws throws new statements statement existing productions switch label expression case type identifier case actsfor principal principal statement declassify statement executes statement restrictions removed pc 
declassify statement new expressions literal existing productions new label declassify expression aba mart abadi 
secrecy typing security protocols 
proc 
theoretical aspects computer software third international conference september 
mart abadi luca cardelli benjamin pierce gordon plotkin 
dynamic typing statically typed language 
acm transactions programming languages systems toplas april 
appeared src research report 
ar gregory andrews richard reitman 
axiomatic approach information flow programs 
acm transactions programming languages systems 
bl bell lapadula 
secure computer system unified exposition multics interpretation 
technical report esd tr mitre mtr bedford ma 
available ntis ad 
car luca cardelli 
typeful programming 
neuhold paul editors formal description programming concepts 
springer verlag 
earlier version appeared dec systems research center research report february 
dd dorothy denning peter denning 
certification programs secure information flow 
comm 
acm 
den dorothy denning 
lattice model secure information flow 
comm 
acm 
den dorothy denning 
cryptography data security 
addison wesley reading massachusetts 
gjs james gosling bill joy guy steele 
java language specification 
addison wesley august 
isbn 
susan horwitz alan demers tim teitelbaum 
efficient general iterative algorithm dataflow analysis 
acta informatica 
hr nevin heintze jon riecke 
slam calculus programming secrecy integrity 
proc 
th acm symp 
principles programming languages popl san diego california january 
jl anita jones barbara liskov 
language extension expressing constraints data access 
comm 
acm may 
kw atsushi kanamori daniel weise 
worklist management strategies dataflow analysis 
technical report msr tr microsoft research may 
lam butler lampson 
note confinement problem 
comm 
acm october 
lmm barbara liskov nicholas mathewson andrew myers 
parameterized types java 
software release 
located www pmg lcs mit edu july 
mbl andrew myers joseph bank barbara liskov 
parameterized types java 
proc 
th acm symp 
principles programming languages popl pages paris france january 
ml andrew myers barbara liskov 
decentralized model information flow control 
proc 
th acm symp 
operating system principles sosp pages saint malo france 
ml andrew myers barbara liskov 
complete safe information flow decentralized labels 
proc 
ieee symposium security privacy oakland ca usa may 
catherine judith 
pale mac dac defining new forms access control 
proc 
ieee symposium security privacy pages 
mye andrew myers 
static decentralized information flow control 
phd thesis massachusetts institute technology cambridge ma 
progress 
po jens palsberg peter 
trust calculus 
proc 
nd international symposium static analysis number lecture notes computer science pages 
springer september 
rm jakob rehof torben mogensen 
tractable constraints finite semilattices 
proc 
rd international symposium static analysis number lecture notes computer science pages 
springer verlag september 
rsc joel richardson peter schwarz luis felipe cabrera 
efficient fine grained protection objects 
proceedings acm conference object oriented programming systems languages applications pages vancouver bc canada october 
sto allen stoughton 
access flow protection model integrates access control information flow 
ieee symposium security privacy pages 
ieee computer society press 
sv geoffrey smith dennis volpano 
secure information flow multi threaded imperative language 
proc 
th acm symp 
principles programming languages popl san diego california january 
vol dennis volpano 
provably secure programming languages remote evaluation 
acm sigplan notices january 
vsi dennis volpano geoffrey smith cynthia irvine 
sound type system secure flow analysis 
journal computer security 

