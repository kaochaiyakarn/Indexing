supporting reuse delivering task relevant personalized information ye sra key technology laboratory tokyo japan cs colorado edu technical cognitive social factors inhibit widespread success systematic software reuse 
research primarily concerned cognitive social challenges faced software developers motivate reuse reduce difficulty locating components large reuse repository 
research explored new interaction style software developers reuse repository systems enabled information delivery mechanisms 
passively waiting software developers explore reuse repository explicit queries information delivery autonomously locates presents components developers partially written programs implicit queries 
designed implemented evaluated system called codebroker illustrates different techniques address essential challenges information delivery delivered information relevant task hand personalized background knowledge individual developer 
empirical evaluations codebroker show information delivery effective promoting reuse 

widely believed software reuse improves quality productivity software development systematic reuse met expected success 
reuse program involves essential issues creating maintaining reuse repository requires managerial commitments substantial initial investments financially intellectually enabling software developers build new software systems components reuse repository 
issues deadlock software developers unable reuse investments reuse justified conversely companies unwilling invest reuse software gerhard fischer department computer science university colorado boulder usa gerhard cs colorado edu developers little reuse 
approach break deadlock focus creation reuse repository institute reuse program top enforcing reuse education organizational changes 
second approach foster reuse culture bottom encouraging software developers reuse components repository may high quality initial state evolved participation contribution software developers 
approach requires development environments reduce challenges faced developers reuse software components contribute reuse repositories 
creating reuse conducive development environments poses technical challenges effective tools help software developers locate understand components cognitive social challenges motivates software developers initiate reuse process contribute reuse repository difficulties activities 
research primarily concerned cognitive social challenges reuse 
software developers unable unwilling reuse know existence reusable components know locate understand 
reuse research efforts tried design various mechanisms tools assist software developers locating understanding components 
browsing searching principal mechanisms locate components 
mechanisms software developers initiate operate locating process success reuse greatly affected know reuse repository 
browsing searching little experienced software developers anticipate existence components know reuse repository properly 
large reuse repositories contain components essential widespread success systematic reuse 
reuse repositories grow larger increasingly difficult software developers know anticipate existence components 
propose new mechanism locating components information delivery autonomously locates presents software developers task relevant personalized components 
designed implemented system called codebroker illustrates different techniques delivered components relevant task hand personalized background knowledge individual developer 
empirical evaluations codebroker show information delivery effective promoting reuse 

conceptual framework reuse repository systems subset high functionality applications contain large amount information computer users access 
common problem faced help users software developers case reuse repository systems locate learn apply task relevant information help accomplish current task 
empirical studies shown users typically different levels knowledge 
rectangle represents actual information space ovals represent particular user different levels knowledge information space 
represents elements known easily users consulting help documentation systems 
contains elements users know vaguely 
contains elements users anticipate exist hfa 
portion lies outside actual information space contains elements user believes exist 
existence elements fall area anticipated user 
browsing searching mechanisms require users initiate information locating process help users obtain information users ask help aware existence available information 
long concerned designing useful usable different application domains research efforts enable examine reuse problem multidimensional perspective 
section discuss lessons learned research information retrieval human computer interaction knowledge systems helped create conceptual framework software reuse problem 
cognitive issues reuse implication reuse follows 
software developers know components reuse components easily phase implementing software systems phases requirement analysis system design map concepts problem domains directly reusable components higher abstraction levels 
reuse approach referred opportunistic reuse success relies solely software developers know components 
achieve systematic reuse software developers able reuse components know components know 
incorporate reuse process current development process 
reuse process consists steps locating components reusable task hand comprehending functionality usage components modifying components component completely fits task 
systematic reuse fails place software developers attempt locate components 
phenomenon attempt reuse regarded attitude problem commonly labeled invented syndrome 
empirical studies shown software developers put lot effort locating reusing components knew components reused 
words software developers determined reuse components 
reuse fails software developers unwilling reuse unable due lack appropriate knowledge operation reuse repository components 
invented phenomenon caused cognitive difficulties inherent reuse process 
software developers may sufficient knowledge reuse repository anticipate existence components area reused current task may perceive reuse costs developing scratch may able repository system formulating proper query browsing repository locate components may able understand components 
different levels knowledge high functionality application hfa challenge differentiate task relevant personalized information irrelevant information 
cloud represents information needed inferred task hand fuzzy boundaries system may rudimentary understanding 
black dots relevant task hand delivered 
white dots inside cloud delivered known specific user inferred user model discussed section 
information retrieval reuse research information retrieval focused designing effective indexing retrieval algorithm achieves high recall precision users formulated submitted queries 
various schemas indexing retrieving software components proposed previous reuse research 
schemas important equally important investigate motivates users formulate queries kind knowledge needed users formulate queries 
conceptual gap situation model system model 
needs components derived development activities conceptualized situation model mental model software developers development task 
locate components reuse repository developers convert situation model actual system model includes ways describing structuring components repository 
example software developer may want draw circle know method called java class library search know method java awt package graphics class prefers browsing 
conceptual gap situation system models significant cognitive barrier locating components 
information delivery 
information delivery push technology complementary approach information access pull technology browsing searching 
information access requires users initiate information locating process information delivery infers needs information monitoring low level activities users autonomously locates delivers information inferred needs 
information delivery needed take advantage large number potentially useful components contained see 
big challenge making information delivery systems useful exploit working context distinct information needs user components related task hand known individual user users decontextualized irrelevant information 
example decontextualized information delivery system users choose microsoft office tip day 
retrieval reformulation 
aforementioned conceptual gap information space users unable create defined query attempt locate relevant information 
retrieval process allows users incrementally improve query information space evaluating previous retrieval results 
retrieval reformulation especially important information delivery systems infer information needs 
combining information delivery retrieval information location process collaborative computers users complement strengths 
human computer interaction reuse fundamental objective human computer interaction information rich world provide computer users experiences fit specific background knowledge tasks 
challenge implementing reuse repository systems components available software developers locate right component task relevant right time needed right software developer personalized 
multiple communication channels 
traditionally information needs communicated systems narrow explicit communication channel established users start browsing searching 
software developers computers reuse repository systems explore power implicit communication channels established reuse repository systems integrated development environments 
integration workspace software developers accessible reuse repository systems infer needs software components partially written programs 
inferred needs reuse repository systems deliver task relevant components explicit queries users 
personalized information needs 
different software developers differing knowledge reuse repository reuse repository systems return set components software developers 
personalize located components specific background software developer requires user models represent existing knowledge software developers reuse repository 
user models adaptive adaptable 
user models adaptive system implicitly creates updates observing interactions system users adaptable users explicitly update adding removing information 
knowledge systems reuse influence knowledge systems reuse twofold 
reuse repository systems software developers assistants supplement insufficient knowledge components 
second knowledge approaches infer needs components low level user activities implicit communication channel 
knowledge augmentation 
cognitive theory revealed cognitive activity primarily determined surrounding environment includes information workspace memory human beings 
subsequent problem solving actions chosen incorporating new information developer memory triggered cues workspace 
explains software developers differing knowledge choose different approaches develop task 
task software developer recalls certain component reused task may take bottom approach design program centered component developer know recall component may take top approach decompose task 
information delivery unknown components reused way similar known components 
timely delivered components cues workspace part immediately accessible information workspace regarded results recall automated computers motivate software developers take design approach favors reuse 
information delivery mechanism components reuse repository known may possibly actively contribute software development process 
finding task relevant components similarity analysis 
basic approaches infer high level goals users low level activities find task relevant information help accomplish task plan recognition similarity analysis 
due difficulty recognizing plans unfinished program similarity analysis approach 
logic assumption similarity analysis current working situation defined self revealing information workspace similar previous situation information highly possible information needed current situation software developers meaningful comments identifier names communicate concept functional purpose programs doc comments java specifically introduced purpose 
self revealing information includes signatures modules define types input output data 
relevance component task hand determined conceptual similarity comments identifiers program developed textual documents components repository signature compatibility signatures programs development components 
latent semantic analysis lsa 
lsa free text indexing retrieval technique takes semantics consideration 
determine conceptual similarity task hand components repository 
large volume training documents specific domain lsa creates domain specific semantic space words capture pattern associative relationship 
text documents queries represented vectors semantic space words contained similarity query document determined distance respective vectors 
semantic space created lsa similar knowledge net human acquires words reading potential reduce conceptual gap situation model system model locating components 

delivering task relevant personalized components conceptual framework designed implemented evaluated system called codebroker delivers task relevant personalized components 
supports java developers reusing components leaving development environment emacs augmented rci display reusable component information display lower buffer task relevant personalized components autonomously shown 
overview codebroker system codebroker consists interface agent backend search engine 
running continuously background process emacs interface agent infers extracts reuse queries monitoring development activities 
queries passed search engine retrieves matching components 
retrieved components delivered interface agent removed components contained discourse models user models 
discourse models created software developers previous interactions system include components developers indicated interest current development session 
user models created updated system software developers contain components known individual software developers 
example codebroker screen image shows developer codebroker sees 
developer wants write method creates random number integers describes task doc comment signature cursor components delivered rci display lower buffer 
delivered components perfect match reused immediately 
left click system updating right click system architecture codebroker components match queries extracted doc comments signatures delivered filtered discourse models user models 
discourse models see section remove irrelevant components black dots user models see section remove known components unshaded dots 
discourse models user models updated users skip components menu 
user models automatically updated system detects reuse component workspace 
users want know component go java documentation clicking delivered component 
component repository contains indexes created codebroker standard java documentation javadoc generates java source programs links java documentation system 
codebroker delivers components doc comment signature definition entered 
example figures developer wants create random number integers writes doc comment 
soon rightmost signaling doc comment entered contents doc comment extracted query components repository match shown immediately 
random number generators operate different data types software developer may want find takes integers input 
developer continue programming defining signature method 
soon signature definition finished left bracket cursor codebroker extracts signature combined preceding doc comment query retrieve matching components 
component exactly developer wants reused immediately 
codebroker presents information different layers abstraction 
layer rci display number customized components shown task relevance component accompanied rank relevance relevance value name synopsis 
reduce intrusiveness users required interact system interested delivered components 
comment create random number limits signature int int int inferred queries user model discourse model component repository user updating interested certain components rci display trigger presentation second layer information mouse movements 
mouse cursor moved component name signature component shown mini buffer line emacs mouse cursor synopsis words contributing relevance component task hand shown mini buffer reveal component retrieved help software developers refine queries necessary 
third layer information complete description component shown external html browser 
component name brings full javadoc documentation component 
software developer feels irrelevant components delivered rci display activating skip components menu associated component filter 
filtering applied levels granularity filtering component choosing item menu filtering components class choosing second item filtering components package choosing third item 
commands exist chosen item 
command buffer removes chosen item rci display buffer second command session removes chosen item buffer adds discourse model see section third command sessions removes chosen item buffer adds user model see section 
delivering task relevant components codebroker explores multiple communication channels deliver task relevant components 
implicit communication channel established interface agent autonomously extracts reuse queries partially written programs 
uses discourse models created software developers explicit communication channel capture larger context development task 
extracting queries autonomously reuse queries extracted doc comments signatures 
software program aspects concept code constraint 
concept program functional purpose code embodiment concept constraint environment runs 
characterization similar model tracz uses concept content context describe component 
important concepts program contained informal information structure 
informal information includes structural indentation comments identifier names important beacons understanding programs :10.1.1.17.1362
important constraint program type compatibility manifested signature 
reusable component easily integrated signature compatible environment going incorporated 
assumption similarity analysis component highly reused shows conceptual similarity constraint compatibility task hand 
conceptual similarity exists textual document component doc comment extracted emacs determined lsa 
constraint compatibility signature compatibility exists signature component extracted signature determined process signature matching 
supporting retrieval reformulation doc comments signatures may describe task hand completely precisely 
furthermore current information retrieval algorithms including lsa unable retrieve task relevant information task relevant information 
codebroker unavoidably delivers irrelevant components misses relevant components 
reformulation interface codebroker enables software developers incrementally reformulate reuse queries studied delivered components locate want 
retrieval reformulation interface retrieval reformulation interface represents explicit communication channel activated users refine queries limit range retrieval 
reuse repositories organized hierarchically 
example components java placed different packages classes application domains 
development tasks involve part repository software developers interested components irrelevant packages classes 
retrieval reformulation interface exclude components certain packages classes adding names filtered components field limit search packages classes interest adding names interested components field 
interface traditional search interface software developers know structure repository may able specify interested parts searching attempt 
delivered components familiarize repository enable time formulate reuse queries closer system model 
creating discourse models doc comments signatures describe immediate programming task module software developer going develop 
module part development task functionality module deeply connected modules developed far 
software developers interactions system development previous modules provide discourse interpret current development activity limit applicability information current situation 
similar conversation structure natural language new utterance interpreted listener light conversational discourse defined previous interactions 
interaction history software developer codebroker development session captured discourse model filter improve task relevance delivered components 
development session defined software developer starts ends session activating deactivating codebroker system respectively 
example discourse model development session starts empty discourse model incrementally updated software developer interacts system 
discourse models codebroker contain components interest software developers current development session easier users identify fits 
shows example discourse model extracted experiments subject asked create program simulates process dealing cards randomly 
codebroker responded initial doc comments components package java util zip class java awt documents contained words appeared doc comments 
subject knew need components package class task right clicked components launch skip components menu add package class discourse model 
remaining interactions system development session components package class delivered subject 
discourse model filtered components field retrieval reformulation interface remove irrelevant components specified software developers 
current delivery deliveries development session current delivery 
design meant give software developers different levels control scope component location needs 
delivering personalized components delivering component known software developer desirable 
software developer different knowledge reuse repository system needs personalize delivery developer unique needs 
example user model user model lisp list format package class method time time time time field indicates developer reused component 
time field means component added user 
empty class field method field means package class known developer 
codebroker uses user models represent software developers knowledge reuse repository 
user models contain known vaguely known components 
known components removed deliveries software developers retrieve components automatic delivery save locating time 
contents user models collaboratively maintained system users 
codebroker creates initial user model analyzing java programs software developer created far 
software developers explicitly adapt user models 
known component delivered want component delivered skip components menu add component class package user models 
user added components time field user models belong 
codebroker implicitly updates user models observes software developers invoke method component programming 
uses heuristic rules determine method component invoked 
method invocation java followed left parenthesis 
left parenthesis entered editor codebroker excluded invocation cases java statement scans back extract name method 
method name may unique java codebroker needs determine class package add user model 
method instance method codebroker determines class looking declaration variable precedes method 
method class method class included method invocation statement codebroker looks imported classes program find class method 
class unique repository codebroker picks package imported program java import statement 
method components implicitly added user models codebroker software developer may know entire class method class reused 
components added user models system time time component detected invoked editor 
components times number customizable considered known included components fewer times considered vaguely known 

evaluation understand information delivery support component reuse conducted empirical evaluations codebroker software developers 
reuse repository evaluation experiments included classes methods java core library library created objectspace 
semantic space created lsa trained documents sources linux line manuals programming textbooks java language specification virtual machine specification java class libraries 
total documents different terms 
recall precision information retrieval systems conventionally evaluated recall precision 
recall proportion relevant material retrieved answers search query precision proportion retrieved material relevant 
shows recall precision curve results executing queries codebroker 
half queries created half collected empirical experiments frequently asked questions java related newsgroups 
data shown lower reported evaluations reuse repository systems 
retrieval systems compared precision recall recall precision curve queries criteria relevance 
criteria relevance strict considered relevant components reused implementing tasks described queries 
structure experiments subjects extensive software development experience voluntarily participated evaluation experiments 
expertise java varied medium expert 
experiments adopted multi project variation approach subject conducted different projects replicated project approach project conducted subjects 
twelve experiments conducted 
experiment subject asked implement predetermined small task 
task implemented different combinations components repository 
sample task traditionally chinese write numbers comma inserted fourth number right 
example written 
implement program transforms chinese writing format western format 
experiment codebroker created initial user models subjects analyzing java programs developed 
subjects instructed follow normal practice experiments 
encouraged take advantage components delivered codebroker forced 
normal ways locating components books java documentation system 
subjects asked describe implementation plans task started programming 
asked think aloud experiments videotaped experiments 
analyses automatically logged data transcribed videotapes interviews asked questions regarding experience codebroker 
findings experiments table shows results experiments 
subjects reused delivered components experiments 
programs created subjects distinct components delivered codebroker 
reusing unanticipated components 
reused components delivered subjects anticipate existence see th column table 
words components reused support codebroker subjects created solutions 
subjects commented interviews looked roll function done lot stuff hand 
just showed list saw calendar provided roll feature allowed task know thing 
wasted time design thing reducing locating time 
subjects anticipated existence components see th th columns table known names functionality reused 
reused components manage locate 
subject experiment 
table results experiments total 
distinct components reused 
distinct components reused deliveries breakdown reused components deliveries unanticipated anticipated unknown vaguely known 
reused components triggered deliveries sum interviews subjects acknowledged codebroker locating easier faster 
start browsing go packages go index methods 
just go short list rci display find click key benefit codebroker gives methods class java documentation system find class go class 
index methods hard find java documentation system snowball effects deliveries 
column table shows number components delivered triggered reused deliveries 
cases subjects wanted reuse delivered component requires supplementary components find components browsing 
subjects known triggered components deliveries motivated software developers reuse 
knowledge augmentation 
information delivery encourages software developers reuse components augments abilities constructing implementations centered delivered components known 
observation best illustrated different approaches taken subjects implemented sample task described section 
describing implementation plan anticipated methods java text class help read numbers chinese format write western format know exactly methods functionality 
result successfully constructed program concisely methods located codebroker limited search java text package retrieval reformulation interface 
subject know existence java text package described implementation plan going parse number take commas insert commas 
started programming noticed delivered component java text class changed original plan came program similar 
subject know java text class described plan original 
component java text class delivered comments stuck original plan constructed different program 
experiments observed occasions similar example delivered components stimulated subjects change original plans new implementation approach reused delivered components 
roles discourse models 
discourse models improved delivered components created 
experiments subjects created discourse models removed retrieved components deliveries 
removed components irrelevant task 
roles user models 
experiments yield strong conclusive data regarding roles user models 
retrieved components filtered user models 
due reasons initial user models complete subjects give java programs written observe effectiveness delivering unknown components subjects assigned tasks involved part repository know consequently delivered components unknown 
user models helped needed reduce number irrelevant components delivered careful examination components removed user models showed reused tasks 
summary 
experiments shown information delivery promote reuse supporting reuse unanticipated components reducing cost locating components augmenting software developers capability constructing new programs components 
subjects appreciated support provided codebroker gave high ratings terms usefulness shown table scale totally useless extremely useful 
table subjective ratings usefulness codebroker subject rating 
discussions success information delivery system hinges cues obtain users working environments infer needs new information retrieve information 
currently performance codebroker affected quality doc comments documents components 
lsa reduce conceptual gap situation model system model fine tuned domain specific semantic spaces results far satisfying see recall precision curve 
investigating sophisticated mechanisms retrieve deliver components cues software development environments 
example software developer may write program known design pattern framework places extra constraints type components reused 
constraints utilized improve task relevance delivered components 
reuse takes place different phases software development 
granularity reusable components varies different phases phases software developers able locate needed components 
codebroker proof concept system investigates effectiveness component delivery implementation level 
important enhances productivity programmers 
opportunity reuse depends software developers know repository designing implementing software 
delivering task relevant personalized reuse information increase reuse opportunity limited knowledge software developers 
underlying design principles codebroker extended phases software development similar support provided 
software development knowledge intensive activity reusable components portion knowledge needed 
information delivery mechanism applicable software components types software development knowledge phases software engineering process 
careful extrapolating findings experiments codebroker repository consisted components high quality carefully documented highly trusted software developers 
subjects motivated learn reuse relevant components delivered system 
need experiments investigate holds repositories come respected source 
answer question need investigate social aspects software reuse software developers trust component involve evolution reuse repository complement replace dedicated team component developers 

related previous research reuse repositories focused indexing retrieval mechanisms 
different mechanisms free text retrieval multi facets classification semantic networks spreading activation behavior sampling signature matching specification matching proposed 
codebroker combines free text retrieval lsa signature matching retrieval mechanism 
parts codebroker similar systems identifier names comments cluster components similar functionality 
clusters help software developers choose reusable components comprehend existing software systems 
clich programming environment implemented extension emacs 
knowledge base clich programmers reuse 
helps programmers knew clich programmers refer name codebroker tries give programmers access unknown components 
wren component development environment supports software developers locating evaluating incorporating components component distribution sites 
stresses importance making information contained components 
automated location support provided wren 
reuse repository systems support information delivery autonomous interface agents proactively retrieve deliver information predicting information needs users 
remembrance agent continually presents user personal archive list documents relevant current document written 
letizia assists users browsing www suggesting displaying relevant web pages user interests 
observing programmer java programming expert finder refer programmer expert helpers displayed significant experience area programmer troubled 
information delivery explored research prototypes software development environments 
drummond add browsing systems agent infers search goal software developers observing browsing actions delivers components closely match inferred goal 
argo design environment equipped computer critics deliver general software design knowledge software developers reflect current design 

locating components large reuse repository step success software reuse 
information delivery holds potential making unanticipated components easily accessible software developers reducing cost software reuse motivating software developers take design approach favors reuse augmenting knowledge components 
challenge implementing information delivery capture workspace information possible locate task relevant personalized information 
research tried address challenge exploring doc comments signatures programs software developers working discourse models describe partially goal development task user models represent background knowledge developers 
demonstrated feasibility approach implemented system 
empirical evaluations system shown success promoting software reuse controlled experiments 
currently conducting experiments natural settings understanding benefits problems associated approach 
unique contribution research explores new style human computer collaboration software reuse transcending traditional interface reuse repository systems rely explicit communication channel established software developers initiate reuse process 
information delivery mechanism meant replace existing browsing searching methods complement proven useful cases software developers anticipate existence components know access browsing searching 

acknowledgments authors members center lifelong learning design university colorado major contributions conceptual frameworks described 
research supported national science foundation rec sra key technology laboratory tokyo japan coleman family foundation san jose ca 

lethbridge extracting concepts file names new file clustering criterion proceedings th icse kyoto japan 
basili briand melo reuse influences productivity object oriented systems 
commun 
acm 

basili selby experimentation software engineering 
ieee trans 
software engineering 
se 
freeze griss hypertext selecting reusable software components proceedings hypertext san antonio tx 
devanbu knowledge software information system 
commun 
acm 

drummond holte learning agent assists browsing software libraries 
ieee trans 
software engineering 

organizational factors reuse 
ieee software 

fischer cognitive view reuse redesign 
ieee software 

fischer user modeling human computer interaction 
user modeling user adapted interaction 

fischer seeding evolutionary growth reseeding incremental development collaborative design environments coordination theory collaboration technology olson malone smith 
eds lawrence erlbaum mahwah nj 
fischer henninger redmiles cognitive tools locating comprehending software objects reuse proceedings th icse austin tx 
fischer embedding critics design environments 
knowledge engineering review journal 

fischer ye personalizing delivered information software reuse environment proceedings th international conference user modeling germany 
frakes fox sixteen questions software reuse 
commun 
acm 

frakes fox quality improvement software reuse failure modes model 
ieee trans 
software engineering 

frakes pole empirical study representation methods reusable software components 
ieee trans 
software engineering 

gamma design patterns elements reusable object oriented systems 
addison wesley reading ma 
hall generalized behavior retrieval proceedings th icse baltimore md 
henninger evolutionary approach constructing effective software reuse repositories 
acm trans 
software engineering methodology 

experiences software reuse project 
journal systems software 

kintsch comprehension paradigm cognition 
cambridge university press cambridge uk 
krueger software reuse 
acm computing surveys 

er rosenblum wren environment component development proceedings joint esec fse vienna austria 
landauer dumais solution plato problem latent semantic analysis theory acquisition induction representation knowledge 
psychological review 

lange moher strategies reuse object oriented programming environment proceedings human factors computing systems austin tx 
lieberman autonomous interface agents proceedings human factors computing systems ga 
maarek berry kaiser information retrieval approach automatically constructing software libraries 
ieee trans 
software engineering 

maletic marcus supporting program comprehension semantic structural information proceedings rd icse toronto canada 
notkin assessing software libraries browsing similar classes functions relationships proceedings st icse los angeles ca 
mili mili storing retrieving software components refinement system 
ieee trans 
software engineering 

nardi miller wright collaborative programmable intelligent agents 
commun 
acm 

prieto diaz implementing faceted classification software reuse 
commun 
acm 

raymond young cathedral bazaar linux open source accidental revolutionary 
reilly sebastopol ca 
rhodes maes just time information retrieval agents 
ibm systems journal 

rich waters programmer apprentice 
addison wesley reading ma 
robbins redmiles software architecture critics argo design environment 
knowledge systems 

salton mcgill modern information retrieval 
mcgraw hill new york 
sen role opportunism software design reuse process 
ieee trans 
software engineering 

simon sciences artificial third edition 
mit press cambridge ma 
soloway ehrlich empirical studies programming knowledge 
ieee trans 
software engineering 
se 
tracz cons software reuse proceedings rd annual workshop software reuse syracuse ny 
visser plan design opportunistic deviations specification 
international journal man machine studies 

agents expertise location proceedings aaai spring symposium intelligent agents cyberspace stanford ca 
williams rabbit run 
international journal man machine studies 

ye supporting component software development active component repository systems ph dissertation department computer science university colorado boulder ye fischer reeves integrating active information delivery reuse repository systems proceedings fse san diego ca 
wing signature matching tool software libraries 
acm trans 
software engineering methodology 

