socio technical interaction networks free open source software development processes walt scacchi institute software research school information computer science university california irvine irvine ca usa uci edu chapter submitted software process silvia acu eds world scientific press chapter explores patterns social technological interaction emerge free open source software development ossd projects different research development communities 
ossd relatively new way building deploying large software systems global basis differs interesting ways principles practices traditionally advocated software engineering 
hundreds oss systems thousands millions users oss systems entail hundreds thousands millions lines source code 
going ossd processes build sustain projects different 
significant features ossd formation enactment complex software development processes performed loosely coordinated software developers contributors 
people may volunteer time skill effort may personal discretion assigned scheduled 
developers generally provide computing resources bring software development tools 
similarly oss developers software projects typically corporate owner management staff organize direct monitor improve software development processes put practice projects 
successful ossd projects software development processes possible regularly employed scheduled software development staff explicit regime software engineering project management 
software developers participate ossd projects 
large ossd projects sustained 
large ossd projects coordinated controlled managed traditional project management team 
answers questions change time 
core research questions addressed chapter 
socio technical interaction networks emerging conceptual framework identifying organizing comparatively analyzing patterns social interaction system development configuration components constitute information system kling 
provide scheme examining networks people interrelated social technical processes arise create complex information systems products collectively constitute ongoing ossd projects 
may seen conceptual outgrowth historically called sociotechnical systems sts scacchi 
sts perspective envisions world complex organizations routinely employ technicians engineers develop systems users success developing system depends participation sustained involvement system users 
people issues design deployment evolution sts ignored systems problematic unsatisfactory outright failures 
understanding pathology intervening prevent possible sts practices incorporated system development processes 
historically sts design approaches advocated user involvement participation design deployment information systems 
consequently sts design earliest approaches system development sought engage balance interests people developers users products systems documentation processes system design usage manner focused participation involvement system stakeholders 
build concepts sts design drawing attention web relationships people course system development resources engage products software components development artifacts documents create manipulate sustain 
ossd projects web manifest articulated world wide web associated systems creating updating web observed navigated empirically studied 
introducing explaining appear different ossd projects part purpose chapter 
turn conceptual lens observe focus software developers participate ossd projects sustains interest communities participation community gives rise sociotechnical conditions serve coordinate control ossd processes practices evolve time 
chapter seeks explore develop answers questions ossd examining patterns networks interactions people products processes growing base empirical studies ossd projects 
exhibits variety different ossd projects empirically ground analysis findings chapter 
understanding oss development practices processes growing widespread interest understanding practices processes oss development 
prior model globally accepted framework defines oss developed practice mockus scacchi :10.1.1.117.5406
starting point investigate oss practices different communities 
ossd projects empirically studied different diverse oss communities 
centered development software internet web infrastructure computer games electronic business commerce applications academic support software software engineering design systems ray deep space astronomy 
examine ossd practices single system linux kernel may interesting unrepresentative ossd projects related systems just community internet infrastructure focus identify general oss practices shaped diverse communities 
oss development practices described empirically observed different projects communities 
data exhibits form screenshots displaying web site contents projects different oss project communities exemplify practices comparable data different selection oss projects serve equally 
studies date areas formation activity apparent ossd projects communities 
include participating joining contributing oss projects forming alliances building communities practice linked artifacts coordinating cooperating controlling ossd projects evolving social technical systems oss 
briefly described turn construed independent important 
furthermore appears occur concurrent strictly ordered traditional life cycle model partially ordered spiral model 
participating joining contributing oss projects complex motivations oss developers willing allocate time skill effort joining oss project von krogh 
may simply see effort fun personally rewarding provides venue exercise improve technical competence manner may possible current job line 
people participate contribute join oss projects tend act ways building trust reputation stewart achieving fame creative fischer giving generous time expertise source code valued traits 
case oss software engineering design systems participating project viable way maintain improve software development skills indicated exhibit 
central node social network software developers interconnects multiple oss projects way accumulate social capital recognition peers 
survey reports oss developers participate projects order participate oss projects 
addition participation oss projects core developer realize financial rewards terms higher salaries conventional software development jobs lerner 
enables merger independent oss systems larger composite ones gain critical mass core developers grow substantially attract larger user developer communities madey scacchi 
people participate oss projects roles 
provide common classification hierarchy roles people take common tasks perform participating oss project shown 
typically appears people join project specialize role multiple roles find personally comfortable intrinsically motivating von krogh 
contrast traditional software development projects explicit assignment developers roles individual ossd projects post guidelines help wanted roles potential contributors greatest need 
common oss projects find users contributors developers developers acting users mockus scacchi von hippel :10.1.1.117.5406
oss developers users software systems build may occupational incentive vested interest making sure systems really useful 
vast majority participants probably simply prefer users oss systems usage motivates act sort contribution 
users sufficient technical skills may way roles eventually core developer suggested 
consequence participants oss project participate different roles technical social networks smith preece course developing evolving oss systems 
making contributions prerequisite advancing technically socially community recognized community members having substantive contributions fielding kim 
commonly oss project participants contribute different types software representations content source code bug reports design diagrams execution scripts code reviews test case data web pages email comments online chat web sites oss projects join 
contribution authoring hypertext linking needed posting uploading different types content helps constitute ecology erickson software informalisms scacchi specific oss project individual content types widely oss projects :10.1.1.117.5406:10.1.1.117.5406
similarly particular mix software informalisms employed participants oss project articulates information infrastructure star framing solving problems arise ongoing development deployment support oss system center project 
administrators open software community web sites source code repositories serve choices information post site post post smith 
similarly may choose create site map constitutes classification site domain content community structure boundaries 
frequently participants oss projects engage online discussion forums threaded email messages central way observe participate contribute public discussions topics interest community participants yamauchi 
people engage private online offline discussions get posted publicly disclosed due perceived sensitive content 
central development oss projects software extension mechanisms oss software copyright licenses insure freedom openness 
extension mechanisms enable modification functionality architecture software systems intra inter application scripting external module plug architectures 
copyright licenses derived gnu public license gpl attached project developed software accessed examined debated modified redistributed loss rights 
public software licenses stand contrast restricted access closed source software systems user license agreements 
communities examined participants choose occasion author publish technical reports scholarly research papers software development efforts publicly available subsequent examination review secondary analysis 
forming alliances building community participation artifacts tools gathering individual oss developers give rise persistent project team self sustaining community 
choices developers participation contribution ossd project find individuals choose participate contribute project 
software developers find connect ossd web sites online discourse threaded email discussions monge find share technical competencies values beliefs common crowston espinosa elliott 
manifests emergence occupational community oss developers elliott 
sharing beliefs values communications artifacts tools oss developers enables cooperation provides basis shared experience learning cf 
brown fischer george 
oss developers participate contribute choice assignment find conventional software development provides experience working assigned development effort find share technical approaches skills competencies beliefs values 
result oss developers find get people share values beliefs common far software development 
values beliefs associated free software open source software signaled institutionalized choice intellectual property licenses gpl ossd projects adopt advocate 
licenses turn help establish norms developing free software open source software alliance ossd projects licenses 
half oss projects registered net web portal employ gnu general public license gpl free freedom software 
gpl seeks preserve reiterate beliefs practices sharing examining modifying redistributing oss systems assets property rights collective freedom 
large ossd project seek protect collective free open intellectual property rights formation legally constituted non profit organizations foundations free software foundation apache software foundation gnome foundation 
oss projects assets created free property adopted variants relax strengthen rights conditions laid gpl 
dozens licenses exist new ones continuing appear cf 
www opensource org 
example variant appears exhibit 
ossd projects seek engage receive corporate sponsorship possible corporate proprietary intellectual property variation non gpl open source license employed way signal business friendly ossd project encourage participation developers want business friendly career enhancing project sharma 
developing oss systems community project team building process institutionalized community sharma smith preece software informalisms artifacts tools 
downloading installing oss systems acquired oss web sites part community building process kim 
adoption oss project web sites community wide practice share oss project assets 
web sites built oss web site content management systems php host project contents served oss web servers apache database systems mysql application servers jboss increasingly accessed oss web browsers mozilla 
furthermore ongoing oss projects may employ dozens oss development tools standalone systems software version control system cvs integrated development environments eclipse sub system components oss application development 
projects similarly employ asynchronous systems project communications persistent searchable traceable public globally accessible 
oss systems hyperlinked artifacts tools project web sites serve venues building relationships trust sharing learning 
developers madey act community forming hubs enable independent small oss projects come larger social network critical mass needed independent systems merged experience growth size functionality user base 
trend traditional closed source software projects unclear 
ossd web sites serve hubs centralize attention happening development focal oss system status participants contributors discourse pending needs furthermore nature web sites accessible outside corporate firewall generally global reach accessibility 
means potential exists contributors come multiple remote sites geographic dispersion different times multiple nations representing interests multiple cultures ethnicity 
conditions point new kinds requirements example community building requirements community software requirements community information sharing system web site interlinked communication channels email forums chat requirements 
requirements may entail functional non functional requirements typically expressed open software informalisms formal notations system mathematical logic 
community building alliance forming participatory contributing essential recurring activities enable ossd projects persist central corporate authority 
depicts example social network oss developers oss projects interconnected developers madey 
linking people systems projects shared artifacts sustained online discourse enables sustained socio technical community information infrastructure star network alliances kling monge emerge 
cooperating coordinating controlling oss projects getting software developers desire cooperate challenges coordinating controlling 
conflicts arise ossd elliott elliott jensen traditional software development projects sawyer finding ways resolve conflicts part cost terms social capital incurred oss developers development progress occur 
minimizing occurrence duration invested effort conflicts quickly goal core developers ossd project 
similarly finding tools project organizational forms minimize mitigate recurring types conflicts goal experienced core developers 
software version control tools concurrent versions system cvs oss system document base fogel widely adopted oss projects 
tools cvs centralized mechanism coordinating synchronizing oss development venue mediating control software enhancements extensions upgrades checked available check decentralized community part publicly released version 
software version control part software configuration management activity recurring situation requires coordination enables stabilization synchronization dispersed somewhat invisible development grinter 
coordination required due potential tension centralized decisionmaking authority project core developers decentralized activity project contributors autonomously contributed software source code content updates overlap conflict generate unwanted sideeffects grinter 
practiced way manage track control desired undesired dependencies source code desouza surrounding informalisms scacchi :10.1.1.117.5406:10.1.1.117.5406
tools cvs serve help manage mitigate conflicts gets modify far changes updates get included software release project 
cvs administrator configuration control policies provide ultimate authority control mediated systems 
project team cvs repository administrator decide checked able check new modified software source code content 
policies explicit voting scheme fielding left informal implicit subject negotiation 
situation version updates coordinated order new system build release take place 
subsequently developers want submit updates community shared repository rely extensively online discussions supported lean media threaded email messages posted web site yamauchi onerous system configuration control boards 
software version control system build release coordination control process mediated joint versioning system building communication tools 
ossd projects teams take organizational form layered fielding kim operating dynamically organized virtual enterprise crowston noll 
layered hierarchical organizational form concentrates certain kinds authority trust respect experience accomplishment team 
imply single authority decision making may shared core developers act peers top layer 
illustrates form common oss projects 
form software development appears logically centralized physically distributed autonomous decentralized manner noll 
simply cathedral bazaar terms describe alternative ways organizing software development projects 
layered operates virtual enterprise relies virtual project management coordinate control build assure quality oss development activities 
may invite encourage system contributors come forward take shared individual responsibility serve benefit oss collective user developers 
requires multiple people act roles team leader subsystem manager system module owner manner may short term longterm skill accomplishments availability belief community development 
implied requirement virtual project management seen text appearing exhibit 
project participants higher greater perceived authority lower 
relationships effective long agrees makeup legitimacy 
administrative coordination conflicts resolved may splitting forking new system version attendant need henceforth take responsibility maintaining version reducing stake ongoing project simply conceding position conflict 
virtual project management exists oss communities enable control community decision making web site administration cvs repository administration effective manner 
similarly exists sustain privately owned resources web servers network access site administrator labor skill effort available shared collective reuse community 
traditional software project management stresses planning control activities 
contrast shah observe source code institution collective action intentionally unintentionally realizes mode social control people develop 
case oss development observation suggest source code controls constrains user developer interaction code software development tools web sites project assets accessible download controls constrains facilitates developer interaction evolving oss system code 
cvs tool enables form social control 
fact source code systems available free open source manner offers opportunity examine revise redistribute patterns social control interaction ways favor form project organization system configuration control user developer interaction 
ability eyes developers review look source code system build preliminary test results responses bug reports realizes peer review potential embarrassment form indirect social control timely actions contributing oss developers 
ossd allows dimension open manipulation core developers encourage certain patterns software development social control discourage may advance collective needs ossd project participants 
subsequently ossd projects managed coordinated controlled roles traditional software project managers 
evolving socio technical systems oss software maintenance form addition subtraction system functionality debugging restructuring tuning conversion migration platforms widespread recurring process oss development communities 
surprising maintenance generally viewed major cost activity associated software system life cycle 
traditional characterization software maintenance justice observed occur different oss communities 
may better characterize evolutionary dynamic oss 
enabled sharing examination modification redistribution concepts techniques appeared closed source systems research textbook publications conferences interaction discourse developers users multiple oss projects 
continually emerging source improvement oss functionality quality collective approach organizational learning oss projects brown fischer george 
largest popular oss systems linux kernel godfrey schach gnu linux distributions gonzalez barahona gnome user interface koch growing exponential rate internal architectural complexity schach 
hand vast majority oss projects small short lived exhibit little growth involve effort developer madey 
way trend derived samples oss projects registered sourceforge net web portal reveals power law distribution common large selforganizing systems 
means large projects critical mass core oss developers mockus act share project leadership roles fielding surrounded dozens hundreds contributors hundreds millions users 
oss projects attain sustain critical mass inevitably garner attention software downloads usage 
hand vast majority oss projects small lacking critical mass thrive grow 
layered arise oss projects tend embrace incremental innovations evolutionary mutations existing software code base radical innovations 
radical change involves exploration adoption untried sufficiently different system functionality architecture development methods 
radical software system changes advocated minority code contributors challenge status quo core developers 
success advocacy usually implies creating maintaining separate version system potential loss critical mass oss developers 
incremental mutations tend win time 
oss systems evolve minor improvements mutations expressed recombined redistributed releases short duration life cycles 
users oss systems act developers maintainers continually produce mutations 
mutations appear initially daily system builds 
modifications updates expressed tentative alpha beta release candidate stable release versions may survive redistribution review subsequently recombined re expressed new mutations producing new stable release version 
result mutations articulate adapt oss system developer users want course evolving continually reinventing system 
closed source software systems thought dead useful product life maintenance period may redistribution opening source code 
may succeed application domains devoted community enthusiastic user developers willing invest time skill keep cultural heritage experience systems alive 
exhibit provides example vintage arcade games numbering thousands evolved oss systems 
oss systems evolve development communities 
means evolution depends evolution 
said differently oss project small number developers typically produce sustain viable system team reaches larger critical mass core developers 
critical mass achieved may possible oss system grow size complexity sustained exponential rate laws software evolution held decades lehman scacchi 
furthermore communities evolve systems mutually dependent manner elliott scacchi system architectures functionality grow discontinuous jumps independent oss projects decide join forces godfrey scacchi :10.1.1.117.5406
trend traditional closed source software projects unclear 
findings trends indicate appears practice oss development processes different processes traditionally advocated software engineering 
free open source software development practices giving rise new view complex software systems constructed deployed evolved global basis 
oss development adhere traditional rationality legacy software engineering life cycle models prescriptive standards 
oss development inherently complex web socio technical processes development situations dynamically emerging interaction networks 
examines analyzes results empirical studies outline situate oss systems developed different communities 
particular examples drawn different oss project communities reveal processes practices development propagation oss technology intertwined mutually situated benefit motivated contribute 
research development conceptual lens observing analyzing ossd processes practices focus attention topics 
focus software process research evolving include attention sociotechnical processes people resources organizational forms institutional rules embed surround oss system interact interface 
focus draws attention web socio technical relations people particular settings situated configuration globally available web artifacts locally available resources skills time effort computing collectively brought alignment order useful oss system continuously re designed meet evolving user needs 
second participation oss system design assertion system requirements design decision making determined effort willingness prior public experience similar situations assignment management administrative authority 
similarly openness source code content oss system encourages enables forms transparency access ability customize localize system design best address user developer needs particular site installation 
third people participate development deployment evolution oss voluntary self selected basis 
people quickly recognize need find ways cooperate collaborate order minimize individual effort conflict maximizing collective accomplishment 
easily observed online web communications shared source code files directories application invocation system configuration scripts web pages embedded hyperlinks textual artifacts people free open source software project communities employ media content hyperlinked context system design evolution 
continually emerging need minimize mitigate conflicts arise ossd projects due absence traditional project management regime act resolve software development conflicts 
result ossd projects adapted evolved tools interlinked artifacts organizational forms effectively create project management capability socio technical control framework traditional project managers 
fourth world ossd different interesting ways means compared world software engineering corporate centralized enterprise settings 
knowing understanding provide sufficient basis assuming understanding worlds develop complex software systems artifacts development processes may may understood 
analysis socio technical interaction networks facilitate constrain ossd processes practices points new concepts situations events data understanding large software systems developed deployed evolved ossd communities practice 
merits study articulation refinement 
preceding research directions collectively draw attention matters software development processes traditionally addressed 
software process research employ web analyses kling kling ethnographic methods elliott scacchi sommerville contemporary socio technical system design techniques scacchi study model people accomplish software development processes practices organizational setting oss systems artifacts tools people circumstances hand :10.1.1.117.5406
understanding oss system interaction network need include understanding workplace inter organizational networks social worlds cultural milieu embed situate people interact oss systems hand course workflows 
similarly basic need discover new ways means enable traditional software developers understand users ossd practices empower sustain traditional oss developers collective effort continuously improve software development skills practices processes 
chapter represents step direction 
research described report supported itr itr itr itr national science foundation 
endorsement implied 
mark ackerman university michigan ann arbor les gasser university illinois urbana champaign john noll santa clara university margaret elliott chris jensen uci institute software research collaborators research described chapter 
ljungberg power gifts organizing social relationships open source communities info 
systems 
brown duguid organizational learning communities practice unified view working learning innovation 
organization science 
evidences evolution os projects analyses proc 
rd workshop open source software engineering portland may 
crowston open source software projects virtual organizations competency software development iee proceedings software 
de souza redmiles mark penix management interdependencies collaborative software development proc 
intern 
symp 
empirical software engineering ieee computer society 
elliott scacchi free software developers occupational community resolving conflicts fostering collaboration proc 
acm intern 
conf 
supporting group sanibel island fl november 
elliott scacchi free software development cooperation conflict virtual organizational culture appear koch ed free open source software development idea publishing 
release management open source projects proc 
rd 
workshop open source software engineering th 
intern 
conf 
software engineering portland may 
erickson making sense computer mediated communication cmc cmc systems genre ecologies proc 
rd hawaii intern 
conf 
systems sciences ieee press january 
espinosa kraut slaughter lerch mockus shared mental models familiarity coordination multi method study distributed software teams 
intern 
conf 
information systems barcelona spain december 
fielding shared leadership apache project 
communications acm 
fischer external shareable artifacts opportunities social creativity communities interest gero maher eds proc 
computational cognitive models creative design key centre design computing cognition university sydney island australia december 
fogel open source development cvs press scottsdale az 
meanings open source ieee software january february 
george kling learning context extensively computerized groups communities practice accounting management information technology 
godfrey tu evolution open source software case study proc 
intern 
conf 
software maintenance icsm san jose ca october 
gonzalez barahona perez de las heras centeno gonzalez counting potatoes size debian upgrade magazine ii december 
grinter supporting articulation software configuration management systems 
computer supported cooperative 
grinter recomposition coordinating web software dependencies computer supported cooperative 
roberts slaughter fielding economic incentives participating open source software projects proc 
third intern 
conf 
information systems december 
ou working free 
motivations participating open source projects intern 
electronic commerce 
hermann motivation software developers open source projects internet survey contributors linux kernel research policy july 
organizational learning open source software projects analysis debugging data ieee trans 
engineering management 
jensen scacchi collaboration leadership conflict negotiation org community proc 
th workshop open source software engineering edinburgh uk may 
kim community building web secret strategies successful online communities press 
kling kim king bit scholarly communication forums socio technical interaction networks journal american society information science technology 
kling scacchi web computing computer technology social organization ed advances computers academic press 
koch schneider effort operation ordination open source software project gnome info 
sys 

lehman programs life cycles laws software evolution proc 
ieee 
lerner tirole simple economics open source industrial economics 
code laws cyberspace basic books new york 
madey modeling oss community investigation koch ed free open source software development idea publishing appear 
oliver critical mass collective action micro social theory 
cambridge university press 
mockus fielding case studies open source software development apache mozilla acm transactions software engineering methodology 
monge kalman rumsey production collective action alliance interorganizational communication information systems organization science 
yamamoto ye evolution patterns open source software systems communities proc 
intern 
workshop principles software evolution 
noll scacchi supporting software development virtual enterprises digital information february 
guarding commons community managed software projects protect research policy july 
developing community software commodity world fisher downey eds frontiers capital ethnographic reflections new economy social science research council appear 
calvert eds governing commons evolution institutions collective action cambridge university press 
paulson eberlein empirical study open source closed source software products ieee trans 
software engineering april 
embracing open source software development sams publishing indianapolis 
preece online communities designing usability supporting sociability 
chichester uk john wiley sons 
sawyer effects intra group conflict packaged software development team performance information systems 
scacchi understanding requirements developing open source software systems iee proceedings software february 
scacchi free open source software development practices computer game community ieee software january february 
scacchi understanding free open source software evolution applying breaking rethinking laws software evolution appear lehman perry eds software evolution john wiley sons new york 
scacchi socio technical design appear bainbridge ed encyclopedia human computer interaction publishing group 
schach jin wright heller offutt maintainability linux kernel iee proceedings software february 
shah manipulating governance characteristics code info 
sharma rajagopalan framework creating hybrid open source software communities information systems 
sim holt ramp problem software projects case study software proc 
th intern 
conf 
software engineering kyoto japan april 
smith kollock 
eds communities cyberspace routledge london 
genre ecologies open system approach understanding constructing documentation computer documentation 
star steps ecology infrastructure design access large information spaces information systems research march 
stewart exploratory study ideology trust open source development groups proc 
intern 
conf 
information systems new orleans la 
klein growing systems emergent organization communications acm sommerville informed analysis software engineers intern 
human computer studies 
von hippel katz shifting innovation users toolkits management science july 
von krogh community joining specialization open source software innovation case study research policy july 
yamauchi shinohara ishida collaboration lean media open source software succeeds proc 
computer supported cooperative conf 
cscw philadelphia pa acm press december 
exhibit 
example near bottom highlighting career skill development opportunities arising participation oss projects source www tigris org march 

classification roles associated activities contributing oss participants perform 

layered role hierarchy cf 
kim 
exhibit 
example open license insuring software redistribution modification freedoms gpl rights specific computer games source www wizards com february 

social network links developers projects key developers larger oss project community cf 
madey 
exhibit 
example statement oss computer game development project seeks organize manage 
source www recruit html march 
exhibit 
graphic display depicting sustained growth number vintage arcade rom sets games migrated open source contemporary computer platforms 
source www net chart html march 

