proving correctness optimising destructive non destructive reads tuple spaces rocco de nicola rosario pugliese antony rowstron dipartimento di sistemi ed informatica universit di firenze firenze italy 
dsi microsoft research st george house street cambridge cb nh uk 
microsoft com 
describe proof optimisation applied tuple space run time systems linda 
optimisation allows certain circumstances tuple destructively removed shared tuple space example linda returned result non destructive read example linda rd different process 
optimisation successfully prototype run time system 
proof optimisation applied tuple space run time systems rowstron 
examples tuple space systems javaspaces klaim linda pagespace tspaces tucson name just 
just standard linda tuple space access primitives tuple insert tuple tuple space 
template tuple exists matches template remove tuple return process performing 
matching tuple available process blocks matching tuple available 
rd template tuple exists matches template return copy tuple process performed rd matching tuple process blocks matching tuple available 
shall assume single global tuple space processes 
optimisation proved referred tuple ghosting 
informal semantics primitive leads implementers remove tuple returned process tuple space soon primitive completed 
tuple ghosting allows tuple potentially remain valid result tuple non destructive read performed process whilst set assumptions holds 
studying soundness optimisation highly valuable showed original algorithm optimistic allowed result remain visible long 
certain circumstances original rules optimisation altered semantics access primitives 
confident actual optimisation modified semantics section sound 
motivation optimisation optimisation tuple removal useful tuples store shared state processes 
instance list usually stored tuple space items list stored separate tuples tuple containing unique number field representing position list 
single tuple required contains shared counter indicating number element added 
order add element list shared counter removed value counter increased tuple re inserted new tuple inserted containing number counter data element list 
common operation proposals addition new primitives help performing update shared counter see compiletime analysis convert counter updating single operation 
proposals intention increasing concurrency 
additionally high performance servers cost managing primitive blocked waiting matching tuple greater finding matching tuple blocking 
new challenges tuple space implementers create large scale high throughput servers optimisations reduce server load important 
implementation tuple ghosting implemented java run time environment proved clean efficient 
provide tuple ghosting implementation uses informal rules 
tuple returned result 
tuple returned result 
process performed matched tuple access tuple anymore 
process performed tuple performs tuple space access terminates tuple removed 
kernel works marking tuples returned primitive 
process kernel globally unique identifier guid created dynamically starts execute 
process registers run time system guid passed run time system creates primitive counter associated process 
time process performs tuple space access counter associated process incremented primitive performed 
process requests tuple matched tuple marked tagged identity tag process removed tuple current value primitive counter associated process 
process perform rd tuple result 
tuple matched system compares fly current primitive counter associated guid attached tuple primitive counter attached tuple 
primitive counters differ process terminated tuple discarded result rd communication processes occur shared tuple space 
hidden communication processes allow processes determine read tuple destructively removed 
process termination example hidden communication example process started process terminates 
starting process deduce tuples removed terminated process exist 
accounting termination important 
rules kernel uses described detail section 
performance table shows experimental results demonstrate advantages tuple ghosting example list stored tuple space 
scenario list accessed reader processes read counter times writer processes appends elements list update counter add new element 
experimental run time written java reader writer processes running java threads 
results gathered pentium ii mhz pc 
results shown table average times executions tuple ghosting enabled disabled 
execution times standard deviations shown processes 
reader processes number blocked rd primitives shown 
rd blocked tuple ghosting enabled 
results show expected rd primitive leads blocking tuple ghosting enabled ghosting disabled rd primitives lead block 
tuple ghosting increased level concurrency achieved system 
addition execution times reduced tuple ghosting enabled 
due overhead associated managing rd blocked tuple available 
rest structured follows 
section structural operational semantics traditional linda implementation outlined section optimisation outlined detail structural operational semantics optimised linda implementation 
proof correctness optimised version section 
ghosting disabled ghosting enabled value st dev 
value st dev 
reader time ms 
blocking rd 
rd reader time ms 
blocking rd 
rd writer time ms table 
performance implementation tuple ghosting enabled disabled 
structural operational semantics linda kernel syntax standard linda tuple space primitives elementary actions processes perform 
processes constructed composition operators null process nil process constant denotes terminated process action prefix operator unary operator denotes process executes action behaves process argument parallel composition operator binary operator denotes concurrent execution arguments 
processes consist evaluated tuples separate syntactic category represent tuples added tuple space 
evaluated tuple denoted assume existence predefined syntactic categories processes 
exp category value expressions ranged contains set variable symbols ar ranged non empty countable set value symbols ranged give simpler presentation formal framework assumptions 
assume tuples templates consists just field 
difference tuples templates formers contain expressions values contain formal parameters variables assigned 
parameter denoted summarizing syntax language nil rd variables occur formal parameters template bound rd process bv denote set bound variables fv denote free variables sets bv fv inductively defined follows fv nil def bv nil def fv def fv bv bv def bv bv fv def fv fv bv def bv bv fv def fv bv def bv fv def fv bv def bv fv def ae feg ar bv def fv def ae ftg ar bv def ae fxg fv rd def ae ftg ar bv rd def ae fxg usual write denote term obtained substituting free occurrence ar denote 
operational semantics operational semantics assumes existence function evaluating value expressions delta exp gamma 
denote value expression provided contain variables 
operational semantics language defined sos style means labelled transition system lts 
lts triple gamma 
ranged set processes generated syntax section 
def fout rd jv alg set labels shall range 
gamma 
theta theta called transition relation relation induced operational rules table give simpler presentation rules rely structural relation defined equivalence relation closed parallel composition satisfies structural rules table 
shall write gamma gamma 
gamma 
shall write gamma gamma 
denote ffl pn gamma gamma gamma 
gamma gamma 
pn gamma gamma gamma gamma 
briefly comment rules table 
structural laws simply say expected parallel composition commutative associative nil identity element 
operational rules self explanatory 
rule says read operation performed tuple matching template operation 
check pattern matching condition ar satisfied expression structural rules nil operational rules gamma gamma 
gamma gamma 
gamma gamma 
gamma gamma gamma gamma gamma 
gamma gamma gamma gamma gamma 
rd gamma gamma gamma gamma 
ar rd gamma gamma gamma gamma 
gamma gamma gamma gamma 
ar gamma gamma gamma gamma 
gamma gamma 
gamma gamma 
table 
linda operational semantics evaluates value stored tuple variable variable matches value 
rule differs just management accessed tuple tuple consumed tuple left untouched 
rule ensures structural relation modify behaviour processes 
structural semantics optimised linda having described basic linda structural semantics consider structural semantics optimised linda implementation uses tuple ghosting 
order illustrate tuple ghosting detail consider simple processes interact tuple space 
actions shown table 
shall petri nets unfoldings case graphs describe difference classical optimized semantics 
petri net circles represent places squares represent transitions 
transition fire places preconditions transition contain process process rd rd table 
simple example processes 
tokens 
transition fires consumes tokens preconditions places token output places linked arcs 
petri net case graph showing parallel composition processes seen 
ignores dotted links petri net case graph created semantics primitives previous section 
rd rd rd rd rd rd rd rd fig 

petri net case graph processes token starts initial place transition fire 
fires token placed output places connected transition 
means transitions rd fire 
fires fire token removed preconditions 
token replaced transition fired 
rd fires precondition tokens consumed transition linked preconditions 
token reinserted place 
rule re fire precondition contain token longer 
means transition fire transition precondition places filled token 
case graph shown shows different ordering possible transition firings course dotted arc ignored 
dotted arcs represent tuple ghosting optimisation 
allow transition rd fire transition fires 
means manipulation tuple suspended middle operation process performed operation received tuple continue tuple removed whilst process know process received tuple 
occurs possibility synchronisation processes happens tuple process inserts 
global perspective appears incorrect allows reading tuple removed 
formal semantics optimised version show proof semantics equivalent 
optimized operational semantics optimized operational semantics language defined means lts 
aim assume existence set process locations loc ranged parallel components processes allocated distinct location evaluated tuples placed 
denote loc disjoint set ghost locations ghost tuples placed bijection loc operation delta 
loc loc loc fg ranged set locations 
locations shall model guid processes implementation 
idea linda processes statically allocated distributed net processors 
names locations distribution processes locations arbitrarily chosen 
process distribution determined number parallel components number occurrences parallel operator guarded action 
instance process initially parallel components execution operation composed parallel processes allocated processors 
means far distribution concerned conceptually different parallel operators convenient different notations shall denote occurrences parallel operator cause distribution components occurrences guarded action shall occurrences 
unguarded occurrences 
obviously semantics defined rules analogues structural ones 
manage locations introduce new operators allocator operator says process allocated location location operator says location process located removed optimized lts triple gamma 
ranged set processes generated syntax section extended productions contains distributed versions processes def fout rd jv set labels shall ff range oe 
gamma 
theta theta called transition relation relation closed parallel composition satisfies operational rules table give simpler presentation rules rely structural relation defined equivalence relation closed parallel composition satisfies structural rules table 
shall write ff gamma gamma gamma gamma 
ff gamma 
oe shall write oe gamma gamma 
denote oe ffl pn gamma ff gamma gamma gamma gamma gamma 
ff gamma gamma gamma gamma gamma 
pn gamma ff gamma gamma gamma gamma gamma gamma 
oe ff delta ff delta delta ff briefly comment rules table 
additional structural laws say location distributes respect parallel composition removal just concerns location process located explicitely named operator 
operational rules quite 
general idea 
tuples initially allocated location tuple located accessed action performed process located tuple ghost tuple allocated ghost location 
process located performs action terminates removal ghost tuple allocated takes place 
particular nil perform action rule os presence action require removal ghost tuples rule os 
rule os deals addition tuples tuple space located 
rule os says rd operation access ghost tuples allocated location process performs operation 
rule os says operation access just tuples stored tuple space access ghost tuples 
location removal performed steps location restriction put applying rule os removal takes place means structural relation 
information stored transition labels refer location process performs operation apart rule os ghost tuple accessed stores location tuple 
structural relation enjoys property 
proposition 
loc 
proof 
easy induction structure transitivity 
structural rules nil nil operational rules os gamma gamma 
gamma gamma gamma 
os nil gamma gamma gamma gamma gamma 
nil os ff gamma gamma gamma gamma 
ff gamma gamma gamma gamma 
os gamma gamma gamma gamma gamma 
gamma gamma gamma gamma gamma 
os gamma gamma gamma gamma gamma gamma gamma 
gamma gamma gamma gamma gamma gamma gamma 
os rd gamma gamma gamma gamma gamma gamma 
ar rd gamma gamma gamma gamma gamma gamma gamma 
ae os gamma gamma gamma gamma gamma gamma 
ar gamma gamma gamma gamma gamma gamma 
os ff gamma gamma gamma gamma 
ff gamma gamma gamma gamma 
table 
optimized linda operational semantics proof correctness section prove equivalence semantics 
main results informally stated follows computation distributed version process allowed optimized semantics simulated computation original semantics theorem computation process allowed original semantics simulated computation distributed version optimized semantics theorem 
convenient fix allocation function distribute parallel components processes 
aim assume fl rg loc shall ae range fl rg strings form llr valid locations 
define allocation function intuitively process returns maximal distribution parallel component allocated different location 
locations form fl rg easily duplicated ae ael aer new different locations 
definition 
allocation function ae gamma 
defined follows ae nil def ae nil ae def ae ae def ae ae def ael aer ae def ae ae def ae def def function separately allocates evaluated tuples location function ae relates states satisfies basic property 
proposition 
loc ae ae 
proof 
directly follows definition ae 
correctness sketched case function ae maximal distribution allocating processes 
proof proceed similarly different allocation function 
inverse function relates states definition 
cleaning function gamma 
defined follows def def def nil def def abuse notation label ff write ff denote action part ff ff empty action ffl ff 
similar notation shall sequences labels property says inverse function ae proposition 
ae proof 
easy induction structure shall denote set locations occurring formally function gamma 
loc defined inductively follows nil fg fg 
matter notation shall denote term obtained substituting occurrence notation pi shorthand order operands arranged unimportant associative commutative operational semantics considered term convention indicate nil 
start proving original semantics simulate optimized 
aim introduce preorder oe definition 
oe preorder relation induced laws tp oe delta rd delta delta oe oe oe delta delta rd delta oe tp oe delta ff delta delta oe oe oe delta delta ff delta oe intuition preorder oe oe gamma gamma 
oe oe oe holds oe gamma gamma 
law tp permits exchanging execution order operations accessing evaluated tuple order avoid accessing ghost tuples 
law tp permits exchanging execution order operations causally related simple presentation relies observation ghost tuples location ae oe gamma gamma 
gamma gamma gamma gamma gamma gamma 
ff gamma gamma gamma gamma 
ff rd fall case dealt law tp 
introduce useful notations 
shall write denote ff oe similar meaning 
write oe denote number occurrences oe locations loc stands ghost 
intuitively sequences labels oe oe singled sequences operations ghost tuples mimicked original semantics 
show oe oe possible find oe oe oe singled sequence operations performed original semantics oe oe oe oe simulates oe optimized semantics 
basic property relates labelled transitions labelled transitions considered inverse proposition 
proposition 
template loc gamma gamma gamma 
fin rd implies gamma gamma 
fv 
proof 
induction length proof transition gamma gamma gamma 
basic step 
proof length 
rule os gamma gamma 
inductive step 
proof length applied rule os 
means gamma gamma gamma 
closed fv 
inductive hypothesis gamma gamma 
fv 
thesis follows case 
property similar previous takes account labelled transitions 
proposition 
loc gamma gamma gamma gamma gamma 
implies nil nil nil nil proof 
induction length proof transition gamma gamma gamma gamma gamma 
basic step 
proof length 
rule os applied thesis obviously follows 
inductive step 
proof length applied rule os 
means gamma gamma gamma gamma gamma 
inductive hypothesis nil nil nil nil thesis follows case 
prove soundness laws tp tp 
proposition 
ae fl rg oe loc ae oe gamma gamma 
gamma gamma gamma gamma gamma gamma 
rd gamma gamma gamma gamma gamma gamma 
implies loc ae oe gamma gamma 
rd gamma gamma gamma gamma gamma gamma 
gamma gamma gamma gamma gamma gamma 
proof 
transition gamma gamma gamma gamma gamma gamma 
deduced applying rule os possibly os 
template gamma gamma gamma gamma gamma gamma 
ar 
proposition gamma gamma gamma gamma gamma gamma 
implies gamma gamma gamma gamma 
fv 
way transition rd gamma gamma gamma gamma gamma gamma 
deduced applying os possibly os 
template loc rule os requires rd gamma gamma gamma gamma gamma gamma gamma 
ar 
proposition rd gamma gamma gamma gamma gamma gamma gamma 
implies rd gamma gamma gamma gamma gamma 
fv 
transitivity follows get 
proposition 
take 
rd gamma gamma gamma gamma gamma 
applying rules os os get rd gamma gamma gamma gamma gamma gamma gamma 
applying rules os os get rd gamma gamma gamma gamma gamma gamma 
gamma gamma gamma gamma 
applying rules os os get gamma gamma gamma gamma gamma gamma 
applying rules os os get gamma gamma gamma gamma gamma gamma 
concludes proof 
proposition 
ae fl rg oe loc loc ff ae oe gamma gamma 
gamma gamma gamma gamma gamma gamma 
ff gamma gamma gamma gamma 
imply ae oe gamma gamma 
ff gamma gamma gamma gamma 
gamma gamma gamma gamma gamma gamma 
proof 
transition gamma gamma gamma gamma gamma gamma 
deduced applying rule os possibly os 
template gamma gamma gamma gamma gamma gamma 
ar 
proposition gamma gamma gamma gamma gamma gamma 
implies gamma gamma gamma gamma 
fv 
fv proceed case analysis action ff 
ff loc 
rule os possibly os derive transition ff gamma gamma gamma gamma 
gamma gamma gamma gamma gamma gamma 

proposition gamma gamma gamma gamma gamma gamma 
implies nil nil transitivity nil follows nil get nil 
nil nil nil proposition 
take 
rule os nil gamma gamma gamma gamma gamma gamma 
nil applying rule os get nil gamma gamma gamma gamma gamma gamma 
nil applying rules os os get gamma gamma gamma gamma gamma gamma 
gamma gamma gamma gamma 
applying rules os os get gamma gamma gamma gamma gamma gamma 
applying rules os os get gamma gamma gamma gamma gamma gamma 
recall fv fv concludes proof case 
ff loc rule os possibly os derive transition ff gamma gamma gamma gamma 
exp gamma gamma gamma gamma gamma gamma gamma 
proposition gamma gamma gamma gamma gamma gamma gamma 
implies gamma gamma gamma gamma gamma 
fv 
transitivity follows get 
proposition 
take 
gamma gamma gamma gamma gamma 
applying rules os os get gamma gamma gamma gamma gamma gamma gamma 
applying rules os os get gamma gamma gamma gamma gamma gamma gamma gamma 
gamma gamma gamma gamma 
applying rules os os get gamma gamma gamma gamma gamma gamma 
applying rules os os get gamma gamma gamma gamma gamma gamma 
recall fv fv concludes proof case 
ff rd loc rule os possibly os derive transition ff gamma gamma gamma gamma 
template rd gamma gamma gamma gamma gamma gamma gamma 
ar 
proposition rd gamma gamma gamma gamma gamma gamma gamma 
implies rd gamma gamma gamma gamma gamma 
fv 
transitivity follows get 
fv proposition 
take 
rd gamma gamma gamma gamma gamma 
applying rules os os get rd gamma gamma gamma gamma gamma gamma gamma 
applying rules os os get rd gamma gamma gamma gamma gamma gamma gamma 
gamma gamma gamma gamma 
applying rules os os get gamma gamma gamma gamma gamma gamma 
applying rules os os get gamma gamma gamma gamma gamma gamma 
recall fv fv concludes proof case 
ff loc rule os possibly os derive transition ff gamma gamma gamma gamma 
exp gamma gamma gamma gamma gamma gamma gamma 
ar 
proposition gamma gamma gamma gamma gamma gamma gamma 
implies gamma gamma gamma gamma 
fv 
transitivity follows get 
fv proposition 
take 
gamma gamma gamma gamma 
applying rules os os get gamma gamma gamma gamma gamma gamma gamma 
applying rules os os get gamma gamma gamma gamma gamma gamma gamma 
gamma gamma gamma gamma 
applying rules os os get gamma gamma gamma gamma gamma gamma 
applying rules os os get gamma gamma gamma gamma gamma gamma 
recall fv fv concludes proof case 
proposition shows laws trace reduce number ghost tuples accessed computation 
proposition 
ae fl rg oe loc ae oe gamma gamma 
rd gamma gamma gamma gamma gamma gamma 
implies oe oe oe oe delta delta oe oe ff oe loc ae oe gamma gamma 
oe gamma gamma 
rd gamma gamma gamma gamma gamma gamma 
gamma gamma gamma gamma gamma gamma 
proof 
transition rd gamma gamma gamma gamma gamma gamma 
deduced applying os possibly os 
particular means 
definition ae rule os applied give rise ghost tuple 
label occurs sequence oe oe 
oe oe oe oe delta delta oe oe hypothesis ae oe gamma gamma 
gamma gamma gamma gamma gamma gamma 
oe gamma gamma 
rd gamma gamma gamma gamma gamma gamma 
oe ffl thesis directly follows proposition 
repeatedly applying proposition get ae oe gamma gamma 
oe gamma gamma 
gamma gamma gamma gamma gamma gamma 
rd gamma gamma gamma gamma gamma gamma 
thesis follows proposition 
give method transforming generic computation equivalent computation final state corresponds sequence operations access ghost tuples 
proposition 
ae fl rg oe ae oe gamma gamma 
implies oe oe oe ae oe gamma gamma 
oe 
proof 
induction oe 
oe take oe oe 
oe oe oe oe oe oe delta rd delta oe oe oe delta delta oe oe ff oe sequence oe exist oe ae oe gamma gamma 
imply facts loc rd oe oe oe occurrence label left rd oe label singled produced ghost tuple accessed label rd singled occurrences labels rd chosen way rd label accesses ghost tuple label location occurs ghost tuple destroyed execution operation 
proposition loc ae oe gamma gamma 
oe gamma gamma 
rd gamma gamma gamma gamma gamma gamma 
gamma gamma gamma gamma gamma gamma 
ae oe gamma gamma 
rd gamma gamma gamma gamma gamma gamma 
letting oe oe delta oe delta rd delta delta oe ae oe gamma gamma 
thesis follows induction oe oe oe oe oe gamma 
propositions relate transitions optimized semantics transitions original 
proposition 
ae fl rg ae loc ae ae pi gamma gamma gamma 
implies ae fl rg ae gamma gamma 
ae pi 
proof 
proceed case analysis deriving transition ae pi gamma gamma gamma 
rule os possibly rule os template ae pi gamma gamma gamma gamma gamma gamma gamma 

proposition gamma gamma gamma gamma gamma gamma gamma 
implies gamma gamma gamma gamma gamma 
fv 
ae pi implies ae pi 
ae pi lnf 
ae ae ae delta fl rg 
cases ae ae ae fg gamma gamma gamma gamma gamma 
applying rules get gamma gamma gamma gamma gamma 
thesis proven 
rd deriving transition ae pi gamma gamma gamma 
rule os possibly rule os template ae pi rd gamma gamma gamma gamma gamma gamma 
ar 
proposition rd gamma gamma gamma gamma gamma gamma 
implies rd gamma gamma gamma gamma 
fv 
ae pi implies ae pi 
ae pi lnf 
rd gamma gamma gamma gamma 
applying rule get rd gamma gamma gamma gamma 
applying rules recall fv os get rd gamma gamma gamma gamma 
thesis proven 
deriving transition ae pi gamma gamma gamma 
rule os possibly rule os template ae pi gamma gamma gamma gamma gamma gamma 
ar 
proposition gamma gamma gamma gamma gamma gamma 
implies gamma gamma gamma gamma 
fv 
ae pi implies ael pi 
ael pi lnf 
ae ael 
ael ae ael fg 
gamma gamma gamma gamma 
applying rule get gamma gamma gamma gamma 
applying rules recall fv os get gamma gamma gamma gamma 
thesis proven 
proposition 
ae fl rg ae ae ae pi gamma gamma gamma gamma gamma 
implies ae pi lnf 
proof 
take obviously left show ae pi lnf 
easily proved induction length derivation transition ae pi gamma gamma gamma gamma gamma 
rule os rule applied case ae pi lnf rule os rule applied case induction assume ae pi lnf thesis follows transitivity 
generalize previous properties sequences transitions 
proposition 
ae fl rg oe ae oe gamma gamma 
oe imply ae fl rg ae oe gamma gamma gamma gamma 
ae pi 
proof 
induction length oe 
basic step 
oe ffl ae thesis easily follows ae ae 
inductive step 
oe oe delta ff oe ff loc 
oe ff loc ae oe gamma gamma 
ff gamma gamma gamma gamma 
induction ae fl rg ae oe gamma gamma gamma gamma 
ae pi 
rule os ae oe gamma gamma 
ff gamma gamma gamma gamma 
ae pi get ae oe gamma gamma 
ae pi ae pi ff gamma gamma gamma gamma 
thesis follows proposition ff proposition ff 
original semantics simulate optimized 
theorem 
ae fl rg oe ae oe gamma gamma 
implies oe oe oe oe gamma gamma gamma gamma 
proof 
directly follows propositions 
prove optimized semantics simulate original theorem 
basic property relates labelled transitions labelled transitions 
proposition 
gamma gamma 
implies ae ae gamma gamma gamma 
ae 
ae ae gamma gamma 
ae ae proof 
induction length proof transition gamma gamma 
basic step 
proof length 
rule definition ae ae ae ae form 
thesis follows applying rule os ae inductive step 
proof length applied rule analogous operator case applied rule gamma gamma 
definition ae ael aer ae ael aer 
inductive hypothesis ael ael gamma gamma gamma gamma 
ael ael ael gamma gamma 
ael ael applying os get transition ae ael aer gamma gamma gamma gamma 
ael aer ae 
ae ae ael aer 
thesis follows aer aer 
case analogous operator applied rule gamma gamma 
definition ae ae ae ae gamma gamma 
get gamma gamma 
analogous get ae ae gamma gamma gamma gamma 
ae applying os 
thesis follows ae propositions formalize idea locations arbitrarily chosen processes differ names locations behave similarly 
main point allocation function preserve structural equivalence 
allocating structurally equivalent processes new processes obtained structurally equivalent 
appropriately renaming locations processes means function possible obtain process structurally equivalent 
notation loc oe gamma 
oe denotes process replacing occurrence oe 
similar notation renaming locations transition labels 
oe ffi oe denote composition functions oe oe oe ffi oe oe oe 
proposition 
ae ae fl rg function oe ae gamma 
ae ae oe ae 
proof 
proof proceeds induction syntax basic step 
basic step forms nil case definition allocation function ae ae ae ae thesis follows oe oe fae gamma 
oe ae ae 
inductive step 
reason case top level operator suppose definition means ae ael aer ae ae ae 
induction assume functions oe ae gamma 
ael oe ae gamma 
aer oe ae ael oe ae aer 
dom oe dom oe range oe range oe function composition oe ffi oe gets function oe oe ffi oe thesis follows 
suppose symmetric case dealt similarly 
definition means ae ae ae ae 
induction assume functions oe ae gamma 
ae oe ae ae 
cases consider 
ae take ae ae ae take ae ae ae fg gamma 
fg ae cases thesis follows 
proposition 
ae ae fl rg proved structural law function oe ae gamma 
ae ae oe ae 
proof 
proof proceeds induction length proof basic step 
structural law applied deduce proof case proceeds case structural law 
suppose structural law applied definition means ae ael aer ae ae ae 
proposition functions oe ae gamma 
ael oe ae gamma 
ael oe ae ael oe ae aer 
dom oe dom oe range oe range oe function composition oe ffi oe gets function oe oe ffi oe thesis follows 
structural law applied definition ae ae ae ae thesis follows oe oe fae gamma 
oe ae ae 
suppose structural law applied definition means ae ael ae ae ll ae lr ae 
proposition functions oe ae ll gamma 
ael oe ae lr gamma 
oe ae gamma 
oe ae ll ael oe ae lr oe ae 
definition domains ranges functions pairwise disjoint composition function oe oe ffi oe ffi oe thesis follows 
structural law applied definition ae ae ae ae thesis follows oe oe fae gamma 
oe ae ae 
inductive step 
case proof proceeds case structural law applied proving suppose proved structural law equivalence proved single application remaining structural laws 
induction ae fl rg function oe ae gamma 
ae ae oe ae 
reasoning basic step function oe ae gamma 
ae ae oe ae 
thesis follows oe oe ffi oe proposition 
loc oe gamma 
function gamma gamma gamma 
oe oe gamma gamma gamma gamma gamma 
oe 
proof 
easy induction length proof gamma gamma gamma 
proposition 
ae ae fl rg oe ae gamma 
ae function proved structural law oe ae ae ae ae oe ae ae 
proof 
proof relies fact ae ae processes number sequential components structure respect parallel composition proved induction syntax define function sequential components proved structural law sequential differ composition 
implies processes sequential components differ composition structural rules possible prove take 
function commutes oe oe ae ae implies oe ae ae sequential components follows oe ae oe ae oe ae ae ae ae thesis proved 
exploiting previous properties able prove relationship transitions original semantics optimized 
notice states optimized semantics consist ghost tuples 
proposition 
ae fl rg ae gamma gamma 
implies ae ae ae pi gamma gamma gamma 
ae pi 
proof 
induction length derivation transition gamma gamma 
basic step 
transition length rules rule infer transition 
proceed case analysis applied rule 
rule exp gamma gamma gamma gamma gamma 

proposition ae gamma gamma gamma gamma gamma gamma gamma 
ae ae 
applying rule os get ae pi gamma gamma gamma gamma gamma gamma gamma 
ae pi 
applying rule os get transition ae pi gamma gamma gamma gamma gamma gamma gamma 
ae pi 
proposition ae pi ae pi lnf 
definition allocation function ae pi lnf ae pi lnf thesis follows applying rule os 
rule rd template ar rd gamma gamma gamma gamma 

definition ae ae proposition ae rd gamma gamma gamma gamma gamma gamma 
ae ae 
applying rule os get ae pi rd gamma gamma gamma gamma gamma gamma 
ae pi 
applying rules os os get transition ae pi rd gamma gamma gamma gamma gamma gamma 
ae pi 
function ae substitution commute ae pi ae pi 
ae proposition ae pi ae pi lnf 
definition allocation function ae pi lnf ae pi lnf 
thesis follows applying rule os 
rule template ar gamma gamma gamma gamma 

definition ae ae proposition ae gamma gamma gamma gamma gamma gamma 
ae ae 
applying rule os get ae pi gamma gamma gamma gamma gamma gamma 
ae pi 
applying rules os os get transition ae pi gamma gamma gamma gamma gamma gamma 
ae pi 
function ae substitution commute ae pi ae pi 
ae proposition ae pi ae pi lnf 
thesis follows applying rule os 
inductive step 
applied rule gamma gamma 
loss generality assume proved structural law resp 
number parallel components 
easily seen gamma gamma 
nil gamma gamma 
nil induction ae fl rg ae ae ae ae pi gamma gamma gamma gamma 
ae pi 
number parallel components proposition function oe ae gamma 
ae ae oe ae ae pi oe ae pi 
proposition oe ae pi oe gamma gamma gamma gamma gamma gamma 
oe ae pi 
proposition ae oe ae 
oe ae pi oe ae pi applying rule os thesis follows 
previous property generalized nonempty sequences transitions 
proposition 
ae fl rg gamma gamma 
implies oe ae ae oe gamma gamma 
ae pi oe proof 
induction length sequence basic step 
case thesis immediate consequence proposition 
inductive step 
suppose gamma gamma 
gamma gamma 
induction oe ae ae oe gamma gamma 
ae pi oe hypothesis gamma gamma 
applying get gamma gamma 
proposition ae fl rg ae ae pi gamma gamma gamma 
ae pi 
concludes proof just take oe oe delta 
prove optimized semantics simulate original 
theorem 
ae fl rg gamma gamma 
implies oe ae oe gamma gamma 
oe proof 
ffl taken oe ffl ae thesis follows proposition 
proposition follows oe ae ae oe gamma gamma 
ae pi oe take ae pi 
definition ae pi ae pi ae 
proposition ae implies thesis 
described tuple ghosting optimisation allows tuples results non destructive tuple space accesses destructively removed 
motivation tuple ghosting briefly outlined practical results prototype system demonstrating advantage approach 
operational semantics original linda version optimisation illustrated 
operational semantics formal proof tuple ghosting optimisation shown optimisation alter semantics primitives programmers perspective 
achieved proving optimised semantics simulate original semantics sequence transitions optimised semantics mimicked sequence transitions original semantics 

rowstron 
optimising linda primitive understanding tuple space runtimes 
carroll damiani haddad oppenheim editors proceedings acm symposium applied computing volume pages 
acm press march 

sun microsystems 
specification 
available java sun com 

de nicola ferrari pugliese 
klaim kernel language agents interaction mobility 
ieee transactions software engineering 

carriero gelernter 
linda context 
communications acm 

ciancarini tolksdorf rossi 
coordinating multiagent applications www architecture 
ieee transactions software engineering 

wyckoff lehman ford 
tspaces 
ibm systems journal 

omicini zambonelli 
coordination internet application development 
autonomous agents multi agent systems 
special issue coordination mechanisms patterns web agents 

rowstron 
web ordination language 
world wide web journal 

silva silva 
design linda library mpi 
technical report universidade de coimbra 

carriero gelernter 
tuple analysis partial evaluation strategies linda precompiler 
gelernter nicolau padua editors languages compilers parallel computing research monographs parallel distributed computing pages 
mit press 

de nicola pugliese 
process algebra linda 
ciancarini hankin editors proceedings international conference coordination models languages coordination volume lecture notes computer science pages 
springer 

plotkin 
structural approach operational semantics 
technical report daimi fn dep 
computer science aarhus university denmark 
