internet scale xml dissemination service publish subscribe systems demonstrated ability scale large numbers users high data rates providing content data dissemination services internet 
services limited data semantics query expressiveness support 
hand selective dissemination xml data significant progress moving xml filtering richer functionality transformation result customization general ignored challenges deploying xml services internet scale 
address challenges context incorporating rich functionality xml data dissemination highly scalable system 
architectural design onyx system overlay network 
identify salient technical challenges supporting xml filtering transformation environment propose techniques solving 
large number emerging applications mobile services stock sports personalized newspaper generation network monitoring traffic monitoring electronic auctions increasing interest content data dissemination 
service delivers information users equivalently applications organizations correspondence content information user data interests 
shows context data dissemination system providing service operates 
users subscribe service providing profiles expressing data interests 
data sources publish data pushing messages system 
system delivers user messages match funded part nsf itr iis si ibm faculty partnership award program research funds intel microsoft uc micro program 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment proceedings th vldb conference toronto canada rizvi michael franklin university california berkeley rizvi franklin cs berkeley edu data source data source data source data interests messages format required user 
past years xml rapidly gained popularity standard data exchange enterprise intranets internet 
ability augment data semantic structural information xml encoding raises potential accurate useful delivery data 
context xml data dissemination user profiles involve constraints structure value xml fragments resulting potentially precise filtering xml messages 
emerging applications relevant xml messages need transformed data application integration personalization adaptation wireless devices 
xml filtering transformation aroused significant interest database community little attention paid deploying xml dissemination services internet scale 
scenario services faced high data rates large profile population variable query life span tremendous result volume 
distributed publish subscribe systems developed networking community demonstrated scalability applications sports olympics 
integrating xml processing distributed environments appears natural approach supporting large scale xml dissemination 
challenges data user profiles results returned fig 

overview content data dissemination distributed pub sub systems partition profile population multiple nodes direct message flow nodes hosting profiles content messages referred content driven routing 
integrating xml routing brings key challenges 
xml mixes structural value information content driven routing needs support constraints 
inherent repetition recursion element names xml data defeats known routing techniques counting algorithms designed simpler data models 
new techniques xml content driven routing needed 
xml transformation introduced distributed system best venue perform transformation issue address 
criteria partition user profiles impact effectiveness content driven routing 
mixture structure value constraints profiles repetition element names xml data complicate profile partitioning problem 
verbosity xml results large messages large messages need parsed routing step alternative formats considered efficient xml transmission 
number xml query processors available providing xml processing environment 
yfilter multi query processor built previously represents set profiles operator network top non deterministic finite automaton nfa share processing profiles 
yfilter distributed xml dissemination raises issues distributing nfa operator network efficient scheduling operators profile processing routing 
contributions initial design onyx operator network yfilter xml dissemination largescale dissemination system delivers xml messages user specifications filtering transformation 
contributions include 
leverage yfilter processor content driven routing 
particular nfa operator network represent routing tables provide initial solution constructing routing tables distributed profile population 
address issue perform incremental message transformation course routing 
order boost effectiveness routing provide algorithm partitions profile population exclusiveness data interests 
develop holistic message processing sharing various processing tasks node content driven routing incremental transformation user profile processing 
dependency aware priority scheduling support sharing providing fast path routing 
investigate various formats efficient xml transmission 
provide architectural design system mechanisms building system 
proceeds follows 
section details requirements motivation 
section describes system model 
core techniques addressing various challenges section followed detailed broker architecture design section 
section includes extended related 
section concludes 
requirements motivation section requirements large scale xml dissemination provide brief survey existing solutions motivates 
expressiveness starting point requirements xml data model subset xquery profile model 
user profiles contain constraints structure path expressions value value predicates xml fragments 
example user interested stock information distributed san francisco subject stock express interest query nitf dtd 
specifies root element nitf child element head turn contains child element attribute edition area value sf descendant element tobject subject attribute tobject subject type value stock 
msg nitf head edition area sf tobject subject tobject subject type stock user profiles contain specifications result customization 
example user query specify nitf article matches clauses equivalent query transform new article root element stock news containing elements selected original article path expressions body body head body body 
content 
msg nitf head edition area sf tobject subject tobject subject type stock return stock news body body head body body content stock news profile model xquery language sequel terms profile query interchangeably 
scalability second dimension requirements scalability 
specifically service scale dimensions 
data volume 
data volume determined number messages second arriving system message size 
depending application number messages second ranges thousands 
example nasdaq real time data feeds include messages second pre market hours network application monitoring systems net logger receive messages second 
message size vary kb xml encoded stock quote updates kb xml news articles 
query population 
query population dissemination system span wide range reaching millions queries applications personalized newspaper generation mobile operators providing stock quote updates 
frequency query updates 
third scalability issue frequency users update data interests 
applications queries change daily basis change frequently 
result volume 
result customization supported volume results delivered tremendous 
message point point delivery needed query matched message 
take example stock quote update service 
suppose peak message rate data source second message kb user population average query selectivity low 
back calculation gives estimation result volume gb second 
disseminating volume data central server prohibitively expensive 
having outlined problem large scale xml data dissemination position large body related 
related systems publish subscribe systems tibco rendezvous gryphon siena provide distributed subject content data dissemination 
distributed processing spreads processing load potential scaling service inputs outputs 
systems support limited expressiveness message filtering 
earlier publish subscribe systems subject 
systems publishers label message subject pre defined set users subscribe messages specific subject 
expressiveness service restricted message content data model 
publish subscribe systems model messages attribute value pairs allow user profiles contain set predicates values attributes 
expressiveness systems amounts filtering tuple messages constituent attributes 
combining low expressiveness high scalability distributed pub sub systems represented upper left corner matrix shown 
large number xml filtering approaches developed 
approaches typically support subset xpath 
xml filtering provides expressiveness specifying data interests resulting accurate filtering messages 
yfilter multi query processor built previously supports result customization subset xquery 
xml filtering transformation systems provide higher levels expressiveness centralized style processing limits scalability 
revisiting today xml filtering transformation systems best described lower right corner matrix combining lower scalability higher expressiveness 
content data dissemination adopts paradigm distributed processing exploit aggregated bandwidth processing power 
indicated system onyx incorporates high level expressive scalability high low distributed pub sub fig 

combining expressiveness scalability ness xml filtering transformation distributed data dissemination service 
system model section operational features onyx 
onyx provides content data dissemination publishers users 
consists overlay network nodes 
nodes serve information brokers brokers short handle messages user queries collaborate provide registration service 
overview illustrated 
service interface xml filtering systems onyx yfilter service interface provided onyx consists methods similar register data source data source registers onyx contacting registration service providing information location schema expected message rate message size 
illustrated message 
registration service assigns id data source chooses broker root broker data source 
choice root broker topological distance data source bandwidth available data volume expected source 
service forwards information new data source root broker message returns assigned id address root broker data source message 
publish data registration data source publishes data attaching id message pushing message root broker message 
register data interest subscribe user contacts registration service provides profile network address message 
registration service assigns id profile chooses broker host broker profile user location content profile 
registration service forwards profile related information host broker message returns profile id host broker address user message 
host broker deal user requests concerning profile 
update data interest subsequent changes profile including updates deletion sent directly host broker message 
xml filtering xml filtering transformation expressive ness data source data source data source broker broker broker broker broker fig 

architecture onyx note users need method retrieve messages matching interests messages pushed system message 
additional methods provided data sources update schema information sent previously 
fault tolerance achieved having backup nodes registration service brokers techniques 
discussion scope 
planes content processing onyx application level overlay network 
consists layers functionality 
lower layer called control plane deals application level broadcast trees gives broker broadcast tree rooted broker reaches brokers network 
shows tree network consisting brokers 
algorithms constructing broadcast trees provided 
section focus higher layer functionality onyx content processing primary concern 
decompose operations layer planes processing data plane query plane 
data plane captures flow messages system query plane captures flow queries query related updates system 
see duality data query pervasive feature onyx 
discuss tasks performed layer content driven routing incremental transformation user query processing 
content driven routing necessary avoid flooding messages brokers network 
builds top broadcast tree described 
routing forwarding message children broadcast tree broker sends subset interested message 
routing scheme matches message content routing table entries routing queries representing interests child brokers sharp contrast address ip routing scheme 
shows example routing message content 
routing tables broker shown conceptually 
table broker specifies routing query nitf head edition area ny broker similar nitf head edition area sf broker 
matching new message arriving broker routing query results routing broker registration service message flow broker broker data source broker broker broker broker broker nitf head edition area ny broker nitf head edition area sf transformation plan broker nitf tobject subject tobject subject type stock nitf tobject subject tobject subject matter fishing broker nitf series series name tide forecasts query flow fig 

message routing content message corresponding child 
building routing tables summarizing queries downstream brokers subtask query plane 
matching messages routing queries occurs data plane 
incremental transformation second task content processing layer 
interesting cases transforming messages routing include early projection removal data early restructuring 
example early projection follows 
data source publishes messages containing multiple news articles 
user queries downstream link interested subset articles distributed area sf messages projected articles interest forwarded link query batched nitf msg batched nitf nitf head edition area sf return batched nitf example restructuring message transcoding profiles wireless users say users downstream link require images comments removed tables converted lists 
incremental transformation helps reduce message sizes avoids repeated multiple brokers 
enable incremental transformation attaching transformation queries output links brokers path routing 
user queries downstream link aggregated commonality transformation requirements extracted form transformation query 
subtasks happen query plane 
corresponding subtask data plane consists transforming messages queries messages sent output links 
user query processing task matching transforming messages individual user queries host brokers 
user queries resident particular broker step message processing arriving messages may routed transformed downstream user queries 
subtask query plane consists issues indexing user queries broker host broker subtask data plane consists matching messages indexes 
table summarizes content processing tasks onyx subtasks query data planes 
msg nitf head edition area sf tobject subject tobject subject type stock msg nitf head edition area sf tobject subject tobject subject matter fishing nitf msg nitf head edition area sf series series name tide forecasts return body body content nitf system task query plane data plane content driven routing build routing tables lookup routing tables incremental transformation build transformation plans execute transformation plans user query processing build query plans execute query plans table system tasks planes processing core techniques section describe key aspects onyx query plane data plane query partitioning strategy 
yfilter serves basis components yfilter basics 
yfilter basics yfilter xml filtering transformation engine processes multiple queries shared fashion 
core yfilter non deterministic finite automaton nfa represent set simple linear paths support prefix sharing paths 
yfilter provides fast algorithm running nfa input message match contained paths simultaneously incremental approach maintaining nfa paths change 
structural components path expressions handled nfa remaining portions queries yfilter builds network operators starting accepting states nfa 
operator performs specific task evaluation value predicates evaluation nested paths transformation 
operators residing accepting state nfa executed accepting state reached 
downstream operators network activated preceding operators finished 
addition accepting states operators annotated query identifiers 
identifiers specify annotated accepting state reached annotated operator successfully evaluated queries corresponding identifiers satisfied 
shows example queries representation yfilter 
take example 
contains root element nitf nested paths applied 
yfilter decomposes query linear paths nitf head edition area sf nitf tobject subject state edition area sf fig 

example queries representation yfilter head nitf tobject 
subject state tobject 
subject type stock state tobject 
subject matter fishing tobject subject type stock 
structural part paths represented nfa see common prefix nitf shared paths 
accepting states paths state state network operators represented boxes remainder starts 
bottom network selection operator accepting state handle value predicate corresponding path 
example box state specifies predicate attribute edition area evaluated element drove transition state 
handle correlation paths requirement nitf element paths evaluate true yfilter applies join operator selections 
operator realizes correct semantics nested paths 
left join operator annotated query identifier 
means join successfully evaluated satisfied 
representation follows paths nfa uses selection state process common predicate contains separate selection state evaluate different predicate second path 
distinct join operator built selections 
representation similar clauses contains additional box transformation return clause 
details yfilter interested reader referred 
query plane series subsection focus issues query plane routing table construction generation incremental transformation plans 
solutions extension yfilter processor 
note discuss user query processing completely handled yfilter 
routing table construction stated previously routing table conceptually consists routing query output link pairs routing query aggregated user queries downstream corresponding output link 
decided implement routing tables yfilter reasons fast structure matching path expressions nfa small maintenance cost nfa query updates com state series 
name tide forecasts transformation broker broker aggregate broker new routing query routing table routing query output link pairs collect new routing query aggregate broker fig 

examples constructing routing tables disjunctive normal form pared deterministic automata extensibility supporting new operations operator networks 
representation routing tables mechanisms construct 
purpose routing consider matching part query clauses query written xquery 
part converted single path expression equivalent semantics refer matching path query 
current design routing queries represented disjunctive normal form dnf absolute linear path expressions 
matching path contains nested paths decomposed absolute linear paths possibly value predicates 
routing query constructed matching path conjunction resulting paths 
multiple routing queries connected operators create new routing query 
note alternative allow matching path routing query operators connect 
comparison dnf relaxes semantics nested paths 
motivation dnf join operators evaluate nested paths relatively expensive logical operators path expressions evaluated efficiently 
investigation alternative forms direction 
routing table construction distributed query population consists applying functions map collect aggregate create routing queries chosen form 
map maps matching path user query canonical form routing query collect gathers routing queries sent child brokers routing table broker aggregate merges routing queries routing table broker mapped user queries routing queries map nitf head edition area sf tobject subject tobject subject type stock nitf head edition area sf tobject subject tobject subject matter fishing broker head nitf tobject 
subject head nitf tobject 
subject broker broker series broker broker generates new routing query represent broker parent broker 
functions illustrated brokers 
broker host broker matching paths 
uses function map create routing query 
applies aggregate routing queries generate new represent parent broker 
note leaf broker contain routing table 
broker child brokers broker broker user queries 
uses function collect merge routing queries sent child brokers routing table applies aggregate routing table generate routing query represent parent 
construction operations 
implementation functions yfilter 
map takes input yfilter operator network representing set matching paths 
create dnf representations routing queries map simply replaces join operator operator network operator 
collect merges routing queries sent downstream brokers routing table parent broker 
operation simply merges yfilter operator networks represent routing queries 
aggregate performs re labeling yfilter operator network 
changes identifier annotations queries brokers identifier broker annotated places marks routing broker 
essentially adds semantics annotated places encountering cause routing messages broker 
yfilter treats broker identifiers query identifiers identifiers simply called targets sequel 
example shown 
box shows yfilter operator network built queries head nitf head nitf broker tobject 
subject broker broker broker 
box represents routing query created broker applying map aggregate box 
box depicts result merging box routing query sent broker assumed routing query created query 
box result applying aggregate box explained shortly 
sharing routing queries 
important note difference conceptual representation routing table routing query output link pairs implementation 
creating separate operator network routing query represent routing queries routing table single combined operator network 
result common portions routing queries processed 
example box shows path leading accepting state selection operator attached state shared routing query broker broker 
commonality routing queries significant benefit sharing tremendous 
semantics introduced routing queries complicates issue sharing 
separate operator networks routing queries short cut evaluation strategy applied evaluation routing query 
consider box operator network created routing query broker 
execution targets labeled broker encountered processing routing query immediately 
contrast combined operator network shown box target broker encountered processing combined operator network continue target broker reached 
care taken may performed leads targets broker 
words na ways executing combined operator network shared processing may perform wasteful 
solve problem solution runtime mechanism instructs yfilter ignore processing duplicate targets processing different targets 
mechanism dynamic analysis operator network reports portions combined operator network lead targets reached 
content generalization 
issue address routing table construction size routing tables size operator network representation 
larger routing tables incur high overhead routing table lookup slowing critical path message routing 
may cause memory problems environments scarce memory 
reasons introduce content generalization additional step performed collect aggregate 
generalizing routing table essentially trades filtering power routing table processing space efficiency 
propose initial set methods content generalization 
methods generalize individual path expressions respect structural value constraints 
methods generalize disjuncts routing query 
instance method preserves path expressions common disjuncts new routing query 
consider routing table shown box 
applying aggregate routing table calling method re labelling identifiers result operator network containing single path shown box 
generalized operator network represent broker parent 
incremental message transformation incremental transformation happens course routing 
mentioned section early projection early restructuring 
subsection briefly describe extraction incremental transformation queries user queries placement transformation queries 
transformation query early projection attached output link broker clause shared user queries downstream link clause generalises clauses queries binding clause provides information return clauses queries require 
requirement implies return clauses user queries downstream contain absolute paths backward axis navigate outside binding 
similarly transformation query early restructuring applied output link conditions satisfied return clauses downstream queries contain series transformation steps removing images converting tables lists steps shared queries 
transformation query carry common transformation steps matching messages earlier broker 
opportunities early transformation identified host brokers conditions incremental transformation queries representing generated propagated parent broker 
parent transformation queries compared commonality extracted create new transformation query parent set remainder queries output links 
remainder query combined new transformation query constitutes original transformation query 
remainder query attached output link corresponding original transformation query came 
new transformation query propagated process repeats 
final algorithms routing table construction incremental transformation plan construction consider user queries batch applied incremental maintenance routing tables transformation plans 
case delta routing transformation queries constructed propagated 
details omitted due space constraints 
data plane having described query plane turn data plane handles xml message flow 
describe aspects plane holistic message processing various tasks efficient xml transmission 
holistic message processing onyx single yfilter instance broker build shared holistic execution plan routing table incremental transformation queries local user queries holistic mean processing tasks considered data plane 
processing xml message shared plan sketched section 
execution algorithm holistic message processing extension push yfilter execution algorithm 
previous elements xml message drive execution nfa 
accepting state nfa path tuples created passed operators associated state 
network operators executed operators right accepting states downstream operators 
yfilter order operator execution fcfs policy operators upstream operators completed 
contrast earlier holistic plan contains multiple types queries routing queries incremental transformation queries local user queries 
types critical path message routing 
delayed processing local queries 
incremental transformation useful routing query corresponding link satisfied implies dependency transformation queries routing queries execution 
reasons propose dependency aware priority scheduling algorithm support shared holistic message processing 
dependency aware priority scheduling 
algorithm operators contribute routing queries assigned high priority operators contribute incremental transformation queries medium priority rest operators low priority 
second priority class declared dependent class condition operator second class executed incremental transformation query contributes necessitated successful evaluation corresponding routing query 
implementation fcfs queue assigned priority class 
addition wait queue assigned dependent class 
priority scheduling works typical os operators dependent class placed wait queue moved fcfs queue dependency conditions satisfied 
efficient xml transmission low cost transmission xml messages paramount concern multi hop distributed dissemination system 
xml raises challenges context 
verbose nature xml cause redundant bytes messages 
second xml messages need parsed broker expensive 
section address challenges 
inherent verbosity xml led compression algorithms xmill 
compression solves challenges parsing problem 
promising approach explored counter problem element stream format xml transmission 
format memory binary representation xml messages input yfilter processor pre processing parsing 
binary format space efficient raw xml white spaces delimiters 
wire size xml message reduced compressing binary representation 
explore schema aware representation xml transmission 
control plane broadcast schema publishing source brokers network perform schema aware xml encoding messages transmission brokers 
particular dictionary encoding scheme maps xml element attribute names schema space efficient key space 
explore advanced schema aware optimizations avoiding storing parent child relationships binary format recovered schema 
experimented xml transmission formats text binary element stream format binary dictionary encoding corresponding compressed versions 
messages generated yfilter xml generator nitf dtd 
parameters bounds depth element nesting message determines number times element repeat parent element allow vary complexity messages 
compression performed zlib gzip library outperforms xmill relatively small sized messages reported 
summarizes performance different xml formats metric wire size messages different complexities 
element stream format remarkably outperform text format dictionary encoding gives promising results 
compression helps reduce wire size formats significantly 
presents evaluation xml formats complementary metric message processing delay 
uncompressed formats require serializing messages sender receiver raw format additionally requires parsing proves expensive 
compressed formats significant costs compression sender decompression receiver 
choice xml format transmission weigh wire size processing delay metrics get combined metric 
decision invariably influenced implementation details transport protocol 
example distributed planetlab testbed message sizes involved experiments gave transmission delay tcp 
attributed connection establishment time dominating tcp small message sizes 
message processing delay turned important concern message size making compression undesirable 
hand dcp protocol sends data redundant streams udp employed compression may useful 
query population partitioning previous distributed publish subscribe assumes queries naturally reside nearest brokers considering alternative schemes partitioning query population 
subsection address effect query partitioning filtering power content driven routing captured fraction query partitions message match 
wire size bytes text text compressed binary binary compressed binary dic bin dic comp message complexity fig 

wire size xml messages start investigation properties query partitioning effect content driven routing 
query similarity partition intuitive property effective filtering 
example ideal case queries partition queries partition message match partitions containing required elements 
dissimilarity partitions candidate 
consider partition queries partition 
partitions little common quite message matches partitions 
mutual exclusiveness turns desired property 
example partition requires id requests id chance message satisfies low 
message surely satisfy contains element 
question path expressions establish mutual exclusiveness query partitions 
regard key observations 
structural constraints see examples 
schema specifies paths mutually exclusive message 
fact path expressions exhibit potential exclusiveness involve structure contain value predicates address target attribute data specific element operator contain different values see third example 
call common part paths exclusiveness pattern 
second observation repetition element names xml messages limits exclusiveness patterns 
best choice exclusiveness pattern appear message dictated schema 
third observation general coverage exclusiveness pattern query population limited due diversity user data interests 
single exclusiveness pattern query partitioning cause majority queries placed partition called don care 
case set exclusiveness patterns 
partitioning exclusiveness patterns 
achieve exclusiveness data interests query partitions propose query partitioning scheme called partitioning exclusiveness patterns pep 
due space constraints briefly describe steps scheme assuming algorithm run entire query population centralized fashion 
message processing delay ms text text compressed binary binary compressed binary dic bin dic comp message complexity fig 

processing delay xml transmission rc ta th tc rt io random number repeated xml elements identifying set exclusiveness patterns 
pep searches yfilter representation entire query population aggregates predicates contained selection operators accepting state exclusiveness patterns 
patterns sorted coverage query population number queries involving 
pep uses greedy algorithm choose set patterns query involves pattern set 
heuristics perturb set unselected patterns patterns included set appear message coverage query population sacrificed 
partition creation 
second step query partitions created patterns selected step 
value range exclusiveness pattern partitioned buckets numbering queries assigned buckets values contained exclusiveness patterns 
query involve patterns belong bucket 
query involves multiple patterns randomly assigned matching buckets 
query partitions created assigning queries th bucket pattern query partition ideal case exclusiveness pattern appears message message match query partitions bucket pattern 
filtering power content driven routing fraction query partitions message match achieve patterns partitions filtering power 
patterns appear multiple times message repetition degrades filtering power cases linearly 
study potential benefit pep scheme compared performance random query partitioning scheme randomly assigns queries partitions 
considered assigning population queries partitions 
query contained patterns chosen uniformly set exclusiveness patterns 
pep exploited patterns partitioning 
shows percentage partitions random message matches varies amount repetition element names xml message 
clearly random partitioning scheme ends matching partitions messages small amount repetition element names 
contrast pep leads fewer partition matches 
user interests influenced geography system assigns user queries closest brokers doing pep fig 

random query partitioning vs pep catalog packets xml messages query packets control packets catalog manager broadcast catalog information catalog catalog packets xml messages query packets control packets random partitioning queries leading messages exchanged brokers system 
important onyx pep core algorithm query placement registration service 
addition pep query placement involves decision mapping query partitions brokers distributed protocols perform initial query partitioning maintain partitions user queries change time 
issues addressed 
broker architecture message pre processor source validation xml parser data plane query processing routing table lookup incremental transformation xml translator message post processor decompressor serializer compressor having described broker functionality query data planes turn discussion broker architecture implements functionality 
architecture shown 
contains components 
packet listener 
component listens packet arriving broker header assigns packet flows catalog packets xml messages query packets network control packets 
catalog manager 
catalog packets contain information data source 
may originate registration service concerning new data source registered data source update information sent previously 
catalog manager parses packets stores information local catalog 
packet new data source new entry added catalog including id data source information data rate schema information relates known data source existing entry catalog describing data source updated new information 
catalog com packet listener yfilter processor content layer fig 

broker architecture query pre processor decompressor profile validation xquery parser serializer query compressor post processor packet sender scheduler network manager query plane query plan update routing table update transformation plan update profiles maintain broadcast trees control plane ponents message validation xml formatting query processing message pre processor 
xml messages come data sources brokers system 
messages data source carry source id text format 
receiving message root broker data source validates source id attached message catalog 
parses message inmemory representation routing query processing 
message comes internal broker source validation skipped 
depending internal representation xml message formats discussed earlier need suitable preprocessing decompression 
query pre processor 
analogous message pre processor functionality maintains database profiles host broker 
control plane control messages control plane maintains broadcast tree root broker system 
specifically records parent node child nodes broker particular root broker broadcast tree 
provides methods content layer forwarding messages broadcast tree reverse forwarding queries 
control plane responsible disseminating catalog information purposes optimizing content processing 
example schema information optimize query processing support schema aware xml encoding 
data plane 
broker performs tasks data plane receiving xml message 
takes sequence steps route message broker root broker message attaches broker identifier message retrieves output links broadcast tree specified root broker identifier attached message looks content routing table filter output links 
second output link selected broker transforms message transformation plan attached link 
broker processes message local queries generate results 
tasks realized yfilter processor 
query plane 
query plane exhibits duality data plane 
arriving query user local query processing plan updated 
query comes broker update routing table routing query incremental transformation plan incremental transformation query modification routing table transformation plan cause new query generated delivery parent broker 
yfilter processor 
yfilter described section 
leveraged build holistic processing plan processing tasks shared processing tasks maximized 
query plane extended support routing table construction operations described section 
data plane scheduler augmented prioritize processing different types queries exploiting sharing see section 
message query post processor 
results data plane passed message post processor 
results local query processing translated xml messages delivery users results routing incremental transformation serialized possibly compressed 
queries generated query plane follow path serialization compression 
packet sender 
component attaches header packet specifying type flow identifier root broker packet xml message format 
multiplexes types flows output channel scheduler network manager sends packets tcp udp related related large body research database networking communities 
areas xml filtering described detail brief overview related 
multicast 
multicast allows source send content multiple receivers 
bandwidth efficient ip multicast flexible network layer paradigm 
led application layer solutions overcast 
proposals augmenting ip multicast content routing features 
gives user fine grained ways specifying interests powerful query language xml 
content distribution networks cdn 
cdns provide infrastructure delivers static dynamic web objects clients nearby web caches data replicas offloading main website 
focused allowing user specify coherence requirements data 
differs approach give user powerful query language specify interests 
dealing streams xml messages web objects 
publish subscribe systems 
publish subscribe systems event provide communication event publishers subscribers 
sift system provided support matching keyword queries large sets documents ideas building distributed filtering system 
systems model event conjunction attribute value pairs support relational predicates subscriptions specifying event interests 
addressing challenging problem support rich xml messages queries leads increased complexity query processing data forwarding routing table construction 
xml overlay networks 
mesh overlay network proposed support simple xml queries 
authors address xml query processing issues 
query aggregation scheme perform content routing 
support powerful query language features customized transformations 
transcoding 
transformation functionality system closely related transcoding web content suit profiles heterogeneous users users mobile phones hand held computers 
profile usually provide expressiveness querying content subset xquery support 
status initial design onyx distributed system providing large scale xml dissemination 
particular provided detailed architectural design system addressed various challenges distributed xml dissemination context leveraging yfilter state art xml processor 
view initial step internet scale xml dissemination services proposed architecture solutions critical issues routing table construction query population partitioning lay foundation offering high expressiveness scalability services massively distributed environments 
june implemented components message query pre processing post processing 
collaboration berkeley networking group build networking related components control plane underway 
expect fully implement data query planes yfilter course summer deploy system planetlab fall 
plan extend research directions 
explore alternative forms routing query representation addition dnf content generalization algorithms 
typical workloads xml routing collected evaluate alternative forms algorithms gain insights various tradeoffs 
exploit schema optimization routing table construction 
furthermore plan extend notion data query duality context multi source routing analogous placing routing queries filter direct message flow place data source descriptions network prune forward query flow host brokers root brokers 
address networking issues occur pep move queries away closest brokers provide distributed protocols carry pep maintain quality query partitioning user queries change time 
aguilera strom sturman chandra matching events content subscription system 
proc 
principles distributed computing podc may 
franklin efficient filtering xml documents selective dissemination information 
vldb sep 
baby franklin shapiro zdonik dbis toolkit middleware large scale data delivery 
sigmod 
banavar chandra mukherjee strom sturman efficient multicast protocol content publish subscribe systems 
proc 
ieee international conference distributed computing systems icdcs may 
bell cleary witten text compression 
prentice hall englewood cliffs new jersey 
ramamritham shenoy adaptive push pull disseminating dynamic web data 
ieee transactions computers may 
chamberlin fern ndez florescu robie sim xquery xml query language 
working draft nov 
www org tr xquery 
bruno gravano srivastava 
navigation vs index xml multi query processing 
icde mar 
carzaniga rutherford wolf routing scheme content networking 
proc 
ieee infocom mar 
carzaniga wolf forwarding content network 
sigcomm aug 
chan fan felber garofalakis rastogi tree pattern aggregation scalable xml data dissemination 
vldb aug 
chan felber garofalakis rastogi efficient filtering xml documents xpath expressions 
icde feb 
felber scalable protocol content routing overlay networks 
proc 
ieee international symposium network computing applications nca apr 
chu rao zhang case system multicast 
proc 
acm sigmetrics international conference measurement modeling computer systems jun 
clark derose xml path language xpath version 
online www org tr xpath 
zhang franklin fischer path sharing predicate evaluation high performance xml filtering 
tods dec 
franklin query processing high volume xml message brokering 
vldb sep 
maggs parikh sitaraman weihl globally distributed content delivery 
ieee internet computing sep oct 
fabret jacobsen llirbat pereira ross shasha filtering algorithms implementation fast publish subscribe systems 
sigmod 
green miklau suciu processing xml streams deterministic automata 
proc 
int conf 
database theory icdt jan 
gryphon 
www research ibm com gryphon index html 
gupta suciu streaming processing xpath queries predicates 
sigmod jun 
internal press telecommunications council 
news industry text format 

www nitf org 
internet protocol ip multicast 
www cisco com cc td doc ito doc htm 
jannotti gifford johnson kaashoek toole jr overcast reliable multicasting overlay network 
proc 
th symposium operating system design implementation osdi oct 
lakshmanan efficient matching streaming xml documents queries 
edbt mar 
suciu xmill efficient compressor xml data 
sigmod may 
mccanne jacobson vetterli receiver driven layered multicast 
sigcomm aug 
oki siegel skeen information bus architecture extensible distributed system 
sosp dec 
auerbach banavar strom sturman exploiting ip multicast content publish subscribe systems 
proc 
ifip acm int conference distributed systems platforms 
planetlab 
www planet lab org 
rodriguez ross biersack improving www caching multicast 
computer networks isdn systems nov 
segall arnold boot henderson phelps content routing elvin 
proc 
auug canberra australia jun 
shah ramamritham efficient resilient approach filtering disseminating streaming data 
vldb sep 
shah jain efficient dissemination personalized information content multicast 
proc 
ieee infocom jun 
snoeren gifford mesh content routing xml 
sosp oct 
stoica zhuang shenker surana internet indirection infrastructure 
sigcomm aug 
tian dewitt pirahesh mayr myllymaki implementing scalable xml publish subscribe system relational database system 
proc 
sigmod jun 
query friendly xml compressor 
icde mar 
websphere application server network deployment 
www ibm com software network edge html 
yan garcia molina sift information dissemination system 
tods dec 
websphere transcoding publisher 
www ibm com software pervasive transcoding publisher 
nasdaq pre market volume 
dynamic nasdaq com dynamic stm 
netlogger toolkit 
www lbl gov netlogger 
