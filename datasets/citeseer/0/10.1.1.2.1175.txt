pitfalls mining sourceforge james kevin crowston syracuse university school information studies center science technology syracuse new york usa crowston syr edu sourceforge provides abundant accessible data open source software development projects making attractive data source software engineering research 
theoretical practical pitfalls 
outline practical lessons gained spidering parsing analysis sourceforge data 
sourceforge practically difficult projects data earlier systems dumped crucial data hosted outside sourceforge retrieved data 
practical issues play directly analysis decisions screening projects reduce range variables skewing data biasing correlations 
sourceforge theoretically provides easily accessible data items project tempting researchers fit theories limited data 
worse plausible dependent variables 
studies test hypotheses start different theoretical bases 
avoid problems analyses sourceforge projects go project level variables carefully consider variables screening projects testing hypotheses 
interested identifying factors predict performance free libre open source software floss teams 
part inquiry chose analyze data sourceforge website largest repository floss project data excellent source data floss team practices 
data collection process involved spidering numerous web pages parsing downloaded html files producing summary data analysis 
research encountered number practical pitfalls outlines 
difficulties merely practical investigation sourceforge data papers dealing sourceforge data encountered number theoretical caveats 
research background interest floss stems broader interest distributed teams 
focus research team practices coordination development collective mind individual organizational learning 
intend examine number projects detail qualitative content analysis ethnographic methodology 
sheer number projects volumes data available prerequisite research identify appropriate projects detailed study 
seeking successful unsuccessful projects model floss project success explored 
collected data project demographics developer mailing lists sourceforge tracker system largely bug tracking data 
data conducted social network analysis identify variance communication structure results reported process analysis bug fixing reported analysis speed projects fix bugs preliminary analysis reported 
practical pitfalls data collection receiving response requests direct access sourceforge database concluded best available method data collection spider screen data 
initially sourceforge project pages april data identify projects greater listed developers bugs system 
criteria theoretically chosen match interest distributed teams bug fixing process 
mailing lists bug tracking pages april accessing data bug reports 
stages data collection spidering parsing summarizing practical difficulties necessary choices 
outline solutions 
utilized perl scripts data collection comments specific perl 
conclude section testing strategies recommend mining software repositories 
pitfalls spidering spidering scripts utilized www module available unfortunate necessity spidering large datasets place large strains servers 
important behaved development scripts 
code dry run option test scripts 
consider running local test server mirrors structure target site 
store full html download parsing live 
ensures changes parser expect 
require re spidering target site 
tempting forked processes speed spidering 
beware forking processes especially lost children due bug bang away server days long parent process killed 
code wait loop spidering code reduce density page requests 
time banned sourceforge servers heard 
believed new defence introduced sourceforge parameters unknown 
spidering process take long time extending number days 
crucial sure collect relevant data time collection 
feasible prepare analysis scripts test data projects ensuring data collected sufficient 
repeating spidering stage time consuming 
sure store time page downloaded 
especially important timedependent analysis account censored data event history analysis equally analysis scripts available request author comprehensive perl archive network class library perl 
required anchor effective date analysis comparative longitudinal analyses 
useful store number pages type downloaded gives count expected number bugs parsing 
count test accuracy parsing scripts 
spidering clearly area cooperation research groups great benefits 
vital ensure sourceforge site operating properly time spider checked site status page pitfalls parsing large websites generated html templates databases giving fairly consistent structure suitable scripted parsing extract required data analysis 
level consistency high ensure unexpected problems faced 
simplify parsing process possible reducing excess non standard html pages 
test results utilizing tidy module cs tidy application job standardizing html removing 
sure check altered target data way effects consistent downloaded dataset 
regular expressions vital type parsing far simpler utilize combination html parsing utilities html parser simple html 
inconsistencies encountered contained limited number projects bugs mailing lists significantly undermine confidence data 
important points aware sourceforge data line breaks fields especially tough observe regular debugging output 
consider converting visible characters avoid confusion 
unexpected characters fields non ascii characters html entities 
show errors external modules utilized making situation difficult debug sourceforge net display doc php 
docid group id frustrating bug caused usernames look html dexter 
perl parse fields username real name match real name username variants item item layout information status changes sourceforge inconsistent table bottom bug 
separate methods find date 
appears source forge changed layout 
projects inconsistent source forge system 
especially aware projects moved old data sourceforge system tcl 
official fields may contain misleading data start date reflecting day re entry 
fields may contain data old system parsable form researchers need decide write special case parser data drop project analysis 
sourceforge tracker stores interaction information item follow messages free text fields arbitrary length inconsistent endings containing unexpected characters 
patch tricky example 
intention xml data storage scripts 
beware xml simple read write 
successfully perl data structure serialization module pass data 
pitfalls summarizing summarization requirements vary intended analyses 
pursued social network analysis sna required interaction matrices event history analysis required data lifetimes bug status assignment 
problem summarizing missing data 
example sourceforge allows users post anonymously giving posts username 
couldn predict effect different treatments data analysis created summarizer produced treatments data baseline case treatment appears individual 
deletion case data deleted 
separate individual 
item thread separate individual 
able compare effect different treatments outcome analysis surprisingly little difference strategies 
opposite problem number fields interest turn multi valued 
example project development status planning alpha beta simultaneously 
retain multiple values analysis complex 
researcher ought principled decisions handle cases letting convenience parsing summarizing 
final problem different analysis tools require different data output formats 
tested different social network analysis packages settling sna module project high degree vital large data sets 
application presentable graphics capabilities 
program required output subtly different formats 
summarization methods number different scripts making summarization excellent candidate modularization 
testing strategies reflection testing strategy considerably systematic 
recommend techniques pursuing large data collection projects involving spidering parsing random selection test pages project checked hand create known output 
making changes parser summarizer preserve output earlier runs check unexpected regressions 
strategy old new results noting items values changed check intended anticipated changes 
remember note comments bug reports special cases code written alternations regular expressions 
surprising quickly forgotten flow bug fixing 
useful create test cases quirk identified ensure correctness proposed solution prevent regressions 
test cases shared seeking parse similar data repository interest location share test cases source forge cvs bugzilla subversion mailing lists interpretation analysis important issues consider undertaking analysis interpretation sourceforge data 
seeking utilize data carefully consider choice screening variables keep separate analysis variables 
challenges cleaning dirty data despite template database nature source forge website significant amount dirty data hard sure extent problems time consuming costly manual checking 
described large amount anonymous data sourceforge system attributed individual participant 
analyses impact crucial 
described data dumped system yielding valid totally inaccurate data 
furthermore sourceforge repository record floss community important projects repository 
important programmers editor listed sourceforge developers activity released files clearly wrong 
page simply placeholder points repository 
entries identifying difficult requires data source outside sourceforge 
skewed truncated data firstly projects sourceforge highly different shapes sizes structures leads data highly skewed 
example screening variables developers bugs reduced projects interest hosted sourceforge time spidering projects 
skew extends project activity reported findings 
appears large number person projects entered sourceforge progress announcement 
problems possible solutions may yield truncated results complicate variance analyses regressions 
necessary choose screening variables reduce dataset projects theoretical interest analysis acknowledge variance screening variables significantly reduced attempt compensate reduction better avoid variable 
avoiding screening variables may sufficient dataset reduced screening variable may significant truncation correlated variables 
worse difficult know advance collecting data look correlations 
var var var trunc var trunc 
truncating upper range var reduces correlation difficulties compounded difficulty predicting direction impact truncation 
example truncating variable highly varied may result variable appears varied increasing correlations 
truncating variable exhibits low variance cause variable increase relative variance leading reduced correlations 
equally decision truncate sections variable top bottom mid range quite unpredictable effects substantially increasing correlation 
var var var split var split 
splitting distribution increases correlation research design sourceforge highly available dataset provides limited number easily available variables variables pre calculated available project homepage full lists 
examples include number developers project status activity downloads page views numbers tracker items 
restricted amount data poses problems research design 
problem limited number ways mapping theoretical constructs available variables 
result studies sourceforge data may similar regression equations study quite divergent concepts 
example crowston analysis oss communities virtual organizations applying crowston competency theory case oss development projects 
theory explains project success terms availability competencies ability developers recognize opportunities ability project marshall resources ability manage short term cooperation regressing downloads development status activity development status number administrators popularity programming language number developers lifespan activity factors audience topic omitting necessary dependent variables independent variables 
smith start population ecology perspective projects propose regress project survival number releases number development statuses audiences topics age number developers 
second problem available variables may low validity measures particular theory 
example studies chosen downloads dependent variable arguing plausible proxy 
problematic reasons 
firstly literature largely proxy impact downloads proxy proxy 
secondly downloads proxy inaccurate systematically biased 
fundamental floss software distributed distributions redhat cds debian get system freebsd ports downloaded source forge user downloaded program distribution directly sourceforge 
conversely packages facing frequent changes environment instant messenger package new packages included distribution higher downloads 
deal similar difficulties alternative dependent variable measures develop hopefully useful approach floss project success 
sourceforge remains excellent source data interested studying processes floss teams distributed teams general repositories 
screen scraping remains unfortunate necessity faced researchers seeking mine online repositories 
experiences mining sourceforge available code 
sought highlight general lessons mining software repositories 
regardless data collection method wishing sourceforge data face significant challenges cleaning screening interpreting data outlined identified solutions employ researchers tuned impact screening attempt minimize impact screening analyses 
discipline conscious limitations ready data points available repositories sourceforge 
researchers take care operationalizing theoretical constructs prepared go low hanging fruit 
smith 
survival opensource projects population ecology perspective 
proc 
th international conference information systems seattle wa 
crowston 
defining open source software project success 
proc 
international conference information systems 
crowston 
portfolio floss project measures 
submitted icse open source workshop 
crowston 
social structure open source software development teams 
oasis workshop ifip wg 
crowston 
open source software projects virtual organizations competency software development 
iee proceedings software 
ghosh 
free libre open source software survey study floss 
technical report international institute university maastricht netherlands 
crowston 
process theory competency engineering projects 
proc 
munich germany 
krishnamurthy 
cave community empirical examination mature open source projects 
monday june 
crowston 
coordination practices bug fixing floss development teams 
technical report syracuse floss project 

extension mclean model success 
information systems research 
