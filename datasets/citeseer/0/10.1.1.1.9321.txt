survey adaptive middleware software engineering network systems laboratory department computer science engineering michigan state university east lansing michigan cse msu edu survey ph qualifier exam 
developing distributed applications di cult task due major problems complexity programming interprocess communication need support services heterogeneous platforms need adapt changing conditions 
traditional middleware corba dcom java rmi addresses problems extent black box approach encapsulation object oriented programming 
traditional middleware limited ability support adaptation 
address problems adaptive middleware evolved traditional middleware 
addition object oriented programming paradigm adaptive middleware employs key technologies including computational reflection component design aspect oriented programming software design patterns 
survey proposes dimensional taxonomy categorizes di erent adaptive middleware approaches 
examples category described compared detail 
suggestions research provided 
keywords adaptive middleware taxonomy computational reflection component design aspect oriented programming software design patterns static adaptation dynamic adaptation quality service dependable systems embedded systems 
contents middleware background taxonomy traditional middleware 
object oriented middleware 
key supporting paradigms adaptation computational reflection 
component design 
aspect oriented programming 
software design patterns 
taxonomy adaptive middleware middleware layers 
adaptation type 
application domain 
adaptive middleware projects qos oriented middleware 
dependable middleware 
embedded middleware 
big picture developing distributed applications di cult task reasons 
writing code interprocess communications tedious error prone 
low level socket programming marshalling unmarshalling messages examples code 
second supporting multiple interacting platforms di cult 
heterogeneous hardware devices computer networks operating systems programming languages emerged decades 
distributed applications stand applications involve heterogeneous technologies 
third adapting dynamic changing conditions hard achieve right tools techniques 
emerging distributed applications involve multimedia communication mobility embedded computing group communications high availability 
addressing issues means systems adapt changing conditions unexpected security attacks hardware failures dynamic network environments 
tackle problems middleware invented 
traditionally middleware hides underlying details interprocess communication heterogeneous technologies application developers black box paradigm encapsulation object oriented programming 
traditional middleware solves problems extent limited ability support adaptation 
adaptive middleware evolved traditional middleware solve problems 
identify types adaptation provided adaptive middleware static dynamic 
static adaptation occur compile startup time dynamic adaptation occurs startup time 
addition object oriented programming paradigm adaptive middleware employs key software technologies order support adaptation 
computational reflection enables middleware inspect reason adapt run time 
component design enables decomposition middleware functionality easier manage modify structure middleware statically dynamically 
aspect oriented programming enables separation middleware cross cutting concerns quality service energy consumption security fault tolerance development time compile run time concerns selectively woven application code 
software design patterns enable reuse best adaptive designs virtual component pattern adaptive middleware 
uses orthogonal methods classify adaptive middleware 
method proposed schmidt categorizes middleware layers host infrastructure distribution common services domain services 
second method introduced classifies middleware adaptation type 
define focus types adaptation configurable customizable tunable mutable 
third method introduced classifies adaptive middleware application domain 
focus major domains qos oriented systems dependable systems embedded systems 
remainder survey divided sections 
section provides background middleware reviews established taxonomy traditional middleware 
section discusses supporting paradigms standards adaptive middleware 
section proposes dimensional taxonomy adaptive middleware 
section introduces compares categorizes adaptive middleware projects proposed taxonomy 
section brings projects discussed section shows project fits big picture 
section concludes suggests possible research directions 
middleware background middleware connectivity software encapsulates set services residing network operating system layer user application layer 
middleware facilitates communication coordination application components potentially distributed networked hosts 
middleware provides application developers high level programming abstractions example remote objects socket programming 
manner middleware hide interprocess communication mask heterogeneity underlying systems hardware devices operating systems network protocols facilitate multiple programming languages application level 
middleware considered glue enables integration legacy applications ectively implementing session presentation layers layers iso osi model 
discuss known taxonomy traditional middleware 
object oriented middleware adaptive middleware projects introduced discussed length 
taxonomy traditional middleware emmerich provides frequently referenced taxonomy middleware 
taxonomy type programming language abstraction middleware provides interaction distributed software components transactional message oriented procedural object oriented 
corresponding primitive communication techniques distributed transactions message passing remote procedure calls remote object invocations respectively 
note bakken introduced similar taxonomy includes classifications distributed tuples remote procedure call distributed object 
emmerich taxonomy help lay foundation discussion adaptive middleware 
transactional middleware supports distributed transactions processes running distributed hosts 
originally type middleware targeted interconnecting heterogeneous database systems 
goals include providing data integrity high performance availability phase commit protocol 
ibm cics bea examples category 
message oriented middleware facilitates asynchronous message exchange clients servers message queue programming abstraction generalization operating system mailbox 
messages block client deposited queue specific receiver information 
addition message queue abstraction decouples clients servers enables interaction incompatible systems 
ibm mqseries sun java message queue examples category 
procedural middleware extends procedure call procedural programming languages include remote procedure calls rpc body procedure resides remote host called way local procedure 
birrell nelson implemented full fledged version rpc 
sun microsystems adopted rpc part open network computing 
open group developed standard rpc called distributed computing environment dce 
unix windows operating systems support rpc facilities 
object oriented middleware object oriented programming paradigm rpc architecture 
provides abstraction remote object methods invoked object address space client 
encapsulation inheritance polymorphism supported type middleware 
corba java rmi dcom major object oriented middleware approaches 
types survey primary focus object oriented middleware basis research adaptive middleware 
remainder section reviews major object oriented middleware approaches 
object oriented middleware object oriented middleware separates object interface set functionally related methods implementation provides local representation remote object hides interprocess communication remote object local representation 
common object request broker architecture corba distributed object framework proposed object management group omg 
corba supports distributed object oriented computing heterogeneous hardware devices operating systems network protocols programming languages 
illustrates corba components described follows 
object request broker orb core corba allows objects interact transparently objects located locally remotely 
corba object represented interface identified realized object oriented program local object called servant 
client corba object acquires object called interoperable object ior calls methods object located client address space 
interface definition language idl language defining corba interfaces 
idl compiler automatically generate code stubs skeletons 
idl stub represents servant locally client address space idl skeleton represents client locally servant address space 
idl stubs skeletons marshal requests enable transmission requests network 
dynamic invocation interface dii enables clients directly access underlying request mechanisms run time generate dynamic requests objects type interface known client compile time 
interface repository provides type information client needs dynamically create request 
similarly dynamic skeleton interface dsi enables orb deliver requests servant compile time knowledge type object supports gateway object may know type target objects forwarding requests 
implementation repository enables late deployment corba objects 
implementation repository receives request targeted corba object looks object meta information database activates object forwards request permanently target object 
permanent forwarding contrast transient forwarding causes automatic forwarding requests client target object directly client orb 
object adapter activates servants dispatches requests 
orb interface provides access standard orb services resolving corba initial services naming service 
general inter orb protocol giop standard inter orb communication enables interoperability di erent corba compliant orbs 
internet inter orb protocol iiop specific mapping giop specification runs tcp ip connections 
corba architecture 
java remote method invocation java rmi proposed javasoft support development distributed java applications 
corba java rmi supports java language similar corba java rmi supports distributed computing heterogeneous hardware devices operating systems java virtual machine jvm 
corba marshalling unmarshalling java rmi uses object serialization preserves type objects serialized 
depicts typical java rmi application 
registry java rmi similar corba naming service resolves symbolic name actual remote object 
server object registers registry client object look remote object address 
java rmi dynamically load class bytecode object passed remote objects java reflection 
shown java rmi web server load class bytecodes 
similar corba java rmi supports dynamic request invocation java reflection 
typical java rmi application 
distributed component object model dcom proposed microsoft dis tributed extension component object model com 
similar corba dcom supports heterogeneous programming languages corba java rmi dcom supports windows platforms 
illustrates dcom architecture 
service control scm corba orb core responsible locate object implementation 
dcom terminology object proxy object stub equivalent names corba stub skeleton 
corba java rmi dcom supports multiple inheritance exceptions idl level 
regard inheritance dcom supports multiple interfaces binary standard similar vtable 
dcom supports dynamic invocation interface 
detailed comparisons corba java rmi dcom please refer 
dcom architecture 
key supporting paradigms adaptation addition foundation provided design traditional middleware platforms numerous advances programming paradigms contributed design adaptive middleware 
important contributions area review literature shows paradigms addition object oriented paradigm play key roles supporting adaptive middleware computational reflection component design aspect oriented programming software design patterns 
discussed turn follows 
computational reflection computational reflection refers ability program reason possibly alter behavior 
reflection enables system open implementation details analysis compromising portability revealing unnecessary parts 
words reflection exposes system implementation level abstraction hides unnecessary details enables changes system behavior 
depicted reflective system represented base level objects self representation represented meta level objects causally connected system meaning modifications system representation reflected 
base level part system deals normal functional aspects system meta level part deals computation implementation aspects system 
meta object protocol mop meta level interface enables systematic opposed ad hoc inspection modification base level objects 
meta level base level mops relationship meta level objects base level objects 
computational reflection studied years context programming languages operating systems 
reflection studied middleware enables adapting behavior distributed application modifying middleware implementation 
reflective middleware concerned adapting non functional aspects distributed applications including qos performance security fault tolerance energy management 
section describes examples reflective middleware 
note reflective programming languages proposed support development distributed systems reflective middleware 
extends java reflection behavioral reflection enables modifying behavior java rmi package run time encrypting requests transmitting network 
program control logic pcl provides programming framework enables programmers design develop optimize performance adaptive distributed applications 
source compiler provided inputs meta code specified language close java respectively outputs program source java compiled linked base program 
adaptive java extension java introduces new language constructs support behavioral reflection 
behavioral reflective meta model architecture adaptive java separates monitoring behavior introspection changing behavior refractive meta methods re spectively 
extends java virtual machine intercept method invocation object creation field read write run time 
adapt intercepted operations loading new code dynamically 
reflective languages facilitate development adaptive middleware distributed applications 
component design software components software units independently produced deployed composed third parties 
components self contained components clearly specify require provide 
component design cbd supports large scale reuse software enabling assembly commodity shelf cots components variety vendors 
independent deployment components enables late composition referred late binding essential adaptive systems 
late composition provides coupling compatible components run time defined interface 
system developed cbd amalgam components reorganized easily 
applied middleware cbd provides flexible extensible system :10.1.1.27.2878:10.1.1.101.2890
specially middleware customized specific application domains integration domain specific components evolve third party components 
component middleware dynamically adapted environment late composition 
examples major component middleware solutions dcom discussed earlier ejb ccm 
enterprise java beans ejb middleware component model java proposed sun microsystems enables java developers shelf java components beans 
ejb built top java technology ejb components implemented java language 
ejb component model supports adaptation automatically supporting services transactions security distributed applications 
corba component model ccm distributed component model proposed omg considered cross platform cross language superset ejb 
ccm supports adaptation enabling injection adaptive code component containers component remain intact 
aspect oriented programming third major software development paradigm adaptive middleware aspect oriented programming aop 
kiczales realized complex programs composed di erent cross cutting concerns properties areas interest qos energy consumption fault tolerance security 
object oriented programming abstracts commonalities classes inheritance tree cross cutting concerns scattered di erent classes complicating development maintenance applications 
aop enables separation cross cutting concerns development time 
compile run time aspect weaver weave di erent aspects program form program new behavior 
aop proponents argue cross cutting concerns leads simpler development maintenance evolution software 
naturally benefits important adaptive middleware 
aop enables factorization separation cross cutting concerns middleware core promotes reuse cross cutting code facilitates adaptation 
aop customized versions middleware generated application specific domains 
yang david provide step approach dynamic weaving aspects context adaptive middleware static aop weaver compile time reflection run time 
aspect oriented middleware projects described detail section 
software design patterns software design patterns provide way reuse best software designs practiced successfully years 
goal software design patterns create common vocabulary communicating insight experience recurring problems known refined solutions 
costly time consuming error prone independently rediscover reinvent solutions middleware challenges 
schmidt colleagues identified relatively concise set patterns enables developing adaptive middleware 
example virtual component pattern tao zen enables adapting distributed application memory constraints embedded devices providing small middleware footprint including minimum core set virtual components code dynamically loaded demand 
numerous adaptive middleware projects benefit adaptive design patterns discussed section :10.1.1.27.2878:10.1.1.101.2890:10.1.1.27.1465
paradigms introduced section address part adaptation techniques numerous ongoing adaptive middleware projects 
section describes dimensional taxonomy categorize activities 
taxonomy adaptive middleware adaptive middleware enables modifying behavior distributed application application developed response changes functional requirements operating conditions 
adaptive operating systems enable adaptation development time 
adaptive operating systems typically provide low level non portable adaptive services 
adaptive middleware hand exploit underlying adaptive operating system providing high level abstraction system resources supports portable adaptive code 
adaptive operating systems scope survey 
remainder section describe dimensional taxonomy classifying adaptive middleware projects 
dimension introduced schmidt second third proposed author 
middleware layers schmidt decomposes middleware layers host infrastructure distribution domain services 
illustrates layers 
middleware layers described schmidt 
host infrastructure layer resides directly atop operating system kernel provides higher level api operating system api hides heterogeneity hardware platforms operating systems extent network protocols 
host infrastructure middleware provides generic services upper middleware layers encapsulating functionality require tedious error prone non portable code socket programming thread communication primitives 
ace rocks described section examples adaptive middleware layer 
distribution layer resides atop host infrastructure layer provides high level pro gramming abstraction remote method invocation application developers 
distribution layer developers write distributed applications similar stand applications 
layer hides heterogeneity network protocols extent heterogeneity operating systems programming languages 
corba dcom java rmi discussed earlier main solutions distribution layer 
section provide examples adaptive middleware layer including tao dynamictao openorb 
common services layer resides atop distribution layer provides functionality fault tolerance security load balancing event propagation logging persistence real time scheduling transactions 
high level services provided layer reused di erent applications 
quo irl friends described section example adaptive middleware layer 
domain services layer resides atop common services layer tailored specific class distributed applications 
common services layer high level services layer reused specific domain 
boeing bold stroke architecture example adaptive middleware layer 
adaptation type adaptive middleware categorized respect type adaptation provides 
shows proposed taxonomy adaptive middleware respect adaptation type mapped application lifetime 
middleware enables adaptation application compile startup time call static middleware minimizes footprint embedded applications application compile time 
middleware enables adaptation application run time call dynamic middleware load adaptive code run time adapt wireless network loss rate changes 
note dynamism increases left right 
taxonomy adaptive middleware respect adaptation type 
static middleware divided customizable configurable middleware 
customizable middleware enables adapting application application compile link time developer generate customized adapted versions application 
note customized version generated response functional environmental changes realized application development time 
examples adaptation mechanisms provided customizable middleware static weaving aspects compiler flags precompiler directives 
quo discussed section examples customizable middleware 
configurable middleware enables adapting application application startup time enabling administrator configure middleware response functional environmental changes realized application compile time 
examples adaptation mechanisms provided configurable middleware include corba portable interceptors optional command line parameters example set socket bu er size configuration files configuration file 
section describe examples middleware including eternal irl rocks 
dynamic middleware divided tunable mutable middleware 
tunable middleware enables adapting application application startup time application 
doing enables administrator fine tune application response functional environmental changes occur application started 
examples adaptation mechanisms provided tunable middleware step adaptation approaches including static aop compile time reflection run time employed david yang component configurator pattern dynamictao virtual component pattern tao zen 
define variation tunable middleware repeatedly tunable middleware enables repeated tuning applications run time 
mutable middleware powerful type adaptive middleware enables adapting application run time 
middleware dynamically adapted 
main di erence tunable middleware mutable middleware middleware core remains intact tuning process concept fixed middleware core 
mutable middleware evolve completely di erent unexpected 
examples adaptive techniques provided mutable middleware reflection late composition components dynamic weaving aspects 
openorb discussed section example mutable middleware 
application domain third dimension taxonomy categorizes adaptive middleware respect application domain 
survey literature reveals adaptive middleware projects support main application domains qos oriented systems dependable systems embedded systems 
illustrates taxonomy adaptive middleware application domains 
qos oriented middleware supports real time multimedia applications avionics systems video conferencing internet telephony required meet deadlines adhere qos contracts define acceptable levels qos 
dependable middleware supports critical distributed applications required correctly operational military command control medical applications 
embedded middleware supports applications required small footprints able run limited memory devices including set top boxes smart phones hand held devices industrial controllers scientific instruments 
domains refined section describe refinements introduce specific adaptive middleware projects 
discuss project fits respect dimensions taxonomy 
taxonomy adaptive middleware respect application domain 
adaptive middleware projects classification adaptive middleware projects emphasis project may cross domains may reside middleware layer 
cases placed project domain layer match primary functionality 
middleware project provides adaptation type explicitly mention project provides hybrid adaptation 
addition details supporting paradigms project discussed compared related projects 
qos oriented middleware qos oriented middleware supports distributed applications require quality service 
refine qos oriented middleware real time multimedia reflection oriented aspect oriented middleware shown 
examples category described turn follows 
taxonomy qos oriented middleware 
real time middleware 
real time middleware required meet deadlines defined real time applications 
hard real time middleware failure meet deadline may lead loss life property 
life critical military safety critical civilian distributed real time systems examples hard real time applications 
soft real time middleware failure meet deadline critical hard real time middleware 
earliest middleware projects schmidt adaptive communication environment ace real time object oriented framework written provides highperformance real time communication services 
ace employs software design patterns support distributed applications ciency predictability including low latency applications high performance bandwidth intensive applications predictability real time applications 
illustrates key components ace framework 
note os adaptation layer resides directly atop native operating system apis providing platform independent api 
place ace host infrastructure layer 
ace components dynamically updated service configurator pattern dynamic binding feature 
consider ace repeatedly tunable middleware mutable middleware ace core remains intact tuning process 
schmidt extended ace create ace orb tao corba compliant real time orb built atop ace components shown 
tao enhances standard corba event service provide real time event dispatching scheduling required real time applications avionics telecommunications network management systems 
earlier versions tao employ strategy design pattern encapsulate di erent aspects orb internals iiop pluggable protocols concurrency request demultiplexing scheduling connection management 
configuration file specify strategies implement aspects startup time 
tao parses configuration file loads required strategies 
consider tao configurable middleware 
versions tao decomposes implementation tao core orb components dynamically loaded demand virtual component pattern 
consider tao repeatedly tunable middleware 
tao naturally resides distribution layer corba compliant orb 
ace architecture 
tao architecture 
component integrated ace orb ciao developed schmidt tao implementation corba component model ccm resides distribution layer 
ciao intended provide component design distributed real time embedded dre system developers abstracting systemic aspects qos requirements composable meta data units supported component framework 
consider current ciao implementation configurable middleware 
researchers university illinois developed adaptive middleware :10.1.1.27.2878:10.1.1.101.2890
campbell adopted earlier version tao considered configurable middleware built dynamically adaptive version tao called dynamictao computational reflection 
provide real time services dynamictao uses dynamic soft real time scheduler provides qos guarantees applications soft realtime requirements 
reflection dynamictao meta objects reifying orb aspects 
reification dynamictao achieved service configurator pattern 
words reflection mainly implement service configurator pattern 
illustrates dynamictao reified structure 
realizations service configurator pattern dynamictao 
service configurator exports interface corba idl interface defined mop inspecting adapting loading unloading component implementations dynamically 
component implementations organized categories representing di erent aspects tao orb packaged dynamically loadable libraries linked orb run time 
consider dynamictao repeatedly tunable middleware 
dynamictao reified structure 
stream oriented middleware 
stream oriented middleware provides continuous data streaming abstraction multimedia application developers 
video conferencing internet telephony digital libraries examples multimedia applications 
researchers lancaster university conducted projects multimedia middleware 
blair investigated middleware implementation mobile multimedia applications dynamically adapted response environmental changes context adapt project 
openorb project successor adapt project blair continued investigation studying role computational reflection middleware 
blair designed openorb adds component design framework openorb reflective framework 
opencom implementation openorb designed microsoft com systems 
mentioned projects greatly influenced itu iso rm odp meta standard multimedia applications 
tao dynamictao adapt openorb openorb projects corba compliant 
openorb uses reflection provide dynamic adaptation 
implementation openorb current reflective architecture reflection model illustrated 
openorb categorizes reflection structural behavioral reflection distinction introduced 
structural reflection ability system inspect modify internal architecture behavioral reflection ability system inspect modify computation 
structural reflection modeled architecture interface meta models behavioral reflection modeled interception resources meta models 
architecture meta model provides access object object graph 
interface meta model provides access methods associated attributes inheritance structure interface object 
interception meta model provides interception hooks interface object including message arrival dispatching marshalling unmarshalling interception hooks 
resources meta model provides access available resources address space enables resource reservation 
dynamictao uses reflection mainly implement service configurator pattern openorb provides orb wide reflection 
consider openorb mutable middleware 
openorb reflection model 
openorb supports stream oriented applications explicit binding opposed implicit binding provided corba 
explicit binding remote objects bound explicitly programmer 
illustrates result explicit binding live video application represents communication path 
openorb reflection meta model case architecture meta model mpeg encoder replaced encoder uses lower bandwidth adapting application situation network bandwidth available decreasing run time 
open binding openorb 
squirrel qos oriented middleware specialized distributed multimedia applications 
squirrel uses abstraction support streaming data 
designers argue corba stubs skeletons generated idl interfaces follow standard protocol marshalling unmarshalling suitable multimedia applications di erent qos requirements 
solve problem squirrel introduces smart proxies service specific stubs include adaptive code 
smart proxy specific application developed shipped client program statically compile time dynamically run time 
illustrates dynamic smart proxy shipping live video application 
consider squirrel distribution layer similar corba stubs squirrel uses smart proxies hide interprocess communication details application developers 
consider squirrel tunable mutable middleware ability statically dynamically load smart proxies 
squirrel considered repeatedly tunable middleware tuning occurs just remote object binding time 
developed michigan state university address issue adaptable multimedia streams 
created existing java socket classes adaptive java reflective extension java structure behavior adapted dynamically response external stimuli 
illustrated provide pipeline abstraction similar squirrel 
adaptation supported finer grained due dynamic insertion removal filters pipeline squirrel 
filter java class developed third parties inserted pipeline run time adapt application behavior 
consider repeatedly tunable middleware 
squirrel pipeline hide socket programming application developers 
place host infrastructure layer 
squirrel dynamic shipping smart proxy 
pipeline 
reflection oriented middleware 
reflection oriented middleware supports qos oriented applications computational reflection primary focus 
specific consideration real time stream oriented applications provided type middleware 
dy openorb introduced employ computational reflection primary focus real time stream oriented applications respectively 
classify category 
opencorba corba compliant orb uses reflection expose modify internal characteristics corba 
opencorba implemented reflective language smalltalk 
opencorba reifies various properties orb explicit meta classes 
illustrates dynamic changing class breakpoint class run time 
dynamictao openorb opencorba provide global view orb similar dynamictao preserves intact orb core tuning process 
consider opencorba repeatedly tunable middleware 
opencorba provides finer grained adaptation dynamictao coarser grained adaptation openorb dynamictao supports orb adaptation opencorba supports class adaptation openorb supports interface adaptation 
flexinet corba compliant orb implemented java uses reflection provide dynamic adaptation 
flexinet designed set components dynamically assembled 
similar dynamictao flexinet provides coarse grained orb wide adaptation 
flexinet dynamically modify underlying communication protocol stack replacement insertion layers 
similar openorb flexinet provides fine grained interface adaptation depicted 
flexinet replaceable meta objects intercept requests stubs skeletons 
meta objects realize channel configuration policies adapt stubs skeletons 
consider flexinet repeatedly tunable middleware 
reflection opencorba 
flexinet architecture 
aspect oriented middleware 
aspect oriented middleware supports qos oriented applications aspect oriented programming paradigm 
similar reflection oriented middleware aspect oriented middleware provides specific consideration real time stream oriented applications 
researchers bbn technologies developed adaptive framework corba java rmi applications supports qos aspect oriented programming paradigm 
quo provides high level qos abstraction common services layer 
illustrates quo components residing application distribution orb 
quo wraps corba stubs skeletons functional delegates 
illustrated delegate intercepts outgoing requests incoming replies 
delegate consults contract methods 
contract part quo kernel aware acceptable qos regions adapts application behavior modifying requests replies current system status monitored system condition objects 
quo provides quality description language write contracts specifies qos regions 
utility translate contracts high level languages java 
addition quo provides aspect oriented structure description language asl enables developers write generic application specific aspects 
utility generate delegates corba object interfaces written idl aspects written asl contracts written 
consider quo customizable middleware quo adapts application application compile time utility 
delegates quo similar statically shipped smart proxies squirrel 
delegates wrap skeletons server side smart proxies client side 
quo architecture 
aspectix aspect oriented middleware fragmented distributed object model 
illustrates distributed object fragments distributed programs network 
fragment divided fixed interface flexible implementation 
fragment implementation simple corba stub complicated smart fragment cache previous replies locally change behavior dynamically inserted aspects 
shows aspectix aware application dynamically inspect adapt set aspects residing inside fragment implementation 
shows fragment implementation dynamically exchanged transparent application 
quo weaves aspects application statically aspectix enables dynamic weaving aspects run time 
consider aspectix repeatedly tunable middleware 
smart proxies squirrel similar smart fragments aspectix 
similar aspectix repeatedly tuned finer grained fashion squirrel 
squirrel provide aspect abstraction aspectix provides broader pipeline abstraction squirrel filter abstraction 
place aspectix distribution layer distributed object model hides interprocess communication developer 
distributed object model 
aspect configuration 
fragment exchange 
aspectix aspect oriented middleware distributed object model 
dependable middleware dependable middleware supports critical distributed applications military command control medical applications required correctly operational 
refine dependable middleware categories reliable fault tolerant 
examples category described turn follows 
taxonomy dependable middleware 
reliable communication middleware 
reliable communication middleware provides reliable communication services residing host infrastructure layer directly atop network transport layer tcp support emerging application domains mobile computing highly available fault tolerant systems 
miller university wisconsin madison developed reliable sockets rocks protect socket applications network failures 
specifically rocks address connection failures mobile computing reconfiguration reply mechanism 
examples connection failures addressed rocks include unexpected modem disconnections ip address change result mobile device movements dhcp lease expiration 
rocks resumes sessions automatically recovering period 
depicted rocks employ interception approach preloading feature linux loader interposes rocks library application code kernel tcp socket 
rocks library exports socket api kernel socket api transparently application rocks enhanced api re api applications 
rocks monitor tcp socket send receive bu ers keep copy flight packets prevent data loss presence connection failure 
reconnection rocks resends packets flight bu ers resumes tcp socket continue normal operation 
definition rocks reside host infrastructure layer 
consider rocks configurable middleware interposition rocks library occurs application startup time 
reliable packets developed miller alternative solution rocks solves problems introduced linux preloading feature 
preloading feature depends dynamic linker security reasons dynamic linker disabled setuid binaries binary runs extra privileges compromise security 
second system libraries may correctly support preloading static calls trapped preloading 
possible interposed libraries coexist rocks library 
ordering interposed libraries ects correct functioning rocks library 
depicted developed separate process opposed rocks process approach 
intercepting socket calls rocks interposed library intercept manipulates packets packet filter approach kernel mechanism enables user processes select intercept outgoing incoming packets 
definition reside common services layer 
consider configurable middleware need register packet filter kernel application startup time 
noticed fault tolerant middleware projects studied literature discussed provide fault tolerance service replication 
projects provide consis rocks architecture 
architecture 
di erent approaches fault tolerance middleware 
tency service replicas reliable group communications service 
isis horus ensemble totem coyote provide reliable group communications services 
similarity describe ensemble 
ensemble framework cornell university supports protocol graphs constructed fine grained components 
framework supports qos monitoring inserting detectors protocol graph 
detectors trigger dynamic adaptation distributing new protocol graph specification involved participants reconfiguration protocol 
consider ensemble repeatedly tunable middleware 
ensemble naturally resides host infrastructure layer 
fault tolerant middleware 
fault tolerant middleware enables applications continue operating presence faults service replication 
keep replicas consistent fault tolerance middleware benefits reliable group communications services described 
shown identified di erent approaches fault tolerance middleware integration service interception service interception reflection 
categories identified narasimhan introduced author 
examples approach described turn follows 
orbix isis iona technology isis distributed systems corba compliant orbs provide fault tolerance integrating object replication mechanism inside orbs 
depicted adapter objects integration approach 
service approach 
enable modified orb services provided reliable multicast 
orbix isis uses isis horus isis reliable multicast service 
integration approach transparent application code requires sides application modified orb 
naturally orbix isis reside distribution layer 
consider orbix isis configurable middleware configured application startup time 
object group services developed pascal felber provides corba object service supports fault tolerance corba applications 
depicted object uses corba dsi dii interfaces receive requests client object 
object uses fault tolerant protocol communicate service replicas 
returns reply application object 
approach transparent orb transparent application objects 
definition resides common services layer 
consider configurable middleware need associate objects application objects application startup time 
eternal system ucsb eternal systems illustrated provides fault tolerance interception approach 
eternal intercepts system requests originated unmodified corba orbs java virtual machines targeted kernel tcp ip protocol stack operating system user level extensions 
eternal captures system calls proc pid file unix systems 
reliable multicast service eternal uses totem 
approach transparent application orb 
place eternal layer atop totem 
consider eternal configurable middleware configuration occurs application startup time set monitoring capturing system calls 
interoperable replication logic irl developed baldoni fault tolerant service fts developed friedman middleware examples provide fault tolerance service interception techniques 
irl fts corba request portable interceptors intercept requests requests replies exceptions 
illustrates irl basic architecture 
client request portable interceptor forwards request local proxy provides fault tolerant service object replication 
definition irl fts reside common services layer 
consider irl fts configurable middleware require introduce class application orb application startup time register specific request portable interceptors application orb 
eternal architecture 
irl basic architecture 
friends system developed fabre provides meta level architecture including libraries meta objects fault tolerance secure communication group distributed applications 
friends enables non functional mechanisms implemented meta level 
reflection recursively address various non functional requirements fault tolerance replication strategies security authentication protocols communication atomic multicast protocols 
shows multi level implementation client server protocol fault tolerant security communication meta objects 
specialized mop developed friends open compilers enables intercepting interactions corba objects 
mop friends provides fault tolerance replicas corba objects meta objects 
definition friends resides layer 
consider friends repeatedly tunable middleware 
load balancer middleware 
load balancer middleware enables distributed applications continue operation presence high load 
tao load balancing tao lb developed schmidt adds load balancing tao 
tao lb employs adaptive demand architecture works follows 
client receives handle load balancer friends architecture 
target object 
corba standard location forward mechanism load balancer redirects initial client request appropriate target object replica 
corba client continues new object obtained part location forward message communicate replica directly done redirected 
adaptive load balancer forwards requests demand monitor load replica continuously 
load information policies specified application load balancer determine load distributed equally 
load unbalanced load balancer communicate replica orbs ask redirect clients back load balancer 
load balancer redirect clients loaded replicas 
similar irl fts tao lb uses corba portable interceptors provide transparent load balancing applications orbs 
definition tao lb resides common services layer 
consider tao lb configurable middleware need register interceptors application startup time 
embedded middleware advances portable computing devices rise need embedded middleware supports applications require small footprints limited available resources especially memory 
group embedded middleware classes minimum swappable 
examples category described turn follows 
taxonomy embedded middleware 
minimum middleware 
minimum middleware provides minimum footprint middleware specific domain applications just specific application 
minimum core fixed api enables adding optional feature minimum core 
minimum core required features constitutes middleware 
constitute minimum java full set java apis order fit smaller devices limited memory 
designed web connected devices set top boxes smart phones hand held devices pdas 
depicted minimum standard core required device enable web functionality 
enables automatic creation customized apis relative requirements application opposed application domain results smaller footprints 
enables java applications limited memory embedded devices including industrial controllers process controllers scientific instruments 
application may include di erent set classes required core functionality embedded devices depicted 
place host infrastructure layer support heterogeneous platforms 
consider customizable middleware produce minimum applications application compile time 
architecture 
architecture 
orbix iona technology light weight high performance corba orb designed embedded devices 
size orbix small kb client kb server programs 
consider orbix customizable middleware allows developer generate customized versions orbix consider orbix configurable middleware ability parse configuration files application startup time example load optional pluggable protocols 
similar orbix requires minimum fixed core functionality 
orbix resides distribution layer 
swappable middleware 
swappable middleware enables optional portions middleware swap conserving amount memory middleware 
universal interoperable core uic successor developed uiuc 
uic addition small footprint provided adopt personalities corba java rmi dcom interoperability purposes 
illustrates interaction uic core personalities 
uic personalities customized statically application compile time tuned dynamically late composition components run time 
uic minimum orb core runs orb strategies servants dynamically updated 
consider uic customizable repeatedly tunable middleware 
uic client side orb palmos small kb 
uic exploits customizable adaptation rare expensive changes compile time exploits repeatedly tunable adaptation frequent inexpensive changes run time 
uic server objects interoperate di erent personalities modifying implementations 
uic naturally resides distribution layer 
zen developed schmidt tao successor implemented java real time java provides micro orb architecture illustrated 
zen identifies major orb services object adapters transport protocols moved micro orb kernel 
virtual component pattern employed service dynamically pluggable 
orb service decomposed smaller pluggable components loaded orb run time required 
feature consider zen repeatedly tunable middleware 
zen employs profiling reflection techniques monitor inspect optimized configuration application tuning phase 
optimized configuration written configuration file runs application 
zen parses configuration file application startup time middleware accordingly 
zen considered configurable middleware 
zen naturally resides distribution layer 
big picture section dimensional taxonomy introduced section mapped twodimensional tables provide higher level view detailed discussions provided section uic personalities 
zen architecture 
better understand adaptive middleware research status 
tables shows adaptive middleware projects categorized respect middleware layers application domain 
table shows able find research projects domain services layer boeing bold stroke find detailed documentation 
table shows embedded middleware research trend solutions opposed layered approaches memory footprint limitation 
table adaptive middleware examples categorized middleware layers application domain 
middleware application domain layers qos enabled dependable embedded domain services common quo irl fts services tao lb tao ciao orbix openorb friends uic distribution squirrel dynamictao zen flexinet opencorba aspectix orbix isis orbix host infra 
ace eternal isis horus ensemble totem rocks table categorizes adaptive middleware projects middleware layers adaptation type 
table shows adaptive middleware research exploited static dynamic adaptations 
mutable middleware received attention probably need safe adaptation research mature 
safe adaptation harness dangerous power dynamic adaptation provided mutable middleware 
table shows trend hybrid solutions adaptation 
table adaptive middleware categorized middleware layers adaptation type 
middleware adaptation type layers static dynamic customizable configurable tunable mutable common quo irl fts friends services tao lb squirrel tao ciao orbix tao dynamictao uic openorb distribution uic orbix isis squirrel opencorba orbix orbix zen flexinet aspectix zen host infra 
eternal horus ace isis totem rocks ensemble hybrid adaptation 
table shows supporting paradigms employed adaptive middleware project 
table shows computational reflection software design patterns relatively studied adaptive middleware research aspect oriented programming componentbased design 
table shows relatively academic research projects dcom corba java rmi 
survey established taxonomy traditional middleware reintroduced 
transactional message oriented procedural object oriented middleware categories focused object oriented middleware basis adaptive middleware approaches discussed 
object oriented paradigm provides limited support adaptation middleware 
identified major paradigms addition object oriented paradigm critical adaptive middleware research computational reflection component design aspect oriented programming software design patterns 
proposed dimensional taxonomy adaptive middleware categorize di erent orts supporting adaptation distributed applications adaptive middleware 
adaptive middleware projects discussed put big picture provide better understanding adaptive middleware research status 
table paradigms adaptive middleware project 
adaptive middleware ref cbd aop sdp compliance ace tao real time dynamictao ciao orbix openorb qos enabled stream openorb middleware oriented squirrel reflection flexinet oriented opencorba aspect quo oriented aspectix isis horus reliable ensemble communication totem rocks dependable middleware orbix isis fault tolerant eternal irl fts friends load balancer tao lb orbix embedded minimum middleware swappable uic zen ref computational reflection 
cbd component design 
aop aspect oriented programming 
sdp software design patterns 
corba compliant 
java rmi compliant 
dcom compliant 
adaptive middleware ongoing research requires areas 
domain specific middleware services requires serious attention 
projects successfully provided common services middleware 
enable reuse separation concern specific application domain domain specific middleware services widely available 
second mutable middleware provides powerful time dangerous dynamic adaptation types adaptive middleware turn application totally di erent unexpected 
benefit mutable middleware harness power techniques safe adaptation 
third applying overlapping adaptations distributed application may cause inconsistency application 
problem feature interaction problem pattern recognition needs addressed adaptive middleware 
realized adaptive middleware solution adapt distributed applications 
finding optimized adaptive middleware solution current state practice adaptive middleware approaches easy task 
developer needs know available middleware approaches spend lot time money find optimized solution 
developing tools techniques high level paradigms assist developer tedious process useful research area promotes development adaptive software 
information 
number related papers technical reports software engineering network systems laboratory url www cse msu edu sens dr philip mckinley supervised led research area 
am grateful invaluable advice 
dr betty cheng dr kurt available questions 
help contribution 
researchers cited survey 
maes concepts experiments computational reflection proceedings acm conference object oriented languages oopsla december 
szyperski component software object oriented programming 
addison wesley 
kiczales lamping mendhekar maeda lopes loingtier irwin aspect oriented programming proceedings european conference object oriented programming ecoop springer verlag lncs june 
schmidt stal rohnert buschmann pattern oriented software architecture vol 

john wiley 
schmidt ryan virtual component design pattern memory constrained embedded applications th conference pattern language programs plop 
schmidt middleware real time embedded systems communications acm vol 
june 
campbell coulson managing complexity middleware explained professional ieee computer society pp 
september october 
bakken middleware 
kluwer academic press 
emmerich software engineering middleware roadmap proceedings conference software engineering pp 

bernstein hadzilacos goodman concurrency control recovery database systems 
addison wesley 
cics guide internal structure 
wiley 
hall building client server applications 
wiley 
gilman schreiber distributed computing ibm mqseries 
wiley 
sharma java message service specification tech 
rep sun microsystems nov 
birrell nelson implementing remote procedure calls acm transactions computer systems pp 
march 
open group dce remote procedure calls 
object management group old connecticut path framingham ma usa common object request broker architecture specification revision feb 
java soft java remote method invocation specification revision jdk edition oct 
microsoft microsoft com technologies dcom 
www microsoft com com dcom asp 
object management group old connecticut path framingham ma usa common object request broker architecture specification revision july 
corba integrating diverse applications distributed heterogeneous environments ieee communications magazine vol 

www cs wustl edu schmidt corba overview html 
java sun com docs books tutorial rmi overview html 
com delivering promises component technology 
www microsoft com com default asp 
raj detailed comparison corba dcom java rmi detailed code examples object management group omg whitepaper sept 
chung huang yajnik liang shih wang wang dcom corba side side tech 
rep microsoft dcom technical white 
gamma helm johnson vlissides design patterns elements od reusable objectoriented software 
addison wesley professional computing series new york ny addison wesley publishing 
lieberherr adaptive object oriented software demeter method 
pws 
rao implementational reflection proceeding ecoop pp 
springerverlag 
kiczales black box open implementation ieee software vol 
jan 
bergmans aksit composing crosscutting concerns composition filters communications acm pp 
october 
wang schmidt evaluating meta programming mechanisms orb middleware ieee communications magazine special issue evolving communications software techniques technologies october 
death computer languages birth intentional programming 
harrison ossher subject oriented programming critique pure objects oopsla 
smith reflection semantics lisp proceedings th acm symposium principles programming languages pp 

kiczales rivieres bobrow art metaobject protocols 
mit press 
blair coulson davies adaptive middleware mobile multimedia applications proceedings th international workshop network operating system support digital audio video nossdav pp 

chiba study compile time metaobject protocol 
mca er meta level support distributed proceeding reflection san francisco ca usa pp 

matsuoka watanabe yonezawa object oriented concurrent reflective languages implemented ciently proceedings conference object oriented programming systems languages applications oopsla paepcke ed vol 
new york ny pp 
acm press 
okamura ishikawa tokoro distributed programming system multimodel reflection framework proceedings workshop new models software architecture nov 
kernel structuring object oriented operating systems approach object technologies advanced software international symposium vol 
pp 
springer verlag 
islam campbell reification reflection operating systems perspective tech 
rep uiucdcs university illinois urbanachampaign department computer science urbana champaign 
orr applications meta protocols improve os services fifth workshop hot topics operating systems hotos pp 
may 
kon roman liu mao campbell monitoring security dynamic configuration dynamictao reflective orb proceedings ifip acm international conference distributed systems platforms middleware new york april 
blair coulson robin papathomas architecture generation middleware proceedings ifip international conference distributed systems platforms open distributed processing middleware lake district england september 
hayton flexinet open orb framework 
apm oct 
ledoux opencorba reflective open broker lecture notes computer science vol 

roman kon campbell ubiquitous corba proc 
ifip acm middleware workshop reflective middleware rm new york usa april 
roman kon campbell reflective middleware desk hand 
ieee distributed systems online journal 
fabre metaobject architecture fault tolerant distributed systems friends approach ieee transactions computers vol 
pp 

ancona reflective middleware reflection tech 
rep disi tr universita degli studi di milano may 
www disi unige person html 
mckinley architecture operation adaptable communication substrate th international workshop trends distributed computing systems may 
design implementation meta architecture java master thesis university erlangen jan 
mckinley separating introspection metamorphic distributed systems proceedings ieee workshop aspect oriented programming distributed computing icdcs vienna austria july 
adve lam language compiler support adaptive distributed applications proceedings acm sigplan workshop optimization middleware distributed systems om snowbird utah june 
redmond cahill supporting unanticipated dynamic adaptation application behaviour th european conference object oriented programming vol 
malaga spain june 
wang schmidt adaptive reflective middleware framework qos enabled corba component model applications distributed system online special issue reflective middleware 
sane campbell middleware proc 
th international conference distributed computing systems icdcs netherlands pp 
may 
schmidt ryan highly configurable real time object request brokers fifth ieee international symposium object oriented real time distributed computing april may 
sun microsystems java sun com products ejb enterprise javabeans technology 
object management group www omg org cgi bin doc ptc corba components model drafts mof 
sullivan aspect oriented programming reflection metaobject protocols communication acm october 
yang cheng mckinley aspect oriented approach dynamic adaptation proceedings workshop self healing software nov 
david ledoux step weaving reflection aspectj oopsla workshop advanced separation concerns object oriented systems tampa usa october 
zinky bakken schantz architectural support quality service corba objects theory practice object systems vol 

ren henke sander bakken berman karr schantz aqua adaptive architecture provides dependable distributed objects th ieee symposium reliable distributed systems oct 
geier becker hauck meier support mobility replication aspectix architecture tech 
rep tr univ erlangen iv 
becker management adaptive qos enabled services proceedings ieee workshop middleware distributed real time systems services 
schmidt levine design tao real time object request broker computer communications vol 
pp 
april 
schmidt adaptive communication environment object oriented network programming toolkit developing communication software concurrency practice experience vol 
pp 

design optimization performance adaptive middleware load balancing service master thesis university california irvine 
miller reliable network connections acm mobicom atlanta september 
baldoni marchetti active software replication tier approach proceedings th ieee international symposium reliable distributed systems srds osaka japan pp 
october 
sharp reducing avionics software cost component product line development software technology conference salt lake city ut april 
sun microsystems application environment 
java sun com products 
object management group old connecticut path framingham ma usa common object request broker architecture specification version july 
available doc ece uci edu corba formal pdf 
trader 
java tech 
rep object oriented concepts 
www iona com products home htm 
moser melliar smith narasimhan eternal system architecture enterprise applications rd international enterprise distributed object computing conference edoc july 
schmidt network programming mastering complexity ace patterns 
addison wesley longman 
www cs wustl edu schmidt ace overview html 
www cs wustl edu schmidt tao html 
nahrstedt hua chu narayan qos aware resource management distributed multimedia applications special issue multimedia networking high speed network dec 
kon costa blair campbell case reflective middleware communications acm vol 
pp 
june 
blair coulson andersen clarke costa duran moreira design implementation open orb version 
ieee distributed systems online journal 
clarke blair coulson cient component model construction adaptive middleware lecture notes computer science vol 

itu iso model open distributed processing parts 
itu iso iec 
watanabe yonezawa reflection object oriented concurrent language proc 
acm conference object oriented programming systems languages san diego ca usa pp 
sept 
fitzpatrick blair coulson davies robin supporting adaptive multimedia applications open bindings proceedings international conference distributed systems may 
koster black huang walpole pu thread transparency information flow middleware proceedings middleware ifip acm international conference distributed systems platforms open distributed processing springer verlag nov 
koster middleware platform information flows 
phd thesis department computer science university kaiserslautern germany july 
koster black huang walpole pu composing distributed information flows proceedings international workshop multimedia middleware pp 
acm oct 
goldberg robson 
addison wesley 
schantz loyall pal packaging quality service control behaviors reuse th ieee international symposium object oriented real time distributed computing washington dc april may 
van steen tanenbaum architectural design globe wide area distributed system tech 
rep vrije universiteit faculty mathematics computer science amsterdam netherlands march 
mccanne jacobson bsd packet filter new architecture user level packet capture usenix winter pp 

birman van renesse reliable distributed computing isis toolkit ieee computer society press 
renesse birman guo hayden hickey malki vogels horus flexible group communications system tech 
rep tr 
van renesse birman hayden karr building adaptive systems ensemble software practice experience vol 
august 
moser melliar smith agarwal totem system ftcs th international symposium fault tolerant computing digest papers pasadena california pp 

bhatti schlichting chiu coyote system constructing fine grain configurable communication services acm transactions computer systems vol 
pp 

narasimhan moser melliar smith interception approach reliable distributed corba objects proceedings rd conference object oriented technologies systems coots usenix 
ma eis adding group communication fault tolerance corba proceedings conference object oriented technologies pp 

orbix isis programmer guide tech 
rep isis distributed systems iona technologies 
felber guerraoui reliable corba integration vs service approach special issues object oriented programming ed pp 

narasimhan moser melliar smith transparent fault tolerance enterprise applications international conference advances infrastructure electronic business science education internet aquila italy july august 
alexandrov schauser extending operating system user level ufo global file system pp 

marchetti baldoni corba request portable interceptors performance analysis nd international symposium distributed objects applications doa rome italy sept 
friedman client side enhancements portable interceptors th ieee international workshop object oriented real time dependable systems words january 
sun microsystems application environment 
java sun com products 
iona technology orbix www iona com products orbix htm 
nilsen issues design implementation real time java java developers journal 
cheng yang zhang enabling safe dynamic adaptation tech 
rep msu cse department computer science michigan state university east lansing michigan may 
venkatasubramanian safe composability middleware services communications acm vol 
june 

