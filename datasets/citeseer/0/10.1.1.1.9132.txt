arie van deursen software evolution research lab cwi delft univ technology netherlands arie van deursen cwi nl argue need research area aspect mining covering concepts principles methods tools supporting identification aspects objectoriented software systems subsequent refactoring systems aspect oriented systems 
give overview state art area shows research directions considered describes ongoing efforts 
provide initial assessment reverse engineering software exploration techniques help aspect mining identify promising research directions pose number research questions help advance state art aspect mining refactoring 

aspect oriented programming software engineering decomposing large software system smaller parts essential way managing complexity evolution today software systems 
decomposition results separation concerns facilitates parallel team specialization localized change systematic testing quality assurance planning 
unfortunately certain behavior software systems error handling logging inherently difficult decompose isolate leading reduced reliability maintainability systems 
aspect oriented programming aop came paradigm aimed making cross cutting concerns briefly aspects explicit uses code generation techniques weave aspects back application logic 
separation solves inherent problems code scattering tangling large object oriented systems 
currently aop entering innovation phase new challenges arise technology largely adopted practice extends 
release aspect van deursen received partial support project ideals hosted embedded systems institute eindhoven netherlands 
aspect mining refactoring marius marin software evolution research lab delft university technology netherlands marin tudelft nl leon moonen software evolution research lab delft univ technology cwi netherlands leon moonen acm org oriented development tools aspectj contributions research groups integration application servers jboss bea weblogic illustrate increasing popularity aop 
aspect mining topic aspect mining refactoring search candidate aspects existing object oriented systems isolating system separately described aspects 
goal migrating object oriented system aspect oriented includes improving comprehensibility system improving maintainability extensibility evolvability 
order convincing arguing aop important step forward number important questions need answered 
investigating new cross cutting concerns classical example logging ways done 
additionally number concerns regarding aop expressed risk getting spaghetti code ad hoc design due improper free defined unrestricted pointcuts 
concerns raise question aop really needed oop right solution 
believe aspect mining help finding answers questions alike 
software system mining software mining techniques aim finding valuable information source code software system order information explicitly available software engineers involved evolution system 
typical software mining example business rule extraction 
software system mining supported software exploration 
typically involves steps data collection source code knowledge inference abstraction collected data information presentation example hypertext visualizations 
provide initial assessment software exploration techniques help aspect mining 
eclipse org aspectj www jboss org www bea com refactoring refactoring change internal structure software easier understand cheaper modify changing observable behavior 
refactorings systematically organized catalogs similar way design patterns 
hints certain refactorings applicable provided called code smells suspicious code parts require improvement 
position statement argue need research area aspect mining covering concepts principles methods tools supporting identification aspects object oriented software systems subsequent refactoring systems aspect oriented systems 

state art date number research groups working area aspect mining 
summarize main results ongoing efforts 
identification aspects requires clear idea aspects 
study general domain specific aspects prerequisite aspect mining 
start known crosscutting concerns example ones bea weblogic aspect framework 
framework aspectj defines ee pointcuts users write advices 
research activities identifying crosscutting concerns source code performed kiczales 
aspect mining tool amt supports text type analysis 
extended types analysis searches 
analyzes benefits drawbacks amt set multi modal analysis tool permitting combined different techniques 
analysis works query results series matched lines visualized system source code 
aspect browser tool assumption aspects defined secondary design decisions signature textual pattern lexical token textual regular expression help identification 
similar text analyzes amt tool strongly depends naming conventions analyzed code 
location code implements concerns represented graphically views seesoft concept 
aspects identified dynamic program analysis techniques 
approach proposed defines certain classes aspects dynamic trace patterns 
mining process searches patterns program traces captured execution 
main classes considered outside aspects call method followed call method inside aspects call method inside call method 
distinguish subclasses outside aspects specific method call inside aspects specific method call 
research rashid addresses question aspects existing system represented 
approaches considered storing aspect object binary character object description meta data queried mapping aspect anatomy database model allow storing aspect properties hybrid approach combination previous 
mapping aspects relational database model detail 
aspect mining zhang jacobsen conduct quantitative analysis tangling scattering phenomenon existing legacy implementations middleware platforms architectures corba 
new aspects specific chosen platform defined abstractions crosscut major architectural components considered authors reported 
dynamic programming model portable interceptors 
aop re factorization number aspects identified performed quantified results aim demonstrate reduction complexity improvement performances compared original implementation 
tool analysis amtex built top amt tool described earlier 
concern graphs represent way document analyze concerns 
localizing abstracted representation program elements contributing implementation concern 
structure concern stored concern graph time relationships concern elements classes methods fields documented 
approach implemented tool feat 
supports analysis dependencies concern rest program allows viewing source code java system associated concern graph element 
concern identification feat supports structural queries integrated lexical searches 
tool displays concern graph collection trees respect certain convention root tree class contributes implementation concern 
feat implemented eclipse plug 
jquery eclipse plug provides generic browser allows user define logic queries specific query language 
queries run source code java working set interest results viewed browsed 
organization nav www utoronto ca amtex code different structural relationships regular expression matches complex searches structural patterns 
jquery generally useful authors argue navigation support particularly important exploring cross cutting concerns 

research questions looking existing reverse engineering software exploration perspective see knowledge inference step invents higher levels abstraction underdeveloped existing aspect mining concentrates distill concern related data sources signatures lexical pattern matching data example visualization 
steps may support human engineer aspect mining unable come aspect 
section focus bit knowledge inference step explore number research directions help advance state art aspect mining refactoring 
clone detection lack support aspects forces developers scatter code various modules 
actual code dealing example logging error handling similar various modules 
suggests clone detection general technique detecting duplicated code may beneficial aspect identification 
raises questions specific clone detection techniques suitable aspect identification 
error margins false positive false negative obtain clone detection aspect identification 
aspect specific clone detection integrated software exploration tools 
slicing slicing program analysis technique aimed isolating code affecting value certain variable 
interesting research question slicing best put isolation candidate aspects rest code 
issue address concerns nature slicing techniques needed aspect isolation 
question needs addressed information obtained traditional slicing techniques purpose aspect identification 
dynamic analysis technique finding code devoted logging run instrumented system logging switched second time logging switched 
analysis execution traces help find code devoted logging delivering step reconstruction logging code 
raises questions domain specific aspect mining techniques trace analysis techniques appropriate code instrumentation techniques 
initial step dynamic analysis discussed 
remain lot open issues need investigation 
cluster concept analysis aspect oriented programming remodularization 
active area reverse engineering research concerned automated cluster analysis techniques aimed grouping pieces functionality procedures programs coherent modules 
aop deals pieces functionality hard impossible modularize 
interesting question presence cross cutting concerns affects automated remodularization attempts 
potentially promising route concept analysis 
concept analysis shows possible concise concept lattice 
research needed order understand cross cutting concerns show concept lattices 
comparison cluster concept analysis provided 
refactoring refactoring involves systematic categorization code smells elementary program transformations techniques automate smell detection refactoring process 
relation aspect identification migration questions arise existing code smells identify candidate aspects 
aspects described terms catalog new refactorings 
software exploration techniques needed support detection aspect related smells 
testing implications migration aspectoriented software development approach bear 
case studies aspect mining research results validated means series case studies 
ensure repeatability experiments subject systems selected open source domain 
addition subject systems industrial partners interested aspect identification systems ensure practical applicability proposed techniques 
open questions area subject systems selected selection criteria mining results validated techniques criteria 
example assess completeness mining technique potential aspects subject systems known advance highly case industrial open source system 
assessing value aspect isolation mining refactoring aspects done certain goals mind example improving maintainability code improving comprehensibility extensibility 
consequently performing source code transformation isolate certain candidate aspects sources capture aspect oriented way needs assess value migration respect goals 
need assessing value aspect raises questions go measure value aspect system 
suitable metrics measure effects aspect 
aspect oriented systems need different metrics ordinary systems 

concluding remarks aspect mining research concerned development concepts principles methods tools supporting identification aspects object oriented software systems subsequent refactoring systems aspect oriented systems 
explored state art aspect mining research identified series promising research directions 
research results support software development continuously analyzing system built order identify code smells requiring aspects aspect smells requiring aspect specific refactorings 
aspect mining completed systems order offer better support evolution system 
additionally aspects serve role landmarks exploration software system chap 

aspect mining research useful order assess actual value aspect oriented development 
breu krinke 
aspect mining dynamic analysis 
workshop software reengineering bad 
van deursen kuipers 
identifying objects cluster concept analysis 
proc 
int 
conf 
software engineering icse pages 
acm 
eick steffen sumner 
seesoft tool visualizing line oriented software 
ieee transactions software engineering november 
griswold kato yuan 
tool support managing dispersed aspects 
technical report cs 
kiczales 
overcoming prevalent decomposition legacy code 
proc 
workshop advanced separation concerns 
ieee 
de 
navigating querying code getting lost 
proc 
nd int 
conf 
aspect oriented software development aosd pages 
acm press march 
kiczales lamping mendhekar maeda lopes 
loingtier irwin 
aspectoriented programming 
th conf 
object oriented programming volume lncs pages 
springer verlag 
rashid 
mining aspects 
workshop early aspects aspect oriented requirements engineering architecture design enschede netherlands 
aosd satellite workshop 
rashid 
relational database support aspect oriented programming 
proceedings conference number lncs pages 
moonen 
exploring software systems 
phd thesis faculty natural sciences mathematics computer science university amsterdam december 
murphy 
concern graphs finding describing concerns 
proc 
int 
conf 
software engineering icse 
ieee 
zhang 
jacobsen 
quantifying aspects middleware platforms 
proc 
nd int 
conf 
aspect oriented software development aosd pages 
acm press march 
