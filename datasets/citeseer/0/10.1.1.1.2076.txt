solar building context fusion network pervasive computing carol dean graduate studies dartmouth technical report tr dissertation submitted faculty partial fulfillment requirements degree doctor philosophy computer science chen dartmouth college hanover new hampshire august examining committee chair david kotz robert gray sean smith copyright chen dissertation solar building context fusion network pervasive computing dartmouth technical report tr chen doctor philosophy computer science dartmouth college hanover nh august professor david kotz chair complexity developing context aware pervasive computing applications calls dis tributed software infrastructures assist applications collect aggregate disseminate con textual data 
dissertation context fusion network cfn called solar built scalable self organized service overlay 
solar flexible allows applications select distributed data sources compose customized data fusion operators directed acyclic information flow graph 
graph represents application computes high level understandings execution context low level sensory data 
manage application specified operators set overlay nodes called planets solar provides unique services application level multicast policy driven data reduction handle buffer overflow context sensitive resource discovery handle environment dynamics proactive monitoring recovery handle common failures 
experimental results show services perform typical dht peer peer routing substrate 
dissertation discuss ex insights lessons learned quantitative analysis input sensors detailed case study solar application development applications different domains 
iii iv acknowledgments parents love encouragement valuable asset 
due advisor david kotz countless invaluable discussions ideas practical support helped see research 
experience insight great assistance time dartmouth 
supervising internship ibm research strongly supporting job search critical time professional life 
great friend colleague 
want bob gray ron peterson incredible patience answering questions willingness fellow students time dartmouth enjoyable experience 
special working environment lively david wagner lea petrovic deshpande 
wife loving support past years 
funding gratefully acknowledge support cisco systems university research program microsoft research usenix scholars program darpa contract dod muri contract 
project supported award dt cx office domestic preparedness department homeland security 
points view document author necessarily represent official position department homeland security sponsor 
vi contents iii acknowledgments background 
context aware applications 
research challenges 
summary contributions 
solar overview operator composition 
filter pipe pattern 
operator graph 
functional separation 
composition language 
planetary overlay 
distributed hashtable 
planet architecture 
service interaction 
related 
data dissemination application level multicast 
buffer overflow 
data reduction policy 
policy specification 
policy execution 
buffer management 
event routing 
queue reduction 
ladder algorithm 
evaluation 
queueing tradeoff 
buffering overhead 
vii client attach detach 
application tests 
related 
naming discovery naming representation 
context sensitive resource discovery 
name specification 
implementation ins 
extending ins 
ins 
camera example 
evaluation 
latency measurements 
scalability analysis 
graph loading 
improving scalability 
related 
dependency load balance dependency management 
component registration 
monitoring recovery 
tracking dependencies 
protocol optimizations 
evaluation 
related 
load balancing 
sensor analysis versus sensors 
wlan sensors 
measurements results 
data quality 
data volume 
load disparity 
sighting interval 
prevalence 
application studies meeting detection 
system design 
evaluation 
discussion 
applications 
experiences lessons 
viii contributions 
limitations 

bibliography ix list tables notation discussion dependency management 
list data fields record vis location trace 
statistics daily location update traffic 
standard deviation divided mean value coefficient variation 
mobility matrix localization systems prevalence metric 
xi xii list figures context defined implicit input applications 
filter pipe software architecture style promotes reuse composition 
example operator graph security control application 
instrumented chair wireless pressure placed seat mat motion sensor taped back chair 
simplified operator graph detecting human presence instrumented chair 
xml example encodes operator graph shown 
solar consists set functionally equivalent planets form service overlay 
architectural diagram planet 
portion planet service configuration 
partial service interaction planet 
multiple data dissemination paths converge multicast tree 
multicast service consists set planets run pack policies 
example data reduction policy filters 
filter takes event digest input queue order 
level indexing structure buffers having sender key index 
comparison queueing behavior event reduction droptail solid line level pack policy dashed line 
buffering overhead measurements non congested link top plot congested link bottom plot 
note different scales 
measurements client detach attach delay 
setup campus wide wifi locator applications 
statistics derived pack trace collected behalf mac ip locator level filtering policy 
camera advertisement left query right find canon cameras building sudikoff 
nursing home example shows output operator graph select advertisement subscription 
example graph specification calculate alice current location define context sensitive subscription 
set solar naming api methods 
system architecture solar ins layers 
deployment variants camera examples 
xiii setup latency tests 
latency results fixed hosts 
latency results mobile hosts 
results scalability tests 
operator graph chain measure performance graph loading 
measured time load operator chain 
dual monitoring planet behalf operators attached clients 
component root tracks dependencies 
assume depends 
operator recovery time milliseconds planet crash 
distribution operator migration time minute run 
versus distribution location updates badges sensors 
campus distribution location updates cards access points 
campus distribution average sighting intervals minutes 
versus distribution average sighting intervals seconds 
versus distribution missed pings various badges 
versus distribution detection delay badges 
versus ir scatterplot prevalence badges 
versus rf scatterplot prevalence badges 
campus syslog scatterplot prevalence cards 
campus snmp scatterplot prevalence cards 
instrumented meeting space controlled telephone automatically transferred incoming call voice mail interrupting ongoing meetings 
operator graph meeting detection sensor fusion 
meeting table chairs motion sensors chair pressure sensor 
state machine illustration sensor combination algorithm 
meeting table chairs motion sensor chair pressure sensor 
definitions evaluation metrics meeting detection 
cdf plots represent results different metrics 
active web portal shows customized content approaching user 
browser wireless client get location dependent information instrumented web proxy 
graffiti application running mobile devices allows user leave retrieve current location 
command control applications running remote provide situational awareness decision makers 
front application running mobile device carried responders 
xiv chapter essence pervasive computing called ubiquitous computing enhance environment embedding computers gracefully integrated human users 
time mark weiser proposed vision early nineties hardware needed achieve pervasive computing simply exist 
decade technology progress computers specialized general purpose different form factors heterogeneous wireless networks available commercial products 
result better position pursue pervasive computing vision seen pervasive computing projects growing academic universities industries 
pervasive computing environment challenges existing computational models large scale devices users portable resource constrained hardware platforms heterogeneous volatile wireless networks non conventional user interfaces need dependable adaptive system software :10.1.1.24.6338
particular information rich pervasive computing environment overwhelming users surrounded embedded devices 
gracefully integrate computation communication saturated environment human users pervasivecomputing applications need context aware 
applications aware adaptive situation running avoid exposing unnecessary information complexity users 
definitions context research community context may involve aspects state physical space human users computational resources :10.1.1.117.4330
lieberman selker loosely define context input explicit input output shown explicit input user intentional action key strokes mouse clicks 
implicit input explicit input output application context defined implicit input applications 
applications typically derive desired context information implicit input physical sensors online information sources 
critical challenge applications sensor data may accurate sensor limited view reality hardware may error prone 
conversion raw data high level context information user current activity requires applications pre process data filtering transforming aggregating different types distributed sensors improve quality derived context 
reasonably accurate context applications confident adaptation decisions 
context computation involve simple filtering value match involve sophisticated data correlation machine learning techniques 
process deriving higher level understanding lower level sensory data call context fusion 
believe context fusion plays critical role improving accuracy derived context exact fusion technique application domain specific 
consider message delivery application message destined particular user delivered nearby phone device carried user 
user location key context implicit input obtained commercial experimental location provision systems different accuracy precision coverage particular deployment 
necessary combine output available locators yield best location estimation 
instance hightower trained bayesian network purpose 
deliver message user queue message temporarily user having meeting boss application may leverage sensors derive activity context 
discuss particular approach implemented pressure motion sensors chapter 
overwhelming complexity heterogeneous volatile pervasive computing environment acceptable individual application maintain connections sensors process raw data scratch increases programmer burden application may poorly resource constrained mobile device 
hand feasible deploy common context service meet application needs context application specific diverse applications different information needs 
envision infrastructure allows applications share data fusion computations inject additional fusion functions context customization necessary 
goal research provide infrastructure system flexible meet diverse application needs scalable service hundreds thousands sensors applications users 
kind system just content delivery network cdn connects multiple sources sinks 
system needs accommodate application specific data fusion functions deliver higher level context applications typically want raw sensory data 
call system context fusion network cfn 
rest chapter background information context aware pervasive computing discuss motivating context aware applications summarize contributions give outline dissertation 
background authors distinguish pervasive ubiquitous comes computing visions 
argue difference exists pervasive computing aims information available ubiquitous computing requires information available 
pervasive computing essentials emerged ubiquitous computing age come 
hand seen major pervasive ubiquitous computing projects academia project aura cmu endeavour uc berkeley oxygen mit university washington 
industry examples include research hp labs ibm research intel research 
efforts addresses different mix issues different blend near term far term goals 
represent broad communal effort pervasive ubiquitous computing reality 
purpose dissertation treat terms synonymously 
pervasive computing philosophy essentially user centered goal technology calm invisible users 
examples older technologies calm include motors ubiquitously employed natural users typically think 
pervasive computing paradigm aims build user centric information rich applications 
path pervasive computing lead building powerful mainframe computers 
pervasive computers different configurations specialized optimized individual tasks 
norman gives analogy comparing individual specialized tools scissors knife screwdriver swiss army knife trades utility usability portability 
calls computer designed perform specific task information appliance 
distinguishing feature information appliances ability share information 
researchers xerox parc pioneered approach building various computers different form factors palm sized tabs pads wall mounted boards 
researchers build things scratch assembling hardware designing wireless networks writing new operating systems middleware infrastructure applications 
devices parctab considered significant effort 
constraints hardware capability prevented pervasive computing time 
context awareness key approach meet goal pervasive computing graceful integration human users early research days 
schilit researchers xerox parc categorize context aware applications built top parctab platform 
identify context usage patterns proximate selection automatic contextual reconfiguration contextual information commands context triggered actions 
satyanarayanan summarized challenges context aware pervasive computing context representation middleware support adaptation models 
terms context overloaded term 
researchers different perspectives definition context typically involves state physical space human users computational resources :10.1.1.117.4330
particular context piece application specific time sensitive information 
desired context applications may automatically adapt www cs cmu edu aura endeavour cs berkeley edu oxygen lcs mit edu cs washington edu context changing behaviors call active context awareness 
application may new updated context interested user context persistent user retrieve call passive context awareness 
application context rich concept location information attracted attention 
location objects users immediately useful large set applications 
location information infer high level context meetings assistance inputs 
recognition importance location context resulted numerous active projects location provision systems location models :10.1.1.12.1285
need apply data fusion multiple incoming sensor streams improve quality computed context recognized researchers 
may possible integrate sensors single platform particular application augmented mobile phone concerned larger scenarios distributed sensors multiple applications different devices may benefit aggregation multiple data sources 
applications require customized context tailored needs may standard data fusion steps similar identical applications 
research efforts address need distributed data fusion higher level contextual understanding 
dey propose context toolkit wrapping sensors widget abstraction computing context aggregators :10.1.1.9.5130
hong landy propose context fabric answers context queries automatically constructed data flow path selecting appropriate operators repository 
systems focus interface systems applications goal reducing programming complexity 
systems largely ignored system issues mobility scalability reliability 
list research directions survey context aware computing techniques context modeling representation supporting system infrastructure security privacy :10.1.1.117.4330
dissertation focus flexible scalable context fusion infrastructure collects aggregates disseminate contextual information 
context aware applications important application area smart spaces office buildings residential homes mit house georgia tech aware home 
smart spaces typically contain instrumented sensors actuators augmented daily objects unconventional devices 
cfn provide unified approach connect sensors applications may cfn customize individual information needs 
applications may aggregated context location user activities teleport window session automatically route phone call guide user space proactively remind users tasks help users interact nearby objects coordinate group interaction help occupants space control environment assist child education assist laboratory experiments automate elder care tasks 
extensions similar applications wider area campus city include location content delivery tour guide annotation 
schilit give categorization architecture mit edu house www gatech edu innovations typical context aware applications environments 
application area emergency response dealing disaster crisis natural man timely effective manner 
situations diverse sensors deployed environment carried victims responders installed various equipment vehicles produce huge amount data 
human users may act data sources entering observations voice text move 
cfn provide scalable information infrastructure handle hundreds thousands information flows 
cfn facilitate hierarchical data fusion provide situational awareness resource availability decision makers various participating organizations playing different role incident command hierarchy 
contextual information customized prioritized suit roles command levels 
response proceeds crisis evolves decision makers may cfn quickly deploy new data fusion functions dynamically adapt information spaces changes 
battlefield large scale environment similar information needs intelligence gathering situation awareness 
research challenges goal cfn flexibility 
cfn common context service way service provider foresee context needs diverse applications 
cfn allow deployment known context services application specific customization user specific personalization 
addition cfn limit expressiveness data fusion algorithms 
accommodate arbitrary context computations chosen individual applications 
flexible cfn encourage sharing context computation multiple applications facilitate development deployment 
particular challenge smart space emergency response environments system scalability 
cfn able handle large number sensors devices applications users 
easy increase cfn capacity handle increased load necessary 
particular cfn provide scalability layers naming discovery layer data dissemination substrate fault recovery modules 
sharing context computation applications increases scalability reducing redundant computation network traffic 
host physical mobility inherent pervasive computing environment addressed explicitly 
desired portability mobile device leads asymmetric capabilities mobile infrastructure host 
moving device connecting cfn may traverse geographic network boundaries 
hand logical mobility may play important role cfn may move context fusion components infrastructure balance computation load efficiently available bandwidth 
scalability mobility designed multiple service layers 
complexity pervasive computing environment may quickly overwhelm human user ability manage supporting systems 
cfn self managed minimum user intervention adapt movement applications fusion components due physical logical mobility proactively monitor host failures automatically recover lost components hosts 
cfn garbage collection mechanism reclaim resources application specific fusion components longer 
summary cfn provide flexible self managed pervasive computing platform scalability mobility inherent design goals 
prototype system named solar context fusion network meets research challenges 
summary contributions section summarize contributions dissertation give outline chapters 
solar provides flexible scalable context fusion network pervasive computing environments 
programming model graph composition model 
model allows applications deploy custom data fusion functionality inside network 
chapter discuss composition model solar service oriented architecture 
solar application level multicast service employs policy driven data reduction technique allows loss tolerant context aware applications trade completeness fast delivery case buffer overflows caused rapid data streams slow receiver 
design implementation evaluation chapter 
solar naming service supports persistent queries context sensitive resource discovery handles environment dynamics allows applications load traffic computation infrastructure 
design implementation evaluation chapter 
solar dependency management service employs set component monitoring dependency tracking protocols automatically recover operators lost due host failures automatically adjust operator graph structure changes resource availability 
design implementation evaluation chapter 
detailed analysis sensor traces collected location tracking systems daily usage provides quantitative characteristics typical pervasive computing environments 
analysis chapter 
experiences insights lessons learned building context aware pervasivecomputing applications open source software package provide valuable benefits researchers community 
application case studies chapter 
summarize ideas chapter 
chapter solar overview solar middleware infrastructure kinds clients sensors data sources applications data sinks 
sensor may publish data stream pushing data items called events solar 
sensors may pull interface allowing users query current state 
applications ask solar find specified sensors execute application supplied data fusion operators compute context 
operator independent data processing module takes data sources input acts data source 
implemented solar prototypes java 
prototypes adopted operator composition programming model similar design choices 
implemented prototype centralized architecture simplicity pervasive computing seminar courses solar students develop applications 
experience prototype including analysis sensor environment performance interoperability security access control design application studies contributed design implementation second version solar :10.1.1.13.4675
second prototype fully distributed self organized architecture software package consisted lines code 
version research contributions generalizable operator management services 
chapter discuss solar operator composition model system architecture services manage application supplied operators 
discuss related section 
operator composition solar goals facilitate development deployment context aware applications 
environment sensors shared applications note applications typically go similar data processing steps filtering transformation aggregation 
critical solar provide modular framework promotes software re usability 
consider kinds reuse code reuse applications import existing modules documented libraries included java development kit java sun com se pipe pipe source filter filter source pipe pipe sink pipe pipe filter sink filter pipe software architecture style promotes reuse composition 
instance reuse applications discover deployed data fusion components 
application viewpoint solar encourages modular structure reduces programming time code reuse 
system viewpoint solar minimizes redundant computation network traffic increases scalability instance reuse 
filter pipe pattern popular software architectural pattern data stream oriented processing filter pipe supports reuse composition naturally 
filter pipe style shown component filter set inputs set outputs 
component reads streams data inputs produces streams data outputs 
connector pipe serves conduits streams transmitting outputs filter inputs 
data flow starts source sequence pipes filters reaches sink 
advantages filter pipe pattern filters independent treated black boxes isolation functionality helps ensure quality attributes information hiding high cohesion modifiability reuse filters typically know identities upstream downstream components simplicity helps ensure low coupling pipes filters hierarchically composed higher order filters created combination lower order pipes filters construction pipe filter sequence delayed runtime late binding permits controller component tailor process current state application process performed filter isolated components system relatively easy run pipe filter system parallel processors multiple threads single processor 
example implementations filter pipe style practice include unix pipes web servers modern language designs software router 
solar uses filter pipe pattern basic structure additional design considerations 
need fan fan structure context computation may involve multiple sources component may shared multiple sinks see 
second need implement architecture distributed fashion improved scalability 
centralized component potential bottleneck dealing data sources applications 
fact distribution raises inevitable issues host failures network congestion need addressed system design 
motion monitor security versus locator example operator graph security control application 
operator graph section solar extensions filter pipe style detail 
define terms discussion 
terminology call filter operator pipe channel 
channel directional ends source sink 
sensor source application sink operator source sink 
operator self contained data processing component takes data sources input acts data source 
operator set input ports set output ports 
simplicity call input port output port 
port unique identifier distinguish ports operator 
channel connects upstream operator downstream operator direction channel indicates direction data flow 
sensor may set 
hand application may set 
operator function graph connected channels multiple channels connected 
port push pull 
channel connecting push push push channel 
channel connecting pull pull pull channel 
push channel source spontaneously passes data sink 
pull channel sink sends explicit request source data passed channel 
illegal channel connect ports mismatched push pull types 
simple port interface allows easily connect sensors operators applications channels form acyclic graph 
call kind data processing graph operator graph show example 
input ports output ports 
lines push channels pull channel denoted dashed line 
scenario simple security control application enables disables functionalities particular room identity user 
monitor operator receives events motion sensor pulls list people locator operator receives events versus location tracking system section 
output monitor containing motion status list users security application decide disconnect network encrypt certain data files turn displays users security clearance 
application may trigger alarm motion room detected versus 
functional separation object oriented programming contract object user set method signatures including method name return type parameters types 
similarly contract operators composer builds operator graph port specification operator port identifier push pull type 
composition obey rule ends channel push pull type 
currently implemented solar specify structure type data passing requests pull issue handle 
additional information adds constraints properties legal channel 
specification operator documented developer best stored code repository apis allowing programmable inspection 
composer builds operator graph human program uses code repository library import operator modules composed graph 
code repository enables code operator reuse 
hand instantiated operators may register name advertisement name space act virtual sensor chapter 
composed operator graph inputs specified name queries resolved name space select existing real virtual sensors operators 
name space enables instance operator reuse 
point view developer responsible operators composer responsible channels 
interact port specifications 
operators channels class objects developer provides functionalities operators composer customizes channel behaviors 
instance composer may specify policy drop summarize data channel overflows chapter 
pull channel composer may specify channel pull query source periodically cache results available sink sends request 
suitable caching policies iql 
composition language solar provides xml language operator composition 
illustrate language example 
suppose application wants detect human sitting chair may automatically turn desk lamp reading 
attach pressure sensor motion sensor chair shown 
single sensor detect human presence accuracy combining sensor outputs give fewer false positives chair bumped walking user heavy object placed chair 
operator graph detect human presence straightforward 
operator presence fusion takes inputs push channels outputs sitting chair particular fusion algorithm simple reporting human presence sensors claim user sitting chair complex supervised machine learning approach predict human presence historical observations 
section evaluate specific solution detect ongoing meetings human presence 
show operator graph encoded solar xml language 
define fusion operator variable name presence uses specified java class initialized particular parameter 
channel element source sink attributes 
source previously defined operator name query shown example 
instrumented chair wireless pressure placed seat mat motion sensor taped back chair 
pressure sensor motion sensor presence fusion application simplified operator graph detecting human presence instrumented chair 
fusion operator name presence classname solar app param name delay value operator channel source sensor motion chair sink presence channel source sensor pressure chair sink presence fusion xml example encodes operator graph shown 
sensor motion chair attribute name query resolved motion sensor attached particular chair 
discuss details naming discovery chapter 
source sink channel may define source sink 
note omitted means sensors 
default types channels specified push 
application deploys operator graph sets channel presence operator represents link operator graph 
planetary overlay logical operator graph needs mapped physical hosts 
scalability reasons want avoid centralized architecture operators executed single server potential performance bottleneck single point failure 
solar takes fully distributed approach consists set functionally equivalent hosts named planets 
planets connect form service overlay application level distributed hashtable dht peer peer routing protocol shown :10.1.1.142.752
planets denoted connect sensors applications cooperatively execute data fusion operators filled circles 
sensor may connect planet called proxy register name advertisement publish data stream 
application may connect planet request composition specified data sources operators operator graph deployed planets application receives derived context 
client sensor application may disconnect proxy planet reconnect new planet time 
reasons client may switch new proxy planet current proxy overloaded client finds better planet closer powerful client current proxy failed 
planets cooperatively provide services operator hosting execution sensor operator registration discovery data dissemination operator graphs operator monitoring recovery operator garbage collection 
chapter describe clean system architecture inter service invocations local intra service communications hid den 
solar consists set functionally equivalent planets form service overlay 
distributed hashtable traditional client server architecture peer peer protocols distinguish role participating nodes 
peer client server 
generation protocols mainly motivated file swapping internet suffer scalability problems 
representatives protocols napster gnutella kazaa 
napster peers mediated centralized server protocols fully distributed 
protocols coming research community designed specifically handle large number participating nodes pastry chord tapestry skipnet :10.1.1.142.752
provide self organized routing substrate peer unique numeric key 
interface protocols expose sending message numeric key 
message delivered peer numerically closest key 
simplicity chose pastry implemented java easily integrated solar 
pastry numeric keys represent application objects chosen large numeric space 
planet solar participating node peer assigned key chosen randomly uniform probability key space 
pastry assigns object key live node key numerically closest object key 
provides primitive send message node responsible key 
overlay network self organizing self repairing node maintains small routing table log entries number nodes overlay 
messages routed node responsible key log hops 
simulations realistic network topologies show delay stretch total delay experienced pastry www napster com www gnutella com www kazaa com operators services fusion rpc directory multicast tcp ip transport dependency dispatcher pastry transport architectural diagram planet 
persistency mobility message relative delay source destination underlying network usually paths messages sent key nearby nodes underlying network converge quickly small number hops 
planet architecture planets execution environments operators cooperatively provide functionalities naming discovery routing sensor data operators applications operator monitoring recovery face host failure garbage collection operators longer 
requirements solar complex infrastructure solar provides service oriented architecture meet software engineering challenges 
consider functionality mentioned service runs planet 
core planet service manager contains set services interact manage operators route context data 
show architectural diagram planet 
planet kinds message transports normal tcp ip dht pastry services 
service running planet may send message destination specified socket address numeric pastry key 
dispatcher routes incoming messages transports solar services multiplex header 
service point view sends messages peer service planet 
service may get handle service planet directly invoke local interface methods 
application solar client chooses planet sends request fusion service 
fusion service may ask local directory service discover sensors desired application 
directory services planets determine partition name space planet stores name advertisements directory users need know internals 
believe architecture service level modules simple powerful abstraction build distributed systems particularly overlay systems 
idea builds objectoriented modules allows easy upgrading swapping service implementations long service interface change 
instance easily add caching capability directory service improve query performance 
hidden intra service communication tcp ip dht transport important ensure low service coupling 
local access remote service downloaded proxy jini shares similar idea 
architectural approach allows extract common functionalities services consider primitive services 
instance rpc service provides blocking remote calls heartbeat service sends certain messages remote peer periodically shown services 
improve planet efficiency reducing redundant resource usage 
set services planet configurable easy add new functionalities planetary network simply adding service planet 
instance building web proxy service planet 
serving pages clients proxies federated planetary network content caching prefetching re directing requests 
new service may simply reuse existing services directory multicast fusion 
reality service integration may complicated 
instance service may attribute directory may desire directory may return query results latency constraints 
kind advanced service interaction supported solar framework requires service interface explicitly expose properties mutual ontology 
service interaction planet starts reads configuration file contains services initialized planet 
show part configuration 
configuration simply contains set key value pairs second field delimited dot key service name directory 
service may retrieve local handle service planet service manager service name 
note transport services ip dht 
rpc services simulate remote blocking calls java class different underlying transport 
discuss multicast service chapter directory service chapter 
dispatch service registers callback transports receive messages contain multiplex header indicating destination service 
dispatch service exposes interface send message dispatch message servicename specified ip address dht key name receiving service destination planet specified name transport service deliver message 
service dispatch classname solar service dispatch service dispatch transport dht transport ip transport service directory classname solar service directory service directory transport dht transport service directory rpc dht rpc service multicast classname solar service multicast service multicast dht transport dht transport service ip transport classname solar service transport service ip transport port service ip rpc classname solar service rpc service ip rpc transport ip transport service dht transport classname solar service transport service dht rpc classname solar service rpc service dht rpc transport dht transport portion planet service configuration 
show partial service interaction 
service executes local operators dependency operators managed service chapter 
arrow means source service relies sink service 
services rely rpc service arrows shown simplicity 
balance service measures load local planet may decide relocate operators runtime planet overloaded 
chapter discuss service disseminates events publisher receivers 
related xerox parc systems support context aware applications 
uses centralized architecture manage location information dozens active badges building deployed support daily usage parctab system 
limited scalability sufficient meet specific goals 
user agents device agents selectively publish representative current location map server previously specified control policies 
applications may map server discover location information directly send requests agents 
uses ip multicast basic facility disseminating location information 
solar aims support larger scale application scenarios addresses system scalability terms number sensors number applications volume data 
context toolkit seeks simplify development context aware applications wrap multicast transport fusion dependency load balance heartbeat rpc partial service interaction planet 
directory ping sensors widget abstraction providing pre defined aggregators commonly context :10.1.1.9.5130
data flow representation aggregators bears similarity solar operator graph 
system structure established administrators static runtime 
solar differs emphasizing application specific context customization diverse needs different applications 
context fabric focuses interface system applications 
allows application specify high level context query type requested context automatically constructs data flow path selecting operators repository 
similar path automation appears paths cans 
convenient approach gives application little control restricted applicability due limited expressiveness type matching 
solar context toolkit context fabric address key systems issues scalability failure recovery flow control 
industry formally called shares similar goals solar 
solar programmer needs explicitly specify information flow graph provides implicit programming model developing expressive composition language named iql 
iql program possible parse operator graph deployable solar 
hand believe act manually deriving operator graph temptation existing operator classes available encourage programmers derive similar graphs similar situations increasing opportunities re data streams 
similarly programmers name operators users applications 
currently available literature says little manages composers systems issues 
iroom project employs tuplespace model aims decouple data producer consumer 
loosely coupled coordination model reduces component interdependency allows easy recovery crashes 
simple interface tuplespace tuple retrieval pattern matching limits expressiveness data processing 
particular direct support data fusion 
pqs information fusion engine tries identify process observing output data stream 
currently employs jms messaging middleware replaced solar large scale deployments 
hand pqs contains ready fusion models solar operators 
problem achieving new composite service composing existing autonomous web services generated considerable interest years 
researchers working composition languages specification toolkits support systems load balancing stability algorithms 
consider sensors solar output services enhance solar composition model previous results powerful composition language rule composition engine algorithms achieving certain quality composed service 
emergency response battlefield projects rescue jbi middleware systems distributed data management 
particular jbi event processor composition model similar solar 
supporting architectures clear literature 
data aggregation useful technique inside sensor networks reduce unnecessary data transmission 
solar systems lower level designed resource constrained environment focus power consumption communication costs 
designed single application environment expressiveness data processing fairly limited 
hand solar operators may take advantage infrastructure nodes perform intensive data fusion 
sensor network systems complementary solar aggregated results coming sensor network supply event stream solar 
seen research efforts continuous query data streams database 
large part efforts focus algorithmic efficiency implementing sql queries data streams little attention general data fusion support systems 
may possible execute continuous queries solar provides flexible scalable platform distribute manage sql operators 
chapter data dissemination operator graph sensor operator may multiple push channels connected forming fan structure 
means time sensor operator publishes event event delivered connected outbound push channels 
simple approach pass copy event channel may efficient instance sinks multiple channels host 
common solution improve efficiency data dissemination problem multicast 
idea aggregate channels build minimum spanning tree network topology 
event duplicated parent node children duplicated source root receivers 
solar disseminates events application level multicast alm facility built top peer peer routing substrate 
alm improves scalability data dissemination rely ip multicast turned practice 
alm new idea buffer overflow management remains challenge alm :10.1.1.12.8387:10.1.1.20.299
chapter basics alm solar section 
motivate data reduction requirements handle buffer overflow dissemination path section policy driven approach rest chapter 
application level multicast clients host data endpoints senders receivers part planetary overlay 
client explicitly attach planet request services endpoints 
planet client attaches acts proxy endpoints client 
endpoint planet unique numeric key randomly chosen key space 
subscriptions sender managed root planet key numerically closest key live planets 
note sender root necessarily node proxy 
planets functionally equivalent may play roles simultaneously 
shown data dissemination path constructed follows client hosting sender forwards published events sender root sr proxy sp events multicasted proxy planets subscribing receivers rp hopping set intermediate forwarding planets mf events forwarded clients hosting receiver sp rp mf sr mf multiple data dissemination paths converge multicast tree 
establish dissemination path sends subscription request ks dht key discovered solar naming service 
subscription request routed planet responsible ks sr subscription recorded intermediate planets mf path 
multiple receivers subscriptions data paths converge multicast tree rooted sr sender delivers events key ks dht interface 
event reaches sr forwarded multicast tree receivers 
note event duplicated parent planet child multicast tree 
castro compare protocols build alm dht peer peer overlays :10.1.1.12.8387
mobile clients may experience temporary disconnection caused weak links mobility handoffs 
disconnection client may roam change network address network mobility may may choose original proxy reconnects host mobility 
client may voluntarily decide change proxies finds better overlay node closer lighter load 
proxy may decision disconnect client proxy shutdown crowded force client select different proxy 
client proxy engage protocol maintaining state 
client endpoints hosts may appear states proxy attached detached departed 
state transitions attached detached triggered explicit request missing heartbeat signals 
client detached longer configurable threshold proxy assumes client departed re attach host 
proxy appears client states attached detached transitions managed way similar client state 
sender client starts buffer events receivers detached proxy 
receiver proxy starts buffer events receiver client receiver client detached 
receiver client departs proxy removes subscription accumulated event queues 
receiver re attaches proxy rp different previous rp asks rp join multicast tree cancel subscription rp asks rp buffered events requesting data rp sequence number events prevent duplicated rp delivery 
approach handle host mobility 
buffer overflow consider receiver takes actions received events 
consuming event block receiving new events new events typically buffered waiting processed order 
event consumption rate consistently lower event arrival rate buffer faces danger running space 
say buffer overflows full new events continue arrive 
mentioned events mobile receiver buffered proxy planet disconnection 
event consumption rate zero buffer vulnerable overflow 
buffer intermediate planets subject overflow due network congestion 
typical approaches manage buffer overflow 
new events may simply dropped space buffer leads arbitrary data loss 
second receiver may notify sender buffer condition explicitly implicitly sender may slow prevent overwhelming receivers 
ip family protocol similar approach udp second approach typically seen reliable data transmission protocol tcp 
convenient applications reliable delivery guarantees may require infinite storage memory disk sender particularly sensor continuously producing data 
infinite buffer course feasible desirable introduces long delay events tail buffer 
case reliable multicast slowing sender due slow receiver hurts multicast group may acceptable 
hand arbitrarily dropping data acceptable context aware applications monitoring events 
observe applications loss tolerant means adapt occasional data loss require exact data delivery 
examples multimedia applications mainly interested non multimedia applications 
instance application maintains room temperature able function correctly misses sensor readings 
similarly application adapt loss location change updates fading object current location function time update 
reason applications able tolerate data delivery loss designed cope unreliable sensors may lead data loss inaccuracy 
chapter buffer management module named pack multicast service 
pack allows applications specify data reduction policies contain customized strategies discarding summarizing portions data stream case buffer overflow 
summaries dropped data serve hint receiver current buffering condition receiver may adapt example choosing different data source faster algorithm keep arriving data 
addition policies hosts necessary install data reduction policies buffers intermediate forwarding planets triggered closer congested links disconnected clients 
practical may efficient inject pack functionalities widely deployed protocol stack ip 
implement pack policies application layer buffers networking stack 
assume planets strategically placed infrastructure form multicast overlay service capable executing data reduction policies 
pack buffer management provides contributions 
enables customized policies loss tolerant applications trade data completeness fresh data low latency semantically meaningful data 
second employs overlay infrastructure support mobile data points temporary disconnection hand 
provides adaptation mechanism receivers may react current buffering conditions 
discuss data reduction policy section 
note congestion control network layer decisions opaque packets recognize boundaries application level data objects pack policies granularity application data units adu called events 
pack able separate events follow common structure pack get values inside event object enabling flexible expressive policy space receivers 
data reduction policy sender produces data stream sequence events carrying application data sensor readings 
model event list attributes contains tag string value object 
currently assume events sender structure set attribute tags 
receive data stream receiver subscribes sender 
sender client intermediate forwarding planets receiver client form dissemination path subscription 
allow receivers subscribe single sender single receiver subscribe multiple senders 
conceptually fifo queue host path particular subscription temporarily holding events transition 
buffer consists multiple queues contains events sender receivers subscribed 
discuss detail buffer management section 
receivers may attach data reduction policy simply policy queues node path specify shorten queue full discarding summarizing certain events applications needs 
shows structure multicast service receivers subscribed sender 
receiver subscribes sender customized policy 
policies installed hosts path sender receiver 
nodes multiple paths contain multiple policies node contains 
pack running clients planets puts events arrive local sender network internal queue wait consumed local receiver transmitted host path 
queue full pack triggers associated policy examine events queue determine dropped 
policy may specify summarize dropped events digests placed resulting queue 
receiver client pack pulls events digests queue invokes different interface receiver 
describe specify policy pack executes policy 
policy specification policy defines ordered list filtering levels level contains single filter chain filters 
list levels reflects receiver willingness drop events increasingly desperate sender receiver multicast service consists set planets run pack policies 
overflow conditions important events dropped filters higher levels filters lower levels 
policy may contain number levels 
event queue reduced pack determines level passes queue filters defined including level starting lowest level 
filter instantiated application defined parameters determines events keep drop event queue input 
filters independent communicate retain share state 
event may contain attributes filter typically requires parameter indicating attribute consider filtering 
filters drop events 
optionally policy may specify summarize dropped events single chain 
result summarization digest event injected event stream 
event queue may contain mixed set events digests 
digests give rough feedback receiver events dropped serve buffer overflow indication receiving application may take action switching different sources faster algorithm consume events 
show example policy xml syntax possible specification language 
policy specifies filters apply attribute tag 
possible specify different attribute filter 
dropped events summarized inform receivers number average value dropped events 
example gives single filter buffering level 
level filter drops events pulse rate changed previous event second level drops events pulse rate inside normal range important filter simply keeps latest events drops 
urgent buffering situations filters applied sequence event queue 
currently support basic comparison filters gt ge eq ne lt le match 
provide set operators inset contain subset sequence operators retains value set retains value policy attribute summary name mean name count summary level filter name delta para name change value filter level level filter name para name low value para name high value filter level level filter name latest para name window value filter level policy example data reduction policy filters 
set 
advanced filters include uniq remove adjacent duplicates remove duplicates delta remove values changed latest keep events keep events random randomly throw away certain fraction events 
summarization max min count sum mean typical semantics names suggest 
indicated approach allow applications compose predefined filters customized policy 
general purpose language express general policies general filters 
trade language gets powerful complex filters supported pack involve overhead filter execution eventually reduce system scalability 
experience far applications desire simple straight forward policies 
strategy keep filters simple efficient expand filter repository necessary 
policy execution due previous packing operations performed locally upper stream hosts queue may consist sequence digests events follows sequence number reflects order queue original counter sender 
suppose policy executed queue dropped updated 
hand events dropped new digest computed dropped events 
particular combinable 
update filter pass 
return digest filter takes event digest input queue order 
associative recursively applied previous results 
note policy exists host path associativity applies hosts host buffer packed 
mentioned max min satisfy requirement 
provide computes number unique values dropped events digests carry unique values merged updated accurately 
number unique values may unbounded defeat purpose summarization 
possible digests packing boundaries updated merged queue may digests little actual data reduce effect filters applied 
policy triggered pack takes input queue forms chain filters filtering level decided 
pack feeds queue filter passes resulting queue filter filter 
visualizes single filter executes policy 
event input queue fails pass filter update current summary state previously computed digest input queue 
passes filter new digest computed placed output queue satisfying event design alternative take event input queue check filters fails middle passes 
previous event run filters event input queue admitted put procedure 
approach takes input queue feeds filters 
believe approach limits filter event passes filter filter know events coming 
pack filters able perform tasks queue latest 
overhead approaches 



level indexing structure buffers having sender key index 
comparable event checked filters sequence 
possible pack may able reduce queue applying highest filtering level 
may policy apply current data values filters effective link host congested disconnected queue filtered highest level 
cases pack drops events queue applies policy count default policy 
buffer management buffer data structure containing multiple subscriptions queues receivers 
distinguish kinds buffers local buffer receivers clients remote buffer containing events transmitted clients planet 
events local buffer consumed locally receivers event handlers events remote buffer transmitted network link 
multiple endpoints client local buffer resident receivers remote buffer senders 
planet buffers local remote serve different roles planet may play 
local remote buffers adopt level indexing structure shown index sender key 
local buffer client uses receiver key second index remote buffer uses link address second index 
entry link address means receiver subscribing corresponding sender link 
indexes local buffer point queue single receiver 
hand indexes remote buffer point shared queue receivers link normal conditions 
shared queue reaches limit due instance congestion disconnection private queue created receiver packed individual policy 
client planet dispatcher thread pulls events network adding pointer event object event queues headers received events 
header contains sender key sid receiver key rid destination 
instance sp event just admitted solar overlay sender client 
rid empty event multicast event destined subscribers sender 
unicast event destined specific receiver 
alternative buffer design maintain single queue received events 
packing necessary need scan queue find events particular subscription apply subscription policy 
may memory approach may put multiple event queues subscriber 
believe memory usage significant concern events replicated 
index structure separate queues gives greater flexibility choose queueing packing policies reduces large amount implementation complexity 
event routing types buffers pack system adopt naming convention ease discussion 
buffer name capitalized letters prefix denotes destination events buffer 
instance buffer named srb contains events forwarded sender root sr sr depends sender key 
buffer rcb contains events destined receiver client rc 
client local buffer rb receiver buffer receivers remote buffer sender proxy buffer senders 
index rb contains list sid second index contains list subscribing local rid 
second index contains entry proxy address 
receiver subscription entry added rb extending second level indexes necessary 
client receives event relayed proxy adds appropriate queue rb 
client receives new subscription proxy adds entry extending indexes necessary 
sender publishes event adds appropriate queue 
planet may play roles simultaneously maintains remote buffers 
sender root buffer srb containing events relayed senders root 
receiver proxy buffer rpb contains events forwarded receiver proxy rp 
receiver client buffer rcb contains events sent directly connected clients 
buffers single planet 
receiver currently detached rcb proxy notified suspend queue means dispatcher may continue put events queue scheduler allowed pull events queue send client rc 
queue resumed re attached 
similarly client may suspended resumed sender client detached re attached proxy 
typical event flow traverse named buffers follows buffer clients middle overlay nodes srb rpb rcb rb pack propagates receiver subscription request planets reverse direction adds subscription entry level index structure pack policy appropriate remote buffers path 
algorithm described algorithm 
note algorithm propagating subscription requests planetary overlay 
request originates initialized rp 
sid rid request rp add subscription rcb request sr send request sid root sr add subscription rcb local node sid root request sp send request sid proxy send request sid multicast parent sp add subscription srb request sc send request sid client error buffers mentioned remote buffers field set second index buffer 
field indicates forward subscription request 
proxy periodically probes root maintain proxy root address mapping requests forwarded correctly 
mentioned dispatcher receives events network puts appropriate buffers event header 
event header contains sender key sid receiver key rid field indicating forward event 
forwarding procedure simple similar algorithm reverse direction 
planet receives event checks field 
buffer leading contains sid index updated event enqueued 
queue reduction queue buffer limited size may overflow consumption rate slower event arrival rate 
new event arrives full queue pack trigger pack policy reduce number events queue 
local buffer operation straightforward second index buffer points single queue individual receiver 
second index remote buffer link address points queue shared receivers link 
pack decides pack shared queue runs events queue receiver policy placing policy output private queue receiver 
note event duplication object instances 
shows private queues lower right 
newly arrived events added shared queue empty 
buffer consumer thread pulls events private queues uses shared queue private queues empty 
possible pack operation necessary shared queue fills adds events private queues completely drained 
note pack splits single stream events multiple unicast streams network congestion forwarding node may events deliver 
queues continue full pack aggressively trigger receiver filters reduce number events 
designed policy cope situation having event summarization 
pack triggers built worst case policy drops events queue summarizes count 
ladder algorithm packing event queue necessary pack determine level filters apply 
packing high level may drop important events 
hand packing low level may drop events time spent packing may exceed time saved processing transmitting events 
unfortunately straightforward algorithm choice dynamic factors consider event arrival rate current network congestion filter drop ratio depends values events receiver consumption rate 
pack employs heuristic adaptive approach queue assigned specific filtering level initially 
heuristic changes filtering level step time climbing ladder observed history current value single metric 
define metric turnaround time amount time current packing request pack operation particular level 
rationale changes tl captures dynamic factors 
increase tl due slowdown event arrival rate increase departure rate increase drop rate filters level suggesting may safe move level reduce number dropped events 
decrease tl indicates changes opposite direction suggests moving level throw events 
pack keeps history turnaround time levels tl smoothed low pass filter parameter empirically derived observation tl tl tl tl define change ratio turnaround time particular level tl tl tl respond current event reduction request pack chooses move filtering level exceeds positive threshold move level exceeds negative threshold 
pack uses previous level 
evaluation implementation java sdk 
chose pastry overlay routing protocol pack uses tcp transport service disseminate events pastry transport library mixed udp tcp mode internal message queues :10.1.1.142.752
scribe maintain application level multicast trees pack populate subscription policies :10.1.1.12.8387
pack works queues accumulated tcp sender tcp buffer filled events tcp sending buffer accessible pack may blocked get 
developing customized protocol replace tcp limit tcp send buffer size bytes diminish tcp overhead 
ultimately may best replace tcp udp extend transport service handle event packet retransmission congestion detection may relieve problem events lost tcp buffer client disconnects moves explicit request 
experimental results pack service emulab testbed utah 
tests turned just time compiler garbage collector java vm 
focused measuring performance pack buffer 
queueing tradeoff measure queueing behavior policy triggered emulab set hosts connected kbps network link 
placed single receiver host single sender overlay node 
sender published event ms events accumulated overlay node due slow link receiver 
compared approaches drop events queue fills drop new event simulating drop tail behavior level pack policy 
level policy contains single filter randomly throwing events respectively 
show results 
shows latency perceived receiver 
buffer filled events droptail queue nearly constant high latency event go full length queue transmission 
hand events queue managed pack policy exhibit lower average latency events may pulled middle queue events distance travel 
results clear application designers filters drop events middle random tail 
plots running sequence event loss rate second window receiver 
see droptail queue loss rate arrival rate third bottleneck link handle queue filled saturated 
loss rate pack high intervals queue packed zero intervals queue packed 
loss rate depended level pack operation performed 
shows trace overlay node denoting queue packed fraction events dropped 
shows pack operations performed second level dropping events rate fit event flow arrival rate third higher consumption rate link bandwidth 
filtering level varied despite steady publication rate random filter dropped varying amounts events heuristic adapted longer shorter inter packing intervals adjusting filtering level 
www emulab net latency ms loss rate packing ratio sequence number timeline sec timeline sec comparison queueing behavior event reduction droptail solid line level pack policy dashed line 
latency ms latency ms number receivers congestion number receivers congestion buffering overhead measurements non congested link top plot congested link bottom plot 
note different scales 
buffering overhead measured overhead posed level indexing buffer structure 
emulab set sender client overlay node host multiple receiver clients hosts 
connected overlay node receivers mbps lan sender publishing events ms interval 
test connected overlay node receivers kbps link sender publishing events ms 
setup overlay node buffer multiple entries second index queue filled policy triggered 
second setup shared queues overflowed buffer created private queues individual receiver triggered policies due restricted link 
receivers level policy dropped certain fraction events tail queue respectively 
setups measured event delivery latencies receivers show averages 
plot shows number entries second index increases average latency perceived receivers increases linearly 
result indicates build large scale pack multicast tree output degree node relatively small collectively tree may leaves receivers 
second plot shows worst case network congestion forced multicast stream split substreams individual policies 
linear increase added latency perceived receivers average delay ms number receivers measurements client detach attach delay 
non trivial overhead 
addition space required private queues event relates number receivers congested link 
congestion occurs higher part dissemination tree expect happen frequently network edges buffer may manage policies 
copying events multiple private queues consequently causes events dropped events arrive may experience long delays 
words pack service try prevent relieve congestion 
reduces data individual receiver may summaries congestion indication decide cancel subscription congestion persists 
gives advantages approaches tcp blindly push back sender queue may eventually overflow crash receiver method determine network conditions adaptation 
fundamental issue pack pushes arbitrary application specified policies network flexibility restricts scalability congestion overlay node limited resources policies 
carzaniga discuss tradeoff expressiveness scalability similar context 
approach relieve situation limit flexibility pack policies 
instance rlm essentially uses set hierarchical filtering layers apply naturally multimedia data streams 
client attach detach mobile client re attaches proxy pack suspends resumes event queue rpb buffer located rr 
measure operation scales moving clients set sender overlay node lan host emulab topology varied number receiver clients distributed evenly lan hosts 
client endpoint 
client explicitly repeated operations attaching overlay node times waiting seconds state transition 
measured delay client issued attach request buffered event arrived shows average delay second 
latency important directly affects user experience applications 
average delay clearly grew number receiver clients increased large variance delay receivers 
saw similar wide variance requests single receiver 
believe variance due thread scheduling synchronization effects java vm 
detach attach requests implemented rpc service handled proxy small thread pool 
rpb buffer queue client consumer thread transmitted events tcp connection client 
threads compete network queue rpb buffer events buffered client disconnection 
competition may significant effect shows little latency variation light load 
application tests example application pack monitor campus wide wireless network 
campus covered access points ap configured send syslog messages computer lab 
run data source host parse raw messages structured representation publish continuous event stream 
subscribing syslog source applications notified client associates ap roams network leaves network 
goals provide ip location service wireless ip address service identify ap device currently associated 
enables deploy location applications modifying legacy software 
shows web proxy modified open source java proxy able push location oriented content requesting web browser wireless devices ip address header 
currently insert information building text bar top client requested page 
similarly location prediction service instruct guide application mobile device prefetch content 
provide kind service locator subscribes syslog source monitors devices associations network 
association message contains device mac address associated ap name include ip address device 
cases locator queries ap ip address associated clients interface snmp choice appears slower 
query takes hundreds milliseconds dozens seconds depending ap current load configuration 
permit query seconds ap queries pose overhead normal traffic 
result frequently find locator falls syslog event stream considering large wireless population 
focus discussion subscription locator syslog source events tend overflow receiver queue rb 
locator uses level set filters 
chained level chose separate easier tracing 
filters listed follows policy shown save space 
eq retain events message type info 
inset discard certain events authenticated 
match discard events host name represents ap mobile clients 
retain event action messages indicating clients departure network doit org query access point syslog syslog source associate wireless client mac ip locator pack overlay location predictor setup campus wide wifi locator applications 
web proxy triggered times cdf packing levels packing interval sec avg packing ratio cdf packing level query latency sec statistics derived pack trace collected behalf mac ip locator level filtering policy 

remove events duplicated ap name see optimization discussed 
drop event 
accelerate query performance optimizations locator 
query ap syslog event contains ip address client 
second querying ap retrieved list associated clients cached results speed lookups clients 
collected pack trace hour long run shows basic statistics 
upper left plot presents distribution filtering levels triggered pack service 
filtering levels triggered varying times times pack operations 
upper right plot shows filters wide variety packing ratios hour load 
filters discarded events filters help 
suggests strongly application programmer study load carefully configure efficient policies 
lower left plot indicates pack triggered policy frequently median approximately seconds 
lower right plot shows latency derived time query resolved timestamp original syslog event 
set connection timeout seconds poll longest delay return query seconds suggesting ap heavy load slow return results connection established 
locator adapt situations level frequently triggered creating multiple threads parallel polling fewer events association messages dropped 
currently reluctant take approach downstream application may want order event delivery 
location predictor example sensitive sequence moves 
note filters throw events having value locator service 
source supports filtered subscription events need transferred network 
source bottleneck number filters run increases 
pack filtering system believe general infrastructure necessary content event system built limited filtering data composition network supporting powerful language 
pack complements systems deal buffer overflow issues 
related design choices pack generally follow principle application level framing 
data manipulation transfer control application data units adu 
case pack operations performed queued data units particular structure 
hand simplest drop adu queue overflow 
hand policy inadequate incorrect applications different requirements 
flexibility implemented sender receiver easily deployable intermediate ip routers 
application level overlay infrastructure attractive push packing function closer congestion disconnection improve scalability responsiveness 
traditional congestion flow control protocols concern unicast multicast 
typically transparent applications provide semantics reliable order data transport 
computational network resources limited protocols regulate sender rate disconnect slow receivers 
usual alternative udp ip guarantees delivery ordering forces applications tolerate loss 
goal hand trade reliability quicker data delivery service continuity loss tolerant applications 
pack service applies data streams particular structure 
loss generality enables pack enforce receiver specified policies 
pack protocol prevent bound amount congestion dependent cross traffic 
appropriate customized policy receiver able get critical data summary information time congestion recovery period 
applications outcome better strict reliable service tcp random loss udp service 
performing application specific computation including filtering inside networks new idea 
particular possible implement pack service general active network framework 
chose overlay network flexibility placement easier deployment 
bhattacharjee propose manage congestion dropping data units source attached policies 
receiver driven layered multicast rlm actively detects network congestion finds best multicast group layer multimedia application join 
pasquale put sink supplied filters close audio video source possible save network bandwidth 
protocol removes obsolete messages indicated source random messages queue full 
aims broader categories applications support sink customized policies source typically predict sinks want manipulate sensor data 
pack policies need expressive filtering operations multimedia streams 
protocols explicitly support disconnect operations caused host mobility 
data aggregation useful technique inside sensor networks reduce unnecessary transmission tag 
designed different purposes tag pack try enforce application specific policies 
goal tag apply aggregation possible sensor network pack policies triggered buffer starts overflow 
systems complementary aggregated results coming sensor network supply data stream solar source 
overlay event brokers provide content pub sub service focused routing matching scalability largely ignored flow control 
study congestion control issues context gryphon network 
congestion system solved simply interconnecting nodes tcp overlay constructed application space tcp 
solution apply additional protocols reliability guaranteed event delivery 
sender broker serving sender responsibility store events congestion recovery database 
application point view protocols different traditional approaches explicit support mobile clients 
receiver driven layered multicast rlm leverages fact multimedia streams encoded different layers rates requires different bandwidth 
receivers join multicast group corresponding layer encoding rate best matches available network capacity 
way idea similar pack service enforces policies 
rlm focuses multimedia applications works packet level requires ip multicast 
pack built application space requires special capability ip network uses packing mechanism flow control managing queues hosts congestion control managing queues overlay nodes provides explicit support mobile clients data sources sinks 
hand pack needs deployed overlay infrastructure pack requires application programmer effort layer selection transparent rlm requires explicit application policies 
researchers database community provide query oriented view continuous stream processing 
foci formally define sql stream manipulation language potential replace pack current ad hoc xml interface 
particular aurora system reduces load dynamically injecting data drop operators query network 
choosing put dropper drop qos graph specified applications 
aurora assumes complete knowledge query network uses pre generated table drop locations search space 
qos function provides quantitative feedback dropping data pack allows explicit summarization dropped events 
chapter naming discovery compute desired context solar applications typically select existing data sources compose operators operator graph chapter 
solar provides naming service sensors optionally deployed operators register name advertisement 
solar stores advertisements distributed directories improve scalability applications name query find particular data sources 
name advertisement data source descriptive handle including information necessary distinguish sources 
alternative approach sources describe type data provide applications choose sources desired data type 
descriptive information data source naturally resides outside data type space flexible expressive allow applications select sources meta information 
example temperature sensors building output data type distinguished location sensor 
addition interfaces solar naming service supports persistent queries context sensitive advertisements queries 
believe contributions context sensitive resource discovery critical dynamic volatile pervasivecomputing environments implemented service wrapping layer leverage directory service 
representation structure name advertisements queries 
discuss details context sensitive resource discovery framework evaluation intentional naming system ins core directory service 
briefly section newly designed distributed directory service replace ins improved scalability 
naming representation name space data sources organized tree file systems 
sources names name describes path root leaf tree 
example temperature sensor sudikoff room named sudikoff temp sensor 
enhance scalability multiple name trees may federated common example level name hostname filename urls 
alternative naming architectures sensor camera price product canon model ps resolution location building sudikoff room camera advertisement left query right find canon cameras building sudikoff 
structure tree 
named data source set descriptive attributevalue pairs 
temperature sensor named sensor camera product sensor temperature room floor building sudikoff 
arguable approach clear advantages 
case name descriptive handle 
case description tuple attributes values case attributes may implicit structure tree 
depend heavily conventions define names attributes structure tree range values names tree links 
hierarchical tree structure produces concise names easy traverse explore conventions structure tree stricter harder extend set attributes may tree attractive dynamic pervasive computing environment 
important role naming facilitate resource discovery 
tree names wildcard allows application easily describe large set publishers sudikoff temp sensor 
canon location building sudikoff effect obtained attribute system allows partial matches sensor temperature building sudikoff 
operations range selection achievable tree names syntax awkward 
solar uses hybrid approach 
data structure solar naming scheme record set attributes tag value pair 
tag attribute string value attribute string record leads attribute hierarchy 
name advertisement name query contains record forest consider tag parent value attribute 
name advertisement name query shown 
call path root non root node name advertisement query name strand 
instance sensor camera short strand longer strand location building sudikoff room 
say advertisement matches query query strands subset advertisement strands 
instance advertisement matches query right 
directory may return data sources query application may customized function select appropriate sources 
instance location aware application may want location service maximum granularity fastest update rate 
data sources come go typical pervasive computing environment results query change occasionally function re evaluated permitting quick adaptation applications 
discuss specification names queries section 
context sensitive resource discovery pervasive computing applications discover resources current context 
imagine nursing home equipped networked cameras sensors track location residents 
application track person location automatically retrieve video stream nearby camera 
cameras may named location dynamic location information senior identify appropriate cameras 
scenario requires context sensitive name query 
situation camera may mobile 
scene disaster rescue workers wear small attached cameras wireless network interface 
cameras named location supervisor monitoring application request photographs particular area selecting cameras location advertisement matches area interest 
display automatically adjusts moves place 
scenario requires context sensitive advertisements may change time persistent name queries application notified changing set matching advertisements 
scenarios place requirements naming service 
flexible advertisements characterize resource queries express desired characteristics scalable handle advertisements queries fast support frequent advertisement updates responsive quickly notify applications changes set matches persistent queries 
scenarios place requirements resources applications 
resources actively track context may update advertisement 
applications track context may update query 
load duties resources applications reasons performance resources applications may reside constrained platform attached low bandwidth network engineering simplify construction context aware services applications 
approach build context service infrastructure responsible finding appropriate sources collecting necessary data deriving desired context 
resources applications subscribe register callback context service 
notified changes context resources contact name service update name applications contact name service issue new query 
possible integrate context service name service single context sensitive directory service 
solar naming service hand reuses context fusion infrastructure help resources context sensitive advertisements allow applications persistent context sensitive queries 
section show simple specification language describe context sensitive advertisements queries 
solar loads task updating monitoring name space permits decentralized scalable implementation support context sensitive resource discovery 
naming service contributions extension typical advertisement resource discovery mechanism supports context sensitive advertisement context sensitive queries distributed infrastructure efficiently supports time persistent queries name space 
infrastructure designed leverage existing distributed directory services prototype built distributed directory ins service providing attribute registration look interface suffice section 
goals reduce load thin client devices low bandwidth networks serve embed service infrastructure techniques readily applicable infrastructure free ad hoc environment 
security privacy issues scope research focus interested readers may find information 
name specification solar provides light weight specification language specify context sensitive advertisements queries 
idea define attribute value advertisement query context dynamically derived operator graph 
context changes advertisement query updated automatically inside solar infrastructure 
specification sensor camera room alice locator room building sudikoff value room attribute defined context information derived operator called alice locator 
context sensitive name specification accompanied operator graph defines desired context computation 
demonstrates concepts nursing home example 
top left location source advertises static context sensitive name publishes location events residents 
subscriber filter operator discards events pertaining user alice 
event italics indicates alice room 
lower right application uses context sensitive query sensor camera room alice locator room building sudikoff identify subscribe camera source near alice 
alice locator refers event stream produced filter alice locator room resolved filter events 
shown attribute query resolved matches advertisement camera source lower left 
arrange context sensitive subscription depicted uses specification shown 
note encode operator graph customized language 
easy convert xml notation chapter 
graph specification contains parts define load 
load section provides url class name java classes non standard operators definition section 
section contains sequence statements defines operator 
statement defines subscriptions operator statements determine graph structure 
statement defines operator subscribes publishers name matches specification brackets 
statement assigns variable name locator measure location user building sudikoff granularity room provider versus sensor camera color true resolution room building sudikoff filter sensor camera room building sudikoff user alice timestamp room application nursing home example shows output operator graph select advertisement subscription 
define locator relay measure location user building sudikoff alice locator alice locator cameras merge sensor camera building sudikoff room alice locator room load codebase solar operators example graph specification calculate alice current location define context sensitive subscription 
application subscribes specified operator graph context sensitive name defined graph subscribe string graph spec string name spec resource context sensitive name static graph spec null directory 
advertise string graph spec string name spec application time persistent persist true context sensitive name query static graph spec null 
query string graph spec string name spec boolean persist set solar naming api methods 
operator event stream 
syntax func name spec identifies desired subscriptions function func select set names matching name specification 
selection functions built user may define custom selection functions 
second statement defines operator filters transforms aggregates events subscriptions 
statement identifies composition function parameters user defined function takes parameter alice name input event stream locator 
filter discards input event contain attribute user alice 
result stream events containing alice current location event stream called alice locator 
third statement defines operator cameras simply merges photo events received camera sources located alice 
merge operator context sensitive subscription built selector context sensitive name specification mentioned earlier 
events stream alice locator determine subscriptions merge operator 
application may receive stream photo events simply providing graph specification see subscribe interface cameras root resulting operator graph receives events 
solar system deploys operators arranges subscriptions actively monitors context sensitive name specifications adjust subscriptions necessary 
notice conceptual diagram contain relay merge operators defined purpose operators clear discuss operator graph deployment 
example demonstrates context sensitive name specification support context sensitive subscription request application 
similar graph specification cameras definition application simply wishes query name service list camera sources near alice name specification sensor camera room alice locator room building sudikoff context sensitive query 
application ask receive current list matching names register persistent query notified time set matching names changes see query interface 
situation suppose alice carries camera provides photo capture source 
camera source provides graph specification name specification advertisement result camera context sensitive advertisement see advertise interface 
implementation ins solar data source may contact planet request advertise name providing graph specification name context sensitive see advertise interface 
planet creates internal object proxy source proxy internally registers name 
subscribers naming source subscribe proxy forwards events source subscribers 
application may contact planet name query providing graph specification query context sensitive see query interface 
planet creates proxy object service query 
application may contact planet graph specification wishes subscribe event stream see subscribe interface 
planet deploys desired operator graph creates proxy object serve application subscribes operator graph forwards received events 
proxy responsible managing subscriptions behalf client managing context sensitive advertisements queries forwarding events 
proxies allows manage subscriptions names entirely inside planet reliable host data source application may slow poorly connected 
internally build solar name service top generic directory service solar operators obtain process monitor necessary context information 
layered approach allows leverage existing research implementations scalable distributed flexible directory services 
particular intentional naming system ins implement directory service 
solar add ins resolvers shown 
shaded circle operator may process events source provide context application query source advertisement 
ovals marked proxies representing connected planet clients 
arrows represent context sensitive advertisement context sensitive query contextual events actual query current context actual advertisement current context 
extending ins ins resource discovery communication system 
conventional networks name service resolves names addresses routers route messages destination addresses 
ins distributed collection resolvers form overlay network routes messages destination names 
ins combines name resolution message routing single abstraction 
receive messages application advertises name announcing ins resolver 
resolvers disseminate name resolver network 
name records discarded age application re advertise name periodically 
application may send intentional anycast message name pattern resolvers route message destination matching name 
names patterns sets hi planet ins resolver application source planet planet ins layer resource system architecture solar ins layers 
attribute value pairs pattern matches particular name attributes pattern name values corresponding attributes equal 
application may send intentional multicast message pattern resolvers route message destinations matching names 
ins clients request list advertised names currently match pattern 
mechanism client register callback notified new matching name arrives old matching name disappears 
support name queries directory service match new pattern existing names ins capability 
support persistent name queries new names matched existing patterns ins capability 
routing message ins delivers message destination message tagged pattern subset destination name 
extended ins support superset matching addition subset matching 
messages tagged type name default subset matching messages tagged type pattern new superset matching 
currently simple superset matching algorithm 
goal obtain set patterns match name starting empty set add pattern matches attribute 
reduce discarding patterns match attributes show solar transparently adds tags uses new feature support persistent queries 
ins name specification planet creates monitor object interact ins 
monitor attached directly object associated name operator proxy advertising name operator proxy requiring persistent name query 
consider static names depend context 
suppose application wishes subscribe sources name matches pattern sensor camera sends simple graph specification describing request planet 
parsing graph specification planet creates proxy associated monitor 
monitor converts solar name ins syntax sensor camera uses ins ways asks ins list existing names match pattern sensor camera type name returns subscriber names solar format creates announcer thread advertise ins name sensor camera type pattern 
new publisher asks proxy advertise sensor camera color true monitor associated proxy uses ins ways creates announcer thread advertise name sensor camera color true type name sends intentional multicast sensor camera color true type pattern payload indicating new name purpose type attribute allow new patterns find names new names find patterns 
consider context sensitive name specification time name may change 
solar deploys operator graph accompanying graph specification subscribes name monitor resulting event stream 
monitor receives event re computes value name substituting concrete values 
example sensor camera room locator room sensor camera room receipt event attribute room locator event stream 
persistent context sensitive name advertisement monitor detects query specification changed due new value context sensitive attribute sends special meta event operator subscribers indicating name change sends ins intentional multicast type pattern form old name indicating name change tells ins type name form old name tells ins advertise type name form new name sends intentional multicast type pattern form new name 
result inform current subscribers old name gone new name 
context sensitive name query monitor detects name changed asks ins provide list matching advertisers type name form new name asks ins type pattern form old name asks ins advertise type pattern form new name 
result notified names match pattern 
monitor attached operator responsible adjusting operator subscriptions necessary 
receives ins message solar meta event indicating change set matching names monitor evaluates new set selection function determine set desired subscriptions 
camera example show deployment variants camera example 
case depicts camera source location dependent name case depicts applications location dependent subscriptions camera sources 
cases locator operator monitor finds locators sudikoff picks selection function locator operator subscribes locator source 
locator sources shown 
reason locator source changes name longer matches pattern monitor proxy sends meta event application camera source proxy subscribers cameras proxy alice locator locator alice locator locator sensor camera room building sudikoff type name user alice room build sudikoff sensor camera room building sudikoff type pattern user alice room build sudikoff sensor locator user building sudikoff type pattern ins sensor locator user building sudikoff type pattern deployment variants camera examples 
ins subscribers including locator 
locator monitor receives meta event selects locator matching names 
events produced locator filtered produce proxy monitor adjust name advertisement case subscription case 
solar system naming approach scalable decentralized naming service support attribute queries persistent queries 
section demonstrated extend ins fill role implementations possible 
evaluation set measure name update performance solar naming service 
obtain realistic events experiments days recorded sensor data location system installed building 
experiments created replay source read trace published sensor reading event drive test clients 
experiments set fixed hosts fh mbps duplex connections 
average network latency ms mobile hosts mh linux laptop pen windows tablet 
mobile hosts connected dedicated access point clear mbps channel distinct channels nearby access point 
average network latency fh tablet ms laptop ms sun microsystem java runtime hotspot platforms 
latency measurements consider task advertising location sensitive name versus location data 
compare approach solar approach solar 
note rectangle represents fh mh proxy monitor 
solar approach set operator graph provide desired event stream versus replay source transformation operator converted badge sensor numbers symbolic names aggregation operator remembered current location badge produced event badge changed location filter operator removed events particular person 
created dummy submitted operator graph simple context sensitive name specification 
versus source proxy 
approach application received events directly versus source transformation filtering internally 
detected location change announced new name ins sent name update multicast message matching patterns 
standalone ins client application registered simple pattern receive name update messages 
comparison measured ins configuration 
ins client sender periodically changed announced name announcing ins resolver 
ins ir badge tracking system provided versus technologies www com 
dell gx ghz pentium mb ram running redhat linux 
gateway solo mhz intel pentium mb ram running redhat linux 
fujitsu mhz celeron mb ram running windows 
ins planet ins app versus source ins ins sender ins app setup latency tests 
ins app versus source client application received name update messages calculated difference 
configuration allowed isolate overhead event handling cases 
replay source published events ultimately caused change advertised name 
call events triggering events experiments reduced trace contained triggering events goal measure latency moment replay source produced triggering event moment client application noticed name change 
message contained timestamp original event produced replay source 
arranging ins application host replay source application simply subtracted event timestamp current time obtaining latency concern clock skew 
shows latencies configurations fixed hosts 
purpose test demonstrate overhead approach isolate effects ins core 
axis represents progress time marked count triggering events 
data point moving average preceding triggering events 
self service similar performance bulk aggregating context information updating ins essentially executed similar environment fh operators planet fh 
general overhead partitioned operators connected queues overhead queue management 
substantial fraction latency variation ins 
bottom curve shows latency ins approach 
clearly ins significant source variation seen curves 
note latencies smaller experiment progressed due incremental compilation hotspot jvm reached steady state events 
noticeable variations caused thread scheduling temporary network congestion 
latency numbers fairly small factors visible effect latency 
ins moving average name update latency ms number triggering events latency results fixed hosts 
fh fh ins moving average name update latency ms mh win tablet mh linux laptop mh win tablet number triggering events latency results mobile hosts 
second test demonstrates advantage infrastructure approach 
shows solar clearly outperformed services ran mobile host 
name updates issued linux laptop took twice long reach applications issued solar behalf 
situation perfectly demonstrates value solar ability load context aggregation name updates infrastructure particularly poorly connected client hosts 
interesting see running tablet adds delay variation 
explanation variation related inefficiency java runtime driver os tablet 
case solar approach minimizes impact client environment moving context collection aggregation monitoring infrastructure 
latency experiments conclude framework greatly improve responsiveness context sensitive names particularly clients reside devices connected slow network 
pushes chore monitoring context updating name away service solar system fixed hosts required receive events slow network arrange name change slow network 
scalability analysis evaluate planet capability support name updates heavy load devised experiment single planet fh single ins resolver fh array fhs clients request context sensitive name advertisements 
client host processes versus replay source ins application 
advertisement request graph specification transformed aggregated filtered versus location events 
output operator graph defined context sensitive name 
versus source advertised static name chosen carefully discovered host 
ins application announced pattern receive name update messages host 
versus source publishes triggering events fixed interval sequence number event carried name update message 
sources waited go command issued control console started publishing events 
independence host sources graphs applications typical real solar system allows easily scale number client applications associated load 
measured maximum triggering event processing throughput planets 
triggering event considered processed planet triggered monitor cancel previous name announcement announce new name values event send name update message 
varying number client applications publishing rates sampled length queues planet find maximum throughput kept queue length stable 
result events second planet 
measurements consider scalability directory service case ins 
experiment distributed client applications fhs varied versus source publishing rate 
ins application located source calculated name update throughput 
show results 
reaching name updates second throughput peaked near 
clients pushing triggering events second ins resolver overloaded packets lost ins routes messages udp packets 
green curve marks shows loss rate 
red curve marks sum name update throughput loss rate flattens near indicating maximum event processing throughput planet 
number similar bit higher conservative throughput measured events second 
experiment demonstrates solar system scalable limits ins experiments necessary determine scalability approach realistic workload 
experiment events triggering events 
practice majority incoming events triggering events system achieve higher gross event throughput 
hand operators operator graph quite simple 
computationally intensive operator dramatically reduce throughput 
possible solar system distribute operators planets balance load increase number planets ins resolvers achieve system scalability ultimately system limited planet cpu network directory service ins context sensitive request defined fast event generating source 
policy driven data reduction technique chapter flow control mechanism 
graph loading receiving context sensitive name advertise query request planet responsible load operator graph defined graph specification attach monitors appropriate places 
number name updates second name update throughput name update loss rate sum publishing rate triggering events second results scalability tests 
define 
vn vn graph specification vn name specification proxy type name type pattern type pattern type pattern operator graph ins type pattern operator graph chain measure performance graph loading 
section measure time load operator graph graph specification 
performance graph loading determines planet capability service context sensitive requests 
set test case context sensitive name advertisement chain operators context sensitive name selectors 
operator selected output previous operator chain 
measurements long takes load operator chain different chain lengths 
ran experiment set identical linux workstations fh described section interconnected full duplex mbps switched ethernet 
ran ins resolver host planet different host 
third host ran test client periodically sent advertisement request including chained graph specification 
client machine sent advertisement seconds 
length chain varied step size repeated length times report average latency chain length 
measurement consider time needed recursively load operators attach monitors establish subscription links operators monitors start operator monitor threads initialize monitors contacting ins creating ins announcer thread register name pattern ins sending name update message ins 
measurement monitor initialization excluded ins costs included 
show results 
curves grow linearly time ins constant overhead compared loading time ins longer operator chain monitors need initialized ins 
took seconds load monitor chain length seconds length monitors fully initialized 
test admittedly quite stressful 
typical graphs expect small collection operators monitors ends graph client issues requests startup time 
certainly appears single planet load graphs second smaller graphs 
graph specification loading time ms graph loading ins graph loading ins length operator monitor chain measured time load operator chain 
believe serving requests second sufficient situations single planet ways busy planet handle frequent context sensitive requests 
planet refuse request redirect request planet delay monitor initialization ins monitor receives contextual events name specification fully qualified values filled 
improving scalability solar replaced ins scalable directory service 
performance directory wrapping layer supports context sensitive resource discovery similar results section 
currently evaluating performance new directory service solar masters student thesis 
recall solar service naming service runs planets network 
new solar distributes name space advertisements planets routing substrate pastry 
planet contains directory 
scalability reliability reasons design choices directory planet holds part name space advertisement replicated multiple planets 
planet receives advertisement registration splits advertisement set strands 
planet hashes strands numerical keys sends advertisement planets responsible keys dht transport 
receiving planets store full advertisement directory 
similarly query split strands planet hashes longest strand key sends query key resolution 
planet responsible query key stores advertisements containing corresponding query strand query resolved appropriately 
naming distribution query mechanism similar ins twine 
note enforce alternative tag value semantics record structure 
solar supports persistent queries allow monitoring name space ins twine 
related ins unifies resource discovery naming communication message routing 
applications desiring context sensitive names monitor context re advertise name needed 
furthermore ins support persistent name queries 
solar uses extended version ins directory service core context sensitive name service 
offloading context processing monitoring planets solar infrastructure framework improves responsiveness scalability 
ins twine achieves scalability partitioning name space resolvers mapping names numeric keys 
solar ins twine core directory service need different mechanism implement persistent queries 
chose adapt pastry include support persistent queries 
location information server lis integrates location information resource directory directory service light weight access protocol ldap 
lis shields application methods obtaining location information provides set apis query event notification 
lis provides solar features including limited context translation support location sensitive names capability lis limited predefined configurations rules 
solar provides programmable interface allow arbitrary definition context sensitive names 
solar uses peer planets cooperatively service clients requests disseminate contextual events better responsiveness scalability 
active names flexible approach locate service perform customized operations returned results allowing applications specify chain mobile programs result pass 
geared wide area service composition similar concept support context aggregation merging chains giving effect operator graph 
solar specification language expressive sequence names 
unstructured name representation limited expressiveness allow context sensitive source selection name definition 
hand solar allows context sensitivity edge operator graph source selection active names program operator chain alter presumably context destination event runtime 
extreme flexibility believe necessary task may difficult developers keep track event flow structure 
solar implements recursive context monitoring graph adjustments directly planet active names applications need implement feature individually 
non procedural language iql specify logic composing pervasive data context 
model uses attribute naming supports requested triggered evaluation 
composer iql allows inputs continually rebound appropriate data sources environment changes 
iql language powerful expressive language level facilities context aggregation 
language iql complements solar ways iql programming language individual operators iql high level specification language compiler decompose graph specification solar 
context toolkit provides abstractions construct context service :10.1.1.9.5130
distributed architecture supporting context fusion delivery 
uses widget wrap sensor sensor queried state activated 
applications subscribe pre defined aggregators compute commonly context 
solar allows applications dynamically insert operators system compose refined context shared applications 
context toolkit provides static attribute directory allow components register name applications find 
support context sensitive names subscriptions persistent name queries 
numerous directory services resource service discovery systems 
jini allows client locate service download proxy interface matching class proxy 
service location protocol slp focuses protocol automatic discovery czerwinski focus expressiveness security castro deal inter domain service discovery 
heidemann propose approaches discovery ad hoc sensor networks 
systems explicit support context sensitive names subscriptions 
chapter dependency load balance applications rely operators injected solar customized context information 
planet fails operators hosted planet lost 
considering relationship solar components applications operators sensors say directed operator graph dependency graph 
channel source sink say depends say dependent needs data produced dependencies challenges 
dependents component function lost due host failures 
second dependents track location keep data flowing moves planet 
application specific operators garbage collected reclaim computational resources application finishes 
describe solar approach dependency management section 
related issue focus research load balancing 
desirable distribute operators evenly planets putting operators relatively planets 
briefly describe possible solution way min cut graph partition algorithm section 
dependency management component solar assigned globally unique numeric key invariant component registered restarted moved planet 
specify dependency relationship components key depends example kx ky depends kx ky keys 
approach manage dependencies dependent component monitor liveness soft state protocol trigger restart process dependent detects failure approach conceptually easy difficult achieve efficiently scalably 
dependent may located host may fail 
second multiple dependents run distributed election algorithm select monitor non trivial dynamic group dependents 
section system design details solar dependency service manage components context fusion network including external clients data sources applications operators hosted planets 
key contributions service distributed protocols proactive component monitoring recovery instance name dependency tracking 
kx rx mx px prx component key component root monitor pmx planet hosting rx mx pm planet monitoring peer cp client component proxy table notation discussion dependency management 
list notation chapter table 
discussion indicate implicitly message delivered pastry dht routing mechanism destination key 
message delivered direct tcp ip connection destination ip address 
component registration dependency service solar component source operator application register service 
registering component provides key configuration information follows action take fails restart email administrator command object class initialization parameters start restriction regarding set hosts restarted solar reclaim dependents certain period time 
solar records configuration information available fails 
components may restarted just host 
instance data source may run particular type host access piece sensing hardware 
hand operators self sufficient processing events arrive solar may restart available planet lost 
components maintain state operation require state restored crash 
assume component may checkpoint state different host persistence service instance execution state available recovery 
issue research scope 
solar may migrate running operator planet 
solar implements weak mobility scheme operator migration asks operator capture state restore destination host 
solar requires component explicitly identify set components depends dependencies may vary circumstances components register remove dependencies necessary 
component may specify types dependencies key 
words component may specify keys components depends name query resolved discover components supply keys name advertisements 
name query may resolved multiple names requesting component may customized function select appropriate component chapter 
type dependency dependent supplies policy determining handle failure restart migration component name dependencies change results name query selector function 
example depends fails policy may wait restarted 
dependency name reasonable policy output function select different component 
component zero dependents component may subject garbage collection release occupied resources 
cp dual monitoring planet behalf operators attached clients 
summary component registers solar dependency service provide key information restart configuration list dependencies associated policies 
solar monitors component restarts configuration case failure solar tracks component state behalf dependents takes appropriate actions dependent policies state changes 
monitoring recovery operator failed due internal exception hosting planet simply restart 
recover planet failure install dedicated monitor mx watchdog 
note monitors dependency service different naming service chapter 
periodically sends token message mx direct ip mx assumes lost heard token period time 
mx selects planet restart new register dependency service send tokens mx 
hand mx periodically sends token monitoring purposes 
detect failure mx restart planet 
bi directional monitoring ensures mx restarted new planets fail simultaneously 
installed monitor component incur large amount monitoring traffic operators relatively planets 
waste cpu power network bandwidth 
group operators planet monitor need monitor planet monitor restarts operators group planet fails 
shown black circle representative planet sends aggregated tokens monitor pm operators cp proxy operator client proxy monitored just operators 
starting planet tries find planet monitor sending request random key pastry receiving planet responds ip address 
request successfully returns starts send aggregated token including key configuration operators monitoring planet pm direct ip connection 
hand pm send acknowledge token fixed rate 
pm maintain timer updated token received peer expired updated certain period time 
token sending interval pm assumes received token period kt crashed 
similarly assumes pm lost received token period 
tuning parameter protocol resilient intermittent token loss quickly able recover failures 
timer pm expires starts recovery process operators hosted originally chooses random planet sending request random key request contains key configurations operators start 
receiving planet restarts operators locally optionally forward request planet overloaded 
pm removes list monitors 
detects pm failed sends monitoring request random key planet 
move operator planet removes local repository requests install new copy fails migration process pm eventually times triggers process recovering successfully initiated requests pm remove key configuration 
watched monitor 
discuss monitor recover external client idea similar client serving planet run dual monitoring protocol monitors liveness 
failed tries restart configuration contains instructions 
simply removes cp de registers hand proxy operator cp registers dependency service monitored pm 
failed pm try recover cp simply removes cp list operators restored 
alive ask restart cp alive failed may go discovery protocol find planet service 
note pm form node ring monitor 
fail simultaneously protocol able recover lost operators assuming planet fails probability related failures probability simultaneous failure reduce probability inserting monitors expand circle 
monitor pm periodically sends token adjacent neighbor ring effectively monitors pm restarts failed similar way previous discussion 
token contains current addresses participating monitors failure non adjacent members break ring 
nodes circle protocol failure probability exponentially reduces cost linearly increased total token rate assuming token rate edge 
tracking dependencies facilitate coordination component depends define root object denote rx 
root runs planet responsible key party communicate sending messages kx knowing network address 
rx tracks current location forwards message monitor retains restart configuration root rx keeps dependency policies receiving periodic updates shown 
receiving periodic update messages rx records current location list dependencies 
dependency name rx queries directory service evaluates selector function results 
output determines component update heartbeat multicast ry update component root tracks dependencies 
assume depends notified changes selection updates rx changes 
rx contains list keys components currently depends explicitly specified resolved name query 
root rx receives notification px mx fails restarts migrates 
rx publishes notifications events multicast service publishing key kx deterministic function return publishing key 
purpose mapping function allow subscriptions key kx key rx 
rx subscribes mapped keys components depends ky 
events trigger rx take actions specified dependency policies instance re evaluate selector function get usable components failed ask px reboot rebooted 
note scalability reasons rx keep keys dependents 
simply publishes events single mapped key dependents subscribe 
list keys currently depends expect list relatively small rx sends periodic heartbeat message keys low frequency 
root components receives heartbeat resets timer timer fires heard heartbeat dependents long time 
root say ry component assumes dependents anymore 
configuration permits ry requests py delete de register dependency service 
note state kept root soft recreated component periodic updates 
soft state helps situation prx crashes rx moved different planet due overlay evolution 
rx times updates simply removes 
protocol optimizations cases desire restarted planet near original px maintain network proximity components 
achieve goal add field monitoring tokens field contains set neighbor nodes nx px 
px fails mx may request random planet nx start sending request random key 
possible mx run planet nearby px approach increased possibility px pmx fail nearby nodes may correlated failure 
optimization reduce traffic monitoring recovery aggregating protocol messages sent ip pastry key 
places dependency service group messages 
planet message originator may group ken messages heartbeat messages sent ip address pastry key 
hand planet intermediate node transmission path may check destination key passing messages group key 
simulations realistic network topologies show paths messages sent key nearby nodes underlying network converge quickly small number hops message aggregation may significantly suppress protocol overhead 
evaluation section results monitoring migration protocols 
performed experiments linux workstations connected mbps switch 
average round trip delay hosts ms 
workstation run single planet hosts operators 
set token rate seconds monitoring timeout seconds 
root update rate seconds 
measure long takes solar recover planet crash restore operators planet 
deliberately crashed planet report interval monitor detected failure monitor recover request returned 
recover request sent random key responsible planet restarted operators crashed planet registered local dependency service 
show result recovery time measured number operators crashed planet 
notice time grows linearly number operators recover increases 
measure time takes operator migrate planet 
test seconds planet moved random operator currently hosted planet 
migration requested current planet remove information moving operator sent migration request random key 
planet received request restart operator configuration request 
measure time migration request time request successfully returned original planet 
recorded delay numbers planets minute run shows distribution 
median migration time milliseconds 
hops migration request go latency incurred 
saw long tail indicating couple milliseconds delay caused combined effect large number hops thread scheduling effects destination planet 
related concept data fusion essential component context aware systems context toolkit 
seen general service solar provides manage dependencies distributed data fusion components 
believe service abstracts away complexities coordination heterogeneous volatile pervasive computing environment 
dependency service mainly concerns temporally coupled components directly apply coordination models 
instance stanford intelligent room system provides temporally decoupled communication tuple space 
say component depends tuple space service component may individually dell gx ghz cpu mb ram running red hat linux recovery time ms cdf number operators operator recovery time milliseconds planet crash 
migration time ms distribution operator migration time minute run 
monitored recovered 
functional restart dependencies components clearly defined 
recovery oriented computing roc aims reduce recovery time offer higher availability 
roc technique recursive rr groups components restart dependencies functional dependencies 
error malfunction detected including component failure rr system proactively restarts minimum component group containing offending 
approach smaller scope focused distributed dependency management protocol 
solar supports restart dependency addition functional dependency requiring explicit component registration 
solar uses rendezvous point infrastructure manage component dependencies 
relatively stable overlay network soft state root root natural entry point inter component coordination 
indirection technique manage large scale event multicast host mobility 
load balancing section briefly discuss load balancing service solar 
done ming li 
application requests deployment operator graph solar launches operators available planets 
solar attempts deploy operators re arrange necessary balance computational load planets reduce inter planet communication traffic 
iterative re deployment process self monitoring self tuning 
planet profiles load operator measuring cpu usage event arrival rate incoming channel 
load balancing problem way min cut graph partitioning problem number planets 
operator graph flow graph nodes represent operators edges represent channels node weights represent operator cpu usage edge weights represent event flow channel 
metis fast scalable software package compute approximate partitioning attempts minimize communication cut balance load 
balance cpu load requires centralized knowledge cpu load operator traffic flow channel information expensive collect 
fortunately global loadbalancing effort mandatory cpu load planet high threshold 
apply local effort focused reducing traffic planets 
case apply min cut algorithm graph corresponding single application small group applications 
local tuning reduces inter planet traffic globally locally substantially harming global cpu balance 
local tuning frequently global tuning occasionally 
www users cs umn edu karypis metis chapter sensor analysis experiment location aware solar applications deployed indoor location tracking system covering department building section 
campus wide deployment wifi access points allows estimate locations wireless devices section 
location infrastructure place believe critical analyze characteristics services quantitatively tight interactions location provision systems location aware applications 
evaluations experimental location systems available seen reports detailed analysis data collected deployed location system 
chapter attempt quantify data quality characterize user movement patterns location traces shelf location systems daily usage 
study inevitably particular deployment biased certain user population results serve feedback location system behaves guideline design middleware system solar location aware applications general 
versus sensors installed commercial locating system vis versus information system department building 
installation vis contains ir rf operating mhz sensors wired collectors collector handles sensors 
collectors daisy chained interfaces ethernet 
ir sensor range feet rf sensor range feet 
personnel badge periodically emits ir rf signals bit packet bit id picked ir rf sensors respectively 
packets forwarded collectors re formatting relayed 
badge contains ir transmitter rf transmitter motion sensor optionally push button 
badge emits rf signal minutes emits ir signal frequently seconds move stationary minutes 
rf channel serves backup indicating badge range feet diameter rf sensor center ir signals lost instance due ir line sight problem 
badge uses internal motion sensor adjust send ir signals way prolong battery life time 
www com badge num unique id sighted badge col num unique id collector reporting sensor sen num id sensor collector sequence number bits badge signals motion badge movement stationary button button badge pressed battery badge battery low timestamp time report arrived logger table list data fields record vis location trace 
story department building offices labs classrooms 
deployed ir sensors cover rooms office due resident request machine storage rooms ir sensors cover hallways 
large labs partitioned zones ir sensor installed zone 
rf sensors distributed evenly cover building 
captured output versus academic term january march 
period study author person wore badge time 
distributed badges students enrolled pervasive computing seminar term wear badges consistently 
students divided groups develop location aware applications 
half class offices building 
attached badges printers chairs laptops 
peak workload vis badges building peak load sensor badges example final project demo day 
day trace data contains records collected january march 
record represents sensor sighting badge shown table 
holes collected data january due software upgrade minutes february due hardware upgrade hours 
march migrated source collection process dedicated server lost hours data days 
study results include data days 
rf ir sensors wired versus system think layers consisting ir sensors consisting rf sensors 
layers different characteristics update rate granularity 
interesting study separately compare shoulder shoulder 
study separated trace parts generated ir sensors rf sensors 
rest discussion refer ir layer versus ir rf layer versus rf 
wlan sensors campus compact buildings acres including administrative academic residential athletic buildings 
school installed access points cisco systems aironet model provide mbps coverage nearly entire campus 
access point ap range feet indoors aps smallest buildings 
specific effort cover outdoor spaces campus compact interior aps tend cover outdoor spaces 
device roughly located campus relating currently associated access point 
describe approaches infer access point card currently associated push syslog pull snmp 
approaches recorded traces days january march inclusive 
note data collected year versus data 
configured access points transmit syslog message time client card authenticated associated access point see definitions 
syslog messages arrived udp server lab recorded day period analysis 
aps contributed syslog trace soon configured installed 
saw aps unique mac addresses trace 
aps appear misconfigured send syslog messages 
syslog uses udp possible messages lost 
result spatial temporal holes trace statistics actual activity 
syslog recording server added timestamp message arrives 
message contained ap name mac address card type message authenticated 
card may network authenticate 
ignore message 
associated 
authentication card chooses range access points associates ap traffic card goes ap 

card monitors periodic beacons aps signal strength factors may choose ap 
feature supports roaming 
unfortunately cards vendors apparently protocol associate 

card new ap new ap broadcasts fact ethernet receipt old ap emits syslog message 
ignore message depends inter ap protocol ip layer occurs card roams ap subnet 

card longer needs network current ap 
syslog contained messages 

possible card request happened log 
normally associated ap card minutes inactivity 
log common see messages widely roaming card message subnet visited session ignore message ap 
simple network management protocol snmp periodically poll aps 
chose poll minutes obtain information reasonably frequently limits computation bandwidth available polling workstation 
poll returned mac addresses associated client stations current value counters inbound bytes outbound bytes 
day trace period includes snmp records extracted messages localization purpose 
saw aps unique mac addresses trace 
network mac layer authentication aps ip layer authentication dhcp server 
card may associate access point obtain dynamic ip address 
know identity users ip address user varies time time building building 
approximating assumption equate cards users users may multiple cards cards may shared multiple users 
rest discussion refer campus wide localization mechanism syslog message stream campus syslog campus snmp 
measurements results section analysis location update traffic 
focus discussion data quality volume section section load disparity users zones section sighting intervals users section user prevalence section 
reminder users approximated badges versus cards campus 
zones represented name sensors versus name access points campus 
data quality unfortunately systems generates perfect location data direct usage 
dedicated commercial locating system versus performed reliably easily parse data stream obtain badge sighted sensor 
curiously system generate errors reporting non existent badge badge non existent sensor 
errors versus ir trace versus rf trace 
software part system check human maintained table detect errors 
campus syslog reported incomplete messages probably caused syslog daemon trace 
light weight transmit messages udp may caused packets arrive order arrive 
problem difficult detect impossible recover 
ignored warning messages access point conditions represent percent trace 
campus snmp polling station poll access points minutes 
snmp query included statistics ap interfaces associated client cards 
extracted list cards represented percent trace 
need detect remove errors versus systems campus syslog 
data reduction gained applying simple filtering campus systems respectively 
systems timestamps added collection processes host clock data arrives 
considering daylight savings time timestamp may need transformed avoid confusion non continuous near clock changes timestamp sensitive applications 
merging correlation necessary reliability campus syslog scalability campus snmp 
possible set versus systems cover large building location system merge data streams root maximum minimum mean std 
dev 
versus ir versus rf campus syslog campus snmp table statistics daily location update traffic 
standard deviation divided mean value coefficient variation 
answer queries badge 
summary data pre processing plays vital role localization systems 
data volume compare location update traffic generated systems table 
see relatively small variation daily location updates versus rf campus snmp 
considering update rate fixed pushed badge minutes versus rf pulled snmp poller minutes campus snmp indicates number badges cards daily small variation 
typical day campus snmp produced messages second total cards aps seen trace 
campus syslog produced smaller amount update traffic campus snmp traces collected period 
surprising syslog produced updates card associated access point visits lasted longer minute polling interval 
versus ir relatively large variance daily updates due significant difference update rate badge motion seconds stationary minutes 
theory badges produce updates second missed pings caused interference line sight problems 
updates second active badges 
clearly tracking assets people multi site large organization challenge location service 
location aware applications resident mobile device resources handle amount traffic 
software infrastructure necessary collect process disseminate location updates applications 
infrastructure needs keep update arrival rate control amount information delivered applications 
shield data pre processing applications share results multiple applications 
major research efforts specifically target direction 
case data rate may capability infrastructure approximation techniques applied reduce data stream chapter 
load disparity location aware applications may care location updates particular zone particular user answer queries zone user 
decompose trace show load distribution queries 
compute fraction versus distribution location updates badges sensors 
cdf update load ir sensors ir badges rf sensors rf badges percentage sensors badges campus distribution location updates cards access points 
cdf update load syslog cards syslog aps snmp cards snmp aps percentage aps cards load updates generated individual users sort decreasing order 
plot cumulative sum sorted vector axis 
point read top fraction users generated fraction location updates resulting cumulative distribution function cdf plot 
thing separate traffic zones 
shows results versus systems 
versus ir sensors received updates indicating hot zones building 
fact offices badge owners 
versus rf deep curve user population concentrated small number rooms distributed radio cells 
badges generated updates versus ir active badges worn author attached office chairs 
active mean motion sensor badge reported badge movements 
interestingly badge attached stationary laptop stationary water cup resting author desk generated large number updates 
result indicates motion sensor badge sensitive badges appeared active user working desk 
number updates versus rf insensitive badge state active update rate fixed minutes curve closest linear 
small variation caused occasional absence badges building 
shows load disparity access points cards campus 
campus syslog knee near cards generated location updates campus snmp smoother curve 
syslog curve skewed snmp curve captures short term mobility caused cards changing aps frequently 
cards mobile stationary trying walk adjacent access points find better signal strength quality 
load distribution access points campus syslog campus snmp comparable skewed similar reason aps hotspots captured short term sessions 
observe location update load disparity zones users systems 
localization systems need aware situation 
sensor hierarchy versus sensor collector may experience hot paths system 
buffer size paths need handle peak traffic seen test phase 
software infrastructure lattice location service see similar phenomena 
virtual counterpart campus distribution average sighting intervals minutes 
cumulative distribution snmp syslog average sighting interval minutes versus distribution average sighting intervals seconds 
cumulative distribution ir active rf ir average sighting interval seconds agent hot zones active users experience location updates possibly location queries due popular interest 
hand applications take advantage locality property 
example popular information cached prefetched 
sighting interval sighting interval defined period consecutive location updates user 
versus systems apply cut period minutes longer intervals indicate badge building 
took advantage motion field versus events 
intervals idle period defined sequence consecutive motionless reports thrown away badge active 
heuristic exclude intervals badge placed table user away 
apply approach versus ir call versus ir active 
campus syslog associated boundaries sighting 
treat messages special location update 
syslog messages ignored analysis 
apply cut period campus snmp trace 
show cumulative distribution average sighting interval cards badges campus versus systems 
campus systems different sighting intervals due nature location update mechanism 
mean campus snmp minutes median minutes maximum days 
mean campus syslog minutes median minutes longest interval days 
interpretation difference purposely collected traces period time campus traces set access points showing traces mentioned 
reason snmp detect card departure leading longer interval card came back 
mean average sighting interval versus rf seconds roughly fixed update rate minutes 
mean average sighting interval versus ir seconds tail seconds 
notice tail smaller minute cut period indicating badge happened leave building stayed versus distribution missed pings various badges 
cumulative distribution chair user laptop missed pings versus distribution detection delay badges 
accumulative distribution detection delay seconds versus ir versus rf half hour 
mean average sighting interval versus ir active seconds order magnitude smaller previous 
infrared localization systems known line sight problem 
obstacles block ir signals potentially increase sighting intervals 
versus system encodes builtin sequence number location updates detect number missed pings 
shows cumulative distribution missed pings badges attached office chair worn user attached laptop 
zero value missed pings counted dominant trace instance total missed pings badge worn user percent 
see small number missed pings frequent 
estimation approximation sequence number bits 
shielded active badge easily sequence space seconds 
starting march author wore badges wrist pinned chest 
chest badge lost percent pings similar wrist percent loss 
simple analysis detection latency 
assume random variable denoting time badge entering zone system receiving ping uniformly distributed seconds 
mean 
assume statistically independent badges enter zone simultaneously detection time uniform distribution seconds 
provable mean detection time difference badges 
compute empirical detection difference badges worn user enters new zone badges active plot cdf note axis log scale 
versus ir active versus rf approximated doubling mean respectively seconds seconds 
mean detection differences seconds versus ir seconds versus rf roughly rule 
significant detection lag taken account application requires spontaneous interaction collocation information 
particular applications memory aid active reminder may events fail act people briefly meet hallway 
sighting interval useful metric measure freshness confidence location information 
frequently system obtains user location updates confident user current location 
active map application uses image fading frame shading sighting interval degrade information freshness gracefully 
detection latency may impacts applications reminder application uses collocation teleporting call forwarding application follows user current location 
localization systems provided explicit location update user left covered area messages campus syslog reliable reliable message arrives minutes user leaves 
applications infer situation applying threshold long update user location unknown 
arbitrary threshold relates expected value sighting interval localization system 
sighting interval complicated metric jointly determined localization system design characteristics deployed environment user behavior 
versus ir percentage missed pings similar badge worn chest wrist conceivable user wearing badge belt suffer lost pings 
depending arrangement access points location wireless card environmental interference card may cause location updates trying associate access point best signal quality 
campus snmp fixed minute polling interval card seen moves 
versus may report arbitrarily long sighting intervals badge taken building put drawer user battery died noticed 
prevalence prevalence zone user trace measure fraction time user spends zone 
user prevalence value zone visited trace sum prevalence values user 
metric defined characterize user mobility corporate wireless lan study 
study user categorized highly mobile somewhat mobile regular occasionally mobile stationary segmenting maximum median prevalence bins see bin user belongs 
compute maximum median prevalence user figures show scatterplots user localization systems 
segmentation lines values drawn dashed lines 
avoid valued points added randomized jitter range axis point 
look plots versus systems figures 
total time user time badge active system 
badge left table unused excluded period idle time prevalence computation 
due definition median users median prevalence greater special case median maximum prevalence user visited place 
see stationary badges versus ir versus rf 
may odd badge stationary ir zone stationary bigger rf zone 
explanation overlapping rf zones badge ping received rf sensor reported rf sensors receiving ping exact policy sensor group versus choose unclear 
badges median prevalence equal means badge visited zones maximum prevalence shows biased badge 
author user versus ir scatterplot prevalence badges 
median prevalence versus ir maximum prevalence versus rf scatterplot prevalence badges 
median prevalence versus rf maximum prevalence wore badge consistently show bottom right corner indicating spent time offices spent relatively little time sensors hallways 
badges low median maximum indicate time evenly distributed sensors 
badges seen versus rf relatively higher prevalence radio cells 
plots campus figures bear strong similarity show obvious patterns 
percent cards moved lifetime traces 
second nearly percent cards median prevalence means spent time access points 
cards may mobile believe just access points signal quality 
third line pmax bounds points right side smaller 
rule holds skip proof 
interesting see points flock line 
reason believe card aps biased strongly approaches pmax 
common line plots pmax 
phenomena caused card aps spending time pmax card aps getting little time 
explanation point card may change associated ap moving significant phenomena 
network optimizations cards cause complications confusion localization systems trying determine current place card 
system designed different purpose infer object location conflicts goal complicates task 
suggests take asis approach systems limited usage advanced processing correlation aps 
techniques explicitly involve user interaction times investigated various applications 
compute percentage users mobility category defined median maximum prevalence location systems show results table 
entry format versus ir versus rf campus syslog campus snmp 
versus ir versus rf traced user population period see categorize users comparably 
main difference versus ir campus syslog scatterplot prevalence cards 
median prevalence campus syslog maximum prevalence campus snmp scatterplot prevalence cards 
median prevalence campus snmp maximum prevalence maximum prevalence pmax median prevalence low medium high pmax pmax pmax high stationary medium regular low highly mobile somewhat mobile occ mobile table mobility matrix localization systems prevalence metric 
stationary users versus rf highly mobile users 
result surprising badge may reported show rf cell stationary intersections rf zones 
captured traces campus syslog campus snmp time period roughly user population set aps seen systems slightly different possibly misconfigured responding syslog snmp queries 
systems divide user population mobility categories similarly 
analysis leads conclude user mobility captured heterogeneous localization systems different granularity versus location update mechanisms rate versus campus 
perceived user mobility versus campus comparable operated different scale tracked different user population 
note localization systems really tracking devices humans 
devices badges laptops handhelds users may carry device move 
unable draw behavior careful study user behavior 
chapter application studies undergraduate graduate students solar develop applications pervasivecomputing seminars senior honors theses research projects 
chapter give detailed case study solar application automatically controls desk telephone ongoing meeting office 
discuss experiences lessons learned application 
briefly go solar applications domains smart spaces emergency response developing 
meeting detection interested detecting meeting status office environment capability expect useful classes applications applications help user control devices room programming phone send incoming calls voice mail audio video record proceedings meeting controlling projector lights microphone devices meeting room applications help meeting room scheduling system monitor room situation know meeting progress 
scheduling system allow minute bookings real time information availability 
detecting high level context user meetings challenging problem 
user calendar may provide hints unreliable source users fail update calendars consistently promptly 
choose detect meetings embedded sensors 
section sensors selected detection algorithm performance evaluation prototype 
built telephone controller redirects incoming calls pre configured voice mailbox meetings interrupted 
telephone controller decision switch voice mail output meeting detector 
telephone controller works cisco ip phones logging configuration website reconfiguring call forwarding settings meeting begins ends 
system design goal detect meeting near real time expecting user attend meeting wear special hardware location tracking badges 
www cisco com en products hw phones ps instrumented meeting space controlled telephone automatically transferred incoming call voice mail interrupting ongoing meetings 
surprising regular building occupants refuse wear badge visitors open academic building course wear badge 
designed meeting detector detect meeting status aggregating kinds sensors input 
introduce system architecture hardware setup describe operator graph detail discuss fusion algorithm 
done wang 
meeting detector designed detect meeting user office conference room see 
prototype designed small meeting area typical office contains table chairs 
define meeting progress chairs occupied 
detect chair occupation pressure motion sensors attached chairs 
approach assumes motion pressure produced human occupation may fail cases somebody bumps chair causing motion signal somebody places heavy object chair causing pressure signal 
necessary combine sensors achieve reliable result 
added sensors chairs detect pressure seated person motion chair caused seated person see 
reduce cost pressure mat chair occupied meetings office resident 
pressure mat seat chair uses wireless transmitter communicate status nearby receiver pressure sensor motion sensor badge filter badge filter badge filter badge filter motion aggregator meeting combiner output operator graph meeting detection sensor fusion 
meeting table chairs motion sensors chair pressure sensor 
seconds preset hardware 
software receiver computer sends pressure reading solar event logs data automatically 
call log pressure log detect chair motion status existing commercial location system personnel badges periodically send ir updates ceiling mounted sensors 
badges happen embedded motion sensor intended conserve power badge stationary 
badge update packet contains status motion sensor tell badge moved 
monitor ceiling detectors translate badge packets solar events 
motion sensor quite sensitive seated user usually trigger sensor sitting 
badge sends updates seconds moving minutes stationary 
motion data logged server obtain motion log kinds sensor data operator graph running solar determines meeting status 
operators filter data motion sensors combine data pressure sensor 
describe operator graph fusion algorithm 
meeting detector operator graph mainly consists layers filters combiner see 
solar raw data sensors data collection devices data converted attribute value pairs solar event 
meeting detector solar sources motion source pressure source reads raw sensor data uses solar api publish event object sensor reading 
events pressure source attributes indicating pressure detected sensor timestamp 
events motion source contain badge number motion state timestamp 
motion source collects updates badges chairs offices attached chairs badge filter pass events badges meeting room filter matches particular badge number 
motion aggregator keeps internal state movement chairs publishes event number moving chairs changes 
combiner key operator graph meeting detector 
goal output event www com www com state machine illustration sensor combination algorithm 
meeting table chairs motion sensor chair pressure sensor 
meeting begins ends 
receives simple events filters internally records observed state means pressure mat means pressure means motion chair means motion 
shows combine pressure motion data detect meeting start state machine 
time state change 
states 
means meeting progress means meeting progress 
initially wait pressure motion time decide meeting started 
declare meeting pressure motion readings 
mean meeting may ended hesitate decision immediately 
hesitation states deal intermittent reports pressure motion meeting progress unreliable sensor outputs 
thresholds control transitions hesitation states 
threshold state pressure motion state motion pressure 
exceeds exceeds assume meeting ended despite sensor indicating meeting progress 
timeouts necessary sensors occasionally stick 
set minutes motion sensors report chair stationary occupied people sit 
set minute pressure mat unexplained minute gaps chair occupied 
thresholds help reduce false reports meeting 
essentially decide meeting progress pressure motion detected 
sensors occasionally report intermittent lack pressure motion state machine declare meeting immediately false include states cases condition returns timer exceeds threshold meeting continues state 
time elapses declare meeting 
evaluation section report performance meeting detector 
study test sensitivity accuracy meeting detector matching detected meeting records meeting detector real meeting records manual log week period actual meetings 
tested meeting detector professor office real meetings real people periods september february 
obtain ground truth actual meeting start times implemented simple meeting recorder installed tablet placed meeting table 
application allows professor single button manually log meeting start 
results meeting log log incorrect records due human mistakes failing record meeting starting late 
discard incorrect data corresponding data pressure log motion log total log files meeting log pressure log motion log matching output meeting detector pressure motion logs input meeting log measure meeting detection works different detectors pressure data detect meetings motion data detect meetings chair motion combined motion data pressure data algorithm previous section 
compare outputs detectors real meeting log 
immediately clear appropriate metric measure quickly detection occurs 
context classification component interested accuracy sensitivity 
define metrics measure matching accuracy comprehensively shown illustrated 
delta start difference real meeting start time detected meeting start time 

delta difference real meeting time detected meeting time 

gap length time length gap detected meetings real meeting divided detected meetings 

gap number number gaps detected meetings real meeting 

missed gap length time length gap detected real meetings 

missed gap number number gaps detected real meetings 

extra meeting length total time extra detected meetings map real meeting day 

extra meeting number number extra meetings day 

missed meeting length time length real meeting thoroughly undetected 

missed meetings number missed meetings thoroughly undetected day 
definitions evaluation metrics meeting detection 
results metrics show cases happened rarely little data 
plot curves show cumulative distribution function cdf quality metrics meeting detector set points representing real meetings 
metrics smaller left represents better detection performance 
show performance detectors different metrics 
note plot clearly shows motion detector quickly detected meetings median seconds seconds earlier combined detector seconds earlier pressure detector 
second latency price pay avoid extraneous meetings gaps reasonable trade applications 
combined detector shows advantage median delta seconds 
algorithm detecting meeting time start time 
asymmetry arose necessary states associated thresholds 
hesitation states effectively reduce extra meetings gaps length number shown 
plot shows pressure detector longest extra meeting length pressure mat stuck produced long extra meeting 
plot shows motion detector longest gap length motion sensor limitation mentioned 
plots show combined detector effective reporting fewer extra meetings fewer gaps motion detector fewer extra meetings fewer gaps pressure detector 
results show clear advantages combined detector overcomes limitations single sensor enhances performance significantly 
generally single sensor indicator meetings reaction time sensitivity inherent hardware limitations 
motion scheme catch time meeting start due sensitivity sensitivity led detect note seconds noise basis comparison manual meeting log unusual professor sit get settled seconds clicking meeting start button 
proportion proportion proportion pressure motion combined delta start extra meeting length pressure motion combined gap length pressure motion combined proportion proportion proportion pressure motion combined delta pressure motion combined extra meeting number pressure motion combined gap number cdf plots represent results different metrics 
meeting prematurely people moving frequently 
tended detect extra meetings bumped chairs 
result extra meetings gaps 
hand pressure mat sensitive motion sensors avoided problem accidental bumped chairs 
pressure mat occasionally got stuck produced excessively long meetings 
naturally combination best best metric delta start 
discussion expect approach detect meeting context implemented low cost easy maintain 
wireless pressure motion sensors tied simple wireless receiver room easily collect forward information wifi ethernet connection 
sensors integrated chair seat cushion rugged easy maintain 
additionally complex sensing infrastructure location trackers required happened leverage existing system test 
fusion logic easily implemented software hardware training necessary 
training may improve accuracy somewhat inconvenient retrain meeting environment changes room visited users different habits system ported rooms 
typical enterprise office conference room chairs cost dollars apiece 
progress sensor wireless network technology drive price needs pressure sensor motion sensor wireless transmitter dollars chair dozen dollars meeting room quantity years 
deployment cost approach may reasonable applications 
limitations 
detection quality determined sensor limitations 
low cost means sacrifice performance extent 
different applications meeting detector require different detection accuracies sensitivities adequate accuracy achieved prototype may sufficient applications 
applications may require highly sensitive accurate detection seconds scheduling applications may satisfied accuracy minutes 
argues solar approach allow applications customize desired information pre compute context applications 
second note chose define motion chairs moved 
defining motion chairs moved avoid detecting extra meetings experience approach change delta start delta significantly 
careful tuning parameter lead better performance 
environments short meetings occur close frequent minute meetings minute intervals meeting detector ordinary case pressure sensor sensitive react short intervals time 
better sensor easily avoid problem 
applications developing solar applications domains smart spaces emergency response enabled building wide section campus wide section location tracking infrastructure 
active web portal shows customized content approaching user 
earlier built smart reminder application solar 
goal application determine appropriate time alert user appointment user current location location task calendar 
approach friendly efficient alerting user say minutes prior meeting regardless distance meeting site 
arun mathias implemented application 
summer assembled project team build active information portal customize layout content identity user context information 
shows prototype gui displays user calendar people nearby virtual board associated current location interface allowing user exchange files personal folder public folder associated current location 
prototype built apache portal framework 
adrian ming li cal newport song helped write application 
built web proxy determined associated access point ip address wireless client 
browser wifi device initiated request proxy determined rough location ip address header 
browser push location dependent information client see top returned page 
proxy may automatically fill web forms user current location 
chen wrote application 
built location aware graffiti application shown runs user mobile portals apache org browser wireless client get location dependent information instrumented web proxy 
device allows user attach text messages current location 
user may retrieve graffiti left current location 
map interface allows user explicitly navigate find author graffiti 
lin zhong wrote application 
solar currently deployed new suite applications earlier system called automated remote triage emergency management information system 
emergency response applications large number data streams environmental sensors physiological sensors attached victims responders human observer inputs 
related command control applications solar compute high level customized contextual information decision makers different participating organizations 
show early application gui running remote emergency operation center mobile device carried responders respectively 
goal project provide situational awareness levels incident command hierarchy 
christopher michael aaron wrote application 
field studies responders local authorities learned environment situation change quickly 
changes cause automatic operator graph reconfiguration naming discovery service dependency management service 
hand context needs may foreseen 
decision makers may quickly deploy new operator graphs solar network solar development deployment toolsets 
integration solar project begun 
www dartmouth edu projects graffiti application running mobile devices allows user leave retrieve current location 
experiences lessons note applications may context actively passively 
smart space scenarios applications take actions directly context changes phone controller changed behavior meeting context 
applications right context right granularity right people decision making left human users emergency response applications fit category 
difference caused complexity decision making cost mistakes different environments 
relatively easy convey operator composition model students pervasive computing seminar course 
seen cases code operator reuse simple location filtering transforming 
student project groups progress parallel little coordination ended multiple versions similar operators 
instance reuse provided deployed operator computed badges current location group primary source operator graphs 
reason see reuse sensors time projects needed location filter 
expect solar strength obvious environment instrumented sensors applications developed 
instance easily replicate meeting detection hardware offices applications may context meeting status 
prototype solar pure event driven system operator passive event handler 
approach natural physical sensors difficult command control applications running remote provide situational awareness decision makers 
front application running mobile device carried responders 
incorporate types online sources calendar information 
query interface pull channels current version meets need 
drawback lack built timeout facility preventing operator gaining control received event fusion logic needs react lack events reacts new events 
learned lessons experience building various solar applications 
stable flexible efficient context fusion platform solar great help application developers 
significantly reduced developer programming efforts 
solar ability reuse classes instances easier extend applications 
second single type sensor unable provide desired accuracy sensor limitations 
helped combine multiple sensor types sensors complementary 
observation justifies importance context fusion 
need point easy effective fault tracking necessary design invisible pervasive computing systems 
instance phone rings meeting detector wrong decision wrong hardware 
sensor went wrong motion badge pressure mat 
tell embedded 
hardware failure just need new battery 
system failure cases experiments required significant effort debug 
chapter pervasive computing relatively young research field challenging issues solved 
dissertation addresses system infrastructure needed support adaptive context aware applications 
abstracted application requirements data fusion problem built flexible scalable middleware infrastructure allow applications specify data computation needs 
contributions dissertation solar infrastructure connects sensors applications allowing applications specify customized operators tailor received contextual information 
solar provides suite services manage operators meet challenges heterogeneous dynamic pervasive computing environment 
primary contributions dissertation flexible scalable context fusion system pervasive computing environment programming model operator graph compositional model 
model allows applications deploy specific data fusion functionality inside network policy driven data reduction technique allows loss tolerant context aware applications trade completeness fast delivery case buffer overflows caused rapid data streams slow receivers scalable naming service supports persistent queries context sensitive resource discovery takes advantage context fusion facility allows applications offload traffic computation infrastructure set component monitoring dependency tracking protocols automatically recover operators lost due host failures automatically adjust operator graphs changes resource availability detailed analysis traces collected location tracking systems daily usage provides insights typical pervasive computing characteristics experience building pervasive computing applications lessons learned 
open source software package solar provides valuable contributions community 
limitations solar operator composition language easy learn users may prefer descriptive language iql 
effort believe solar support interfaces instance automatically parsing iql program operator graph deployable solar 
solar allow loops operator graph applications built need feature 
expect applications may need loops data flow require solar extended 
currently tools validate specified operator graph errors connecting different pull push ports detected deployment 
lack gui tool help users specify operator graph visually 
solar operator library quite limited common filters aggregators deployed sensors 
currently expanding operator library support advanced fusion algorithms follow common models somewhat similar pqs pluggable processes 
believe important step increase code instance operator reuse 
solar designed lan environment planets run inside single organization packet drops host failures frequent latency relatively low 
natural extend solar run wan settings plan develop internet solar applications evaluate solar performance wide area testbed called planetlab 
solar currently explicit support context history 
operators may decisions historical observations may require repository history data 
plan develop persistence service exposes set integrated apis allow time data storage retrieval 
point solar secure vulnerable malicious attacks access control enforced guard information privacy 
plan integrate automated access control propagation facility provide degree security encrypting data communications leveraging existing solutions pki public key infrastructure :10.1.1.13.4675
generally easy add security mechanisms implemented system 
expect solar service oriented design may facilitate process 
barrier preventing pervasive computing faster adoption lack flexible scalable infrastructure designed meet challenges heterogeneous volatile environment 
support context aware applications solar system employs flexible operator composition programming model facilitates development deployment applications 
manage application specified operators set overlay nodes called planets solar provides unique services application level multicast policy driven data reduction handle www planetlab org buffer overflow context sensitive resource discovery handle environment dynamics proactive monitoring recovery handle common failures 
experimental results show services perform typical dht peer peer routing substrate 
experience building applications solar shows developers benefit infrastructure allowing focus task specific functionalities overwhelmed complexity pervasive computing environment 
bibliography daniel abadi don carney mitch cherniack christian convey lee michael stonebraker tatbul stan zdonik 
aurora new model architecture data stream management 
international conference large data bases august 
gregory abowd christopher atkeson jason hong sue long rob kooper mike pinkerton 
cyberguide mobile context aware tour guide 
wireless networks october 
william adjie winoto elliot schwartz hari balakrishnan jeremy lilley 
design implementation intentional naming system 
proceedings th acm symposium operating system principles pages charleston south carolina united states 
acm press 
larry chia yang hung robert qing hong zhou gaetano borriello sunny consolvo jing su 
smart environment cell biology laboratory 
ieee pervasive computing july september 
maurice bach 
design unix operating system 
prentice hall 
bahl padmanabhan 
radar building rf user location tracking system 
proceedings th annual joint conference ieee computer communications societies pages tel aviv israel march 
ieee computer society press 
hari balakrishnan frans kaashoek david karger robert morris ion stoica 
looking data systems 
communications acm february 
balazinska hari balakrishnan david karger 
ins twine scalable peerto peer architecture intentional resource discovery 
proceedings international conference pervasive computing pages zurich switzerland august 
springer verlag 
balazinska paul castro 
characterizing mobility network usage corporate wireless local area network 
proceedings international conference mobile systems applications services pages san francisco ca may 
usenix association 
banavar marc kaplan kelly shaw robert strom daniel sturman wei tao 
information flow event distribution middleware 
middleware workshop icdcs austin texas 
len bass paul clements rick kazman 
software architecture practice 
addison wesley 
francesco bellotti riccardo alessandro de massimiliano 
user testing hypermedia tour guide 
ieee pervasive computing april june 
vincent wayne chung george cybenko robert gray diego jiang han li yong sheng 
process query systems surveillance awareness 
proceedings th world multiconference systemics cybernetics informatics orlando fl july 
bhattacharjee kenneth calvert ellen zegura 
architecture active networking 
proceedings high performance networking white plains ny april 
united states air force scientific advisory board 
report building joint infosphere volume interactive information technologies december 
united states air force scientific advisory board 
report building joint infosphere volume summary december 
philippe bonnet johannes gehrke praveen seshadri 
sensor database systems 
proceedings second international conference mobile data management pages hong kong china january 
springer verlag 
barry brumitt brian meyers john krumm amanda kern steven shafer 
easyliving technologies intelligent environments 
proceedings second international symposium handheld ubiquitous computing pages bristol uk september 
springer verlag 
gay kubo nick 
context aware computing test case 
proceedings fourth international conference ubiquitous computing pages goteborg sweden september october 
springer verlag 
giacomo letizia leonardi franco zambonelli 
mobile agent coordination models internet applications 
ieee computer february 
george candea armando fox 
recursive turning reboot scalpel 
proceedings th workshop hot topics operating systems pages germany may 
ieee computer society press 
antonio carzaniga david rosenblum alexander wolf 
achieving scalability expressiveness internet scale event notification service 
proceedings th annual symposium principles distributed computing pages portland oregon united states 
acm press 
antonio carzaniga david rosenblum alexander wolf 
design evaluation wide area event notification service 
acm transactions computer systems 
fabio casati ski li jie jin krishnamoorthy ming chien shan 
adaptive dynamic service composition 
technical report hpl hp labs 
fabio casati ski li jie jin krishnamoorthy ming chien shan 
platform developing managing composite services 
technical report hpl hp labs 
castro druschel 
kermarrec rowstron 
scribe large scale decentralized application level multicast infrastructure 
ieee journal selected areas communications october 
castro jones :10.1.1.12.8387
kermarrec rowstron theimer wang wolman 
evaluation scalable application level multicast built peer peer overlays 
proceedings nd annual joint conference ieee computer communications societies pages san francisco ca april 
ieee computer society press 
miguel castro peter druschel charlie hu antony rowstron 
topology aware routing structured peer peer overlay networks 
technical report msr tr microsoft research 
paul castro patrick chiu ted richard muntz 
probabilistic room location service wireless networked environments 
proceedings third international conference ubiquitous computing pages atlanta ga september october 
springer verlag 
paul castro benjamin greenstein richard muntz maria 
locating application data service discovery domains 
proceedings seventh annual international conference mobile computing networking pages rome italy 
acm press 
mani chandy brian elliott michael daniel zimmerman 
event driven architectures distributed crisis management 
proceedings th iasted international conference parallel distributed computing systems november 
alvin chen richard muntz spencer yuen sung park mani srivastava 
support infrastructure smart 
ieee pervasive computing april june 
chen david kotz :10.1.1.117.4330
survey context aware mobile computing research 
technical report tr dept computer science dartmouth college november 
chen david kotz 
solar flexible scalable data fusion infrastructure ubiquitous computing 
proceedings workshop application models programming tools ubiquitous computing third international conference ubiquitous computing ubicomp october 
chen david kotz 
context aggregation dissemination ubiquitous computing systems 
proceedings fourth ieee workshop mobile computing systems applications pages new york june 
ieee computer society press 
chen david kotz 
context sensitive resource discovery 
proceedings ieee international conference pervasive computing communications pages fort worth texas march 
ieee computer society press 
chen david kotz 
application controlled loss tolerant data dissemination 
technical report tr dept computer science dartmouth college february 
chen david kotz 
case study location traces 
technical report tr dept computer science dartmouth college 
chen david kotz 
dependency management distributed settings poster 
proceedings international conference autonomic computing pages new york city ny may 
ieee computer society press 
chen ming li david kotz 
design implementation large scale context fusion network 
proceedings annual international conference mobile ubiquitous systems networking services boston ma august 
yan chen randy katz john kubiatowicz 
scan dynamic scalable efficient content distribution network 
proceedings international conference pervasive computing pages zurich switzerland august 
springer verlag 
keith cheverst nigel davies keith mitchell adrian friday 
experiences developing deploying context aware tourist guide guide project 
proceedings sixth annual international conference mobile computing networking pages boston massachusetts united states 
acm press 
clark tennenhouse 
architectural considerations new generation protocols 
proceedings acm conference applications technologies architectures protocols computer communications pages philadelphia pennsylvania united states 
acm press 
norman cohen hui lei paul castro john davis ii 
composing pervasive data iql 
proceedings fourth ieee workshop mobile computing systems applications pages new york june 
ieee computer society press 
norman cohen luke wong danny yeh 
pervasive data composition framework 
proceedings third international conference mobile data management pages singapore january 
ieee computer society press 
steven czerwinski ben zhao todd hodes anthony joseph randy katz 
architecture secure service discovery service 
proceedings fifth annual international conference mobile computing networking pages seattle washington united states 
acm press 
stephen deering david cheriton 
multicast routing datagram internetworks extended lans 
acm transactions computer systems may 
anind dey 
providing architectural support building context aware applications 
phd thesis college computing georgia institute technology december 
anind dey gregory abowd 
context aware system supporting reminders 
proceedings second international symposium handheld ubiquitous computing pages bristol uk september 
springer verlag 
anind dey gregory abowd daniel salber :10.1.1.9.5130
conceptual framework toolkit supporting rapid prototyping context aware applications 
human computer interaction hci journal 
anind dey daniel salber gregory abowd 
architecture support context aware applications 
technical report git gvu georgia institute technology college computing june 
felix rtner oliver andreas 
supporting mobility content publish subscribe middleware 
proceedings international middleware conference pages rio de janeiro brazil june 
springer verlag 
margaret fleck marcos tim kindberg eamonn brien strain 
informing remembering ubiquitous systems interactive museums 
ieee pervasive computing april june 
fu shi vijay karamcheti 
cans composable adaptive network services infrastructure 
proceedings rd usenix symposium internet technologies systems san francisco ca march 
usenix association 
david garlan mary shaw 
software architecture 
technical report cmu cs carnegie mellon university january 
hans 
gellersen michael beigl holger 
mediacup awareness technology embedded everyday object 
proceedings international symposium handheld ubiquitous computing pages karlsruhe germany september 
springer verlag 
max 
network distributed computing 
prentice hall 
william griswold robert boyer stephen brown tan minh truong gregory jay benjamin shapiro 
sustaining educational communities mobile technology 
technical report cs university california san diego july 
erik guttman 
service location protocol automatic discovery ip network services 
ieee internet computing july august 
richard harper 
people wear active badges 
technical report epc rank xerox research center 
andy harter andy hopper pete steggles andy ward paul webster 
anatomy context aware application 
proceedings fifth annual international conference mobile computing networking pages seattle washington united states 
acm press 
nicholas harvey alec wolman 
skipnet scalable overlay network practical locality properties 
proceedings th usenix symposium internet technologies systems seattle wa march 
usenix association 
mike andy ward 
novel broadband ultrasonic location system 
proceedings fourth international conference ubiquitous computing pages goteborg sweden september october 
springer verlag 
john heidemann fabio silva chalermek intanagonwiwat ramesh govindan deborah estrin deepak ganesan 
building efficient wireless sensor networks low level naming 
proceedings th acm symposium operating system principles pages banff alberta canada 
acm press 
jeffrey hightower gaetano borriello 
location systems ubiquitous computing 
ieee computer august 
jeffrey hightower barry brumitt gaetano borriello 
location stack layered model location ubiquitous computing 
proceedings fourth ieee workshop mobile computing systems applications pages new york june 
ieee computer society press 
fritz uwe alexander kart rothermel markus 
century challenges nexus open global infrastructure spatial aware applications 
proceedings fifth annual international conference mobile computing networking pages seattle washington united states 
acm press 
jason hong james landay 
infrastructure approach context aware computing 
human computer interaction hci journal 
yang hua chu sanjay rao hui zhang 
case system multicast keynote address 
proceedings acm conference measurement modeling computer systems pages santa clara california united states 
acm press 
stephen intille 
designing home 
ieee pervasive computing april june 
jacobson 
congestion avoidance control 
symposium proceedings communications architectures protocols pages stanford california united states 
acm press 
john jannotti david gifford kirk johnson frans kaashoek james toole jr overcast reliable multicasting overlay network 
proceedings th symposium operating systems design implementation san diego ca october 
usenix association 
jiang peter steenkiste 
hybrid location model computable location identifier ubiquitous computing proceedings fourth international conference ubiquitous computing pages goteborg sweden september october 
springer verlag 
brad armando fox 
event heap coordination infrastructure interactive workspaces 
proceedings fourth ieee workshop mobile computing systems applications pages new york june 
ieee computer society press 
brad armando fox terry winograd 
interactive workspaces project experiences ubiquitous computing rooms 
ieee pervasive computing april june 
jos davies 
scalable flexible location services ubiquitous information access 
proceedings international symposium handheld ubiquitous computing pages karlsruhe germany september 
springer verlag 
armando fox 
dynamic mediation integrate cots entities ubiquitous computing environment 
proceedings second international symposium handheld ubiquitous computing pages bristol uk september 
springer verlag 
eddie kohler robert morris chen john jannotti frans kaashoek 
click modular router 
acm transactions computer systems august 
andrew ladd kostas kavraki dan wallach guillaume 
robotics location sensing wireless ethernet 
proceedings eighth annual international conference mobile computing networking pages atlanta georgia usa 
acm press 
ulf jeff magee 
multi sensor location tracking 
proceedings fourth annual international conference mobile computing networking pages dallas texas united states 
acm press 
anthony claudio pinhanez gopal pingali rick kjeldsen mark noi sukaviriya 
architecture framework steerable interface systems 
proceedings fifth international conference ubiquitous computing pages seattle wa october 
springer verlag 
frank leymann 
web services flow language wsfl 
henry lieberman ted selker 
context computer systems adapt learn context 
ibm systems journal 
henning maa 
location aware mobile applications directory services 
proceedings third annual international conference mobile computing networking pages budapest hungary 
acm press 
henning maa 
location aware mobile applications directory services 
mobile networks applications august 
samuel madden michael franklin joseph hellerstein 
tag tiny aggregation service ad hoc sensor networks 
proceedings th symposium operating systems design implementation pages boston ma december 
usenix association 
christopher 
role definition language rdl language describe contextaware roles 
technical report tr dartmouth college may 
arun mathias 
case study context sensitive applications 
technical report tr dartmouth college june 
steven mccanne van jacobson martin vetterli 
receiver driven layered multicast 
proceedings acm conference applications technologies architectures protocols computer communications pages palo alto california united states 
acm press 
joseph mccarthy eric 
visualization tool location awareness support informal interactions 
proceedings international symposium handheld ubiquitous computing pages karlsruhe germany september 
springer verlag 
mehrotra venkatasubramanian rao adams 
project rescue challenges responding unexpected 
proceedings th annual symposium electronic imaging science technology san jose ca january 
sun microsystems 
jini architecture specification december 
:10.1.1.13.4675
controlling access pervasive information solar system 
technical report tr dartmouth college february 
david kotz 
controlling access pervasive information solar system 
technical report tr dept computer science dartmouth college february 
monteiro pereira rodrigues 
integration flight simulator epidemic multicast protocol 
proceedings international workshop large scale group communication october 
rajeev motwani jennifer widom arvind arasu brian babcock babu datar manku chris olston justin rosenstein rohit varma 
query processing resource management approximation data stream management system 
proceedings biennial conference innovative database systems january 
giles john nelson 
context aware location systems 
phd thesis clare college university cambridge january 

service discovery 
ieee personal communications 
donald norman 
invisible computer 
mit press 
joseph pasquale george polyzos eric anderson 
filter propagation dissemination trees trading bandwidth processing continuous media networks 
proceedings th international workshop network operating system support digital audio video nossdav pages lancaster uk november 
springer verlag 
david patterson aaron brown pete george candea mike chen james cutler patricia armando fox matthew david oppenheimer naveen sastry william tetzlaff jonathan noah 
recovery oriented computing roc motivation definition techniques case studies 
technical report csd berkeley 
peter brian shand jean bacon 
framework event composition distributed systems 
proceedings international middleware conference pages rio de janeiro brazil june 
springer verlag 
gopal pingali claudio pinhanez anthony rick kjeldsen mark han chen noi sukaviriya 
steerable interfaces pervasive computing spaces 
proceedings ieee international conference pervasive computing communications pages fort worth texas march 
ieee computer society press 
sridhar pingali don towsley james kurose 
comparison sender initiated receiver initiated reliable multicast protocols 
proceedings acm conference measurement modeling computer systems pages nashville tennessee united states 
acm press 
shankar armando fox 
sword developer toolkit web service composition 
proceedings eleventh international world wide web conference honolulu hawaii may 
priyantha chakraborty hari balakrishnan 
cricket system 
proceedings sixth annual international conference mobile computing networking pages boston massachusetts united states 
acm press 
raman katz 
load balancing stability issues algorithms service composition 
proceedings nd annual joint conference ieee computer communications societies pages san francisco ca april 
ieee computer society press 
raman randy katz 
architecture highly available wide area service composition 
computer communication journal september 
raman steven mccanne 
model analysis protocol framework soft state communication 
proceedings acm conference applications technologies architectures protocols computer communications pages cambridge massachusetts united states 
acm press 
cliff randell henk muller 
low cost indoor positioning system 
proceedings third international conference ubiquitous computing pages atlanta ga september october 
springer verlag 
sylvia ratnasamy paul francis mark handley richard karp scott schenker 
scalable content addressable network 
proceedings acm conference applications technologies architectures protocols computer communications pages san diego california united states 
acm press 
sylvia ratnasamy mark handley richard karp scott shenker 
application level multicast content addressable networks 
third international workshop networked group communication ngc pages london uk november 
springer verlag 
bradley rhodes 
wearable remembrance agent system augmented memory 
proceedings international symposium wearable computers iswc pages cambridge ma 
ieee computer society press 
richardson bennett mapp hopper 
ubiquitous personalized computing environment teleporting window system environment 
ieee personal communications 
antony rowstron peter druschel :10.1.1.142.752
pastry scalable decentralized object location routing large scale peer peer systems 
proceedings international middleware conference pages heidelberg germany november 
springer verlag 
antony rowstron anne marie kermarrec miguel castro peter druschel 
scribe design large scale event notification infrastructure 
third international workshop networked group communication ngc pages london uk november 
springer verlag 
satyanarayanan 
pervasive computing vision challenges 
ieee personal communications 
schilit adams want 
context aware computing applications 
proceedings ieee workshop mobile computing systems applications pages santa cruz ca december 
ieee computer society press 
bill schilit marvin theimer 
disseminating active map information mobile hosts 
ieee network 
albrecht schmidt antti tuomela van laerhoven walter van de velde 
advanced interaction context 
proceedings international symposium handheld ubiquitous computing pages karlsruhe germany september 
springer verlag 
mary shaw david garlan 
software architecture perspectives emerging discipline 
prentice hall 
chia shen katherine everitt kathleen 
impromptu face face collaboration horizontal interactive surfaces 
proceedings fifth international conference ubiquitous computing pages seattle wa october 
springer verlag 
frank christian fl 
interaction pervasive computing settings bluetooth enabled active tags passive rfid technology mobile phones 
proceedings ieee international conference pervasive computing communications pages fort worth texas march 
ieee computer society press 
stanford 
pervasive computing deliver elder care 
ieee pervasive computing january march 
ion stoica robert morris david liben nowell david karger frans kaashoek frank dabek hari balakrishnan 
chord scalable peer peer lookup protocol internet applications 
ieee acm transactions networking february 
tatbul gur stanley zdonik mitch cherniack michael stonebraker 
load shedding data stream manager 
proceedings th international conference large data bases pages berlin germany september 
morgan kaufmann 
david tennenhouse jonathan smith david david wetherall gary 
survey active network research 
ieee communications january 
william michal saman amarasinghe 
streamit language streaming applications 
proceedings international conference compiler construction pages grenoble france april 
springer verlag 
amin vahdat amit aggarwal 
active names flexible location transport wide area resources 
proceedings nd usenix symposium internet technologies systems boulder october 
usenix association 
jim waldo 
jini architecture network centric computing 
communications acm july 
wang 
performance evaluation resource discovery service solar 
technical report tr dartmouth college august 
wang chen david kotz 
sensor fusion approach meeting detection 
proceedings workshop context awareness second international conference mobile systems applications services mobisys boston ma june 
roy want andy hopper 
active badges personal interactive computing objects 
ieee transactions consumer electronics february 
roy want trevor pering kumar murali john light 
personal server changing way think ubiquitous computing 
proceedings fourth international conference ubiquitous computing pages goteborg sweden september october 
springer verlag 
roy want bill schilit norman adams rich gold karin petersen david goldberg john ellis mark weiser 
parctab ubiquitous computing experiment 
tomasz imielinski henry korth editors mobile computing pages 
kluwer academic publishers 
andrew martin robert ward 
sensor driven computing 
phd thesis corpus college university cambridge may 
mark weiser 
computer st century 
scientific american january 
mark weiser 
computer science issues ubiquitous computing 
communications acm july 
matt welsh david culler eric brewer 
seda architecture conditioned scalable internet services 
proceedings th acm symposium operating system principles pages banff alberta canada 
acm press 
jay colin 
positioning system finding things indoors 
ieee spectrum september 
white 
performance interoperability solar 
technical report tr dartmouth college may 
white 
xslt xquery operator languages 
technical report tr dartmouth college may 
zhao huang stribling rhea joseph kubiatowicz 
tapestry resilient global scale overlay service deployment 
ieee journal selected areas communications january 
shelley zhuang kevin lai ion stoica randy katz scott shenker 
host mobility internet indirection infrastructure 
proceedings international conference mobile systems applications services pages san francisco ca may 
usenix association 

