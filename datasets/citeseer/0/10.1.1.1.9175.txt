biased skip lists bagchi adam buchsbaum michael goodrich march design variation skip lists performs generally biased access sequences 
items positive weight time access item log data structure dynamic 
instantiations biased skip lists achieves bound worst case expected case 
structures nearly identical deterministic simply ensures balance condition randomized achieves probabilistically 
method analyze 
primary goal data structures research design data organization mechanisms admit fast access update operations 
generic element ordered data set accessed updated uniformly goal typically satisfied dictionaries achieve log time performance searches updates example avl trees red black trees trees 
dictionary applications involve sets weighted data items searched updated non uniformly weights biased 
example operating systems textbooks see stallings devote major coverage methods dealing biasing memory requests 
examples biased sets include client web server requests dns lookups 
applications biased search structure appropriate structure achieves search times faster log highly weighted items 
biased searching useful auxiliary structures deployed inside data structures 
formally biased dictionary data structure maintains ordered set element weight loss generality assume 
operations follows search 
determine insert 
add extended appears proc 
th annual international symposium algorithms computation lecture notes computer science pp 

dept information computer science university california irvine ca bagchi ics uci edu 
supported darpa nsf ccr 
labs shannon laboratory park ave florham park nj alb research att com 
dept information computer science university california irvine ca goodrich ics uci edu 
supported darpa nsf ccr 
delete 
delete join xl xr 
assuming xl xr create new set xl xr operation destroys xl xr split 
assuming loss generality create xl xr 
operation destroys 
determine search handle data structure element reweight 
change weight study cient data structures biased data sets subject operations 
desire search times asymptotically optimal update times cient 
example consider case number times item set items accessed sequence searches biased dictionary log search time th item perform sequence log time assuming asymptotically optimal 
desire log search times similar update times general biased data arbitrary weights 
seek biased structures simple implement require major restructuring operations tree rotations achieve biasing 
tree rotations particular structures amenable augmentation rotations require complete rebuilding auxiliary structures stored ected nodes 
related prior study biased data structures weighted data classic topic algorithmics 
early includes dynamic programming method knuth constructing static biased binary search tree items weighted search frequencies see knuth 
subsequent focuses primarily methods achieving search times constant factor optimal able perform updates ciently 
known methods constructing dynamic biased data structures search trees di er primarily degree complication resulting time bounds amortized randomized worst case 
sleator tarjan introduce theoretically elegant splay tree data structure automatically adjusts achieve optimal amortized biased access times access frequency weights 
splay trees achieve result performing large number tree rotations access store balance weight information 
theoretical standpoint splay tree beautiful structure large number tree rotations done access practically cient avl trees applications 
rotations splay trees poor choice augmentation auxiliary structures internal nodes 
bent sleator tarjan feigenbaum tarjan design biased search trees arbitrary weights significantly reduce eliminate number tree rotations needed order maintain biased search tree 
er cient worst case amortized performance biased dictionary operations complicated implementations 
alternately seidel aragon demonstrate randomized bounds 
splay trees achieve biasing performing large number rotations access 
data structure elegant cient practice performance achieve bounds cient worst case amortized sense 
mentioned biased search tree structures achieve biasing tree rotations 
pugh introduces alternative skip list structure ciently implements unbiased dictionary rotations :10.1.1.15.9072
skip lists store items series linked lists linked leveled fashion 
pugh presents skip lists randomized structure easily implemented shows empirically faster fast balanced search trees avl trees 
searches updates take log expected time skip lists rotations rebalancing needed updates 
exploiting relationship skip lists trees munro sedgewick show implement deterministic version skip lists achieves similar bounds worst case simple promote demote operations 
terms biased skip list structures prior exists 
mehlhorn anticipated biased skip lists claimed partial result omitted details analysis structure 
designed algorithm takes probability distribution accesses dictionary builds static weighted skip list structure minimizes average access cost 
biased skip list structure designed specialized notion biasing access item takes log expected time number items accessed time accessed 
data structure incomparable general biased dictionary provides properties 
results comprehensive design biased version skip list data structure 
combines techniques underlying deterministic skip lists mehlhorn suggestion 
methods arbitrarily defined item weights provide optimal search times weights constant factors 
methods built technology skip lists employ tree rotations achieve biasing 
complete descriptions biased dictionary operations time performances compare favorably various versions biased search trees 
give deterministic randomized implementations biased skip lists 
deterministic structure achieves worst case running times similar biased search trees uses techniques arguably simpler 
node deterministic biased skip list assigned initial level weight simple invariants govern promotion demotion node levels ensure desired access time 
randomized structure achieves expected bounds similar respective amortized randomized bounds splay trees 
randomized structure partial rebuilding need amortization 
table results biased search trees splay trees 
section define deterministic biased skip list structure section describe perform updates ciently structure 
section describe simple randomized variation biased skip lists analyze performance 
conclude section 
wk search log wi log wi log wi log wi wi wi wi wi min ii wi wi wi min ii wi min ii wi log log wi wi wi wi ii wi ii join xl wl wr wr min wl wr wl wr wr min wl wr wr min min ii wl wr wr min ii log max min wi 
wi min wi wj min wi wj skip list set 
biased skip lists skip list dictionary data structure storing ordered set items number :10.1.1.15.9072
item key corresponding node skip list integral height 
height max depth item terms item node key interchangeably convenient context clarifies ambiguity 
assume loss generality keys unique 
node implemented linked list array length refer tower node 
level successor node node height node height symmetrically level predecessor node greatest node height node th element node contains pointers th elements level successor predecessor distinct nodes called consecutive min plateau maximal sequence consecutive nodes equal height 
convenience assume sentinel nodes height key key practice assumption necessary 
orient pointers skip list stores items left right order node levels progress bottom top 
see 
search item key start level left sentinel 
searching level node follow level links right find key matching pair nodes level successor traverse level continue search level node search ends success find node key failure find nodes level 
see 
describe deterministic biased version skip lists 
addition key item weight loss generality assume 
define rank item log constant defined shortly 
definition biased skip list item height invariants hold 
consecutive items height 
node nodes height consecutive node height derive exact bounds case item exist skip list modify structure eliminate redundant pointers 
pair adjacent items set searching key skip list 
numbers pointers indicate order traversed 
similarly searching key 
skip list unnecessary level pointers set nil 
pointers levels min nil 
see 
searching item assert failure immediately reaching nil pointer 
su ces fact ensure pointers level min nil pointers level remain undefined 
remainder define weight operation 
key denote item largest key item smallest key greater main result definition biased skip lists summarized lemma bounds depth node 
lemma depth lemma depth node biased skip list log prove depth lemma consider implication access time key defined time takes find find pair corollary access lemma access time key biased skip list log log min proof 
pointers traversed level search 
search stops reaching nil pointer depth lemma implies result 
important note bounds prove rely data structure need maintain value 
prove depth lemma observe number items rank appear higher levels decreases geometrically level 
define 
lemma proof 
prove lemma induction 
base case true definition 
implies induction hypothesis proves lemma 
intuitively implies node promoted higher level supported weight associated items lower levels 
define rx corollary proof 
definition lemma yields result 
define max nodes height exceeding promoted lower levels maintain invariants 
implies log maximum possible depth item log corollary wr log log 
log depth lemma follows log log resemble invariants defining skip lists stronger analogue 
fact stronger necessary prove depth lemma 
su ce node height exceeding rank supported items side level level 
stronger invariant easier maintain update procedures section rely support occurring level 
updating biased analyze deterministic procedures update biased skip lists 
define profile item level predecessor level successor define ordered sets pl pr pl rsp pr set distinct heights nodes left rsp right call ordered set pl pr profile call subset predecessors left profile subset successors right profile example pl pr left profile right profile 
profile definitions assume precise case apply node contain key node nodes trace profile back lowest highest nodes starting rsp node iteratively finding level predecessor rsp successor reach left rsp right sentinel 
inserting item procedure inserts new item key biased skip list assume exist skip list discover step 
procedure insert 
search discover pair 
create new node height store insert tracing profile splice predecessors successors standard skip list :10.1.1.15.9072

restore necessary 
node left sym right profile need height demoted interrupt sequence consecutive nodes height leaving fewer left sym right 
case demoted lower height profile whichever higher 
precisely turn pl consider node violated node demote height height max predecessor pl new height demotion violates level consecutive items height promote th node order height 
see 
iterate symmetrically process right profile 
restore necessary 
starting node level node violates level consecutive items height promote th node order height iterate node level 
continue violations 
see 
lemma invariants true insert 
proof 
assume invariants true insertion 
left node violated level pl node split sequence consecutive nodes height consider associated node biased skip list 
nodes drawn reflect heights hatch marks indicate ranks 
pointers nodes omitted 
insertion rank node violates 
demotion node compensating promotion node 
biased skip list 
violated insertion rank 
promoting node 
violation occurs 
step restores level assumption true operation 
demotion cause consecutive nodes height case promotion node middle restores 
definition profile height demotion incur compensating promotion 
compensating promotion violate 
induction iterating step level restores left symmetrically argue nodes right step restores level violated insertion node promoting node middle violate 
promotion violate level case iteration step restores invariant 
theorem inserting item biased skip list takes log min time 
proof 
lemma proves correctness insert 
depth access lemmas steps take log min time 
min step performs level min step performs level 
applying depth lemma yields result 
deleting item deletion inverse insertion 
procedure delete 
search discover 
find immediate neighbors remove splice predecessors successors required 

restore necessary 
removing unite sequences consecutive nodes sequences length exceeding 
turn min removing violates level consider consecutive nodes height promote th height 
iterate 
restore necessary 
removing decrease length sequence consecutive nodes height case delineating towers need demoted 
starting node pl greater violated node demote height max new height turn old height demotion violates level consecutive items height promote th height iterate checking violation old height continuing violations 
symmetrically process right profile lemma invariants true delete 
proof 
assume invariants true deletion 
violated level min removal node unite previously separate sequences consecutive nodes height step restores level promoting node middle violate promotion propagate higher levels previous existence node level satisfied 
violated removal subsequent demotion predecessor rsp successor 
assumption held operation node violating need demoted farther height preceding node left rsp right profile case rsp 
step insert demotion require compensating promotions percolate higher 
step restores 
theorem deleting item biased skip list takes log min time 
proof 
lemma proves correctness delete 
depth access lemmas steps take log min time 
min step performs level min step performs level 
applying depth lemma yields result 
joining consider biased skip lists sl sr total weights wl wr respectively 
item largest key sl denoted max item smallest key sr denoted min max min join sl sr form single biased skip list 
procedure join sl sr 
trace profiles max min splice pointers leaving sl pointers going sr 
restore necessary 
turn max hr min max sl sr violated level consecutive items height promote th node order height 
lemma invariants true join sl sr 
proof 
assuming invariants true join splicing pointers violate nodes lose predecessors successors 
violated joining sequences nodes level max hr min lowest height violation occur 
promoting node middle violate 
promotion add node higher level splicing procedure left nodes assumption true join 
nodes occur level prior promotion promotion strategy restores 
theorem joining biased skip lists sl sr takes log wl log wr wr min time 
proof 
lemma proves correctness join sl sr 
step performs level min hr min min sl sr 
step potentially performs level max hr min max sl sr 
putting applying depth lemma yields result 
splitting skiplist biased skip list total weight key split biased skip lists sl containing keys sr containing keys greater 
formulate equivalently 
procedure split 
perform insert weight 
disconnect pointers predecessors form sl disconnect pointers successors form sr theorem splitting biased skip list key takes log min time 
proof 
lemma proves true step 
taller predecessors successors disconnecting pointers step violate invariant 
procedure split correct 
step takes log min time theorem observation yields biased skip list height 
step takes time 
applying depth lemma finishes proof 
finger searching search key biased skip list starting node just left sentinel initial pointer finger 
assume loss generality procedure symmetric case procedure 
initialize 
phase 
go step 
set set iterate step 

phase 
search starting height normal skip list search procedure outlined section 
phase moves right skip list detect node level successor procedure finds pair follows correctness vanilla search procedure enter phase specified node height define lemma node proof 
prove direction symmetric 
definition 
elements height induction aa theorem accessing item biased skip list pointer item takes log min time log min time proof 
assume constant time access level node ecting previous time bounds 
consider node height enter phase 
intuitively show su cient weight supports link originally entered phase link exited phase 
define total search time plus min min levels 
need show definition rank proves theorem 
case consider height entered phase 
lemma lemma subcase yields remaining case lemma note start finger search height enables proof case search starts phase immediately 
changing weight item change weight item fully deleting denote new rank procedure reweight 
search find node 


promote height apply step procedure insert starting height apply step procedure insert starting height 
demote height apply step procedure delete starting height apply step procedure delete starting pl greater lemma invariants true reweight 
proof 
assume invariants true reweight 
invariant violated 
invariant violated 
attain height case violated levels violated level applying demotion promotion steps insert procedure fixes violations shown proof lemma 
violated levels height applying promotion deletion procedures delete procedure fixes violations shown proof lemma 
theorem changing weight node biased skip list takes log min time 
proof 
lemma proves correctness reweight 
step takes log time access lemma 
assume 
height promotions steps perform level occur lower heights respectively 
applying depth lemma completes proof 
randomized updates randomize biased skip list structure section yield expected optimal access times need promotions 
mehlhorn suggested approach claimed expected maximal height node log 
show expected depth node log randomized biased skip list parameterized positive constant 
define rank item log 
inserting assign height probability non negative integer call excess height algorithmically start node height continually increment height long biased coin flip returns heads probability 
reweight operation changes height node 
new height chosen insertion new weight tower adjusted appropriately 
remaining operations insert delete join split finger search perform rebalancing 
lemma randomized height lemma expected height item randomized biased skip list log 
proof 
jp log 
proof depth lemma randomized structure follows deterministic structure 
recall definitions rx lemma proof 
prove lemma induction 
base case true definition 
excess heights random variables pe induction hypothesis proves lemma 
corollary proof 
definition lemma yields result 
lemma randomized depth lemma expected depth node randomized biased skip list log proof 
depth define max standard skip list analysis know log ce log constant log jensen inequality log wr corollary log randomized height lemma log log lemma follows observing log :10.1.1.15.9072
corollary randomized access lemma expected access time key randomized biased skip list log log min proof 
probability plateau starting node size expected size plateau applying randomized depth lemma completes proof 
operations discussed section simple implement 
insert 
locate create new node described hold expected time log min delete 
locate remove node expected time log min randomized depth access lemmas continue hold inserted place 
join sl sr 
trace profiles max min splice pointers leaving sl going sr expected time log wl log wr wr min split 
assume equivalent formulation holds 
disconnect pointers join left profile right profile expected time log min 
perform described section 
straightforward prove lemma holds expected case 
expected time log min log min reweight 
reconstruct tower node described 
expected time log min open deterministic biased skip list devised worst case times provide amortized bound log updating node location update discovered inserting deleting take log amortized time 
counterexample demonstrates initial method promotion demotion yield amortized bound 
consider node large separates plateaus size level plateaus size rsp level deleting cause promotion starting level percolate level weight restore structural condition deletion sequence operations repeated infinitely arbitrary cost restoring invariants amortized 
initial attempt address bad case generalize promotion operation split plateau size exceeding plateaus size suitable constant 

counterexample generalizes 
consider nodes equal height exceed equal rank separate plateaus size height plateau height size 
deleting separating towers delineates restores structure 
abramson 
information theory coding 
mcgraw hill new york 
adel son vel landis 
algorithm organisation information 
doklady nauk sssr 
english translation soviet math 
dokl 

bell gupta 
evaluation self adjusting binary search tree techniques 
software practice experience 
bent sleator tarjan 
biased search trees 
siam journal computing 

chiang tamassia 
trapezoid method planar point location monotone subdivisions 
international journal computational geometry applications 
cohen kaplan 
proactive caching dns records addressing performance bottleneck 
proc 
symp 
applications internet saint pages 
ieee 
sharp sinha 
biased dictionaries fast inserts deletes 
proc 
rd acm symp 
theory computing pages 
sharp sinha 
biased skip lists highly skewed access patterns 
proc 
rd 
algorithm engineering experiments volume lecture notes computer science pages 
springer 
feigenbaum tarjan 
new kinds biased search trees 
bell system technical journal 
goodrich tamassia 
dynamic ray shooting shortest paths planar subdivisions balanced geodesic triangulations 
journal algorithms 
gribble brewer 
system design issues internet middleware services deductions large client trace 
proc 
st usenix symp 
internet technologies systems 
guibas sedgewick 
dichromatic framework balanced trees 
proc 
th ieee symp 
foundations computer science pages 
mehlhorn 
new data structure representing sorted lists 
acta informatica 
knuth 
optimum binary search trees 
acta informatica 
knuth 
art computer programming volume sorting searching 
addisonwesley reading ma 

optimal nearly optimal static weighted skip lists 
technical report lsi dept informatics universitat de catalunya 
www lsi upc es html 
mehlhorn 
algorithm design software libraries developments leda project 
proc 
ifip th world computer congress volume pages 
elsevier 
munro sedgewick 
deterministic skip lists 
proc 
rd acm siam symp 
discrete algorithms pages 
pugh :10.1.1.15.9072
skip lists probabilistic alternative balanced trees 
communications acm june 
seidel aragon 
randomized search trees 
algorithmica 
sleator tarjan 
data structure dynamic trees 
journal computer system sciences 
sleator tarjan 
self adjusting binary search trees 
journal acm 
stallings 
operating systems internals design principles 
prentice hall th edition 

