published formalize 
formalization principles information system development methods ter hofstede faculty information technology queensland university technology gpo box brisbane australia arthur qut edu au proper id research pv gouda netherlands proper acm org ter hofstede proper 
formalize 
formalization principles information systems development methods 
information software technology october 
need formalisation modelling techniques generally recognised literature devoted actual process involved 
comparable situation mathematics focus proofs process proving 
tries accomodate provides essential principles process formalisation context modelling techniques number small realistic formalisation case studies 
keywords formalization methodologies information systems traditionally information systems informal field study methods techniques introduced formal foundation 
past decade seen shift informal approaches formal approaches information systems development 
hand number new formal approaches introduced hand number initially informal techniques formal foundation 
vast body literature exists justifying need formality see jon spi coh hal bh assumes reader thoroughly convinced thereof 
concept proof heart mathematics relatively attention notion correct elegant proof 
furthermore hardly literature devoted intuitive process proving find proof problem 
opposed course growing computing science field automated proofs see mac notable exception polya solve pol 
seminal famous mathematician george polya addresses task finding correct elegant general solutions mathematical problems 
inspired set similar task trying facilitate process formalizing methods techniques field information systems development 
naturally level ambition far beneath polya emphasis formalization principles application number concrete case studies 
sense may considered sequel hw emphasis need formalization small number small case studies 
main justification observation important process formalization complicated typically requires substantial experience mathematical maturity 
process usually addressed university curricula formalization experts basically self taught 
era emphasis applied research indirect contribution 
empirical proof better understanding process formalization leads improved methods ultimately better systems extremely hard give 
reader expected convinced true 
organized follows 
section provides definition important formalization notions discussion major formalization principles 
sections provide case studies illustrating principles 
section focusses formalization technique process control specifications illustrating different styles assigning semantics section provides examples formalization conceptual data modelling technique illustrating style assigning semantics consequences possible choices formal domain 
ends topics research 
syntax semantics syntax defines formed models semantics concerned meaning wellformed models 
section concrete syntax syntax contrasted section discusses different ways assigning formal semantics 
section provides definition formalization principles 
concrete versus syntax section distinction concrete syntax defined illustrated 
emphasized important focus concrete syntax formalization modelling techniques 
definition syntax programming languages customary bnf 
definition conditional typically look conditional boolean expression statement statement endif definition explicit choice keywords explicit choice order various parts conditional 
confuse underlying deeper meaning conditional 
different programming languages may different keywords may different order various parts mentioned underlying meaning remains essentially conditional represents choice program parts depending evaluation certain boolean expression 
syntax definition simply gives components language construct leave representational details 
conditional look conditional statement statement condition boolean expression 
sense syntax compared referred conceptual level famous level architecture iso 
conceptual level focusses concepts perceived external level implemented internal level 
leaving phase infancy field information systems clear shift representational issues conceptual issues 
discussions blurred result mixing representation essence 
questions entity type represented square circle conceptually irrelevant 
cases way representational issues interwoven essential issues subtle 
section illustrated formalization relationship types context conceptual data modelling 
field information systems syntax defined grammars typically set theory graph theory 
model defined sorted algebra number sets functions relations possibly special constants number axioms satisfied 
axioms specified means logic 
state transition diagram example consist set states say set transitions relation say trig state axiom trig prevent transitions state 
typically axioms correspond called static semantics field programming languages see mey 
assigning formal semantics having defined syntax certain modelling technique step definition formal semantics 
find steps strictly sequential 
choice certain semantics may lead different design syntax leads elegant formulations foreseen 
styles assigning formal semantics 
approaches taken mey relevant translational semantics translational semantics models specified certain modelling technique semantics definition mapping models simpler language language better understood 
operational semantics translational semantics amounts compiler modelling technique operational semantics interpreter 
idea express semantics modelling technique giving mechanism allows determine effect model specified technique 
mechanism seen interpreting automaton 
denotational semantics denotational semantics may seen variant translational semantics 
method syntactic constructs language mapped constructs language defined meaning 
contrast translational semantics target denotational semantics mathematical domain modelling technique 
axiomatic semantics axiomatic semantics treats model logical theory try define model means proved model 
approach seen denotational 
context formalization modelling techniques approaches illustrated section task structures 
clearly approaches defining semantics requires choice suitable target domain 
classical logic set theory example constitute target domain dynamic approaches really suitable deal change opposed specialized logics dynamic temporal logic sugared versions logic vdm constructs specifying state changes conditions satisfy 
choice target domain depends type modelling technique formalized goal formalization 
operational semantics perfectly acceptable aims rapid development support tool 
way defining semantics suitable focus investigating proving properties modelling technique 
section different domains defining semantics denotational way conceptual data modelling investigated 
formalization principles section major formalization principles outlined 
principles defined discussed fairly high level abstraction 
sections illustrated means case studies 
principles imply guidelines heuristics occasionally stated 
attempts reach form completeness may question possible 
principle primary goal principle determine primary objective formalization choose style mathematical domain accordingly 
may reasons formalizing method technique 
reasons include educational purposes investigation properties establishing sound basis sophisticated automated support primary goal principle emphasizes style domain chosen basis primary reason formalization 
operational semantics typically desirable efficient correct implementations needed denotational semantics may investigating proving formal properties models 
similarly formalization goal determines formal domain suitable 
educational purposes highly mathematical domains category theory may suited 
true formalization goal arrive blueprint implementation support tool 
general theory notation available certain domain deserves close study may considerably facilitate formalization process manipulation resulting formalization 
discuss matter detail consider concrete examples 
case formalization techniques conceptual data modelling er entity relationship approach see che niam natural language information analysis method see hal possible mathematical domains logic set theory category theory bw case study section 
logic particularly useful educational purposes favorably considered context prolog implementation 
set theory suitable case formalization required concise formal properties need investigated 
category theory exploited system formalization intellectually demanding rewards reduction proof complexity principle duality true generality shown section 
dynamic modelling techniques domains logic exception specialized logics temporal logic gal dynamic logic har set theory suited 
category theory typically domains petri nets higher order variants thereof algebraic approaches process algebra bw ccs mil csp hoa particularly suitable 
petri approaches provide formal verification techniques support computation invariants see lau limited number concepts algebraic approaches typically provide wide range operators theories determining equivalence process specifications bisimulation bw usually convenient means process verification 
principle semantics priority principle focus semantics syntax 
formalization imperative focus formal semantics choose syntactic elements facilitate specification semantics 
important get carried away imposing possible syntactic restrictions exclude models may undesirable 
main reason early stages formalization hard characterize undesirable models provide clear justification 
finds situations undesirable sense semantic point view cases add flexibility expressive power 
recursive decomposition task structures extensively discussed section provides example 
traditional data flow diagrams see dem decomposition hierarchical 
turns process specifications elegant allowing recursive decomposition addition recursive decomposition increases expressive power task structures formally shown ho 
rule dismiss models formed possibly assign formal semantics 
models initially formed problematic formally characterized semantic terms 
example consider data modelling technique niam hal 
naturally conceptual data models populated instantiated undesirable 
turns formalization niam showed complex notion gradations 
expressed initial definition population 
similarly process control specifications deadlock livelock may desirable syntactic characterization specifications may hard give possible 
principle conceptualisation principle choose representations general possible 
interesting prologue sch author argues essence computing summed word generality 
ultimately computing fundamental objective study achieve generality 
programs set general way easily adaptable new requirements specifications general easier understand details choices specific 
field data modelling may argue notion generality closely related famous conceptualisation principle iso states conceptual models deal exclusively aspects problem domain 
aspects irrelevant meaning avoided lead exclusions possible solutions early stage 
concepts conceptualization generality translate directly formalizations 
formalization choice irrelevant modelling technique consideration avoided 
particular unnecessary representational choices obscure essential meaning concepts 
example context formalization relationship types section 
true generality achieved semantics modelling technique configurable addition semantic features require complete redesign formalization 
example addition time uncertainty missing values data modelling technique 
example achieved discussed section 
instance conceptualisation principle issue versus concrete syntax 
concrete syntax important necessary communication point view introduces non essential elements violates conceptualisation principle 
principle orthogonality principle choose concepts possible basis formalization 
formalizations preferable keep number concepts small 
keeps formalization concise facilitates subsequent proofs reduces number possible case distinctions 
point important stress absolutely imperative formalizations readable 
formalizations readable communication educational purposes difficult check correctness 
orthogonality prerequisites achieving goal 
important prerequisite availability suitable set auxiliary operators functions relations allow compact formulation complex expressions 
ties principle advocates bottom approach carefully defining necessary mathematical base important rules formalization subsequently captured line 
principle bottom principle bottom start base suitable syntactic elements subsequent semantic rules formulated easily require line 
naturally principle derives sound engineering practice structured programming slightly strict sense practice mix working top bottom convenient way go 
important invest substantially sound base theory investigate properties elementary mathematical objects 
addition cases useful introduce proof schemes 
course principle ties conceptualisation principle sense chosen generalizations tend shorten specifications considerably 
case study formalizing task structures section formalization dynamic modelling technique task structures studied 
different ways assigning semantics previous section illustrated 
translational semantics means mapping task structures petri nets section 
operational semantics means task structure interpreter specified predicate transition nets section 
denotational semantics means mapping task structures process algebra section 
axiomatic semantics means mapping task structures logical derivation rules section 
task structures explained informally formal syntax terms order predicate logic 
task structures task structures introduced bot describe analyze problem solving processes 
wh extended meta process modelling technique describing strategies experienced information engineers 
hn extended formal semantics terms process algebra 
main concepts task structures represented graphically 
discussed subsequently 
central notion task structures notion task 
task defined performed order achieve certain goal 
task name representing functionality naturally different tasks may name 
addition task defined terms tasks referred subtasks 
decomposition may performed repeatedly desired level detail reached 
purpose decomposition tasks considered 
performing task may involve choices 
decisions represent moments choice coordinate execution tasks 
kinds decisions distinguished terminating non terminating decisions 
decision terminating may lead termination execution path decision 
execution path active execution path task terminates 
triggers graphically represented arrows model sequential order 
multiple output triggers means specify parallelism 
execution task name example task name task name triggered parallel 
initial items tasks decisions performed 
due iterative structures may clear task objects initial 
indicated explicitly example tasks names initial 
deal explicit synchronisation 
task named decision matter start tasks names terminated 
initial task syntax task structures terminating decision synchronizer example task structure non terminating decision section syntax task structures decomposition defined elementary set theory 
formally task structure consists components 
set task objects 
union set set tasks set decisions distinguish subset dt consisting terminating decisions 
convenience define set set non 
relation trig triggers capturing task object start task object 

function tname yielding name task set names 

subset set non consisting initial items 
additional formedness rules specified excluding non terminating decisions output triggers excluding non reachable task objects needed semantical point view semantics priority principle 
shown possible assign semantics task structures satisfying rules 
example task structure formally captured dt task trig trig trig tname tname semantics task structures petri nets petri nets see pet rei technique modelling communication parallel processes developed petri sixties pet 
petri nets consist places transitions 
places model states transitions model state changes 
applications petri nets areas communication protocols process synchronisation resource allocation 
petri nets requirements specification see dav 
formally petri net elementary form tuple set places set transitions input function mapping transitions sets places yielding input places transition output function mapping transitions sets places yielding output places transition 
marking net assignment tokens places 
firing rules determine transitions may change markings 
transition fire petri net terminology enabled input places contains token 
firing token removed input place added output place 
mapping task structures elementary petri nets relatively straightforward 
task mapped place transition ct created input place output places places corresponding task objects triggered task places exist 
exception treatment synchronizers 
synchronizer task object trig place name created 
synchronisation achieved creating transition hs places input places output places places corresponding task objects triggered synchronizer 
decision mapped place ed choices arrow unique transition gd outgoing arrow place ee 
terminating arrow place corresponding decision transition fd output places transition fires simply consume token place 
initial marking net marking exactly token places ei initial item 
definition captures mapping formally 
definition task structure corresponding petri net pw pw tw iw ow defined pw ex trig tw ct fd dt gd trig hs iw ct fd ed dt gd ed hs trig ow ct ex trig trig gd ee hs ex trig trig fd dt initial marking assigns tokens 
definition provides translational semantics task structures particularly useful case interested studying properties task structures primary goal principle 
may argue definition really adds explanation certainly readable 
petri net translation task structures example contains result applying previously described translation task structure 
places represented circles transitions represented thick lines 
arrows capture input output relations 
semantics task structures predicate transition nets hl principal problems petri nets stated 
problem petri net specifications easily huge complicated unstructured 
second problem structural inflexibility making modification extremely difficult 
order overcome problems high level petri nets developed 
examples predicate transition nets gen coloured petri nets jen jen 
section define operational semantics task structures terms predicate transition nets 
give brief informal explanation type high level petri net 
contrary petri nets tokens predicate transition net individualized may structure 
arrows may labeled linear combinations tuple variables transitions may associated transition selectors 
transition selectors interpreted terms formal structure referred support net usually order structure 
transition fire combination tokens input places conforming arrow annotations transition selector evaluates true 
tokens produced output places conforming annotations arrows 
simple predicate transition net initial marking simple example predicate transition net consider 
support net consists structure captures alphabetic ordering 
marking resulting firing transition substitution shown 
simple predicate transition net initial marking firing transition expressive power predicate transition nets illustrated gen means simple example involving tracks trains 
example circular track consisting segments 
trains may move track adjacent segments 
petri net solution consisted places transitions predicate transition net solution consisted places transition 
addition predicate transition solution easily generalized segments trains number places transitions remain 
solution obtained applying number folding transformations petri net solution 
basically idea applied context assigning formal semantics 
petri nets resulting translation described previous section generalized predicate transition net viewed task structure interpreter 
interpreter shown 
provides operational semantics task structures 
ct active pd trig tr pf cs nt ps sw synchronizers trigger trig ts ts predicate transition net semantics task structures predicate transition net contains place active contain tokens corresponding active instances tasks decisions 
place synchronizers contain tokens form synchronizer set task objects waiting 
token corresponding decision may replaced token corresponding non synchronizer possible choices decision firing transition pd 
choosing synchroniser requires decision removed waiting list synchronizer achieved firing transition cs 
decision terminating token may removed altogether firing transition ct 
active task fire termination successors 
achieved transition pf having output place trigger contains tokens form task set task objects triggered annotation corresponding output trigger uses auxiliary function ts yielding task objects triggered task object formally defined ts trig successor non synchronizer successor active token active removed firing transition tr 
synchronizer removed set token corresponding synchronizer transition sw set token form added place synchronizers transition 
auxiliary function needed yields task objects input synchroniser trig situation corresponds situation task object activate synchronizer await termination input task objects 
synchronizer active input task objects terminated terms predicate transition net means token place synchronizer 
output task objects activated achieved way tasks transition ps enabled 
note task synchronizer output task objects result token place trigger 
tokens simply removed firing transition nt 
initial marking net marking assigns tokens corresponding initial items place active 
order evaluate transition selectors syntactic structure provided 
syntactic structure acts support net simply corresponds syntactic definition task structure defined section 
example providing predicate transition net syntax task structure initial marking assigns tokens place active semantics task structure completely defined 
semantics task structures process algebra section semantics task structures defined means translation process algebra bw 
process algebra applied specify verify variety processes protocols see bae 
virtues ability prove equivalence process specifications 
algebraic theory process algebra belongs family ccs mil csp hoa 
short important ingredients process algebra depth treatment refer bw translation task structures process algebra defined hn 
provides example denotational semantics 
name process algebra suggests single algebra describe processes refers family algebras principles 
traditionally family member 
section briefly introduce algebra communicating processes empty action acp semantics task structures defined algebra 
depth treatment refer bw 
axioms acp listed table 
units process algebra atomic actions 
set atomic actions called units calculation atomic actions need indivisible see gw 
starting atomic actions new processes constructed applying sequential alternative composition resp 

algebra results axioms called basic process algebra bpa 
convention names atomic actions written lowercase red nose process variables written uppercase rudolph 
normally omitted results ambiguity 
special constant deadlock denotes inaction impossibility proceed axioms 
axiom captures fact deadlock chosen voluntarily axiom captures fact processes deadlock visible 
ax ax defined te te te te table algebra communicating processes empty action add parallelism additional operator introduced 
operator called free merge denoted defined aid auxiliary operator left merge processes tries execute action process rest process run parallel second process axioms 
special constant empty action denote process terminate successfully axioms 
adding processes may terminate directly 
termination operator determines termination option process axioms te te 
inclusion expression axiom guarantees 
communication merge allows parallel processes exchange information communicate axioms 
associated communication communication function defined pairs atomic actions axioms 
specific process specifications define partial communication function 
function commutative associative 
axioms assume communication binary higher order communication permitted 
needs way prevent isolated occurrence atomic actions meant communicate actions 
achieved encapsulation operator fact family operators axioms 
set contains actions communication 
translation task structures equations acp task object object ex introduced 
intuitively ex seen entry point task object task corresponding process algebra equation expresses associated atomic action name task performed task objects triggered triggered parallel 
treatment synchronizers brings slight complication order active may await termination task objects 
problem solved unusual communication operator 
task object triggers synchroniser starts atomic action termination 
synchroniser started availability atomic actions input task objects 
communication function defined synchroniser 
synchroniser input task objects communication necessarily binary quite uncommon 
binary communication expense additional definitions 
equation task tname eu trig trig seen tasks produce unique atom output 
set atomic actions defined ran tname 
comply notational conventions process algebra denote elements lowercase 
noted tasks trigger task objects 
case merge specified empty set 
exception dealt defining merge empty set empty action neutral element merge 
task objects exist trig equation task reduces tname 
terminating decision dt equation process algebra ed eu trig trig execution terminating decision involves choice task objects output decision termination 
practical point view theory possible decision output triggers 
comply semantics priority principle define sum empty set neutral element respect summation 
equation non terminating decisions quite similar termination option 
substitution ed eu trig trig note non terminating decision output triggers inevitably result deadlock 
removed axiom 
definition synchroniser comprises parts equation definition communication function encapsulation set 
equation synchroniser similar equation task action needed es communication function defined eu trig trig es trig clear input task objects ready synchroniser initiated 
noted equation triggered task objects trig 
order assure trigger synchroniser encapsulation operator applied 
set communication atoms trig system captured equation ei example consider task structure 
application previously described translation yields ed es ed ed ed es semantics task structures logical derivation rules section axiomatic approach semantics task structures taken 
task structures mapped set formal derivation rules define certain conditions formula may derived formula 
derivations represent state transitions 
context formula basically represents state task structure 
formally state captured number active instances task object number signals sent synchronizers input task objects state implies ini trig ini square brackets denote function restriction definition 
ignoring traces semantics task structure simply set states derived derivation rules 
easily manipulate states need introduce notation bottom principle 
firstly states change 
express state change conveniently operator introduced equivalent overriding operator notation 
notation denotes function similar values domain redefined dom dom similar typical definition overriding operator see edm uses domain subtraction operator dom overriding operator define auxiliary function incr increases number active instances state task objects satisfying certain predicate incr similarly decr decreases number active instances state task objects predicate 
cases number active instances increased decreased specific task object case notation incr decr abbreviation incr decr 
triggering task synchroniser state increases number active instances output task objects fire incr trig incr trig instance initial item active firing task synchroniser corresponds increasing number active output task objects decreasing number active instances fire decr firing decision corresponds making choice possible output task objects trig synchroniser decr incr choosing synchroniser trig dealt separate rule choosing termination dt corresponds incr decr synchroniser fire input task objects need fired incr decr trig earlier version rule formulated trig trig trig illustrates importance defining suitable auxiliary functions relations bottom principle 
comparison section provided extensive illustration primary goal principle goal formalization determines large extent formalization formalism 
case formalization task structures formalization terms petri nets advantage relatively easy petri nets easily explained understood 
addition lot theory available formal analysis petri nets theory applied analyze petri nets resulting translation determine properties original task structures free deadlock 
substantial amount theory available formal analysis predicate transition nets predicate transition net specifying formal semantics task structures suited formal analysis analysis high level petri nets complex computational point view elementary petri nets 
main advantage predicate transition net formalization operational nature allows implementation analysis performed means simulation 
wij prolog implementation task structures described formally derived predicate transition net formalization similar described section decomposition abort mechanism formally specified hand synchronizers 
process algebra formalization advantage relatively compact may exploit equivalence theory developed process algebra 
hn theory bisimulation demonstrate task structures proven equivalent context generate traces 
working hor author experienced great difficulties process algebra formalization proving properties particular deadlock freedom task structures satisfied certain requirements :10.1.1.49.355
process algebra formalization useful context proofs certain classes task structures requires reasoning equation sets specific form 
purpose axiomatic semantics proves suitable see hor :10.1.1.49.355
considers natural extensions task structures task decomposition messaging time constructs axiomatic semantics hard define properly best exploit wide range operators supplied process algebra see hh 
case study ii formalizing orm section formalization conceptual data modelling technique studied 
study aims illustrate trade offs primary goal principle conceptualisation principle importance semantics priority principle 
subject case study object role modelling orm hal 
reason choosing orm popular entity relationship er che family data modelling techniques orm richer modelling language 
orm established history formalization different styles hal hal hw hp cp making interesting case study 
formalizations syntax information modelling technique important tend relatively simple 
information modelling techniques fairly straightforward syntax 
formalization semantics done usually complicated issue provides interesting case 
study definition orm semantics formalization syntax needed 
brief standardized formalization relevant parts syntax provided 
section solely denotational semantics studied different domains logic set theory category theory 
informal orm formalizing semantics brief discussion technique order 
focus key modelling concepts orm 
key concepts data modelling object types relationship types 
generally relationship type considered represent association object types 
relationship type may arity 
graphical representation binary relationship type object types shown er orm style respectively 
binary relationship type er orm orm uses circles denote object types er rectangles purpose 
relationship type orm context referred fact type consists number roles 
roles represents fact attached object type participates plays role relationship type 
orm roles explicit graphically represented means rectangles 
explicit treatment roles reason technique called object role modelling 
seen binary relationship consists roles 
subsequent example example ternary relationship shown 
relationship types may objectified means may play roles relationship types 
conceptual data modelling techniques offer concepts expressing inheritance properties hp 
literature forms inheritance documented terminology far standardized 
section subtyping construct orm context 
subtyping specific facts recorded specific instances object type 
example data model concerned persons working departments may wish express adults persons years old cars recorded 
case adult subtype object type person instances adult participate relationship registering car ownership 
captured schema 
labelled example ternary relationship 
arrow adult object type person object type signifies fact adult subtype person 
nr years age age works 
person level adult department ownership owns example domain subtyping subtype inherits properties supertype may additional properties 
orm uses subtype defining rules decision criteria determining instances supertypes participate subtypes 
rules ensure subtypes viewed derived object types population derived supertypes 
orm features numerous types constraints restrict set allowed database populations hal part case study 
discussion identification schemes instance object type may uniquely identified 
syntax orm orm information structure syntactically consists elements 
finite set roles 

nonempty finite set object types 

set relationship types 
function roles provide partition roles relationship types notation denotes set role sequences 
car 
function player yields object type playing certain role 

binary relation capturing subtyping 
interpreted subtype 
relation required acyclic 
auxiliary functions prove useful 
function ini yields role position relationship type identified roles 
rel yields relationship type role contained defined rel 
schema example example shows graphical representation information structure information structure diagram 
diagram focus mathematical constructs schema 
formal syntax orm information structure needs able refer individual roles roles received unique label 
schema formally defined players roles furthermore roles roles roles player player player question may ask really need represent roles involved relationship type sequence 
just modelled set 
remainder discussion provided 
related interesting trade primary goal conceptualization principles 
logic formalization orm examples logic approach express semantics orm hal de de 
logic formalization direct advantage example allows automatic reasoning prove equivalence conceptual schemas hal blo theorem prover 
furthermore experience teaching primary goal principle shows intuitive way students see relationship logic orm strengthening understanding appreciation formalisms 
formalization orm style hal hal closely follows syntax orm 
doing touches trade primary goal principle semantics priority principle 
syntax orm formalization semantics easier follow 
semantics priority principle suggests may impede development new theories modelling constructs information modelling 
basic idea style formalization directly interpret orm schema order logic theory 
means schema transformed set formulae database population set additional atomic formulae consistent schema 
constraints formulated conceptual schema translated appropriate formulae theory 
delving orm history may find surprisingly highly inspired order logic 
obvious thing ary relationship type orm schema result ary predicate object type relationship types result unary predicate 
yield predicates person age nr years person works dept level person owns car unary predicates object types nr years person adult department level car semantics schema expressed order theory person age nr years person nr years person works dept level person department level adult owns car adult car adult person person age nr years adult rules conformity rules 
relationship instance required instances valid instances object types playing role relationship type 
general roles 
pn rule format 
xn player 
player pn xn see particular formalization needs predefined order roles relationship types 
order variables predicate corresponds order chosen roles 
final rules deal subtyping 
adult definition person rule person older considered adult 
general rule holds 
subtype subtype defining rule case 
example example population person erik person mark department information systems department computing services level level nr years nr years adult erik car person age nr years erik person age nr years mark person works dept level erik information systems person works dept level mark computing services adult owns car erik style formalizing advantage closely follows syntactical structure orm educational point view wise strategy 
looking conceptualization principle formalization viewed having major drawbacks 
drawback presumes pre determined order roles relationship type 
example versus person works department level department works person level depending aim formalization conceptualization vs educational purposes may acceptable 
decoupling surface structure concrete syntax 
information deep structure information strategy follow expressing semantics conceptually conceptualisation principle 
ideally view facts exactly dealing sets second drawback formalization style way forces deal 
orm allows instances relationship types treated instances 
result relationship instance may quite play role relationship types 
illustrated 
depicted concrete example representation 
example domain deals students attend subjects 
attendance may receive final mark semester 
students receive mark may drop course semester 
objectified ary relationship type behaves nature object type relationship type 
yield ary predicate unary predicate mapping logic theory 
instance schema yields binary predicate unary predicate hal situation resolved introducing rule pre defined order roles predicates rule violation conceptualization principle 
rule unnecessarily reveals underlying physical structure instances tuples 
need state instances objectified relationship type fact tuples 
abstraction syntax yield conceptual formalization remove discussed drawbacks 
due higher level abstraction connection schema expression graphical language formalization apparent 
may influence educational goals primary goal principle 
consider objectified relationship 
translate schema producing type object types relationship types unary predicate role binary predicate 
example leads predicates attended result resulted student subject mark objectified relationship type interpret plays role relationship important difference previous approach instances relationships objects treated alike 
treated elements assumptions regarding underlying structure 
downside approach connection graphical presentation obvious depending objective may undesirable primary goal principle 
upside order roles occur relationship type longer importance making formalization conceptual conceptualization principle 
concrete example translation nr years age nr years age person age person age person involved person department department level level adult ownership adult ownership car ownership car ownership age nr years age person age person involved department level ownership adult ownership car ownership adult person person age nr years adult actual theory corresponding conceptual schema may complicated cleaner way deal 
order roles appear relationship types irrelevant 
general logic theory schema derived follows 
role conformity rule player rel furthermore instance relationship type roles 
pn note dropped order roles associated role instance 
pn formalization style example population person erik person mark department information systems department computing services level level nr years nr years adult erik car age age ownership ownership person age erik nr years age person age mark nr years age person involved erik department information systems level person involved mark department computing services level adult ownership erik car ownership instances 
placeholders instance represents underlying relationship instance 
set theoretic formalization orm set theoretic approach views data model consisting information structure describing structure information elements set constraints 
population mapping object types sets instances 
mapping conformant structural requirements constraints 
semantics data model defined set allowable populations 
style formalization hw 
set theoretic style formalization closely follows syntax schema 
initial logic approach formalization rely order roles relationship type 
schema treated set concepts semantics expressed explicit names orderings roles relationship types 
formalization fact roles returns sequence 
needed set roles roles 
approach clearly better regards conceptualization principle 
formally population pop data model assigns object type finite set instances constraints satisfied 
instances originate underlying universal domain 
universe instances inductively defined smallest set satisfying 
set atomic instances 


xn instances 
rn roles mapping 
rn xn instance note mapping set tuples tuple ri xi denoted ri xi 
mappings intended population relationship types 
population relationship type set tuples 
tuple population relationship type mapping roles values roles 
example tuple representing fact adult erik owns car leads erik roles relationship type ownership 
note approach treatment objectified relationships transparent 
instance relationship type mapping may see definition occur object mapping relationship 
requirement value assigned role occur population object type playing role captured conformity rule pop pop player erik erik pop player specialization rule expresses instances participate subtype pop pop rx rx subtype defining rule subtype style formalization quite elegant simple setup basically derived referred mapping oriented approach mai formalization relational model cod 
approach guarantees nice properties algebraic operators associativity commutativity joins 
identified drawback style fact reveals instances relationship types implemented means mappings roles 
direct consequence style relational model tables modeled sets sequences 
attributes row population table mapping attributes values 
second logic formalization style seen need assumptions 
trade conceptualization principle primary goal principle involved 
cp alternative formalization set theoretic style remedies drawback 
formalization style category theoretic approach see cleaner approach problem hiding unnecessary detail formalizing 
category theoretic formalization orm formalization approach usually requires readers able understand abstractions formalism 
case logic saw conceptual formalization obtained dropping ordering roles relationship removing dependence tuple representation objectified relationships 
set theoretic approach essentially seen repeat 
abstraction led cleaner formalization relationship types regards conceptualization principle 
view application principle micro level 
shown category theory provides far substantial advantage 
semantics configurable choice desired semantic features time stamps null values uncertainty simply choice appropriate instance category require complete redesign formalization case previously formalizations 
idea configurable semantics provides example generalization macro level 
category theory relatively young branch mathematics designed describe various structural concepts different mathematical fields uniform highly conceptual way 
category theory offers number concepts theorems concepts form abstraction concrete concepts diverse branches mathematics 
pointed hoare hoa category theory quite general branch pure mathematics 
resulting level genericity abstraction may category theory formalizations harder understand average reader 
goal formalization communication formal definition wide audience strong preference highly conceptual formalization category theory ideal instrument 
wider audience needs addressed mundane formalization may appropriate 
goguen gog argued category theory provide help dealing abstraction representation independence computing science viewpoints useful need achieve independence overwhelmingly complex details things represented implemented 
particularly relevant context case study 
category theory allows study essence certain concepts focuses properties mathematical structures representation 
point illustrated formalization relationship types discussed 
category theory interesting approach defining semantics data modelling technique 
category theory allows define semantics highly way focussing essential properties 
example formalization discussed reported lh 
case study fraction needed consequently categorical notions required 
category directed multigraph nodes called objects edges called arrows 
pair arrows associated arrow composition furthermore side defined 
object arrow ida identity arrow 
ida idb id id simple example category simple example category shown 
example assumptions meaning objects arrows 
category choice composites forced ida idb objects arrows category may concrete interpretation 
example objects may mathematical structures sets partially ordered sets graphs trees arrows denote functions relations paths graph context set oriented categories important 
elementary frequently category category set objects sets arrows total functions 
objects set necessarily finite 
category objects finite sets arrows total functions called finset 
category concerns sets partial functions category rel sets objects binary relations arrows 
categorical formalization necessary define uniform syntax conceptual data models general possible 
conceptual data models defined means type graphs see sie tui 
type graphs provide highly conceptualized view data models shown definition enable elegant formal definition populations illustrates semantics priority principle 
various object types data model correspond nodes graph various constructions discerned labeling arrows 
relationship types example correspond nodes 
object type participating role relationship type target arrow labeled role source relationship type 
object type may participate roles relationship type type graph multigraph 
definition type graph directed multigraph label set role spe edges label spe called subtype edges type graph may contain cycles consisting solely subtype edges 
function type yields label edge 
edge labeled role node node indicates relationship type plays role 
labeled spe specialization important observation respect definition type graph liberal 
allows binary relationship type subtype ternary fact type example 
shown assigning semantics type graphs containing relations problem oo perspective useful semantics priority principle example example data models represented type graphs consider shows type graph orm data model 
role role role role role role spec role example approach population defined model type graph category 
model graph homomorphism graph category interpreted graph 
definition category type model type graph model referred instance category model 
point requirements mapping edges relation labels imposed 
requirements discussed remainder section 
definition implies semantics data model depends instance category chosen 
choice category choice desired semantic features semantics configurable 
leads elegant way introduce notions time choose null values choose uncertainty choose extra dimensions 
redesign formalization needed 
categories provide meaningful semantics data models 
lh number requirements imposed categories act instance category number categories proven satisfy requirements 
modelling instances relationship types category theory allows highly conceptual approach 
contrary tuple oriented approach mapping oriented approach category theory assumptions underlying way represent instances 
categorical approach follows observation relationship instances sufficient access various parts 
examples consider populations different instance categories 
role role type graph type graph schema shown 
category theoretically population corresponds mapping type graph instance category 
example population pop finset represented pop pop approach relationship instances identity functions applied retrieve respective components 
note approach possible different relationship instances consist exactly components conforms oo 
possible set theoretic formalization 
apart finset possible choose instance categories 
remarked category allows certain components relationship instances undefined allowing natural treatment null values pop pop population relationship instance corresponding object playing role possible choice instance category category rel 
rel components relationship instances correspond sets roles mapped relations 
relationship instance may related objects components comparable notion multi valued attributes oo 
sample population pop pop role cyclic unary fact type example important difference set theoretic formalization categorical formalization relationship types consider 
fact type represented information structure diagram type graph categorical formalization 
sample population category finset pop schema set theoretic formalization 
easily seen follows 
instance assigned natural number representing shortest proof membership 
natural number referred depth instance 
fact type population assigning nonempty set instances contain instance minimal depth say application conformity rule gives member population gives contradiction depth depth mentioned specialization specific facts recorded specific instances object type 
specialized object type inherits properties supertype may additional properties 
student person teaching assistant employee example subtype hierarchy orm example specialization consider orm schema 
diagram object type teaching assistant subtype student employee 
set theoretic terms general formalization subtype relation treat injective function 
general requiring pop pop case subtype instances may different representation object types particularly object oriented data models 
category theoretically subtype relation correspond monomorphism category set monomorphism corresponds injective function 
definition monomorphism definition arrow monomorphism object category arrows requirement specialization relations mapped monomorphisms sufficient adequate formalization specialization relations 
consider example population finset schema pop person jones richards pop student st pop employee em pop teaching assistant ta subtype relations see ta em ta st em jones st richards sample population specialization relation mapped injective function instance ta object type teaching assistant corresponds instances person richards jones 
clearly undesirable 
avoid problems subtype diagrams diagrams consisting solely subtype edges required commute 
terms subtype diagram imply function composition identical function composition ta ta 
subtype diagram required commute subtypes inherit properties supertypes unique way 
example teaching assistant inherits name supertype person 
st person spe spe student employee spe richards spe teaching ta jones non commutative diagram em section studied formalization conceptual data modelling technique denotational semantics different target domains 
study seen trade offs primary goal principle conceptualisation principle 
illustrated importance semantics priority principle 
general conceptual data modelling logical style appropriate learner audience basis support tool allowing constraint contradictions theorem prover hm 
category theoretic style useful developing studying theory conceptual data modelling suited novice audience due high abstraction level 
shown serve basis data modelling shell allowing analysts define data modelling technique required semantic features 
set theoretic formalization style provide middle ground previous 
shown formalization style leads elegant characterization complex uniqueness constraints basis conceptual query language lisa 
discussion formalization 
need elegant concise formalizations starting point recognized importance guidance process involved 
guidance provided form discussion different styles assigning formal semantics formalization principles 
elaborate case studies illustrated different styles principles 
task structures example dynamic modelling technique formalised different styles assigning semantics orm example static modelling technique formalized denotational semantics different target domains 
case study highlighted importance primary goal principle second case study highlighted tradeoffs primary goal principle conceptualization principle importance semantics priority principle 
reader interested formalization case studies different field computer science referred hoare 
hoa mathematical theory programming different styles denotational operational algebraic terminology corresponds axiomatic 
hoa logic advocated providing basis systematic design methodology illustrated number formalization case studies 
jh shown axiomatic semantics transformed operational semantics 
interesting formalization csp denotational style ccs operational style acp axiomatic algebraic style 
naturally level ambition modest definite need investigate formalization principles provide depth guidelines heuristics 
subject research 
authors referees suggestions led number improvements 
bae baeten editor 
applications process algebra 
cambridge university press cambridge united kingdom 
brouwer martens proper 
unifying object role modelling approach 
information systems 
bh bowen hinchey 
myths formal methods 
ieee software pages july 
van ter hofstede th van der weide 
semantics verification object role models 
information systems october 
blo 
signed tableaux basis automated theorem proving nonclassical logics 
phd thesis university queensland brisbane australia 
bot bots 
environment support problem solving 
phd thesis delft university technology delft netherlands 
bw baeten weijland 
process algebra 
cambridge university press cambridge united kingdom 
bw barr wells 
category theory computing science 
prentice hall englewood cliffs new jersey 
che chen 
entity relationship model unified view data 
acm transactions database systems march 
colmerauer van 
prolog theoretical basis current developments 
tsi technology science informatics july 
cod codd 
relational model data large shared data banks 
communications acm 
coh cohen 
justification formal methods system specification 
software engineering journal january 
cp proper 
generic model dimensional conceptual modelling 
data knowledge engineering 
dav davis 
software requirements analysis specification 
prentice hall englewood cliffs new jersey 
de de 
data schema transformations 
phd thesis university tilburg tilburg netherlands 
de de 
formalization binary object role model logic 
data knowledge engineering may 
dem 
structured analysis system specification 
prentice hall englewood cliffs new jersey 
edm edmond 
information modeling specification implementation 
prentice hall englewood cliffs new jersey 
ter hofstede 
unifying framework conceptual data modelling concepts 
information software technology january 
gal galton 
temporal logics applications 
academic press new york new york 
gen 
predicate transition nets 
brauer reisig rozenberg editors petri nets central models properties advances petri nets part volume lecture notes computer science pages 
springer verlag berlin germany 
gog goguen 
categorical manifesto 
mathematical structures computer science 
gw van glabbeek weijland 
branching time abstraction bisimulation semantics 
journal acm may 
hal halpin 
logical analysis information systems static aspects data oriented perspective 
phd thesis university queensland brisbane australia 
hal hall 
myths formal methods 
ieee software pages september 
hal halpin 
conceptual schema optimization 
australian computer science communications 
hal halpin 
fact oriented approach schema transformation 
thalheim 
editors volume lecture notes computer science pages rostock germany 
springer verlag 
hal halpin 
conceptual schema relational database design 
prentice hall sydney australia nd edition 
har harel 
order dynamic logic volume lecture notes computer science 
springer verlag berlin germany 
engels 
formal semantics entity relationship query language 
proceedings ninth international conference entity relationship approach lausanne switzerland october 
hh ter hofstede 
formalization communication behaviour object oriented analysis 
data knowledge engineering august 
hl lee 
methodology constructing predicate transition net specifications 
software practice experience august 
ter hofstede 
conceptual data modeling categorical perspective 
computer journal august 
ter hofstede th van der weide 
applications categorical framework conceptual data modeling 
acta informatica december 
hm halpin 
automated validation conceptual schema constraints 
loucopoulos editor proceedings fourth international conference caise advanced information systems engineering volume lecture notes computer science pages manchester united kingdom may 
springer verlag 
hn ter hofstede 
task structure semantics process algebra 
software engineering journal january 
ho ter hofstede orlowska 
complexity verification problems process control specifications 
technical report faculty information technology queensland university technology brisbane australia april 
hoa hoare 
communicating sequential processes 
prentice hall englewood cliffs new jersey 
hoa hoare 
notes approach category theory computer scientists 
broy editor constructive methods computing science volume nato advanced science institute series pages 
springer verlag 
hoa hoare 
mathematical models computing science 
oxford university computing laboratory oxford united kingdom 
hoa hoare 
unified theories programming 
oxford university computing laboratory oxford united kingdom 
hor ter hofstede orlowska :10.1.1.49.355
verification problems conceptual workflow specifications 
data knowledge engineering january 
hp halpin proper 
subtyping polymorphism object role modelling 
data knowledge engineering 
ter hofstede proper th van der weide 
formal definition conceptual language description manipulation information models 
information systems october 
hw ter hofstede th van der weide 
formalisation techniques chopping methodology jungle 
information software technology january 
hw ter hofstede th van der weide 
expressiveness conceptual data modelling 
data knowledge engineering february 
iso information processing systems concepts terminology conceptual schema information base 
iso tr 
www iso org jen jensen 
coloured petri nets 
brauer reisig rozenberg editors petri nets central models properties advances petri nets part volume lecture notes computer science pages berlin germany 
springer verlag 
jen jensen 
coloured petri nets high level language system design analysis 
rozenberg editor advances petri nets volume lecture notes computer science pages berlin germany 
springer verlag 
jh jifeng hoare 
algebra operational semantics 
information processing letters february 
jon jones 
systematic software development vdm 
prentice hall englewood cliffs new jersey 
lau 
linear algebraic techniques place transition nets 
brauer reisig rozenberg editors petri nets central models properties advances petri nets part volume lecture notes computer science pages 
springer verlag berlin germany 
lh ter hofstede 
category theory approach conceptual data modeling 
rairo theoretical informatics applications 
mac mackenzie 
automation proof historical sociological exploration 
annals history computing 
mai maier 
theory relational databases 
computer science press rockville maryland 
mey meyer 
theory programming languages 
prentice hall englewood cliffs new jersey 
mil milner 
communication concurrency 
prentice hall englewood cliffs new jersey 
pet petri 
kommunikation mit 
phd thesis university bonn bonn germany 
german 
pet peterson 
petri net theory modelling systems 
prentice hall englewood cliffs new jersey 
pol polya 
solve new aspect mathematical method 
princeton university press princeton new jersey usa 
second edition 
rei reisig 
petri nets 
eatcs monographs theoretical computer science 
springer verlag berlin germany 
sch th 

foundations computing systems development set theory logic 
addison wesley wokingham united kingdom 
sernadas fiadeiro meersman sernadas 
proof theoretic conceptual modelling niam case study 
editors information system concepts indepth analysis pages amsterdam netherlands 
north holland ifip 
sie siebes 
complex objects 
phd thesis university twente enschede netherlands 
spi spivey 
understanding specification language formal semantics 
cambridge university press cambridge united kingdom 
tui 
data modeling categorical perspective 
phd thesis university antwerp antwerp belgium 
wh 
automated support modelling process view experiments expert information engineers 
bergman editors proceedings second nordic conference caise advanced information systems engineering volume lecture notes computer science pages stockholm sweden eu 
springer verlag 
isbn th van der weide ter hofstede van 
determining semantics complex uniqueness constraints 
computer journal april 
ter hofstede van 
representation information modelling knowledge 

lyytinen editors generation case tools volume studies computer communication systems pages 
ios press 
wij 
modelling support information systems development 
phd thesis delft university technology delft netherlands 
isbn contents syntax semantics concrete versus syntax 
assigning formal semantics 
formalization principles 
case study formalizing task structures task structures 
syntax task structures 
semantics task structures petri nets 
semantics task structures predicate transition nets 
semantics task structures process algebra 
semantics task structures logical derivation rules 
comparison 
case study ii formalizing orm informal orm 
syntax orm 
logic formalization orm 
set theoretic formalization orm 
category theoretic formalization orm 


