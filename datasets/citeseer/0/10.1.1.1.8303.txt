visual navigation compound graphs preprint marcus university passau passau germany marcus uni passau de 
describes local update scheme algorithm sugiyama misue ieee trans 
systems man cybernetics drawing views compound graphs 
view representation compound graph generated contracting subgraphs meta nodes 
starting initial view underlying compound graph explored repeatedly expanding contracting meta nodes 
novelty totally local update scheme algorithm sugiyama misue 
efficient graph entirely expensive steps algorithm level assignment crossing minimization restricted modified part compound graph 
locality updates preserves user mental map nodes affected expand contract operation keep levels relative order expanded edges take course corresponding contracted edge 
established technique deal huge graphs partition recursively hierarchy subgraphs leads compound graphs clustered graphs 
models representations graph called views defined :10.1.1.58.7270
intuitively view generated contracting subgraphs needed detail meta nodes 
edges contracted subgraph nodes outside edges meta node outside node 
views interactively exploring large graph choose subgraphs contract meta nodes expand 
important drawing current view adjusted efficiently operations user mental map preserved 
update scheme compound graph drawing algorithm sugiyama misue 
particular emphasis laid locality updates expand contract local effect 
drawing new graph computed manipulated subgraph 
significant improvement time consuming phases algorithm level assignment crossing minimization 
user mental map old view preserved keeping nodes levels relative order 
furthermore expanded edges take course corresponding contracted edge 
fig 

compound digraph hierarchy tree depicted inclusion dashed rectangles problem description fig 

view having leaves darker shaded nodes compound digraph fig 
compound digraph consists nodes inclusion edges adjacency edges required inclusion digraph rooted tree adjacency edge connects node descendants ancestors see fig 

convenience adopt terminology node ch denote set children pa parent descendants de nodes subtree rooted including 
depth depth number nodes path root view compound digraph nodes connected contains root additionally leaves cover leaves leaf exactly ancestors leaf subtree root 
adjacency edges comprise edges induced edges leaves connected induced edge nodes de de connected adjacency edge intuitively designated set leaves view constructed shrinking leaf descendants single meta node see fig 

visual navigation underlying compound digraph operations shall performed view expand leaf refines view result view ch contract ch leaves view result view ch 
concentrates visualizing operations 
start initial layout view user iteratively applies expand contract operations operation previous layout adjusted 
clearly obvious solution complete graph unfortunately efficient preserve users mental map seen comparing figs 

context notion preserving mental map old nodes stay levels relative order fig 

expanding shaded node fig 

result update scheme fig 

result unchanged furthermore expanded edges take course corresponding contracted edge 
solution update scheme algorithm sugiyama misue drawing compound graphs 
algorithm briefly recalled sect 
consists steps produce intermediate results 
initial view laid original algorithm expand contract operation intermediate results previous run adjusted update scheme described sect 

related algorithms drawing compound graphs notably sander differs algorithm sugiyama misue things global layering 
producing compact supposedly pleasant layouts global layering difficult update local layering sugiyama misue 
dynamic online graph drawing concentrates updating layouts ordinary graphs subject insertions deletions nodes edges 
clientserver model online hierarchical graph drawing north allows insertion removal subgraphs ordinary dags compound graphs 
clan hierarchical decomposition incremental drawing approach dags restricts adjustments layout modified part 
visual navigation compound clustered graphs expanding contracting nodes introduced sugiyama misue implement reapplying algorithm 
huang eades briefly describe system handling huge clustered graphs visually layout method force directed 
visualization system abello korn supports interactive exploration large clustered graphs 
views abstraction underlying graph provide methods expanding edges 
expansion restricts view expanded edge method preserves relations expanded part remainder 
efficient data structure supporting expand contract known graph view maintenance problem indispensable efficient implementation update method proposed :10.1.1.58.7270
software architecture considered 
static compound graph drawing recall algorithm sugiyama misue briefly update scheme uses intermediate results steps 
step input step original compound graph result assigned compound graph da fa maps node compound level fa adjacency edges oriented lower higher level 
step internally uses derived compound graph dd fd type edges fd types type fd derived replacing adjacency edge edges ancestors having equal depth 
deepest edge type type see fig 

resolving cycles dd compound levels assigned resulting cycle free graph df ff type 
root placed level children placed nodes treated recursively 
note children nodes level evaluated common recursive call 
local level children determined standard level assignment algorithm takes account types edges type enforces level level type levels may equal 
compound level child built appending local level parent compound level pa 
adjacency edges oriented lower higher level 
complexity step si size input step ii normalization step adjacency edges assigned compound digraph da proper edge proper pa pa tail tail parents lie level children levels differ 
achieved replacing improper edge linear compound graph fig 

result step assigned proper compound graph dp vp ep fp 
complexity step sii size input da 
step iii vertex ordering assigned proper compound graph dp step calculates relative order nodes level minimize edge crossings 
fig 

dashed edges derived solid fig 

dummy nodes replace improper edge local order inner nodes children levels determined 
result step ordered compound graph vp ep fp inner node vp describes local order children 
vertex ordering algorithm works depth inner node compound graph induced de reduced ordinary dag local hierarchy shrinking child single node 
leads types edges local hierarchy edges adjacent levels connecting nodes level 
child descendant may adjacent node de 
definition proper edge follows pa lie level 
algorithm ordered children ancestors known lies left right child annotated values counting edges going left right respectively 
crossing minimization local hierarchy starts preprocessing step called splitting method pinning children left right level larger nearer node placed 
remaining nodes crossings minimized modified center heuristic takes account horizontal edges 
complexity step size input dp step iv metric layout step assigns coordinates dimensions nodes ordered compound graph 
recursive algorithm assigns local coordinates children relative parents position inner node applied children determining width height 
local coordinates optimized called priority method metrical local hierarchy basically local hierarchy previous step horizontal edges 
similar center heuristic minimizing crossings priority method improves nodes positions moving far possible changing order level respective metrical centers 
final depth traversal calculates absolute coordinates 
phase done recursive algorithm 
complexity step siv size input 
update scheme view compound graph drawn standard algorithm node shall expanded resulting new view ch 
assumed structure determined efficiently data structures maintaining hierarchical graph views come play :10.1.1.58.7270
step step assigned compound digraph updated 
order preserve mental map old nodes stay levels children appropriate levels determined 
words level assignment function extended set expanding cycle free graph df inherits direction edges incident corresponding expanded edges edge reversed cycle removal previous run corresponding expanded edges reversed 
setting obvious new cycles entirely consist newly added edges cycle removal restricted children definition derived graph follows edges adjacent leaf type level assignment algorithm edge type causes target node placed higher level source node 
connected node level child updated cycle free graph df 
consequently level assignment need take account children nodes level restricted subgraph df induced children level assignment extended updating assigned compound digraph da da just matter adding ch corresponding inclusion edges inserting new adjacency edges directed lower higher levels induced adjacency edges incident removed 
updated assigned compound digraph differ algorithm sect 
applied produced 
old nodes stay level possible place ancestors neighbors level compare instance fig 
shows level assignment produced update scheme fig 
result algorithm applied anew 
adjacency edge fig 
leads type derived edge pa results pa placed level bound stay update 
derived graph built anew edge type pa placed level shown fig 

property 
denote number elements added expanding complexity updating assigned compound digraph da si compared si reapplying step size 
user mental map supported keeping old nodes level 
fig 

expanding step ii normalization fig 

update derived graph fig 

building derived graph anew assigned proper compound graph dp updated steps node expanded new improper adjacency edges proper 
expanding means add ch appropriate inclusion edges induced adjacency edges children child node ch 
old induced edge connecting removed edge proper associated dummy nodes edges removed 
levels old nodes unchanged improper edges adjacent child proper exactly described sect 

worst case done new adjacency edge adjacency edges construction previous proper compound digraph dp reused 
clearly result exactly normalization applied updated assigned compound digraph da 
property 
denote number elements added da expanding complexity updating proper assigned compound digraph dp sii compared sii reapplying step ii da size da 
step iii vertex ordering step preserving mental map means keep order nodes common old new graph nodes added update dp dp position relative order respective levels determined 
nodes children including dummy nodes edges children dummy nodes belong edge child node ch 
described sect 
vertex ordering algorithm recursively calculates local orders children inner node levels determining order children just matter applying algorithm subtree rooted precondition children ancestors ordered 
positions dummy nodes children fixed prior ordering children consider induced edge symmetrically edge expanding children 
vk inherit edge 
clearly subgraph inserted vi proper extra dummy fig 

proper nonlocal edges expanding fig 

expanding new dummy node complexes inherit order fig 

order dummy nodes determined order children node complex level identical edge 
idea reuse positions dummy nodes edge dummy nodes edges 
vk 
dummy nodes edges treated block position block position respective dummy node edge 
reusing effect expanded edges take course old edge 
positions old dummy nodes reused assumed loss generality edge proper suffices expand edge dummy node proper 
expanding proper edge results improper edges 
vk see figs 

edge vi proper dummy node complex consisting nodes pi ci pa ci pi edges vi ci pi nodes pi siblings lie level distinguish types proper edges local edge pa pa non local edge pa pa 
reason pa pa definition proper demands pa pa lie level 
relative position old nodes preserved known pa left right pa 
clearly determines dummy nodes pi left right local edge position new dummy node level dummy nodes pi belonging expanded edge treated block sufficient 
local hierarchy induced pa children expanded edges belonging nonlocal edge depending pa lies left right pa 
splitting method cf 
sect 
puts left right level exact position determined value 
expanded edges non local edge 
indistinguishable splitting method pinned arbitrary relative order 
order nodes level 
problem incidentally original algorithm sugiyama misue 
solved relative order nodes expanded edges secondary sorting criterion splitting method 
update scheme means placed old order nodes value order respective nodes determines order 
consider instance dummy nodes level fig 
having value placed right 
order derived order shown fig 
clearly best choice 
splitting method expanded edges non local edges fixed remains local edges 
proper local edges lie level determine relative order expanded edges respectively 
essentially degree freedom place right left sense non dummy node edges represents cross local hierarchy induced pa children dummy nodes outgoing edge center identical position centers decide placed left right remains determine relative order expanded edges respective block 
order depends positions children crossing reduction algorithm sect 
applied local hierarchy 
note possible knowing exact order expanded edges determines side leave information sufficient values children 
consider edge expanded edges 
vk 
order dummy nodes 
pk block represented determined follows lies right 
order children bottom top level left right 
order dummy nodes left right see fig 

case right cases incoming edge symmetric 
property 
denote number elements added dp expanding complexity updating local order compared reapplying step iii dp size dp 
relative order old nodes preserved expanded edges take course corresponding contracted edge 
step iv metric layout expanding changes width height leads adjustments local coordinates siblings turn changes width height pa root 
hand local coordinates children node ancestor affected 
described sect 
metric layout consists steps computing local coordinates followed traversal hierarchy sum absolute coordinates 
adjust local coordinates ancestors second step 
updates local coordinates basically recursive procedure sect 
difference recursive calls ancestors local coordinates subtrees rooted nodes ancestors reused previous layout 
property 
denote size 
worst case complexity updating coordinates siv 
final depth traversal sum absolute coordinates completely applied case local coordinates adjusted ancestors expanded node 
contraction contracting node expanded update scheme straightforward contracted view nodes old level assignment vertex order just need restricted position dummy nodes new induced edge incident position blocks corresponding expanded edges 
width height changed metric layout updated described sect 

side effect expanding contracting visually inverse drawing expanding contracting node expanding 
contraction complicated nodes expanded update scheme 
consider child edge pa lie level fig 

pointed sect 
happen expanded possible layout initial view 
note deepest derived edge type edge compound levels differ common start sequence position cf 
sect 

induced edge representing contracting violate invariant subsequence 
problem manifests derived graph contracting deepest edge type adjacent removed type derived edge ancestor depth adjusted lead substantial changes level assignment user mental map see fig 

easiest way deal problem allow contraction nodes expanded node initial view contracted 
way modify algorithm sugiyama misue initial view edges derived graph type 
consequence initial layout compact nodes descendants connected lie level 
property 
denote number elements removed dp elements removed intermediate compounds graphs updating drawing contracting node expanded update scheme takes steps iii 
step iv expanding see property 
summary proposed update scheme algorithm sugiyama misue supports efficient visual navigation compound graphs expand contract operations 
locality update scheme efficient entire new view 
expanding node complexity updating drawing essentially determined applying steps iii modified part compound graph followed step iv adjusting coordinates 
user mental map old view preserved old nodes stay levels relative order expanded edges take course corresponding contracted edge 

sugiyama misue visualization structural information automatic drawing compound digraphs 
ieee trans 
systems man cybernetics 
eades feng multilevel visualization clustered graphs 
proc 
th gd 
vol 
lncs 

buchsbaum westbrook maintaining hierarchical graph views 
proc 
th soda 

dynamic tree cross products 
proc 
th isaac 
lncs 

misue eades lai sugiyama layout adjustment mental map 
journal visual languages computing 
sander graph layout applications compiler construction 
tcs 
dynamic graph drawing 
kaufmann wagner eds drawing graphs methods models 
vol 
lncs 
springer 
north online hierarchical graph drawing 
proc 
th gd 
vol 
lncs 

clan incremental drawing 
proc 
th gd 
vol 
lncs 

huang eades fully animated interactive system clustering navigating huge graphs 
proc 
th gd 
vol 
lncs 

abello korn system visualizing massive multigraphs 
ieee trans 
visualization computer graphics 
buchsbaum goodrich westbrook range searching tree cross products 
proc 
th esa 
vol 
lncs 

library hierarchies graphs views 
proc 
th gd 
vol 
lncs 

