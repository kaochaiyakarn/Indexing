past large scale persistent peer peer storage utility peter druschel rice university houston tx usa druschel cs rice edu sketches design past large scale internet global storage utility provides scalability high availability persistence security 
past peer peer internet application entirely selforganizing 
past nodes serve access points clients participate routing client requests contribute storage system 
nodes trusted may join system time may silently leave system warning 
system able provide strong assurances efficient storage access load balancing scalability 
interesting aspects past design pastry location routing scheme reliably efficiently routes client requests past nodes network locality properties automatically resolves node failures node additions randomization ensure diversity set nodes store file replicas provide load balancing optional smartcards held past user issued third party called broker 
smartcards support quota system balances supply demand storage system 
currently projects aimed constructing peer peer applications understanding issues requirements applications systems :10.1.1.20.417:10.1.1.115.4299:10.1.1.10.4919
peer peer systems characterized distributed systems nodes identical capabilities responsibilities communication symmetric 
developing past internet peer peer global storage utility aims provide strong persistence high availability scalability security 
past system composed nodes connected internet node capable initiating done part visiting microsoft research cambridge uk 
antony rowstron microsoft research cambridge cb nh uk microsoft com routing client requests insert retrieve files 
optionally nodes may contribute storage system 
past nodes form self organizing overlay network 
inserted files replicated multiple nodes ensure persistence availability 
high probability set nodes file replicated diverse terms geographic location ownership administration network connectivity rule law additional copies popular files may cached past node balance query load 
storage utility past attractive reasons 
exploits multitude diversity geography ownership administration jurisdiction nodes internet achieve strong persistence high availability 
obviates need physical transport storage media protect backup archival data likewise renders unnecessary explicit mirroring shared data high availability throughput 
global storage utility facilitates sharing storage bandwidth permitting group nodes jointly store publish content exceeds capacity individual node 
past offers persistent storage services access semantics differ conventional filesystem 
files stored past associated quasi unique fileid generated time file insertion past 
files stored past immutable file inserted multiple times fileid 
files shared owner discretion distributing fileid potentially anonymously necessary decryption key 
past support delete operation 
owner file may reclaim storage associated file guarantee file longer available 
weaker semantics avoid agreement protocols nodes storing file 
efficient routing scheme called pastry ensures client requests reliably routed appropriate nodes :10.1.1.28.5987
client requests retrieve file routed node close network client issued request live nodes store requested file 
number past nodes traversed routing client network proximity scalar metric number ip hops geographic distance combination factors 
request logarithmic total number past nodes system normal operation 
storage management scheme past ensures global storage utilization system approach despite lack centralized control widely differing file sizes storage node capacities :10.1.1.110.5867
decentralized storage system nodes trusted additional mechanism required ensures balance storage supply demand 
past includes secure quota system 
simple cases users assigned fixed quotas allowed storage contribute 
optionally organizations called brokers may trade storage issue smartcards users control storage contributed may 
broker directly involved operation past network knowledge system limited number smartcards circulated quotas expiration dates 
issue peer peer systems particularly storage file sharing systems privacy anonymity 
provider storage space may want risk content stores clients inserting retrieving files may wish reveal identity 
past clients storage providers need trust place limited trust brokers 
particular nodes trust brokers facilitate operation secure past network balancing storage supply demand responsible quota system 
hand users need reveal brokers identity files retrieving inserting storing 
user holds initially unlinkable pseudonym form public key 
pseudonym easily linkable user identity user voluntarily reveals binding 
desired user may multiple pseudonyms obscure certain operations initiated user 
provide stronger levels anonymity properties anti censorship additional mechanisms may layered top past 
past design key aspects past architecture pastry routing scheme routes client requests log steps average selforganizing fault tolerant overlay network randomization ensure probabilistic storage load balancing diversity nodes store replicas file need centralized control expensive distributed agreement protocols decentralized storage management caching scheme balances storage utilization nodes total utilization system approaches balances query load caching copies popular files close interested clients optional smartcards support quota system control storage supply demand 
past composed nodes connected internet 
node act storage node client access point assigned bit node identifier nodeid derived cryptographic hash node public key 
file inserted past assigned bit fileid corresponding cryptographic hash file textual name owner public key random salt 
file inserted file certificate generated contains fileid replication factor salt insertion date cryptographic hash file content 
file certificate signed file owner 
file inserted past pastry routes file nodes node identifiers numerically closest significant bits file identifier fileid 
nodes stores copy file 
replication factor depends availability persistence requirements file may vary files 
lookup request file routed live node nodeid numerically closest requested fileid 
procedure ensures file remains available long nodes store file alive reachable internet high probability set nodes store file diverse geographic location administration ownership network connectivity rule law number files assigned node roughly balanced 
follows properties past routing algorithm described section 
follow uniformly distributed quasi random identifiers assigned node file 
discuss key aspects past design security routing content location self organization storage management caching 
security past security model assumptions computationally infeasible break public key cryptosystem cryptographic hash function past clients node operators node software trusted attackers may control behavior individual past nodes assumed nodes overlay network behaved attacker control behavior smartcards 
discussion assume smartcards 
discussed section possible operate past network smartcards 
past node user system hold smartcard 
private public key pair associated card 
smartcard public key signed smartcard issuer private key certification purposes 
smartcards generate verify various certificates insert reclaim operations maintain storage quotas 
sketch main security related functions 
generation nodeids smartcard provides nodeid associated past node 
nodeid cryptographic hash smartcard public key 
assignment nodeids probabilistically ensures uniform coverage space nodeids diversity nodes adjacent nodeids terms geographic location network attachment ownership rule law furthermore nodes verify authenticity nodeids 
generation file certificates store receipts smartcard user wishing insert file past issues file certificate 
certificate contains cryptographic hash file contents computed client node fileid computed smartcard replication factor salt signed smartcard 
insert operation file certificate allows storing node verify user authorized insert file system prevents clients exceeding storage quotas contents file arriving storing node corrupted en route client faulty malicious intermediate nodes fileid authentic defeating denial service attacks malicious clients try exhaust storage subset past nodes choosing nearby values 
storage node successfully stored copy file issues returns store receipt client allows client verify copies file created nodes adjacent nodeids prevents malicious node suppressing creation diverse replicas 
retrieve operation file certificate returned file allows client verify contents authentic 
generation reclaim certificates receipts prior issuing reclaim operation user smartcard generates reclaim certificate 
certificate contains fileid signed smartcard included reclaim request routed nodes store file 
processing reclaim request smartcard storage node verifies signature reclaim certificate matches file certificate stored file 
prevents users owner file reclaiming file storage 
reclaim operation accepted smartcard storage node generates reclaim receipt 
receipt contains reclaim certificate amount storage reclaimed signed smartcard returned client 
storage quotas smartcard maintains storage quotas 
user smartcard issued usage quota depending storage client allowed 
file certificate issued amount corresponding file size times replication factor quota 
client presents appropriate reclaim receipt issued storage node amount reclaimed credited client quota 
prevents clients exceeding storage quota paid 
node smartcard specifies amount storage contributed node possibly zero 
nodes randomly audited see produce files supposed store exposing nodes cheat offering storage indicated smartcard 
briefly discuss system key properties maintained 
system integrity conditions ensure basic integrity past system 
firstly maintain approximate load balancing storage nodes nodeids uniformly distributed 
procedure generating verifying nodeids ensures 
secondly balance sum client quotas potential demand total available storage system supply 
broker ensures balance potentially monetary price storage regulate supply demand 
thirdly individual malicious nodes incapable persistently denying service client 
randomized routing protocol described section ensures retried operation eventually routed malicious node 
persistence file persistence past depends primarily conditions 
unauthorized users prevented reclaiming file storage file stored storage nodes sufficient diversity set storage nodes store file 
issuing requiring reclaim certificates smartcards ensure condition 
enforced store receipts ensured quasi random distribution nodeids biased attacker 
choice replication factor take account expected rate transient storage node failures ensure sufficient availability 
event storage node failures involve loss stored files system automatically restores copies file part failure recovery procedure :10.1.1.110.5867
data privacy integrity users may encryption protect privacy data cryptosystem choice 
data encryption involve smartcards 
data integrity ensured means file certificates issued smartcards 
pseudonymity user smartcard signature information associating stored file request responsible user 
association smartcard user identity known user user voluntarily releases information 
pseudonymity storage nodes similarly ensured node smartcard signature linkable identity node operator 
pastry routing scheme avoids widespread dissemination information mapping nodeids ip addresses 
smartcards briefly reflect role smartcards brokers past 
smartcards presence brokers trusted third parties fundamental past design 
smartcards replaced secure line quota services run brokers 
second possible run past third party 
today technology smartcards brokers solve issues efficiently smartcards brokers ensure integrity nodeid fileid assignment 
third party difficult expensive prevent attackers choosing trial error nodeids fall adjacent existing past nodeids 
smartcards maintain storage quotas securely efficiently 
achieving scalability efficiency line quota service difficult 
enforcing quotas absence trusted third party require complex agreement protocols 
smartcards convenient medium user obtain necessary credentials join system anonymous fashion 
user obtain smartcard desired quota retail outlet anonymously exchange cash 
obtaining credentials line carries risk revealing user identity leaking sensitive information third parties 
disadvantages smartcards 
clients need obtain card periodically replace year ensure key freshness 
second sophisticated resource rich attackers compromise smartcard permitting cheat storage quota mount certain limited denial service attacks card revoked expires 
performance costs due limited processing speed performance smartcards 
fortunately read operations involve smartcard operations 
fact read users need smartcard 
write operations require file certificate verification store receipt generation expect smartcard keeps speed single disk 
larger storage nodes multiple smartcards large storage nodes may require powerful hardware 
professionally managed storage sites option contracting broker obviating need trusted hardware 
internet technologies anonymous transactions infrastructure obviate need smartcards past 
instance micro payments balance supply demand storage quotas anonymous transactions possible user securely anonymously obtain necessary credentials including nodeids 
plan re evaluate smartcards alternatives available 
noted multiple past systems exist internet 
fact envision past networks run competing brokers client access files entire system 
furthermore possible operate isolated past systems serve mutually trusting community broker smartcards 
cases virtual private network vpn interconnect system nodes 
pastry briefly describe pastry location routing scheme past 
fileid pastry routes associated message node nodeid numerically closest significant bits msb fileid live nodes 
invariant file stored nodes nodeids numerically closest fileid follows file located nodes failed simultaneously recovery period 
pastry highly efficient scalable fault resilient selforganizing 
assuming past network consisting nodes pastry route numerically closest node fileid log bn steps average configuration parameter typical value 
concurrent node failures eventual delivery guaranteed nodes adjacent nodeids fail simultaneously configuration parameter typical value 
tables required past node log bn entries entry maps nodeid associated node ip address 
node failure arrival new node invariants affected routing tables restored exchanging log bn messages affected nodes 
briefly sketch pastry routing algorithm 
purpose routing nodeids thought sequence digits base node routing table organized log bn levels entries 
entries level routing table refer node nodeid matches node nodeid digits th digit possible values th digit node id uniform distribution nodeids ensures population nodeid space log bn levels populated routing table 
entry routing table points potentially nodes nodeids appropriate prefix 
nodes closest node proximity metric chosen practice 
addition routing table node maintains ip addresses nodes leaf set set nodes numerically closest larger nodeids nodes numerically closest smaller nodeids relative node nodeid 
routing step node normally forwards message node nodeid shares fileid prefix digit bits longer prefix fileid shares node id node exists message forwarded node nodeid shares prefix fileid long current node numerically closer fileid node id follows definition leaf set node exists adjacent nodes leaf set failed simultaneously 
locality briefly discuss pastry locality properties vis vis proximity metric 
recall entries node routing tables chosen refer nearby node terms proximity metric appropriate nodeid prefix 
result step message routed nearby node longer prefix match digit 
local heuristic clearly achieve globally shortest routes simulations shown average distance traveled message terms proximity metric higher corresponding distance source destination underlying network 
pastry repeatedly takes locally short routing step messages tendency reach node nodes store requested file near client proximity metric 
experiment shows replicated copies file pastry able find nearest copy lookups finds nearest copies lookups :10.1.1.28.5987
node addition failure key design issue pastry efficiently dynamically maintain node state routing table leaf set neighborhood sets presence node failures node recoveries new node arrivals 
protocol described evaluated 
briefly arriving node new nodeid initialize state contacting nearby node proximity metric asking route special message existing node nodeid numerically closest obtains leaf set neighborhood set ith row routing table ith node encountered route show information correctly initialize state notify interested nodes need know arrival restoring pastry invariants 
handle node failures neighboring nodes nodeid space aware virtue leaf set periodically exchange keep alive messages 
node unresponsive period presumed failed 
members failed node leaf set notified update leaf sets restore invariant 
leaf sets nodes adjacent nodeids overlap update trivial 
recovering node contacts nodes known leaf set obtains current leafs sets updates leaf set notifies members presence 
routing table entries refer failed nodes repaired lazily details described 
fault tolerance routing scheme described far deterministic vulnerable malicious failed nodes route accept messages correctly forward 
repeated queries fail time take route 
overcome problem routing randomized 
avoid routing loops message forwarded node shares long prefix numerically closer destination node namespace current node 
choice multiple suitable nodes random 
practice probability distribution heavily biased best choice ensure low average route delay 
event malicious failed node path query may repeated times client route chosen avoids bad node 
storage management caching statistical assignment files storage nodes past approximately balances number files stored node 
non uniform storage node capacities file sizes require explicit storage load balancing permit graceful behavior high global storage utilization non uniform popularity files requires caching minimize fetch distance balance query load 
past employs storage management scheme achieves high global storage utilization rejecting file insert requests 
scheme relies local coordination nodes leaf set imposes little overhead 
experimental results show past achieve global storage utilization excess rate rejected file insertions remains failed insertions heavily biased large files :10.1.1.110.5867
past node cache additional copies file achieves query load balancing high throughput popular files reduces fetch distance network traffic 
storage management caching described :10.1.1.110.5867
related currently peer peer systems development 
prominent file sharing facilities gnutella freenet :10.1.1.10.4919
napster music exchange service provided original motivation peer peer systems pure peer peer system database centralized 
systems primarily intended large scale sharing data files persistence reliable content location guaranteed necessary environment 
comparison past aims combining scalability self organization systems freenet strong persistence reliability expected archival storage system 
regard closely related projects oceanstore farsite eternity :10.1.1.20.417:10.1.1.16.1952
freenet eternity focused providing strong anonymity anti censorship 
oceanstore provides global transactional persistent storage service supports serializable updates widely replicated nomadic data 
contrast past provides simple lean storage abstraction persistent immutable files intention sophisticated storage semantics built top past needed 
farsite traditional filesystem semantics past targeted global archival storage 
farsite uses distributed directory service locate content different past pastry scheme integrates content location routing 
pastry tapestry chord represent second generation peer peer routing location schemes inspired pioneering systems freenet gnutella :10.1.1.105.3673
earlier guarantee definite answer query bounded number network hops retaining scalability freenet self organizing properties freenet gnutella 
pastry tapestry bear similarity plaxton :10.1.1.38.1850
approach routing address prefixes viewed generalization hypercube routing common schemes 
plaxton scheme self organizing associates root node file forms single point failure 
pastry tapestry differ approach achieving network locality replicating objects pastry appears complex 
chord protocol closely related pastry routing address prefixes chord forwards messages numerical difference destination address 
pastry chord explicit effort achieve network locality 
routes messages dimensional space node maintains routing table entries node reached dn routing hops 
pastry routing table grow network size number routing hops grows faster logn 
napster 
www napster com 
gnutella protocol specification 
dss clip com pdf 
anderson :10.1.1.16.1952
eternity service 
proc 
pages 
publishing house 
prague czech republic 
bolosky douceur ely theimer 
feasibility serverless distributed file system deployed existing set desktop pcs 
proc 
acm rics pages 
clarke sandberg wiley hong :10.1.1.10.4919
freenet distributed anonymous information storage retrieval system 
workshop design issues anonymity unobservability pages july 
icsi berkeley ca usa 
dingledine freedman molnar :10.1.1.20.417
free haven project distributed anonymous storage service 
proc 
workshop design issues anonymity unobservability berkeley ca july 
kubiatowicz bindel eaton chen geels gummadi rhea weimer wells weatherspoon zhao 
oceanstore architecture persistent store 
proc 
acm asplos cambridge ma november 
pfitzmann 
anonymity unobservability pseudonymity proposal terminology apr 
www de pub anon anon terminology pdf 
plaxton rajaraman richa :10.1.1.38.1850
accessing nearby copies replicated objects distributed environment 
theory computing systems 
ratnasamy francis handley karp shenker 
scalable content addressable network 
proc 
acm sigcomm san diego ca aug 
rowstron druschel 
pastry scalable distributed object location routing large scale peer peer systems 
proc 
ifip acm middleware heidelberg germany nov 
rowstron druschel :10.1.1.110.5867
storage management caching past large scale persistent peer peer storage utility 
proc 
acm sosp banff canada oct 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
proc 
acm sigcomm san diego ca aug 
wallach 
publishing replication 
technical report tr rice university houston texas july 
waldman mazi res 
censorship resistant publishing system document 
eighth acm conference computer communications security nov 
waldman rubin cranor 
publius robust tamper evident censorship resistant web publishing system 
proc 
th usenix security symposium pages denver august 
zhao kubiatowicz joseph 
tapestry infrastructure fault resilient wide area location routing 
technical report ucb csd berkeley april 
