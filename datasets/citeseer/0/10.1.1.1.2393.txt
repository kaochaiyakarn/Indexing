genome informatics patternhunter ii highly sensitive fast homology search ming li bin ma mli uwaterloo ca bma csd ca derek john tromp com tromp cwi nl dept computer science univ waterloo waterloo canada 
dept computer science univ western ontario london canada 
bioinformatics solutions columbia waterloo canada 
cwi box gb amsterdam netherlands 
extending single optimized spaced seed patternhunter multiple ones pattern hunter ii simultaneously remedies lack sensitivity blastn lack speed smith waterman homology search :10.1.1.147.8001:10.1.1.147.8001:10.1.1.147.8001
blastn speed patternhunter ii approaches smith waterman sensitivity bringing homology search technology back full circle 
keywords homology search sensitivity speed 
task homology search find similar segments local alignments dna protein sequences measured match mismatch gap scores 
homology search crucial biological research routinely needed biologists 
example ncbi blast server processes queries day rate growing month 
large sizes dna protein databases homology search time consuming needs supercomputers conduct 
genbank doubles size months list completed genomes including human mouse rice species expands quickly current computational cost tip iceberg 
having tremendous contributions science past years current homology search tools showing age 
heuristic searches members blast family fasta slow modern genomic data alignments 
exhaustive smith waterman methods dynamic programming ssearch slow practical supercomputers 
specialized software developed speed blast highly similar sequences 
commercial academic parallel built cope huge computational load 
patternhunter new generation general purpose homology search tool designed meet tremendous need :10.1.1.147.8001:10.1.1.147.8001:10.1.1.147.8001
blastn default sensitivity patternhunter runs speed :10.1.1.147.8001
patternhunter compare human genome mouse genome speed times faster blastn sensitivity 
uses novel approaches including optimized spaced seed substantially improve sensitivity speed simultaneously 
piece puzzle remains settled achieve sensitivity smith waterman dynamic programming option way slow 
design goal patternhunter ii solve sensitivity problem patternhunter ii aims achieve sensitivity approaching smith waterman speed similar default blastn 
patternhunter ii new idea patternhunter optimized spaced seed :10.1.1.147.8001:10.1.1.147.8001:10.1.1.147.8001:10.1.1.147.8001
blast exact matches continuous letters seed find long matches patternhunter seed discontinuous letter matches relative positions letters optimized advance 
helped patternhunter significantly increase sensitivity blast 
noticed spaced seeds help increase sensitivity low cost :10.1.1.147.8001
fact independently noticed investigated buhler sun brown 
earlier context blast type homology search nonoptimal randomized multiple spaced patterns studied pevzner waterman multiple filtration techniques flash system califano rigoutsos cover region near certainty multiple randomized hash functions buhler 
problems postponed implementing multiple optimal spaced seeds original patternhunter large memory requirements multiple hashtables difficulty finding optimal seed combination 
researchers studied various aspects spaced seeds exponential heuristic algorithms computing optimal seed :10.1.1.147.8001
complexity finding optimal spaced seeds remains open 
complexity computing hit probability seeds unknown 
describes patternhunter ii implements optimized multiple seed scheme increased sensitivity 
give new greedy method finding near optimal multiple seeds 
generalize dynamic programming compute hit probability seeds 
describe handle multiple hashtables memory issues 
study theoretical performance multiple seeds compare practical performance patternhunter ii blastn ssearch smith waterman dynamic programming 
complexity questions optimal spaced seeds escaped attention 
take chance settle open questions section seeds computing hit probability uniform distribution np hard 
provably polynomial time approximation compute hit probability seeds arbitrary precision 
problem finding optimal seeds np hard 
approximated ratio problem finding optimal seed np hard 
optimized multiple spaced seeds patternhunter ii denote spaced seed binary string :10.1.1.147.8001:10.1.1.147.8001
seed 
length denoted denotes weight number intuitively seed corresponds required match means don care 
serve spread restrict attention seeds bits 
example blastn default seed consecutive matches generate hit 
patternhunter default seed weight length 
seed corresponds regular expression obtained replacing 
homologous region likewise represented binary string representing match representing mismatch 
substring position excluding denoted 

say seed hits homologous region corresponding regular expression matches region 
formally substring 
say hits position hits position say hits tail 
ak seeds 
hits region ai hits say random region uniformly distributed 
general region identities called similarity level li distribution hit probability multiple seeds obviously hit probability 
multiple seeds increase sensitivity homology search 
search program examine hits generated seeds turn slow search speed 
explained way increase sensitivity sacrificing speed decrease weight seed :10.1.1.147.8001
proper tradeoffs approaches lead promised fast sensitive pattern hunter ii 
show evaluate hit probabilities seeds find near optimal seed set 
proceed patternhunter ii design performance analysis 
computing hit probability multiple seeds original patternhunter dynamic programming algorithm compute exact hit probability single seed 
section extend algorithm compute hit probability multiple seeds 

ak set seeds random region length similarity level binary string define pr hits suffix 
hit probability equal empty string 
note pf 
ll try compute terms computed earlier limit set need consider process 
suffix region hit 
call binary string compatible seed min 
clearly suffix region compatible hit tail leads definition set binary strings hit compatible denote longest proper prefix note suppose compatible 
hit 
assuming seed starts hit incompatible case equals equals 
shows computed dynamic programming follows algorithm dp input seed set similarity level length output probability hits random region length 
compute compatible suffix set 

longest shortest 




hits 



output 
patternhunter ii theorem set seeds random region algorithm dp computes pr hits correctly 
denote maximum length seed lines precomputed time 
string denote reverse string xr start building trie ta reverse seeds 
build trie tb reversed strings complete suffix links representing function xr layer layer 
suppose layers 
computed 
turn traverse constructed part tb compatible leaf create compatible children layer 
bit ar create child bit create child 
final bit mark new nodes terminal signals hit prevented having children 
suffix link simply set child node exist depth node need child find keep suffix links upto times get root find node child 
set epsilon respectively 
setting suffix link terminal node terminal way find instances hit time needed construct layer 
summing layers gives precomputation time complexity 
total time complexity algorithm note similar method compute hit probability 
seed set hits region hit different combinations seed position 
similarly hit probability computation denote hit probability region suffix suppose know order compute need modify lines algorithm dp algorithm dp hits 




correctness follows observation probability region tail hit hits equals probability region bit hits 
algorithm dp dp hits extended compute hit probability random regions involved distributions 
example brown studied distribution coding region homologies 
codon period coding regions distribution similarities positions pk 
mer denote parameters distribution 
generally suppose similarity position pi 

compute hit probability random region change replace appropriate pj line algorithm 
distribution studied hidden markov model hmm parameters 
algorithm extension hit probability computation algorithm introduced compute single hit probability random region hmm distribution 
giving details notice similar method extend algorithm dp algorithm dp hits compute multiple seed hit probability hmm distribution 
straightforwardly implemented algorithm dp java program 
pentium iv ghz pc took seconds compute hit probability set weight seeds length random region length 
reduced seconds weight changed li showing running time algorithm largely depends maximum number zeros seed 
reducing number approximately half running time 
finding seed set greedily enumerating possible sets evaluate algorithm dp section clearly feasible exponential number possible sets 
show construct set seeds greedy fashion 
compute seed maximizes hit probability 
fixing compute second seed maximize hit probability 
continue manner desired number seeds desired hit probability reached 
greedy seed set may optimize combined hit probability sense greedy seed set desirable optimal may want single seed comparison impression decide try seed order find alignments missed 
turns algorithm dp efficient compute practical set weight seeds greedily took cpu days pentium iv ghz pc compute set weight seeds longer 
random region length similarity seeds 
note optimization done general assumption length similarity regions homology regions depend specific database query sequence 
consequently computation conducted development phase homology search program cpu days acceptable 
take longer time want compute set slightly longer seeds 
case propose different approach 
suppose computed set seeds greedy candidate set st seed 
hit probability estimated random region samples 
theorem accuracy estimate goes computing time 
strategy compute st seed set candidate seeds reasonably large number 
estimate hit probability random sample regions remove worst performing half seeds increase 
process repeated seed left heuristic computed set weight seeds longer 
seeds 
clearly greedy algorithm heuristic compute seeds compute seed set distributions 
example homology search coding regions distribution compute set seeds 
preserves similarity focussed recognizing bases codon conserved third 
sections refer seeds optimized length random regions similarity general purpose seeds refer seeds optimized length regions distribution coding region seeds 
performance seeds patternhunter spaced seeds facilitate ways increase sensitivity homology searches increasing number seeds reducing weight single seed 
increase running time random hits generated 
compare performances ways 
patternhunter ii sensitivity similarity recall similarity percentage identities homology region sensitivity probability having hit region 
low high solid curves hit probabilities weight general purpose seeds respectively 
dashed curves hit probabilities single optimal weight seeds respectively 
compares hit probabilities multiple weight seeds single weight seed 
random region length similarity level hit probabilities different seed configurations computed algorithm dp 
see sensitivity approximately equally improved doubling number seeds 
high similarity levels doubling number seeds achieves better sensitivity reducing weight single seed 
observed similar phenomena weight general purpose seeds 
weight seeds :10.1.1.1.2393:10.1.1.1.2393
lemma reducing weight increases expected number hits factor alphabet size dna homology search :10.1.1.147.8001
doubling number seeds increases expected number hits factor 
conclude multiple seeds preferred way gain sensitivity homology search 
tells similarity level weight seeds achieve near hit probability length random region 
longer regions hit probabilities higher 
patternhunter ii design patternhunter ii follows design original patternhunter :10.1.1.147.8001:10.1.1.147.8001:10.1.1.147.8001
weight length seed hashtable built subject sequences 
length substring query sequences hashtable provides way efficiently retrieve hits subject sequences 
gapped extension performed hits find local alignments 
hit mode gapped extension performed nearby hits diagonal 
major change patternhunter ii multiple seeds 
accordingly hashtable built seeds 
substring query sequences hits generated hashtables gapped extensions 
hit mode nearby hits different hashtables 
specified performance tests patternhunter ii uses hit mode 
hashtable patternhunter consists entry table entries linked list array elements total size subject sequences 
entries elements represented bit integers 
seeds patternhunter ii hashtables occupy nk bytes 
feasible medium size homology search hashtables mbyte memory 
large memory requirements exceed capacity desktop computer 
li case patternhunter ii divides large subject sequences smaller segments smaller segments searched turn 
possibly breaks alignment parts division boundary 
alignment usually shorter segment chance breaking alignment low 
patternhunter mechanism extend alignment division boundary tries divide long dna sequence regions long series letter ns letters determined dna sequencing 
methods minimize risk losing alignments 
input size memory division subject sequence decided patternhunter ii transparent users 
patternhunter ii performance conducted sensitivity benchmark patternhunter comparing performance blast smith waterman algorithm 
smith waterman implementation ssearch subprogram fasta package 
complete fasta package downloadable ftp ftp virginia edu pub fasta 
dna sequences sets human mouse est sequences downloaded ncbi ftp site ftp ftp ncbi nlm nih gov blast db fasta 
month est human month est mouse files site contain new revised human mouse est sequences released days respectively 
downloaded files released april 
mouse est sequences human est sequences files 
due fact long sequences identical letters especially long sequences ts smith waterman algorithm generates junk alignments sequences 
avoid trivial repeat masking sequences repetitive letters letter ns 
ensure fair comparison patternhunter blast ssearch fed masked data 
program uses score scheme equivalent match mismatch 
local alignments scores recorded taken account 
took cpu days ssearch program align mouse est sequences human est sequences 
pairs ests contain local alignment score equal higher recorded 
pair ests local alignments highest score considered 
total pairs maximum local alignment score 
benchmark data sets computation results www com ph benchmark html 
ran patternhunter ii blastn compare est files checked pairs ssearch 
patternhunter blast tries compute optimal alignments homologies ssearch finds local alignment score pair ests regard pair patternhunter ii blast finds local alignment score pair ests 
suppose smith waterman finds pairs ests local alignment score pairs program alignment score smith waterman lossless ratio considered sensitivity program alignment score program lossless ratio equal 
figures compare sensitivity blastn different configurations patternhunter ii 
sensitivity versus alignment score curves blastn patternhunter ii coding region weight seeds displayed 
compares blastn patternhunter ii coding general purpose seeds 
order display better focuses region alignment score sensitivity exceeds 
table lists running time different programs weight seeds blastn patternhunter pentium iv ghz linux pc patternhunter ii sensitivity alignment score dashed curve sensitivity blastn seed weight 
low high solid curves sensitivity patternhunter ii weight coding region seeds respectively 
sensitivity alignment score thick dashed curve sensitivity blastn seed weight 
low high solid curves sensitivity patternhunter ii weight coding region seeds thin dashed curves sensitivity patternhunter ii weight general purpose seeds respectively 
ssearch blastn patternhunter ii seeds days general coding benchmark demonstrates patternhunter ii achieve higher sensitivity blastn faster speeds 
furthermore patternhunter ii coding region seeds runs speed blastn times faster ssearch sensitivity approaching 
table confirms result coding region seeds run faster irrelevant hits sensitive general purpose seeds 
surprise est sequences coding regions 
comparison seeds authors designed seeds 
section briefly compare seeds seeds patternhunter ii 
system design multiple spaced seeds 
provided weight noncoding seeds patternhunter ii general purpose weight seeds li sensitivity alignment score ph ii weight coding region seeds 
ph ii weight coding region seed 
seed 
seed 
fair comparison 
est data result showed seeds find fewer significant alignments weight seeds patternhunter ii main program 
seeds insignificant alignments scores seconds patternhunter ii seeds alignments scores greater seconds 
fifth order markov model model coding regions authors system design weight coding region seed 
weight coding region seed sp designed manually modifying seed compared performance sp ph ii weight coding region seed ph ii 
result showed seed designed system noticeably worse seeds performances ph ii seed manually designed sp seed identical 
illustrating comparison :10.1.1.1.2393:10.1.1.1.2393
brown proposed hmm model spaced seeds demonstrated clear advantage coding regions 
est sequence data provides comparison ph ii weight coding regions seeds ph ii single weight coding region seed seed seed 
observe single weight seed sensitive weight seeds 
weight seed runs slower seconds data weight ph ii seeds seconds 
intuitively weight greater seed expected quarter hits fourfold speedup 
give twofold speedup having better sensitivity shown 
query subject sequences large overheads diminish gain 
ph ii coding region seeds computed model distribution pattern 
tried compute set seeds model provided 
est benchmark data results showed multiple seeds computed seeds computed model perform approximately 
illustrates performances :10.1.1.1.2393:10.1.1.1.2393
comparisons reveal sophisticated model coding regions provided remarkable improvement seed performance improvement necessarily carry data sets especially species 
specifically weight seed slightly worse weight coding region seed computed simpler model intuitive parameters 
seed obtained limiting number verified optimal model number limited 
patternhunter ii complexity finding optimal spaced seeds authors proposed heuristic exponential time algorithms general seed selection problem find optimal spaced seeds maximum number target regions hit seed 
seemingly simpler problem compute hit probability seeds 
section show np hard problems 
gives confidence greedy algorithm section exponential time algorithm section best 
give provably approximation algorithm compute hit probability seeds 
particular letting maximum number seed seed length true 

log algorithm section computes hit probability seeds polynomial time problem np hard section 
constant number optimal seeds computed polynomial time enumerating seed combinations item compute probabilities selecting optimal seed np hard section 
greedy algorithm section finding seeds approximates optimal solution ratio polynomial time implied greedy bound maximum coverage problem problem approximated section 
ratio space limit omit proofs section 
proofs :10.1.1.1.2393:10.1.1.1.2393
computing hit probability multiple seeds np hard theorem computing hit probability seeds uniformly distributed random region np hard 
hardness finding optimal seed set np hardness hit probability computation theorem imply hardness finding optimal seed set 
section prove finding optimal seed set hard approximate random homologous regions uniformly distributed 
specifically prove approximating problem hard region specific optimal seeds 
rm homologous regions length find seeds weight length hitting maximum number homologous regions 
theorem region specific optimal seeds problem approximated ratio 
corollary removing length constraints seeds preserves np hardness region specific optimal seed set problem 
hardness finding optimal seed theorem problem finding seed weight length hits set homology regions np hard 
consequently problem finding optimal seed weight length hits maximum number set homology regions np hard 
li ptas computing hit probability section dynamic programming algorithm accurate hit probability computation 
dynamic programming algorithm runs time exponential cases infeasible 
section ptas polynomial time approximation scheme compute hit probability approximately 
noteworthy section assumption distribution random regions 
algorithm simple randomly sampling homologous regions hit frequency seed set regions approximation hit probability 
sufficient large computation sufficient accurate theorem set seeds 
random region certain distribution 
rm independent samples random region 
probability hits samples hit pr consequently probability greater 
log exp 
homology search time consuming computational task 
due small query database sizes protein protein searches bottleneck dna dna blastn searches translated searches exhaustive smith waterman computation 
optimized spaced seeds new algorithms patternhunter speeds blastn times depending data size sensitivity 
optimized multiple spaced seeds patternhunter ii times faster smith waterman approximately sensitivity dna sequence search 
currently investigating new multiple optimal seed schemes approximate smith waterman sensitivity protein protein searches speed 
developing translated patternhunter aims speed 
altschul gish miller myers lipman basic local alignment search tool mol 
biol 
brown optimal spaced seeds hidden markov models application homologous coding regions proc 
th combinatorial pattern matching cmp lncs 
brown vector seeds extension spaced seeds allows substantial improvements sensitivity specificity 
proc 
rd international workshop algorithms bioinformatics lncs 
buhler efficient large scale sequence comparison locality sensitive hashing bioinformatics 
buhler sun designing seeds similarity search genomic dna proc 
th annual international conference research computational molecular biology re comb 
califano rigoutsos flash fast look algorithm string homology technical report ibm watson research center 
choi zhang sensitive analysis efficient method identifying optimal spaced seeds journal computer system sciences press 
patternhunter ii delcher kasif peterson white salzberg alignment genomes nucleic acids res 
feige threshold ln approximating set cover journal acm 
garey johnson guide theory np completeness freeman 
gish wu blast blast wustl edu 
hochbaum approximation algorithms np hard problems pws publishing 
huang miller time efficient linear space local similarity algorithm adv 
appl 
math 
human genome sequencing consortium initial sequencing analysis human genome nature 
li ma tromp spaced seeds similarity search discrete applied math press 
kent blast alignment tool genome research 
li ma wang closest string substring problems journal acm 
li ma tromp patternhunter ii highly sensitive fast homology search bioinformatics computational biology press :10.1.1.1.2393
lipman pearson rapid sensitive protein similarity searches science 
ma tromp li patternhunter faster sensitive homology search bioinformatics :10.1.1.147.8001
motwani raghavan randomized algorithms cambridge university press 
mouse genome sequencing consortium initial sequencing comparative analysis mouse genome nature 
national center biological information growth genbank www ncbi nlm nih 
gov genbank html 
pearson searching protein sequence libraries comparison sensitivity selectivity smith waterman fasta algorithms genomics 
pevzner waterman multiple filtration approximate pattern matching algorithmica 
smith waterman identification common molecular subsequences mol 
biol 
states wustl edu software 
sequence human genome science 
zhang schwartz wagner miller greedy algorithm aligning dna sequences comp 
biol 
