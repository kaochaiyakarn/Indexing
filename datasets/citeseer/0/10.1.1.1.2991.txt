fast tcp motivation architecture algorithms performance describe fast tcp new tcp congestion control algorithm high speed long latency networks design implementation 
highlight approach taken fast tcp address difficulties packet flow levels current tcp implementation large windows 
describe architecture characterize equilibrium stability properties fast tcp 
experimental results comparing linux prototype tcp reno hstcp stcp terms throughput fairness stability responsiveness 
fast tcp aims rapidly stabilize high speed long latency networks steady efficient fair operating points dynamic sharing environments preliminary results promising 
congestion control distributed algorithm share network resources competing users 
important situations availability resources set competing users vary time unpredictably efficient sharing desired 
constraints unpredictable supply demand efficient operation necessarily lead feedback control preferred approach traffic sources dynamically adapt rates congestion paths 
internet performed transmission control protocol tcp source destination computers involved data transfers 
congestion control algorithm current tcp refer reno developed gone enhancements 
performed remarkably generally believed prevented severe congestion internet scaled orders magnitude size speed load connectivity 
known bandwidth delay product continues grow tcp reno eventually performance bottleneck 
difficulties contribute poor performance tcp reno networks large bandwidth delay products packet level linear increase packet round trip time rtt slow multiplicative decrease loss event drastic 
flow level maintaining large average congestion windows requires extremely small equilibrium loss probability 
packet level oscillation unavoidable tcp uses binary congestion signal packet loss 
flow level dynamics unstable leading severe oscillations reduced accurate estimation packet loss probability stable design flow dynamics 
explain difficulties detail section ii 
described hstcp stcp loss solutions problems 
propose delay solution 
see proposals 
cheng jin david wei steven low engineering applied science caltech netlab caltech edu section iii motivate delay approach 
congestion control proposed 
advantage loss approach small low speed decisive high speed argue 
pointed delay poor predictor packet loss delay algorithm augment basic aimd additive increase multiplicative decrease algorithm tcp reno wrong approach address difficulties large windows 
new approach fully exploits delay congestion measure augmented loss information needed 
fast tcp uses approach 
queueing delay congestion measure advantages 
queueing delay accurately estimated loss probability packet losses networks large bandwidth delay product rare events probability order smaller loss samples provide coarser information queueing delay samples 
measurements delay noisy just loss probability 
measurement packet loss packet lost provides bit information filtering noise measurement queueing delay provides multi bit information 
easier equation implementation stabilize network steady state target fairness high utilization 
second dynamics queueing delay right scaling respect network capacity 
helps maintain stability network scales capacity 
section iii explain exploit advantages address difficulties tcp reno 
section iv lay architecture implement design 
discussion context fast tcp architecture serve general framework guide design congestion control mechanisms necessarily limited tcp high speed networks 
main components architecture designed separately upgraded asynchronously 
conventional design fast tcp window burstiness control algorithms regardless source normal state loss recovery state 
leads clean separation components functionality code structure 
overview algorithms implemented current prototype 
section mathematical model window control algorithm 
prove fast tcp equilibrium properties tcp vegas 
particular penalize flows large propagation delays achieves weighted proportional fairness 
special case single bottleneck link heterogeneous flows prove window control algorithm fast globally stable absence ieee ieee infocom feedback delay 
starting initial state network converges exponentially unique equilibrium 
section vi preliminary experimental results illustrate throughput fairness stability responsiveness fast tcp presence delay heterogeneous dynamic environments flows different delays join depart asynchronously 
compare performance fast tcp reno hstcp highspeed tcp stcp scalable tcp default parameters 
experiments fast tcp achieved best performance criterion hstcp stcp improved throughput responsiveness reno cost fairness stability 
conclude section vii 
ii 
problems large windows congestion control algorithm designed levels 
flow level macroscopic design aims achieve high utilization low queueing delay loss fairness stability 
packet level design implements flow level goals constraints imposed control 
historically tcp reno packet level implementation introduced 
resulting flow level properties fairness stability relationship equilibrium window loss probability understood afterthought 
contrast packet level designs hstcp stcp fast tcp explicitly guided goals 
elaborate section difficulties tcp reno listed section important distinguish packet level flow level difficulties addressed different means 
packet flow level modeling congestion avoidance algorithm tcp reno variants form aimd 
pseudo code window adjustment ack loss packet level model induces certain flow level properties throughput fairness stability 
properties understood flow level model aimd algorithm 
window wi source increases packet rtt decreases unit time xi pi wi packets xi wi ti pkts sec ti round trip time pi delayed toend loss probability period wi peak pi packets pi loss probability 
roughly pi small 
model assumes window halved packet loss 
modified model case window halved rtt 
qualitatively change discussion 
window size gives average window wi 
flow level model aimd wi ti xi pi wi setting wi yields known formula tcp reno discovered relates loss probability window size equilibrium summary describe flow level dynamics equilibrium respectively tcp reno 
turns different variants tcp dynamic structure flow level see 
defining wi ti ti ui wi ti noting wi express wi pi ui shorthand wi ti ui ui wi ti 
equation describe known tcp variants different variants differ choices gain function marginal utility function ui congestion measure pi loss probability queueing delay 
illustrate equilibrium dynamics problems tcp reno packet flow levels product increases 
equilibrium problem equilibrium problem flow level expressed loss probability exceedingly small sustain large window size making equilibrium difficult maintain practice bandwidth delay product increases 
equilibrium flow level notion problem manifests packet level source increments window slowly decrements drastically 
peak window packet corresponding average window packets necessary sustain gbps byte packets rtt ms takes rtts minutes recover single packet loss 
illustrated size window increment rtt decrement loss wi respectively plotted functions wi 
increment function reno hstcp indistinguishable axis 
gap increment decrement functions grows rapidly wi increases 
average increment decrement equal equilibrium required loss probability exceedingly small large wi 
picture simply visualization 
address difficulties tcp reno large window sizes hstcp stcp increase aggressively decrease gently discussed 
ieee ieee infocom window adjustment pkts rtt dec loss reno tcp hstcp window pkts reno hstcp stcp window adjustment pkts distance equilibrium fast fig 

packet level implementation window increment rtt decrement loss functions current window 
increment functions tcp reno hstcp identical scale 
window update function distance equilibrium fast 
dynamic problems causes oscillatory behavior tcp reno lie design packet flow levels 
packet level choice binary congestion signal necessarily leads oscillation parameter setting reno worsens situation bandwidth delay product increases 
flow level system dynamics unstable large bandwidth delay products 
addressed different means elaborate 
illustrates operating points chosen various tcp congestion control algorithms single link single flow scenario 
shows queueing delay function window size 
queueing delay starts build point window equals bandwidth propagation delay product point queue overflows 
reno oscillates point peak window size goes point minimum window steady state half peak window 
basis rule thumb bottleneck buffer bandwidth delay product minimum window point buffer empty steady state operation yielding full utilization 
loss approach full utilization achievable comes cost severe oscillations potentially large queueing delay 
dual scheme proposes oscillate point midpoint buffer half full 
dual increases congestion window linearly packet rtt long queueing delay half maximum value decreases multiplicatively factor queueing delay exceeds half maximum value 
scheme card congestion avoidance round trip delay proposes oscillate point aimd parameter dual ratio roundtrip delay delay gradient maximize power 
schemes congestion signal binary signal congestion window oscillate 
congestion window stabilized multi bit feedback 
approach taken equation algorithm congestion window adjusted estimated loss probability attempt stabilize target value 
operating point near overflowing point 
approach eliminates oscillation due packet level aimd difficulties remain flow level 
equation control requires explicit estimation loss probability 
difficult loss probability small 
second loss probability perfectly estimated reno flow dynamics described equation leads feedback system unstable feedback delay increases strikingly network capacity increases 
instability flow level lead severe oscillations reduced stabilizing flow level dynamics 
return points section iii 
iii 
delay approach section motivate delay approach address difficulties large window sizes 
motivation improved loss protocols hstcp stcp proposed replacements tcp reno showed don address problems section tcp reno 
illustrate plot increment decrement functions hstcp stcp alongside tcp reno 
protocols upper bound tcp reno increases aggressively decreases drastically gap increment decrement functions narrowed 
means equilibrium hstcp stcp tolerate larger loss probabilities tcp reno achieving larger equilibrium windows 
solves dynamics problems packet flow levels 
show congestion windows reno hstcp stcp evolve wi pi ui wi ti ui ui wi ti 
dynamics fast tcp takes form see 
differ choice gain function wi ti marginal utility function ui wi ti congestion measure pi 
flow level design decisions wi ti choice gain function determines dynamic properties stability responsiveness affect equilibrium properties 
ieee ieee infocom queue delay delay loss binary signal oscillatory window queue delay delay loss multi bit signal stabilizable fig 

operating points tcp algorithms reno hstcp stcp dual card tfrc vegas fast 
ui wi ti choice marginal utility function ui mainly determines equilibrium properties equilibrium rate allocation fairness 
pi absence explicit feedback choice congestion measure pi limited loss probability queueing delay 
dynamics pi determined links 
design choices reno hstcp stcp fast 
wi ti ui wi ti pi reno ti loss probability hstcp wi ti loss probability stcp ti wi loss probability fast xi queueing delay table common dynamic structure wi source window size ti round trip time pi congestion measure xi wi ti wi protocol parameters 
choices produce equilibrium characterizations shown table ii 
reno xi ti hstcp xi ti stcp xi ti pi fast xi pi table ii common equilibrium structure 
common model interpreted follows goal flow level equalize marginal utility ui measure congestion pi 
interpretation immediately suggests equation implementation direction size window adjustment wi difference ratio pi ui target 
approach taken reno hstcp stcp approach eliminates packet level oscillations due binary nature congestion signal 
requires explicit estimation endto congestion measure pi 
explicit feedback pi loss probability tfrc queueing delay tcp vegas fast tcp 
queueing delay accurately debatable tcp vegas equation size window adjustment depend queueing delay 
important low speed critical high speed 
window estimated loss probability packet losses networks large bandwidth delay products rare events probability order smaller loss samples provide coarser information queueing delay samples 
measurement packet loss packet lost provides bit information filtering noise measurement queueing delay provides multi bit information 
allows implementation stabilize network steady state target fairness high utilization 
flow level dynamics feedback system stable presence delay network capacity increases 
queueing delay advantage loss probability congestion measure dynamics queueing delay right scaling respect network capacity 
helps maintain stability network capacity grows 
implementation strategy delay approach proper flow packet level designs address difficulties reno large windows 
explicitly estimating far current state pi ui equilibrium value scheme drive system rapidly fair stable manner equilibrium 
window adjustment small current state close equilibrium large independent equilibrium illustrated 
stark contrast approach taken reno hstcp stcp window adjustment depends just current window size independent current state respect target compare figures 
equation scheme approach avoids problem slow increase drastic decrease reno network scales 
second choosing multi bit congestion measure approach eliminates packet level oscillation due binary feedback avoiding reno third problem 
third queueing delay congestion measure pi allows network stabilize region overflowing point point buffer size sufficiently large 
stabilization operating point eliminates large queueing delay unnecessary packet loss 
importantly room buffering mice traffic 
avoid second problem reno required equilibrium congestion measure loss probability reno queueing delay small practically ieee ieee infocom estimate algorithm adapt parameter capacity maintain small sufficient queueing delay 
avoid fourth problem reno window control algorithm stable addition fair efficient flow level 
queueing delay congestion measure facilitates design queueing delay naturally scales capacity 
design tcp congestion control algorithm conceptually divided levels flow level goal design class function pairs ui wi ti wi ti feedback system described link dynamics pi interconnection equilibrium fair efficient equilibrium stable presence feedback delay 
packet level design deal issues ignored flow level model modeling assumptions violated practice order achieve flow level goals 
issues include burstiness control loss recovery parameter estimation 
implementation proceeds steps determine various system components translate flow level design packet level algorithms implement packet level algorithms specific operating system 
actual process iterates intimately flow packet level designs theory implementation experiments implementation steps 
emerging theory large scale networks toend control see surveys forms foundation flow level design 
theory plays important role providing framework understand issues clarify ideas suggest directions leading robust high performance implementation 
lay architecture fast tcp 
iv 
architecture algorithms separate congestion control mechanism tcp components 
components functionally independent designed separately upgraded asynchronously 
section focus parts implemented current prototype see 
data control window control estimation burstiness control tcp protocol processing fig 

fast tcp architecture 
data control component determines packets transmit window control determines packets transmit burstiness control determines transmit packets 
decisions information provided estimation component 
window control regulates packet transmission rtt timescale burstiness control works smaller timescale 
subsections provide overview estimation window control algorithms implemented current prototype 
initial prototype included features discussed demonstrated november supercomputing conference experimental results reported 
estimation component provides estimations various input parameters decision making components 
computes pieces feedback information data packet sent 
positive acknowledgment received calculates rtt corresponding data packet updates average queueing delay minimum rtt 
negative acknowledgment signaled duplicate acknowledgments timeout received generates loss indication data packet components 
estimation component generates multi bit queueing delay sample bit loss loss sample data packet 
queueing delay smoothed moving average weight min wi depends window wi time asfollows th rtt sample ti updates average rtt tk tk ti tk time th rtt sample received 
di minimum rtt observed far average queueing delay estimated qi di weight usually smaller weight tcp reno 
average rtt attempts track average congestion window 
rtt entire window worth rtt samples received packet acknowledged 
delayed ack number queueing delay samples reduced adjusted accordingly 
window control window control component determines congestion window congestion information queueing delay packet loss provided estimation component 
key decision design departs traditional tcp design algorithm congestion window computation independent state sender 
example tcp reno rate halving congestion window increased packet rtt loss increased duplicate ack algorithm window computation regardless sender state 
congestion control mechanism reacts queueing delay packet loss 
normal network conditions fast periodically updates congestion window average rtt average queueing delay provided estimation component min basertt rtt basertt minimum rtt observed far average queueing delay 
current implementation congestion window changes rtts updated rtt frozen ieee ieee infocom 
update spread rtt way congestion window doubled rtt 
current prototype choose function constant times 
produces linear convergence zero 
alternatively constant nonzero proportional window aw zero 
case zero fast performs multiplicative increase grows exponentially rate neighborhood 
switches constant see theorem window converges exponentially equilibrium different rate depends 
constant number packets flow attempts maintain network buffer equilibrium similar tcp vegas 
congestion control function loss recovery currently disabled feature ambiguities associated retransmitted packets 
currently packet loss detected fast halves window enters loss recovery 
goal back packet transmission quickly severe congestion occurs order bring system back regime reliable rtt measurements available window adjustment effectively 
source react delay exits loss recovery 
packet level implementation important maintain abstraction implementation code evolves 
abstraction describe high level operations component performs external inputs serve road map tcp implementations improvements existing implementation 
non trivial change required update abstraction ensure packet level code built sound underlying foundation 
tcp event protocol control actions triggered occurrence various events 
need translate flow level algorithms event packet level algorithms 
types events fast tcp reacts reception acknowledgment transmission packet rtt packet loss 
acknowledgment received estimation component computes average queueing delay burstiness control component determines packets injected network 
packet transmitted estimation component records time stamp burstiness control component updates corresponding data structures bookkeeping 
constant time interval check arrival acknowledgment window control calculates new window size 
rtt burstiness reduction calculates target throughput window rtt measurements rtt 
window pacing schedule break large increment congestion window experiments section vi linear increase 
linux tcp implementation congestion window frequently reduced heavy losses 
order ensure reasonable recovery time impose minimum window packets loss recovery connections large windows 
interim measures improved fast tcp releases 
flow level algorithm component design packet level algorithm ack rtt loss os specific implementation function function 
fig 

flow level design implementation 
smaller increments time 
loss recovery congestion window continually updated congestion signals network 
detection packet loss event sender determines retransmit unacknowledged packet right away hold appropriate time 
presents approach turn high level design congestion control algorithm implementation 
algorithm designed flow level analyzed ensure meets high level objectives fairness stability 
determine components necessary implement congestion control 
flow level algorithm translated packet level algorithm consists set event tasks 
eventbased tasks independent specific tcp operating system implementation detailed understanding tasks enables implement fast operating system protocol stack 
equilibrium stability window control algorithm section model window control algorithm 
show equilibrium vectors source windows link queueing delays unique solutions pair optimization problems 
completely characterizes network equilibrium properties throughput fairness delay 
analyze stability window control algorithm 
prove single link heterogeneous sources window control algorithm globally stable assuming zero feedback delay converges exponentially unique equilibrium 
extensive experiments section vi illustrate stability presence feedback delay 
network consists set resources finite capacities cl transmission links processing units memory refer general links model 
network shared set unicast flows identified sources 
di denote round trip propagation delay source routing matrix rli source uses link 
pl denote queueing delay link time roundtrip queueing delay vector notation rt 
round trip time source ti di qi 
source adapts wi periodically wi wi qi di qi wi note rewritten wi qi constant wi wi xi qi tcp vegas updates window wi wi ti sgn xi qi sgn ifz ifz 
fast thought high speed version vegas 
ieee ieee infocom time wi qi defined qi wi qi key departure model literature assume source send rate defined xi wi ti exceed throughput receives 
justified self clocking round trip time congestion window increased packet transmission clocked rate throughput flow receives 
see detailed justification validation experiments 
consequence assumption link queueing delay vector determined implicitly instantaneous window size static manner wi wi link queueing delays pl pl wi cl pl rli di qi cl pl qi 
equilibrium values windows delays network defined characterized follows 
consider utility maximization problem max log xi rx dual problem min log theorem suppose full row rank 
unique equilibrium point network defined exists wi di unique maximizer unique minimizer 
implies particular equilibrium rate weighted proportionally fair 
theorem implies fast tcp equilibrium properties tcp vegas 
throughput xi qi particular penalize sources large propagation delays di 
relation implies equilibrium source maintains packets buffers path 
total amount buffering network packets order reach equilibrium 
turn stability algorithm 
global stability general network presence feedback delay open problem see stability analysis single link single source case 
state art results prove global stability ignoring feedback delay local stability presence feedback delay 
stability result restricted single link absence delay 
theorem suppose single link capacity network defined globally stable converges geometrically unique equilibrium 
basic idea proof show iteration defined contraction mapping 
converges geometrically unique equilibrium 
properties follow proof theorem 
corollary starting initial point link fully utilized equality holds finite time 
queue length lower upper bounded finite amount time 
vi 
performance conducted preliminary experiments dummynet testbed comparing performance various new tcp algorithms linux tcp implementation 
important evaluate static environments dynamic environments flows come go terms throughput queue behavior network 
study compare performance tcp connections protocol sharing single bottleneck link 
summary fast tcp achieved best performance evaluation criteria throughput fairness responsiveness stability 
hstcp stcp improved throughput responsiveness linux tcp showed fairness problems oscillations higher frequencies larger magnitudes 
subsections describe detail experimental setup evaluation criteria results 
testbed kernel instrumentation constructed testbed sender receiver running linux emulated router running freebsd 
testbed machine dual xeon ghz gb main memory dual board intel pro gigabit ethernet interfaces 
tested machines ensure able achieve peak throughput mbps standard linux tcp protocol iperf 
sender monitor ms ms ms ms queue monitor iperf iperf sender router receiver fig 

testbed experimental setup 
shows setup testbed 
testbed router supports paths various delays single bottleneck capacity fixed buffer size 
monitoring capability sender router 
receiver runs different tcp traffic sinks different port numbers connections different rtts 
set run different experiments sender automatic script generator start multiple iperf sessions emulate multiple tcp connections 
testbed router ran dummynet freebsd 
configured dummynet create paths pipes different delays ms different destination port numbers receiving machine 
created pipe emulate bottleneck capacity mbps buffer size packets shared delay pipes 
due need emulate high speed bottleneck capacity increased scheduling granularity dummynet events 
recompiled freebsd kernel task scheduler ran ms increased size ip layer interrupt ieee ieee infocom queue accommodate large bursts packets 
instrumented sender dummynet router capture relevant information protocol evaluation 
connection sending machine kernel monitor captured congestion window observed basertt observed queueing delay 
dummynet router kernel monitor captured throughput dummynet bottleneck number lost packets average queue size seconds 
retrieved measurement data completion experiment order avoid disk may interfered experiment 
tested tcp implementations fast hstcp stcp reno linux implementation 
fast tcp linux kernel rest tcp protocols linux kernel 
ran tests observe appreciable difference plain linux kernels tcp source codes kernels nearly identical 
linux tcp implementation includes latest rfcs new reno sack sack tcp high performance extensions 
versions hstcp 
results implementation tests show implementation comparable performance 
experiments bottleneck capacity mbps roughly packets ms maximum buffer size packets 
experimental results 
look cases detail comparing throughput behavior seen source queue behavior inside network examining trajectories throughputs windows instantaneous queue cumulative losses link utilization 
summarize performance diverse set experiments terms quantitative metrics defined throughput fairness stability responsiveness 
case study static scenario experimental results aggregate throughput simple static environment experiment tcp flows propagation delay started terminated times 
set tests included experiments different pairing propagation delays ms number identical sources 
ran test suite tcp protocols 
constructed plot protocol axis axis number sources propagation delay respectively 
axis aggregate throughput 
protocols performed number flows large propagation delay small window size small 
performance fast tcp remained consistent parameters changed 
tcp reno hstcp stcp varying degrees performance degradation window size increased tcp reno showing significant degradation 
set experiments involving static environment identical flows test fairness stability responsiveness protocols 
take close look properties dynamic scenario network equilibrium changes flows come go 
case study dynamic scenario dynamic test number flows small throughput flow window size fast throughput kbps scalable tcp throughput kbps delay ms delay ms fast hstcp flow number throughput kbps delay ms stcp reno flow number delay ms fig 

static scenario aggregate throughput 
large 
tcp flows propagation delays ms started terminated different times illustrated figures 
dynamic experiment generated sets figures sender monitor queue monitor 
sender monitor obtained trajectories individual connection throughput kbps window size packets time 
shown 
new flows joined old flows left fast tcp converged new equilibrium rate allocation rapidly stably 
reno throughput relatively smooth slow linear increase packet losses 
link utilization low experiment took minutes flow reclaim spare capacity due departure flow 
hstcp stcp attempt respond quickly went severe oscillation 
queue monitor obtained trajectories average queue size packets number cumulative packet losses packets utilization bottleneck link packets ms shown top bottom 
queue fast tcp quite small experiment due small number flows 
hstcp stcp exhibited strong oscillations filled buffer 
link utilizations fast tcp reno quite steady hstcp stcp showed fluctuations 
throughput trajectories protocol calculate jain fairness index see section vi definition rate allocations time interval contains flow see 
fairness indices shown table iii 
fast tcp obtained best fairness flow number flow number time sources fast hstcp stcp reno table iii dynamic scenario intra protocol fairness 
close followed hstcp reno stcp 
confirms fast tcp penalize flows large propagation delays 
hstcp stcp reno try equalize congestion windows competing connections equalizing rates achieved shown 
unfairness especially severe case stcp due mimd explained 
fast tcp source tries maintain number packets queue equilibrium ieee ieee infocom linux tcp throughput kbps ms ms ms dynamic scenario flows ms ms ms ms ms ms ms dynamic scenario ii flows fig 

dynamic scenario colored block represents connections certain propagation delay 
left right edges block represent starting times respectively flow 
cwnd pkt avg pkt fast hstcp stcp reno sec throughput kbps sec cwnd pkt sec throughput kbps sec cwnd pkt sec throughput kbps sec fig 

dynamic scenario throughput cwnd trajectories 
cwnd pkt sec throughput kbps sec fast hstcp stcp reno cumulative loss pkt throughput pkt ms sec avg pkt cumulative loss pkt throughput pkt ms sec avg pkt cumulative loss pkt throughput pkt ms sec fig 

dynamic scenario dummynet queue sizes losses link utilization 
theory competing source get equal share bottleneck bandwidth 
fast tcp achieved best fairness index observe expected equal sharing bandwidth see 
connections longer rtts consistently observed higher queueing delays shorter rtts 
example connection path ms saw average queueing delay ms connection path ms saw average queueing delay ms caused connection longer rtts maintain fewer packets queue equilibrium getting smaller share bandwidth 
uncover source problem early conjecture congestion window size large harder break bursts packets 
bursty traffic arriving queue packet see delay includes transmission times preceding packets burst 
packets spaced smoothly packet seen smaller queueing delay queue 
case study dynamic scenario ii experiment similar dynamic scenario larger number flows different propagation delays joined departed schedule 
qualitative behavior throughput fairness stability responsiveness protocols similar scenario fact amplified number flows increases 
specifically number competing sources increases network stability worse loss protocols 
shown figures oscillations avg pkt cumulative loss pkt throughput pkt ms sec congestion windows queue size severe loss base protocols 
packet loss severe 
performance fast tcp degrade significant way 
connections sharing link achieved similar rates 
reasonably stable queue times little packet loss high link utilization 
intra protocol fairness shown table iv little change fast tcp 
time sources fast hstcp stcp reno table iv fairness various protocols experiment ii 
evaluation conducted experiments different delays number flows arrival departure patterns 
experiments bottleneck link capacity mbps buffer size packets 
subsection summary protocol performance terms quantitative measures throughput fairness stability responsiveness 
ieee ieee infocom cwnd pkt avg pkt throughput kbps fast hstcp stcp reno sec sec cwnd pkt throughput kbps sec sec cwnd pkt throughput kbps sec sec fig 

dynamic scenario ii throughput cwnd trajectories 
cwnd pkt throughput kbps sec sec fast hstcp stcp reno sec cumulative loss pkt throughput pkt ms avg pkt sec cumulative loss pkt throughput pkt ms avg pkt sec fig 

dynamic scenario ii dummynet queue sizes losses link utilization 
output quantitative evaluation 
session experiments produced second averages throughput 
data rate goodput applications iperf receives slightly bottleneck bandwidth due ip ethernet packet headers 
xi average throughput flow period tests involved dynamic scenarios flows joined departed 
definitions suppose composition flows changes period remains fixed period changes period maximum length interval equilibrium holds 
suppose active flows interval indexed xi xi average throughput flow interval 
define performance metrics interval throughput measurements 
throughput average aggregate throughput interval defined intra protocol fairness jain fairness index interval defined xi ideal equal sharing 
stability stability index flow sample standard deviation normalized average throughput si xi xi xi xi mentioned throughput goodput seen application layer tcp layer 
cumulative loss pkt throughput pkt ms avg pkt sec cumulative loss pkt throughput pkt ms smaller stability index oscillation source experiences 
stability index interval average active sources si responsiveness responsiveness index measures speed convergence network equilibrium changes flows join depart 
xi running average period xi xi xi xi average entire interval 
responsiveness index measures fast running average xi slowest source converges xi max xi xi max tcp protocol obtain set computed values evaluation criterion experiments 
plot cdf cumulative distribution function set values 
shown figures 
figures fast best performance protocols evaluation criterion 
importantly variation distributions smaller fast protocols suggesting fast fairly consistent performance test scenarios 
observe hstcp stcp achieved higher throughput improved responsiveness compared tcp reno 
stcp worse intra protocol fairness compared tcp reno hstcp achieved comparable intra protocol fairness reno see figures 
hstcp stcp showed increased oscillations compared reno natural definition responsiveness index earliest period throughput xi opposed running average xi throughput stays equilibrium value unsuitable tcp protocols stabilize equilibrium value 
define terms xi definition converges xi interval definition captures intuitive notion responsiveness xi settles periodic limit cycle 
ieee ieee infocom xi cdf cdf fast tcp highspeed tcp scalable tcp tcp reno throughput mbps fig 

evaluation throughput 
fast tcp highspeed tcp scalable tcp tcp reno stability fig 

evaluation stability 
figures oscillations worse number sources increased figures 
fast tcp achieved better responsiveness index worst case individual throughput schemes 
caution hard quantify responsiveness protocols stabilize equilibrium point periodic limit cycle unresponsiveness reno hstcp stcp measured index interpreted care 
vii 
described alternative congestion control algorithm fast tcp addresses main problems tcp reno networks high capacities large latencies 
fast tcp log utility function achieves weighted proportional fairness 
window adjustment network moves rapidly equilibrium current state far away slows approaches equilibrium 
fast tcp uses queueing delay addition packet loss congestion signal 
queueing delay provides finer measure congestion scales naturally network capacity 
experimental results linux prototype compared performance tcp reno hstcp stcp 
evaluated algorithms static environments dynamic environments flows come go terms throughput queue behavior network 
experiments hstcp stcp achieved better throughput link utilization reno congestion windows network queue lengths significant oscillations 
tcp reno produced oscillation cost lower link utilization sources departed 
fast tcp hand consistently outperforms protocols terms throughput fairness stability responsiveness 
acknowledgments gratefully acknowledge contributions fast project team collaborators cdf cdf fast tcp highspeed tcp scalable tcp tcp reno fairness fig 

evaluation fairness 
fast tcp highspeed tcp scalable tcp tcp reno responsiveness sec fig 

evaluation responsiveness index 
athttp netlab caltech edu fast particular choe cottrell doyle feng martin newman singh wang wang yip 
funded nsf ani ani caltech lee center advanced networking aro daad afosr cisco 
jacobson congestion avoidance control proceedings sigcomm acm august updated version available ftp ftp ee lbl gov papers ps mathis mahdavi floyd romanow tcp selective acknowledgment options rfc ftp ftp isi edu notes rfc txt october 
jacobson braden borman tcp extensions high performance rfc ftp ftp isi edu notes rfc txt may 
hoe improving startup behavior congestion control scheme tcp acm sigcomm august www 
acm org sigcomm sigcomm program html 
cheng jin david wei steven low case congestion control proc 
ieee computer communication workshop ccw october 
sally floyd highspeed tcp large congestion windows internet draft draft floyd tcp highspeed txt progress www 
icir org floyd hstcp html february 
tom kelly scalable tcp improving performance highspeed wide area networks submitted publication www lce eng 
cam ac uk scalable december 
lawrence brakmo larry peterson tcp vegas congestion avoidance global internet ieee journal selected areas communications vol 
pp 
october cs princeton edu papers jsac vegas ps 
feng case tcp vegas high performance computational grids proceedings th international symposium high performance distributed computing hpdc august 
feng enabling compatibility tcp reno tcp vegas ieee symposium applications internet saint january 
gerla mascolo wang tcp westwood congestion control wired wireless networks wireless networks journal vol 
pp 

wang ng gerla adaptive rate estimation provide enhanced robust transport heterogeneous networks proc 
ieee icnp 
ieee ieee infocom handley congestion control highbandwidth delay product networks proc 
acm sigcomm august 
jin liang guo ibrahim matta azer bestavros spectrum tcp friendly window congestion control algorithms ieee acm transactions networking vol 
june 
shorten analysis design congestion control synchronised communication networks proc 
th yale workshop adaptive learning systems may www hamilton doug htm 
xu rhee binary increase congestion control fast long distance networks proc 
ieee infocom 
knightly tcp lp distributed algorithm low priority data transfer proc 
ieee infocom 
cottrell tcp stacks testbed www 
slac stanford edu bw tcp eval 
raj jain delay approach congestion avoidance interconnected heterogeneous computer networks acm computer communication review vol 
pp 
oct 
wang crowcroft eliminating periodic packet losses tahoe bsd tcp congestion control algorithm acm computer communications review april 
jim martin arne nilsson rhee delay congestion avoidance tcp ieee acm trans 
networking vol 
pp 
june 
fernando john doyle steven low scalable laws stable network congestion control proceedings conference decision control december www ee ucla 
edu 
choe steven low stabilized vegas proc 
ieee infocom april netlab caltech edu 
fernando wang steven low john doyle new tcp aqm stability performance fast networks proc 
ieee infocom april www ee ucla edu 
mo jean fair window congestion control ieee acm transactions networking vol pp 
october 
steven low larry peterson wang understanding vegas duality model acm vol 
pp 
march netlab caltech edu 
frank kelly david tan rate control communication networks shadow prices proportional fairness stability journal operations research society vol 
pp 
march 
frank kelly mathematical modelling internet mathematics unlimited engquist schmid eds pp 

springer verlag berlin 
misra towsley gong analysis design controllers aqm routers supporting tcp flows ieee transactions automatic control vol 
pp 

low wang doyle linear stability tcp red scalable control computer networks journal vol 
pp 
netlab caltech edu 
matthew mathis jeffrey semke jamshid mahdavi ott macroscopic behavior tcp congestion avoidance algorithm acm computer communication review vol 
july www psc edu networking papers model ccr ps 
lakshman madhow performance tcp ip networks high bandwidth delay products random loss ieee acm transactions networking vol 
pp 
june www ece ucsb edu faculty madhow publications ton ps 
jin wei low fast tcp motivation architecture algorithms performance tech 
rep caltech pasadena ca netlab caltech edu fast 
floyd handley padhye widmer equation congestion control unicast applications proc 
acm sigcomm september 
steven low david lapsley optimization flow control basic algorithm convergence ieee acm transactions networking vol 
pp 
december netlab caltech edu 
srikant congestion control utility functions random losses ecn marks ieee acm transactions networking 
massoulie roberts bandwidth sharing objectives algorithms ieee acm transactions networking vol 
pp 
june 
rosenberg game theoretic framework bandwidth allocation pricing broadband networks ieee acm transactions networking vol 
october 
steven low duality model tcp queue management algorithms ieee acm trans 
networking vol 
pp 
august netlab caltech edu 
glenn stability networks operating tcp congestion control proc 
ifac world congress 
srikant time scale decomposition approach adaptive ecn marking ieee transactions automatic control june 
srikant designing avq parameters general topology network proceedings asian control conference september 
glenn robust congestion control internet submitted publication 
steven low fernando john doyle internet congestion control ieee control systems magazine vol 
pp 
february 
low srikant mathematical framework designing low loss low delay internet 
frank kelly fairness stability congestion control european journal control vol 
pp 

jin wei low choe cottrell doyle newman singh fast kernel background theory experimental results international workshop protocols fast long distance networks february 
david wei steven low model tcp model burstiness effect submitted publication 
wang fernando global stability time delay network congestion control proc 
ieee conference decision control december 
deb srikant global stability congestion controllers internet ieee transactions automatic control vol 
pp 
june 
luigi rizzo dummynet info iet unipi 
luigi ip dummynet 
li implementing highspeed tcp url www hep ucl 
ac uk hstcp index html 
floyd tcp slow start aimd mods url www csm ornl gov net floyd html 
chiu jain analysis increase decrease algorithms congestion avoidance computer networks computer networks vol 
pp 

jain art computer systems performance analysis techniques experimental design measurement simulation modeling john wiley sons 
ieee ieee infocom 
