reuse approach determining security requirements donald andreas dept computer info 
science norwegian science technology leave dept univ auckland new zealand software engineering institute dept information science bergen norway 
proposes reuse approach determining security requirements 
development reuse involves identifying security threats associated security requirements application development abstracting repository generic threats expressed misue cases requirements expressed security cases 
development reuse involves identifying security assets setting security goals asset identifying threats goal analysing risks determining security requirements reuse generic threats requirements repository 
advantages proposed approach include building managing security knowledge shared repository assuring quality security reuse avoiding overspecification premature design decisions reuse generic level focussing security early requirements stage development 
keywords security requirements security threats reuse requirements engineering security cases misuse cases cases popular eliciting requirements 
groups stakeholders turn comfortable descriptions operational activity paths declarative specifications software requirements 
cases specifically address users system relevant functional requirements 
lately application cases investigated connection security safety requirements form misuse cases abuse cases 
misuse cases received growing research interest years informal front method eliciting security requirements 
previous misuse cases application specific 
proposes additional level generic application independent misuse cases stored repository reuse 
order avoid premature design decisions generic misuse cases written requirements level 
repository highly reusable development projects help requirements workers get flying start expressing security requirements contributing security education developers stakeholders 
describe interactions cause harm system stakeholders informal front formal security systems engineering 
cases advantage stakeholders involved 
closely related topic research security cases 
misuse cases describe interaction sequences harm attempted misuse cases system ends preventing mitigating damage 
spite growing research interest misuse cases promising early applications approach put large scale industrial 
software development organizations tend put little focus security requirements increasing importance 
partly may due lacking understanding security requirements 
attempt write security requirements developers tend describe design solutions terms protection mechanisms making declarative statements degree protection required 
reason neglecting security requirements may perceived shortage time projects narrow deadlines 
instance case studies showed security requirements poorly addressed commerce projects 
commerce domain security major importance domain short lead times may crucial 
misuse case analysis appealing practitioners reuse may essential security requirements specified rapidly 
pointed reuse requirements lead significant savings development time cost 
requirements reuse attracted research attention application software industry limited 
reuse achieved patterns frameworks design level 
requirements may difficult reuse partly different project project 
security requirements preceding description threats captured misuse cases reuse easier achieve functional requirements main focus earlier research 
functional requirements vary domain domain significantly application application domain general threats systems face spoofing identity tampering data information disclosure denial service tend fairly similar system system 
instance huge differences missile control systems little hope reusing functional requirements domains face threat misuser may spoof legitimate user gain access system services 
stronger security probably needed missile control system shop just matter degree kinds systems security requirements categories identification authentication authorization integrity 
similar case closely related area legal requirements application domain satisfy similar laws instance privacy 
legal requirements may lend better reuse functional requirements 
purpose provide reuse methodology misuse case analysis subsequent specification security requirements 
key processes reuse oriented development development reuse reusable artifacts developed available reuse instance repository repository facilitates easy retrieval 
development reuse user applications developed partly reusing artifacts created process 
course interconnections processes development reuse discover weaknesses existing components reuse repository inspire new ideas reusable components development reuse steer development reuse extent able choose projects pick greatest possibility achieving reuse current repository contents 
rest structured follows section deals development reuse discussing kinds artifacts developed reusability artifacts ensured artifacts packaged repository reuse 
section addresses development reuse discussing identify candidates reuse adapt specific application 
section discusses suggested approach comparing related section concludes 
development reuse reuse systems development artefacts may improve quality development processes products may reduce development costs artefact reused times expensive develop reusable 
ensure repeated reuse security threats requirements find answers questions 
development artefacts stored repository reuse 

repository organised best support reuse 
reusable development artifacts mentioned applications face kinds threats similar categories required security different functional requirements 
challenge reusability describe threats requirements sufficiently generic level detailed differences applications functionality architecture hamper possibility reuse 
suggest main kinds reusable artifacts generic threats represented misuse cases 
generic security requirements represented security cases 
example generic threat table shows generic misuse case represents threat spoofing gaining access system pretending regular user 
highly reusable cases covers different spoofing attacks 
matter authentication done username password card pin fingerprint scan voice recognition human human recognition individuals 
interaction sequence inspired essential misuse cases focus users intentions concrete actions 
main motivation simplify interaction avoid premature design decisions 
increase reusability description premature design limit reusability description projects happy particular design decisions 
table generic misuse case spoof user access generic misuse case spoof user access summary misuser successfully system physical human computerized believe legitimate user gains access restricted system service resource building 
preconditions misuser legitimate user valid means identify authenticate misuser invalid means identify authenticate similar valid means system unable distinguish 
system operating normal capabilities system corrupted accept means identification authentication normally rejected 
misuser may previously performed misuse case tamper system system operate normal capabilities 
misuser interactions system interactions request access service request identification authentication access provide service postconditions misuser legitimate user done access session system log appear system accessed legitimate user 
example generic requirement table shows path security case access control specifically requiring system reject valid means identification invalid means authentication 
entire security case comprised paths depending various preconditions misuser valid identity authentication misuser valid identity valid authentication misuser valid identity valid authentication 
security requirements described requirement lists mitigation points misuse cases discussed 
notice spite having paths security case may accommodate possible requirements meant mitigate certain threat 
threat represented misuse case table may part mitigated misuser attempt gain access system attempt 
instance may requirements means authentication instance terms low preferably quantified cancellation service means authentication feared compromised reduce authority legitimate users possible reduce damage defenses fail misuser gains access system 
may described security cases cancel means authentication may best described shall requirements 
instance difficult formulate quantified requirement means authentication case 
table path generic security case access control generic security case access control path name reject invalid authentication preconditions misuser valid means user identification invalid means user authentication 
misuser interactions system requirements system interactions system actions request user identity authentication 
provide valid user identify invalid user authentication 
reject misuser attempt identification cancelling transaction 
authentication authorization 
postconditions misuser valid means user identification invalid means user authentication misuser authenticated granted access access control failure registered 
just generic misuse cases generic security case highly reusable design assumptions presuppose particular application domain 
access control feature wanted wide range applications 
case representative requirement accessing atm internet entertainment service missile control system 
organisation repository meta model showing threats security requirements links 
threats try achieve causing harm system security requirements describe extent system shall able mitigate threats 
key understanding diagram classes way threat security requirement threat requirement relationship security requirement bundle 
start set requirements pull mitigating threat 
interesting look bundles just individual requirements security requirement bundle bigger effective unit reuse 
extent requirement unit reuse possible define bundle consisting requirement 
cases single security requirements provide little protection accompanied requirements 
instance observed identification requirements seldom value cases accompanied authentication requirements 
observed security case requirement bundle 
example table contains requirements system shall reject access users valid means authentication failed access attempts shall registered 
path bigger case total encompass requirements 
threat security link objects commonly represent mitigate relationships certain requirement bundle security case access control mitigates threat misuse case spoof user access 
possible relationship aggravate choice requirements bundle may increase risk threat 
example bundle access control requirements increase risk denial service dos threats 
classical example suspension console login certain user failed login attempts misuser deny access user simply making failed login attempts 
general terms requirement system suspend access sensing attempted attack utilized dos purposes 
threat security relationship modeled association associations mitigate aggravate 
relationships give increased flexibility new relationships addition mitigate aggravate defined changing meta model easier include attributes providing extra information relationship instance instance explanations extent certain requirement bundle mitigates aggravates certain threat 
notice cardinalities threat requirement relationship sides security requirement bundles mitigating threat bundle may contribute mitigating threats instance mitigation spoof user metamodel threats security requirements threat serve mitigate repudiation threat 
requirement requirement relationship register relationships requirements may overlapping conflict 
gives somewhat increased flexibility wrt 
possibility extending repository new kinds relationships including extra information rationale explanations 
aggregation threat threat representation enables threat parallel representations terms format language 
instance misuse case written english french norwegian language different templates representations misuse cases instance formal languages investigated 
subclasses threat representation addition misuse case 
upper right part diagram shows analogous modeling requirements side 
lower left part shows threat generic threat application specific threat generic threat may application specific instantiations spoof user access threat table may instantiated cover illegitimate access atm building internet entertainment service lower right part shows requirements side structured accordingly 
basing reuse repository meta model advantages achieved security requirements may searchable threats meant mitigate having search requirements directly 
direct alternative useful know look developer pretty clear picture requirement reduces gain reuse 
security requirements packaged bundles give meaningful protection commonly seen threats 
cases effective reusing requirements assembling meaningful bundles project project basis 
having observed advantages turn development reuse 
development reuse shoes uml activity diagram outlines suggested approach development reuse 
steps follows 
identify critical vulnerable assets identify critical vulnerable assets enterprise 
vulnerable asset information materials enterprise possesses locations enterprise controls enterprise performs 
noticed specifically 
interesting look assets critical vulnerable scrutiny may reveal believed vulnerable vulnerability increase 
interesting look assets vulnerable critical kind may stepping stones launch attacks critical resources 
example server holds critical information runs critical services zombie attack computing resources companies causing liability organization 
starting security analysis focus assets ensures final security requirements anchored protection materials information locations activities value enterprise 
important assets enterprises knowledge skills workers directly important ict security context vulnerable indirectly misuse tangible assets 

determine security goals asset critical vulnerable asset identified step select appropriate security goals asset 
security goal specified terms potential type security breaches asset vulnerable security level necessary type breach 
example potential may internet script business competitors employees 
examples security types violations secrecy integrity security threat classifications literature step 
possible taxonomy security breaches proposed 
security level achieved specified probability assets kept safe particular type breach particular type misuser 
establishing security goals critical vulnerable assets ensures eventual security requirements derived thoroughly identified types security breaches 
defined security goals prerequisite identifying threats 
goals threats 
example killed threat staying alive goal life asset 

identify threats asset security goal identified step find threats prevent goal achieved maintained 
repository time 
find misuse cases repository involve right types specified goal select misuse cases threaten right type security breach 
assess misuse case poses threat relevant security level specified goal 
example misuse cases involve breaking cryptographic codes may relevant threat security integrity banks military installations extremely high security levels security integrity student information university information system 
addition repository course necessary look threats directly implied determined security goals security goals may forgotten 

analyze risk threat detailed form specification threats include risk various threats estimated likelihood occurrence cost damage threat occurs 
description threats highly reusable risks normally determined application application 
example internet entertainment service missile control system face threat spoofing associated risks may quite different 

determine requirements identified threat risk account determine requirements mitigate threat 
repository 
threat retrieved repository associated bundles security requirements may 
threats retrieved repository appropriate security requirements determined specified means 
threats retrieved repository additional bundles security requirements threat may means 
different levels mitigation needed different threats requirements workers select requirements bundles produce necessary levels mitigation threats overlap 
process completed satisfactory requirements specified threats threats investigated security goals assets 
identify assets determine security goals specify threats analyze risks development reuse outlined process specify req discuss steps envision reuse steps instance means asset checklists discuss step 
necessary show steps illustrate context reuse step takes place 
activity diagram shows decomposition threat specification step 
possible ways suggested identify threats analyze threat coverage top threat search bottom threat search reuse specific threat descr 
adapt generic threat descr 
threat brainstorming specific threat reusable decomposition specify threats threat lacking reuse reusable threat generic threat reusable describe threat top threat search means start identified assets security goals try search repository threats relevant assets security goals 
best supported attributes pointing relevant types assets security goals threat class alternatively separate classes asset types goal types threats associated 
extend meta model 
bottom threat search starting looking repository regard determined security goals considering different threats described relevant application 
systematic approach top alternative repository big cause lot wasted time looking irrelevant threats 
valuable corrective strict top development gives extra check threats overlooked 
security goals may overlooked previous stage assets strict top approach gives guarantee threats discovered 
threat brainstorming 
option threats repository mandated determined security goals 
course threat suggested brainstorming check sure covered repository 
method threat identified situations may occur repository contains description reused threat 
rare cases happen threats discovered bottom approach browsing repository developers come threat relevant application description repository reusable 
repository contains description reused threat happen brainstorming threat covered 
case new alternatives generic threat description reused adapted application specific instantiation 
fitting application specific variety repository possibly reused saving developers 
example imagine repository contained threat spoof user access table retrieved relevant project hand develop new atm system 
generic misuse case adapted application specific misuse case shown table phrases rewritten underlined ones 
previous development project atm system means repository application specific misuse case 
reused directly 
table application specific misuse case spoof customer atm misuse case name spoof customer atm summary misuser successfully atm believe legitimate user 
misuser granted access atm customer services 
preconditions misuser legitimate user valid means identification authentication misuser invalid means identification authentication similar valid means atm unable distinguish atm system corrupted accepting means identification authentication normally rejected 
misuser interactions system interactions request access request identification authentication access postconditions misuser customer services available spoofed legitimate user system log appear atm accessed legitimate user 
moving step decomposed activity diagram 
comes requirements chance reuse considerable threat reused follow repository links requirement bundles threat 
threat specified scratch directly corresponding requirements repository chance reuse smaller 
pay browse briefly requirements related similar threats 
way may happen requirement bundles satisfactory reuse reusable give sufficient level mitigation 
may potential reuse 
situation quite similar reuse threats reuse possible adaptation generic level lucky able reuse specific level example consider security case atm access control precise particular path case 
apart name really needed changed description shows high reusability generic description 
cases changes needed generic specific level descriptions comprehensible stakeholders 
table path application specific security case atm access control security case atm access control path name reject invalid authentication preconditions misuser valid means user identification invalid means user authentication 
misuser interactions provide valid user identify invalid user authentication 
system requirements system interactions system actions request user identity authentication 
reject misuser cancelling transaction 
attempt identification authentication authorization 
postconditions misuser valid means user identification invalid means user authentication misuser authenticated granted access access control failure registered 
threats analyzed determining level security needed various threats follow repository links threats side requirements side look alternative requirements mitigate relevant threats choose appropriate needed security levels 
chosen generic security requirements adapted application specific ones 
cases hardly rewriting needed example atm access control examples may necessary change terms application specific ones quantify requirements generic ones indicate possibility quantify changing time limit actual time limit number 
proposed reuse approach determining security requirements 
development reuse involved identifying security threats associated security requirements application development abstracting repository generic threats expressed misue cases requirements expressed security cases 
development reuse involved identifying security assets setting security goals asset identifying threats goal analysing risks determining security requirements reuse generic threats requirements repository 
advantages proposed approach include building managing security knowledge shared repository assuring quality security reuse avoiding overspecification premature design decisions reuse generic level focussing security early requirements stage development 
proposed approach may save time early development phases produce complete requirements repository may prevent developers forgetting important threats requirements 
generic security requirements show developers level description tempting jump directly threats design mechanisms mechanisms directly completely understanding threats 
reuse determination security requirements early stages industrial case studies called 
better support development reuse needed link misuse cases repository relevant security goals better prepare development reuse 
example misuse cases repository described just security goals terms potential misuser type security threat typical likelihood success misuse 
repository implemented tool repository integrated case tools systems development support maintaining repository 
example tool support abstraction application specific threats security requirements generic ones 
tool enforce common taxonomy terminology types security breaches order increase search efficiency 
better support development reuse needed methodically specify security goals particular best classify security threats 
heuristics setting security levels helpful 
course tool support searching threats misuser type security breach exactly approximately 
comparing proposal goal agent oriented approaches security requirements path 

jacobson object oriented software engineering case driven approach 
boston addison wesley 

constantine lockwood software practical guide models methods usage centered design 
acm press 

cockburn writing effective cases 
boston addison wesley 

rumbaugh getting started cases capture requirements 
journal object oriented programming 

cases requirements context 
acm press 

scenario usage system development report current practice 
ieee software 



eliciting security requirements misuse cases 
tools pacific 

sydney ieee cs press 


templates misuse case description 
th international workshop requirements engineering foundation software quality 

informatik ge 


generalization specialization structuring mechanism misuse cases 
nd symposium requirements engineering information security 

raleigh nc univ purdue 

alexander initial industrial experience misuse cases trade analysis 
re 

essen ieee cs press 

alexander misuse cases cases hostile intent 
ieee software 


mcdermott abuse case assurance arguments 
th annual computer security applications conference acsac 
ieee cs press 

alexander modelling interplay conflicting goals misuse cases 
th international workshop requirements engineering foundation software quality 

essen germany ieee cs press 

mcdermott fox 
abuse case models security requirements analysis 
th annual computer security applications conference acsac 
ieee cs press 

forthcoming 
journal object technology 


crook security requirements engineering anti requirements hit fan 
ieee international requirements engineering conference re 

essen germany 

engineering security requirements 
journal object technology 


anton deriving goals case requirements specification 
requirements engineering journal 


anton 
strategies developing policies requirements secure electronic commerce systems 
st acm workshop security privacy commerce 


biggerstaff richter reusability framework assessment directions 
ieee software 


maiden sutcliffe exploiting reusable specification analogy 
communications acm 


waters requirements apprentice automated assistance requirements acquisition 
ieee transactions software engineering 


massonet van lamsweerde 
analogical reuse requirements frameworks 
rd international conference requirements engineering 

washington dc ieee cs press 

lam mcdermid vickers steps systematic requirements reuse 
requirements engineering journal 


analogical reuse requirements specifications computational model 
applied artificial intelligence 


pernici reusing specifications oo applications 
ieee software 


wirsing 
menu example systematic reuse specifications 
nd european software engineering conference 

coventry england springer verlag 

eberlein hoover 
requirements reuse feature interaction management 
th international conference software systems engineering applications 

paris france 

reusing single requirements application family requirements 
st international conference software engineering icse 

los angeles ca ieee 

baum mapping requirements reusable components design spaces 
th international conference requirements engineering 

il ieee 

lopez laguna garcia 
reuse analysis clustering requirements diagrams 
th international workshop requirements engineering foundation software quality 

essen germany 


legal requirements reuse critical success factor requirements quality personal data protection 
ieee joint international conference requirements engineering re 

essen germany ieee 

karlsson ed 
software reuse holistic approach 
wiley series software systems 
john wiley sons 

conradi 
karlsson reboot approach software reuse 
journal systems software 


tracz software reuse myths 
acm sigsoft software engineering notes 

document created win pdf available www com 
unregistered version win pdf evaluation non commercial 
