analysis interacting bpel web services xiang fu cs ucsb edu cs ucsb edu su su cs ucsb edu department computer science university california santa barbara ca presents set tools techniques analyzing interactions composite web services specified bpel communicate asynchronous xml messages 
model interactions composite web services conversations global sequence messages exchanged web services 
opposed earlier tool set handles rich data manipulation xpath expressions 
allows verify designs detailed level check properties message content 
framework bpel specifications web services translated intermediate representation followed translation intermediate representation verification language 
intermediate representation guarded automata augmented unbounded queues incoming messages guards expressed xpath expressions 
target verification language promela input language model checker spin 
spin model checker finite state verification tool achieve partial verification fixing sizes input queues translation 
propose concept address problem 
show composite web service synchronizable conversation set remains asynchronous communication replaced synchronous communication 
give set su cient conditions guarantee checked statically 
results show large class composite web services unbounded input queues completely verified finite state model checker spin 
categories subject descriptors models principles systems information theory formal models communication software engineering software program verification formal methods model checking general terms verification design keywords web service asynchronous communication conversation model checking xpath bpel spin 
copyright held author owner 
www may new york new york usa 
acm 

fundamental goal web services collection network resident software services accessible standardized protocols functionality automatically discovered integrated applications composed form complex services 
established emerging standards bodies rapidly laying foundations industry build research challenges web services defined understood :10.1.1.30.9410
attempts address aspect global behaviors interacting web services 
elementary level web service composed activities execution performs tasks interest messages enable service participate complex web service 
activities resemble traditional programs messages necessary allow individual web services interact maintaining autonomy 
objective understand role messaging composing web services develop tools analyzing interactions composite web services 
earlier introduced global behavior model interacting web services conversations global sequence messages recorded order sent 
message oriented behavior modeling simple importantly requires web services reveal amount information necessary meaningful compositions 
complex internal states legacy systems hidden 
interestingly conversations immediately permit temporal properties expressed verified composite web services 
top specification approach conversation protocols proposed 
conversation protocol finite state automaton specifies desired set conversations composite web service 
model message contents abstracts away data semantics 
capture data semantics technical report developed notion guarded automaton 
transition guarded automaton equipped guard expressed xpath expression 
xpath expressions guards allows express manipulation xml message contents conversation protocol 
contrary top specification approach adopted studies bottom composition bpel web services new contributions platforms web service standards stack :10.1.1.30.9410
facilitate translation bpel web services extend guarded automata model allowing local xml variables guarded automaton 
develop tool translates bpel web services extended guarded automata model 

extend translation tool developed guarded automata promela input language spin model checker 
extension handles local variables guarded automata supports asynchronous messaging input queues 
composite web service specified top fashion starting single guarded automaton input queues handled translation 
combination translation tools allows model check properties bpel web services abstracting away data semantics 

develop su cient conditions equivalence conversations synchronous usual asynchronous communication semantics 
demonstrate synchronizable composite web services allow complete cient verifications 
improvement autonomy condition 
slight modification result improve realizability conditions 
results form framework developing analysis verification design tools web services 
particular guarded automata model intermediate representation composite web services results modular extensible architecture web service analysis tool multiple web service specification languages supported front various model checking tools analysis introduced employed back 
rest organized follows 
section discusses general notions web services interaction models provides context technical problems discussed 
section defines formal model technical development 
section presents translation algorithms bpel guarded automata guarded automata promela respectively 
section improves results section proposing notion gives su cient conditions 
section concludes 

web service interactions displays stack standards web services xml sits foundation 
communicating web services deployed di erent locations di erent implementation platforms agreeing set wsdl ports bpel web services standards data transmission service descriptions clearly important 
web services interact xml messages 
xml schema provides essentially type system xml messages 
communication protocols soap transmit xml messages 
interfaces web services described wsdl importantly defines ports web services connect order interact 
wsdl specification defines public interface web service provide information behavior 
behavioral descriptions web services defined higher level standards bpel wsci bpml daml web service development standards supported di erent competing implementation platforms net ee :10.1.1.30.9410
consider loan processing service similar example consists services loan processing risk assessment customer process :10.1.1.30.9410
example interface web service risk assessment defined wsdl assessor 
wsdl specification risk assessment service defines port loan processing service connect 
loan processing service right provides wsdl port customer process connect specifies behavior loan processing service bpel describing interacts services including risk assessment service 
pre post conditions associate behavioral descriptions atomic web services specified wsdl :10.1.1.142.1846
pre post conditions reason composed behaviors web services 
bpel provides expressive behavioral descriptions 
bpel allows manipulation xml data structures xpath expressions provides programming constructs sequence conditional case statements parallelism loops 
interacting bpel web services simple example demonstrating model shows part composite loan processing web service includes assessor customer 
individual services may specified bpel simple cases wsdl 
directed edges represent communication links individual services 
note assessor may contact customer directly 
result single web service keep track global state service execution mediator process described 
clearly analyzing interactions web services presents great challenge due distributed behavior 
goal analyze verify properties composite web services consisting multiple bpel web services communicating asynchronously shown 
formal model interacting web services section give formal model composite web services consists multiple peers communicating asynchronous messaging 
gives informal illustration conversation model 
composite web service consists conversation schema specifies set peers messages transmitted peers set guarded automata specifying behavior individual peer 
communication web services asynchronous peer equipped fifo queue store incoming messages 
assume virtual watcher records sequence messages sent peers 
sequence messages recorded watcher called conversation 
note virtual watcher construct reason interactions di erent peers implemented 
conversation regarded linearization message events similar approach defining semantics message sequence charts 
formally composite web service tuple 
conversation schema implementation peer conversation schema pair finite set peers finite set message types 
message type transmitted pair peers 
model messages xml documents types messages correspond xml schemas 
message type dom denote xml documents type set message types define message alphabet dom 
element called message 
type denote type message say instance type 
guarded automata peers peer implementation guarded automaton incoming outgoing message types set local variables set states initial state set final states respectively 
messages assume local variables xml documents 
local variable dom denote xml documents match type declaration similar message types types local variables correspond xml schemas 
transition guarded automaton peer source state destination state forms 
local transition transition guard 
transition changes state automaton updates local variables guard 
receive transition transition changes state automaton removes received message type input queue peer 
send transition transition guard 
transition changes state automaton appends sent message type input queue receiving peer 
note sent messages received consumed synchronously instantaneously appended appropriate input queue 
message received moves head input queue 
guard consists guard condition set assignments 
send local transition taken guard condition evaluates true receive transitions guards simply consume message head input queue 
transition send transition assignments guard specify contents message sent 
transition local transition assignments guard update values local variables 
send transition peer sender message type guard predicate form message sent vector contains instance message type received sent peer represents values local variables local transition peer guard predicate form described vector denotes values local variables immediately transition executed denotes values messages local variables just transition executed 
conversations explained model composite web service peer queue input messages may send messages input queues peers 
model global behavior composite web service define virtual watcher records sequence messages sent peers 
formally composite web service 
global configuration tuple form qn tn content input queue peer vector denotes values local variables state sequence messages recorded global watcher message vectors record latest sent received instances resp 
message type 
straightforward define derivation relation configurations transition relations peers exists peer transition executing transition configuration results configuration 
note send operation appends message input queue receiver global watcher time 
run finite sequence configurations satisfies conditions sn initial configuration initial state denotes uninitialized messages local variables final configuration peer note input queues peers empty final configuration message sent received 
call message sequences observed watcher conversations composite web service 
formally finite word conversation composite web service exists run value watcher final configuration denote set conversations temporal logic ltl express properties conversations 
define set atomic propositions follows atomic proposition form message type pred pred predicate contents denote message satisfies atomic proposition type type pred true pred ltl formulas constructed atomic propositions logical operators temporal operators meaning globally eventually 
semantics ltl temporal operators easily defined finite length conversations 
composite web service ltl property say 
example ltl property msg msg msg shown denotes msg eventually followed msg msg composite web service satisfies property conversations generated composite web service satisfy property 
say composite web service schema finite content message type dom finite set local variable dom finite set 
undecidability result composite web service finite content ltl property checking undecidable 
protocols finite content verification composite web services undecidable problem 
due presence unbounded queues asynchronous communication 
section show put bound sizes input queues existing model checking tools analyze properties composite web services 

model checking interacting bpel web services section discuss spin model checker verification interacting bpel web services 
input language spin called promela modeling language finite state concurrent processes 
spin model checker verifies falsifies generating counterexamples ltl properties promela specifications exhaustive state space search 
set interacting web services specified bpel processes wsdl ports generate promela specification corresponds composite web service 
promela specification contains set concurrent processes communicate asynchronous channels 
implement translation phases bpel processes guarded automata model described section guarded automata model promela processes asynchronous communication channels 
guards intermediate guarded automata model xpath expressions manipulating xml documents xml schema types 
step translation advantages intermediate guarded automata model enables implement static analysis techniques analysis described section able translator guarded automata promela described implementing back translation decoupling front back ends translator enable target multiple web service languages front wsci daml multiple verification languages smv action language verifier back 
translation bpel automata set bpel process specifications related wsdl port declarations construct corresponding composite web service specified guarded automata 
bpel sample code translation assign part accept receive operation approve variable request invoke operation approve invar request ee ee ee ee sequence ee ee flow link condition cond link bpel guarded automata construct conversation schema translate control flow bpel process 
bpel process specifications fed input peer list schema tuple known 
message types extracted wsdl files 
input output fault parameter operation port service link bpel process message type declared 
example bpel process operation approve declared port input parameter wsdl message format message type approve declared composition schema domain type 
name operation unique ports tool omit port name generated message name simplicity approve 
bpel type contents message defined wsdl message declaration constructs soap definition xml schema translate possible formats msl formal model xml schema 
discuss translation bpel control flow data manipulation 
guarded automata translation typical language constructs bpel language 
shown bpel language construct translated guarded automaton single initial state single final state 
example assign statement translated transition automaton xpath expression guard transition expresses assignment 
note bpel di erent approaches navigating messages keyword part example xpath expressions 
translate equivalent xpath expressions xpath expressions embedded guards generated transitions 
receive statement translated transition automaton transition receives message second transition assigns input variable 
similarly main body invoke statement translated automaton transition sends input message operation invoked transitions receive response assign output variable assuming exceptions 
note exceptions arise invoke generate additional transitions handle 
fault transition leads exception exit information fault associated exception exit 
fault handler wrapped invoke statement translator connects fault handler corresponding exception exit 
bpel control flow constructs sequence switch compose atomic constructs discussed 
display translation sequence 
connect final state initial state local transitions unmark final state activities 
information exception exits properly maintained 
control flow constructs handled similarly embedding control flow transitions guarded automata 
flow construct concurrent composition branches simply construct cartesian product branches 
control dependency links activities di erent flow branches 
map link boolean variable semantics reflected guards transitions appended activity 
translation control flow bpel finite state machines petri nets discussed 
difference handle xml data manipulation guarded automata guards expressed xpath expressions 
enables verify properties xml data manipulation 
analysis done approaches away data content 
translation automata promela composite web service specified interacting guarded automata translate promela specification consists set concurrent processes guarded automaton 
concurrent process associated asynchronous communication channel storing input messages 
example promela output generated translator shown 
part promela code consists type declarations global variable definitions 
msl type declaration conversation schema mapped record type typedef promela 
guarded automata model strings constants mapped mtype enumerated type promela element name originally string 
shown message type conversation schema corresponding global vari type declaration typedef mtype name 
message declaration stub 
enumerate type msgs states peers mtype 
mtype msg 
channels chan ch mtype appeal chan ch customer mtype proctype mtype state definition local variables request 
definition auxiliary variables evaluate xpath expressions bool bvar evaluation transition conditions true 
nondeterministically select transitions fire transition state ch atomic ch stub appeal state transition cond accept state atomic accept ch customer state msg 
may jump final state state final break fi od proctype customer 
proctype assessor 
proctype 
init initialization atomic run run customer 
example promela translation ables declared recording sent instance message type recording received instance stub variable channel operations stub 
message type declare corresponding enumerated constant 
set enumerated constants constitutes domain enumerated variable msg store type latest transmitted message 
channel variable declared peer simulate input queue 
example channel ch queue peer length 
contents channel includes input message types peer 
example peer input message types appeal 
note send receive operation channel send message elements filled stub messages 
mtype element channel content indicates message type transmitted 
promela code automaton translated process type proctype 
example shown process types customer assessor 
default main process promela called init 
init process initializes global variables initialization non deterministic spawns processes creating process instance process type 
inside proctype local variables declared followed auxiliary variables evaluation xpath expressions 
enumerated mtype variable state record current state automaton 
main body process single loop 
iteration loop enabling condition transition guard evaluated result stored corresponding boolean variable condition 
example cond records evaluation results enabling condition transition 
promela statements multiple branches test condition branch similar switch statement 
branches statement test condition evaluates true nondeterministically chosen executed 
promela translation guarded automaton transition automaton translated branch statement inside main loop body 
test condition branch checks current state source state corresponding transition enabling condition corresponding transition evaluates true 
check head channel contains right message type testing element channel content 
note promela statement channel messages side ects boolean condition channel 
statement checks receive executability execute receive operation 
head channel matches message type receive operation consume message assignment update local variable state 
handling send transitions similar di erence need update global variable msg sending message 
state final state nondeterministic choice jump loop terminate 
translation xpath expression promela trivial problem 
example consider message suppose element preferred term list desired apr pair proposed customer maximal length list 
xpath expression preferred term translated code bool false int preferred term true skip fi break od xml schema element preferred term translated array type promela 
key step generated code search proper array index satisfies condition evaluation 
xpath functions position need handled translation complicated 
translation xpath expressions promela code discussed omit details 
case study translation tools described translated loan processing example bpel document promela spin model checker verify :10.1.1.30.9410
source code bpel wsdl files example taken ibm bpws tool sample set 
bpel files provided peers customer loan assessor loan involved interaction supplied bpel implementations 
control logic loan approval process follows loan amount request sent customer lower certain amount loan assessor gives low risk assessment loan approval process approves loan request wait final decision 
main body loan approval process flow construct branches consist invoke receive reply assign statements 
dependence links concurrently running branches exception handler wrapped flow construct 
considered properties interactions 
satisfied composite web service second 
la la la fault la amount la accept la messages related approve operation loan approval process 
property states customer sends request loan approval process eventually get output message fault 
second property states request amount greater domain eventually get rejected 
property false loan approval process passes decision loan loan approve request 
tool translates bpel files corresponding wsdl files promela specification 
generated promela code integer variables leads large state space 
limit state space set integer domain change condition request amount specification accordingly 
property verified minutes states explored 
tried di erent channel sizes verification cost changes little 
increase integer domain verification cost increases exponentially uses memory resource 
second property spin identifies error quickly 
integer domain takes seconds find generate error trace 
verification cost increase integer domain attributed depth search approach spin locate error correct property exhaust state space 
cost increase channel sizes 
composite web service examples 
consider example composite web services 
composite web service consists peers requester server 
request message represented sent requester server respond corresponding acknowledgment 
response may immediate example 
message concludes interaction requester server 
verify properties examples translating promela described previous section 
discussed need bound sizes input queues communication channels promela able verify composite web service spin finite state model checker 
fact undecidability ltl verification section generally impossible verify behavior composite web service unbounded queues 
general best partial verification verify behavior composite web service queues fixed length 
note absence errors approach guarantee composite web service correct 
interestingly section show examples di erent example properties examples fact verified unbounded message queues example achieve partial verification 
note example requester send arbitrary number messages server starts consuming 
conversation set example regular set 
subset number messages equal prefix number messages greater equal number messages 
surprising map behavior example finite state process 
problem example fact state space increases exponentially sizes input queues 
partial verification large queue sizes intractable 
example requester server processes move lock step fashion easy see conversations generated example regular set 
fact composite web service described example finite set reachable states 
execution example state message queue 
results statically conclude properties example verified synchronous communication words input queues size 
example infinite state space example example 
words number messages input queues example bounded 
similar example state space example increases exponentially sizes queues 
example conversation set example regular 
example infinite state space show properties example verified arbitrary queue sizes 
states queue size example example example state space queue size experimentally demonstrate state spaces examples change increasing queue sizes 
size reachable state space examples computed spin model checker di erent input queue sizes 
axis size input queues axis displays number reachable states computed spin 
shown state space example fixed states state spaces examples increase exponentially queue size 
show verify behaviors examples arbitrary queue sizes best example partial verification 
particular show communication peers examples synchronizable verify properties synchronous communication guarantee verified properties hold asynchronous communication unbounded queues 
synchronous communication explore di erences examples example define alternative synchronous semantics composite web services di erent section 
intuitively synchronous semantics restricts peer consumes incoming messages immediately 
need input message queue 
recall composite web service tuple guarded automaton describes behavior peer 
global configuration qn tn configurations input queues 
define configuration composite web service synchronous communication semantics sc configuration tuple tn di ers configuration dropping input queues 
peers interact asynchronous communication send operation inserts message input queue target peer receive operation removes message head input queue 
definition derivation relation modified asynchronous case send transition executed instantaneously matching receive operation sending receiving message occur synchronously 
call semantics synchronous communication semantics composite web service 
definitions watcher conversation set modified accordingly 
particular composite web service denote conversation set synchronous communication semantics 
composite web service synchronizable conversation set remains synchronous communication semantics 
clearly composite web service synchronizable verify behavior input queues results verification hold behaviors composite web service presence asynchronous communication unbounded queues 
section give su cient conditions 
conditions show examples synchronizable 
analysis guarded automaton skeleton standard finite state automaton sk local variables removed transition generated dropping guard corresponding transition 
local transitions guarded automata transitions skeleton 
note language recognized skeleton sk sk subset set guarded automata composition synchronizable conditions satisfied skeletons synchronous compatibility construct synchronous composition cartesian product skeletons resulting automaton contain state peer ready send message peer peer ready receive message 
autonomy peer state conditions hold transitions including transitions reachable transitions send operations transitions including transitions reachable transitions receive operations final state reach final state transitions 
lossless composition mark initial state peer skeleton final state construct cartesian product peer skeletons 
projection cartesian product peer equivalent original skeleton initial state marked final state 
theorem 
composite web service skeletons sk sk satisfy conditions synchronizable 
promela language verification languages web service analysis verification tool conditions listed derived realizability conditions conversation protocols 
proof lines proof realizability conditions establish theorem 
intuitively show composite web service satisfies conditions input queue peer empty peer sends message 
observation show conversation exists corresponding execution peers communicate synchronously 
note examples synchronizable example violates autonomy condition 
verify properties examples synchronous communication achieved spin restricting communication channel lengths results obtain hold behaviors generated asynchronous communication unbounded queues 
relaxing autonomy condition 
discussed section flow construct bpel specification generates cartesian product flow branches translated guarded automata 
unfortunately flow constructs violate autonomy condition 
example assume branches inside flow statement branch single invoke operation sends request receives response 
guarded automaton translation state transition sending request branches transition receiving response branch 
note state violates autonomy condition 
corresponding peer sends message input queue empty cartesian product flow branches includes permutations transitions di erent branches show equivalent computation send operation executed queue empty receive operation 
generalize scenario relax autonomy condition single entry single exit permutation blocks 
permutation block cycles final states contains permutations transitions entry exit 
relax autonomy condition stating states permutation block including entry excluding exit satisfy autonomy condition 
loan processing service revisited 
loan processing example discussed section passes condition test safely verify ltl properties synchronous composition setting channel size promela translation 
verification cost channel size significantly lower larger channel sizes 
synchronous verification analysis reduce state space better partial verification ensured verified properties asynchronous composition unbounded queue size partial verification 
examples realizability analysis available tool site 
ways achieve decidability analyzing queued bu ered systems example realizability analysis msc graphs sound wf net variation bounded petri net analyze workflows 
main idea provide su cient conditions guarantee queue bu er sizes bounded execution system 
approach di erent 
example example queue size server bounded composition requester synchronizable 

contributions form system analyzing verifying web services shown 
specifically input tool composite web service specification ltl properties 
tool check composite web service satisfies ltl properties 
currently tool accepts bpel specifications input translates guarded automata model 
guarded automata translated directly promela bounded queues analysis 
depending result check system generates promela specification synchronous communication check succeeds bounded queues 
spin model checker invoked verification promela specification 
clearly system extended illustrated 
translation web service specification languages daml wsci added front 
immediately allows verification web services defined languages changing back 
second di erent verification tools targeted back verification cient expressive verification languages 
possible add additional analysis techniques automated abstraction tool 
guarded automata model provides flexible intermediate representation di erent analysis 
exist challenges applying model checking techniques web services concerning extending current model guarded automata 
current model assume service links channels peers predetermined established prior interaction starts 
advanced features bpel example endpoint dynamically determine peer talk captured current model 
model handle dynamic process instantiation correlation sets 
extending model address issues interesting direction research 
acknowledgments supported part nsf career award ccr fu partially supported nsf iis nsf career award ccr su supported part nsf iis iis 

alur yannakakis 
realizability verification msc graphs 
proceedings th international colloquium automata languages programming volume lncs pages 
springer 
business process execution language web services bpel version :10.1.1.30.9410
www ibm com developerworks library ws bpel may 
business process modeling language bpml 
www bpmi org 
brown fuchs robie wadler 
msl model xml schema 
proceedings th world wide web conference www pages 
fu hull su 
conversation specification new approach design analysis service composition 
proceedings th world wide web conference www pages may 

action language verifier 
proceedings th ieee international conference automated software engineering ase pages 
burch clarke mcmillan dill hwang 
symbolic model checking states 
ieee symposium logic computer science pages 
daml owl draft release 
www daml org services daml may 
foster magee kramer 
model verification web service compositions 
proceedings th ieee international conference automated software engineering conference ase 
fu su 
model checking interactions composite web services 
ucsb computer science department technical report 
available www cs ucsb edu su tmp map spin pdf 
fu su 
conversation protocols formalism specification verification reactive electronic services 
proceedings th international conference implementation application automata volume lncs pages 
full version appear special issue theoretical computer science 
holzmann 
spin model checker primer manual 
addison wesley boston massachusetts 
hull benedikt christophides su 
services look curtain 
proceedings nd acm symposium principles database systems pods pages 
ibm 
ibm business process execution language web service java run time bpws 
www alphaworks ibm com tech bpws 
gerry miller 
net vs ee 
communications acm june 
message sequence chart msc 
itu geneva recommendation 
narayanan 
simulation verification automated composition web services 
proceedings th international world wide web conference 
pnueli 
temporal logic concurrent programs 
theoretical computer science 
simple object access protocol soap 
note may 
www org tr soap 
van der aalst verification workflow task structures petri net approach 
information systems 
joseph williams 
web services debate ee vs net 
communications acm june 
web service analysis tool wsat 
www cs ucsb edu su wsat 
web service choreography interface wsci 
www org tr note wsci august 
web services description language wsdl 
www org tr wsdl march 
extensible markup language xml 
www org xml 
xml path language xpath version 
www org tr xpath 
xml schema 
www org xml schema 
