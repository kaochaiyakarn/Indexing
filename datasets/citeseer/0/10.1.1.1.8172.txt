computing common subsumer background terminology franz baader theoretical computer science tu dresden germany baader tcs inf tu dresden de methods computing common subsumer lcs usually restricted dls existing knowledge bases written expressive dls 
order allow user re concepts defined terminologies support definition new concepts computing lcs extend notion lcs concept descriptions notion lcs background terminology 
problem definition non standard inferences computing common subsumer support bottom construction dl knowledge bases introduced directly defining new concept knowledge engineer introduces typical examples objects automatically generalized concept description system 
description offered knowledge engineer possible candidate definition concept 
task computing concept description split subtasks computing specific concepts objects computing common subsumer concepts 
specific concept msc object common subsumer lcs concept descriptions 
cn specific concept description expressible dl language instance subsumes 
cn 
problem computing lcs limited extent msc investigated literature 
methods computing common subsumer restricted descriptions logics allowing disjunction allowing full negation 
fact languages disjunction lcs collection concepts just disjunction new learned building 
contrast languages disjunction lcs extracts commonalities collection concepts 
modern dl systems fact racer expressive dls exist large knowledge bases supported german research foundation dfg ba national ict australia limited canberra research lab 
expressive power processed systems 
order allow user re concepts defined existing knowledge bases support user definition new concepts bottom approach sketched propose extended bottom approach 
consider background terminology defined expressive dl 
defining new concepts user employs sublanguage computing lcs sense 
addition primitive concepts roles concept descriptions written dl may contain names concepts defined call concept descriptions concept descriptions 
definition tbox collection 
cn concept descriptions common subsumer lcs 
cn specific concept description subsumes 
cn concept description 
ci 
common subsumer 

concept description satisfying ci 

depending dls common subsumers concept descriptions tbox may exist 
note lcs uses concept constructors may contain concept names defined tbox 
main distinguishing feature new notion common subsumer background terminology 
illustrate small example 
example assume dl el allowing conjunction existential restrictions top concept alc extending el negation disjunction value restrictions 
consider alc tbox assume want compute lcs el concept descriptions obviously lcs allowed name defined common subsumer el top concept 
assume dls tbox talk common subsumers mean ones 
section consider case el alc detail 
show results acyclic alc tbox lcs el concept descriptions exists general alc tbox allowing general concept inclusion axioms gcis lcs el concept descriptions need exist 
sight assume result shown results approximation dls 
fact acyclic alc tbox el concept descriptions 
cn unfold 
cn alc concept descriptions 
build alc concept description 
approximate el concept description contain concept names defined necessarily el concept description subsuming 
cn see example 
assume overcome applying known results rewriting concept descriptions terminology 
example concept description obtained approach approximation sketched concept rewritten tbox 
result existence computability lcs background terminology shown section theoretical sense yield practical algorithm 
section follow practical approach 
assume dl common subsumers background tbox exist 
concept descriptions 
cn compute common subsumer just ignoring treating defined names 
cn primitive computing lcs 
cn 
section sketch practical methods computing common subsumers background tboxes may common subsumers better common subsumers computed just ignoring tbox 
exact theoretical results section assume el alc 
addition assume sets concept role names available building concept descriptions finite 
consider case acyclic tboxes 
theorem acyclic alc tbox 
lcs el concept descriptions exists effectively computed 
theorem easy consequence facts 
el concept description role depth necessarily distinct roles 
rk 
rk 
el concept description assume alc concept description obtained unfolding satisfiable role depth 
rk 
rk 
fact standard tableau algorithm alc applied constructs tree shaped interpretation depth root individual belongs 
rk 

bound role depth finite number inequivalent el concept descriptions role depth consequence fact assumed sets concept role names finite shown induction show facts imply theorem consider el concept descriptions 
cn 
unsatisfiable taken lcs assume ci satisfiable alc concept description obtained unfolding ci assume role depth 
take arbitrary el concept description common subsumer 
cn role depth 
ci contradiction facts 

fact 
implies equivalence finitely common subsumers 
cn el 
common subsumer simply conjunction finitely el concept descriptions 
hard see proof effective sense effectively compute representatives equivalence classes common subsumers 
cn build conjunction 
brute force algorithm probably useful practice 
second consider case tboxes allowing gcis 
theorem 
lcs el concept descriptions exist 
proof 
en denote el concept description 
role depth en common subsumer assume common subsumer role depth contains en contradiction 
contains easy see subsumer contains subsumer consequently common subsumer exist 
note example similar showing non existence lcs el cyclic terminologies interpreted descriptive semantics 
proof result complicated allowed extend terminology order build lcs 
practical approximative approach seen lcs general background tboxes need exist 
addition case acyclic tboxes lcs exists practical algorithm computing lcs 
bottom construction dl knowledge bases really necessary common subsumer common subsumer general 
section introduce approach computing common subsumers background tbox 
order explain approach recall lcs el concept descriptions computed 
may result fitting 
lcs el concept descriptions lcs concept descriptions obtained iterating application binary lcs describe compute lcs el concept descriptions order describe algorithm need introduce notation 
el concept description 
names denotes set concept names occurring top level conjunction roles set role names occurring existential restriction top level denotes set concept descriptions occurring existential restriction role top level el concept descriptions 
names names roles roles empty conjunction stands top concept 
recursive call founded role depth concept descriptions strictly smaller role depth 
common subsumer el background tbox background tbox acyclic general dl extending el subsumption class tboxes decidable 
el concept descriptions 
ignore tbox simply apply algorithm el concept descriptions compute common subsumer 
context names names best 
fact concept names may constrained tbox may relationships ignore simply intersection 
propose take smallest subsumption conjunction concept names subsumes names names modify lcs algorithm way top level input concepts recursive steps 
easy show el concept description computed modified algorithm common subsumer general common subsumer specific obtained ignoring need common subsumer 
simple example consider alc tbox child female child female child female doctor rich child female doctor happy child doctor el concept descriptions child child 
ignore tbox obtain el concept description child common subsumer take account subsumed concept obtain specific common subsumer child 
computing subsumption lattice conjunctions concept names order obtain practical lcs algorithm realizing approach described able compute efficient way smallest conjunction concept names subsumes conjunctions propose precompute information methods formal concept analysis fca 
fca knowledge application domain means formal context 
definition formal context triple set objects set attributes properties relation connects object attributes satisfied formal context 
set objects set attributes satisfied objects 
similarly set attributes set objects satisfy attributes 
formal concept pair consisting extent intent formal concepts hierarchically ordered inclusion extents order denoted induces complete lattice called concept lattice context 
formal context step analyzing context usually compute concept lattice 
applications large infinite set objects relatively small set attributes 
context necessarily explicitly cross table known domain expert 
situation ganter attribute exploration algorithm turned efficient approach computing appropriate representation concept lattice 
algorithm interactive sense certain stages asks expert certain questions context continues answers provided expert 
representation concept lattice computed certain questions lattice supremum concepts efficiently answered representation 
recall interested subsumption lattice conjunctions concept names may occur gcis concept definitions tbox 
order apply attribute exploration task define formal context concept lattice isomorphic subsumption lattice interested 
problem addressed objects context basically possible counterexamples subsumption relationships interpretations element interpretation domain 
resulting semantic context disadvantage expert context able deliver counterexample sufficient simple subsumption algorithm dl question 
needs subsumption problem able compute counterexample subsumption relationship hold interpretation element domain overcome problem new syntactic context defined definition context kt defined follows concept description 
set concept names occurring 
shown theorem concept lattice context kt isomorphic subsumption hierarchy conjunctions subsets 
decision procedure subsumption tboxes functions expert context kt noted formal concept analysis attribute exploration applied different context problem computing common subsumer 
problem addressed finite collection concept descriptions compute subsumption hierarchy common subsumers subsets extended subsumption hierarchy computed defining formal context concept lattice isomorphic subsumption general subsumption relation induces partial order lattice structure concepts 
case conjunctions concept names infima exist suprema 
lattice interested applying attribute exploration see details 
shown approach sketched seen instances approach 
extension dls expressive el dl ale extends el value restrictions atomic negation lcs algorithm similar described el exists 
main differences concept descriptions normalized may lead exponential blow ii recursive calls deal value restrictions just existential restrictions iii top level deal conjunction concept names negated concept names 
lcs algorithm conjunctions mentioned iii treated similarly case el contradictory separately computes intersections positive negative concept names 
adapting algorithm computes common subsumers ale background tbox change compute conjunction concept names negated concept names specific conjunction subsuming conjunctions tbox building intersections 
easy see attribute exploration precompute necessary information 
basically change concept names negated concept names attributes formal context 
attributes formal contexts introduced approach concept names possibly negated concept names independent 
example name negation disjoint possible object context satisfy addition tbox induces subsumption relationships attributes information may precomputed tbox classification 
try apply modified version attribute exploration background knowledge speed exploration process 
franz baader 
computing minimal representation subsumption lattice conjunctions concepts defined terminology 
ellis levinson fall dahl editors knowledge retrieval storage efficiency proc 
st int 
kruse symposium pages 
franz baader 
computing common subsumer description logic el terminological cycles descriptive semantics 
proceedings th international conference conceptual structures iccs volume lecture notes artificial intelligence pages 
springer verlag 
franz baader 
common subsumers specific concepts description logic existential restrictions terminological cycles 
georg gottlob toby walsh editors proceedings th international joint conference artificial intelligence pages 
morgan kaufmann 
franz baader ralf sters 
computing common subsumer specific concept presence cyclic aln concept descriptions 
proc 
th german annual conf 
artificial intelligence ki volume lecture notes computer science pages 
springer verlag 
franz baader ralf sters ralf molitor 
computing common subsumers description logics existential restrictions 
proc 
th int 
joint conf 
artificial intelligence ijcai pages 
franz baader ralf sters ralf molitor 
rewriting concepts terminologies 
proc 
th int 
conf 
principles knowledge representation reasoning kr pages 
franz baader ralf molitor 
building structuring description logic knowledge bases common subsumers concept analysis 
ganter mineau editors conceptual structures logical linguistic computational issues proceedings th international conference conceptual structures iccs volume lecture notes artificial intelligence pages 
springer verlag 
franz baader 
applying formal concept analysis description logics 
eklund editor proceedings nd international conference formal concept analysis volume lecture notes computer science pages sydney australia 
springer verlag 
brandt 
sters 
extensions non standard inferences description logics transitive roles 
vardi voronkov editors proceedings tenth international conference logic programming automated reasoning lpar lncs 
springer 
sebastian brandt ralf sters 
approximation difference description logics 
fensel giunchiglia 
williams editors proceedings eighth international conference principles knowledge representation reasoning kr pages san francisco ca 
morgan kaufman 
william cohen haym hirsh 
learning classic description logics theoretical experimental results 
doyle sandewall torasso editors proc 
th int 
conf 
principles knowledge representation reasoning kr pages 
michael frazier leonard pitt 
classic learning 
machine learning 
bernhard ganter 
finding closed sets general approach 
order 
bernhard ganter 
attribute exploration background knowledge 
theoretical computer science 
bernhard ganter rudolf wille 
formal concept analysis mathematical foundations 
springer verlag berlin 
volker haarslev ralf ller 
high performance reasoning large knowledge bases practical case study 
proc 
th int 
joint conf 
artificial intelligence ijcai 
volker haarslev ralf ller 
racer system description 
proc 
int 
joint conf 
automated reasoning 
ian horrocks 
expressive description logic fact fiction 
proc 
th int 
conf 
principles knowledge representation reasoning kr pages 
ralf sters alex borgida 
attribute 
consequences common subsumer 
journal artificial intelligence research 
ralf sters ralf molitor 
approximating specific concepts description logics existential restrictions 
franz baader gerd brewka thomas eiter editors proceedings joint german austrian conference artificial intelligence ki volume lecture notes artificial intelligence pages vienna austria 
springer verlag 
ralf sters ralf molitor 
computing common subsumers alen proc 
th int 
joint conf 
artificial intelligence ijcai pages 
alan rector ian horrocks 
experience building large re usable medical ontology description logic transitivity concept inclusions 
proceedings workshop ontological engineering aaai spring symposium aaai stanford ca 
aaai press 
stefan schultz udo hahn 
knowledge engineering large scale knowledge reuse experience medical domain 
anthony cohn fausto giunchiglia bart selman editors proc 
th int 
conf 
principles knowledge representation reasoning kr pages 
morgan kaufmann 
