trust serv model driven lifecycle management trust negotiation policies web services university new south wales sydney nsw australia cse unsw edu au scalable approach trust negotiation required web service environments large dynamic requester populations 
introduce trust serv model driven trust negotiation framework web services 
framework employs model trust negotiation state machines extended security abstractions 
policy model supports lifecycle management important trait dynamic environments characterize web services 
particular provide set change operations modify policies migration strategies permit ongoing negotiations migrated new policies disrupted 
experimental results show performance benefit strategies 
proposed approach implemented mechanism transparent web services developers web services simplifying web service development management enabling scalable deployments 
categories subject descriptors management computing information systems security protection information storage retrieval online information services general terms security management keywords conceptual modeling lifecycle management trust negotiation web services 
traditional access control models rely knowing requester identities advance 
web services typically large dynamic requester populations 
means requesters identities seldom known advance 
existing web applications deal strangers requiring register identity web site 
approaches fit web service philosophy dynamically choosing services run time 
trust negotiation access control model addresses issue avoiding requester identities access control policies 
access granted trust established negotiation service requester provider 
copyright held author owner 
www may new york new york usa 
acm 
benatallah university new south wales sydney nsw australia cse unsw edu au fabio casati hewlett packard laboratories palo alto ca usa fabio casati hp com negotiation called trust negotiation requester provider exchange credentials 
credentials signed assertions describing attributes owner 
examples credentials include membership documents credit cards 
attributes credentials determine access 
instance requester may access resources disclosing credential proving employee 
example shows requester identity needed determine access 
credentials typically implemented certificates 
trust negotiation systems exist issues need addressed trust negotiation policy specification :10.1.1.1.6443
trust negotiation policies specify credentials resources disclose state trust negotiation conditions disclose 
specifying trust negotiation policies existing policy languages complex task generally requires time consuming error prone low level programming 
trust negotiation policy lifecycle management 
lifecycle management policies creation evolution management policies overlooked part policy model design 
policies rarely set stone defined 
modified refined reflect changing business strategies 
lifecycle management policies especially valuable dynamic environments characterize web services 
enterprise security policies change mergers acquisitions internal reorganization emerging competitors new products updated processes changes laws regulations issues considered lifecycle management frameworks include update trust negotiation policies consistent manner cope dynamic policy evolution change policy active negotiations policy modified 
issue particularly challenging due need minimizing disruption current requesters making sure new policy applied 
propose model driven approach trust negotiation web services 
framework called trust serv features trust negotiation policy model state machines 
importantly model supported abstractions tools permit lifecycle management trust negotiation policies 
salient features remainder terms trust negotiation negotiation interchangeably 
specify trust negotiation policies provide modeling abstractions extend familiar state machine model 
abstractions provide expressiveness required trust negotiation policy model representations level trust established credential disclosures provisions obligations 
trust serv supports lifecycle management trust negotiation policies instances 
introduce set change operations modify policies 
strategies allow evolution policies migration ongoing negotiations new policy 
automatically determine appropriate strategy negotiation meta policies 
meta policies specified independently negotiation policies 
additionally negotiation migration may cause negotiated access rights requesters revoked scheme compensate requesters 
trust negotiation access control managed automated software components called negotiation controllers 
negotiation controllers intercept messages directed web service control 
may accept reject operation invocation requests may initiate interaction negotiation controller party negotiate trust accepting invocation 
transparent web services 
service level interaction involves business logic services appears take place directly web services 
remainder structured follows 
start describing trust negotiation policy model section 
section proposed lifecycle management model 
section describes architectural support policy evolution negotiation migration implementation trust serv results experiments 
section describe model driven approach trust negotiation beneficial developers composite web services 
discuss related section conclude summary directions section 
modeling trust negotiation policies state machines trust serv expresses trust negotiation policies state machines formal semantics suited describing reactive behavior characterizes trust negotiations 
shows example trust negotiation policy service 
refer policy examples 
states states model represents level trust achieved requester far negotiation 
entering new state trust serv gives requester access resources 
trust serv identifies types resources operations web service protected credentials owned provider 
assigning resources directly states abstraction roles 
roles semantic abstractions describe function performed people processes author editor 
access control permissions assigned roles individual requesters 
trust serv policy model roles mapped states means roles state may activated acquired requester reaches state 
roles cumulative previously activated roles deactivated entering new state 
execute register customer gold member id min reviewer address credit card gold customer buyer credential disclosure provision timeout buyer role operation credential customer register search verified visa reviewer write review elite member gold customer special offers buyer purchase trust negotiation policy service 
example roles 
consider policy 
requester enters state requester allowed activate customer role 
activating role requester access service provider visa 
transitions trust serv transitions labeled conditions restrict may fired 
briefly semantics follows negotiation state event occurs satisfies condition transition input state negotiation moves output state requesters explicitly trigger events invoking operations credential disclosure 
transitions extended traditional state machines capture security abstractions necessary trust negotiation 
identified types transition conditions credential disclosures provisions obligations timeouts 
credential disclosure conditions require requester disclose credentials 
additionally may constrain permitted values attributes credentials 
transition labels start credential disclosure conditions 
conditions may specified number existing languages 
trust serv uses tpl trust policy language expressive describe credential disclosure conditions 
provisions obligations 
represent provisions service operations invoked negotiation proceed obligations promises requester invoke operation time 
transition state marked dashed line provision requires requester invoke register operation satisfy condition 
intention requesters possess credential may register service provide identity operation 
timeouts specify timed transitions 
action taken requester time transition state may forced timed transitions 
type transition abort abandoned negotiations forcing final state 
transition state marked dotted line timed transition requires requester take action minutes entering state trust negotiation controllers trust negotiation policies interpreted negotiation controllers 
service associated negotiation controller interprets service trust negotiation policy 
requester invokes operation service invocation intercepted controller 
controller may forward invocation service processing reject may initiate negotiation requester allow establish sufficient trust allow invocation 
requesters may deploy trust negotiation policies protect credentials interacting directly negotiation controller service 
task negotiation controller try achieve sufficient trust allow requester access desired resource limits requester trust negotiation policy 
requester policy constructs subset provider policy requesters may service operations focus provider policies 
illustrates controllers deployed perform trust negotiation behalf requesters providers 
advantage architecture trust negotiation occurs controller level 
service level interaction appears take place directly requester service provider 
eliminates need encode trust negotiation logic web service simplifies development deployment 
service level controller level policy requester negotiation controller provider web service negotiation controller policy interaction service requesters providers 
trust negotiation managed automated negotiation controllers takes place controller level 

lifecycle management trust negotiation dynamic web service environments policies need modified accommodate changing business strategies 
changes laws regulations force enterprises update policies 
security holes may discovered need rectified 
general lifecycle management recognized important problem studied different domains see 
focus address lifecycle management problem context trust negotiation policies web services conceptually terms supporting tools architectures 
lifecycle management trust negotiation policies important issue properly addressed lead policy breaches lower service quality slower response time 
assume new policy defined service 
new negotiations start simply aborting restarting current negotiations appropriate reasons 
considerable amount may lost number ongoing negotiations may high aborting restarting cause severe disruption dependent services 
instance popular web site amazon com suddenly aborted customer transactions current customers repeat steps purchasing process 
cause customer frustration ultimately lead loss income service customers seek services 
problem critical case long running services purchase order approval employee relocation management likelihood having policy changes service execution amount lost aborting service increase significant way 
possible service modify policy disrupting ongoing negotiations 
ad hoc approaches policy evolution negotiation migration encounter scalability problems web service environments 
due potentially large requester populations number concurrent negotiations large 
infeasible manually manage policy evolution 
address problem propose framework enables automated policy lifecycle management built top trust negotiation model earlier 
basic definitions section introduces definitions describe approach lifecycle management trust negotiation 
describe trust negotiation policy tuple states roles states set states set transitions roles set roles protected transition assignment function associating transition source state target state role assignment function associating role set states 
domains domains follows denotes powerset states states roles states notice role may mapped states roles may mapped state 
states policy show examples properties 
reaching state requesters may activate gold customer role 
requesters may acquire role reaching state state considered legal syntactically correct negotiation policy meet certain criteria 
introduce definitions formally define legality negotiation policy remainder omit policy identifier ambiguity arises context 
initial state policy single initial state states 
successor function successor function maps state set states succeeds 
defined states successor transitive closure transitive closure successor function denoted maps state set successors recursively 
defined reachability state reachable iff successor transitive closure initial state 
incoming outgoing transitions outgoing transitions function maps state set transitions source 
similarly incoming transitions function maps state set transitions target 
defined tr tr states tr tr tr states tr source target states source state target state transition tr defined tr tr tr definitions place may define policy legality 
definition legality 
trust negotiation policy legal iff state reachable initial state 
formally states policy change operations allow policy updates necessary provide set change operations applied policy 
operations need carefully constructed ensure satisfy desirable properties 
firstly set operations ensure structural consistency 
means result applying operation legal policy result legal policy 
additionally means changes may cause ongoing negotiation situation clear proceed process incoming operation invocations 
secondly set operations complete 
means operations possible transform legal policy legal policy set change operations minimal 
set minimal proper subset complete 
important result structural consistency requirement removing states delicate process 
firstly policy developer wants remove state policy sure remaining states reachable 
secondly negotiations currently state left inconsistent state behavior instances undefined 
handle problem specify reachability requirement precondition operation remove states 
second problem handled rolling back instances state previous states 
having set operators complete minimal structurally consistent guarantees operators changes policy avoiding generation illegal policies 
avoids burdening model unnecessary change operations framework complex adding value 
properties define set change operations called primitives 
definitions detail preconditions effects primitives 
assume policy modified resulting updated policy transition tr state state primitive adds transition tr policy source state target state precondition states tr effect 
tr 
tr transition tr primitive removes transition tr policy 
precondition states transition target tr 
maintains structural consistency ensuring state reachable initial state 
precondition tr tr tr effect 
tr tr 
tr role state primitive adds role policy maps state precondition states effect 
roles roles 
role state primitive removes mapping role state may mapped states removed roles mapping role 
precondition true effect 

roles roles state state transition tr primitive adds state policy successor state transition tr added state state formal semantics precondition states states tr effect 
states states 
tr state primitive removes state policy 
removed roles mapped unmapped transitions removed 
precondition states target states outgoing transitions reachable outgoing transitions removed 
formal semantics precondition tr tr effect 
role 
transition 
states states firstly primitives complete trust negotiation policy may developed initially transforming state machine initial state 
secondly primitives minimal deal insertion removal distinct concepts transitions roles states 
consistent applying primitive legal policy policy remains legal 
proofs properties lengthy intuitive omitted 
lifecycle management negotiation instances policy changed decisions taken handle ongoing negotiation instances negotiations began different policy 
identify strategies manage negotiation instances policies changed 
strategies designed different strategies may applied instance 
assume initial policy modified resulting final policy obvious strategies allow instances complete policy begun abort instances restart new policy 
detail concurrent completion 
negotiation progress allowed complete means enforcement system need enforce policy time 
done creating negotiation controller instance policy 
controller instance enforcing destroyed negotiations completed 
strategy applicable provider tolerate existing negotiations completing cases provider may allow happen 
instance change applicable laws means provider modify operation satisfy new requirements 
strategy unacceptable situations 
abort 
negotiation instance aborted roles attained requester deactivated 
depending implementation new negotiation instance may created place aborted instance 
main drawback strategy may waste lot done 
requester provider may negotiated high level trust strategy applied negotiation start 
inadequacy previous strategies emphasizes need better efficient solutions problem 
involves allowing ongoing negotiation instances migrated new policy 
care needs taken migrating negotiations avoid undesired results 
example compliance 
consider policy 
suppose credential disclosure transition states modified follows requester submit credit card credential 
time condition credit card credential removed transition states resulting policy shown provision transition timed transition removed clarity presentation 
requester may reached state disclosing credit card credential 
policy modified requester state negotiation migrated requester able proceed state activate role disclosing credit card 
may acceptable provider 
example suggests negotiations satisfy condition order effectively migrated condition negotiation instance far compliant negotiation instance compliant negotiation policy valid instance policy 
able define compliance introduce variables relating negotiation policy state denotes state currently 
initial value variable initial state credit card id customer gold member reviewer address gold customer buyer buyer modified trust negotiation policy service 
denotes ordered set states visited far set initialized contain initial state states appended set soon requester enters state denotes set roles currently active denotes transitions taken reach definition compliance 
trust negotiation instance compliant trust negotiation policy conditions hold 
states 
roles 
definition states policy contain states visited ii active roles mapped states visited iii transitions fired source target states visited definition compliance strategies migrating running negotiation instances new policies 
migration new policy 
negotiation migrated negotiation instance compliant migration said unconditional 
instance compliant migration conditional 
conditional migrations require negotiation instance trace back steps policy reaches state compliant rollback necessary appropriate roles deactivated migration 
migration hybrid policy 
rolling back negotiation instances temporary policies may defined negotiations 
ad hoc policy hybrid function modify existing negotiation instances comply requirements causing policy change strategy useful policy modification critically important rollback considered disruptive 
example negotiation migration 
consider policy service shown 
suppose provider changed policy explained example resulting policy shown 
suppose current negotiation reached state activated reviewer role policy change occurred 
provider uses abort strategy negotiation canceled restarted 
simple considered suboptimal solution lost 
concurrent completion strategy lets negotiation continue old policy 
provider decide allow 
unacceptable provider choose strategy 
migration new policy strategy system determines negotiation compliant new policy 
transition states fired negotiation 
transition changed new policy negotiation compliant new policy 
trust serv rolls back negotiation state deactivates negotiation resumes new policy 
strategy selection number concurrent negotiation instances large infeasible provider manually examine instance determine strategy apply 
sets rules describe management policies 
result evaluation negotiation instance determine appropriate strategy instance 
call meta policies strategy selection policies 
strategy selection policy consists sequence rules 
rule parts condition variables negotiation instances migration strategy associated policy 
condition set logic statements state restrictions permissible values negotiation instance variables 
rule policy true condition 
rule called default rule rules match 
strategy part rule contains evolution strategies 
contains policy instance migrated condition evaluates true 
negotiation instances evaluated rules turn match 
negotiation instance satisfies condition rule matching ceases instance migrated specified policy specified strategy 
notice rules define partition set ongoing negotiations meaning ongoing negotiation exactly strategy 
example strategy selection policy 
shows example strategy selection policy 
policy modified achieve policy 
rule states instances visited state aborted 
rule states negotiation instances visited state migrated new policy rule default rule specifies instances allowed complete current policy honoring obligations requesters issues regarding implicit agreements requesters may arise policies changed negotiation underway 
provider informs requester acquire desired role state providing credential implicit obligation provider requester 
essentially provider just promised requester submit single credential access role suppose provider wishes change policy removing mapping role state applying prim rule id condition variable variable set set condition strategy name abort policy null rule rule id condition notin const const variable variable notin condition strategy name migrate new policy policy rule rule id type default strategy name concurrent completion policy rule strategy selection policy 
itive 
negotiation instance migrated new policy requester submitted credential activated role deactivated 
requester disclosed avail able acquire promised provider 
vital importance lifecycle management model provides ways handle issues 
trust serv trust negotiation policy model policy change cause situation removal role state mappings 
avoid situations promises requester broken necessary deactivate roles activated requesters role mappings moved removed 
letting requesters keep roles promised resources available requesters implicit agreement broken 
situations policy upgrade considered vital service provider 
instance discovered previous trust negotiation policy weak allowed requesters obtain resources able obtain 
violations breach laws cases allow access privileged information 
possible allow requesters keep roles case policy updates instance migration 
address issue introduce set options may taken negotiation instances migrated new policy role mapping removed 
options executed provider negotiation controllers 
permit role delayed provides compensation requester obligations 
delay role deactivation 
provider instructs negotiation controller delay role specified time 
notice sent affected instances informing privileges soon revoked forced role deactivation 
gives requesters grace period adapt change exercising privileges achieved far negotiation 
compensate requester 
provider instructs controller deactivate affected roles immediately sent affected requesters 
requesters offers issued provider 
compensation take forms including financial compensation 
trust serv associate compensation role role trust negotiation policy 
means role deactivated due migration policy provider may offer membership compensation role requester 
role may give requester access various forms compensation offered service 
example compensation 
shows fragment definition role customer 
specifies requester member role membership deactivated negotiation migration requester member compensation 
requester decide 
final option lets requester decide previous options delay role deactivation compensate requester 
affected negotiations suspended negotiation controller issues notifications requesters asking preferred way dealing issue 
requester replies choice instance resumed controller takes action indicated requester reply 
role name gold customer compensation role discount 
role example specification compensation role 
note policy update involve removal state mappings primitive issue arise 
role mappings removed chosen strategy instance concurrent completion update affect instance action necessary 

architecture implementation order support trust negotiation model described propose architecture trust serv specifically targeted web service environments 
trust serv architecture goal architecture substantially increase level automation web service development deployment respect available today 
achieve factorizing middleware chores common development web services 
trust serv architecture introduces notion web service containers manage internal behavior underlying service interactions service requesters partners 
containers provide functionality necessary web services support trust negotiation functionalities conversation management exception handling 
run time operation service container directed policies trust negotiation policies may defined individual groups web services 
advantage architecture developers want create new service simply need implement business logic service specify trust negotiation policy 
tasks controlling negotiation instances verifying credentials delegated container considerably simplifying development 
overview extended architecture shown 
container role privileges negotiation modeler requesters negotiation controllers negotiation policies web service provider credentials service container architecture 
negotiation controllers implemented web services provide capabilities participate trust negotiations 
runtime negotiation controllers responsible receiving negotiation messages credential disclosures service requests determining new negotiation instances created triggering transitions conditions met 
messages sent negotiation instances service instances soap requests responses 
information needed controllers control trust negotiations provided translating state machine representation trust negotiation policies rules 
due space reasons discuss 
details translation 
negotiation controllers able intercept invocations protected service implementing operations defined interface service wsdl document 
operations interface negotiation controller simply acts mediator 
invocation permitted implementations operations negotiation controllers consist call corresponding operation protected service 
requesters interact protected service indirectly negotiation controllers 
support lifecycle management trust serv offers negotiation modeler case tool web service trust negotiation policies 
assists developers specifying modifying negotiation policies 
additionally allows policy developers define strategy selection policies xml documents 
negotiation policy edited visual interface 
interface offers editor describing state machine diagram negotiation policy 
provides means describe conditions transitions 
modeling functions available policy developer members set primitives defined policy model 
additionally interface allows complex functions built primitives 
constructed functions available editor 
shows screenshot negotiation modeler interface 
implementation evaluation implementation trust serv extension self serv platform 
self serv middleware supporting web service development standards soap wsdl web service description language uddi universal description trust negotiation modeler interface 
discovery integration 
test scalability trust serv focused performance advantages lifecycle management framework 
migration strategies migrates negotiation instances updated policy 
strategies trust negotiation frameworks forced abort negotiation instances restart new policy 
measure performance advantage experiments implemented java run sun jdk amd athlon ghz mb memory 
scaling high number negotiations important web services frequently requesters 
similarly scaling complex policies states important property web service policies complex 
complicated laws regulations apply services offered trust negotiation policy enforce laws 
measure benefits migration strategies generated number ongoing negotiations various states policy create policy changing primitives 
migration strategies assume credentials submitted far requester kept cache provider 
information controller new policy advance restarted negotiation new policy credential disclosures requester 
measured time took controller evaluate information move negotiation close possible target state information submitted requester policy change 
compare measured time took evaluate negotiations strategy selection policy migrating instances accordingly advancing close possible target state information submitted manner similar migration strategies 
performance advantage come fact policy evaluation start initial state policy state new policy negotiation migrated 
course measurements highly dependent changes strategy selection policy 
strategy selection policy set abort nearly negotiation instances performance negotiation strategies similar performance negotiation strategies 
conversely negotiation instances allowed complete old policy migration strategies clearly give better performance 
avoid favoring options migration strategies focused migration new policy strategy 
strategy determine negotiation instance complies new policy 
compliant negotiations easily migrated new policy 
non compliant negotiations hand rolled back migrated new policy advanced new policy far possible credentials disclosed requester 
designed policy update cause half active negotiations migrated unconditionally half non compliant rolled back 
graphs show performance migration strategies 
graph left shows time taken negotiations aborted restarted graph right shows time taken negotiations migrated 
approach tested policies different number states different number negotiation instances 
tests run times result run thrown away ensure issues initialization affect final result 
times taken remaining runs averaged achieve times seen graphs 
times vertical axis show performance benefit migration strategies 
see graphs increasing number states causes linear increase time taken migrate negotiation instances 
similarly increasing number negotiation instances causes linear increase migration time 
shows migration strategies trust serv scales high number negotiations complex trust negotiation policies states 

joint analysis composition trust negotiation logic model driven approach trust negotiation provides benefits developers composite web services 
composite web service umbrella structure aggregates multiple elementary composite web services 
composition services interact process model 
example composite web service travel planner may aggregate multiple web services flight booking travel insurance accommodation booking car rental itinerary planning executed sequentially concurrently 
process model underlying composite service specified formalisms state charts emerging standard composition languages bpel ws business process execution language web services 
identified composition scenarios trust negotiation model helpful 
generation composite service trust negotiation policy scenario assume composition model defined service developer 
problem lies inferring trust negotiation policy composite service composition model trust negotiation policies component services 
useful cases developer starts defining composition model needs derive trust negotiation policy composite service supports 
example assume operation opc composite service sc implemented invoking operation op service 
evaluation time vs 
states 
negotiations 
states time ms 
negotiations migration time vs 
states 
negotiations 
states time ms 
negotiations evaluation performance advantages migration strategies 
graph left shows time taken abort restart reevaluate negotiations respect new policy 
graph right shows time taken evaluate negotiation instances strategy selection policy determining instances comply new policy migrating negotiation instances reevaluating instances migrated unconditionally state new policy migrated 
condition invoking op trust negotiation policy requires credential cc disclosed condition added condition invoking opc policy sc 
generation composition model useful approach consists guiding service developer designing composition model composite service trust negotiation policy composite service support 
useful instance cases standardization body defined characteristics including trust negotiation policies certain service support 
developer faced problem designing composition model choosing component services implement standardized trust negotiation policy 
assist developer effort possible automatically generate skeleton composition model starting trust negotiation policy composite service support 
developer may extend skeleton business logic required implement service functionality 
instance consider operation opc composite service sc implemented invoking operation op service operation op service parallel 
standardized trust negotiation policy sc states condition invoking opc cc chosen cc conditions invoking op op policies respectively 
composite service trust negotiation policy validation trust negotiation policies composite service component services composition model composite service abstractions trust negotiation model prove useful checking correctness trust negotiation policy composite service respect composition model trust negotiation policies component services 
essentially want avoid invocations operations component services composite service requester composite service right invoke operations 
example consider operation opc composite service sc implemented invoking operation op service 
trust negotiation policy states condition invoking op condition cc invoking opc trust negotiation policy sc represents additional conditions invoking opc specified trust negotiation policy sc 
case validation fails 
instance cc validation fails allow op invoked satisfying 

related related efforts providing policy languages trust negotiation 
existing languages include early works policymaker keynote efforts ibm tpl trust policy language rt family role trust management languages portfolio service protection language sec 
trust serv complementary efforts tpl describe credential disclosure conditions 
hand trust serv provides lifecycle management framework support evolution trust negotiation policies 
best knowledge existing policy languages includes support dynamic policy evolution 
visual model representing trust negotiation policies state machines related visualization efforts ibm trust establishment te framework 
te allows policies specified graphs nodes represent roles edges show roles accepted issuers credentials membership roles 
framework includes editor allows policies edited graphs 
te support trust negotiation support dynamic policy evolution 
graphs specify policies studied yu 
aim policy graphs prevent unnecessary policy disclosure trust negotiation 
model resource assigned policy form graph 
policy attached node policy revealed client reaching predecessor node 
policy specifies credential disclosures required client may reach node reveal policy 
important differences policy graph model policy state machine model 
firstly policy graph protect resource state machine policies trust serv protect number resources 
secondly model extends traditional state machines security abstractions provisions obligations 
model supports lifecycle management trust negotiation policies negotiation instances 
concept trust negotiation borrows 
framework focuses trust negotiation strategies protocols 
negotiation strategies control credentials disclose disclose terminate negotiation 
strategies designed policies 
policy determines credential may disclosed strategy determines disclosure necessary take place 
trust serv complimentary adds support dynamic policy evolution 
addition features container centric architecture implementation designed web services permits scalable deployment trust negotiation infrastructure 
bertino introduced model specifying enforcing authorization constraints workflow management systems 
policy model uses state machines common representation process systems workflows model works different level workflow authorization model 
model proposed specifies authorizations individual tasks business process 
processes executed internally possibly publicly exposed interfaces 
model hand considers public interfaces exposed web services 
state machines model represent business processes policies restrict access exposed interfaces business processes 
important difference model support lifecycle management policies 
trust serv provides scalable implementation trust negotiation web service environments 
dynamic evolution trust negotiation policies presents unique challenging issues 
firstly number ongoing negotiations may large introduced strategy selection policies automatically determine appropriate strategy negotiation instance 
secondly negotiation involves parties requester provider address issues implicit obligations compensation privileges removed due negotiation migration 
regard trust serv provides novel architecture scalable deployment trust negotiation lifecycle management support web service environments 

trust serv trust negotiation framework access control web services 
particular emphasized lifecycle management important issue date addressed 
shown security abstractions modeled extensions traditional state machines 
formalization model policy evolution primitives negotiation instance migration strategies strategy selection policy language allow running negotiations efficiently migrated new policy 
shown framework implements service containers enable scalable deployment 
chosen web services target applications results applicable forms services provided networks 
promising area includes expanding model handle composition web services 
approach composite web services principles discussed joint analysis trust negotiation service composition 
enable composition necessary study compatibility requester provider policies 
policies requester provider possible establish sufficient trust parties facilitate desired interaction 
subject previous research investigating application model 

benatallah sheng dumas 
self serv environment web services composition 
ieee internet computing jan feb 
bertino ferrari 
specification enforcement authorization constraints workflow management systems 
acm trans 
information system security feb 
bertino ferrari 
xml language trust negotiations 
proc 
th int workshop policies distributed systems networks policy june 
bettini provisions obligations policy management security applications 
proc 
th conf 
large data bases vldb aug 
samarati 
unified framework regulating access information release web 
computer security 
casati workflow evolution 
data knowledge eng jan 
curbera unraveling web services web soap wsdl uddi 
ieee internet computing mar apr 
proposed nist standard role access control 
acm trans 
information system security aug 
sloman 
survey trust internet applications 
ieee comm 
surveys tutorials 
herzberg access control meets public key infrastructure assigning roles strangers 
proc 
ieee symp 
security privacy may 
internet public key infrastructure certificate crl profile 
ietf rfc jan 
li mitchell 
rt role trust management framework 
proc 
rd darpa information survivability conf 
exposition discex apr 

liu 
chang chrysanthis 
database schema evolution diagrams 
proc 
acm workshop advanced visual interfaces avi june 
rees bandyopadhyay spafford 
policy framework information security 
comm 
acm july 
benatallah casati 
model driven trust negotiation web services 
ieee internet computing nov dec 
thatte ed 
business process execution language web services bpel ws version 
www ibm com developerworks library ws bpel may 
yu winslett seamons 
supporting structured credentials sensitive policies interoperable strategies automated trust negotiation 
acm trans 
information system security feb 
