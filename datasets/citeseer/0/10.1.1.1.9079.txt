annotation management system relational databases bhagwat laura wang tan university california santa cruz email laura gaurav cs ucsc edu annotation management system relational databases 
system piece data relation assumed zero annotations associated annotations propagated source output data transformed query 
annotation management system important understanding provenance quality data especially applications deal integration scientific biological data 
extension psql fragment sql different types annotation propagation schemes useful different purposes 
default scheme propagates annotations data copied 
default scheme propagates annotations data copied equivalent formulations query 
custom scheme allows user specify annotations propagate 
storage scheme annotations describe algorithms translating psql query propagation scheme sql queries correctly retrieve relevant annotations specified propagation scheme 
default scheme show generate finitely queries simulate annotation propagation behavior set equivalent queries possibly infinite 
algorithms implemented feasibility system demonstrated set experiments conducted 
scientific domains new databases created support data analysis needs domain specific scientists 
examples databases biology include swiss prot 
data collected sources reformatted supported part nsf career award iis 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference toronto canada gaurav compiled new database 
newly created database contain new analysis results derived scientists 
associating old new data new database integrated perspective provided scientists critical analysis scientific discovery 
proliferation inter dependent databases natural ask provenance piece data piece data copied created database 
understanding provenance data important understanding quality data may help example scientist decide amount trust place piece information encounters database 
term annotations mean information data provenance comments types metadata 
describe annotation management system relational databases annotations may attached piece data transparently carried data transformed 
immediate application annotations systematically trace provenance flow data attach piece source data annotation describes address origins annotations piece data output transformation describe provenance 
data undergone transformation steps easily determine origins flow data matter transformation steps examining annotations 
annotations describe information data kept database 
example error report remarks piece data may attached propagated databases notifying users error additional information 
quality security level piece data described annotations 
annotations propagated query executed annotations result query aggregated determine quality degree sensitivity resulting output 
idea annotations describe security level various data items specify finegrained access control policies new various forms existing literature 
describe propagation schemes propagating see catalog biology databases 
annotations motivated different needs 
correspond default default custom propagation schemes 
default scheme uses provenance basis propagating annotations 
output piece data copied input piece data annotations associated propagated piece output data copied input piece data created syntax evaluation query 
natural definition corresponds intuitively people reason provenance way annotations propagated dependent way query written 
shown equivalent queries may propagate annotations differently 
behavior may disturbing applications including described automatic provenance annotation propagation scheme allows trace data copied copied query desirable 
similar ideas proposed 
alternative method propagating annotations called default scheme propagate annotations data copied equivalent formulations query may interested obtaining relevant annotations piece data output regardless query may written 
default scheme equivalent queries propagate annotations way scheme 
cases user may interested annotations provided certain trusted data source 
third propagation scheme custom propagation scheme user free specify annotations propagated 
summary results implemented propagation schemes annotation management system extending fragment sql 
call extension psql 
psql query essentially sql query extended propagate clause propagate annotations schemes described data transformed 
implementation assume additional column stores annotations attribute relation 
translation algorithm translates psql query spj queries underlying relations spj queries retrieve relevant annotations specified propagation scheme 
default scheme required propagate annotations possible equivalent reformulations query 
sight default scheme impossible implement infinitely equivalent reformulations query 
show possible find finite set equivalent queries annotation propagation behavior representative equivalent queries 
running query finite set union resulting tuples annotations able obtain annotated output query default scheme 
conducted experiments evaluate feasibility annotation management system 
experimental results indicate execution time query propagation scheme increases slightly number annotations database doubled 
results show queries executed performance query default scheme worst times slower performance query default propagation scheme sql query 
best runs twice slow 
default scheme execution times psql queries comparable sql queries 
average psql queries default scheme experimented mb database took time execute corresponding sql queries 
larger databases mb gb psql queries default scheme took time execute corresponding sql queries average 
related problem computing data provenance new 
cui widom wiener approached problem tracing provenance data result query applied relational database 
solution proposed generate reverse query tuple result query asked compute provenance output applied database 
result applying consists combinations source tuples combination source tuples explain output type provenance studied called provenance buneman khanna tan 
additionally may interested knowing values tuple result copied type provenance called provenance type provenance determining annotations propagated 
works reverse query generated order answer provenance 
reverse query approach works general requires reverse query generated evaluated time provenance output tuple sought 
provenance large number output tuples required may optimal way compute provenance 
reverse query approach call lazy approach computing provenance query generated executed compute provenance needed 
propose trade space time carry provenance data data transformed 
approach provenance data eagerly computed immediately available output 
idea eagerly computing provenance forwarding annotations data transformations new proposed various forms existing literature 
fact annotation propagation rules propagate annotations provenance similar proposed 
information source relations value copied propagated 
contrast system flexible amount information carried result source relations ex act location source locations comment data 
numerous annotation systems built support manage annotations text html documents :10.1.1.41.4993
annotation systems genomic sequences built 
braverman discussed protocol design scalable annotation system html pages 
mazer brooks discussed specialized proxy module merge annotations annotation store web page retrieved sending client browser 
annotea effort support annotations web document 
annotations stored annotation servers xpointer pinpointing locations web document 
specialized client browser understand communicate merge annotations residing annotation servers web documents 
phelps wilensky discussed annotations certain desirable properties documents support documents different media types images postscript html 
das human genome browser specialized annotation systems genomic sequence data 
systems design includes multiple distributed annotation servers storing annotations data merged various sources display graphically user 
research systems focussed scalability design distributed support annotations added features 
designed implemented annotation management system relational databases annotations relational data 
idea proposed 
web pages rigid structure relations easy describe exact position annotation attached 
web pages retrieved part 
issue annotations propagate web page retrieved straightforward 
contrast annotated relation system may undergo complex transformation result executing query 
concerned annotations propagate complex transformations occur 
best knowledge implementation annotation management system relational databases allow user specify annotations propagate 
section describe psql different propagation schemes 
section describe algorithm generating finite set queries simulate annotation propagation behavior equivalent queries psql query 
section describe architecture system storage scheme annotations translation algorithm rewrites psql query sql query underlying storage scheme 
section describe experimental results sections conclude possible extensions system 
psql subsequent discussions focus fragment sql corresponds conjunctive queries union known select project join union fragment sql 
extend fragment sql propa gate clause allow users specify annotations propagate 
definition psql query query form union union psql query fragment form shown select distinct fromlist propagate default default fromlist psql query fragment form tuple variable corresponding relation psql query fragment form tuple variable defined fromlist attribute relation corresponds attribute name output relation 
clause optional conjunction equalities attributes relations attributes relations constants 
propagate clause defined default list clauses form definitions denotes attribute tuple bound attribute sql query corresponds psql query sql query results clauses removed 
meaning psql query similar corresponding sql query annotations propagated emitted tuple specification clauses 
example consider databases swiss prot protein database pir protein database genbank gene database 
databases modeled relation 
schemas instance relation shown ignore rest relations 
annotation shown braces placed column tuple 
annotation interpreted address value corresponding column tuple 
example psql query default propagation scheme shown 
select distinct idas id desc swiss prot id propagate default intuitively default scheme specified propagates annotations data data copied 
result executed relation swiss prot shown 
annotation attached value output copied id attribute second tuple swiss prot 
likewise output propagated swiss prot id desc ab cc ed pir id name ab ab mapping table swissprot pir genbank genbank id desc ab cc result id name ab ab result id desc cc result protein databases mapping table annotated outputs 
annotation desc attribute second tuple swiss prot 
default scheme natural scheme propagating annotations scheme robust equivalent queries return output may propagate annotations output 
example consider equivalent sql queries queries equivalent produce result database 
select distinct idas id name pir mapping table id pir select distinct id name pir mapping table id pir results running default propagation scheme shown 
result id name ab ab result id name ab ab annotations id column pir table annotations id column mapping table 
user realise generate different annotated outcome gen eral situation straightforward complex queries 
example motivates need propagation scheme invariant equivalent queries 
able retrieve relevant annotations piece output data regardless query written desired 
default propagation scheme propagates annotations data copied equivalent formulations query 
annotated outcome equivalent queries scheme 
case user prefers retrieve annotations source user free specify annotations propagate custom scheme 
example queries examples psql queries default custom propagation schemes respectively 
id desc ab cc select distinct idas id name pir propagate default genbank propagate id id select distinct idas id desc results shown 
query retrieves tuples pir table default propagation scheme 
annotations get result combined annotations results equivalent queries 
custom scheme tions propagated user specification id id desc id 
clause id id states annotations associated value id attribute tuple currently bound propagate id attribute output tuple 
similarly annotations associated value desc attribute tuple currently bound propagate id attribute output tuple 
terminology cell location triple denotes th column tuple relation attribute name position position write cell simply pair context relation clear 
cell contains value type 
denote value cell called piece data 
denote set strings 
cell database associated set annotations element say annotation attached notation denote set annotations attached cell containment vs annotation containment 
psql queries equivalent denoted database query contained denoted database psql queries annotation equivalent denoted produce annotated output databases 
precisely means database equal set annotations identical output location psql query annotation contained denoted database output location example shows examples annotated relations 
value swiss prot value cell swiss prot ab id denotes id column tuple ab swiss prot relation 
note attribute names tu ple ab omitted 
annotation set annotations associated cell 
ab name swiss prot ab id custom propagation scheme result allow user flexibility specify custom propagation schemes propagate clause form 
semantics psql query fragment custom propagation scheme follows 
binding tuple variables tuples respective relations fromlist conditions satisfied emit output tuple 
clause specified clause add set annotations location set annotations initially empty output location 
duplicate output tuples merged 
sup pose emitted tuples tuples result duplicate output tuples merged 
output location query example example psql query fragment custom propagation scheme tuple genbank emitted way set annotations associated id column output tuple union annotations associated column column corresponding tuple genbank 
default propagation scheme default psql query fragment set annotations piece output data consists annotations associated piece data copied source 
semantics psql query fragment default propagation scheme follows 
binding tuple variables tuples respective relations fromlist conditions satisfied emit output tuple corresponding sets annotations cell value output cell generated value input cell current bindings set annotations attached attached fi nally duplicate output tuples merged 
sup pose emitted tuples tuples result duplicate output tuples merged 
output location example suppose psql query fragment uses default propagation scheme 
select desc swiss prot propagate default union select desc genbank propagate default result desc ab cc ed subquery emits output tuple ab annotations second subquery emits output tuple ab annotations merged result tuples single output tuple ab annotations explains output tuple result 
similar reasoning applies rest output tuples 
easy see psql query fragment default propagation scheme translated psql query fragment custom propagation scheme 
example query example rewritten psql query custom scheme propagate clause replaced propagate id id desc desc id value desc value output tuple copied id desc respectively 
default propagation scheme psql query default propagation scheme essentially sql query annotations propagated value retrieved syntax query 
seen example psql queries default propagation scheme example equivalent 
motivates define third propagation scheme called default scheme annotation propagation behavior psql query invariant syntax query 
psql query default propagation scheme propagates annotations default propagation behavior equivalent formulations resulting tuples generated equivalent queries default scheme merged 
despite fact infinitely equivalent formulations describe method compute desired result examining finite number psql queries 
call finite set queries query basis definition denote psql query propagation scheme 
denote sql query corresponds denote set psql queries default propagation scheme equivalent query basis denoted finite set psql queries default propagation scheme describe algorithm finds query basis psql query default propagation scheme 
size query basis algorithm returns polynomial size generating query basis algorithm computing query basis psql query default propagation scheme proceeds generating representative query called intuitively representative query query equivalent attribute equal transitively equal attribute annotations propagated finite number auxiliary queries generated queries form query basis auxiliary query equivalent may propagate additional annotations output propagated intuitively finite number auxiliary queries needed auxiliary query needs generated attribute relation contributes annotations output 
rest discussion restrict language psql query fragments 
algorithm generating query basis psql query fragment default propagation scheme 
algorithm extended handle psql queries general details omitted 
algorithm generate query basis input psql query fragment default propagation scheme 
output query basis psql query fragment form shown definition default clause 

generate representative query generate query identical propagation scheme propagation scheme replaced attribute add clause 
attribute attribute equal transitively equal add gate clause 
effect attributes equal attribute annotations propagated 
generate auxiliary queries initialize empty set 
add attribute propagate clause create query identical suppose tuple variable relation fromlist add fromlist tuple variable occur add clause add 
auxiliary query equivalent additional annotations output 
may carry 
return example consider databases swiss prot pir genbank mapping table contains correspondences identifiers genes proteins databases 
mapping tables commonly occur integrating sources overlapping information 
suppose query integrates information swiss prot pir 
select distinct id name desc mapping table swiss prot pir swissprot pir id step algorithm obtain representative query select distinct id name desc mapping table swiss prot pir swissprot pir id propagate id id name desc note annotations swissprot id propagate output id column second step algorithm generates auxiliary queries 
query shown rest shown 
select distinct id pir name desc mapping table swiss prot mapping table swissprot pir id swissprot swissprot propagate id id name desc id query different additional highlighted terms shown extra relation condition propagation clauses respectively 
easy verify sql queries equivalent 
homomorphism tuple variables maps fromlist subset fromlist conditions imply conditions furthermore maps similarly homomorphism reverse direction 
equivalent intuitively representative query propagates annotations data copied data equivalently copied 
reason generated clearer represent conjunctive query notation equalities ery denote vectors variables ev variable occurs equalities list zero clauses variable occurs constant 
variables called distinguished variables 
subgoal corresponds relation fromlist select distinct id name desc mapping table swiss prot swiss prot pir swissprot pir id id propagate id id name desc id select distinct id name desc mapping table swiss prot swiss prot pir swissprot pir id desc desc propagate id id name desc desc select distinct id name desc mapping table swiss prot pir pir swissprot pir id name name propagate id id name desc name auxiliary queries generated step generate query basis example 
equalities attributes represented variable respective positions relations conjunctive query representation equality attribute constant written equalities 
head query represents denote conjunctive query representation sql query corresponds example example written mapping table swiss prot pir 
similar semantics psql queries default propagation scheme annotations propagated data copied queries tracing occurrence distinguished variables query 
example tracing occurrence variable query conclude annotations column output tuple obtained annotations second column tuple mapping table column tuple swiss prot created similar argument applies variables representative query example annotation equivalent proposition representative query generated generate query basis step algorithm generates query position body distinguished variable occurs example auxiliary queries conjunctive query notation generated annotation equivalent psql query fragments shown example respectively 
mapping table swiss prot pir mapping table 
mapping table swiss prot pir swiss prot 
mapping table swiss prot pir swiss prot 
mapping table swiss prot pir pir 
proposition query result generate query basis annotation contained denoted auxiliary query carries annotations output may missed representative query shall show set psql query fragments generated algorithm query basis prove lemma 
lemma denote result generate query basis psql query fragment denote psql query fragment default propagation scheme 
equivalent annotation contained proof 
know proposition representative query generated step algorithm annotation equivalent conjunctive query representation sql query corresponds easily verify equivalent queries minimal queries identical variable renaming 
convenience shall assume minimal queries identical form shown 
assume equalities variables constants convenience 
rest 
rest 
subgoals denoted subgoals minimal query rest rest denote rest subgoals respectively 
proof earlier result extended unions conjunctive queries 
conjunctive query notation denote head notation denote th subgoal var denote list variables th subgoal fact unions conjunctive queries variable occurs th position var th position var exists homomorphism 
maps body head body head 
variable occurs th position th subgoal var identical variable th position head var pre image subgoal var var shall show distinguished variable th position head occurrence th position th subgoal th variable body generated query homomorphism satisfies conditions stated fact 
fact know proposition 
distinguished variable th position head suppose occurs th position th subgoal subgoals subgoals algorithm generate query basis generated queries combined effect query shown rest 
variable occurs th position subgoal vectors distinct vari ables occur corresponds step algorithm new relation added clause clauses form added clause simulate effect propagating annotations output 
assume occurs attribute output attribute name named perspective 
occurs un der attribute output query generated step algorithm propagates annotations possible psql query combined annotation propagation effect equals easy see homomorphism desired properties required fact shown 
homomorphism obtained extending homomorphism know exists homomorphism extended mapping th variable corresponding th variable th variable th variable possible distinct variables 
clearly satisfies con ditions required fact 
subgoals rest claim subgoal subgoals similar argument shows homomorphism query desired conditions required fact annotation propagation behavior equal combined annotation propagation effect queries th variable occur psql query sql translator query rdbms postprocessor sorted tuples architecture system 
final result show subgoals rest exist subgoal homomorphism minimal query subgoal subgoals occurs th position subgoal 
conclude exists 
distinguished variable implies theorem psql query fragment default propagation scheme 
algorithm generate query basis returns query basis proof 
denote set psql query fragments default propagation scheme sql query corresponds equivalent algorithm generate query basis 
denote result running lemma im result 
proposition psql query fragment default propagation scheme number queries returned generate query basis polynomial size furthermore query generate query basis polynomial size observe auxiliary psql queries overlap significantly clauses see differ highlighted propagation 
fact show non highlighted propagations auxiliary queries unnecessary details omitted 
intuitively unnecessary propagations identical propagations representative query optimized implementation generate query basis non highlighted propagations generated auxiliary queries 
refer original implementation algorithm generate query basis unoptimized implementation 
system architecture architecture annotation management system illustrated 
main modules translator module postprocessor module 
translator module takes input psql query returns output sql query union spj queries sent rdbms 
sql query executed rdbms 
tuples returned rdbms sorted certain order sent postprocessor module merges annotations identical cells duplicate tuples pass returned tuples 
naive storage scheme represented store annotations naive storage scheme assume attribute relation scheme extra column store annotations 
denote new relation extra columns example relation naive storage scheme 
tuple relation annotations associated location tuples denotes projection attributes convenience relation name refer example instances shown valid representations tuple 
observe query returns result regardless underlying storage instance 
case cell distinct annotation denotes address define view definition internal row identifier database systems oracle postgres 
translator translator module takes input psql query translates sql query naive storage scheme 
psql query default default propagation scheme reformulated custom propagation scheme 
psql query custom propagation scheme reformulated sql query union spj queries 
algorithm reformulating psql query fragment default propagation scheme psql fragment custom propagation scheme described briefly section 
algorithm reformulating psql query fragment propagation scheme psql query fragment custom propagation scheme described generate query basis algorithm section 
describe algorithm reformulating psql query custom propagation scheme sql query 
algorithm custom psql sql input psql query fragment custom propagation scheme 
output sql query written naive schema 
psql query fragment form shown definition custom 

generate intermediate sql queries 
intermediate sql query retrieves annotations possible naive schema query query identical clause output attribute bin create empty bin denote bin 
propagate clause custom add bin 
empty set sql queries 
repeat bins empty query identical output attribute bin bin nonempty remove clause add bin union union empty add add 
generate wrapper sql query select distinct order list output attributes required postprocessor merge annotations identical tuples pass result 
return example consider swiss prot relation assume extra 
suppose psql query custom propagation scheme written swiss prot select idas id desc size swiss prot propagate desc desc size observe tuple swiss prot emitted way set annotations associated desc column tuple output union annotations associated corresponding tuple swiss prot 
furthermore annotations associated column tuple annotations associated column corresponding tuple swiss prot column id tuple output carry annotations 
step algorithm custom psql sql intermediate sql queries generated bin id empty bin desc id desc desc desc bin size size size select idas id id desc id desc size size size swiss prot select idas id id desc desc desc size size swiss prot step algorithm generates wrapper sql query select distinct union order id desc size observe result unioned sorted attributes tuples sorted postprocessor merge annotations associated identical cells output pass result customer supplier nationkey suppkey partsupp nationkey nation region seconds log scale default vs default unannotated db annotated db propagate default annotated db propagate default queries experiments comparison performance mb annotated database 
observe number sql queries equal maximum bin size 
postprocessor postprocessor scans set tuples returned rdbms unions annotations duplicate tuples proper display 
operation done linear time number size tuples retrieved provided set emitted tuples sorted 
example postprocessor receives table section input returns experimental evaluation conducted experiments evaluate feasibility annotation management system 
main goal compare performance queries different propagation schemes default default propagation scheme sql queries compare performance queries number annotations database varied 
setup implemented system top oracle enterprise edition 
experiments mb database subsequently mb gb databases call unannotated database 
modified schema conform naive storage scheme adding additional attribute attribute relation schema 
created different instances modified database schema corresponding annotated databases 
annotated database means total number cells relation instance database contain annotation 
ran queries increasing join sizes determine system scales type queries 
queries experiments include aggregates nested queries 
queries denote queries zero joins respectively shown left 
example denotes query joins attributes nationkey respectively 
cardinality relation shown brackets 
experi ments conducted pentium ghz machine gb ram 
experiments measure performance system queries default default propagation scheme annotated database 
implemented tested optimized unoptimized versions generate query basis algorithm 
space reasons results obtained optimized version observed consistently significantly outperforms unoptimized version 
executed queries de note queries joins output attributes respectively 
executed sql query corresponds queries unannotated database 
results shown 
illustrates execution time total time taken translator rdbms postprocessor emit tuples result query default default propagation schemes mb annotated database 
expected execution time query default scheme respectively default scheme increases slightly output tributes emitted see instance 
increase time due longer execution time taken oracle additional overhead incurred postprocessing attributes different tuples need compared 
additionally default scheme number spj queries sent oracle increases spj queries respectively number output attributes increases 
table provides exact execution times query annotated database number spj queries generated default scheme 
note worst case query may run times slower query default scheme actual sql query 
unexpected spj queries joins generated sent oracle best case see query default scheme runs twice slow query default scheme 
note default scheme execution times psql queries comparable sql queries 
query unannotated def def def def def def psql spj table execution times query database propagation scheme 
columns psql spj denote size query basis number spj queries generated respectively default scheme 
average psql queries default scheme experimented took time execute corresponding sql queries best execution time psql query default scheme execution time corresponding sql query 
larger databases mb gb psql queries default scheme took time execute corresponding sql queries average results shown 
subsequently conducted experiments mb annotated databases 
results tabulated table 
observe execution time query increases slightly different databases 
example execution time query default default scheme increases marginally number annotations database annotations doubled default scheme increase number psql spj queries generated number joins increases attributes selected participate joins 
number psql spj queries generated increases number output attributes increases increase linearly 
execution times de creases slightly compared join small relation 
ran set experiments results shown mb gb databases annotations observed trend 
results indicate time required translate queries insignificant compared execution time queries postprocessing time queries proportional number size emitted tuples 
execution times default queries comparable performance sql queries spj generated 
discussion 
far psql queries allow aggregates bag semantics keyword 
discuss briefly extend psql handle aggregates bag queries 
aggregates default propagation scheme psql query contains aggregates count sum average assume semantics annotations associated result aggregates aggregate values copied source values 
aggregates min max attribute name semantics annotations associated location resulting min max value union annotations corresponding values value equals min max value 
remains investigate default propagation scheme psql queries aggregates achieved 
bag semantics known conjunctive queries equivalent bag semantics isomorphic 
result implies propagate annotations psql query default propagation scheme bag semantics suffices generate representative query psql query algorithm generate query basis 
handle bag queries naive storage scheme longer multiplicity tuple storage scheme depends number annotations associated tuple 
alternative storage scheme modify original relation needed store annotation location separate relation 
propagate annotations default propagation scheme bag semantics unions conjunctive queries remains provide characterization bag equivalence unions conjunctive queries 
described implementation annotation management system different propagation schemes 
insofar system supports annotations attributes tuples 
extend system handle annotations tuples relations general handle annotations hierarchical data xml 
current system annotations propagated provenance 
addition extend system propagate annotations provenance provide reasons tuple output 
default propagation scheme returns union annotations output location returned equivalent queries 
conceivably complementary propagation scheme returns set annotations output location occurs output location results equivalent queries 
remains investigated query basis generated propagation scheme 
performance annotation management system storage schemes needs investigated 
interesting investigate opportunities optimizations generated sql queries 
hua help initial implementation system ariel helpful suggestions 
abiteboul hull vianu 
foundations databases 
addison wesley publishing 
bairoch wu barker ferro huang lopez martin donovan yeh 
universal protein knowledgebase 
nucleic acids research 
bairoch 
swiss prot protein sequence database supplement trembl 
nucleic acids research 
bernstein 
meta data support data transformations microsoft repository 
ieee data engineering bulletin 
org 
org 
buneman khanna tan 
characterization data provenance 
proceedings international conference database theory icdt pages london united kingdom 
buneman khanna tan 
propagation deletions annotations views 
proceedings acm symposium principles database systems pods pages wisconsin madison 
chaudhuri vardi 
optimization real conjunctive queries 
proceedings acm symposium principles database systems pods pages washington dc 
cui widom wiener 
tracing lineage view data warehousing environment 
acm transactions database systems tods 
public catalog databases 
www fr services cited june 
denning lunt schell heckman 
security model 
ieee symposium security privacy pages washington dc 

distributed annotation system 
technical report department computer science washington university st louis 
jajodia sandhu 
integrity multilevel relations 
ieee symposium security privacy pages oakland california 
kahan prud hommeaux swick 
annotea open rdf infrastructure shared web annotations 
proceedings international world wide web conference www pages hong kong china 
arenas miller 
mapping data peer peer systems semantics algorithmic issues 
proceedings acm sigmod international conference management data sigmod pages san diego ca 
kent haussler 
human genome browser ucsc 
genome research 
braverman 
protocol scalable group public annotations 
proceedings international world wide web conference www darmstadt germany 
lee madnick 
source attribution querying semi structured documents 
workshop web information data management washington dc 
myers liskov 
decentralized model information control 
proceedings acm symposium operating systems principles sosp pages saint malo france 
phelps wilensky 
annotations 
proceedings european conference research advanced technology digital libraries pages pisa italy 
phelps wilensky 
documents 
proceedings communications association computing machinery cacm 
phelps wilensky 
robust intra document locations 
proceedings international world wide web conference www pages amsterdam netherlands 
mazer brooks 
pan browser support annotations meta information world wide web 
proceedings international world wide web conference www paris france 
tan 
containment relational queries annotation propagation 
proceedings international workshop database programming languages dbpl potsdam germany 

annotea project 
www org annotea 
wang madnick 
model heterogeneous database systems source tagging perspective 
proceedings international conference large data bases vldb pages brisbane queensland australia 
