security protocols systems security making case systems security modeling brian monahan trusted systems laboratory hp laboratories bristol hpl august th mail brian monahan hp com security protocols systems security applying information security need go analysis individual security protocols consider distributed systems software applications services 
important security protocols form part security engineering design particular distributed system 
effective security protocol typically depend certain structural data key information available time unavailable 
systems need designed requirements mind 
internal accession date approved external publication report extended version entitled security protocols systems security th international cambridge workshop security protocols sidney sussex college cambridge uk 
th april copyright hewlett packard security protocols systems security making case systems security modelling brian monahan brian monahan hp com trusted services lab hp laboratories road bristol bs qz uk july 
applying information security need go analysis individual security protocols consider distributed systems software applications services 
important security protocols form part security engineering design particular distributed system 
effective security protocol typically depend certain structural data key information available time unavailable 
systems need designed requirements mind 
applying information security need go analysis individual security protocols consider distributed systems software applications services 
important security protocols form part security engineering design particular distributed system 
effective security protocol typically depend certain structural data key information available time unavailable 
systems need designed requirements mind 
report describes progress suggests extending theory analysis security protocols modelling approach describing analysing algebraically simulating security aspects systems 
argue involves software notation specifically designed security trained professionals design explore security aspects systems 
investigating experimental notation called systems security modelling language embody systems designs 
variety tools contemplated investigating security consequences designs particular usage scenarios check resistance particular attacks formulate specific trace state properties capture precisely security related aspects system design 
approach allows system design security related properties iteratively evolved pragmatically developed series descriptions 
purpose evolution establish pragmatic means certain level insight confidence resulting final description 
stage clearer security related properties design part contributes establishing security goals system 
evolution design mean process exploration extension designs better capture intention functionality 
addition system security goals design development established initial assumptions structural data needs available processing stage 
entities contributing security aspects system need modelled design needs sufficient establish security case 
entities don affect influence system security case need included model 
fact entity shown irrelevant security case model simplified removing entity 
security designs tend completely definitive respect sufficient capture security situation system find 
report extended version th international cambridge workshop security protocols held sidney sussex college cambridge nd th april 
recap gain lightweight assurance tools supporting security modelling notation evolved design achieves certain goals functionality relevant security 
gain stronger degree assurance confidence design may necessary formally describe kernel system terms mathematical logic formally prove important security related properties hold kernel 
constructing formal specifications proofs subtle complex task requiring significant logic modelling skills 
furthermore typically attempted stable system kernel highly assured verification security correctness required 
design captured modelling framework hopefully matured having high level confidence provide excellent starting point extract logically precise formal specification suitable system kernel 
formally represented version system kernel provides basis formally showing security related properties claimed tools theorem proving symbolic model checking :10.1.1.145.4394
remainder report discusses aspects experimental security modelling language accompanying tools means short example 
briefly look protocol descriptions message sequence charts consider approaches security analysis protocols 
protocol description notation message sequence charts security protocols typically described message sequence chart msc notation 
example fig contains classical msc description known needham schroeder public key authentication protocol 
na pub na nb pub nb pub fig 

excerpt needham schroeder public key authentication protocol intuitively conveys message flow broadly principal needs stage protocol 
recognised abadi adequately document certain important aspects protocol goals protocol participant expects jointly achieved 
initial assumptions principal 
parts message freshly generated 
lowe showed particular protocol illustrated possible essentially allowing attacker insider access authentication keys honest principles 
permits attacker perform classic middle person attack 
pointed original protocol design assumed attacks mounted external agents 
nicely illustrates flaws complex systems arise best designed systems subsystem intended set circumstances may eventually get set circumstances unintended foreseen designers leading inappropriate behaviour 
suggests complex distributed systems may need adaptive evolutionary design successful changing environment 
variation protocols initial assumptions may easily lead different attacks illustrated automated protocol analysis tool 
emphasises security complex distributed systems depends context manner protocols deployed 
approaches security protocol analysis currently main approaches attack analysis security protocols 
approaches start classic needham schroeder authentication large networks 
landmark contains basic principles underlying issues security protocol analysis modern flowed 
probability complexity analysis probabilistic complexity theoretic approach favoured cryptographers attacker tries exploit protocol interactions way reveal covert information underlying crypto primitives objective break crypto primitives subversion extracting key information 
whichever way taken successful attacker achieve full control 
outcome analysis typically estimate factor required attacker order achieve goal 
factor may probability extracting useful information expressed terms function number trials attack runs may number trials required extract particular information 
typical feature type analysis random oracle assumption hash functions modelled functions randomly chosen uniformly distribution 
algebraic formal logic analysis algebraic formal logic approach begun dolev yao continued researchers attacker tries gain reward advantage playing different protocol players protocol players may differing protocols 
usually involves deceptive honest principals role attacker exploit inherent ambiguity protocols 
relative keys attacker analyse synthesise arbitrary messages attacker explicitly knows subsequently uncovers 
attacker permitted cryptographic operations encryption signing keys got explicit access 
process algebraic trace theoretical approaches protocol security played fundamental role defining important security concepts determinism noninterference correspondence properties 
security related properties typing spi calculus framework investigated 
multiset rewriting approach emerging formalism cryptographic protocols 
tutorial survey overview entire research area proceedings 
reconciliation approaches abadi rogaway began draw approaches emphasising assumptions model corresponding assumptions 
combining approaches actively pursued pfitzmann waidner 
known analytic techniques dealing security protocols mentioned limitations 
example widely acknowledged ban logic approach adequately capture causation emphasises known believed principles involved 
equally digital signature schemes proven secure random oracle approach implementation equally insecure sense 
proofs security protocol typically give partial assurance concerning integrity 
clear currently single approach security protocol analysis emerged adequately captures full richness diversity way systems security threats face 
suggests needed combine efforts approaches analysing assessing systems security 
classic web service example give example motivate security modelling notation 
example simplified variant known single sign problem depicted form web service 
informal description distinct phases operation registration client registers joins web service interacting registration service 
start new session web service client prove membership order initiate long lived interruptible session web service 
client time limited token cookie allows rejoin session 
continue existing session web service client continues existing session sending cookie back web service 
cookie time expired session closed 
example fig contains number ambiguities undefined notions typical requirements descriptions 
nature requirements descriptions necessarily informal contain germ need fulfilled designed solution 
act design involves imposing order structure create space potential solutions hopefully fulfil spirit requirement originally expressed informally 
example chosen somewhat typical applied service occurring naturally raw state pre packaged understood security protocols community kerberos 
partial answer question provide ways exploring investigating security designs 
approach capture security aspects design terms model analysed effective way supported software tools 
approach involves capturing transactional behaviour design terms structured data events 
purpose design modelling activity gain insight establish confidence content design 
important try keep model simple possible retaining essential relevance 
notation security modelling notation system security modelling language allows define entities representing systems terms behaviour 
superficially close appearance known programming languages java standard ml semantics owe process calculus tradition csp ccs 
appendix contains details current syntax 
discussion semantics underlying scope 
intention capture aspects structural features security design pertinent aspects dynamic behaviour 
focussing security aspects choose emphasise certain details de emphasise 
example de emphasise fine grained conditional branching case analysis focus keys encryption 
aspects de emphasised security analysis purposes considerable interest importance stages systems design development 
lack space report full account notation associated tools complete example 
left form subject publication 
main groups entity description 

contexts types entities represent structured data types represent state space principal item system 

events methods functions event located instance context representing principal typically consists straight line code branching conditionals case analysis 
events optionally receive input send output 
methods generally represent state modifying operations may yield result 
pure functions specified algebraically terms conditional equations 
web service offering online services internet 
potential customer firstly register membership able access service registration service rs 
registration gains access service fully proving membership session 
customer receives time limited token cookie permits re admittance quickly going full access dialogue 
logged set access privileges allowing retrieve update information 
appropriate informal cases diagrammed registration service obtain blank form returned form decision report registration service rs customer starts session web service ws contact membership credentials session cookie access service read modify data customer rejoins ongoing session web service ws contact send session cookie access service read modify data web service ws web service ws fig 

informal description web service background checks 
traces system behaviours traces finite sequences events message exchanges accepted state transitions arise result 
system defined terms accepting finite sets traces 
move discussing web service example illustrating features mentioned 
design state space client registration service web service represented terms appropriate contexts 
associated contexts number located events represent part interaction principal 
events process input output messages principals 
system behaviours linking client registration service web service defined terms traces 
continue detailed description main elements contexts events systems behaviours 
contexts describing complex systems involves structured data involve full blown objects semantic complexity inheritance overriding introduce contexts represent 
context collection named typed entities 
example fig define client context 
context client fixed visible string name client name identity visible client public key secret client private key volatile internal form registration form internal nonce nonce value internal cookie ck cookie value web service persistent internal identity registration service identity internal identity web service identity internal uint mem undef membership number constraint keypair key relationship type unspecified type cookie unspecified fig 

defining client context context consists number named fields followed optional constraint part 
field couple classifiers 
classifier fixed volatile persistent briefly indicates field initialised 
second classifier visible internal secret determines security visibility characteristics 
classifiers explained appendix field strongly typed nonce string builtin 
conventional stand type strings unsigned integers expect 
types represent security relevant roles 
example values type identity represent standard names entities practice string containing uri systematically defined 
typed value ident value type identity 
clear identity values plaintext address inherent security characteristics 
show identity values access useful publicly visible information public keys bound identifiers 
values type nonce represent asymmetric keys nonces respectively 
user defined type specified intended represent registration form kind typically implemented terms xml html 
user defined type cookie represents cookie values exchanged client web service specified 
order material introduced significant general cyclic dependencies definitions 
note constraint part states relationship customer public key private key terms binary key pairing relationship keypair 
general relation regarded effectively intractable classically definable 
relation statically restricted occurrences verification predicates constraint part permitted 
events dynamic behaviour security design terms events 
basically event represents small chunk state dependant behaviour input output messages anonymous broadcast communication model discussed appendix events strung form traces sets traces describe dynamic behaviour system 
simple illustrative example event fig 
event located instances event client identity rid cid binary nonce na input registered na rid cid mem decrypt check na rid cid ident fig 

defining event client 
client context specified client part 
effectively allows event access components context state instance client execution 
says input message accepted specified shape looks registered message components string literal registered second identity value assignable third binary value assignable 
effect successful pattern match match string literal overwrite variables 
second statement says client private key correctly decrypt binary value give message containing elements na rid cid mem na nonce value rid cid identity values mem field type uint associated client go back fig definition mem 
previous values variables ignored overwritten statement successfully matches failure 
partially successful matching cause effective corruption 
check statement checks logical predicate see true failure 
case check 
encrypted nonce na nonce sent previously retained client 
identity rid identity quoted unencrypted main message 

identity cid ident identity corresponding client 
event input statement output statement typically event input output 
event st statements input message statements output message fig 

general form event 
general form event fig 
effect events partial state functions may optionally input output messages performing constrained side effect specified state context 
event inputs message may accepted refused rejected 
rejection means failure refusal means message accepted event 
events simple straight line pieces code having recursion loops case switch statements explicit conditional branching statements familiar programming languages java 
typically input statement acts guard allowing selection events match current message different check statements mentioned earlier reject yielding unrecoverable failure 
statement forms available include traditional assignment conventional pattern matching variants 
data operations form pure functions specified conditional equations includes recursive definition conditional evaluation 
encourage level detailed description intention completely define functional aspects system behaviour just focus matters impinging security 
event client registry rx access registry string data string pw form data pw random binary encrypt ident form rx output return ident ident rx function string data string pw fig 

defining event client give example event fig 
event performs act filling form function data acquired data source indicates local interaction user 
takes form data plus user chosen password value pw 
note password value retained client context user supply value required 
filled form embedded inside encrypted message consisting elements randomised nonce value identity value representing self form 
nonce value reasons firstly introduce ideal form randomised encryption prevention codebook attacks secondly retained client checking freshness performed event fig 
message encrypted public key value rx obtained de referencing local proxy value rx type registry 
encrypted data output identities representing client registry 
rx value mentioned defined access expression registry rx access registry local proxy values constructed way contain fixed visible fields entity identity refers 
fields undef 
access expressions practice realised number different underlying mechanisms web page lookup url ldap access having effect 
completeness give registry context represents state space registration service fig 
introduced type represents asymmetric keys binary size bits 
general base type qualified size 
context database unspecified content determined unspecified content determined registry fixed visible string name registry name visible public key secret private key volatile internal identity contact contact identity internal form data persistent internal database db registration database constraint keypair type bit fig 

defining registry context described events may appear somewhat isolated unrelated 
link events system behaviours described section 
system behaviours mentioned earlier specify behaviour security systems consisting number different principals players terms sets traces trace consists finite sequence located events 
example define intended system behaviour corresponding registration service fig 
system client registry rs init ident rs rs rs fig 

system behaviour corresponding registration service corresponding sequence events sequences messages output subsequently input 
accordingly essentially partial function participants specified client registry types satisfying init predicate potentially accepting traces system 
instantiate giving particular instances client registry obtain sequence events may may succeed 
recognise instances having form lead non acceptance rejection due failure 
system description considered weakly formed accepting trace choice arguments strongly formed accepting trace possible choice arguments 
effect strong formedness says system description forms total function 
useful trace operators addition sequential composition simple choice concurrent merge useful defining complex trace sequences system behaviours trace predicates equivalence containment 
section briefly consider designs analysed static analysis concepts ideas algebraic simulation 
analysing design purpose security analysis design determine design achieves certain security goals 
goals typically stated terms high level concepts confidentiality authentication nonrepudiation non interference 
concepts mathematically defined terms trace state correspondence properties translating precise verifiable statements pertinent particular designs straightforward 
analysis involves distinct phases checking static integrity objective phase ensure design satisfies certain static integrity constraints determine diagnostic information aiding user fixing violations 
analysis involves techniques type checking usage data items flow analysis interpretation ensure information flows suitably constrained 
important aspects checking includes 
checking system designs accept traces system malformed ends rejecting trace behaviour interest 
involves checking message flows feasible message accepted input event output preceding event 
additionally volatile fields initialised possible run 
clear trace acceptance conditions involve general constraint satisfaction need theorem proving support 

calculating static set valuable items system example entities declared secret transferred solely encrypted form deliberately exposed 
subtly includes indirectly valuable items gain access material known valuable 
fashion detect system design certain kinds security exposures 
addition set valuable items represents items form targets attackers need protected 
exploration dynamic behaviour system behaviour defined sets traces traces include state transitions messages sent received 
objectives phase examine explore possible verify dynamic characteristics system combination environment 
environment system corresponding rest system context system interest operates 
particular attacks come environment successful attack coordinated set actions controlled environment provokes entire system environment system enter bad state perform illegal act 
type analysis usefully viewed exploring system environment wins certain contest environment wins obtain reward advantage systematic way system interest wins defeats best efforts environment cause fail system wins doesn lose 
intend algebraic simulation manipulation techniques examine behaviour investigate security certain combinations environment system 
integrated protocol environment described developed jonathan millen team sri 
appears currently extensively developed security protocol analysis tools 
provides algebraic notation tools protocol analysis algebraic rewriting logic 
protocol notation essentially provides algebraic form message sequence charts provides ways precisely state protocol goals initial assumptions principal 
descriptions firstly translated intermediate logic form called cil intermediate language turn related multiset rewriting formalism 
cil principally provide canonical protocol representation allowing cil descriptions protocols exchanged variety algebraic formal analysis tools pvs maude translator tools currently available unix platforms 
purpose motivate interest security focused systems analysis need security modelling simulation tools example web service illustrate idea 
web services example 
considerable natural scepticism unconditional security correctness arguments ignore operating context environment 
usually system design shown correct meets correctness obligations assumptions mode context certainly holds security related properties 
reason exploring studying combination systems operating particular environments security point view great stands common authentication protocol specification language 
interest 
contexts similar process focused modelling approaches advocated 
prepared view richer landscape system context acceptably secure performs useful functional role 
subsystem context system behaves fails operate expected 
task assessing security system closely associated assessing classes environments system operates safely 
concerning form basic support tools exist gui analysis tool currently development 
purpose tools provide ways capturing models focusing security aspects explore behaviour particular environments algebraic simulation static analysis techniques 
hope include goal statements describe security related properties terms trace state correspondence predicates allow user directed exploration happens certain initial conditions scenarios 
colleagues adrian baldwin chen jonathan griffin antonio lain simon shiu mike wray hp labs helpful remarks comments relating 
addition am grateful conversations various protocol workshop participants directly led number improvements 

needham schroeder encryption authentication large networks computers 
cacm 
anderson security engineering 
wiley 
ferguson schneier practical cryptography 
wiley 
cheswick bellovin rubin firewalls internet security 
nd edn 
professional computing series 
addison wesley 
monahan security protocols systems security 
proc 
th international cambridge workshop security protocols 
lncs springer appear 

nipkow paulson wenzel isabelle hol proof assistant higher order logic 
volume lncs 
springer 
paulson inductive approach verifying cryptographic protocols 
journal computer security 
huth secure communicating systems 
cambridge 
abadi security protocols properties 
foundations secure computation bauer eds 
nato science series marktoberdorf germany ios press 
lowe attack needham schroeder public key authentication protocol 
information processing letters 
gollmann mean entity authentication 
proc 
ieee symposium security privacy ieee computer society 
monahan introducing aspect tool checking protocol security 
technical report hpl hp labs www hpl hp com techreports hpl 

bellare rogaway entity authentication key distribution 
advances cryptology crypto ed 
stinson 
volume lncs springer 
cramer shoup practical public key cryptosystem provably secure adaptive ciphertext attack 
proc 
advances cryptology crypto 
volume lncs springer 
goldreich halevi random oracle methodology revisited preliminary version 
proc 
th annual acm symp 
theory computing italy acm press 
canetti krawczyk analysis key exchange protocols building secure channels 
proc 
eurocrypt 
volume lncs springer 
dolev yao security public key protocols 
technical report stan cs dept computer science stanford university transactions information theory 

burrows abadi needham logic authentication 
proceedings royal society london volume royal society publ 
condensed acm transactions computer systems february 

paulson inductive analysis internet protocol tls 
acm transactions computer system security 
anderson needham programming satan computer 
computer science today 
volume lncs vol springer www cl cam ac uk ftp users rja satan ps gz 

comon shmatikov possible decide cryptographic protocol secure 
appear journal telecommunications information technology 
lincoln mitchell scedrov undecidability bounded security protocols 
proc 
floc workshop formal methods security protocols 
gollmann mergers principals 
security protocols ed 
christiansen 
volume lncs springer 
lowe breaking fixing needham schroeder public key protocol fdr 
tacas 
volume lncs springer verlag 
ryan schneider modelling analysis security protocols 
addison wesley 
rusinowitch protocol insecurity finite number sessions np complete 
proc 
th ieee computer security foundations workshop ieee 
millen hai ping ko narrowing terminates encryption 
ieee computer society computer security foundations workshop csfw county kerry ireland ieee computer society press 
thayer herzog guttman strand spaces proving security protocols correct 
journal computer security 
abadi gordon calculus cryptographic protocols spi calculus 
technical report src dec src 
lowe defining information flow 
technical report department mathematics computer science university leicester 
roscoe goldsmith intransitive non interference 
proc 
ieee computer security foundations workshop ieee computer society press 
ryan schneider process algebra non interference 
proc 
ieee computer security foundations workshop italy ieee press 
ryan csp formulation non interference 
cipher ieee computer society press 
roscoe csp determinism security modelling 
proc 
ieee symposium security privacy ieee computer society press 
woo lam verifying authentication protocols methodology example 
proc 
int conference network protocols 

focardi secrecy security protocols non interference 
dera rhul workshop secure architectures information flow schneider ryan ed 
volume electronic notes theoretical computer science elsevier 
millen shmatikov constraint solving bounded process cryptographic protocol analysis 
proc 
th acm conference computer communications security acm 
cortier millen rue proving secrecy easy 
th ieee computer security foundations workshop csfw canada ieee computer society press 
comon cortier security properties agents sufficient 
proc 
th esop 
volume lncs warsaw poland springer 
foley non functional approach system integrity 
ieee journal selected areas communications 
analysis security protocols open systems 
tcs 
symbolic partial model checking security analysis 
proc mmm 
lncs st petersburg russia springer 
abadi secrecy typing security protocols 
journal acm 
gordon jeffrey types effects asymmetric cryptographic protocols 
proc 
th ieee computer security foundations workshop csfw ieee 
gordon pucella validating web service security abstraction typing 
proc 
acm workshop xml security fairfax va usa acm press 
degano nielson nielson static analysis secrecy noninterference networks processes 
proc 
pact 
volume lncs springer 
cervesato mitchell lincoln scedrov relating strands multiset rewriting security protocol analysis 
proc 
th ieee computer security foundations workshop ieee 
cervesato specification language crypto protocols multiset rewriting dependent types subsorting 
proc 
save cyprus www disi unige person save cer ps gz 

ryan mathematical models computer security 

volume lncs springer 
syverson cervesato logic authentication protocols 

volume lncs springer 
de di vimercati access control policies models mechanism 

volume lncs springer 
guttman security goals packet trajectories strand spaces 

volume lncs springer 
gordon notes nominal calculi security mobility 

volume lncs springer 
focardi classification security properties part information flow 

volume lncs springer 
abadi rogaway reconciling views cryptography computational soundness formal encryption 
journal cryptology 
pfitzmann waidner model asynchronous reactive systems application secure message transmission 
proc 
ieee symposium security privacy oakland california ieee computer society press 
pfitzmann waidner cryptographic security reactive systems extended 
electronic notes theoretical computer science 
guttman authentication tests structure bundles 
theoretical computer science 
nielson nielson hankin principles program analysis 
springer 
clark hankin hunt information flow algol languages 
journal computer languages 
sabelfeld myers security 
ieee journal selected areas communications 
denker millen rue integrated protocol environment 
technical report sri csl sri menlo park california usa 
denker millen intermediate language 
proc 
floc workshop formal methods security protocols 

bruns distributed systems analysis ccs 
prentice hall 
birtwistle relating operational denotational descriptions demos 
simulation practice theory 
stajano anderson auction protocol power anonymous broadcast 
proc 
rd information hiding workshop dresden germany 
lncs springer www lce eng cam ac uk fms papers pdf 
appendix systems security modelling language experimental notation expressing systems security designs properties 
appendix summarises amplifies various details mentioned earlier 
simplified extract full grammar included 
types contexts fields types conventional constrain range values expressions denote 
contexts consist collection fields values may constrained invariance examples fig 
contexts provide structured data types state spaces associated state modifying events 
field defined qualifiers type name optional initial value 
intention qualifiers detail tables 
events events state partial functions input message output message 
associated context instance representing state 
input message read commitment accepted refused rejected 
guard statements refuse messages allowing event run 
check statements cause failure message rejection 
output messages dispatched directly 
anonymous broadcast communications model explained 
system behaviour sets traces system behaviour defined terms sets traces trace sequence events state transitions accepted messages transferred different partners 
important note traces fully define behaviour principal just defines relevant interactions principles 
anonymous broadcast communications model anonymous broadcast communications model originally introduced stajano anderson essentially says messages sent received asynchronously involving binary message handshake rendezvous 
basic properties message transfer model message sent received message received sent 
words addressing information advisory guaranteed security point view 
just message claims sent doesn mean necessarily sent 
equally just send message doesn necessarily mean see 
assume alice sends sends bob receives messages bob receive order sent alice 
means local send ordering preserved receipt 
naturally imply global temporal ordering local temporal ordering 
assume reliability message sending message sent received eventually 
restrictions receive message sent assume implicitly intended recipient see message 
assume attackers actively prevent messages received intended recipient 
observe process theoretic point view assimilate anonymous broadcast model terms primitive handshaking postulating universal process called internet accepts messages sent concurrently processes allowing forwarded request processes 
particularly challenging idea formally precise terms known process calculi ccs csp 
partial grammar system security modelling language context context id unspecified items constraint constraint empty constraint expr items item item item fixed volatile persistent type id empty visible internal secret empty expr event event id empty stmts input message stmts output output empty output message stmts empty stmt stmt stmt methodcall pattern expr check expr guard expr id id system system id empty trace id trace expr trace expr empty init expr empty accept expr lifetime qualifiers fixed variable value long lived defined remains effectively constant 
value changed defined static final java 
may assumed defined way prior system runs practice changed modified infrequently compared frequency system runs 
practice changed modified infrequently compared frequency system runs 
volatile variable value short lived freshly re initialised run system 
value persist event event inside system run 
persistent variable value long lived changed modified events 
fixed variables may assumed defined way prior system runs 
accessibility qualifiers visible variable value visible external observers 
usually important value highly available widely disseminated published 
internal variable value regarded internal unavailable external observers 
variable live executing event method static value undef 
internal variable value regarded internal unavailable external observers 
additionally value assigned passed argument expression context specific crypto operation encryption signing 
internal variables variable live executing event method static value undef 
cryptographic expressions encrypt encrypt message encryption key 
assume labels indicating appropriate algorithm cryptographic scheme asymmetric vs symmetric embedded key data 
decrypt decrypt message decryption key 
assume labels indicating appropriate algorithm cryptographic scheme asymmetric vs symmetric embedded key data 
sign construct digital signature data signature key 
verify verify digital signature message signature verification key 
keypair key pair relation keys key data contains label information indicating appropriate cryptographic scheme 
hash standard cryptographic hash message 
hmac key dependent cryptographic hash message hashing key 
