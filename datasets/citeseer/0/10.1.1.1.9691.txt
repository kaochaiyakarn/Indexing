intersecting classes prototypes wolfgang de theo hondt vub ac programming technology lab department computer science vrije universiteit brussel pleinlaan brussels belgium fax 
object oriented programming language design space consists class prototype languages :10.1.1.111.2145
language families shown posses advantages disadvantages respect software construction 
hybrid languages featuring prototype class mechanisms proposed solution 
unfortunately languages unify advantages disadvantages families 
propose point view propose language inherits advantages disadvantages families 
object oriented programming languages classified big language families prototype languages pbls class 
related aristotelian point view world live consists ideal ideas instances ideal ideas pbls reflection wittgenstein philosophy correct think world consisting objects family resemblance representative prototypes :10.1.1.111.2145
classes representing ideal ideas contain knowledge program 
objects created instantiating class classes share behaviour means inheritance 
pbls hand objects created ex putting number fields methods parenthesis cloning objects :10.1.1.111.2145
sharing accomplished establishing inheritance relation objects :10.1.1.111.2145
relation usually referred delegation 
examples java smalltalk 
examples pbls self agora 
people think controversy pbls obsolete advent java standard object oriented language :10.1.1.111.2145
academic interest object oriented language design decrease right java believe temporal :10.1.1.111.2145
workshops oopsla oopsla ecoop inheritance workshop ecoop show language design alive kicking 
importantly believe pbls back business 
proof publications show relevance prototypes components agent technology fact self released new os mac see 
argued cardelli mid nineties obliq prototypes gain interest especially field mobile computing agents roam networks unpredictable way :10.1.1.17.6050
extended reviewing see section major drawbacks researchers attributed pbls answer 
see section pbls number disadvantages 
reaction avoid shortcomings gets choosing language family design new languages contain class prototype characteristics 
languages called hybrid languages hybrid javascript unfortunately hybrid languages union language feature sets pbls 
result unify advantages disadvantages related families 
furthermore tend large languages non trivial combinations prototype class features 
presents tiny language called pic combining prototype class characteristics intersection combining advantages drawbacks 
pbls vs pbls invented late seventies ai community knowledge representation purposes 
wait lieberman influential order pbls object oriented community :10.1.1.111.2145:10.1.1.48.69
pbls designed research labs 
examples self agora :10.1.1.111.2145
taxonomy 
section summarize pbls solve problems associated 
section lists number drawbacks pbls related absence classes 
briefly review important characteristics pbls 
prototype languages pbl defined classes large extent true 
pbls objects created ex blue listing number fields methods cloning existing object :10.1.1.111.2145
case cloned object called prototype clone :10.1.1.111.2145
cbl allow classes share fields methods means inheritance feature absent pbl 
pbls achieve effect javascript widely pbls 
pbl features poorly documented language poor example language design 
worse javascript enriched classes 
ai community pbls known frame languages 
highly dynamic mechanism usually called delegation object inheritance :10.1.1.111.2145
idea object dynamically decide object parent :10.1.1.111.2145
message handled object automatically delegated parent object :10.1.1.111.2145
important happens exactly inheriting classes cbl late binding self illustrated 
messages send self pseudo variable parent come back object originally received message :10.1.1.111.2145
crucial feature delegation originally defined lieberman pbls implement :10.1.1.48.69
delegation described famous design patterns book depicted 
called message forwarding meet definition delegation pbls 
self self parent child delegatee delegating fig 

delegation vs forwarding problem naive prototype thinking cloning objects state behaviour gets copied :10.1.1.111.2145
means object methods give rise methods cloned times pointers pointing methods :10.1.1.111.2145
solution problem invented self group programming technique called traits objects :10.1.1.127.5320:10.1.1.111.2145
idea store methods object called traits object clones inherit object :10.1.1.111.2145
objects contain state variables share behaviour traits shared parent :10.1.1.111.2145
traits objects programming idiom enforced language feature face fact traits technique boils writing class programs pbl traits objects play role classes instances refer class means parent pointer instance pointer :10.1.1.111.2145
aside technical details class programming 
dony argues better speak object centred programming prototype programming :10.1.1.111.2145
object centred programming refers act writing programs class centered techniques put object design entity central position :10.1.1.111.2145
drawbacks class centered programming years researchers drawing attention numerous drawbacks divide call language self self theoretical drawbacks philosophical drawbacks 
philosophical drawbacks really consequence particular language features related way thinking impose 
basically boil fact modeling world statically determined classification doesn general humans prefer think terms concrete objects terms abstractions :10.1.1.111.2145
refer taivalsaari excellent overview article philosophical background pbls 
language theoretical drawbacks cbl drawbacks related language design issues interest 
merely summarize analysis pbl system really objects second sight :10.1.1.111.2145
uniform object easily ends complex concepts meta classes double hierarchy smalltalk :10.1.1.111.2145
java classes objects belong class class class object class :10.1.1.111.2145
bugs constructors lead initialized objects :10.1.1.111.2145
pbls fields clones meaningful initial value value field object cloned :10.1.1.111.2145
possible behaviour objects extra subclasses :10.1.1.111.2145
self put halt statement method object :10.1.1.111.2145
affect object :10.1.1.111.2145
pbls support singleton objects true false singletons class needs constructed :10.1.1.111.2145
smalltalk classes true false true false instances 
pbls objects inherit delegation object changes parent done child felt children :10.1.1.111.2145
powerful mechanism called parent sharing allows define views objects :10.1.1.111.2145
simulating cbl leads clumsy indirections 
classes play eleven roles object generation description representation behaviour objects objects code reuse modularity encapsulation visibility definition types definition :10.1.1.111.2145
course removing classes lot roles taken objects :10.1.1.111.2145
case know objects roles arbitrarily deferring classes :10.1.1.111.2145
object manipulation totally decoupled classes pbl allows re introducing classes sole purpose classification :10.1.1.111.2145
programmer assign attributes called stripes objects classify objects stripes :10.1.1.111.2145
drawbacks pbls object centred programming pbls shown solution problems outlined previous section 
pbls problems related absence feature playing role previously played classes construction certain objects requires certain construction plan executed building gui :10.1.1.111.2145
possible formalize plan class constructor 
pbls thing objects created cloning objects requires lot discipline programmers sure certain procedures followed :10.1.1.111.2145
prototype corruption problem put forward gunther 
prototypes empty string prototype inadvertently modified affect clones 
lead subtle bugs 
pbls suffer re entrancy problem 
explained section naively copying prototypes result pointers methods needlessly copied explained problem circumvented traits technique problematic traits technique heavily interferes inheritance hierarchy 
self doesn pose real problems self multiple inheritance problematic see objects inherit real parent traits parent :10.1.1.111.2145:10.1.1.111.2145
pbls multiple inheritance possible 
concepts inherently 
order describe stack go level 
writing code push pop writes code possible stacks empty stacks full stacks 
definition working class level abstraction 
problem stack inherently concept 
talking particular stack code talks stacks general 
problems solved re introducing classes automatically implies re introducing problems outlined section 
solved classes sections introduce pic tiny consider intersection cbl pbl 
pic object oriented extension procedural language called pico :10.1.1.111.2145
sketch pico section introduce pic 
section explains pic intersection pbls 
pico short overview pico designed vehicle teaching language concepts interpreters 
full explanation pico scope text internet 
implementation quicksort algorithm gives general flavor language quicksort low high left low right high pivot left right left right left pivot left left right pivot right right methods store method table class 
read pic oo left right swap left right left left right right false low right quicksort low right false high left quicksort left high false pico dynamically interpreted language heavily scheme 
pico values class basic values functions tables passed arguments returned functions act value assignment 
major differences scheme pico uses ordinary function application notation infix operator notation 
pico equipped efficient memory manager longer restrict fixed size storage model originally associated scheme 
dotted pairs pico features variable sized tables 
pico functions carry name 
scheme uses eager evaluation pico allows definition functions parameters lazy evaluation 
removed need special forms allowing uniform notation see usage 
pico expression evaluated context environment linked list name value associations 
values numbers texts tables functions 
environment organized known lexical scoping rules 
values longer bound name environment get automatically garbage collected 
table shows frequently syntactic constructions pico 
new names added current environment colon notation 
names associated primitive values tables functions 
constitutes second row table 
names indexing tables calling functions row 
bottom row shows variables new value tables updated functions get new body 
notice curly braces quicksort mere syntactic sugar replaced parser call lazily evaluated function 
table 
pico basic syntax nam nam exp nam exp 
expn definition nam exp nam exp exp nam exp 
expn exp assignment nam exp nam exp exp name exp 
expn exp pic intersection pbls pic prototype extension pico 
concepts pic heavily influenced previous research agora proved intersection pbls terms denotational semantics 
pic simpler agora 
basic ideas introduce order turn pico capture primitive returns point execution current environment 
captured environments pic objects :10.1.1.111.2145
qualified dot operator send messages 
captured environment object nam :10.1.1.111.2145
en searches nam environment invokes function associated 
search starts pico pic bottom environment proceeds upward linked list bindings 
corresponds method lookup 
code excerpt shows features enable object oriented programming double colons counter incr decr capture evaluation code expression kind counter create new object methods incr decr result calling counter environment execution built point capture called :10.1.1.111.2145
counter constructor function call generates object extension lexical environment constructor messages send objects expressions incr :10.1.1.111.2145
inheritance overriding model come free illustrated code excerpt counter incr decr super void protect limit incr limit error overflow super incr decr limit error underflow super decr capture super capture having constructed counter object message protect return object parent receiver message objects environments entering protect current environment gradually extended new increment decrement methods new current environment captured :10.1.1.111.2145
result environment scheme terminology called closure 
contains methods super variable 
inheritance overriding come free pico name lookup proceeds upwardly environment 
method protect generates extensions receiver called 
mixin methods built language feature agora 
model outlined far forms extremely simple pbl solves problems section constructor function technique misses crucial things super sends late binding self cloning 
furthermore biggest problem pbls re entrancy problem remains unsolved turn clumsy traits objects technique :10.1.1.111.2145
key solving problem lies redesigning pico environment model way environment consists parallel lists bindings shown 
list called variable part names defined list called constant part names defined 
gives consistent object model shown arguments decided take constant part interface object :10.1.1.111.2145
messages sent dot operator looked constant part 
method executed context entire object :10.1.1.111.2145
inside method receiving object accessed called :10.1.1.111.2145
point returns current object :10.1.1.111.2145
function calls qualified implicit sends calling constructor function counter merely self send root environment 
object understands clone function standardly installed constant public part root environment :10.1.1.111.2145
object inherits clone :10.1.1.111.2145
entire point objects implemented parallel lists bindings constant list public part clone copy static part receiver :10.1.1.111.2145
definition clone method new object consisting constant part receiver clone variable part receiver :10.1.1.111.2145
new dot syntax receiver introduced 
dotted messages receiver send immediate parent object :10.1.1.111.2145
corresponds super java 
difference technique super variable shown dot change meaning super sends late binding 
cst var var cst cst fig 

pic environment object structure pic programming patterns example shows programming style favored pic 
stack void empty full push pop push full error overflow push pop empty error underflow pop capture capture nice pattern pic implementation strategy singleton objects :10.1.1.111.2145
easily accomplished having constructors override clone replace single generated object constructor args :10.1.1.111.2145
clone constructor capture explain feature pic touch class manipulation methods 
particularly useful model inheritance accomplished 
model requires potential extensions reside mixin methods objects extension outside possible wasn possibility assign mixin methods :10.1.1.111.2145
fact constants object cloned give powerful language feature called cloning families inside implementation :10.1.1.111.2145
believe cloning families abstraction think notion replicas distributed system 
currently investigating version pic uses objects mobile agents :10.1.1.111.2145
evaluation epilog validate claim pic clean intersection pbls 
pic features objects :10.1.1.111.2145
constructor functions mere methods object calling constructor function implicit send :10.1.1.111.2145
reintroduce problems associated classes 
second consider drawbacks outlined section construction plan problem need formalized construction plans 
need clearly covered pic constructor functions generate objects capture :10.1.1.111.2145
constructor functions pic exactly constructors 
prototype corruption problem solved proposal constructor functions overriding clone powerful techniques ensure fresh objects constructed function clone correctly initialized :10.1.1.111.2145
solution re entrancy problem important technical contribution pic field 
structuring objects dictionaries gets copied cloning operation sure clones prototype share constant fields prototype :10.1.1.111.2145
hidden traits object interfere inheritance hierarchy way discussed section :10.1.1.111.2145
fact notions stacks inherently trivially covered way constructor functions simulate classes 
pic pbl features cloning cbl features constructor functions 
inherit problems language family 
furthermore reintroduce classes constructor functions methods turn reside environment read object :10.1.1.111.2145
claim tiny little language clean intersection families 

taivalsaari classes vs prototypes philosophical historical observations 
noble taivalsaari moore eds prototype programming concepts languages applications 

gosling joy steele bracha java tm language specification 
nd edn 
addison wesley 
stroustrup programming language 
edn 
addison wesley reading mass 

goldberg robson smalltalk language implementation 
addison wesley 
ungar smith self power simplicity 
proceedings acm conference object oriented programming systems languages applications oopsla 
volume acm press 
de agora scheme object orientation simplest mop world 
noble taivalsaari moore eds prototype programming concepts languages applications 

taivalsaari critical view inheritance reusability object oriented programming 
phd thesis university finland 
smith prototypes palm 
noble taivalsaari moore eds prototype programming concepts languages applications 

zenger type safe prototype component evolution 
proceedings ecoop 
volume lncs springer verlag 
van belle hondt agent mobility reification computational state experiment migration 
lecture notes computer science 
self home page research sun com research self 

cardelli language distributed scope 
computing systems 
lieberman stein ungar treaty orlando 
addendum conference object oriented programming systems languages applications oopsla 
volume new york ny acm press 
edition www mozilla org js language es index html 

lieberman prototypical objects implement shared behavior object oriented systems :10.1.1.111.2145
meyrowitz ed proceedings conference object oriented programming systems languages applications oopsla 
volume 

smith ungar programming experience inspiration self 
noble taivalsaari moore eds prototype programming concepts languages applications 

dony malenfant classifying prototype programming languages 
noble taivalsaari moore eds prototype programming concepts languages applications 

gamma helm johnson vlissides design patterns 
addison wesley 
ungar chambers chang lzle organizing programs classes 
lisp symbolic computation 
bracha lindstrom modularity meets inheritance 
proceedings ieee computer society international conference computer languages 

green borning shea smith papers understandability language design issue object oriented programming systems 
noble taivalsaari moore eds prototype programming concepts languages applications 

object oriented programming prototypes 
springer verlag 
pico home page pico vub ac 

abelson sussman structure interpretation computer programs 
nd edn 
electrical engineering computer science series 
mit press cambridge ma 
steyaert de marriage class object inheritance unwanted children :10.1.1.111.2145
lecture notes computer science 
hondt de class methods dynamic scope 
proceedings lmo france appear 

