alias types recursive data structures linear type systems permit programmers deallocate explicitly recycle memory restricted fact admit aliasing 
describes pseudo linear type system allows degree aliasing memory reuse ability define complex recursive data structures 
type system encode conventional linear data structures linear lists trees sophisticated data structures including cyclic doubly linked lists trees 
cases type system expressive represent pointer aliasing safely permit destructive operations object deallocation 
demonstrate flexibility type system encoding common compiler optimizations destination passing style deutsch waite link reversal traversal algorithms 
type safe programming languages haskell java ml give programmers control memory management 
particular languages allow programmers separate allocation initialization memory objects allow explicit re memory objects 
allocation initialization objects programmer atomic operation re memory achieved covers garbage collection 
words memory management achieved meta linguistic mechanisms largely outside control programmer 
type unsafe languages programmers control memory management tailor routines application specific constraints time space overheads general purpose memory management mechanisms suffice 
languages far complicated error prone programming model 
particular static type systems compilers run time systems languages prevent accidental uninitialized objects accidental re memory incompatible type 
errors extremely costly diagnose correct 
ultimate goal provide support memory management sacrificing incurring significant overhead 
addition hope discover general typing mechanisms principles allow greater design lowlevel languages intended systems applications target certifying compilers 
material supported part afosr national science foundation 
eia 
opinions findings recommendations expressed publication authors reflect views agencies 
david walker greg morrisett cornell university take step goals developing type system gives fine grained control memory management rich class recursively defined datatypes 
demonstrate power type system showing safely encode important classes optimization destination passing style link reversal traversals data structures 
background known principle proving type safety type invariance memory locations 
simply put property says allocated memory object conceptually stamped type type object change evaluation 
property maintained straightforward prove subject reduction type preservation property see example turn crucial establishing type soundness :10.1.1.44.5122
examples language design principle violated resulted unsoundness 
instance naive treatment polymorphic ml language covariant treatment arrays java language violate basic principle 
type invariance principle clear type safe languages support user level initialization memory recycling type memory object change initially type evaluation step 
atomic allocation initialization ensures invariant lack explicit re cycling ensures second 
appears meta linguistic mechanism necessary achieve memory management principle employed 
linear type systems employ different principle achieve subject reduction :10.1.1.25.9775
linear setting crucial invariant memory objects exactly object aliased 
traditional approach type memory object change time explicit initialization re cycling performed language 
unfortunately inability share objects aliasing steep cost common efficient data structures sharing involve cycles implemented 
previous considered generalization linear types supported limited degree aliasing :10.1.1.1.3318
linear type systems alias types supported separation allocation initialization explicit reuse memory linear approaches objects 
achieve subject reduction tracked aliasing type system giving memory objects unique names maintained invariant names unique 
alias types unified number ad hoc features typed assembly language including treatment initialization control stacks 
furthermore alias type constructors easy add type checker talx 
unfortunately named objects alias type system restricted second class status named objects passed functions type system prevented programmer placing objects recursive datatype list tree 
problem type system track aliasing certain compile time frontier respect similar limiting approaches alias analysis 
result embed linear datatypes language opportunities user level memory management greatly reduced 
extend alias types cover recursive datatypes full generality 
type system powerful encode linear variants lists trees richer data structures complex shapes aliasing relationships cyclic doubly linked lists trees 
critical addition type system mechanism combining recursive type operators class store abstractions represent repeated patterns aliasing 
respect inspired complex approaches alias shape analysis appeared literature :10.1.1.152.1240:10.1.1.152.183
generalization recursive datatypes opens door users certifying compilers far control memory management complex data structures 
demonstrate fact show classes space optimization encoded language recursive alias types 
optimization called style transforms algorithms modulo allocation properly tail recursive algorithms avoiding space overheads control stack 
second optimization shows safely encode deutsch waite algorithms traversing tree minimal additional space link reversal 
section motivate type structure language introducing series type theoretic abstraction mechanisms enable suitable approximations store 
show constructors may encode number common data structures losing ability explicitly manage memory 
section formalizes ideas presenting syntax static semantics programming language includes instructions allocating deallocating overwriting memory objects 
section shows destination passing style link reversal optimizations safely encoded language 
section presents operational semantics language states type soundness theorem 
close section discussing related 
types describing store shapes linear type captures extremely valuable memory management invariant access path value type 
consequently type components extracted safe reuse store new values incompatible types 
way access data chance reuse introduce inconsistent views store unsoundness system 
unfortunately restriction single access path impossible construct number important data structures 
goal lift restriction retain capacity reuse deallocate memory pointer 
approach intuition linear data structure may decomposed parts piece state pointer state 
destructive operations memory reuse alter state component leave pointer part unchanged 
consequently goal ensure inconsistencies arise state component need treated linearly 
pointer may freely copied making possible construct complex data structures shared parts 
course order pointer way relate state points 
relationship explicit type system introducing locations contain state component specializing type pointer indicate location points 
consider linear pair 
type state called aliasing constraint store description takes form 
type states location exists memory block containing objects types 
type pointer location ptr 
type singleton type pointer described type pointer location location 
simple trick provides tremendous flexibility advantage conventional linear type systems constraints may alias explicit restriction way pointer types may manipulated 
build complicated data structures joining number aliasing constraints constructor 
example dag may specified constraints 
ptr ptr ptr int type locations necessarily distinct appear left hand sides collection constraints 
type system maintains invariant store described constraints locations different 
invariant resembles invariants typing context standard linear type system 
example linear context xn implies xi distinct values linear types analogy exact linear type system prevents xi calculus allows pointers locations flexibility possible represent aliasing type paths location location direct indirect location 
important invariant constructor reminiscent linear pairs ordering constraints joined important equivalent 
sake brevity abbreviate 
abstraction mechanisms particular store represented exactly techniques stores containing cyclic data structures 
example node containing pointer may represented type ptr 
principle difficulty describing aliasing relationships specifying particular store able specify class stores single compact representation 
type theoretic abstraction mechanisms describe wide class pointer rich data structures 
location polymorphism general particular location contains object inconsequential algorithm executed 
relevant information connection location contents memory residing pointers ptr location 
routines operate specific concrete locations useless 
example dereference function operate single concrete location implement different dereference function location allocate store 
introducing location polymorphism possible away concrete location variable location retain necessary dependencies 
meta variable refer locations generically concrete variable 
store polymorphism specific routine operates portion store 
order routine multiple contexts irrelevant portions store store polymorphism 
store described constraints contains store unknown size shape location containing objects type 
meta variable range aliasing constraints general 
unions polymorphic types unions provide users abstraction finite number choices 
memory block holds integer pointer may encoded type int ptr order contents block safely way detect element union underlying value belongs :10.1.1.11.5999
ways perform test pointer equality test object known type small integers including null pointers distinguishing components explicit tags 
options useful implementation concentrate third option 
alternatives encoded type int ptr form singleton type type containing integer recursion defined mechanism describing regular repeated structure store 
standard recursive types form capture notion 
recursion 
consider attempt represent store containing linked list obvious way 
unfolding definition results type represent store containing pointer middle memory block 
convention union binds tighter recursion operator 
list type ptr list 
type describes number memory blocks flattened location type describes linked collection disjoint nodes 
encapsulation order represent linked recursive structures properly unfolding encapsulate portion store 
existential type purpose 
sensible representation linked lists loc ptr existential loc may read exists location different program contains object type andthe value contained data structure type 
generally existential form 
abstracts sequence type variables kinds encapsulates store described constraints examples omit kinds sequence clear context 
similar definition gives rise trees 
ptr ptr notice existential abstracts pair locations locations bound store 
definition infer subtrees disjoint 
sake contrast dag node pair pointers single successor coded follows 
reuse location variable indicates aliasing 
ptr ptr cyclic lists trees leaves point back roots cause little problem simply replace terminal node memory block containing pointer type back roots 
ptr ptr ptr 
ptr ptr parameterized recursive types common data structure unable encode types described far doubly linked list 
recursive types unfold direction making easy represent pointers parent children way back top level store difficult represent pointers point back children parents case doubly linked lists trees pointers back parent nodes 
solution problem parameterized recursive types pass parent location children 
general parameterized recursive type form rec kind type 
continue recursive types examples consider abbreviation rec 
kinds omitted clear context 
trees node pointer parent may encoded follows 
root ptr ptr rec root rec root rec rec prt curr 
ptr prt curr curr 
ptr ptr ptr prt tree root node location root points pair children locations defined recursive type rec 
rec arguments location immediate parent prt location current node curr 
current node leaf case points back immediate parent interior node case contains pointers children pointer parent 
children defined recursively providing location current node curr parent parameter location respective child current pointer 
function types functions polymorphic type arguments express shape store required function 
underlying term language written continuation passing style functions return call function function continuation 
notation indicate fact 
continuation passing style extremely convenient setting flow control explicit language store shape varies control flow point 
summary type structure formal syntax type constructor language defined table 
distinguish subset types called small types additional storage need allocated copied 
small types contain objects integers functions data pointers 
function parameters required contain small types function application modeled substitution copies values 
likewise fields memory blocks small field projection copies values 
kinds loc store small type type con 
vars con 
constructors purposes ignore space required closures 
language powerful encode closure conversion style morrisett 
desired closure environments represented memory blocks functions required closed 
locations constraints types rec cn small types int ptr judgement states type formed kind assignment free type variables kinds 
locations kind loc aliasing constraints kind store kind small types may kind type 
recursive types arrow kinds eliminated constructor application cn 
judgement states type constructors equivalent formed kind 
types considered equivalent alpha conversion bound variables constraints considered equivalent reordering elements sequence 
recursive type considered equal unfolding 
formal rules judgements straightforward omitted due space considerations 
see companion technical report details 
notation denote substitution variable occasionally notation cn denote substitution constructors cn corresponding type variables domain 
substitution defined way cases substitution constraints constraints 
substitution constraint variable appends list list denote result appending notice syntactically formed 
example am am formally substitution constraints defined follows 
continue omit initial constraint non empty 
example write 
term structure term structure split classes values instructions coercions 
grammar describes syntax language 
values xn instruct new free case inl inr vn halt coerce coercions union cn unroll pack cn unpack int small xn xn small values values consist integers singleton integers functions 
typing judgements form finite partial map value variables small types 
rules standard 
notice functions may recursive contain specification polymorphic variables requirements store types parameters 
preconditions type instruction sequence forms body function 
value denotes type application polymorphic function type constructor abbreviate successive type applications cn cn 
give operational semantics language add values pointers memory blocks objects appear run time omit 
instructions typing rules instructions 
judgement states type context store described value context instruction sequence formed 
principle interest language typing memory management instructions 
operationally new instruction allocates memory block size fresh location substitutes location pointer location remaining instructions 
operation modeled type system extending store description memory type length initially fields memory block type assume allocator returns zeroed memory 
block allocated may operated accessor functions project store th field 
projection operation formed pointer location location contains object type 
case remaining instructions formed additional assumption type update operation similar pointer location containing memory block 
purposes alpha conversion considered bound instruction 
allocator returns random memory may modelled adding top type returning memory block fields type top 
static semantics values type remaining instructions verified context type memory block changed th field type location unconstrained 
surprising rule sound constraints behave linearly 
despite fact type memory block location changes location appear domain store type opportunity introduce inconsistencies store typing 
constraints describe formed store 
instruction free frees memory block pointed effect reflected typing rule free requiring remaining instructions formed context include location 
typing case expression somewhat unusual 
operationally case checks field memory block location pointed value field execution continues instruction sequence execution continues second instruction sequence 
memory type constructor top type constructor 
union type top alternative may contain number possibly zero existential quantifiers store encapsulated alternative 
underlying memory value tag tag field 
mentioned earlier possible formulate union elimination constructs including pointer equality checks discrimination pointers small integers null implemented 
language defined continuationpassing style instruction sequences terminated function call vn call terminal continuation halt requires integer argument 
function calls formed polymorphic function fully instantiated constraints current context equal constraints required function argument types match types function parameters 
instruction coerce applies typing coercion store 
coercions instructions type checking purposes 
intuitively coercions may erased executing program run loc ptr new dom dom ptr store free ptr store ptr store ptr store 
type type 
case inl inr dom vn vn time behaviour affected 
judgement form indicates coercion formed extends type context produces new store constraints judgements 
coercion operates particular store location 
union coercion lifts object union type roll unroll coercions witness isomorphism recursive type unfolding 
coercion pack cn cn introduces existential type hiding type constructors cn encapsulating store described cn 
unpack coercion eliminates existential type augments current constraints encapsulated extends type context hidden type constructors 
applications section show language encode common programming patterns destination int halt coerce static semantics instructions passing style pattern constructs data structures efficiently deutsch waite link reversal patterns traverse data structures minimal additional space 
destination passing style effective optimization functional languages destination passing style dps transformation 
wadler realized compilers detect certain recursive functions automatically transform functions efficient tail recursive functions 
researchers studied various facets problem 
contribution provide type system type preserving compiler capable verifying code resulting transformation safe 
append canonical example function suitable dps store type type union rec cn type rec cn store fun append xs ys case xs hd tl hd append tl ys roll store rec cn type unroll rec cn ci cn cn store pack cn cn second operation second arm case function call operation constructs cons cell 
operations inverted efficient tail recursive function 
dps function allocates cons cell recursive call passes partially uninitialized value function computes result fills uninitialized part data structure 
input list xs linear 
case possible optimize program reusing input list cells output list 
example performs optimizations 
presenting code optimized function need define number abbreviations 
abbreviations aid readability help compress typing information compiler 
recall type integer lists list unrolling list list int ptr list list int ptr list definitions useful define composite coercion 
packing pack list list int ptr coercion operates portion store shape int ptr list 
packs existential lifts resultant object store unpack static semantics coercions union type rolls producing store shape list 
function append implements inner loop optimized append function 
wrapper function check case input list empty 
passes pointers list aliases append parameters prev start 
passes pointer second element list parameter xs pointer second list parameter ys 
notice contents location described aliasing constraints 
iteration loop alias successive iterations abstracted 
facts explicit type structure iteration loop cont aware equals may resultant list 
place look understand code aliasing constraints act loop invariant 
reading constraints type left right reveals function expects store unknown part known part 
known part contains cons cell location linked list location xs 
independent objects third location ys contains list 
instruction function recursive type object xs reveal union eliminated case statement 
branch case xs point null 
code frees null cell resulting store program point described constraints int ptr xs ys list 
observe cons cell contains dangling pointer memory location xs location just freed longer appears constraints 
despite dangling pointer code perfectly safe typing rules prevent pointer 
second list ys cons cell fix append xs ys int ptr xs xs list ys list 
xs xs ys ys prev ptr start ptr cont 
unroll xs case xs inl free xs 
prev ys 
packing ys 
cont start inr unpack xs tl 
tl xs 
append int ptr xs tl ys xs tl ys xs start cont list ptr optimized append program point store shape described int ptr ys ys list 
thetype cons cell different reflecting new link structure store 
tail cell longer points location xs ys 
packing rolling composite coercion store described list 
shape equals shape expected continuation see definition function call valid 
second branch case xs point cons cell 
existential containing tail list unpacked program point store shape int ptr xs xs int ptr tl tl list ys list 
xs 
complete loop code uses polymorphic recursion 
second branch constraint variable iteration loop instantiated current contents location hiding previous node list 
location variables xs instantiated reflect shift node list 
locations ys invariant loop instantiated 
problem define continuation cont iteration 
function continuation cont 
close inspection reveals iteration append requires continuation type int ptr xs xs continuation cont type 
problem iteration recursion unrolled unpacked recursive data structure pointed xs returning calling continuation list packed rolled back 
appropriate definition cont cont packing xs 
continuation packs xs rolls contents location list constraints satisfy requirements continuation cont 
semantically cont equivalent function 
fix int ptr xs xs list start ptr 
packing xs cont start coercions erased running program simple arrange cont implemented cont 
deutsch waite algorithms deutsch waite link reversal algorithms known algorithms traversing data structures incurring minimal additional space overhead 
algorithms developed executing mark phase garbage collector 
garbage collection little extra space available storing control information minimizing overhead traversal 
sobel friedman shown automatically transform certain continuation passing style programs generated anamorphisms algorithms :10.1.1.34.4440
give example encode link reversal algorithm calculus 
application definition trees section 
tree 
ptr ptr tree tree tree 
ptr ptr code algorithm appears 
trick algorithm recursing left subtree uses space normally reserved pointer subtree point back parent node 
similarly recursing right subtree uses space right pointer 
cases uses tag field data structure store continuation knows recurse right subtree follow parent pointers back tree 
ascending back tree algorithm restores link structure proper tree shape type system checks done properly 
notice functions continuations closed stack hiding closures 
operational semantics type soundness section define syntax static semantics values manipulated run time including pointers memory blocks store give operational semantics language 
type system sound respect semantics 
run time values run time values consist values defined previous sections pointers ptr memory blocks vn witnessed values 
witnessed values introduced coercions 
example union coercion introduces union witness similarly roll pack coercions 
notice values type checked empty type context empty value context evaluation open terms nonsensical 
traverse tree node tree ptr ptr cont 
unroll case inl cont inr unpack store cont tag position cont left store parent pointer left subtree walk ptr ptr tree left walk right hand subtree ptr ptr tree tree left ptr ptr 
restore left subtree left right store parent pointer right subtree walk ptr ptr tree right finish reconstruct tree node return finish ptr ptr tree tree right ptr ptr 
restore right subtree right cont restore tag pack cont tree ptr ptr deutsch waite tree traversal constant space overhead values ptr vn witnesses union pack cn roll rec cn type union rec cn type rec cn roll ci cn cn pack cn pack coercion encapsulates portion store finite partial mapping concrete locations values 
treat stores equivalent reordering elements notation denote extension include mapping 
notation undefined dom 
store formedness judgement written 
vn store vi duplicate locations domain store finite partial map 
require stronger property stores prove program evaluation get stuck 
informally duplication locations domain store encapsulated store 
call property global uniqueness 
definition global uniqueness gu duplicate locations 
definition global store locations multi set definition 
vn vn pack cn xn term construct xn subcomponents program store paired instruction stream 
program formed written circumstances 
definition formed program iff 
store adheres global uniqueness gu 

exists constraints 
instructions formed constraints 
new ptr vn free ptr vn ptr vn vi vi vn ptr vn inl inr union vn vn vn cm xn cm vn xn coerce operational semantics small step operational semantics language function majority operational rules entirely standard formalize intuitive rules described earlier 
operational rule coerce instruction depends separate semantics coercions form substitution type constructors type constructors variables 
inspection rules reveals coercions alter association locations memory blocks simply insert witnesses alter typing derivation possible prove type soundness result 
rules program coercion operational semantics may figures 
type soundness pieces necessary state prove execution program language get stuck stuck program program terminal configuration halt operational rule applies 
theorem type soundness stuck 
proof uses standard subject reduction progress lemmas style popularized wright felleisen mechanical :10.1.1.44.5122
due space limitations included 
see companion technical report details 
related type system builds foundational groups syntactic control interference linear operational semantics programs type systems functional programming languages :10.1.1.25.9775
owe researchers alias analysis imperative languages :10.1.1.152.1240:10.1.1.152.183
type system appears closely related shape analysis developed sagiv reps wilhelm srw 
precise relationship currently unknown clear key features srw shape analysis effective similar alias analyses expressed type system 
specifically 
analyses srw shape nodes contain information concrete locations site node allocated 
type system drops information concrete locations location polymorphism 

srw shape nodes named set program variables point node 
type system label node single name able express fact set program variables point node singleton type program variable set 

srw shape nodes may flagged unshared 
linear types account unshared shape nodes 

single srw summary node describes memory blocks process materialization summary node may split new separate shape node 
summary nodes may represented recursive types framework materialization explained process unrolling unpacking recursive existential type 
union union roll roll unroll roll pack cn pack cn vm unpack pack cn ss cn advantages approach language straightforward create dependencies functions data store location polymorphism 
example implementation deutsch waite algorithm manipulate continuations know reconstruct formed tree current heap structure able express dependence type system 
explicit manipulation continuations necessary sufficiently low level typed languages typed assembly language return addresses interpreted continuations :10.1.1.12.4086
focused developing expressive pointer logics describing shape store 
logics express sophisticated pointer relationships type structure described 
example benedikt provide complex logic includes path equality inequality relations allocation constraints reachability constraints connectives 
type system built starting concept finite partial map describe store combination standard type constructors singleton union polymorphic existential recursive types 
type constructors reused variety different purposes type preserving compiler representing closures data flow analysis object encodings source level polymorphism existential types 
engineering perspective definite advantages reusing type structure possible 
authors considered alternatives pure linear type systems increase flexibility 
example kobayashi extends standard linear types data flow information minamide uses linear type discipline allow programmers manipulate data structures hole minamide language allows users write programs compiled destination passing style :10.1.1.31.469
minamide language quite high level show verify explicit pointer manipulation 
type systems provide ability represent cyclic data structures 
tofte talpin explored region memory management :10.1.1.24.9456:10.1.1.1.3704
objects allocated regions memory 
region deallocated objects region deallocated 
region memory management performs extremely circumstances systems linear types space general operational semantics coercions reused object basis 
regions encapsulated inside recursive data structures 
believe techniques developed may adapted region setting eager investigate combined framework take advantage forms typed memory management 
fred smith worked predecessor research stimulating discussions contributed current 
neal glew helpful comments earlier draft 
alexander aiken manuel hndrich levien 
better static memory management improving region analysis higher order languages 
acm conference programming language design implementation pages la jolla california 
erik barendsen smetsers 
conventional uniqueness typing graph rewrite systems extended 
thirteenth conference foundations software technology theoretical computer science pages bombay 
ed springer verlag lncs 
michael benedikt thomas reps mooly sagiv 
decidable logic describing linked data structures 
european symposium programming pages amsterdam march 
lars birkedal mads tofte magnus 
region inference von neumann machines region representation inference 
third acm symposium principles programming languages pages st petersburg january 
perry cheng chris okasaki 
destination passing style generational garbage collection 
unpublished november 
karl crary david walker greg morrisett 
typed memory management calculus capabilities 
sixth acm symposium principles programming languages pages san antonio january 
alain deutsch 
interprocedural may alias analysis pointers limiting 
acm conference programming language design implementation pages orlando june 
allyn robert muller turbak wells 
strongly typed flow directed representation transformations 
acm international conference functional programming pages amsterdam june 
rakesh ghiya laurie hendren 
tree dag cyclic graph 
shape analysis heap directed pointers third acm symposium principles programming languages pages st petersburg beach florida january 
dan grossman greg morrisett 
scalable certification native code experience compiling talx 
technical report tr cornell university february 
robert harper 
simplified account polymorphic 
information processing letters august 
neil jones steven muchnick editors 
flow analysis optimization lisp structures 
prentice hall 
nils klarlund michael schwartzbach 
graph types 
twentieth acm symposium principles programming languages pages charleston january 
naoki kobayashi 
quasi linear types 
sixth acm symposium principles programming languages pages san antonio january 
james larus paul hilfinger 
detecting conflicts structure accesses 
acm conference programming language design implementation pages june 
james richard larus 
restructuring symbolic programs concurrent execution multiprocessors 
phd thesis university california berkeley may 
available berkeley technical report ucb csd 
erik meijer maarten fokkinga ross paterson 
functional programming bananas lenses envelopes barbed wire 
acm conference functional programming computer architecture 
published lecture notes computer science springer verlag 
minamide 
functional representation data structures hole 
fifth acm symposium principles programming languages pages san diego january 
minamide morrisett harper 
typed closure conversion 
third acm symposium principles programming languages pages st petersburg january 
bernhard ller 
pointer algebra 
science computer programming 
greg morrisett karl crary neal glew david walker :10.1.1.12.4086
stack typed assembly language 
second international workshop types compilation pages kyoto march 
published xavier leroy atsushi ohori editors lecture notes computer science volume pages 
springer verlag 
greg morrisett david walker karl crary neal glew 
system typed assembly language 
fifth acm symposium principles programming languages pages san diego january 
george necula peter lee 
design implementation certifying compiler 
acm conference programming language design implementation pages montreal june 
benjamin pierce david turner 
simple type theoretic foundations object oriented programming 
journal functional programming 
john reynolds 
syntactic control interference 
fifth acm symposium principles programming languages pages tucson 
mooly sagiv thomas reps reinhard wilhelm 
solving shape analysis problems languages destructive updating 
acm transactions programming languages systems january 
mooly sagiv thomas reps reinhard wilhelm 
parametric shape analysis valued logic 
sixth acm symposium principles programming languages pages san antonio january 
waite 
efficient machineindependent procedure garbage collection various list structures 
communications acm august 
frederick smith david walker greg morrisett :10.1.1.1.3318
alias types 
european symposium programming march 
appear 
available www cs cornell edu papers html 
sobel daniel friedman :10.1.1.34.4440
recycling continuations 
acm international conference functional programming pages baltimore september 
talx 
see www cs cornell edu implementation typed assembly language intel ia architecture 
mads tofte jean pierre talpin 
implementation typed call value calculus stack regions 
acm symposium principles programming languages pages portland oregon january 
david turner philip wadler christian mossin 
type 
acm international conference functional programming computer architecture san diego ca june 
philip wadler 
better laziness 
phd thesis carnegie mellon university august 
available carnegie mellon university technical report cmu cs 
philip wadler 
linear types change world 
broy jones editors concepts methods sea israel april 
north holland 
ifip tc working conference 
david walker greg morrisett 
alias types recursive data structures extended version 
technical report tr cornell university march 
available www cs cornell edu papers html 
andrew wright matthias felleisen 
syntactic approach type soundness 
information computation 
