robust incentive techniques peer peer networks michal feldman sims berkeley edu school information management systems berkeley kevin lai hp com lack cooperation free riding key problems confronts today systems 
problem particularly difficult unique set challenges systems pose large populations high turnover asymmetry interest collusion zero cost identities traitors 
tackle challenges model system generalized prisoner dilemma gpd propose reciprocative decision function basis family incentives techniques 
techniques fully distributed include discriminating server selection subjective reputation adaptive stranger policies 
simulation show techniques drive system strategic users nearly optimal levels cooperation 
categories subject descriptors computer communication networks distributed systems social behavioral sciences economics general terms design economics keywords incentives peer peer free riding reputation collusion cheap pseudonyms prisoners dilemma 
peer peer systems rely cooperation users 
example file sharing system download latency failure rate increase users share resources :10.1.1.12.6173
wireless ad hoc network packet latency loss rate increase nodes refuse forward packets behalf 
examples file preservation discussion boards online auctions overlay routing 
systems users natural cooperate cooperation consumes resources may degrade performance 
result user attempt maximize utility effectively lowers permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
ec may new york new york usa 
copyright acm 
hp labs ion stoica cs berkeley edu john chuang chuang sims berkeley edu computer science division berkeley example asymmetry interest 
wants service wants service form wants service utility system 
avoiding tragedy commons requires incentives cooperation 
adopt game theoretic approach addressing problem 
particular prisoners dilemma model capture essential tension individual social utility asymmetric payoff matrices allow asymmetric transactions peers learning population dynamic model specify behavior individual peers changed continuously 
social dilemmas studied extensively applications impose unique set challenges including large populations high turnover file sharing system gnutella kazaa exceed simultaneous users nodes average life time order minutes 
asymmetry interest asymmetric transactions systems create possibility asymmetry interest 
example wants service wants service wants service zero cost identity systems allow peers continuously switch identities 
strategies traditional prisoners dilemma games tit tat fare context 
propose family scalable robust incentive techniques novel reciprocative decision function address challenges provide different tradeoffs discriminating server selection cooperation requires familiarity entities directly indirectly 
large populations high turnover systems repeat interactions occur familiar entity 
show having peer keep private history actions peers discriminating server selection reciprocative decision function scale large populations moderate levels turnover 
shared history scaling higher turnover mitigating asymmetry interest requires shared history 
consider example 
provides service system operates optimally 
keeps private history provide service know served show shared history knows served consequently serve results higher level cooperation private history 
cost shared history distributed infrastructure distributed hash table storage store history 
maxflow subjective reputation shared history creates possibility collusion 
example falsely claim served deceiving providing service 
show maxflow algorithm computes reputation subjectively promotes cooperation despite collusion population 
basic idea believe provided service cost maxflow algorithm running time number nodes system 
eliminate cost developed constant mean running time variation trades effectiveness complexity computation 
show maxflow algorithm scales better private history presence colluders centralized trust required previous 
adaptive stranger policy zero cost identities allows peers escape consequences cooperating eventually destroy cooperation system stopped 
show reciprocative peers treat strangers peers history policy adapts behavior previous strangers peers little incentive nearly eliminated system 
adaptive stranger policy requiring centralized allocation identities entry fee newcomers rate limiting :10.1.1.30.6376
short term history history creates possibility previously behaved peer reputation turn traitor reputation exploit peers 
peer making strategic decision may hijacked identity compromising host 
long term history exacerbates problem allowing peers previous transactions exploit history new transactions 
show short term history prevents traitors disrupting cooperation 
rest organized follows 
describe model section reciprocative decision function section 
proceed incentive techniques section 
section describe challenges large populations high turnover show effectiveness discriminating server selection shared history 
section describe collusion demonstrate subjective reputation mitigates 
section problem zero cost identities show adaptive stranger policy promotes persistent identities 
section show traitors disrupt cooperation short term history deals 
discuss related section conclude section 
model assumptions section assumptions systems users introduce model aims capture behavior users system 
assumptions assume system users strategic act rationally maximize benefit 
capture real life unpredictability behavior users allow users randomly change behavior low probability see section 
simplicity assume homogeneous system peers issue satisfy requests rate 
peer satisfy request specified peers request service uniformly random population 
assume transactions incur cost servers provide benefit clients 
assume users pollute shared history false recommendations section switch identities zero cost section spoof users section 
assume centralized trust centralized infrastructure 
model aid development study incentive schemes section model users behaviors 
particular model benefits costs interactions game population dynamics caused mutation learning turnover 
model designed properties characterize large set systems social dilemma universal cooperation result optimal utility individuals exploit cooperation cooperating defecting benefit users cooperate 
asymmetric transactions peer may want service peer currently able provide service second peer wants 
transactions able asymmetric payoffs 
untraceable defections peer able determine identity peers 
models difficulty expense determining peer provided service didn example gnutella file sharing system peer may simply ignore queries despite possessing desired file preventing querying peer identifying defecting peer 
dynamic population peers able change behavior enter leave system independently continuously 
exception discussed section client cooperate defect server cooperate defect payoff matrix generalized prisoner dilemma 
stand temptation reward punishment respectively 
generalized prisoner dilemma prisoner dilemma developed flood tucker non cooperative repeated game satisfying social dilemma requirement 
game consists players defect cooperate 
depending acts players receive payoff 
players strategy decide act 
unfortunately existing uses specific asymmetric payoff matrix gives general form symmetric 
generalized prisoner dilemma gpd specifies general form asymmetric payoff matrix preserves social dilemma 
gpd player client player server game decision server meaningful determining transaction 
player client game server 
client server receive payoff generalized payoff matrix 
rc sc tc pc client payoff rs ss ts ps server payoff 
gpd payoff matrix properties create social dilemma 
mutual cooperation leads higher payoffs mutual defection rs rc ps pc 

mutual cooperation leads higher payoffs player rs rc sc ts rs rc ss tc 

defection dominates cooperation weakly individual level entity decides cooperate defect ts rs ps ss ts rs ps ss set inequalities assume clients incur cost regardless cooperate defect clients cooperate 
properties correspond similar properties classic prisoner dilemma allow form asymmetric transaction creating social dilemma 
furthermore possible actions client cooperate defect server cooperate defect untraceable 
player untraceable action player know identity player 
example model application file sharing overlay routing specific payoff matrix values shown 
satisfies inequalities specified server choose cooperating defecting 
addition particular payoff matrix clients unable trace server defections 
payoff matrix simulation results 
client request service don request provide service server ignore request payoff matrix application file sharing overlay routing 
population dynamics characteristic systems peers change behavior enter leave system independently continuously 
studies repeated prisoner dilemma games evolutionary model population dynamics 
evolutionary model suitable systems specifies global behavior changes occur discrete times 
example may specify population cooperate players defect players evolves population players respectively 
specify specific players switched 
furthermore switching occurs generation continuously real system 
result evolutionary population dynamics accurately model turnover traitors strangers 
model entities take independent continuous actions change composition population 
time consists rounds 
round player plays game client game server 
round player may mutate learn turnover stay 
player mutates switches randomly picked strategy 
learns switches strategy believes produce higher score described detail 
maintains identity switching strategies referred traitor 
player suffers turnover leaves system replaced newcomer uses strategy exiting player 
learn player collects local information performance different strategies 
information consists personal observations strategy performance observations players interacts 
models users communicating band strategies perform 
running average performance player current strategy round age number rounds strategy 
strategy rating age age age compute running average ratio prevent young samples outliers skewing rating 
round player switches highest rated strategy probability proportional difference score current strategy highest rated strategy 

reciprocative decision function section new decision function reciprocative basis incentive techniques 
decision function maps history player actions decision cooperate defect player 
strategy consists decision function private shared history server selection mechanism stranger policy 
approach incentives design strategies maximize individual social benefit 
strategic users choose strategies drive system high levels cooperation 
examples simple decision functions cooperate defect 
cooperate models naive user realize exploited 
defect models greedy user intent exploiting system 
absence incentive techniques defect users quickly dominate cooperate users destroy cooperation system 
requirements decision function shared subjective history deal untraceable defections robust different patterns defection 
previous decision functions tit tat image see section satisfy criteria 
example tit tat image base decisions cooperations defections deal untraceable defections section remaining sections demonstrate strategies satisfy requirements stated 
probability reciprocative player cooperates peer function normalized generosity 
generosity measures benefit entity provided relative benefit consumed 
important entities consume services provide provide services cause cooperation collapse 
entity pi ci services provided consumed respectively 
entity generosity simply ratio service provides service consumes pi ci 
possibility cooperate probability equal generosity 
effective cases cases reciprocative player may consume provides initially stranger defect policy 
cause reciprocative players defect 
prevent situation reciprocative player uses generosity measuring stick judge peer generosity 
normalized generosity measures entity generosity relative entity generosity 
concretely entity normalized generosity perceived entity gj 
remainder section describe simulation framework demonstrate benefits baseline reciprocative decision function 
parameter nominal value section population size run time rounds payoff matrix file sharing ratio cooperate ratio defect ratio reciprocative mutation probability learning probability turnover probability hit rate table default simulation parameters 
simulation framework simulator implements model described section 
asymmetric file sharing payoff matrix untraceable defections models transactions systems file sharing packet forwarding ad hoc overlay networks 
simulation study composed different scenarios reflecting challenges various non cooperative behaviors 
table presents nominal parameter values simulation 
ratio rows refer initial ratio total population particular strategy 
scenario vary value range specific parameter reflect particular situation attack 
vary exact properties reciprocative strategy defend situation attack 
baseline results population total population time total population recip 
private time evolution strategy populations time 
time number elapsed rounds 
population number players strategy 
section dynamics game basic scenario table familiarize reader set baseline complicated scenarios 
figures players players show players switching higher scoring strategies time separate runs simulator 
point graph represents number players particular strategy point time 
figures show corresponding mean score round 
measures degree cooperation system maximum possible achieved everybody cooperates minimum achieved everybody defects 
file sharing payoff matrix net means able download file means mean score round total population time total population time mean round score time 
able 
metric results evaluate incentive techniques 
shows reciprocative strategy private history causes system players converge cooperation level drops players 
expect player system reach optimal level cooperation eliminated system 
asymmetry interest 
example suppose player reciprocative private history 
player may happen ask service player twice succession providing service player interim 
player know service player provided player reject service player player cooperative 
discuss solutions asymmetry interest failure reciprocative player system section 
reciprocative incentive techniques section incentives techniques evaluate behavior simulation 
exposition clear group techniques challenges address large populations high turnover section section zero cost identities section traitors section 
large populations high turnover large populations high turnover systems repeat interactions occur familiar entity 
conditions basing decisions private history records interactions peer directly involved effective 
addition private history deal asymmetry interest 
example player cooperated player past player indication player generosity may unduly defect 
propose mechanisms alleviate problem repeat transactions server selection shared history 
server selection natural way increase probability interacting familiar peers discriminating server selection 
asymmetry transactions challenges selection mechanisms 
prisoner dilemma payoff matrix players benefit single transaction transactions gpd asymmetric 
result player selects donor second time contributing interim may face defection 
addition due untraceability defections impossible maintain blacklists avoid interactions known 
order deal asymmetric transactions player holds fixed size lists past donors past recipients selects server lists random equal probabilities 
way users approach past recipients give chance reciprocate 
scenarios selective users omit complete availability assumption prevent players clustered lot small groups assume player perform requested service probability results section 
addition order avoid bias favor selective players players including non discriminative ones select servers games 
demonstrates effectiveness proposed selection mechanism scenarios large population sizes 
fix initial ratio reciprocative population varying population size notice figures data points demonstrates evolution system time data point result entire simulation specific scenario 
shows reciprocative decision function private history conjunction selective behavior scale large populations 
fix population size vary turnover rate 
demonstrates selective behavior effective low turnover rates turnover gets higher selective behavior scale 
occurs selection effective long players past stay alive long selected games 
shared history order mitigate asymmetry interest scale higher turnover rate need shared history 
shared history means peer keeps records interactions occur system regardless directly involved 
allows players leverage experiences cases repeat transactions 
requires interacted particular player entire population observe scales better large populations high tolerates asymmetry interest 
examples shared history schemes 
shows effectiveness shared history high turnover rates 
fix population size vary turnover rate 
selective players private history tolerate moderate turnover shared history scales approximately 
means players leave system round 
fix turnover vary population size 
shows shared history causes system converge optimal cooperation performance regardless size population 
results show shared history addresses challenges large populations high turnover asymmetry transactions 
shared history disadvantages 
mean score round shared non sel private non sel private selective private vs shared history function population size 
mean score round shared non sel private non sel private selective turnover performance selection mechanism turnover 
axis turnover rate 
axis mean round score 
decentralized implementation private history straightforward implementation shared history requires communication overhead centralization 
decentralized shared history implemented example top dht peer peer storage system disseminating information entities similar way routing protocols 
second fundamental shared history vulnerable collusion 
section propose mechanism addresses problem 
collusion shared history attacks collusion shared history scalable vulnerable collusion 
collusion positive defecting entities claim defecting entities cooperated negative entities claim cooperative entities 
collusion strategy system agrees reputation player objective reputation 
example objective reputation reciprocative decision function shared history count total number cooperations player received entities system example image strategy 
effect collusion mag systems zero cost identities users create fake identities report false statements 
deal collusion entities compute reputation subjectively player weighs player opinions player trusts player subjective algorithm maxflow 
maxflow graph theoretic problem directed graph weighted edges asks greatest rate material shipped source target violating capacity constraints 
example edge labeled amount traffic travel 
maxflow algorithm computes maximum amount traffic go source target violating constraints 
example loop high capacity edges maxflow source target numbers brackets represent actual flow edge solution 
edge graph labeled capacity actual flow carries brackets 
maxflow source target graph 
graph illustrates robustness maxflow presence colluders report bogus high reputation values 
apply maxflow algorithm constructing graph vertices entities edges services entities received 
information stored methods shared history 
maxflow greatest level reputation source give sink violating reputation capacity constraints 
result nodes report high reputation values able subvert reputation system 
illustrates scenario colluders labeled report high reputation values 
node computes subjective reputation maxflow algorithm affected local false reputation values maxflow case 
service received colluders 
algorithm benefit entity received indirectly entity maxflow conversely benefit entity provided indirectly maxflow subjective reputation entity perceived mean score round maxflow min maxflow population shared private subjective subjective shared history compared objective shared history private history presence colluders 
algorithm bound mean running time maxflow constant 
method ct maxflow self src dst self surplus self surplus self increment running mean prediction 
random self surplus self mean iterations return surplus run 
get flow number iterations maxflow alg 
flow iterations maxflow self src dst self surplus self surplus iterations keep running mean number iterations 
self mean iterations self self mean iterations self iterations return flow cost maxflow long running time 
standard maxflow algorithm worst case running time 
algorithm constant mean running time returns flow exists 
essential idea bound mean number nodes examined maxflow computation 
bounds overhead bounds effectiveness 
despite results show maxflow reciprocative decision function scales higher populations private history 
compares effectiveness subjective reputation objective reputation presence colluders 
scenarios collude claiming colluders encounter gave cooperations encounter 
parameters algorithm set follows increment 
previous sections reciprocative private history results cooperation point fails 
difference objective shared history fails population sizes 
reciprocative players cooperate colluders high reputations 
subjective history reach high levels cooperation regardless colluders 
high weight paths cooperation graph colluders non colluders maxflow non 
subjective reciprocative player conclude provided service reject service 
maxflow algorithm enables reciprocative maintain scalability shared history vulnerable collusion requiring centralized trust trusted peers 
bound running time maxflow algorithm cooperation decreases population size increases key point subjective reciprocative decision function scales higher populations private history 
advantage increases time cpu power increases cycles devoted running maxflow algorithm increasing increment parameter 
despite robustness maxflow algorithm simple form collusion described previously vulnerabilities sophisticated attacks 
entity mole provide service lie positively colluders 
colluders exploit reputation receive service 
effectiveness attack relies amount service mole provides 
mole paying cost providing service receiving benefit strong incentive colluding try strategy 
forces colluders mechanisms maintain cooperation group may drive cost collusion exceed benefit 
false reports attack lie receiving providing service entity 
actions providing service providing service receiving service receiving service 
falsely claiming receive service simple collusion attack described 
falsely claiming provided service provides benefit attacker 
falsely claiming provided service received allows attacker boost reputation lower reputation entity 
entity may want lower entity reputation order discourage selecting exclusively service 
false claims clearly identifiable shared history inconsistencies entity claims transaction occurred claims 
limit attack modify maxflow algorithm entity believes entity closer flow graph 
entities equally distant disputed edge flow critical evaluation ignored 
modification prevents cases attacker making false claims entity closer evaluating entity prevents boosting reputation 
remaining possibilities attacker falsely claim provided service received victim entity farther 
cases attacker lower reputation victim 
effectiveness doing limited number services provided received attacker executing attack expensive 
zero cost identities history assumes entities maintain persistent identities 
systems identities zero cost 
desirable network growth encourages newcomers join system 
allows misbehaving users escape consequences actions switching new identities 
cause system collapse punished appropriately 
unfortunately player tell stranger legitimate newcomer 
cooperating strangers encourages newcomers join time encourages behavior 
defecting strangers prevents discourages newcomers joining may initiate unfavorable cycles defection 
tension suggests stranger policy fixed probability cooperating strangers fail strangers newcomers generous strangers 
solution stranger adaptive stranger policy 
idea generous strangers generous 
ps cs number services strangers provided consumed respectively 
probability player stranger adaptive helps stranger ps cs 
wish keep counts permanently reasons described section 
players may know strangers defect defections untraceable described section 
consequently keeping ps cs assume ps cs constant keep running ratio ps cs 
need increment ps cs generate current values ps cs cs ps cs compute new follows ps cs stranger provided service ps cs stranger consumed service method allows keep running ratio reflects generosity strangers knowing strangers 
mean score round stranger cooperate stranger defect stranger adaptive turnover different stranger policies reciprocative shared history 
axis turnover rate log scale 
axis mean round score 
figures compare effectiveness reciprocative strategy different policies strangers 
mean score round turnover stranger cooperate stranger defect stranger adaptive different stranger policies reciprocative private history 
axis turnover rate log scale 
axis mean round score 
compares different stranger policies reciprocative shared history private history 
figures players defect strategy change identity transaction indistinguishable legitimate newcomers 
reciprocative players stranger cooperate policy completely fail achieve cooperation 
stranger policy allows maximize payoff consequently provides high incentive users switch 
contrast shows stranger defect policy effective shared history 
appear strangers reciprocative players defect 
consistent previous showing punishing strangers deals 
shows stranger defect effective private history 
reciprocative requires initial cooperation bootstrap 
shared history case reciprocative player observe player cooperated 
private history reciprocative player knows players actions 
initial defection dictated stranger defect policy lead defections prevent reciprocative players cooperating 
simulations shown stranger defect stranger policy fails shared history initial cooperate players 
shows shared history stranger adaptive policy performs stranger defect policy turnover rate high population turning transaction 
scenarios stranger adaptive player keeps private importantly significantly better stranger defect policy private history bootstrap cooperation 
stranger defect policy marginally effective stranger adaptive high rates turnover systems operate services routing tolerate high turnover 
conclude stranger policies explored stranger adaptive effective 
stranger adaptive systems zero cost identities sufficiently low turnover sustain cooperation centralized allocation identities 
traitors traitors players acquire high reputation scores cooperating turn leaving system 
model users turn deliberately gain higher score identities stolen exploited 
strategy maintains longterm history discriminating old actions highly vulnerable exploitation traitors 
top graphs demonstrate effect traitors cooperation system players keep long term history clear history 
simulations run rounds allow cooperative players keep identities switching strategy 
default values parameters 
traitors cooperative strategies thrive 
traitors cooperative strategies thrive turns traitor rounds 
exploits reputation achieve high score cooperative players notice follow suit learning 
cooperation eventually collapses 
hand maintain short term history discounting ancient history vis vis history traitors quickly detected cooperation level stays high shown bottom graphs 
long term history population short term history population traitors time recip 
shared traitors time keeping long term vs short term history traitors 

related previous examined incentive problem applied societies general internet applications peer peer systems particular 
known phenomenon context tragedy commons resources provisioned due selfish users free ride system resources especially common large networks :10.1.1.12.6173
problem extensively studied adopting game theoretic approach 
prisoners dilemma model provides natural framework study effectiveness different strategies establishing cooperation players 
simulation environment repeated games persistent identities collusion axelrod shows tit tat strategy dominates 
model assumes growth follows local learning evolutionary dynamics allows kinds attacks 
nowak sigmund introduce image strategy demon strate ability establish cooperation players despite repeat transactions employment shared history 
players image cooperate players global count cooperations minus defections exceeds threshold 
result image player vulnerable partial threshold set low cooperate image players threshold set high 
years researchers economic mechanism design theory tackle cooperation problem internet applications 
mechanism design inverse game theory 
asks design game behavior strategic players results socially desired outcome 
distributed algorithmic mechanism design seeks solutions framework fully distributed computationally tractable 
examples applying bgp routing multicast cost sharing 
studied dynamic environments 
context demonstrating superiority cooperative strategy case consistent objective desired behavior selfish players 
unique challenges imposed peer peer systems inspired additional body mainly context packet forwarding wireless ad hoc routing file sharing 
friedman resnick consider problem zero cost identities online environments find systems punishing newcomers inevitable 
theoretical model demonstrate system converge cooperation sufficiently low turnover rates results confirm 
show collusion dire consequences peer peer systems difficult prevent fully decentralized system 
commercial file sharing clients provide incentive mechanisms enforced making difficult user modify source code 
mechanisms circumvented skilled user competing releasing compatible client incentive restrictions 
mechanisms vulnerable zero cost identities collusion 
bittorrent uses tit tat method resource allocation user upload rate dictates download rate 

take game theoretic approach problem cooperation peer peer networks 
addressing challenges imposed systems including large populations high turnover asymmetry interest zero cost identities propose family scalable robust incentive techniques reciprocative decision function support cooperative behavior improve system performance 
find adoption shared history discriminating server selection techniques mitigate challenge repeat transactions arises due large population size high turnover asymmetry interest 
furthermore cooperation established presence zero cost identities adaptive policy strangers 
colluders traitors kept check subjective reputations short term history respectively 

acknowledgments mary baker giuli petros maniatis anonymous reviewer shepherd margo seltzer useful comments helped improve 
supported part national science foundation itr awards ani ani career award ani 
views contained document authors interpreted representing official policies expressed implied nsf government 

kazaa 
www kazaa com 
limewire 
www limewire com 
adar huberman free riding gnutella :10.1.1.12.6173
monday october 
axelrod evolution cooperation 
basic books 
agrawal suri game theoretic framework incentives systems 
international conference peer peer computing sep 
castro druschel ganesh rowstron wallach security structured peer peer overlay networks 
proceedings multimedia computing networking mmcn 
cohen incentives build robustness bittorrent 
st workshop economics peer peer systems 
crowcroft kelly modeling incentives collaboration mobile ad hoc networks 
modeling optimization mobile ad hoc wireless networks 
douceur sybil attack 
electronic proceedings international workshop peer peer systems 
feigenbaum papadimitriou sami shenker bgp mechanism lowest cost routing 
proceedings acm symposium principles distributed computing 
feigenbaum papadimitriou shenker sharing cost multicast transmissions 
journal computer system sciences vol 
pp 

feigenbaum shenker distributed algorithmic mechanism design results directions 
proceedings international workshop discrete algorithms methods mobile computing communications 
friedman resnick social cost cheap pseudonyms 
journal economics management strategy 
fudenberg levine theory learning games 
mit press 
leyton brown mironov lillibridge incentives sharing peer peer networks 
proceedings rd acm conference electronic commerce october 
gross balances power ebay peers 
workshop economics peer peer networks 
gu jarvenpaa contributions technical forums private public goods 
empirical investigation 
st workshop economics peer peer systems 
hardin tragedy commons 
science 
josef hofbauer karl sigmund 
evolutionary games population dynamics 
cambridge university press 
kamvar schlosser garcia molina eigentrust algorithm reputation management networks 
proceedings twelfth international world wide web conference may 
kan peer peer harnessing power disruptive technologies st ed 
reilly associates march ch 
gnutella pp 

kuhn prisoner dilemma 
stanford encyclopedia philosophy edward ed summer ed 

lee sherwood bhattacharjee cooperative peer groups nice 
proceedings ieee infocom 
levien aiken attack resistant trust metrics public key certification 
proceedings usenix security symposium pp 

maniatis roussopoulos giuli rosenthal baker preserving peer replicas rate limited sampled voting 
acm symposium operating systems principles 
marti giuli lai baker mitigating routing misbehavior mobile ad hoc networks 
proceedings mobicom pp 

michiardi molva game theoretical approach evaluate cooperation enforcement mechanisms mobile ad hoc networks 
modeling optimization mobile ad hoc wireless networks 
nowak sigmund evolution indirect reciprocity image scoring 
nature 
olson logic collective action public goods theory groups 
harvard university press 
raghavan snoeren priority forwarding ad hoc networks self parties 
workshop economics peer peer systems june 
ranganathan ripeanu sarin foster share share analysis incentives contribute collaborative file sharing environments 
workshop economics peer peer systems june 
reiter stubblebine authentication metric analysis design 
acm transactions information system security 
saroiu gummadi gribble measurement study peer peer file sharing systems 
proceedings multimedia computing networking mmcn 
smith evolution theory games 
cambridge university press 
giordano modeling cooperation mobile ad hoc networks formal description selfishness 
modeling optimization mobile ad hoc wireless networks 
sirer karma secure economic framework resource sharing 
workshop economics peer peer networks 
wang li play control game control theoretic approach peer peer incentive engineering 
international workshop quality service june 
parkes strategyproof mechanisms ad hoc network formation 
workshop economics peer peer systems june 
