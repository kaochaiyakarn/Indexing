overview jml tools applications www org published arts fokkink eds eighth international workshop formal methods industrial critical systems vol 
electronic notes theoretical computer science pp 
elsevier 
lilian burdy cheon david cok michael ernst joe gary leavens rustan leino erik poll research lab france eastman kodak laboratories rochester new york usa dept computer science iowa state university ames iowa usa mit lab computer science cambridge massachusetts usa dept computer science university nijmegen nijmegen netherlands microsoft research redmond wa usa 
java modeling language jml specify detailed design java classes interfaces adding annotations java source files 
aim jml provide specification language easy java programmers supported wide range tools specification type checking runtime debugging static analysis verification 
gives overview main ideas jml different groups collaborating provide tools jml existing applications jml 
far applications focused code programming smartcards written java card dialect java 
keywords 
formal methods formal specification java runtime assertion checking static checking program verification 
jml stands java modeling language useful specifying detailed designs java classes interfaces :10.1.1.34.8403
jml behavioral interface specification language java specifies behavior syntactic interface java code 
syntactic interface java code class interface method signatures attribute types augmented jml annotations precisely indicate correct usage api programmers supported part nsf ccr ccr 
partially supported eu ist project www org lilian burdy documentation 
terms behavior jml detail example preconditions postconditions methods class invariants 
important design goal jml easy understand java programmer 
achieved staying close possible java syntax semantics 
important design goal jml impose particular design method users jml able document existing java programs designed manner 
jml started gary leavens colleagues students iowa state university grown cooperative open effort 
groups worldwide building tools support jml notation involved ongoing design jml 
open cooperative nature jml effort important tool developers potential users welcome participation 
potential users fact tools supporting notation clearly advantage 
tool developers common syntax semantics easier get users interested 
biggest hurdles new tool lack familiarity associated specification language 
section introduces jml notation 
section discusses tools jml detail 
section discusses applications jml domain java card java dialect programming smartcards 
section discusses related languages tools ocl runtime assertion checkers section concludes 
jml notation jml blends eiffel design contract approach larch tradition space precludes mentioning :10.1.1.19.7736:10.1.1.19.7736
jml supports quantifiers forall exists jml allows model specification fields specifications easily precise complete typically eiffel 
jml uses java expression syntax assertions jml notation easier programmers learn language independent specification language larch shared language ocl :10.1.1.120.795:10.1.1.15.9976
gives example jml specification illustrates main features 
jml assertions written special comments java code 
ignored java compilers tools support jml 
comments jml extends java syntax keywords example invariant requires assignable ensures signals 
extends java expression syntax operators example forall old result backslash clash existing java identifiers 
central ingredients jml specification preconditions requires clauses postconditions ensures clauses class interface invariants 
expressed boolean expressions jml extension java expression syntax 
public class purse overview jml tools applications final int max balance int balance invariant balance balance max balance byte pin invariant pin null pin length forall int pin pin requires amount assignable balance ensures balance old balance amount result balance signals balance old balance int debit int amount throws amount balance balance amount return balance throw new amount requires mb mb null length forall int assignable max balance balance pin ensures max balance mb balance forall int pin purse int mb int byte max balance mb balance pin byte clone fig 

example jml specification lilian burdy addition normal postconditions jml supports exceptional postconditions specified signals clauses 
specify true method throws exception 
example signals clause specifies debit may throw case balance change specified old keyword 
assignable clause method debit specifies frame condition debit assign balance field 
frame conditions essential verification code tools described 
additional features jml example 
briefly discuss important 
allow specifications abstractions implementation details jml provides model variables play role values data types :10.1.1.1.3304
example class purse specifying interface introduce balance model variable 
class implementing interface specify model field related class particular representation balance 
support specifications need mathematical concepts sets sequences jml comes extensible java library provides notions 
basic mathematical notions assertions java objects 
method assertions declared pure meaning method visible side effects example method declared pure pure int 
method specification field balance 
jml supports java modifiers private protected public restricting visibility 
example invariants declared private invariants concerned private implementation details class observable clients 
tools jml specification language just programming language range tools necessary address various needs specification language users reading writing checking jml annotations 
runtime assertion checking testing way checking correctness jml specifications runtime assertion checking simply running java code testing violations jml assertions 
runtime assertion checking accomplished jml compiler section 
tools rely underlying tool typechecks java program jml specification 
overview jml tools applications wants runtime assertion checking testing phase tool section combines runtime assertion checking unit testing 
static checking verification ambitious testing code satisfies specifications runtime verifying code satisfies specification statically 
verifying specification gives assurance correctness code establishes correctness possible code paths runtime assertion checking limited code paths exercised test suite 
course correctness program respect specification decidable general 
verification tool trade level automation offers amount user interaction requires complexity properties code handle 
tools statically checking verifying jml assertions providing different levels automation supporting different levels expressivity specifications 
program checker esc java section automatically detect certain common errors java code check relatively simple assertions 
program checker jack section offers similar functionality esc java ambitious attempting real program verification 
loop tool section translates jml annotated code proof obligations try prove theorem prover pvs 
loop tool handle complicated specifications code price user interaction 
chase tool section checks aspects frame conditions 
tools help generate specifications addition tools checking specifications tools help developer write jml specifications aim reducing cost producing jml specifications 
daikon tool section infers invariants observing runtime behavior program :10.1.1.137.4260
houdini tool uses esc java infer annotations code 
tool produce skeleton specification file java source compare interfaces different files consistency 
documentation spite tools mentioned important tool human reads writes jml specifications 
tool section produces browsable html jml specifications style javadoc 
resulting html convenient format reading larger bodies jml specifications 
documentation generation jml specifications meant read written ordinary java programmers important support conventional ways programmers create documentation 
consequently tool authored lilian burdy david cok produces browsable html pages containing api specifications java code style pages generated javadoc 
tool reuses parsing checking performed jml checker connects api underlying javadoc 
way remains consistent definition jml creates html pages familiar user javadoc 
tool combines displays place specifications inherited refined pertain class interface method field 
combines annotations series source files constitute successive refinements class interface 
runtime assertion checking jml compiler developed iowa state university extension java compiler compiles java programs annotated jml specifications java bytecode 
compiled bytecode includes runtime assertion checking instructions check jml specifications preconditions normal exceptional postconditions invariants history constraints 
execution assertion checks transparent assertion violated performance measures time space behavior original program unchanged 
transparency runtime assertion checking guaranteed jml assertions allowed side effects :10.1.1.120.795
jml language provides rich set specification facilities write complete behavioral specifications java program modules :10.1.1.120.795
opens new possibility runtime assertion checking supporting specifications written terms specification declarations model fields ghost fields model methods 
jml compiler represents significant advance state art runtime assertion checking represented design contract tools eiffel java tools icontract jass :10.1.1.16.800
tool supports advances stateful interface specifications multiple inheritance specifications various forms quantifiers set comprehension notation support strong weak behavioral subtyping contextual interpretation undefinedness :10.1.1.120.795
sum jml compiler brings programming benefits formal interface specifications allowing java programmers jml specifications practical effective tools debugging testing design contract 
unit testing formal specification viewed test oracle runtime assertion checker decision procedure test oracle :10.1.1.39.2890
idea implemented unit testing tool java combining jml popular unit testing tool junit java 
tool developed iowa state university frees programmer writing unit test code significantly automates unit testing java classes interfaces 
tool generates junit test classes rely jml runtime assertion checker 
test classes send messages objects java classes test 
overview jml tools applications testing code catches assertion violation errors method calls decide test data violate precondition method test assertion violation errors constitute test failures 
method test satisfies precondition assertion violation implementation failed meet specification test data detects failure 
words generated test code serves test oracle behavior derived specified behavior class tested 
user responsible generating test data test classes easy user supply test data 
addition user supply hand written junit test methods desired 
experience shows tool allows perform unit testing minimal coding effort detects kinds errors 
ironically half test failures caused specification errors shows approach useful debugging specifications 
addition tool report coverage information identifying assertions true false indicating deficiencies set test cases 
approach requires specifications fairly complete descriptions desired behavior quality generated test oracles depends quality specifications 
approach trades effort spend writing test cases effort spent writing formal specifications 
invariant detection daikon tools jml assume existence jml specification verify code specification 
writing jml specification left programmer 
task time consuming tedious error prone daikon invariant detector provides assistance creating specification 
daikon outputs observed program properties jml form automatically inserts target program 
daikon tool dynamically detects program invariants 
words program executions reports properties true executions 
operates observing values program computes runtime generalizing values reporting resulting properties 
dynamic analysis technique sound executions may falsify reported properties 
furthermore actual behavior program necessarily intended behavior 
daikon uses static analysis statistical tests mechanisms suppress false positives 
property true general daikon output provides valuable information test suite program run 
modest test suites daikon output highly accurate 
set experiments properties reported verifiable esc java properties true capabilities esc java reported properties esc java needed order complete verification 
example daikon generated properties users delete properties add properties order verifiable set properties 
experiment lilian burdy users provided daikon output unrealistically bad test suites performed statistically significantly better program verification task users assistance 
extended static checking esc java esc java tool developed compaq research performs called extended static checking static checking goes type checking 
check relatively simple assertions check certain kinds common errors java code dereferencing null indexing array outside bounds 
tool fully automated user interacts supplying jml annotations code 
user sees theorem prover doing actual scenes 
interesting property esc java sound complete 
deliberate design choice aim maximize useful feedback tool give number potential bugs code point fully automatically requiring full functional specifications 
sense esc java uses jml annotations suppress spurious warning messages 
example conjunct null constructor precondition causes esc java warn possibility null dereferences formal parameter body constructor 
annotations cause esc java perform additional checks 
example precondition constructor purse causes esc java emit warnings actual parameter passed constructor may null 
addition jml annotations helps give better quality warnings esc java fosters annotations turn annotations help tool better job checking code potential errors 
esc java works translating jml annotated java program verification conditions passed automatic theorem prover 
esc java user manual provides detailed description semantics jml annotations pertain esc java 
writing small syntactic semantic differences jml subset jml supported esc java 
cok working patches fix problem 
version esc java accept notation introduced esc java release ignore non critical annotations understand 
chase source unsoundness esc java check assignable clauses 
semantics frame axioms checked jml compiler 
chase tool tries remedy problems 
performs syntactic check assignable clauses spirit esc java sound complete spots mistakes assignable clauses 
example utility common language developers reap benefits complementary tools 
program verification loop overview jml tools applications university nijmegen loop tool translates jml annotated java code proof obligations theorem prover pvs 
try prove obligations interactively pvs 
translation jml formal proof obligations builds formal semantics sequential java formalized pvs extended provide formal semantics large part jml 
verification proof obligations accomplished hoare logic weakest precondition calculus java jml :10.1.1.19.7736:10.1.1.15.9976
interactive theorem proving labor intensive allows verification complicated properties handled extended static checking esc java 
describing case study loop tool giving best impression state art available 
similar program verification tool jml annotated code development krakatoa tool produces proof obligations theorem prover coq currently covers subset java 
static verification jack jack tool developed research lab manufacturer smartcards smartcard software 
jack aims provide environment java java card program verification jml annotations 
implements fully automated weakest precondition calculus order generate proof obligations jml annotated java sources 
proof obligations discharged theorem prover 
currently proof obligations generated method prover 
approach taken jack esc java loop probably closer loop esc java trying get best worlds 
hand jack ambitious esc java aims real program verification just extended static checking jack assumptions result soundness issues esc java speed checking 
hand jack require users expertise theorem prover loop 
important design goal jack tool usable normal java developers allowing validate code 
care taken hide mathematical complexity underlying concepts jack provides dedicated proof obligation viewer 
viewer presents proof obligations execution paths program highlighting source code relevant proof obligations 
goals hypotheses displayed java jml notation 
allow developers familiar environment jack integrated plug eclipse ide 
earlier mentioned jack provides interface automatic theorem prover toolkit 
prover usually automatically prove www eclipse org lilian burdy proof obligations remaining ones proved outside jack classical proof tool 
jack meant java developers expected proof tool 
addition proved states jack adds checked state allows developers indicate manually checked proof obligation 
order better handle cases different approaches investigated integration test tools integration proof assistants support proof expert team 
despite formal techniques goal jack allow formal methods experts prove java applet correctness allow java programmers obtain high assurance code correctness 
may way non experts venture formal world 
applications jml java card jml able specify programs written full java language serious applications jml jml tools targeted java card 
java card dialect java specifically designed programming latest generation smartcards 
java card adapted hardware limitations smartcards instance support floating point numbers strings object cloning threads 
java card suited target application formal methods 
relatively simple language restricted api 
java card programs called applets small typically order kbytes bytecode 
additionally correctness java card programs crucial importance sensitive applications bank cards mobile phone sims 
interesting overview security properties relevant java card applications available 
jml tools jml java card especially context eu supported project www org 
jml write formal specification entire java card api 
experience shown jml expressive specify non trivial existing api 
runtime assertion checker specify verify component smartcard operating system 
esc java great success verify realistic example electronic purse implementation java card :10.1.1.16.1895
case study instrumental convincing industrial users usefulness jml feasibility automated program checking esc java java card applets 
provided motivation development jack tool discussed earlier specifically designed java card programs 
classes electronic purse mentioned provided serious case study date loop tool 
related runtime assertion checkers overview jml tools applications runtime assertion checkers java exist example jass icontract name just 
tools specification language specifications written tool tool 
tools support higher level constructs quantifiers quite primitive compared jml 
example include support purity specification checking model methods refinements unit test integration 
developers jass expressed interest moving jml specification language 
jml vs ocl despite similarity acronyms jml different aims uml :10.1.1.19.7736
uml attempts notations phases analysis design process jml modest aim describing behavior java classes interfaces recording detailed design implementation decisions 
jml things common object constraint language ocl part uml standard 
jml ocl specify invariants pre postconditions 
important difference jml explicitly targets java ocl specific programming language 
say jml related java way ocl related uml 
jml clearly disadvantage say programs ocl 
obvious advantages comes syntax semantics expressivity 
jml sticks java syntax typing rules typical java programmer prefer jml notation ocl notation instance prefer write jml invariant pin null pin length ocl inv pin null pin size jml supports java modifiers static private public record detailed design decisions 
furthermore legal java expressions jml specifications expressed ocl 
significant limitations differences syntax differences semantics 
jml builds defined semantics java 
instance equals meaning jml java rules overriding overloading hiding apply 
expect ocl 
fact semantics ocl proposed :10.1.1.16.800
lilian burdy believe language jml tailored java better suited recording detailed design java programs generic language ocl 
uses uml development java application may better jml ocl specification object constraints especially stages development 
believe jml presents promising opportunity introduce formal specification industry 
strong points 
jml easy learn java programmer syntax semantics close java 
believe crucial advantage biggest hurdle introducing formal methods industry people willing time learn language 

need invest construction formal model jml 
source code formal model 
brings advantages easy introduce jml gradually simply adding odd assertion java code 
jml existing legacy code apis 
applications jml tools date involved existing apis code 

growing availability wide range tool support jml 
jml impose particular design method users 
uml vdm jml tailored specifying syntactic interface java code behavior 
jml better suited alternative languages documenting detailed design existing java programs 
common notation shared tools jml offers users multiple tools supporting notation 
frees having learn new language start new tool 
shared notation helps economics users tool builders 
industrial formal methods economically justified comparing costs extra time effort spent benefits improvements quality number bugs 
having range tools offering different levels assurance different costs easier start jml 
technique requires time effort runtime assertion checking move labor intensive techniques worthwhile reached combination tools techniques cost effective particular situation 
opportunities development jml language tools 
instance see support jml overview jml tools applications ides integration kinds static checkers 
believe common language jml provide important vehicle transfer tools techniques academia industry 
generally open issues involving specification object oriented systems 
exactly invariants hold 
concurrency properties specified 
jml specification inheritance forces subtypes behavioral subtypes subtyping java implementation inheritance practical weaken specifications supertypes subtypes behavioral subtypes 
semantics issues frame axioms pure methods aliasing 
subtleties evidenced slightly different ways different tools approach problems 
witnessed development jack tool java card smartcard programs may niche markets formal methods promising 
cost companies willing pay ensure absence certain kinds bugs quite high 
current state art static checking techniques ensure relatively simple properties runtime exception reaches top level caught provide acceptable return investment 
noted simplicity java card drawbacks 
particular details primitive communication smartcards byte array buffer easily abstracted away 
interesting investigate java micro edition targets wider range electronic consumer products mobile phones pdas interesting application domain jml 
acknowledgments despite long list authors people involved developing tools discussed including joachim van den berg bart stor cata cormac flanagan mark lillibridge marieke huisman bart jacobs jean louis todd millstein greg nelson jeremy nimmer antoine clyde ruby james saxe 
raymie stata initiative getting jml esc java projects agree common syntax 
jml tools iowa state builds multijava compiler written curtis clifton adaptation java compiler 


abrial 
book assigning programs meanings 
cambridge university press :10.1.1.19.7736

sergio antoy dick hamlet 
automatically checking implementation formal specification 
ieee transactions software engineering january 
lilian burdy 
fischer moller 
jass java assertions 
workshop runtime verification cav 
published entcs havelund rosu eds 

kent beck erich gamma 
test infected programmers love writing tests 
java report :10.1.1.19.7736

bart joachim van den berg bart jacobs 
specifying verifying decimal representation java smart cards 
kirchner ringeissen editors amast number lncs pages 
springer 

achim brucker burkhart wolff 
proposal formal ocl semantics isabelle hol 
sar mu oz ne ctor editors volume lncs pages 
springer 

lilian burdy jean louis antoine 
jack java applet correctness kit 
www com smart trends jack html 

stor cata marieke huisman 
formal specification electronic purse case study 
eriksson lindsay editors fme volume lncs pages 
springer 

stor cata marieke huisman 
chase static checker jml assignable clause 
zuck paul attie agostino mukhopadhyay editors verification model checking interpretation volume lncs pages 
springer 

cheon gary leavens 
runtime assertion checker java modeling language jml 
hamid mun editors international conference software engineering research practice pages 
csrea press june 

cheon gary leavens 
simple practical approach unit testing jml junit way 
boris magnusson editor ecoop volume lncs pages 
springer june 

cheon gary leavens murali sitaraman stephen edwards 
model variables cleanly supporting abstraction design contract 
technical report department computer science iowa state university april 
available archives cs iastate edu 

krishna kishore gary leavens 
forcing behavioral subtyping specification inheritance 
th international conference software engineering pages 
ieee computer society press :10.1.1.19.7736

michael ernst jake cockrell william griswold david notkin 
dynamically discovering program invariants support program evolution 
ieee transactions software engineering 

michael ernst adam william griswold david notkin 
quickly detecting relevant program invariants 
icse proceedings nd international conference software engineering pages 

cormac flanagan rustan leino 
houdini annotation assistant esc java 
oliveira zave editors fme volume lncs pages 
springer 

cormac flanagan rustan leino mark lillibridge greg nelson james saxe raymie stata 
extended static checking java 
acm sig plan conference programming language design implementation pldi pages 

lisa friendly 
design distributed hyperlinked programming documentation 
fra ss garzotto nanard nanard editors pages 
springer :10.1.1.19.7736
overview jml tools applications :10.1.1.19.7736
john guttag james horning larch languages tools formal specification 
springer new york ny :10.1.1.19.7736

marieke huisman 
reasoning java programs higher order logic pvs isabelle 
ipa dissertation series university nijmegen holland february 

bart jacobs 
weakest precondition reasoning java programs jml annotations 

appear 

bart jacobs erik poll 
logic java modeling language jml 
hussmann editor fundamental approaches software engineering fase volume lncs pages 
springer 

bart jacobs joachim van den berg marieke huisman martijn van ulrich hendrik 
reasoning java classes preliminary report 
oopsla volume acm sigplan notices pages 
acm october :10.1.1.19.7736

kramer 
icontract java design contract tool 
tools technology object oriented languages systems los alamitos california pages :10.1.1.19.7736

gary leavens albert baker clyde ruby 
jml notation detailed design 
haim kilov bernhard rumpe ian simmonds editors behavioral specifications businesses systems pages 
kluwer academic publishers boston :10.1.1.19.7736

gary leavens albert baker clyde ruby 
preliminary design jml behavioral interface specification language java 
technical report iowa state university department computer science april 
see www org 

gary leavens cheon curtis clifton clyde ruby david cok 
design jml accommodates runtime assertion checking formal verification 
technical report department computer science iowa state university ames iowa march 
appear proceedings 

rustan leino greg nelson james saxe 
esc java user manual 
technical note compaq src october 

rustan leino james saxe raymie stata 
checking java programs guarded commands 
technical note compaq src may :10.1.1.19.7736

barbara liskov jeannette wing 
behavioral notion subtyping 
acm transactions programming languages systems november :10.1.1.19.7736

claude march christine paulin xavier 
krakatoa tool jml java program certification 
available krakatoa lri fr 

renaud marlet daniel le metayer 
security properties java card specificities studied project 
technical report tl trusted logic august 
available www doc ic ac uk docs html 

bertrand meyer 
object oriented software construction 
prentice hall new york ny second edition :10.1.1.19.7736

jeremy nimmer michael ernst 
automatic generation program specifications 
issta international symposium software testing analysis pages rome italy 

jeremy nimmer michael ernst 
invariant inference static checking empirical evaluation 
acm sigsoft th international symposium foundations software engineering fse pages 
lilian burdy 
owre rajan rushby shankar srivas 
pvs combining specification proof checking model checking 
alur henzinger editors computer aided verification number lncs pages 
springer :10.1.1.19.7736

dennis peters david parnas 
test oracles generated program documentation 
ieee transactions software engineering :10.1.1.19.7736

erik poll pieter hartel eduard de jong 
java model memory smart cards 
smart card research advanced application conference pages 
usenix 

erik poll joachim van den berg bart jacobs 
formal specification java card api jml class 
computer networks 

jim rumbaugh ivar jacobson grady booch 
unified modeling language manual 
addison wesley publishing :10.1.1.19.7736

jos warmer kleppe 
object constraint language precise modeling uml 
addison wesley publishing :10.1.1.19.7736
