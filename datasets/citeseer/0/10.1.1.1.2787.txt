ins twine scalable peer peer architecture intentional resource discovery balazinska hari balakrishnan david karger mit laboratory computer science cambridge ma hari karger lcs mit edu 
decreasing cost computing technology speeding deployment abundant ubiquitous computation communication 
increasingly large dynamic computing environments comes challenge scalable resource discovery client applications search resources services devices network describing attributes looking 
normally achieved directory services called resolvers store resource information resolve queries 
describes design implementation evaluation ins twine approach scalable intentional resource discovery resolvers collaborate peers distribute resource information resolve queries 
system maps resources resolvers transforming descriptions numeric keys manner preserves expressiveness facilitates data distribution enables efficient query resolution 
additionally ins twine handles resource resolver dynamism treating data soft state 
important challenge facing pervasive computing systems development scalable resource discovery techniques allow client applications locate services devices increasingly large scale environments detailed intentional descriptions 
resource discovery systems achieve main goals handle sophisticated resource descriptions query patterns ii handle dynamism operating environment including changes resource state network attachment point iii scale large numbers resources spread wide network administrative domains 
systems addressed limited combinations properties address 
resource discovery efforts largely geared expressive resource descriptions complex query predicates 
approaches differ details name resources names resolve appropriate network location 
essentially rely semistructured resource descriptions attribute naming schemes orthogonal attribute value bindings attributes hierarchically dependent 
resource discovery schemes designed primarily small networks networks dynamic updates relatively uncommon infrequent dns ldap 
number resources grows updates common 
static resource partitioning hierarchical organization resolvers solve scalable dynamic resource discovery 
static partitioning relies application defined attribute divide resource information resolvers 
static partitioning guarantee load distribution burdens clients selecting relevant partitions 
hierarchical approaches organize resolvers increasingly large domains responsible 
domains created particular attributes resource descriptions geographical location 
hierarchical schemes keep data information local resolvers create hierarchies filter irrelevant queries travel leaves 
hierarchies coexist hierarchies created dynamically root nodes may bottlenecks 
queries propagated root nodes avoid bottlenecks results dependent origin query 
hierarchies may efficiently resolve queries involve multiple orthogonal attributes 
example imagine metropolitan resource discovery system resolvers hierarchically organized institutions neighborhoods cities metropolitan level 
client may interested locating cameras filming main points congestion metropolis independent location 
hierarchy described handle query scalable manner location 
describe architecture implementation evaluation twine approach resource discovery achieves scalability hash partitioning resource descriptions set symmetric peer resolvers 
twine works arbitrary attribute sets 
handles queries orthogonal hierarchical attributes content location constraints 
handles partial queries queries contain subset attributes originally advertised resources considering attributes wildcards 
twine evenly distributes resource information queries participating resolvers 
system efficiently handles resource resolver dynamism 
twine integrated ins intentional naming system mit forms core architecture 
refer ins twine nodes intentional name resolvers 
ins twine leverages peer peer document publishing distribution 
peer peer systems rely hierarchical organization central authority distributing content searching documents 
current peer peer applications lack adequate querying capability complex resource queries 
ins twine designed achieve scalable resource discovery environment resources equally useful 
imagine deploying ins twine internet letting announce resources global interest users world 
resources may file servers cameras showing weather different cities web services 
similarly imagine deploying ins twine city letting users access resources air quality sensors water temperature quality indicators public business information number currently available cars car rental 
deployment scenario different resources advertised cases resources potentially equally useful clients 
important goal ins twine resources available users independent location 
queries handled specifying location attribute 
examples number resources considerable 
establishments city size los angeles new york 
establishment easily offer resources 
ins twine scale resources resolvers assuming establishment run resolver 
resolver hold small subset resource information 
importantly small subset resolvers contacted resolve queries update resource information 
achieve goals ins twine relies efficient distributed hash table process chord pastry uses building block :10.1.1.105.3673
twine transforms resource description set numeric keys 
way preserves expressiveness semistructured data facilitates data distribution network enables efficient query resolution case queries contain subset attributes originally advertised resource 
resource description twine extracts unique subsequence attributes values 
subsequence called strand 
twine computes hash value strand constitutes numeric keys 
peer peer approach resource discovery creates new challenges data freshness consistency 
resolvers fail new ones join network mapping resource descriptions resolvers changes 
maintain consistency face network changes resource mobility resolvers treat resource information soft state 
resource proxy acting behalf refresh presence certain interval corresponding description removed network 
achieve scalability refreshing frequency core ins twine network resolvers significantly lower refreshing frequency edge client applications resolvers 
evaluated ins twine running instances resolver inserting various types descriptions network 
find resource information queries evenly distributed resolvers 
resolver receives small subset resource information queries 
size set proportional number strands resource descriptions inversely proportional number resolvers network 
resolvers associated resource descriptions located log hops network total number resolvers 
query success rate res camera man man model amodel model res subject traffic subject resource description man res camera model root subject amodel fig 

example simple resource description corresponding 
resource camera manufactured filming traffic resolvers configurable replication level fail join network refresh interval 
additionally fraction failed resolvers query failures decrease exponentially ins twine system architecture section describe details resource descriptions 
system architecture ins twine algorithms transforming resource descriptions numeric keys distributing information resolving queries 
resource descriptions resources ins twine described hierarchies attribute value pairs convenient language xml ins name specifiers 
approach convert description canonical form attribute value tree 
shows example simple resource description 
resources annotated meta data descriptions represented 
resource description points name record contains information current network location advertised resource including ip address transport application protocol transport port number 
ins twine resource matches query formed query original description zero truncated attribute value pairs 
example device match query res camera man man res query res camera res 
implies important class queries ins twine support partial queries addition complete queries specify exact advertised resource descriptions 
traffic resource descriptions client queries described hierarchies attribute values converted 
ins twine provides way queries reach resolver nodes best equipped handle attributes values sought 
ultimate results query matching depend local query processing engine attached resolver 
examples include ins subtree matching algorithm unql query engine xml 
query routing relies exact matches attributes values possible allow flexible queries separating string values attribute value pairs 
example model amodel camcorder model divided amodel camcorder allowing queries type 
architecture overview ins twine uses set resolvers organize overlay network route resource descriptions storage collaboratively resolve client queries 
resolver knows subset resolvers network 
devices users communicate resolvers advertise resources submit queries 
resource periodically advertises particular resolver considered directly connected resolver 
client issues query resolver receives response resolver 
communication client applications resolvers happens edge ins twine network 
communication resolvers takes place network core 
architecture ins twine layers shown 
top layer resolver interfaces local storage query engine holds resource descriptions implements query processing returning sets name records corresponding partial queries 
resolver receives advertisement client application stores locally engine 
local storage information directly connected resources serves state management described section 
resolver splits advertised resource description strands passes layer 
details strand splitting discussed section 
maps strand numeric bit keys hash function 
passes key complete advertisement value corresponding key layer 
key determines resolver network receive corresponding value forwards information selected peer 
data distribution approach boils inserting resource descriptions prefix strand separate key 
complete resource descriptions transmitted resource advertisement resolver specializing key computed query able resolve query requiring joins extra data transfers 
client submits query resolver receives randomly selects client application message nr result intentional name resolver inr resolver si split send si nr ki hash si send ki nr determine best node ki result result ki best ki distributed hash table process chord insert nr lookup result ki nr result storage query engine fig 

inr composed layers 
resolver receives messages client applications 
messages include type advertisement query name record nr 
resolver stores description performs lookup locally 
extracts strands si computes key ki 
maps key inr distributed hash table process chord 
message forwarded resolver 
queries resolver sends results back originating inr turn sends application longest strands query 
strand serves determine resolver solve query 
query results returned originating resolver forwards client 
client application may specify interested resource matching description 
case single answer returned 
resource matches description lowest application level metric 
feature comes original ins design 
splitting resource descriptions strands critical ins twine ability scale 
enables resolvers specialize holding information answering queries subset resources 
choice adequate distributed hash table process layer critical achieving high query success rates minimizing number resolvers contacted query 
discuss choice section 
sections describe layer main algorithms detail 
resolver layer core ins twine resolver strand splitting algorithm extracts strands description 
goal algorithm break descriptions meaningful pieces resolvers specialize subsets descriptions 
time splitting preserve description structure support partial queries 
man res camera model root subject amodel traffic res camera subject traffic res camera man res camera man fig 

splitting resource description strands res camera model res camera model amodel simple strand splitting method extract attribute value pair independently map key 
scheme lose richness hierarchical descriptions allow expressive queries performed 
example format attribute sequence printer format indistinguishable format video cassette format 
twine algorithm strand splitting preserves description structure supports partial queries 
extracts unique prefix subsequence attributes values description advertisement query illustrated 
subsequence called strand 
strand produce separate key 
example input strand res camera man hash res camera hash res camera man hash res camera man output keys consider top level attribute value pair minimal unit resource descriptions queries 
omit strands composed single attribute start strand splitting value 
believe single top level attributes general useful wide area applications 
twine strand splitting algorithm effectively extracts strand attribute value root attributes 
number strands depends number attributes values structure 
precisely resource description attribute value pairs root level total number strands scheme partial queries easily handled possible subsequence attributes values maps separate key turn maps single resolver 
expectation storage requirement resolver number resources system average number strands resource description configurable resource information replication level number resolvers network 
relation holds sk strands resource file server resource may extremely popular resource descriptions 
advertisements overwhelm node charge popular strand 
tackle problem allowing node set threshold determined node capacity maximum number resources key 
threshold exceeded key new resource accepted key 
node start randomly replacing entries new advertisements 
cases effectively renders strand unusable query purposes 
query containing strands solved longest strands threshold restriction affect queries 
query resolution resolver returns incomplete response due threshold new strand selected process repeats response exhaustively lists resources matching description strands left query 
case partial list accumulated matches returned 
flagged partial answer letting application user refine query necessary 
additionally rare case query containing short popular strand extremely popular edge resolvers may cache results avoid flooding node responsible strand 
caching implemented ins twine 
layer strand extracted description independently passed layer complete resource description query 
responsible associating numeric keys strand 
concatenating attributes values strand single string computing bit md hash string 
layer passes key layer uses determine resolvers store information resource participate solving query 
choice appropriate scheme critical may easily limiting factor ins twine performance 
may thought distributed hash table node network keeps key value bindings dynamically determined key range 
efficient peer peer algorithms proposed purpose chord pastry :10.1.1.105.3673
key systems find node network store corresponding value 
chord pastry variant consistent hashing node responsible keys identifier falls node identifier closest preceding node identifier currently network 
local disruptions occur nodes join leave system 
uses similar scheme consistent hashing 
achieve scalability systems require node keeps routing table information subset nodes 
set determined node unique identifier 
finding node key achieved hopping node node appropriate direction destination node reached 
operation typically requires log hops size overlay network resolvers 
implementation built chord efficiently rebuilds overlay network presence failures 
ins twine uses chord efficiently identify node set consecutive nodes store key 
state management consistency goals guided design resource information management mechanisms ins twine resource joins network moves modifies description update propagated appropriate resolvers immediately 
new information replaces old ensuring old description old location returned result query 
resource information propagates network possible old new information returned response query 
resource leaves fails information deleted resolvers 
query results affected new resolvers joining network resolvers failing level fault tolerance determined configurable parameter 
ways achieve consistency defined 
hard state require resources keep information updated resilient resources failing prior de registration 
resolvers treat resource information soft state requiring resources refresh information periodically network 
resource refresh presence certain interval corresponding description removed network 
resource free leave network time de register description soft state expiration mechanism cause resource description deleted 
keep information date refresh interval small imposes high bandwidth overhead 
periodically refreshing resource information provides degree fault tolerance periodically sending description nodes strand 
scheme relies capability underlying distributed hash table process chord case rebuild overlay network interconnections nodes join leave :10.1.1.105.3673
relies fact inr inr inr inr inr remove remove inr inr inr fig 

state management ins twine 
resource refreshes information resolver inr high frequency defined refresh interval 
resolvers refresh resource information network lower rate defined refresh interval 
resource leaves network de registering closest resolver detects departure sends explicit remove messages nodes 
similarly resource updates information 
resolver crashes corresponding resource information remain network longer set computed dynamically failed node set automatically replaced subsequent resource advertisements 
adopt hybrid scheme ins twine combines management simplicity soft state low bandwidth requirements hard state 
illustrates approach 
resolver edge network responsible resources communicate directly 
acts proxy resources keeping states updated appropriate locations 
edge resolvers receive updates states resources fine time granularity seconds implementation 
propagate changes appropriate resolvers 
resource advertise time units edge resolver assumes left network sends explicit remove messages appropriate resolvers 
resolvers network core preserve soft state longer period order hours example 
time units directly connected resource edge resolver recomputes set resolvers charge resource 
transmits advertisements new resolver set 
transmits de registration messages resolvers longer set 
resolvers change simple ping transmitted 
scheme resource fails de registered network time units 
resolver acting behalf directly connected resources fails resources re connect resolver remaining available clients 
rare case resolver directly connected resources fail resource information deleted network time units 
increased fault strand mapped replicas 
transfer data replicas guaranteed remove replicas knows resources matching strand 
failures refresh interval 
queries sent nodes responsible key union results returned client application 
larger number failures interval query failure rate dependent fraction failed resolvers 
query failure rate decreases exponentially handle resolvers joining leaving network time case network partitions healing information different resolvers may inconsistent 
currently handle case timestamps assigned resources advertisements determine replicas hold information resource 
evaluation section evaluate strand splitting algorithm examining distribution strands splitting real resource descriptions 
examine data queries distributed resolvers 
evaluate query success rate presence failures 
splitting descriptions strands experiment evaluate strand splitting algorithm applied real resource descriptions 
goal determine strands produced descriptions strands come 
difficult obtain large quantity real resource descriptions 
experiment sets data 
set contained bibliographical entries taken latex bibliography files obtained repositories netlib 
second set contained descriptions extracted mp files taken private collections 
cases extracted word values string enable hierarchical searches keywords title author fields 
data describe devices believe gives intuition strand distribution may appear real data descriptions 
shows strand distribution obtained data set 
bibliographical entries contain strands average mp tags produce average strands 
different resources descriptions various complexity interesting note splitting real descriptions produced reasonable number strands 
shows expected strands popular strands come resource descriptions mp files 
artist boys artist 
strands appear bibliographical descriptions entries 
example type article type 
represents small fraction strands 
evaluated ins twine data sets workloads consisting diverse synthetic descriptions 
scheme depends num fraction descriptions bib entries mp descriptions number keys number strands resource descriptions fraction keys bib entries mp descr 
fraction descriptions frequency identical strands different descriptions fig 

splitting real descriptions strands descriptions tend contain small amount strands compared scalability goals resolvers 
mp descriptions produce strands 
bibliographical entries generate strands 
medians respectively 
descriptions composed unique strands 
strands may appear third descriptions ber strands resource descriptions structure 
results obtained real data sets 
distributing data resolvers second experiment evaluated quality data distribution ins twine 
ran independent inr instances machines 
connected client applications resolvers 
client application inserted resource descriptions total resources mp set strands 
comparison purposes ran experiments bibliographical entries inserted clients resources client 
main difference data sets number strands resource descriptions lower average mp tags 
key router layer resolver advertised virtual nodes create uniform distribution resolvers key space 
experiment deterministic set resolvers resources curve presents results single run 
different sets number resolvers give identical graphs 
ins twine dynamically specializes nodes specific resource descriptions peer stores small fraction complete directory 
shows half resolvers hold information resources data sets 
cumulative fraction resolvers mp descr 
thresh 
mp descriptions bib entries 
thresh 
bibliographical entries fraction resources resource information distribution cumulative fraction resolvers bibliographical entries mp descriptions fraction queries query distribution fig 

cumulative distribution resource information queries network resolvers 
resource information evenly distributed resolvers 
increasing proportion number strands number resolvers increases fraction resources known node 
queries distributed evenly resolvers median queries resolver equal number resolvers 
resolver solves excessive number queries expected value fraction resource information stored resolver srk average number strands resource descriptions total number resource descriptions configurable replication level number resolvers network 
compare value theoretical model actual values obtained experiments 
experiment 
mp files resolvers know resource descriptions 
average obtained experiment 
median little lower 
bibliographical entries average resolvers know resources 
actual average median just slightly lower respectively 
number strands high compared network size higher probability multiple strands description get assigned resolver 
experimental values match model 
long tails distributions due popular strands 
alleviate impact imposed node fixed threshold value number resources accepted particular strand 
set threshold resources mp data set resources bibliographical entries contain significantly strands 
reality thresholds determined capacity node 
shows data sets distribution remains similar tail gets significantly cut 
maximum amount information known node drops mp files bibliographical entries 
node knows resources twice average 
table 
query success rates function replication level 
resource requested single randomly chosen strand complete description actual lookup 
values shown averages runs replication fraction failed nodes node nodes data evenly distributed ins twine resolver holding small subset resource descriptions 
thresholds efficient eliminating overly popular strands changing resource information distribution 
city example resources resolvers considering average strands description additional replication level resolver need know srk resolving queries resources 
failures twine finds resource network performance underlying layer chord implementation 
queries log resolvers contacted layer find set nodes associated key :10.1.1.105.3673
replication resolvers resolve query parallel 
evaluate distribution queries resolvers descriptions data set queries 
submitted queries randomly selected resolver 
shows queries distributed resolvers 
average fraction queries solved resolver number resolvers 
gives resources 
distribution obtained shows queries fact evenly distributed resolvers receiving queries 
resolver solves significantly queries average maximum number queries received resolver just little 
find distribution independent number strands resource descriptions obtain graph data sets 
replicating key nodes allows twine support nodes joining leaving system core refresh interval 
table shows query success rate function fraction failed resolvers 
show worst case scenario strand randomly selected resource description serve query 
table shows increasing replication level improves success rates replicas key query fail 
example failed resolvers probability pick strand replicas map failed resolver approximately 
latency query resolution resource information updates determined time taken peers exchange information 
ins twine latency responsiveness improve proximity routing heuristics underlying key routing system 
queries description replicated places network prefix possible nodes resolve query twine may able choose node information network path latencies nodes 
described ins twine scalable resource discovery system intentional naming peer peer network resolvers 
peer peer architecture ins twine facilitates dynamic distribution resource information queries resolvers 
central bottlenecks avoided results independent location queries issued 
ins twine achieves scalability hash mapping resource descriptions resolvers 
manipulates canonical resource descriptions 
require priori knowledge attributes may contain 
twine transforms descriptions numeric keys manner preserves expressiveness facilitates data distribution enables efficient query resolution 
resolver nodes dynamically specialize storing information subsets resources system 
queries resolved contacting small number nodes 
additionally ins twine handles resource resolver dynamism scalably replication considering data soft state applying slower refresh rates core ins twine overlay network edges 
ins twine scales large numbers resources resolvers 
experimental results show resource information query loads get evenly distributed resolvers demonstrates ability scale incrementally adding resolvers needed 
acknowledgments authors godfrey tan allen miu numerous helpful discussions 
nick feamster dina dave andersen chuck blake comments early drafts 
funded ntt ntt mit research collaboration delta electronics hp ntt nokia research center philips research mit project oxygen partnership intel ibm university faculty award 
balazinska partially supported natural sciences engineering research council canada nserc 

adjie winoto schwartz balakrishnan lilley design implementation intentional naming system 
proc 
acm symposium operating systems principles 

guttman perkins service location protocol version 
rfc 
www ietf org rfc rfc txt 
sun microsystems jini technology architectural overview 
www sun com jini whitepapers architecture pdf 
upnp forum understanding universal plug play white 
upnp org download upnp doc 
czerwinski zhao hodes joseph katz architecture secure service discovery service 
proc 
fifth annual int 
conf 
mobile computing networking mobicom acm press 
castro greenstein muntz locating application data service discovery domains 
proc 
seventh annual int 
conf 
mobile computing networking mobicom 

hermann moser transient ad hoc networking pervasive devices 
proc 
acm symposium mobile ad hoc networking computing mobihoc 

abiteboul querying semi structured data 
icdt 
volume 

mockapetris dunlap development domain name system 
proc 
acm sigcomm conference standford ca 
lightweight directory access protocol 
rfc 

lilley scalability intentional naming system 
master thesis massachusetts institute technology 
castro muntz adaptive approach indexing pervasive data 
second acm international workshop data engineering wireless mobile access santa barbara ca 
gnutella website 
gnutella com 
ratnasamy francis handley karp shenker scalable network 
proc 
acm sigcomm conference san diego ca 
stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications 
proc 
acm sigcomm conference san diego ca 
rowstron druschel pastry scalable distributed object location routing large scale peer peer systems 
ifip acm middleware heidelberg germany 
web services activity 
www org ws 
census bureau united states census 
www census gov 
zhao joseph lightweight database internet applications 
www cs berkeley edu publications saint pdf 
karger lehman leighton levine lewin panigrahy consistent hashing random trees distributed caching protocols relieving hot spots world wide web 
proc 
th annual asm symposium theory computing 

netlib netlib repository utk ornl 
www netlib org 
