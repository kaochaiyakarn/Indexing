common api structured peer peer overlays frank dabek ben zhao peter druschel john kubiatowicz ion stoica mit laboratory computer science cambridge ma 
university california berkeley ca 
rice university houston tx 

describe ongoing effort define common apis structured peer peer overlays key abstractions built 
doing hope facilitate independent innovation overlay protocols services applications allow direct experimental comparisons encourage application development third parties 
provide snapshot efforts discuss open problems effort solicit feedback research community 
structured peer peer overlay networks gained popularity platform construction resilient large scale distributed systems 
structured overlays conform specific graph structure allows locate objects exchanging lg messages number nodes overlay 
structured overlays construct services distributed hash tables scalable group multicast anycast decentralized object location :10.1.1.159.9358:10.1.1.20.299:10.1.1.1.4310
services turn promise support novel classes highly scalable resilient distributed applications including cooperative archival storage cooperative content distribution messaging 
currently structured overlay protocol exports different api provides services subtly different semantics 
application designers understand intricacies protocol services provide decide system best meets needs 
subsequently applications locked system unable leverage innovations protocols 
semantic differences comparative evaluation different protocol designs difficult 
attempts identify fundamental abstractions provided structured overlays define apis common services provide 
step identified defined key routing api represents basic tier capabilities common structured overlays 
show easily implemented existing overlay protocols allows efficient implementation higher level services wide range applications 
forms common denominator services provided existing structured overlays 
research conducted part iris project project iris net supported national science foundation cooperative agreement 
ani 
addition identified number higher level tier abstractions sketch built basic 
abstractions include distributed hash tables dht group anycast multicast cast decentralized object location routing dolr 
efforts define common apis services currently underway 
believe defining common abstractions apis accelerate adoption structured overlays facilitate independent innovation overlay protocols services applications permit direct experimental comparisons systems 
apis universal 
certain applications wish apis allow exploit particular characteristics protocol 
necessary desirable facilitate innovation 
expect nonstandard apis properly understood abstracted added common apis time 
rest organized follows 
section provides overview structured overlays key services provide 
section defines differentiates current tier services 
section describes api section evaluates proposed api demonstrating implement variety services existing overlay protocols efficiently implement api 
section discusses developing commons api higher level tier services distributed hash tables 
conclude section 
background section define application visible concepts common structured overlay protocols 
node represents instance participant overlay nodes may hosted single physical ip host 
participating nodes assigned uniform random nodeids large identifier space 
application specific objects assigned unique identifiers called keys selected id space 
tapestry pastry chord circular identifier space bit integers modulo chord tapestry pastry :10.1.1.111.1818:10.1.1.28.5987:10.1.1.105.3673:10.1.1.1.4310
uses dimensional cartesian identifier space bit nodeids define point space :10.1.1.140.3129
key dynamically mapped overlay unique live node called key root 
deliver messages efficiently root node maintains routing table consisting nodeids ip addresses nodes local node maintains overlay links 
messages forwarded overlay links nodes nodeids progressively closer key identifier space 
system defines function maps keys nodes 
chord keys mapped live node closest nodeid clockwise key 
pastry keys mapped live node closest nodeid 
tapestry maps key live node nodeid longest prefix match node higher nodeid value chosen digit matched exactly 
neighboring nodes identifier space agree partitioning space surrounding nodeids keys mapped node responsible space contains key 
tier tier tier cfs past scribe splitstream bayeux oceanstore dht cast key routing layer dolr fig 

basic abstractions apis including tier interfaces distributed hash tables dht decentralized object location routing dolr group anycast multicast cast 
abstractions dht dolr cast put key data publish objectid join groupid remove key objectid leave groupid value get key msg objectid multicast msg groupid anycast msg groupid table 
tier interfaces existing systems provide higher level abstractions built basic structured overlays 
examples distributed hash tables dht decentralized object location routing dolr group anycast multicast cast 
illustrates abstractions related 
key routing common service provided systems tier 
tier higher level abstractions provided existing systems 
applications higher level tier services abstractions 
tier systems directly 
api tier defined detail section 
briefly explain tier abstractions semantic differences 
key operations abstractions sketched table 
dht abstraction provides functionality traditional hashtable storing mapping key value 
interface implements simple store retrieve functionality value stored live overlay node key mapped layer 
values objects type 
example dht implemented part dhash interface cfs stores retrieves single disk blocks content hashed keys :10.1.1.159.9358
dolr abstraction provides decentralized directory service 
object replica endpoint objectid may placed system 
applications announce presence endpoints publishing locations 
client mes sage addressed particular objectid delivered nearby endpoint name 
note underlying distributed directory implemented annotating trees associated objectid implementations possible 
ask dolr implemented top dht data pointers stored values possible dolr routes messages nearest available endpoint providing locality property supported dhts 
integral part process maintenance distributed directory changes underlying nodes links 
cast abstraction provides scalable group communication coordination 
overlay nodes may join leave group multicast messages group anycast message member group 
group represented tree membership management decentralized 
cast support large highly dynamic groups 
overlay provides service multicast efficient anycast messages delivered group member near anycast originator 
dolr cast abstractions closely related 
maintain sets endpoints decentralized manner proximity network tree consisting routes endpoints common root associated set 
dolr abstraction tailored object location cast abstraction targets group communication 
implementations combine different policies basic mechanism 
dht abstraction hand provides largely orthogonal service scalable repository key value pairs 
defining apis dht dolr cast interfaces subject ongoing 
defining api key routing identifying key tier abstractions taken major step 
key routing api section describe proposed key routing api 
defining notation data types describe api 
section show calls implement dht dolr cast higher level abstractions 
data types key bit string 
encapsulates transport address nodeid node system 
nodeid type key transport address example ip address port 
messages type msg contain application data arbitrary length 
adopt language neutral notation describing api 
parameter denoted read parameter read write parameter 
denote ordered set objects type routing messages void route key msg hint operation forwards message root key optional hint argument specifies node hop routing message 
hint refers key current root result message delivered hop bad hint adds extra hop route 
hint may null 
operation provides best effort service message may lost duplicated corrupted delayed indefinitely 
route operation delivers message key root 
applications process messages executing code upcalls invoked routing system nodes message path root 
permit event driven implementations upcall handlers block perform long running computations 
void forward key msg upcall invoked node forwards message including source node key root node deliver invoked 
upcall informs application message key forwarded 
application may modify parameters terminate message setting null 
modifying argument application effectively override default routing behavior 
demonstrate examples flexibility section 
void deliver key msg function invoked node root key arrival message deliver upcall provided convenience applications 
routing state access api allows applications access node routing state calls 
operations strictly local involve communication nodes 
applications may query routing state instance obtain nodes may forward upcall hop destination 
operations return information key root 
root generalization key root 
node root key node root key roots fail node may root keys contiguous regions id space 
local lookup key int num boolean safe call produces list nodes hops route key resulting route satisfies overlay protocol bounds number hops taken 
safe true expected fraction faulty nodes list guaranteed higher fraction faulty nodes overlay false set may chosen optimize performance expense potentially higher fraction faulty nodes 
option allows applications implement routing overlays byzantine node failures 
implementations assume fail behavior may ignore safe argument 
fraction faulty nodes returned list may higher safe parameter true instance malicious nodes caused local node build routing table biased malicious nodes 
int num operation produces unordered list neighbors local node id space 
num node handles returned 
key int max rank operation returns ordered set replicas object key stored 
call returns nodes rank including max rank 
max rank exceeds implementation maximum replica set size maximum replica set returned 
protocols support max rank value :10.1.1.111.1818:10.1.1.140.3129
protocols support rank value greater returned nodes may replicating data precisely nodes roots key local node fails 
update bool joined upcall invoked inform application node joined left neighbor set local node set returned call 
boolean range rank key key operation provides information ranges keys node currently root 
operations returns false range determined true 
error query range node neighbor set returned update upcall call 
certain implementations may return error greater zero 
denotes inclusive range key values 
protocols may multiple disjoint ranges keys node responsible 
parameter allows caller specify region returned 
node referenced responsible key resulting range includes 
result nearest range clockwise responsible 
validating api evaluate proposed api show implement tier abstractions give examples common usages 
believe api expressive implement applications known authors date built top chord pastry tapestry 
discuss api supported top representative structured overlay protocols 
api briefly sketch tier abstractions dht dolr cast implemented top routing api 
show implement tier application internet indirection infrastructure mechanisms protocols caching replication 
dht 
distributed hash table dht provides operations put key value value get key 
simple implementation put routes put message containing value local node route key put value null 
key root receiving message stores key value pair local storage 
value large size insertion optimized returning key root response initial put message sending value single hop route key put value 
get operation routes get message route key get null 
key root returns value single hop route null value 
local node remembers previous access key provide hint 
cast 
group communication powerful building block distributed applications 
describe approach implementing cast abstraction described section 
key associated group key root root group multicast tree 
nodes join group routing subscribe message containing group key 
forward upcall invoked node node checks member group 
terminates subscribe message inserts message forwards message group key root implicitly subscribing group 
case adds joining node list children group multicast tree 
overlay node may multicast message group routing mcast message group key 
group key root receiving message forwards message children group tree recursively 
send anycast message node routes message group key 
node path member group forwards message children forward root returns null nexthop 
message forwarded tree reaches leaf delivered application 
underlying supports proximity anycast receiver group member near anycast originator 
dolr 
decentralized object location routing dolr layer allows applications control placement objects overlay 
dolr layer provides operations publish objectid objectid msg objectid 
publish operation announces availability object physical node issues operation name objectid 
simplest form publish calls route objectid publish objectid null name originating node 
hop application upcall handler stores local mapping objectid sophisticated versions publish may deposit pointers secondary paths root 
operation walks path removes mappings 
operation delivers message nearby replicas named object 
begins routing message object root route objectid msg null 
hop upcall handler searches local object matching objectid sends copy message directly closest locations 
fewer pointers handler decrements number pointers forwards original message objectid calling route objectid msg null 
internet indirection infrastructure 
communication infrastructure provides indirection decouples act sending packet act receiving 
allows provide support mobility multicast anycast service composition 
basic operations sources send packets logical identifier receivers express interest packets inserting trigger network 
simplest form packets form id data triggers form id addr addr identifier ip address 
packet id data search trigger id addr forward data addr ids packets matched triggers longest prefix matching 
ids bit long prefix bit long 
insert trigger id addr receiver calls route id id addr null hash function converts bit string unique bit string eventually padding id zeros 
message routed node responsible id trigger stored 
note triggers ids prefix stored node longest prefix matching done locally 
similarly host sending packet id data invokes route id id data null 
packet arrives node responsible id packet id matched trigger id forwarded corresponding destination 
improve efficiency host may cache address server particular id stored hint invoking route primitive id replication 
applications dhts replication ensure stored data survives node failure 
replicate newly received key times application calls sends copy key returned node 
implementation able return suitable neighbors application responsible determining replica locations 
data maintenance 
node identifier neighborhood changes node required move keys preserve mapping keys nodes maintain desired replication level 
update upcall indicates node joined identifier neighborhood application calls range 
transfers keys fall returned range effect transferring data node taken local node key space maintaining replicas 
description assumes node replicas returned 
caching 
applications dhts dynamic caching create transient copies frequently requested data order balance query load 
desirable cache data support service composition scalable multicast generalizes packet trigger formats replacing id packet addr field trigger stack identifiers 
generalizations affect discussion ignore 
nodes appear route request messages take key root nodes receive request messages 
simple scheme places cached copy data item node route prior node provides data 
caching implemented follows 
field added request message store previous node path 
forward upcall invoked node message path checks stores requested data 
inserts message allows lookup proceed 
node store data sends data requester sends copy data previous node request path 
node terminates request message setting null 
implementation sketch existing structured overlay protocols implement proposed api 
chosen example systems chord pastry tapestry constitute exhaustive list structured overlays represent cross section existing systems support claim api widely implemented easily 
route operation supported existing operations hint functionality easily added 
range call returns range associated local node represented binary prefix 
local lookup local routing table lookup currently ignores value safe 
update operation triggered time node splits namespace range joins range neighbor 
chord route implemented iterative fashion chord 
hop local node invokes rpc node lookup path rpc invokes appropriate upcall route deliver returns hop node 
hint hop search node taken local routing table 
local lookup call returns closest num successors node location table 
calls return node successor list calls additionally return node predecessor 
range call implemented querying successor list nth node returns range succ id succ id exception rule predecessor range predecessor determined 
pastry route operation trivially implemented top pastry route operation 
hint argument supersedes routing table lookup 
range operation implemented nodeid comparisons members pastry 
local lookup translates simple lookup pastry routing table safe true lookup performed pastry constrained routing table 
update operation triggered change pastry neighbor set returned consists 
tapestry route operation identical tapestry api call forwarded hint argument 
tapestry routing tables optimize performance maintain small set generally nodes closest nodes maintaining hop prefix matching property 
local lookup call retrieves optimized hop nodes 
safe routing mode current tapestry implementation may implementations 
range operation returns set ranges combinations levels node surrogate routed 
update operation node receives acknowledged multicast new inserting node receives object movement request node deletion :10.1.1.1.4310
discussion settling particular key routing api complicated tight coupling applications lookup systems developed 
current block replication schemes especially neighbor set replication chord pastry closely tied manner keys mapped nodes 
supporting efficient data replication independent lookup system necessitates range calls allow node determine replicate keys 
common practice caching blocks probable lookup paths requires additional flexibility api upcall mechanism allows application procedures execute lookup 
api described intended language neutral allow greatest possible flexibility implementors lookup systems 
specifying precise binding api language application developers able trivially change system 
api directs developers structure applications way translated system minimum effort 
possibility true portability structured systems implement api rpc program 
better articulate apis tier services dht dolr cast including clear definitions functional performance expectations 
stab section done 
particular similarities dolr cast striking demand exploration 
level tier abstractions structured peer peer overlays take greatest power utility 
hope effort detailed convergence functionality common services available peer peer applications writers 

castro druschel ganesh rowstron wallach secure routing structured peer peer overlay networks 
proceedings osdi december 

castro druschel kermarrec nandi rowstron singh splitstream high bandwidth content distribution cooperative environment 
proceedings iptps february 

castro druschel kermarrec rowstron scribe large scale decentralized application level multicast infrastructure 
ieee jsac oct 

dabek kaashoek karger morris stoica wide area cooperative storage cfs 
proceedings sosp oct 

hildrum kubiatowicz rao zhao distributed object location dynamic network 
proceedings spaa canada august acm 

maymounkov mazieres kademlia peer peer information system xor metric 
proceedings iptps 

ratnasamy francis handley karp shenker scalable content addressable network 
proc 
acm sigcomm san diego 

rowstron druschel pastry scalable distributed object location routing large scale peer peer systems 
proceedings ifip acm middleware nov 

stoica zhuang shenker surana internet indirection infrastructure 
proceedings sigcomm august acm 

stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications 
proc 
acm sig comm san diego 

zhao kubiatowicz joseph tapestry infrastructure faulttolerant wide area location routing 
tech 
rep ucb csd computer science division berkeley apr 

zhuang zhao joseph katz kubiatowicz bayeux architecture scalable fault tolerant wide area data dissemination 
proceedings nossdav june 
