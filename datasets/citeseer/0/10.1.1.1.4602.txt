appear th acm symposium principles distributed computing podc squirrel decentralized peer peer web cache sitaram iyer rice university main street ms houston tx usa cs rice edu presents decentralized peer peer web cache called squirrel 
key idea enable web browsers desktop machines share local caches form efficient scalable web cache need dedicated hardware associated administrative cost 
propose evaluate decentralized web caching algorithms squirrel discover exhibits performance comparable centralized web cache terms hit ratio bandwidth usage latency 
achieves benefits decentralization scalable self organizing resilient node failures imposing low overhead participating nodes 

web caching widely deployed technique reduce latency observed web browsers decrease aggregate bandwidth consumption organization network reduce load incident web servers internet :10.1.1.160.3726
web caches deployed dedicated machines boundary corporate networks internet service providers 
presents alternative case client desktop machines cooperate peer peer fashion provide functionality web cache 
proposes decentralized algorithms web caching problem evaluates performance traditional centralized web cache 
key idea squirrel facilitate mutual sharing web objects client nodes 
currently web browsers node maintain local cache web objects accessed browser 
squirrel enables nodes export local caches nodes corporate network synthesizing large shared virtual web cache 
node performs web browsing web caching 
done summer internship microsoft research cambridge 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
podc monterey california acm 
antony rowstron microsoft research thomson close cambridge cb fb uk microsoft com peter druschel rice university main street ms houston tx usa druschel cs rice edu substantial literature areas cooperative web caching web cache workload characterization :10.1.1.21.1584
demonstrates possible desirable efficient adopt peer peer approach web caching corporate lan type environment located single geographical region 
trace simulation shows functionality performance traditional web cache achieved completely self organizing system needs extra hardware administration fault resilient 
paragraphs elaborate ideas 
traditional approach dedicated hardware centralized web caching expensive terms infrastructure administrative costs 
large corporate networks employ cluster machines usually handle peak load bursts 
growth user population causes scalability issues leading need hardware upgrades 
drawback dedicated web cache may represent single point failure capable denying access cached web content users network 
contrast decentralized peer peer web cache squirrel pools resources desktop machines achieve functionality performance dedicated web cache requiring hardware desktop machines 
increase number client nodes corresponds increase amount shared resources squirrel potential scale automatically 
squirrel uses self organizing peer peer routing substrate called pastry object location service identify route nodes cache copies requested object :10.1.1.28.5987
squirrel advantage requiring administration compared conventional cooperative caching schemes 
pastry resilient concurrent node failures squirrel 
failure multiple nodes squirrel re fetch small fraction cached objects origin web server 
challenge designing squirrel achieve benefits context web caching exhibit performance comparable centralized web cache terms user perceived latency hit ratio external bandwidth usage 
squirrel faces new challenge nodes decentralized cache incur overhead having service requests extra load kept low 
rest shows squirrel achieves goals supported trace simulation results 
section provides background material web caching pastry 
section describes design squirrel section presents detailed simulation study traces microsoft corporate web caches 
section discusses related section concludes 

background section provides brief overview web caching pastry peer peer routing location protocol 
web caching web browsers generate get requests internet objects html pages images serviced local web browser cache web cache origin web server depending contains fresh copy object 
web browser cache web caches receive get requests 
request possibilities requested object uncacheable cache object cache 
cases request forwarded level origin web server 
case object tested freshness described 
fresh object returned conditional get request issued level validation 
basic types requests modified request timestamp known modification match request etag representing server chosen identification typically hash object contents 
request serviced web cache origin server 
web cache receives request fresh copy object forwards request origin web server 
response contains entire object header specifying object uncacheable modified message cached object unchanged :10.1.1.160.3726
freshness object determined web cache expiration policy 
generally time live ttl field specified origin server computed web cache modification time 
object declared stale ttl expires 
allows clients control expiration policy requested objects degree acceptable staleness 
purposes assume existence binary valued freshness function computes freshness object factors time live time modification time object fetch origin server current time 
pastry number peer peer routing protocols proposed including chord tapestry pastry :10.1.1.140.3129:10.1.1.105.3673:10.1.1.28.5987
self organizing decentralized systems provide functionality scalable distributed hash table reliably mapping object key unique live node network 
systems balance storage query load transparently tolerate node failures provide efficient routing queries 
squirrel uses pastry store cached web objects directory information efficiently locate 
pastry described evaluated continuity containment brief description :10.1.1.28.5987
pastry peer peer location routing substrate efficient scalable fault resilient self organizing 
number applications built top pastry including archival storage utility past event notification system scribe 
pastry assigns random uniformly distributed nodeids participating nodes say number circular bit namespace 
similarly application objects assigned uniform random namespace 
objects mapped live node nodeid numerically closest objectid 
support object insertion lookup pastry routes message live node nodeid numerically closest objectid expected log bn routing steps 
network nodes average message route intermediate nodes 
despite possibility concurrent failures eventual message delivery guaranteed nodes adjacent nodeids fail simultaneously 
typical value log 
node additions abrupt node failures efficiently handled pastry invariants quickly restored 
pastry provides applications leaf set consisting nodes nodeids numerically closest centered local nodeid 
applications leaf set identify neighbours nodeid space say replicating objects 

squirrel target environment squirrel consists nodes generally desktop machines typical corporate network 
expect squirrel operate outside range workloads demonstrate 
assume nodes access internet directly firewall 
participating node runs instance squirrel expiration policy configures web browser node squirrel instance proxy cache 
browser squirrel share single cache managed squirrel way achieve disabling browser cache 
changes browser external web servers necessary 
focusses scenario squirrel nodes single geographic region 
assume communication latency squirrel nodes order magnitude smaller latency access external servers connected network bandwidth order magnitude external bandwidth 
explore design space squirrel provide rationale combinations choices adopted 
chief goals achieve performance comparable dedicated web cache avail various potential benefits decentralization scalability fault tolerance keep overhead low 
develop algorithms squirrel simple straightforward sophisticated compare section 
web browsers issue requests squirrel proxy running node 
proxy knows object uncacheable discussed section forwards request directly origin web server 
checks local cache just browser normally done exploit client side locality reuse 
fresh copy object cache squirrel essentially tries locate copy node 
starts mapping object url key node network pastry follows 
computes sha hash url obtain bit objectid invokes pastry routing procedure forward request node nodeid numerically closest objectid 
designates recipient home node object 
squirrel approaches differ point question home node stores object maintains directory information small set nodes store object 
nodes called delegates nodes browsers requested object local caches 
bifurcation leads home store directory schemes respectively 
home store model squirrel stores objects client caches home node 
protocol depicted works follows client cache fresh copy object may stale copy 
correspondingly issues get request home node 
home node fresh copy directly connects back client responds object modified message appropriate 
home node finds stale copy cache incurs cache issues get request origin server respectively 
origin server responds modified message cacheable object home node local copy stores object appropriate forwards suitable response initiating client 
hand response uncacheable object simply forwards response initiating client 
maintain negative cache feature may conceivably retrofitted 
req request routed pastry req req object home client home lan wan req object origin origin server home store scheme slightly simplified 
request handled possible ways 
external requests object routed home node 
home node normally maintains date copy object squirrel network search nodes responding 
exception object evicted home node cache cache evictions infrequent modest cache sizes keep design simple perform external request cases 
objects stored node cache treated equally cache replacement policy regardless object stored node home node accessed 
directory approach idea node accessed object asked serve subsequent clients 
approach home node object remembers small directory pointers nodes accessed object 
key idea redirect subsequent requests randomly chosen node called delegate expected copy object locally cached 
protocol maintains invariant copies stored delegate nodes version object determined etag protocol depicted 
node maintains directory objects homed node metadata object etag fetch time modified time explicit time live cache control information 
home node receives request object apply expiration policy validate request storing object 
directory points copies version object copies go stale independently simultaneously 
home node object origin server time object unmodified matching etag cached copies version known home node valid marks directory 
req req req req client dir go origin 
modified home origin server object modified object dele gate req dir origin server req directory scheme slightly simplified 
request handled possible ways 
model request serviced squirrel follows 
home store model cache client node checked get request issued home node 
home node may seen object case directory associated object case 
sends brief message back client client request directly origin server 
home node treats client tentative delegate object optimistically adds directory unknown etag metadata 
normally client soon fetches object origin server sends short message home node update etag metadata 
object marked uncacheable client sends suitable message asking home node remove entire directory 
maintain negative cache 
second case non empty directory home node known point nodes fresh object fetched origin server etag squirrel synthesizes etag internal hashing object contents 
copies object 
client request match request validated immediately modified reply sent client case 
request forwarded randomly chosen delegate directory client optimistically added directory 
delegate receives request home node augmented directory freshness lifetime information 
directory fresh delegate considers copy object stale told update information object fresh 
happen delegate accessed object directory interim 
delegate directly returns requested object client case 
final pair cases arises directory populated pointers nodes stale copies object 
client request client may may delegate brief message sent client perform external request case 
client sends update message metadata home node directory replaces entries client new version different 
client request get home node forwards randomly chosen delegate directory entire object need fetched origin server unmodified 
prevent multiple delegates making simultaneous external connections home node temporarily removes entries directory 
delegate external request validate copy case sends object initiating client 
delegate sends message home node earlier entries delegate got modified response update metadata set client delegate entries 
request object 
special case happens request reaching delegate finds object missing local cache despite home node having pointer 
observed infrequent occurrence small node caches possible reasons delegate may evicted object cache may requested current request due optimistic addition delegate home node directory 
case delegate informs home node remove directory object home forwards request delegate directory exist 
second case delegate keeps forwarded request pending completes 
node arrival departure failure schemes need cope frequent variations node membership 
underlying pastry network ensures reliable routing presence concurrent failures squirrel needs perform extra operations 
node joins squirrel network automatically home objects store objects directories 
information passed new node squirrel continue function correctly small fraction requests destined new node routed origin server resulting small performance reduction 
squirrel overcomes performance drop leveraging pastry feature informing peer topeer application changes node leaf set occurs neighboring nodes nodeid space transfer necessary objects directories newly joined node 
directory approach state transfer compared home store approach transfer actual objects 
state large neighbors sort objects frequency access transfer frequently accessed ones 
zipf distributions web workloads optimization allows lightweight joining protocol 
failure squirrel node result corresponding fraction objects directories abruptly disappearing squirrel 
requests object routed node numerically closest objectid 
home store model node queries origin server subsequent requests 
directory model node try reconstruct lost directory simply creates new directory asks client query origin server 
results transitory graceful performance reduction cases nodes fail extent damage lesser home store directory 
nodes capable announcing desire leave system transfer directories objects immediate neighbors nodeid space 
directory model delegate node may fail notice home node chooses delegate immediately discovers inability connect removes delegate directories forwards request delegate available 
comparison approaches represent extremes design space choice storage location 
despite differences level approximation achieve comparable performance centralized web cache 
hit ratios comparable cache expiration replacement policies caches sufficiently large 
user perceived latency dominated requests need serviced origin server comparable hit ratios implies comparable latency minor differences number lan hops imperceptible 
section evaluates factors thoroughly analyzes second order effects due cache sizes terms overhead imposed individual nodes degree resilience node failures schemes surprisingly different 
sophisticated directory scheme may initially appear conducive better load balancing popular objects associated rapidly changing directories accessing clients subsequent load dispersed 
practice simpler elegant home store scheme achieves drastically lower load 
capitalizes hash function distribute requests evenly home nodes 
natural load balancing results low peak sustained overhead graceful performance degradation node failures 
section evaluates explains result 
leaf set contains nodes numerically closest nodeids node smaller larger 

evaluation section evaluates home store directory designs dedicated web cache 
approaches compared main metric types performance latency external bandwidth hit ratio overhead load storage machine fault tolerance 
trace characteristics web caching domain merits solution largely determined performance variety real workloads 
evaluate squirrel trace driven simulation substantially different proxy cache access logs boundaries corporate intranets 
redmond trace microsoft redmond contains active clients geographic location issuing total requests single day 
cambridge trace microsoft research lab cambridge contains requests issued clients days 
microsoft isa proxy server access logs reflect little object information obtains requests responses 
practice different proxy servers decide object cacheable combination checks cache control headers existence cookies password protection cgi bin url 
simulation purposes available information approximately deduce main goal derive understanding squirrel behavior diverse workloads case web caching 
define static objects accessed get request ssl cgi characters word cgi url 
simulations treat cacheable dynamic requests immediately forwarded squirrel client node origin server 
table presents trace characteristics 
redmond cambridge trace date may july aug total duration day days number requests mean request rate req req peak request rate req req number objects total object size gb gb number clients mean req client hr number static objects static object requests mean static object reuse times times total static object size gb gb total external bandwidth gb gb hit ratio mean peak request rate values represent load incident centralized proxy server motivate need dedicated machines centralized cache 
mean requests client hour signifies users average browsing rate including web pages images 
mean reuse static objects average number times static object accessed denotes potential benefit web caching 
total external bandwidth usage directly obtained trace 
differs total object size due request modified messages objects need fetched modified origin server evicted centralized cache 
hit ratio defined fraction objects static dynamic get satisfied web cache 
numbers derived status field log roughly compare various web cache hit ratios reported literature 
traces create simulated networks consisting node web client trace act squirrel proxy nodes 
initialization squirrel cache inferring freshness objects follows 
request object trace centralized web cache returned valid copy modified message warm squirrel home node randomly chosen delegate depending approach object 
modified case warm cache requesting client stale copy 
experiment nodes issue requests log moments time specified 
log status field infer expiration policy decision centralized cache requested object simulation adopt separate expiration policy object modified origin server 
centralized cache numbers inferred values fair comparison 
external bandwidth hit ratio define external bandwidth number bytes transferred squirrel origin servers 
section compare external bandwidth savings achieved squirrel algorithms measure impact limiting node cache size 
need know size message compute external bandwidth traces assume values table 
request headers bytes estimate object transfer response size field response headers proxy log modified responses bytes estimate shows external bandwidth gb entire period trace 
local cache node limited different sizes depicted horizontal axis lru cache replacement policy 
dotted horizontal lines represent external bandwidth cache centralized cache sufficiently large disk storage capacity 
calculated projecting inferred expiration policy message size estimates object estimate centralized cache model infinite storage 
observe centralized cache bandwidths roughly tally measured trace supporting validity inferences 
difference values denotes maximum external bandwidth reduction web caching obtains expected greater degree sharing redmond trace implies larger saving 
consider home store curves graphs 
note reasonable amount disk space mb donated squirrel node proves sufficient lower external bandwidth consumption close dedicated web cache 
fact true traces speaks strongly effective utilization node caches squirrel network 
horizontal axis logarithmic external bandwidth gradually rises node tion drastically decreased 
indicates small amount cache space donated node aggregates nodes achieve significant benefit 
total external bandwidth gb total external bandwidth gb home store directory web cache centralized cache node cache size mb redmond home store web cache directory centralized cache node cache size mb cambridge total external bandwidth usage function node cache size 
note lower values better axes start non zero positions 
consider difference home store directory designs 
home store approach uses hash function uniformly distribute objects nodes 
directory scheme hand stores objects respective client caches 
maintain cache size limit node rapidly browses objects evict fairly accessed objects cache 
results imbalance heavily browsing nodes forced evict fairly accessed objects active nodes may cache accessed objects 
cache evictions heavily browsing nodes lead increased cache misses higher external bandwidth compared home store approach 
quantified paragraph home store approach requires node total storage directory approach due copies stored clients home nodes 
despite extra storage requirement interesting observe home store scheme effective available cache storage indicated lower external bandwidth node cache size 
table describes maximum possible storage schemes redmond trace measured letting nodes potentially contribute infinite storage 
note difference total storage schemes mb gb equal total static object size trace characteristics table note dedicated web cache disk space store entire content 
secondly maximum storage nodes relatively high gb shown limiting say mb causes slight increase external bandwidth 
redmond home store directory total mb mb mean node mb mb maximum node mb mb hit ratio squirrel cache indirectly related external bandwidth 
increasing node contributions hit ratio approaches centralized cache storage 
mb node squirrel achieves redmond cambridge traces model consistent trace characteristics section 
latency user perceived latency time issuing request receiving response back client 
assume communication latencies lan order milliseconds order magnitude smaller external latency say continents 
request processing node excluding transfer time rarely takes milliseconds 
hit ratio squirrel comparable centralized cache user perceived latency request approximately squirrel small number lan hops 
large objects higher lan bandwidth implies reduction latency considerable 
purpose experiment measure number application level hops requests squirrel cache show number small 
side observations forwarding behavior directory model 
consider 
centralized web cache incurs hops lan request response 
consider redmond case requests home store model take hops pastry log 
directory model incurs extra hop request forwarded 
difference mean number hops schemes smaller half requests directory scheme handled home node get redirected 
parent responds short messages go origin server cases modified case 
requests redmond trace requests cambridge trace serviced local node due reasons 
queries issued browser usually get satisfied centralized web cache isa due difference default cache expiration policies 
secondly home store model small fraction requests cambridge due client nodes coincidentally home nodes requested object 
traces exclude information local browser cache hits requests originally satisfied centralized web cache satisfied squirrel local node 
fraction cacheable requests fraction cacheable requests total hops lan centralized home store directory redmond mean hops home store hops directory 
total hops lan centralized home store directory cambridge mean hops home store hops directory 
number lan hops request satisfied squirrel 
intranets higher communication latency multiple hops may significant 
environments simple optimization called route caching generally reduce number hops 
essence node maintain loosely consistent cache nodeid ip address mappings nodes network 
subsequent requests dispatched node cache connect directly bypass pastry routing 
route caching experiments separate test seen yield hit rates route cache cambridge redmond workloads 
summarize latency induced squirrel small cache hit overshadowed latency origin server 
load node measure extra overhead node result participation squirrel terms number objects served validated number bytes transferred number connections processed 
capture essence bursty versus sustained load separately measure incident load second minute 
frequency plots maximum number objects served node timescales shown figures 
presentational clarity horizontal axes graphs sampled displaying second fourth bar 
care taken remove spikes result sampling 
indicates nodes directory model incur bursts relatively high load objects traces 
average second node network serve requests redmond case 
contrast nodes home store model observed serve objects second traces 
objects second metric depicts bursts load measurements objects minute represent sustained periods load 
certain minute course experiments node directory model serves objects traces 
home store model produces far lower load nodes incurs peak load objects traces served node occasions 
home store similarity maximum load numbers traces minute granularities speaks scalability system 
number seconds number seconds home store directory max objects served node second redmond average maximum load node objects objects home store directory respectively 
home store directory max objects served node second cambridge average maximum load node objects objects home store directory respectively 
load maximum objects served second 
point marked says individual seconds day node services requests 
note axes logarithmic scale 
constitute maximum loads incurred second minute 
average load node second minute shown graph captions extremely low objects minute redmond models 
indicates squirrel performs task web caching negligible fraction total system resources 
interesting observe home store model causes drastically lower load machines compared directory model 
may opposite true 
home store model home node popular web object may compelled serve object simultaneously accessing clients vulnerable high load 
directory scheme load serve object gets distributed accessing delegate nodes directory 
popular object nodes keep changing rapidly 
expect directory approach superior practice contrary proves true reason 
number minutes number minutes home store directory max objects served node minute redmond average maximum load node objects minute objects minute home store directory respectively 
home store directory max objects served node minute cambridge average maximum load node objects minute objects minute home store directory respectively 
load maximum objects served minute 
note axes logarithmic scale 
drawback directory approach viz 
implicitly relies access patterns distribute load home store scheme simply uses hash function 
consider directory scheme node accesses web page embedded images 
home nodes corresponding images add respective directories 
client subsequently requests web page simultaneously issue requests large number images 
requests routed widely distributed set home nodes get forwarded delegate cause burst substantially high load similarly heavily browsing client may traverse rich webpages may induce home nodes point 
client may access set related documents subject node periods heavy load 
implicit evidence consider objects minute maximum result heavy browsing web page images 
home store approach contrast bursty incident load problem due low probability popular objects map hash function single home node 
summary home store model shows far overhead directory model different workloads 
performed analogous experiments publicly available traces metrics bandwidth number incident forwarded connections obtained similar results 
fault tolerance section evaluates resilience failure squirrel centralized caches 
distinguish connectivity loss performance degradation due unavailability cached content 
network connectivity individual nodes independent web caching section focusses aspect 
squirrel centralized web cache lose connectivity internet due link router firewall failure 
event continue serve cached content clients 
second failure mode internal router link fails partitioning nodes sets 
centralized cache provide cached content nodes partition 
squirrel peer peer network automatically reorganize separate systems partitions sufficiently large 
provide clients access fraction cached content 
third prevalent scenario connectivity exists internet web cache nodes individually fail 
centralized cache composed single machine failure imply complete loss cached content 
cluster web caches graceful significant degradation failure node 
contrast squirrel nodes usually desktop machines expected fail rebooted switched night regularly 
seen section node failures result losing fraction cached content squirrel performance degrades gracefully number failed nodes 
analyze impact single node failure hit ratios observed nodes 
number nodes static objects hmax node mean maximum number objects homed node smax node mean maximum number objects sole entries home node directories 
average worst case impact failed node home store model hmax directory model max hmax smax respectively 
measurements cambridge trace give average worst case system performance reductions failed node home store scheme compared directory scheme 
directory scheme proves slightly vulnerable average case home node delegate fails worst case node storing say large web page embedded images fail lose considerable data 
corresponding numbers redmond trace home store directory scheme 
directory scheme somewhat vulnerable node failures especially pathological case 
average impact due multiple node failures estimated linearly scaling average impact numbers single node failures 
machines rebooted little effect squirrel performance back online minutes assuming objects directories cached machine stored disk 
farsite study microsoft internal network shows machines switched night weekend means average cached content home store approach may lost 
reality impact may machines shut gracefully popular cached content node transferred new home nodes 
discussion secondary effects potential increase benefits due decentralized web caching 
firstly web workloads poor locality web caches incur substantial disk traffic 
disk throughput may limit performance centralized web cache disk bound distributing data nodes allows disks fetch data parallel improving throughput 
secondly squirrel pools main memory participating nodes 
suggests small cache size mb node suffices capture cache hits 
pooled memory may allow cache hits serviced memory disk centralized cache sufficient main memory happen 
simulation consider factors 
evaluating home store model workloads studied achieve low overhead load balancing participating nodes 
suggests natural load balancing achieved squirrel hash function works practice 
workloads highly popular objects theory overload home node 
address case squirrel maintains threshold maximum acceptable rate requests incident node document 
limit exceeded hotspot node sheds load replicating object previous node pastry route client 
locality properties pastry overlay network ensure additional cached copies absorbs significant fraction client requests copies placed proximity interested clients 
technique proposed evaluated dynamically adapts number cached copies match demand effectively disperse load arising popular objects 
benefits web caches significant warrant extensive deployment internet 
believe cheap low management fault resilient solution squirrel preferred alternative web caching large intranets 
furthermore experiments section conclude assumptions simpler home store algorithm superior choice 
different sets assumptions geographically distributed squirrel networks higher internal latency design choices squirrel may reevaluated fact directory approach may prove attractive 
plan study scenarios 

related squirrel seen combination cooperative web caching caches share internet objects peer peer request routing characterized decentralized self organizing :10.1.1.21.1584
cooperative web caching autonomous web caches coordinate share content useful improving hit ratio group small organizations 
forms viz 
hierarchical web cache upper layers hierarchy cover geographically larger domains hash schemes clients hash request multiple dedicated caches schemes maintain centralized table redirecting client request multicast schemes 
view problems arising due weak integration separate cache nodes methods distributed www cache proposed approach analogous xfs file system 
cluster dedicated web proxy machines organized hierarchy frontends backends managers 
coordinate achieve explicit hotspot elimination fault tolerance scalability 
squirrel adopts different paradigm requiring infrastructure client browser caches 
terms object location squirrel peer peer routing scheme 
viewed hash caching scheme self organizing fully decentralized 
directory model squirrel ties directory cooperative caching single directory squirrel directories object randomly distributed home nodes 
just distributed www cache squirrel achieves fault tolerance scalability performs sufficient load balancing avoid hotspots 
product supports sharing web browser caches squirrel 
details cache link achieves general performance available 
currently maximum number machines supported comparison squirrel scales tens thousands nodes 
systems proposed address problem flash crowds 
squirrel peer peer paradigm leverage pooled resources improve web performance 
squirrel focus complementary problem shielding servers load spikes resulting flash crowds 
distributed storage systems come flavors persistent peer peer stores past cfs distributed filesystems distributed shared memory systems different objectives tradeoffs 
conceptual standpoint squirrel explores combination tradeoffs associated closely related class peer peer applications maintain soft state desire low latency access 
ideas squirrel may prove pertinent design similar systems particularly peer peer context 

designs evaluates decentralized peer topeer web cache called squirrel shows feasible efficient comparable performance dedicated web cache terms latency external bandwidth hit ratio 
time squirrel advantages inexpensive highly scalable resilient node failures requiring little administration 
squirrel imposes small extra load machine proposed design load shown low range real workloads 
peer peer routing substrate easy deploy squirrel corporate network 
acknowledgments miguel castro gupta andrew herbert anne marie kermarrec nandi juan navarro marc shapiro atul singh anonymous reviewers comments 


secure hash standard 
technical report publication federal information processing standard fips national institute standards technology department commerce washington apr 
bolosky douceur ely theimer 
feasibility serverless distributed file system deployed existing set desktop pcs 
proceedings acm sigmetrics pages june 
bowman danzig hardy manber schwartz 
harvest information discovery access system 
computer networks isdn systems dec 
williamson 
sensitivity web proxy cache performance workload characteristics 
proceedings ieee infocom anchorage alaska apr 
caceres douglis feldmann glass rabinovich 
web proxy caching devil details 
proceedings workshop internet server performance madison wi may 
chankhunthod danzig neerdaels schwartz worrell 
hierarchical internet object cache 
proceedings usenix technical conference san diego ca jan 
dabek kaashoek karger morris stoica 
wide area cooperative storage cfs 
proceedings th acm symposium operating systems principles banff canada oct 

web cache coherence 
proceedings fifth international world wide web conference paris may 
gadde chase rabinovich 
taste squid 
proceedings workshop internet server performance madison wi june 

distributed www cache 
computer networks isdn systems nov 
nottingham 
caching tutorial web authors webmasters 
www net cache docs 
padmanabhan sripanidkulchai 
case cooperative networking 
st international peer peer systems workshop iptps cambridge ma mar 
ratnasamy francis handley karp shenker :10.1.1.140.3129
scalable content addressable network 
proceedings acm sigcomm san diego ca aug 

lan web caching accelerated web access 
technical white www com products 
rowstron druschel :10.1.1.28.5987
pastry scalable distributed object location routing large scale peer peer systems 
proceedings international conference distributed systems platforms middleware heidelberg germany nov 
rowstron druschel 
storage management caching past large scale persistent peer peer storage utility 
proceedings th acm symposium operating systems principles banff canada oct 
rowstron 
kermarrec castro druschel 
scribe design large scale event notification infrastructure 
proceedings third international workshop networked group communications london uk nov 
maniatis baker 
peer peer caching schemes address flash crowds 
st international peer peer systems workshop iptps cambridge ma mar 
stoica morris karger kaashoek balakrishnan :10.1.1.105.3673
chord scalable peer peer lookup service internet applications 
proceedings acm sigcomm san diego california aug 
tewari dahlin vin kay 
hierarchies design considerations distributed caching internet 
technical report cs department computer science university texas austin may 
web content 
www cs rice edu squirrel links html 
wang 
survey web caching schemes internet 
acm computer communication review oct 
wessel 
squid internet object cache 
squid nlanr net 
wolman voelker sharma cardwell karlin levy 
scale performance cooperative web proxy caching 
proceedings th acm symposium operating systems principles kiawah island sc dec 
zhao kubiatowicz joseph 
tapestry infrastructure fault resilient wide area location routing 
technical report ucb csd berkeley apr 
www cs rice edu squirrel 
