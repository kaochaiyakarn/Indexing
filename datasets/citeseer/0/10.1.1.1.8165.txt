improving type error messages functional languages johan jeuring doaitse swierstra pablo utrecht university cs uu nl february type systems detect type errors programs produce uninformative error messages hardly give information repair program 
important shortcoming inability highlight cause detected inconsistency 
presents type inferencer improved error reporting facilities construction type constraints 
unification types replaced construction constraint graphs 
approach increases chance report actual source type conflict resulting useful error messages 
type systems indispensable modern higher order polymorphic languages 
important contribution popularity haskell ml advanced type system enables detection ill typed expressions compile time 
modern language processors type inference techniques derived algorithm proposed milner unification types 
error messages compilers interpreters hard interpret programmer productivity hampered 
programmers new language discouraged 
unfortunately straightforward change unification systems produce clear type error messages 
serious problem type conflicts detected far away site error 
problem location inconsistency detected influenced order types unified 
type systems bias report type conflicts near program 
left right bias caused way unification substitution 
type inference algorithm symmetric subexpressions handled identically tendency report type conflicts certain parts program 
problems type systems polymorphic languages 
type inference techniques local assuming expressions correct types inconsistency 
global approach takes complete program consideration determines probably incorrect 
advantage approach extra information available resulting better error messages 
error messages brief explanation conflict 
occasionally extensive clarification conflict required identify errors 
desired level detail message depends experience programmer 
type conflict detected reported 
useful report multiple independent type conflicts 
example ill typed function illustrates problem current error messages case false error message produced hugs interpreter haskell definition error example hs line type error case expression term type string match bool message results different types expressions right hand side expressions type string type bool points term 
considering large proportion string constants reasonable assume expression false incorrect type 
new approach type inference remedy shortcoming 
set constraints types generated expression 
power constraint program analysis separation constraint generation specification analysis constraint resolution implementation 
constraints typically generated locally set constraints describe global properties 
longer forced solve constraints generated system left bias 
heuristics remove inconsistencies complete set constraints 
resolved inconsistency results reported type conflict 
papers discuss type inference techniques related approach 
lee yi formally define algorithm bottom folklore algorithm top hindley milner polymorphic type inference system 
proof ill typed expression algorithm detects inconsistency earlier find source type error location inconsistency detected wand presents algorithm keeps track reasons deductions type variable 
similar approach discussed interactive system traces deductive steps construct explanation type conflict :10.1.1.46.4848
various techniques improve type error messages constraints types 
walz johnson collect set type equations inconsistent 
resolve contradictions variables assigned type hypotheses satisfied 
unfortunately order equations solved determines conflict reported 
aiken show perform constraint program analysis type inference algorithm lambdacalculus polymorphism 
discuss corrections ill typed expressions constraints types system handle polymorphism 
discusses unification substitution conventional inference algorithms left right bias :10.1.1.43.7746
remove bias modification inference algorithm proposed hindley milner suggested unifies substitutions types 
different presents method capture information types graph 
approach generalisation techniques 
jun gives inference algorithm reports conflicting sites site conflict detected 
little knowledge type checking required understand reported conflicts 
organised follows 
section expression type language type inference rules section 
section give specification constraint solving process 
specification discuss correspondence type system hindley milner type system section 
sections respectively algorithm solve constraints heuristics remove inconsistencies set constraints section gives highlights topics research 
expression type language interested higher order functional language suitable type reconstruction 
language described expr identifier constant expr expr identifier expr case expr expr expr identifier ype 
expr expr set constants contains literals data constructors carrying constant type 
expressions left hand side case expressions restricted patterns necessary distinguish patterns expressions 
expression contains single declaration assigned explicit type recursive declarations permitted 
explicit type just ensure inferred type intended type necessary polymorphic recursion 
type language ype variable constant ype ype type system benefit type language especially quantified types required 
type variables written type constants written 
special type constant representing function types 
example function type int bool 
rest standard infix notation function types 
assume spurious types occur 
var lit literal primitive type app abs case expl af ae af ae ap pi pi api ei ei aei case 
pn en ap aei api ae ab ae ab ae ab ae ab type inference rules type inference rules ap ae ae ab ae ab set type inference rules assign type expression 
judgements form express expression type environment provided constraints types satisfied 
environment contains type variables assigned variables free gives typing schema provides rule language construct 
set constraints included judgements constraints constructed language construct hand right hand column inference rule 
implicitly assume set constraints expression contains union constraints generated subexpressions inference rule variable straightforward variable assigned new type variable recorded environment 
literal associated constant type empty environment 
case constructor polymorphic type specialisation type required instance constructor cons type list list specialised list list new type variable 
application new type variable introduced represents type application 
relation type function argument result expressed equality constraint 
equality constraint written abs constraint set app example inference tree represents delayed unification types 
environments function argument combined inferencing separately variable bound different type variables environment 
lambda expression removes variables environment bound constructs equality associated type variables fresh type variable 
new type variables introduced case expression representing types left hand sides right hand sides alternatives respectively 
variables pattern bind free variables right hand side alternative 
equality constraint constructed variable bound pattern variable removed environment 
expressions introduce polymorphism language 
occurrence declared variable body expression specialisation inferred type declaration created 
equality constraints types sufficient express specialisation polymorphic types 
introduce instance constraints form express specialisation 
set monomorphic type variables stored instance constraint 
set contains type variable introduced lambda expression type variable abs outside current expression 
values various sites computed simple traversal syntax tree 
left implicit 
monomorphic type variables type variables equal monomorphic type variable generalised new instance created 
declaration annotated type applied occurrence declared variable instance annotated type 
monomorphic type variables instantiation 
declared type general inferred type declaration expressed specialisation constraint 
example depicts inference tree collected set constraints 
set monomorphic type variables empty instance constraints free variables declaration 
section function solves set constraints 
applying set constraints results polymorphic type 
sight wonder generate trivial constraints substituting immediately done conventional approaches 
answer question touches essence approach may resolve inconsistent constraints dealing inconsistencies nice information possible available 
type type type variable occur type variable occurs type variable occurs exists definition function constraint solving specification give specification solve set constraints 
define function solves consistent set constraints 
succeeds substitution types type variables returned 
shows inductive definition solves constraint time 
order constraints solved irrelevant 
definition expresses set constraints empty substitution required 
definition solving equality constraint corresponds unification 
note function fails types unified 
definition solve instance constraints specification constraints respectively 
instantiation type define closure type respect set monomorphic type variables definition slightly different definition damas milner type variables quantified replaced fresh type variables 
correctness 

type variables 
fresh type variables briefly explain correspondence type system type system hindley milner 
type inference rules exactly assumption variable free expression 
furthermore inference rules hindley milner require assumption free variable expression 
function constructs set equality constraints assumption sets function merges assumptions sets 
general set assumptions contain type schemes follows quantified types occur equality constraints 
type schemes transformed types instantiating quantified type variables quantified type variables replaced fresh type variable 
extend definition rule 
fresh type variable claim type system correct respect type system hindley milner 
type system property property hm expression typing rules derive type set assumptions constraint set set assumptions function constructs set equality constraints corresponding assumptions applying set obtained merging results substitution 
substitution relevant type variables free apply closure principle type scheme assumptions words hm holds generic instance type 
constraint solving implementation section algorithm solve generated set constraints 
algorithm unable find solution set constraints gives indication solved 
algorithm implementation function provides way pin point location type error ill typed expression enables heuristics resolve inconsistencies 
result able produce better explanation error giving better error message 
equality graph undirected graph intermediate data structure store equalities types 
vertex equality graph corresponds type variable type constant edge represents equality constraint types labelled constraint number 
start graph containing vertex type variable edges 
constraint translated transformation graph 
constraints resolved substitution obtained graph 
constraint solving process maintains invariants vertex containing type constant exactly edge vertex containing type variable type variable occur exactly vertex type constant occur vertices 
remaining part section explains different types constraints solved equality graph 
algorithm solve set constraints 
bool solving equality constraints bool equality graph decomposition equality constraint results transformation equality graph 
constraint removed set modifying graph 
constants different marked erroneous 
vertex containing constant added graph edge new vertex vertex containing type variable constraint solved removed set marked erroneous 
edge added vertices 
satisfy constraint decomposed application types 
constraint replaced 
remaining cases obtained swapping types equality constraint 
decomposition type variable means substituting type variable application fresh type variables 
decomposition type variable occur connected component type constants indicate inconsistency requires decomposition type variables connected component 
substitution applied type constraint set equality constraint requested decomposition substituted application 
connected component decomposed variables duplicated fresh type variables left hand side application replace original type variables copy type variables right hand side alter copy 
structure duplicated component remains 
example consider equality graph left combination constraint list 
satisfy constraint type variable requires decomposition 
substitution type variables component 
consequently equality constraint changed list 
equality graph decomposition shown right 
solving instance constraints instance constraint transformed equality constraint soon fixed 
type fixed interpretation connected component contains type variable remain unchanged remaining constraints solved 
interpretation connected component change long type variables occurs equality constraint dealt constant inserted connected component edge combine connected components 
type variable occurring instance constraint result modification associated connected component eventually constraint transformed equality 
words instantiation type possible long change constraints set taken account 
postponing instance constraints corresponds order expressions typed algorithm damas milner type declaration inferred type body dealt 
instance constraint solved unique instance created equal 
type variables monomorphic introduced lambda expression containing expression generated instance constraint 
monomorphic type variables type variables equal monomorphic type variable instantiated 
create instance substitution constructed 
type variables component type variables remain unchanged type variables connected component containing constant mapped constant 
type variables connected component type constant replaced fresh type variable 
solving specialisation constraints specialisation constraints dealt equality constraints instance constraints 
explicit type general inferred type declaration 
constraint try find substitution 
substitution exist report inferred type general 
algorithm input set constraints output substitution create initial equality graph apply rules long possible earlier rules having higher priority 
return substitution obtained equality graph 
equality constraint require decomposition solve constraint 
equality graph inconsistent resolve inconsistency 
instance constraint fixed create equality constraint instantiation 
equality constraint decompose type variables connected component algorithm terminates set constraints contains specialisation constraints equality graph consistent 
specialisation constraint check instance 
order rules applied consistent set constraints influence outcome algorithm 
order important solving inconsistent sets 
resolving inconsistency equality graph postponed relevant information available set constraints 
note decomposition instantiation specialisation consistent equality graph required 
solving inconsistencies ill typed expression obtain inconsistent set constraints 
solving set conflict appears equality graph 
distinguish types inconsistencies 
different type constants connected component 
graph undirected path connecting constants 
path referred error path serves evidence inconsistency construct appropriate error message 
avoid infinite paths paths containing different vertices considered 
type variable connected component containing type constant requires decomposition satisfy equality constraint 
decompose path path type constant type variable requiring decomposition constraint causing decomposition 
remove inconsistency edge error path decompose path removed results splitting connected components smaller parts 
point heuristics determine constraints throw away 
discuss approach select set edges lowest total removal cost 
calculate removal cost constraint 
removal cost represents cost remove edges graph produced constraint 
cost depends trust value constraint measure confidence constraint determined origin constraint 
instance constraint originating prelude function high trust value constraints user defined expressions explicit type signature 
constraints average trust value instance constraints resulting application lambda abstraction 
example assuming type int bool expression true type inconsistent set constraints int bool bool 
constraint high trust value second constraint average trust value constructed application 
constraint removed restore consistency 
heuristic consider number occurrences type constant connected component 
multiple occurrences constant increase probability intended type constant 
reconsider case expression introduced section 
equality graph constraints expression 
graph consists connected components 
component right inconsistent 
occurrences string versus occurrence bool suggest removal 
achieve collect correct paths path vertices containing type constant 
int int int int bool string string string inconsistent equality graph prevent breaking correct path constraint corresponding edge correct path assigned higher removal cost 
program fragment calculates removal cost constraint equality graph trust constraint int graph constraint constraint graph int con graph graph trust con length filter con elem function trust returns trust value constraint returns set correct paths containing constraints 
minimal set constraints lowest total removal cost removed equality graph 
minimal set constraints removal edges correspond constraint results consistent equality graph subset minimal 
example expression illustrates working algorithm 
assume function plus type int int int 

plus case 
true 
false true expression ill typed different type constants assigned variable indications type bool match expressions lefthand side alternatives term 
applied true 
argument plus type expressions right hand side case expression including expression type int 
haskell produces error message type conflict error example hs line type error application expression plus case true term case true type bool match int bool bool bool rhs case lhs case int int int inconsistent equality graph int argument plus constraint approach leads better understanding type conflict 
set constraints expression generated int int int bool bool bool int constraints constraints demand decomposition type variable 
decomposition type variables results substitution application substitution set constraints solved straightforwardly 
shows equality graph set constraints empty 
error paths int bool graph represent type conflict 
restore consistency edge error path removed 
minimal sets computed 
example edges minimal sets exactly edges overlapping part error paths 
removal cost constraint calculated 
total number occurrences correct paths combined trust value result removal cost 
table presents removal costs 
calculation high trust value assigned constraint plus replaced value default value trust values 
compare total removal cost minimal set 
lowest total removal cost minimal sets 
constraints sets removed resolve inconsistency 
trust cost high table removal costs trust cost extra information provided origin type variables constraints 
information produce explanation type conflict 
error message produced removal constraint type error conflicting types variable applied true line results bool rhs case expression line argument plus line results int presents different approach inferring type expression 
approach tries improve quality exactness reported error message ill typed expressions 
underlying concept construction constraints types representing unification instantiation specialisation types 
inconsistencies detected solving constraints resolved heuristics 
advantages approach 
left right bias completely removed unification types delayed 
order constraints solved influence outcome 
heuristics help point error source 
possible add heuristics 
possible produce multiple useful error messages 
heuristics added system construct better error messages common mistakes 
features extensions expression language included type system practical setting 
important extension type system type constructor classes provide way overload functions 
result extension kind inferencing necessary determine appropriate kinds 
type synonyms reported error messages increase understanding introduces new problems type system 
error reporting facilities type assignment algorithm require additional overhead instance graph intermediate data structure maintaining histories deduction type variables 
consequently inevitable algorithm time efficient 
want investigate possible combine time efficient system constraint system excellent error reporting desired properties maintained 
currently working unification type checker switches approach type conflict encountered 
proof practicality approach real data collected intended group users programmers new functional programming 
empirical measurements obtained practical setting instance functional programming course year students 
section briefly discussed correctness algorithm respect hindley milner type inference rules 
formal proof property appear forthcoming technical report 
aiken 
set constraint program analysis 
science computer programming pages 
aiken fahndrich foster su 
toolkit constructing type constraint program analyses 
proceedings second international workshop types compilation kyoto japan march 
:10.1.1.46.4848
explaining type errors polymorphic languages 
acm letters programming languages volume pages december 
karen bernstein 
debugging type errors full version 
state university new york stony brook november 
technical report 
damas milner 
principal type schemes functional programs 
principles programming languages popl pages 
duggan 
correct type explanation 
workshop ml acm sigplan pages 
venkatesh 
correcting errors curry system 
vinay 
eds proc 
th conf 
foundations software technology theoretical computer science lncs vol 
springer verlag pages 
yang jun explaining type errors finding sources type conflicts 
greg michaelson phil hans wolfgang loidl editors trends functional programming pages 
intellect books 
lee yi 
proofs folklore polymorphic type inference algorithm 
acm programming languages systems july 
bruce :10.1.1.43.7746
unification substitutions type inference 
kevin hammond anthony davie chris clack editors implementation functional languages ifl london uk volume lncs pages 
springer verlag september 
bruce 
generalising techniques type explanation 
scottish functional programming workshop pages 
heriot watt department computing electrical engineering technical report rm 
robin milner 
theory type polymorphism programming 
journal computer system sciences 
walz johnson 
maximum flow approach anomaly isolation unification incremental type inference 
conference record th annual acm symposium principles programming languages pages st petersburg fl january 
wand 
finding source type errors 
th annual acm symp 
principles prog 
languages pages january 

