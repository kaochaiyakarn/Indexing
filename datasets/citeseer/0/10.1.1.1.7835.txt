supporting software development declaratively codified programming patterns kim mens isabel wuyts isabel vub ac wuyts iam unibe ch programming technology lab software composition group department computer science institut informatik vrije universiteit brussel belgium universit bern switzerland current day software development programmers programming patterns clarify intents increase understandability programs 
unfortunately software development environments adequately support declaration patterns 
explicitly codify patterns adopt declarative meta programming approach 
approach reify structure object oriented program terms logic clauses 
declare programming patterns logic rules top clauses 
querying logic system rules allow check enforce search occurrences patterns software 
programming patterns active part development maintenance environment 
keywords programming patterns logic programming meta programming tool support contemporary software development practice regards software construction incremental continuous process involves large development teams 
context crucial software readable possible 
afford programmers wade piles documentation code understand software discover intents original programmers 
spend precious time tackle real problem task programming conceptualizing designing implementing maintenance 
commonly accepted programming design patterns easier programmers communicate intents 
problem ad hoc patterns supported programming language development environment 
example certain programming pattern consistently program solely depends programmers discipline 
relieving mind unnecessary notation sets free concentrate advanced problems effect increases mental power race 
alfred north whitehead allow programmers gain maximum profit extra information encoded patterns need tools support patterns 
envision patterns explicit active part development environment 
activities environment support checking piece source code matches pattern finding pieces code match pattern searching occurrences patterns program piece source code detecting violations usage pattern enforcing consistent pattern program generating code matches pattern 
advocates declarative metalanguage expressing reasoning programming patterns object oriented programs 
declarative meta programming declarative meta programming dmp instance hybrid language symbiosis merging declarative language meta level standard object oriented base language 
base level programs expressed terms facts rules meta level 
programming patterns expressed rules reason clauses representing base level programs 
querying logic system rules check detect search occurrences generate code fragments programming patterns 
discussing programming pattern rules look elaborate base meta language 
declarative meta language prolog variant 
logic programming long identified suited meta programming language processing general 
prolog expressive power unification backtracking capacity support multi way reasoning particularly attractive reason patterns 
dmp applied programs written programming language take object oriented language smalltalk base language 
reason choosing smalltalk experiments exists smalltalk culture smalltalk programmers lot known patterns express important intents explicit language constructs available 
setup dmp environment consists main elements 
logic language declare programming patterns logic meta programs reason programs written object oriented base language 
logic meta programs stored logic repository 
base level language constructs stored implementation repository accessed logic language means meta level interface 
experiments logic language soul allow powerful logic reasoning smalltalk programs 
soul implemented smalltalk contains primitive construct called smalltalk term evaluating smalltalk expressions part logic rules 
allows soul clauses reason smalltalk source code making direct meta calls smalltalk image 
prototypical example append predicate append lists check list concatenation check generate prefixes list 
representational mapping representational mapping defines meta level interface declarative meta language object oriented base language 
base language construct want reason meta level logic fact rule reifies construct meta level 
lists predicates constitute representational mapping 
reification achieved soul symbiosis smalltalk access smalltalk image directly executing piece smalltalk code part logic rule 
soul rules reify notion classes rule class class constant class smalltalk includes class name 
rule class class variable class generate class smalltalk 
rule declares happens class predicate called constant value 
case special smalltalk term smalltalk includes class name checks value represents existing class smalltalk image 
note smalltalk term position predication required return true false 
second rule applied class variable 
case primitive generate predicate unify variable argument predicate classes smalltalk image 
done executing smalltalk expression square brackets provided second argument generate predicate 
smalltalk expression generate predicate supposed return collection results 
rules query query class array verifies array existing class smalltalk image query query class class unifies class class smalltalk image 
note smalltalk term position logic term return value 
rules reify smalltalk language constructs defined similar way see examples 
section show best practice patterns design patterns programming patterns encoded soul 
table variable represents smalltalk class method parse tree method name instance variable name name smalltalk method protocol mc smalltalk meta class stats list smalltalk statements args list names argument variables 
soul keyword separates body head rule logic variables start question marks comma denotes logical conjunction lists delimited terms square brackets represent smalltalk expressions may contain bound logic variables 
predicate meaning class class class implements method name args method argument list args method belongs class methodname method name stats method list statements stats body instvar class instance variable name args class message argument list args sent receiver metaclass mc class meta class mc method class belongs method protocol subclass class subclass codifying programming patterns programming language set patterns experienced programmers follow produce understandable code 
patterns clear intents improve readability software 
known kinds patterns best practice patterns design patterns design heuristics bad smells refactoring patterns 
section illustrate patterns show codified dmp medium 
best practice patterns beck smalltalk best practice patterns capture commonly accepted programming conventions smalltalk 
suggest choose clear names objects instance variables methods communicate programmer intents code write understandable methods concrete examples discuss getting method constructor method best practice patterns 
getting method way distinction state behavior transparent hiding access state object message send 
motivation idea accessing methods 
accessing method responsible getting setting value instance variable 
instance variable calling methods 
methods get value variable getting methods methods set value variable setting methods 
getting method best practice pattern states getting method provide access instance variable 

representational mapping provide method returns value variable 
give name variable 
possible dmp implementation representing structure getting method 
declares statement list getting method consists single statement merely returns value instance variable fact return variable 
note fact expresses simplest form getting method 
forms getting methods codified adding similar facts rules 
getting method uses lazy initialization extra statement initialize value variable time variable retrieved 
due space limitations include forms 
predicate defines statement list getting method 
check method class getting method instance variable need verify instance variable belongs class method name variable method returns particular instance variable 
rule class method instvar class method instvar class instvar methodname method instvar stats instvar method stats 
predicate states class instance variable instvar getting method method retrieves value variable 
underscore symbol denotes special variable actual value unimportant 
facilitate reasoning method statements method represented logic data structure corresponds method parse tree constructor method constructor method best practice pattern indicates best express creation class instance constructor method 
represent instance creation 
provide methods create formed instances 
pass required parameters 
put constructor methods method protocol called instance creation 
fact constructor methods convention put instance creation method protocol easy codify pattern rule class meth metaclass class meta meta instance creation meth meth class 
smalltalk constructor methods defined metaclasses 
retrieve meta class verify meth belongs instance creation method protocol 
extra consistency check verify constructor method returns instance correct type class auxiliary predicate meth class 
typing predicate guesses type smalltalk dynamically typed 
infer type expression returned method look messages sent expression context occurs 
class possible type expression understands messages message understood error may occur run time 
design patterns best practice patterns define programming conventions level single classes methods instance variables design patterns global scope focus typical class collaborations 
best practice patterns codify structure design patterns logic meta programs reason structure base level program 
illustration codify visitor design pattern structure 
general idea visitor design pattern separate structure elements operations applied elements 
separation string containing original smalltalk source code 
predicate matches list smalltalk statements statements occurring parse tree 
note design pattern captures structure class collaboration 
motivation intent applicability relationships design patterns 
focus structure design patterns 
easier cost effective add new operations classes describe element structure need changed 
separating nodes parse tree different operations performed nodes generating code pretty printing optimizing typical example visitor design pattern offers solution 
shown visitor design pattern structure hierarchy describing elements separate hierarchy implementing operations 
assume element root class hierarchy subclasses class visitor define operations 
element class defines method accept takes visitor argument calls visitor 
call general unique element 
visitor hierarchy consists classes define operations element classes 
just need implement calls different element classes 
rule describing structure visitor design pattern fairly straightforward 
declares visitor class implements visit method 
way class el implements method called 
method responsible calling visitor actual visit operation 
need verify arguments call receiver denoted self smalltalk passed visitor argument accept method rule visitor visitor el visitor el meth meth return send member variable self meth member 
programming patterns best practice patterns design patterns patterns exist check software designed structured 
examples design heuristics beck fowler bad smells 
typical example consider heuristic heuristics classes base classes base classes classes 
heuristic codified follows rule forall abstractclass class class forall class abstractclass class 
accept element accept accept class checks class class class inherits abstractclass class checks class verifying contains method 
smalltalk methods recognized subclass responsibility self send 
words check statement list matches pattern send variable self second example programming pattern detecting ill designed code duplicated code bad smell duplicated code common duplication problem expression sibling subclasses 
bad smell proposed solution similar heuristic suggests refactor classes implement state behavior classes common data behavior methods classes inherit common base class captures data methods 
codify rules check common expression classes 
classes class class common behavior implement method method body 
rule class class met met class met class met met statements met statements 
having common data codified having common instance variable instvar type 
save space show simplest implementation 

visitor design pattern structure visitor rule class class instvar instvar class instvar instvar class instvar class instvar type class instvar type 
similar predicate lightweight type inference rules guess type instance variable looking messages sent variable scope class computing classes understand messages 
addition initialization variables factory methods getting setting methods taken account 
supporting software development previous section dmp declare kinds programming patterns 
section elaborate programmer rules support developing maintaining software 
rules different ways checking certain pattern satisfied searching source code matches pattern detecting violations patterns code generation 
checking searching due multi way reasoning capability logic language predicates multiple ways 
illustrate elaborate predicate subsection 
calling predicate constant arguments merely checks method class getting method instance variable 
query contains variables search values satisfy pattern 
example query builder returns getting method variable builder ofthe smalltalk class 
logic variable query instvar finds getting methods corresponding instance variable class 
predicate opposite way find classes getting method instance variable name query class method name query returns results classes implements getting method 
call predicate variables case classes entire smalltalk image searched getting methods 
computing query may take long time 
similar reasoning predicates defined section 
second example checking searching revisit rule subsection tells move common behavior sibling subclasses common base class 
rule find classes refactored detect classes behavior common 
rule returns common base class methods moved 
rule base subclass base subclass base 
detecting violations getting method coming back getting method pattern addition checking method getting method searching image occurrences getting methods write queries check source code violations getting method pattern 
methods violate encapsulation imposed getting method programming pattern methods directly send messages instance variables exception getting methods ones allowed 
rule detecting violations verifies method implemented class sends messages receiver instance variable class rule class meth iv instvar class iv class meth class meth iv class variable iv 
invoke query find violations getting method pattern 
returns violating method meth directly accesses instance variable iv class class belongs violating message msg sends instance variable 
query class meth iv msg visitor design pattern illustration visitor predicate subsection detecting violations consider class hierarchy root class parse representing parse tree 
want detect non parse tree elements comply visitor pattern 
select subclasses parse find ones comply visitor rule query hierarchy node abstractclass node visitor visitor node line query mentions name visitor visit nodes 
know name method leave variable 
system deduce name specific instance visitor pattern 
results query contain methods comply visitor design pattern need reimplemented 
query fails means classes methods satisfy structure visitor design pattern 
code generation getting method searching getting methods violations thereof useful generate automatically code getting methods instance variable class 
done combining predicate describing body getting method primitive predicate generates source code method logic parse tree description 
rule class instvar instvar class instvar verify method name instvar exists class instvar stats instvar generate code method parse tree description method class instvar stats 
method parse tree description consists parts method class name method argument list list temporary variables statement list 
due space limitations show detailed implementation predicate 
strong symbiosis soul smalltalk add method parse tree format takes input smalltalk image see details 
behavior refactoring second example code generation reconsider predicate subsection 
searches image common methods refactored 
perform actual refactoring codify pull method refactoring pattern 
pull method methods identical results subclasses 
move superclass 
show easiest case methods exactly body typically result copy paste programming 
rule defines refactoring 
comments parentheses explain code mechanics refactoring corresponds described 
rule check common behavior base retrieve information common method methodname name stats args temps verify common base class base implement method name base name generate code new method method base name args temps stats delete code old methods 
addition meta predicate rule uses meta predicate remove method smalltalk image 
able generate code important advantage programmer gains time concentrate intellectually rewarding development maintenance activities 
straightforward coding tasks performed partially 
example imagine having kind design pattern tool just select pattern code template automatically generated programmer fill 
section elaborate possible tool support integrate dmp language existing development environment 
tool support logic meta language soul integrated smalltalk development environment 
reason manipulate smalltalk entities directly execute parameterized smalltalk source code fragments 
conversely soul queries executed smalltalk 
achieved implementing soul smalltalk powerful reflective capabilities smalltalk obtain symbiosis logic language 
soul extended synchronization framework build tools rely kind synchronization design implementation 
enables construction tools monitor act change implementation design 
example tool enforce certain patterns implementation 
suppose want enforce consistent usage getting method best practice pattern program 
tool monitors changes methods gives error warning programmer accepts method accesses instance variable directly getting method 
experiments worked directly level logic meta language 
defined logic rules logic queries directly reason patterns 
programming patterns explicit active part development environment need user friendly support tools environment 
developed tools structural find application sophisticated search engine 
tool transparently uses logic queries allow searching methods classes smalltalk image complex search patterns 
user needs fill simple selection fields find application automatically generate interpret corresponding query user 
example find application may find classes name matching pattern method sending specified message implement method name 
results search user readable format 
second interesting tool implemented top soul application 
implementation program logs violations certain programming patterns conventions heuristics list 
list inspected programmer fix ignore detected problems 
high level descriptions top implementation third example currently developed tool visualizing manipulating design patterns 
supports definition design patterns generating code templates searching occurrences design patterns source code checking consistency design pattern instances evolution transformation design patterns detecting resolving conflicts 
tools hide details logic metalanguage programmer 
prohibit programmer access logic meta language 
provided high level tools power user query engine directly reason software 
example find application supports powerful search queries restricted fixed set selection fields 
query engine directly powerful searches performed full soul syntax predefined predicates construct search query 
programmer add logic repository specific rules declare pattern 
available tools top logic language open automatically provide support additional patterns 
discussed importance programming patterns support software development maintenance 
especially context continuously evolving software large development teams high turn rate advanced tools support software development process crucial 
current day software development environments tools provide little support declare best practice patterns design patterns design heuristics bad smells refactoring patterns 
proposed declarative metaprogramming basis building sophisticated development tools aid programmer programming tasks 
illustrated expressing different kinds programming patterns rules dmp language showing rules search occurrences check detect violations enforce programming patterns generate code 
dmp proved ideal medium expressing rules declarative intuitive readable specific benefits logic languages multi way reasoning allows rule different ways unification provides powerful pattern matching mechanism backtracking find possible solutions query base language independent rules describe patterns certain extent object oriented languages customizable user defined rules easily expressed 
programmer declare set rules support particular development maintenance activities 
rely fact piece software certain programming patterns consistently code effectively reach higher level abstraction code 
possible reason powerful concepts architectural abstractions 
beck 
smalltalk best practice patterns 
prentice hall ptr 
fowler 
refactoring improving design existing programs 
addison wesley 
fraser cockburn coplien constantine west 
oo anthropology crossing chasm panel 
proceedings oopsla conference volume acm sigplan notices pages 
acm press october 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 
mens 
automating architectural conformance checking means logic meta programming 
phd thesis department computer science vrije universiteit brussel belgium october 

object oriented design heuristics 
addison wesley april 
teitelman 
automated programmer assistant 
shrobe sandewall editors interactive programming environments pages 
mcgraw hill 
wuyts 
declarative reasoning structure objectoriented systems 
proceedings tools usa pages 
ieee computer society press 
wuyts 
logic meta programming approach support evolution object oriented design implementation 
phd thesis department computer science vrije universiteit brussel belgium january 
