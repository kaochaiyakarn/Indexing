issues practical graph rewriting blostein fahmy ann department computing information science queen university kingston ontario canada blostein ca 
graphs popular data structure graph manipulation programs common 
graph manipulations cleanly compactly explicitly described graph rewriting notation 
software developer persuaded try graph rewriting problems commonly arise 
primarily difficult newcomer develop feel computations expressed graph rewriting 
graph rewriting convenient solving aspects problem better mechanisms needed interfacing graph rewriting styles computation 
efficiency considerations limited availability development tools limit practical graph rewriting 
inaccessible appearance graph rewriting literature additional hindrance 
problems addressed combination public relations research development promoting widespread graph rewriting 

graph rewriting potential useful large variety applications 
graphs provide expressive versatile data representation 
typically nodes represent objects concepts edges represent relationships 
addition hierarchical relationships depicted node nesting hare 
auxiliary information expressed adding attributes nodes edges 
widespread graphs data representation natural graph manipulations form basis useful computations 
graph manipulations represented implicitly embedded program things constructs modifies graph 
alternatively graph manipulations represented explicitly graph rewriting rules modify host graph 
explicit rules offers advantages 
graph rewriting provides highlevel representation solution computational problem 
theoretical foundations graph rewriting assist proving correctness convergence properties 
despite potential graph rewriting attained widespread practical 
discover reasons helpful consider outside viewpoint manage small software house 
important data structures graphs 
currently programs written code devoted graph manipulations 
planning want switch graph rewriting language 
enthusiastic graph rewriting questions 
important practical considerations arise 
graph rewriting language fast 
tools developing displaying debugging rules 
suppose optimistically answer questions 
research supported canada natural sciences engineering research council 
major hurdle imagine recast programs terms graph rewriting 
need small scale advice formulate individual rewrite rules large scale advice organize collection rules 
consider sampling questions 
shows terminology 
graph directed undirected graph 
nodes edges may labeled may associated attributes 
graph rewrite rule rule specified gl gr gl gr graphs 
rule application attributed subgraph host isomorphic gl replaced host subgraph created isomorphic gr 
embedding information calculates post embedding edges pre embedding edges defined 
embedding information textual graphical 
gluing models specify embedding gluing isomorphism 
application condition optional defines conditions attribute values host graph structure 
conditions hold rule application proceed 
attribute transfer function optional assigns attribute values host attribute values host graph graph rule applied 
host subgraph host graph isomorphic gl models host induced subgraph edge connects nodes host edge part host graph host 
operator denotes removal nodes edges host edges endpoints gl host host subgraph isomorphic replace host pre embedding edges set edges joining host post embedding edges set edges joining host 
terminology graph rewriting 
definitions assume subgraph isomorphism models allow general graph morphism 

new graph rewriting 
start 
looking graph rewriting community source information express computations graph rewriting 
consider analogous change lisp programming programmers lisp effectively due mindset dominates approach programming absorb lisp culture environment experienced lisp programmers 
programmers attempting learn graph rewriting may trouble locating sources graph rewrite culture 
community effort promote culture allow newcomers quickly develop proper mindset performing practical effective computations graph rewriting 
relevant materials include accessible written expositions practical graph rewriting systems organizations styles computation easily available tools creating editing executing debugging graph rewriting systems section 
examples non trivial practical uses graph rewriting 
complete executable systems helpful 
illustrate various computational styles graph rewriting may 
relevant discussed include software engineering syntactic pattern recognition fu document image analysis object recognition visual programming environments diagram editors tt databases semantic networks 
discussion panel 
fostering graph rewriting culture go far graph rewriting 

standard algorithms searching sorting hashing algorithm design methods divide conquer dynamic programming greedy algorithms 
equivalent graph rewriting 
currently little offer terms graph techniques algorithm design analysis 
libraries standard graph rewriting code 
inspiring example parameterized rules syntax tree manipulation reported 
need develop specialized algorithm design techniques geared graph rewriting primitive operation 
precedents specialized algorithm design techniques include vlsi design area time cost function optical computing primitive operations include fourier transform convolution union intersection figures coordinate transforms 

development tools available 
aware practical graph rewriting depends heavily availability development debugging tools 
unfortunately construction tools time consuming complex task due need combine textual diagrammatic elements need provide readable displays large graphs need visualize interactions graph rewriting rules 
development debugging techniques interesting challenging research topic 
currently difficult define kind tools needed support widespread practical graph rewriting 
clearer time improving set available tools allow gather extensive experience executable systems 
reader interested experimenting graph rewriting brief list graph rewriting environments 
environments mature widespread active development 
remaining environments may available general 
apologies list incomplete 
progres provides extensive facilities ordered graph rewriting 
contact andy informatik rwth aachen de obtain software 
graphed provides extensive graph display capabilities supports limited form graph rewriting direct derivation steps context free rewrite rules 
contact himsolt fmi uni passau de obtain software 
pfeiffer describes development plans graphical editing environment algebraic graph rewriting 
textual representation graph grammar compiled prototype implementation algebraic graph transformation described 
time tool performed direct derivation steps approach 
tt mentions succession implementations executing ordered graph rewriting notation new implementation development including graphical editor notation rules 

graph rewriting efficient 
isn subgraph isomorphism testing intractable 
question readily comes mind give 
true subgraph isomorphism testing np complete problem general various factors tractable graph rewriting system 
firstly possible express computation small subgraphs left hand side rewrite rules 
secondly node labels edge labels directed edges drastically reduce search space isomorphic subgraphs 
graph rewriting systems certain phrases frequently appear application conditions exploited greatly reduce search space isomorphic subgraphs meet application condition 
optimization subgraph isomorphism testing discussed nd 
course graph rewriting marketed fast style computation von neumann architecture geared instruction fetch execution bottleneck processor memory suited interpretation graph rewriting 
strong demand motivate development new computer architecture graph rewriting fundamental operation 
need develop suitable graph rewriting architectures software graph rewriting style computation 
special purpose graph rewriting hardware may sound far fetched consider neural network computations analogy years research software implemented neural net architectures resulted commercially available neural net architectures implemented vlsi circuits 

organize rewrite rules 
graph rewriting literature reports various methods organizing collection graph rewrite rules unordered ordered event driven graph rewriting systems graph grammars table 
taxonomy arose efforts organize reading graph rewriting literature 
literature confusing systems called grammars define graph language 
understanding systems organizations provide helpful starting point process deciding computation expressed graph rewrite rules 
choice system organization greatly affects number rewrite rule applications tried execution 
parsing grammar normally requires backtracking frequent testing inapplicable rules 
contrast ordered graph rewriting system directly transform input graph output graph limited number production rules consideration time 
event driven graph rewriting systems highly time efficient applying rules direct response external actions 
application system components system execution unordered graph rewriting system set graph rewrite rules 
rewrite host graph choosing nondeterministically applicable rules rules apply 
set graph rewrite rules productions 
start graph 
designation labels terminal nonterminal 
set graph rewrite rules 
control specification provides complete partial ordering rule application 
set graph rewrite rules 
externally arising sequence events 
graph grammar ordered graph rewriting system generative rewrite start graph obtain terminal graph non terminal labels 
set terminal graphs language grammar 
recognition parse graph find sequence rewrite rules derive graph start graph 
rewrite host graph choosing nondeterministically applicable rules consistent control specification final state control specification reached 
event driven graph rewriting system table 
organizations graph rewriting systems 
rewrite initial host graph rewrite rules executed response events 
implemented event driven graph rewriting run acceptable time efficiency 
application calls ordered partially ordered graph rewriting backtracking may run acceptable efficiency 
application calls graph grammar careful grammar parser construction context free possible necessary hope parsing speeds allowing large scale practical 
case graph rewriting useful provide acceptably efficient implementation practical software development cycle include graph rewriting form executable specification sc 
briefly review practical system organizations 
unordered graph rewriting excellent example unordered graph rewriting provided rewriting 
rewriting system initial host graph quicksort example uses list numbers sorted specification actor language uses graph compiled actor program 
initial host graph transformed graph rewrite rules infinitely dining philosophers example termination quicksort example 
platform concept modularize rewriting discussed section 
unfortunately rewriting environment available current experience limited descriptions rewriting systems 
graph grammars pure graph grammar productions listed order arises practice 
developer chosen particular parser developer usually aware order parser tries alternatives 
developer may design smaller faster graph grammar 
example anderson ande uses set coordinate grammar recognize mathematical notation 
describes reliance production rule ordering distinguish input cos word denoting trigonometric function implied multiplication denoting 
possible rewrite grammar avoid order dependence grammar increase size complexity 
drawback order dependence language longer defined grammar arises interaction grammar particular parser 
addition order dependence issue reversibility 
grammar recognition generation 
pure grammar reversible practice non reversible constructs application conditions attribute computations common 
reversibility desired various domains difficult achieve 
example going research reversible string grammars natural language processing 
related note graph grammar rules limited bottom top parsers 
practical graph grammars seriously hampered high complexity parsing 
sub exponential parsers developed certain restricted classes graph grammars 
selection parsing follows 
presents linear time precedence parser special class context free graph grammars 
bunke haller describe extension early parser context free plex languages parser permits left recursion capable recognizing partial structures 
parsing algorithm applicable context sensitive graph grammars developed 
graph grammar parser design visual programming environment clinical protocols 
lin fu recognize dimensional objects dimensional images top backtrack parser plex grammars 
collin interpret dimensions engineering drawings plex grammar parser mixes top bottom processing 
chart parser hierarchical graphs discussed 
reports heuristically driven chart parser application cad cam 
related note henderson samal discuss efficient parsing stratified shape grammars building methods lr string grammars techniques relevant graph grammar parsing 
ordered graph rewriting computations convenient order partially order collection rewrite rules 
example bunke recognizes circuit diagrams applying collection noise reduction rules 
critical noise reduction rules applied exhaustively application rules recognition transistors capacitors 
similarly recognition approach music notation uses ordered recognition stages consists ordered phases build creates edges weed removes inconsistent edges incorporate prunes graph adding semantic information attributes 
graph applications software engineering extensive ordered graph rewriting 
various forms ordered graph rewriting possible depending nondeterminism backtracking completely deterministic system results pairing deterministic control specification cursor nodes called demon nodes indicate desired host graph location rule application 
determinism desirable editing applications users expect deterministic response editing command tt 
partially ordered rewrite systems backtracking software engineering diagram recognition circuit diagrams music notation math notation 
diagram recognition control specification orders phases recognition process rules phase unordered partially ordered non deterministic alternatives lead desired result 
partially ordered rewrite systems backtracking expressed progres language sc 
progres interpreter automatically backtracks search successful path control specification alternate matches host alternate control paths tried needed 
allows straightforward coding classical ai search problems partially ordered collection rewrite rules 
control specifications expressed variety forms including lists diagrams text 
simplest control specification associates sets production rule 
success set lists possible production try successful application current production 
failure set lists productions try unsuccessful application production 
specified tabular form fu quickly difficult read 
diagrammatic control specifications control diagrams extensions 
example block condition allows control diagram test attribute values nodes involved production 
permit flexible control constructs control specification take textual form similar imperative programming language 
example progres provides deterministic non deterministic versions loop sc addition encapsulation tools transactions 
event driven graph rewriting ordered graph rewriting systems provide internally imposed ordering rewrite rules event driven systems externally imposed ordering arising ordering external events 
illustrated library system ehrig kreowski 
external event returning ordering library book results invocation corresponding rewrite rule 
parameters provide rewrite rule information describing details event 
authors mention anticipated need control structures single transaction 
ordered graph rewriting regulate event driven graph rewriting 
forrester diagram editor control specification defines editing events legal point 
events foreseen control specification disallowed resulting error message user 
similar structure diagram editors described tt 

choose graph rewriting mechanism 
large variety graph rewriting mechanisms investigated 
rewriting mechanism universally suitable 
practical choice rewriting mechanism depends application availability tools personal taste 
relevant factors include power embedding formal properties rewrite rules readability intellectual manageability efficiency rule application 
power embedding complex embedding mechanisms permit significant graph inspection graph manipulation embedding step 
conversely highly restricted embedding mechanisms invariant embedding gluing models inconvenient expressing certain common graph operations node deletion 
choice embedding mechanism involves tradeoff fewer complex rewrite rules versus larger number simpler rules 
practical examples graph rewriting systems heavy complex embeddings 
appears software designers find easier natural express computation rules restricted embedding type 
node node node node delete labeled node incident edges 
elementary embedding mechanism 
gluing model 
invariant embedding necessitates expanded include edges incident labeled node 
set rewrite rules enumerate possible configuration incident edges 
notation denoting variable repetition nodes edges adapted 
similarly notation uses groups denote zero occurrences starred graph elements implement node deletion 
rule deletes node syntactic shorthand infinite collection rules meet gluing condition 
formal properties rewrite rules formal properties graph rewriting practically important 
strong theoretical foundations gluing models offer significant advantages 
example algebraic graph rewriting simplifies construction proofs integrity database system illustrated library transaction system 
rewrite rules formally characterized properties graph rewriting provide formal definition graph classes examples include class formed forrester diagrams class formed semantic networks 
readability intellectual manageability readability rewrite rules affects intellectual manageability system development time ease maintenance ease debugging 
particularly difficult complex embeddings readable way 
textual embedding specifications difficult read various diagrammatic notations proposed 
visual presentation simplified avoiding duplication graph parts common 
opinion diagrammatic depictions advantageous embeddings intermediate complexity elementary embeddings specified textually easily perceived visually corresponding nodes 
similarly gluing isomorphisms effectively conveyed visual correspondence nodes 
embeddings complex elementary type involve testing node labels edges easier perceive diagrammatic notation textual 
selected embedding paths long highly complex benefit textual diagrammatic depiction 
example progres path construct permits extensive searching testing host graph part embedding process 
applications require complex embeddings don experience major difficulties arise formulation individual rewrite rules structuring large collection rules interact desired way 
optional context embedding unique part deleted optional context embedding required context parts common unique part added unique part retraction application condition guard required context prohibited context restriction unique part insertion notation tt notation tt notation diagrammatic notations graph rewrite rules 
notations embedding shown optional context diagrammatic depictions embedding match host graph 
required context match order rewrite rule applied 
notation center required optional context placed optional parts 
elements group may occur zero times 
prohibited context depicts host graph structure restrictions labels attributes expressed textually guard 
graph rewrite rules add second edge labeled node node 
avoiding duplication graph parts common shrinks drawing greatly reduces graphical depiction embedding 
notation rule appears tt fig 

line fraction line fraction application condition node label undetermined default embedding attribute transfer 
line fraction textual versus graphical depiction simple embedding 
notations graph rewrite rule replace line labeled node fraction labeled node context incoming edges 
analogous embedding conveyed similarly nodes visually corresponding places reinforced textual description 
embedding conveyed optional context 
filled node indicating arbitrary node label edges depict node correspondence 
directed edges repeated incoming outgoing edges 
notation embedding conveyed similarly groups indicate occurrences starred structures 
isomorphisms versus general graph morphisms selection rewrite mechanism involves choosing isomorphisms general morphisms finding subgraph host matching gl utility general graph morphisms illustrated small examples literature 
general morphisms easily result unexpected matches 
interested hear general graph morphisms large scale system debugging rewrite systems difficult 
useful compromise allow rule author selectively explicitly indicate general morphisms may 
example rewriting uses subgraph isomorphism label subscript notation called fold explicitly indicate groups nodes optionally matched single host graph node 
utility construct demonstrated rule insert element circular list rule works circular lists length 
extensions rewrite mechanism extensions rewrite mechanisms useful practice 
include hierarchical label organization calculation attribute values application conditions parameters graph rewrite rules variable node edge labels rewrite rules variable graph structure rewrite rules optional repeated nodes edges 
extensions useful certain applications care select features necessary cleanly express graph transformations needed application 

modularize graph rewriting system 
graph rewriting system constructed modular way easier design implement debug maintain 
various aspects graph rewriting system modularized host graph structure rewrite rules control specification 
active research area 
selected approaches modularization listed 
approaches combination 
modular specification host graph structure description allowable host graph structure provides foundation design graph rewriting system 
example graph scheme progres defines statically graph properties 
graph scheme defines class hierarchy node labels edge labels multiple inheritance allowed 
edge typing information declared edge label define node types admissible endpoints edge 
static type information allows useful compile time run time checks graph rewrite rules host graph structure 
host graph triggers method modularization proposed unordered graph rewriting system host graph nondeterministically transformed set graph rewrite rules control specification 
allow designer divide large problem manageable subproblems rewrite systems platforms related rules 
platforms defined specially labeled nodes called trigger nodes 
define platform choose new trigger label 
rewrite rule platform contains trigger node required context retraction 
rewrite rule wishes invoke rules particular platform rewrite rule adds trigger host graph 
satisfies preconditions platform may result execution platform rule 
label trigger node tuple arbitrary structure include parameters influence resultant application platform rule 
style computation solve variety specification concurrency problems 
modular control specification ordered graph rewriting system control specification structured modular way 
example progres provides transactions encapsulation tools sc 
ordering structure computation phases example build constrain rank incorporate recognition stages 
level rewrite rules generic graph rewrite rules expressed graphs transformed meta rules produce executable rewrite rules 
system describe legal database transactions hi complex transactions conveniently expressed transformed produce final production 
construct allows general operations expressed generically variety ways 
example manipulation geometric objects specialized treat polylines rectangles 
modules rewrite rules arising host graph locality applications host graph represented hierarchically level refined level consisting local graphs interfaces 
case graph productions modularized modules transforming local graphs changing interfaces global graph changing graph hierarchy split join local graphs 
inheritance inheritance powerful tool layering object oriented system design 
forms inheritance graph rewriting system examples mentioned earlier list 
import export interface described graph transformations organized modules module import interface local operations export interface 
challenging implement imported graph rewrite rules known name 

design graph rewriting system accommodate evolving host graph structure 
producing software clients changing needs 
need plan evolution graph rewriting system 
adding new feature may require extensions host graph representation example new node labels edge labels may introduced 
happens expect old rewrite rules continue properly want clear old rules updated response expanded host graph representation 
aspects rewrite system bear problem graph schemes statically declare permissible host graph structure 
consider effect choosing induced versus non induced subgraph matching 
host induced subgraph gl host include local edges edges connect host nodes 
non induced subgraph may omit edges 
illustrated 
compared non induced subgraphs induced subgraphs meet stringent matching criteria provide information local host graph structure 
consequences result 
induced subgraphs increases number rewrite rules match rule author anticipated edges part host graph 
various edge configurations enumerated separate graph rewrite rules single non induced rewrite rule suffice 
non induced subgraphs require extra application conditions necessary ensure absence certain host graph edges 
implicit edge deletion major pitfall non induced subgraphs 
edges host graph mentioned deleted rule application 
points particularly significant case host graph evolution 
consider addition new type edge new edge label grow 
ideally old graph rewrite rules continue functioning merely need create new rules directly process grow edges 
induced subgraphs 
induced subgraphs presence grow edge prevents application old rules 
old rules replicated enumerate possible permutations grow edges occur host area 
non induced subgraphs old graph rewrite rules continue apply perform implicit grow edge deletion 
rewrite rules apply grow edge grow edge rule application longer rule application 
problems independent embedding mechanism arising similarly gluing embedding models removal host rewriting step 
improved semantics defined non induced subgraph matching avoiding node deletion possible 
host gr host contain corresponding nodes nodes identified removing host node replacing host node 
incomplete removal non induced subgraphs provided definition structured graph rewriting current progres language sch 
semantics evolved time earlier progres describes removal host graph complete subgraph corresponding non induced host 
graph rewriting papers give scant mention choice induced non induced subgraph matching 
issue important theoretically practically 
induced versus non induced subgraphs 
rewrite rule applied host graph 
induced host required isomorphism test fails rewrite rule applied 
non induced subgraph matching suitable host replaced resulting new host graph 
standard removal replacement host steps locate establish embedding area remove replace embed 
note implicit edge deletion edge labeled node labeled node removed host graph effect may may anticipated author rewrite rule 

hierarchical graphs rewritten 
hierarchical host graph structures arise naturally applications 
strict definition hierarchical graphs edges connect siblings connect parent child node 
practical problems modeled additional edges cross hierarchy example connect cousin nodes 
presence hierarchy crossing edges greatly complicates construction tools hierarchical graph rewriting 
various notations hierarchical graph structures described hare 
hierarchical structure assists display large graph 
zoom zoom operations reduce graph manageable proportions viewing delimit selected portions graph processing 
possible consider hierarchical graphs merely notational device pertaining graph display hierarchically structured graph easily translated flat graph addition special edges indicate parent child relationships hierarchy 
full implementation hierarchical graph rewriting give special considerations edges 
significant interest topic hierarchical graph rewriting 
relevant include chart parser hierarchical graphs graphs prototype algebraic rewrite environment graphs node labels graphs schn flat host graph structure hierarchy expressing rewriting rules zoom manage display derivation hierarchical graphs formal approach plan generation hierarchically distributed graph transformations 

lot code performs graph inspections 
translate graph rewrite rules 
current software freely mixes graph inspection operations graph manipulation operations 
graph inspection operations test local global host graph properties examples include searching short path nodes testing graph bipartite 
concerned feasibility translating pure graph rewriting language 
true inspection performed graph rewriting step find host find embedding edges test application condition 
host graph inspections accompany follow subgraph isomorphism testing making clumsy expensive express graph inspections undertaken subgraph isomorphism test 
direct methods expressing host graph inspections desirable 
designers progres recognize providing variety graph inspection language constructs 
statically graph properties defined graph scheme include class hierarchy node labels edge labels restrictions source target node labels edges particular edge label 
addition static construct variety dynamic graph inspection constructs provided 
general control structures direct application graph tests graph productions sc 
rule augmented path constructs permitting complex far reaching examination graph structure part localization host independent rewrite rule application path descriptions compute values derived attributes 
applicability rewrite rule subprogram rules tested executing 
global going graph inspection proposed global runtime conditions state conditions hold 
summary practically usable graph rewriting languages provide general facilities graph inspection 
different language constructs may suitable unordered grammar ordered graph rewriting environments 

user interface code 
want leave coded graph rewriting suitable formalism expressing part computation 
encourage widespread graph rewriting need convenient methods combine graph rewriting styles computation 
interesting research topic 
possible approaches include combining graph rewriting blackboard architecture host graph stored part blackboard combining graph rewriting methods performing major computations attributes attributes complex entities tables lists graphs graph rewriting top standard programming language done ordered graph rewriting systems progres sc 

information 
ll probably continue 
currently advise stake financial graph rewriting tool product development 
hope situation change years time give different advice 
achieve 
difficult outsider learn graph rewriting practical application 
experience mirrors set apply graph rewriting diagram recognition hard organize computation 
careful reading literature limited help extensive discussion mechanisms little discussion systems issues examples significantly large graph rewriting systems 
currently graph rewriting literature appears confusing outsider 
disseminate graph rewriting research experience currently available 
graph rewriting intuitive widely appealing concept outsiders continually reinventing 
attendees williamsburg invented graph rewriting course research discover existed research subject way workshop 
graph rewriting find 
happening research community decades long history 
profile raised 
important goal graph rewriting included standard undergraduate computing science curriculum 
lectures worth material included data structures algorithms course techniques graph inspection algorithms taught 
alternatively graph grammars introduced formal languages class 
develop better sense applications parts applications suitable implementation graph rewriting 
enthusiastic atmosphere williamsburg conference sorts computer science applications eagerly characterized graph grammars great way solve problem 
need develop guidelines identifying graph rewriting advisable need develop methods integrating graph rewriting systems styles computation 
continue develop refine environments graph rewriting 
progres environment environments follow sufficiently mature generally usable 
began software state reused 
create modest graph rewriting environment took time poor quality executing environment hampered debugging testing 
happy interest colleagues graph rewriting direct existing graph rewriting environments 
summary current situation 
enthusiastic graph rewriting style computation eager convince researchers graph rewriting 
succeed convincing try graph rewriting left awkward position flooded questions answer satisfactorily 
continue giving graph rewriting widespread deserves 
ande anderson dimensional mathematical notation syntactic pattern recognition applications fu editor springer pp 

arnold jantke therapy plans hierarchically structured graphs pp 
blostein fahmy practical graph rewriting technical report computing information science queen university jan 
bunke attributed programmed graph grammars application schematic diagram interpretation ieee pattern analysis machine intelligence vol 
nov pp 

bunke generative power sequential parallel programmed graph grammars computing vol 
pp 

bunke tran efficient implementation graph grammars rete matching algorithm pp 

bunke haller syntactic analysis context free plex languages pattern recognition structured document image analysis eds 
baird bunke yamamoto springer pp 

collin don tell mom doing document analysis believes computer vision field proc 
second intl 
conf 
document analysis recognition tsukuba japan oct pp 

formal manipulation forrester diagrams graph grammars ieee trans 
systems man cybernetics pp 
nov 
puerta musen automated interpretation diagrams specification medical protocols aaai symposium reasoning diagrammatic representations stanford university march 
ehrig kreowski applications graph grammar theory consistency synchronization scheduling data base systems information systems vol 
pp 

ehrig habel kreowski graph grammars applications semantic networks international journal computers mathematical applications vol 
pp 

ehrig engels pragmatic semantic aspects module concept graph transformation systems pp 

engels lewerentz schafer graph grammar engineering software specification method pp 

engels lewerentz nagl schafer sch rr building integrated software development environments part tool specification acm trans 
software engineering methodology vol 
apr pp 

fahmy blostein graph grammar programming style recognition music notation machine vision applications vol pp 

fahmy reasoning presence uncertainty graph rewriting ph thesis computing information science queen university march 
fu fu syntactic pattern recognition applications prentice hall 
tt attribute graph grammars graphics pp 

tt graph grammars diagram editing pp 

gn gunther graph grammars design cad systems pp 

tt diagram editors graphs attributes graph grammars international journal man machine studies vol oct pp 
hi modeling transactions object oriented databases level graph productions pp 
blostein mathematics recognition graph rewriting third international conference document analysis recognition montreal canada august pp 

hare harel visual formalisms communications acm vol pp 
may 
henderson samal shape grammar compilers pattern recognition vol pp 

himsolt graphed interactive tool developing graph grammars pp 

himsolt hierarchical graphs graph grammars pp 

intl 
workshop graph grammars application computer science biology lncs vol claus ehrig rozenberg eds springer 
second intl 
workshop graph grammars application computer science lncs vol 
ehrig nagl rozenberg eds springer 
third intl 
workshop graph grammars application computer science lncs vol 
ehrig nagl rozenberg rosenfeld eds springer 
fourth intl 
workshop graph grammars application computer science lncs vol 
ehrig kreowski rozenberg eds springer 
pre proceedings fifth intl 
workshop graph grammars application computer science williamsburg va nov 
full versions selected papers appear volume 
kaplan loyall specifying concurrent languages systems grammars pp 

parsing graphs linear time pp 

heuristic driven chart parsing pp 


kreowski rozenberg structured graph grammars ii information sciences vol 
pp 

lin fu syntactic approach dimensional object recognition ieee trans 
systems man cybernetics may pp 

beyer agg implementation algebraic graph rewriting fifth intl 
conf 
rewriting techniques applications montreal canada june lncs springer pp 

loyall kaplan visual concurrent programming delta grammars journal visual languages computing vol pp 

heuristic driven parser graph grammars feature recognition cim advances structural syntactic pattern recognition ed 
bunke world scientific pp 

nagl sch rr specification environment graph grammars pp 

panel panel discussion graph grammars applications pp 

pfeiffer graph grammars data structure manipulation proc 
ieee workshop visual languages pp 

rekers sch rr parsing context sensitive graph grammars pp 

rozenberg nlc way rewriting graphs pp 

sch sch rr progress language graph grammars pp 

schn schneider categorical graph grammars integrating structural transformations operations labels theoretical computer science vol 
pp 

gulla onion graphs aesthetics layout proc 
ieee symposium visual languages bergen norway aug pp 

strzalkowski reversible logic grammars natural language parsing generation canadian computational intelligence journal pp 

taentzer hierarchically distributed graph transformations pp 
kaplan semantic definition introspect grammars pp 
sc sch rr nondeterministic control structures graph rewriting systems proc th intl 
workshop graph theoretic concepts computer science wg lncs vol springer verlag 
nd graph pattern matching progres pp 

