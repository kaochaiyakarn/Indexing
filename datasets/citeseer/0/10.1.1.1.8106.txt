countering network worms automatic patch generation columbia university cs columbia edu angelos keromytis columbia university angelos cs columbia edu ability worms spread rates effectively preclude human directed reaction elevated class security threat distributed systems 
propose architecture automatically repairing software flaws exploited network worms 
approach relies source code transformations quickly apply automatically created tested localized patches vulnerable segments targeted application 
determine susceptible portions sandboxed instance application clean room laboratory runs parallel production system exploit fact worm reveal infection vector achieve goal infection 
believe approach point solution problem malicious self replicating code 
primary benefits approach low impact application performance ability respond attacks human intervention capacity deal zero day worms known patches exist 
furthermore approach depend centralized update repository target concerted attack similar blaster worm 
approach protect lower intensity attacks intrusion hack attempts 
experimentally evaluate efficacy approach prototype implementation test number applications known vulnerabilities 
preliminary results indicate success rate maximum repair time seconds 
incidents demonstrated ability self propagating code known network worms infect large numbers hosts exploiting vulnerabilities largely homogeneous deployed software base :10.1.1.2.3262
worm carries malicious payload direct cost recovering side effects infection epidemic tremendous 
countering worms focus increased research generally focusing content filtering mechanisms combined large scale coordination strategies :10.1.1.160.6250
despite promising early results believe approach insufficient 
base primarily observations 
achieve coverage mechanisms intended routers cisco routers limited budget terms processing cycles packet mildly polymorphic worms mirroring evolution polymorphic viruses decade ago evade filtering 
network intrusion detection systems nids encountered similar problems requiring fairly invasive packet processing queuing router firewall 
placed application critical path filtering mechanisms adverse impact performance 
second opportunistic encryption form tls ssl ipsec increasing number hosts applications 
believe matter time worms start encrypted channels cover tracks 
similar case distributed firewalls trends argue point worm countering mechanism 
opportunistic mean client side server side authentication strictly required case majority web servers smtp tls sendmail option 
approach worm problem elimination minimization remotely exploitable vulnerabilities buffer overflows 
detecting potential buffer overflows difficult problem partial solutions exist 
blanket solutions stackguard typically exhibit problems reduced system performance self induced denial service overflow detected alternative terminate application 
inappropriate high performance high availability environments heavily commerce web server 
ideal solution expensive protection mechanisms needed allow applications gracefully recover attacks 
propose point reaction mechanism tries automatically patch vulnerable software identifying transforming code surrounding exploited software flaw 
briefly instrumented versions enterprise important services web server sandboxed environment 
environment operated parallel production servers serve actual requests 
clean room environment test effects suspicious requests potential worm infection vectors 
request causes buffer overflow production server effect sandboxed version application 
appropriate instrumentation allows determine buffers functions involved buffer overflow attack 
apply source code transformation heuristics aim contain buffer overflow 
sandboxed environment test patches infection vectors site specific functionality test suite determine correctness 
successful update production servers new version targeted program 
careful produce localized patches confident introduce additional instabilities 
note patch generation testing occurs completely decentralized real time fashion need centralized update site may attack target happened blaster worm 
architecture components developed purposes 
novelty lies combination components fixing vulnerable applications unduly impacting performance availability 
major assumption extract worm infection vector generally instance polymorphic worms 
discuss section envision various mechanisms honeypots host network intrusion detection sensors 
note vector extraction necessary pre condition reactive filtering solution worm problem 
secondary assumption source code application available 
architecture binary rewriting techniques focus source code transformations :10.1.1.11.9248
note popular server applications fact open source apache sendmail mysql bind 
furthermore architecture verbatim react lower intensity hack attempts focus higher profile easier detect worm problem 
determine effectiveness approach tested set applications vulnerable buffer overflows compiled project 
simulated presence worm applications fact network services triggering buffer overflow worm exploit infect process 
experiments show architecture able fix problem cases 
experiment hypothetical vulnerability apache web server showed total time produce correct tested fix seconds 
means total cycle detection updating real server seconds 
believe sufficiently fast suppress worm attacks completely decentralized manner 
organization remainder organized follows 
system architecture section describe prototype implementation section 
evaluate performance effectiveness section 
section discusses potential improvements open issues section gives overview related 
system architecture architecture depicted types components set worm detection sensors correlation engine sandboxed environment running appropriately instrumented versions applications enterprise network apache web server sql database server analysis patch generation engine software update component 
describe components 
anomaly detection analysis forward features firewall sensor vulnerability testing identification notifications hypothesis testing analysis host sensor application web server application update instrumented application server passive sensor sandboxed environment possible fix generation patch generation enterprise network honeypot worm scans infection attempts internet remote sensor organization :10.1.1.2.3262:10.1.1.101.6117
worm vaccination architecture sensors deployed various locations network detect potential worm notify analysis engine forwards infection vector relevant information protected environment :10.1.1.2.3262
potential infection vector tested appropriately instrumented version targeted application identifying vulnerability 
software patches generated tested different heuristics 
susceptible infection impact functionality main application server updated :10.1.1.101.6117
worm detection correlation engine worm detection sensors responsible detecting potential worm probes importantly infection attempts 
types sensors may employed concurrently host sensors monitoring behavior deployed applications servers 
passive sensors corporate firewall independent boxes eavesdropping traffic servers 
honeypots simulate behavior target application capture communication 
types sensors including sensors run entities section 
combination sensors simultaneously believe honeypot servers promising worms distinguish real fake servers probes 
honeypots deception mechanisms effective hit list worm propagation strategies assuming place scanning phase :10.1.1.160.6250
sensors communicate central server correlates events independent sensors determines potential infection vectors data request seen honeypot 
general assume worm detected 
believe assumption pragmatic current solutions worm problem depend satisfactory answer problem worm detection 
purpose correlation engine determine likelihood particular communication infection vector manually launched attack request suspicious communication tested sandbox environment 
maintains list fixed exploits false positives communications determined innocuous ineffective targeted application 
sandboxed environment potential infection vector byte stream fed target application cause instance worm appear target system forwarded sandboxed environment runs instances applications interested protecting apache iis server 
instrumentation fairly invasive terms performance server clean room testing 
powerful form full blown machine emulator determine application subverted :10.1.1.22.4116
potential instrumentation includes light weight virtual machines dynamic analysis sandboxing tools mechanisms :10.1.1.132.2075:10.1.1.13.660
mechanisms generally application protection due considerable impact performance fact typically cause application fault continue operation 
approach drawback particular importance mechanisms sandboxed environment identify accurately possible source weakness application 
mechanisms production servers 
example identify specific buffer function exploited buffer overflow attack :10.1.1.160.6250
alternatively running simulator detect execution shifted stack heap unexpected location unused library function 
invasive instrumentation higher likelihood detecting subversion identifying source vulnerability 
analysis step identify known classes attack stack buffer overflow detect anomalous behavior new classes attack heap overflows appear exploits known attack types 
note limited known exploits attacks 
patch generation testing armed knowledge vulnerability automatically patch program 
generally program analysis impossible problem reducible halting problem 
fixes may mitigate effects attack moving offending buffer heap dynamically allocating buffer entering function freeing exit points 
furthermore increase size allocated buffer larger size infection vector protecting application crashing fixed size exploits 
version malloc allocates additional write protected pages bracket target buffer 
buffer overflow underflow cause process receive segmentation violation signal 
signal caught signal handler added source code 
signal handler longjmp code immediately routine caused buffer overflow 
approach blanket manner applied code buffer overflow occur performance implications significant 
worm infection vector hint locate potential vulnerability somewhat simplifying problem 
give details section 
minor code randomization techniques move vulnerability infection vector longer works 
add code recognizes attack specific conditions stack trace specific sequence stack records returns function detects conditions 
sense equivalent content filtering mildly polymorphic worms 
generally approach appears promising 
attempt slice functionality immediately returning unused code contains vulnerability 
especially large software systems contain numerous untested features regularly may solution impact 
determine piece functionality unused profiling real application vulnerability unused section application logically remove part functionality early function return 
focus approach promising 
plan investigate heuristics research 
patches introduce localized avoid introducing additional instability application 
difficult impossible argue correctness newly introduced code created human automated process confident patches exacerbate problem minimal scope fact emulate behavior introduced automatically compiler automated tool code authoring compilation phase 
means proof correctness believe argument respect safety approach 
architecture possible add new analysis techniques patch generation components easily 
generate patches employ txl language independent code transformation tool 
describe detail section appendix test patches potentially parallel satisfied application longer vulnerable specific exploit 
ensure patched version continue function site specific test suite determine functionality lost 
test suite generated administrator advance reflect typical workload application exercising critical aspects performing purchasing transactions 
naturally possibility heuristic case possible automatically fix application measures 
application update worm resistant version application instantiate server 
component architecture server monitor 
achieve virtual machine approach assume target application sandboxed see section implement monitor regular process residing outside sandbox :10.1.1.132.2075
monitor receives new version application terminates running instance attempting graceful termination replaces executable new version restarts server 
implementation prototype implementation comprised components txl sandboxed environment 
components interact identify software vulnerabilities apply potential patches provide secure environment respectively 
section implementation simulate attacks provide fixes sample service application list vulnerable open source products compiled code security analysis kit project 
introduce components discuss implementation 
order detect source buffer overflow underflow vulnerabilities employ openbsd version 
return names function offending buffer lead overflow condition 
information forwarded txl program attempts number heuristics discussed section 
gcc extension protecting applications stack smashing attacks 
applications written compiled enabled version gcc automatically protected 
protection realized buffer overflow detection variable reordering feature avoid corruption pointers 
basic idea buffer overflow detection comes stackguard system 
novel features reordering local variables place buffers pointers avoid corruption pointers corrupt arbitrary memory locations copying pointers function arguments area preceding local variable buffers prevent corruption pointers corrupt arbitrary memory locations omission instrumentation code functions decrease performance overhead :10.1.1.2.3262
buffer overflow attack attempted applications compiled extensions execution program interrupted offending function buffer reported 
protect service incurs modest performance overhead similar stackguard 
importantly application attack terminated 
palatable outright subversion sub optimal terms service availability 
better mechanisms include valgrind :10.1.1.22.4116
sufficient prototype implementation fully functional system systems catch illegal heap 
systems considerably slower capable slowing application order magnitude making unsuitable production systems 
fortunately impact performance relevant approach 
txl armed information produced code transformation component system txl invoked 
txl hybrid functional rule language suited performing source source transformation rapidly prototyping new languages language processors 
grammar responsible parsing source input specified notation similar extended backus bnf 
parsing strategies supported txl making comfortable ambiguous grammars allowing natural user oriented grammars circumventing need strict compiler style implementation grammars 
system txl transformations making changes ansi grammar 
particular move statically defined variables stack heap txl program shown appendix achieved examining declarations source transforming pointers size allocated malloc function call 
furthermore adjust grammar free variables function returns 
making changes standard ansi grammar allow entries malloc inserted declarations statements transformation step trivial 
number id example refer size name allocated buffer respectively constructed newd txl function 
shown example parameters identify buffer function transformed arguments passed txl 
heuristic shown appendix functionality 
txl simply comment code superfluous function embed return function 

protected malloc write protected memory pages surround buffer allocated 
move heap approach alternative malloc implementation developed specifically purpose 
allocates additional zero filled write protected memory pages surround requested allocated memory region shown 
buffer overflow underflow cause operating system issue segmentation violation signal sigsegv process 
mprotect mark surrounding pages read 
functionality similar offered memory debugging library 
txl program inserts setjmp call immediately function call caused buffer overflow shown appendix effect operation save stack pointers registers program counter program restore state 
inject signal handler catches sigsegv calls longjmp restoring stack pointers registers including program counter values prior call offending function fact restored values call setjmp 
program re evaluate injected conditional statement includes setjmp call 
time return value cause conditional evaluate false skipping execution offending function 
note targeted buffer contain exactly amount data infection vector offending function performed correct data truncation 
benefits approach 
objects heap protected overwritten attack specified variable signal violation data written allocated space 
second recover gracefully overflow attempt recover stack context environment prior offending function call effectively longjmp code immediately routine caused overflow underflow 
examination source code programs featured study illustrated majority calls caused overflow underflow strcpy memcpy check return values include calls routines 
important observation validates assumption heuristic circumvent malignant call longjmp 
sandboxed environment sandboxed environment vmware virtual machine run openbsd operating system 
vmware allows operating systems software applications isolated underlying operating system secure virtual machines exist single piece hardware 
created correct version application simply update image production environment outside virtual environment restart 
experimental evaluation order illustrate capabilities system effectiveness patch heuristics constructed simple file serving application buffer overflow vulnerability contained superfluous services test stack smashing attacks slice functionality respectively 
purposes application simple phase protocol service requested different functions application waits network input 
application written ansi buffer overflow attack constructed overwrites return address attempts get access root shell 
application compiled openbsd extensions gcc 
armed knowledge provided names function buffer potentially responsible buffer overflow txl implementation heuristics invoked 
specific set actions implemented far test heuristics recompile txl transformed code run simple functionality test application correctly serve file 
test simple script attempts access available service 
application initial proof concept system prove correctness approach 
substantial results acquired examination applications provided code security analysis kit project 
data order test heuristics examined number vulnerable open source software products 
data available code security analysis kit project software engineering research group drexel university 
darpa funded project developing toolkit software auditors assist development high assurance secure software systems 
compiled database oss products known vulnerabilities respective patches 
database comprised general vulnerabilities large number listed susceptible buffer overflow attacks 
move heap heuristic tested data set results illustrated appendix note applications fact network services probably susceptible worm 
serve representative sample buffer overflow vulnerabilities 
illustrated appendix tested move heap heuristic data set resulted fixing buffer overflow vulnerabilities success rate 
remaining products tested vulnerabilities unrelated non buffer overflow 
products amenable heuristic examined cases required provide appropriate fix adjustments txl heuristics cover special cases handling multi dimensional buffers pre initialized arrays 
majority vulnerabilities provided dataset caused calls strcpy routine 
examination respective security patches showed cases buffer overflow susceptibility repaired respective 
furthermore routines check return values include routines routines providing fertile ground heuristic 
performance order evaluate performance system tested patch generation engine instrumented version apache 
apache chosen due popularity source code availability 
basic apache functionality tested omitting additional modules 
purpose evaluation validate hypothesis heuristics applied tested time efficient manner 
tests conducted pc amd athlon processor operating mhz mb ram 
underlying operating system openbsd 
assumption system instrumented application compiled sandboxed environment patch heuristic require complete re compilation application 
order get realistic insight time required applying patch able test application applied move heap txl transformation number different files ranging large small sizes recompiled latest version apache 
ranged average compilation relinking seconds 
important issue terms performance txl transformation time basic heuristics 
able pass specific function name buffer txl transformation time greatly reduced rule set concentrated targeted section source code 
average transformation time different functions examined seconds 
result encouraging allows assumption majority heuristics applied tested seconds 
discussion challenges challenges associated approach 
determination nature attack buffer overflow identification software flaws permit exploit 
obviously approach fix known attacks stack heap buffer overflows 
knowledge manifests debugging instrumentation sandboxed version application 
currently identify functions buffers lead overflow condition 
powerful analysis tools easily employed architecture catch sophisticated code injection attacks intend investigate :10.1.1.22.4116:10.1.1.13.660
advantage approach performance implications mechanisms relevant order magnitude slow instrumented application acceptable impact common case usage 
furthermore architecture general classes attack detected email worms investigated 

reliable repairing software 
impossible guarantee general problem reduced halting problem 
heuristics allow generate potential fixes classes buffer overflows code code transformations test clean room environment 
research necessary direction automated software recovery order develop better repair mechanisms 
interesting possibility aspect oriented programming create locations hooks source code allow insertion appropriate fixes 
plan investigate research 
interestingly architecture automatically fix type software fault invalid memory dereferences plugging appropriate repair module 
impossible automatically obtain software fix content filtering temporarily protect service 
possibility combining techniques topic research 

source code availability 
system assumes source code instrumented application available patches easily generated tested 
case binary rewriting techniques may applicable considerably higher complexity :10.1.1.11.9248
instrumentation application correspondingly difficult schemes 
intriguing possibility vendors ship versions applications regular instrumented provide standardized set hooks allow general monitoring module exercise oversight 

respect multi partite worms worms multiple independent infection vectors propagation mechanisms spreading email architecture treats infections independent worms 
centralized vs distributed reaction authors envision cyber center disease control identifying outbreaks rapidly analyzing pathogens fighting infection proactively devising methods detecting resisting attacks :10.1.1.160.6250:10.1.1.160.6250
wide acceptance entity trusted arbitrarily patch software running user system 
furthermore fixes need handcrafted humans arrive late help worm containment 
scheme play role real time alert coordination distribution system 
individual enterprises able independently confirm validity reported weakness create fixes decentralized manner minimizing trust place 
exploitable vulnerability discovered architecture distribute fake worms 
channel treated sensor supporting analysis engine 
propagation fake worms trigger creation quick fix warning deemed authentic application crashes result running attack sandbox 
serve mechanism distributing quick patches independent parties distributing exploit allowing organizations create patches 
note speculate deployment system medium large size enterprise network preclude pooling resources multiple mutually trusted organizations 
particular managed security provide quick fix service clients sensors client location generating patches centralized facility 
fixes pushed clients 
similar approach taken managed security vendors keep number programmers available hour basis 
cases administrators aware services offered officially hosts networks 
attacks system naturally system create new opportunities attackers subvert applications hosts 
concern possibility gaming attackers causing instability unnecessary software updates 
interesting attack cause oscillation versions software alternatively vulnerable different attacks 
may theoretically possible think suitable example 
attack capabilities limited fact system test patching results current previous pending officially fixed administrator applied patch attacks 
furthermore assume various system components appropriately protected subversion clean room environment communication various components integrity protected tls ssl ipsec 
sensor subverted generate false alarms event correlation reveal anomalous behavior 
case sensor best mount denial service attack patching mechanism causing hypotheses tested 
anomalous behavior easy detect take consideration impacting protected services patching mechanism 
way attack architecture involves denying communication correlation engine sensors sandbox denial service attack 
attack may fact product worm aggressive propagation case sql worm :10.1.1.11.9248
fortunately possible ingress filter ports communications making difficult mount attack external network 
fully automated task risks relying automated patching testing real time verification techniques fully understood 
extent system correctly determines buffer overflow attack possible system operation safe correct patch application created application shut replaced non working version 
considering alternative guaranteed loss service subversion application believe risk acceptable 
question centers correctness analysis engine 
fundamentally appears impossible problem architecture enables add appropriate checks needed guarantee absolute safety 
related computer viruses new phenomenon studied extensively decades 
cohen define describe computer viruses form 
gave theoretical basis spread computer viruses 
authors describe risk internet due ability attackers quickly gain control vast numbers hosts :10.1.1.160.6250
argue controlling hosts catastrophic results potential launch distributed denial service ddos attacks potential access sensitive information hosts 
analysis shows quickly attackers compromise hosts dumb worms better worms spread faster 
strong analogy biological computer viruses led kephart investigate propagation computer viruses epidemiological models 
extend standard epidemiological model placing directed graph combination analysis simulation study behavior 
conclude rate defense mechanisms detect remove viruses sufficiently high relative rate viruses spread adequate preventing widespread propagation viruses 
internet wide worm considerable effort gone preventing worms exploiting common software vulnerabilities compiler inject run time safety checks applications safe languages apis static dynamic analysis tools :10.1.1.29.1037:10.1.1.127.7825:10.1.1.11.9248
shortcomings may attributed tools approaches individually fact seen wide 
speculate important reasons complexity performance implications perception importantly requirement part application developers pressure meet deadlines incentive new software verification tools 
approach containment infected applications exemplified sandboxing paradigm :10.1.1.13.2425:10.1.1.13.660
unfortunately systems successful containing virus succeed preventing propagation ensuring continued service availability :10.1.1.12.198
furthermore significant performance overhead associated users advantage 
code red worm analyzed extensively :10.1.1.2.3262
authors conclude epidemic models study behavior internet worms accurate capture specific properties environment operate effect human countermeasures worm spreading cleaning patching filtering disconnecting slowing worm infection rate due worm impact internet traffic infrastructure 
derive new general internet worm model called factor worm model validate simulations match observed code red data available 
analysis supported data code red propagation distinguished different worms simultaneously active 
similar analysis sql slammer sapphire worm :10.1.1.11.9248
code red inspired countermeasure technologies la attempts slow growth tcp worms accepting connections blocking indefinitely causing corresponding worm thread block 
unfortunately worms avoid mechanisms probing infecting asynchronously 
connection throttling approach host restricts rate connections may initiated :10.1.1.1.5558
adopted universally approach reduce spreading rate worm order magnitude affecting legitimate communications 
describes design space worm containment systems parameters reaction time containment strategy deployment scenario 
authors combination analytic modeling simulation describe design factors impacts dynamics worm epidemic 
analysis suggests significant gaps containment defense mechanisms employed considerable research better coordination isps entities needed 
analysis focuses exclusively containment mechanisms network filtering consider viable defense mechanism 
approach detecting new email viruses described keeps track email attachments sent users set collaborating email servers forward subset data central data warehouse correlation server 
attachments high frequency appearance deemed suspicious furthermore email exchange patterns users create models normal behavior 
deviation behavior user sending particular attachment large number users site sent email raises alarm 
naturally administrator examine available data determine attachment really constitutes virus simply popular message 
information dangerous attachments sent email servers filter 
interesting result system need deployed small number email servers examine minuscule amount email traffic relative email exchanged internet claim determine virus outbreaks able build user behavior models 
proposes predator viruses effectively viruses spread way malicious viruses try eliminate designated victim viruses :10.1.1.160.6250
authors model interaction predators viruses equations mathematical biology show predators perform tasks flooding network consuming available resources 
practice viruses patch vulnerabilities exploited worms fact code red released soon code red released internet 
designers predators find exploits safeguard exploits attractive proposition 
encouraging result number initial predators needed contain highly aggressive virus small 
architecture uses various sensors detect new types attacks secure servers access limited small numbers users time 
deviation expected known behavior results possibly subverted server taken line 
similar approach sandboxed instance server conduct clean room analysis comparing outputs different implementations service prototype microsoft iis apache web servers provide application diversity 
machine learning techniques generalize attack features observed instances attack 
content filtering firewall host block inputs may resulted attacks infected servers restarted 
due feature generalization approach trivial variants attack caught filter 
takes roughly similar approach filtering done port numbers affect service availability 
cisco network application recognition allows routers block tcp sessions presence specific strings tcp stream 
feature block code red probes affecting regular web server access 
cooperative response algorithm edge routers share attack reports small set edge routers 
edge routers update alert level shared attack reports decide enable traffic filtering blocking particular attack 
takes cooperative approach problem worm detection 
uses peer peer approach exchanging infection information trusted nodes 
define trusted nodes discover public key binding ip address 
address problem subverted nodes spread false information 
takes unique approach intrusion detection cover worm propagation 
specify algorithm determining sampling rates min cut network graph maximize detection malicious packets minimizing expended resources 
approach may impractical organization networks closely resemble trees graphs defined traffic ingress points 
presents encouraging results slowing spread viruses 
authors simulated propagation virus infections certain types networks coupled partial immunization 
findings show low levels immunization infection slows significantly 
experiments looked single virus 
investigates detection potentially multiple viruses priori knowledge viruses may attack 
distributed set nodes search viruses data flowing network arriving nodes 
aim maximize probability individual virus eventually encounters level immunization growth 
realm traditional computer viruses existing anti virus techniques simple signature scanning approach locate threats 
new viruses created virus signatures 
smarter virus writers creative techniques polymorphic viruses avoid detection 
response detection mechanisms elaborate partial simulation program execution 
led evolution arms race virus writers anti virus developers 
lin ricciardi marzullo study computer worms affect availability services 
study fault tolerance multicast protocols self propagating virus attacks 
argued increased encryption worm inadequacy existing preventive mechanisms ensure service availability presence software flaws necessitate development point worm reaction approach employs invasive targeted mechanisms fix vulnerabilities 
architecture countering worms automatic software patch generation 
architecture uses set sensors detect potential infection vectors uses clean room sandboxed environment running appropriately instrumented instances applications enterprise network test potential fixes 
generate fixes code transformation tools counter specific buffer overflow instances 
manage create version application resistant worm meets certain minimal functionality criteria embodied functionality test suite created advance system administrator update production servers 
benefits system quick reaction attacks automated creation fixes sort dependence central authority hypothetical cyber cdc :10.1.1.160.6250:10.1.1.160.6250
comprehensive security measures administered time 
furthermore architecture easily extensible accommodate detection reactive measures new types attacks known 
experimental analysis number known vulnerable applications hypothetical targets worm infection shows architecture fix attacks maximum time repair complicated application seconds 
believe preliminary results validate approach spur research 
economic impact malicious code attacks 
www com cei press pr html 
oc analysis trace data stratified applications 
www caida org analysis workload oc port analysis app xml 
code security analysis kit 
cs drexel edu index shtml 
network application recognition access control lists blocking code red worm network ingress points 
technical report cisco systems web server survey 
www com survey data 
cert advisory ca code red worm exploiting buffer overflow iis indexing service dll 
www 
cert org advisories ca html july 
cert advisory ca ms sql server worm 
www cert org advisories ca html january 
cert advisory ca exploitation vulnerabilities microsoft rpc interface 
www cert org advisories ca html july 
cert advisory ca blaster worm 
www cert org advisories ca html august 
spread sapphire slammer worm :10.1.1.11.9248
www com research worms slammer 
php february 
aleph 
smashing stack fun profit 
phrack 
engler 
detecting lots security holes system specific static analysis 
proceedings ieee symposium security privacy may 
singh tsai :10.1.1.160.6250
transparent run time defense stack smashing attacks 
proceedings usenix annual technical conference june 
bellovin 
distributed firewalls 
login magazine special issue security november 
sekar 
address obfuscation efficient approach combat broad range memory error exploits 
proceedings th usenix security symposium pages august 
bhattacharyya schultz eskin stolfo 
met experimental system malicious email tracking 
proceedings new security paradigms workshop pages september 
brunner 
rider 
del rey books canada 
kil 
bypassing stackguard 
phrack may 
chen wagner 
mops infrastructure examining security properties software 
proceedings acm computer communications security ccs conference pages november 
chess 
improving computer security extended static checking 
proceedings ieee symposium security privacy may 
jha 
static analysis executables detect malicious patterns 
proceedings th usenix security symposium pages august 
cohen 
computer viruses theory practice 
computers security february 
cowan barringer beattie hartman 
automatic protection printf format string vulnerabilities 
proceedings th usenix security symposium aug 
cowan beattie johansen wagle 
protecting pointers buffer overflow vulnerabilities 
proceedings th usenix security symposium pages august 
cowan beattie pu wagle gligor 
subdomain parsimonious security server appliances 
proceedings th usenix system administration conference lisa march 
cowan pu maier hinton walpole beattie wagle zhang 
stackguard automatic adaptive detection prevention buffer overflow attacks 
proceedings th usenix security symposium january 
allen 
tls protocol version 
rfc ietf jan 
dunlap king chen 
revirt enabling intrusion analysis virtual machine logging replay 
proceedings th symposium operating systems design implementation osdi december 

gcc extension protecting applications stack smashing attacks 
www trl ibm com projects security ssp june 
forrest somayaji ackley 
building diverse computer systems 
proceedings th hotos workshop 

stackghost hardware facilitated stack protection 
proceedings th usenix security symposium pages august 
garfinkel 
traps pitfalls practical problems system call interposition security tools 
proceedings symposium network distributed systems security pages february 
garfinkel rosenblum 
virtual machine introspection architecture intrusion detection 
proceedings symposium network distributed systems security pages february 
goldberg wagner thomas brewer 
secure environment untrusted helper applications 
procedings usenix annual technical conference 
ioannidis keromytis bellovin smith 
implementing distributed firewall 
proceedings acm computer communications security ccs conference pages november 
waldvogel zhang 
peer topeer approach network intrusion detection prevention 
proceedings ieee international workshops enabling technologies infrastructure collaborative enterprises workshop enterprise security june 
jim morrisett grossman hicks cheney wang 
cyclone safe dialect proceedings usenix annual technical conference pages june 
jones kelly 
backwards compatible bounds checking arrays pointers programs 
third international workshop automated debugging 
just clough levitt reynolds rowe 
learning unknown attacks start 
proceedings th international symposium advances intrusion detection raid october 
kent atkinson 
security architecture internet protocol 
rfc ietf nov 
kephart 
biologically inspired immune system computers 
artificial life iv proceedings fourth international workshop synthesis simulation living systems pages 
mit press 
amarasinghe 
secure execution program shepherding 
proceedings th usenix security symposium pages august 
lakshman 
detecting network intrusions sampling game theoretic approach 
proceedings nd annual joint conference ieee computer communication societies infocom april 
evans 
statically detecting buffer overflow vulnerabilities 
proceedings th usenix security symposium pages august 
larson austin 
high coverage detection input related security faults 
proceedings th usenix security symposium pages august 
chapin 
type assisted dynamic buffer overflow detection 
proceedings th usenix security symposium pages august 

lin ricciardi marzullo 
new model availability face self propagating attacks 
proceedings new security paradigms workshop november 

welcome tactical strategic labrea 
technical report 
conover security team 
heap overflows 
www org files articles txt january 

denotational semantics functional tree manipulation language 
computer languages 
miller de 
consistent safe string copy 
proceedings usenix annual technical conference freenix track june 
moore claffy 
code red case study spread victims internet worm 
proceedings nd internet measurement workshop pages november 
moore shannon voelker savage 
internet quarantine requirements containing self propagating code 
proceedings ieee infocom conference april 

computer virus coevolution 
communications acm 
rowe levitt 
cooperative response strategies large scale attack mitigation 
proceedings rd darpa information survivability conference exposition discex pages april 
peterson bishop pandey 
flexible containment mechanism executing untrusted code 
proceedings th usenix security symposium pages august 
prasad chiueh :10.1.1.11.9248
binary rewriting defense stack buffer overflow attacks 
proceedings usenix annual technical conference pages june 
:10.1.1.11.9248
sandboxing applications 
proceedings usenix technical annual conference freenix track pages june 

improving host security system call policies 
proceedings th usenix security symposium pages august 
honeyman 
preventing privilege escalation 
proceedings th usenix security symposium pages august 
reynolds just lawson clough 
line intrusion protection detecting attacks diversity 
th annual ifip working conference data application security conference april july 
reynolds just clough 
line intrusion detection attack prevention diversity generate test generalization 
proceedings th annual hawaii international conference system sciences hicss january 
reynolds just lawson clough 
design implementation intrusion tolerant system 
proceedings international conference dependable systems networks dsn june 
rosenblum bugnion devine herrod :10.1.1.22.4116
simos machine simulator study complex computer systems 
modeling computer simulation 
seward nethercote :10.1.1.22.4116
valgrind open source memory debugger linux 
kde org 

worm programs early experiments distributed computation 
communications acm march 
song malan stone 
snapshot global internet worm activity 
technical report arbor networks november 
spafford 
internet worm program analysis 
technical report csd tr purdue university 
staniford paxson weaver :10.1.1.160.6250
internet spare time 
proceedings th usenix security symposium pages august 
toth 
connection history anomaly detection 
proceedings ieee workshop information assurance security june 
kara :10.1.1.160.6250
predators mobile codes combat computer viruses 
proceedings new security paradigms workshop pages september 
williamson 
implementing testing virus throttle 
proceedings th usenix security symposium pages august 

stack shield 
www com sk 

lim 
virtualizing devices vmware workstation hosted virtual machine monitor 
wang knight elder 
computer viral infection effect immunization 
proceedings th annual computer security applications conference acsac pages 
whitaker shaw gribble 
scale performance denali isolation kernel 
proceedings fifth symposium operating systems design implementation osdi december 
kamkar 
comparison publicly available tools dynamic intrusion prevention 
proceedings symposium network distributed systems security pages february 
williamson 
throttling viruses restricting propagation defeat malicious mobile code 
technical report hpl hp laboratories bristol 
zou gong towsley :10.1.1.2.3262
code red worm propagation modeling analysis 
proceedings th acm conference computer communications security ccs pages november 
appendix txl code rule replace function definition decl specifiers opt decl specifiers declarator declarator optional decl opt nl declarations declarations statements import repeat buffer export buf buffer declarator repeat ptr operator id repeat declarator extension construct newd declarations test import number number import id id decl specifiers declarator optional decl newd id number id rule 
appendix data system name system call functions functions works 
return value 
bash strcpy strcpy elm strcpy pointers lynx sprintf strcpy ftp pointers ping memcpy sprintf strcpy screen format string read sprintf wu ftpd strcat wu ftpd sprintf strcpy column functions functions indicates vulnerable system call application invoked function part parameters call 
column return value indicates vulnerable system call return value checked returning call 
significance columns pertinent application heuristic 
appendix recovery code include setjmp added include signal added jmp buf worm env added invoking function signal sigsegv worm handler added setjmp worm env added offending function added int worm handler added added longjmp worm env added added 
