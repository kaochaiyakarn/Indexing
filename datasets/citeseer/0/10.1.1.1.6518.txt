optimal restart times moments completion time aad van wolter com go berlin germany conferences com humboldt universit zu berlin institut informatik unter den linden berlin germany wolter informatik hu berlin de 
restart application level technique speeds completion jobs highly variable completion times 
efficient iterative algorithm determine optimal restart strategy finite number restarts interested minimising higher moments completion time 
demonstrate computational efficiency comparison alternative algorithms 
discuss fast approximations determine close optimal restart times limiting cases 
applies various forms restart simply implies task retried time threshold passed 
restart finds application areas ranging randomised algorithms distributed data base queries internet agents software rejuvenation :10.1.1.4.5961
probably commonly experienced restart mechanism clicking reload button web browser download takes long 
basic form restart conveniently modelled assuming successive downloads statistically independent identically distributed new tries abort previous tries 
model assumptions realistic internet applications 
assumptions provide efficient algorithm determine optimal time instances initiate restarts higher moments completion time minimised 
showed optimal restart strategy unbounded number restarts determined straightforward manner finite number restarts moment 
combination higher moments finite number restarts considerably challenging requires iterative approach deal multiple dimensions optimisation problem 
proposed algorithm leverages various expressions moments completion time simplify minimisation problem 
fig 

labelling restarts total restarts 
simplifications algorithm outperforms naive approaches order magnitude show 
provides insights characteristics optimal restart strategy approximations limiting conditions 
approximations enable quick estimates optimal restart times show contrary situation moment typically optimal apply restarts constant intervals minimising higher moments 
model random variable represent completion time job restarts probability density function distribution 
total number restarts overhead associated restarting time units restart 
random variable tk represents completion time restarts restart intervals length 
shown 
denote th restart time total restarts 
th interval starts time sk 
get sk kc 
setting notational purposes obtain density function fk survival function fk fk piece wise restart interval fk fk time sk sk sk 
sk sk 
sk sk sk 
sk sk 
worth visualising density tk see lognormal distributed restarts restart intervals 
th moment metric interest definition fk dt sk sk fk dt 
fig 

probability density completion time restarts lognormal distributed completion time 
optimisation find restart times 
minimise minimise directly 
results dimensional minimisation problem solved shelf optimisation software 
computationally expensive new guess implies recomputing integral term intervals sl sl determine guess improves 
alternative exploit expression derived 
recursively relates moments restarts restarts adding restart existing mk mk denotes partial moment defined 
mk dt 
minimising minimise 
case new guess implies computing way recursively computing values determine guess improves 
introduces computational overhead 
see minimising fact slightly expensive minimising discussed example 
direct minimisation extend higher moments idea worked moment 
utilising recursion derived algorithm sequentially determines restart time minimises tk mk tk correctness relies fact optimal restart time equals moment insensitive shifts 
named algorithm backward algorithm traverses backward time 
single pass optimisations guaranteed provide optimal restart times 
backward algorithm efficient minimising 
shows improvement factor 
problem applying idea higher moments restart time minimises general equal counterpart minimises 
higher moments insensitive shifts 
resolve issue need theorem 
theorem 

restart times 
minimise restart times 
minimises tk sk 
proof 
definition sk fk dt sk fk dt 
left integral term depend 
optimal restart times minimise minimise sk dt 
follows set 
exists corresponding set 
implies fk sk sk fk dt sk fk dt fk 
sk fk sk dt tk sk 
product expression independent 
minimising sk dt corresponds minimising tk sk 
combining arguments see 
minimises corresponding restart times 
minimise tk sk 
theorem implies 
determining optimal restart time equivalent finding restart time min tk sk obeys mk 
section shows example saves percent computer time optimise restart times way 
benefit guess optimisation algorithm requires recompute integral terms values terms values 
say isolated optimisation th restart time interference restart intervals 
algorithm resulting optimisation algorithm algorithm 
contrary backward algorithm moment terminate steps requires iterate restart times converge 
apply generic approaches decide restart time optimise iteration method steepest descent 
propose particular ways try leverage structure problem minimise computation backward forward alternating 
algorithm backward forward alternating optimisation choose constants compute determine minimises initialise converged backward alternating set minimises compute forward alternating set minimises return 
note minimisation step carried general purpose optimisation algorithm 
note minimised expression derived 
reason initialise algorithm apparent discussing bulk approximation section 
restart time st moment nd moment rd moment restart index fig 

optimal restart times respect moments respectively 
characteristics optimal restart times applied algorithm lognormal distribution parameters 
determine restart times minimise second third moment completion time 
restart times interpolating curve shown 
shows starting solution set initialisation step algorithm 
indicates minimising moment optimal restart time monotonically converges gets smaller single optimum long large 
higher moments things straightforward witnessed 
convergence get established albeit intricate patterns moment 
show study limiting cases right boundary middle bulk left boundary 
illustrates main results 
space limitations allow go detail introduce limiting cases briefly 
right boundary approximation 
non diminishing optimal restart times follows sk 
consequence optimisation 
moment dominated term current particular significance chosen parameter values 
happen parameters lognormal fit experimental data get completion times 
restart time right approximation bulk approximation left approximation restart index fig 

dots give restart times minimise second moment dashed lines approximations labelled 
best restart time right boundary tends optimal restart time moment 
optimum determined finding restart time minimises 
shows right approximation turns reasonable exceptionally close actual optimal restart dot 
bulk approximation 
bulk middle pack get limiting result far away write 
case follows way right boundary minimum dominated moment converges discussed shown 
higher moments restart times tend bulk 
explains chose initial solution algorithm close optimal bulk restarts 
close optimal restart times close approximation left boundary 
left boundary approximation 
left boundary get limiting result restart intervals close time 
get approximation 
obtained applying algorithm distribution completion time restarts time units building forth limiting result bulk expressions derived 
approximation remarkably close seen 
fact experiments indicate left boundary approximation close irrespective value expected optimal cpu time eq 
eq 
backward algorithm nd st nd nd st st restarts fig 

cpu time different algorithms applied minimise second moment 
restart times turn quicker increases move away left boundary approximation restarts 
see approximations pretty restart time independent moment interested 
seen moment unbounded number restarts takes place restart strategy single restart time optimal precise conditions true need investigated 
convergence behaviour higher moments indicates allow unbounded number restarts restart strategy single value restart times optimal 
left boundary behaviour disrupts 
computational effort plot time different methods algorithm backward minimising expression minimising expression 
cases applied default minimisation algorithms mathematica carry optimisation steps 
algorithm outperforms approaches 
moment speed order magnitude finds explanation assured convergence steps backward algorithm 
higher moments speed factor 
apparently arguments put forward section hold correct 
note tuned mathematica program best abilities results cpu time backward algorithm alternating algorithm forward algorithm restarts fig 

cpu time versions algorithm 
recursion repetitive computation bottlenecks 
set convergence criteria similarly determined convergence 
access internals mathematica optimisation algorithm reasonably confident comparison approaches fair 
compares versions algorithm backward forward alternating 
exhibit similar performance 
example forward algorithm turns require pass restart times algorithms takes cpu time 
typically require passes restart times irrespective value studying complexity mathematica implementation turns running optimisation routine computationally expensive part step optimisation takes order magnitude time computation updates 
algorithm uses backward forward traversal restart times reasons computational efficiency 
algorithm may improved choosing order optimise restart times criteria steepest descent may decrease amount calls optimisation routine 
requires experimentation 
note workings mathematica optimisation algorithm comparison convergence stopping criterion convergence restart times stricter criterion 
explains higher cpu usage backward algorithm compared 
presents algorithm find restart times minimise higher moments completion time 
problem particularly complicated contrary minimisation moment solved higher moments insensitive shifts 
consequence resorted iterative algorithm 
compared algorithm naive shelf approaches concluded algorithm order faster obtains higher accuracy 
studied optimal restart times number restarts tends infinity derived fast approximations optimal restart times finite case 

garg modeling software systems rejuvenation restoration checkpointing fluid stochastic petri nets proceedings zaragoza spain pp 
ieee cs press sept 

luby sinclair zuckerman optimal speedup las vegas algorithms israel symposium theory computing systems pp 


maurer huberman restart strategies internet congestion journal economic dynamics control vol 
pp 


van wolter analysis algorithms restart accepted publication international conference quantitative evaluation systems twente netherlands sept 

van wolter measurement study interplay application level restart transport protocol service availability forum munich may 

ruan horvitz kautz restart policies dependence runs dynamic programming approach proceedings eighth international conference principles practice constraint programming ithaca ny sept 
