requirements engineering meets trust management model methodology reasoning paolo giorgini fabio massacci john mylopoulos nicola zannone department information communication technology university trento italy massacci giorgini zannone dit unitn department computer science university toronto canada jm cs toronto edu 
years seen number proposals incorporate security engineering mainstream software requirements engineering 
capturing trust security requirements organizational level opposed design level open problem 
presents formal framework modeling analyzing security trust requirements 
extends tropos methodology agent oriented software engineering methodology 
key intuition modeling security trust need distinguish actors manipulate resources accomplish goals execute tasks actors resources goals 
analyze organization information systems proceed steps 
built trust model determining trust relationships actors give functional model analyze actual delegations trust model checking actor offers service authorized 
formal framework allows automatic verification security trust requirements suitable delegation logic mechanized datalog 
discussion concrete illustrate proposal health care case study 
keywords requirements engineering security trust agent oriented technologies security engineering trust models modeling business organizations trust management main challenges development distributed open information systems 
surprisingly security engineering partially funded ist programme eu commission fet ist wasp project programme astro project 
anonymous reviewers useful comments 
received substantial attention years 
looking traditional approaches software requirements engineering find security treated non functional requirement introduces quality constraints system operate 
software designers recognized need integrate non functional requirements reliability performance software development processes security remains afterthought 
worse trust left entirely outside picture 
means security mechanisms fitted preexisting design may able accommodate due potential conflicts functional requirements usability 
implementation software system may assume trust relationships users users system simply 
alternatively implementation may introduce protection mechanisms just hinder operation trusted domain perceived trusted domain software engineer 
nutshell current methodologies development resolve trust related concerns early 
spurred number researchers model security trust requirements standard software engineering methodologies 
proposes extension unified modelling language uml modeling security related features confidentiality access control 
modeling language uml called secureuml 
approach focused modeling access control policies policies integrated model driven software development process 
mcdermott fox adapt cases analyze security requirements introducing abuse case model specification complete interaction system actors result interaction harmful system actors stakeholders system 
model security defining concept misuse case inverse case describes function system allow 
major limitations proposals treat security trust system oriented terms support modeling analysis trust trust relationships organizational level 
words targeted model computer system policies access control mechanisms supports 
contrast understand problem trust management security engineering need model organization relationships involved actors system just possible actor 
instance introduce cryptographic functions represent particular implementation trust protection mechanism digital level 
analysis operational health care systems suggests better worse medical data available form 
setting cryptographic mechanisms largely irrelevant physical locks useful avoiding untrusted access sensitive medical data focus digital solution having little room specify physical protection requirements organizational opposed level 
need focus requirement engineering methodologies allow modeling organizations actors enhance notions trust trust relationships 
extent tropos agent software engineering methodology particularly suited 
example liu shown tropos model privacy security concerns organization 
authors shown tropos lacks ability capture time functional security features organization 
structured process integrate security system engineering proposed 
formal framework modeling analyzing security requirements tropos missing 
introduce process integrates trust security system engineering concepts notations traditional requirements specification 
building propose solution augmenting tropos framework take trust account 
key intuition distinguish explicit notion offering service owning service notions functional dependency trust dependency 
functional dependency lead delegation tasks trust dependency lead delegation permissions 
provide brief description tropos methodology introduce simple health care information system case study 
describe basic concepts diagrams modeling trust followed formalization implementation experimental results 
conclude directions 
case study section presents simple health care illustrate approach 
security trust key issues health care information systems privacy integrity availability health information major security concerns 
tropos methodology strives model organizational environment system system 
uses concepts actor goal example file patient waiting kidney transplant high profile center contains documents copies reports surgeons clinicians referring hospitals patient 
documents far sensitive patient date place birth waiting list registration number medical information system 
example derived eu privacy legislation citizen personal data processed information system offer data access service owned citizen consent necessary service delivered rd parties 
task resource social dependency defining obligations actors actors 
actors strategic goals system organization represent social agents organizational human software roles goal represents strategic interest actor 
task represents way doing particular task executed satisfy goal 
resource represents physical informational entity 
rest say service goal task resource 
dependency actors indicates actor depends accomplish goal execute task deliver resource 
start health care example considering actors patient depends hospital receiving appropriate health care hospital provides medical treatment depends patients having personal information 
clinician physician hospital provides medical health advice needed provide accurate medical treatment health care authority hca control guarantee fair resources allocation quality delivered services 
shows dependency model actors 
actors represented circles goals tasks resources respectively represented ovals hexagons rectangles dependencies form depender dependee 
patient depends hospital receiving medical treatments turn hospital depends clinician providing treatments 
clinician depends patients personal information hospital specific professional patient personal information 
hospital depends clinicians providing professional hca checking equity resource distribution 
hca depends patient personal information 
introduce medical information system actor current privacy legislation share patient medical data consent obtained patient question 
medical information system manages patients information including information medical treatments received 
shows final dependency model 
security aware tropos tropos models far say security requirements 
loosely speaking dependee server depender client 
implicit trust delegation relationship 
extended modeling framework identify relationships trust agents service trust certain goal delegation agents service explicitly delegates goal permission execute task access resource offer agent service offer agents possibility fulfilling goal executing task delivering resource health care authority personal information patient medical treatment check equity resource distribution personal information personal information medical treatment hospital request provide consultancy consultancy clinician personal information fig 

health care system dependency model medical information system actor ownership agent service agent owner goal task resource 
note difference owning service offering service 
example patient owner personal data 
data may stored medical information system offers access data 
distinction explains clearly managers need consent patient data processing 
note difference trust delegation 
delegation marks formal passage requirements modeling tm certificate eventually issued delegatee implementing system 
certificate needs digital marks presence transaction 
contrast trust marks simply social relationship formalized contract digital credential 
cases impractical costly happy social protection cases security essential 
decision taken designer formal model just offers support spot inconsistencies 
basic effect delegation augmenting number permission holders 
intuitively split trust delegation aspects dependency relation 
assume delegation implies trust 
extension modeling framework refine methodology 
design trust model actors systems 
identify owns goals tasks resources able fulfill goals execute tasks deliver resources 
define functional dependencies delegations goals agents building functional model 
basic idea owner object full authority concerning access disposition object delegate actors 
health care authority personal information patient medical treatment check equity resource distribution personal information personal information medical treatment hospital request provide consultancy consultancy clinician access patient record update patient record personal information medical information system fig 

final health care system dependency model medical information system actor personal information hospital patient medical treatment trust model personal information hospital patient medical treatment functional model fig 

patient hospital basic dependencies represent relationship edge labelled trust model basic trust relationship agents permission model actual transfer rights form digital certificate signed tropos dependency 
relations tropos 
new constructs methodology possible analyze trust relationship actors consequent integrated security functional requirements 
show respectively trust model functional model just patient hospital modeling attempt 
hospital owns medical treatments patient owns personal information trusts hospital personal data 
functional model patient depends hospital medical treatments 
hospital needs personal information provide accurate medical treatment patient permits personal information hospital 
refine system building trust model corresponding original tropos model 
clinician owns medical treatments 
patient health care authority personal information patient check equity resource distribution personal information personal information medical treatment hospital request consultancy clinician provide consultancy fig 

health care system trust model personal information trusts hca clinician personal information hca trusts hospital 
hospital trusts hca checking equity resource distribution 
clinician trusts hospital medical treatment requesting specific professional consulting hospital trusts clinician providing consulting patient personal information 
notice top trust relationship actors hca hospital resource owned 
step add medical information system relationship actors 
corresponding dependencies model show respectively trust model functional model 
trust model consider trust relationship hospital medical system information patient personal information functional model dependency clinician medical information system access patient record update patient record 
interesting feature tropos refinement analysis usage rationale diagrams explain relationships actors 
specifically goal accessing patient record introduced decomposed subgoals request patient personal data check authorization send medical information 
save space merge trust model functional model rationale diagram 
see medical information system requests patient personal information clinician requests authorization send patient medical information clinician 
get directly patient clinician delegation 
formalization trust management approach distributed authorization requester submits request possibly supported set credentials issued health care authority personal information patient health care authority personal information patient check equity resource distribution personal information medical treatment personal information hospital request consultancy clinician provide consultancy access patient record update patient record fig 

health care system trust model check equity resource distribution personal information medical treatment medical treatment personal information hospital request provide consultancy consultancy clinician access patient record update patient record fig 

health care system functional model personal information medical information system personal information medical information system parties authorizer controls requested resources 
consider features delegation logics model security requirements 
particularly follow li provides logical framework representing security policies credentials authorization large scale open distributed systems 
simplify authorization decentralized environment li grosof feigenbaum system access control decisions authenticated attributes subjects attribute authority decentralized 
develop logic language called delegation logic dl represent policies credentials requests distributed authorization satisfy requirements :10.1.1.11.3049
note term authorization denote process authentication access control 
patient medical information system patient personal data direct authorization request authorization access patient record check authorization delegation patient medical information verification fig 

rationale diagram clinician formal tropos secure tropos fulfilled service owns actor service actor service offers actor service fulfills actor service table 
properties single agent introduce predicates modeling properties actor table relationships actors table 
defining predicates don distinguish goals tasks resources treat services 
say fulfill service accomplish goal execute task deliver resource 
intuition predicate owns owns holds agent owns service owner service full authority concerning access disposition service delegate authority actors 
basic idea service authority concerning access disposition service delegate authority actors owner service agrees 
actor capabilities fulfill service offers 
means offers holds offers assume offer service 
predicates fulfilled fulfills true service fulfilled actor 
particularly predicate fulfills holds actor fulfills service predicate fulfilled holds fulfilled 
formal tropos includes predicate fulfilled 
formal tropos depends actor service actor secure tropos actor service actor id idc actor service actor table 
relationship actors example 
patient owns data full authority concerning access disposition 
particular owner service service 
framework model notions respectively owns patient record patient record 
example 
health care authority patient records hospital gives goal check behavior patients doctors hca offers goal fulfills 
show model secure tropos offers hca check fulfills hca check 
trust predicate holds actor trusts actor service called trust depth means unlimited depth called black list 
suggest li delegation logics trust depth positive integer means unlimited depth :10.1.1.11.3049
way view trust depth number re delegation permission steps allowed depth means re delegation permission allowed depth means step allowed depth means steps allowed depth means unlimited re delegation permission allowed 
black list set actor distrusts concerns permission 
idc holds actor delegates service actor actor called actor called delegatee idc certificate identifier delegation depth called black list 
represents set actors doesn want object 
idea black lists trust delegation modeling exceptions chain trust 
example patient may want delegate permission read personal data general practitioner agents trusted delegation depth 
may want restrict blank transfer rights avoid information goes somebody distrusts previous general practitioner 
delegation depth trust 
define abbreviation delegation chain 
ak 
nk 
bk 
idi ai ai ni bi ak example 
patient trusts clinician medical data 
patient record clinician trust model ax owns ax ax min functional model ax id ax fulfilled fulfills ax fulfills offers table 
axioms trust model functional model clinician visits patient requests medical information system patient record 
medical information system delegates patient record patient clinician 
clinician delegate record actors 
formally record clinician 
table axiom trust model functional model 
mentioned earlier owner service full authority concerning access disposition 
ax states actor owns service 
ax states trusts depth trusts smaller depth 
ax describes trust relationship completes trust relationship actors 
ax says delegatee service delegated 
ax states actor fulfills service service eventually fulfilled 
ax states actor service offers eventually fulfills 
properties different axioms constraints checked 
designer choose properties design respect 
set constraints consistent simultaneously satisfied system inconsistent secure 
table 
mean check time holds desirable holds 
pro pro state agent offers delegates object 
pro says fulfill goal actor able offer 
pro pro prop state actor offers fulfills goal goal belongs actor trust 
pro pro verify delegatee black list 
pro pro state actor delegates trust 
rights privileges trusted agents accountable agents may delegate right 
agents delegate agents trust 
forms delegation chain 
agent chain fails meet requirements associated delegated right chain broken agents failure permitted perform action associated right 
prop verify delegate chain valid 
pro offers 
pro id 
pro fulfills 
offers pro owns 
pro offers owns 
pro fulfills owns 
pro id owns 
pro id 
pro id 
pro 
pro 

am 
nm 
bm 
idi ai ai ni bi am ni ni bi bi ai bi table 
desirable properties design owns 
delegate id 
fulfill offer 
fulfilled fulfill 
succ 
bl succ 
bl 
table 
axioms datalog additional properties listed due lack space checking delegation actors service directly 
implementation experimental results order illustrate approach formalize case study check model datalog 
datalog logic program set rules form ln called head positive literal ln literals called body 
intuitively ln true model true model 
definition recursive defined relations occur bodies rules 
axioms form represented datalog properties represented constraint dlv system actual analysis 
consistency checks standard checks guarantee security specification 
inconsistent specifications due unexpected interactions constraints specifications 
consistency checks performed automatically dlv 
simplest consistency check verifies valid scenario respects constraints security specification 
offer 
delegate id 
offer owns fulfill owns 
table 
properties datalog pat rec owns pat rec 
trust pat rec cli cli pat owns pat rec 
hca rec hospital rec 
hospital rec mis rec 
hospital rec rec 
table 
health care system trust relationship datalog example 
model checking purposes consider patients clinicians hca 
patients trust completely hca personal information 
relation patient clinician shown patient trusts clinicians depth 
hca trusts completely hospital patients personal informations 
relationship hospital clinician patient personal information 
introduce constraint verify clinicians patient patient information 
trust pat rec cli owns pat rec cli cli pat 
dlv system reports inconsistency clinicians authorized personal information patient 
ideally authorize clinician patient patient data 
example 
trust relationship actor formalized table described 
patient trusts completely hca trusts directly clinician 
hca trusts completely hospital 
hospital trusts completely medical information system 
medical information system trusts completely clinicians 
check clinicians patient patient personal information example 
dlv system report inconsistency current design clinician implicitly authorized patient personal information 
resolve problem change trust model trust relation medical information system clinician 
trust mis rec cli cli pat owns pat rec 
words medical information system allows actor access directly records patient actor physician patient 
analyze complete trust functional model 
particular check trusts delegatee 
refined result patient consent sought agent clinician colleagues able access patient medical information patient notified access 
clinician request consulting colleagues hospital patient give permission access data 
possible additional queries aimed verifying number security principles privilege need know policies done liu security requirements model formalized alloy 
main contribution formal model methodology analyzing trust early requirement engineering 
proposed enhancement tropos clear separation functional dependencies trust delegation relationships 
distinction possible capture organization oriented security trust requirements caught technical details realized digital certificates access control mechanisms 
modeling process envision advantage making clear trust management delegation mechanisms necessary trust relationships requirements address 
framework proposed supports automatic verification security requirements trust relationships functional dependencies specified formal modeling language 
model easily modified account degrees trust 
levels trust captured qualitative theory goal analysis 
see details 
plans include adding time trust models analyzing new features formal tropos tool 

abiteboul hull vianu 
foundations databases 
addison wesley 

anderson 
security policy model clinical information systems 
proc 
th ieee symp 
security privacy 
ieee comp 
society press 

anderson 
security engineering guide building dependable distributed systems 
wiley computer publishing 

giunchiglia mylopoulos 
tropos agent oriented software development methodology 
appear 

castro mylopoulos 
requirements driven information systems engineering tropos project 
inform 
sys 

chung nixon 
dealing non functional requirements experimental studies process oriented approach 
proc 
icse 

crook lin nuseibeh 
security requirements engineering anti requirements hit fan 
proc 
re 
ieee computer society 

dardenne lamsweerde fickas 
goal directed requirements acquisition 
science computer programming 

dell faber leone pfeifer 
aggregate functions disjunctive logic programming semantics complexity implementation dlv 
proc 
ijcai 
morgan kaufmann publishers 

devanbu stubblebine 
software engineering security roadmap 
icse se track pages 

liu pistore roveri mylopoulos 
specifying analyzing early requirements experimental results 
proc 
page 
ieee computer society 

pistore mylopoulos traverso 
model checking early requirements specifications tropos 
proc 
re pages toronto august 
ieee computer society 

giorgini massacci mylopoulos 
requirement engineering meets security case study modelling secure electronic transactions visa mastercard 
proc 
er chicago illinois october 

giorgini sebastiani 
formal reasoning techniques goal models 
data semantics 


eliciting security requirements misuse cases 
proceedings tools pacific 

jan 
secure systems development 
proc 
fase 

li grosof feigenbaum 
delegation logic logic approach distributed authorization 
acm 

li winsborough mitchell 
proof compliance safety availability analysis trust management 
proc 
symposium security privacy 

liu yu mylopoulos 
analyzing security requirements relationships strategic actors 
proc 
north carolina 
raleigh 

liu yu mylopoulos 
security privacy requirements analysis social setting 
proc 
re pages 

basin 
secureuml uml modeling language model driven security 

hussmann cook editors proc 
uml volume pages 
springer 

mcdermott fox 
abuse care models security requirements analysis 
proc 
acsac december 

giorgini 
modelling secure multiagent systems 
proc 
aamas pages 
acm press 

sommerville 
software engineering 
addison wesley 


embedding security practices contemporary information systems development approaches 
information management computer security 

yu 
designing privacy competing requirements 
proc 
north carolina 
raleigh 
