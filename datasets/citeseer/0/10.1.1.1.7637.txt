rdfpeers scalable distributed rdf repository structured peer peer network min cai usc information sciences institute admiralty way marina del rey ca isi edu centralized resource description framework rdf repositories limitations failure tolerance scalability 
existing peer peer rdf repositories guarantee find query results results exist network require front definition rdf schemas designation super peers 
scalable distributed rdf repository rdfpeers stores triple places multi attribute addressable network applying globally known hash functions subject predicate object 
nodes know node responsible storing triple values looking exact match range queries efficiently routed nodes 
rdfpeers single point failure elevated peers require prior definition rdf schemas 
queries guaranteed find matched triples network triples exist 
rdfpeers number neighbors node number routing hops inserting rdf triples resolving queries logarithmic number nodes network 
performed experiments show triple storing load rdfpeers differs order magnitude loaded nodes real world rdf data 
categories subject descriptors computer communication networks distributed systems distributed applications distributed databases network protocols routing protocols database management languages query languages general terms algorithms design keywords semantic web peer peer distributed rdf repositories 
rdf meta data flexible statements resources uniquely identified uris 
rdf statements machine understandable statements resource distributed web different users 
rdf schemata extensible evolvable time new base uri time schema revised 
copyright held author owner 
www may new york new york usa 
acm 
martin frank usc information sciences institute admiralty way marina del rey ca frank isi edu distribution rdf statements provides great flexibility annotating resources 
distributed rdf documents web pages hard discover 
obviously just put rdf document web site mean find issue structured queries 
approach crawl possible web pages index rdf documents centralized search engines rdf google wish approach difficult keep indexed rdf date 
example currently takes google days index newly created web page 
approach large infrastructure footprint organization providing querying service centralized approach top technologies rdf internet intentionally designed decentralized operation 
choice non centralized rdf repositories edutella provides rdf meta data infrastructure applications 
uses gnutella unstructured network centralized index predictable location rdf triples 
rdf queries flooded network node processes query 
measurement studies show gnutella unstructured networks scale large number nodes 
flooding mechanism generates large amount unnecessary traffic processing overhead node hop count limit set queries queries guarantee finding results results exist network 
edutella successor provides better scalability introducing super peers schema routing requires front definition schemas designation super peers 
presents scalable distributed rdf triple repository named rdfpeers storing indexing querying individual rdf statements require definition rdf schema inserting rdf triples network 
rdf triple storage providers self organize cooperative structured network randomly chosen node identifiers 
rdf triple inserted network stored times applying globally known hash function subject predicate object values 
queries efficiently routed nodes network triples question known stored exist 

rdfpeers architecture distributed triple repository consists individual nodes called rdfpeers self organize multi attribute addressable network maan extends chord efficiently answer multi attribute range queries :10.1.1.116.7128
maan supported predetermined attribute schemata fixed number attributes 
rdfpeers exploits maan underlying network layer extends rdf specific storage retrieval load balancing techniques 
shows architecture rdfpeers 
node rdfpeers consists components maan network layer rdf triple loader local rdf triple storage native query resolver rdql translator 
underlying maan protocol contains classes messages topology maintenance storage search 
topology maintenance messages keeping correct neighbor connections routing tables include join leave keepalive network messages 
store message inserts triples network 
search message visits nodes triples question known stored returns matched triples requesting node 
rdf triple loader reads rdf document parses rdf triples uses maan store message store triples rdfpeers network 
receives store message stores triples local rdf triple storage component relational database 
native query resolver parses native rdfpeers queries uses maan search message resolve 
multitude higher level query modules top native query resolver map higher level user queries rdfpeers native queries rdql native query translator 
architecture rdfpeers 
maan rdfpeers maan uses dimensional modulo circular identifier space chord number bits node identifiers attribute hash values :10.1.1.116.7128
node maan assigned unique bit identifier called node id nodes self organize ring topology node ids 
node id chosen locally example applying hash function node ip address port number 
chord bundles related attribute value pairs name john age called resources term avoid different meaning rdf 
note rdfpeers maan bundle related attribute value pairs synonymous rdf triple 
chord bundles stored looked unique key stored looked attribute value maan 
chord uses sha hashing assign key unique bit identifier 
maan uses hashing string valued attributes 
numeric attributes maan uses locality preserving hash functions assign attribute value identifier bit space 
refer hashing image key chord hashing image attribute value maan key identifier circular bit space 
suppose attribute numeric values vmin vmax 
note rdfpeers attributes numeric values objects subjects predicates uris rdf 
simplistic locality preserving hash func tion vmin vmax vmin vmin vmax 
key assigned node identifier equal follows identifier circle 
node called successor node key denoted successor 
similar chord node maan maintains sets neighbors successor list finger table 
nodes successor list immediately follow node identifier space nodes finger table spaced exponentially identifier space 
finger table entries 
th entry table node id contains identity node succeeds identifier circle successor arithmetic modulo maan uses chord successor routing algorithm forward request key successor node 
node receives request key node searches successor list successor forwards request possible 
know successor forwards request node identifier immediately precedes finger table 
repeating process request gets closer closer successor fingers node spaced exponentially identifier space hop node node covers half identifier space clockwise average number hops routing log network nodes 
maan stores bundle attribute value pairs successor nodes keys attribute values 
suppose bundle pairs ai vi hi hash function attribute ai note rdfpeers subject predicate object 
bundle attribute value pairs stored node ni successor vi attribute value vi store message attribute value vi routed successor node successor routing algorithm 
nodes store bundle consisting attribute value pairs keying different attribute 
routing hops storing bundle attribute value pairs log bundles attributes 
numeric attribute values maan mapped mbit identifier space locality preserving hash function numerically close values attribute stored nearby nodes 
range query lower bound upper bound respectively nodes contain attribute value identifier equal larger successor equal successor 
suppose node wants search bundles attribute value attribute node composes search message uses successor routing algorithm route node nl successor 
search message parameters key successor routing initially 
name attribute interested desired query range list bundles attribute value pairs discovered range 
initially empty 
node nl receives search message searches local sets appends sets satisfy range query attribute message 
checks successor 
true sends back search result requesting node forwards search message immediate successor ni 
node ni repeats process message reaches node nu successor 
routing search message node nl successor routing takes log hops nodes 
sequential forwarding nl nu takes number nodes nl nu 
total log routing hops resolve range query tribute 
nodes uniformly distributed bit identifier space selectivity range query vmax vmin 
maan supports multi attribute range queries dominated query resolution approach 
suppose bundles attribute value pairs satisfying sub queries xi bundles satisfying sub query attribute ai xi xi superset query resolution approach computes xk satisfies sub query attribute ak 
applies sub queries attributes candidate bundles computes intersection satisfies sub queries 
call attribute ak dominant attribute 
order reduce number candidate sets satisfy sub queries carry sub queries search message filter unqualified bundles attribute value pairs locally nodes visited 
approach needs iteration chord identifier space dominant attribute ak takes log sk routing hops resolve query sk selectivity sub query attribute ak 
minimize routing hops choosing attribute minimum selectivity dominant attribute presuming course selectivity known advance case routing hops log smin smin minimum range selectivity attributes query 
simplistic locality preserving hash function keeps locality attribute values necessarily produce uniform distributions hashing values distribution attribute values uniform 
consequently load balancing resource entries poor nodes 
address problem proposed uniform locality preserving hashing function maan produces uniform distribution hashing values distribution function input attribute values continuous distribution known advance 
condition satisfied common distributions gaussian pareto exponential distributions 
suppose attribute value conforms certain distribution continuous monotonically increasing distribution function possibility function dd vmin vmax 
dv design uniform locality preserving hashing function follows 

storing rdf triples rdf documents composed set rdf triples 
triple form subject predicate object 
subject resource statement 
predicate resource representing specific property statement 
object property value predicate statement 
object resource literal resource identified uri literals plain typed lexical form unicode string 
plain literals lexical form optionally language tag typed literals lexical form datatype uri 
triples show different types objects resource plain literal typed literal respectively 
prefix info www isi edu info prefix dc purl org dc elements prefix foaf xmlns com foaf prefix www org xmlschema info rdfpeers dc creator info info foaf name min cai info foaf age integer order support efficient queries distributed rdf triples exploit overlay structure maan build distributed index triples 
store message attribute values designated destination routing store triple times subject predicate object 
triple stored successor node hash key value routing key attribute value pair 
value attribute subject predicate uri string apply sha hash function mapping subject value predicate value bit identifier space maan 
values attribute object uris plain literals typed literals 
uris plain literals strings apply sha hashing 
typed literal string types numeric types enumeration type positive integer respectively 
discussed apply sha hashing string typed literals locality preserving hashing numeric literals 
example store triple subject rdfpeers send message attribute value pair subject info rdfpeers routing key pair key sha hash value subject value 
store key subject info rdfpeers predicate dc creator object info key sha hash info rdfpeers triple stored node successor node key 
shows triples stored example rdfpeers network 
shows finger tables example nodes illustration 
storing triples rdfpeers network nodes example bit identifier space hold nodes 
reality larger identifier space bits 
nodes fail network connections break triples stored corresponding successor nodes replicated neighbors chord identifier space 
done setting parameter replica factor maan 
node receives triple storing request store triple locally store immediate successors parameter dictates 
node fails connection breaks immediate successor predecessor detect checking keepalive messages 
node come back life time period nodes repair ring structure chord stabilization algorithm 
stabilization immediate successor node failed node restore replicas new predecessor 

native queries rdfpeers triple storing scheme define set native queries efficiently resolved maan multiattribute range queries 
native queries include atomic triple patterns disjunctive range queries conjunctive multi predicate queries 
atomic triple patterns atomic query pattern triple pattern subject predicate object variable exact value 
resulting possible queries shown table 
general expensive query matches triples 
restriction whatsoever triple pattern propagate query nodes takes routing hops network nodes 
maan routing algorithm resolve queries store triple times subject predicate object hash values 
query patterns value constant resolve query routing node responsible storing constant node matches triples pattern locally returns requesting node 
example node asks native query info foaf name name hash info get hash value 
routes corresponding node 
filters triples locally pattern sends back matched triple info foaf name min cai 
query pattern cost query semantics find possible triples oi log object oi predicate find subjects predicates matched triples pi log predicate pi find subjects objects triples having predicate pi oi log object oi predicate pi find subjects matched triples si log subject si find predicates objects resource identified si si oi log subject si find predicate object oi si pi log subject si find object predicate pi si pi oi log return triple exists return table possible atomic triple queries exact matches 
cost measured number routing hops needed resolve query 
note assume value overly popular case messages see section 
disjunctive range queries rdfpeers native queries support constraints variables triple patterns 
extends atomic queries constraint list limits domain variables 
expression expression expression variable literal literal uri variables string valued numeric 
constraints limit domain string values enumerating set allowed forbidden constants 
numeric variables additionally limited set disjunctive ranges 
dc creator tom john foaf age age age age discussed section maan efficiently resolve range queries locality preserving hashing 
addition specifying single range specify set disjunctive ranges attribute values 
example user submit range query variable li ui 
obviously kind disjunctive range query simply resolved issuing query contiguous range computing union results 
query disjunctive ranges takes log aggregate selectivity ranges 
number hops worst case increases linearly bounded optimize range ordering algorithm sorts disjunctive query ranges ascending order 
list disjunctive ranges ascending order li ui li lj ui uj iff query request routed node nl successor node key corresponding lower bound range 
node nl sequentially forwards query successor node upper bound successor node 
node nu uses successor routing forward query node nl successor node corresponding lower bound range turn forwards query successor node 
process repeated query reaches successor node ud 
optimized algorithm exploits locality numeric maan data chord ring ascending order ranges reduces number routing hops especially cases large bounds routing hops disjunctive exact match queries om john special case disjunctive range queries lower bound upper bound range equal exact match value algorithm resolve 
conjunctive multi predicate queries addition atomic triple patterns disjunctive range queries rdfpeers handles conjunctive multi predicate queries describe non leaf node rdf graph specifying list edges node 
expressed conjunction atomic note case rdfpeers benefit front rdf schema information say integer valued object triples reality values rdf peers hash function yields better load balancing triples 
triple patterns disjunctive range queries subject variable 
consists conjunction sub queries subject variables 
restrict sub query style triple pattern constraints object variable 
describes subject variable list restricting predicate object predicate object range pairs 
rdf type foaf person foaf name john foaf age age age efficiently resolve conjunctive multi predicate queries recursive query resolution algorithm searches candidate subjects predicate recursively intersects candidate subjects inside network returning search results query originator 
search request takes parameters currently active sub query list remaining sub queries set candidate subjects matching current active sub query set intersected subjects matching resolved sub queries 
initially subquery multi predicate query contains sub queries empty set 
suppose sub query predicate pi oi lower bound upper bound query range object variable oi respectively 
node wants issue search request routes request node nli successor 
node nli receives request searches local triples corresponding predicate pi appends subjects matching sub query forwards request immediate successor successor 
node repeats process search request reaches node successor 
node receives request searches locally subjects matching sub query appends intersects set set pops sub query empty sends query response back subjects result resolves sub query process repeated sub queries remain empty 
recursive algorithm takes log si rout ing hops worst case number sub queries si selectivity sub query predicate pi 
intersects search results different predicates network terminate search process resolving query predicates matches left empty 
reduce average number expected routing hops sorting sub queries ascending order selectivity presuming selectivity estimated advance 
example predicate query sub query rdf type match subjects foaf age matches far fewer foaf name matches handful 
sorting sub queries resolve foaf name rdf age rdf type 

resolving rdql queries rdql query language rdf proposed developers popular jena java rdf toolkit 
rdql operates rdf triple level rdf schema information account rql providing inferencing capabilities 
type low level rdf query language want rdfpeers support 
intuition possible translate rdql queries combinations native rdfpeers queries written translator may inefficient queries especially joins 
section informally describes example rdql queries jena tutorial www hpl hp com semweb doc tutorial rdql resolved 
select vcard fn john smith select fname vcard fn fname select vcard family smith vcard select resource resource inf age age age select resource resource vcard vcard select resource resource inf age age resource vcard vcard family age query translates directly resolved log routing hops network nodes 
similarly query translates directly log hops 
resolve query issue style query query result constraint issue style disjunctive query style triple patterns 
predicate values triple patterns known native queries resolved log hops 
query typical style range query constraint object value 
predicate value known route query node stores triples predicate inf age log hops 
native queries include join operations decompose join queries multiple native queries 
query resolved style queries joining triple set object second triple subject log routing hops 
note style queries generate large size messages predicates vcard vcard popular 
query resolved issuing query previous rdql example triple pattern 
query result constraint variable resource resolve second triple pattern style disjunctive range query 
second query result constraint variable resolve third triple style query aggregate takes log hops 

implementation evaluation implemented maan layer rdfpeers java measured performance real world network nodes previous :10.1.1.116.7128
measured number neighbors node network size 
similar chord number neighbors node increases logarithmically network size node state maan scales large number nodes example hypothetical network nodes human earth node maintain just ip connections 
measured number routing hops network size exact match queries range queries 
experiment results show exact match queries number routing hops worst case log average routing hops log 
range queries selectivity si meaning select node routing hops increase linearly network size 
optimal sense si total nodes visited search queries presuming want evenly balance load nodes 
implemented rdf xml triple loader jena toolkit measure number routing hops simulation measuring query cost studied number triples stored node loading real world rdf data simulator measuring storage cost 
routing hops resolve native queries number routing hops taken resolve query dominant performance metric systems 
shows simulation result atomic triple patterns node nodes logarithmic scale matches theoretical analysis 
number routing hops resolve atomic triple patterns 
compared disjunctive range query resolution algorithms simple algorithm vs range ordering algorithm 
shows simulation result disjunctive exact match values si network nodes 
number routing hops resolve disjunctive exact match queries network nodes 
shows result disjunctive ranges selectivity network 
experiments see range ordering algorithm takes routing hops resolve range query simple algorithm routing hops bounded dealing overly popular uris literals today cheapest pcs surprising storage capacity store rdf triples dedicating gigabytes typical gb disk 
triples rdf predicate rdf type may occur frequently impossible single node network store 
practice triples may hash chord identifier circle uniformly due non uniform frequency count distribution uris literals 
shows frequency count distribution uris number routing hops resolve disjunctive range queries selectivity network nodes 
literals rdf dump kids teens catalog open directory project rdf dmoz org 
rdf files catalog kt structure rdf gz kt content rdf gz 
describes tree structure catalog contains triples 
describes sites catalog contains triples 
shows uris literals occur times 
frequency count distribution uris literals odp kids teens catalog 
table lists uris literals occur times kt structure rdf gz 
example uri predicate value stored node node global knowledge frequency count predicate value 
deal predicate values overly popular simply longer indexing triples 
node defines popular threshold parameter local capacity willingness subject minimum community expectation 
node keeps counting frequency predicate value 
predicate value occurs popular threshold times node refuse store internally note 
node receives search request overly popular value predicate sends refusal message back requesting node requesting node find alternative way resolving query navigating target triples subject object values 
approach add logn node total query cost hops 
limit subject object values way 
aware node popular uris hotspot query messages addressed querying nodes caching queries refused past 
essence means ask instances world subclass class 
queries general return triples suspect rarely practice anyway analogy english language words occur frequently provide little value search terms 
query alternatively gather class uris want look instances traverse instances set uris issuing style query 
frequency uri literal type rdf type predicate dc title object dmoz org rdf topic object dmoz org rdf predicate dmoz org rdf predicate dmoz org rdf narrow predicate dmoz org rdf predicate dc description object table uris literals occur times kt structure rdf gz shows minimum average maximum number triples node popular threshold 
experiment store rdf gz rdf gz total triples network physical nodes standard chord log virtual nodes physical node trading load balancing routing hops 
popular threshold overly popular uris literals removed average triples node 
load unevenly balanced minimum number triples node maximum number triples node 
popular threshold set overly popular uris literals removed indexing average triples node 
minimum number triples node maximum number triples node reduced believe order magnitude difference acceptable load balancing 
load balancing successor probing limiting overly popular uris literals greatly reduces difference maximum minimum number triples node triples uniformly distributed nodes 
frequency count distribution non popular uris literals remains non uniform removing overly popular values 
propose preliminary successor probing scheme inspired probe node insertion techniques achieve balanced triple storage load node 
chord distribution node identifiers uniform independent data distribution 
successor probing scheme sampling technique generate node identifier distribution adaptive data distribution 
node joins network sha hashing generate probing factor candidate identifiers 
uses chord successor routing algorithm find successors corresponding identifiers 
successors return number triples migrated new node joined new node choose identifier gives heaviest load 
cost technique increases insertion time triple log actor log intuition log setting probing factor 
shows minimum average maximum number triples node probing factor network physical nodes 
popular threshold set experiment 
successor probing loaded node times triples loaded node 
node probes nodes joins node heaviest load times triples node lightest load reduces load imbalances order magnitude 
improve load balancing background virtual node migration scheme proposed subject limitation distribute load single overly popular value 
number triples node function threshold popular triples physical nodes virtual nodes physical node 
number triples node function number successor nodes probed physical nodes popular threshold 

related centralized rdf repositories implemented support storing indexing querying rdf documents jena 
centralized rdf repositories typically memory database supported processing files relational database back rdf triple store 
supports sql query language jena support style rdf query languages 
centralized rdf repositories fast scale millions triples 
limitations centralized approaches single processing bottleneck single point failure 
edutella successor super peer rdf network discussed section 
super peers desirable order place load unevenly heterogeneous nodes scheme achieve effect flexibly nodes hosting fewer chord virtual nodes capacity 
structured systems message routing flooding leveraging structured overlay network peers 
systems typically support distributed hash table dht functionality offer operation lookup key returns identity node storing object key 
current proposed dht systems include tapestry pastry chord koorde 
dht systems objects associated key produced hashing object name 
nodes identifiers share space keys 
node responsible storing range keys corresponding objects 
dht nodes maintain overlay network node having nodes neighbors 
lookup key request issued node lookup message routed overlay network node responsible key 
different dht systems construct different overlay networks employ different routing algorithms 
guarantee finish lookup log dn hops node maintains information log neighbors nodes network dimension hypercube organization network 
provide scalability failure resilience 
dht systems provide single key lookup efficiently support multi attribute range queries provide rdfpeers triple storage load balancing 

perform experiments measuring cost terms message sizes just routing hops customary performance metric implement rdql rdfpeers native queries translator sketched 
able bound size query results matches returned note roughly matches retrieve 
implemented triple deletions rdfpeers triple insertions 
improve load balancing background virtual node migration scheme add binary non meta data storage support top rdfpeers 
rdfpeers advances state art rdf systems guaranteeing query results exist requiring front schema definition relying super peers balancing triple storing load loaded nodes 
storage cost neighborhood connections logarithmic number nodes network processing cost routing hops insertion query operations enabling distributed rdf repositories truly large numbers participants 

successor probing technique section inspired discussions ghandeharizadeh load balancing techniques 
gratefully acknowledge feedback anonymous reviewers stefan decker geoff pike afosr funding 

www org rdf 
world wide web consortium resource description framework 
www org tr rdf schema 
world wide web consortium rdf schema 

sourceforge net 
cai frank chen szekely :10.1.1.116.7128
maan multi attribute addressable network grid information services 
th int workshop grid computing 
ghandeharizadeh 
distributed range addressing space systems 
int workshop databases information systems peer peer computing vldb 
kaashoek karger 
koorde simple degree optimal hash table 
nd int workshop systems feb 
karvounarakis alexaki christophides plexousakis scholl 
rql declarative query language rdf 
th world wide web conference 
mcbride 
jena implementing rdf model syntax specification 
nd int semantic web workshop 
miller 
rdf query 
org 
miller seaborne 
implementations simple rdf query language 
int semantic web conference 
national institute standards technology 
publication secure hash standard 
nejdl wolf qu decker naeve nilsson palmer risch 
edutella networking infrastructure rdf 
th world wide web conference 
nejdl wolpers siberski schmitz schlosser 
super peer routing clustering strategies rdf peer peer networks 
th world wide web conference may 
rao lakshminarayanan surana karp stoica 
load balancing structured systems 
nd int workshop systems 
ratnasamy francis handley karp shenker 
scalable content addressable network 
acm sigcomm 
ratnasamy shenker stoica 
routing algorithms dhts open questions 
nd int workshop systems feb 
ripeanu foster iamnitchi 
mapping gnutella network properties large scale peer peer systems implications system design 
ieee internet computing journal 
rowstron druschel 
pastry scalable decentralized object location routing large scale peer peer systems 
lecture notes computer science 
guha 
rdf database 
guha com 
saroiu gummadi gribble 
measurement study peer peer file sharing systems 
multimedia computing networking jan 
sen wong 
analyzing peer peer traffic large networks 
acm sigcomm workshop internet measurement nov 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
acm sigcomm 
zhao kubiatowicz joseph 
tapestry infrastructure fault tolerant wide area location routing 
technical report csd uc berkeley 
