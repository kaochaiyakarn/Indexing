mona new techniques ws ws jacob nils klarlund anders mller brics university aarhus brics dk labs research klarlund research att com brics university aarhus brics dk 
note version mona tool released entirety 
tool ers decision procedures ws ws completely rewritten front 
techniques calculations couched ws run times faster pre release tool str 
suggests ws better semantic properties preferable str 
known couple years monadic second order logic interpreted relative finite strings str attractive formal practical vehicle variety verification problems 
formalism generally easy provides boolean connectives second order quantifiers syntactic restrictions say clausal forms 
semantics formalism source definitional practical problems 
example concept order term doesn sense empty string terms denote positions 
natural investigate related logic ws weak secondorder theory 
logic stronger captures fragment arithmetic decision procedure similar str 
similarly explore practical feasibility ws weak second order theory successors 
note new techniques incorporated full release mona tool 
mona tool consists front back ends ws ws 
front parses mona program consists predicates subroutines compiled separately macros main formula 
back implements operations carried decide formula corresponding program 
earlier presentation mona tool completely rewritten front time earlier version written ml 
old version front produces code tree internal nodes describe automata theoretic operation product subset construction leaves describe automata corresponding basic formulas 
implemented optimization techniques unpublished rewriting formulas logical laws 
note report alternative optimization technique building code dag code tree 
dag directed acyclic graph 
experiments show technique cient handling predicates yields fold improvements compilation time old tool 
briefly discuss str formula translated essentially equivalent ws formula discuss important problems addressed 
str ws str formula logic str interpreted relative number best thought defining set positions 
string length core logic consists order terms second order terms formulas 
order term variable constant denoting position position denoting position string form denoting mod order term denoting 
second order term variable form formula basic formula form form order quantification secondorder quantification 
addition allow formulas involving firstorder second order terms order terms boolean connectives set operations quantifiers automaton logic connection see allows associate regular language formula follows 
assume variables ordered include free variables 
string length alphabet viewed consisting tracks rows length kth track bit pattern defines interpretation kth variable assumed second order set positions ith bit 
note order variable regarded second order variable restricted singleton values assumption just variables second order serious 
language associated formula set strings correspond satisfying interpretation formula 
example formula associated regular language upper track string denotes value lower track denotes value language corresponding formula regular languages corresponding basic formula represented automata correspond automata theoretic operations product complementation projection 
case closed formula free variables regular language degenerates set strings unit alphabet 
closed formula essentially denotes set numbers 
proof regularity just hinted forms basis decision procedure subformula compiled minimum deterministic automaton see 
automaton representation bdds core mona implementation discussed 
state state space multi terminal bdd leaves states represents transition function bdd variable corresponds second order ws variable shared states 
resulting data structure dag multiple sources 
automaton logic connection see allows associate regular language formula variables 
ws ws syntax str operator replaced 
logic interpreted simpler manner firstorder terms denote natural numbers second order terms denote finite sets numbers 
automata theoretic calculations similar str existential quantifier see 
str ws principle easy translate quantifier free str formula formula ws essentially meaning gotten steps 
conjunct variable added subformula containing order variable second order variable left untouched translated formula depend elements greater 
occurrences taken account example formula translated translated formula depend membership status numbers greater 
set complement operator carefully replaced 
occurrence subformula involving replaced captures modulo semantics 
scheme shown length satisfies augmented interpreting satisfies unfortunately order preserve property subformulas need conjoin extraneous conditions original subformula 
simpler solution conjoin certain strategic places basic formulas formulas directly quantifier 
implemented heuristics tool automatically translates str formulas ws formulas 
dags compilation code trees form mk basic mk product op mk project bdd variable indices op boolean function variables code trees 
example consider formula variable index st variable variable ordering variable index variable index formula parsed code tree mk project mk product mk mk 
tree contains situation avoid essentially isomorphic subtrees calculated 
fact automaton mk identical automaton mk modulo renaming variables 
general rename indices need linear operation building code tree linear operation 
say code tree equivalent order preserving increasing renaming variables goal produce dag arises naturally code tree collapsing equivalent subtrees 
unfortunately takes linear time calculate equivalence class subtree total running time quadratic 
collapsing process limited subtrees number variable occurrences user definable parameter 
mona ers pre compiled subroutines called predicates typed macros 
name predicate sequence actual parameters translated special node form mk call name 
predicate compiled separately signature call node 
actual parameters bound resulting automaton standard binding mechanism temporary variables projection 
additional call nodes signature reuse separately compiled automaton 
call nodes act leaves respect 
experimental results run mona formula reverse size kb automatically generated formula old mona optimizations new ws version 
experiment reverse version formula defined predicates replaced macros 
run comparison formula representing parameterized hardware verification problem 
results seconds program old mona mona dags dag hits dag misses reverse reverse hardware cases reverse old mona tool faster new run figures reported old apply version carries formula simplification 
experiments support claim ws cient formalism str 
underlying bdd package tools 
dags predicate uses er substantial benefits factor 
hardware example runs slightly faster improvement due new front quicker 
related similar tools reported literature reports implementation ws bdds cient tool 
tool implements str di erent bdd representation tool implements decision procedure ws prolog bdds 
problems challenges addressed current mona tool semantics formulas order terms appealing example mona formula 
xn xn translated linear time negation 
xn xn translated exponential time reuse intermediate results automaton operation general solution problem require identification isomorphic subgraphs problem appears computationally expensive automatic translation str ws formulas reasons similar restrictions formula translated wrapped subformulas unfortunate ways restrictions reapplied intermediate result formula rewriting earlier mona version combined dag techniques 
mona tool currently version retrieved www brics dk mona information 

klarlund 
mona decidable arithmetic practice short contribution 
formal techniques real time fault tolerant systems th international symposium lncs 
springer verlag 

glenn 
implementing ws finite automata 
automata implementation proceedings volume lncs 

jensen jrgensen klarlund schwartzbach 
automatic verification pointer programs monadic second order logic 
sigplan conference programming language design implementation pages 
sigplan 

margaria mendler 
flexible toolset monadic second order logic 
computer aided verification cav proceedings lncs 

klarlund 
mona fido logic automaton connection practice 
csl proceedings 
appear lncs 

cornell 
recognizability relations tree definable monadic second order tree description language 
technical report sfb seminar fur universitat tubingen 
