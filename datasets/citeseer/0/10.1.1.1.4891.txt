planning monitoring web service composition pistore bertoli traverso university trento italy pistore dit unitn itc irst trento italy bertoli traverso irst itc 
ability automatically compose web services monitor execution essential step substantially decrease time costs development integration maintenance complex services 
exploit techniques planning model checking approach automatically compose web services synthesize monitoring components 
relying flexible technology able deal difficulties stemming unpredictability external partner services internal status presence complex behavioral requirements 
test approach simple realistic example results provide witness potentiality approach 
keywords 
planning web services automated composition planning model checking 
emerging paradigm web services provides basis interaction coordination business processes distributed different organizations exchange services cooperate provide better services third parties organizations individuals 
big challenges web services provision computer automated support composition service oriented distributed processes order decrease efforts time costs development integration maintenance 
ability automatically plan composition web services monitor execution essential step real usage web services 
bpel ws business process execution language web services emerging standard specification execution service oriented business processes 
bpel ws designed functions mind 
executable bpel ws programs allow specification execution processes internal organization internal processes 
hand bpel ws specifications specify publish invocations interactions external web services external protocols 
bpel ws offers natural starting point web service composition 
devise planning technique automated composition automated monitoring web services specified bpel ws processes 
automated composition allows providing services combine possibly distributed services order achieve business goal 
starting description external protocols expressed bpel ws specification business requirement process goal satisfy expressed proper goal language planner synthesizes automatically code implements internal process exploits services partners achieve business goal 
code expressed process execution language executable bpel ws 
planning techniques exploited automatically generate monitor process piece code able detect signal external partners behave consistently specified protocols 
vital practical application web services 
run time may take place automatically composed possibly validated services due failures underlying message passing infrastructure due errors changes specification external web services 
order achieve results planner address difficulties typical problems planning uncertainty nondeterminism planner foresee actual interaction take place external processes predict priori answer request availability positive negative user confirm acceptance service partial observability planner observe communications external processes access internal status variables 
instance planner know priori list items available selling service 
extended goals business requirements involve complex conditions behavior process final state 
instance require process gets state buys item costing available budget 
requirements need express conditional preferences different goals achieve 
instance process try reserve confirm flight hotel different service providers services available fall back cancel reservations 
address problems developing planning techniques planning model checking approach devised deal nondeterministic domains partial observability extended goals 
protocol specification available external services seen nondeterministic partially observable domain represented means finite state machine 
business requirements expressed eagle goal language drive search domain order synthesize plan corresponding internal process defining web service composition 
plan generation takes advantage symbolic model checking techniques compactly represent search space deriving nondeterministic partially observable domains 
planner generates monitors automata trace evolutions external processes run time observations interactions external services 
run time monitoring performed checking actual interactions admitted monitor way incorrect interactions detected 
symbolic techniques represent compactly belief states perform monitoring effectively 
define formal framework planning composition monitoring distributed web services describe explanatory example implement planning algorithm mbp planner 
provide experimental evaluation witnesses potentialities approach 
web service composition domain example consists providing furniture purchase delivery service 
combining separate independent existing services furniture producer delivery service 
describe protocols define interactions existing services 
protocols seen high level descriptions bpel ws external protocols define services real application 
protocol provided furniture producer depicted fig 

protocol active request article article may available case signalled request applicant protocol terminates failure 
case article available applicant notified informations product protocol stops waiting positive negative continues stops failing 
applicant decide offer acceptable service provides cost production time protocol waits positive negative time terminating case success failure 
protocol provided delivery service depicted fig 

protocol starts request transporting object size location 
possible case applicant notified protocol terminates failing 
cost delivery time computed signalled applicant protocol suspends positive negative terminating success failure resp 
reception 
idea combining services user may directly ask combined service purchase deliver article place 
exploit description expected protocol user execute interacting service 
depicted fig 

user sends request get article location expects signal possible case protocol terminates failing offer indicating price cost service 
time user may accept refuse offer terminating interaction cases 
avail nack user fail start fail succ request offer ack fig user protocol request article loc avail offer cost delay ack nack avail fail nack fail fig composed web service start succ request offer ack fig shipper protocol request article avail info size offer cost delay ack nack request size loc avail offer cost delay ack nack producer shipper avail fail nack fail nack fail fig 

protocols combination 
start succ request sizeof info ack offer ack fig producer protocol typical nominal interaction user combined purchase delivery service producer shipper go follows 
user asks certain article wants transported location 
asks producer data article size cost time take produce 
asks delivery service price cost transporting object size 
provides user proposal takes account cost plus added cost time achieve goal 
user confirms order dispatched delivery producer 
course nominal case interactions considered cases producer delivery services able satisfy request user refuses final offer 
high level block schema fig 
describes data flow integrated web service services composing user 
planning model checking planning model checking framework general framework planning uncertainty 
allows non determinism initial state outcome action execution 
allows modeling planning domains different degrees run time observability domain state partially visible sensing expressing temporally extended planning goals goals define conditions sequences states resulting execution plan just final states 
planning domains plans framework domain model generic system dynamics 
plan modeled system internal dynamics monitors evolution domain means observations describing visible part domain state controls evolutions domain triggering actions 
planning domain defined terms states actions accepts possible observations domain exhibit 
states marked valid initial states domain 
transition function describes execution action leads state possibly different states 
observation function defines observation associated state domain 
definition planning domain 
nondeterministic planning domain partial observability tuple set states 
set actions 
set observations 
set initial states require 
transition function associates current state action set states 
observation function 
interested complex plans may encode sequential conditional iterative behaviors expressive dealing partial observability extended goals 
model finite state machines follows 
definition plan 
plan domain tuple set plan contexts 
initial context 
action function associates plan context observation action executed 
context evolutions function associates plan context observation new plan context 
contexts internal states plan permit take account knowledge gathered previous execution steps 
actions executed defined function depend observation context 
action executed function updates plan context 
functions deterministic consider nondeterministic plans partial plan may undefined context observation pairs reached plan execution 
planning partial observability planning partial observability plan executor general get know exactly current state domain limited available sensing inhibits removing uncertainty initial execution step introduced executing nondeterministic actions 
plan execution step plan executor consider set domain states equally plausible initial knowledge observed behavior domain far 
set states called belief state 
executing action evolves belief belief contains possible states reached state notice hazardous actions may exist applicable states current belief 
actions considered plan execution may lead undesired execution failures 
available sensing exploited initially action execution observation holds executing action resulting belief shall rule states compatible general belief performing action executable account obtained observation gets new belief evolve evolve 
planning partial observability generally interested knowledge goals goals defined terms knowledge level conditions form hold iff state current belief satisfies planning framework consists searching possible evolutions initial beliefs retrieve conditional course actions leads beliefs satisfying goal 
search space partially observable domain called belief space nodes beliefs connected edges describe evolve function 
notice space inherently nondeterministic nature stemming fact different observations may obtained executing action belief 
search partially observable domain described search inside fully observable belief level domain dk states beliefs nondeterministic transition function mimics evolve 
definition knowledge level domain 
knowledge level domain domain tuple dk ib tb xb 
defined domain ib set initial beliefs beliefs compatible initial observation value 
tb transition function maps current belief action set beliefs tb evolve 
xb associates belief observation xb planning partial observability performed executing algorithms full observability associated knowledge level domain 
result holds fact ground level domain knowledge level goal dk knowledge level domain gk goal interpreting dk interpreting formulas formulas hold beliefs containing states satisfy 
valid plan valid plan gk dk 
potential problem approach cases domain exponentially larger ground domain approach viable practice 
efficient heuristic techniques defined avoid generating knowledge level planning domain 
key idea generate relevant subset heuristics deciding worth directions expand 
works currently limited reachability knowledge goals idea applied general goals ones described subsection 
notice knowledge level domain describes valid observable behaviors domain 
fruitfully exploited monitor observed domain behavior consistent domain model 
planning extended goals originally planning model checking framework exploited ctl temporally extended goal language 
motivated fact ctl allows expressing temporal behaviors take account non determinism domain 
planning ctl goals studied hypothesis full observability general case partial observability 
practical cases ctl inadequate planning express different kinds goals relevant nondeterministic domains 
nondeterministic domains may impossible guarantee condition satisfied possible execution paths 
necessary define recovery conditions second preference goals taken account fulfillment main goal impossible 
unfortunately ctl impossible express goals try achieve condition case failure achieve condition 
ctl able capture requirement plan best achieve condition possible 
second ctl able express preferences goals 
eagle designed purpose overcome limitations ctl provide language temporally extended planning goals non deterministic domains 
propositional formulas prop define conditions states planning domain 
extended goals prop defined follows fail repeat goal specifies condition eventually reached strong way non deterministic outcomes plan execution 
similarly goal specifies property maintained true despite non determinism 
goals weaker versions goals plan required possible achieve condition maintain condition failure accepted unavoidable 
operators embed notion intention lacking ctl operators ef require plan possibility achieve goal 
construct fail model preferences goals recovery failure 
precisely goal considered 
achievement maintenance goal fails goal recovery second choice goal 
consider goal fail sub goal requires find plan tries reach condition execution plan state may reached possible reach state reached goal fails recovery goal considered 
goal requires achieve goal move goal 
goal repeat specifies sub goal achieved cyclically fails 
goal requires achievement subgoals 
formal semantics planning algorithm eagle goals fully observable domains 
planning web service composition section describe techniques provided planning model checking framework applied solve problem planning monitoring web service composition 
modeling domain step model domain put position synthesize combined web service model protocols external partners planning domain definition 
states domain codify states protocol current values variables contents input output channels 
modeling state protocol variables straightforward 
instance case shipper protocol possible states start holds initially fail succ indicates protocol termination failure success respectively associated intermediate phases protocol 
internal variables involved shipper protocol describe size required item required delivery location cost time service 
finitely ranged variable undefined value indicates variable initialized 
modeling channels complex channel features channel state empty full case full auxiliary variables store values carried channel 
instance case shipper input channel request conveys item size location data modeled variables request status request size request loc 
actions model correspond channel read write operations operations available external agent controlling evolution protocol 
receive action executed output channel protocol full execution empties channel updates protocol state 
send action hand possible empty input channel protocol input channel carries values action specifies actual values transmitted channel action executed channel marked full transmitted values stored appropriate channel variables 
transitions model capture different aspects evolution system 
side describe update channel variables due send receive actions executed agent interacting protocol 
side model internal evolution protocol 
internal evolution may correspond receive send operations complementary send receive actions executed externally 
may correspond updates internal variables assignment steps protocols executed 
model possibility protocol idle op operation performed protocol transition 
case updates occur transition related send receive actions external agent 
observations protocol limited status input output channels values contained channel read 
monitoring web service interaction construction defined defines ground domain external partners 
ground domains perform power set construction described definition obtain associated knowledge level domain 
describes admissible observable behaviors domain particular plausible message sequences domain service partners monitor behaviors external partners conform protocol 
monitor able detect protocol violations run time trigger appropriate handling failure 
easy extend time mechanism trap undesired condition portion protocol stuck 
planning web service composition goal planning task synthesize process interacts external processes order provide purchase delivery service users 
planning domain consists combination ground level domains external partners 
formally combination synchronous product allows protocols evolve independently parallel 
business goal described follows 
service try reach ideal situation user confirmed order service confirmed associated sub orders producer shipper services 
situation data associated orders mutually consistent time building delivering furniture shall sum time building delivering 

failure goal user refuses offer service absolutely reach fall back situation sub order canceled 
chance service committed sub order user cancels order 
goal expressed eagle formula clauses represents portions requirement 
user succ producer succ shipper succ user add delay producer shipper user add cost producer shipper fail user fail producer fail shipper fail capabilities expressing failure eagle essential 
notice planning goal interpreted knowledge level executor wants reach state knows successful situation reached reach state knows orders called 
planning domain partially observable executor process want synthesize 
solving problem implies dedicated algorithms planning partial observability eagle goals alternatively planning fully observable associated knowledge level domain interpreting goal ground goal knowledge level goal 
pursue approach reuse existing eagle planning algorithms full observability 
proceed follows 
generate knowledge level domain combining monitors defined previously 
similarly happens ground level domains computation consists synchronous product 
inside knowledge level domain mark success belief states contain states satisfying ideal condition services tries reach user succ producer succ shipper succ user add delay producer shipper user add cost producer shipper empty channels failure belief states contain states satisfying condition service reach case preferred objective fails user fail producer fail shipper fail empty channels 
plan domain respect eagle goal success fail failure 
fact guarantees approach outlined planning partial observability eagle goals correct complete 
experimental results order test effectiveness performance approach described conducted experiments mbp planner 
extensions planner necessary purpose 
implemented procedure translating protocols similar ones described fig 
ground level planning domains represented input language mbp 
second implemented routine performs power set construction definition builds monitors corresponding external protocols 
mbp provides algorithms planning eagle goals exploited step planning algorithm 
run mbp variants case study considered different degrees complexity 
easiest case case considered reduced domain user shipper possible value type objects domain article location delay cost size 
case considered protocols possible value type object 
case considered protocols objects type removing parts shipper producer protocols concerning size product 
case complete protocol 
case case test algorithms admittedly unrealistic process knows interaction starts article user ask cost charged user 
case case real composition services necessary satisfy goal 
cases experimented variant shipper protocol allow action nack 
experiments executed intel pentium ghz mb memory running linux 
results fig 
report information generate time necessary generate mbp description knowledge domains description external protocols 
time necessary parse build internal mbp models corresponding monitors external protocols models built possible monitor real time evolution protocols 
time necessary parse build internal mbp model combination knowledge level domains 
shipper nack shipper nack generate planning result planning result case sec 
sec 
sec 
sec 
sec 
case sec 
sec 
sec 
sec 
sec 
case sec 
sec 
sec 
sec 
sec 
case sec 
sec 
sec 
sec 
sec 
fig 

results experiments 
planning time required find plan check plan exists starting planning domain built previous step 
result plan 
results reported original domains domains nack handled shipper 
experiments show planning algorithm correctly detects possible satisfy goal remove nack action handling shipper unroll contract shipper satisfy recovery goal failure case failure main goal 
mbp able complete planning monitor construction tasks decreasing performance complexity protocols grow 
currently serious bottleneck time required build internal mbp representation knowledge level planning domain 
due usage dumb algorithm generation knowledge level domain currently file specifying domain case mb long 
optimized algorithm drastically reduce time 
long time required planning case algorithm finds plan case plan due time required extract plan existence plan proven 
plan extraction time optimized exploiting specific form plans domains investigation 
related define implement experiment framework planning composition monitoring bpel ws web services 
far know previous attempt automatically plan composition monitoring service oriented processes takes account nondeterminism partial observability extended goals 
problem simulation verification automated composition web services tackled semantic web framework mainly daml ontology describing capabilities web services 
authors propose approach simulation verification automated composition web services translation daml situation calculus petri nets possible reason analyze prove properties automatically compose web services 
far understand framework automated composition limited sequential composition atomic services reachability goals consider general case possible interleavings processes extended business goals 
petri nets expressive framework algorithms analyze chances scale complex problems compared symbolic model checking techniques 
different planning approaches proposed composition web services regression planning extensions pddl deal nondeterminism partial observability generate conditional iterative behaviors style bpel ws frameworks open issue 
planning techniques applied related orthogonal problems field web services 
interactive composition information gathering services tackled csp techniques 
interleaved approach planning execution planning technique exploited provide viable plans execution composition specific query user plans turn violate user constraints run time re planning task started 
works field data computational grids moving problem composing complex workflows means planning scheduling techniques 
results reported preliminary significant extensions planned 
plan extraction routine eagle planning algorithm powerset construction knowledge level planning domain currently far optimized experiments show constitute bottleneck 
intention short term redesign exploit structure problem exam resulting plan 
computationally complex powerset construction knowledge level domain avoided altogether providing algorithms natively planning extended goals partial observability 
main goal research line preliminary result appears focusing ctl goal language 
extension eagle language exploitation symbolic representation techniques problem far trivial 
intend extend experimentation set realistic case studies expressed bpel ws language require extension mbp natively handle language 
andrews curbera goland klein leymann liu roller smith thatte 
business process execution language web services 
ankolekar 
daml web service description semantic web 
proceedings st international semantic web conference iswc 
bertoli pistore 
planning extended goals partial observability 
proceedings 
published 
bertoli cimatti roveri traverso 
planning nondeterministic domains partial observability symbolic model checking 
nebel ed proceedings ijcai 
morgan kaufmann publishers 
bertoli cimatti pistore traverso 
framework planning extended goals partial observability 
proc 

bertoli cimatti roveri 
conditional planning partial observability heuristic symbolic search belief space 
proceedings ecp 
blythe deelman gil 
planning workflow construction maintenance grid 
proceedings workshop planning web services 
bonet geffner 
planning incomplete information heuristic search belief space 
proc 
aips 
dal pistore traverso 
planning language extended goals 
proc 
aaai 

planning domain definition language manual 
technical report yale computer science university 
cvc report 
emerson 
temporal modal logic 
van leeuwen ed handbook theoretical computer science volume formal models semantics 
elsevier 
aiello papazoglou 
planning monitoring execution web service requests 
proceedings 
narayanan mcilraith 
simulation verification automated composition web services 
proceedings www 
pistore traverso 
planning model checking extended goals nondeterministic domains 
proc 
ijcai 
pistore traverso 
symbolic techniques planning extended goals non deterministic domains 
proc 
ecp 
knoblock ambite 
view integration approach dynamic composition web services 
proceedings workshop planning web services 
wu parsia sirin hendler nau 
automating daml web services shop 
proceedings iswc 
