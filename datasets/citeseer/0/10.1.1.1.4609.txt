vldb journal digital object identifier doi psoup system streaming queries streaming data chandrasekaran michael franklin department electrical engineering computer sciences university california berkeley berkeley ca usa mail franklin cs berkeley edu edited ramakrishnan 
received september revised version february published online july springer verlag 
querying data streams focused systems newly arriving data processed continuously streamed user real time 
emerging applications ad hoc queries intermittent connectivity require processing data arrives prior query submission period disconnection 
applications developed psoup system combines processing ad hoc continuous queries treating data queries symmetrically allowing new queries applied old data new data applied old queries 
psoup supports intermittent connectivity separating computation query results delivery results 
psoup builds adaptive query processing techniques developed telegraph project uc berkeley 
describe psoup experiments demonstrate effectiveness approach 
keywords stream query processing query data duality disconnected operation proliferation internet web sensor networks fueled development applications treat data continuous stream fixed set 
telephone call records stock sports data feeds sensors examples streaming data 
number systems proposed address mismatch traditional database technology needs query processing streaming data 
contrast traditional dbmss answer streams queries database continuous query cq systems treat queries fixed entities stream data 
previous systems allow queries data streamed result support queries require access data arrived supported part national science foundation itr iis si ibm microsoft siemens uc micro program 
data arrive 
furthermore existing cq systems continuously deliver results computed 
situations continuous delivery may infeasible inefficient 
scenarios data recharging data recharging process personal devices pdas periodically connect network refresh data contents 
example consider business traveler wishes stay information ranging movements financial markets latest football scores certain historical window 
interests encoded queries executed remote server results downloaded user pda connected network infrastructure 
monitoring consider user wants track interesting pieces information number music downloads subnet hour postings slashdot www slashdot org score greater certain threshold 
online user periodically wish see summaries activity interrupted update aggregated users bandwidth server load wasted transmitting data accessed significant efficient approach return current results standing query demand 
support applications propose psoup query processor telegraph query processing framework 
core insight psoup allows support applications data queries streaming importantly duals processing viewed join query data streams 
addition psoup partially materializes results support disconnected operation improve data throughput query response times 
overview system user interacts psoup initially registering query specification system 
system returns handle user repeatedly invoke results query times 
user explicitly unregister previously specified query 
example query specification shown chandrasekaran franklin psoup system streaming queries streaming data data stem query stem streaming data sources build data fig 

outline solution probe probe symmetric join psoup select data stream build queries clients psoup supports monotonic select queries conjunctive predicates 
queries contain clause specifies input window query results computed 
assume system clock time define ends input window time window applies streams clause 
stream logical counter number tuples stream ideas adapted allow logical windows windows sizes specified number tuples system clock time 
relatively straightforward extend implementation support application different sized windows stream 
arguments clause constants absolute values specified relative current system clock keyword 
clause allows specification snapshot constant time constant time landmark constant time variable time sliding window variable time variable time semantics queries 
psoup currently implemented main memory engine acceptable windows limited size memory 
internally psoup views execution stream queries stream data join streams illustrated fig 

refer process query data join 
system stores queries data structures called state modules stems 
query stem query specifications system data stem data stream 
shows example data stream 
client registers query inserted query stem probe data stem 
application new queries old data psoup executes queries historical data 
similarly new data element arrives inserted data stem probe query stem 
act applying new data system currently allow nested subqueries 
constraint inherent treatment queries data 
implementation subqueries disjunctions subject 
old queries psoup supports continuous queries 
cases results probes materialized results structure shown 
query invoked current input window computed clause current value 
window applied materialized values retrieve current results 
materialization key efficient support set semantics continuous queries 
contributions propose scheme efficiently solves problem intermittently repeated snapshot landmark sliding window queries streaming data historical window 
explore trade computation required materialize maintain results query response time invocation queries 
demonstrate advantages treating data queries streams duals 
idea key solving problem processing queries access data arrived query registration data arrive 
second evaluation optimized appropriate algorithms join data query streams 
third leverage eddies adaptively respond changing characteristics data query specification streams :10.1.1.34.8546
develop techniques share computation storage different query results 
index predicates share computation incremental maintenance standing queries 
storage results query data join computation key psoup ability support intermittently connected operations 
share storage base data results standing queries avoiding copies 
remainder structured follows 
section discusses related 
sects 
describe psoup executes selection join queries 
results experiments sect 

section discusses issues involving aggregation queries specific interest psoup 
sect 
directions 
related psoup part telegraph project uc berkeley 
spans continuous queries triggers materialized views 
continuous queries large volume continuous queries 
broadly discuss different classes continuous queries cq semantics languages cq engines sequence operators 
cq semantics languages class related literature describes semantics standing queries streams data 
chandrasekaran franklin psoup system streaming queries streaming data terry studied continuous queries filter documents sql language 
define continuous semantics follows result continuous query set data returned query executed instant 
definition define monotone queries output times strictly nondecreasing time 
system describe tapestry executes simple monotone queries handle aggregates outer joins 
definition algebra query language cq engines involving relations sequences tuples subject current research telegraphcq stream projects 
chandrasekaran motwani describe preliminary specification respective semantics languages 
seshadri discuss problem defining executing queries sequenced data 
notion scope input define windows computation performed 
consider queries produce singleton tuple output input window 
methods costing optimizing sequence queries 
gehrke describe classes windowed queries landmark sliding window queries 
landmark windows extend fixed point stream latest tuple sliding windows fixed size ends window moving new tuples appear stream 
bonnet describe different kinds queries streaming data historical snapshot long running queries 
define historical queries queries tuples timestamps span range past 
snapshot queries defined set streaming sources single point time past 
define long running queries standing queries continually return answers new data appear 
sadri propose language sql ts express sequence sensitive operations windows stream 
allowing queries explicitly alias individual tuples input window clause express queries utilize underlying sequence property tuples 
key feature sql ts ability define windows repeating patterns stream 
achieved associating mentioned aliases property holds consecutive tuples pattern 
alias refers entire subsequence property holds 
kanellakis define tuples constraint specifications tuples 
constraints value assignments predicates expressing data queries 
cq engines second class continuous queries interested various cq engines proposed literature 
sift selective document dissemination system allows users subscribe text documents specifying set weighted keywords 
earlier papers suggest reversal roles queries data filtering systems inverted index queries 
xfilter xml document filtering engine publish subscribe system 
builds finite state machine group efficiently apply various user profiles specified xpath incoming documents 
niagaracq xml engine supports continuous queries changing data typically web site data stock quotes updated periodically 
niagaracq builds static plans different continuous queries systems allows queries share operator query plans input operator query plans 
result queries applying filters different attributes stream sequence may share operation filter 
may share second output filter queries 
cacq earlier cq extension telegraph engine exploits adaptivity offered eddy operator efficiently handle skews data distribution arrival rates :10.1.1.34.8546
cacq introduced notion tuple lineage allow overcome limits sharing described niagaracq system 
ideas exploited psoup 
systems focus filter operators accept long sequence tuples input produce monotonically growing sequence output 
offer support queries historical data 
consider disconnected operations 
compared systems consider comprehensive workload allowing queries nonmonotonic sets inputs output allowing snapshot landmark sliding window queries 
techniques developed psoup query arrived data support disconnected operation integrated earlier cq systems 
ways psoup seen logical extension cq techniques handle intermittent set queries data 
fabret observe publish subscribe systems apply newly published events existing subscriptions match new subscriptions existing valid events 
focus grouping subscriptions optimizing matching process arrival new data suggest standard query processing techniques process new subscriptions 
architecture querying streaming sensor data 
proposes queues operators query plan mechanism combining push pull data sources 
new class systems called data stream management systems dsmss built various universities rethink aspect data management context streaming data 
telegraphcq generation telegraph system built uc berkeley focused meeting challenges arise handling large streams continuous queries high volume highly variable data streams 
builds ideas developed psoup cacq key features telegraphcq shared adaptive processing multiple queries 
telegraphcq leverages flux load balancing fault tolerance operator allows implemented cluster 
chandrasekaran franklin psoup system streaming queries streaming data stream dsms built stanford 
focuses issues memory requirements executing various types queries considering cost self maintenance different materialized views 
consider resource management issues including approximate query answering face limited resources 
concerned trade computation scratch storage sharing storage different queries 
aurora cq engine currently built jointly brown university brandeis university aurora uses network operators share computation different standing queries 
approach similar niagaracq 
aurora network contains connection points intermediate tables network ad hoc queries executed 
key goal aurora support quality service qos individual queries 
sequence operators research focused developing algorithms implementing operators perform specific functions sequenced data 
tribeca considers novel query modules streams multiplexers 
band join operator extends multiplexer operation allow skew time attributes streams 
lee study learn distributions stream detect anomalies 
gehrke consider problem computing correlated aggregate queries streams techniques obtaining approximate answers single pass 
yang discuss data structures computing maintaining aggregates streams 
efforts address complex special classes queries consider 
focus general select project join spj views simple classes aggregates 
triggers materialized views computation standing queries tuple windows similar trigger processing incremental maintenance materialized views 
triggerman scalable trigger system uses discrimination network statically compute optimal strategies processing trigger 
generalization rete treat algorithms 
chronicle data model defines algebra materialized view problem append data 
wave indices solution designed append data data warehousing scenario 
set indices maintained different time intervals data allow queries windowed input 
ensure high harvest fraction data answer query data old data expired new data arrive 
technique works hourly daily bulk data updates scale higher data arrival expiration rates 
query processing techniques section describe psoup processes stream queries having clause examples 
sect 
extend solution handle queries different clauses describe implementation detail 
overview described sect 
client begins registering query specification system 
query specifications form select select list list conjoined boolean factors time time psoup assigns query unique id called returns user handle invocations 
client go away disconnect return intermittently invoke query retrieve current results 
invocations query client psoup continuously matches data query predicates background materializes results matches results structure 
invocation query psoup computes current input window query clause applies results structure return current results query 
entry new query specifications new data describe background query data join processing greater detail 
defer discussion query invocation results structure sect 

psoup receives query specification splits query specification parts 
part consists select clauses specification refer standing query clause sqc 
second part consists clause stored separate structure called invocations query 
sqc inserted data structure called query stem 
sqc probe data stems corresponding tables clause 
data stems contain data tuples system 
results probe indicate data tuples satisfied sqc 
identities tuples stored results structure 
new data tuple enters psoup assigned globally unique tupleid physical timestamp called corresponding system clock 
data tuple inserted appropriate data stem data stem stream 
data tuple probe query stem determine satisfies 
describe sects 
data tuple probe data stems evaluate join queries 
results probe stored results structure 
describe process detail examples 
chandrasekaran franklin psoup system streaming queries streaming data id query stem predicate psoup initial state data stem id id query stem predicate select new query psoup build building query stem fig 

selection query processing entry new query query stem data stem id predicate id psoup initial state psoup build data stem id new data building data stem fig 

selection query processing entry new data selection queries single stream considering simple queries involve single data stream 
illustrates actions performed psoup new sqc enters system 
shows state query stem data stem system processed queries including data tuples including 
consider entry new sqc system shown fig 
omit clause 
standing query assigned inserted query stem adding entry stem 
time augment results structure fig 
new column store results query 
standing query sent probe data stem matched data tuple fig 

tuples satisfy query data tuples appropriate entries results structure marked true fig 

analogously shown fig 
new data tuple arrives added data stem sent query stem matched standing queries system 
lastly results structure updated 
join queries streams queries multiple data streams join queries approach treat processing multiple join queries join query stream data streams enumerated list queries 
generalize symmetric join accept input streams 
demonstrate solution example 
simplicity consider queries data streams shows actions performed psoup new match match probe psoup probing data stem id query stem predicate psoup probing query stem data stem id match match probe data data queries results structure inserting results queries results structure inserting results query enters system 
system processed data tuples including queries ids including 
data stems data stream 
single query stem query stream 
stems populated data queries 
consider arrival new standing query id step 
predicate factors involving 
query inserted query stem step 
query probe data stem 
loss generality assume query probes data stem 
match tuple data stem query tuple step 
query depends fully evaluated stage 
boolean factors completely evaluated filter tuples final result 
tuples satisfy boolean factors query values substituted join boolean factors relate streams substitution remains set boolean factors depends solely output hybrid struct matching tuple contents tuple augmented partially evaluated predicate query step 
hybrid structs produced probe data stem step 
tuple satisfies remaining boolean factors query results structure updated follows entry pair tupleid tupleid created inserted results structure pair exist 
entry marked reflect pair satisfied specific step 
consider entry new data tuple system fig 

inserted data stem probes query stem 
rest processing closely parallels description entry new query 
chandrasekaran franklin psoup system streaming queries streaming data new query psoup build id fig 

join processing entry new join query psoup new data build data stem id fig 

join processing entry new tuple predicates query stem probe observe redundancy hybrid structs shaded parts structs figures 
new sqc tuple repeated hybrid structs fig 
similarly new data tuple repeated hybrid structs fig 

results repeated computation probes step 
redundancy techniques remove described detail sect 

way join queries multiple streams section describe psoup executes joins streams 
extending approach described way joins psoup executes join queries data streams way symmetric join query specification stream data streams 
system maintains stem queries stem data streams 
new query specification enters system inserted query stem 
new query probe different data stems sequence 
sequence statically predetermined chosen adaptively fly case way joins hybrid structs generated probe 
consider probe data stem stores tuples 
tuple satisfies component probing predicate boolean factors probing predicate depend solely hybrid struct produced substituting tuple attribute values join boolean factors involving 
hybrid structs probe data stem probe sequence 
id probe query stem data stem id predicates matches matches probe data stem id hybrid structs id results set result data stem probe union results set result hybrid structs results structure results structure data stems probed results structure updated reflect tuples satisfied query 
consider entry new data tuple system 
assume tuple belongs 
data tuple inserted appropriate data stem 
psoup constrains data tuple probe query stem probes data stems 
tuple evaluate component query specifications stored 
query component satisfied data tuple hybrid tuple produced substituting data tuple attribute values join boolean factors involving 
hybrid structs produced probe data stems 
earlier order probes predetermined determined adaptively 
interesting note technique executing joins streams rely intermediate tables store hybrid structs 
savings memory cost due intermediate tuples crucial main memory engine psoup 
reduction storage requirements achieved expense increased repeated probes 
intermediate tables potentially incomplete respect base data streams query plan scrambled intermediate table longer generated 
situation care required ensure missing duplicate results exist 
techniques combining adaptive processing techniques constraint imposed probe data stem tuple containing predicate component result cross product probing tuple stem 
chandrasekaran franklin psoup system streaming queries streaming data storage intermediate results investigation telegraph group berkeley 
query invocation result construction section describe results structure processing performed psoup return query results previously specified query invoked 
results structure maintains information tuples data stems satisfied query stem 
result tuple query stores constituent base tuples result tuple 
results structure updated continuously query data join described sect 

results query accessed 
addition results ordered indexed tuple timestamp efficient retrieval results time window 
consider user request current result previously specified query 
recall sect 
clauses query specifications stored 
clause retrieved table current values endpoints input window determined 
virtue background symmetric join processing psoup data system joined sqc query specification results query data join results structure 
psoup engine directly access structure apply current input window query contents retrieve base tuples current result tuples 
actual tuples retrieved data stems returned client 
single stream queries retrieval current window timestamp result tuples straightforward 
join queries process difficult results composed multiple base tuples timestamp 
describe sect 

projections performed just time query invoked concurrent result construction 
duplicate elimination required done point 
implementation sect 
went basic framework solution simple examples 
describe implementation psoup telegraph system 
principal components solution relation symmetric join operator results structure 
heart relation symmetric join operator inserts new data queries appropriate storage structures uses probe storage structures 
storage structures provide insert probe methods data queries 
eddy stem mechanisms provide framework adaptive relation symmetric joins :10.1.1.34.8546
designed different context 
eddies originally conceived tuple router traditional join operators 
stems proposed data structures shared different join operations 
effect stems eliminate join modules leaving eddy active agent effecting join 
stems designed store queries eddies designed route 
addition simultaneous evaluation multiple standing queries storage results require tracking states 
changes needed telegraph support additional functionality psoup described 
eddy eddy implemented single thread performs picking data tuple route queue called tuple pool sending join operators routing policy 
allow eddy route hybrid structs addition data entities encoded tuples 
done creating predicate attribute represent possibly partially evaluated queries having tuples contain data predicate attributes 
addition data predicate attributes tuple contains list called interest list enumerates stems routed tuple considered completely processed 
list interface tuple eddy 
eddy oblivious underlying types tuples routes 
picks destination tuple information tuple interest list 
subtle difference flavors eddy described avnur hellerstein madden psoup eddy :10.1.1.34.8546
leads different semantics results output systems query 
say query processor produces stream prefix consistent results materializes entire effects processing older tuple data query output materializes effects processing newer tuple 
times complete set results materialized system identical results completely executing prefix query stream prefix data stream 
property serializes effects new tuples query data enter system 
stream prefix consistency basis ability support windowed queries data streams 
psoup eddy provides stream prefix consistency storing new temporary tuples separately new tuple pool ntp temporary tuple pool ttp respectively 
psoup eddy begins picking tuple ntp processing temporary tuples ttp picks new tuple ntp 
higher priority tuple pool store flight tuples serializes effects new tuples results structure order enter system maintaining stream prefix consistent state times 
previous versions eddy guarantee stream prefix consistency property 
due single tuple pool store new tuples temporary hybrid structs tuples flight join query 
chandrasekaran franklin psoup system streaming queries streaming data stems stems data structures provide insert probe methods contents 
psoup implements stems interface store data queries 
performance stems highly inefficient data queries probed sequentially boolean factors tested individually manner described sect 

indices speed operations data queries 
data stem data stems store index base data stream 
data stem stream enters system 
psoup supports range queries need treebased index data provide efficient access probing queries 
tree attribute stream 
main memory implementation red black trees chosen efficient low maintenance cost 
query probes data stem different boolean factors query probe corresponding indices results probes intersected yield final result 
technique intersect individual probe results similar query stems described sect 

data stem maintains hash index fast access result construction 
query stem query stems store index queries 
query stem entire system allowing sharing queries different overlapping clauses 
data desirable index queries quick shared evaluation probes 
numerous predicate indices proposed literature 
index similar proposed cacq red black trees index single attribute boolean factors query 
relation tree boolean factors attribute appears sqc 
trees indexed constant appears expression relop 
support range predicates nodes red black tree enhanced shown fig 

node contains arrays store boolean factors map node 
array relational operator 
probe query index data tuple ri equality search performed query index data value ri search key 
equality boolean factors match data quickly identified node search key maps 
index scan solve inequality queries 
psoup currently implemented main memory system restrict data stems keep data certain maximum window specified system parameter 
supporting queries data streams archived disk subject 
query query 
query query 
fig 

predicate index expression boolean factors captures single attribute boolean factors 
queries multiattribute selection join boolean factors form relop 
boolean factors indexed stored single linked list called 
query split different predicate indices need technique results probes different structures 
query stem contains array cell corresponds query specification 
probe data tuple value cell reset number boolean factors corresponding query 
course various probes time data tuple satisfies boolean factor value corresponding cell array decremented 
cell value zero probe indicates data tuple satisfied query 
results structure major component solution results structure accessed user invokes query retrieve current results query 
results structure stores metadata indicates tuples satisfied 
current main memory implementation psoup stores data certain maximum window results corresponding expired data queries removed system dropped 
different implementations results structure 
implementation described sect 
dimensional bitmap 
separate bitmap list appears 
rows bitmap ordered timestamp data 
columns ordered id query 
indices provided 
second implementation results structure associates query linked list containing data tuples satisfied 
decision alternate structures trade obviously general mechanism combination probe results needed wish support complicated query expressions involving conjunctions disjunctions predicates 
subject 
chandrasekaran franklin psoup system streaming queries streaming data storage requirements possibly sparse bitmap dense linked list 
mentioned results sorted indexed tuple timestamp speed application input window query invocation 
straightforward queries result tuples single timestamp 
results join queries hand composed multiple base tuples having timestamp 
timestamps significant earliest latest serve bound age result tuples 
results structure associates timestamps result tuple 
question arises timestamps earliest latest sort index results 
expect queries typically landmark sliding queries clause edge window defined data tuples system older result edge window common case filter results 
older timestamp significant efficient result retrieval order results 
implementing psoup traditional setting far described implementation psoup framework telegraph project innovative query processing architecture provided eddy stem operators 
section briefly investigate issues involved implementation psoup traditional query processing setting treats queries data differently employs static query plans 
main components psoup operation background query data join query invocation 
implementation described sect 
function directly applicable traditional query processor 
main challenge implementing psoup traditional query processor executing background query data join 
mentioned earlier context publish subscribe systems fabret looked application subscriptions events appeared subscription 
traditional query processing techniques suggested new subscriptions previous events subscriptions stored triggers system subsequent processing events 
seek solution treats queries subscriptions data events truly symmetric manner 
key features implementation psoup separate traditional query processor encoding queries hybrid structs tuples consequent implementation joins sequence expression evaluations absence intermediate tables shared processing multiple queries adaptive query plan 
step implementing query data join traditional query processor static query plans encoding queries hybrid structs tuples 
done creating user defined type store predicates breaking clause constituent boolean factors encoding boolean factor separate tuple 
example boolean factor constrained form reln attr relop reln attr const component expression encoded different attribute keyed 
case kinds joins traditional query processors joins compare values attributes data tuples 
joins expression evaluating operators take tuple stream data stream inputs tuples data stream evaluate predicates 
issue needs addressed shared processing different query specifications 
psoup treats queries belonging single query stream 
eddy uses interest list distinguish query tuples different clauses route differently data stems 
traditional query processors hand route tuples stream relation fashion 
query tuples split different streams relations executed 
query tuple streams joined different set base data streams results joined answer original client queries 
reasons telegraph provides suitable substrate traditional query processors implementation psoup 
performance described psoup implements duality queries data apply new queries old data new data old queries 
section investigate performance psoup focusing query invocation data arrival rates supported system different query workloads input window sizes 
mentioned earlier psoup part telegraph project uses extends concept eddies stems 
need encode queries tuples difference mechanisms anding boolean factors psoup cacq tuple format psoup differs formats non cq version telegraph cacq 
implemented new versions eddy stems 
rest telegraph system psoup implemented java 
section examine performance different implementations system psoup partial psoup psoup complete psoup 
psoup implementation described earlier sections results corresponding maintained results structure clauses applied retrieve current results query invocation 
psoup hand continuously maintains results corresponding current input window query linked lists 
comparison purposes include measurements system nomat materialize results executes query scratch invoked 
nomat uses indices data queries psoup systems 
selection query contains boolean factor fix order application predicates selective boolean factors applied 
table chandrasekaran franklin psoup system streaming queries streaming data join queries experiments nomat uses index nested loop joins 
storage requirements turning experiments useful examine storage requirements system 
nomat storage cost equal space taken store base data streams maximum window queries supported plus size structures store queries 
psoup partial addition costs incurred nomat psoup pays cost results structure uses bitarray linked list store results depending whichever takes storage 
cost option depends number standing queries stored system maximum window queries asked 
cost approach depends result sizes imposition time window 
set experiments described chose bitarray implementation psoup results structure 
psoup complete psoup psoup pays cost storing results addition costs paid nomat systems 
psoup stores current results standing queries time 
normal loads expect psoup substantially higher storage requirements psoup uses dense bitarray 
computational performance environment targeted psoup new query specifications arrive frequently rate existing query specifications invoked 
primarily concerned minimizing query response times 
measure response time query invocation varying input window size query complexity wish measure maximum data arrival rate supported system 
maximum rate depends relative costs computation devoted processing entry new data tuples computation spent maintaining windows results generated 
server saturated costs maximum data arrival rate support 
inherent trade response times data arrival rates 
lazy evaluation nomat suffers poor response time having maintenance costs 
eager evaluation done psoup offers excellent response time increased maintenance costs 
psoup eagerly evaluates clause query specifications adopts lazy approach respect imposition time windows specified clause 
performance lies approaches 
implementation tried minimize size overhead java objects primitive data types custom built collections data types possible 
table 
independent parameters experiments parameters range values input window size tuples query specifications boolean factors experimental setup mentioned sect 
implemented psoup java 
order evaluate performance ran number experiments varied window sizes number type boolean factors equality inequality single relation queries measured response time query invocations different conditions 
addition response time query invocations looked maximum data arrival rate supported system 
compared maximum data arrival rates supported implementations psoup psoup predicate indices 
studied scheme remove type redundancy arises join processing described sect 
measured performance different workloads 
experiments run unloaded server intel pentium iii mhz kb chip cache processors 
server mb ram 
psoup run completely physical memory concerned disk space io 
sun java hotspot tm client vm version linux kernel 
order ensure repeatability experiments synthetically generated query data streams compare approaches range application scenarios 
validated results obtained synthetic streams repeating tests real traces traffic sensors 
summarize results experiments sect 

data values uniformly distributed interval 
order stress system tuples stream available instantaneously variable delay consecutive tuples stream 
madden demonstrated advantages adaptive query processing gained applying eddies framework cq processing 
results apply setting 
single relation boolean factors form relop value constant chosen uniformly multiple interval probability uniformly entire range probability 
multimodal distribution approximate query workload items interesting 
join queries exactly multiple relation boolean factor done isolate effects join multiple relation boolean factors form relop distribution selection queries 
entire set stored queries invoked repeatedly different points time 
observations averaged yield mean response time queries time 
chandrasekaran franklin psoup system streaming queries streaming data response time query msec response time query msec nomat psoup psoup window size tuples nomat psoup psoup window size tuples fig 
response time select queries 
equality predicates 
interval predicates response time vs window size set experiments describe measures time taken respond select join query invocations increasing input window sizes 
shows response time query selection queries equality predicates fig 
shows metric selection queries interval predicates 
interval predicates formed combining single relation inequality boolean factors attribute size interval uniformly distributed range 
note axes plots logscale values axes multiplicative factor 
workloads queries predicates 
response times increase systems increasing window sizes 
nomat increased query execution time 
psoup caused increase length bitarray results structure 
response time query msec nomat psoup psoup window size tuples fig 

response time join queries psoup increase cardinality results 
expected response time workloads nomat worse 
psoup performs worse psoup orders magnitude equality queries need traverse entire bitarray size maximum input window query irrespective size result 
reason performance psoup change equality inequality queries response times mat psoup solutions higher inequality queries equality queries greater data index traversal larger result sets 
performance psoup psoup comparable inequality queries 
shows response time table inequality join queries varying input window size 
case axis uses linear scale axis shows window size table join 
result size aggregated queries proportional square window size 
range window size smaller selection queries 
response time nomat orders magnitude worse psoup systems 
psoup order magnitude worse psoup example window size response time psoup ms psoup ms conclude experiment expected systems perform background computation store results offer better response times 
response time vs interval predicates experiment describe measures response time inequality selection queries vary number conjoined interval predicates query 
queries contain interval predicate attribute appeared sqc 
input window size fixed second largest window size shown fig 
selection queries queries 
results shown table 
chandrasekaran franklin psoup system streaming queries streaming data table 
response time selection interval predicates response time milliseconds interval predicates nomat psoup psoup expected psoup solutions outperform nomat orders magnitude number interval predicates query 
interesting point note response time nomat increases number conjoined interval predicates due greater amount computation required response times psoup psoup decrease significantly 
behavior nomat explained increasing complexity queries executed invocation user 
relative performance psoup implementations explained cost result construction systems 
psoup constructs results dereferencing pointers data tuples stored linked list copying tuples psoup pay extra cost retrieving data tuples data stem index 
fact response times reduce increasing number interval predicates higher selectivity resulting queries correspondingly smaller result sizes 
interesting point switch relative performance psoup psoup go interval predicates 
explained follows 
queries interval predicate selectivity query poor relative inefficiency linked list traversal psoup compared bitarray traversal psoup outweighs fact fewer elements traversed 
increasing numbers interval predicates selectivity increases difference average size result sets input window pronounced dominate relative costs 
experiment shows nomat performs increasing numbers boolean factors 
psoup implementations comparable performance fewer boolean factors psoup performance improves dramatically due reduction result sizes selective queries 
data arrival rate vs turn attention maximum data arrival rates supported psoup varying numbers inequality selection query specifications system 
consider nomat experiment 
consider possible implementations psoup psoup predicate indices referred respectively 
comparison psoup psoup highlights effect lazy vs active maintenance results data arrival rates 
difference performance versions psoup predicate indices highlights savings computation achieved predicate indices 
maximum data arrival rate sec psoup psoup psoup psoup query specifications fig 

data arrival rate selection queries fully loaded server keeps query results current accepts new data 
relative costs activities help determine maximum data rate supported system number stored query specifications 
window size query specifications experiment fixed tuples 
results experiment shown fig 

axis uses logscale 
psoup solution performs best beats psoup system order magnitude psoup solutions orders magnitude 
interesting note cost maintaining results dominates cost incremental computation entry new data extent matter share computation indexing queries psoup implementations 
indicates wish support high data arrival rates psoup implementation choice 
interesting result experiment speedup achieved psoup psoup query indices increases increasing numbers query specifications 
happens boolean factors new query specifications increasingly fall old nodes predicate index keeping computation amount roughly 
experiment confirms expectation decision index queries maintain query results date adversely affect data arrival rate supported system 
summary results experiments demonstrate partial precomputation materialization results queries reduces response time query invocation 
third experiment shows indexing queries lazily applying windows improves maximum data throughput supported system 
choice psoup psoup implementations depends amount memory system psoup requires wish optimize query invocation rate psoup data arrival rate psoup 
chandrasekaran franklin psoup system streaming queries streaming data composite tuple data data composite tuple predicates predicate index fig 
join redundancy composite tuples 
single data 
single data multiple query removing redundancy join processing mentioned sect 
join processing discussed far perform redundant 
section describe redundancy show overcome 
entry query specification new data recall sect 
production hybrid structs processing new query specifications 
relevant part fig 
detailed processing new join query streams reproduced fig 
convenience 
hybrid structs produced query specification probes data stem share component original query 
boolean factor repeatedly probes data stem hybrid struct 
eliminate redundancy combining hybrid tuples produced probe rs query data stem single single data composite tuple fig 

shared component applied exactly 
interestingly sort merge join approach join set predicates set tuples data stem 
similar situation arises data added system 
hybrid structs produced processing new data share boolean factors 
relevant part fig 
reproduced fig 

identical boolean factors executed repeatedly data set data stem 
single data multiple query composite tuple fig 
conjunction sort merge join approach apply composite tuple data stem 
composite tuples joins experiment compares costs incremental computation arrival new join query specification streams composite tuples 
execution path new query specification shown fig 

join queries form relop relop relop 
isolate effect time sec eq ineq separate eq ineq composite ineq eq separate ineq eq composite ineq ineq separate ineq ineq composite number hybrid structs fig 

probe times composite tuples composite tuple steps involved join processing measure cost step join processing shown fig 

executing steps fig 
query predicates form value relop relop 
boolean factor shared hybrid structs 
compare cost probing data stem composite tuples cost probing individual hybrid tuples 
varying relop relop create different workloads 
set relop equals eq relop inequalities ineq 
second workload reverse 
final workload set inequalities 
results shown fig 

legend plot reflects choices relop relop equality inequality composite tuples composite separate 
note axis uses logscale 
eq ineq workload shared boolean factor equality highly selective uniform distribution data 
approaches applied boolean factors probe data 
solution composite tuple probes data factor exactly effectively halving total number boolean factors eventually probe data 
approximately twice efficient approach 
ineq eq workload help apply shared inequality factor 
composite approach sort merge join boolean factors data outperforms approach nested loops boolean factors equality factors sort merge efficient algorithm nested loops 
ineq ineq workload shared individual boolean factors inequalities 
sort merge algorithm inequality joins nested loops index join solution preferred 
experiments real data traces validated results synthetic streams repeating tests real traces traffic sensors laid chandrasekaran franklin psoup system streaming queries streaming data table 
schema traffic data trace attribute type range timestamp lane integer integer speed float response time query msec nomat psoup psoup window size tuples fig 

response time selection queries freeways www dot ca gov 
schema data shown table data differ synthetically generated data range values different attributes take 
distribution values attributes lane uniform sensors report values periodically frequency speed attribute observed approximately modal extreme values slow fast rare 
ran tests data synthetic data 
results tests 
response time vs window size reran experiment sect 
real data described study response time query invocations changing window sizes 
ran test selection queries standing query clauses form select traffic stream lane speed constants boolean factors chosen uniformly random domain values attribute 
results experiments shown figs 

axis logscale axis linearly scaled factor 
maximum data arrival sec maximum data arrival sec psoup psoup psoup psoup query specifications psoup psoup psoup psoup query specifications fig 
response time select queries 
window size 
window size plot mirrors trend figs 
psoup offers best response times nomat background processing poorest response times 
data arrival rate vs experiment repeated tests described sect 
measure usefulness query indices sharing computation different 
measured cost paid psoup actively maintaining current input windows results structure 
described sect 
experiment synthetic data data fed query processor fast consumed 
experiment conducted window sizes tuples 
plots test shown fig 

plots axis logscale 
trend plots fig 

psoup solutions support higher maximum data arrival rates chandrasekaran franklin psoup system streaming queries streaming data cp query select max fig 

ranked tree max root cq interval query max query max query select max tj corresponding psoup solutions 
query indices speeds application data standing queries 
interesting difference plots window sizes crossover seen fig 
psoup psoup 
suggests experiment window size result sizes small certain stage cost actively maintaining current window results psoup price paid sharing computation different psoup solution 
increase window size tuples cost maintaining windows dominates cost computing removing crossover point 
note aggregation queries point discussed spj queries psoup supports aggregates count sum average min max 
ideally share data structures computing aggregates repeated invocations select project join aggregate queries streams just case select project join queries 
possible share data structures queries select project join clause 
demonstrate claim example queries compute max results select query 
explain basic approach computing max different windows data structure 
consider fig 
shows ranked ary tree data stem 
leaves tree ordered time insertion stem insertions occur rightmost node tree 
node annotated max elements subtree rooted node 
invoke query system current window ti tj 
common ancestor points window root cp cq children need followed reach ti tj 
rightmost leaf subtree rooted cp tk leftmost leaf subtree rooted cq tl 
max ti tj max max cp ti tk annotations children cp cq max cq tl tj 
recursive expression computed log time nodes tree ti tj 
thick edges show paths traversed recursion specific case ti tj maximum 
consider query different select clause query values considered computing query tree directly compute query problem leaves tree match results select clause query query maintain separate structure query stem 
sharing occurs different invocations query 
described design implementation novel query engine treats data query streams analogously performs evaluation joining 
allows psoup support queries require access data arrived prior query specification data appear 
psoup separates computation results delivery materializing results allows psoup support disconnected operation 
features enable data recharging monitoring applications intermittently connect server retrieve results query 
describe techniques sharing computation storage different queries 
terms done 
psoup currently implemented main memory system 
able archive data streams disk support queries 
disk stores raise possibility swapping data queries disk main memory 
swapping queries main memory effectively scheduling mechanism queries invoked frequently 
briefly touched relation registered queries psoup materialized views 
intend explore space materialized views infinite streams especially resource constraints 
current implementation psoup allows client retrieve answers corresponding current window 
intend relax restriction allow clients treat psoup generally query browser temporal data 

franklin efficient filtering xml documents selective dissemination information 
proceedings th international conference large data bases cairo september pp chandrasekaran franklin psoup system streaming queries streaming data 
franklin zdonik data staging ondemand broadcast 
proceedings th international conference large data bases august hong kong pp 
arasu babcock babu widom characterizing memory requirements queries continuous data streams 
proceedings st acm sigact sigmod sigart symposium principles database systems madison wi june pp 
avnur hellerstein eddies continuously adaptive query processing 
proceedings acm sigmod international conference management data dallas may pp 
babcock babu datar motwani widom models issues data stream systems 
proceedings st acm sigact sigmod sigart symposium principles database systems madison wi june pp 
bonnet gehrke seshadri sensor database systems 
proceedings nd international conference mobile data management hong kong january pp 
bonnet seshadri device database systems 
proceedings th international conference data engineering san diego february march 
babu widom continuous queries data streams 
sigmod record 
carney cetintemel cherniack convey lee stonebraker tatbul zdonik monitoring streams new class data management applications 
proceedings th international conference large data bases hong kong august pp 
chen dewitt tian niagaracq scalable continuous query system internet databases 
proceedings acm sigmod international conference management data dallas may pp 
chandrasekaran cooper franklin hellerstein hong krishnamurthy madden raman reiss shah telegraphcq continuous dataflow processing uncertain world 
proceedings st biennial conference innovative data systems research asilomar ca january 
chandrasekaran franklin streaming queries streaming data 
proceedings th international conference large data bases hong kong august pp 
cherniack franklin zdonik expressing user profiles data recharging 
ieee pers commun special issue pervasive computing 
datar gionis indyk motwani maintaining stream statistics sliding windows 
proceedings th siam symposium discrete algorithms san francisco january pp 
dewitt naughton schneider evaluation algorithms 
proceedings th international conference large data bases barcelona september pp 
forgy 
rete fast algorithm patterns objects match problem 
artif intell 
fabret jacobsen pereira ross shasha filtering algorithms implementation fast publish subscribe systems 
proceedings acm sigmod international conference management data santa barbara ca may pp 
fox gribble chawathe brewer gauthier cluster scalable network services 
proceedings th acm symposium operating system principles st malo france october pp 
gehrke korn srivastava computing correlated aggregates continual data streams 
proceedings acm sigmod international conference management data santa barbara ca may pp 
hanson optimized trigger condition testing ariel networks 
technical report tr university florida cise department 
hanson huang parthasarathy park vernon scalable trigger processing 
proceedings th international conference data engineering sydney march pp 
hellerstein franklin chandrasekaran deshpande hildrum madden raman shah adaptive query processing technology evolution 
ieee data eng bull 
jagadish mumick silberschatz view maintenance issues chronicle data model 
proceedings th acm sigact sigmod sigart symposium principles database systems san jose may pp 
kanellakis constraint query languages 
proceedings th acm sigact sigmod sigart symposium principles database systems nashville tn april pp 
kreutz kemper kossmann publish subscribe architecture distributed metadata management 
proceedings th international conference data engineering san jose february march pp 
lee stolfo mok mining data flow environment experience network intrusion detection 
proceedings th acm sigkdd international conference knowledge discovery data mining san diego august pp 
miranker treat better match algorithm ai production system matching 
proceedings th national conference artificial intelligence seattle july pp 
madden franklin stream architecture queries streaming sensor data 
proceedings th international conference data engineering san jose february march pp 
madden shah hellerstein continuously adaptive continuous queries streams 
proceedings acm sigmod international conference management data madison wi june 
motwani widom arasu babcock babu datar manku olston rosenstein varma query processing approximation resource management data stream management system 
proceedings st biennial conference innovative data systems research asilomar ca january 
neil quass improved query performance variant indexes 
proceedings acm sigmod international conference management data tucson az may pp 
raman interactive query processing 
phd thesis university california berkeley 
shivakumar garcia molina wave indices indexing evolving databases 
proceedings acm sigmod international conference management data tucson az may pp chandrasekaran franklin psoup system streaming queries streaming data 
shah hellerstein chandrasekaran franklin flux adaptive repartitioning operator continuous query systems 
proceedings th international conference data engineering bangalore india press 
sullivan tribeca system managing large databases network traffic 
proceedings usenix annual technical conference new orleans june 
seshadri livny ramakrishnan sequence query processing 
proceedings acm sigmod international conference management data minneapolis may pp 
stonebraker sellis tk hanson en analysis rule indexing implementations data base systems 
proceedings st international conference expert database systems charleston sc april pp 
sistla wolfson chamberlain dao modeling querying moving objects 
proceedings th international conference data engineering birmingham uk april ieee computer society new york pp 
sadri zaniolo optimization sequence queries database systems 
proceedings th acm sigact sigmod sigart symposium principles database systems santa barbara ca may pp 
terry goldberg nichols oki continuous queries append databases 
proceedings acm sigmod international conference management data san diego june pp 
urhan franklin cost query scrambling initial delays 
proceedings acm sigmod international conference management data seattle june pp 
urhan franklin xjoin reactively scheduled pipelined join operator 
ieee data eng bull 
wilschut apers dataflow query execution parallel main memory environment 
proceedings st international conference parallel distributed information systems pdis miami beach december pp 
yan tw garcia molina sift information dissemination system 
acm trans database sys 
yang widom temporal view self maintenance 
proceedings th international conference extending database technology konstanz germany march pp 
yang widom incremental computation maintenance temporal aggregates 
proceedings th international conference data engineering heidelberg april ieee computer society new york pp 
