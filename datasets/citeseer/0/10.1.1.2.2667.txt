decentralized orchestration composite web services ibm india research laboratory new delhi india ibm com web services information software available programmatically internet may building blocks applications 
composite web service built multiple component web services typically specified language bpel ws 
specification developed composite service may orchestrated centralized decentralized fashion 
decentralized orchestration offers performance improvements terms increased throughput scalability lower response time 
decentralized orchestration brings additional complexity system terms error recovery fault handling 
incorrect design decentralized system lead potential deadlock non optimal usage system resources 
investigates build time runtime issues related decentralized orchestration composite web services 
support design decisions performance results obtained decentralized setup bpel ws describe composite web services bpws underlying runtime environment orchestrate 
categories subject descriptors information storage retrieval online information services web services programming techniques concurrent programming distributed programming parallel programming general terms design performance experimentation keywords composite web services decentralized orchestration code partitioning bpel ws 
web services encapsulate information software resources available network standard interfaces protocols 
complex web services may created copyright held author owner 
www may new york new york usa 
acm 
chandra ibm india research laboratory new delhi india ibm com ibm india research laboratory new delhi india ibm com vijay mann ibm india research laboratory new delhi india ibm com aggregating functionality provided simpler ones 
referred service composition aggregated web service composite web service 
composite web services may developed specification language bpel ws wsci executed engine bpws 
typically composite web service specification executed single coordinator node 
receives client requests required data transformations invokes component web services specification 
refer mode execution centralized orchestration 
coordinator node responsible coordination data control flow components performance bottleneck 
data transferred various components coordinator node transferred directly point generation point consumption 
leads unnecessary traffic network 
addition possible web service generates lot data irrelevant composite service data transferred coordinator node discarded putting unnecessary load network 
factors lead poor scalability performance degradation high loads 
specifying composite service language bpel ws interesting ramifications 
specification analyzed techniques program analysis petri nets data control dependences components analyzed code partitioned smaller components execute distributed locations 
refer mode execution decentralized orchestration 
decentralized orchestration multiple engines executing composite web service specification portion original composite web service specification complete distributed locations 
engines communicate directly central coordinator transfer data control necessary asynchronous manner 
may appear additional engines execution path adversely affect performance decentralized execution brings performance benefits reasons centralized coordinator potential bottleneck 
distributing data reduces network traffic improves transfer time 
distributing control improves concurrency 
asynchronous messaging engines brings benefits better throughput graceful degradation 
furthermore decentralized orchestration way compose web services constrained data flow environments business business scenarios data flow direction due business constraints 
inevitability decentralized orchestration constrained data flow environments potential performance benefits gained decentralized orchestration motivated explore 
decentralization brings performance benefits increases complexity system poses build time runtime challenges 
requires modifications infrastructure execute service build time runtime support error handling recovery techniques tools code partitioning 
complex build time runtime issues properly addressed order exploit full performance benefits decentralization 
identify various runtime build time issues decentralized orchestration composite web services discuss solutions address 
build time issues discussed section include determining efficiently partition centralized spec ification distributing error handling code partitions cor rectly efficiently handle runtime errors runtime issues discussed section include efficient protocol engine engine communica tion internal design details engine avoid potential dead locks infrastructure error handling recovery experimentally evaluate performance decentralized orchestration effect various runtime build time issues performance 
experiments conducted bpel ws describe composite web service bpws orchestrate 
results section 
related summarized section followed section 
build time issues section explains decentralized orchestration sample composite web service specification decentralizing 
describe various build time issues come process 
purpose illustration composite web service service task find driving directions address person 
takes input names people gets necessary information component web services returns driving directions address second address 
centralized orchestration 
centralized orchestration composite service receives names name name client sends name web service addrbook returns address addr name 
concurrently find route sends name web service addrbook returns address addr name 
addresses returned find route extracts just city zip addresses sends web service roadmap computes driving directions location 
directions returned client 
service graphically represented corresponding pseudo bpel ws specification refer appendix shown 
decentralized orchestration 
decentralized orchestration service bpel ws code partitioned partitions andd executed bpws engines locations 
graphically depicts decentralized orchestration service corresponding pseudo bpel ws specification shown 
partition receives names name name client sends name name asynchronously parallel waits results 
partition invokes web service addrbook synchronously passing name input receiving address addr name return 
similarly partition invokes web service addrbook name input receives address addr name response 
relevant city zip information extracted address sent similarly reducing data network 
partition waits till receives inputs andd invokes roadmap web service returns driving directions address 
partition returns driving directions back tod partition callback 
getting callback receives driving directions sends back client 
code partitioning decentralized orchestration various interactions components analyzed composite web service specification partitioned program analysis techniques 
built tool task automatically 
partitions full fledged composite web service specifications execute distributed locations preferably collocated web services invoked remotely 
tool generates web service description language wsdl descriptors fragments 
wsdl descriptors permit deployed invoked standard web service 
code partitioning algorithm identifies number final partitions number component web services composite web service 
centralized code specification partitioned components manner data passed components minimized parallelism components maximized 
build time process decentralization essentially consists steps automatic parallelization code partitioning synchronization analysis code generation 
bpel ws permits specification explicit parallelism apply data flow analysis techniques determine maximum parallelism apply cost function determine efficient code partition may may possible parallelism 
code partitioned interactions partitions analyzed determine best synchronization protocols partitions 
analysis complete bpel ws code partitions generated example shown 
issues code partitioning mentioned sake completeness address 
discussed earlier 
client client centralized composite service decentralized composite service name addr addr addr route name route rm name addr bpws engine web service component rm receive client name name name name name name name flow invoke name invoke name addr addr flow receive dir reply client dir roadmap roadmap handling errors build time asynchronous messaging different composite web service partitions error propagation decentralized setup complex 
bpel ws provides mechanism explicitly catch errors handle executing subroutines specified fault handler elements 
decentralized orchestration challenges partition existing fault handlers composite web service specification correctly retain semantics partitioning 
fault handler includes sending message component composite web service executes different node due decentralization changes accordingly 
example fault handler centralized find route specification catches errors arising address book web service invocation failures returns error response back client invoking road route service 
look sequence name name invoke name ph street city zip throw sequence 
catch msg address book service available reply client partitioning centralized specification fault handler moved partitions controlling address book services andd 
furthermore fault handler send error message partition waiting input address book services provided address book service executed successfully 
error message form invalid input value zip code 
case fault handler look receive client name name flow sequence name name invoke name ph street city zip sequence sequence name name invoke name ph street city zip sequence flow city city city city zip zip zip zip invoke rm city city zip zip dir routes reply client dir receive name invoke name ph street city zip city city zip zip invoke city zip centralized decentralized orchestration receive name invoke name ph street city zip city city zip zip invoke city zip flow receive city zip receive city zip flow city city zip zip city city zip zip invoke rm city city zip zip dir routes invoke dir catch zip invoke city zip check erroneous input send back error node 
flow receive city zip receive city zip flow zip zip city city zip zip city city zip zip invoke rr city city zip zip dir route dir route address book service available invoke dir challenge insert additional fault handlers errors propagate correctly decentralized setup 
issue centralized setup control remains centralized errors propagated back client gracefully 
case decentralization errors localized respective node occurrence due asynchronous messaging 
alleviated inserting additional fault handlers composite service fragments 
fault handlers invoke centralized entity activity waiting input failed activity informing error 
error message sent back client 
example fault handler described inserted andd corresponding check original centralized web service specification doesn fault handler 

runtime issues decentralized orchestration involves partitioning centralized composite service specification smaller partitions web services 
partition requires runtime environment workflow engine execution 
decentralized orchestration introduces multiple engines communicating 
communication appears web service invocation partition typically step flow 
different parameters affect efficiency communication protocol threading models engine furthermore runtime infrastructure needed error propagation error recovery decentralized orchestration complicated due asynchronous messaging 
discuss issues detail subsections 
application server messaging composite web services executed engine bpw 
engine hosted web service inside web service container 
implementation web service container depends type protocol uses communicate clients 
soap soap jms common messaging protocols invoking web services 
restrict discussion protocols 
application server synchronous protocol decentralized orchestration requires asynchronous messaging 
pseudo way messaging achieved sending dummy response client 
web service invoked messaging protocol hosting web service container typically implemented servlet hosted inside servlet container 
servlets designed synchronous request response invocations limitation servlet container response sent back client servlet thread completes processing message 
servlet accept request thread close connection continue process request asynchronously thread 
result client blocked long request processed server 
bpws engine solves problem maintaining internal thread pool independent servlet thread pool 
engine receives asynchronous request puts request internal queue creates dummy response sends back servlet thread 
servlet thread free receive new request client blocked 
asynchronous request processed threads internal thread pool 
thread pools comparable size 
jms application server web service invoked jms messaging protocol hosting web service container typically implemented message driven bean mdb 
mdb hosted inside enterprise java bean ejb container 
ejb container single thread listener thread listening specified topic queue 
thread pool process incoming requests processing thread pool 
receiving request listener thread puts internal queue continues listening incoming requests 
threads processing thread pool picks request processes 
request synchronous processing thread completing processing extracts client address context sends reply 
request asynchronous sent back client 
performance comparison glance difference asynchronous message handled ejb container servlet container 
cases listener thread receives request puts request queue continues listen requests request processed thread background 
fact low loads performance decentralized orchestration similar decentralized orchestration jms 
high loads experimental analysis details section shows decentralized execution fares poorly compared jms solution 
reason follows engine sends asynchronous message engine parses request determines asynchronous puts queue immediately returns dummy response tod 
low loads process takes milliseconds average 
high loads system loaded threads executing concurrently observed thread gets send response turn time high milliseconds 
consequence fold 
processing thread sending engine receiver thread receiving engine blocked longer periods time 
reduces capacity process requests throughput reduces response time increases 
asynchronous web service invocation jms suffer limitation send back dummy message 
potential deadlock result decentralized orchestration potential deadlock situation arise conditions engine maintains processing thread pool spawn new thread new request composite web service instances thread affinity 
consider bpel ws program receive waiting event correlation information locating existing composite service instance ind 
instantiates bpws composite service instance thread 
instance exit gets message satisfies second receive blocks thread second message received 
second message arrives picked thread thread pool 
parsing message second thread determines message needs patched existing thread wakes correlated thread returns 
thread pool size concurrent requests threads blocked waiting second receive 
correlated message comes put queue 
threads blocked removed queue system go deadlock 
simple solution spawn new processing thread incoming request 
scenario processing thread pool maintained system spawns thread required 
approach major drawbacks 
time required create destroy thread time required allocating thread thread pool 
situation container servlet ejb case may able control load system number threads system grow arbitrarily load increases 
adversely affects performance system limited cpu memory resources performance deteriorates number threads large 
second solution deadlock problem remove thread affinity 
composite service instance blocks corre engine saves state processing thread released 
case processing threads blocked 
solution advantage composite service instances may blocked receive thread blocked 
permits system serve request system full thread pool limited resource 
serious drawback scheme increased processing time composite service instance state needs saved reloaded gets correlated message 
disadvantage increased memory requirement save states blocked composite service instances 
third solution deadlock problem separate processing thread pools message processing message receiving threads 
way incoming request processed separate thread pool correlated message processed different thread pool 
soon correlated message receiving thread determines composite service instance waiting message hands message blocked processing thread blocked thread resumes 
correlated message receiving thread doing processing merely locates composite service instance waiting message small number threads required thread pool 
theoretically thread pool sufficient break deadlock 
disadvantage solution processing threads blocked receive 
threads blocked throughput system goes 
fourth solution deadlock problem split composite service partition remaining processing moved composite service partition 
splitting done automatically code partitioning 
different composite service instances get created incoming requests callbacks 
initial composite service instance receives request processing request exits 
correlated message received composite service instance thread rest processing sends response back client required 
example split follows receive client name name name name name name flow invoke name invoke name flow receive dir invoke client dir bpel ws composite service partition split separate partitions partition 
case processing thread blocks question deadlock 
throughput improves thread busy doing useful waiting request thread blocked unable useful 
scheme ensures optimal usage system resources 
scheme disadvantage context information related client needs propagated initial thread final split composite service instance call graph 
solutions discussed require changes existing servlet container implementations 
case requires servlet container create thread request thread pool 
second solution requires container bpws engine able swap running process thread swapped thread pool blocks callback swapped ready run 
remaining solutions modifications existing systems 
solutions preferable 
evaluated performance third fourth solutions results discussed section 
error propagation error recovery decentralized orchestration entire state original composite web service distributed different nodes error recovery complex task 
brings issues related transaction processing active area research efforts ws transaction transactional attitudes underway solve problem centralized orchestration composite web services 
restrict discussion problems peculiar decentralized orchestration propose simple approach solve error handling recovery concerning transaction processing 
discussed build time issues fault handling forward propagation errors section certain cases easier reliable propagate error central entity knowledge state entire composite service 
central entity composite service partitions currently executing 
knowing state composite web service helps recovering error undo operations activities completed need invoked 
runtime monitoring individual composite service partitions different nodes calculate estimate composite service progress essential error recovery helpful error propagation 
initial implementation modeled central entity status monitor implemented web service refer 
node local monitoring agent runs captures local state composite service partition 
composite service consists list activities status service generally reported terms status activities 
state retrieved service database polling regular intervals setting triggers database api calls engine 
local monitoring agents periodically update centralized status monitor keeps track progress composite service instance process template describes composite service specification 
status monitor maintains status activities part original composite service inputs undo activities activities 
forms compensation list decentralized composite service 
particular invocation composite service composite service partition instances get created different nodes share unique correlation id status monitor uses correlation id correlate different partition instances different nodes global composite service instance 
error occurs global state composite service maintained status monitor determine activities running activities finished execution 
activities composite service progress waiting input failed activity status monitor sends invalidation signal executing undo changes 
activities completed execution status monitor invoke undo activities compensation list reverse order execution 
process conducting experiments evaluate overheads imposed error handling status monitoring framework determine optimal frequency status updates 
high loads maintenance global state place bottleneck investigating models error recovery forward error propagation decentralized status monitoring alleviate 
jdbc composite service database jdbc composite service database jdbc composite service database composite service engine local monitoring agent composite service api composite service engine local monitoring agent composite service api composite service engine local monitoring agent composite service api periodic updates exceptions exceptions periodic updates periodic updates start terminate exceptions status monitoring 
experimental results multi threaded client bpws server start terminate server rm server start terminate status monitor composite service process template compensation list status composite service status composite service composite service composite service server experimental set centralized orchestration experiments conducted study performance centralized decentralized example discussed section 
dummy implementations shown processing service time simulated sleep 
bpws engine orchestrate specifications written bpel ws 
tool automatically partition bpel ws code 
different configurations studied centralized orchestration shown 
decentralized orchestration communica tion protocol bpws engines 
pseudo multi threaded client bpws server jms jms jms pseudo asynchronous jms server jms bpws bpws jms server jms server rm server bpws jms server jms server experimental set decentralized orchestration oneway messages discussed section engine communication 
thread pools server resolve deadlock problem 
decentralized orchestration jms communication protocol bpws engines 
case thread pools jms container resolve deadlock problem 
decentralized orchestration jms communication protocol bpws engines partition split components explained section 
experimental set consisted standard intel machines running linux connected mb lan 
multi threaded asynchronous clients different machines load system 
centralized orchestration bpw engine hosted inside standard server web services deployed different machine server 
decentralized decentralized jms orchestration bpws engines tod hosted different machine inside jms server 
web located respectively ran different servers shown 
decentralized jms set split partitions andd refer section hosted server share context information 
configurations described invocation actual web services soap 
system loaded different ways increasing request rate ii increasing size messages iii increasing service time 
parameters load system multithreaded asynchronous clients total threads generated requests rate requests minute requests minute 
service time ata web services varied ms ms size messages varied bytes kbytes 
measured average response time server atd serve request throughput number requests processed minute 
variation performance request rate 
request rate experiments conducted fixed message size bytes service time ms shows variation throughput request rate 
low request rates throughput total number concurrent requests executing system lower size thread pool 
increase request rate centralized orchestration saturate starts showing drop throughput threads blocked waiting response component web services 
decentralized decentralized jms reach saturation 
decentralized jms version degrades gracefully decentralized version shows rapid decline eventually worse centralized version 
due inherent problems pseudo asynchronous messaging discussed section 
decentralized orchestration see cumulative effect pseudo asynchronous messaging multiple places particularly system high cpu load processing thread doesn get scheduled long time 
throughput decentralized jms declines load increases eventually similar centralized orchestration thread pool atd refer eventually bottleneck threads just blocked waiting callback 
orchestration scales best threads blocked threads doing useful discussed section 
average response time milliseconds message size bytes service time ms centralized decentralized decentralized jms jms split request rate requests sent minute performance comparison response time variation request rate average throughput requests served minute message size bytes service time ms centralized decentralized decentralized jms jms split request rate requests sent minute performance comparison throughput variation request rate shows variation response time request rate 
low load throughput decentralized jms centralized response time centralized orchestration slightly better decentralized jms orchestration 
overheads decentralization perform worse centralized orchestration low loads 
response time jms split version comparable decentralized jms version lower loads deteriorates relatively higher rates 
splitting throughput increases blocking callbacks threads blocked 
high request rates decentralized orchestration jms split allows large number concurrent requests executing system doing useful just blocked waiting response case decentralized jms orchestration 
results higher cpu load system consequently higher response times 
high request rates trade throughput response time 
average response time milliseconds service time ms client request rate requests min centralized decentralized decentralized jms jms split message size kbytes performance comparison response time variation message size average throughput requests served minute service time ms client request rate requests min centralized decentralized decentralized jms jms split message size kbytes performance comparison throughput variation message size variation performance message size 
message size variation experiments conducted fixed request rate requests min service time ms show effect message size response time throughput 
graphs clearly show response time throughput degrade centralized orchestration message size increases 
clear difference perfor mance decentralized decentralized jms due reasons mentioned section 
observable difference performance decentralized jms jms split 
indicates total number concurrent requests executing system lower size thread pool number blocked threads impact system performance terms response time throughput 
average response time milliseconds message size bytes client request rate requests min centralized decentralized decentralized jms split jms service time milliseconds performance comparison response time variation service time average throughput requests served minute message size bytes client request rate requests min centralized decentralized decentralized jms split jms service time milliseconds performance comparison throughput variation service time variation performance service time 
experiments variation service time conducted fixed rate requests min message size bytes 
show effect service time response time throughput 
experiments show centralized orchestration scale increasing service time 
decentralized orchestration response time comparable decentralized jms throughput comparatively poor 
loads difference performance decentralized jms jms split 
reflects fact total number concurrent requests executing system lower size thread pool experiments 
experiments 
conducted experiments number sample composite web services addition service mentioned 
results mentioned sake brevity 
observed decentralization provides performance benefits cases inherent concurrency 
performance gain mainly due reduction network traffic distribution computation different nodes 
carried preliminary experiments comparing decentralized orchestration centralized orchestration horizontally scaled load balanced servers 
total number resources cases kept 
observed horizontal scaling load balancing helps centralized orchestration perform better decentralized orchestration low loads decentralized orchestration scales better higher loads 
attributed optimal utilization threads decentralized orchestration system blocked waiting responses allow large number concurrent requests executed 

related web services ubiquitous lot effort spent studying different ways composing create useful complex services 
models service composition proposed centralized distributed flow data control messages services 
models relevant composition third party web services centralized control flow centralized data flow model centralized orchestration distributed control flow distributed data flow model decentralized orchestration 
idea decentralized control workflows decentralized orchestration web services proposed earlier research 
benatallah describe peer peer execution pattern orchestrating web services overcome bottleneck associated having centralized controller 
responsibility coordinating execution composite service distributed providers host components composite service 
describe detail performance benefits potential problems various build time runtime issues involved process 
partitioning workflow specification state activity charts enable distributed execution original semantics studied 
synchronization scheme guarantees correct synchronization workflow engines executing partitions workflow developed 
consider issue fault tolerance providing exactly semantics delivering synchronization messages 
approach similar lot interesting lessons learnt effort 
consider workflow composition web services main focus problems peculiar kind composition 
wfms corba environments workflow coordination activity execution 
execution model coordination process installing objects different domains execute manage tasks coordinate deliver workflow routing functionality 
execution model separates responsibility workflow coordination activity execution creating classes entities sources performers 
effect coordination process remains localized source object actual execution activities decentralized network performers sources limited control 
model essentially centralized orchestration web ser vices web services acting performers workflow acting source 
distributed workflow control architecture proposed agents schedule coordinate workflow instances 
execute workflow instance agents responsible executing steps workflow instance communicate transferring entire state workflow agent 
describes events propagated agents efficiently possible satisfying failure handling coordinated execution requirements 
lot done understanding solving various runtime issues parallel distributed systems 
decentralized orchestration relies heavily asynchronous messaging 
benefits asynchronous messaging better throughput graceful shutdown studied 
importance design components queues thread pools building highly concurrent systems discussed benefits trade concurrency explored 
earlier studied issues concurrency synchronization decentralization 
describe algorithm identify different forms concurrency composite service specification considers impact dynamic binding faults synchronization constructs 
give algorithm partitioning bpel ws programs 

identified various build time runtime issues decentralized orchestration composite web services discussed solutions address 
covered issues ranging code partitioning decentralization detailed discussion servers participate decentralized execution thread pool design communication protocols 
showed thread pool design source potential deadlocks jms efficient communication protocol engine engine communication decentralized setup 
discussed build runtime issues error handling error recovery experimental evaluation performance decentralization orchestration compared centralized orchestration terms throughput average response time scalability 
results performance benefits decentralization provides 
experimentally evaluated different decentralization schemes showed high loads trade throughput response time schemes 
proper design optimal partitioning run time support error handling recovery decentralized orchestration provides attractive approach execution complex high performance composite services 
current tool code partitioning automatically generates partitions splitting optimization 
working enhancing tool automatically partition fault handlers insert new fault handlers 
investigating various architectures error handling error recovery decentralized setup quantify effect performance 
addition working infrastructure dynamic reconfiguration runtime monitoring composite services obtain optimal performance 
plan study effect deployment topologies performance various synchronization protocols decentralization 

acknowledgments authors ibm india research laboratory comments suggestions 
appendix summary bpel ws constructs tation gives subset bpel ws constructs description construct corresponding notations 
business process execution language web services java run time bpws 
www alphaworks ibm com tech bpws 
business process execution language web services version 
www ibm com developerworks library ws bpel 
enterprise java beans specification ejb 
java sun com products ejb 
oasis business transaction protocol committee specification 
www oasis open org business transaction 
arkin orchard nagy 
web service choreography interface wsci 
sun com software xml developers wsci 
benatallah dumas sheng 
overview patterns architecting managing composite web services 
acm exchanges volume pages 
cabrera copeland cox freund klein storey thatte 
web services transaction ws transaction 
www ibm com developerworks webservices library 
cheung lo ng lee 
web services oriented data processing integration 
proceedings twelfth international world wide web conference budapest may 
christensen curbera meredith weerawarana 
web services description language wsdl 
www org tr wsdl march 
graham daniels davis nakamura 
building web services java making sense xml soap wsdl uddi 
sams isbn 
gribble brewer hellerstein culler 
scalable distributed data structures internet service construction 
proceedings symposium operating systems design implementation osdi october 
kamath ramamritham 
pragmatic issues coordinated execution failure handling workflow control architectures 
computer science technical report university massachusetts august 
weerawarana 
service oriented composition bpel ws 
proceedings twelfth bpel ws construct description notation control flow constructs sequence sequential flow sequence sequence switch conditional flow switch switch iterative flow pick non deterministic conditional flow pick pick flow concurrent flow similar cobegin coend flow flow link wait notify type synchronization source linkid target linkid throw throws exception throw data structures variable variables include set parts analogous fields part part activities invoke synchronous blocking invocation invoke sending data input variable receiving response output variable invoke asynchronous oneway nonblocking invocation invoke sending data input variable response variable receive blocking receive data partner receive var variable var reply send response partner variable var reply var assign assignment var var catch handles exception catch international world wide web conference budapest may 
liu law wiederhold 
analysis integration models service composition 
proceedings third international workshop software performance rome italy july 
muth kotz weikum 
centralized workflow specification distributed workflow execution 
journal intelligent information systems 
chandra sarkar 
decentralizing composite web services 
proceedings workshop compilers parallel computing january 

synchronization analysis decentralizing composite web services 
proceedings acm symposium applied computing sac melbourne fl october 
paul park 
workflow system internet 
proc 
usenix symposium internet technologies systems california december 
shrivastava 
system specifying coordinating execution reliable distributed applications 
international working conference distributed applications interoperable systems dias september 
bpel constructs notations tai 
transactional attitudes reliable composition autonomous web services 
proceedings workshop dependable middleware systems june 
van der aalst 
workflow verification finding control flow errors petri net techniques 
business process management pages 
welsh culler brewer 
seda architecture scalable conditioned internet services 
proceedings th acm symposium operating systems principles sosp canada october 
welsh gribble brewer culler 
design framework highly concurrent systems 
cs technical report ucb csd university california berkeley october 
yew strand 
aggregation composite location aware services mobile cellular networks 
proceedings th ifip ieee international workshop distributed systems operations management germany october 
