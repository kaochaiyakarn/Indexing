line decision theoretic golog unpredictable domains alexander christian fritz gerhard lakemeyer 
dtgolog proposed boutilier integration decision theoretic dt planning programming language golog 
advantages include ability handle large state spaces limit search space planning explicit programming 
soutchanski developed version dtgolog program executed line dt planning applied parts program 
limitations dt planning generally applied programs containing sensing actions 
order deal robotic scenarios unpredictable domains certain kinds sensing measuring position ubiquitous propose strategy sensing deliberation replaced suitable models computed trajectories dt planning remains applicable 
discuss necessary changes dtgolog entailed strategy application approach robocup domain 
boutilier proposed dtgolog integration markov decision processes mdps programming language golog reiter variant situation calculus 
golog equipped familiar control structures sequence loops nondeterminism allow complex combinations actions operating fluents predicates functions changing time 
dtgolog extends golog adding familiar mdp notions stochastic actions rewards 
decision theoretic planning incorporated form optimization method takes program computes policy program follows controls chooses nondeterministic actions order maximize expected utility horizon actions 
advantage traditional mdp state space need represented explicitly search space narrowed effectively golog control structures 
serious limitation dtgolog account sensing actions 
reason limitation dtgolog operates line modus computes policy program handed execution module 
program contains actions sensing fluents take large infinite number values finding policy quickly infeasible impossible 
reason soutchanski introduced line version dtgolog interleaves policy optimization execution 
main idea user specify computer science department knowledge systems group rwth aachen aachen gerhard fritz cs rwth aachen de exception sensing actions introduced optimizer determine state stochastic action 
parts program mdp style policy computed 
example consider program optimize sense 
idea roughly policy computed subprogram executed followed action sensing truth value 
depending outcome executed may contain occurrences optimize 
order see soutchanski approach problematic decision making highly dynamic domains useful distinguish different forms sensing refer active passive sensing 
example active sensing automatic taxi driver asking customer destination 
typically form sensing happens occasionally part robot control program 
example passive sensing keeping track position happens frequently order tens milliseconds 
little sense explicitly represent passive sensing actions robot control program bulk program render reasoning program impossible 
soutchanski say explicitly clearly concerned active sensing actions sensing actions part control program 
highly dynamic domains passive sensing ubiquitous robot constantly monitor position environment 
aim show decision theoretic planning adapted account form sensing 
starting point investigations lakemeyer integrated passive sensing golog 
idea roughly reasoning program projecting outcome uses models fluents robot position change 
model movement robot simple linear functions time approximate robot trajectories 
actual execution models replaced passive sensing actions represented called exogenous actions periodically update fluents position robot inserted interpreter program 
assuming appropriate models relevant fluents change deliberation simply adopt soutchanski approach original dtgolog ignore active sensing 
answer short 
missing cases policy computed execution carefully monitored 
model world deliberation rough approximation real world things may turn differently may result aborting current policy 
example driver initiates passing car vehicle suddenly appears speeding may advisable car pass 
monitoring means compare assumptions model world com puted agent trajectories actual values obtained sensing execution 
see achieved annotating policy appropriate information 
motivated robots operating highly dynamic unpredictable domains deliberation decision making happen quickly preferably second 
arbitrary golog programs clearly guaranteed 
concerned control programs robots operate continuously longer periods time 
scenarios little sense find optimal policies robot actions start finish impossible predict world seconds 
content peek plan handful actions highest utility passing car 
demonstrate assumptions efficient decision theoretic planning achievable lead performance 
application automatic taxi driver currently reach chosen robotic soccer particular robocup middle size league benchmark 
environment fairly controlled fixed playing field mobile robots team game situations challenging due dynamics unpredictability 
keep things simple consider case passive sensors golog programs supplied user contain explicit sensing actions 
related poole incorporates form decisiontheoretic planning independent choice logic 
distinguishes passive active sensing consider issue line dt planning 
action logics addressing uncertainty include abduction focus addresses symbolic dynamic programming 
discuss ways replacing sensing models environment deliberation 
rest organized follows 
give brief overview dtgolog underlying semantics 
sketch approach line decision theoretic planning followed discussion applying decision theoretic robocup middle size league concluding remarks 
situation calculus dtgolog situation calculus golog reiter variant situation calculus second order language reasoning actions effects 
changes world due actions situation completely described history actions initial situation 
properties world described fluents predicates functions situation term argument 
fluent user defines successor state axiom describing precisely fluent value changes change performing action 
precondition axioms action axioms initial situation foundational axioms unique names domain closure assumption form socalled basic action theory 
line dtgolog dtgolog uses basic action theories give meaning primitive actions inherits golog programming constructs se coffee delivery example robot needed seconds minutes find policy :10.1.1.34.7772
quence loops procedures nondeterministic actions 
mdps dtgolog borrows notion reward real number assigned situations indicating desirability reaching situation stochastic actions 
see consider action intercepting ball robotic soccer 
action routinely fails assign low probability success 
model dtgolog define stochastic action intercept 
associated non stochastic deterministic actions intercepts successful failed intercept respectively 
executing intercept directly nature chooses execute intercepts probability probability 
effect intercepts simple setting robot position position ball 
effect teleport ball arbitrary position setting robot position old ball position 
original golog merely looks sequence primitive actions corresponds successful execution program dtgolog takes program converts simplified program called policy tree conditional actions 
policy roughly follows advice original program case deterministic actions settles choices nondeterministic actions maximize expected utility 
search right choices similar search optimal policy mdp 
advantage golog compared regular mdp search arbitrarily constrained restricting number nondeterministic actions 
dtgolog defined terms macro bestdo pr ultimately translates situation calculus expression 
program starting situation bestdo computes policy expected utility probability pr successful execution 
denotes finite horizon provides bound maximal depth branch policy 
space reasons consider definition bestdo nondeterministic choice stochastic actions 
see details :10.1.1.34.7772
suppose program starts nondeterministic choice programs written 
bestdo pr def pr bestdo pr pr bestdo pr pr pr pr pr bestdo commits policy best choice alternatives best defined terms multi objective optimization expected value success probability 
see example vi pi vj pj defined :10.1.1.34.7772
suppose stochastic action nature choices 
nk 
bestdo pr def 
nk pr policy computed 
action inserted order maintain mdp assumption full observability 
job model certainly simplistic suffices real game situations matters ball robot possession failed intercept 
sure performing robot gathers information distinguish outcomes ni 
case intercept sensing involve finding robot ball denoted fluent 

nk pr def poss 
nk pr poss pr 
nk pr pr bestdo pr prob pr pr pr prob pr def pr note produces policy form accounting outcomes nature choices 
user defined tests allow robot distinguish 
intercept example intercepts policy contains respective branch actions executed action possible 
line dtgolog original version dtgolog just described operates line modus computes policy program initiates execution 
observed practical large programs certainly applications tight real time constraints robocup 
extreme want reason action program execute continue rest program 
basic idea line interpretation golog program 
called transition semantics needed takes configuration consisting program situation turns configuration 
formally introduces predicate trans appeared expressing possible transition program situation program leading situation performing action 
space reasons consider case loops 
trans trans definitions constructs execution complete program defined terms reflexive transitive closure trans 
nice feature line interpretation step wise execution program easily interleaved exogenous actions events supplied outside 
handle periodic sensor updates position estimation example 
see details done golog 
basic transition mechanism hand principle hard reintroduce line reasoning parts program 
case dtgolog soutchanski proposed purpose interleaving line planning line execution 
show denotes situation calculus formula obtained restoring situation variable suppressed situation argument fluent names mentioned 
note free variables universally quantified formulas 
needs notion final configuration issue ignore simplicity 
excerpt interpreter implemented prolog 
consider case executing deterministic sensing actions leaving stochastic actions online pol er pol prob final er pol pol pol reward pol rest deterministic action online er pol sensing action online er pol 
roughly interpreter online calculates policy program horizon executes action recursively calls interpreter remaining program 
control search optimizing soutchanski proposes operator optimize defined macro optimize pr pr def nil pr nil pr optimize nil pr 
effect optimized resulting policy executed considered 
mentioned advantage user deal explicit active sensing actions restricting optimize go sensing action 
approach number shortcomings 
note definition interpreter online executing action computed policy optimizer called 
means large parts program re optimized computationally expensive real time decision making 
note checked optimization phase action executable 
interpreter ignores possibility action possible planning time impossible execute due changes environment 
easy fixes drawbacks fundamental problem approach possible optimization ahead sensing actions 
consider program sense 
condition evaluated able decide execute sensing action executed online evaluate value 
operator optimize allows limiting search optimal policy case 
program rewritten optimize sense 
program instructs interpreter optimize regarding rest program 
sensing action executed get needed value environment 
conditional optimized executed resp 
real time domains sensor updates arrive high frequency 
proposed active sensing soutchanski interpreter feasible renders applicability decision theoretic planning approach impossible 
propose different kind online interpreting decisiontheoretic plans golog feasible real time domains 
approach differs mainly passive sensing active sensing proposed soutchanski 
restrictions sensing actions 
models world planning phase 
able validate model assumptions hold executing plan annotate policies special way section 
section show annotated policies executed invalid policies detected 
deployed approach robocup domain show results section 
line dtgolog passive sensing re optimization remaining program generally feasible real time environments modification line dt golog sure policy just action executed 
purpose introduce operator solve program fixed horizon trans solve pr bestdo pr predicate bestdo calculates policy program reader may assume definition previous section see needs modified 
policy scheduled execution remaining program 
discussed policy generated model world avoid sensing need monitor remains valid execution 
allow special treatment special construct definition deferred 
annotated policies order see need modify original definition bestdo matter soutchanski need consider little detail idea model world planning vs sensor data execution 
fragment control program soccer robots help illustrate problem game 
solve 
endwhile ball pos reachable intercept 
game robots execute loop determine optimal policy typically actions execute policy continue loop 
choices intercepting ball requires ball reachable defined clear trajectory robot ball 
suppose bestdo determines true intercept highest utility 
case intercept stochastic action resulting policy contains 
intercept intercept 
note particular condition original program part policy 
problem lies 
execution policy may case ball longer reachable opponent blocking way 
case intercept fail sense abort policy start planning moves 
condition re evaluated date information world provided sensors compared old value 
need sure condition old truth value remembered policy 
general means need modify definition bestdo cases involving evaluation logical formulas 
consider test actions 
loops treated similar way 
bestdo pr def bestdo pr true bestdo pr false difference compared original bestdo prefix generated policy marker true case turned true false false 
treatment test action simpler case true matters 
false current branch policy terminated indicated action 
bestdo pr def bestdo pr true pr reward subsection see annotations allow check execution time truth value conditions program planning time 
mentioned explicit tests reason possible mismatch planning execution 
see note primitive action entered policy executability determined bestdo 
course happen action longer possible execution time 
turns case handled special annotation 
execution monitoring modified bestdo discover problems execution time left define actual execution policy 
initial definition trans solve means need define trans different cases 
keep definitions simple assume branch policy ends nil nil represents empty program 
trans nil nil trans nil fact configurations nil program final execution may legally terminate simply means needs done nil 
case marker inserted policy check test performed planning time yields result 
case happy continue executing policy remains effect successor configuration 
test turns different 
chosen simply abort policy successor configuration nil program 
may simplistic right approach applications robocup 
consider case intercept 
find path blocked intercept fail subsequent actions policy meaningless 
quick abort enable immediate replanning control program bad idea circumstances 
trans true false true nil false nil construct policy primitive action stochastic action execute action continue executing rest policy 
discussed due changes world may case impossible execute 
case abort rest policy successor configuration nil trans trans poss nil stochastic action obtain trans trans note subtlety ignored trans 
fact stochastic actions direct effects way modeled dtgolog 
needs perform find actual effects 
course trans ignores care taken implementation executed real world 
original dtgolog assume actions executable 
encounter construct inserted policy due stochastic action determine branch policy choose go execution branch 
trans trans trans section notes implementation line decision theoretic interpreter called 
rough sketch main loop interpreter 
interpreter mainloop exogenous action occured occurs act action act act 
performing step program execution trans 
program final execution finished final 
done similar soutchanski interpreter inserting appropriate literal see section case see 
stands real time dynamic golog solve kick dribble move kick dribble points var turn relative var intercept ball dribble move kick intercept ball supporter dribble move kick supp intercept ball dribble move kick intercept ball 
program performed offensive player 
denotes nondeterministic choice actions 
waiting exogenous action happen wait occurs 
executing actions action performed don execute 
action sensing exec 
ignore sensing act senses act execute act act 
action sensing execute sensing action act senses act execute act sr sr act 
checks exogenous event occurred inserts history 
checked transition new configuration executing possible action 
successor configuration reachable test final configuration conducted 
case previous cases apply interpreter waits exogenous event occurs robot reaches certain position 
execution predicate exists checking action executed sensing action 
similar soutchanski 
note allow passive sensing actions avoid plan generation 
put lot effort tuning perfomance interpreter 
major speed achieved integrating progression mechanism internal database spirit lin reiter step loop 
space reasons leave details say indispensable maintaining tractability action history grow control quickly 
additional speed ups obtained preprocessor 
takes complete domain axiomatization input generates optimized prolog code run time invariants static conditions evaluated compile time save time evaluating times run time 
empirical results robocup described version robocup mid dle size robot team world padua italy german open paderborn 
section show details implementation soccer agent results decision theoretic planning golog soccer domain 
basic actions important goto pos turn dribble intercept kick power move kick 
goalie controlled order maintain highest possible level reactivity players team individual procedure playing 
assigned fixed roles field players defender supporter move dribble intercept move kick dribble ball behavior turning ball 
set alternatives attacker ball possession 
red boxes denote opponents black ones teammates 
field markings 
attacker 
best positioned player ball started deliberate solved mdp program fig 
performed program role defending team goal 
set alternatives program best described 
line fig 
choice dribbling free goal corner dribble finishing action shot soon goal straight ahead 
line agent decides angles turn order push ball side intercepted teammate construct 
shows example decision tree program 
readability pruned similar branches 
root node stands situation agent switched line mode current situation 
boxes symbolize agent choices agent decide alternatives take 
circles nature choices denoting possible outcomes stochastic actions 
numbers outgoing edges nodes probabilities possible outcomes 
numbers boxes rewards corresponding situation 
best policy situation example marked thick line 
kick costs move kick costs turn intercept costs intercept tm costs natures choices agent choices move kick costs move kick costs 
pruned example decision tree program 
indispensable successful acting agent decisiontheoretic planning reasonable reward function 
scenario primitive reward function solely velocity relative position distance ball opponents goal 
refined improving play 
naturally time player spent depended highly number alternatives possible 
respect ball kickable difference times seconds examples min avg max ball ball hardware board pentium iii 
described decision making method shot goals world scratched final round goal 
placed th ended th th depending ranking algorithm 
proposed novel method line decisiontheoretic planning execution golog particularly suited robotic applications frequent sensor updates measuring position agents objects 
overcame problem soutchanski approach plan past sensing action eliminating explicit sensor updates kind robot control program altogether replacing models allow approximate calculation sensed values planning 
required annotating policies information models discrepancies real world detected executing policy 
approach applied robocup domain encouraging results 
weakness current implementation rewards assigned manually ad hoc manner 
hope employ learning methods improve performance 
boutilier reiter price symbolic dynamic programming order mdps ijcai pp 

boutilier reiter soutchanski thrun decisiontheoretic high level agent programming situation calculus proc 
aaai pp 

aaai press 
de giacomo levesque congolog concurrent programming language situation calculus artificial intelligence 
de giacomo levesque incremental interpreter highlevel programs sensing logical foundation cognitive agents contributions honor ray reiter eds hector levesque pirri springer berlin 
henrik lakemeyer line execution cc golog plans proc 
ijcai 
gro mann lldobler symbolic dynamic programming fluent calculus proceedings iasted aci pp 

lesp rance 
ng integrating planning reactive highlevel robot programs proc 
pp 

levesque reiter lesperance fangzhen lin richard scherl golog logic programming language dynamic domains journal logic programming 
lin reiter progress database artificial intelligence 
mccarthy situations actions causal laws technical report stanford university 
poole independent choice logic modelling multiple agents uncertainty artificial intelligence 
puterman markov decision processes discrete dynamic programming wiley new york 
reiter knowledge action mit press 
shanahan event calculus explained lecture notes computer science 
soutchanski line decision theoretic golog interpreter proc 
ijcai seattle washington august 
