rexec decentralized secure remote execution environment parallel sequential programs brent chun david culler university california berkeley computer science division berkeley ca tel fax cs berkeley edu bringing clusters computers mainstream general purpose computing systems requires better facilities transparent remote execution parallel sequential applications developed 
research done area remains inaccessible clusters built contemporary hardware operating systems 
implementations old publicly available require operating systems supported modern hardware simply meet functional requirements demanded practical real world settings 
address issues designed rexec decentralized secure remote execution facility 
provides high availability scalability transparent remote execution dynamic cluster configuration decoupled node discovery selection defined failure cleanup model parallel distributed program support strong authentication encryption 
system implemented currently installed node cluster way smps running linux operating system 
current technology trends clusters computers increasingly popular design point building scalable high performance computing systems 
key issues design systems users discover select transparently access resources cluster run applications 
address issue clusters today rely fragile remote execution systems built standard point point facilities rsh provide transparent remote execution 
result robustness management complexity usability performance systems suffer 
push clusters mainstream general purpose computing systems better environments needed transparent remote execution parallel sequential applications 
transparent remote execution systems clusters explored numerous times past variety forms 
user level approaches modification existing operating systems entirely new distributed operating systems implemented :10.1.1.116.3921
unfortunately considerable experience gained efforts remains inaccessible modern clusters built shelf hardware contemporary operating systems 
implementations old publicly available require operating systems supported modern hardware simply meet functional requirements demanded practical real world settings 
designed implemented new remote execution environment called rexec address issues 
building previous remote execution practical experience berkeley millennium clusters rexec provides features decentralized control transparent remote execution dynamic cluster membership decoupled node discovery selection defined error cleanup model support sequential programs parallel distributed programs user authentication encryption 
takes advantage modern systems technologies ip multicast mature os support threads simplify design implementation 
system implemented entirely user level small modifications linux kernel 
currently installed node cluster way smps part uc berkeley millennium project 
rest organized follows 
section state design goals assumptions rexec system 
section describe rexec system architecture implementation node cluster way smps running linux operating system 
section discuss examples rexec applied provide remote execution facilities applications 
section discuss related 
section conclude 
rexec system relation bsd rexec function relation rexec command butler system rexec function nest 
design goals assumptions section describe design goals assumptions designing rexec 
design goals years practical experience users berkeley cluster thorough examination previous systems remote execution desire combine extend key features systems single remote execution environment 
assumptions typical remote execution systems overly restricting extensive 
modern clusters built shelf hardware contemporary operating systems easily configured satisfy assumptions 
goals high availability 
system highly available provide graceful degradation service presence failures 
single point failure remote execution system artificial dependencies failure part remote execution system perfectly functional node having centralized system coordinator 
node functional running rexec system software available run applications rexec system 
scalability 
performance remote execution system scale size system grows 
specifically nodes added applications run system remote execution overhead scale gracefully 
transparent remote execution 
execution remote nodes transparent possible implementation approach kernel level implementations achieve greater transparency user level implementations 
minimum signals stdin stdout stderr user local environment current working directory user id group id environment variables propagated 
addition local job control applicable controlling remote jobs 
implementation core set features provides sufficient transparency large number applications 
file access important issue discussed section 
minimal static configuration files 
remote execution system rely static configuration files possible 
particular static files related cluster configuration avoided 
experience node membership large cluster tends change time machines added removed crash get brought rebooted forth 
having manually update configuration files time change occurs error prone inefficient 
configuration cluster discovered dynamically 
decoupled discovery selection 
process discovering nodes cluster state separated selection nodes run application 
gives users flexibility apply criteria select nodes best suited running applications 
example user want select nodes lowest cpu utilization want select nodes physical memory available want run specific set nodes 
defined failure cleanup models 
system provide defined models failure cleanup 
remote processes controlled local control introduce new failure modes network connection failure local proxy process remote process 
remotely controlled parallel distributed processes add additional failure modes process process program crashes 
addition practical issues arise due user level implementations cleanup remote processes fork child processes parents may exit causing child inherited init 
user level remote execution system supports parallel jobs extend failure cleanup model local sequential execution account differences 
parallel distributed program support 
remote execution environment provide minimal set hooks allow parallel distributed runtime environments built 
example running parallel program remote process program needs know processes comprise program process rank ordering processes information resolve network addresses processes communication established 
security 
system provide user authentication encryption communication 
clusters unprotected firewalls strong authentication prevents outside attackers launching brute force attacks weak security reverse engineering exploiting schemes rely security obscurity authentication simply uid passed client process master 
internal attackers encryption prevents users network discover passwords increasingly common occurrence large public institutions 
assumptions uniform file pathnames 
assume shared files accessible nodes pathnames 
assume local files node accessible pathnames bin ls 
clusters today built shelf hardware run free operating system linux commercial operating system solaris 
majority systems support completely transparent shared filesystem ones sprite solaris mc 
node tends private local filesystems number network file systems attached common mount points nodes cluster 
cluster uses linux nfs network file system configuration 
nodes run os compatible software configurations 
assume nodes cluster run compatible versions operating system compatible software configurations 
compatible versions means application binaries supported different versions operating system linux versus linux 
compatible software configurations means necessary support applications available applications 
having version operating system sufficient 
example applications may require certain shared libraries 
attempt address heterogeneity issues meta computing systems systems pvm attempt address 
system nodes run slightly modified version linux operating system configuration identical installed mount points nfs filesystems 
common user id account database 
assume user unique user id account nodes cluster 
implemented having nodes cluster nis domain 
assuming unique user ids accounts cluster nodes reasonable assumption system scale machine room building campus 
attempt address heterogeneity cross administrative domain issues wide area meta computing systems 
requiring user account cluster nodes terribly restrictive implemented fairly easily class systems address 
furthermore necessarily preclude user account accessing resources cluster 
access cluster example available defined services popular applications server side implementations run real user account 
alternatively proper security guest accounts offered 
system architecture address issues section built rexec decentralized secure remote execution environment clusters computers 
system consists main programs rexecd daemon runs cluster node rexec client program users run execute jobs rexec vexecd replicated daemon provides node discovery selection services 
users run jobs rexec client 
client performs functions selection nodes user preferences lowest cpu load ii remote execution user application nodes direct ssl tcp connections node rexecd daemons 
system currently installed running node cluster way dell smps running modified version linux operating system part berkeley millennium project 
section provide details key features rexec show features address design goals 
decentralized control rexec uses decentralized control allow graceful scaling system overhead cluster nodes added number applications run increases 
selecting set remote nodes run rexec client opens tcp connections nodes executes remote execution protocol rexecd daemons directly 
direct client daemon connections allow forwarding stdin stdout stderr networking process resources managing remote execution distributed rexec client rexecd daemons 
large number nodes having centralized entity act intermediary users cluster nodes easily bottleneck single node resources issue kernel limitations sockets 
scheme avoids problem distributing 
addition scalability decentralized design definition avoids single points failure 
freeing users depending intermediate entities access nodes need run programs ensure functional node system reachable network running rexecd daemon run user rexecd rexecd rexecd rexecd vexecd vexecd ip multicast rexecd state node rexec node node node 
run indexer node cpu load cpu load cpu load 
lowest cpu load 
node node node cpu load rexec indexer nodes organization rexec remote execution environment 
system consists main programs rexecd daemon runs cluster node rexec client program users run execute jobs rexec vexecd replicated daemon provides node discovery selection services 
users run jobs rexec rexec client performs functions selection nodes run user preferences ii remote execution user application nodes direct ssl tcp connections node rexecd daemons 
example nodes system node node node node instances vexecd implements lowest cpu load policy 
user wishes run program called indexer nodes lowest cpu load 
contacting vexecd daemon rexec obtains names machines lowest cpu load node node 
rexec establishes ssl tcp connections directly nodes run indexer 
applications 
rexec number front machines 
contrast previous systems score centralized entity intermediary clients cluster 
master crashes nodes berkeley cluster unavailable running programs system 
practice centralized entities backup failover capabilities decrease system availability significantly 
transparent remote execution rexec provides transparent remote execution allows processes running remote nodes execute controlled running locally 
rexec uses mechanisms accomplish propagation recreation user local environment remote nodes ii forwarding local signals remote processes iii forwarding stdin stdout stderr rexec client remote processes iv local job control control remote processes 
propagate recreate user local environment remote node rexec client packages user local environment including user current working directly environment variables user id group id program execute command line arguments 
part remote execution protocol sends information rexecd node selected run user application 
receiving new connection request rexec client rexecd spawns new client thread manage particular rexec instance 
forking user program thread things user local environment standard library functions chdir setuid 
remotely forked process execute local environment machine rexec client running 
second rexec forwards locally delivered signals remote process 
rexec implement true global pid space 
send signal remote processes application users send signal local rexec client 
rexec client acts proxy remote processes 
receiving signal rexec client forwards signal rexecd thread node application running 
thread responsible solely forwarding signals stdin received rexec client instance corresponding remote process 
rexec currently forwards unix signals supported linux 
pthreads library caught breaking 
related job control handled differently discussed 
rexec user level implementation rexec clients crashes effect achieved rexec error detection cleanup mechanisms discussed rexec client caught 
third rexec forwards stdin rexec client remote processes forwards stdout stderr remote processes rexec client 
stdin additional thread rexec responsible solely forwarding stdin remote processes 
stdin broadcast remote processes 
remote side signals stdin forwarding thread receives stdin messages forwards remote processes unix pipe 
stdout rexecd rexec client stdout stderr threads unix pipes read output remote process forward data back rexec client remote node rexec thread things reads remote stdout stderr prints output locally user terminal 
line stdout stderr prefixed node number remote process printed node prints hello world appears hello world 
fourth rexec allow users standard job control control remote processes applications 
just rexec client proxy deliver signals proxy control remote processes job control 
specifically rexec supports fg bg commands shell deliver signals 
rexec implemented mainly user level job control delivery appropriate signals requires approximating desired effect 
example typing local process delivers process suspends execution process 
delivering remote process meaningful process attached terminal 
rexec catches signals delivers respectively 
dynamic cluster membership rexec uses dynamic cluster membership service avoids static configuration files 
experience large clusters computers time set nodes cluster available perform useful varies number reasons 
adding nodes removing nodes bringing machines rebooting machines forth fairly common events system 
static configuration files define note due way stdout buffered applications run rexec statements want stdout written immediately stdout pipe stdout displayed immediately user terminal 
job job thread main thread announce bin ls rexec thread thread stdin sig thread stdout thread stderr thread heartbeat fork exec unix pipes thread node rexecd ssl tcp connection thread thread stdin signals rexec internal thread structure data flows rexec rexecd 
rexec consists stdin thread forwarding stdin signals thread forwarding signals node thread node managing remote process execution including printing remotely forwarded stdout stderr user local terminal receiving heartbeat packets rexec client monitoring ssl tcp connection receiving exit status remote process 
example rexec running bin ls single node node thread 
rexecd consists main thread creates new threads new rexec clients maintains list running jobs announce thread sending multicast state announcements collection threads 
rexec client threads include main rexec thread client user process forked main rexec thread stdin signals thread forwarding stdin signals rexec user process stdout stderr threads forwarding stdout stderr user process rexec heartbeat thread sending periodic heartbeat packets detect failures ssl tcp connection rexec rexecd 
set nodes cluster dynamic cluster membership service discovers nodes join leave cluster 
cluster membership service built known cluster multicast address communicate various information 
known multicast address processes different nodes communicate interested receivers explicitly naming 
senders wish send information simply send multicast address unique message type 
interested parties elect receive interpret information interest examining incoming message types 
necessary processes multicast channel bootstrap point point connections sending multicast request server point point address 
information bus architecture publish subscribe services uses similar general model 
implement cluster membership service needed way nodes added cluster membership available deleted cluster membership unavailable 
rexecd daemons multicast announcement packets include ip address node tcp port included currently rexecd daemons listen known port configuration information number cpus state information number jobs rexec controlling load 
announcement packets sent periodically minute significant change state observed rexecd occurs 
currently state changes send announcements job arrivals job departures 
maintain approximate membership cluster reception announcement packet sign node available non reception announcement small multiple periodic announcement interval sign node unavailable 
membership approximate information necessarily delayed unreliable udp ip multicast transport protocol 
announcement packets replicated vexecd daemons discover maintain node membership cluster caching timing node announcement information 
similar multicast protocol transmitted load information separate daemons maintain membership load information opposed having node cluster 
primary reason doing avoid context switches cluster nodes running user applications 
rexecd received multicast packets rexecd need scheduled handle receiving packets 
decoupled discovery selection rexec decouples node discovery selection nodes application run 
discussed previous section replicated vexecd daemons responsible discovering maintaining node membership cluster 
state announcement period new vexecd discovers entire instantaneous membership cluster 
multiple vexecd daemons keeping track nodes configuration state selection policy simply mapping applies criteria list available hosts returns set hosts 
users may different criteria want nodes selected applications discovery selection decoupled 
vexecd daemons discovery implement number selection policies 
idea implementing selection services envision users probably choose small set policies deciding run applications 
community composed largely scientific computing users example lowest cpu load may common criteria 
system precompute cache orderings list available nodes clients quickly obtain results common selection policies 
circumstances users contact vexecd daemons asking best nodes best defined selection criteria 
simply return top nodes ordered list recomputed time state change occurs adjustments 
free implement policies complexity return nodes lowest average cpu load days 
users free implement selection policies writing vexecd 
able receive cpu state announcement messages implementation simply need listen cluster ip multicast address receive announcement messages apply policy 
users want selection policies implement discovery vexecd daemons services completely transparent 
information needed user form list suitable vexecd servers criteria expressed way system automatically discover vexecd daemons implement criteria 
currently take approach 
users specify list suitable vexecd daemons environment variable space delimited list hostnames vexecd daemons run 
rexec client seeing non null try daemon turn succeeds exhausts list 
discovery hostnames machines implement suitable vexecd daemons done band means system administrator uses web page post list hostnames designated run certain policies done semi automatically 
offer approaches 
self explanatory 
involves cluster ip multicast channel multicast vexecd daemons system asking selection policy implement 
vexecd receiving request returns string provides textual description policy user construct suitable list setting environment variable 
error cleanup model rexec provides defined error handling cleanup model applications 
error occurs rexec client remote processes tcp connections rexec client remote rexecd daemons entire application exits resources reclaimed textual error message printed user 
common shortcoming previous remote execution systems especially support parallel execution lack precise error cleanup model insufficient implementations remote cleanup 
just point point facilities ssh fail perform appropriate cleanup local client kill remote process user level remote execution environments fail properly relinquish resources remote nodes 
rexec addresses defining model addressing new failure modes associated remote execution parallel distributed programs providing robust implementation 
transparent remote execution cluster support parallel distributed applications introduces new failure modes execution user applications 
remote process control mediated local proxy rexec client obvious new modes failure 
rexec client fail second network connection rexec client remote rexecd fail 
rexec client serves point control user logically represents remote process es interpret failure rexec client failure application cleanup 
network connection rexec rexecd fails prevents user controlling remote process view failure 
support parallel distributed programs introduces failure mode individual failure processes program 
take position process program fails entire application aborted 
rationale trivially parallelizable distributed programs communication processes failure process usually means failure entire application 
course case parallel distributed program feel reasonable model users large class programs 
general potential error cleanup models system support 
handful practical sense real applications 
example useful failure model considering supporting currently implement model processes completely decoupled leave application deal failures 
model appropriate example parallel application error detection ability grow shrink resource availability faults 
implementation error cleanup model done mainly user level involves small kernel modifications 
user level need monitor remote process failures locally remote nodes need monitor network failures 
determine process failed thread rexecd remote process rexecd captures return code returned process 
examining return code thread performs check see process exited normally abnormally 
exited abnormal exit code interpret error 
determine network connection failed rely system call error codes returned network related system calls 
cases processes fail machine operating system functioning properly network errors detected quickly due os implementation tcp protocol 
ensure timely detection network failures cases data sent long periods time compute bound jobs machine crashes heartbeat thread remote node 
heartbeat sends periodic heartbeats rexecd rexec network connection failed send failures detected timely manner note interpreting network failures failures cause cleanup cover case rexec client sent signal catch due user level implementation 
case rexec exits tcp connections closed causes remote rexecd daemons perform cleanup 
rexec uses kernel modifications ensure remote resources reclaimed performing remote cleanup 
specifically wanted address cleanup issues remote processes including fork arbitrary process trees tcp keepalive packets option due excessively high timeout values order hours inability set timeouts connection basis 
multiple threads 
cases keeping track process id root process tree sending signal process perform cleanup 
descendents process may computing 
added new system call specify root process tree descendents process inherit fact part tree system call deliver signals members tree regardless changes process group intermediate parents exiting causing children inherited init forth 
performing cleanup rexec simply sends processes logical tree results resources threads processes process tree freed 
note modified wait system call deal process trees remote thread waiting remote process exit return processes logical tree exited 
parallel distributed applications rexec supports parallel distributed applications allowing users launch control multiple instances program multiple nodes providing set hooks allow parallel runtime environments built 
starting nodes instances program accomplished adding nodes switch rexec client program allows user specify program run nodes nodes cluster 
hooks provide runtime environments fairly minimal set 
remote process environment variables set rexec rexec rexec par degree rexec rexec 
rexec globally unique identifier particular execution user application 
implemented bit concatenation bit ip address interface rexec client uses communicate local bit process id rexec client 
rexec par degree bit integer specifies number nodes application running 
node program rexec assigns ordering nodes rexec par degree 
node rexec specifies position node ordering 
rexec contains list rexec par degree hostnames ip addresses nodes user application running 
environment variables parallel runtime environment example information identify nodes various parts dataset means employed discover network addresses peer endpoints 
example rexec parallel distributed application support practice section discuss rexec mpi runtime 
authentication encryption rexec provides user authentication encryption communication rexec clients rexecd daemons 
specifically rexec uses version implementation secure socket layer ssl protocol authentication encryption tcp connections entities 
user private key encrypted des certificate containing user identity public key signed known certificate authority verifies user identities 
system single trusted certificate authority certificate signing user names identifies certificates 
time user wants run application rexec user invokes rexec client command line types decrypts user private key 
system performs handshake rexec client rexecd negotiates cipher uses diffie hellman key exchange establish session key uses rsa verify user certificate signed trusted certificate authority checks username certificate exists matches corresponding local user id propagated rexec client 
user identity established communication corresponding tcp connection encrypted des shared session key 
rexec applications section examples rexec applied provide remote execution facilities applications 
example describe rexec system basic form provide remote execution parallel sequential jobs 
second example describe mpi implementation fast communication layer myrinet uses rexec underlying remote execution facility 
third example provide example rexec extended provide remote execution berkeley millennium cluster uses market resource management techniques :10.1.1.1.7950
parallel sequential jobs rexec client provides minimal amount support needed transparently run control parallel sequential programs cluster 
users run rexec client follows rexec nodes arg arg 
argn nodes number nodes program executed arg arg 
argn command line user type run program arguments arg arg argn single node 
node selection done vexecd daemons specifying list suitable vexecd daemons environment variable 
alternatively user wants run application specific set nodes user set rexec environment variable 
non null rexec takes precedence 
parallel distributed programs launched basic rexec client 
responsibility runtime layers application rexec environment variable support parallel distributed programs decide data computation partitioned communication processes established 
time seconds number nodes time run null parallel program rexec function number nodes 
graph shows measured execution time parallel program starts immediately exits multiple nodes cluster 
measurements illustrate basic costs associated running jobs rexec system 
start cleanup cost running single node program rexec ms number nodes increases total execution time scales linearly average node cost ms 
note aggressively pursued optimizations absolute performance numbers improved 
mpi gm myrinet rexec basic hooks parallel distributed programs modified mpi implementation gm mpi gm fast communication layer rexec underlying remote execution mechanism 
original version mpi gm configured default rsh static node port number configuration files remote execution node 
modifications users able run mpi programs cluster gm obtaining benefits rexec system 
running mpi program multiple nodes different running normal application rexec 
practical examples problems solve elimination static host configuration files elimination gm ports conflicts due processes problem immediately evident tried kill mpi gm program 
modifying mpi adi layer rexec required mapping rexec environment variables mpi variables addressing port communication endpoint naming issues 
mpi parallel runtime environments provides set library functions allow process program obtain total number processes program process unique id naming processes 
variables decide data computation partitioned multiple processes parallel program 
mpi gm variables mpi size rank easily set process simply setting values rexec par degree rexec environment variables 
mpi gm process uses single port communicate processes program 
node specifically myrinet lanai network interface card support user ports ranging 
port address combination hostname integer port number 
default configuration mpi gm relies user having configuration file specifies port number process user mpi program 
multiple programs running cluster manual configuration forces user deal port name conflicts due programs competing gm resources 
solved naming problem extending gm library support function binds free gm port returns port number application 
allows avoid having explicitly specify port numbers 
doing meant process unaware port numbers peer processes bound 
thing allow peer processes exchange names bind lookup operations centralized nameserver berkeley project 
took advantage remaining environment variables rexec rexec 
nameserver allows processes bind key value pairs value lookups keys 
concatenation rexec process rank separated keys 
rexec unique system ensures node program uses unique keys 
values gm port numbers returned port creation function added 
binding key value pair port process lookup port numbers peers 
results lookups saved communication 
computational economy part berkeley millennium project extended rexec remote execution environment operate context market resource management system 
system users compete shared cluster resources computational economy nodes sellers computational resources user applications buyers user sets willingness pay application personal utility running 
managing resources personal value key benefits obtained 
allocating resources willingness pay cluster optimize user satisfaction opposed system centric global performance metrics mean job completion time ignore personal user valuations resources 
second pricing system mediate access resources system provide proper incentives users system socially responsible way 
hypothesize market sharing deliver significantly value users traditional approaches resource management 
support computational economy extended rexec system ways 
added new command line switch rexec client specify maximum rate expressed credits minute application willing pay cpu time 
switch users express personal cpu time applications maximum rate application willing pay cpu time 
second rexecd modified economic front collection functions implement cpu market performs proportional share cpu allocation stride scheduler charging user accounts cpu usage :10.1.1.138.3502
ensures applications run rexec compete cpu time computational economy 
third modified rexecd include announcement packets current aggregate willingness pay rexec applications competing resources 
augmenting announcement packets information allows vexecd daemons implement policies involve cpu price find nodes lowest price 
related research efforts remote execution environments clusters going decade 
succeeded addressing various extents solving different subsets key problems remote execution systems 
systems addressed range problems rexec 
built previous practical experience large scale research cluster rexec addresses wide range practical needs providing useful features address important issues error handling cleanup high availability dynamic cluster configuration 
accomplish goals rexec implemented user level commodity operating system small modifications os kernel 
approach example distinct implementation strategies user level approaches ii modification existing operating systems iii completely new distributed operating systems 
score butler load sharing facility lsf examples user level implementations :10.1.1.1.7950
compared rexec systems implements subset rexec features 
score example systems list support parallel programs 
rely centralized control manually updated cluster configuration 
butler lsf support different forms replicated discovery selection 
supports error cleanup model extensive rexec strong authentication encryption 
notable feature implemented systems rexec currently support programmatic interface system 
butler lsf example allow users write applications link library remote execution related functions 
model applications shell automatically decides execute job locally remotely developed 
mosix nest unix solaris mc examples modifying extending existing operating system :10.1.1.116.3921
systems supports subset rexec features 
nest example supports transparent remote execution support features dynamic cluster membership parallel distributed application support 
mosix example provides transparent remote execution fairly limited context mainly targeted load balancing set desktop machines exploit idle time 
notable feature supported mosix currently support process migration 
mechanisms implement known user level kernel level implementations various constraints :10.1.1.14.7130
notable difference rexec kernel level implementations degree transparency remote execution system 
kernel level implementations achieve greater levels transparency user level approaches 
solaris mc example implements true single system image real global pids global proc filesystem global cluster wide filesystem 
sprite locus examples completely new distributed operating systems support transparent remote execution 
systems described distributed operating systems support subset rexec features 
example supports publish decentralized state announcement scheme rexec 
hand support parallel applications support flexible selection policies implement strong authentication encryption 
mosix systems support process migration rexec currently implement 
addition kernel level implementations previously described new operating systems achieve greater levels transparency due implementations operating system level case sprite locus cluster wide global filesystems 
bring clusters computers mainstream general purpose computing systems better facilities needed transparent remote execution parallel sequential applications 
research done area remote execution remains inaccessible clusters built contemporary hardware operating systems 
address designed implemented new remote execution environment called rexec 
building previous remote execution practical experience berkeley millennium clusters provides decentralized control transparent remote execution dynamic cluster configuration decoupled node discovery selection defined failure cleanup model parallel distributed program support strong authentication encryption 
system implemented currently installed node cluster way smps running linux operating system 
currently serves remote execution facility market resource management studies part uc berkeley millennium project 
agrawal location independent remote execution nest 
ieee transactions software engineering august 
anderson culler patterson team :10.1.1.116.3921
case networks workstations 
ieee micro feb 
barak la smith scalable cluster computing mosix linux :10.1.1.116.3921
proceedings linux expo may pp 

geyer network operating system tool writing distributed applications :10.1.1.1.7950
operating systems review october 
chien giannini high performance virtual machines clusters supercomputing apis performance 
proceedings th siam conference parallel processing scientific computing pp 
chun culler market proportional resource sharing clusters :10.1.1.1.7950
submitted publication september 
culler arpaci dusseau arpaci dusseau chun mainwaring martin yoshikawa wong parallel computing berkeley 
proceedings th joint symposium parallel processing kobe japan 
douglis ousterhout transparent process migration design alternatives sprite implementation 
software practice experience august 
foster kesselman globus metacomputing infrastructure toolkit 
international journal supercomputer applications 
freier kocher ssl protocol version internet draft 

petrou rodrigues vahdat anderson global layer unix network workstations 
software practice experience apr 
grimshaw ferrari humphrey legion operating system wide area computing 
tech 
rep cs university virginia department computer science 
hori ishikawa implementation parallel operating system clustered commodity computers 
proceedings cluster computing conference march 
ju xu tao parallel computing idle workstations 
operating systems review july 
khalidi shirriff solaris mc multi computer os 
proceedings usenix conference 
litzkow tannenbaum livny checkpoint migration unix processes condor distributed processing system 
tech 
rep university wisconsin madison april 

gm api 

nichols idle workstations shared computing environment 
proceedings th acm symposium operating systems principles 
oki siegel skeen information bus architecture extensible distributed systems 
proceedings th acm operating systems principles pp 

ousterhout douglis nelson welch sprite network operating system 
ieee computer february 
plank beck li transparent checkpointing unix 
proceedings usenix winter conference 
ridge becker sterling beowulf harnessing power parallelism pile pcs 
proceedings ieee aerospace 
rowe birman local network unix operating system 
ieee transactions software engineering march 
shirriff building distributed process management object oriented framework 
proceedings usenix conference 
stumm design implementation decentralized scheduling facility workstation cluster 
proceedings nd ieee conference computer workstations march pp 

sunderam pvm framework parallel distributed computing 
concurrency practice experience december 
theimer cheriton preemptable remote execution facilities system 
proceedings th acm symposium operating systems principles 
waldspurger weihl stride scheduling deterministic proportional share resource management :10.1.1.138.3502
tech 
rep mit lcs tm massachusetts institute technology 
walker popek english kline thiel locus distributed operating system 
proceedings th acm symposium operating systems principles pp 

zhou wang zheng delisle utopia load sharing facility large heterogenous distributed computer systems 
software practice experience 

