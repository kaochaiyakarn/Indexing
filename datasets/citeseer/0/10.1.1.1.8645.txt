efficient incremental algorithms dynamic detection invariants jeff perkins michael ernst massachusetts institute technology computer science artificial intelligence laboratory street cambridge ma usa csail mit edu csail mit edu dynamic detection invariants program analysis generalizes observed values hypothesize program properties 
reported program properties set invariants program known operational abstraction 
operational abstractions useful testing verification bug detection refactoring comparing behavior tasks 
previous techniques dynamic invariant detection scale poorly report properties 
incremental algorithms attractive process observed value scale data sizes 
previous incremental algorithms checked reported small number properties 
takes steps correcting problem 
presents new incremental algorithms invariant detection compares analytically experimentally existing algorithms 
furthermore presents optimizations shows implement context incremental algorithms 
result scalable invariant detection sacrifice functionality 
categories subject descriptors logics meanings programs specifying verifying reasoning programs invariants general terms algorithms performance keywords dynamic invariant detection incremental algorithm batch algorithm reversing optimizations 
presents evaluates algorithms optimizations obtaining operational abstraction formal description properties held series program runs expected hold runs 
task generating operational abstraction known dynamic detection invariants dynamic invariant detection 
dynamic invariant detection important practical problem 
operational abstractions verifying safety properties automating theorem proving identifying refactoring opportunities predicate abstraction generating test cases selecting prioritizing test cases explaining test failures predicting incompatibilities permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page :10.1.1.2.5030:10.1.1.143.8475:10.1.1.1.9075
copy republish post servers redistribute lists requires prior specific permission fee 
sigsoft fse oct nov newport beach ca usa 
copyright acm 
component upgrades error detection error isolation choosing modalities tasks :10.1.1.164.9197
dynamic invariant detection independently implemented research groups related tools produce formal descriptions run time behavior seen wide see section 
dynamic invariant detection valuable implementing efficiently challenging 
naive implementation straightforward fails scale problems substantial size 
key parameters control runtime runtime subject program longer running program produces data analyzed number variables fields examined size variable arrays expensive test integers booleans number program points invariant detection performed instance instruction versus entry exit points component grammar invariants checked checking invariants relate variables expensive considering relate variables 
size program relevant insofar affect measures 
previous invariant detection algorithms controlled runtime space limiting factors see section 
result results limited expressiveness applicable fewer programs desired 
goal remove limitations enabling invariant detection applied programs produce detailed results 
address goal providing new algorithms invariant detection top incremental algorithm bottomup incremental algorithm analytically experimentally comparing algorithms previously known algorithms simple incremental algorithm multipass batch algorithm 
describe optimizations equivalence sets constants previously implemented multi pass batch algorithm show extend incremental algorithms new optimization hierarchy 
optimizations take advantage fact certain properties hold properties guaranteed hold need checked 
experimentally evaluate optimizations discuss complications arising integrating optimizations algorithms 
organized follows 
section provides background dynamic invariant detection explains factors affect runtime 
section gives simple incremental algorithm invariant detection section notes types redundancy output 
sections give algorithms exploit redundancies different ways multi pass algorithm section bottom incremental algorithm section top incremental algorithm section op incremental algorithms section 
section gives results experiments various algorithms optimizations 
section discusses related section concludes 

background dynamic invariant detection dynamic detection invariants discovers invariants program executions instrumenting target program source binary form trace variables interest running instrumented program set test cases postulating checking invariants values program computes 
essential idea generate check algorithm test set possible invariants observed values instrumented variables 
set observed values program point called sample 
invariant detector reports properties tested sufficient degree falsification 
output includes properties entry procedure foo sorted exit procedure bar return return stands return value link objects prev 
dynamic approaches profiling accuracy results depends part quality completeness test cases 
modest test suites produce results practice techniques exist creating test suites invariant detection 
remainder brevity invariant mean invariant noted 
invariants reported depends properties checked specifically grammar properties expressible invariant detector variables properties checked program points properties checked 
discuss factors 
section discusses choices various implementations factors 
reported properties depend filtering performed checking statistical tests reduce false positives elimination redundant properties 
program points 
invariants checked arbitrary locations program 
examples procedure entries exits resulting invariants correspond preconditions postconditions 
useful compute invariants procedure exit return statement compute aggregate exit point viewed client generalizing individual exit points 
object class invariants computed aggregate program point object point generalizing objects observed entry exit public methods class passed returned methods classes stored object fields 
grammar properties 
invariant detector may check just types properties equalities inequalities variables may check larger variety 
variables constants 
properties checked include constant non zero range linear relationships ax ordering functions library fn containment sorted 
invariant detector may permit users add domain specific properties checked 
invariant detector may report conditional properties implications left null left value value checking larger number properties output contain facts needed human tool increases runtime invariant detector likelihood false positives 
grammar variables 
properties invariant detector express instantiated particular variables values example instantiated variables second collection 
addition procedure parameters return value useful detect invariants additional variables instance global variables pre state values values called derived variables manifest program 
example array integer scope properties may interest variable may appear program 
procedure exit including original values variables permits reporting side effects input output relationships 
object fields fields provide useful additional information 
results calls side effect free methods derived variables 
examining structure elements results missing variable values 
example variable null nonsensical 
subtler example results fields dereferenced depth say class contains field type integer field type contains field type integer 
uses type typically represented address hash code field available 
uses type fields available field field dereference depth available nonnull 
requires special care report correct results variables invariant may missing invariant falsified relied certain situations 
experimental evaluation 
experimental evaluation uses daikon implementation publicly available pag csail mit edu daikon 
daikon implements features listed section including ternary derived variables invariants field dereferencing user specified depth user specified invariants conditional invariants statistical tests 
full list derived variables enabled default invariants enabled appears daikon user manual available website 
daikon operates java perl code various data formats 

simple incremental algorithm section gives incremental single pass invariant detection algorithm discards sample processing storage space requirements grow number samples 
incremental algorithm run online simultaneously target program eliminating need store trace files disk 
algorithm follows 

initially assume properties grammar true 
instantiate candidate invariant property combination variables 
example grammar properties odd variables instantiate odd odd odd 
sample check candidate invariant associated program point sample discard contradicted sample 
example sample eliminates invariants odd list 

report invariants remain processing sam vp number variables values scope program point vd number derived variables obtained original variables total variables program point vp vd execution length number samples program point number possible invariants program point ri number reported invariants program point program size number program points grammar number invariant templates variables variables running time space analyses 
ples applying post processing filtering 
program point processed independently 
algorithm uses space store candidate invariants 
initial maximum space usage 
see definitions variables 
suppose types derived variable involve variables example subarray types invariant involve variables example ax cz program points instrumented reachable variables fields scope program point 
prohibitive 
static analysis determine variables sensibly compared number invariants high order polynomial number variables 
hand grammar invariants small simple incremental algorithm space usage reasonable 
worst case runtime requires checking invariants sample practice invariants false false invariants falsified quickly samples common case runtime ri summand falsified properties second summand falsified invariants checked samples 
simple incremental algorithm implemented number research groups invariant detector aware daikon 

optimization opportunities redundant properties simple incremental algorithm section checks reports invariants necessary 
section gives examples redundancy output 
optimizations equal variables constants suppression yielded significant performance enhancements multi pass batch algorithm 
equal variables variables equal invariant true variables true variables 
example invariant implies 
context condition requires variable missing 
example missing necessarily imply value missing may invalidated invariant 
dynamically constant variables dynamically constant variable value observed sample 
invariant constant invariant redundant 
example implies odd 
likewise combinations variables implies 
missing values affect concluded group constants exist sample constant group missing 
variable hierarchy variable values contribute invariants multiple program points 
example values observed public method exits affect method postconditions object invariants 
program points samples appear invariant true necessarily true redundant formalized relationship partial order lesser elements receive subset samples received higher element higher elements contain subset invariants true lower element 
different variables appear different program points partial order better understood variables organized program points program points 
illustrates variable hierarchy simple java classes 
ways partial order relates variables enter exit exit point notation final value variable orig initial value entry procedure 
variables procedure entry points corresponding original variables procedure exit point 
object method variables object points corresponding variables method entry exit point 
object client variables object points corresponding variables client class 
relations automatically determined program source 
suppression weaker invariants invariant suppressed logically implied set invariants 
previous examples redundancy special cases give rise specific optimization opportunities 
example implies imply div equal variables dynamic constants missing values affect suppressed 
second example sample order div true 

multi pass batch algorithm opportunities identified section give powerful ways identify logically redundant properties 
certain antecedent properties hold properties redundant need created checked reported 
simple incremental algorithm take advantage redundancy 
antecedent properties relied invariant detection complete properties may falsified time 
multi pass algorithm addresses issue performing invariant detection multiple passes 
early passes check simple invariants passes check complex invariants create derived variables necessary 
implementation uses passes 
number represents compromise exposing optimization opportunities reducing number passes 

unary constant 
pass determines variable constant missing 
subsequent passes ignore constant variables 
variable hierarchy simple java classes 
shaded areas name program point unshaded boxes represent variables program point 
lines show partial ordering described section 
lesser elements appear lower instance orig arg arg lower left corner 
note variable connected variable object client relation 
variable arg parameter method put null null 

binary equality 
pass checks equality pair non constant variables 
set equal variables leader variable arbitrarily chosen represent set 
subsequent passes process leaders 

unary 

binary 

ternary 
suppression weaker invariants optimization built passes 
creating invariant invariant specific code checks invariant implied existing invariants 
just example pass discovered pass need check ternary invariant max 
note pass invariants checked constants variables 
powerful optimization undesirable side effects interesting invariants may omitted result 
previous experiments demonstrated necessary achieve acceptable performance 
version constant variables optimization incremental algorithms section flaw 
implementation multi pass algorithm currently implement hierarchy optimizations 
doing possible algorithm complicated require postprocessing increasing number passes additive factor depth hierarchy 
sections describe hierarchy optimization incremental algorithms 
multi pass algorithm processes program points performing passes trace data program point 
program points processed samples associated program points discarded 
optimization multipass algorithm worst case space cost max ri 
argument storing traces represents total space usage start algorithm second storing invariants represents space usage algorithm 
practice argument dominates 
trace data reduce storage costs 
worst case runtime passes invariants quickly falsified checked leading common case runtime ri passes 
downside multi pass approach need store trace data processed multiple times 
modest traces occupy gigabytes disk space memory limiting ability algorithm non trivial programs making inappropriate online 
reading files multiple times possibility file substantial cost implementation stores traces memory performing run length encoding identical samples save space 
alternative storing trace data run target program multiple times pass multi pass algorithm 
acceptable prohibitively difficult program performs side effects depends aspects environment may change including random number generators memory addresses hash codes thread scheduling uses expensive resources including human attention 
programs operating systems web servers terminate 
user may wish switch gathering invariants checking invariants fly :10.1.1.164.9197

bottom incremental algorithm incremental algorithm handle arbitrarily long executions target program processes sample exactly discards 
optimizations complicated costly invariant detector undo optimization antecedents depends falsified 
section presents new bottom incremental algorithm section proposes top incremental algorithm 
algorithms differ primarily address variable hierarchy optimization optimizations similar incremental algorithms section 
invariant true higher level variable hierarchy true lower levels 
instance object invariant precondition postcondition public method 
key idea hierarchy optimizations particular property true multiple program points invariant checked level hierarchy 
bottom implementation invariants checked lowest possible level top implementation checked highest possible level 
bottom algorithm processes samples leaves variable hierarchy aggregate program points handled postpass 
samples processed invariants non leaf built merging invariants children 
invariant created parent iff invariant type variables exists child 
invariant exist child falsified child falsified parent 
invariant merging routine operates manner similar run time processing 
straightforward stateless sample independent invariants express fact variables internal state change result processing sample 
example greaterthan product stateless invariants 
sample dependent invariants equation includes constant 
reasonable instantiate check possible ax invariant object stands invariants variables constants computed fit observed samples 
run time processing sample may change meaning invariant instance adding linearly independent point permits constants computed weakening invariant changing sample value observed 
merging sample dependent invariants requires invariant specific processing 
example child contains invariant child contains invariant merged invariant parent 
complication populating parent program points need properly relate variables multiple program points illustrated 
variables name need correspond correspondence cross class boundaries 
optimizations section complicate correspondence 
merging parent set equivalence sets variables section intersection sets equivalence sets child 
variables equal parent iff equal child 
invariant merging merge information statistical tests mentioned section statistics computed parent program point processed samples 
bottom approach sample processed exactly leaf 
non leaf program points considered processing complete 
processing time parents dependent small number invariants children large number samples 

top incremental algorithm bottom algorithm instantiates invariant say leaf program point contains contrast top algorithm aims save space cost additional runtime instantiating invariant highest point hierarchy true 
invariants initially created top partial order 
sample read trace processed program point top partial order leaf program point sample belongs 
invariant falsified program point invariant immediately removed program point added children sample processed child 
result invariant appears path starting top hierarchy 
set invariants program point consists invariants appear implementation accounts fact partial order forms dag tree 
example top hierarchy optimization 
left diagram shows invariant point marked gray background top hierarchy holds program point 
center diagram shows hierarchy falsifying sample received point processed order 
right diagram shows hierarchy falsifying sample received point 
higher program point 
example see 
order applied multiple program points sample transformed include correct values correct order 
required different variables appear different program points non leaf program point may see samples originating multiple leaves 
bottom algorithm transformation postprocessing 
transforms invariants samples 
top algorithm incremental optimizations section complex 
invariants hold program point physically located program point higher location partial order 
order search invariant optimizations traverse hierarchy copying invariant possibly different program point place copy target program point appear higher target 
unfortunately sample dependent invariants tend numerous practice topdown hierarchy optimization instantiated partial order 
processing sample dependent invariant observe sample program point omitting 
example suppose invariant equal constant order samples prog 
point value sample set equation 
third sample falsify invariant 
algorithm outlined invariant copied children shown center diagram 
incorrect program points received samples indicate bound problems achieving correctness led modify implementation top algorithm 
instantiating invariants highest point hierarchy instantiated level tree 
lower tree suppressed see section higher tree 
gains time advantages possible utilizing variable hierarchy invariant checked level hierarchy space advantages invariants duplicated 
words top algorithm intuitively appealing promises space savings instantiating invariants fewer locations hierarchy achieve goals 
copying invariants due splitting equality sets 
equality sets invariants shown processing sample 
optimizations incremental algorithms multi pass algorithm passes rely properties known true samples 
contrast properties enable optimizations incremental algorithms subject change 
algorithm able undo optimization 
may require creating previously suppressed invariants putting state processed samples seen far 
equal variables incremental algorithms equivalence sets variables just batch algorithm dynamically update equivalence sets 
initially variables placed single equivalence set modulo comparability noted section 
invariants instantiated leaders sets 
processing elements equivalence set differ value missing equivalence set broken multiple parts invariants original leader copied new leaders 
copying proceeds follows 
invariant mentions leader old equivalence set duplicate invariant times new equivalence sets 
duplicate replace instance old leader different new leaders 
original invariant mentioned old leader duplicates mention old leader recursively processed 
original invariant mentioning old leader times turns duplicates 
example see 
algorithm extends straightforward manner multiple equivalence sets breaking simultaneously 
reflexive invariants single variable uninteresting reported equal variables optimization requires existence processing 
equal variables optimization invariant leader variable stands multiple invariants members equivalence set 
left side stands stands invariants 
reflexive invariants required equivalence set break 
example stands invariants 
invariants right side created duplication step 
optimization reflexive invariants need created fewer members equality set variables invariant 
example necessary create 
constant variables incremental algorithms dynamically maintain set constant variables 
necessary instantiate invariant variables constant 
invariant variables non constant member constant set invariant instantiated 
sample processed new value constant variable examined 
new value different missing variable removed constant set invariants relating values remaining constants created 
variable missing considered constant 
variable missing known combinations variable variables existed 
incremental algorithms instantiate invariants constants non constants reasons 
interesting right 
second necessary constant non constant 
variable set nonconstant late create invariant set previous values variables lost 
instantiating checking invariants set variables containing non constant solves problem 
suppression weaker invariants type invariant specify set possible 
suppression set antecedent invariants imply invariant 
example possible set product invariant invariant suppressed antecedents suppression hold 
discuss implementations suppression mechanism 
instantiates invariant usual checks invariant suppressed antecedents exist suppression 
data structure records fact invariant need checked sample 
antecedent falsified suppression holds 
eliminating checking sample saves runtime data structures track increase memory usage 
second implementation avoids instantiating suppressed invariants 
maintains state whatsoever indicate non existent invariant removed falsified instantiated suppressed 
saves space cost complicated processing 
linking instantiated invariant acts antecedent information indicating instantiated invariants helps suppress invariant type list suppression types may antecedent 
invariant antecedent falsified non instantiated invariant suppressing checked 
suppression invariant holds falsification antecedent suppression holds falsification antecedent invariant instantiated 
words invariant un suppressed instantiated soon suppression longer holds 
example potential antecedent falsified product invariant considered set variables includes suppression invariant checked 
expensive achieves goal requiring storage suppressed invariant 
implementation top algorithm uses solution instantiates suppressed invariants bottom algorithm uses solution 
complex expensive search antecedents top section 
combination expense extra searches required solution prohibitive 
invariant count sample count candidate invariant count sample processed optimizations optimizations number candidate invariants samples processed optimizations bottom algorithm 
data single program point flex lexical analyzer 
discussion optimizations incremental algorithms effective processing initial samples trace 
initially invariants true redundant variables equality set 
memory representation relatively small 
samples processed antecedent properties falsified equality sets break number instantiated invariants grows 
contrast optimizations simple incremental algorithm initially creates invariants number decreases 
shows number invariants grows optimizations 
highlights effectiveness optimizations 
maximum number invariants optimizations times minimum number invariants optimizations 

experiments order evaluate algorithms optimizations described ran experiments measure terms time space effects algorithm optimizations program size trace size 
presents experiments different target programs flex lexical analyzer program part standard linux distribution utility libraries daikon written java 
flex contains program points averaging variables trace gigabytes samples 
trace created running flex number sample scanners 
daikon utilities contain program points averaging variables maximum variables trace file gigabytes samples 
trace file created running daikon small example program 
simple incremental algorithm creates candidate invariants flex daikon ignoring program points variables instantiate gigabytes memory 
ran sets experiments 
evaluates different algorithms optimizations enabled 
second evaluates optimizations comparing effects optimization isolation 
run invariant detector measured run time wall clock time maximum memory size 
identical ghz pentium pcs gbyte memory limiting maximum java heap mbytes eliminate thrashing 
results shown sizes graph experiment ran memory completion 
set experiments simulated programs various sizes considering fewer program points 
file operations read entire file invariant detector process samples ignored program points 
part single program distinct programs different sizes avoids program size number type variables patterns data factors 
permits direct comparison results indicates performance user instruments part large program realistic scenario 
simulated shorter runs target program reading fraction trace file processing program points 
invariants created algorithm optimizations identical relatively minor differences noted discussion implementation 
comparing outputs increased confidence implementations 
algorithm comparison shows time space usage multi pass bottomup top algorithms graphed target program run time trace size 
graphs time space target program size number program points 
simple incremental algorithm complete minimum program size minimum data trace file size 
top algorithm runs memory processing full flex trace 
top algorithm requires memory bottom reasons 
correctness instantiate invariants level variable hierarchy 
second data structures significantly larger needs relate variables hierarchy processing samples 
bottom algorithm uses hierarchy merging invariants 
daikon utilities memory usage similar bottom algorithm runs twice fast large program sizes trace sizes 
due greater overhead required top processing 
memory usage bottom independent trace size linearly related program size program point processed independently 
multi pass algorithm similar speed bottom algorithm multi pass process full trace flex daikon utilities 
maximum memory multi pass grew quickly expected probably effectiveness optimization fact java memory system works harder save memory instance garbage collecting frequently limit approached 
explains memory graphs measure maximum memory usage flat near memory limit 
optimization comparison comparing optimizations bottom algorithm dominates able process full traces wished single baseline 
furthermore optimizations integral part multi pass approach difficult turn 
results shown 
equality optimization far powerful 
crucial variables equal 
example side effect free procedure post state value parameter global variable equal pre state value 
eliminating optimization causes daikon run memory flex example extraneous 
optimization benefits daikon utility libraries flex 
utilities far fewer variables program point library little state heavily exercised library procedures simple assert represented calls library 
processing time utilities expended optimizations afforded little benefit 
memory mbytes flex multi pass bottom top time seconds flex multi pass bottom top memory mbytes number samples processed utilities multi pass bottom top time seconds number samples processed utilities multi pass bottom top comparison algorithms flex daikon utilities respect trace length 
multi pass top algorithms run memory processing full flex trace 
multi pass runs memory processing full daikon utilities trace 
simple incremental algorithm completes minimum trace length samples 
memory mbytes flex multi pass bottom top time seconds flex multi pass bottom top memory mbytes number program points utilities multi pass bottom top time seconds number program points execution time versus program size utilities multi pass bottom top comparison algorithms flex daikon utilities respect program size 
multi pass top algorithms run memory processing program points flex 
multi pass runs memory processing program points daikon utilities 
simple incremental algorithm complete program point 

related numerous researchers adopted adapted ideas dynamic detection invariants 
section discussed relevant features daikon implementation 
describe implementations published information implementations daikon publicly available 
implementations simple incremental algorithm run faster daikon primarily daikon checks invariants millions times flex example 
incremental algorithms optimizations applicable implementations 
tool checks unary invariant java programs program point field array procedure call invariant checked values variable current previous values difference :10.1.1.164.9197
invariant indicates previously seen values bit value 
invariant weakened new values observed bit message printed 
user look weakenings printed program hierarchy equality constants suppression time flex space flex time utilities space utilities comparison optimizations averaged variety different program sizes trace lengths 
reported numbers result optimization divided result optimizations enabled 
example processing flex times slower uses times memory equality optimization 
time space spent reading trace file common approaches included 
erroneous runs just error occurs find rare corner cases 
tool help explain known errors reveal new errors 
carrot tool checks unary binary invariants 
re daikon instrumentation handle languages daikon dereference fields 
experiment comparing faulty non faulty program runs results indicate problem contrast similar aims 
remote program sampling light weight mechanism evaluates properties unary binary instantiated linear quadratic number variable pairs assignments programs plus predicate branch counting number times property satisfied 
properties checked probabilistically executions program point property checking skipped 
implementations extended sacrificing soundness test suite gaining performance 
results processed statistically indicate properties best correlated faults indicative faults 
relatively dense instrumentation means early warning relatively simple properties indicates bug 
experiment tool rediscovered known errors new 
tool extracting implicit contracts aims add preconditions 
analysis determines conditions give rise exception thrown adds negation condition precondition 
henkel diwan built tool discovers algebraic specifications relate meaning sequences code operations pop push stack stack 
tool generates terms test cases signature java class proposes equations results tests 
tool proposes tests generalizations 
spin model checker extended check variables related 
output graph variables nodes edges labeled comparison relations 
programming demonstration inductive logic programming aim generate program sequence examples data 
output similar obtained dynamic invariant detection aims complete partial targeted smaller domain 
researchers inferred program system traces finite state automata represent permitted transitions 
specifications written form automata complementary formula program properties generated dynamic invariant detector 

new incremental invariant detection algorithms compared existing algorithms incremental batch 
shown perform previously described optimizations new challenging incremental context requires undoing optimizations antecedents depend invalidated 
aspect viewed special purpose automatic theorem prover optimized efficient retraction axioms 
implemented algorithms optimizations single framework permitting direct experimental comparison 
conclude discussion merits various algorithms 
simple incremental algorithm easy understand implement 
implemented invariant detectors algorithm 
number invariants checked small example implementation considers small number variables invariant types clearly best algorithm 
scale 
multi pass algorithm offers convenient framework optimizations need undone 
greatly reduces computational complexity storage requirements optimizations 
storage savings offset need store trace data re processing re run target program impractical optimizations eliminates desirable invariants output 
multipass algorithm reasonable moderate sized datasets large numbers invariants scope simple incremental algorithm 
longer runs require incremental algorithm 
bottom incremental algorithm best performer experiments 
algorithm able fully process datasets 
optimizations control space usage ensuring modest number invariants exist time near run substantial accomplishment competitive performance multi pass algorithm tuned years 
incremental nature algorithm runtime proportional space usage independent dataset size permits line invariant detection concurrently target program storing trace data 
complexity algorithm incurred final postprocessing step 
top incremental algorithm shares characteristics bottom algorithm 
top algorithm ineffective sample dependent invariants complicated processing sample requires difficult search determine invariant true 
algorithms implementations experiments suggest invariant detection simultaneously scale nontrivial numbers invariants programs nontrivial size 
incremental algorithms optimizations implemented version daikon invariant detector available pag csail mit edu daikon 
acknowledgments jeremy nimmer toh ne win wrote preliminary implementation top incremental algorithm discussions helped develop ideas 
comments anonymous referees helped improve presentation 
research funded nsf ccr ccr oxygen project deshpande center technological innovation gifts ntt toshiba 

ammons larus 
mining specifications 
popl pages jan 
meyer 
extracting implicit contracts net components 
se inf ethz ch people progress contract extraction pdf sept 
bratko grobelnik 
inductive learning applied program construction verification 
editor pages 
north holland 
ernst 
finding latent code errors machine learning program executions 
icse pages may 
cook wolf 
discovering models software processes event data 
acm july 
cook wolf 
event detection concurrency 
fse pages nov 
cypher lieberman myers editors 
watch programming demonstration 
mit press cambridge ma 
donovan lin ernst 
selecting predicates implications program analysis mar 
draft 
pag csail mit edu pubs invariants implications ps 
lin ernst 
selecting refining evaluating predicates program analysis 
technical report mit lcs tr mit lab computer science july 
ernst cockrell griswold notkin 
dynamically discovering program invariants support program evolution 
ieee tse feb 
ernst griswold notkin 
quickly detecting relevant program invariants 
icse pages june 
visser 
went wrong explaining counterexamples 
spin pages may 
gupta 
generating test data dynamically discovering program invariants 
pages may 
gupta 
new structural coverage criterion dynamic detection program invariants 
ase oct 
lam :10.1.1.164.9197
tracking software bugs automatic anomaly detection 
icse pages may 
harder ernst :10.1.1.2.5030
improving test suites operational abstraction 
icse pages may 
henkel diwan 
discovering algebraic specifications java classes 
ecoop july 
henkel diwan 
tool writing debugging algebraic specifications 
icse pages may 
ernst griswold notkin 
automated support program refactoring invariants 
icsm pages nov 
lau domingos weld 
learning programs traces version space algebra 
cap second international conference knowledge capture florida usa oct 
aiken zheng jordan 
bug isolation remote program sampling 
pldi pages june 
lin ernst 
improving adaptability program steering 
issta pages july 
mariani 
technique verifying component software 
mar 
ernst 
predicting problems caused component upgrades 
esec fse pages sept 
ernst 
early identification incompatibilities multi component upgrades 
ecoop pages june 
ne win 
theorem proving distributed algorithms dynamic analysis 
master thesis mit dept eecs may 
ne win ernst 
verifying distributed algorithms dynamic analysis theorem proving 
technical report mit lab computer science may 
ne win ernst garland lynch 
simulated execution verifying distributed algorithms 

nimmer 
automatic generation checking program specifications 
technical report mit lab computer science june 
revision author master thesis 
nimmer ernst 
automatic generation program specifications 
issta pages july 
nimmer ernst 
invariant inference static checking empirical evaluation 
fse pages nov 
callahan jackson 
program understanding tool type inference 
icse pages may 
krishnamurthi reiss 
automated fault localization potential invariants 
sept 
raz koopman shaw 
semantic anomaly detection online data sources 
icse pages may 
holzmann 
automatic detection invariants spin 
spin nov 
whaley martin lam 
automatic extraction object oriented component interfaces 
issta pages july 
xie notkin 
checking inside black box regression fault exposure localization value spectra differences 
technical report uw cse wash dept comp 
sci 
eng seattle wa usa dec 
xie notkin 
exploiting synergy testing inferred partial specifications 
pages may 
xie notkin 
tool assisted unit test selection operational violations 
ase pages oct 
