complete software system autonomous legged soccer robots keywords scott lenser james bruce autonomous robots lessons learned deployed agents multi agent teams action selection planning real time performance describes completely implemented fully autonomous software system soccer playing quadruped robots 
system includes real time color vision probabilistic localization quadruped locomotion motion hierarchical behavior system 
component tested algorithms approaches domains 
design exposed strengths weaknesses component led improvements extensions capable general better suited testing domain 
integrating components revealed design assumptions violated 
describe problems arose addressed 
integrated system annual cup robotic soccer competition placed third losing single game 
reflect system addressed goals learned implementation testing real robots 

developing systems autonomous robots address complex tasks particularly challenging 
autonomous robot needs perceive environment decisions selection actions concretely carry actions ahead 
report research developing autonomous quadruped robots capable part research sponsored nos 
dabt 
information publication necessarily reflect position funding agencies official endorsement inferred 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
agents may june montr quebec canada 
copyright acm carnegie mellon university forbes ave pittsburgh pa cs cmu edu manuela veloso robotic soccer team 
years working sony quadruped robots gathered coherent awareness complexity task solid understanding approaches integrate perception behavior actions effective intelligent autonomous agents 
briefly overviews specific robocup sony legged robot league environment 
main components relevance autonomous quadruped agent 
perception gathered board camera color thresholding performed hardware level 
previously developed vision processing system learns necessary thresholds color space offline 
provides color segmented representation object recognition system real time video rates 
objects recognized varying geometry may multiple colors 
robust object recognition system developed robocup briefly describe system builds 
robots perform task field includes color fixed landmarks 
robot localizes world probabilistic sampling method updates locale belief movements perceived objects 
initially developed probabilistic localization algorithm sensor resetting localization robustly accommodates poorly modeled movements quadruped robot large errors due externally caused movements robots pushing robots repositioning done human referees game :10.1.1.37.4334
sensor resetting localization effective 
identify additional challenges face terms localization building sensor resetting approach 
robots need accomplish specific task playing soccer 
task involves robots team 
teamwork currently addressed role assignment robot goalie robots attackers 
developing robust behaviors robots represents challenge 
contribute cognition architecture sensors behaviors control separated distinct hierarchies 
architecture supports eventual upgrade sensor processing refinement behaviors control 
address motion opportunities offered quadruped robot 
previous sony commands behaviors motion objects location motion updates camera color segmentation vision images objects localization overview main components robotic agents 
robots mainly walking routine supplied sony 
report development new motion primitives including new kicking movements legs head 
different kicking modes integrated behaviors allowed effective manipulation ball 
summarizes main components 
section briefly describes task environment playing field game 
section presents vision processing effective object detection 
section discusses localization approach 
section introduces behavior architecture 
section discusses motion primitives 
section concludes 
reviews contributions fully developed implemented robotic agent system 
believe extensive research task contributes advances area autonomous robotic agents 
inevitably remain challenges open research 
attacking robot aware task basic level robot searches ball localizes field tries score opponent goal 
collaboration robots detection response adversarial robots intelligent awareness complete game challenging topics ongoing research 

environment robots research generously provided sony applied specific domain robotic soccer 
robots similar commercial aibo robots provided slightly different hardware programmable 
robot consists quadruped designed look small dog 
robot approximately cm long cm tall including head 
neck legs degrees freedom 
neck pan side allowing robot scan field markers 
camera field view 
shows picture dogs playing soccer 
teams robocup legged robot league hardware platform 
robots autonomous onboard cameras 
onboard processor provides image processing localization control 
robots remotely controlled way communication possible multi robot system 
sony quadruped robot dogs playing soccer 
state information available decision making comes robot onboard colored vision camera sensors report state robot body 
soccer game consists minute halves begun 
team consists robots 
team year eleven robocup teams addressed multirobot aspect domain assigning different behaviors robots attackers 
communication available robots see color 
robot identity extracted 
robot behaviors capture team aspect domain different roles 
acting world robots playing field cm length cm width 
goals centered field cm wide cm tall 
unique colored landmarks placed edges field corner side halfway line help robots localize field 
shows sketch playing field 
pink yellow goal yellow pink green yellow pink pink light blue field green green pink robot team blue robot team red ball orange light blue pink goal light blue playing field robocup sony legged robot league 

vision vision system responsible interpreting data robots primary sensor camera mounted nose 
images digitized yuv color space color thresholds learned offline applied image hardware 
low level vision software carries steps sample images robots camera images color thresholding connect colored neighboring pixels regions 
connect colored nearby regions larger regions 
calculate statistics regions useful high level vision 
colored refers member color threshold class orange ball blue marker nearby regions evaluated density threshold 
regions merged density occupying bounding area threshold color class considered region 
low level processing performed high level vision carries steps type object interest currently include ball goals markers robots 
scan lists regions colors include object interest 
region regions may form object evaluate domain geometric constraints generate confidence value 
perform additional filtering rules remove false positives 
take hypothesis highest remaining confidence value 
transform object image coordinates egocentric body coordinates 
low level vision system uses library 
maps pixels colored regions steps efficient algorithms highly optimized implementations 
step run length encode image replacing individual pixels value horizontal length indicating number pixels value 
allows compressed representation leads higher efficiency processing 
step takes runs performs connected components merging connectedness 
implemented treebased union find path compression 
output regions formed pixels classified color neighboring pixels 
additional run run length encoded representation gathers statistics regions including centroid bounding box pixel area 
regions separated color sorted size larger regions salient smallest result noise 
underlying system described detail library freely available gpl 
high level vision system uses regions determined low level system detect objects interest 
type object employs specific detection processing find region data eliminate false positive identifications determine distance robot 
processing strategies object follows ball ball orange spherical object detected orange circular region image plane 
large orange regions processed factoring area compactness bounding box similarity width height bounding boxes indicators nearly circular object 
objects appear significantly ground plane pixels discarded false positives 
distance determined similar triangles known radius ball divided distance equal pixel radius image divided focal distance 
goals goals detected large yellow cyan objects image regions near bottom image projected world space near ground plane 
region lists possible colors scanned confidence values assigned bounding box area match possible image geometry possible viewpoints field 
distance determined triangulation height goal 
width partially occluded robot 
robots robots detected red blue patches team colors significantly plane robot 
currently attempt match color patches observed robot multiple patches varying amounts occlusion see 
currently orientation distance estimates difficult determine concisely efficiently 
markers markers consist colored cylinder color occupying cm band cm diameter cylinder 
resulting image image plane similarly sized colored regions approximately square 
marker unique consisting pink band yellow green cyan band pink 
markers member list pink regions scanning yellow green blue region lists pairs fit criteria square distance centroids regions equal area regions 
sigmoidal falloff ideal model quickly evaluate partial matches take best hypothesis 
distance calculated triangulation distance centroids colored regions 
ego centric body coordinates obtained mapping coordinates image plane camera robot coordinate frame standard transformation techniques account head tilt pan roll body attitude relative ground plane 
vision system generally robust noise highly accurate object detection determining object locations robocup competition 
vision systems remains sensitive lighting conditions requires fair amount time effort calibrate 
includes automation offline threshold calibration unsupervised learning migrating low high level calibration parameters online adaptive systems 

localization localization system sensor resetting localization uses probabilistic model world estimate robots location field :10.1.1.37.4334
robots location represented probability density possible positions orientations locations robots 
probability density general complex function approximate probability density set sample points 
samples chosen samples expected particular area probability robot area 
sample point represents particular location field robot located 
localization process updating probability density 
computation tractable markov assumption robots location depends location motions executed sensor readings 
updates done way expected density sample points region proportional probability robot location region 
detail including probabilistic derivation algorithm see sensor resetting localization :10.1.1.37.4334
sample locations represented array locations soccer field 
high sample counts tend result better accuracy robustness cost additional computation 
system reasonable compromise 
basic types updates perform sample set movement updates sensor updates sensor resetting 
basic update cycle move robot update movement read sensors update sensors reset necessary repeat 
mean samples taken best estimate location robot standard deviation samples estimate uncertainty 
goal movement update convolve robot belief state probabilistic model robots movements 
goal accomplished location sample set randomly choosing new location probabilistic movement model 
new location possible final location robot ing movement sample location 
note operation spreads samples overlapping sample may choose different location 
goal sensor update multiply robot belief state probability locations sensor readings 
updates sensors done step process 
step weights samples probability location sensor readings 
second step samples uniform weight 
normalization done creating new sample set 
new sample set generated drawing samples replacement old sample set probability proportional weights 
effect copying samples deleting 
note step creates new samples 
case distances angles landmarks serve sensor readings 
goal sensor resetting return probability density sane state appears algorithm may failing 
sane state means reflects locations robot 
algorithm may fail number reasons inaccurate models movement sensor noise external disturbance robot location insufficient sample count accurately approximate probability density 
restore probability density sane state replacing density consistent robot current sensor readings robot prior belief locations located field uniform distribution 
apply resetting step time find belief state inconsistent current sensor readings 
inconsistency measured sensor probability model estimate likelihood sensor readings current belief state 
see right example result reset event 
step algorithm popular monte carlo localization technique 
step added solve problem recovering position initially unknown location see left 
samples keep computational load low sample cm ignoring orientation moment 
usually samples consistent single landmark observation infinitely locations consistent observation see middle 
resetting solves problem concentrating samples locations consistent landmark observation right 
adding sensor resetting solved problems 
resetting automatically recover errors movement model external disturbances 
external disturbances caused referee moving robot collisions robots 
algorithm highly effective additional challenges address 
limitation system localization technique requires probabilistic models robot motions sensors 
probabilistic model motions requires excellent calibration 
developing probabilistic model sensors problematic 
calibration sensor model field locations consistent sensor reading efficient manner allow resetting 
difficult sensor readings entail complex distributions 
looking solutions difficult research problems 
observations enhancements position mm position mm position mm position mm position mm position mm sequence belief states resulting robot unknown initial location seeing landmark 
robots localization robust external disturbances 
localization fault tolerant 
localization incorporate sensor reading hard describe analytically 
sensor resetting allows poorer approximations models 
sensor resetting provides fault tolerance failure recovery robot localization 
sensor resetting localization robust external disturbances 

behavior system behavior system hierarchical behavior system 
system primarily reactive behaviors internal state enable sequencing behaviors 
input system information objects seen vision estimate robots location localization 
output behaviors motion executed see 
motion type kick execute discrete direction walk continuous example 
behavior system consists interconnected hierarchies sensors behaviors control see 
sensor hierarchy represents known world 
behavior hierarchy robot choices 
control hierarchy encodes robot 
system similar system fu fighters small size robocup team 
sensor hierarchy virtual sensor virtual sensor virtual sensor sensor sensor sensor behavior hierarchy control hierarchy behavior level 
behavior level 
behavior level 
controls goals controls goals controls motor commands overview behavior system 
sensors behaviors control sensor hierarchy represents knowledge robot world 
divide sensors categories real sensors virtual sensors 
virtual sensors represent processed version real sensors includes information behaviors directly interested 
example real sensor position ball reported vision virtual sensor estimated position ball including directly seen 
virtual sensors serve aggregate information act model world complete memory 
virtual sensors avoid computing information twice separate behaviors 
sensor hierarchy data structure storing sensor values code update virtual sensors data structure real sensors 
data structure output sensor hierarchy provides input behavior hierarchy 
behavior hierarchy control hierarchies tightly coupled cooperate decide action perform 
behavior hierarchy consists behavior sets 
behavior set represents set behaviors 
different behavior sets operate different levels detail 
control hierarchy consists control sets 
control set data structure representing actions robot perform 
control set represents actions different levels detail 
control set viewed set goals low level behaviors achieve 
alternatively viewed virtual actuator high level behaviors control 
behavior set level receives input control set level sensor hierarchy 
behavior set decides action perform writes decision detailed control set level example behavior set contain behavior getting ball 
behavior activated control set level indicates get ball 
behavior sensors find ball set goal level run arc intersects point ball 
behavior set takes description task performed creates concrete description actions performed 
control hierarchy provides storage level behavior hierarchy write outputs read inputs 
lowest level control hierarchy level simply set low level actuators available robot case commands exported motion module 
sensor hierarchy controls goals behavior level behavior behavior behavior behavior 
activation controls goals motor commands combinator detail level behavior hierarchy 
behavior selection coordination look detail behavior sets comprise levels behavior hierarchy see 
behavior set takes input controls goals control set level 
running behavior set produces control set behavior set lower level 
lowest level control set produced sent directly motion module 
accomplished 
behavior set set behaviors operate level detail 
behaviors functions calculating activation levels outputs sensors high level controls 
functions part domain knowledge robot 
behavior looks sensors goals decides perform 
measure goodness activation value behavior see middle 
note activations thought predictions reward result behavior run 
behavior drives set low level actuators controls 
behaviors behavior set drive actuator conflict drive different actuators run parallel 
occurs frequently domain may want walk doing useful head scanning ball 
behaviors conflict run 
capture constraint constructing graph behaviors nodes edges connect behaviors conflict see upper right part 
special combinator described choose set non conflicting behaviors near maximal total expected reward 
example activations combinator chosen behaviors reward executing behavior 
behaviors chosen activation run write results directly control set level behaviors 
behaviors run sensors control set memory doing choose controls write goals lower level 
goal combinator find set non conflicting behaviors result maximal reward 
reward estimates activations conflict net problem finding maximal weight cliques dual conflict graph 
problem np complete approximation algorithm 
basic idea find suit ably approximation iteratively suppressing weakly activated behaviors conflicts reinforcing behaviors conflicts 
produce optimistic estimate total reward achieved running behavior assuming behaviors direct conflict behavior run parallel 
calculated finding total activation behaviors subtracting activation behaviors direct conflict 
estimate gradient change activation th behavior 
behaviors runnable reward behaviors conflict reinforced behaviors suppressed 
usually behaviors negative gradient 
follow gradient activation behaviors 
behavior activation removed consideration 
process repeated set behaviors non zero activation contains conflicts 
small random perturbations added activations break ties 
case gradients positive double amount subtracted conflicts gradients negative 
worst case may take lg steps combinator converge behaviors cases converges iterations 
set behaviors nonzero activation process run completing execution behavior set 
making behavior responsible activation keep interaction behavior levels control sets 
allows change level behaviors having change levels behaviors 
example replace behavior getting ball different behaviors changing layer chose get ball 
allowing behaviors memory individual behaviors sequence actions 
searching ball allow remember field decided go look ball 
memory allows add hysteresis behaviors needed 
observations enhancements implementing system oscillation major problem behavior systems due lack accounting costs 
believe solved activations accurately reflect reward reinforcement learning 
behavior systems perform better primitives parameterized form continuous system 
largely due difficulty sequencing behaviors 
complexity reduced making hierarchical levels separate 
separation achieved making behaviors responsible activations 
providing behaviors limited memory allows sequencing oscillation removal hysteresis 

motions motion component allows robot walk kick ball get falling 
desired action chosen behavior system motion system determines visualization walk points forward walk cycle 
front robot top dots represent foot positions projected ground plane 
basis support indicated shaded polygon defined feet ground 
left point right rear left foot touch second critical transition point front foot touch center mass crosses basis support 
required angles pid values joints carry command 
successful walking motion allow robot travel specified path maintaining stability process 
walking motion transition smoothly motions 
way look stability robot walking consider robot center mass basis support 
basis support area ground polygon formed points contact case triangle quadrilateral 
points contact locations feet stable contact ground 
absence momentum robot stand position results center gravity robot projected ground plane basis support 
robot fall position 
walk uses quasi static crawl gait 
crawl gait feet ground times 
quasi static refers type stability system means center gravity robot edge basis support 
called quasi static actuation environment noise center gravity robot may temporarily outside basis support 
particular walk loosely walk robocup team university paris vi 
foot ordering similar techniques assure stability center gravity robot basis support 
implementation differs uses higher level geometric primitive calculations better address problem smooth transitions composable target motions 
requires transitioning motion path smooth arcing left right abrupt change velocity composable motions ability sum primitive motions complicated path turning walking forward walking sideways turning 
key observations led approach implementing walk 
stable crawl body kept nearly fixed attitude prevent unwanted oscillation parts robot head 
second specific path constrained entirely motion body feet ground motion fully constrained motion body time 
main parameters left open path robot follow order lifting feet path feet follow air air path target point foot move air air target fraction total walk cycle foot air air fraction time period walk cycle additional parameters body attitude neutral origin position legs relative body determined fixed implementation maximize stability parameters determined online calculations 
path followed robot taken high level command behavior system consisted velocity request 
translated cycle period body path air cycle linear interpolation 
fastest walk forward speed mm cycle cycle time ms air fraction slowest velocity cycle ms air fraction 
behaviors select speed depending situation required 
additionally walk scaled parameters requested sideways motion angular velocity leading speed adaptive walking 
path body determined velocity request modeled hermite spline 
splines take initial target points parameters derivatives allowing smooth trajectories points specified speed direction 
calculated world coordinates perform inverse kinematics determine required joint angles 
splines implemented continuous transitioning path 
times cycle time foot picked motion system take target walk request behavior system 
determine current position velocity body simple splines plot new spline path current position velocity target position velocity cycle 
fully continuous body paths velocity regardless sequence paths requested behaviors latency single step execute command 
traditional approaches require cycle transitioning path may require special properties leg position velocity allow continuity smooth motion 
spline motion guarantees continuity restrictive assumptions 
order feet determined dominant requirement motion target specified behaviors 
turning walking different optimal foot patterns stability 
turning clockwise counterclockwise pattern direction motion stable forward motion stable order lift back foot followed front foot side side 
changing order feet requires robot transition standing state model order guarantee stability continuity keep implementation different walks modular 
air path air target chosen keep robot stable keep foot position reachability space entire walk cycle 
air target chosen average position foot ground fraction cycle average position approximately neural position 
calculated evaluating velocity leg neutral position setting air target sum neutral location half velocity 
reality walk parameters may change time foot ground simple predictive approximation keeps foot nearly expensive calculation knowledge walk commands 
air path catmull rom spline multiple segment hermite spline interpolated points current location air target intermediate point averaging elevated foot ground 
velocity center point determined average velocity needed get foot target initial points velocity ground plane discontinuous velocity component order quickly break traction ground 
high level motion system consisted walks separate stepping patterns walking forward turning left turning right kicks manipulate ball body routines robot get falls tailored recovering fall different side body front back left side right side 
motion system constructed state machine states transitioning standing neutral fall recovery routines passed intermediate state lying robot 
non walking motions specified time variant functions determine raw joint angles kinematic targets legs 
walk perform significantly better implementations gait competition allowing simplified software architecture high level primitives splines 
demonstrated fastest stable walk crawling gait 
goals include adapting approach gaits feet air time allow higher speeds require dynamic stability center mass support basis line gaits 

sony provided fully operational quadruped robots support research teams fully autonomous robotic agents 
reported components developed create effective fully autonomous quadruped robots robotic soccer domain 
team entered robocup international competition placed third twelve teams soccer tournament losing game eventual champion 
performed level play demonstrating reliable vision localization behaviors motions 
physical challenges reliability system allowed traverse preset trajectory field score fastest teams demonstrating precise sensing localization motions 
main technical contributions underlying software fully implemented robotic system 
object recognition algorithm allows robot reliably detect objects multiple colors 
described localization algorithm behavior system composed defined separated hierarchies sensors behaviors controls 
overviewed sophisticated walking kicking motions quadruped robots 
note algorithms designed implemented great degree generality abstraction 
applied vision processing localization approaches robotic platforms 
clearly ahead broad challenging area multirobot systems 
near aim developing contributing elaborate team robots application quadruped robots conjunction robots tasks robotic search rescue 

fr rojas hierarchical dynamical systems control reactive behavior 
proceedings ijcai pages 
bruce balch veloso 
www coral cs cmu edu 
bruce balch veloso 
fast inexpensive color image segmentation interactive robots 
proceedings iros 
foley van dam feiner hughes 
computer graphics principles practice 
addison wesley reading massachusetts second edition 
fox burgard dellaert thrun 
monte carlo localization efficient position estimation mobile robots 
proceedings aaai 
fujita veloso uther asada kitano 

vision strategy localization sony legged robots robocup 
ai magazine 

contribution la de robots 
phd thesis universite paris vi 
jain kasturi 
machine vision 
mcgraw hill new york 
lenser veloso :10.1.1.37.4334
sensor resetting localization poorly modelled mobile robots 
proceedings icra 

color faq www net notes colour gamma html 
veloso winner lenser bruce balch 
vision localization behavior planning autonomous quadruped legged robot 
proceeding aips 
