semantic web services languages technologies comparison discussion rohit aggarwal lsdis lab university georgia athens aggarwal cs uga edu web services primarily designed loosely coupled provide inter operability business applications 
large amount human interaction required integration multiple applications current web service technologies needs reduced 
integration automated need machine processable description data functions involved entities 
semantic web technologies description logic languages annotate content ontology concepts machine understandable 
due increasing interest knowledge data rising popularity semantic web web services significant interests developing technologies support semantic web services 
semantic web industry experiencing need identifying developing technology provide firm long term foundation web services internet 
foundation required support universal approaches service deployment 
support currently technically feasible approaches features flexibility extensibility consistency vision semantic web 
variety tools modeling frameworks support publication discovery composition semantic web services developed near past 
initiatives include owl martin daml daml meteor meteor wsmo roman general feel tool framework provides required generic web services modeling platform semantic web 
standards incomplete may fulfill demands industry complexity scalability dependability name 
language committee working identifying developing computer language technology standardize semantic information web services develop language declarative specification 
semantic information web services needs general able support nontrivial mechanized interactions web services intelligent software agents 
ideally semantic web services language enable dynamism aspects web service selection discovery composition invocation negotiation recovery failure extensible closely integrated knowledge resources semantic web 
aim survey current semantic web services languages modeling frameworks outlining features capabilities 
compare approaches identify deficient features need overcome meet requirements industry developing formal language technology supporting semantic web services 
rest organized follows section details current technologies area 
section presents discussions comparisons 
section discusses current best approach meteor section concludes 
current approaches number initiatives straw proposals straw proposals area rules ontologies describe services grosof flows order logic ontology web services owl proposal kifer wsmo meteor section detail significant initiatives 
enhanced owl swrl part darpa agent markup language program owl developed ontology services help users software agents discover compose invoke monitor web services 
structure owl divided main parts service profile publishing discovering services process model describes service operation grounding defines interoperability service messages 
service profile describes services offered service providers services required service requesters 
owl profile represents basic types information organization provides service service compute provide characteristics service 
process model represents process 
process abstractly viewed transforms data set inputs outputs 
process profile represented inputs outputs preconditions effects 
types processes atomic simple composite 
atomic processes single step directly invoked 
simple processes directly invoked represent elements abstraction 
composite processes control constructs composition multiple composite non composite processes 
grounding service specifies details protocol message formats supported service serialized transport uses addressing 
grounding provides mapping specifications concrete specification primarily inputs outputs atomic processes 
specifies description elements necessary interacting service 
main aim grounding concretely realize inputs outputs atomic process messages 
messages carry inputs outputs specific defined communicable form 
web services description language wsdl current industry standard describing web service 
describe web service way hides implementation details defines inputs outputs web service data types inputs outputs binding information communication protocol web service supports messages sent web service details web service 
wsdl concept binding similar grounding owl 
owl web ontology language recommendation 
presenting information humans owl designed provide machine processable information content 
xml rdf rdf schema machine processable owl provides additional vocabulary formal semantics assist better machine interpretability 
owl web ontology language write ontologies 
different flavors 
owl lite owl dl owl full 
owl lite ontology subset owl dl ontology owl dl ontology subset owl full ontology 
owl dl supports users want maximum expressiveness retaining computational completeness 
different flavors provided different restrictions suit different needs 
combination owl dl owl lite unary binary datalog ruleml sublanguages rule markup language boley swrl horrocks 
owl dl owl lite sublanguages owl web ontology language mcguinness 
owl lite supports cardinality constraints allows values useful 
cardinality constraints problem owl lite fixed owl lite useful equality statement owl lite eliminated subset owl lite extended natural manner course rule language 
swrl provides horn rules owl dl owl lite 
includes high level syntax representing rules 
provide formal meaning owl ontologies include rules written syntax provided swrl model theoretic semantics 
model theoretic semantics provide generalization data models relational semi structured deal uncertain vague information identifiable objects 
combination owl horn logic swrl define rules business logic supplier set different discounts different clients rules written file associated web service process 
check rule satisfied fires need swrl reasoners 
enhanced version owl swrl rules inference 
swrl extends owl dl syntax axiom axiom rule rule implies annotation antecedent consequent antecedent antecedent atom consequent consequent atom atom description object object object object object object object object object object object builtin builtin object rule satisfied interpretation iff binding satisfies antecedent satisfies consequent 
semantic conditions relating axioms ontologies unchanged interpretation satisfies ontology iff satisfies axiom including rules fact ontology horrocks rule combination antecedent consequent 
rule typically claims antecedent true consequent true 
antecedent consequent assertion parent means parent implies antecedent parent consequent older means parent older try understand asserting combination properties implies property 
swrl rule written implies antecedent variable variable variable variable consequent variable variable rule son sister daughter 
owl new enterprise defined type existing concept ontology employees concept ontology 
owl support comparison operators complex conversions 
rules expressed normal owl expressed swrl 
rule language important component web processes 
take example supply chain different vendors may different discounts depending price client willing pay different vendors chosen deliver 
processes may require complex rules owl provide 
view description logics dls widely provide reasoning owl 
owl owl uses dl reasoners check logical consistency classes ontology 
leads unexpected inferencing difficult explain 
borgida 
owl gaining industry wide acceptance expressive applications 
swrl owl conjunction ruleml overcome difficulty 
swrl orl proposal horrocks subject ongoing development daml joint committee 
enhanced owl swrl achieve reasoning achieved dl reasoners 
reasoning swrl undecidable general case recursive rules combined problem existential quantification 
currently implementations swrl language early stage development version language 
swrl order style semantics order theorem prover potentially reasoning swrl 
initiatives prototype implementations horrocks swrl reasoner reasoning provided translation order logic theorem prover na approach highly scale 
ongoing project extend oiled oiled deal swrl ontologies 
msc projects 
swrl significant expressive power 
allows expressiveness properties binary predicates negation chaining captured owl 
swrl syntactic sugar adds horn logic dl cost decidability 
decidability issue real systems typically form bounded reasoning done lack decidability important 
current issues improvements required swrl discussed 
owl ability multiple values properties 
example business expressed owl different contact numbers different clients 
owl modeling includes information geographical radius service important parameter supply chain application 
wsmo mission web service modeling ontology project create web service modeling ontology wsmo describing various aspects semantic web services 
wsmo refinement wsmf fensel bussler 
exhaustively deploying wsmo aim solve web services integration problem 
service integration problem refers problem seamlessly integrating multiple web services process 
different services may refer different ontologies may incompatible inputs outputs hard integrate web services automated way 
wsmo provides various features help easy web service integration 
wsmo build main features simplicity completeness easy executability 
wsmo aimed simple easily understood complete incorporating aspects web services composition easily executable 
wsmo consists ontologies provide common vocabularies 
goal repositories define problems need solved web services 
goals seen output execution process built wsmo 
web service descriptions provided express functionality data interaction web service 
wsmo provides mediators help interoperability 
mediator element refine existing component produce new component incompatible components interact 
mediators help refine components called ones components interact called bridges 
mediators help wsmo simple efficient support reuse existing components 
refine ontologies goals 
pre existing goal repository need goal little different similar pre existing goal special refiner called create target goal pre existing source goal 
similarly kind refiner import pre existing ontologies refine 
bridges web services goals 
link web service goal web services interact 
web service usually defined operations exposes inputs outputs operations quality service qos parameters similarly wsmo web service defined nonfunctional properties include qos parameters performance reliability security trust mediators describe web services making 
import different ontology ontology ontology concepts define inputs outputs service 
functionality operations exposed web service defined capability web service 
multiple web services composed get composite web service commonly known web process achieve complex functionality 
wsmo interfaces describe ways achieve functionality orchestration composition multiple web services 
wsmo ontology consists various elements 
non functional properties title publisher date quality service qos parameters reliability security ontologies help import pre existing ontology ontology help reuse 
ontology axioms logical expressions enriched extra logical information 
axioms considered rules define constraints complex information 
concepts provide view problem domain 
ontology relations define relationships concepts instances actual instances ontology populated 
wsmo uses logic logic syntax provide axioms logical inferencing support 
logic short frame logic originally developed defining querying manipulating database schema 
logic sound complete proof theory stand logic languages 
logic finds applications artificial intelligence frame languages 
logic extensible combined specialized logics 
logic combines advantages typical frame languages expressiveness compact syntax defined semantics logics 
object identity methods classes signatures inheritance rules features logic 
logic full order logic language 
logic provides standard model theory second order syntax staying order logic semantics 
minimal model semantics implemented inference engines available 
take look wsmo example written logic ontology woman person 
man person 
person father man 
person mother woman 
person daughter woman 
person son man 
rules consisting rule head rule body forall son man father 
forall son man mother 
forall daughter woman father 
forall daughter woman mother 
facts abraham man sarah woman 
isaac man father abraham mother sarah 
ishmael man father abraham mother woman 
jacob man father isaac mother woman 
man father isaac mother 
query forall woman son father abraham 
part example states woman person man person 
person attributes father mother daughter respective ranges 
rule describes father man son similar relationship holds sons mothers daughters fathers daughters mothers 
set facts indicate people belong classes man woman respectively give information father mother relationships 
query shows ability logic nest method applications 
asks women sons father abraham angele lausen logic syntax wsmo achieved expressivity 
seen example wsmo written logic 
wsmo difficult read adds facility expressing rules facts ontology provides easy querying mechanism 
view current standard wsmo define orchestration described 
defeats purpose having 
main purpose reuse components web service interact 
orchestration web service composition defined 
addition wsmo standard consider case mediator fails throws exception 
previous web service compensated mediator restarted correctly ultimately follow invocation subsequent web services 
incorporating new type component different execution semantics wsmo exception handling transaction recovery difficult 
wsmo logic full order logic dl subset 
expresses owl expressed logic 
balaban explains logic covers dl logic framework define extensions dl 
contrast logic description logics applicable reasoning large sets instances run time system applications ontologies having large number instances 
order logic implementation may efficiently implementable dieter fensel working implementation decidable 
discussion thread swrl logic deri wsmo 
cardinality constraints wsmo standard allow definition value non functional properties service big restriction applications 
example supply chain scenario manufacturer may different contact numbers different suppliers vendors 
inability contact may big deterrent 
geographic radius identified important property web service supply chain scenario wsmo offer property web service description 
flows flows order ontology web services proposal committee 
provides representational necessity web service choreography ontology 
seamlessly integrated existing emerging standards bpel choreography capture activities 
process preconditions effects 
taxonomic representation 
order logic gives flows rich expressive power variables quantifiers terms helps overcome expressiveness issues owl 
enables exploitation existing fol reasoning engines database query engines semi decidable intractable tasks worst case 
order logic ontology psl psl dialect situation calculus 
aim psl create language common manufacturing applications 
language allow interoperability different applications common understanding shared concepts 
psl development years business process modeling area 
proved useful exchange language extensible 
specific expressiveness properties treats simple complex actions class objects explicit representation state 
psl dialect situation calculus mccarthy hayes reasoning language 
reason actions predicate calculus order logic 
defines fluents predicates functions describing current state world 
predicates represented relational fluents function symbols represented functional fluents equations 
situations terms form act denotes situation act denotes action distinct function symbol expressing execution action 
initial situation denoted constant symbol 
instance order express block top block moved situation expressed follows son move keller view flows ontology psl dialect situation calculus 
psl extensible proved useful exchange language difficult read write 
implementation associated reasoner currently available 
presentation entire ontology definition concepts composition negotiation dataflow provided current flows standard 
nascent stage hopefully standards improvements additions deficiencies 
surface syntax flows defined 
done flows easy understandable users 

comparison discussion technologies described different formats web service description different ontology standards define inputs outputs functionality web services different ways defining composition orchestration different logic languages provide rules inference support 
implementation technologies available testing comparison 
compare approaches metrics surface syntax check syntactic language available describe web services computational infrastructure check compare computational infrastructures available concept coverage check elements define web service process defined ontology see ontology available technology logic language comparison logic languages initiative composition check technology defines composition web services properties compare different types properties offered technology table shows comparison enhanced owl wsmo flows meteor metrics 
enhanced owl wsmo flows meteor surface syntax available available available available computational development developed infrastructure workarounds available development development concept coverage ok poor ontology logic language swrl logic order owl composition defined 
properties profile cardinality definition properties defined multiple non restrictions available owl functional properties non functional properties table comparison enhanced owl wsmo flows meteor discuss compare owl wsmo flows metrics 
discuss meteor section 
surface syntax enhanced owl provides surface syntax owl 
owl defined syntax creating service profile process model grounding 
swrl integrated help express complex rules constructs owl 
wsmo provides surface syntax logic 
wsmo written logic 
readable owl logic adds power expressing simple way 
ontology facts rules queries expressed logic syntax 
flows description surface syntax 
psl difficult read write flows may come different surface syntax integrate psl 
computational infrastructure computational infrastructure provides reasoning support interpreting queries rules semantic descriptions 
owl working creating swrl reasoner inferencing rules expressed swrl 
workarounds available swrl inferencing na approach scale 
wsmo reasoner computational infrastructure associated 
trying come wsmo logic reasoner convert logic order logic 
details provided 
computational infrastructure flows unavailable 
building reasoner flows important descriptions surface syntax properties composition required 
concept coverage owl concept coverage web service definition elements wsmo subset owl 
example wsmo include geographic radius web service description elements 
rating wsmo ok saying concept coverage wsmo owl rated sufficient define web services 
flows hand minimal concept coverage process creating surface syntax concept coverage 
concept coverage rated poor 
ontology enhanced owl wsmo available ontologies 
owl uses owl ontologies swrl 
wsmo create ontologies logic import existing ontologies mediators 
flows ontology available 
logic language enhanced owl swrl logic language 
swrl horn logic 
wsmo logic add rules axioms 
flows psl dialect situation calculus 
implementations associated reasoners available difficult compare efficiency logic languages reasoner 
composition owl defines composition process model 
various constructs define sequence flow parallel execution define way multiple web services composed process 
wsmo hand define composition 
ability wsmo compose web services mentioned way achieved clear 
syntax procedure composition provided wsmo 
flows define composition 
properties owl properties compared technologies 
owl multiple non functional properties 
example business may different contact addresses different partners clients 
cardinality constraints wsmo restricts having value non functional property 
wsmo implementation express multiple encryption standards supported multiple contact addresses 
hand owl profile hierarchy define service defines taxonomy profiles 
wsmo standard defines taxonomy making real goals gives categorization mediators refine existing goals 
flows define properties 
cardinality constraint wsmo may considered positive side providing ability restrict values property may useful scenarios 
see hard say technology better complete provide implementation tested compared 
technologies order logic add expressivity rules inferencing 
problem expressivity order languages semi decidable intractable worst case 
address decidability issue practical approach set time limit finding answer 
certain period time proof obligation established prover assume goal matched 
approach subset owl lite owl lite addresses cardinality constraint problem raphael language restrictions swrl decidable 
wsmo restricting language specifying goals capabilities decidable 

comparison owl meteor meteor project lsdis lab university georgia aims create comprehensive framework composing web processes 
meteor industry standards wsdl christensen owl bpel andrews 
meteor uses extensibility elements languages add semantics 
semantic annotations meteor achieves automated discovery composition 
annotations reduced source code level rajasekaran believed person writing code best understand functionality definition service semantics 
wsdl document annotated create semantic web service 
meteor constructs annotated wsdl source code publish semantic information registry 
meteor builds layer uddi standard incorporate semantics available data structures 
multiple approaches web process composition 
meteor uses process containing services starting point 
service placeholder set services matching service template 
cases set may cardinality greater example set competing services 
way topology service process largely fixed actual service selection may highly dynamic 
alternative approach composition owl planning 
owl approach start basic process form set goals build process 
ai researches investigating planning agents purpose 
meteor builds existing standards wsdl bpel owl defines service profile grounding process 
difference meteor owl approach discovery 
owl inputs outputs preconditions effects meteor defines inputs outputs operations preconditions postconditions exceptions 
discovery owl logical subsumption discovery meteor heuristic approach discovery polynomial time complexity 
heuristic approach trying give match value concepts meteor subsumption algorithm check concept subsumed 
checks see properties concept matches properties checks concept parent checks concepts siblings check distance common parent find distance concepts able achieve concept matching polynomial time 
example consider concept car sub concepts sports car luxury car 
trying find match sports car luxury car subsumption algorithm give match 
meteor heuristic discovery algorithm match properties sports car luxury car match check siblings true case check distance common parent case give high match value 
helps meteor include important relationships just subsumption 
example logical subsumption may ignore concepts placed relatively greater distance ontology satisfy parent child relationship 
concepts considered matching discovery algorithm meteor 
meteor owl 
provides ability define constraints services discovery composition 
meteor uses inference engine queries ontologies estimate cost constraints 
constraints fed integer linear programming ilp solver matches user constraints service constraints returns optimized results aggarwal 
meteor uses owl logic language 
industry standard owl wide applications acceptance restricts expressivity extent 
meteor successfully experimented squid prolog swi prolog adding constraints rules rdf triples 
meteor soon support swrl 
currently constraints meteor expressed owl restrictive language allow complex computations comparison operators 
swrl built functions computations impossible owl expressivity meteor increase folds 
enhanced owl swrl built working swrl reasoner 
swrl owl expressive swrl owl owl concepts enhanced swrl 
owl defined semantics give lot link semantics bpel 
improvements required owl process model process service descriptions machine readable unambiguous 
bpel owl classes may draw property inheritance relationships owl classes bpel port type information service descriptions wsdl define side effects expressiveness inputs outputs constrained xml schema definition xsd wsdl complex types 
hand bpel ws defines mechanism catching handling faults similar common programming languages java compensation recovery protocols defined owl 
forthcoming release bpws include java constructs bpel allow service composers write service composition java code file increase expressive computational power 
meteor defines different kinds semantics data functional qos execution comprehensive owl semantics 
owl available implementation virtual machine executing owl processes meteor releasing implementation august complete annotation publication discovery composition bpws execution engine 
digression owl industry standards may difficult industry adopt 
metrics defined section comparing current semantic web services technologies meteor surface syntax available 
meteor builds existing standards wsdl soap uddi bpel 
meteor uses syntax defined standards extensible elements adding semantics 
computational infrastructure meteor developed 
logic languages owl meteor specify rules constraints associated reasoners available 
versions meteor swrl integrated system computational infrastructure required 
concept coverage meteor restriction properties values properties 
wsdl describe web services extensible elements add semantics 
extensibility elements new element property describe web service seamlessly added meteor 
meteor uses owl ontologies annotate inputs outputs functionality web service 
qos ontology describe qos parameters service 
uses bpel standard composing web processes 
bpel support compensation recovery lacking technologies 

see discussion defining technology semantic web service language complete 
room improvement 
progress defining semantics composition execution semantics defined initiatives discussed 
due idiosyncrasies incomplete specifications current initiatives industry research community finding difficult adopt specific technology initiative universal application 
survey experience meteor project discussed areas need addressed problems need solved semantic web language specification complete 
feel areas improved comprehensive robust complete semantic web language technology realized provide strong foundation semantic web services 

aggarwal aggarwal constraint driven web service composition meteor proceedings ieee scc andrews andrews business process execution language web services version available www ibm com developerworks webservices library ws bpel angele lausen angele lausen ontologies logic handbook ontologies information systems 
international handbooks information systems springer verlag 
universal description discovery interface version available uddi org pubs published htm boley boley rule markup initiative www ruleml org borgida borgida explaining alc subsumption www cs man ac uk horrocks publications download ecai ps gz web services description language wsdl available www org tr wd wsdl christensen web services description language wsdl www org tr wsdl curbera curbera ibm business process execution language web services java tm run time www alphaworks ibm com tech bpws daml daml coalition web service description semantic web deri wsmo deri wsmo discussion informatik uibk ac deri wsmo discussion www cs man ac uk horrocks daml rules logic frame logic flora sourceforge net php fensel bussler fensel bussler web service modeling framework wsmf electronic commerce research applications 
flows berardi daniela berardi michael gruninger rick hull sheila mcilraith flows order logic ontology web services www daml org services straw proposals flows proposal pdf fol order logic wolfram com html grosof benjamin grosof rules ontologies describe services swrl reasoner owl man ac uk horrocks proposal owl rules language semantics syntax horrocks horrocks swrl semantic web rule language combining owl ruleml www daml org rules proposal msc projects university manchester www cs man ac uk projects html www cs man ac uk projects year know html keller language evaluation comparison www wsmo org kifer michael kifer proposal logic hilog concurrent transaction logic mccarthy hayes mccarthy hayes 

philosophical problems standpoint artificial intelligence 
meltzer michie editors machine intelligence pages 
edinburgh university press 
meteor meteor semantic web services processes swp semanticweb org 
oiled ontology inference layer editor oiled man ac uk owl mcguinness mcguinness owl web ontology language overview www org tr owl features owl rules draft slightly revised long version warning label section owl rules draft available www daml org joint committee html owl martin martin owl release www daml org services owls owl html swi prolog www swi prolog org psl process specification language www mel nist gov psl rajasekaran rajasekaran enhancing web services description discovery facilitate orchestration proceedings raphael volz raphael web ontology reasoning logic databases www de indexer universit karlsruhe 

diss 
explanation terminological reasoning preliminary report sunsite informatik rwth aachen de publications ceur ws vol pdf semantic network ontology base ibm ontology management system www alphaworks ibm com tech squid rajasekaran semantically querying uddi discovering web services semantic web services language committee available www daml org services requirements semantic web services language requirements version available www daml org services requirements requirements shtml straw proposals straw proposals available www daml org services swrl issues list language extensions www org submission subm swrl html horrocks dmitry ian horrocks dl reasoner vs order prover www cs man ac uk horrocks publications download pdf www cs man ac uk wsmo roman roman web service modeling ontology standard wsmo standard available www wsmo org wsmo vs owl www wsmo org 
