identifying refactoring opportunities logic meta programming show automated support provided identifying refactoring opportunities application design refactored refactoring particular applied 
support achieved technique logic meta programming detect called bad smells defining framework uses information propose adequate refactorings 
report initial promising experiments applied proposed techniques 
refactoring process changing application design changing behavior 
goal prevent design aging ensure appropriate flexibility enable smooth integration extensions 
definition refactoring years importance object oriented development reengineering acknowledged 
major integrated development environments objectoriented programming languages incorporate support refactoring refactoring discussed context reengineering legacy applications included explicit activity agile development processes 
identify distinct steps refactoring process detect application refactored identify refactoring applied automatically perform refactorings step divided different phases checking appropriate preconditions refactoring hold ensure refactoring behavior preserving applying necessary changes 
currently development environment offers support complete process 
support offered environments limited step list refactorings developer selection automatically perform corresponding changes application 
relieves developer difficult error prone process performing changes manually requires apply step hand 
steps tom mens postdoctoral fellow fund scientific research flanders belgium 
research funded fwo research formal foundation software refactoring tom tom mens programming technology lab vrije universiteit brussel pleinlaan brussel belgium email tom tom mens vub ac considered hard harder task manually performing changes due reasons current day development environments offer narrow local view source code application 
environments file difficult browse entire class hierarchy different implementations method implemented hierarchy 
consequently environments incapable presenting global overview structure design application 
current day development environments allow predefined querying source code application 
environments provide support finding users particular class senders implementors particular method 
allow sophisticated queries finding methods directly access particular instance variable class class explicitly provides corresponding accessors mutators purpose 
request realized manual inspection 
documentation application design missing completely outdated 
consequently developers may aware particular design guidelines coding conventions application 
result may violate guidelines coding conventions knowing 
clearly degrades design eventually lead problem design erosion 
developers aware fact application design degrading spotted design guideline violations may know refactoring try remedy situation manually mentioned time consuming error prone process 
know refactoring may hard time finding refactoring applied largely similar 
know refactoring applied may lack appropriate information necessary applying classes methods refactoring change 
exactly kind problems want tackle 
approach put forward consists identifying bad smells source code application 
originally coined kent beck term bad smell refers structures code suggest scream possibility refactoring 
identified information bad smells propose adequate refactorings reduce bad smell remove altogether 
furthermore show opportunities refactoring derived refactoring opportunities identified bad smells 
remainder structured follows section introduces technique logic meta programming overcome mentioned problems detect bad smells code automatically section iii 
section iv proceeds show gathered information propose list refactorings remedy situation 
section introduces notion cascaded refactoring opportunities refactoring opportunities derived identified opportunities 
subsequent sections discuss initial experiments conducted tool support provide related 
ii 
logic meta programming logic meta programming lmp currently investigated technique support state art software development 
tight symbiosis objectoriented base language declarative meta language 
possible reason manipulate objectoriented programs straightforward intuitive way 
technique check enforce programming conventions best practice patterns detect design pattern instances existing source code specify reason evolution design patterns check conformance software implementation intended architecture 
lmp technique independent particular base language 
till experimented smalltalk java base language 
experiments reported conducted soul logic programming language implemented top objectoriented language smalltalk meta language 
syntax soul variant prolog minor syntactic differences 
give example syntax 
prolog lines starting indicate comments comma denotes logical conjunction 
main differences prolog logic variables preceded question mark 
logic facts subclass 
subclass 
logic rules hierarchy subclass 
hierarchy subclass hierarchy logic rules simply state class ancestor class subclass exists intermediate class subclass ancestor class logic queries trigger logic clauses 
example query hierarchy determines descendant class exists retrieves result variable case solutions 
checks class possibly indirect descendant returns true 
virtual logic facts essential distinguishing feature soul compared logic approaches virtual logic facts 
entities object oriented source code classes methods variables inheritance relationships 
directly accessed soul environment metalevel interface representational mapping predicates 
main advantage approach opposed having separate repository logic facts extracted code reason latest version source code avoiding consistency problems 
table lists representational mapping predicates 
typically predicates ordinary logic predicates checking retrieving information 
iii 
detecting bad smells section explain logic meta programming detect bad smells 
consider examples increasing complexity 
example detect situation method definition includes formal parameter 
second example analyze class hierarchy verify features clear interface 
obsolete parameter method defines obsolete parameter includes formal parameter signature implementation 
implementation method may span classes course method overridden subclass 
particular class developer know method implementation inspect know subclasses class override methods subclasses don suppose class implements methods suppose subclasses class override method 
developer needs inspect methods detect obsolete parameter 
needs formal parameter method defines 
clearly detecting occurrence obsolete parameter manually hard time consuming process 
follows show example occurrence obsolete parameter explain situation detected automatically lmp environment 
example depicts example obsolete parameter bad smell code 
class defines method parameter method overridden subclasses 
implementations method classes uses parameter 
parameter obsolete 
note smalltalk uses keywords identify parameters method defines 
example name consist keyword scope consists keywords 
method defines parameter second defines 
representational mapping predicate description class class hierarchy class possibly indirect subclass class implements method named instance variable class anobject table representational mapping predicates anobject visitor detecting bad smell detecting formal parameter method boils checking method overriding methods uses parameter 
logic rules implement algorithm class selector parameter class selector class selector parameter forall class selector subclass subclass selector parameter retrieve methods implemented class line predicate part representational mapping retrieve parameters method line means predicate 
subclass class implements method gathered means predicate check uses parameter line predicate 
predicate implemented follows class selector parameter class selector method method parameter 
uses variant predicate class predicate returns method identified class selector line 
predicate traverse look uses specified parameter line 
defined terms predicate implements general parse tree matching algorithm 
anobject fig 

method obsolete parameter visitor inappropriate interfaces interfaces extremely important designing flexible reusable object oriented systems 
situation interface class inappropriate incomplete unclear avoided costs 
initial stage classes may define appropriate interface due constant evolution application due different developers working code base interface may deteriorate time 
detecting inappropriate interface bad smell manually quite difficult task analyze entire class hierarchy interfaces defines 
supposing hierarchy consists classes consider possible combinations classes check combinations share interface 
combinations quite cumbersome 
automatic approach feasible dealing huge numbers 
problem alleviated applying lightweight techniques metrics detect class hierarchies investigated detail 
show example inappropriate interfaces bad smell discuss detect problem lmp environment 
elaborate metrics identifying class hierarchies examination outside scope 
example consider hierarchy depicted 
observed classes provide implementation terms method classes including 
situation problematic reasons terms terms terms terms classes hierarchy polymorphically statically typed language java common ancestor includes terms method interface 
extending hierarchy new class harder 
absolutely unclear design subclasses provide implementation terms method classes 
developer confronted situation know exactly doing 
detecting bad smell algorithm detecting problem inappropriate interfaces hierarchy classes retrieve direct subclasses root class hierarchy 
compute possible subsets set classes 
subsets compute intersection interfaces classes contained subset 
resulting intersections exclude methods interface root class hierarchy clearly algorithm grows exponentially number subclasses compute possible subsets 
restrict considering subsets classes share interface methods 
explanatory purposes take restrictions account implementation algorithm 
purpose predicate retrieve subclasses root class line find subclasses share common interface line compute difference shared interface interface root class line 
class interface subclasses class class scs scs subclasses difference interface 
difference predicate basic predicates 
retrieves list subclasses class computes difference sets 
implementation considered 
implementation predicate looks follows classes interface subset subset subset classes subset interface 
fig 

example inappropriate interface variable cut simply computes subset set classes passed line derives common interface classes subset line 
subset predicate library predicate computes possible subset set 
predicate implemented follows classes interface findall member class classes class interfaces intersection interfaces interface computes interfaces classes provided set lines computes intersection set interfaces line 
particular technical problem algorithm computes shared interface combination subclasses class 
shared interface detected classes set may detected combination classes classes 
words results returned algorithm may possibly include duplicated entries 
removed easily results implementation predicate class interface subclasses findall scs class scs result result member interface subclasses 
discussion seen examples technique logic meta programming extremely suited detect bad smells source code 
distinguishing powerful features backtracking unification write complicated search algorithms straightforward understandable concise way 
lmp environment full access application source code means hampered narrow view offered standard development environments 
combination fact logic paradigm naturally allows express sophisticated queries means longer limited basic querying tools offered environments 
iv 
proposing refactorings shown detect bad smells lmp ready explain information gathered way propose appropriate refactorings 
want stress aim apply refactorings automatically 
times refactorings chosen remedy particular situation impossible infer automatically refactorings appropriate 
developer list refactorings responsibility pick appropriate 
overview single general predicate proposing refactorings predicate 
predicate provides single hook tools want know refactorings applicable 
predicate form entity refactoring arguments argument represents entity want detect refactoring opportunities 
source code artifact moment classes methods instance variables entities refactorings defined 
second argument identifies particular refactoring applied 
value refactoring defined 
argument predicate identifies list arguments passed refactoring 
arguments source code artifact 
obsolete parameter obsolete parameters removed particular method applying refactoring 
refactoring sure obsolete parameter removed particular method overriding methods method callers 
refactoring requires arguments class method defined method defining obsolete parameter obsolete parameter 
exactly information gathered predicate previously 
information way propose appropriate refactoring class class selector parameter class selector parameter applying query example refactoring arguments returns result exactly expected 
inappropriate interfaces general solutions overcome problem inappropriate interfaces 
developer insert intermediate superclass root class hierarchy subclasses implement shared interface augment interface root class hierarchy interface shared subclasses 
solutions correspond addmethod refactoring respectively 
refactoring requires arguments root hierarchy list subclasses root class subclasses newly introduced class list selectors shared subclasses implemented newly introduced class exactly kind information derived predicate refactoring proposed way class class interface subclasses class interface subclasses similarly addmethod refactoring requires arguments list methods added root class added 
refactoring proposed follows 
note information subclasses share interface case 
class addmethod class interface class interface 
applying query class hierarchy refactoring arguments yields results terms addmethod terms note basic example involves class hierarchy level deep 
complex hierarchies may require complex refactorings 
due space limitations algorithm covers cases 
cascaded refactoring opportunities times part purpose particular refactoring enable possibility performing refactoring 
example instance variable shared number subclasses pulled required subclasses refer variable name 
refactoring may mandatory refactoring applied 
application particular refactoring may open possibilities refactorings applied 
call phenomenon cascaded refactoring opportunities 
lmp environment naturally allows detect cascaded refactoring opportunities 
easily information gathered particular refactoring opportunity discover opportunities show 
definition refactoring differs existing definitions explicitly includes extra parameter holds shared interface 
minor technical issue 
cascaded refactoring opportunity example consider case obsolete parameter bad smell detected particular method 
appropriate refactoring applied refactoring remove parameter definition remove call sites 
method call occurs may include parameter definition may calling case call delegated parameter 
method defines obsolete parameter indirect 
bad smell detected means rule class class selector class class selector parameter class selector selector class selector parameter predicate determine senders particular method predicate checks parameter calling method delegated parameter 
case additional refactoring proposed means parameter method 
cascaded refactoring opportunity inappropriate interface bad smell different cascaded refactoring opportunities proposed 
provide example 
subclasses sharing common interface share state instance variables 
intermediate superclass inserted means refactoring common state factored subclasses intermediate superclass 
observe intermediate superclass refactoring possible 
state factored general superclass may subclasses contain state 
detecting shared state factored refactoring applied proposing appropriate refactoring achieved logic rule class variable subclasses class class subclasses subclasses variable predicate simply checks list subclasses passed share common variable 
case refactoring proposed 
discussion clearly applying single refactoring may give rise multitude refactoring opportunities 
question may raised searching cascaded refactoring opportunities useful scalable 
usefulness firmly believe prime importance refactoring opportunities possible discovered single step 
benefits automatically identifying refactoring opportunities largely vanishes developer forced check opportunities constantly 
wishes check get identified opportunities possible 
question scalability refers fact existing refactoring may depend existing refactorings 
identifying cascaded refactoring opportunities requires checking opportunities possible refactoring take quite time 
new refactoring introduced requires identify relates existing refactorings change logic rules check refactoring opportunities 
clearly quite cumbersome 
initial status position study issues 
considered 
vi 
experiments particular importance initially validating techniques test application intimate knowledge 
able assess correctness identified bad smells usefulness proposed refactorings 
soul application obvious candidate testing purposes developed know implementation 
version soul latest version time started doing experiments 
version implementation consists classes approximately different methods counting methods overridden method implementations small medium sized application 
implementation important class hierarchies consists classes methods 
consists classes methods 
consists classes methods 
consists classes methods 
frame consists classes methods 
searched refactoring opportunities hierarchies considering bad smells previous sections 
proposed refactorings refactoring opportunities proposed include cascaded refactoring opportunities instances 
obsolete parameter inenv inenv inenv scope fact rule query scope refactorings proposed due fact inenv method class formal parameters 
method implemented different classes hierarchy implementation uses parameters 
similarly method class single parameter 
method overridden subclasses hierarchy uses parameter 
inappropriate interface terms addmethod terms query rule fact query rule scope rule fact addmethod addmethod addmethod scope refactorings proposed due inappropriate interface bad smell hierarchy depicted 
refactorings proposed due bad smell hierarchy shown 
observed results overlap extent methods reported times 
unavoidable current implementation detection algorithm searches shared interface combination classes particular class hierarchy 
combination may share interface subset interface shared slightly different combination 
detecting situations possible requires advanced complex search algorithm 
may prefer results show clearly interfaces shared combinations classes information important fig 

class hierarchy refactoring process 
solutions refactorings effectively practice improve design soul application 
obsolete parameter applied refactorings proposed inenv method 
chose apply refactoring removed method implementation 
refactoring proposed detection bad smell particular method called 
method participates instance visitor design pattern 
formal parameter represents element object visited 
coding conventions soul implementation visitor method method define parameter 
remove 
fact parameter particular situation may hint strict restriction 
inappropriate interface changed superclass fact class horn clause rule 
refactoring proposed techniques studying code classes change result improved cleaner design 
change solves problem scope method 
method needs implemented rule fact classes queries represented class need pretty printed 
addmethod refactoring proposed add methods interface class applied 
methods defined methods subclasses class provide implementation additional changes required 
second addmethod refactoring proposed add method interface class applied 
fact class define method provide implementation 
changed inheritance relationships see refactoring turns implementation necessary 
scope fact scope rule query fig 

class hierarchy resulting improved design hierarchy depicted 
discussion soul research prototype tool medium sized application worked small number people developed flexibility extensibility mind allow experiment new language features easily example 
furthermore applied techniques detect refactoring opportunities bad smells 
facts results quite surprising 
refactorings proposed effectively applied achieve cleaner better design 
particular refactoring applied reason closer look identified bad smell revealed problem solved 
assume problems aggravate large scale applications worked developers 
potential disadvantage approach refactorings proposed certainly large scale applications considered cascaded refactoring opportunities taken account discussed section 
developer may large list refactorings may longer see wood trees 
unavoidable particular bad smell remedied multitude refactorings 
furthermore want refactor design automatically 
solution consists presenting list developer pick appropriate refactorings 
problem may alleviated extent ways induce particular order refactorings proposed criteria 
example developer see refactoring refactorings application refactoring ones obsolete explained earlier section 
allow reduce size list dynamically refactoring list applied refactorings obsolete may removed 
requires study dependencies different refactorings considered 
include refactoring development process specific task performed regular times suggested 
regularly checking refactoring opportunities applying corresponding refactorings ensure list possible refactorings remains small manageable 
envision approach checking refactoring opportunities happens time unit testing 
unit tests ensure behavioral correctness application refactoring tests ensure structural correctness 
vii 
tool support tool support approach clearly indispensable shield developer logic environment provide straightforward easy interface 
tool driven programmer selects particular source code entity class method analyzed 
analysis performed automatically user intervention results list refactorings applied 
developer able pick refactoring wants apply tool automatically necessary changes 
provide kind tool support integrated approach refactoring browser standard browser visualworks smalltalk integrated development environment 
augmented browser soul tab see exists tabs available comment code critic hierarchy diagram tabs 
tab contains list bad smells currently detected tool 
check class interface check obsolete parameters entries explained included list example 
selection class upper left pane developer select number bad smells clicks execute button 
result logic query launched check source code selected bad smells 
results query refactorings possibly applied shown lower right pane 
developer simply select refactorings execute 
noted explicitly allow developer select number bad smells single bad smell checked automatically checking 
specific reason current implementation lmp environment optimized consequence checking bad smells large software systems may take quite time 
furthermore developer may know certain bad smell occur particular class hierarchy may want spend time checking 
viii 
related obviously logic query approaches improving software evolution tool support new 
example propose reverse engineering tool stores program information logic code repository perform data flow analysis 
represent structural design information specifically dependency relationships modules prolog data base 
graphical query language query prolog data base identify remove cyclic control dependencies 
algebraic framework modelling querying source code 
facilitates expressing high level source code queries 
mentioned number programming environments exist provide support refactoring 
notably refactoring browser exists smalltalk programming environments eclipse environments java programming language 
kind support offered environments limited automatically applying refactorings selected developer 
special provisions detecting bad smells identifying refactorings applied remove 
tools exist verify source code quality 
tool example capable detecting basic coding errors statement 
generally tools lack global notion program consequence detect advanced coding errors bad smells design level 
advanced tool code critic tool included refactoring browser detect bad smells 
code critic lint tool extended include global design information 
able detect various coding errors identify interface conflicts methods sent implemented vice versa design flaws 
major shortcoming tool strongly relies smalltalk environment powerful meta programming capabilities 
smalltalk general purpose programming language specifically designed express rules constraints straightforwardly implement reasoning algorithms 
hampers extensibility usability tool 
example achieved implementing algorithm detects problem inappropriate interfaces harder complex result readable 
furthermore code critic tool pro fig 

tool support identifying refactorings pose refactorings applied remedy bad smells 
techniques developed specific goal identifying refactoring opportunities proposing corresponding refactorings 
reports tool able derive program invariants source code automatically uses invariants identify refactoring necessary 
example invariant may certain parameter method constant function parameters method 
case possible apply refactoring 
main problem approach needs run application infer program invariants 
extent uses representative set test suites 
impossible guarantee test suite covers possible uses application 
invariants may hold general 
results obtained believe approach complementary 
combining approaches resulting tool uses static dynamic information promising 
sketches approach detect duplicated code object oriented application proposes refactorings eliminate duplication 
object oriented meta model source code tool capable detecting duplication code 
refactorings proposed consist removing duplicated methods extracting duplicated code method insert intermediate subclass factor common code 
currently support detecting code duplication lmp environment general allow implement 
incorporate findings approach 
uses object oriented metrics identify bad smells propose adequate refactorings 
focus relations propose move method attribute extract inline class refactorings 
key concept underlying approach distance cohesion metric measures degree parts methods variables class belong 
main difference metrics approach approach metrics subject interpretation detection technique strict bad smell occurs 
approaches clearly bad smells subject interpretation strict 
ix 
shown support provided detecting design refactored identifying refactorings applied improve design 
approach demonstrated uses technique logic meta programming proves extremely suited detecting bad smells deriving necessary information proposed refactorings 
provided non trivial representative examples prove 
furthermore illustrated approach complements existing refactoring tools integrated tools effectively provide environment supporting complete refactoring process 
includes extending tool detect bad smells 
bad smells strict clear cut examples may resort metrics 
lmp environment certainly implement metrics fact contains metrics framework 
study scalability cascaded refactoring opportunities discussed sections vi 
investigate refactorings depend ones case 
allow identify clearly refactoring opportunities give rise opportunities 
interesting research track incorporate design pattern smells approach enable detect design pattern implementations propose adequate refactorings correct 
require incorporate fuzzy logic techniques suggested explanation constraint logic programming identify design patterns 
integrate ideas approach proposed study overlap complement resulting approach sum parts 
aho weinberger 
awk pattern scanning processing language 
kent beck 
extreme programming explained embrace change 
addison wesley 

problems automatic 
sigplan notices march 
canfora cimitile 
logic approach reverse engineering tools production 
transactions software engineering december 
consens mendelzon 
visualizing querying software structures 
proc 
th int conf software engineering pages 
ed 
prolog standard manual 
springer verlag 
st phane ducasse matthias rieger serge demeyer 
language independent approach detecting duplicated code 
yang lee white editors proc 
int conf 
software maintenance pages 
ieee computer society press september 
johan fabry 
supporting development enterprise javabeans declarative meta programming 
ne dilip patel rolland editors object oriented information systems number lncs 
springer verlag 
richard rajlich 
reengineering object oriented code 
proc 
int 
conf 
software maintenance pages 
ieee computer society press 
bethesda maryland march 
martin fowler 
refactoring improving design existing code 
addison wesley 
yann ga gu herv 
design patterns constraints automate detection correction inter class design defects 
proc 
tools usa 
brian henderson sellers 
object oriented metrics 
prentice hall 
jens jahnke wilhelm schaefer albert 
generic fuzzy reasoning nets basis reverse engineering relational database applications 
jazayeri editors proc 
th european software engineering conference pages 
springer verlag 
johnson 
lint program checker 
michael ernst william griswold david notkin 
automated support program refactoring invariants 
proc 
int 
conf 
software maintenance pages 
kim mens 
automating architectural conformance checking means logic meta programming 
phd thesis departement informatica vrije universiteit brussel 
kim mens isabel wuyts 
supporting software development declaratively codified programming patterns 
journal expert systems applications december 
tom mens tom 
declarative evolution framework object oriented design patterns 
proc 
int 
conf 
software maintenance pages 
ieee computer society 
william opdyke 
refactoring object oriented frameworks 
phd thesis university illinois urbana champaign 
paul atul prakash 
framework source code search program patterns 
transactions software engineering june 
paul atul prakash 
supporting queries source code formal framework 
software engineering knowledge engineering september 
don roberts john brant ralph johnson 
refactoring tool smalltalk 
theory practice object systems 
simmonds tom mens 
comparison software refactoring tools 
technical report vub prog tr programming technology lab november 
frank simon frank clause 
metrics refactoring 
proc 
th european conference software maintenance reengineering pages 
ieee computer society press 
sander tichelaar 
modeling object oriented software reverse engineering refactoring 
phd thesis university berne 
lance tokuda don batory 
evolving object oriented designs refactorings 
automated software engineering 
tom 
automated support framework software evolution 
phd thesis departement informatica vrije universiteit brussel 
arie van deursen leon moonen 
video store revisited thoughts refactoring testing 
proc 
rd int conf 
extreme programming flexible processes software engineering pages 
sardinia italy 
van jan bosch 
design erosion problems causes 
journal systems software 
wuyts 
declarative reasoning structure object oriented systems 
proc 
tools usa ieee computer society press pages 
wuyts 
logic meta programming approach support evolution object oriented design implementation 
phd thesis departement informatica vrije universiteit brussel 
