implementing object specific design patterns object mixins neumann uwe zdun information systems software techniques university essen germany neumann uwe uni essen de object oriented software system composition traditionally centered class designs 
take look design issues objectlevel point view discuss idea build designs especially tailored object level 
currently object oriented paradigm evolving 
new ideas design patterns enhance composability 
example design patterns decorator strategy observer show refine class level designs object level 
believe underlying concepts programming paradigm capabilities programming language comparable expressiveness 
regarding class level implementation design patterns introduced language construct called filter providing powerful language support class level patterns 
similarly order implement objectlevel patterns language construct tailored implementation object level called object mixins 
construct implemented scripting language xotcl extension mit 
object orientation principles information hiding abstraction encapsulation specialization inheritance 
approach proven reducing complexity software architectures unfortunately entails certain obstacles limitations 
currently central weakness composition objects 
class level language constructs able describe properties behavior instances detail suffer powerful means express classes objects composed inter related 
discrepancy aim abstractions hiding implementation reality client objects need access module internals challenging problem 
necessity module address requirements clients staying focused specific client entails need new model abstraction 
model open implementations instances implemented meta object protocols 
reflective techniques read write introspection conjunction dynamics object class system solution allow modules adapt descriptive representation client requirements 
general problem access features properly 
approaches distinction meta level base level behavior base level controlled meta objects 
useful low level approach 
object mixins provide higher level interface objects adapted client requirements completely transparent client objects 
avoid distinction metalevel base level 
consider implied splitting tasks design entity objects base level meta level object biggest disadvantage meta object protocols 
propose usage meta classes see object mixins order able decompose base meta part preserving design entity object implementation 
common problem object orientation numerous components classes relationships concert 
evolving complexity applications difficult software engineers right design decisions 
important designs accessible software engineers way reusable 
object oriented design community proposes design patterns solution problem 
design patterns description situations classes cooperate certain task 
typically hot spots software architectures 
design patterns collected catalogs 
efforts literature con cataloging patterns 
design patterns part programmer paradigm :10.1.1.103.6494
unfortunately order reuse design experience represented design pattern implementation programmer recode pattern usage 
design pattern entity programming language 
problems design pattern implementation investigated ffl traceability pattern scattered objects hard locate trace implementation 
see problem traceability run time structures induced absence introspection mechanisms languages 
ffl self problem implementation patterns requires forwarding messages object receives message forwards object message forwarded self refer delegated object original receiver 
ffl reusability implementation pattern recoded 
ffl implementation overhead pattern implementation requires methods trivial behavior methods solely defined message forwarding 
approaches provide language support design patterns solve problem 
meta patterns identified define patterns gamma 
shown approach generally language support patterns meta patterns new class level language construct called filter 
filters instance methods registered class time object class receives message filter invoked automatically 
filter registered messages objects class sub classes pass filter reach destination object 
filter powerful language construct 
combination rich introspection facilities dynamics filter registration able achieve powerful language support design patterns strong meta programming abilities general tracing facility 
power comes certain coarseness applied object level 
generally possible specialize filter satisfy client object requirements 
think intuitive way provide language construct similar filter especially tailored object level 
task introduce language construct called object mixin investigated language construct 
show general idea refining class level constructs object level limited programming language constructs 
large program structures class level design pattern transformed object specific pattern 
show refinement example decorator strategy observer pattern 
new language construct object mixin implement object specific patterns properly 
give brief overview xotcl language implemented object mixins 
extended extended xotcl pronounced extension object oriented flavor scripting language tcl tool command language 
generally fast high quality development software systems scripting languages tcl 
offer dynamic type system automatic conversion easily extensible components written xotcl tcl 
components string interface argument passing automatically fit 
components reused unpredicted situations change 
pointed evolving component frameworks provide high degree code reuse offer easy usage rapid application development 
preserves extends important features tcl 
offers object orientation encapsulation data operations single multiple inheritance level class system meta classes method chaining rich read write introspection facilities allowing programmer change relationships dynamically see details 
xotcl object associated class class relationship 
classes ordered relationship superclass directed acyclic graph 
classes special objects purpose managing objects 
managing means class provides methods create destroy instances provides repository methods instances define behavior 
furthermore classes combined single multiple inheritance 
instance methods common objects defined root class object predefined user defined 
class special managing kind object managed special class called meta class manages 
interesting aspect meta classes providing constructor pre configured classes derived 
new user defined meta classes derived predefined meta class class order restrict enhance abilities classes manage 
inter object inter class relationships fully dynamic changed arbitrary times immediate effect 
classes objects methods applicable objects applied class objects 
properties provide basis xotcl 
xotcl extensions focus mechanisms manage complexity may occur large objectoriented systems especially systems parts adapted certain purposes 
particular added support ffl dynamic object aggregations provide dynamic aggregations nested namespaces objects 
ffl nested classes reduce interference independently developed program structures 
ffl assertions reduce interface reliability problems caused dynamic typing ease combination components 
ffl meta data enhance self documentation objects classes 
ffl object mixins means improve flexibility mixin methods giving object access different supplemental classes may changed dynamically 
ffl filters means abstractions method invocations implement large program structures design patterns 
object mixins section give brief new language construct object mixin discussed deeply 
construct bases method chaining ability mixes named shadowed super class methods current method modeled clos explicit naming mixin method 
method invoke shadowed methods primitive resulting unambiguous linear path 
object mixins novel approach xotcl handle complex data structures dynamically basis 
term mixin short form mixin class 
object mixin class mixed precedence order object front precedence order implied class hierarchy 
consequence object mixins extend method chaining single object 
arbitrary class registered object mixin object predefined mixin method 
method accepts list object mixins allowing programmer register multiple mixins 
defines classes mix method registers mix instance class class proc puts self class class mix mix proc puts self class mixin mix object mixins extend method chaining primitive forward messages shadowed methods 
call object invoked proc object mixin mixed precedence order object immediately front precedence order resulting class hierarchy 
resulting output example call mix mix object instance object mixin path object mixins mixins may removed dynamically arbitrary times handing mixin method empty list 
introspection purpose xotcl offers mixin option info instance method 
command form info mixin class 
returns list mixins object class specified 
command returns class mixin object 
usual way specialize descriptive structures object oriented languages inheritance 
mixins normal classes benefit specialization inheritance 
necessary normal classes instances derived directly 
providing inheritance ability behavior class mixin differ behavior class instantiated 
undesirable inconsistency language 
object design patterns implementation object mixins refinement idea class level constructs object level applicable language constructs certain class structures 
certain design patterns implementable object level 
implementation design patterns class level propose language support filters 
central property object mixins act transparently objects 
consider natural way object decomposition 
disadvantage traditional object decomposition splits conceptual entity multiple separated entities 
traditional object oriented approaches offer support combine objects entity loosing decomposition 
important sub problem context mentioned self problem forwarding decomposed system entails problem loosing self 
object mixins able decompose tasks conceptual entity referencing object 
design patterns gain decompositions object mixins patterns conceptual entities 
consider object mixins proper implementation object level design patterns 
decorator design pattern shows implementation decorator pattern 
attaches additional responsibility object 
way inheritance inflexible additions statically attached 
decorator pattern solves problem defining component type letting decorators aggregate component 
emerging run time object structure chain decorators terminated concrete component object decorated 
pattern alternative sub resembles object mixin 
reason pattern easily transferable object level 
implementation gamma suffers problems due language 
component operation decorator operation component component operation operation decorator operation operation operation decorator design pattern entails self problem decorator receiving object gets lost message forwarding 
pattern hard trace program code hard introspect run time structures 
pattern semantics mixed application classes pattern hard reuse 
component operation operation self operation operation instance object mixin object mixin object decorator implemented mixins shows object decorator implemented mixins general 
component object mixins defined automatically performing added behavior 
combined 
operation forwarded object class resolved original precedence order 
operation calls performed object solution suffer self problem 
mixins language construct easy reuse 
furthermore pattern traceable run time structures 
example implement image class decorated scrollbar menu 
create necessary classes 
build component type widget classes instance method 
sake simplicity give classes unspecified method draw class widget widget draw args class image superclass widget image draw args drawing image class menu superclass widget menu draw args attach menu image class scrollbar superclass widget scrollbar draw args attach scrollbar image order provide main window image viewer scrollbar menu necessary instantiate image specify decorating classes menu scrollbar mixin classes object image mixin menu scrollbar simplicity shortness solution reduces complexity pattern radically 
entail stated problems self problem benefits apply decorators filters 
main difference applied object level 
image decorated 
maintenance arbitrary structures decorator lists implementation overhead simply create image instances decorated way 
zoomed image needs menu created image zoom mixin scrollbar strategy design pattern strategy design pattern encapsulates set algorithms classes lets clients interface 
way algorithms dynamically exchangeable 
shows pattern implementation gamma context strategy strategy strategy design pattern implementation entails similar obstacles decorator pattern described :10.1.1.103.6494
hard determine program code run time class instantiated strategy application object 
strategy object refers self refers receiving context object 
explicit forwarding messages implementation overhead software engineer explicitly distinguish containing object strategy objects 
object specific implementation mixins entails problems 
mixins instantiated form conceptual entity containing object clear distinction strategy part containing object part run time 
self problem occur 
forwarding handled automatically naming mixin method primitive language 
shows evolving situation object attached specific strategy 
note solution applicable strategy depends output object strategy computation may put call 
context strategy instance object mixin object strategy implemented mixins example implement comparison strategy strings 
instances parser parse string node tree check node type string parsed belongs 
language offering class objects factory node objects question node class object string matches type node creating new instance 
firstly create interface nodes just specifies interface parsing class node parameter content node parse string example create special node types description node holds literal description node holding expression 
class superclass node set content description parse string parse description string class superclass node set content parse string parse expression string classes content node class stored class variable 
need different comparison strategies literals description exactly match content expressions contain content 
implement comparison strategies classes class match string class equals superclass equals match string self instvar content return expr string content class matches superclass matches match string self instvar content return string match string content register comparison strategies corresponding node class objects mixin equals mixin matches factory query class object match instantiate proper node class order parse string match string parse string 
observer design pattern observer pattern solution common problem set depending objects observers rely state observed objects subjects 
fulfills task notifying state changes 
shows observer design pattern 
subject attach detach notify getstate setstate observes update return observer update update subject getstate subject observers observer pattern bosch identifies problem traceability pattern suffer fact methods attach detach notify build conceptual entity calls notify inserted point state change occurs :10.1.1.103.6494
solution problem filters 
case observed methods certain set subjects subjects type observed object specific solution section appropriate 
instances hierarchy possibly subject instance object mixin observer object observer implemented mixins methods depending subjects filter solution 
solution observer object mixins 
observers mixins observed object specify set observed operations 
additionally subjects may contain unobserved operations 
example solution network monitor observes set connections maintains views diagram textual output 
example strongly resembling example underline stated differences language constructs filter object mixins examined deeply section 
internet collector collector diagram observer example implementation class pinger encapsulates view collector classes collectors treated subjects observer class pinger class pinger collector pinger collector ping string class pinger superclass collector operation ping network event handled collector 
operation observed 
starts observation network connection constructor init 
constructor unobserved operation pinger init args set hostname set open bin ping hostname blocking false readable self ping gets pinger ping string handle network event observers class pinger diagram class pinger specify observing ping method 
text output presentation may look pinger ping string puts pinger self string diagram ping operation forward message specified diagram object 
concrete applications classes observers registered mixins situation diagram observer observed textual output diagram pinger mixin pinger diagram pinger mixin pinger pinger diagram related firstly compare object mixin approach implement design patterns class level approach filter 
sketch related works literature regarding object mixins regarding idea language support design patterns 
comparison filters object mixins shown filters able achieve reusable language support design patterns programming language entities 
furthermore enables running programs trace manipulate structures 
power disadvantage certain coarseness filters single objects 
consider situation single method invoked objects observed 
filter defined object classes 
order fulfill observation task check explicitly call object classes object set observed objects 
elaborate solution 
set observed objects may change dynamically list maintained 
different filters object 
case lead implementation overhead 
problems occur object mixins 
generally class level construct aiming reduction complexity large systems able handle broad structures entire class hierarchies 
problems object level finer granularity language construct appropriate 
new language constructs filter object mixin contain similarities 
filter contains code explicit actions certain method certain instance class relatively equivalent object mixin 
hand applies object mixin registered instance class hierarchy contains methods hierarchy 
directions emphasizes idea distinction object class level language constructs aiming complexity 
constructs inheritance specialization classes optionally limit inheritance abilities applied object mixin see details 
differences constructs entail suited language level 
object mixins applied calls object methods defined object mixin class 
filter handles calls instances filtered class sub classes 
example observer pattern investigated obvious granularity language constructs reasonable usage depending application needs 
basis decision kind design pattern object class level 
decision appropriate language construct follows directly 
related object mixins object mixins base method chaining mechanism discussed deeply 
mechanism provides automatic method chaining explicit naming mixin method 
flexible programming mechanism combined unambiguous precedence offers avoid name clashes multiple inheritance 
idea mixins influenced lisp extension clos 
extensions idea mixins discussed 
agora mixins treated named attributes classes order class control extended 
central property mixins may nested 
bracha cook analyze different inheritance mechanisms propose mixins general inheritance construct 
inheritance interpreted mixin composition 
jigsaw mixins roles classes providing set operators controlling effects inheritance modification approaches class level constructs resembling filter approach 
mixin classes methods applied certain messages methods mixins messages filters 
limits expressiveness mixin classes comparison filters 
mixins applied classes granularity fine objectlevel applications 
kind class mixins show similarity mixin filter general 
class level concepts ability intercept change redirect affect messages 
composition filter model introduces idea higher level object interaction model communication types acts 
idea adopted approaches area distributed computing orbix filters 
related design pattern implementation bosch identified problems implementation popular design patterns 
presents approach implement design patterns attribute grammar special comment marking pattern source code 
addresses problem traceability 
comments assign roles classes constrain rules 
flo language introduces new component connector placed interacting objects 
connectors controlled set interaction rules realized operators 
centered messages exchanges 
layom approach approach language support design pattern partially resembling filter approach centered message exchanges :10.1.1.103.6494
puts layers objects handle incoming messages 
layer offers interface programmer determine behavior layer set operators statically layer definition 
approaches class level approaches suffer stated problems regarding object level composability 
composition technique called superimposition proposed language support implementation frameworks 
composes different behavioral roles component play single entity 
conjunction layers approach allow software engineer implemented design pattern object specific sense able supplier objects play different roles different client requirements 
think object level design pattern easily implementable approach comparison object mixins class level approach suffer static offering introspection 
argued stronger focus composability issues regarding object level explained obstacles object oriented programming 
solved introducing flexible finegrained language constructs 
particular high level programming language construct mixins showed object composition 
investigated application language constructs design patterns class 
example patterns object level equivalents 
give application examples implemented object mixins 
way shown implement new patterns way object specific transparent client object suffering stated set deficiencies occurring traditional design pattern implementations 
class level design patterns catalogs possible sense find object specific representation 
subset patterns rely message exchanges patterns relying meta patterns pree benefit implemented object mixins pattern applied object level 
xotcl available evaluation wi inf uni essen de xotcl 
aksit bosch bergmans yonezawa abstracting object interactions composition filters ecoop 
bosch design patterns language constructs journal object oriented programming available ide hk se bosch :10.1.1.103.6494
bosch design patterns frameworks issue language support available ide hk se bosch 
bosch composition superimposition ecoop workshop composability issues object orientation 
bobrow demichiel gabriel keene kiczales moon common lisp object system 
common lisp language nd edition info cs pub ro onl lisp clm node html 
bracha cook mixin inheritance proc 
oopsla ecoop special issue sigplan notices vol 
october pp 

bracha lindstrom modularity meets inheritance proc 
ieee international conference computer languages april 
demeyer steyaert de hondt techniques building open hypermedia systems echt workshop edinburgh september 
buschmann meunier rohnert stal pattern oriented software architecture system patterns wiley sons 
ducasse message passing abstractions elementary bricks design pattern implementations available ide hk se bosch 
gamma helm johnson vlissides design patterns elements reusable objectoriented software addison wesley language support design patterns attribute extension available ide hk se bosch 
iona technologies orbix architecture august 
kiczales new model abstraction software engineering proc 
imsa workshop reflection meta level architectures 
kiczales lamping lopes maeda mendhekar murphy open implementation design guidelines proc 
icse boston may 
kiczales des rivieres bobrow art metaobject protocol mit press 
lieberman prototypical objects implement shared behavior object oriented systems proc 
oopsla portland november 
meyer object oriented software construction second edition prentice hall 
neumann zdun filters language support design patterns object oriented scripting languages proc 
coots th conference object oriented technologies systems san diego may 
neumann zdun enhancing object system composition object mixins submitted publication 
neumann zdun xotcl object oriented scripting language submitted publication 
oliva design implementation proc 
coots th conference object oriented technologies systems san diego may 
ousterhout tcl embeddable command language proc 
winter usenix conference january 
ousterhout scripting higher level programming st century ieee computer vol 
march 
pree design patterns object oriented software development addison wesley 
implementing patterns coplien schmidt eds pattern languages program design addison wesley pp available www 
com publications papers patterns html 
steyaert hondt de hondt lucas van nested agora proc 
ecoop lncs springer verlag 
wetherall extending tcl dynamic object oriented programming proc 
tcl tk workshop toronto july 
zdun entwicklung und implementierung von wie und zur entwicklung von systemen einer diplomarbeit diploma thesis universitat essen 

