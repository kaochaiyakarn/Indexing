java applet correctness developer oriented approach burdy 
research labs la avenue du zi iv la cedex france lilian burdy antoine jean louis com 
presents experiments formal validation java applets 
describes tool developed research labs 
tool allows formally prove java classes annotated jml annotation language java provides framework specifying class invariants methods behaviours 
foundations main features tool 
innovative part tool tailored java programmers particular background formal methods 
reduce difficulty formal techniques aims provide user friendly interface hides developers formal features provides java style view lemmas 
keywords java correctness proof proof user interface providing high quality applet development crucial issue especially applets aimed loaded executed smart cards 
card remains specific domain post issuance corrections expensive due deployment process mass production 
currently quality ensured costly test campaigns tests technically possible 
consider formal techniques solution allows increase quality reduce validation costs 
formal validation java programs growing research field 
java language technologies emerging help java program validation 
java considered support formal techniques precise semantics 
proving program correctness generally formal methods traditionally activity reserved experts 
restriction usually caused mathematical nature concepts involved 
explains formal techniques difficult introduce industrial processes widely research teaching activities 
believe burdy 
restriction reduced providing notations tools hiding mathematical formalisms 
formal tools developed fit classical developers environment 
strongly believe efforts done allow users benefit formal techniques having learn new formalisms experts 
java developers able validate code get assurance correctness 
presents tool java applet correctness kit jack 
tool briefly described formal tool allows prove properties java programs java modeling language jml 
application domain moment smart card applets consider useful development contexts 
generates proof obligations allowing prove java code conforms jml specification 
lemmas translated language allowing automatic prover developed method 
tool lemma generator java provides lemma viewer integrated eclipse ide allows hide formalisms graphical interface 
lemmas users way understand easier java syntax highlighting code portions help understanding 
jack learn formal language code correctness 
remainder organized follow 
section describes jml different tools supporting 
section presents architecture main principles tool developed 
section describes precisely innovative parts tool explains consider accessible developers 
section describes experiments applet metrics collected 
section presents research perspectives section concludes 
java modeling language section briefly presents jml tools developed 
jml language allows specify java classes formally expressing properties requirements classes methods 
keywords logical constructions added java core expression language close java 
jml benefits java precise semantics 
jml defined specifications easy read write java programmers 
facts account tools developed jml annotations 
specifying java applets presents example jml specification 
language provides keywords specify www eclipse org java applet correctness developer oriented approach class invariants invariants correspond properties member class variables hold external observer point view invariants required hold inside method implementations introduced invariant keyword 
example integer positive 
preconditions preconditions associated methods correspond properties hold order call method 
requires keyword define preconditions 
example method parameter required non null 
postconditions preconditions express properties true calling method postconditions describes behavior method expressing properties ensured method 
expressed ensures keyword 
example value current instance parameter special postconditions describe exceptional behaviors particular method throws exception 
jml uses special keyword define special postconditions 
example expressed method throw exceptions 
additionally jml requires specifying variables modified method 
specified modifies keyword 
example specified variables modified instances method class short invariant requires null modifies ensures exception false void fig 

jml example language contains complex constructions allows model complex behaviors 
realistic examples modeled jml java card api part java standard edition api banking applet smart cards 
examples show burdy 
jml realistic way model java programs especially java card restrictions 
tools presenting tool developed describe section existing tools supporting jml order compare approach 
overview tools supporting jml 
time different new tools developed existing tools improved 
categories distinguished runtime checkers static validation tools proof tools 
runtime checker runtime checker part jml release 
jml release consists different tools type checker allowing verify syntax jml specifications tool similar javadoc adds jml specification generated html documentation tool uses jml annotation order add runtime assertions generated code 
assertion checking allows running code dynamic tests checking correctness preconditions postconditions invariants 
problems early specification violation generate false assertions potentially introducing visible runtime error 
integrated junit giving 
tool generates oracle skeletons junit run test cases 
static validation tools main tool category esc java static checker java 
performs static analysis java source file order check potential errors program 
tool aim provide formal assurance verified class correct 
spirit esc java lightweight tool aims development order identify correct bugs early 
example really efficient warn potential null pointer usage provides counter examples property expressed erroneous 
experiment esc java notably 
proof tools category tool jack belongs 
idea tools convert jml annotated source code formal models 
conversion allows reason mathematically program java card standard defined sun microsystems tailored smart card 
subset java 
support threads multi dimensional arrays floating point types junit regression testing framework see www junit org java applet correctness developer oriented approach achieve correctness proofs 
proof tools targeted java card contain complex java features difficult handle example multi threading 
loop tool tool converting java annotated sources pvs models 
treats complete java card language proposes automated proof obligation generation weakest precondition calculus 
java interactive verification environment jive aims translate jml annotated java pvs models 
proposes interactive environment deal proof obligation generation 
handle java card language 
krakatoa tool 
aims translate java annotated sources internal language proof obligations generated coq tools developed project 
goal approaches slightly different 
foundations previous section tools exist handle jml annotated java programs 
feel aspects user friendliness automatization sufficiently addressed tools decided develop tool 
main design goals provide easy accessible user interface enables average java programmers tool difficulties contrast example loop 
interface described section provide high degree automation proof obligations discharged user interaction 
way tool effectively non expert users necessary want formal methods industry 
contrast loop jive approach users need depth pvs knowledge able verifications provide high correctness assurance moment prover says certain proof obligation satisfied possible trust reservation contrast esc java 
tool formally developed loop implements java weakest precondition calculus generates lemmas user interaction 
prove lemmas necessary sufficient ensure correctness applet tool designed way relatively independent particular prover prover required example certification institute relatively easy adapt tool accordingly 
coq proof assistant developed inria coq inria fr european ist project www org burdy 
section presents tool architecture principles concerning object oriented concepts formalization lemma generation 
architecture java annotated java converter internal format fig 

jack architecture lemmas viewer ide prover prover correctness proof presents overview jack architecture 
jack consists parts converter lemma generator java source annotated jml lemmas viewer allows developers understand generated lemmas 
viewer integrated ide described precisely section 
part focuses converter 
jack converter converts java class model allows prove properties 
method formal method different features refinement schema translation code framework allows express lemmas prove prover 
prover part tool provides modules automatic interactive 
choice method targeted prover due different reasons 
prover quite automated proof rate approaching 
easily customized increase rate adding new proof tactics theorems 
dealing interactive interface allows prove remaining lemmas activity reserved experts 
pragmatic reason experience team prover see 
goal prove properties source files written java language 
reach goal know translate java source file lemmas 
main issues case tool developed www com allows develop method 
java applet correctness developer oriented approach 
formalize object oriented java features set theory language order language set theory 

generate lemmas java methods 
sections provide answers questions 
object oriented concepts formalization adopted solution concerning formalization object oriented concept generate lemmas point view java class 
generated lemma class contains prelude formalization memory model instantiated context current class class hierarchy access fields methods 
prelude contains parts generic contextual 
set null subtypes types types instances null instances typeof instances types fig 

memory model representation generic prelude contains definitions concerning built types operators 
contains memory model representation see 
model defined infinite set possible particular corresponding null subtyping relation set currently allocated instances function associating type instance 
model completed definitions allowing handle arrays 
set constants variables represents memory state associated lemma corresponding instance state memory operation 
model object creation instance defined arbitrary element set different special constant null adding set instances assigning type 
set types defined types names names corresponds set classes referenced program 
definition allows handle types corresponding array types type corresponds class dimension represented natural number objects number 
instance java type object correspond type object java type object object 
set names generic depends reachable classes current 
belong common prelude contextual burdy 

instance valuation names case example classes names prefixed avoid names conflict int short char byte boolean object exception throwable nullpointerexception names notice primitive types belongs names type arrays 
instance java type short correspond short type short correspond prelude defined type short 
subtyping relation depending class hierarchy 
assigns class subclasses interface implementing classes interfaces 
gives example subtypes nullpointerexception fields declared variables static fields directly typed translated type member fields declared functions set instances type type field 
instance member field see declared follow typeof subtypes short 
invariants declared properties quantified instances 
instance invariant class see declared follow instances typeof subtypes 
drawback approach directly prove properties correctness formalization 
proofs remain simpler remain centered specific case dedicated class 
lemma generation jml annotations java boolean expressions side effects 
easily translated logical formulas java operators translated functions 
example shift left translated function associating java applet correctness developer oriented approach integer pair integer 
translated annotations methods code lemmas generated automatically 
start account experiences lemma generation machines tried implement weakest precondition wp calculus automate lemma generation 
huisman presents classical hoare logic completed allow generation lemmas context java 
java statements contain different features control flow breaks 
classical wp calculus completed deal 
jml lightly upgraded allow fully automated proof obligation generation 
notably automate lemma generation loops extend jml language new keywords loop modifies loop 
loop modifies keyword allows declare variables modified body loop done methods 
wp calculus necessary universally quantify loop invariant variables automatically calculated specify 
loop allows specify exceptional behavior loop 
necessary apply wp calculus improve understandability specification 
main drawbacks wp calculus loss information potential explosion 
lemmas generated difficult understand part code derived 
bypass issue program flow information associated lemma 
information viewer associate execution path lemma 
feature described section 
explosion remains problem 
different solutions exist avoid 
wp calculus considered brute force concept trying expand path methods solutions interaction reduce brute force introducing intelligence process 
simple solution require users interaction lemma generation order cut unsatisfiable branches 
introducing interaction generation solution allow add special annotations source code introduce formulas taken account generation simplify lemmas 
solution adopted jack allow specify blocks 
explosion usually occurs method sequenced branched statement switch methods usually perform different distinct sequenced treatments 
presents skeleton method 
specifying block second part method allows cut proof obligation generation 
corresponds fact simulation method call 
extensions jml language able obtain fully automated proof obligation generation 
step reach user approval 
second propose access lemmas java style described section 
burdy 
user interface 

modifies variables ensures property 

fig 

specified block jml advantage language rapidly easily learned developers 
consider prover easy 
formal activities modeling proving reserved experts 
demonstrate concept provide prover interface understandable non experts formal methods 
order simplify modeling activity jml language interface requirements integrated tools developers require developer mathematical formalism hide mathematical formalism java view 
compared formal tools jml language efforts user interface integration developement environment probably main strength jack fact underlying mathematical formalism exposed user 
integration developers environment java developers develop integrated development environments ide 
ides provide features useful development process 
integrating tool ides allows user familiar environment 
leads better acceptance tool reduced learning curve 
currently jack integrated eclipse ide 
java applet correctness developer oriented approach ported ides standalone version require ide exists 
constraint taken account obtain developer agreement tool responsiveness 
tool interactively debugger spirit require developer wait long time 
lemma generation takes realistic examples minute 
automatic proof lemmas reactive activity 
tool provides feature allows schedule proof tasks order optimize proof time see paragraph 
minor features available integrate development cycle example reports status project generated microsoft excel files 
lemma viewer important points jack require developers learn mathematical language 
lemmas generated lemmas directly displayed user 
provide user graphical view lemma 
viewer displays information concerning current proof status class methods lemmas source code currently selected lemma goals hypotheses java presentation 
method execution path corresponds case 
possibly lemmas associated case 
case selected corresponding execution path highlighted 
lemma selected views displayed 
path highlighting source code program considered displayed path program leads generated proof obligation highlighted 
different highlighting colors represent path green indicates corresponding instruction executed normally blue indicates corresponding instruction executed normally additional information available 
instance condition construct usually displayed blue additional information indicating condition considered true false red indicates corresponding instruction supposed raise exception executed case considered 
additional information provided indicating exception raised 
burdy 
fig 

viewer integrated eclipse part specification invariant post condition involved current lemma highlighted 
highlighting part source code involved proof obligation allows quickly understand proof obligation allows user treat proof obligations execution scenarios program 
java presentation lemmas hypothesis goals current lemma displayed 
conversion mechanism may hard follow especially non experts internal representation tool hypothesis goals java representation 
variables displayed java dotted notation java operators corresponding function 
translation may complicated operators java jml equivalent constructs 
emphasize point lemmas generated method concerning post condition correction 
style view presents lemmas concerning fact instance instance fact changed method java applet correctness developer oriented approach denoted overriding operator language twice replacing value instances 
fig 

style view java style view presents lemmas 
java operator equivalent overriding operator special notation keyword 
view allows understand quickly part specification concerned lemma postcondition appears code 
modifications concerning second part keyword specific order possibly constraints 
example constraints express fact value equal assumption different allows understand rapidly error code implement requirements equals 
seen style view requires expertise 
fig 

java style view java view able handle internal representation constructs direct java jml equivalent constructs constructs translated java notation hard define 
instance set operators translated generic way 
handling constructs performed modifying internal representation order better match jml language 
instance set operator difficult translate back java 
mainly representing java type information adding dedicated operator handled operator point view representing type information allow easy translation 
changes internal representation useful generating lemmas proof language coq pvs translation set operators may appropriate translation 
burdy 
support verification apart displaying generated proof obligations jack provides support validating proof detailed 
support automatic proof point taken lightly time taken automatic proof generating proof obligations industrial size applications generate thousands proof obligations 
typically proofs quite lengthy necessary user obliged wait proofs finish 
achieve jack provides independent proof view files queued order submitted prover 
proofs performed soon possible possibly night allowing user focus cases inspection 
support interactive proof automatic prover allows discharging proof obligations discharge proof obligations 
remaining proof obligations verified manually 
currently developers supposed handle task delegate team experts perform proofs interactive prover tool 
expected developers able handle interactive proofs 
achieve provide limited support interacting prover order allow users prove common cases 
currently interactions provided identifying false hypothesis 
case prover tries prove negation hypothesis proof succeeds goal discharged 
showing wrong source code 
performed clicking condition source code happen 
instance condition contradiction preconditions 
case corresponding hypothesis retrieved sent prover false hypothesis way similar previous case 
actions limited proof command succeed fail perform full interactive proof 
allow discharge classes common proof obligations 
checking proof obligations additionally proved states jack differentiate checked proof obligations 
checked proof obligations correspond proof obligations formally proved manually verified 
checking proof obligations performed user indicate read understood proof obligation confidence correct 
checked state provides formal guarantee correctness java applet correctness developer oriented approach proof obligations provides valuable information state project 
checked state proof obligations different ways flag cases seen order start interactive proof pretty sure cases correct cases full correctness assurance program required may accept proof obligations formally proved 
case may required proof obligations checked 
case study test jack developed little banking application 
section presents different metrics concerning evaluation tool package 
different classes java javadoc jml proof automatic time po time lines lines lines obligations proof generate prove src src currency src balance src spending rule table 
banking applet metrics remarks table concerning cost adding jml annotations performance tool cost associated proof 
cost annotations concerns cost annotations 
metrics concern number lines see documentation size javadoc jml half greater code size 
writing jml specification costly activity 
moderated points development annotations added existing code 
suffers lack abstraction annotations really verbose 
time specify compared time develop test data 
responsiveness automatic phases quite responsive seconds generate proof obligations 
automatic proof cheap proof obligation generation takes minutes 
remains acceptable non blocking task require users wait completion 
larger applets expected time required automatic proof significantly increase 
burdy 
proof automatic proof rating 
quite greater usual value development 
mainly due fact applet test applet extending prover 
side effect automatic prover customized special applet 
automatic proof step remain lemmas prove interface 
expert needs days prove 
perspectives moment developed prototype usable tool 
experimentation outside lab 
considering points approach improved 
interactive proof cost currently interactive proof support limited 
proving remaining proof obligations requires users directly tool interactive prover 
task tedious representation generated proof obligations hard follow 
different perspectives exist reduce interactive proof cost 
java interface full interactive proof reserved experts providing interface interactive prover allowing perform proofs directly java syntax greatly improve productivity experts 
step extend java view display lemmas 
test activity way reduce interactive proof activity balance testing activity 
methods lemmas automatically proved tested 
way generate test skeleton certain cases 
perspective integrate environment manner propose different validation level full proof proof mixed test 
counter example idea reduce cost false lemma detection provide counter example possible 
esc java give counter examples 
studies subject give results helpful developers understand errors code specifications 
allowing expressions target formal language currently jack seen proof obligations generator jml annotated java programs lemmas 
possible extension add different target java applet correctness developer oriented approach languages lemma generation instance coq pvs 
extension allow different provers different lemmas 
side possible enrich jml specification adding inline expressions variables target language lemma generator 
extension role similar java native methods specification level 
allowing describe lower level language things described jml described efficiently proof point view 
currently investigating extension mechanisms allow adding different languages having modify calculus core 
allows formal methods experts prove java applet correctness 
allow java programmers obtain high assurance code correctness 
leads important point allows non experts venture formal world 
necessary starting point validation techniques widely 
tool developed main objective java developers validate code 
claim jml suited express low level design conception choices usage jack replace effectively unitary tests giving developers means furnish code quality non ambiguous documentation 
benefits research java program validation developed automated tool generates lemmas java classes annotated jml 
jack principles really different loop team choices 
highlight important differences 
loop tool describes formally java semantics wp calculus rules applied prover 
main advantage rules proven sound regards semantics theorem prover 
point view pragmatic lemma generated automatically java developed rules checked usual validation test code inspection 
soundness tool formally proved hand big effort done lemmas users way understand verify valid 
tool fully integrated eclipse ide presents lemmas visual way allows developers form opinion lemma validity 
automatic prover discharges important part lemmas 
remaining lemmas proved prover interface 
task done developers 
different ways studied bypass expert support test case generation counter example detection experimenting real industrial products 
trying collect metrics order prove kind validation cost saving especially cost testing taken account 
burdy 
authors marieke huisman helpful comment 

jean raymond abrial 
book assigning programs meanings 
cambridge university press 

lilian burdy antoine 
jack java applet correctness kit 
gdc singapore november 


development embedded verifier java card byte code formal methods 
lars henrik eriksson peter alexander lindsay editors formal methods getting right volume lecture notes computer science pages 
springer verlag july 

lilian burdy antoine 
formal development embedded verifier java card byte code 
dsn international conference dependable systems networks pages washington usa june 

stor cata marieke huisman 
formal specification static checking electronic purse esc java 
lars henrik eriksson peter alexander lindsay editors formal methods getting right volume lecture notes computer science pages 
springer verlag july 

cheon gary leavens 
runtime assertion checker java modeling language jml 
technical report department computer science iowa state university march 
pp 


cheon gary leavens 
simple practical approach unit testing jml junit way 
boris magnusson editor ecoop object oriented programming th european conference spain proceedings volume lecture notes computer science pages berlin june 
springer verlag 

jean christophe tre claude march christine paulin xavier 
modeling java programs coq 
workshop sept 

cormac flanagan rustan leino mark lillibridge greg nelson james saxe raymie stata 
extended static checking java 
cindy norris james jr editors proceedings acm sigplan conference programming language design implementation pldi volume acm sigplan notices pages new york june 
acm press 

james gosling bill joy guy steele 
java language specification 
addison wesley 

marieke huisman 
java program verification higher order logic pvs isabelle 
phd thesis university nijmegen netherlands 

marieke huisman bart jacobs 
java program verification hoare logic abrupt termination 
maibaum editor fundamental approaches software engineering fase volume lecture notes computer science pages 
springer verlag 

marieke huisman bart jacobs joachim van den berg 
case study class library verification java vector class 
csi report csi computing science java applet correctness developer oriented approach department nijmegen march 
www cs kun nl csi reports full csi ps 
bart jacobs erik poll 
logic java modeling language jml 
hussmann editor fundamental approaches software engineering fase volume lecture notes computer science pages 
springer verlag 

gary leavens albert baker clyde ruby 
preliminary design jml behavioral interface specification language java 
technical report iowa state university department computer science february 
ftp ftp cs iastate edu pub techreports tr tr ps gz 

gary leavens rustan leino erik poll clyde ruby bart jacobs 
jml notations tools supporting detailed design java 
oopsla companion minneapolis minnesota pages 
acm october 

rg meyer arnd poetzsch heffter 
architecture interactive program provers 
graf schwartzbach editors tools algorithms construction analysis systems tacas volume lecture notes computer science pages 
springer verlag 

erik poll joachim van den berg bart jacobs 
specification javacard api jml 
fourth smart card research advanced application conference ifip 
kluwer academic publishers 

joachim van den berg bart jacobs 
loop compiler java jml 
margaria yi editors international workshop tools algorithms construction analysis systems tacas volume lecture notes computer science pages 
springer verlag 
