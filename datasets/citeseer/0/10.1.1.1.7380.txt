bananas space extending fold unfold exponential types erik meijer graham hutton university utrecht netherlands www cs ruu nl people fold unfold general purpose functionals processing constructing lists 
categorical approach modelling recursive datatypes fixed points functors functionals algebraic properties generalised lists polynomial sum product datatypes 
restriction polynomial datatypes serious limitation precludes exponentials central functional programming functions class values exponentials able freely datatype definitions 
explain freyd modelling recursive datatypes fixed points shows generalise fold unfold polynomial datatypes involving exponentials 
knowledge category theory required gofer meta language making extensive constructor classes 
bird meertens developed calculus recursion functionals lists efficient functional programs derived specifications equational reasoning :10.1.1.100.9674
subsequently generalised lists polynomial product datatypes categorical approach modelling recursive datatypes fixed points functors 
approach allows foldr unfold recursion functionals uniformly generalised lists polynomial datatypes 
generalised functionals special names catamorphism anamorphism written symbolically special brackets banana brackets lens brackets db ec 
categorical approach provides number algebraic laws derive transform reason programs expressed functionals 
theory practice generic functionals explored authors 
aim bananas meijer fokkinga paterson bring ideas closer lazy functional languages :10.1.1.41.125:10.1.1.41.125:10.1.1.41.125
achieved moving category set sets total functions world standard category theory category cpo cpos continuous functions world cpo categories lazy functional programming 
serious deficiency bananas generally community limitation polynomial datatypes 
precludes exponentials function spaces central functional programming functions class values exponentials able freely datatype definitions 
truly bring closer functional programming theory extended deal datatypes involve exponentials 
technically exponentials problematic exponential functor contravariant argument 
standard solution problem move category cpo category cpo ep cpos pairs category exponential functor covariant 
setting cpo ep technically sufficient practical point view convenient category base programming calculus reasoning datatypes recursion functionals arrows cpo ep naturally correspond programs 
alternative solution allows stay cpo proposed freyd 
key idea model recursive datatypes fixed points functors variables contravariant covariant second 
article see explain functional programmers freyd shows generalise fold unfold polynomial datatypes involving exponentials 
gofer meta language making extensive constructor classes extension standard gofer haskell class system 
gofer category theory meta language concepts accessible executable eliminates gap theory practice 
polynomial datatypes section reviewing theory introduced bananas implementing gofer 
particular implement generic versions cata ana recursion functionals foldr unfold :10.1.1.41.125:10.1.1.41.125
functors recursive datatypes covariant functor type constructor assigns type type polymorphic functional map lifts function 
function map 
gofer concept functor encapsulated constructor class follows class functor map 


declaration possible standard class system parameter class functor type constructor type 
familiar example functor type constructor confused empty list lists instance functor map xs xs technically functor preserve identity function id distribute function composition equations hold map id id map map map possible express extra requirements directly gofer class definition functor 
responsibility programmer check hold instance class 
functor induced recursive datatype rec defined fixed point gofer implemented follows data rec rec strict rec recursive forced define data type consequence required introduce fictitious strict constructor 
strictness necessary obtain isomorphism rec rec 
strict value rec corresponds undefined value bot rec defined bot bot 
strictness pragma definition rec currently permitted gofer 
number haskell implementations permit constraints datatype definitions releases gofer 
consider simple datatype arithmetic expressions built numbers binary addition data expr num int add expr expr express datatype fixed point functor define functor captures recursive structure arithmetic expressions data num int add instance functor map 
case num 
num add 
add simple exercise verify map satisfies equations required functor 
type expr expressions defined fixed point functor type expr rec illustrative values type expr bot num add bot bot add num bot add bot num add num num add clear examples plays essential role explicit type coercion expr expr general rec rec clear type expr defined rec isomorphic original gofer definition recursion 
rec defined recursive type synonym types fact identical 
parameterised datatypes defined fixed points functors 
general method partially parameterise binary type constructor type variable give functor 
example datatype data list nil cons list lists elements type defined follows data nil cons instance functor map 
case nil 
nil cons 
cons type list rec remainder rec definition recursive datatypes 
definitions translated normal gofer recursive definitions simply unfolding definition rec 
mutually recursive datatypes reduced direct recursive datatypes similar way mutually recursive functions reduced direct recursive functions 
generality lost restricting attention direct recursive datatypes 
note type constructor part functor necessary express datatypes fixed points functors 
shall see section map part comes play recursion functionals datatypes defined 
invariants algebras catamorphisms freyd terminology isomorphism types invariant 
example invariant rec 
rec possible invariants special sense minimal invariant 
minimality expresses function copy functor 
rec 
rec copy map copy recursively replaces constructor identity function datatype rec copy id holds easily proved structural induction 
suppose generalise copy replace arbitrary function phi 
way obtain notion catamorphism cata functor :10.1.1.41.125:10.1.1.41.125:10.1.1.41.125:10.1.1.41.125


rec 
cata phi phi map cata phi functional cata written banana brackets literature generic version familiar recursion functional foldr lists generic sense polynomial datatype :10.1.1.41.125
term catamorphism comes greek preposition ff ff meaning downwards reflects fact cata phi recursively walks argument replacing occurrence function phi way :10.1.1.41.125
functor specific type function phi 
known algebra 
consider functor arithmetic expressions 
function replaces constructors num add functions id algebra type int 
int 
case num 
id add 
applying cata algebra gives standard evaluator arithmetic expressions eval expr :10.1.1.41.125
int eval cata :10.1.1.41.125
case num 
id add 
definition says expressions evaluated simultaneously replacing num constructors id function integers add constructors integers 
unfolding definition eliminate cata map clear expected behaviour eval case num :10.1.1.41.125
add 
eval eval free theorems fusion useful heuristic functional programming inspect free theorem comes type polymorphic function 
free theorem cata functor :10.1.1.41.125


rec 
known fusion law strict functions phi phi map cata phi cata phi consider finite elements rec strictness condition removed :10.1.1.41.125:10.1.1.41.125:10.1.1.41.125:10.1.1.41.125
fusion proved directly simple fixed point induction necessary strict :10.1.1.41.125:10.1.1.41.125:10.1.1.41.125
hidden type information fusion law exposed commuting diagrams equations map phi fflffl phi fflffl rec cata phi cata phi fflffl fusion captures common pattern inductive proof programs expressed catamorphisms similar way cata captures common pattern recursion polynomial datatypes :10.1.1.41.125
minimality fusion show cata phi satisfies universal property cata phi unique function satisfying defining equation :10.1.1.41.125
returning running example alternative way evaluate arithmetic expressions stack type int store intermediate values 
stack evaluator defined follows eval expr 
int 
int eval cata :10.1.1.41.125
case num 
push add 
add push pushes number stack add cs cs adds top values 
fact stack evaluator leaves expected value top stack finite expressions expr push eval eval easily proved fusion distribution push addition push add push push 
coalgebras anamorphisms cata define functions recursive datatypes source :10.1.1.41.125
dually useful functional defining functions recursive datatypes target 
re writing function copy catamorphisms arose equivalent form copy functor 
rec 
rec copy map copy inverse isomorphism 
generalise version copy replacing occurrence rec 
rec definition arbitrary function psi 
coalgebra obtain notion anamorphism ana functor :10.1.1.41.125:10.1.1.41.125:10.1.1.41.125:10.1.1.41.125



rec ana psi map ana psi psi functional ana written lens brackets db ec literature generic version recursion functional unfold lists :10.1.1.41.125
greek preposition ffff means upwards reflects fact ana psi recursively builds result decomposing argument function psi :10.1.1.41.125
illustrate notion anamorphism defining function converts natural numbers binary representation 
step define type bin binary numbers fixed point functor data empty zero instance functor map 
case empty 
empty zero 
zero 
type bin rec binary representation natural number built recursively splitting significant bit int 
bin ana :10.1.1.41.125
case 
empty 
zero 
example zero empty 
dual function converts binary number back natural number defined catamorphism bin 
int cata :10.1.1.41.125
case empty 
zero 

free theorems fusion free theorem functional ana functor :10.1.1.41.125



rec fusion theorem psi map psi ana psi ana psi diagrammatic form psi fflffl oo psi fflffl map oo rec ana psi fflffl oo ana psi case strictness requirement bot bot gives bot bot true functions fusion anamorphisms fact ana identity function rec show ana psi fact unique function satisfying defining equation :10.1.1.41.125
primitive general recursion meertens shown primitive recursive function paramorphism expressed ana followed cata :10.1.1.41.125
briefly show paramorphisms implemented gofer 
step define family functors functor type rec mapp para pp mapp functor 



mapp map 
instance functor 
functor map mapp note defined restricted type synonym partially applied 
consequence functional mapp defined directly instance declaration functional para builds paramorphisms defined para functor 
rec 

rec 
para phi cata phi preds preds functor :10.1.1.41.125
rec 
rec preds ana pp pp functor :10.1.1.41.125
rec 
rec pp map 
technical reasons concerning types definition para split parts 
came somewhat surprise authors discover general fixed point operator defined composition ana followed cata providing full power recursion :10.1.1.41.125
discovered observation freyd 
effect algebraic languages provide cata ana means define recursive functions limited expressive power :10.1.1.41.125:10.1.1.41.125
cata ana fixed point fix function computed infinite application way anamorphism build infinite list cons cons cons catamorphism replace constructor cons function application :10.1.1.41.125
fix functor 



fix cata cons :10.1.1.41.125
ana :10.1.1.41.125
cons general functions naturally expressed composition ana cata useful name idiom :10.1.1.41.125
functions expressed way known hylomorphisms hylo functor :10.1.1.41.125:10.1.1.41.125:10.1.1.41.125





hylo phi psi cata phi ana psi straightforward fixed point induction shows constituents hylomorphism fused give direct recursive definition avoids building intermediate virtual value hylo phi psi phi map hylo phi psi psi example express fix hylomorphism composition cata ana fix hylo cons :10.1.1.41.125:10.1.1.41.125

cons unfolding efficient definition hylo find fix fix expected 
problems exponentials previous section reviewed functionals foldr unfold generalised lists polynomial datatypes 
datatypes sufficient programming tasks central aspect functional programming functions class values 
exponentials function spaces problematic type constructor 
contravariant argument 
effect certain type constructors defined 
functors result functionals cata ana define functions recursive datatypes involving exponentials :10.1.1.41.125:10.1.1.41.125
section gives number examples recursive datatypes involving exponentials elaborates problems datatypes 
covariant uses 
example function spaces covariantly non deterministic computations 
element datatype state final value type intermediate state type non deterministic continuation type 
state data done pause 
type state rec type constructor functor observe sub component 
functor 
fixing argument 
specific type yields functor 

required type map functional 




familiar infix notation recognise 




type function composition 
easily verify 

functor 
instance functor 
map 
functor follows instance functor 
functor 
functor map 
case done 
done pause 
pause map map note map recursive uses map definition 
lists 
function exec forces evaluation state set final values defined catamorphism exec functor 
state 
exec cata :10.1.1.41.125
case done 
pause 
concat simple application exec ana define function extracts list digits number int :10.1.1.41.125
int exec ana :10.1.1.41.125
done pause 
div mod example 
practical type state extension library parsing combinators combinator parallel composition parsers 
contravariant uses 
example 
contravariantly definition fixed point combinator recursion types recursion functions 
define type inf functions yield result type infinitely nested argument functions type 
ini outi ini 

outi 

ini id outi id type inf rec functions ini outi play role constructor destructor functions type inf define curry fixed point combinator gg hh untyped calculus typed functional language fix 

fix ini outi able express recursive functions inf recursion functionals cata possible define map covariant functor 
definition functional contravariant functor 


ini outi contravariant functor covariant functor functional lifts function 
function 
argument result types interchanged 
consequence functors distribute contravariantly function composition 
gofer concept contravariant functor encapsulated constructor class follows class 


possible effort define versions cata ana para hylo datatypes expressed fixed points contravariant functors partial solution problem 
general type constructor involving function spaces mixed variance 
mixed variant uses 
example 
covariantly contravariantly definition type scott modelling untyped lazy calculus data func 
type scott rec occurrence type variable type expression said contravariant occurs left odd number nested arrows covariant 
argument occurs covariantly 
contravariantly 

effect functor covariant contravariant 
distinction kinds occurrences argument definition explicit defining binary type constructor data func 
fixing argument covariant functor fixing second argument contravariant functor 
general binary type constructor property called 
formally binary type constructor assigns pair types type polymorphic functional dimap lifts pair functions 

function dimap 
preserve identity function distribute function composition way id dimap id id dimap dimap dimap gofer concept encapsulated constructor class follows class dimap 




verify definition dimap type constructor instance dimap func func func constructor plays auxiliary role 
fact function space constructor 
instance 
dimap general separating covariant contravariant occurrences argument body nonrecursive datatype declaration data type constructor induces recovered general datatypes seen previous section non recursive type constructors involving exponentials general induce functors induce 
freyd presents categorical theory recursive datatypes modelled fixed points 
section explain freyd shows generalise recursion functionals cata ana associated fusion rules :10.1.1.41.125
case previously cata ana obtained suitably generalising simple copy function :10.1.1.41.125:10.1.1.41.125
recursive datatypes induced recursive datatype rec defined simultaneous fixed point arguments 
gofer definition rec implemented follows previously strictness constructor necessary obtain isomorphism data rec rec rec strict catamorphisms anamorphisms isomorphism types called invariant 
example invariant rec rec 
rec minimal invariant sense copy id copy 
rec 
rec copy copy dimap copy definition expressed diagrams rec rec rec rec rec rec dimap copy fflffl copy fflffl copy oo note drawing arrows 

dimap 
separately contravariance typing assumptions dimap explicit 
datatypes expressed fixed points functors notion catamorphism arose abstracting body definition copy 
try play game version copy 
attempt abstracting naively body version copy gives definition cata phi phi cata phi dimap cata phi definition restrictive forces argument function phi type rec rec :10.1.1.41.125
rec cata phi type rec :10.1.1.41.125
rec problem cata phi covariant contravariant argument dimap definition :10.1.1.41.125
covariant cata phi requires argument function phi type :10.1.1.41.125
function type called dialgebra 
additional contravariant cata phi requires rec phi type rec rec :10.1.1.41.125
rec step solving problem assume existence function 
rec contravariant argument dimap body cata phi cata phi :10.1.1.41.125
assumption leads definition cata phi sufficiently general typing requirements illustrated diagram rec rec rec dimap cata phi fflffl cata phi fflffl oo phi similar problem occurs naive generalisation copy obtain anamorphism functional ana psi ana psi dimap ana psi psi covariant ana psi requires psi type :10.1.1.41.125:10.1.1.41.125
function type called 
additional contravariant ana psi requires rec psi type rec :10.1.1.41.125
rec rec ana psi type rec :10.1.1.41.125
rec definition ana psi sufficiently general typing requirements obtained assuming existence function rec :10.1.1.41.125
contravariant argument dimap rec rec rec dimap ana psi fflffl psi oo ana psi fflffl oo consider diagrams cata phi ana psi simultaneously :10.1.1.41.125:10.1.1.41.125
observe function 
rec required define cata phi obtained simply ana psi similarly function rec :10.1.1.41.125:10.1.1.41.125
required define ana psi obtained cata phi :10.1.1.41.125:10.1.1.41.125
naturally led mutually recursive definitions cata ana datatypes expressed fixed points cata :10.1.1.41.125:10.1.1.41.125




rec 
ana :10.1.1.41.125





rec cata phi psi phi ana phi psi dimap cata phi psi ana phi psi cata phi psi dimap ana phi psi psi note versions cata ana proper generalisations functor versions section sense independent contravariant argument definitions reduce standard definitions functors :10.1.1.41.125:10.1.1.41.125
free theorems fusion just case functors cata ana functionals satisfy fusion law arises free theorem :10.1.1.41.125:10.1.1.41.125
versions cata ana defined mutually recursively get simultaneous fusion law functionals separate laws case previously strict functions phi phi dimap psi dimap psi cata phi psi cata phi psi ana phi psi ana phi psi diagrammatic form dimap fflffl phi fflffl oo phi dimap fflffl psi oo fflffl oo psi oo rec cata phi psi cata phi psi fflffl rec ana phi psi oo fflffl ana phi psi iis interesting note fusion law turns specialisation functions pitt relational induction principle recursive datatypes prop :10.1.1.41.125:10.1.1.41.125
consider example fusion 
retract type type pair functions 

id 
words injective function left inverse 
gofer notion retract encapsulated type class follows class retract 

fusion shown form retract ana cata form retract rec 
gofer implemented follows instance retract 
retract rec ana retract :10.1.1.41.125

retract 

cata retract :10.1.1.41.125

retract 

result section 
interpreters calculus illustrate generalised theory defining class interpreters untyped calculus steps formally relating interpreters 
defining datatype expr expressions data expr var string lambda string expr apply expr expr datatype expr course expressed fixed point functor don preferring concentrate fixed points defining semantic domains interpreters 
datatype serve semantic domain reflexive 
formally type reflexive retract 

notion retract defined previous section 
intuitively type reflexive large faithfully represent function space 
gofer notion reflexive type encapsulated type class follows class retract 

reflexive apply 

abstr 

apply abstr define class interpreters reflexive type map expression value semantic domain usual environment carries values free variables expression class reflexive 
eval expr 
env 
eval var env env lookup eval lambda env abstr 
eval env update eval apply env eval env apply eval env environments represented functions identifiers values equipped operations type env string 
lookup update lookup env 
string 
update env 
string 
env env lookup env env update 
env lookup section fact env extended functor follows 

env 
env 
instance functor env map standard call name interpreter untyped calculus obtained reflexive datatype scott section semantic domain instance retract scott scott 
scott func func instance reflexive scott instance scott appropriate reflexive type cont call name continuation semantics expressions defined type cont closure 
closure 
closure instance retract cont cont 
cont 
cont 
clos 
cont cont 
cont clos instance reflexive cont instance cont closure fixed point data clos 




instance 
dimap clos clos dimap dimap dimap dimap dimap type closure rec suppose want show interpreter correct respect standard interpreter 
interpreter reflexive type correct respect interpreter reflexive type exists retract diagram commutes expressions env env eval map oo eval oo evaluating expression environment binding variables values converting result value equivalent converting bindings values interpreting expression 
turns free theorem polymorphic interpreter eval reflexive 
expr 
env 
gives tractable conditions establish correctness interpreter respect apply apply abstr abstr eval eval map see general discussion free theorems context class restrictions 
result generalisation untyped calculus reynolds functional abstraction theorem typed calculus 
appealing abstraction theorem scott cont required find retract cont scott satisfying preconditions theorem 
fact scott form rec fact cata ana preserve retracts previous section motivated look retract cont cont cont :10.1.1.41.125:10.1.1.41.125
easy prove definitions give retract establishing retract cont scott instance retract cont cont cont func func instance retract cont scott remains show cont 
scott satisfies preconditions abstraction theorem 
verifying second condition straightforward 
successful establishing condition apply apply 
covariant functors suffice freyd shows somewhat surprisingly generalisation functors technically necessary handle exponentials fixed points expressed terms fixed points covariant functors 
result mainly theoretical interest instructive see translation functors works 
class system gofer isn quite powerful implement aspects translation directly just give outline 
seen previously case covariant functor fixing contravariant argument specific type instance 
functor map id dimap consider mapping types sends type fixed point covariant functor type rec cata operator functors section mapping extended mapping functions contravariant functor functor :10.1.1.41.125



cata :10.1.1.41.125
dimap id technical reasons concerning type classes gofer directly instance gofer class contravariant functors 
contravariant functor covariant functor square composing type square 


square 
square instance 
functor square map technical reasons defined directly instance declaration 
freyd shows fixed points reduced fixed points covariant functors steps 
fixed point rec isomorphic fixed point rec contravariant functor viewed independent second argument 
secondly fixed point rec contravariant functor isomorphic fixed point rec square covariant functor square combining steps see fixed point rec obtained isomorphism fixed point rec square covariant functor square 
way showing covariant functors suffice eliminate mutual recursion definitions cata ana standard techniques construct datatypes resulting functions catamorphisms anamorphisms :10.1.1.41.125:10.1.1.41.125
discussion explained recursion functionals cata ana generalised polynomial datatypes involving exponentials :10.1.1.41.125:10.1.1.41.125
important area research experimenting generalised operators laws writing transforming programs 
interesting topic study non regular datatypes datatypes recursive calls body form head definition 
examples datatype twist lists alternating elements type type datatype nest lists nested lists data twist nil cons twist data nest block nest knowledge general known express non regular datatypes fixed points functors note possible effort express non regular datatypes fixed points type constructors rec kind 
kind 
final remarks concern gofer type system 
number places hack limitations type synonyms 
standard type synonyms partially applied forced cases restricted type synonyms partially applied 
secondly type synonyms recursive forced data declaration defining rec leading fictitious constructor 
problems don inherent type synonyms artifacts treatment type synonyms macros earlier functional languages see discussion point 
utrecht university chalmers university provided funding mutual visits authors time part written 
ross paterson originally suggested meijer freyd applications functional programming 
luc duponcheel johan jeuring mark jones fpca referees useful comments suggestions 
samson abramsky 
lazy lambda calculus 
david turner editor research topics functional programming pages 
addison wesley 
lennart augustsson 
haskell compiler 
chalmers university technology 
roland backhouse ed jaap van der 
relational theory datatypes 
preparation 
henk barendregt 
lambda calculus syntax semantics 
north holland 
revised edition 
hans bekic 
programming languages definition volume lncs 
springer verlag 
richard bird 
constructive functional programming 
proc 
marktoberdorf international summer school constructive methods computer science 
springerverlag 
richard bird oege de moor 
algebra programming 
preparation 
richard bird philip wadler 
functional programming 
prentice hall 
gert 
modelling office processes functional parsers 
university utrecht netherlands 
maarten fokkinga 
law order algorithmics 
phd thesis university twente march 
peter freyd 
algebraically complete categories 
carboni editor proc 
como category theory conference volume lecture notes math pages 
springer verlag berlin 
peter freyd 
recursive types reduced inductive types 
proc 
lics 
ieee computer society press 
jeremy gibbons 
algebras tree algorithms 
phd thesis oxford university september 
hagino 
category theoretic approach data types 
phd thesis university edinburgh 
graham hutton 
higher order functions parsing 
journal functional programming july 
mark jones 
gofer release notes 
february 
mark jones 
system constructor classes overloading implicit higher order polymorphism 
proc 
fpca 
springer 
mark jones 
personal communication may 
mark jones erik meijer 
gofer goes bananas 
preparation 
malcolm 
algebraic data types program transformation 
science computer programming september 
manes arbib 
algebraic approaches program semantics 
texts monographs computer science 
springer verlag 
lambert meertens 
algorithmics programming mathematical activity 
proc 
cwi symposium centre mathematics computer science amsterdam november 
lambert meertens 
paramorphisms 
formal aspects computing 
erik meijer 
calculating compilers 
phd thesis nijmegen university february 
erik meijer 
advice proving compiler correct improve correct compiler 
submitted publication september 
erik meijer 
type classes better free theorems 
preparation 
erik meijer maarten fokkinga ross paterson :10.1.1.41.125:10.1.1.41.125:10.1.1.41.125
functional programming bananas lenses envelopes barbed wire 
john hughes editor proceedings fpca number lncs 
springerverlag 
ross paterson 
control structures types 
submitted publication 
andrew pitts 
relational properties recursively defined domains 
proc 
lics 
ieee computer society press 
john reynolds 
relation direct continuation semantics 
jacques editor proc 
nd colloquium automata languages programming number lncs pages 
springer verlag 
john reynolds 
types abstraction parametric polymorphism 
information processing 
david schmidt 
denotational semantics methodology language development 
allyn bacon 
tim sheard leonidas fegaras 
fold seasons 
proc 
fpca 
springer 
mike smyth gordon plotkin 
category theoretic solution recursive domain equations 
siam journal computing pages 
doaitse swierstra oege de moor 
virtual data structures 
technical report ruu cs utrecht university netherlands 
philip wadler 
theorems free 
proc 
fpca 
springer 
philip wadler 
deforestation transforming programs eliminate trees 
theoretical computer science 
