feature interaction detection building control systems means formal product model andreas metzger christian department computer science university kaiserslautern box kaiserslautern germany metzger informatik uni kl de 
complexity day software systems reached dimensions require systematic approaches coping 
addition traditional domains telecommunications business applications complex software systems domain reactive systems building control systems interesting example 
extension reuse systems important activities respective development processes 
able correctly execute activities developers need aware interactions exist different features system 
approach systematic detection feature interactions building control systems allows automatic identification interactions existing requirements specification documents 
realized application formal model development products includes traceability relations products 
complexity modern reactive systems steady rise 
interesting example integrated building control systems essential optimizing total building performance 
provide optimal results systems consider interaction different physical effects requires strong coupling different parts control systems 
constructing building control systems expose huge complexity due sheer number objects needs dealt integrated control system developed floor university building consists objects 
complexity number problems arise 
problems extension systems additional functionality 
typically required new user needs considered 
desired behavior new functionality introduce undesirable interrelationships old parts system unwanted system behavior result 
illustrate assume exemplary building control system allows automatic control illumination inside room 
system cost artificial lighting reduced employing daylight possible 
system extended satisfy user need avoiding glare workplace undesirable interrelation introduced daylight situations produce glare 
problem discovered complex reactive systems reused 
simply eliminating parts needed new context result faulty systems required interrelations parts eliminated 
published logrippo eds 
feature interactions telecommunications software systems vii 
amsterdam ios press 

pp 
considered 
give example condition assume building control system additionally realizes alarm system 
functionality alarm system turn lights alarm triggered 
system reused alarm system parts relevant lighting lights blinds probably removed 
removal exercised considering required interrelations malfunctioning system result lights needed alarm system 
examples appear trivial real control systems typically realize requirements detection reasonably performed manually 
propose approach automatic detection interactions 
detection concept formal product model reflects type development product relations types products 
relations important means establishing traceability products 
purpose interaction detection employ product model available part precise definition requirements specification method 
product model instantiated set available requirements documents interaction information automatically derived model data 
related opinion problems similar feature interaction problem received considerable attention telecommunications domain 
consequently product model approach provide solutions depicted problems building control context prove valuable domain telecommunication systems 
feature interaction detection approaches literature 
approach detects undesirable interactions employing case maps lotos introduced 
features semi formally described case maps features formally defined lotos verification 
authors propose formal description techniques purpose interaction detection 
temporal logic model checking suggested special heuristic chosen description logic logic meta programming applied 
approaches require modeler explicitly formally specify features 
contrast concept require requirements engineer provide additional information specification process 
existing documents exactly described requirements specification method considering feature interaction 
approach provide increase product quality little additional effort 
simplification prevent distinguishing interactions undesirable required 
determined developers basis automatically analyzed interaction information existing documents 
automation activity achieved extension requirements specification method necessary required interactions specified 
approaches actual implementation code extended implementation code meta programming detecting feature interaction able detect interactions early development process requirements specification 
major benefit eliminating undesirable interactions find way final product removing interactions costly 
remainder requirements specification method product model described 
concepts applying product model purpose interaction detection illustrated example small building control system 
results complex case studies discussed 

product model defining detailed product model reflects necessary development products model complex 
case complete model currently contains different entities 
structure model classifying different types entities fig 

artefact configuration document self document implies forall 
classification development products general type entity called artefact identified development product 
artefact unique name optionally described informal text 
specialized types entities named model features represent atomic development products 
note notion model feature different general meaning feature self contained functional part aspect specification system 
consistently term model feature remainder distinction clear 
model features contain actual development information independent representation 
model feature different feature views exist contain information concrete representation html sdl 
feature views conceived specializations model features 
additionally configurations introduced aggregate complex artefacts 
reflected aggregation relation fig 

usually developers working documents composed 
documents classified special configurations allowed aggregate feature views 
documents inherit aggregation relation configurations constraint fig 
states feature view instances relation 
classification product model entities provides means reducing number artefacts need handled interaction detection 
model features contain information feature views detection concept level model features neglecting information 
purpose set available development documents instantiating model features relations model features 
step carried decomposing documents feature views extracting model feature information feature views 
details performed 
prerequisites interaction detection approach independent notation specification documents 
consequence model features product model described sect 
suffice input feature interaction detection 
method concrete model features depicted requirements specification method appropriate 
fig 
overview documents activities method provided 
method takes problem description input divided building description collection needs 
building description structure specification structure requirements specification problem description control system description semi formal control object types control system modeling operational control object types 
overview method needs task description building description contains description building structure floorplan shows building floor rooms 
building installation depicted informal text states light illumination sensor motion detector room 
building description control system structure derived considering structure building 
building automation domain proved suitable approach control objects objects control system identical building objects subset lighting needs controlled boundaries room control object lighting derived room object 
additionally sensors actuators represent interface control system environment reflected specification 
handle huge number control objects need considered large building control systems control object types formed aggregated hierarchy building objects 
part problem description collection needs user requirements 
needs informally describe control system point view users natural language 
needs split complex tasks developer requirements assigned single control object type 
control object types identified tasks assigned strategies realizing control tasks informally natural language leading col lection semi formal control object types 
control object types operational control object types specified sdl control system prototypes generated 
noted control object types introduced requirements specification phase solely purpose structuring specification suitable way 
design phase structure re arranged 
furthermore specification strategies understood exemplary solution developer requirements 
needed generating prototypes important means early validation user requirements 
design phase different solutions strategies possible legitimate 
product model introduced previous section input requirements engineering method user requirements called needs shown fig 
specialization model feature requirement 
needs represent functional requirements functional needs regarded requirements specification process 
granularity interpret functional needs features 
needs realized tasks realized tasks 
dependency modelled relation requirement task fig 

relation relations product model explicitly reflected development documents instantiating model features 
requirement need functional need instantiation task functional strategy writes reads implements produces consumes aggregates 
types model features task describes responsibility fulfilled control object type implements task 
reflected implements relation model feature control object type model feature task 
depicted sect 
control object types instantiated strict aggregation hierarchy leads tree instances 
strict aggregation modelled aggregates relation model feature control object type model feature instantiation 
instantiates parameter attribute datatype task functional strategy specified 
pointed strategy describes possible solution realizing responsibility task 
establish communication strategies different tasks strategies read write attributes produce consume signals globally defined signal types possess parameters 
attributes communication tasks control object type signals exchanging data tasks different object types 
important note signals allowed travel aggregation hierarchy 
example implies control objects level hierarchy need communicate signals routed parent instance aggregates communicating instances 
illustrate model features product model provide example remainder small building control system subsection 
small building control system example needs small control system example described 
need expressed provide required illumination room occupied 
second need daylight reduce energy consumption third need avoid glare workplace 
system little complex need added 
need states provide required temperature room 
table lists needs 
table 
needs small building control system need description provide required illumination room occupied 
daylight reduce energy consumption 
avoid glare workplace 
provide required temperature room 
method needs refined leading collection tasks assigned specific control object types 
possible structure small building control system derived respective building description fig 


structure small building control system sensors actuators represent interface environment typically leaf nodes structure fig 

table lists suitable tasks refining needs 
refinement need provided tasks describe developer requirement avoiding glare employing blinds 
example assumed building description provides blinds means shading 
complete set development documents small example online 

feature interaction detection sect 
outlined functional needs interpreted features 
goal detecting feature interactions building control systems reached identifying dependencies functional needs 
dependencies extracted relations model features instantiation product model 
depending available level information results different precision attained 
subsections different levels information feature interaction detection 
detection requirements level table 
task list building control system task description realizes room occupied control indoor illumination available light sources blind light energy consumption account 
turn light request 
open close blind request 
determine report motion 
determine report current illumination 
avoid glare workplace blind room occupied 
control room temperature radiator 
open close radiator valve request 
determine report current temperature 
early requirements specification process needs tasks model features specified 
interactions level identified employing model features relation 
type relation dependency graph requirements needs tasks attained 
fig 
shows graph depicts dependencies requirements building control example 
graph points interaction identified nodes direct parent 
table needs realized task realized additionally tasks needed fulfilling need leads points interaction identified formalize points interaction basic definitions provided paragraphs 
nn set needs tm set tasks 
needs tasks requirements set requirements consequently defined nn tm rn define predicate ri rj iff requirement ri realized requirement rj obviously predicate transitive holds fig 

definitions define predicate point interaction ti iff exists set nt ni ni nt nj ti ni nt accordingly building control system hold 
algorithmically determine points interaction initialize nt empty set need nt follow relations add nt set nt task ti traversed 
result task ti marked set nt ti computed formula 
approach employs needs tasks level conceived domain method independent 
especially implies traceability relation features needs responsibilities tasks exists specification method language algorithm applied 
example language user requirements notation urn provides necessary means requirements traceability 
knowledge points interaction able systematically determine possible feature interactions dependencies level needs tasks necessarily imply interactions final system 
example task point interaction realizing need simultaneously 
points interaction fig 
possible feature interaction needs possible interaction derived 
detection strategy level point interaction 
dependency graph requirements order refine set possible feature interactions dependencies tasks means strategies examined 
dependency occurs strategies coupled signal types attributes see fig 

observations information 
observation spite possible interaction detected level requirements interaction tasks occur tasks consume resp 
read signals resp 
attributes produced resp 
written task point interaction 
example task small control system 
motion sen sor produces signals consumed interaction 
detection situations carried easily produces consumes resp 
writes reads relations model feature functional strategy model feature signal type resp 
attribute 
mentioned working requirements specification documents 
problems arise actual implementation system considered 
problems communication objects reliable lead unwanted interaction information motion sensor received 
second observation employing strategy information strategies additional interactions originate 
possible developer strategies independent requirements operate set data attribute introducing coupling tasks 
small example situation occur 
elaborate point depending chosen realization strategy number types interactions vary 
especially implies development process enters design phase interactions identified requirements specification phase need re evaluated 
detection object structure level levels information considered list possible interactions refined 
order improve set possible feature interactions interactions occur eliminated 
step goal taken considering aggregation hierarchy control object types 
information provides clues interaction possible control object types implement respective tasks instantiated way dependent tasks point instantiation 
example task implemented control object type depending tasks implemented different control object types respectively 
individually aggregate instance interaction tasks point formalize fact cl set control object types ct control object type implements task ti pc cl set control object types instantiated shortest paths control object type ck cl instance small building control example evaluating pc cl aggregates instantiates relations product model considered 
calculation shortest paths starts control object types aggregation hierarchy point ed determined 
typically requires passing hierarchy root object type reverse direction instantiates aggregates relation 
root reached tree searched downwards fashion forward direction aggregates instantiates relation 
possible paths determined algorithm shortest ones calculated object types shortest paths form required set pc illustrate fig 
shows excerpt instantiation product model example 
instantiation aggregates aggregates instantiates instantiates aggregates aggregates instantiation instantiation instantiation instantiates instantiates 
calculation paths instantiation product model calculation paths starts control object type instantiations control object type exist possible paths identified 
shorter deduced technique determining paths eliminate interactions occur aggregation hierarchy 
modeling guideline method requires control object types implement tasks connected relations instantiated closely possible reduces number signals need routed instances aggregation hierarchy 
tasks directly transitively realized task point interaction need considered 
assume td ti td td set tasks directly realized ti set control object types path object type implement tasks ti implements td pd pct ct pd pd ct interaction tasks td td common object types paths different instantiations object type implements conflicting task 
intersections possible combinations pd computed interactions occur instantiation hierarchy eliminated 
example task td pd pd leads pd pd ct interaction point case sets computed pd pd leads ct pd pd interaction eliminated list possible interactions 
valid point interaction approach level strongly domain method specific static nature strict aggregation hierarchy building structure important prerequisites detection algorithm 
implies application reduction concept possible closely related domains expose similar properties automotive control systems 
considerations sect 
sect 
exercised small building control system refined set interactions deduced contains interaction interaction closer look identified real feature interactions 
detection environment level approach targeted reactive systems environment systems considered 
especially important detection feature interactions physical environment source implicit coupling different parts control system 
fact discovered small building control example 
dependency graph fig 
shows dependencies need temperature control needs lighting control 
exists physical link room temperature amount daylight comes room 
reason sunlight considerably heat space 
interaction needs noted 
systematically determine implicit interactions links physical environment explicit detection process 
development reactive system simulator system environment needed testing dynamic behavior system 
simulator consider physical links simulator models making links explicit making information available detection process 
case building performance simulators testing control systems modelled method 
merging product model instantiation control system product model instantiation simulation achieve combined model instance 
combined model instance employed uncovering feature interactions applying algorithms 
merge product model instances connection points identified 
pointed control object types represent sensors actuators interface environment 
control object types identifying counterparts simulator establishing required connection points 
solution sketched fig 
small control system 
know realized control object type realized assume task simulating blind actuator named ta task simulating temperature sensor named tb assume ta tb realized task tc task identified point interaction 
leads expose interaction physical environment 

results evaluate concepts examine feasibility real development context tool prototypes implemented applied case studies different versions large building control system 
results case studies closer examination code run time complexities tool provided sections 
case studies case study heating lighting control system call floor remainder example 
detailed description system analysis qualitative quantitative development data 
give impression system needs heating illumination provided table 
table 
needs large heating illumination control system excerpt domain need description illumination heating ta environment tc 
dependency introduced physical environment long room occupied chosen light scene maintained 
room minutes chosen light scene re established room minutes default light scene set 
fm daylight achieve desired illumination possible 
fm facility manager turn light room hallway section 
uh comfort temperature shall reached fast possible heating maintained best possible 
uh user manually move sun blind 
manual override holds leaves room longer time period 
solar radiation heating preferred central heating unit 
extension system second example call floor 
extension system obtained adding functionality alarm system 
reflected additional requirements listed table 
tb observe exemplary needs fine grained describe solutions actual requirements 
attributed fact persons role customers specifying system domain experts better expressing solutions actual problems 
illustrate structural complexity floor simplified hierarchy control object types shown fig 

control object types instantiated control objects 
system executing 
summarize floor total number functional requirements needs tasks realized floor functional requirements needs tasks implemented 
detected interactions table 
needs large alarm system excerpt domain need description alarm mot con det tact ua person occupies room activated alarm system deactivate alarm system identifying seconds 
alarm triggered 
ua room unoccupied working hours minutes alarm system activated automatically 
ua alarm triggered lamps corresponding sections turned 
alarm interrupted lamps reset previous state 
fa facility manager switch alarm deactivate alarm system activate alarm system individual room rooms building 
floor section hallway room task light outdoor light hw hw room room blind room door light occ lt occ tm puls con hw mot desk light mot temp rad pid con gen tact door det det sens ctrl tact con dim puls valve mer gen sens 
object structure complex building control system floor application tool prototypes specifications lead results shown table different levels available information cf 
sect 

table 
results feature interaction detection complex building control systems available information floor floor floor floor 
requirements 
strategies signal types 
object structure 
environment typical interactions identified floor requirements level fm fm uh interactions fairly obvious interacting needs describe different aspects common feature consequence fact needs specified fine grained solution oriented 
explains relatively huge number interactions identified 
system extended new feature interactions introduced requirements level 
interactions occurs ua ua fa inside alarm system domain 
additionally interactions needs different domains identified ua interaction occurs need need ua employ means lighting realization 
number interactions identified level level 
attributed fact tool prototypes currently consider additional interactions caused coupling strategy level 
interactions level eliminated point interaction exists just produces signals 
reason sensors system receive special signals change sensor mode polling event communication 
level level number possible interactions reduced number particular points interactions lessened 
example interaction eliminated ua interaction detected levels lighting control object type control object type alarm system aggregate instance contact cf 
fig 

information system environment level additional interactions uncovered 
example interactions occurs fm uh interaction control object type needed realizing temperature control need uh control object type realizes lighting control needs fm 
tool complexities number feature interactions number points interaction tool prototype employed calculations part tool set 
efficiently developed programming language java 
type entity represented java class type relation implemented attributes required accessor mutator methods 
operations product model data relations identifying point interaction easily implemented directly mapping concepts model level java code 
performing case studies tools total number lines code developed 
approximately lines code needed actual interaction detection 
additional lines code required parsing development documents 
remaining code automatically generated uml class diagrams realizes class frames attributes relations product model 
evaluation run time complexity tool supported statistical measurements shows moderate processing power requirements 
example determine feature interactions requirements level see sect 
needs tasks realize need examined 
exemplary evidence number correlate number needs 
implies linear run time complexity attained activity 
concrete example floor actual detection interactions depicted table consumed processing time mhz hp pa risc workstation 

perspectives extension reuse existing systems important activities software development 
correctly carry activities developers need aware interactions exist features 
shown approach detection feature interactions formal model development products 
approach detailed information feature interactions automatically derived existing requirements specification documents stage proposed requirements engineering method 
complete development information refined information interactions 
approach guiding developer way undesirable interactions features avoided 
detail means important step requirements specification process important tasks elicited possible interactions computed developers decide handle undesirable interactions 
time writing approach realized important activities requirements specification method specification needs tasks creation object structure specification communication strategies realize tasks modelling environment 
activity method precise specification behavior strategies extended finite state machines basically finite state machines extended variables control constructs 
extension product model reflect types state machines far refined examination feature interactions feasible 
currently process refining product model purpose followed evaluation possible refinement feature interaction detection approach 
parts funded deutsche forschungsgemeinschaft dfg special collaborative research center sfb development large systems generic methods 
want anonymous referees providing detailed constructive comments contributed improvement 

global relevance total building performance automation construction 

new york amsterdam elsevier science 
metzger 
specifying building automation systems method prototyping reuse object orientation hofmann sch rr eds 
omer object oriented modeling embedded real time systems 
gi edition lecture notes informatics 
bonn verlag 

pp 
ramesh jarke 
models requirements traceability ieee transactions software engineering 

pp 
magill calder eds 
feature interactions telecommunications software systems vi 
amsterdam ios press 
feature description feature interaction analysis case maps lotos sixth international workshop feature interactions telecommunications software systems fiw 
glasgow scotland 
buhr 
case maps architectural entities complex systems ieee transactions software engineering special issue scenario management 

pp 
brinksma 
iso specification language lotos computer networks isdn systems 

pp 
du bousquet 
feature interaction detection testing model checking experience report world congress formal methods 
toulouse france 
calder miller 
spin feature interaction analysis case study dwyer ed 
model checking software th international spin workshop 
toronto canada 

pp 

detecting feature interactions heuristic approach saake eds 
proceedings st fireworks workshop preprint 
fakult informatik university magdeburg 

pp 
van der 
features feature interactions software engineering logic feature interactions composed systems 

pp 
bouma 
description logics feature interaction proceedings international workshop description logics dl 
ernst 
name feature interactions composed systems 
european conference object oriented programming ecoop 
workshop 

pp 
ller coplien feature interaction composed systems eds 
ller coplien 
eds 
feature interactions composed systems 
european conference object oriented programming ecoop 
workshop 

pp 
olsen ller pedersen system engineering sdl 
th edition amsterdam north holland 
metzger 
early prototyping reactive systems generation sdl specifications semi formal development documents proceedings rd sam sdl msc workshop 
wales sdl forum society university wales 
june 
eine requirements engineering methode zur dom entwicklung systeme 
ph thesis 
department computer science 
university kaiserslautern 
kautz prototyping approach evolutionary system development 
berlin heidelberg springer verlag 
metzger 
small building control example 
line development documents 
department computer science 
university kaiserslautern 
informatik uni kl de projects itu 
user requirements notation urn language requirements framework 
recommendation 
geneva telecommunication union study group 
www org urn mahdavi metzger zimmermann 
virtual laboratory building performance control trappl ed 
cybernetics systems 
vol 

vienna austrian society cybernetic studies 

pp 
zimmermann 
efficient creation building performance simulators automatic code generation energy buildings 
elsevier science 
pp 
zimmermann iteration reuse driven domain specific system requirements analysis process 
sfb report 
university kaiserslautern 
brack floor 
line development documents 
department computer science 
university kaiserslautern 
informatik uni kl de projects floor metzger protagonist tools automated software development 
web site 
department computer science 
university kaiserslautern 
informatik uni kl de staff metzger protagonist metzger 
requirements engineering generator prototyping alt becker eds 
software reuse requirements technologies applications 
proceedings international colloquium sfb 
department computer science 
university kaiserslautern 

pp 

