overlay mesh construction interleaved spanning trees anthony young jiang chen zheng ma arvind krishnamurthy department computer science yale university evaluate method interleaved spanning trees compose resilient high performance overlay mesh 
spanning trees arbitrary type construct overlay mesh focus distributed algorithm computes minimum spanning trees arbitrary graph 
principal motivation strategy provide applications redundant high quality mesh suitable demanding applications broadcast video conferencing data collection multi path routing file mirroring transfer 
elaborate details mst pointing advantages potential problem points protocol analyze performance variety metrics simulation functional planetlab implementation 
keywords system design experimentation real networks testbeds 
past years considerable done designing overlay networks optimize enable applications internet 
detour instance improves routing efficiency exchanging congestion information nodes adaptively routing overlay paths correspond better routes 
resilient overlay network ron allows distributed applications perform overlay path selection application specific manner detect path failures recover routing data overlay paths 
high performance streaming media systems enable pair nodes communicate multiple overlay paths simultaneously 
overlay networks emerged powerful method delivering content coordinating multi point communication algorithms 
coopnet streams media employs striping multiple overlay trees enhance performance reliability 
byers propose system performing multipoint transfers richly connected overlays judiciously coordinating delivery subsets data highly distributed concurrent fashion 
cheng address dual problem collecting data hosts carefully scheduling movement data 
performance applications highly dependent ability operate quality overlay paths 
richly connected overlay network comprised high quality virtual paths provides ideal setting applications arvind krishnamurthy supported nsf ccr ani ccr 
randy wang supported nsf ccr ccr 
larry peterson randolph wang department computer science princeton university applications react quickly fluctuating performance application specific path selection coordinate concurrent communication multiple paths 
proposed mesh approach dense graph possible overlay links reduced minimal topology composed trees 
particular focus distributed algorithm compute minimum spanning trees mst edge weights correspond standard performance metrics latency bandwidth loss rate 
mesh constructed initial estimates network properties refined time 
unstructured overlays system multicast view tasks mesh construction routing independent 
standard routing protocol propagate performance characteristics selected links 
primary motivation construct overlay mesh trees ensure existence edge disjoint overlay paths nodes promote fault performance tolerance enable path diversity 
mst includes best links node overlay bound diameter degree network 
possible address additional constraints distributed heuristics discussed sections 
trees important properties simplify aspects mesh maintenance distributed environment 
example addition link creates fundamental cycle removal link fundamental cycle restores tree property edge failure partitions tree components 
properties detected maintained limited local knowledge 
developing prototype overlay network utilizes tree methodology mesh construction focuses architecture primarily discussion analysis tree strategy high performance mesh applications 
interested strategy peer peer file sharing distributed object location settings interested applications requiring resilient high performance data delivery multicast video conferencing data collection multi path routing file transfer 
need applications pressing infrastructure type settings planetlab large corporations overlay networks nodes suffice 
environments large amount data concern ieee ieee infocom ing neighbors link quality available obtainable seek distributed solution efficient rich quantity information 
ii 
background related years extensive done realm overlay network design 
general systems broadly classified categories strategies mesh strategies 
summarize systems relevant study 
tree construction strategies number projects studied strategies building application specific overlay trees particularly multicast applications 
trees constructed directly define implicitly unique communication path pair nodes overlay network 
approaches advantage requiring execution distributed routing algorithm 
almi application level multicast project leverages technique compute minimum spanning tree mst centralized administration point information retrieved inter node probes subsequently programmed network 
yoid overcast technique constructing distribution tree having group members explicitly choose parents known set neighbors 
yoid tree static overcast trees adapt changes link characteristics peer addition removal periodically trying swap local links overlay 
discussion switch tree improvement protocols may 
improves single shared tree overlays randomly inserting shortcut links topology 
effectively reduces diameter network better supports multicast groups nodes participants 
omni considers tier multicasting infrastructure consisting service nodes clients connect service nodes 
system provides algorithms organizing service nodes appropriate overlay structure changing distributions client connectivity 
initial centralized computation followed distributed iterative refinement obtain tree minimizes minimum average latency controls node degree 
nice partitions nodes clusters fixed size elects representative nodes represent cluster repeats process recursively order create hierarchy nodes :10.1.1.16.8178
tree maintenance nodes costs log resulting highly scalable system 
mesh construction strategies mesh strategies construct richly connected graph compute overlay paths source specific multicast trees known distributed routing algorithms 
review existing methods mesh overlay construction summarizing positive negative properties highlighting previous approaches results relevant 
complete graph possible perform overlay routing calculations information describes available network links 
ron project mit evaluating benefits overlay routing atop graph 
results indicate connected overlay provides improved fault tolerance performance observed underlying infrastructure 
routes provided overlay near optimal standpoint minimizing metrics actual execution routing algorithm dense network edges expensive inter server traffic unacceptably large networks small nodes 
random links graph random links strategy simple fully distributed node randomly selects edges inclusion graph resulting global edge count equal approach allows high partition resilience little overhead node detects link failure may select random link pool coordinating peer 
failed node returns network similarly simple rejoin 
random graph probabilistically uniform degree distribution tends promote load balancing multicast networks shallow diameter 
main problem strategy selected links may bad leading routing inefficiencies 
approach choosing random peers seen numerous architectures 
narada example chooses links random initially improves quality mesh incrementally 
best links graph strategy similar random graph node autonomously chooses best links 
pairs nodes independently include selections best links graph composed low weight links 
graph low aggregate weight generally guarantee connectivity exhibit large diameters connected 
especially true real world scenarios planetlab 
short long strategy select links node may choose best short links aware random long links 
strategy provides low weight topology probabilistic connectivity properties 
closely related mst strategy includes best links graph 
connect improve strategies architectures take approach quickly choosing links randomly provide fast joining subsequently rely local improvement improve goodness mesh 
narada protocol example node joins network choosing random peers 
node discovers peers evolves randomly selected edges include links higher utility preventing partitions special mechanism 
initial graph far optimal node continuously run improvement algorithm evolution proceed properly causing relatively slow convergence high bandwidth utilization :10.1.1.16.8178
ieee ieee infocom dht mesh structured overlays distributed hash tables dhts view overlay distributed data structure dictates network topology message routing 
integrated view shown massively scalable requiring log neighbor information guaranteeing log diameter arbitrarily sized networks 
originally developed scalable object location overlays applications traditionally supported unstructured overlays 
address structure systems pastry tapestry provides massive scalability failure redundancy need traditional routing algorithm 
systems designed scalability philosophy focuses primarily routing arbitrary addressing scheme secondarily routing maximize link performance 
consequently systems tend exhibit higher rdp overlay routing latency compared unicast routes provided infrastructure 
locality properties systems currently investigated improved unclear structured overlays support minimization arbitrary application specific metrics provide desired levels path diversity 
iii 
overlays section describe major aspects architecture giving overview system briefly decomposing important aspects system 
overview goals architecture high performance mesh retain best links links low latency high bandwidth low loss rate original dense overlay network 
addition mesh exhibit bounded degree diameter 
multiple paths configurable number multiple paths guaranteed network improve real time performance event failure tolerate fluctuations network performance enable application specific allow concurrent network resources 
exploit network information information available startup lifespan overlay fully utilized maximize efficiency network quickly possible 
self organizing seek fully distributed solution allows incremental peer addition unexpected peer failure topological uncertainties 
take novel mesh approach computing subgraph known links composed spanning trees 
tree network composed manner contains kn edges able provide overlay paths pair nodes 
possible compose network spanning trees arbitrary type focus primarily method minimum spanning trees associating cost metric communication links pairs nodes 
mst strategy bears striking resemblance best known approximation algorithm finding connected minimum weight subgraph known np hard problem 
resulting mesh partially satisfies design goals providing multi connectivity best links overlay network 
take advantage extant foundation research devoted distributed computation minimum spanning trees gallagher 
build developing algorithm computes minimum spanning trees concurrent distributed fashion 
criticized minimum spanning tree algorithms internet contexts valid reasons criticism msts require large amount information compute order find mst graph edges information required 
complete graph value 
possible reduce amount information considered algorithm binning feeding small percentage random links algorithm 
compute true mst results indicate quality tree suffer incomplete information 
criticism msts recomputed event node addition order address problem developed multi hop tree improvement protocol restore suboptimal mst mst 
criticism msts bound degree diameter subject hotspots long latency true possible add greedy degree bound diameter heuristics protocol provide constraints 
criticism msts take long time compute high message complexity fastest algorithm distributed mst algorithm produces solution log time maximum node degree input graph diameter constructed tree 
diameter heuristic enforced initial mst computed log connectivity information node resulting spanning tree computed log time 
message complexity algorithm log number edges input graph 
limiting message complexity lowered log 
log convergence log message complexity sparse graphs system viable wide range applications 
observe convergence messages complete graphs may considered expensive circumstances high performance infrastructure applications mesh perform acceptably mst approach typically faster consumes fewer messages random improve strategies take considerable time bandwidth converge similar goodness metric 
discussed 
criticism mst protocols complex comparison network protocols mst algorithms complex 
implemented correctly implementation performs real world scenarios planetlab 
ieee ieee infocom mst background msts computed greedy fashion 
mst represent edges minimum weight spanning tree graph graph connected mst correspond forest disconnected components 
furthermore mst refer subgraph obtained removing edges mst 
compute null fj mst gj fj gj gj fj simply th mst composite graph minimum spanning tree initial graph excluding edges previously computed msts 
algorithm outputs subgraph fk comprised minimum spanning trees 
motivation pruning original graph mst fold 
mst provides approximation best known theoretical algorithms graph pruning 
second mst approach extends previous efforts employ centrally computed minimum spanning trees streaming applications 
third mst sub graph number desirable properties facilitate task mesh maintenance distributed setting 
examine considerations 
related graph theoretic results techniques interleaved spanning trees compute constrained connected subgraphs explored previous literature 
algorithm lowest known approximation factor connected minimum weight subgraph problem khuller vishkin uses graph algorithm developed gabow 
approximation algorithm works follows 
takes undirected graph forms directed graph undirected edge replaced anti parallel directed edges weight 
polynomial time algorithm discovered gabow find edge disjoint directed trees smallest cumulative weight 
directed edges picked gabow algorithm corresponding undirected edge included pruned subgraph 
shown pruned subgraph connected approximation minimum weight connected subgraph resulting subgraph edges 
related approach algorithm tarjan find disjoint spanning trees minimum total weight undirected graph 
spanning trees accumulate generate connected subgraph 
approach differs previous performs computation undirected graph yields edges 
consequently result subgraph edges khuller vishkin strategy 
algorithms exhibit limited concurrency lend distributed computation factor diameter degree 
similarity mst interesting point 
fact empirically observed mst algorithm executed degree diameter constraints computes solutions closely approximates solutions computed tarjan algorithm various network topologies studied 
related overlay construction strategies closely related includes almi authors demonstrate single mst computed centralized fashion disseminated overlay peers provides multicast tree 
relevant done augments multicast tree random shortcut links improve latency performance reducing network diameter 
augmenting initial structure sparse links augment complete trees provide shortcuts increasing global redundancy 
mst properties briefly note properties subgraphs computed mst algorithm executed degree diameter constraints 
properties hold approximate manner degree diameter constraints imposed provide insight number interesting properties useful maintaining mesh 
properties proved simple graph theoretic refutation arguments omitted brevity 
property mst includes best links node graph 
property edge belonging tree fj 
connect sets nodes fj 
cost rises dramatically due fault fluctuating network conditions fj repaired adding minimum weight edge connecting fj 
need consider edges repair fj 
property consider edge fj 
cost associated lowered potentially new information revealed overlay network 
edge maximum cost cycle created fj 
weight minimum weight property fj restored swapping need changes fj 
distributed minimum spanning tree algorithm distributed computation minimum spanning tree solved gallagher 
provide brief review algorithm referred ghs 
please refer thorough discussion ghs 
assume neighbor information comes outof band mechanism probing done start algorithm 
ieee ieee infocom algorithm builds components levels 
start algorithm individual node comprises component size level 
step nodes component elected leader component 
leader uid component level number component identity 
broadcasts initiate message spanning tree edges component start search find minimum weight outgoing edge 
receipt initiate message node probes remaining links order increasing weight identify lowest cost edge leads different component 
node performs probe sending test message containing node best neighbor 
neighbor sends back accept message belongs different component 
belongs component responds reject message 
results search back leader report messages 
leader identifies entire component sends message node adjacent 
receipt message node sends connect message 
connect messages sent ways edge components level merge operation occurs create new component level level endpoints elected leader new component 
connect message sent component higher level sender absorb operation occurs lower level component gets incorporated higher level component 
algorithm terminates just component includes nodes graph connected minimum spanning tree 
ghs message efficient uses log messages optimal 
time complexity log optimal 
subsequently developed faster versions protocol 
distributed mst distributed mst algorithm may considered instances distributed mst algorithm labeled mst mst generate forests fk 
process sorts links feeds non decreasing order weight mst 
edge added creating cycle identified component added 
mst hands mst performs operation edge similarly promoted subsequent instances mst successfully added tree 
unable add edge fk edge tagged manner similar original mst algorithm exclude computations 
mst algorithm computes trees concurrently time single process membership trees 
reason additional state respect mst kept internally additional information appended messages 
component identifier requires additional field denoting mst test message tree test message tree branch tree branch tree fig 

minimum spanning trees computed mst node network 
peers test closest edges 
peer branches edges included mst 
peers test closest neighbors 
interior edges rejected promoted second mst 
second instance mst algorithm tests newly injected edges second tree links edges accepted 
shows completed mst 
subtree associated 
second process maintains store tree link belongs considered 
ghs link belongs categories branch denoting spanning tree edge rejected denoting non outgoing edge basic denoting initial state 
mst algorithm reject messages cause link incremented allowing links processed higher instances mst 
link failed join trees may considered rejected 
start algorithm process network wakes begins searching peers join 
ghs subtrees size mst kn subtrees node constituting trees 
process stores vector specify different components belongs 
particular process execution 
process searches links find lowest weight basic edge best property edge minimum weight outgoing edge consideration process inclusion forest fj 
remote node associated best 
sends test message containing 
node processes message follows wait reject checks subtrees belong component 
process receives reject message link part fj 
increment ieee ieee infocom associated link algorithm attempt join forest 
algorithm failed join link tree may considered rejected 
links rejected early trees available evaluation higher instances algorithm 
edges selected order minimum weight successive instantiation mst receives input edges lowest possible weights 
links graph state branch rejected algorithm complete outputs graph consisting forests 
routing atop trees utilize link state protocol compute robust dynamically adaptive routes constrained mesh 
link state protocol enables quick dissemination network conditions allows flexible application specific path selection 
protocol perlman new improved link state distribution protocol 
link state routing facilitates fault recovery improvement mechanisms describe sections 
peer addition ghs algorithm easily extended allow incremental node addition 
node begins level startup tree constructed node tests absorb 
guarantee optimal placement improvement phase protocol reposition node global mst 
mst algorithms offer similar facility 
fault recovery consider single ghs tree 
node link failure occurs adjacent node independently detects failure performs action failed link parent meaning link points leader child 
link pointing tree leader fails node detects failure designates new leader component consisting children 
failed link points child sends failure message overlay leader component 
leaders components change component identifiers broadcast message tree tell nodes update component identifier roll back rejected edges basic 
leaders receive children broadcast initiate message new search 
case multiple concurrent faults different parts tree failures place merge absorb initiate messages may traverse component concurrently tagged different component identifier 
node receives different initiate level come upstream 
messages accepted initiate messages receives ordering determined simple sequence counter 
initiate messages higher level result merge absorb operations accepted exception 
protocol described rolls ghs back expensive phase nodes test interior edges component 
drawback addressed ways 
message count complexity may avoided disseminating internal node member knowledge describe interior edges probed 
second system roll back rejected edges basic allowing partition repaired possibly sub optimal link 
issue optimizing sub optimal tree addressed improvement phase protocol 
third exploit property described section iii states lowest weight link repair partition fj fj 
event single link failure process discovers fault identify edge fj connects partitions fj notify endpoints shift edge fj fj 
procedure continue link added failure shifts forest point executes repair procedure described 
incremental improvement improvement protocol exploits properties trees restore global optimality peer addition changes link characteristics 
central link state protocol propagate information current conditions spanning tree 
assume overlay currently sub optimal state 
node checks see able improvement local information gathered periodic probes link state propagated network 
locally node picks non branch link adds tree creating fundamental cycle 
links cycle heavier improvement performed swapping link call decrease weight associated change delta 
node performs similar computation non branch edges improvement largest delta improvement link exists tree mst done 
best improvement determined locally peer may execute swap network 
distributed setting careful avoid possible partitions loops may form result disagreement network link state 
shows tree separate processes wish perform improvement time different links shared links cycles created improvement process 
note processes modify link links shared path possible loop partition may occur spanning tree 
protocol execute improvement creating loops partitions works follows 
process sends ieee ieee infocom original tree wants swap 
wants swap 
improvements 
fig 

possible concurrency errors resulting loops partitions 
lock message improvement cycle edges may affected improvement 
sends improve message cycle add improvement link remove bad link parent pointers appropriately 
forwards unlock message reverse direction finalize improvement 
full description protocol scope devised simple ways ensure concurrent improvements take place shared links tree remains survivable state times parent pointers fault recovery mechanism works link node improvement cycle goes 
degree diameter bound heuristics real world topologies possible mst exhibit hot spots suffer high diameter 
possible modify distributed mst algorithms add heuristics approximately limit degree diameter mst 
limit degree example node reject test messages peers degree target reached 
sufficient 
consider may hub node close large number peers 
case nodes test links start algorithm accept requests 
bound degree accept connect messages send special restart message remaining peers notifying respective components restart search round 
subsequent test messages rejected 
note greedy algorithm attempt build spanning tree degree bound np hard problem 
similar methodology may control network diameter 
size denote number nodes component dia denote distance node node farthest component 
component compute size dia values node inside component pair carefully designed broadcast operations 
diameter constraint enforced requiring merge components edge happen dia dia log size size fixed constant greedy approach necessarily compute lowest weight spanning tree diameter bound 
reducing complexity techniques improving performance distributed mst algorithms may applied mst algorithm 
techniques may 
additional method reduce message count time complexity simply node know members component 
may done report initiate phases protocol having nodes report list children root subsequently broadcasts list initiating search phase 
eliminates intra component testing leads rejection reducing message count log expense increasing size report initiate messages 
similar technique employing bloom filters complete lists providing nodes approximate view component membership configurable percentage time node conclude remote peer member component mistakenly reject pre emptive fashion 
high probability final tree connected close optimal result 
bandwidth loss rate metrics designers ron pointed benefits able route multiple metrics latency bandwidth loss rate 
pruning graph metric limit routing algorithm ability optimize important factors take approach computing multiple overlay networks composed trees minimize latency loss rate maximize bandwidth 
allows applications execute concurrently routing atop graph optimized appropriate metric illustrated 
bandwidth intensive applications ideal mesh provides paths bottlenecks physical link layer 
currently extending algorithms incorporate physical topology information information available 
file transfer link state protocol spanning trees protocol video conferencing link state protocol spanning trees protocol bandwidth probe latency probe loss rate probe framework multicast link state protocol spanning trees protocol fig 

interaction mst maintenance routing ieee ieee infocom edge count seconds avg 
bandwidth process kbps seconds fig 

time compute number links various values 
bandwidth consumed mst construction various values data values plotted mst construction completed 
iv 
evaluation section evaluate various aspects mst meshes simulation study planetlab deployment mst overlay network 
mst complexity measurements planetlab evaluate performance mst node deployment algorithm planetlab 
algorithm implemented described section iii 
protocol messages queued nodes handled batched mode second 
traffic measurements include message overhead constructing mesh heartbeat maintenance traffic 
shows global link count function time values near time little parallelism construction different trees 
tree may test edges wait tree reject 
links pipeline higher tree instances successfully execute creating branches rejecting links 
tail curve demonstrates limited concurrency trees waiting lower instances process links interior 
illustrates bandwidth consumption algorithm 
bandwidth utilization mst highest components probing outgoing edges particularly stages interior edges increasingly numerous 
start run sub trees composed small number nodes larger proportion test messages accepted peers 
components form larger trees process test messages result rejection better links correspond nodes part component 
run components span network rejection rate highest particularly network demonstrates large localized pockets 
bumpy pattern corresponds points time large local subtrees formed 
steep portion curve bandwidth increasing trees western eastern europe form 
regions finish testing relatively local links merging decreasing bandwidth utilization temporarily causing hill bandwidth consumption increases inter locality links formed highest phases algorithm nodes test peers connected 
continue analysis mst bandwidth utilization section simulations larger executions 
mst complexity measurements simulation order study general trends mst networks various sizes executed mst simulation topologies 
created internet router information obtained internet mapping project lucent bell laboratories circa november 
map edge nodes chosen pair wise distance measured terms hop count cost metric compute subgraph actual latency data unavailable discussed 
topology transit stub network produced georgia tech gt itm topology generator generated node network chose nodes random perform experiments 
topologies fewer nodes needed required set nodes chosen randomly node pools 
practice input meshes mst sparse experiments fully connected graphs give worst case measures convergence communication 
recall message complexity optimal implementation mst log fully connected graph term reason interested primarily time number messages required trees formed mesh connected usable complexity required algorithm exhaust internal edges phase 
bandwidth algorithm dealt reducing number edges considered algorithm 
simulation count indicates time required perform send receive operation internal action 
example time process may wake send message receive time 
broadcasts take diameter time 
ieee ieee infocom time message count network size time network size time network size fig 

time compute msts router topology transit stub topology transit stub topology group member knowledge 
network size message count network size message count network size fig 

messages required compute msts router topology transit stub topology transit stub topology group member knowledge 
executed mst internet mapping project router topology network sizes nodes values varying 
topology protocol performed surprisingly demonstrating fast tree building networks sizes showing constant changes time various ks 
linear increase bandwidth number nodes network increased best possible case indicates interior nodes tested level algorithm 
transit stub topology observed worse behavior 
number nodes increased time required compute trees increased steeply previous topology time required compute trees roughly times required perform similar execution internet mapping project topology 
furthermore number messages required perform distributed computation increased quadratically node count 
transit stub graph exhibits localization previous topology causing increase intra component testing pushing complexity creating mesh close worst case 
order reduce worst case complexity mst algorithms reduce edge count choosing subset links disseminate group membership information 
approach automatically forces message size complexity algorithm sparse graphs reduces message count complexity log 
peers know edges interior need test 
despite seemingly expensive nature strategy practical setting adds minimal overhead 
network tree peer joins peer merge absorb operation affected edges exchange membership information broadcast new member updates rest sub component requiring membership information traverse link 
consider node network peer byte address total kb information sent node run mst amortized duration execution 
simulation test effectiveness group membership dissemination poorly performing transit stub topology 
need test interior edges method algorithm extremely fast requiring steps node tree versus steps optimization 
note message count produced enhanced group knowledge order magnitude message count internet mapping project graph 
mst performance results simulation evaluated quality mst mesh simulation 
compared average cost redundant edge disjoint shortest paths meshes generated different mesh construction strategies 
evaluated quality computed paths incomplete knowledge regarding edge costs situation arise wants minimize probing costs lower time required compute trees 
situations mst simply computes msts sparse graph 
plots average shortest path hop count edge disjoint shortest paths pruning strategies varying number mesh edges 
experiments performed router topology internet mapping project 
plots correspond hop counts ieee ieee infocom average latency number hops random short long mst complete graph number edges average latency number hops number edges random short long mst complete average latency number hops number edges random short long mst complete fig 

average hop count edge disjoint shortest paths different levels information router level topology internet mapping project 
edge weights original graph known 
node knows edge weights nodes system 
node knows edge weights nodes including closest neighbors 
average latency random short long mst complete graph number edges average latency random short long mst complete number edges average latency random short long mst complete number edges fig 

average latency edge disjoint shortest paths different levels information topology gt itm 
edge weights original graph known 
node knows edge weights nodes system 
node knows edge weights nodes including closest neighbors 
complete edge information node knows edges lastly node knows edges closest neighbors 
cases mst demonstrates lower hop count strategies performing expected 
run similar test gt itm topology 
topology mst performs random strategy performs poorly 
simulation experiments transit stub graph demonstrates large amount localization groups nodes relatively dense areas quite distant similar groups 
choosing random links scenario ignores locality property picking random neighbors startup fast may provide adequate performance demanding applications 
mst performance results planetlab latency measurements extended testing practical environment node planetlab network 
round trip latency edge disjoint shortest paths computed meshes various edge counts 
results obtained similar gt itm topology mst performing better strategies shown 
mesh improvement choosing random links generally produces poor quality mesh means improved considerably reasonably quality 
illustrate run narada improvement simulation atop random mst graphs plot average latency shortest average round trip latency ms random short long mst complete graph number edges fig 

round trip latency edge disjoint shortest paths varying edge counts 
paths changes time 
mesh apply incremental improvements having node periodically probe random non neighbor add corresponding link resulting improvement shortest paths threshold 
random mesh improvement algorithm periodically drops low utility links preventing partitions heuristic mechanisms proposed narada 
mst mesh improvement algorithm drops low utility link immediately adding high utility link link dropped chosen fundamental cycle created newly added link ability detect cycle unique mst 
time mst mesh close ieee ieee infocom average latency number steps random mst complete graph fig 

narada improvement strategy performed random mst graphs 
optimal random mesh go improvement cycles mesh quality similar mst 
course order compute mst place upfront expense mst algorithms incurred 
narada probes require transfer routing tables values improvement strategy expensive time consuming mst computation 
narada improvement algorithm ensure mesh refined 
pair nodes edge disjoint paths random mesh experiments indicate fewer redundant paths remain improvement cycles 
mst mesh hand composed trees ensuring existence edge disjoint overlay paths nodes 
loss rate measurements evaluated quality mst mesh transmitting data streams overlay paths 
observed loss rates periodic planetlab probes link weight metric order compute mst 
transferred constant bit rate data stream mbps distinct overlay paths pair nodes monitored packet loss 
compares different mesh construction strategies calculating cumulative distribution function loss rates associated overlay paths 
mst overlay paths exhibited significantly lower loss rates pruning schemes loss rates lower paths 
improvement considered substantial streaming applications 
application performance benchmark application implemented multicast file mirroring utility reliably send megabytes files overlay node edges degree constrained multicast trees computed atop meshes built bandwidth cost metric 
transfer protocol child computes shortest path link state information file source periodically requests advertised file available parent 
file available child transfers tcp immediately fraction total paths complete graph mst short long random packet loss rate fig 

cumulative distribution function loss rates overlay paths 
writes packet disk available children 
methodology real time multicast transfer scheme gives insight efficiency system illustrating ability delegate transfer load network 
average data rates shown strategies surprisingly high constrained mst topology complete graph producing trees sustained megabits second bulk transfer 
pipelined tcp transfer method employed allow substantial transfer concurrency 
trees computed mst complete graph megabytes transferred geographically dispersed nodes minutes total transfer gigabytes 
tree computed atop random graph finished transfers minutes remaining nodes took minutes synchronize 
proposed interleaved spanning trees compose overlay mesh 
focus specifically strategy minimum spanning trees mesh construction evaluate methodology simulation working implementation run atop planetlab 
results show mst mesh demonstrates characteristics including low weight path diversity despite sparseness graph networks nodes 
planetlab implementation prototype demonstrated reasonable bandwidth utilization construction low data streams high performance realistic multicast file transfer scenario 
initial expenditure construct high quality network seen terms message count time complexity cost modest compared cost required random improve strategies converge similar result 
preliminary results promising investigating behavior spanning tree networks medium scale realworld applications 
ieee ieee infocom average data rate kbps complete graph mst random seconds completed mb transfers complete graph mst random seconds fig 

results file mirroring application 
plot average data transfer rate vs time 
time required complete data transfer nodes 
stefan savage andy collins eric hoffman john snell thomas anderson effects internet path selection sigcomm pp 

david andersen hari balakrishnan frans kaashoek robert morris resilient overlay networks proceedings sosp pp 

nguyen zakhor path diversity forward error correction pdf system packet switched networks proceedings ieee infocom 
wong tan wee multiple description streaming content delivery networks proceedings ieee infocom 
yang hua chu sanjay rao hui zhang case system multicast proceedings sigmetrics 
john jannotti david gifford kirk johnson frans kaashoek james toole jr overcast reliable multicasting overlay network proceedings osdi pp 

zhuang zhao joseph katz kubiatowicz bayeux architecture scalable fault tolerant wide area data dissemination proceedings nossdav 
ratnasamy handley karp shenker application level multicast content addressable networks proceedings ngc 
banerjee christopher kar bobby bhattacharjee samir khuller construction efficient overlay multicast infrastructure real time applications infocom 
padmanabhan wang chou sripanidkulchai distributing streaming media content cooperative networking proceedings nossdav 
john byers jeffrey considine michael mitzenmacher rost informed content delivery adaptive overlay networks proceedings acm sigcomm 
cheng chou khuller wan largescale data collection coordinated approach proceedings ieee infocom 
dimitris shi dinesh verma marcel waldvogel almi application level multicast infrastructure proceedings usits 
paul francis yoid extending internet multicast architecture 
zhang sugih jamin lixia zhang host multicast framework delivering multicast users infocom 
david sugih jamin host multicast communication switch trees protocols global peer peer computing large scale distributed systems 
wang david sugih jamin lixia zhang overlay optimizations host multicast proceedings fourth international workshop networked group communication 
banerjee bobby bhattacharjee christopher scalable application layer multicast proceedings acm sig comm :10.1.1.16.8178
ion stoica robert morris david karger frans kaashoek hari balakrishnan chord scalable peer peer lookup service internet applications proceedings sigcomm 
sylvia ratnasamy paul francis mark handley richard karp scott shenker scalable content addressable network proceedings acm sigcomm 
zhao huang stribling rhea joseph kubiatowicz tapestry resilient global scale overlay service deployment ieee journal selected areas communications 
rowstron druschel pastry scalable distributed object location routing large scale peer peer systems international conference distributed systems platforms 
castro druschel 
kermarrec rowstron scribe large scale decentralized application level multicast infrastructure ieee journal selected areas communications 
castro druschel hu rowstron topology aware routing structured peer peer overlay networks 
keleher bhattacharjee virtualized overlay networks thing 
jain mahajan david wetherall study performance potential dht overlays proc 
usits 
samir khuller vishkin approximations graph proceedings acm stoc 
robert gallager pierre distributed algorithm minimum weight spanning trees acm toplas vol pp 
january 
sylvia ratnasamy mark handley richard karp scott shenker topologically aware overlay construction server selection proc 
ieee infocom 
singh arthur bernstein highly asynchronous minimum spanning tree protocol distributed computing vol 

gabow matroid approach finding edge connectivity packing arborescences computer system sciences 
james robert tarjan note finding minimum cost edge disjoint spanning trees mathematics operations research vol 
pp 
november 
awerbuch optimal distributed algorithms minimum weight spanning tree counting leader election related problems proceedings stoc pp 

nancy lynch distributed algorithms morgan kaufmann publishers 
perlman interconnections bridges routers addison wesley longman publishing 
faloutsos mart molle features really distributed algorithms efficient international conference parallel distributed systems 
ramesh govindan tangmunarunkit heuristics internet map discovery proc ieee infocom 
tangmunarunkit ramesh govindan sugih jamin scott shenker walter willinger network topology generators degree vs structural proceedings acm sigcomm 
ieee ieee infocom 
