adaptive filters continuous queries distributed data streams chris olston jing jiang jennifer widom stanford university olston widom cs stanford edu consider environment distributed data sources continuously stream updates centralized processor monitors continuous queries distributed data 
significant communication overhead incurred presence rapid update streams propose new technique reducing overhead 
users register continuous queries precision requirements central stream processor installs filters remote data sources 
filters adapt changing conditions minimize stream rates guaranteeing continuous queries receive updates necessary provide answers adequate precision times 
approach enables applications trade precision communication overhead fine granularity individually adjusting precision constraints continuous queries streams multi query workload 
experiments performed synthetic data simulations real network monitoring implementation demonstrate effectiveness approach achieving low communication overhead compared alternate approaches 
query processing continuous data streams received considerable attention ccc mf 
consider distributed environments remote data sources continuously push updates central stream processor job evaluate multiple continuous queries streamed data bw lpt mshr 
environments significant communication overhead incurred supported national science foundation iis iis national science foundation graduate research fellowship 
presence rapid update streams 
offer effective method reducing communication cost advantage fact applications require exact precision continuous queries examples discussed shortly 
applications require exact precision data values fluctuate wildly approximate answers sufficient precision usually computed small fraction input streams 
approach users submit quantitative precision constraints continuous queries stream processor stream processor installs filters remote data sources 
filters adapt changing conditions minimize communication cost guaranteeing continuous queries receive updates necessary provide answers adequate precision times 
way users offered fine grained control tradeoff query answer precision communication cost 
imprecision query results bounded numerically applications need deal uncertainty 
stream oriented applications need exact answers require quantitative guarantees regarding precision approximate answers yv 
example consider wireless sensor networks mf pk enable continuous monitoring environmental conditions light temperature sound vibration structural strain mshr :10.1.1.12.4794
battery life miniature sensors severely limited radio usage dominant factor determining battery life mbc pk crucial reduce amount data transmitted small increase local processing sensor required mf 
applications rely sensor data tolerate approximate answers having controlled degree imprecision mbc making approach ideal reducing data transmission 
examples continuous queries distributed data tolerate bounded amount imprecision include industrial process monitoring stock quote services online auctions wide area resource accounting load balancing replicated servers sbs yv 
focus particular application network monitoring give examples continuous queries arise context application motivate 
remainder section provide overview approach 
example application network monitoring managing complex computer networks requires tools things continually report status network elements real time applications traffic engineering reliability billing security dr 
network monitoring applications typically require absolute precision :10.1.1.13.2446
approach reduce monitoring communication overhead distributed network elements central monitoring station providing quantitative precision guarantees approximate answers reported 
real time network monitoring workloads consist set queries perform aggregation distributed network elements dr 
data aggregated commonly selected grouped identifiers source address destination address attributes packet type 
give concrete examples continuous query workloads network monitoring applications 
example network path latencies interest infrastructure applications manual automated traffic engineering quality service qos monitoring 
path latencies computed monitoring queuing latency router path summing current queue latencies known static transmission latencies 
queue latency router generally changes time packet enters leaves router naive approach generate monitoring traffic volume far exceeds volume normal traffic situation clearly unacceptable 
fortunately path latency applications generally tolerate approximate answers bounded absolute numerical error latency ms accuracy approach obtrusive exact monitoring avoided 
example network traffic volumes interest organizations internet service providers isp corporations universities number applications including security billing infrastructure planning 
inconvenient infeasible individual organizations configure routers perform monitoring simple alternative monitor hosts organization 
list traffic monitoring queries performed manner motivate usefulness 
queries form basis performance experiments real network monitoring system implemented see section 
monitor volume remote login telnet ssh ftp requests received hosts organization originate external hosts 
monitor volume incoming traffic received hosts organization 
monitor volume incoming syn packets received hosts organization 
monitor volume outgoing dns lookup requests originating organization 
monitor volume traffic hosts organization external hosts 
queries motivated security considerations 
concern illegitimate remote login attempts occur bursts detected query concern denial service dos attacks 
detect early onset form incoming dos attacks organizations monitor total volume incoming traffic received hosts query form dos attack characterized large volume incoming syn packets consume local resources hosts organization monitored query organizations may wish detect suspicious behavior originating inside organization users launching dos attacks may entail sending unusually large number dns lookup requests detectable query examples current results continuous query compared data previously monitored similar times day calendar periods represents typical behavior detection atypical unexpected behavior followed detailed costly investigation data 
organizations monitor traffic volume organization query help plan infrastructure upgrades track cost network usage service provider 
traffic monitoring performed carefully queries may disruptive communication infrastructure organization 
fortunately applications require exact precision query answers long precision bounded prespecified amount 
note precision requirements may change time 
example periods heightened suspicion dos attacks organization may wish obtain higher precision queries cost increased communication overhead 
overview approach focus continuous queries network monitoring examples 
queries compute aggregate values streams updates numeric real data objects may originate remote data sources 
conventional answer aggregation query single real value 
define bounded approximate answer bounded answer pair real values define interval precise answer guaranteed lie 
precision quantified width range corresponding exact precision representing unbounded imprecision 
precision constraint continuous query user specified constant denoting maximum acceptable interval width answer times 
goal provide guaranteed bounds answers continuous queries times filtering update streams sources possible 
remote data object updates sent central stream processor continuous query evaluation stream filter installed source 
filter maintains numeric bound lo ho width wo centered numeric update new value passed filter lo wo ho wo filter eliminates stream updates lie inside bound satisfy lo ho time update passes filter transmitted central processor filter bound setting lo wo ho wo central stream processor knows object bound width wo uses maintain cached copy bound ho filtered updates received source 
stream processor assured source master value remains bound update received 
message latency addressed section 
continuous queries registered stream processor relevant update received input stream query results updated accordingly 
continuous query cq associated precision constraint assume number arbitrary cq arbitrary individual precision constraints 
challenge ensure times bounded answer continuous query adequate precision width filtering streams possible minimize total communication cost 
simple example consider single cq requesting current average data values update streams transmitted different sources precision constraint 
show width answer bound average widths individual bounds 
obvious way guarantee precision constraint filters bound width objects 
simple policy call uniform allocation correct answer bound guaranteed satisfy precision constraint times generally best policy 
see important understand effects update filter bound width 
effects filter bound width filter bound narrow small enables continuous queries maintain precise answers fail filter significant portion update stream leading high communication cost 
conversely bound wide large reduce stream rate substantially due restrictive filter consequently results imprecision query answers 
uniform allocation perform poorly reasons 
multiple continuous queries issued overlapping sets objects different bound widths may assigned object 
simply choose smallest bound width filter higher update stream rate may wasted queries 

uniform bound allocation account data values change different rates due different rates magnitudes updates 
case prefer allocate wider bounds data values change rapidly narrower bounds rest 
performance experiments section compare uniform nonuniform bound allocation policies provide strong empirical confirmation observations 
reason indicates nonuniform bound width allocation policy depends heavily data update rates magnitudes vary time especially long lifespan continuous queries mshr :10.1.1.12.4794
example section router may alternate periods rapidly fluctuating queue sizes queue latencies steady state behavior depending packet arrival characteristics 
addition nonuniformity propose adaptive policy bound widths adjusted continually match current conditions 
determining best bound width allocation point time incurring excessive communication overhead challenging require single site continual knowledge data update rates magnitudes potentially hundreds distributed sources 
problem complicated reason may continuous queries different precision constraints involving overlapping sets data objects 
example section multiple paths latencies monitored generally disjoint may share routers precision constraints may differ due differences path lengths number routers discrepancies user precision requirements different paths 
evaluator cq answers bounded periodic shrinking periodic shrinking periodic shrinking periodic shrinking periodic periodic growth messages filtered update precision constraints 
growing selective periodic shrinking updates filtered update stream stream coordinator stream processor queries updates updates sources data filters updates streams queries register precision manager bound cache updates adjust width 
updates approach stream filtering continuous queries 
adaptive bound width adjustment developed low overhead algorithm setting bound widths stream filters adaptively reduce communication costs guaranteeing meet precision constraints arbitrary set registered cq 
basic idea follows 
source filter object update stream shrinks bound width periodically predefined rate 
assuming bounds state cq precision constraints satisfied guarantee case shrinking bounds improves precision precision constraint violated due shrinking 
central stream processor maintains mirrored copy periodically shrinking bound width object 
time bound width object shrinks stream processor leftover width objects central processor benefits ensuring precision constraints remain satisfied 
approach approach illustrated data sources right store master values objects generate streams updates values 
filters intercept update streams sources maintain periodically shrinking bounds objects 
filter forwards updates fall outside bound central stream processor shown left bound 
stream coordinator central stream processor receives streamed updates filters 
precision manager inside stream coordinator maintains copy periodically shrinking bound width object 
width described earlier notifies corresponding sources growth messages 
bound cache inside stream coordinator receives bound width changes growth shrinks precision manager value updates streamed data sources filters 
bound cache maintains copy bound object 
cq evaluator central stream processor receives updates bounds bound cache provides updated continuous query answer bounds user 
aspects approach key achieving low communication cost 
width shrinking performed simultaneously stream processor sources explicit coordination 
second precision manager uses selective growth tune width allocation adaptively 
informally minimize cost guarantee individual precision constraints arbitrary overlapping cq assigning widest bounds data values currently updated rapidly involved fewest queries largest precision constraints 
addition approach specific contributions follows section specify core approach low overhead adaptive algorithm assigning filters data sources reduce update stream rates 
guarantee adequate precision multiple overlapping cq minimizing communication precision manager uses optimization technique systems linear equations 
section describe mechanisms bound cache handle replica consistency issues arise due nonnegligible stream message latencies 
section describe implementation real network traffic monitoring system example section 
provide experimental evidence approach significantly reduces communication cost compared uniform allocation policy workload multiple continuous queries precision constraints 
related idea numeric bounds queries precision constraints offer smooth tradeoff precision performance distributed data processing environments introduced originally ow 
addressed time continuous queries resulting different approach 
specifically ow developed algorithms optimally combining approximate cached data exact source data meet precision requirement single query single time 
follow proposed technique adjusting cached approximations minimize communication cost workload time queries ow 
precision level data object adjusted isolation independent precision levels objects 
ow exploit property time queries answer precision improved acceptable levels accessing remote sources query time 
contrast focus applications require continuous answers queries 
applications answer adequate precision continuous query maintained central stream processor times 
quasi copies centrally maintained approximations permitted deviate exact source values constrained amounts providing precision guarantees 
sbs extends ideas proposing architecture network repositories cooperate deliver data precision guarantees large population remote users 
environment multiple cooperating repositories data may propagated nodes ultimately reaching user application latency significant concern 
sbs focuses selecting topologies policies cooperating repositories minimize degree latency causes precision guarantees violated 
sbs address queries multiple data values answer precision function precision input values need deal optimization problem address minimizing communication 
reactive network monitoring dr addresses scenarios users wish notified sum set values distributed sources exceeds prespecified critical value 
solution source notifies central processor value exceeds certain threshold fixed constant value increases linearly time 
local thresholds set guarantee absence notifications central processor knows sum source values critical value 
thresholds dr related bounds algorithm set uniformly sources 
similarly yv focuses bounded approximate values symmetric replication error bounds allocated uniformly sites perform updates 
contrast approaches propose technique bound widths allocated nonuniformly adjusted adaptively stream transmission costs data change rates 
maintaining numeric bounds aggregated values multiple sources thought ensuring continual validity distributed constraints 
distributed constraint checking bbc gw considers insertions deletions sets updates data values 
aware proposals sources communicate verify numerical consistency constraints sources containing changing values data value partitioning ss demarcation protocol bgm yamashita yam 
approach proposals principle applied setting sources bound widths peer peer manner goal reducing stream rates 
scenarios may impractical sources keep track sources involved continuous query continuous queries communicate directly practical may necessary contact multiple peers finding adequate spare bound width share 
overhead communication warranted potentially save single stream message 
furthermore algorithms bgm ss yam designed purpose minimizing communication cost accommodate multiple queries overlapping query sets 
real time databases focuses scheduling multiple complex time consuming computation tasks yield imprecise results improve time 
contrast focus best schedule computations filter data update streams distributed environment bounding resulting imprecision 
ow addresses problem maximizing data precision subject constraints availability communication resources 
considers inverse problem address minimizing communication meeting constraints data precision 
choice complementary approaches appropriate scenario depends characteristics environment application 
interesting topic consider policies automatically choosing switching approaches possibly source granularity 
algorithm description section provide details approach describe algorithm adjusting stream filter bound widths adaptively focus precision manager core approach 
recall goal minimize communication cost satisfying precision constraints queries times 
consider continuous queries operate fixed subset remote data values 
consider selection predicates remote values ow assume insertions deletions new objects data set propagated immediately central stream processor special streams 
queries perform standard relational aggregation functions count min max sum avg 
count computed exactly setting sum computed avg count min max symmetric 
turns show appendix purposes bound width setting min queries treated collection avg queries 
point forward discuss primarily avg function 
note queries request value individual data object posing avg query single object 
flexibility allow objects weighted sum avg queries formalized appendix registered continuous query specifies query set objects precision constraint 
users may alter precision constraint currently registered continuous query see section query set subset set data objects 
data object exact value stored remote source streams updates filtering central stream processor 
say registered continuous avg queries 
qm query sets 
sm respectively 
exact answer avg query goal able compute approximate answer continuously precision constraint cached bounds maintained central stream processor 
note goal handles sliding window queries queries data symbol meaning number data objects sources data object 
exact source value object bound object width bound object update growth msg 
communication cost communication cost stream message latency tolerance number registered continuous queries registered query 
set objects queried precision constraint query adjustment period algorithm parameter shrink percentage algorithm parameter streamed update period time units burden score computed time units burden target computed time units deviation determines growth priority table model algorithm symbols 
values 
aggregation functions consider aggregate value continuously computed meet certain precision constraint result aggregating time type window meets precision constraint 
algorithm necessarily minimize cost sliding window queries sliding windows offer way precision bounds set bounds wider acceptable long compensated bounds narrower time averaged window 
algorithm need modified take advantage additional precision topic 
assume messages including update streams transmitted instantaneously computation instantaneous 
section discuss handle realistic non negligible latencies 
precision manager sends bound growth message object source update transmitted data stream source stream processor recall model cost known numerical constant 
considering possibility batching stream updates source topic 
convenience symbols introduced introduce section summarized table 
presenting general adaptive algorithm adjusting bound widths describe simple cases bound width certain objects remain fixed 
consider object involved queries request bound value avg queries value 
suffices fix bound width smallest precision constraints wo min queries 
second objects included currently registered query bound width fixed updates filtered update stream transmitted central stream processor 
remainder objects involved query multiple objects pose real challenge 
guarantee precision constraints met constraint hold query words sum bound widths query exceed product precision constraint number objects queried 
initially bounds set way meets precision constraint query performing uniform allocation query objects assigned multiple bound widths minimum 
discussed section general strategy reallocate bound width adaptively objects participating query 
reallocation accomplished low communication overhead having bounds shrink periodically time having stream processor precision manager periodically select bounds grow current conditions 
section describe exact way bounds shrunk algorithm section describe bounds grown 
section provide empirical validation algorithm converges bounds 
bound shrinking object corresponding bound width maintained simultaneously central stream coordinator source filter 
periodically time units seconds example bound width decreased symmetrically source filter stream coordinator setting 
constant global parameter called adjustment period global parameter called shrink percentage 
effect decrease bound width fraction time unit rendering update stream filter restrictive time 
filter restrictive blocks updates streamed 
adjustments bound width decreases increases occur intervals time units 
note updates may streamed central stream processor time simply reposition bounds altering width 
discuss settings algorithm parameters section 
ensure correctness time bound width object shrinks changing filter condition source re apply filter current data value passes new filter streamed update source generate update stream 
bound growing time units bound widths shrink automatically described previous section precision manager selects certain bound widths grow making corresponding stream filters restrictive 
selecting bounds increase intricate parts approach 
step assign numerical burden score queried object conceptually burden score embodies degree object contributing communication cost due streamed updates 
streamed updates refer data updates pass filter sent stream processor 
burden score computed recall cost send streamed update object current bound width 
estimated streamed update period previous width adjustment action computed number updates received stream coordinator time units 

burden formula fairly intuitive wide bound long streamed update period reduces exact mathematical derivation appendix object streamed update period burden score computed second step assign value called burden target avg query conceptually burden target query represents lowest burden required objects query order meet precision constraint times 
understanding way compute burden targets involved method section summarize process 
queries objects involved queries burden target set equal average burden scores objects participating query 
queries overlap turns assigning burden targets requires solving system equations 
tm unknown quantities 
solving system equations exactly run time expensive find approximate solution running iterative linear equation solver converges small error 
performance evaluated section burden target assigned query third step compute object deviation max deviation indicates degree object respect burden targets queries access 
achieve low stream rates desirable equally distribute burden objects involved query 
justify claim mathematically appendix verify empirically sections 
see burden recall burden score object bound increase size decrease 
burden score object reduced growing bound 
growth allocated bounds greedy strategy 
queried objects considered decreasing order deviation objects considered 
important ties resolved randomly prevent objects having deviation notably repeatedly considered order 
object considered maximum possible amount bound grown violating precision constraint query computed min ok action taken 
nonzero growth value precision manager increases width bound symmetrically setting growth allocated precision manager sends message source having objects bound width selected growth 
summary procedure determining bound width growth follows 
object assigned burden score stream transmission cost estimated streamed update period current bound width 

query assigned burden target averaging burden scores invoking iterative linear solver described section 

object assigned deviation value difference burden score burden targets queries access 

objects considered order decreasing deviation object assigned maximum possible bound growth considered 
complexity scalability approach discussed section 
reasoning relies decreasing increases fact holds intuitively discussed appendix burden target computation describe compute burden target query burden score object step 
recall conceptually burden target query represents lowest burden required objects query order meet precision constraint times 
motivation consider special case involving single avg query object 
scenario goal adjusting burden scores simplifies equalizing shown mathematically appendix bn set burden scores may equal simple way guess appropriate burden target take average current burden scores sk sk way objects having higher average burden scores high priority growth lower burden scores having lower average burden scores shrink default raising burden scores 
subsequent iterations burden target adjusted new average burden score 
process results convergence burden scores 
generalize case multiple queries different sets objects 
useful think burden score object involved multiple queries divided components corresponding query object 
represent portion object burden score corresponding query goal adjusting burden scores presence overlapping queries burden score object equal sum burden targets queries shown appendix 
goal achieved query goal restated terms values requiring query values objects irrelevant 
set values simple way guess appropriate burden target query average values objects involved object query pair express terms known values queries unknown sk replace occurrence want converge sk substituting expression formula guessing burden targets values arrive expression sk data query data query number queries fraction processing time scalability linear system solver 
result system equations 
tm unknown quantities solved linear solver package 
algorithm complexity scalability consider complexity bound growth algorithm executed time units 
steps involve simple computation object objects sorted 
step compute efficiently precision manager continually track difference leftover width query precision constraint current answer bound width 
object precomputed leftover width value query object 
queries overlapping sets objects iterative linear solver required compute burden targets expect dominate computation 
solver represents system equations having 
tm unknown quantities matrix entries correspond pairs queries 
fortunately matrix tends quite sparse query sets queries disjoint corresponding matrix entry 
reason fact tune number iterations burden target computation iterative linear system solver scale 
publicly available iterative solver package called ska alternatives exist 
convergence generally achieved iterations average running time modest workstation milliseconds traffic monitoring implementation multiple overlapping queries section 
test scalability algorithm larger number queries data objects implementation generated sets synthetic workloads consisting avg queries real world host network traffic data set details data set provided section 
treated host simulated data source traffic level object 
set workloads query randomly selected data sources 
second set workloads query data sources resulting higher degree overlap queries 
degree overlap determines density linear equation matrix major factor solver running time 
varying number queries measured average running time linux workstation mhz pentium iii processor 
set error tolerance iterative solver small change effectiveness algorithm detected 
shows fraction available processing time linear solver invoked seconds time units seconds turns setting explain section 
allocating bound growth handle queries data sources requires cpu time stream processor 
validation optimized strategy performed initial validation bound width allocation strategy periodic shrinking selective growing discrete event simulator synthetic data 
goal simulation experiments show algorithm converges best possible bound widths steady state data set 
purpose generated data object simulated source random walk pattern randomly assigned step size compared unrealistic algorithms 
idealized version algorithm messages sent stream coordinator sources instructing grow bounds incur communication cost 
stream transmission costs measured focus bound width choices 
compared stream transmission cost stream transmission cost bound widths set statically optimization problem solver described 
nature random walk data possible simplify problem setting bound widths statically nonlinear optimization problem described appendix nonlinear optimization problems inequality constraints difficult solve exactly approximate solution obtained methods iterative refinement 
package called iterating times tight convergence requirements find static bound width settings close possible optimal 
shows results comparing idealized version adaptive algorithm optimized static allocation continuous avg query data sources uniform costs 
axis shows precision constraint axis shows cost time unit 
second experiment workload avg queries query sets chosen randomly objects 
shows result experiment size query sets filtering optimized static allocation ideal adaptive answer precision precision constraint cost second ideal adaptive algorithm vs optimized static allocation random walk data 
filtering optimized static allocation ideal adaptive answer precision average precision constraint max cost second ideal adaptive algorithm vs optimized static allocation multiple queries 
assigned randomly precision constraint query randomly assigned value max plotted axis 
workloads simulated nonuniform costs results similar cases omit 
results demonstrate adaptive bound width setting algorithm converges bounds par selected optimizer knowledge random walk step sizes 
handling precision constraint adjustments users may time choose alter precision constraint currently running continuous query user increases weaker precision additional bound width allocated automatically bound growth algorithm central precision manager current adjustment period 
user decreases stronger precision bound growth suppressed automatic bound shrinking process reduce answer bound width time requested precision level reached 
immediate improvement answer precision required central precision manager proactively send messages sources requesting explicitly bounds shrunk 
bound cache queues serializing table table timestamped updates updates timestamped timestamped updates bound cache consistent ordered bound updates 
coping latency real implementation approach cope message computation latency 
suppose message including streamed update messages bound growth messages associated transmission latency processing delay sender receiver 
note due latencies bound growth applied sources applied central stream coordinator interim period source filter restrictive 
phenomenon leads chance unnecessary updates transmitted stream processor correctness 
reduce delay growth messages lessen chance unnecessary streamed updates stream coordinator growth allocation process prior adjustment period base computations preliminary streamed update rate estimates 
communication computation latency update streams concern handled naively continuous queries may access consistent data sources leading incorrect answers 
ensure continuous query answers consistent data source filters timestamp updates transmitted stream processor 
assume closely synchronized clocks lam mil 
similarly precision manager timestamps bound width updates adjustment period boundary 
value width updates converted bound updates bound cache recall 
bound updates associated timestamps discuss assigned shortly cq evaluator treats bound update timestamps logical update times purposes query processing 
correctness guaranteed cq evaluator receives bound updates monotonically timestamp order case produces new output value unique timestamp receives part update 
multiple updates timestamp query evaluator treats single atomic transaction produces new output value update timestamp 
ensure cq evaluator receives bound updates represent consistent state arrive timestamp order bound cache central stream coordinator implemented combination serializing queues described shortly symmetric hash join wa non blocking join operator illustrated :10.1.1.56.701
join operator combines value updates width updates produce bound updates mirror bounds maintained source filters object identifier equality join condition 
hash table stores value width update object timestamp join result assigned timestamp equal timestamp input generated result 
join inputs arrive timestamp order ensure correct behavior 
way guarantee global timestamp ordering update streams delay processing update received particular stream update greater timestamp received streams lam 
approach impractical setting result unbounded delays additional communication performed delays tend longer number update streams large 
take approach similar taken field streaming media handle unordered packets variable latency see mkt relies reasonable latency upper bound 
approach serializing queues positioned value width update streams join 
effect serializing queue order updates timestamp release update soon current time reaches timestamp latency tolerance upper bound latency streamed update message holds high probability determined empirically networking environment 
long update messages obey latency tolerance appropriate queue scheduling assured serializing queues output join monotonic stream updates ordered timestamp 
course practice occasional messages may delayed resulting temporary violations precision guarantees unavoidable effect distributed environment unbounded delays 
larger values reduce likelihood update messages arrive late increase delay results released user 
section show reasonable choice late update messages rare 
exploiting constrained change rates applications certain data objects may known maximum change rates bounds change rate hold high probability 
data object participating continuous query maximum change rate approximate answer bounds answer time local processing delay central stream processor time provided having stream coordinator pad bounds account changes serializing queues built delay discussed 
padding performed adding symmetrically width updated bound produced join 
technique employed reduced precision constraint purposes bound width allocation adjustment ensure padded answer bounds meet original precision constraint value depends amount padding type query 
example avg queries set sq sq implementation experimental validation evaluated performance technique practical applicability building real network traffic monitoring system 
system currently runs continuous queries hosts research group network example section 
implementation special monitoring program executes host 
captures network traffic activity tcpdump utility computes packet rate measurements needed queries workload representing timevarying numerical data objects 
time units second matches granularity tcpdump monitor able capture data 
host acts data source cases objects updates correspond minute moving window packet rate measurements 
queries example section different experiments different objects 
example query uses object sources hosts windowed traffic volume host external hosts 
data object assigned bound width update filtering source 
bounds cached central monitoring station updates aggregated answers continuous queries bound widths shrink grow data updates stream 
communication cost streamed update growth message object modeled uniform unit cost 
step experimentation determine settings algorithm parameters adjustment period shrink percentage 
experimented real world network traffic data set simulator uniform nonuniform costs live data network monitoring implementation settings worked general time units achieve low growth message overhead relative timescale data changes allow adaptivity avoiding erratic bound width adjustments tend degrade performance 
determined algorithm highly sensitive exact parameter settings 
setting adjusting param filtering uniform allocation adaptive answer precision precision constraint cost second adaptive algorithm vs uniform static bound setting query network monitoring implementation 
filtering uniform allocation adaptive answer precision precision constraint cost second adaptive algorithm vs uniform static bound setting single query large scale network data simulator 
eters automatically topic 
single query experimental results showing effectiveness algorithm 
considering simple case involving single continuous avg query 
query example section applied sources 
monitors average rate traffic organization ranged packets second 
optimized static bound width allocation described section relies knowing random walk step size applicable real world data comparison 
assuming data update patterns known advance obvious method static allocation set bound widths uniformly 
compare algorithm setting 
compares communication cost incurred real world implementation adaptive algorithm compared uniform static allocation measuring cost hours initial warm period 
continuous query monitors average traffic level precision constraint ranging packets second 
algorithm offers mild improvement uni filtering uniform allocation adaptive answer precision queries cost second adaptive algorithm vs uniform static bound setting queries network monitoring implementation 
form bound allocation single query bearing mind experiment small scale network monitoring data available monitoring hosts organization 
test algorithm large scale network data hosts ran simulation publicly available traces network traffic levels hosts distributed wide area hour period pf :10.1.1.144.7995
host average packet rates ranged packets second randomly selected hosts simulated data sources 
shows results simulator large scale data set accounting communication costs 
data set algorithm significantly outperforms uniform static allocation queries tolerate moderate level imprecision small medium precision constraints 
queries weak precision requirements large precision constraints naive allocation schemes achieve low cost slight additional overhead algorithm causes perform par uniform static allocation 
multiple queries describe experiments multiple continuous queries having overlapping query sets 
workload continuous avg queries example section 
measurement groups defined source subsets query predicates packet satisfies 
measurement group aggregated acts data object updates filtered bound streamed central monitoring station 
may natural sources aggregate data objects object query discuss option shortly section shows results experiments measuring cost hours initial warm period 
axis shows precision constraints queries queries monitored lower volume data factor roughly run set precision constraints th shown xaxis 
discussed section uniform static bound width allocation performed multiple overlapping queries data object involved query maintain narrowest bound assigned 
algorithm significantly outperforms uniform static allocation queries tolerate moderate level imprecision small medium precision constraints 
example reasonable precision constraints queries queries algorithm achieves cost messages second compared cost uniform static bound width allocation 
furthermore previous results reported cost decreases rapidly precision constraint relaxed offering significant reductions communication cost compared filtering 
source aggregation multiple query workload may appear advantageous sources aggregate data objects form object query updates streamed monitoring station query subset 
interestingly doing process call source aggregation result lower cost cheaper perform source aggregation depends data query workload user specified precision constraints 
appendix show mathematically reasonable conditions source aggregation expected achieve lower cost reasonable conditions cost lower source aggregation 
note choice perform source aggregation independently source independent set overlapping queries best configuration may perform source aggregation selectively 
general large disparity precision constraints overlapping queries source aggregation achieves lower communication cost update stream transmission queries large precision constraints separate wide bounds constrained queries small precision constraints 
hand updates objects involved multiple queries preferable terms communication cost apply source aggregation avoid redundantly applying updates object relevant query 
extreme case consider example section source router maintains single queue latency value accessed multiple path latency queries updates source apply objects involved multiple queries 
source aggregation router maintain copy queue size measurement path latency query bound having potentially different width 
updates fall outside bounds different times causing unnecessary updates transmitted central stream processor 
latency tolerance seconds fraction updates fraction updates arriving maximum latency tolerance query plan design experiment algorithm monitors expected cost versus source aggregation switches adaptively 
impact message latency experiment measures update message latency 
vary maximum latency tolerance recall section measure fraction updates arriving query hour period 
implementation filtered update streams transmitted local area network 
value seconds reasonable data changes meaningful scale second case ensures updates received time 
moderate precision constraint query updates exceeding latency allowance occur minutes 
update arrive late resulting inconsistency output brief measurements plotted fraction time answer consistent fidelity terminology sbs 
adjusting higher fidelity achieved expensive delayed output vice versa 
mkt proposes algorithm adjusting latency tolerance adaptively similar context observed latency distributions 
summary specified new approach reducing communication cost environment centralized continuous query processing distributed data streams 
approach hinges specifying precision constraints continuous queries generate adaptive filters remote data sources significantly reduce update stream rates guaranteeing sufficient precision query results times 
approach enables users applications trade precision lower communication cost fine granularity individually adjusting precision constraints continuous queries 
imprecision query results bounded numerically applications need deal uncertainty 
validate approach performed number experiments simulations real network monitoring implementation 
experiments demonstrated steady state scenario algorithm converges bound widths perform par selected statically optimization problem solver complete knowledge data update behavior 
case single continuous query algorithm significantly outperforms uniform bound width allocation cases cases algorithm somewhat better uniform allocation 
plan characterize cases algorithm achieves significant improvement uniform static allocation cases uniform allocation suffices 
case multiple overlapping continuous queries algorithm significantly outperforms uniform bound width allocation 
optimization techniques specialized aggregation queries numeric values general continuous query processing theory performed bounded values produce bounded answers precision guarantees 
area includes understanding imprecision propagates complex query plans developing appropriate optimization techniques adapting remote filter predicates complex environments 
acknowledgments david cheriton hector garcia molina ion stoica cheng yang zhu helpful discussions feedback 
alonso barbara garcia molina 
quasi copies efficient data sharing information retrieval systems 
proceedings international conference extending database technology pages venice italy march 
bbc bernstein clarke 
fast maintenance semantic integrity assertions redundant aggregate data 
proceedings sixth international conference large data bases pages montreal canada october 
bgm barbara garcia molina 
demarcation protocol technique maintaining linear arithmetic constraints distributed database systems 
proceedings international conference extending database technology pages vienna austria march 
bo babcock olston 
distributed top monitoring 
proceedings acm sigmod international conference management data san diego california june 
bw babu widom 
continuous queries data streams 
acm sigmod record september 
ccc carney cetintemel cherniack convey lee stonebraker tatbul zdonik 
monitoring streams new class data management applications 
proceedings th international conference large data bases hong kong china august 
chen dewitt tian wang 
niagaracq scalable continuous query system internet databases 
proceedings acm sigmod international conference management data pages dallas texas may 
dr raz 
efficient reactive monitoring 
proceedings twentieth annual joint conference ieee computer communications societies infocom anchorage alaska april 
estrin girod pottie srivastava 
instrumenting world wireless sensor networks 
proceedings international conference acoustics speech signal processing icassp salt lake city utah may 
gkp graham knuth patashnik 
concrete mathematics foundation computer science 
addison wesley reading massachusetts 
gw gupta widom 
local verification global integrity constraints distributed databases 
proceedings acm sigmod international conference management data pages washington may 
householder weaver 
managing threat denial ofservice attacks 
technical report cmu software engineering institute cert coordination center october 
www cert org archive pdf managing dos pdf 

maintaining global integrity constraints distributed databases 
constraints 
kahn katz pister 
century challenges mobile networking smart dust 
proceedings acm ieee international conference mobile computing network monitoring mobicom pages seattle washington august 
lam lamport 
time clocks ordering events distributed system 
communications acm july 
liu lin shih yu 
algorithms scheduling imprecise computations 
ieee computer may 
lpt liu pu tang 
continual queries internet scale event driven information delivery 
ieee knowledge data engineering 
lawrence zhou 
user guide version ac code solving large scale constrained nonlinear minimax optimization problems generating iterates satisfying inequality constraints 
technical report tr institute systems research university maryland 
mbc min cho sinha shih wang chandrakasan 
low power wireless sensor networks 
proceedings fourteenth international conference vlsi design bangalore india january 
mf madden franklin 
stream architecture queries streaming sensor data 
proceedings th international conference data engineering san jose california february 
mil mills 
internet time synchronization network time protocol 
ieee transactions communications october 
mkt moon kurose towsley 
packet audio playout delay adjustment performance bounds algorithms 
acm springer multimedia systems january 
mshr madden shah hellerstein raman :10.1.1.12.4794
continuously adaptive continuous queries streams 
proceedings international conference management data madison wisconsin june 
motwani widom arasu babcock babu datar manku olston rosenstein varma 
query processing resource management approximation data stream management system 
proceedings biennial conference innovative data systems research cidr january 
olston loo widom 
adaptive precision setting cached approximate values 
proceedings acm sigmod international conference management data pages santa barbara california may 
ow olston widom 
offering tradeoff aggregation queries replicated data 
proceedings international conference large data bases pages cairo egypt september 
extended version available 
stanford edu pub papers ag ps 
ow olston widom 
best effort cache synchronization source cooperation 
proceedings acm sigmod international conference management data pages madison wisconsin june 
extended version available www db stanford edu olston publications bes pdf 
pf paxson floyd :10.1.1.144.7995
wide area traffic failure poisson modeling 
ieee acm transactions networking 
pk pottie kaiser 
wireless integrated network sensors 
communications acm may 
sbs shah bernard sharma ramamritham shenoy 
maintaining temporal coherency cooperating dynamic data repositories 
proceedings eighth international conference large data bases hong kong china august 
ska 
manual 
www tu dresden de html 
ss silberschatz 
data value partitioning virtual messages 
proceedings ninth acm sigact sigmod sigart symposium principles database systems pages nashville tennessee april 
ste stewart 
calculus early second edition 
brooks cole 
garcia luna aceves 
traffic engineering approach minimum delay routing 
proceedings ieee international conference computer communications networks las vegas nevada october 
van renesse birman :10.1.1.13.2446
astrolabe robust scalable technology distributed system monitoring management data mining 
technical report cornell university 
wa wilschut apers :10.1.1.56.701
dataflow query execution parallel main memory environment 
proceedings international conference parallel distributed information systems pdis pages 
yam yamashita 
dynamic replica control fairly assigned variation data weak consistency loosely coupled distributed systems 
proceedings second international conference distributed computing systems pages vienna austria july 
yv yu vahdat 
efficient numerical error bounding replicated network services 
proceedings sixth international conference large data bases pages cairo egypt september 
appendix min queries consider min queries show purposes bound width setting treated collection avg queries 
consider min query query set precision constraint show bound object width precision constraint met 
see fact observe answer min min width min min min upper bound object choose object lowest lower bound min obtain bounds width answer bound width show converse bound width greater precision constraint guaranteed 
see fact consider object value far greater minimum value queried objects 
may safe assign bound width exceeding long greater lowest lower bound contribute answer bound 
stream processor receives update objects causing suddenly lowest lower bound lowest upper bound new answer bound width greater situation remedied requesting tighter bound source procedure incur delay answer bound violates precision constraint breaking requirement continuous precision continuous queries 
min query bound queried object width times widths guaranteed precision constraint 
circumstances occasional precision constraint violations short periods time tolerable technique bo avoids communication altogether objects far current minimum 
observations purposes bound width setting min query precision constraint set objects equivalent set single object queries precision constraint 
single object queries avg queries object techniques section applied min queries modification 
sum computed avg max symmetric min section techniques workload consisting combination sum avg min max queries 
modifications handle weighted avg sum queries introduce modifications handle continuous queries monitor weighted average weighted sum extension set data values 
say registered continuous queries 
qm query object query set may associated positive negative weight query 
absence specified weight 
notational convenience say objects stream processor query set exact answer avg query goal able continuously compute approximate answer bounds precision constraint note weighted avg sum queries quite flexible monitor difference values weights 
guarantee precision constraints met constraint hold query see appendix derivation words weighted sum absolute value bound widths query exceed product precision constraint number objects queried 
initially bounds set way meets precision constraint query allocating bound widths uniformly query object minimum width assigned described section 
adaptive algorithm described section adjust bound widths modifications bound growth process section section incorporate weights 
modify burden target computation described section 
recall represents portion object burden score corresponding query appropriately weighting average value query queried objects substitute expression replace occurrence arrive expression second computing deviation object burden targets queries access weight burden targets appropriately max greedy allocation growth maximum possible amount object bound grown violating precision constraint weighted query computed min mathematical justification bound growth strategy give mathematical model behavior objects update streams filtered bounds justify bound growth allocation strategy section extended appendix handle weighted queries 
model behavior objects filtered update streams follows 
object exact value varies time assume streamed update period function bound width signify relationship writing intuitively bound narrow actual value exceed streamed update period short 
conversely bound wide expect streamed update period longer 
precise relationship depends behavior streamed update object incurs cost express communication cost entire system continuous queries registered zero cost achieved setting bounds 
derive appendix query weights 
precision constraint imposes constraint bound widths recall set objects queries treated weighted avg queries 
faced optimization problem minimizing cost satisfying constraint queries 
qm function inversely proportional discussed faced nonlinear optimization problem inequality constraints 
problems difficult solve decided try treating inequality constraints equality constraints get idea form solution 
verified success approach comparing results obtained algorithm derive results obtained executing nonlinear optimization problem solver operates synthetic data see section apply method lagrange multipliers ste minimize set equality constraints form solution ste property set constants 
evaluate derivative assumption function roughly form arbitrary constant positive real number 
example model applies data follows random walk pattern shown appendix assuming roughly follows form evaluate partial derivative obtain expression constant 
burden target recall burden score giving formula want set burden score object roughly equals weighted sum burden targets queries algorithm described section converges state monitoring burden scores increasing consequently decrease significantly higher weighted sum estimated targets 
derivation constraint formula derive constraint formula referenced appendices bound answer weighted average query computed weight associated object bound 
lowest possible weighted average occurs values objects positive weight small possible values objects negative weight large possible 
words answer lower bound answer lower bound converse holds upper answer bound tight bound weighted average answer rewritten answer bound width second pair formulae simplifies making constraint streamed update period random walk data derive expression expected streamed update period function bound width object changes random walk pattern 
random walk model steps size probability distribution value binomial distribution variance gkp 
chebyshev inequality gkp gives upper bound probability value distance starting point treat upper bound rough approximation solve obtain roughly expected streamed update period model streamed update period random walk data verified empirically 
relation general expression appendix random walks 
optimized static bound width allocation recall appendix cost streamed update period function bound width appendix derived approximate formula function random walk case depends step size step sizes objects known static bound width allocation solving nonlinear optimization problem minimize presence constraints form 
mathematical analysis source aggregation analyze effect source aggregation mathematically 
show cases exist source aggregation advantageous terms minimizing stream transmission cost cases exist 
suppose data values single data source continuous sum queries stream processor 
computes precision constraint computes precision constraint source aggregation applied bounds maintained stream processor corresponding source values width query precision constraints require hand source aggregation applied bounds maintained stream processor bound hq vq bound lq hq vq wq wq stream transmission costs equal cost determined sum streamed update frequencies bounds estimated random walk model appendix streamed update frequency bound width value random walk step size applying law variances additive sums independent random variables gkp compute streamed update frequency source aggregated bounds fq ss wq fq ss wq stream transmission cost source aggregation applied cn cost source aggregation applied fq fq suppose large disparity precision constraints queries 
purpose treat easy verify mathematically step sizes bound widths meet constraints cn source aggregation achieves lower stream transmission cost 
hand suppose value involved queries changes rapidly involved single query 
take extreme case source aggregation performed reasonable width allocation strategy assign min derive cn 
