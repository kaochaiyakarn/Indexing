semantic remote attestation virtual machine directed approach trusted computing vivek deepak chandra michael franz remote attestation core functionalities provided trusted computing platforms 
holds promise enabling variety novel applications 
current techniques remote attestation static fundamentally incompatible today heterogeneous distributed computing environments commodity open systems 
language virtual machines enables remote attestation complex dynamic high level program properties platform independent way 
call semantic remote attestation 
enables number novel applications distribute trust dynamically 
implemented prototype framework semantic remote attestation example applications built peer peer network protocol distributed computing application 

major trends immensely influential today computing environment 
heterogeneity 
compute small handhelds desktop workstations rack mounted servers inter operate 
led widespread acceptance open protocols communication portable language runtimes java net virtual machines execution programs 
second major trend mobility 
varied computing devices inter operate seamlessly able familiar programs data 
significantly increased importance having called common platform 
common platform increasingly language runtime executes form platform independent mobile code 
franz uci edu department computer science university california irvine ca dependent computing infrastructure weaknesses painfully apparent 
hand periodic waves network outages caused worms nimda sql slammer 
content producers want control proliferation creations 
network hostile place default assumption assume adversarial remote machine 
way get security assurances closed systems 
enforce compliance certain security policy tightly controlled 
usually manufactured single vendor rigid specifications 
designers complete control system build specifically conform security policy 
closed system communicates knows tight bounds expected behavior remote party 
common examples closed systems automated teller machines atms proprietary game consoles open systems hand central arbiter 
commodity personal computers handhelds examples open systems 
open system easily changed behave maliciously systems communicate 
communicating open systems assume behavior conservative assumptions 
trusted computing effort bring properties closed proprietary systems open commodity systems 
trusted computing introduces mechanisms components hardware software check enforce integrity system allow authenticate remote systems 
example trusted booting procedure sure operating system tampered 
chain reasoning starts trusted hardware module arrive state system boot 
similarly deduce sure particular program running system 
remote attestation process software authenticates remote parties 
allows remote party certain assumptions behavior software 
trusted computing reach full potential questions need addressed programs running trusted platforms authenticate manner ensures party satisfies security criteria leaving room various differing implementations 
current client server network computing model assumes trusted server untrusted malicious clients 
significant fraction done clients trust resides server 
design new network protocols adapt existing ones environment allows flexible partitioning trust 
moving away model having fully trusted server fully untrusted client design models applications broker trust flexible dynamic ways possible today 
explain current methods remote attestation suffer critical drawbacks 
technique suited rigidly controlled closed systems completely inadequate open systems today embody great variety hardware software platforms 
propose way problems standard remote attestation trusted virtual machine basis doing remote attestation 
call semantic remote attestation certify high level fine grained dynamic properties platform independent mobile code 
core idea semantic remote attestation trusted virtual machine trustedvm explicitly derive enforce behalf remote party various properties applications running 
intuitively authentication entity broader meaning currently 
encompass just verifying source originated include verifying proving behavior conforms required security policy 
gain experience semantic remote attestation implemented prototype trustedvm example applications 
application simplified peer peer networking protocol second distributed computing client server application 
implementing framework achieved benefits trust relationships peers clients servers explicit checked enforced trustedvm 
typically implicit taken trust 
making trust relationships explicit results having knowledge degree trustworthiness clients peers 
example knowing properties satisfies 
allows applications informed decisions goodness result dynamically adjust trust relationships 
rest organized follows section briefly covers basic concepts trusted computing remote attestation explains shortcomings remote attestation today section explains virtual machines flexible expressive remote attestation forms core section discusses implementation issues involved presents example applications section surveys related section discusses avenues section concludes 

background trusted computing remote attestation broad goal trusted computing add components mechanisms open commodity systems properties high assurance closed systems 
done combination hardware software support 
requires core mechanisms secure boot sure system booted trusted operating system adheres security policy 
mechanism provided adversary boot system modified operating system bypasses security policy 
strong isolation prevent system compromised booted prevent applications tampering 
remote attestation certify authenticity software run remote party 
guarantee integrity system tampered turned secure boot execution programs tampered strong isolation 
third authenticity sure identity remote party program 
focus remote attestation 
root attestation process hardware device called trusted module tm 
embedded private key public private key pair 
key pair certified certification authority ca 
tm small amount non volatile storage 
hash bios signed tm private key stored 
boot control passed tm 
recomputes hash bios compares stored hash 
know bios tampered control passed bios 
bios similar check passing control boot loader 
boot loader similar check passing control operating system 
layers chain public private key pair certified signed private key layer immediately preceding chain 
turn certify layer immediately 
precisely layer signs things layer hash executable image public key 
binds public key software 
note private key layer chain kept secret layer immediately succeeding 
bios unable read tm private key boot loader unable read bios private key 
successful completion chain checks system guaranteed booted trusted untampered operating system 
combination hardware trusted module software secure booting isolation needed guarantee integrity authenticity trusted system 
trusted computing base setup consists hardware trusted module trusted operating system handles booting enforces strict isolation applications 
remote attestation problems remote attestation process application authenticates remote party 
asked authenticate application asks operating system endorsement 
operating system signs hash executable application 
entire certificate chain starting trusted module way application sent remote party 
remote party verifies certificate chain checks corresponding hashes software approves 
attestation process result client server sharing secret session easily hijacked doing attestation program communication 
method remote attestation suffers critical drawbacks 
briefly says program behavior static inflexible upgrades patches programs hard deal fundamentally incompatible widely varying heterogeneous computing environment revocation problem discuss detail 
critical shortcoming remote attestation program behavior 
fundamentally sought assurance program behavior respect security policy remote attestation certifies completely different 
simply certifies exact executable running 
assurances behavior program taken trust 
possible attested program bugs behave maliciously 
remote attestation defined way completely static inflexible 
convey dynamic information program runtime state properties input acting 
time operation done network protocol 
problem upgrades patches hard deal 
linear upgrades version dealt simply updating list approved software remote party uses 
closed tightly controlled systems atms tractable 
situation widely available commodity software completely different 
increasingly common today upgrades patches released frequently 
software patched upgraded 
usually multiple patches multiple bugs program 
subset patches may applied order 
results exponential blowup space possible binaries program 
scenario remote attestation faces problems ends network 
servers manage growing intractability maintaining large list approved software current state 
clients hand may hold applying patches upgrading simply able remote attestation framework 
today computing ecosystem extremely varied accommodates spectrum heterogeneous systems widely varying capabilities 
systems range high supercomputers consumer devices personal computers handhelds watches ubiquitously embedded microprocessors 
high premium placed portability interoperability 
reason cross platform portable solutions java popular 
remote attestation stress certifying particular platform specific binaries fundamentally incompatible reality 
just managing upgraded patched versions software certifying programs run variety platforms inter operate quickly intractable 
remote attestation inherits problem public key cryptography revocation 
certification authority issues certificate hard revoke 
method publicly available certificate revocation lists looked regular intervals 
may time lapse certificate revoked access denied 
checking revocation infrastructure crl attestation inefficient 

semantic remote attestation shortcomings traditional ways remote attestation traced back root cause desired attestation behavior software running remote machine gets attested fact particular binary run 
remote party running say outlook se information sought 
sought particular program security policy 
traditional remote attestation able certify simply exact binary code running remote platform 
indirect implication drawn program behavior 
important realize assurance gained program behavior purely trust verification 
knowledge exact program running remote platform trust behave policy essentially vendor software claims 
chain cryptographic certificates binds claim vendor program 
direct consequence purely cryptographic methods remote attestation 
cryptography certifying entities suitable certifying behavior 
solution propose leverages techniques security virtual machines 
language security variously defined set techniques programming language theory implementation including semantics types optimization verification brought bear security question leveraging program analysis program rewriting enforce security policies 
derives assurances behavior code looking code 
promising examples approach include proof carrying code typed assembly language tal inlined execution monitors information flow type systems 
techniques thought falling major categories program rewriting program analysis 
program analysis covers variety techniques statically try check program conformance security policy 
primary example type safe programming types approaches security tal 
program rewriting complementary set techniques aim enforce security rewriting programs conform security policy 
inlining security monitors example class techniques 
primary advantage language approach security flexible easily express fine grained security policies 
trusted virtual machine attestation propose making remote attestation flexible expressive leveraging language techniques virtual machines 
goal attest program behavior particular binary 
domain platform independent mobile code runs virtual machine 
trusted operating system trusted virtual machine trustedvm attest remote parties various properties code running 
software including virtual machine trusted attested standard signed hash method 
term virtual machine vm mean language virtual machine executes form platform independent code 
widespread example virtual machine java virtual machine 
important differentiate virtual machine monitors vmm virtualize hardware architecture interface exactly similar raw hardware 
examples vmms vmware disco 
requests remote attestation trustedvm 
requests ask enforcement checking specific security policies code run trustedvm 
enforced execution particular binary security policies constraints specified remote party 
key observations enable trustedvm approach firstly code expressed portable representation java bytecode contains high level information code class hierarchy method signatures typing information presence high level information fact code expressed platform independent format code amenable program analysis 
trusted virtual machine attest high level meta information program results code analysis done program 
secondly code runs completely control virtual machine execution explicitly monitored 
trusted virtual machine attest dynamic properties regarding execution program inputs 
examples properties trusted virtual machine attest trustedvm attests properties classes remote party may require class subclass wellknown class interface may extending constraints behavior way 
example may restricted interface input output operations disallows arbitrary network connections 
dynamic properties program attested runs complete control trustedvm 
trustedvm attest dynamic properties 
includes runtime state program properties input program 
arbitrary properties trustedvm ability run arbitrary analysis code limits set security policy local host program attested behalf remote party 
remote party test wide variety properties sending code appropriate analysis 
system properties remote party send code tests certain relevant system virtual machine properties trustedvm attest results 
example running distributed computing program seti home folding home server may want test floating point behavior system virtual machine having trustedvm run test suite floating point programs 
note sort attestation fine grained semantically richer operation signing hash executable image call semantic remote attestation 
attested presence particular binary executable relevant properties program 
effect explicitly separating concerns earlier merged identity behavior 
claims code behavior trusted virtual machine explicitly checking deriving 
direct consequence variety different implementations functionality able function remote attestation framework long satisfy properties required 
cryptography plays part binding claim code behavior entity qualified claims trusted virtual machine 
advantages semantic remote attestation semantic remote attestation number advantages traditional remote attestation overcomes critical shortcoming traditional remote attestation semantic attestation reasons behavior code tying reasoning particular executable binary 
dynamic nature attest various dynamic properties program runtime state interesting program points input program 
opposed traditional remote attestation time 
flexible trustedvm carry arbitrary code analyses attest results 
semantic remote attestation done virtual machines platform independent code enables truly new functionality possible sort high level attestation program properties done native code 
firstly native code low level high level structure information drive sort analysis trustedvm 
secondly functionality trustedvm server sending code analyze monitor program run requires platform independent code 
semantic attestation allow possibility properties required program may satisfied 
case remote party lower expectations trustworthy behavior program proceed accordingly terminate protocol altogether 
properties application trustworthy thought falling range attestation 
important consequence backward compatibility 
common network protocols today tcp assume completely untrusted client 
flexible approach attestation allows untrusted protocols gradually endowed trusted capabilities ability deal clients varying trustworthiness 
semantic remote attestation allows attestation locking client particular platform binary 
far critiques trusted computing focused idea remote attestation top level architecture dynamic checking trustedvm lock consumers particular platform extending monopoly control 
semantic remote attestation explicitly separates identity behavior allows flexible attestation code properties allowing interoperation variety implementations satisfy properties 

implementation results semantic remote attestation dynamic process attestation properties done various points lifetime distributed application 
refer machine running trustedvm client machine interested programs server 
trustedvm client machine runs attestation service job check analyze behavior applications running trustedvm answer attestation requests machines 
server channels communication client client application attestation service server communicates find behavior client application 
shown 
communication server attestation service secure guarantee integrity authenticity 
done various cryptographic protocols ssl 
semantic attestation certifies properties programs running virtual machine 
virtual machine runs top operating system 
certify layers software including virtual machine requires traditional remote attestation 
done standard way signed hashes 
trusted base virtual machine includes standard libraries 
virtual machine trustworthy adversary modify standard system libraries malicious ends example substituting standard security manager class weaker 
operating system certifies virtual machine binary libraries uses 
time writing access trusted hardware 
certificate chains emit rooted trusted hardware module operating system 
foresee conceptual difficulties interfacing real trusted hardware matter extending certificate chain 
explain implementation applications implemented prototype trustedvm 
peer peer protocol gain experience building trustedvm semantic attestation chose peer peer networks example domain 
particular considered gnutella protocol 
peer peer communication particularly interesting trial application remote attestation 
inherently distributed nature current protocols vest tremendous amount trust clients correct operation network 
led various security policy violations stage denial service attacks 
case gnutella protocol reason security weaknesses peers believe verification 
example result query query hit gnutella terminology guarantee machine content asked query result easily faked checked 
exploited mount denial service attack particular machine simply flooding network query results pointing machine 
holds routing messages announce machines part network 
routing messages called pong messages gnutella sent replies ping messages find network topology easily faked 
implementation java virtual machine 
java development kit version sun running intel pentium ghz machine mb ram 
modified standard java network socket class network communication sockets captured monitored 
api exposed 
captured traffic sent protocol watcher checks protocol messages conformance security policy informs server accordingly 
java bytecode protocol watcher sent server attestation service client embodies policy server interested enforcing client 
see utility machine independent code representation protocol watcher sent executed various platforms long java trustedvm 
note protocol watcher independent application 
various implementations protocol checked protocol manager 
implemented protocol similar gnutella somewhat simpler wire format simplify debugging parsing network messages 
protocol watcher examined outgoing messages client checked properties pong messages sure ip address message client 
query hit messages sure file mentioned query exists client 
properties checked particular exploited mount denial service attacks easily spoofed completely unchecked 
implemented protocol checker multihop messages done transitive certificate chains 
time writing aware applications functionality provided trusted hardware meaningful comparison benchmark 
measure overhead protocol checkers impose network latency 
measure measured time took subsequent ping pong query messages travel machines 
mbps ethernet network 
compared benchmark run protocol checker 
experimental error timings seconds cases 
increasing number iterations yielded similar results cases took seconds 
result surprise checks simple network round trip time dominates computation time 
checks complex realistic situations done periodically tight loop 
performance applications show little overhead 
distinguish kinds applications run trustedvm 
legacy applications explicitly trusted functionality remote attestation 
just example legacy untrusted application attested trustedvm completely transparently 
new applications written trusted functionality mind broader range trustedvm facilities 
unsuccessfully tried writing protocol bytecode rewriting 
turned unsuitable task load time rewriting system classes allowed jvm 
rewriting bytecode load time requires specialized class loader transforms bytecode handing virtual machine 
system classes java lang java net loaded primitive system classloader 
systems sasi inline monitors rewriting java bytecode 
transform classfiles line load time 
distributed computing application previous application example dynamic enforcement security properties trustedvm 
trustedvm attest static properties system running code runs 
attestation requester sends code testing various top level architecture test suites trustedvm properties trustedvm executes 
results signed sent back attestation requester see 
results tests affect computation communication parties 
useful distributed computing 
number popular distributed computing projects seti home folding home distribute units large number clients 
face common problem getting assurances behavior capabilities numerous clients 
complex trust relationship server client server expects client particular algorithm compute answers certain bounds return maliciously crafted incorrect answers 
currently problem solved extent measures redundancy keeping track client behavior period time 
semantic remote attestation framework benefit distributed computing application ways server test various properties system client having trustedvm execute tests 
give server better idea capabilities platform client 
knowledge giving client suitable units estimating answers 
testing properties way trust relationships client server explicit 
implicit taken trust explicitly enforced checked trustedvm 
experiment concepts took existing distributed computing project examined client server trust relationships re implemented run trustedvm 
chose distributed computing project tries find large mersenne primes great internet mersenne prime project gimps 
mersenne primes prime numbers form 
just seti home gimps distributes computation large number clients internet 
chose gimps divides problem subproblems different computational needs 

time primality check computationally intensive problems assigned fastest clients 
requires double precision floating point support doing fast fourier transform fft 

double check assignment verifies results time primality check 
workload smaller case assigned slower clients 
requires double precision floating point support 

factoring tries eliminate test candidates finding small factors common factoring algorithms 
reduces candidates expensive primality checks 
expensive gets assigned slowest clients 
full treatment mathematical background problem see 
different implementations client exist 
various clients differ ways clients subtle differences algorithms 
clients highly specialized particular architecture lose portability 
compiled various architecture os combinations 
performance different clients differ platform due implementation differences 
accuracy clients differ results slightly vary 
mainly different algorithms 
surprisingly results differ client different platforms differences underlying hardware 
gimps suffers problems distributed computing pointed client server trust relationships implicit server little information capabilities clients 
client expected behave reasonably specific particular platform behavior tested platform 
problems solved running application trustedvm 
server explicitly tests relevant capabilities client side asking trustedvm execute test suite return attested results 
solution added advantage portable range architectures implement trustedvm 
capabilities relevant gimps project floating point precision computational power 
test suite 
computationally intensive routine prime factorization problem computing fast fourier transform inverse 
test computation speed execute dimensional fast fourier transform small typical data time 
result test helps server give client appropriate unit 
floating point precision interested testing platform implements double precision floating point operations complies ieee standard floating point 
particular java port test suite 
test suite check compliance floating point implementation various functions ieee floating point standards 
fft inverse fft sine cosine functions tests interested ones determine accuracy functions 
depending results determine client accurate run computations 
server reliable information clients communicating 
information vary units clients estimates accuracy answers 
application portable depend specific clients 

related best knowledge prior aims mechanism remote attestation fine grained dynamic platform independent 
field trusted computing attracted great deal attention 
garfinkel proposed virtual machine monitor architecture interface underlying trusted hardware 
architecture provides vmm abstractions software open box vmm closed box vmm 
open box vmm simply provides legacy untrusted interface 
allows old operating systems software run unmodified 
closed box vmm provides interface underlying trusted hardware new software 
number vmms execute bare hardware 
strongly isolated encrypted storage 
important differences trustedvm architecture 
provides interface just real hardware trustedvm exposes higher level interface 
executes code 
goal providing strong isolation applications running different vmms provide better technique remote attestation 
importantly uses standard signed hash method remote attestation 
authors acknowledge shortcomings standard remote attestation call appropriate technical legal protections minimize abuse 
goal similar microsoft architecture 
said high assurance trusted microkernel running hardware called nexus provides strong isolation legacy untrusted newer trusted applications trusted applications 
unfortunately knowledge published technical documentation hard depth comparison 
system aims provide tamper evident execution 
goal know remote execution program carried untampered manner 
physically tamper resistant cpu block 
executes code processor 
tamper resistance provided hardware level physical means software level encrypting data including cache data written back main memory 
semantic remote attestation orthogonal trustedvm underlying hardware architecture 
digital distributed system security architecture features today tcpa specification including secure bootstrapping remote attestation system software signed hashes 
aegis system provided secure bootstrapping 
layer software hardware checked stored hashes control passed untampered 
systems focus improving remote attestation 
trusted computing group tcg begun producing specifications hardware trusted module personal computers 
call trusted platform module tpm 
models ibm thinkpad laptops contain similar module 
commodity trusted computer couple trusted module software provides secure booting strong isolation 

discussion avenues investigation 
protocol test suits kinds expressive attestation trustedvm capable 
trustedvm capable results static analysis done code 
static analyses code properties interest remote server 
static analyses runtime enforcement policies far geared protecting host malicious mobile code 
emphasis type safety information flow resource control safety issues 
emphasis different remote attestation 
servers want know application obeying high level semantic rules 
candidate analysis may interest servers information flow 
analysis convince server client leaking results confidential computation data 
current implementation policy server wants enforced embodied protocol watcher test suite 
develop systematic language expressing remote attestation requests 
signed hash attestation issue 
trustedvm provides broad range fine grained attestation capabilities language probably right tool full 
gain experience developing applications functionality provided trustedvm 
distributed firewalls implement network traffic policy points network single point 
way distributing trust match implementation trustedvm 
ability communicate server particular property program certified useful 
information communicated server get detailed information desired properties client program 
informed decision decreasing trust particular instantiation protocol stopping altogether 
server gains dynamic feedback trustworthiness clients 
believe property fruitfully exploited port variety untrusted network protocols tcp trusted computing framework gradual manner various implementation inter operate 
stark contrast model standard signed hash remote attestation provides attestation passes fails gradation 
provide upgrade path applications trusted hardware increasingly available market 

standard ways doing remote attestation purely cryptography suffer critical shortcomings static inflexible scale 
importantly speak program behavior attest presence particular binary 
possible attested binary bugs obey security policy server expecting 
remote attestation hard scale flood software patches upgrades 
accommodate varied homogeneous computing environment 
introduced novel technique remote attestation language virtual machines 
core idea technique called semantic remote attestation language virtual machine executes form platform independent code 
software including virtual machine trusted 
virtual machine certify various properties code running explicitly deriving enforcing 
done ways observing execution programs running vm analyzing code execution 
particularly easy highlevel platform independent code lot information structure properties code 
fact trusted computing core technique standard remote attestation lock consumers particular program platform widely expressed fear 
key advantage approach reasoning behavior program tied particular binary 
semantic remote attestation checks program properties works different implementation program long satisfy prop erties required 
validate ideas implemented prototype trustedvm modifying java virtual machine observe behavior network protocols 
prototype check untrusted behavior gnutella peer peer protocol 
specifically check messages network topology query results spoofed 
measurements show overheads checking negligible simple checking particular application needs 
simple checks sufficient overcome known weaknesses peer peer protocols 
trusted computing introduced concept remotely supervised execution idea remote server able monitor change execution program client machine 
remote attestation key doing 
current architectures attestation able implement idea limited way 
semantic remote attestation takes idea logical fine grained dynamic control monitoring execution application 

gimps source code timings page 
com mayer gimps timings html 
gnutella protocol specification 
www limewire com developer gnutella protocol pdf 
java port 
www math utah edu software java 
great internet prime mersenne search gimps 
www mersenne org 
alliance 
tcpa pc specific implementation specification may 
anderson 
cryptography competition policy issues trusted computing 
workshop economics information security may 
farber smith 
secure reliable bootstrap architecture 
ieee symposium security privacy 
bellovin 
security aspects napster gnutella 
usenix security symposium aug 
bugnion devine rosenblum 
disco running commodity operating systems scalable multiprocessors 
acm transactions computer systems 
chen morris 
certifying program execution secure processors 
usenix hotos workshop may 
cody waite 
software manual elementary functions 
prentice hall 
cohen chase kaminsky 
automatic program transformation 
usenix annual technical symposium pages 


exploiting security gnutella protocol mar 
schneider 
sasi enforcement security policies retrospective 
new security paradigms workshop 
acm press 
evans 
flexible policy directed code safety 
ieee symposium security privacy pages 
garfinkel pfaff chow rosenblum boneh 
terra virtual machine platform trusted computing 
proceedings th symposium operating system principles sosp october 
garfinkel rosenblum boneh 
flexible os support applications trusted computing 
proceedings th workshop hot topics operating systems hotos viii may 
gasser goldstein kaufman lampson 
digital distributed system security architecture 
proc 
th nist ncsc national computer security conference pages 
ioannidis keromytis bellovin smith 
implementing distributed firewall 
acm conference computer communications security pages 
anderson cobb 
seti home massively distributed computing seti 
computing science engineering 
kozen 
language security 
mathematical foundations computer science pages 
molnar 
seti home problem 
www acm org crossroads columns september html sept 
myers 
jflow practical static information flow control 
symposium principles programming languages pages 
necula 
scalable architecture proof carrying code 
lecture notes computer science 
schneider morrisett harper 
language approach security 
lecture notes computer science 
wallach 
survey peer peer security issues 
international symposium software security nov 
pande 
beta hairpin folding simulations atomistic detail implicit solvent model 
journal molecular biology 
