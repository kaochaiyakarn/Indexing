camshift tracker design experiments intel opencv sai alexandre fran ois institute robotics intelligent systems university southern california usc edu july humans interact computer systems expect experience meet human standards reactiveness robustness possible non intrusiveness 
order computer vision techniques significant impact human computer interaction development efficient robust algorithms integration operation part complex including multi modal systems specifically addressed 
report describes design implementation experiments camshift tracking systems intel open computer vision library sai software architecture software architecture model created specifically address integration different solutions technical challenges developed independently separate fields working systems operate hard performance constraints 
results show sai formalism enabling tool designing describing implementing robust systems efficient algorithms 
keywords software architecture perceptual user interface human computer interaction 
humans interact computer systems expect experience meet human standards reactiveness robustness possible non intrusiveness 
reactiveness expressed terms perceived system latency delay user action perception action effect system 
perceived latency results actual latencies throughputs various processes involved system relationships 
robustness refers system ability cope unexpected situations 
non intrusive human computer interaction hci modalities term perceptual user interfaces field computer vision find ample application 
image video processing algorithms available implemented operate real time 
simplicity robustness mutually exclusive vision systems fulfill reactiveness robustness requirements 
efforts improve robustness simple efficient techniques usually result complex specialized algorithms suited real time systems help moore law 
reported driven part belief computer vision performance par human expectations abilities achieved designing implementing robust systems efficient fallible algorithms 
mainstream computer vision jump algorithm system taken granted simplified 
published algorithms tested proof concept systems design consideration 
intel open computer vision library large collection standard data structures efficient implementations computer vision algorithms 
algorithms may design implement real applications software systems scope library 
various models available programmers dataflow architectures example microsoft architecture popular video processing systems 
dataflow models suitable types applications fact particularly ill suited design interactive systems 
order computer vision techniques significant impact hci general particular integration operation part complex including multi modal systems specifically addressed 
sai software architecture software architecture model designing analyzing implementing applications performing distributed asynchronous parallel processing generic data streams 
sai created specifically address integration different solutions technical challenges developed independently separate fields working systems operate hard performance constraints 
reports design implementation experiments camshift tracking systems opencv sai 
goal experiments evaluate suitability particular algorithm particular purpose investigate introduced component architecture model available implementation tools designing understanding complex systems 
section provides short overviews camshift dataflow architectures sai 
section presents experiments designing camshift tracking system sai 
section addresses implementation proposed designs presents quantitative development performance comparative analysis 
section offers summary contributions discussion perspectives research directions suggested results 
background context camshift opencv continuously adaptive mean shift camshift algorithm mean shift algorithm robust non parametric iterative technique finding mode probability distributions 
color image color histogram image produced original color image histogram look table called back projection image 
histogram model density distribution back projection image probability distribution model color image 
camshift detects mode probability distribution image applying mean shift dynamically adjusting parameters target distribution 
single image process iterated convergence upper bound number iterations reached 
detection algorithm applied successive frames video sequence track single target 
search area restricted known position target resulting possibly large computational savings 
type scheme introduces feed back loop result detection input detection process 
version camshift applying concepts tracking single target video stream called coupled camshift 
coupled camshift algorithm described demonstrated real time head tracking application part intel opencv library 
area application specifically considered particular case head movements seen face shot video stream control various interactive programs 
color model head skin color tone model initialized sampling area specified manually image 
best results obtained skin area tracking hue component color images histogram 
remainder camshift refers coupled camshift algorithm implemented opencv 
opencv contains features useful implementing camshift tracking system explored experiments described 
features range general purpose data structures histograms functions color conversion back projection specialized functions camshift package calls general purpose functions specific algorithms black box camshift tracker class encapsulates necessary data structures hides intermediate library calls internally 
programming easier neatly packaged programming component requires build working system architecture model 
architectural considerations software architecture field study concerned design analysis implementation software systems 
specific architecture described set computational components interrelations connectors 
architectural style characterizes families architectures share patterns structural organization 
explicitly implicitly implementation computer program follows architectural model 
camshift demonstration comes opencv designed implemented microsoft dataflow architecture library 
principles common dataflow architectures form pipes filters architectural style 
particularly popular domains signal processing parallel processing distributed processing name 
graph opencv camshift tracker demonstration 
pipes filters style components called filters set inputs set outputs 
component reads consumes stream data input produces stream data output 
connectors pipes output stream filter flows input filter 
filters characterized input output behavior source filters produce stream input transform filters consume input stream produce output stream sink filters consume input stream produce output 
opencv camshift demonstration comprises main filters see video source camshift transform filter encapsulates opencv camshift tracker class video renderer sink 
additional color space conversion filter required renderer accept output camshift filter input 
pipes filters style number desirable properties attractive efficient model number applications 
relatively simple describe understand implement 
localization isolation computations facilitates system design implementation maintenance evolution 
reversely filters implemented tested separately 
furthermore filters independent model naturally supports parallel distributed processing 
dataflow models quite intuitive allow model systems preserving flow data 
defined constrained interaction modalities filters complex systems easily understandable series defined local transformations 
property obviously fully leveraged camshift demonstration tracking algorithm implemented single filter 
spite positive aspects dataflow models studied limitations unsuitable designing multi modal interactive systems 
generally systems designed different styles introducing unmapped areas interface resulting parts 
unifying hybrid architecture model sai introduced allow consistent design modeling complex systems 
overview sai sai software architecture model designing analyzing implementing applications performing distributed asynchronous parallel processing generic data streams 
sai provides universal framework distributed implementation algorithms easy integration complex systems exhibit desirable software engineering qualities efficiency scalability extensibility reusability interoperability 
sai defines architectural style underlying extensible data model hybrid shared memory message passing distributed asynchronous parallel processing model allow natural efficient manipulation generic data streams existing libraries native code alike 
sai provides formal system design oriented architectural support compatible agile methodology practices 
modularity style facilitates distributed code development testing reuse fast system design integration maintenance evolution 
underlying asynchronous parallel processing model allows specify optimal designs terms throughput latency 
graph notation architectural designs allows intuitive system representation conceptual logical levels time mapping closely physical level 
presents overview sai defining elements standard notation 
sai data encapsulated pulses 
pulse carrier synchronous data corresponding time stamp 
information pulse organized mono rooted composition hierarchy node instances 
nodes constitute extensible set atomic data units implement encapsulate specific data structures 
pulses holding volatile data flow streams defined connections processing centers called cells message passing fashion 
trigger computations called active overview sai elements 
cells represented squares sources circles 
source cell connections drawn fat lines cell cell connections drawn thin arrows crossing cells 
pulses 
contrast pulses holding persistent information held repositories called sources processing centers access concurrent shared memory access fashion 
processing cell may result augmentation active pulse input data update passive pulse process parameters 
processing active pulses carried parallel received cell 
hybrid model combining message passing shared repository communication combined unified data model provides universal processing framework 
particular system architecture specified conceptual level set source cell instances inter connections 
specialized cells may accompanied description task implement 
logical level description design requires specify cell active passive filters output structure source structure passive pulse 
system design experiments section reports experiments designing camshift tracking system sai 
reverse engineering approach starting opencv camshift demonstration getting deeper details camshift produces designs increasing apparent complexity increasing explicitness 
camshift demonstration sai immediate way implement camshift tracking system opencv class black box mirroring filter 
shows resulting design design 
just camshift specific portion opencv camshift demonstration completely encapsulated single filter encoded minimal functional unit sai 
unit composed single source single cell delineated dashed line 
standard video input image display modules provide capture display functionalities 
defining feature sai framework explicit identification fundamental data classes volatile persistent 
volatile data produced consumed remains system limited fraction lifetime 
example video processing application video frames captured processed typically volatile data processed displayed saved kept system 
process parameters hand remain system duration activity 
design instance tracker class encodes processing functions persistent data held source 
custom node type encapsulates instance class 
input output frames volatile 
custom camshift tracker cell feeds input frame persistent instance creates output synthetic frame result processing 
synthetic frame added pulse subsequently displayed 
persistent instance accessed concurrently individual threads processing subsequent input frames node encapsulating object provide mutual exclusion mechanism design black box approach 
dashed line delineates camshift functional unit 
flow monitoring unit allows collect throughput latency statistics minimum impact system performance 
ensure computational consistency 
result processing input frame performed critical section resulting sequentialization part system 
explicit tracker architecture design correct straightforward really satisfactory 
output tracker cell image useful visualizing results tracker definitely form pui system 
aspect easily solved limiting camshift tracker cell tracking having separate custom cell perform rendering synthetic image 
having single persistent object carry computations critical section second look potentially efficient sai asynchronous parallel processing model 
sequentialization processing part system re correlates throughput latency potentially serious performance bottleneck 
modularity sai certainly better 
analysis code class shows step processing sequence input frame 
input rgb color image converted equivalent representation hsv color space 
step independent subsequent processing performed parallel successive input frames 
opencv provides function color space conversion 
second hsv data conjunction color histogram process called back projection essentially produces color probability image input color image 
back projection image encodes pixel probability belonging color probability distribution represented histogram 
histogram initialized sampling representative area frame specified manually 
back projection operation independent subsequent processing 
persistent data color histogram 
opencv provides data structures histograms associated functions including 
core camshift algorithm applied coded call function 
initial search window back projection image function returns bounding box probable detection area image size orientation estimate distribution 
bounding box infer initial search window input back projection image 
back projection image obviously volatile data 
initial search window data input related detected area output previous frame 
asynchronous approach information encoded known detection result bounding box persistent information updated processing new frame forming feed back loop 
shows sai design design making independent steps color conversion backprojection camshift explicit separate rendering unit produce result visualization step design 
dashed line delineates subsystem functionally equivalent delineated 
flow monitoring unit allows collect throughput latency statistics minimum impact system performance 
images 
composition units straightforward process dependency sequence functionally equivalent single camshift source cell unit design 
independent processes separated design efficient single unit design 
single critical section processing input frame histogram node access known bounding box access placed critical sections independent 
processing involved critical section lighter single unit case constraints put processing time system throughput weaker 
advantage design explicit main data structures different components involved processing relationships 
finer modularity system understandable flexible implementation maintenance evolution 
light observations camshift unit design worth closer look 
explicit camshift architecture noted earlier core camshift feed back loop known target bounding box set initial search location new input image 
mean shift compute centroid color probability distribution search window 
second size orientation target probability distribution computed zeroth second moments respectively 
known target bounding box updated compute initial search location frame 
shows sai design design camshift stages mean shift moments update explicit organized feed back loop 
update cells explicit feedback loop design 
dashed delineates subsystem functionally equivalent camshift unit step iii 
flow monitoring unit allows collect throughput latency statistics minimum impact system performance 
persistent known bounding box connected common source holds bounding box node 
asynchrony processing target information initialization cell time fact latest available known bounding box 
latency feed back loop subsystem higher inverse throughput time difference previous result input frame processed interval consecutive frames 
algorithm applied conditions similar system lower throughput perform consistently 
asynchronous parallelism higher throughput maintained system 
type parallelism illustrated branching stream follow independent parallel paths 
coming moments cell stream follows path update cell path rendering cell display cell 
pulse level multi threading principally improves throughput stream level parallelism major impact latency 
result processing soon possible application interest visualization update arbitrarily imposed order 
long computing resources general sense available assuming fair scheduling model allows achieve minimal latency 
design certainly gives insight structure camshift tracking system black box designs sai 
fact design normally directly derived description camshift tracking 
system design graph gives informational pictorial representation algorithm 
depending level detail element described graph may seen conceptual logical level design 
structural map code implements physical level 
note system easily modeled level detail traditional dataflow approach 
particular lack concept shared repositories dataflow models feed back loops involving processing unit ill defined 
design sai modeling power level detail suitable communication sharing design efficient implementation corresponding system opencv 
section reports implementation proposed designs comparative performance 
implementation sai designs constitute blueprints implementation map closely code 
designs section implemented modular flow scheduling middleware open source architectural middleware sai 
section presents comparative numerical studies coding effort system performance 
complete source code accompanying tutorial available online 
camshift open source architectural middleware implementing core elements sai style 
project comprises extensive documentation including user guides tutorials 
additionally number software modules regroup specializations implementing specific algorithms functionalities 
experiments related implemented system designs section 
systems developed existing modules possible minimize amount coding required 
software line code sloc metrics help estimate code volume development effort 
sloc measurements computed code count tool 
physical sloc definition independent programming language syntax logical sloc definitions involve language specific syntax 
table shows sloc counts code implementing camshift filter code implementing analogous sai elements camshift tracker cell node design 
simpler api offered requires third coding achieve functionality 
cases framework wrapping code generated automatically smaller code volume preferable simpler understand 
demonstration applications filter module quite different structure directly comparable 
sloc physical logical filter opencv tracker module sai design table sloc metrics camshift tracker filter sai module 
table shows sloc counts different sai designs 
numbers reported distinguish non specific elements core library non opencv related modules camshift specific elements module application graph 
tests include user interface code 
specific code written order implement systems non specific code available libraries source files included directly project 
expected design complexity increases amount specific code write 
amount represents fifth total project sloc count design 
mentioned code wrapper code generated automatically 
remaining code directly related implementation specific algorithms interest experiments application 
case implementation mix direct coding specific opencv data structures sloc physical logical non specific design sp 
design total specific design sp 
design total specific design sp 
design total specific table sloc metrics systems implementing sai designs 
functions 
note hardly code directly relevant computer vision researcher written core library video input display examples code researcher field able take granted 
note specific code developed camshift demonstration belong opencv encapsulation module directly reusable subsequent projects 
performance comparison sai asynchronous parallel processing model allows specify optimal designs terms throughput latency 
critical questions context implements asynchronous parallel processing model influence system design throughput latency 
efficiency scalability systems implemented supported large number experiments reported example 
multi threading support enables real time performance media stream processing current state art single multi processor machines allowing achieve maximum throughput minimizing latency 
flow monitoring module part implements cell collects throughput latency statistics minimum impact system performance 
design measurements taken shown figures 
latency measured time difference image time stamp set capture time time detection data available system 
latency measure take account camera delay combination latency imposed capture rate hardware delays 
rendering display composite image left consistent tracking pui purposes 
measurements taken similar conditions live video input pixels effective throughput frames second 
experiments critical elements computer system dual intel pentium ghz cpu logitech pro usb live video input nvidia graphics card display 
latency processor load linked system showed significant variation tracking systems 
numerical values obtained particular experimental setting ms latency processor load ms latency processor load 
results suggest simple system significantly complex design terms architectural component instances involved result significantly computationally expensive efficient software system 
complex systems full sai properties result significant performance improvements 
experimental results bring supporting evidence proof concept implementation fully optimized efficient real time video processing modern computers 
summary perspectives design implementation experiments camshift tracking systems opencv sai 
reverse engineering opencv camshift illustrated intellectual practical value precise system representation internal structure algorithms comprises relationships 
sai design graph represents detailed blueprint coding system implementation corresponding architectural middleware straightforward 
large part code directly imported reusable modules significantly reducing development effort 
correctly sai confers properties system architectures designed style translate efficiency optimality properties software implementing designs 
modularity resulting code availability detailed map design graph facilitate system maintenance evolution code reuse subsequent applications experiment reproducibility objective comparative testing various functionally similar algorithms identical systems 
case simple straightforward system camshift tracker explicit design provides better understanding algorithm dynamics 
proof concept system coding effort kept low level performance resulting system impacted 
case complex systems full sai properties result significant performance improvements 
tracking thought connecting dots implicit line trajectory centered approach 
designs section suggest different approach 
systems operate assumption exactly target encoded persistent known bounding box structure 
rely single method detecting evidence presence target input images detection localization color distribution update knowledge target 
tracking algorithm emergent property behavior system performing detection identification 
trajectory recording states target instance 
straightforward extension multi target tracking observations naturally point systems achieve robustness combining imperfect efficient detection methods 
sai provides formalism describe algorithms equally importantly interact system 
design implementation systems particularly challenging exciting issue adaptation current techniques combining contributions individual detection algorithms bayesian networks 
composition concepts challenges central design multi modal pui systems 
acknowledgments supported part advanced research development activity government contract 
mda 
tools 
url sunset usc edu research 
intel open source computer vision library 
url www intel com research mrl research opencv 
andrews 
foundations multithreaded parallel distributed programming 
addison wesley 

computer video face tracking perceptual user interface 
intel technology journal 
comaniciu meer 
robust analysis feature spaces color image segmentation 
international conference computer vision pattern recognition pages 
san juan puerto rico 
fran ois 
modular flow scheduling middleware 
url sourceforge net 
fran ois 
camshift experiments 
tutorial 
url sourceforge 
net tutorials camshift html 
fran ois 
hybrid architectural style distributed parallel processing generic data streams 
proc 
int 
conf 
software engineering 
edinburgh scotland uk may 
fran ois 
software architecture computer vision 
medioni kang editors emerging topics computer vision 
prentice hall 
fran ois medioni 
modular software architecture real time video processing 
ieee international workshop computer vision systems pages 
vancouver canada july 
microsoft 
directx 
url www microsoft com directx 
shaw garlan 
software architecture perspectives emerging discipline 
prentice hall upper saddle river nj 
turk robertson 
perceptual user interfaces 
communications acm march 
