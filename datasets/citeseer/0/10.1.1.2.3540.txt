technical report mip university passau passau germany maintaining hierarchical graph views dynamic graphs marcus fmi uni passau de january describe data structure ciently maintaining views dynamic graphs 
view evolves base graph contraction subgraphs recursively defined associated static hierarchy 
data structure provides methods refine coarsen view interactively base graph subject node edge insertions deletions 
far cient solutions problem allow insertion deletion graph nodes 
providing operations data structure better suited graph editors common operations base graph supported helps exploring editing large hierarchically structured graphs network tra graphs biochemical pathways road maps web graph 
graphs network tra graphs web graph biochemical pathways large display edit ectively 
established technique solve problem partition graph recursively hierarchy subgraphs 
clustering derived semantics graph explicitly user 
complete road map europe instance large graph hierarchy defined grouping places roads city cities state 
city state needed full detail subgraphs contracted single meta node representing city state 
edges hidden subgraphs places outside retained edges meta node maintaining hierarchical graph views dynamic graphs technical report mip outside place 
convenient overview graph necessary details displayed simultaneously 
interactive scenario technique facilitates exploring editing large graph user choose subgraphs contract meta node expand replace subordinate subgraphs 
operations expand contract need supported ciently appropriate data structure 
depending admissible modifications hierarchy graph di erent variants view maintenance problem bw 
static case graph hierarchy fixed dynamic graph variant graph edges inserted deleted dynamic graph hierarchy variant graph additionally subject node insertions deletions hierarchy may change splitting merging clusters 
cient data structure new variant dynamic leaves dynamic graph variant additionally allows insertion deletion graph nodes leaves hierarchy 
contrast dynamic graph hierarchy variant lacks splitting merging clusters 
adequate dynamic graphs fixed hierarchical structure network tra graphs computers identified ip addresses edges represent tra hierarchy structure ip addresses 
fixed structure ip address change time underlying graph highly dynamic ip addresses active inactive tra comes goes 
examples biochemical pathways road maps 
previous solutions bgw bw adequate model applications handle graphs dynamic node set 
related various concepts extending graphs hierarchical structure ef har le lw rai sm 
clustered graphs ef consist base graph tree leaves exactly nodes base graph 
view clustered graph defined bw representation underlying graph obtained collapsing subgraphs meta nodes 
bgw bw data structures maintaining views expand contract operations dynamic graph variant described 
cient data structures dynamic variants left open problem bw 
views bw generalization defined ef meta nodes level abstraction form view 
levels expanded contracted completely 
expanding individual clusters yields accurate views views complicates view maintenance problem 
similar views 
data structure bgw nodes graph numbered cluster represented interval 
numbering inserting new graph nodes ine cient nodes coming new 
replace numbering data structure maintaining order maintaining hierarchical graph views dynamic graphs technical report mip list preserves total order subject insertions deletions precedence queries 
studied problem cient brd tsa optimal ds solutions 
layout algorithms ef efl sm san san hierarchically structured graphs see bc overview 
interactive systems lk graphs descriptions internal data structures available 
data structure integrated software architecture rai features arbitrary number hierarchies graph arbitrary number views hierarchy 
results data structure maintaining views expand contract operations dynamic leaves variant 
graph changes node edge insertions deletions hierarchical structure fixed 
replacing integer numbers linearly ordering nodes graph data structure order maintenance problem extend solution bgw new dynamic leaves variant 
denote number nodes number edges underlying graph depth hierarchy 
data structure uses md additional space balanced hierarchies improvement mmax log bw md log log space bound bgw 
edge insertions deletions take log time balanced hierarchies improvement max log log expected time bw slightly slower log log bgw 
approaches support contracting subgraph optimal time linear number changes view 
expanding node optimal bw bgw extra factor log log slightly better data structure factor log approaches bgw bw support node insertion deletion data structure provides time 
table summarizes results compares approaches 
problem statement denote undirected connected graph node set edge set 
note data structure directed graphs easier describe undirected graphs 
works modification unconnected graphs assume 
rooted tree hierarchy leaves exactly vertices define depth 
semantic need clusters subordinate cluster assume stratification argument bgw faulty buc results theorem bgw 
space bound improved mmax log compressed trees cost increasing operations contract factor log log log bgw theorem see sect 

maintaining hierarchical graph views dynamic graphs technical report mip inner nodes children 
tree node cluster denotes set leaves subtree rooted see fig 

children denote set children parent parent descendants short desc nodes subtree rooted view hierarchy graph graph nodes nodes view related terms predecessor relation hierarchy 
definition slight extension views bw bgw additionally require desc graph covered view 
omitting restriction model views subgraphs 
nodes connected induced edge nodes connected graph edge 
denote set nodes adjacent view see fig 

hierarchy graph view hierarchy wish ciently perform navigational operations view expand replaces node children result view nodes children contract children contracts children result view nodes children 
focus dynamic graph structural operations need supported ciently adds new edge removes edge adds new node attaches child removes leaf elementary operations important building blocks implementation operations desc desc determines induced edge true returns children inherit edge expanded children true 
maintaining hierarchical graph views dynamic graphs technical report mip example clustered graph 
directed edges form tree undirected edges bottom belong graph di erent illustrate sets example view consisting inner nodes leaves darker edges induced 
sets disjoint induced edge approach bgw share idea order leaves linearly node set forms interval respect order 
cluster node fully determined min smallest element max largest element 
having mind insertion deletion leaves simply label leaves consecutive integers bgw special data structure maintaining order 
addition values min max store node nodes connected leaf subtree see fig 

node indicates edge node exists shows edge connects 
su cient check 
maintaining order important issue insertion deletion leaves considered 
defined insert new leaf child insertions happen point linear order 
simply assigning consecutive integers leaves bgw ine cient leaves new 
cient data structures brd ds problem performing order queries ordered list subject insert delete operations 
assign numerical label integers elements making order query simple comparison labels referred list labeling technique 
cient solution allows operations performed worst case time ds sect 

technique insertions deletions dense sequential files wil top level level data structure com maintaining hierarchical graph views dynamic graphs technical report mip implementation simpler slightly cient data structure suitable 
example brd ds sect 
describe solutions amortized time insert delete worst case time order 
approach treat order maintenance component black box worst case solution time bounds theorem worst case 
addition need access successor predecessor leaf order 
part order maintenance structure separately maintain doubly linked list leaves 
compare leaves corresponding order query 
need store set data structure insert delete ciently supports successor operation succ 
succ returns smallest null element exists 
observe succ min max returns true succ min max bgw 
definition succ di ers bgw smallest returned 
bgw checks succ min max correct nodes labeled integers 
want rely numbering predecessor min min define succ 
order maintenance structures assign integer labels elements case leaves 
storing integers nodes cient data structures contracted stratified trees sets bgw 
order maintenance structures integers worst case time solution ds 
worse amortized time approaches brd ds shift constant number nodes insert operation 
update sets containing leaf new number worst case ect sets tree node relabeled 
updates renumbering gain exploiting integer labels lost store sets balanced search trees respect order provided order maintenance data structure 
insert delete succ done log worst case time provided order operation worst case time 
shown sect 
ciently performing operation requires ancestor leaf certain level determined easily 
level ancestor problem studied static bv bfc dynamic variants ah die 
need add remove leaves dynamic data structure described ah 
preprocesses tree linear time space level ancestor queries adding leaves performed worst case time ah theorem 
deleting leaves explicitly mentioned ah obvious possible constant time simply deleting leaf 
correct space longer linear number tree nodes 
similar maintaining dynamic arrays rebuild data structure instance half nodes deleted 
takes amortized cost delete standard doubling technique distribute sequence operations operation maintaining hierarchical graph views dynamic graphs technical report mip worst case 
keep children inner node list ordered leaves cover 
support expand store inner node set induced edges connecting children ected insertion deletion edge sets maintained balanced search tree 
elementary operations lemma 
data structure described takes md log worst case preprocessing time uses md additional space 
proof 
edge contribute entry sets predecessor memory needed sets md 
sets built inserting edge sets predecessor symmetrically predecessor 
md insert operations balanced search trees takes log 
additional memory order maintenance data structures brd ds linear number elements contain additional space nodes underlying graph 
preprocessing takes worst case time 
level ancestor structure preprocessed linear time space ah theorem 
edge contribute edge exactly set nearest common ancestor memory needed sets 
fundamental operation 
mentioned implement checking succ min max 
lemma 
determining induced edge nodes possible log worst case time 
proof 
store set balanced search tree succ takes log worstcase time 
crucial part expanding node view find induced edges children remaining nodes 
expanding neighbors known expanding connected child determining children inherit edge purpose see algorithm 
simplifies description algorithm treats expansion node edge expanding second component works analogously 
lemma 
takes log worst case time number edges reported 
maintaining hierarchical graph views dynamic graphs technical report mip proof 
loss generality assume case symmetric 

denote children ordered order leaves min max min max min max 
note store children order need sort 
check connected calculating succ min 
max edge reported max max ancestor children inherits edge 
determine ciently level ancestor data structure 
iterate procedure max see algorithm 
succ operation yields new edge 
determining level ancestor takes constant time get log worst case time 
algorithm input edge output children true 
ordered list children repeat succ min max max set ancestor level children advance child max return navigational operations implement expand follows find edges children edges children stored explicitly 
bw define opt children 
assumed connected number items added removed expand opt view expanding lemma 
expand performed opt log worst case time 
proof 
follows immediately lemma 
maintaining hierarchical graph views dynamic graphs technical report mip contract remove children incident edges 
process incident edge connects children node children insert induced edge lemma 
contract performed opt worst case time 
proof 
child examine incident edges 
parent mark neighbor delete incident edges 
children removed insert connect marked neighbors 
clearly takes opt time 
structural operations adding new edge insert predecessors predecessors creating duplicates 
deleting edge slightly complicated remove analogously edge connecting node update set nearest common ancestor sets avoid inserting edge twice deleting induced edge justified edge graph 
lemma 
performed log time 
proof 
solve mentioned problems adding counter entries sets 
inserting new entry check exists increase counter 
insert new entry counter 
deleting entry decrement counter safely remove entry 
obviously counters fit md space bound lemma 
updating sets predecessors takes log 
set nearest common ancestor updated 
contains elements takes log log 
deleting leaf delete incident edges implicitly updates ected sets 
update order maintenance level ancestor data structures remove leaf graph hierarchy 
predecessor possibly update values min max predecessor successor ordered list leaves 
want avoid nodes child hierarchy may need delete predecessors 
inserting new leaf child inner node insert max order maintenance structure 
add level ancestor data structure insert graph hierarchy child update values max predecessor maintaining hierarchical graph views dynamic graphs technical report mip table summary results comparison 
depth min log opt children 
expand denotes view expanding space bound approach bgw improved ms compressed trees 
increases time bounds operations contract factor log log log 
bounds labeled exp expected worst case approach bw approach bgw data structure space ms md log log md log log log expand opt opt log log opt log contract opt opt opt exp log log log log exp log log log log lemma 
deleting leaf incident edges inserting leaf performed time 
proof 
insertion deletion order maintenance level ancestor data structure take constant time updates predecessor constant time traversing predecessors ected leaf takes 
theorem 
md additional space data structure solves dynamic leaves variant graph view maintenance problem worst case time bounds shown table 
proof 
bounds table follow directly lemmata 
remarks compressed trees bgw compressed trees gab ht improve space bound 
hierarchy edge parent light desc desc parent heavy 
compressed tree evolves contracting heavy paths respective topmost node 
adopt approach compressed hierarchy maintaining subject insertion deletion leaves original hierarchy straightforward 
problem modifications maintaining hierarchical graph views dynamic graphs technical report mip change status induced edges predecessors ected node light heavy vice versa 
compressed tree results adding removing inner node 
especially new inner node expensive provide new node appropriate data structures set 
stratification time bounds compressed trees increase factor log log log 
improve bgw hierarchy tree stratified recursively stratification arguments faulty buc 
mention results stratification table 
fully dynamic hierarchies splitting clusters di cult incorporate approach bgw extend 
children operation split creates new tree node inserts children parent set chosen arbitrarily new node violate invariant represented min max 
try fix reordering leaves relative order leaves change 
consider instance leaf exist leaves reordering reordering relative order changed search trees sets depend order update permutation happens 
discussed context exploiting integer labels nodes see sect 
sets may ected permutation basic idea approach inherently prohibit cient implementation split 
cient data structure dynamic leaves variant graph view maintenance problem 
summarized table approach compete provide inserting deleting leaves 
open problems address 
instance definition restrictive unnecessarily contains nodes 
question space saved restrictive definition sets worst case average case special classes graphs 
bw important open problem remains data structure dynamic graph hierarchy variant splitting merging clusters 
acknowledgments adam buchsbaum fruitful discussions enlightening comments details bgw franz brandenburg michael forster christian comments drafts 
maintaining hierarchical graph views dynamic graphs technical report mip ah stephen jacob holm 
improved algorithms finding level ancestors dynamic trees 
ugo montanari jose emo welzl editors automata languages programming th international colloquium icalp number lncs 
springer verlag 
bc ralf sabine 
drawing clusters hierarchies 
michael kaufmann wagner editors drawing graphs methods models volume lncs pages 
springer verlag 
bfc michael bender martin farach colton 
level ancestor problem simplified 
rajsbaum editor latin number lncs pages 
springer verlag 
franz brandenburg michael forster andreas pick marcus falk schreiber 
exploration visualization biochemical pathways 
editors graph drawing software mathematics visualization 
springer verlag 
bgw adam buchsbaum michael goodrich je rey westbrook 
range searching tree cross products 
th esa 
brd michael bender cole richard erik demaine martin farach colton jack 
simplified algorithms maintaining order list 
european symposium algorithms esa volume lecture notes computer science pages 
buc adam buchsbaum 
personal communication 
bv omer berkman vishkin 
finding level ancestors trees 
journal computer system sciences 
bw adam buchsbaum je rey westbrook 
maintaining hierarchical graph views 
th acm siam symposium discrete algorithms 
die paul dietz 
finding level ancestors dynamic trees 
frank dehne jorg sack nicola santoro editors algorithms data structures nd workshop wads volume lncs 
springer verlag 
ds paul dietz daniel sleator 
algorithms maintaining order list 
acm symposium theory computing stoc 
ef peter eades qing wen feng 
multilevel visualization clustered graphs 
proc 
graph drawing volume lncs pages 
maintaining hierarchical graph views dynamic graphs technical report mip efl peter eades qing wen feng lin 
straight line drawing algorithms hierarchical graphs clustered graphs 
proc 
graph drawing volume lncs pages 
gab harold gabow 
data structures weighted matching nearest common ancestors linking 
st acm siam symposium discrete algorithms pages 
har harel 
visual formalisms 
comm 
acm 
mao lin huang peter eades 
fully animated interactive system clustering navigating huge graphs 
proc 
graph drawing volume lncs pages 
himsolt 
und implementierung von 
phd thesis fakultat fur und informatik universitat passau 
ht dov harel robert endre tarjan 
fast algorithms finding nearest common ancestors 
siam journal computing 
le wei lai peter eades 
graph model supports flexible layout functions 
technical report 
lk ivan victor 
visualization system clustered graphs graph algorithms 
proc 
graph drawing volume lncs pages 
lw thomas lengauer egon 
cient solution connectivity problems hierarchically defined graphs 
siam journal computing 
rai marcus 
library hierarchies graphs views 
goodrich kobourov editors proc 
graph drawing volume lncs pages 
san georg sander 
layout compound graphs 
technical report universitat des saarlandes fb informatik 
san georg sander 
fur den 
phd thesis universitat des saarlandes 
sm sugiyama misue 
visualization structural information automatic drawing compound digraphs 
ieee trans 
systems man cybernetics 
tsa 
maintaining order generalized linked list 
acta informatica 
maintaining hierarchical graph views dynamic graphs technical report mip wil dan willard 
worst case algorithms inserting deleting records dense sequential files 
proceedings acm sigmod international conference management data 

