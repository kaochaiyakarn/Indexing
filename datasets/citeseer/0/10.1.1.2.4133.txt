estimating pairs shortest paths restricted graph families unified approach extended dept computer science kent state university kent ohio usa cs kent edu 
show simple efficient approach solve pairs shortest path problem class weakly chordal graphs different subclasses 
approach works graphs small size largest induced cycle gives unified way solve pairs shortest path pairs shortest path problems different graph classes including chordal strongly chordal chordal bipartite distance hereditary graphs 
finite unweighted undirected connected simple loops multiple edges graph 
distance vertices smallest number edges path connecting pairs shortest path problem compute pairs vertices pairs shortest path apsp problem fundamental graph problems 
renewed interest see general unweighted undirected graphs special graph classes :10.1.1.42.2824
general graphs best result known seidel showed apsp problem solved log time denotes time complexity matrix multiplication involving small integers 
current best matrix multiplication algorithm due coppersmith winograd time bound 
contrast naive algorithm apsp performs breadth searches vertex requires time nm dense graphs 
fundamental nature apsp problem important consider desirability implementing algorithms practice 
unfortunately fast matrix multiplication algorithms far practical suffer large hidden constants running time bound 
interest obtaining fast algorithms apsp problem fast matrix multiplication 
currently best combinatorial graph theoretic terms algorithm apsp problem log time algorithm obtained dt le eds wg lncs pp 

springer verlag berlin heidelberg 
offers marginal improvement naive algorithm 
algorithm apsp problem yield algorithm similar time bound boolean matrix multiplication obtaining combinatorial time algorithm apsp problem major breakthrough 
nowadays researchers take approach consider pairs shortest path apasp problem general graphs design optimal time algorithm special structured graph classes interesting practical point view 
awerbuch cohen considered problem finding stretch pairs paths fixed constant path stretch length times distance 
efficient algorithms computing stretch paths 
different approach employed 
described simple elegant log time algorithm finding distances unweighted undirected graphs additive sided error 
important observation small distances long distances hardest approximate 
dor improved result obtained min time algorithm finding distances unweighted undirected graphs additive error means 
simple argument shows computing distances additive sided error hard boolean matrix multiplication see 
efficient algorithms developed solving apsp problem restricted classes graphs 
optimal time algorithms proposed interval graphs circular arc graphs permutation graphs bipartite permutation graphs strongly chordal graphs chordal bipartite graphs distance hereditary graphs dually chordal graphs 
optimal parallel algorithms apsp problem certain classes graphs 
approach shortest path optimization problems metric spaces simple rectilinear polygon endowed metric taken researchers finds visibility graph metric space contains shortest path points 
motwani studied classes rectilinear polygons showed visibility graphs corresponding chordal weakly chordal respectively 
everett corneil shown visibility graphs spiral polygons interval graphs definition various families graphs section 
motivated researchers look distances chordal graphs 
han showed apsp problem chordal graph solved time square 
note computing chordal graphs hard general graphs subclasses chordal graphs computed efficiently 
results follows time bound compute estimating pairs shortest paths restricted graph families distances chordal graphs additive error 
pair vertices simple linear time preprocessing time compute additive error 
sridhar showed sophisticated linear time preprocessing chordal graph distance vertices greater shortest distance computed time 
show simple efficient approach solve apasp problem class weakly chordal graphs different subclasses 
furthermore show approach works graphs small size largest induced cycle gives unified way solve different graph classes including chordal strongly chordal chordal bipartite distance hereditary graphs 
rest organized follows 
section presenting definitions simple time algorithm computing pairs shortest path distances graphs special vertex orderings 
section prove algorithm computes distances house hole free graphs additive sided error house hole domino free graphs chordal graphs additive sided error solves apsp problem distance hereditary graphs chordal bipartite graphs strongly chordal interval graphs 
section show apsp problem house hole free graph solved time square 
classes subclasses weakly chordal graphs 
section consider graphs small size largest induced cycle show generic algorithm computes time distances additive sided error size largest induced cycle weakly chordal graphs hole free graphs distances computed time additive sided error 
preliminaries algorithm open neighborhood vertex set uv closed neighborhood 
apath sequence vertices vl length say path connects vertices vl 
path path sequence vertices vk vk length cycle cycle modulo 
hole induced cycle length 
define various graph families 
graph chordal induced cycle length greater free graph graph contains holes 
graph weakly chordal complement hole free graphs 
bipartite house domino fan fig 

sun weakly chordal graph called chordal bipartite 
graph intersection graph intervals line 
graph called free triple set vertices path pair avoiding closed neighborhood third 
graph house hole free hh free contains induced houses holes house hole domino free free contains induced houses holes see 
distance hereditary graph free graph contain fan induced subgraph 
graph strongly chordal admits strong elimination ordering ordering vn ifi vk vl vi vk vj vl vj 
information graph classes refer reader computing approximate distances graph classes simple time algorithm 
graph vn ordering vertex set number assigned vertex ordering 
denote mn maximum neighbor vertex maximum number 
algorithm apasp vi vi downto downto vi vj vi vj mn vi vj return distances assume ordering algorithm property vi mn vi vi algorithm properly 
property holds orderings considered 
note method new 
compute pairs shortest path distances strongly chordal graphs see dually chordal graphs see 
classes characteristic orderings employed 
show method gives exact distances approximation distances graph classes 
clearly algorithm modified produce paths length merely returning approximate distances 
estimating pairs shortest paths restricted graph families separate procedure vertices returns path length apasp algorithm computes 
complexity necessary time verify adjacency vertices 
procedure mn path adjacent return return mn path mn return mn path mn path returned procedure mn path called maximum neighbor path 
denote real distance approximate distance returned algorithm 
employ types vertex orderings breadth orderings lexicographic breadth search orderings rose lexical orderings 
vn ordering vertex set graph write ordering vertex smaller number vertex bk abbreviation ai bj 
vertex define layers respect vertex follows li 
breadth search bfs started vertex vertices graph vertices numbered decreasing order 
vertex numbered put initially empty queue vertices 
vertex head queue repeatedly removed neighbors consequently numbered placed queue 
clearly bfs operates proceeding vertices layers vertices closest start vertex numbered distant vertices numbered 
bfs may seen generate rooted tree vertex root 
vertex father exactly neighbors inserted queue removed 
ordering vertex set graph generated bfs called bfs ordering denote farther vertex respect 
properties bfs ordering follows 
layers considered respect frequently notation li li 
li lj yin 
lq lq vertex lq largest number mn 
mn mn mn 
lj mn mn mn mn particular mn 
lexicographic breadth search lexbfs started vertex orders vertices graph assigning numbers way 
vertex gets number available number signed vertex lexically largest vector sn sn sk si ifv adjacent vertex numbered si 
ordering vertex set graph generated lexbfs call lexbfs ordering 
known lexbfs ordering property cf 
ordering fulfilling generated lexbfs 
cand ac bc exists vertex db da shown graph admits lexical ordering ordering band ac bc exists vertex da allowed 
clearly lexical ordering lexbfs ordering lexbfs ordering bfs ordering conversely 
note graph bfs ordering lexbfs ordering generated linear time date fastest method doubly lexical ordering closed neighborhood matrix producing lexical ordering takes log time 
distances graphs weakly chordal hierarchy section consider different subclasses weakly chordal graphs 
weakly chordal graphs considered section 
simple useful lemma holds arbitrary graphs 
lemma 
exist integers mn holds holds 
holds proof 
proof induction 
assume holds consider pair apasp algorithm mn 
mn induction mn mn holds 
mn xk xk arbitrary path ordering vertex set graph 
path monotonic respect xk xk holds xk convex index xi xi xi xk xk 
vertex xi called switching point convex path estimating pairs shortest paths restricted graph families xk shortest path connecting xk 
say rightmost shortest path sum xk largest shortest paths connecting xk 
employing lexbfs orderings hh free graph lexbfs ordering byp denote path vertices 
lemma 
induced 
corollary 
distinct vertices ab ac bc vertex adjacent lemma 
rightmost shortest path monotonic convex 
xk rightmost shortest path convex xi switching point xi xk xi xk 
lemma 
pair vertices 
mn holds 
proof 
rightmost shortest path connecting vertices lemma 
assume mn 
vertices mn adjacent replace get shortest path larger sum contradicting choice path wehave 
lemma adjacent 
apply corollary vx get vertex uv ux furthermore adjacent mn house formed induced impossible hh free graph unfortunately result extended weakly chordal graphs 
integer exist weakly chordal graph lexbfs ordering pair vertices yin mn 
gives weakly chordal graph example easily extended larger 
lemma 
pair vertices 
mn exists vertex exists vertex mn fig 

weakly chordal graph lexbfs ordering 
fig 

lexbfs ordering sun 
fig 

lexbfs ordering domino 
proof 
clearly mn mn mn 
assume mn vertex path mn wehave mn 
lemma mn adjacent 
proceed proof lemma construct induced house hh free graph impossible 
may assume mn vertex mn 
mn andy mn 
mn mn mn mn 
lemma 
pair vertices mn exists vertex mn contains domino induced subgraph holds 
proof 
mn mn mn maximum neighbors respectively 
vz vy property xu xw lemma vertices adjacent 
uy get induced house impossible 
apply lemma toy get 
vertex mn adjacent wv vertices induce house cycle length 
induced subgraphs forbidden adjacent vertices form induced domino 
consider maximum neighbors mn mn mn respectively 

hu hw shown vertices form induced domino edges vu vh uw wt hs st mn mn mn edges 
cycle ofg length induced 
cycles forbidden hw estimating pairs shortest paths restricted graph families hu vertices induce house impossible note adjacent mn mn 
remains consider case hw case apasp algorithm 

combining lemmas obtain results hh free free chordal graphs 
theorem 
hh free graph lexbfs ordering vertices distances returned algorithm apasp satisfy inequality 
corollary 
distances hh free graphs additive sided error time 
theorem 
free graph lexbfs ordering vertices distances returned algorithm apasp satisfy inequality 
corollary 
distances free graphs additive sided error time 
corollary 
distances chordal graphs additive sided error time 
note bounds theorems tight 
shows chordal graph lexbfs ordering difference achieve gives similar example hh free graphs 
figures dark edges indicate maximum neighbor path vertices numbered 
distance hereditary graphs method gives exact distances 
theorem 
distance hereditary graph lexbfs ordering distances returned algorithm apasp real distances proof 
lemmas consider case mn exists vertex mn consider maximum neighbor mn ofu 
mn property mn mn wv lemma vertex adjacent mn 
mn get induced house induced fan depending adjacency distance hereditary graphs contain induced subgraphs 
adjacent mn adjacent apply corollary mn mn get vertex mn tw zt mn vertex adjacent created induced house formed mn contradicting fact distance hereditary 
corollary 
pairs shortest path problem distance hereditary graphs solved time 
lemma allows state interesting result 
needs compute exact distances hh free graph time know advance square recall square graph vertex set vertices adjacent distance 
unfortunately computing split graphs subclass chordal graphs hard general graphs 
theorem 
hh free graph lexbfs ordering square 
pairs shortest path problem solved time 
proof 
vn lexbfs ordering clearly see lemma modification apasp algorithm computes exact distances vi vi downto downto vi vj vi vj vi vj mn vi vj return distances adjacency matrix algorithm clearly runs time 
corollary 
pairs shortest path problem free graph solved time known 
corollary 
pairs shortest path problem chordal graph solved time known 
employing lexical orderings subsection consider strongly chordal graphs chordal bipartite graphs 
theorem 
strongly chordal graph lexical ordering distances returned algorithm apasp real distances estimating pairs shortest paths restricted graph families proof 
lexical ordering graph lexbfs ordering strongly chordal graphs hh free chordal graphs lemmas applied 
lemmas lemma consider case claim case impossible 
known lexical ordering strongly chordal graph strong elimination ordering 
consider vertex 
zv zu mn mn mn contradiction strong elimination ordering arises 
corollary 
pairs shortest path problem strongly chordal graphs solved time 
interval graphs strongly chordal immediately conclude 
corollary 
pairs shortest path problem interval graphs solved time 
similar way prove proof omitted 
theorem 
chordal bipartite graph lexical ordering distances returned algorithm apasp real distances corollary 
pairs shortest path problem chordal bipartite graphs solved time 
distances graphs small size largest induced cycle employing bfs orderings order capture notion small induced cycles define graph chordal induced cycles size greater note chordal graphs precisely chordal graphs weakly chordal graphs chordal graphs free graphs chordal 
chordal graphs obtained results proofs 
interesting note simple bfs orderings succeed getting approximation distances chordal graphs small 
theorem 
chordal graph bfs ordering vertices distances returned algorithm apasp satisfy inequality 
corollary 
distances chordal graphs additive sided error time 
corollary 
distances hole free graphs additive sided error time 
corollary 
distances weakly chordal graphs additive sided error time 
result strengthened free graphs 
prove 
theorem 
free graph bfs ordering vertices distances returned algorithm apasp satisfy inequality 
corollary 
distances free graphs additive sided error time 
figures graphs bfs orderings show bound stated theorem tight chordal graphs 
orderings shown figures lexbfs orderings fig 

weakly chordal graph lexbfs ordering 
fig 

chordal graph lexbfs ordering 
fig 

chordal graph lexbfs ordering 
estimating pairs shortest paths restricted graph families considering lexbfs bfs theorem give better bound 
furthermore domino lexbfs ordering shows bound theorem free graphs tight 
note distances chordal graphs considered 
shown chordal graph exists tree dg dt 
tree constructed linear time 
research partially supported dfg 

chekuri indyk motwani fast estimation diameter shortest paths matrix multiplications siam computing 

alon galil margalit exponent pairs shortest path problem proceedings nd annual ieee symposium foundations computer science 

atallah chen lee optimal algorithm shortest paths weighted interval circular arc graphs applications proceedings european symposium algorithms lecture notes computer science 

awerbuch berger peleg near linear cost sequential distributed constructions sparse neighborhood covers proceedings th annual ieee symposium foundations computer science 

rangan pairs shortest length strongly chordal graphs discrete applied math 

khanna motwani diameter verification boolean matrix multiplication technical report stan cs department computer stanford university 

dt algorithmic hypertree structure maximum neighborhood orderings discrete applied math 

dt distance approximating trees chordal dually chordal graphs journal algorithms 

dt le graph classes survey siam monographs discrete mathematics applications 

chen solving shortest paths problem bipartite permutation graphs efficiently information processing letters 

note distance approximating trees graphs europ 
combinatorics 

cohen fast constructing spanners paths stretch extended proceedings th annual ieee symposium foundations computer science 

coppersmith winograd matrix multiplication arithmetic progression proceedings th acm symposium theory computing 

dahlhaus optimal parallel algorithms vertices distance problem certain graph classes proceedings international workshop graph theoretic concepts computer science lecture notes computer science 

dor halperin zwick pairs shortest paths proceedings th annual ieee symposium foundations computer science 

diameter hose hole free graph linear time lexbfs discrete applied math 

dt lexbfs orderings powers graphs proceedings international workshop graph theoretic concepts computer science lecture notes computer science 

everett corneil recognizing visibility graphs spiral polygons journal algorithms 

golumbic algorithmic graph theory perfect graphs academic press new york 

han chandra sridhar unified pairs shortest path algorithms chordal hierarchy discrete applied math 

chin wen ho jou ming chang solving pairs shortest length problem chordal bipartite graphs information processing letters 

semi perfect elimination advances applied math 

doubly lexical orderings matrices siam computing 

simple algorithm pairs shortest path problem interval graph networks 

motwani perfect graphs convex covers siam discrete math 

motwani covering orthogonal polygons star polygons perfect graphs approach computer system sciences 

paige tarjan partition refinement algorithms siam computing 

ravi marathe rangan optimal algorithm solve pair shortest path problem interval graphs networks 

seidel pair shortest path problem proceedings th acm symposium theory computing 

doubly lexical ordering dense matrices information processing letters 

rose tarjan lueker algorithmic aspects vertex elimination graphs siam computing 

sridhar han efficient algorithms shortest distance queries special classes polygons theoretical computer science 

sridhar joshi efficient algorithms shortest distance queries interval directed path circular arc graphs proceedings th international conference computing information 
