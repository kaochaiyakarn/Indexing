features feature interactions software engineering logic van der johan vub ac vub ac system software engineering lab programming technology lab vrije universiteit brussel belgium vrije universiteit brussel belgium feature interactions common composing software unit features 
report experimental approaches logic describe features feature interactions 
approach proposes description logic formalization feature models allow reasoning features 
second approach metalevel representation software proposed capture conditions features 
conditions written terms software implementation providing uniform formalism applied software unit 
concepts feature feature interaction originated 
context feature addition functionality basic telephone system providing new behaviour 
feature interaction occurs behaviour feature influences behaviour 
features interact unwanted way feature interference occurs 
feature software engineering seen concern software application 
composition features lead interactions features 
feature interference occurs existing new features interact feature behave correctly 
discusses experiments feature interactions software engineering 
section describe approach description logic introduced formally specify features problem domain 
research assistant fund scientific research flanders belgium logic reasoning mechanisms detect feature interactions telecommunication domain 
approach want support feature descriptions interaction detection feature modeling configuration domain engineering generative programming 
want start discussion information described reasoning tasks feature modeling tool provide 
section introduce second approach logic meta programming detect feature interactions solution domain 
model features system logic metalevel representation system implementation 
additional conditions constraints implementation structure expressed metalevel structure 
adding new software artifacts implementing new feature system change metalevel representation 
feature interference lead falsification conditions constraints imposed developer 
description logics feature modeling general idea description logic dl formally specify features 
experimental approach initiated development language capturing feature modeling generative programming 
feature interaction specified dependencies different features constraints applied 
description logics family description logics originated knowledge representation research artificial intelligence 
main strength comes different reasoning mechanisms offer 
complexity reasoning different languages widely investigated 
languages applied industrial level 
basic elements description logic concepts roles 
concept denotes set individuals role denotes binary relation individuals 
arbitrary concepts roles formed starting set atomic concepts atomic roles applying concept role constructors 
description logics refer 
feature modeling dl want start discussion information described reasoning tasks feature modeling tool provide 
covered section 
feature models appear feature oriented domain analysis method generative programming 
context feature model consists feature diagram additional information 
information consists descriptions feature rationales feature stakeholders client programs examples systems feature constraints default dependency rules availability binding sites binding modes open closed attributes priorities 
aspect configuration interpreted modeling configuration features aspects 
section introduces basic feature language fml describing semantics features constraints 
fml dl 
syntax semantics logic concepts denoted formed follows denotes atomic concept denotes atomic role denotes strict positive integer 
abbreviations 
descriptive semantics defined interpretation function adopted see 
knowledge base pair box finite possibly empty set expressions form concepts 
inclusion specifies gives necessary conditions instance 
equivalent 
formulas box called terminological axioms 
box finite possibly empty set expressions form concept role individuals 
restrictions posed terminological axioms 
means atomic concept may appear left side axiom 
terminological axioms may contain cycles concept right part axiom may refer concept left part axiom 
feature language fml completely dl 
fix signature con rol ind con countable set atomic concepts rol countable set atomic roles ind countable set individuals 
fml feature model set terminological axioms 
abox empty fml 
feature diagram translated axioms fml 
set con consists concepts corresponding nodes diagram 
set rel consists roles corresponding edges diagram 
edge decorations translated concept constructors 
consider example feature description car 
car consists transmission horsepower optionally 
transmission manual automatic 
feature model expressed fml shown 
transmission man manual xor aut automatic car trans transmission power horsepower knowledge base corresponding features car 
cardinality constraints 
cardinality constraints expressed feature model language fml 
constructors admit kinds constraints 
constraints 
constraints integrated concept definitions constraint car horsepower car greater equal written follows car trans transmission power horsepower power constraint involves concrete domains implies integration domain language fml 
integration concrete domains dl described 
constraint naturally expressed fml disjointness features 
fact manual automatic feature disjoint expressed manual automatic 
note order logic equivalent stands unary predicate strict positive integers greater equal 
reasoning tasks feature modeling tool support feature models contain support feature notation different dependencies constraints 
dl formalize feature models enables execution certain tasks left developer 
section shows standard reasoning tasks dl accomplish certain tasks 
standard reasoning tasks considered dl terminological level subsumption concept consistency knowledge base consistency 
subsumes iff models knowledge base interpretation subset interpretation 
concept consistent admits model non empty interpretation 
knowledge base consistent exists model exptime complete 
feature model consistency feature model consistent possible implement system obeying model 
checking model consistent corresponds verification feasibility build system 
feature consistency feature consistent instantiated respect feature model 
feature inconsistent due 
feature subsumption feature subsumes feature possible instantiations feature model interpretation subset interpretation 
subsumption gives rise classification features appearing feature model 
allows deduction properties feature 
feature constraint addition addition feature constraint lead replacement specific subformula terminological axiom 
boils addition specification 
seen function mapping specifications specifications 
function analogous function 
consistency addition knowledge base reduces knowledge base consistency 
approach dl natural way express feature diagrams constraints 
inclusion additional information feature model needs investigation 
extend connection gr language multi modal counterpart useful context idea description language able define notions involving self 
logic meta programming feature interaction detection development software application addition particular software artifacts components aspects objects 
implementing certain feature introduce interactions software artifacts 
approach try declarative logic metalevel representation feature implementation detect feature interaction interference 
editor case consider simple editor user able draw points screen interconnect form lines polygons 
basic system service allows functionality 
object oriented language implement system 
want add uml diagram editor 
additional features simple editor 
instance add feature implementing archival figures disk add color feature allowing color points lines polygons 
color feature feature interference occur archival color feature original archival feature store color point line polygon 
logic meta programming approach logic meta programming lmp technique capability declaratively capturing structure program 
metalevel representation software application consists logic facts 
possible representation editor example class point 
class line 
class polygon 
method point move arguments statements method point draw arguments statements 
logic rules derive higher level representation design level 
rules lmp technique extensively detect programming patterns trace impact changes implementation check conformance corresponding design architectural description 
augment automatically generated metalevel representation software program logic assertions classifying software artifact features 
editor example means feature figures class point class line class polygon feature archival method point store method line store method polygon store feature method point move method line move method polygon move feature ui class method point draw method line draw method polygon draw 
features explicitly defined terms software artifacts implement able reason interaction features metalevel representation entire program 
feature determine features interacts directly method calls access shared variables 
system implementing lot features developer derive features affected change particular feature addition new feature 
logic rule detects access instance variable different features written follows feature feature feature method accesses method feature method accesses method 
clarity include implementation predicates rule feature feature feature list member method classname methodname list classname methodname 
accesses method instvar reads method instvar 
accesses method instvar writes method instvar 
rules reads writes part soul framework developed 
show implemented logic rules reason logic metalevel representation 
logic variables written rules detect feature interactions 
detect feature interference include logic rules express constraints invariants implementation 
example figures class instvar class instvar archival method accesses method instvar 
rule expresses simple invariant states archival feature instance variable classes feature figures accessed method archival feature 
expresses condition archival feature save part state figures 
adding new feature editor introduce conflicts features depending implementation 
illustrated adding colors figures interfere archival feature 
change original feature figures add complete new color feature change boil introducing new state variables point line polygon classes 
change implementation store method archival invariant satisfied feature interference detected resolution engine 
experimental approach lmp promises viable technique support feature interaction problems software development 
research investigate general methodology feature interaction detection lmp 
summary described approaches dealing feature interactions software engineering logic 
approach defined formal language feature modeling problem domain dl 
second approach uses lmp approach detect feature interaction solution domain 
approaches open research questions related kind information necessary sufficient allow reasoning feature interactions 
de rijke 
feature interaction stable models 
proceedings nd wfm florian october 

logic engineering 
case description hybrid logics 
phd thesis illc university amsterdam 
bouma de rijke 
description logics feature interaction 
lambrix borgida lenzerini ller patel schneider editors proceedings international workshop description logics dl pages 
bouma de rijke 
feature interaction satisfiability problem 
proceedings mascots october 
baader hanschke 
scheme integrating concrete domains concept languages 
proceedings th international joint conference artificial intelligence ijcai pages sydney australia 
czarnecki eisenecker 
generative programming methods tools applications 
addison wesley 
jonathan hay 
composing features resolving interactions 
david rosenblum editor proceedings eighth international symposium foundations software engineering pages 
acm press november 
kang cohen hess nowak peterson 
feature oriented domain analysis feasibility study 
technical report cmu sei tr software engineering institute carnegie mellon university pittsburgh pa november 
rashid 
aspect composition applying design contract principle 
proceedings net erf rt germany october 
buchheit donini schaerf decidable reasoning terminological knowledge representation systems 
journal artificial intelligence research 
kim mens 
automating architectural conformance checking means logic meta programming 
phd thesis vrije universiteit brussel october 
kuehn feature service interaction problem telecommunications systems survey 
ieee transactions software engineering october 
wuyts 
logic meta programming approach support evolution object oriented design implementation 
phd thesis vrije universiteit brussel january 

