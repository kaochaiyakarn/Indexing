violin virtual internetworking overlay infrastructure jiang xu purdue university west lafayette usa cs purdue edu 
propose novel application level virtual network architecture called violin virtual internetworking overlay infrastructure 
isolated virtual networks created top overlay infrastructure planetlab 
entities violin include virtual hosts routers switches implemented software hosted physical overlay hosts 
novel features violin include violin virtual world ip address space 
computation communications strictly confined violin 
violin entities created deleted migrated demand 
value added network services widely deployed real internet provided violin 
designed implemented prototype violin planetlab 
current internet provides basic network services ip unicast 
years overlay networks emerged application level realization value added network services anycast multicast reliable multicast active networking 
highly practical effective overlays problems application functions network services closely coupled overlay making development management overlays complicated 
development overlay network services mainly individual efforts leading standards reusable protocols 
advanced network services developed widely deployed 
hard isolate overlay rest internet making easy compromised overlay node attack internet hosts 
propose novel virtual network architecture called violin virtual internetworking overlay infrastructure motivated advances virtual machine technologies 
idea create virtual isolated network environments top overlay infrastructure 
violin consists virtual routers lans hosts software entities hosted overlay hosts 
key difference violin application level overlay violin re introduces system os enforced boundary applications slight abuse terms violin stands virtual network technique virtual network 
network services 
result violin advanced internet running value added network level protocols routing transport management 
novel features violin include violin virtual world ip address space 
computation communications strictly confined violin 
violin entities software leading high flexibility allowing demand addition deletion migration configuration 
value added network services widely deployed real internet provided violin 
legacy applications run violin modification new applications leverage advanced network services provided violin 
expect violin useful complement application level overlays 
violin create testbeds network level experiments 
testbed contains realistic network entities topology provides researchers convenience experiment setup configuration 
second violin create service oriented virtual ip network advanced network services ip multicast anycast benefit distributed applications video conferencing line community peer selection 
designed implemented prototype violin planetlab 
number distributed applications deployed violin 
rest organized follows 
section provides overview vi olin 
section justifies design violin benefit distributed applications 
section describes implementation ongoing research problems violin 
section presents preliminary performance measurements planetlab 
section compares violin related works 
section concludes outlines ongoing 
violin overview concept violin illustrated 
low level plane real ip network mid level plane overlay infrastructure planetlab top level plane shows violin created overlay infrastructure 
entities violin hosted overlay hosts types entities real network host lan router 
virtual host virtual machine running physical overlay host 
possible physical overlay host supports multiple belonging different 
virtual lan constructed creating virtual switch shown connects multiple 
virtual router virtual machine multiple virtual nics 
interconnects 
shows simple violin create planetlab 
interconnected hosted planetlab cs purdue edu violin overlay infrastructure internet virtual host virtual router overlay host internet router fig 

violin overlay infrastructure underlying ip network comprises comprises 
links entities emulate cables real world 
ip address space violin completely independent 
safely overlap address space violin real internet 
violin design justification section case violin describe applications including network experiments benefit violin 
virtualization isolation analogous relation virtual machine host machine vi olin involves network virtualization leads isolation vio lin underlying ip network 
virtualization possible run unmodified internet protocols 
furthermore entities violin decoupled underlying internet 
example perform traceroute hosted planetlab cs princeton edu hosted planetlab cs washington edu see intermediate router hop count planetlab hosts princeton uw hops apart actual internet 
interestingly potentially feasible repeat virtualization recursively level violin created level violin level real internet 
planetlab cs princeton edu planetlab cs duke edu planetlab cs duke edu planetlab cs purdue edu planetlab cs washington edu simple violin planetlab planetlab cs purdue edu planetlab millennium berkeley edu fig 

violin planetlab names physical planetlab hosts virtual ip addresses network isolation respect administration owner vio lin full administrator privilege violin address space protocol ip address spaces safely overlap versions implementations network protocols different example running ipv running ipv attack fault impact attack fault violin affect rest internet resources underlying overlay infrastructure provides qos support violin able achieve resource isolation local resources cpu memory violin entities network bandwidth 
benefit applications system level virtualization isolation provide confined dedicated environment untrusted distributed applications risky network experiments 
perspective applications requiring strong confidentiality violin prevent internal information leakage external attacks 
system enforced layering contrary application level overlays violin enforces strong layering order disentangle application functions network services 
addition layering provides better protections network services application level software compromised 
note layering incur performance overhead compared application level overlays 
note layering application network functions network protocols 
fact violin testbed protocol heap architecture 
benefit applications application developers able focus application functions network services leading clean design easy implementation 
addition legacy applications run violin modification re compilation 
network service provisioning violin provides new opportunity deploy evaluate advanced network services 
exist large number designed network protocols widely deployed 
examples include ip multicast scalable reliable multicast ip anycast active networking 
protocols initial stage incremental deployment ipv 
violin platform protocols virtual reality 
benefit applications violin allows applications take full advantage value added network services 
example violin capable ip multicast applications publish subscribe layered media broadcast conveniently developed real internet 
envision emergence service oriented high performance deployed strategic locations example close internet routing centers close domain gateways clients connect violin access advanced network services 
easy reconfigurability software virtualization techniques violin achieves easy reconfigurability 
different physical network added removed migrated dynamically 
dynamically added removed number ports supported longer hardware constraint 
benefit applications easy reconfigurability hot plug capability violin especially useful handle dynamic load membership distributed applications 
violin created torn demand application scale topology adjusted demand driven fashion 
example multicast session new dynamically grafted accommodate participants 
violin implementation virtual machine violin entities implemented virtual machines vms overlay hosts 
adopt user mode linux uml vm technology 
uml allows linux applications run top modification 
ptrace mechanism uml guest os virtual machine performs system call redirection signal handling emulate real os 
specifically guest os notified application running virtual machine issues system call guest os redirect system call implementation original call 
important feature uml completely implemented user level requiring host os kernel modifications 
unfortunately original uml serious limitation virtual nics virtual links virtual machines restricted physical host 
inter host virtual links essential violin reported current vm projects 
break physical host boundary performed non trivial extension uml introduced transport tunneling 
specifically udp tunneling internet domain emulate physical layer violin domain 
example emulate physical link guest os opens udp transport connection obtains file descriptor host os domain 
receive data signal generated host os file descriptor data available 
maintains ip address udp port number internet domain correctly emulate data link layer frame forwarding 
virtualization transparent network protocol stack guest os 
inter host tunneling enables hot plug play section exhibit mtu effect ip ip approaches 
virtual switch created responsible packet forwarding virtual data link layer 
shows connects multiple 
emulated udp daemon host os domain 
poll system call poll arrival data perform data queuing forwarding dropping 
delicate link characteristics may implemented udp daemon 
poll system call notifies udp daemon arrival connect request new joining new port created shown 
virtual router interestingly intrinsic difference implementation additional packet forwarding capability user level routines configuration packet processing policies 
linux source tree possible accommodate versatile extensible packet processing capabilities 
uml bootstrapped recognizable file system located mounted root file system 
uml requires kernel level support capability packet forwarding user level routines route configuration interface addresses routing table entries 
packet forwarding capability easy add firewall nat value added services uml kernel 
port port port control port setp request new setp new port created step physical connection established fig 

steps port creation violin implementation adopt zebra open source routing package provides comprehensive suite routing protocol implementations 
enable active network services incorporated click optional package 
violin performance implemented violin prototype deployed planetlab 
evaluate performance vm communications violin performed throughput latency measurement vms 
figures show set representative results 
vms hosted planetlab nodes planetlab lcs mit edu planetlab cs berkeley edu respectively 
measure tcp throughput icmp latency vms performing udp payload encryption 
comparison measured tcp throughput icmp latency planetlab hosts 
measurement results show violin introduces average degradation tcp throughput compared tcp throughput underlying physical hosts 
addition degradation due vm traffic encryption average 
degree icmp latency degradation increase tcp throughput 
demonstrate violin support advanced network services run legacy video streaming application violin 
requires ip multicast runnable planetlab 
wave video able execute violin vms 
vm hosted planetlab cs wisc edu source video multicast session 
streams short frame video clip virtual ip multicast address 
vms receivers different domains princeton purdue duke 
average peak signal noise ratios psnr video frames observed vms domains shown 
tcp throughput icmp latency fig 

tcp throughput icmp latency vms violin psnr db purdue princeton duke frame number fig 

video streaming quality ip multicast enabled violin related violin possible planetlab provides resource virtualization capability called slicing 
netbed wide area testbed network distributed system experiments 
high portability violin deployed netbed 
application level overlays achieved significant success years 
example ron achieves robust routing packet forwarding application hosts narada protocol brings high network efficiency system multicast 
violin proposed alternative complement application level overlays especially legacy applications untrusted applications require strong network confinement 
machine virtualization received tremendous attention 
vmware fully virtualizes pc hardware denali xen take approach creating virtual machine similar identical physical machine 
inspired machine virtualization violin initial effort network virtualization 
bone provides automated deployment remote monitoring overlays allows network entities hosts routers participate multiple overlays simultaneously 
layer ip ip tunneling approach bone real internet ips visible entities overlay domain leading lower degree isolation confinement violin 
ongoing violin novel alternative useful complement applicationlevel overlays 
software virtualization techniques violin creates virtual internetworking environment deployment advanced network services modifications internet infrastructure 
properties isolation enforced layering easy reconfigurability violin excellent platform execution high risk network experiments legacy applications unaware overlay apis untrusted potentially malicious applications 
ongoing includes performance evaluation comparison violin involves virtualization techniques overlay infrastructure 
evaluate performance resilience adaptability violin compared real internet application level overlays 
especially match performance application level overlays additional computation communication capacity need allocated 
video multicast application violin demonstrates performance comparable counterpart application level overlay 
depth evaluation measurement needed questions answered 
refinement network virtualization technique inter host tunneling implementation initial plenty room refinement improvement 
example improve reliability virtual links 
adopt transport protocol tcp integrate error correction fec udp simply transport protocols violin domain achieve reliability 
monitor status virtual links possible leverage routing underlay better internet friendliness 
topology planning optimization implementation provides mechanisms dynamic violin topology setup adjustment 
studied problem violin topology planning optimization 
specifically overlay infrastructure place order achieve internet bandwidth efficiency satisfactory application performance 
violin react dynamics internet condition application workload dynamic reconfigurability section 
acknowledgments anonymous reviewers reviews 
supported part national science foundation nsf sci 

calvert bhattacharjee zegura directions active networks 
ieee communications magazine 
towsley kurose scalable reliable multicast multiple multicast channels 
ieee acm trans 
networking 
wroclawski framework scalable global ip anycast gia 
proc 
acm sigcomm 
liu estrin shenker zhang local error recovery srm comparison approaches 
ieee acm trans 
networking 
wetherall guttag tennenhouse ants network services red tape 
ieee computer 
fraser hand harris ho pratt warfield barham neugebauer xen art virtualization 
proc 
acm sosp 
whitaker shaw gribble scale performance denali isolation kernel 
proc 
usenix osdi 
stoica shenker zhang core stateless fair queueing scalable architecture approximate fair bandwidth allocations high speed networks 
ieee acm trans 
networking 
subramanian stoica balakrishnan katz overqos offering internet qos overlays 
proc 
acm hotnets 
jiang xu vm emulation testbed 
proc 
acm sig comm workshops 
braden faber handley protocol stack protocol heap role architecture 
proc 
acm hotnets 
dike user mode linux 
user mode linux sourceforge net 
vmware 
www vmware com 
tunneling ethernet frames ip datagrams 
www faqs org rfcs rfc html 
touch dynamic internet overlay deployment management bone 
proc 
ieee icnp 
ishiguro zebra 
www zebra org 
kohler morris chen jannotti kaashoek click modular router 
acm trans 
computer systems 
peterson anderson culler roscoe blueprint introducing disruptive technology internet 
proc 
acm hotnets 
white lepreau stoller ricci hibler barb integrated experimental environment distributed systems networks 
proc 
usenix osdi 
andersen balakrishnan kaashoek morris resilient overlay networks 
proc 
acm sosp 
chu rao zhang case system multicast 
proc 
acm sigmetrics 
peterson routing underlay overlay networks 
proc 
acm sigcomm 
