component model building systems software geoff coulson gordon blair paul grace kevin lee jo computing department lancaster university uk geoff gordon grace leek comp lancs ac uk opencom experimental language independent component systems building technology 
opencom offers merely component programming model 
runtime component model supports dynamic runtime reconfiguration systems load unload bind rebind components runtime 
second explicitly supports deployment model wide range deployment environments operating systems pdas embedded devices network processors 
third allows particularities different deployment environments selectively hidden visible opencom programmer inherent performance overhead 
key words development reflection systems programming embedded systems 
notion constructing application level software components established 
example substantial component software engineering community numerous component technologies application development standalone distributed available 
examples browser plug ins javabeans enterprise javabeans corba component model 
general benefits technologies promote high level abstraction software design implementation deployment management ii facilitate flexible configuration potentially run time reconfiguration iii foster third party software reuse 
established notion components build systems level software embedded systems operating systems communications systems programmable networking environments middleware platforms 
mentioned benefits appear just compelling area fact recognised number researchers years 
example components various javabeans approaches proposed component models construction middleware platforms knit think mmlite proposed construction operating systems oss click proposed programmable networking environments 
efforts narrowly targeted terms intended application domains intended hardware os deployment environments 
particular deployed conventional desktop machines opposed exotic environments embedded hardware pdas network processors 
propose general purpose component systems building technology 
detail technology addresses requirements wide applicability 
applicable wide range deployment environments standard pc windows pc unix environments pdas embedded systems operating system high speed network processor hardware 
implies small memory footprint language independence policy independence 
policy independence 
offer generic mechanisms prescribe policies constraints services facilities specific particular application domains real time multimedia availability deployment environments mentioned 
support runtime reconfiguration 
support mechanism level runtime reconfiguration required implementing inherently dynamic target systems operating systems reflective middleware active networking nodes 
policy controls manages reconfiguration separable 
selective transparency deployment features 
requirement wide applicability operate heterogeneous deployment environments non standard features multiple processing elements packet processing assists specific hardware message channels memory hierarchies possible render features invisible far possible visible required performance functionality reasons 
features visible terms generic component programming model 
separation concerns 
encourage separation concerns potentially complex environment 
example mentioned separation mechanism policy technology separate concerns programming base functionality target system versus managing runtime reconfiguration ii providing selective transparency deployment environment specifics versus writing target systems terms generic component programming model 
high performance 
incur inherent performance cost 
implies band execution path systems dependent execution component model runtime 
addition presenting non standard features terms generic programming model incur small performance penalty possible 
architectural approach meeting requirements define generic run time component model see section foundation augment notions component frameworks reflective metamodels 
component frameworks cfs composite components built terms underlying component model accept plug components add modify behaviour composite 
serve architectural place holders applicationspecific deployment environment specific policies constraints services facilities 
idea cf addresses particular functional domain protocol stacking thread scheduling packet forwarding memory management user interaction embodies policies constraints sense domain 
example cf protocol stacking take protocol components plug ins constrain plug ins composed linear stacks 
note design implementation cfs require generic services provided foundational component model essentially cfs architectural patterns distinct mechanisms 
reflective meta models causally connected representations selected aspects target system 
function enable inspection adaptation represented aspect 
example employ socalled architecture meta model represents topology set composed components architecture graph inspected discover topology adapted change topology adding node graph results deployment new component removing arc results breaking inter component binding 
purpose reflective meta models maintain clean architectural separation concerns system building called base level programming system management configuration adaptation involves meta interfaces provided meta models referred meta programming 
reflective metamodels implemented cfs implementation require generic services provided foundational component model 
note opencom component model builds generalises earlier opencom build middleware platforms standard os environments 
remainder section overviews design opencom component programming model 
section identifies set orthogonal programmer roles help separate concerns developing opencom system new hardware platform 
section discusses related section offers 

opencom programming model overview opencom programming model essentially consists primitives load components units scope management called capsules bind component interfaces 
components may support number interfaces described extended omg idl anti interfaces express dependency interface provided component may composite composed internal sub components 
importantly interface receptacle binding third party operation code binds receptacle component interface reside component capsule 
components interfaces support attachment arbitrary meta data form name value pairs 
meta data intended solely higher level cfs embody policy 
interpreted understood component model 
programming model supports notions loaders binders class entities 
nested sub scopes capsules loaders provide various ways loading components various types binders provide various ways binding interfaces different caplet types instances 
loaders binders implemented components plugged hosting cfs 
plug loaders binders play crucial role facilitating deployment opencom wide range deployment environments uniform highly manner ii selectively masking peculiarities underlying deployment environments opencom programmers compromising performance 
concepts capsule component interface receptacle caplet loader binder 
shows capsule containing dotted boxes distinction root slave discussed section 
shown loaders associated left hand caplet associated binders knows bind components left hand caplet knows bind slave 
components shown rounded rectangles 
component interfaces shown circles cups 

slave caplet kernel api root caplet slave caplet fig 

opencom programming model caplet cf plug hosted cf called caplet cf 
examples caplet plug ins usefully provided standard os environment implemented separate os processes isolate trusted untrusted components java virtual machine wrapped caplet java implemented opencom components exist capsule say implemented components car area network similar embedded networked environment cpus network represented individual system represented single capsule network processor environment caplet map unix process control processor host pc map specialised processor memory environments 
degree physical distribution capsule implementation dependent 
extreme position example provide capsule containing run separate machines 
general intention capsule relatively centralised capsule state held bindings components different assumed relatively reliable deterministic fast application definitions terms 
caplet cf api follows loaded caplet caplet cf load caplet type status caplet cf unload loaded caplet caplet instance caplet cf instantiate loaded caplet list name value status caplet cf destroy caplet instance packaged standard opencom components loaded instantiated api 
despite uniform packaging emphasised different may implemented differently 
cases example caplet component loaded may merely arbitrarily complex deployment caplet creation process 
caplet root slave 
root caplet capsule original capsule environment existed caplet cf loaded 
root caplet distinguished caplet directly support opencom runtime kernel api discussed 
typically core cfs caplet loader binder cfs reside root caplet direct access kernel 
created api slaves 
default slaves allow hosted components bind core cfs kernel api components create load bind components arbitrary 
core cfs kernel api selectively hidden individual slave security reasons 
example components low privileged slave caplet may denied access caplet cf disallow creating 
loader binder cfs plug loaders binders encompass wide range functionality 
example consider loaders know non standard component repositories different component packaging conventions loader performs recursive component loaded dependencies denoted available capsule automatically pre loaded loader transparently load balances set manages binders exploit alternative connectivity technologies interrupts call gates buses shared memory message passing services binders represent different cost performance trade offs binders bindings support interception metamodel api managing plug loaders binders follows general pattern caplet cf api shown 
brief operations load new loader binder plug unload plug main api calls loader binder plug ins follows loaded component loader cf load component type loaded component loader cf load caplet component type loaded component loader cf load loader name component type loaded component loader cf load caplet loader name component type binding binder cf bind interface instance receptacle instance binding binder cf bind binder name interface instance receptacle instance load signatures offer selective transparency choice loader caplet load 
specifically opt full transparency loader target caplet explicitly named partial transparency target caplet specified loader unspecified vice versa transparency loader target caplet explicitly named 
analogous choice explicitly name binder available bind signatures 
cases involving transparency policy choice loader binder target caplet embedded policy plug selects dispatches real loader binder caplet 
usually policy informed name value meta data attached various involved entities 
example transparently loading component attached meta data attribute caplet type privileged loader policy dispatch loader shared attribute name value 
loaders binders simple example transparent loader binder cf apis consider code loads binds components component instance loaded component loaded loaded interface type type loaded loader cf load component type loaded loader cf load component type loader cf instantiate loaded interface type loader cf instantiate loaded type binder cf bind uses specific transparent load signature load components results loader policy dispatching appropriate caplet loaders respectively 
having instantiated components respective host specific bind signature bind components 
loading case binder policy selects real competent binder basis meta data attached bound interface receptacle meta data presumably relates hosting caplet types 
abstraction power third party loading binding clearly seen example 
employs simple create connect pattern abstracts presence multiple heterogeneous multiple loading binding mechanisms 
code executed unchanged identical semantics component running caplet capsule including components running primitive caplet environments embedded systems 

deploying opencom systems mentioned opencom offers merely runtime programming model building systems terms components 
explicitly addresses deployment model diverse heterogeneous range deployment environments runtime reconfiguration target systems 
facilitated introducing separation concerns roles deployment programmers systems programmers meta systems programmers 
illustrated 
systems programmer role base level opencom programming components cfs caplet loader binder plug ins base level meta level opencom user opencom meta systems programmer role meta level opencom programming deployment programmer role programming native deployment environment architecture interception interface resources deployment env 
meta level plug ins fig 

opencom programmer roles reflective meta models deployment programmers create viable opencom programming model target deployment environment lower quadrants 
bridge implementation gap concrete deployment environment hardware software component programming model 
working small set low level abstractions serve structure organise task deploying opencom 
primarily implementations mentioned caplet loader binder plug ins form suitably canonical set abstractions key services offered heterogeneous deployment environments augmented number additional lower level abstractions discussed visible systems meta systems programmers 
systems programmers standard opencom programming model develop target system application upper left quadrant selectively isolated particularities different deployment environments 
systems programming loosely divided sub roles development generic cfs targeted specific areas functionality target application domain development high level code builds uses cfs 
hard differentiation 
essence systems programming employs pure opencom programming deployment environment specific issues assumed addressed deployment programmer role 
meta systems programmers operate quadrant 
employ appropriate reflective meta models structure task reconfiguring target system runtime 
metamodels generic independent particular deployment environment produced systems programmer role rely deployment environment specific mechanisms implemented deployment programmers 
example operation invocation interception meta model relies detailed knowledge cpu language dependent calling conventions 

related opencom usefully positioned separate categories component model application level models specifically systems oriented models 
regarding opencom differs designs ejb corba component model considerably lightweight 
opencom capsule concept superficially related container concept espoused models opencom capsules policy free contain minimal lowlevel functionality loading binding related 
opencom shares models emphasis third party deployability components opencom third party deployability important reasons software re facilitate system re configurability enable primitive slave representing microcontroller function firstclass players programming model 
opencom differs ejb language independent 
systems building technology aspiration opencom serve basis implementation application level components models approach implement containers policies terms cfs 
regarding specifically systems oriented component models major players knit mmlite think 
knit build time component models components visible runtime systematic support dynamic component loading managed reconfiguration 
knit targeted primarily operating systems additionally build software routers router called clack pcs 
proprietary system philips representative similar efforts embedded systems community 
opencom components support provided required interfaces cf 
interfaces model inherently programming language independent 
mmlite think hand common opencom property run time component models 
mmlite attempt adapt apply microsoft com vehicle building operating systems 
early demonstrated feasibility flexibility component approach including primitive support reconfiguration confined building operating systems conventional pc environments 
think closer opencom goals approach 
opencom addresses dynamic reconfiguration supports multiple implementations binding loading scoping 
demonstrates possibility benefits abstracting hardware devices paging hardware components 
programming model lower level abstraction opencom equivalent opencom meta models manage reconfiguration 
addition far conventional pc deployment environments 

conclude briefly sum benefits opencom revisiting requirements set section showing realised 
wide applicability achieved horizontal extensibility offered caplet loader binder plug capability plus small easy port microkernel runtime 
policy independence achieved providing clear separation foundational component model mechanism higher level cfs embody policy specific areas concern 
support runtime reconfiguration achieved mechanism level means opencom ability load bind rebind components runtime management level means reflective meta models provide inspection adaptation capability cfs provide constraint reconfiguration 
selective transparency specific features achieved wrapping non standard deployment environment specific features terms plug loaders binders offering opencom programmer selective transparency selection plug ins 
separation concerns achieved separation mechanism policy referred ii differentiated programming roles discussed section 
high performance achieved having runtime focus loading binding band respect execution application 
addition performance enhancing mechanisms available deployment environment code morphing availability special hardware message channels directly side effect instantiating corresponding level binding 
additionally apparent overhead idl specified interfaces nullified primitive environments loaders cfs associated primitive environment arbitrarily constrain number form interfaces allow operations take integer arguments forgo stubs skeletons required 
date primarily validated opencom programmable networking systems environment intel ixp network processor 
network processor hardware particularly interesting deployment environment heterogeneous employs number processor types including processors specialised packet forwarding resource poor packet forwarding processors typically primitive small amount memory performance constrained packets forwarded line speeds 
area reported 
ongoing research looking validating systems building approach deploying opencom range application areas deployment environments 
particular investigating opencom mobile grid computing environments building generic os communications layer devices wireless sensor network environments 
szyperski component software object oriented programming addison wesley 
wolfgang emmerich distributed component technologies software engineering implications proc 
th intl conf software engineering orlando florida pp 

mozilla organization project www mozilla org projects 
sun microsystems enterprise javabeans specification version java sun com products ejb index html 
object management group corba components final submission omg document orbos 
dowling cahill component architecture meta model self adaptive software proc 
reflection lncs 
adaptable extensible component platform proc 
reflective middleware new york 
reid flatt stoller lepreau eide knit component composition systems software proc 
osdi pp oct 
stefani lawall muller think software framework component operating system kernels usenix annual technical conf monterey usa june th th 
helander forin mmlite highly system architecture th acm sigops workshop pp sintra portugal sept 
clarke coulson architecture dynamically extensible operating systems 
proc 
th intl 
conf 
configurable distributed systems annapolis md usa may 
kohler morris chen jannotti kaashoek click modular router proc 
acm sosp pp dec 
campbell chou vicente binding tool constructing data paths network processor routers th ieee intl 
conf 
open architectures network programming june 
coulson blair clarke design highly configurable reconfigurable middleware platform acm distributed computing journal vol pp apr 
coulson blair grace performance reflective systems software proc 
intl 
workshop middleware performance mp phoenix arizona satellite workshop ieee intl 
performance computing communications conf 
apr 
hammer evaluation static properties component architectures proc 
th euromicro conf dortmund germany pp ieee computer society press sept 
intel ixp www intel com 
coulson blair lee ye software component approach programmable networking acm sigcomm computer communications review ccr vol october 
schmid coulson blair gomes lee globally applied component model programmable networking proc 
international workshop active networks kyoto japan dec 
grace coulson blair yeung cai duce cooper pluggable overlay networks grid computing appear proc 
distributed objects applications doa cyprus oct 
