finite state non concatenative morphotactics kenneth beesley lauri karttunen beesley xrce xerox com karttunen xrce xerox com 
proceedings fifth workshop acl special interest group computational phonology 
august 
luxembourg 
finite state morphology general tradition level xerox implementations proved successful production robust morphological analyzer generators including large scale commercial systems 
long recognized implementations serious limitations handling non concatenative phenomena 
describe new technique constructing transducers involves reapplying regular expression compiler output 
implemented algorithm called technique proved useful handling non concatenative phenomena demonstrate full stem arabic stem 
natural languages construct words concatenating morphemes strict orders 
concatenative morphotactics impressively productive especially agglutinative languages turkish agglutinative languages 
languages single word may contain morphemes average length english sentence 
finite state morphology tradition level koskenniemi xerox implementations karttunen karttunen beesley karttunen successful implementing large scale robust ecient morphological concatenative languages including commercially important european languages non indo european examples wish stuart newton example 
finnish turkish hungarian 
koskenniemi understood initial implementation signi cant limitations handling non concatenative processes restricted xation handled adequately system 
extensions revisions necessary adequate description languages possessing extensive xation koskenniemi 
limitation course escaped notice various reviewers sproat 
shall argue limitations traditional implementations direct result relying solely concatenation operation description 
describe technique xerox implementation nite state morphology corrects limitations source going concatenation allow full range nite state operations description 
regular expression descriptions compiled nite state automata transducers collectively called networks usual compiler re applied output producing modi ed network 
technique implemented algorithm called compile replace proved useful handling arabic stem described 
illustrating applications rst outline general approach nite state morphology 
lexical uta ma na ka xa wa surface uta ma ka xa wa uta house root ma nd person possessive na ka locative plural xa perfect aspect apparently rd person wa topic marker appears house lexical paris mut surface mu paris root paris mut case go want declare past added indicates distant past negative st person sing 
said wanted go paris finite state morphology analysis generation theory implementation neutral form morphological analysis generation written words modeled relation words analyses words 
computationally shown black box module maps words analyses ect analysis analyses words ect generation 
basic claim hope nite state approach natural language morphology relations represented fact regular relations relations regular languages 
surface language consists strings words sequences symbols written de ned orthography 
commercial application natural language surface language modeled usually set valid french words written standard french analyzer generator analyses words morphological analysis generation relation analyses words orthography 
lexical language consists strings strings designed needs taste linguist representing analyses surface words 
convenient design lexical strings show constituent morphemes form separated identi ed figures 
applications regular expression compiler analysis strings fst word strings compilation regular expression fst maps regular languages may useful design lexical strings contain traditional dictionary citation form linguist selected tag symbols noun verb sg pl convey category person number tense mood case lexical string representing rst person singular indicative form french verb payer pay spelled payer sg verb 
tag symbols stored manipulated just alphabetic symbols print names 
relation nite state de ned metalanguage regular expressions suitable compiler regular expression source code compiled nite state transducer fst shown implements relation computationally 
convention refer upper projection fst representing analyses lexical language set lexical strings refer lower projection surface language consisting surface strings 
compelling advantages computing nite state machines including mathematical elegance exibility natural language applications high eciency data compaction 
computes fsts applying direction input string 
fst written french applied upward direction surface word houses returns related string fem pl noun consisting citation form tag symbols chosen linguist convey surface form feminine noun plural form 
single surface string related multiple lexical strings applying fst upward direction surface string produces related lexical strings shown 
ambiguity surface strings common 
etre sg verb sg verb sg verb imp sg verb multiple analyses conversely fst applied downward direction lexical string etre sg verb return related surface string transducers inherently bidirectional 
ambiguity downward direction possible relation lexical string payer sg verb pay surface strings fact valid alternate spellings standard french orthography 
morphotactics alternations challenges modeling natural language morphology morphotactics phonological alternations finite state morphology models regular expressions 
source descriptions may written higher level notations karttunen karttunen beesley replace rules karttunen karttunen kempe karttunen simply helpful shorthands regular expressions compile dedicated compilers nite state lexicon regular expression rule regular expression compiler lexicon fst rule fst lexical transducer single fst creation lexical transducer networks 
practice commonly separated modules lexicon fst containing lexical strings separately written set rule fsts map strings lexicon properly spelled surface strings 
lexicon description de nes morphotactics language rules de ne alternations 
separately compiled lexicon rule fsts subsequently composed form single lexical transducer karttunen de ned equivalently eciently single regular expression 
lexical transducers built xerox strings lower side transducer ected surface forms language 
strings upper side transducer contain citation forms morpheme number tag symbols indicate ections derivations corresponding surface form 
example information comparative adjective big bigger represented english lexical transducer path sequence states arcs zeros represent epsilon symbols 
lexical side comp surface side path transducer english surface form bigger result composition original lexicon epsilon symbols placement string signi cant 
ignore convenient 
fst rule fst representing regular morphological alternations english 
sake clarity represents upper lexical lower surface side arc label separately opposite sides arc remaining diagrams compact notation upper lower symbol combined single label form upper lower symbols distinct 
single symbol identity pair 
standard notation path labeled comp lexical transducers ecient analysis generation classical twolevel systems koskenniemi morphotactics morphological alternations precompiled need consulted runtime 
possible principle advantageous purposes view regular expressions de ning morphology language virtual network 
nite state operations concatenation union intersection composition simulated apply routine runtime 
languages build words simply morphemes pre xes roots suxes strict orders 
word building processes pre xation straightforwardly modeled nite state terms concatenation 
natural languages exhibit non concatenative morphotactics 
languages called languages employ signi cant concatenation term completely concatenative lavie usually appropriate 
arabic example pre xes suxes attach stems usual concatenative way stems formed process known informally noun plurals formed process known full stem 
arabic include pre xation modeled straightforwardly concatenation complete lexicon obtained non concatenative processes 
proceed descriptions stem handled nite state morphology new compile replace algorithm 
compile replace central idea approach modeling non concatenative processes de ne networks regular expressions de ne strings intermediate network contain appropriate substrings format regular expressions 
algorithm compiler output compiling regular expression substrings intermediate network replacing result compilation 
take simple non linguistic example represents network maps regular expression expression enclosed special delimiters mark substring 
network regular expression substring lower side application compile replace algorithm lower side network eliminates markers compiles regular expression maps upper side path language resulting compilation 
network created operation shown 
applied upward direction transducer maps string nite language regular expression language compiled 
application compile replace algorithm essentially variant simple recursive descent copying routine 
expects nd delimited substrings side upper lower network 
opening delimiter encountered algorithm constructs copy path 
network contains regular expression substrings result copy original network 
encountered algorithm looks closing extracts path delimiters handled special way 
symbols indicated side path concatenated string eliminated path leaving just symbols opposite side 

separate network created contains modi ed path 

extracted string compiled second network standard compiler 

networks combined single operation 

result spliced states representing origin destination regular expression path 
special treatment path nished normal processing resumed destination state closing arc example result shown represents networks shown 
networks illustrating steps compile replace algorithm lexical noun plural surface lexical noun plural surface paths initial transducer de ned concatenation simple example upper language original network identical regular expression compiled replaced 
linguistic applications sections sides path contain di erent strings 
upper side contains morphological information regular expression operators appear lower side nal result 
traditional level implementations capable describing limited xation 
challenging phenomenon variable length closely related indonesian language 
example variable length full stem occurs stem means bag suitcase form fact number neutral translate plural 
overt plural phonologically formed repeating stem twice row 
process may appear concatenative involve concatenating predictable morpheme copying preceding stem may long may 
overt plural port derived form phonologically 
productive described nite state context free formalisms 
known copy language lg word contains copies string context sensitive language 
base language nite construct nite state network encodes standard orthography words written hyphen ignore example 
strings assumption nite number words subject free compounding possible construct lexical transducer languages 
show simple elegant way strictly nite state operations 
understand general solution compile replace algorithm requires bit background 
regular expression calculus operators involve concatenation 
example regular expression denoting language relation denotes zero denotes concatenations 
operators express xed number concatenations 
xerox calculus expressions form integer denote concatenations denotes concatenation symbols employ delimiter symbols regular expression substrings 
string notated start de ning network lower side strings built simple concatenation pre root enclosed braces overt plural sux followed closing 
shows paths plurals initial network 
compile replace algorithm applied lower side network recognizes individual delimited regular expression substring compiles replaces result compilation 
process applies entire lower side language resulting network relates pairs strings ones 
provides desired solution nite state analyzing generating 
known mccarthy prince complex phenomenon lexical noun plural surface lexical noun plural surface fst application compile replace lower side language special delimiters surround appropriate substring necessary regular expression operators may applied lower side upper side network desired 
linguist inserting delimiters multiple times including composition reapplying compile replace multiple times see appendix 
technique implemented compile replace general way allowing regular expression compiler reapply modify output 
stem review earlier non concatenative morphotactics dedicated handling stem 
example occurs arabic stem means wrote 
uential analysis mccarthy stem consists consonant root ktb general meaning writing consonant vowel template symbolized simply signifying perfect aspect active voice 
root consonants associated slots template vowel vowels slots producing complete stem 
root thought morphemes morpheme occurs continuously stem 
root ktb combine template di erent ui signifying perfect aspect passive voice producing stem means written 
similarly root ktb combine template 
languages part stem may systematic di erences base form 
believe approach account complex phenomena discuss issue due lack space 
ui produce root drs combine ui form forth 
kay tiers mccarthy projections multi level transducer wrote small prototype handled roots cv templates vocalizations arabic stems general approach multi tape transducers explored extended papers respect arabic 
implementation described evans 
directly related current solution koskenniemi rst demonstrated roots patterns formalized regular languages non concatenative stems elegantly formalized intersection regular languages 
words formalized consisting morphemes combined intersection combined concatenation 
key insight description employ various nite state operations just concatenation languages required concatenation just special cases 
extension widely noticed limitations early nite state implementations dealing non concatenative morphotactics traced dependence concatenation operation descriptions 
insight koskenniemi applied beesley large scale morphological analyzer arabic rst implementation simulated intersection stems code runtime beesley beesley beesley beesley ran patterns combine mccarthy call templates vocalizations 
slowly xerox nite state technology beesley beesley new implementation intersected stems compile time performed runtime 
algorithm intersected roots patterns stems substituted original roots patterns just lower side intersected stem admittedly ad hoc computationally intensive hours handle stems sun ultra workstation 
compile replace algorithm vast improvement generality eciency producing result minutes 
lines koskenniemi de ne intermediate networks regular expression substrings indicate intersection suitably encoded roots templates vocalizations formal description regular expression substrings look see beesley 
general purpose intersection algorithm expensive non trivial application stems represents special case intersection achieve practice ef cient nite state algorithm called merge 
merge merge algorithm pattern lling operation combines regular languages template ller single 
strings ller language consist ordinary symbols template expressions may contain special class symbols consonant vowel represent prede ned set ordinary symbols 
objective merge operation align template strings ller strings instantiate class symbols template matching ller symbols 
intersection merge algorithm operates paths template network ller network constructs corresponding single path result network 
state result corresponds original states template ller 
original states nal resulting state nal non nal 
words order construct successful path algorithm reach nal state original networks 
new path terminates non nal state represents failure eventually pruned 
operation starts initial state original networks 
point algorithm tries nd successful matches template arcs ller arcs 
match successful ller arc symbol included class designated template arc symbol 
main di erence merge classical intersection conditions 
successful match new arc added current result state 
arc labeled ller arc symbol destination result state corresponds original destinations 

successful match template arc arc copied current result state 
destination result state corresponds destination template arc current ller state 
ect condition preserves template arc nd match 
case path template network advances new state path ller network stays current state 
networks illustrate ect merge algorithm 
shows linear template network ller networks cyclic 
template network filler networks easy see merge drs network template network yields result shown 
symbols ller string instantiated consonant slots template 
intermediate result 
lexical root template voc surface 
lexical root template voc surface 
lexical root template voc surface 
initial paths final result presents nal result second ller network merged intermediate result shown 
case ller language contains nite set strings successful path constructed 
ller string ends single rst symbols instantiated note ordinary symbols partially lled template treated class symbols nd match 
copied result current position consuming ller symbol 
introduce merge operation xerox regular expression calculus need choose operator symbol 
merge subtraction non commutative operation distinguish template ller 
example choose operator decide convention operands plays role expressions 
done suciently motivation introduce variants merge operator differ respect template left 

ller 
expression represents merge operation 

cases denotes template denotes ller result 
new operators network compiled expression 
de ned 
weakly binding left associative operators 
example rst merge instantiates ller consonants second operation lls vowel slots 
order merge operations performed irrelevant case ller languages provide competing instantiations class symbols 
merging roots vocalizations templates tradition represent lexical forms arabic stems consisting components root cv template possibly preceded followed additional axes 
contrast mccarthy kay combine components single projection 
sense mccarthy tiers con ated single distinct parts 
opinion substantive di erence computational point view 
example initial lexical representation surface forms may represented concatenation components shown 
symbols root template voc designate components lexical form 
corresponding initial surface form regular expression substring containing merge operators compiled replaced surface form 
application compile replace operation lower side initial lexicon yields transducer maps arabic forms directly corresponding tripartite analyses vice versa illustrated 
alternation rules subsequently composed lower side result map strings real surface strings 
lexical root template voc surface lexical root template voc surface lexical root template voc surface applying compile replace lower side arabic templates widely considered pure cv patterns argued certain templates contain hard wired speci vowels consonants 
example called template considered linguists contain embedded 
presence ordinary symbols template pose problem analysis adopted 
mentioned discussing intermediate representation merge operation treats ordinary symbols partially lled template manner treats unmatched class symbols 
merge root ktb presumed template 
produces desired result additional mechanism 
status implementations morphological analyzer generator indonesian closely related languages characterized rich derivation little called ection 
morphological analyzer prototype written replace rules compile replace implements approximately di erent derivational processes including pre xation pre sux pairs xation xation combinations processes 
root marked manually source dictionary indicate idiosyncratic subset derivational processes undergoes 
small prototype dictionary stored see beesley discussion controversial issue 
xml format contains approximately roots derivational average derivational processes root 
compile time xml dictionary parsed source format required compiler 
xml dictionary expanded competent lexicographer 
arabic morphological analyzer generator current arabic system described detail previous publications beesley beesley beesley available testing internet 
modi cation system compile replace algorithm changed size behavior system way reduced compilation time hours minutes 
founded criticism traditional implementations nite state morphology limited handling concatenative morphotactics direct result dependence concatenation operation description 
technique described implemented compile replace algorithm allows regular expression compiler reapply modify output ectively freeing description nite state operation 
signi cant experiments larger application arabic shown value technique handling classic examples non concatenative morphotactics full stem stem 
remains done applying technique known varieties non concatenative morphotactics 
www xrce xerox com research arabic compile replace algorithm merge operator introduced general techniques limited handling speci problems discussed 
expect useful applications 
illustration appendix 
appendix palindrome extraction demonstrate power method show applied solve hard problem identifying extracting palindromes lexicon 
palindrome identi cation appears rst require powerful tools nite state calculus 
task accomplished fact quite eciently compile replace technique 
assume simple network constructed english wordlist 
start extracting words property necessary sucient palindrome words inverse english word 
step accomplished rede ning represents intersection reverse operator 
resulting network contains palindromes madam non palindromes dog god 
remaining task eliminate words dog identical inverse 
done steps 
rst apply technique 
rede ne xx apply compile replace operation 
point lower side contains strings xx specially introduced symbol mark middle string 
somewhat delicate step replace xx markers desired operators intersection reverse wrap special regular expression delimiters lexicon 
done composing replace transducers yield network consisting expressions third nal step application compile replace eliminates words dog intersection dog inverted form god empty 
palindromes survive operation 
extraction palindromes unix usr dict words le method takes couple seconds 
evan 

pc kimmo twolevel processor morphological analysis 
number occasional publications academic computing 
summer institute linguistics dallas 
kenneth beesley lauri karttunen 

finite state morphology xerox tools techniques 
cambridge university press 
forthcoming 
kenneth beesley tim stuart newton 

level nite state analysis arabic morphology 
proceedings seminar bilingual computing arabic english cambridge england september 

kenneth beesley 

computer analysis arabic morphology level approach detours 
third annual symposium arabic linguistics salt lake city march 
university utah 
published beesley 
kenneth beesley 

finite state description arabic morphology 
proceedings second cambridge conference bilingual computing arabic english september 

kenneth beesley 

computer analysis arabic morphology level approach detours 
bernard eid editors perspectives arabic linguistics iii papers third annual symposium arabic linguistics pages 
john benjamins amsterdam 
read originally third annual symposium arabic linguistics university utah salt lake city utah march 
kenneth beesley 

arabic nite state morphological analysis generation 
coling volume pages copenhagen august 
center 
th international conference computational linguistics 
kenneth beesley 

arabic cal analysis internet 
cambridge april 
centre middle eastern studies 
proceedings th international conference exhibition multilingual computing 
number 
kenneth beesley 

arabic morphology nite state operations 
michael rosner editor computational approaches languages proceedings workshop pages montr eal qu ebec august 
universit de montr eal 
kenneth beesley 

arabic stem morphotactics nite state intersection 
th symposium arabic linguistics arabic linguistic society march champaign il 
lauri karttunen kenneth beesley 

level rule compiler 
technical report istl xerox palo alto research center palo alto ca october 
lauri karttunen ronald kaplan annie zaenen 

level morphology composition 
coling pages nantes france august 
lauri karttunen 

finite state constraints 
proceedings international conference current issues computational linguistics malaysia june 
malaysia 
lauri karttunen 

finite state lexicon compiler 
technical report istl xerox palo alto research center palo alto ca april 
lauri karttunen 

constructing lexical transducers 
coling kyoto japan 
lauri karttunen 

replace operator 
acl cambridge ma 

lauri karttunen 

directed replacement 
acl santa cruz ca 

laura kimmo koskenniemi 

finite state description morphology case study ancient 
coling pages 
martin kay 

morphology 
proceedings third conference european chapter association computational linguistics pages 
andr kempe lauri karttunen 

parallel replacement nite state calculus 
coling copenhagen august 

george anton edmund 

multi tape automata speech language systems prolog implementation 
jean marc denis editors automata implementation volume lecture notes computer science 
springer verlag berlin germany 
george anton 

multi tape twolevel morphology case study non linear morphology 
coling volume pages 
george anton 

multi tape twolevel morphology case study non linear morphology 
proceedings th international conference computational linguistics kyoto japan 
george anton 

generalised level system 
proceedings th annual meeting association computational linguistics santa cruz ca 
george anton 

multi tiered nonlinear morphology case study 
computational linguistics 
kimmo koskenniemi 

level morphology general computational model word form recognition production 
publication university helsinki department general linguistics helsinki 
alon lavie alon itai mori 

applicability level morphology ection hebrew verbs 
proceedings iii pages 
mick 

linguistics 
technical report language programs canada 
john mccarthy alan prince 

faithfulness identity 
occasional papers linguistics university massachusetts amherst ma 
roa 
john mccarthy 

prosodic theory morphology 
linguistic inquiry 
richard sproat 

morphology computation 
mit press cambridge ma 

