rank xerox research centre cambridge laboratory regent street cambridge cb ab tel fax divergence model synchrony distribution collaborative systems paul dourish technical report epc copyright rank xerox 
dourish divergence model synchrony distribution embodying behaviour toolkit components directly implementation metalevel techniques provide programmers ways override revise 
style flexible design derived generic models application behaviour 
presents generic model distribution synchrony cooperative systems 
organised explicit management divergence parallel streams activity links usage implementation issues supporting important class applications supported traditional cscw models 
examples showing model basis flexible design 
cscw toolkits crowley rendezvous patterson groupkit roseman greenberg common basis building cooperative applications 
support development providing collections ready groupware components behaviours combined new applications 
toolkit lets developer focus specific requirements application development argumentation support map browsing worrying common cscw features distributed interface management toolkit provide 
reliance black box components provided toolkit problematic 
toolkits embody models system behaviour components models fixed hidden application developer locked abstraction barriers 
programmer standard components provided toolkit don match application needs 
instance toolkit support applications requiring different views different participants 
general application developer hope toolkit author anticipated requirements applications constructed toolkit 
toolkit author incorporated requirements toolkit components components adequately 
toolkit inherently limited range applications application domains support 
am concerned provision generic revisable models behaviour toolkits 
generic describe wider range applications specific models traditional toolkits 
revisable adapted new situations supported default configurations 
designing toolkit generic behaviours flexible 
focus development generic model distributed data management interactional synchrony collaborative systems design 
primary uses model kind 
directly incorporated toolkit providing framework support wide range application behaviour 
second structure useful analysing characterising cscw systems 
fold value important feature model means bridge issues system system design 
model tackles number problems traditional characterisations cscw design space 
particular links issues distribution synchrony usually treated independently provides bridge implementation strategies implications user interaction provides explicit support range applications outside scope standard approaches class multi synchronous 
describing structure scope model necessary explain context 
section discusses way generic models form basis flexible design directly incorporated open toolkits 
go discuss traditional view cscw design space problems approach lead new model management divergence 
divergence model synchrony distribution collaborative systems paul dourish rank xerox europarc cambridge uk department computer science university college london dourish europarc xerox com dourish divergence model synchrony distribution background approach research concerned provision flexible extensible revisable system structure toolkit cscw systems 
technique called metalevel programming combination standard object oriented approaches am building toolkit generic descriptions system behaviour 
system allows generic models specialised refined provide better support particular applications kiczales 
technical details approach appropriate discussion see example dourish 
brief overview useful illustrating importance generic system models 
metalevel approach augments traditional elements program describe system behaviour base level specification behaviour supported metalevel 
simplest thought distinction 
systems metalevel component hidden implementation reflective systems revealed programmer 
addition system maintains causal connection base level behaviour metalevel description smith 
maes 
result system developer facilities describe base level functionality mapped real behaviour 
changes metalevel system implementation tailored particular needs circumstances 
causal connection guarantees metalevel changes appropriately reflected system behaviour 
example base level programming language comprises components variables arrays lists control structures metalevel describe data structure elements map memory control structures implemented 
programmer finds abstractions offered programming language inappropriate particular application metalevel adjust implementation suit application particular needs 
reflection primarily developed technique flexible programming language design applicable types toolkits frameworks 
case approach opens implementation allows restrictive design decisions revised 
structure metalevel components behaviours ways manipulated reflects range possible system behaviours base level 
process designing reflective toolkit rooted search generic models systems behaviour 
generic model metalevel provides framework specific designs supported 
framework implementation thought description particular infrastructure support needs application 
model provides terms description 
descriptive power important characteristic models giving measure applicability framework range application domains 
reflective techniques sort outlined provide way generic models directly incorporated systems providing basis extremely flexible application design 
model distribution synchrony step reflective toolkit collaborative applications 
elements model described sections consider problems generic characterisations design space cscw 
cscw design space despite relatively short history number attempts characterise scope structure cscw 
earliest models space time model shown remains widespread see example johansen ellis rodden olson 
characterises cooperative orthogonal dimensions occurring different times synchronicity different places distribution 
purposes discussion take different perspectives diagram 
usage perspective think space dimension concerning location collaborating individuals time dimension describing temporal distribution actions 
design perspective think location synchronicity computer representations artefacts support interactions 
usage perspective model employed describe working situations search appropriate support mechanisms place different place time different time meeting support systems electronic mail group drawing text tools real time conferencing systems bulletin boards traditional space time characterisation cscw systems 
distribution dourish divergence model synchrony distribution design perspective way delineating scope system basis system architecture 
flaws space time characterisation remains frequent basis descriptions field variety criticisms leveled 
increasingly inadequate descriptive tool satisfactory basis design 
purposes want consider problems particular issue synchronicity interaction second orthogonality space time dimensions third lack support multi synchronous applications 
synchronicity division synchronicity dimension concerning temporal relationships actions collaborators time different time misleading 
simple way distinction spectrum interactional styles broken classes broadly defined 
see interactions occurring different times entirely dependent analyse 
get different answers different grain sizes time bases analysis 
users may engaged collaborative session time performing individual tasks different times tasks performed time may seen differently timed turns 
second design perspective extremely problematic think synchronicity interaction feature design 
synchronicity emerges aspect conditioned variety external factors 
instance electronic mail normally considered paradigmatic example asynchronous interaction easily seen enabling synchronous interaction kind rapid fire line exchanges occur experienced email users 
similarly group synchronous shared drawing program establish private baton passing protocol essentially regulates fine grained asynchronous behaviour 
case synchronicity group interactions depends tool design 
consequence synchronicity interaction dynamic changing response activities individuals group 
examples argue synchronicity emergent property interaction subjectively assessed point view participant 
perspective poor basis characterisation design space 
orthogonality characterising applications issues space time model presents distribution synchrony independent orthogonal dimensions 
design perspective think distribution synchronicity independent 
range interaction styles application supports finegrained synchronous working baton passing asynchronous draft passing depends way distributed data managed coordinated 
example centralised data model introduce serialisation latency effects affect access patterns group various consistency strategies replicated data impose restrictions interactional synchrony order operate 
choice distribution strategy constrain synchronicity higher level 
distributed data management space dimension design perspective 
synchronicity distribution independent design decisions may affect aspects system 
separate distinct bases characterisation cooperative support systems 
multi synchronous applications space time model omits large class important applications term multi synchronous 
traditional model separates synchronous applications real time collaborative text editors asynchronous applications source code control systems 
dourish bellotti concept semi synchronous systems suggested bridge compiling elements 
approaches notion single thread control collaboratively produced real time actions number users passed back forth users needed 
multi synchronous applications involve simultaneous disconnected working manage thread control 
situation arise instance collaborators take copies shared artefact separate laptop computers process copies individually coming back 
finer grain independent parallel interactions result network failures partitioning 
situations different users activities may proceed time generally activities performed absence connection users 
information exchange takes place users regroup 
standard model leaves space applications 
system shared updates may synchronous asynchronous 
dourish divergence model synchrony distribution style working captured space time model single thread control 
reviewing space time model generic characterisation design space collaborative systems useful tool analysis comparison design 
clear space time model problematic number respects 
problems especially failure handle multi synchronous applications suggest general structure synchronicity distribution appropriate basis generic descriptions metalevel toolkit 
look new model act basis toolkit sort 
identify number desirable properties model 
way activities implementation linked model able describe userlevel system level activities 
describe wide range applications small number concepts 
particular basis toolkit specialisation means move general particular 
creating new design framework trying find new basis generic descriptive model cscw design space start basic questions activities cscw systems trying support 
determines various styles interaction collaborators engage 
kind resources collaborative users employ managing 
resources interact system components behaviours mechanisms collaborative software systems constructed 
model arisen considerations particularly respect generic description potential strategies technical support cooperative 
follows model introduced iteratively 
section issues synchronisation parallel streams activity introduced 
lead management divergence provision consistency guarantees system 
synchronisation twin dimensions distribution synchronicity inadequate concepts base generic framework need find different basis design 
follow dix beale focussing synchronisation 
synchronicity discussed talks temporal distribution individual actions synchronisation concerns extent individuals able see activity 
individuals engaged activities simultaneously different times synchronise exchange information establish common ground understanding 
synchronisation synchronicity regulates progress cooperative activity 
previous studying shredit shared text editor dourish bellotti op 
cit shown awareness representations activities participants important resources individuals trying coordinate activity 
cases kind awareness allows participants assess progress group organise relation activities 
words exchange awareness information explicit implicit form synchronisation allows groups coordinate actions 
dix notion pace interaction basis analysing technological mediation communications bandwidth channel synchronisation basis extension version control distributed workers dix miles 
notion pace organised rates synchronisation needed manage tasks different levels 
concept synchronisation re examine perspectives discussed earlier usage perspective systems oriented design perspective 
usage perspective synchronisation subsumes notion synchronicity traditionally synchronous systems highly synchronised asynchronous systems lower rate synchronisation 
broad classes talk fine grained differences kinds synchronisation differences affect shared feedback synergy effects discussed dourish bellotti 
design perspective think synchronisation means describe coordination distributed data sharing state information components cscw systems 
words general concept synchronisation way unifying space time dimensions traditional model usage design perspectives 
streams activity order take basis generic description design question asked synchronised 
design perspective tempting suggest data representations held user system synchronised 
cscw systems manage multiple copies user data copies maintained consistently coherently certainly synchronisation issue 
strategies coherence maintained dourish divergence model synchrony distribution systems level issue 
questions replication consistency directly interest group users break 
token focus level description synchronisation difficult correlate descriptions kinds working styles want support 
contrast attempt talk terms synchronisation activities 
clearly level description meaningful users 
addition problem meaningfully defining mean activities descriptions level inadequate basis describing different implementation strategies policies 
high level 
choose intermediate level talk terms synchronisation streams activity 
context define stream activity sequence user actions shareable data 
note actions user level necessarily actions user explicitly initiated shareable data necessarily shared 
shows general picture 
time progresses users generate sequence actions shared representation artefacts supporting 
particular intervals streams synchronised 
synchronisation may involve exchange information coordination intentionally model says mechanics frequency synchronisation 
intervals points synchronisation range fractions seconds months 
synchronisation need jointly initiated opportunistically performed party 
synchronisation need result unification states side data remain inconsistent information inconsistency passed streams 
interpret streams activity widely synchronisation simple glancing colleague screen get idea re doing essentially synchronising screen data idea exchange information applications full information state interface 
parallel streams activity synchronised intervals progresses 
level description mediate usage design perspectives 
usage perspective single stream encapsulates actions user synchronisation streams opens issues interplay independent actions coordination users activities 
design perspective streams model provides way linking cooperative concerns areas parallel processing transaction management distributed data access components implementation may constructed 
direct synchronisation contrast number approaches view streams activity deals explicit synchronisation directly separate streams mechanism managing consistency 
systems focus quite different 
synchronising independent streams variety devices reduce activities single stream 
instance synchronous systems may achieved automatic serialisation arises data locks may allow merely single stream activity time data item 
data passing draft passing mechanism employed asynchronous systems seen ultimate lock access denied data simply isn available 
number cscw application problems arise attempt reduce activities single stream 
instance overly restrictive floor control policies interrupt free flow rigid activity structures result single stream model situations involving multiple simultaneous activities 
model direct synchronisation multiple streams generic model able support types applications naturally 
divergence previous section outlined cscw model multiple parallel streams activity acts potentially replicated representations artefacts variable rates synchronisation streams 
natural consequence replicated copies single representation possibly differ actions different streams conflicting actions 
emergence differences divergence central type model 
say appearance divergence data interface synchronisation necessary 
reduce issue synchronisation terms distribution synchrony interactions management divergence 
dourish divergence model synchrony distribution structure resulting model shown general terms 
base object system representation shareable artefact supporting group paragraph collaborative text editor 
collaborative system object implemented replication group set synchronised copies may distributed different users interfaces network 
point called divergence point change takes place elements replication group actions user 
change results differing copies base object divergence copies object 
replication group partitioned number versions replication group containing version object 
set replication groups known version group differing copies derived base object 
point synchronisation point elements version group brought back form single replication group 
sequence intentionally general particular cases applications specialisations general model 
instance real time multi user graphics editor divergence occur user moves object workspace synchronisation achieved broadcasting change users edit actions performed 
multi synchronous text editor changes occur divergence synchronisation occurring user pursues individual 
base object replication versions group replication group representing object partitioned divergence occurs 
synchronisation point divergence point particular elements general model leaves explicitly undefined 
granularity base objects relation artefacts 
text editor base objects documents sections paragraphs characters arbitrary units users manipulate selections 
criteria divergence 
applications vary amount change accommodate divergence said occurred 
related criteria consistency re established affects kinds synchronisation performed 
mechanism synchronisation means members version group coalesced single replication group 
point leaving undefined points specific behaviours create different applications 
generic design primary features specialised extended give variety behaviours model 
divergence management strategies significant reason adopting model highly scalable 
tightly synchronised systems criteria divergence fairly loose time intervals divergence synchronisation short minimal divergence 
clearly case centralised systems single effective stream activity applies number systems exhibiting high levels synchronisation 
synchronised systems model define operational transformation mechanisms ellis gibbs beaudouin lafon 
extreme systems loosely synchronised model covers explicit version management explored versioned haake haake 
match variability scale wide range strategies manage divergence appropriate particular applications 
note model define impose strategy allows strategies employed 
strategy manage divergence synchronisation defines way system appears users types application supported 
example implementor choose adopt automatic strategy management divergence 
operational transformation algorithms cited examples approach 
alternatively sufficiently constrained domains possible domain dourish divergence model synchrony distribution information accomplish automatic merging version group elements 
cases appropriate employ strategies automatic ones 
simplest strategy case simply flag divergence bringing attention group appropriate members group just single moderator action taken 
application assist detecting divergence providing analysis visual diff 
prevent conflicts immediately resolved option support version aggregation concurrent versions object combined aggregate object manipulated single object internal details needed 
different strategies exist application different strategies different objects users activities 
divergence model allows generalised synchronisation potentially simultaneous streams activity shared workspace 
avoiding conflict limiting applicability particular situations possible model handles explicit management divergence various strategies resolve manage conflicts maintain consistency workspace 
toolkit metalevel approach provides means creating different strategies consistent framework 
locking consistency guarantees number possible strategies outlined potential divergence management mechanisms invoked synchronisation point clear kinds strategies adopted depend sort divergence taken place 
application allows arbitrary divergence synchronisation may arbitrarily complex streams 
arbitrariness highly problematic design 
constrained 
approach try series different synchronisation strategies synchronisation time continuing deal extent divergence occurred 
extremely unsatisfactory different strategies achieve different levels synchronisation 
choice divergence management strategy strong influence kinds interactions group engage 
serial strategy users know particular synchronisation mechanism synchronisation occurred discover successfully activities synchronised 
different strategies way result highly unpredictable interface pose severe problems collaborating groups 
clearly cases allow arbitrary divergence occur 
suggests mechanism provided divergence point guarantees kind synchronisation possible information sort divergence 
ultimate guarantee existing systems strong lock 
participant holds lock guarantees participant changes 
implies synchronisation simple merely case replacing original object new updated copy 
locking prevents divergence synchronisation trivial 
strong guarantee synchronisation behaviour bought expense support simultaneous working multiple participants 
lock held stream blocks progress streams locked objects 
especially problematic case disconnected multi synchronous working outlined earlier 
support sort working explicit goal divergence model flexible approach needed 
process generalisation provide notion consistency guarantees 
consistency guarantees similar locks delivered system promises form consistency maintained shared data space presence changes individual users 
fulfill functions 
system provide advance information changes 
information gauge extent divergence select appropriate strategy synchronisation collect information useful synchronisation point 
user provide guarantee changes artefact representations consistently integrated back shared workspace progress 
guarantees general simple locks variety promises consistency 
strong lock certainly sort guarantee 
specialisation create guarantees different properties varying basic definition different dimensions 
instance guarantees variable terms sorts operations support divergence guarantees consistency maintained internal details object may change structure 
may vary type synchronisation merging support type guarantee automatic strategies required manual user driven strategies acceptable 
third form variability terms form consistency maintained cer dourish divergence model synchrony distribution tain types inconsistency acceptable particular domains circumstances 
consistency guarantees final element model balancing divergence synchronisation providing means system anticipate requirements synchronisation 
standard locking mechanisms guarantees synchronisation divergence 
divergence occur 
particular circumstances application allow user changes supported guarantee holds presumably suitable warnings case re synchronisation may simply possible 
kind flexibility derives focussing re establishment maintenance consistency 
applying generic model assembled components generic model distribution synchrony elements collaborative systems 
relationships areas model shown 
divergence mediate issues synchrony distribution divergence managed building consistency guarantees means achieving synchronisation 
model encompasses number areas activity cscw design 
apply notion divergence issues distribution address question replication data management consistency apply synchrony address issues interaction separate user activities ways model basis analysis basis design 
supports analysis modelling applications terms streams replication groups divergence synchronisation consistency guarantees 
seen basic model synchronised streams activity model fine grained real time cooperative divergence synchrony distribution consistency activities replication divergence provides link issues distribution synchrony organised generalised view consistency 
working looser asynchronous multi synchronous working 
similarly previous section outlined consistency guarantees model variety coordination styles group working 
important role model basis toolkit 
toolkit reflective principles outlined section embodies generic model object oriented programming techniques 
result standard components stream standard operations synchronise subclassed augmented incrementally redefined 
means system developer opportunity tailor support provided toolkit requirements application 
generality implicit model basis flexibility toolkit flexibility required support wide range applications 
employing different implementation strategies configurations metalevel toolkit structures different ways 
consider examples 
example object management system divergence synchronisation take place explicit user actions individual objects called check check 
check time modified object added set checked versions optional user assisted merging facility called unify copies 
mechanism clearly supported basic mechanisms provided divergence model 
result basic multiple version system support cooperative software development 
example real time shared text editor character entry represents divergence case stream user pressing key users 
keystroke resultant change text application captures current state recording latest edit changes received users 
consistency guarantee record character entry command synchronise concurrent edit streams command sent workstations users 
case simulated mechanisms algorithm ellis gibbs finegrained coordination grove editor 
example called epidemic algorithms means distributed replicated databases maintained see demers 
node network maintains part copy database receive transactions additions deletions changes records 
periodically nodes exchange information observed events 
nodes pass information received nodes random technique called changes spread system maintaining consistency global database 
implemented suitably specialised version generic model dourish divergence model synchrony distribution capturing sequence transactions node stream 
divergence occurs individual transactions submitted node directly human database maintainer indirectly inter node information exchange synchronisation occurs conflicts previously held information new transactions resolved typically simple time stamping 
purpose examples give flavour way model provides basis flexibility 
specialisation customisation toolkit components responsible divergence detection replication group partitioning synchronisation allow general framework applied wide range application scenarios 
examples differ greatly terms synchronicity interaction exhibit nature task consistency maintained kinds tasks useful 
captured single framework 
useful basis toolkit embodies flexibility variability model point open notion design wider scope applicability generally possible traditional toolkits 
summary ongoing starting number problems arise traditional space time characterisation cscw applications outlined new model unifies issues distribution synchrony user system levels 
goal model provide framework flexible cscw design form reflective toolkit uses object oriented techniques particular incremental specialisation allow application developer revise internal toolkit implementation decisions 
basis model explicit management divergence potentially simultaneous streams activity shared workspace 
streams activity correspond user system actions user node 
divergence occurs actions shared workspace user views copies shared workspace differ 
cooperation coordination achieved periodic synchronisation streams 
model collaborative system regulates divergence synchronisation general consistency guarantees 
mechanisms divergence admitted consistency guarantees synchronisation achieved points model different strategies adopted 
openness leads wide range resultant tools applicable different situations supporting different working styles 
model provides way describing wide range cscw systems including systems catered previous approaches 
particular looks existing systems special cases multi synchronous working poorly handled traditional approaches especially disconnected case 
model developed part ongoing development flexible toolkit building adaptive cscw applications time writing implementation model way 
combination generic models areas cscw system design interface linkage divergence model result toolkit avoids typical problems premature commitment toolkit implementation leading wider range applicability usually available application developers 
acknowledgments model beginnings conversations alan dix john lamping am grateful 
jon crowcroft provided useful feedback ideas victoria bellotti dik bentley steve freeman tom rodden valuable comments earlier drafts 
beaudouin lafon michel alain transparency awareness real time groupware system proc 
acm symposium user interface software technology uist monterey california november 
crowley terry crowley paul baker harry raymond tomlinson infrastructure building shared multimedia applications proc 
acm conference computer supported cooperative cscw los angeles ca 
demers alan demers mark dan greene carl hauser wes irish john larson sue manning scott shenker howard sturgis dan swinehart doug terry don woods algorithms replicated database maintenance proc 
acm symposium principles distributed computing vancouver canada august 
dix alan dix pace interaction proc 
hci york uk 
dix beale alan dix russell beale infor mation needs distributed workers university york 
dix miles alan dix victoria miles ver sion control asynchronous group york uk 
dourish paul dourish developing reflective model collaborative systems europarc technical dourish divergence model synchrony distribution report epc rank xerox cambridge uk 
dourish bellotti paul dourish victoria bellotti awareness coordination shared workspaces proc 
acm conference computer supported cooperative cscw toronto canada november 
ellis gibbs ellis simon gibbs concurrency control groupware systems proc 
acm conference management data sigmod seattle washington 
ellis ellis simon gibbs gail rein groupware issues experiences communications acm january 
haake haake anja haake haake take cover exploiting version support cooperative systems proceedings interchi amsterdam netherlands april 
johansen robert johansen groupware computer support business teams free press new york 
kiczales gregor kiczales jim des danny bobrow art metaobject protocol mit press cambridge mass 
kiczales gregor kiczales new model abstraction software proceedings imsa workshop reflection metalevel architectures tokyo japan nov 
maes pattie maes concepts experiments computational reflection proc 
acm conf 
object oriented programming systems languages applications oopsla florida 
olson judith olson stuart card thomas landauer gary olson thomas malone john leggett computer supported cooperative research issues behaviour information technology pp 

patterson john patterson ralph hill stephen scott rendezvous architecture synchronous multi user applications proceedings acm conference computer supported cooperative cscw los angeles ca 
rodden tom rodden survey cscw systems interacting computers pp 

roseman greenberg mark roseman saul greenberg groupkit groupware toolkit building real time conferencing applications proceedings acm conference computer supported cooperative cscw toronto canada november 
smith brian smith reflection semantics procedural language report mit tr mit laboratory computer science cambridge mass 
