tcp implementations false time detection obs networks xiang yu qiao yong liu department computer science engineering state university new york buffalo department computer science university massachusetts amherst compares reno new reno selective sack common tcp implementations today optical burst switched obs networks 
general sack considers multiple triple duplicated acked td losses round perform best obs networks new reno improves reno packet switched networks fast retransmission responding partial acks may perform worse reno 
tcp implementations react time loss way slow start 
obs networks burst may contain packets round burst loss occurs mainly due contention buffer overflow event may longer imply heavy congestion words may false fto 
may common obs networks especially fast tcp flows significantly degrade performance existing tcp implementations 
accordingly propose new tcp implementation called burst tcp btcp detect react properly result improve existing tcp implementations significantly 
optical burst switching obs see example promising technology integrate ip wavelength division multiplexing expected support internet backbone huge bandwidth demand 
tcp prevailing mechanism data transmission today variations remain dominant generation optical internet obs understanding performance current tcp implementations obs network important issue 
tcp ip obs network tcp sender receiver connected obs network ip routers form local ip access networks called sender side receiver side respectively 
noted local ip access networks obs network loss packet loss vs burst loss 
impact packet losses performance current tcp implementations studied previous works focus impact burst losses obs network 
basic transmission unit obs networks burst usually contains number consecutive packets segments burst loss occurs tcp sender notified loss number consecutive packets belonging lost burst duplicate partial acks terms packet segment interchangeably 
reno new reno information contained received acks sack expired timers tcp implementations 
burst loss affects different tcp implementations studied current literatures far know 
example studies tcp obs tcp reno considering reno fast recovery algorithm simply ignored details tcp implementations 
reno tcp consecutive packet losses burst shrink congestion window consecutive number times due multiple td retransmissions may eventually result retransmission 
new reno tcp improves reno packet switched networks avoiding resulted multiple td losses 
worse performance obs networks reno size lost burst accordingly number lost packets large new reno insists retransmitting lost packet retransmission round retransmission phase new packets transmitted 
proposed tcp implementations selective sack forward fack address inefficiency reno new reno dealing multiple packet losses sending round adding information missing packets receiver window acks sender retransmit multiple lost packets round 
show sack achieve better performance reno new reno obs networks 
current tcp implementations deal loss way performing slow start 
loss indicates serious congestion packet switched network packets round lost necessarily indicates serious congestion obs network 
example fast tcp flow arrival rate obs assembly node large packets sending round assembled burst 
burst lost due contention multiple bursts acks sent back accordingly burst loss eventually trigger event burst loss occurs random probability due buffer overflow induced serious congestion 
words event generate false indication serious congestion accordingly called false fto 
unnecessarily force current tcp implementations perform slow start result ieee ieee infocom significant performance degradation 
major contributions 
simulations evaluate performances reno new reno sack obs networks particular demonstrate inefficiencies dealing 
major contribution propose new implementation called burst tcp btcp detect react properly 
specifically detecting fto btcp treats loss td loss enters fast retransmission phase btcp determines true fto resulted packet burst losses consecutive indicate serious congestion obs networks btcp performs usually timeout retransmissions slow start current tcp implementations 
describe fto detection methods discuss tradeoffs fto detection accuracy implementation complexity 
show analysis simulations btcp higher throughput existing tcp implementations especially fast tcp flows remaining responsive serious congestion 
rest organized follows 
section ii introduces background obs networks current reno new reno sack implementations 
section iii evaluates performances reno new reno sack obs networks ns simulations 
proposed btcp fto detection methods described section iv performance evaluated section section vi concludes 
ii 
backgrounds main characteristics obs result different tcp performance electronically packet switched networks burst assembly obs ingress nodes switching obs core 
specifically switching implies burst losses obs networks random due contention multiple bursts buffer overflow 
hand burst assembly affects tcp performance ways delay penalty due increased tcp round trip time correlation gain able send packets loss events 
depend burst assembly time tb offset extent 
delay penalty affects different tcp implementations way correlation gain net effect called delayed loss dfl gain retransmission penalty different different tcp implementations different retransmission mechanisms 
slow fast medium rate tcp flows obs networks approximate local ip access network just link constant access bandwidth tcp sending receiving rate 
assume simple time burst assembly algorithm tb fixed 
review typical tcp traffic scenarios obs networks slow tcp flow fast tcp flow medium rate tcp flow 
extremely slow tcp flow traffic scenario tcp flow extremely slow arrival rate equivalent extremely small assembly time tb satisfies tb result burst contains packet tcp flow 
addition extra delay introduced burst assembly small compared round trip time rt slow tcp flow tcp performance obs network approximates electronic network packet loss rate burst loss rate 
ignore case results packet switched networks apply 
medium rate tcp flow traffic scenario tcp flow medium arrival rate medium assembly time burst contains packet tcp flow packets sending round 
words tb wm usually bursts transmitted obs network sending round burst containing tcp packets 
fast tcp flow traffic scenario sending rate tcp flow fast assembly time tb large packets sent round sending window reaches maximum size wm arrive assembly period assembled burst 
words tb wm flow burst contains tcp packets transmitted obs network sending round 
focus medium fast tcp flows obs networks practical interest especially high speed access networks obs networks reasonably large assembly time 
example assume access bandwidth gbps local ip access networks tcp packet size kb maximum window size mb assembly time larger mb gbps ms tcp flow fast tcp flow 
obs networks assembly time ms long 
reno new reno sack tcp implementations reno tcp refers tcp slow start congestion avoidance fast retransmit fast recovery algorithms 
reno starts enters slow start phase congestion window size exponential expands sending window packets transmitted previous round acknowledged 
congestion window reaches certain threshold reno enters congestion avoidance phase window expanding speed slows reno increases congestion window size packet packets previous round acknowledged 
ieee ieee infocom reno distinguishes kind losses timeout losses triple duplicate td losses 
td loss assumed reno sender receives duplicate acks packet sender wait retransmitting lost packet 
retransmission sender halves congestion window response congestion indication loss 
rationale td loss indicates light congestion 
hand loss packets successfully transmitted timer expires usually indicates heavy congestion reno enters slow start phase followed congestion avoidance phase retransmit lost packets new packets 
note multiple packets lost round burst containing large number packets lost reno halve congestion window time successfully retransmits lost packet receives duplicate acks lost packet burst eventually size may case congestion window time burst loss occured small 
impossible receive duplicate acks event may triggered bring reno slow start phase 
new reno small change reno 
multiple packets single window data lost new reno recover retransmitting lost packet rtt receiving partial ack waiting duplicate acks halve congestion window lost packets window retransmitted 
changes new reno improve performance packet switched networks 
obs networks large burst lost new reno prolong retransmission period significantly new packets sent may decrease performance 
congestion control algorithm implemented sack conservative extension reno congestion control uses algorithms increasing decreasing congestion window 
difference option field sack contains number sack blocks sack block reports non contiguous set data received queued 
block information ack tcp sender able send lost packets time helps improve tcp performance obs networks 
iii 
performance comparison existing tcp implementations section compare performance reno new reno sack obs networks ns simulation previous evaluated performance tcp implementations packet losses sending round packet losses occurs obs network burst loss 
generally speaking tcp implementations slow start congestion avoidance algorithms dfl gain delay penalty mentioned earlier long assembly time burst size kept 
differences various tcp implementations come fast retransmission fast recovery mechanisms interactions burst assembly obs networks focus section 
simulation tcp sender receiver connect obs edge nodes link propagation delay ms 
obs network modelled edge nodes core codes form path nodes fiber links having ms delay gbps bandwidth 
round trip time rtt including assembly time ms 
default packet size fixed kb maximal window limitation varies kb kb 
results simulations generated tracing packets inside bursts departing obs ingress node 
graph axis shows bursts departure time seconds axis shows packets number mod 
burst loss section highlights performance differences reno new reno sack obs networks burst loss 
medium rate tcp flows simulate medium rate flow assume access bandwidth kbps 
packet number mod packet number mod reno tcp small congestion window large congestion window reno tcp fig 

packet trace burst loss occurred reno tcp flow tb illustrates impact congestion window size reno td loss event length lost burst bl packets maximal value 
see congestion window small packets time burst lost window size reduced time retransmission rounds packets lost burst retransmitted 
note relatively small rt tcp packets pipelined congestion window represented graph ieee ieee infocom able receive duplicate acks longer occurs time slow start phase begins 
congestion window size grown reach maximal limit packets time burst loss occurs reno recover retransmission stage re enter congestion avoidance phase event 
compares different tcp implementations burst loss bl small simulation respectively 
seen sack best performance ack indicate block packets lost sender sends lost packet receiving ack 
addition new reno generally performs better reno new reno detects loss packets receiving partial ack waiting duplicate acks reno discussed earlier 
addition new reno congestion window halved recovered new reno recover quickly loss small burst 
shows lost burst length large bl simulation relatively small burst loss occurs new reno performs worse reno 
new reno retransmits lost packet round needs long time finish retransmissions new packets sent 
reno hand new packets may transmitted addition value smaller rt new reno fast retransmission phase reno transmission efficient exponentially increases sending window size 
see case sack better performance reno new reno due selective 
note bl small time burst loss occurs relatively large fig 
reno performance comparable new reno 
fast tcp flows simulate fast tcp flow assume access bandwidth mbps burst assembly time tb 
case burst containing packets round burst loss trigger timeout event reno new reno sack exactly performance slow start retransmission loss shown 
packet number mod fig 

packet trace burst dropping fast tcp flow multiple burst losses section compare performances tcp implementations multiple burst losses 
fast tcp flow tcp implementations apply timeout retransmission mechanism time burst lost expected performance multiple burst losses 
consider multiple burst losses medium rate tcp flow 
illustrates performances different tcp implementations medium high loss rate 
losses scattered time tcp implementations different performances due different td retransmissions losses occur immediately tcp implementations performance multiple back back burst losses easily trigger event tcp implementations perform timeout retransmissions shown time reno time new reno time sack 
hand shows medium low loss rate sack best performance losses td losses 
table ii show performance ratios new reno reno sack reno burst loss rate varies low high 
general low high loss rate tcp implementations tend similar performance 
performance difference different tcp implementations comes td retransmission stage 
accordingly high burst loss rate usually leads higher probability difference retransmissions tcp implementations 
hand low burst loss rate leads low probability low td loss probability 
accordingly little performance difference different tcp implementations 
medium low medium high loss rate probability td event relatively high compared event accordingly performance difference different tcp implementations obvious shown middle columns table ii 
table ii show effect burst assembly time tb burst length performance ratios new reno reno sack reno respectively interesting note new reno better performance smaller assembly time possibly smaller burst size reno better performance larger assembly time possibly smaller bust size illustrated table ii respectively 
general relative performances depend relationship tcp timeout value rt round trip time rt number packets contained lost burst bl 
rt larger bl rt new reno better performance reno reno better performance interval time previous burst lost time new packet retransmit approximately rt reno bl rt new reno 
rt ieee ieee infocom packet number mod packet number mod packet number mod packet number mod packet number mod packet number mod reno tcp new reno tcp sack tcp tb fig 

packet traces burst loss burst lost reno tcp new reno tcp sack tcp rt fixed tcp starts time bl usually decides relative performances reno new reno 
note assembly time tb burst length increases sack better reno advantage diminishes due fact happen easily fewer burst losses trigger event retransmission mechanisms tcp implementations 
medium loss rates differences performances highest td loss happens affect total throughput 
different burst length assembly time reno new reno tradeoffs performances 
packet number mod packet number mod packet number mod packet number mod packet number mod packet number mod reno tcp new reno tcp sack tcp tb reno tcp new reno tcp sack tcp fig 

packet traces multiple burst losses medium rate tcp flow table throughput ratio new reno sack reno tb log newreno reno sack reno table ii throughput ratio new reno sack reno tb log newreno reno sack reno ieee ieee infocom iv 
burst tcp btcp false timeout detection current tcp implementations assume event triggered multiple packet losses indicates serious congestion network 
assumption valid wired networks multiple packet losses resulted buffer overflows 
valid obs networks burst containing packets sending round may lost due contention multiple packet losses due single burst loss event burst loss event random necessarily indicate serious obs networks 
call event false fto caused single burst loss obs network serious congestion 
occur quite fast tcp flow obs networks degrade performance current tcp implementations forcing perform slow start 
improve inefficiency current tcp implementations dealing propose new tcp called burst tcp btcp aim detect treat td losses way packet losses treated 
section describe fto detection methods may btcp 
order determine event fto btcp sender needs know caused multiple packet losses ip access networks called sender side access network receiver side access network 
true fto 
multiple packet losses may caused single burst loss multiple burst losses obs 
case fto case true 
fto detection method propose btcp sender estimate maximal number packets assembled burst 
method called burst length estimation ble short require changes obs networks relatively simple implement second method propose obs edge nodes send burst ack back btcp sender contains information packets contained burst arriving ingress egress nodes 
back method requires obs edge nodes able process tcp packets send backs btcp sender achieve better fto detection accuracy method ble 
third method lets core obs node burst dropped send information packets contained dropped burst burst nak btcp senders requires obs core nodes able handle tcp packet processing nak sending 
method achieves highest fto detection accuracy fto detection methods allows btcp sender start td retransmissions fto occurs 
hand best performance achieved highest implementation complexity fto detection methods 
subsections describe methods detail 
fto detection burst length estimation ble implement proposed ble method btcp sender needs keep piece additional state information burst window size burst wd estimate current number tcp packets contained burst obs network 
event happens sender compares current congestion window burst window decide fto takes appropriate actions 
implementation details estimate burst window size burst wd steps 
new btcp flow starts transmit resets burst wd zero enters slow start phase 
btcp sender need know assembly algorithm particular assembly time obs network 

loss td loss means current congestion window cwnd larger maximum number packets contained burst 
tcp sender updates burst wd half current congestion window size cwnd burst wd cwnd 
loss loss possible sender congestion window cwnd smaller number packets assembled lost burst words fto 
case set burst window size current congestion window size burst wd cwnd 

loss loss td loss set burst window size minimum current burst window size half congestion window burst wd min burst wd cwnd 

loss loss loss subcases loss loss set burst window size min cwnd burst wd loss loss set burst window size max cwnd burst wd 
determine fto estimated burst wd 
loss long cwnd burst wd burst wd sender treats fto halves congestion window starts fast retransmission packets lost 

loss cwnd burst wd burst wd sender treats true event performs retransmissions tcp implementations 
note ble method requires coordination information exchange btcp sender obs nodes 
addition method simple implement improve throughput performance compared current tcp implementations performances plagued 
estimated burst wd may accurate 
accordingly possible true taken ieee ieee infocom fto mistake ble method medium rate tcp flows 
addition accurate ble method distinguish multiple packet losses local access network possible albeit small probability single burst loss obs network 
words ble declares fto true 
true tcp enter slow start phase immediately indicates serious congestion 
btcp enter slow start phase fto events tcp friendly 
fto detection burst ack back possible enhancement previous fto detection method ble enable obs ingress node send information tcp packets burst back btcp sender burst ack back packet 
way sender longer needs guess packets assembled burst 
occurs sender know back packets burst 
fto possible packets lost receiver side access network sender way knowing sure way 
definitely true 
course btcp sender receive back occurs safely assume true multiple packets sent earlier back packet lost sender side access network 
algorithm back ingress node illustrated follows 
burst created leaves ingress node ingress node collects sequence number tcp sender information tcp packets burst sends back packet btcp sender sequence numbers 

timer expires btcp sender checks back see lost packets burst treats timeout fto follows normal td retransmission described 
packet sequence numbers back packets treats true starts retransmission slow start 
note may ask obs egress node send back packet 
case back packet received sender know losses occurred receiver side access network 
back received sender tell multiple packet losses sender side access network burst loss obs network 
help distinguish burst loss obs network multiple packet losses access networks ingress egress nodes send back packet 
way sender detect accuracy btcp sender knows fto back containing packets ingress received back egress node knows true 
btcp back fto detection achieve better throughput performance current tcp implementations responsive serious congestion ip access networks current tcp implementations 
note obs ingress egress nodes proper electronic interfaces ip routers side electronic memory assemble disassemble packets burst respectively 
required back method able understand tcp send back btcp senders 
fto detection burst nak obs network obs control packet generated sent ingress node data burst ingress node assembles sends 
control packet contains information burst including routing information processed core node reserve bandwidth set switching fabric burst 
proposed fto detection method burst nak packets control packet contain information tcp packets corresponding burst 
core node burst runs contention dropped core node constructs packet control packet corresponding dropped burst sends btcp sender 
sender receives contains information packets cwnd knows certain associated packet mentioned fto 
received received contain information packets true 
discussion fto detection achieve highest accuracy fto detection back fto detection ingress egress nodes send back packet 
result better performance back requires complex implementation 
mentioned earlier fast tcp flow packets transmitted sending round assembled burst 
accordingly tcp sender notified packet loss part burst loss obs networks event 
tcp timeout value set times larger rtt waiting occur retransmission starts quite inefficient 
proposed fto detection method sender start retransmission lost packets soon received rtt earlier tos lost packets 
method improves throughput back ble methods remaining responsive serious congestion current tcp implementations 
performance btcp section evaluate performance btcp different fto detections analysis simulations 
btcp differs existing tcp implementations ieee ieee infocom mainly reactions focus fast tcp flow occur 
analytical results sec iii focus impact loss obs network 
specifically assume number packets tcp flow contained burst affect loss probability burst 
assumption reasonable size burst determined total number packets flows 
btcp ble back burst assumed independent loss probability average number rounds successfully transmitted loses 
loss rate low maximum window limitation relatively high wm addition losses distributed evenly time sender starts retransmission reach wm event occurs 
fast tcp flow fto detection reno new reno sack performance discussed sec iii tcp sender begins transmitting packets log rounds slow start phase continues transmit rounds congestion avoidance phase 
average total number packets transmitted events denoted represent transmission rounds log obtain solving obtain 
fast tcp flow btcp fto detection ble total number packets transmitted events denoted note assumption loss local access networks btcp ble performs btcp back 
time tos called time period top btcp ble back rt rt tcp fto detection throughput ratio numerical results illustrated case wmp 
shows average congestion window size ratio btcp tcp larger btcp start larger congestion window size wm fto tcp start increase window size reason increase throughput 
loss rate low maximum window limitation relatively low wm maximal limit congestion window size easily reached time 
case similarly recalculated wm wm wm wm wm wm log wm wm wm wm wm throughput ratio wm wm log shown 
see benefit fto detection btcp increases maximum window limitation wm 
larger wm btcp start larger wm fto current tcp start similar explanation provided 
addition large loss rate better improvement events may occur 
throughput cwnd ratio throughput ratio ratio average window size ratio loss rate wm wm loss rate fig 

analytic results btcp vs tcp btcp btcp fto detection method number packets transmitted tos identical tcp fto detection 
fto retransmission round start soon received rt time loss round rt time tcp fto detection 
total time rt tos btcp top total time tos tcp fto detection top rt rt throughput enhancement due btcp compared tcp fto detection top top rt rt rt ieee ieee infocom rt rt rt rt rt analysis implies btcp achieve better performance improvement btcp ble back improvement increase note analysis consider consecutive possible loss unevenly distributed loss rate high 
btcp eliminate exponential backoff time compared current tcp implementations treat multiple true tos enhancement btcp analysis may underestimation 
fact btcp ble back eliminate exponential backoff time accordingly previous analysis results btcp ble back shown may underestimate performance enhancement 
discuss case consecutive details numerical results highlight performance enhancement due btcp fast tcp flow simulations section 
discussed earlier significant performance differences reno new reno sack deal tos way 
accordingly compare btcp enhances reno fto detection reno 
shows details btcp ble deals tos 
occurs time reno triggers retransmission slow start btcp detect fto current burst window size equal congestion window burst wd cwnd example 
btcp treats event td loss triggers fast recovery enhances performance compared reno 
note consecutive losses time btcp respond temporarily high loss situations obs network halving congestion window multiple times consecutive retransmissions eventually triggering true event 
means btcp improve reno performance remains responsive serious congestion obs network reno 
throughput performance compares throughput single fast tcp flow obs network fixed loss rate randomly distributed losses 
chosen relatively large highlight performance differences btcp ble back btcp reno 
seen btcp versions better performance reno 
btcp ble btcp back performance loss access networks discussed previous analysis btcp achieves best performance reduces waiting time retransmissions response fto rt rt packet number mod packet number mod reno tcp btcp ble time fig 

packet trace tcp btcp mentioned earlier analysis see fig 
benefit fto detection btcp increases maximum window limitation wm 
verified simulations comparing wm wm 
note throughput btcp versions reno decrease tb due burst assembly delay penalty fast tcp flow discussed 
reason throughputs low tb wm tcp flow simulated longer qualifies fast tcp flow see throughput analysis medium fast tcp flow 
randomly distributed losses performance enhancement ratio btcp reno denoted ble back enhancement btcp ble back reno denoted ble back illustrated second rows table iii iv various loss rates assembly times respectively 
seen tables btcp btcp ble back especially significantly better tcp loss rate high 
focus btcp ble back discussions apply btcp 
noted performance enhancement due btcp depends average loss rate shown table iii distribution burst losses note fast tcp flow burst loss fto loss randomly distributed mentioned additional distributions evenly distributed evenly distributed batches losses occur back back batch fixed amount time batches losses 
rows tables iii iv show enhancement ratios additional loss distributions btcp ble back reno denoted ble back ble back respectively 
seen table iii average loss rate burst losses occur back back batch btcp enhance throughput lot eliminating significant ieee ieee infocom tcp throughput tcp btcp fto detection ble back btcp fto detection assembly time wm table iii performance enhancement btcp vs tb log ble back ble back ble back table iv performance enhancement btcp vs tb tb ble back ble back ble back amount exponential backoff time tcp due consecutive events 
burst losses occur randomly back back evenly exponential backoff tcp addition losses occur closely consecutively congestion window hardly increase btcp 
ble back high ble back noted performance enhancement due btcp depends assembly time shown table iv 
explain results table consider case batch losses 
hand tcp go exponential backoff periods mentioned earlier timeout value rt independent assembly time tb 
hand btcp enter fast retransmission phase eventually slow start phase due true triggered 
assume length batch loss period fixed rt rt btcp tcp respectively constants suppose rt rt tb fig 

simulation comparison btcp tcp tcp throughput tcp btcp fto detection ble back btcp fto detection assembly time wm table performance btcp access networks tb rt rl rt round trip time burst assembly total data transmitted rounds fixed evenly distributed batch losses lost batch wb btcp wt tcp performance enhancement batch losses calculated back wb rt rt tb wt rt rt tb wb rt wt rt tb parameters treated constant ble back decreases tb 
evenly distributed losses exponential backoffs btcp tcp corresponding enhancement ble back insensitive tb 
case random losses case batch losses evenly distributed losses corresponding enhancement ble back decreases tb 
responsiveness congestion true occurs due multiple packet losses ip access networks btcp ble may treat true fto mistake distinguish losses obs network ip access networks 
result btcp may respond serious congestion effectively reno loss rate network higher 
highlight effect true tos responsiveness btcp ble assume set simulations ip access networks lossy obs network 
ieee ieee infocom compare performance btcp ble reno injecting udp tcp flows ip access networks 
table shows performance differences terms throughput ratio rt loss rate ratio rl function assembly time tb 
generally speaking wrong fto detection ip access networks increase loss rate ip access networks 
increase throughput single btcp flow performance tcp flows degraded due increased loss rate 
table see increase loss rate network significant assembly time increases 
mainly due fact serious congestion causes true timeout event time considering long range dependent nature internet traffic 
accordingly btcp ble may treat true fto transmits data half previous congestion window receive true eventually window size reduced trigger true 
having large assembly time may result poor throughput loss rate true tos mistakenly considered btcp ble 
vi 
summary evaluated performances popular tcp implementations reno new reno sack obs networks 
demonstrated sack performs better reno new reno effectively handle false timeout fto medium fast tcp flow quite common obs networks 
proposed new tcp implementation called burst tcp btcp fto detection methods burst length estimation burst ack burst nak respectively involve tradeoffs fto detection accuracy throughput performance performance implementation complexity 
compared btcp current tcp implementations shown btcp improve tcp throughput congestion control ability normal tcp 
cao li chen qiao assembling tcp ip packets optical burst switched networks proceeding ieee globecom impact segments aggregation tcp reno flows optical burst switching networks ieee infocom vol pp 
fall floyd simulation comparisons tahoe reno sack tcp ieee acm sigcomm 
performance evaluation tcp optical burst switched obs networks proceedings icc 
leland taqqu willinger wilson selfsimilar nature ethernet traffic ieee acm transaction networking vol pp 
mathis mahdavi forward refining tcp congestion control ieee acm sigcomm 
padhye firoiu towsley kurose modeling tcp throughput simple model empirical validation ieee acm sigcomm 
paxson floyd wide area traffic failure poisson modeling ieee acm transaction networking vol pp 
qiao yoo optical burst switching obs new paradigm optical internet journal high speed networks pp 
turner time sliced optical burst switching proceeding infocom 
stevens tcp ip illustrated volume protocols 
yu qiao liu towsley performance evaluations tcp traffic transmitted obs networks tech 
report cse department suny buffalo 
ieee ieee infocom 
