automatic context attribute assignment semantic file systems craig soules gregory ganger cmu pdl june parallel data laboratory carnegie mellon university pittsburgh pa semantic file systems enable users search files attributes just pre assigned names 
develops evaluates new approaches automatically generating file attributes context complementing existing approaches content analysis 
context captures broader system state provide new attributes files propagate attributes related files context humans remember previous items fit primary role semantic file systems 
study systems months addition context mechanisms average reduces number files zero attributes 
increases total number classifiable files cases shown 
average content analyzable files gain additional valuable attributes 
members companies pdl consortium including emc hewlett packard hitachi ibm intel lsi logic microsoft network appliance seagate sun veritas interest insights feedback support 
ibm intel hardware supporting research efforts 
keywords semantic filesystems context attributes storage capacity continues increase number files belonging individual user increased accordingly 
storage capacity reached point little reason user delete old content fact time required wasted 
filesystem study number files file lifetime increased significantly studies conducted previous years 
challenge shifted deciding keep finding particular information desired 
meet challenge users need better tools personal file organization search 
file systems today hierarchical directory structure 
easy reason small medium scales hierarchies scale large collections fine grained classifications result 
particular hierarchy grows piece data increasingly different classifications location hierarchy 
find file user remember classification originally chosen 
help alleviate problem different groups proposed semantic file systems 
systems assign attributes keywords files providing ability cluster search files attributes 
key challenge assigning useful meaningful attributes files 
semantic file systems rely sources file attribute assignment user input content analysis 
users understanding files create time consuming unpleasant distill information right set keywords 
result users understandably reluctant 
hand content analysis automatically keywords file contents user time 
unfortunately complexity language parsing combined large number proprietary file formats non textual data types restricts effectiveness content analysis 
importantly fails capture important way users think data context 
context defined merriam webster dictionary interrelated conditions exists occurs context file refers information external contents file may file created accessed 
examples include active applications open files current physical location user context way humans remember things location previously stored file study user search behavior exactly tendency users usually context locate data 
case context attribute assignment introducing approaches categories application assistance user access patterns 
application assistance uses application knowledge user workloads provide information user current state 
example web browser usually provide information downloaded files 
user access patterns indicate inter file relationships propagate attributes strongly related files 
introduces new content approach content similarity propagates attributes files similar content 
summarizes benefits combining existing content analysis new categories file attribute assignment examined 
multi part bar left shows adding schemes allows system automatically classify additional user files total 
single category bars right show classification schemes overlap resulting attributes file 
gathering attributes files believe semantic file systems provide useful accurate results users 
remainder organized follows 
section discusses existing search organizational tools 
section outlines space automated attribute assignment 
sections describe new attribute generation tools evaluate merits 
section discusses existing systems need change new tools 
section concludes 
breakdown classifications 
shows benefits combining context propagation attribute generation schemes existing content analysis schemes 
ran schemes month donut trace described section 
combining schemes possible classify files individual scheme 
overlap classifications different schemes provides attributes classifiable files individual scheme 
file organization search searching accessed files small collection users find looking 
searching older files large collection users forget name location particular files making difficult find 
people stories wasting minutes searching files find specific important document user file collection grows problem worse 
section describes existing tools file organization search additional related outside realm file systems 
directories far common organizational structure files directory hierarchy 
directory hierarchy relies entirely user input provide useful classifications files form pathname 
advantage user input provided classification closely match user thinks file combines content context attributes 
unfortunately attributes far effective number files grows 
factors limit scalability traditional directory hierarchies 
files hierarchy single categorization 
categories grow finer choosing single category file difficult 
links giving multiple names file provide mechanism mitigate problem exists convenient way locate update file links reflect re categorization unidirectional 
second information describing file lost defined detailed naming scheme 
example name family picture contain names family member 
third related files placed common subtree relationship lost 
fourth entire pathname file required retrieve user remember exact categorization desired file 
users faced dilemma organize files detailed categories remember exact set order attributes file organize face difficulty locating single file sea filenames 
clearly users require better organization search mechanisms 
indexing search tools today users rely indexing search tools help find files lost directory hierarchy 
tools find grep glimpse text analysis file pathnames provide searchable attributes files 
microsoft windows search utility filters gather attributes known file formats word documents 
systems fractal pc layer new visualizations existing indexing technologies attempt help users locate organize files 
advantage tools require additional user action provide benefit 
existing directory information combine automated content analysis 
unfortunately tools best files understood data formats reduced text leaving large class files original hierarchical classification 
semantic file systems go limited hierarchical namespace directories groups developed systems extend namespace attribute indexing 
provides additional organizational structure indexing files attribute 
system takes set keyword file pairings creates index allowing fast lookup keyword return associated file 
structure useful files set known attributes index sender email message 
semantic file system provides searchable mapping generic category value pairings files 
attributes assigned user input external indexing tool 
indexing tools referred transducers traditionally perform content analysis provide attribute extracted automatically context information 
attributes assigned user create virtual directories contain links files particular attribute 
search narrowed creating virtual sub directories 
groups explored ways merging hierarchical attribute naming schemes 
detail set rules constructing various hierarchical flat namespaces venn diagrams 
gopal defines goals merging hierarchical name spaces attribute naming evaluates system meets goals 
assigning multiple attributes single file information available search tools increased dramatically 
unfortunately systems generally limitations methods gathering attributes previous examples systems content analysis provide additional attributes making effective existing search tools 
additional related section discusses additional outside file systems research related gathering context file organization search 
web search engines years large number web search engines come existence 
early web search engines lycos relied user input user submitted web pages content analysis word counts word proximity 
valuable success systems success google 
provide better search results google utilized text associated link decide attributes linked site 
text provides context creator linking site user clicks link site 
times particular word links site higher word ranked site 
google announced intent develop local file search approach ranking web pages translate directly realm file systems 
links pages inherent web exist files 
initial tools leverage extensive knowledge text analysis indexing 
improved interfaces haystack project aims improve organization user data providing improved interfaces manipulate data open annotated file formats 
easing methods users input information system haystack gather useful attributes existing systems 
combining user interface haystack automated methods attribute assignment propagation provide user greater ability locate information system 
mobile cache hoarding distributed decentralized systems prevalent groups examined idea automatically hoarding networked files locally mobile nodes 
aura project examined schemes allowing users specify files specifying tasks set applications files particular context 
assuming users willing provide information provide context hints indexing system 
networked attributes researchers explored problem providing attribute namespace network computers 
harvest scatter gather system provide way gather merge attributes number different sites 
semantic web proposes framework annotating web documents xml tags providing applications self describing attribute information file data format basis haystack described 
sources attributes believe broad array automated attribute assignment approaches exploited semantic file systems 
separate groups direct indirect attributes assigned 
direct assignment approaches provide attributes files creation access time 
indirect assignment approaches propagate attributes file closely related files 
section describes content context approaches fall groups 
direct attribute assignment significant potential exists variety attribute generation schemes existing systems particular direct assignment schemes user input content analysis file system attributes 
section outlines existing schemes new schemes context information 
existing schemes user input common form attribute assignment user input 
users unwilling provide detailed attributes file high accuracy attributes important part attribute assignment 
attributes user input include filename pathname additional hard soft links keywords systems accept 
content analysis content analysis uses understanding file format extract keywords attributes file 
common form text analysis systems described section 
systems microsoft window search utility knowledge certain file formats word powerpoint reduce file contents raw text allowing text analysis contents 
researchers continue content analysis music images video files remains complex problem far solved 
file system attributes filesystems store small set context attributes file metadata owner file creation time 
information way user may search file enrich set searchable attributes existing search tools 
going lifestreams system uses context information class entity providing stream view documents access time 
utility context attributes suggests additional context information quite helpful user 
context schemes application assistance personal computers provide vast array functionality people computer small set routine tasks 
tasks performed small set applications turn access create user files 
applications explicitly provide attributes files knowledge user context 
example user executes web search chess openings downloads file browser note file probably relates chess openings extract keywords web address hyperlink text information linking page pages accessed 
evaluation section explores specific case context attributes provided web browsers 
user feedback search tools gather information results direct inferred user feedback 
similarly attribute search tool obtain information user queries 
user initially queries system semantic file system chooses file contains attribute semantic additional terms file system applied file 
possible matches order system believes relevant having user choose files list may indicator success failure 
done web search engines system elicit feedback user query completed allowing indicate success query pre defined scale 
particular form context effective web search engines effective user file systems reasons 
user file collections rarely shared users reducing amount feedback provided collection 
second users generally find accessed files generally search old files making file searches far frequent web searches 
external context exists significant amount context user may events occurring outside system 
example physical location user local coffee shop scheduled meeting weather significant news events phone calls may clues user find particular file 
information directly available system may possible gather information external sources calendar programs web searches wireless network roaming services phone records view external context sources interesting area exploration 
indirect attribute assignment area indirect attribute assignment left entirely unexplored 
section outlines schemes propagating attributes files related uses context uses content 
sections explore detail 
user access patterns users access files pattern accesses records set temporal relationships files 
relationships previously guide variety performance enhancements prefetching cache hoarding 
possible information help propagate information contextually related files 
example accessing ps gopal ps followed updating related tex may indicate relationship files 
subsequently accessing related tex creating osdi submit ps may indicate transitive relationship 
content similarity single user file space may multiple copies versions single file 
example unable find particular file user may re download file web new location 
time user re downloads file provide different context different set attributes 
relating copies file attributes copy shared hopefully making file easier locate time user searches 
propagating attributes access patterns users pattern file accesses represent temporal relationships files 
relationships form picture user context capturing concurrently accessed files single contextual unit 
connections system share attributes related files allowing classification previously files 
section evaluates algorithms context attribute propagation 
goals evaluation 
quantify potential schemes classify files measuring increase classifications direct assignment ideal content analysis 
second measure effect varying aspect algorithm 
third get feel accuracy relationships hand examination generated relationships 
algorithm design number existing projects extracted file inter relationships access patterns provide file prefetching hoarding :10.1.1.49.3592
algorithms convert file system graph files nodes relationship specified weighted link nodes 
weight link number times relationship seen relationship traditionally defined access files sequence 
better explore space options tool generalizes existing algorithms algorithm component parts graph style set operation filters relation window stream extractor weight cutoff 
graph generation algorithm formed choosing point axes 
graph style graph style specifies relationship links graph directed undirected 
direction link indicates flow attributes indirect assignment specified operation filters 
undirected links allow attributes flow directions 
operation filters component specifies set file system operations considered generating relationships 
filter specifies operations input output 
input operations indicate files source relationship output operations indicate files sink relationship 
cc ld cc test test test test bar bar bar bar test bar time access tree 
graphic illustrates parent child process tree bottom associated files accessed 
example user runs command line 
process spawns number sub processes access files 
advantage scheme simple pid scheme relationships related programs captured 
example test accessed cc relationship test test captured 
tool provides main filters filter concert main filters 
open filter treats open calls inputs outputs 
read write filter treats read operations inputs write operations outputs 
complex filter treats access operations inputs including mmap open read stat source file dup link rename 
treats output operations outputs including write destination file dup link rename 
user filter discards operations act file owned user performing operation 
relation window relation window tracks current set input files 
input file passed operation filter placed window 
output file passed operation filter related files window 
window size defined number files managed lru order set period time 
stream extractors component separates independent streams requests trace 
stream maintains separate relation window meaning operations stream affect relationships generated stream 
tool currently supports stream extractors 
simple extractor treats trace single stream requests 
uid extractor creates separate stream requests user id trace 
access tree extractor creates stream requests file operations performed parent process sub processes illustrated 
root access tree process spawned directly user system currently defined process spawned userinterface windows bash init 
weight cutoff graph generated link weights determine relationships provide indirect assignment 
simple scheme relationship unreasonable result large number false positives relationships little contextual value 
unfortunately cutting links fixed weight problematic important relationships frequently accessed files lost 
example file downloaded printed accessed machine unique content name files written classifiable bliss donut garfield sylvester table file system traces 
table lists characteristics file system traces 
single weight links file cut making impossible locate file 
solution consider links weight certain percentage file total outgoing incoming weight 
manner lightly weighted links coming files total accesses receive indirect assignments heavily weighted links considered frequently accessed files 
percentage referred weight cutoff 
summary graph generation algorithms components capture behavior various existing cache hoarding prefetching tools 
example model examined griffioen appleton uses directed graph style open filter fixed window size simple stream extractor cutoff 
model examined lei duchamp uses directed graph style open filter fixed window size access tree extractor cutoff 
goal capture exact access particular file find relationships may 
models strict cutoff rules successor noah captured algorithms underlying techniques 
experimental setup starting point evaluation assume exists perfect content analysis tool provide useful attributes ascii text source code html raw text postscript pdf files 
traces experiments linux systems 
ms windows systems assume tool classify file formats word powerpoint 
partition files content classifiable content 
traces capture user access patterns researchers ran specialized linux kernel module desktop machines period months 
startup module dumps state processes open files operation tracks file system process management calls system 
entry trace keeps information maintain state entire system lifetime trace 
table shows summary traces 
assumptions noted figures show data files owned users 
believe average user interested finding files created users little interest files created system system logs hardware configuration files 
examination results files opposed user files showed slightly lower increases percentage classifiable files 
system generated files files useful context 
cases undirected links files marked output files operation filter considered calculating number classifiable files 
point lifetime system file output traces available time period potentially classified 
considering files calculation information unfairly biased algorithms 
graph generated attributes propagated links related files 
connection files sub graph files foo foo foo executable 
capture attributes may propagated step classifiable file 
extra steps possible classify files sub graph entire sub graph classified 
figures plot steps taken axis specified number steps 
metrics consider metrics evaluating graph generation algorithm 
number files receive attributes 
second number content classifiable files receive additional attributes 
third accuracy generated relationships 
get feel accuracy generated relationships examined donut trace detail exact science subjective evaluation provides critical insight success different algorithms 
effectiveness exploring large cross product different algorithm component values default scheme consistently performed metrics 
default scheme uses uid extractor directed graph style read write user filter minute window cutoff 
shows percentage content files classified default scheme steps file relationship graph content classifiable files traces 
benefit clear content files classified cases half cases 
percentage increase classifiable files high traces sylvester large percentage files classifiable content analysis 
cases attribute propagation provides benefit adding additional attributes files 
shows increase attributes content classifiable files traces default algorithm 
exception trace content classifiable files receive extra attributes 
examining generated relationships shows valid useful 
source code generally structured compiled source code related generated program files 
example code trace analysis tools related tool 
importantly tool related generated output log files usually stored structured machine authors allowing detailed understanding files accuracy generated relationships 
newly classified files 
shows percentage content files classified propagation traces 
traces observed smallest increase classifiable files users regularly downloaded pictures digital cameras action connection content classifiable files 
fashion 
additional copies tool created separate simulation runs related source code original copy tool 
examples useful relationships saw included instant message logs files downloaded links sent friends pdfs related files making edited vice versa various files old versions backups 
exploring algorithms explore trade offs involved components graph generation algorithms ran experiments varying component default scheme 
results donut trace best understanding accuracy relationships generated trace results similar traces 
weight cutoff shows effect varying cutoff percentage donut trace 
expected increasing cutoff percentage decreases number classifiable files cutoffs smaller perform extremely classifying content files 
addition cutting files classification altogether increasing cutoff percentage remaining sub graphs sparse 
result files large sub graphs grow additional attributes 
shows percentage content classifiable files receive additional attributes attribute propagation traces 
trace fewest additional classifications smallest amount trace data user performed significant amount untraced laptop machine travelling months tracing 
away content classifiable files takes steps attributes propagated 
seen difference maximum number steps taken cases respectively 
cutoff files 
files created programs generate data existing files input 
examples kind data web log files files transfered machine images retrieved digital camera 
possible generate relationships files larger relation window relationships invalid 
example user hasn computer hour downloads images digital camera quite done hour ago related images 
undirected graph style may help classify files files accessed web logs accessed group examining images trip outgoing links 
way provide attributes files assignment schemes application assistance 
cutoff percentage examined set files compared files smallest cutoff comparing cutoff cutoff 
allowed see exactly relationships cut different values cutoff 
hand analysis cutoff higher starts give large number false negatives removing file connections valid 
connections files cutoff appeared percent files classified steps content classifiable file trade cutoff percentage 
shows percentage classified files variety cutoff percentages 
axis shows number steps content classifiable file indicates files content classifiable 
graph generated trace donut desktop machine 
valid low cutoff values resulted false positives 
invalid connections weaker data gathered trace length grows nature occur frequently 
operation filters shows effect different operation filters donut trace 
possible operation filters reports results 
choice filter large affect number links created amount memory required store analyze results 
open complex filters resulted close links files month trace requiring gb memory available processes linux 
currently examining schemes reduce memory required examine traces store portions data core 
schemes shown perform terms quantitative classification increasing number classifiable files read write filters performing best 
hand examination classifications generated read write filters show accurate 
open filter distinction files opened writing files opened reading 
files opened writing far fewer connections connections outgoing files inaccurate 
complex filter provided similar results read write filter files accessed percent files classified complex user open user read write user read write steps content classifiable file trade filter scheme 
shows percentage classified files filtering schemes 
axis shows number steps content classifiable file indicates files 
graph generated trace donut desktop machine 
stat syscall unrelated files written window resulting invalid connections 
examination read write read write user filters shows produce nearly identical classifications 
desktop single user environment rare user accesses user files generally system user background tasks 
result infrequent events little effect classification 
graph style examination traces cases directed links classifiable files 
result changing links directed undirected affect number classifiable files 
undirected links possible pass additional attributes classifiable files traces classifiable files received extra attributes 
stream extractor shows effect different stream extractors donut trace 
access tree extractor classifies fewer files useful connections formed files different applications 
simple user extractors perform identically 
desktop single user workload results extra relationships formed files differing users 
background tasks percent classifiable uid simple access tree steps content classifiable file trade chosen stream extractor 
shows percentage classified files stream extractors 
axis shows number steps content classifiable file indicates files content classifiable 
graph generated trace donut desktop machine 
accessing files concurrently user occur infrequently links ignored due weight cutoff 
relation window shows effect varying window sizes donut trace 
interesting aspects graph extremes window sizes 
largest window sizes minutes classify fewest files 
increased number links eventually cut invalid weight cutoff 
smallest window size seconds step classification provides fewer attributes minute windows 
window provides connections limit potentially valid direct connections files 
additional steps renew connections stepping intermediary file comparison remaining unclassified files second minute windows shows additional steps create classifications 
second window information creates follows links strongly connected files 
result window size minutes appears accurately capture set files user context time 
percent files classified steps content classifiable file trade window size 
shows percentage classified files variety window sizes 
axis shows number steps content classifiable file indicates files content classifiable 
graph generated trace donut desktop machine 
application assistance web browsing applications designed specific tasks uniquely suited provide attributes describing user currently doing 
examination traces indicates web browsing frequently performed user activities 
potential gather significant amount user context 
examine methods gathering context information web browser gathering context downloaded files user activity marking periods time context user browsed pages 
algorithm design user browses web pages visits form trees activity attributes added link 
pages accessed directly bookmarks direct entry external programs act root nodes 
page request generated page hyperlink form acts child page 
link parent child marked attributes request text hyperlink submitted form data 
attributes page determined tracing links page root gathering attributes path 
downloaded files treated leaves tree assigned attributes path root 
periods browsing activity marked windowing scheme similar relation window described section 
page accessed attributes placed window 
output files specified system operation filter accessed window assigned attributes window 
experimental setup gather information user web activity instrumented module mozilla web browser keep trace web activity 
researchers user donut system ran tracing tool months file system tracing 
available data compared set downloaded files web trace set files created mozilla file system trace months including files created browser specific mozilla directory exact match 
confirmed files web trace downloaded user having clicked hyperlink 
consider safe assume files created file system traces considered files downloaded mozilla receive additional attributes application assistance 
effectiveness evaluate effectiveness downloading scheme ran tool file system traces evaluate marking periods web activity combined existing web trace matching months file system tracing 
file downloads provides summary downloaded files traced machines 
shows total number files downloaded month period breakdown file type downloaded files 
breakdown file likelihood content classifiable text pdf files considered content classifiable includes remaining files consisting images video music compressed archives 
disappointing aspect data files created users downloaded web 
files downloaded web organized user system 
examination pathnames downloaded files files downloaded placed single directory user home directory personal directory called downloads tmp indicates additional attributes generated application assistance quite valuable user performing search 
files small fraction created files application applied attributes propagated additional files inter file relationships generated user access patterns 
shows percentage files classified combining schemes 
combining extra attributes content attributes little effect total number classifiable files increase number useful attributes file 
represents added benefit application assisted attributes 
hand examination assignments shows quite relevant 
example file saved user home directory named ka mpg attributes honda car commercial file saved home directory named gw zip appeared related wars demo unable remember contents file initially keywords user able indicate quite accurate cases 
users traced machines downloaded files mozilla web browser 
browsers performed downloading 
web downloads 
shows count files downloaded different desktop machines period months 
text ps pdf bars machine shows number downloaded files classified traditional content analysis schemes 
bars remaining unclassified files downloaded 
web activity marking periods web activity context attributes possible classify files including previously files 
shows result combining scheme user access pattern propagation months available traces 
similarly propagation downloaded file attributes combining small set files indirect attribute assignment provides large set classifiable files 
unfortunately previous schemes classifications scheme inaccurate 
appears stem user behavior browsing web program compilations 
result source program files associated strongly variety news websites 
way try prevent classify user web sites categories usage patterns 
user particular website variety activities probably tied particular 
user performs directed search visits website correlation particular task strongly connected 
experiments heuristic useful direction 
percent files classified bliss donut steps application classifiable file attribute propagation web downloads 
shows effect combining attributes generated downloaded files user access pattern propagation machines shown 
axis shows percentage files classified axis shows number steps taken downloaded file 
propagating attributes content similarity get feel potential relationships formed content similarity ran experiment find duplicate copies files owned user donut desktop system 
generated md checksum files owned user duplicate checksums identical file sizes 
possible likelihood collision different files extremely low 
experiment located sets identical files average set size files 
additional connections possible classify additional files content application assistance user access patterns advancing total classification 
largest sources duplicate files came duplicate versioned source trees cvs generated duplicates apparently re downloaded hand copied files 
set files particular interest files organized user 
example identical files user home directory submit ps usenix final ps created approximately hours apart 
interestingly asked files user able remember context files created unable recall exact title question 
percent files classified donut steps application classifiable file direct attribute assignment concurrent web browsing 
shows effect combining attributes generated concurrent web browsing user access pattern propagation donut trace 
axis shows percentage files classified axis shows number steps taken downloaded file 
system architecture takes critical step automated context attribute assignment semantic file systems developing evaluating algorithms doing 
step deploy gain real user experiences attributes real semantic file system 
section describes architecture system tools described sections fit 
extensions traditional semantic file systems shows basic design semantic file systems simplified 
system traces application requests watch file updates potentially overlay indexing system existing file system interface extending namespace 
file updated tracer notifies transducer reads file updates attributes index 
applications query index separate interface namespace extension 
shows diagram prototype system indexing searching attribute information incorporates various tools automatic attribute assignment described sections 
application requests routed tracer passed direct assignment tools notate file updates indirect assignment tools trace user access patterns notify content similarity tool updates 
applications may provide attributes application assistance user application tracer file system file index transducers traditional semantic file systems 
application tracer file system database user access patterns indirect map indirect assignment file index content similarity direct index prototype system 
direct assignment application assistance transducers user feedback system design 
shows traditional design semantic file systems design new prototype system 
key difference prototype system new attribute assignment tools described sections 
tools fall categories indirect direct assignment different properties affect design indexing database 
feedback 
parts system map directly tools described bulk prototype system 
database maintains separate indices 
direct index stores direct attribute assignments indirect map stores inter file relationships 
main index stores combined attribute assignments applying inter file relationships direct attribute assignments 
discussed evaluation computational memory overheads running tools significantly tools generate inter file relationships user access patterns 
single month simulation takes approximately hours ranges gb memory 
representative system tools 
indexing performed night relationships stored core database 
running tool single day traces requires minutes takes little memory dependent amount activity performed day generally mb 
result performance overheads tools little current content indexing 
challenges trade offs addition varied attribute generation schemes introduces challenges design complete system 
significant increase available attributes files attribute propagation schemes 
section discusses changes affect portions system search interface attribute database 
search interfaces existing file search systems user searches particular keyword list matching files 
dramatic increase number attributes assigned file file search tools problem similar web search tools results 
deal problem web search tools assign weights keywords page 
file search tools require similar solution allowing user interface order search results weight 
addition weights introduces secondary problems 
weights generated attribute assignment tool normalized tools system prevent single tool overriding attributes generated tools 
normalization agreed advance tools managed system average weighting tool 
second database maintain separate weight tool attribute file pairing simplifying normalization case tool generating attribute file 
managing indirect attributes key challenge indirect attribute assignment avoid re propagation 
example attribute passed steps sub graph file file indexing phase re propagated steps file indexing phase steps total 
avoid database maintain separate mapping indirect attribute assignment 
re combined directly assigned attributes indexing phase 
separate indirect map potential implementations map stores attributes propagated time relationship generated map stores relationship files re gathers propagated attributes indexing phase 
approach potential merit 
storing attributes map captures context relationship files exact time relationship formed 
storing relationship map may capture new attributes valid files additional direct attribute assignments 
comparing schemes area ongoing 
addition context attributes semantic file systems effective tackling primary shortcoming unavailability quality attributes 
context attributes capture state users accessing files key way users recall search data 
combining context content attributes attribute propagation increases number classifiable files number attributes assigned file 
result informed system far better chance successfully helping users locate specific files desired 
acknowledgments andy edmonds help design implementation mozilla tracing tool 
altavista www altavista com 
christine alvarado jaime mark ackerman david karger 
surviving information explosion people find electronic information 
technical report aim 
massachusetts institute technology april 
ahmed amer long paris randal burns 
file access prediction adjustable accuracy 
international performance conference computers communication phoenix az april 
ieee 
berners lee hendler lassila 
semantic web 
scientific american 
bowman danzig manber schwartz 
scalable internet resource discovery research problems approaches 
communications acm 
sergey brin lawrence page 
anatomy large scale hypertextual web search engine 
computer networks isdn systems 
joachim buhmann jitendra malik pietro perona 
image recognition visual grouping recognition learning 
proceedings national academy sciences 
national academy sciences december 
douglass cutting david karger jan pedersen john tukey 
scatter gather approach browsing large document collections 
acm sigir international conference research development information retrieval pages 
acm 
roger dannenberg 
listening automated structural analysis music recorded audio 
international computer music conference san francisco ca pages 
international computer music association 
john douceur william bolosky 
large scale study file system contents 
acm rics conference measurement modeling computer systems atlanta ga may 
published acm sigmetrics performance evaluation review 
acm press 
scott fertig eric freeman david gelernter 
lifestreams alternative desktop metaphor 
acm sigchi conference vancouver british columbia canada april pages 
fractal pc www com 
dominic 
practical file system design file system 
morgan kaufmann 
david gifford pierre jouvelot mark sheldon james toole jr semantic file systems 
acm symposium operating system principles asilomar pacific grove ca 
published operating systems review october 
google www google com 
gopal udi manber 
integrating content access mechanisms hierarchical file systems 
symposium operating systems design implementation new orleans la february pages 
acm 
james griffioen randy appleton 
design implementation evaluation predictive caching file system 
technical report cs 
university kentucky june 
www com 
james kistler satyanarayanan 
disconnected operation coda file system 
acm transactions computer systems 
acm press february 
geoffrey kuenning 
seer predictive file hoarding disconnected mobile operation 
technical report ucla csd 
university california los angeles may 
geoffrey kuenning gerald popek 
automated hoarding mobile computers 
acm symposium operating system principles saint malo france october 
published operating systems review 
acm 
lei duchamp 
analytical approach file prefetching 
usenix annual technical conference anaheim ca january 
usenix association 
lycos www lycos com 
udi manber sun wu 
glimpse tool search entire file systems 
winter usenix technical conference san francisco ca january pages 
usenix association 
michael mauldin 
retrieval performance ferret conceptual information retrieval system 
acm sigir conference research development information retrieval chicago il pages 
acm press 
kandemir choudhary 
exploiting inter file access patterns multi collective conference file storage technologies monterey ca january pages 
usenix association 
merriam webster online www com 
dennis quan david huynh david karger 
haystack platform authoring user semantic web applications 
international semantic web conference sanibel island fl october 
ronald rivest 
md message digest algorithm 
rfc 
stuart michael 
blending hierarchical attribute file naming 
international conference distributed computing systems yokohama japan june pages 
joao sousa david garlan 
aura architectural framework user mobility ubiquitous computing environments 
pages 
stephen strange 
analysis long term unix file access patterns applications automatic file migration strategies 
ucb csd 
university california berkeley computer science department august 
carl tait hui lei swarup acharya henry chang 
intelligent file hoarding mobile computers 
international conference mobile computing networking berkeley ca november pages 
acm 
yahoo www yahoo com 

