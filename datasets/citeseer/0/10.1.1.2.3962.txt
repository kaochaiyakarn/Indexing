complex queries dht peer peer networks matthew harren uc berkeley cs berkeley edu boon loo uc berkeley cs berkeley edu joseph hellerstein uc berkeley cs berkeley edu new generation systems offering distributed hash table dht functionality proposed 
systems greatly improve scalability exact match accuracy systems offer exact match query facility 
outlines research agenda building complex query facilities top dht systems 
describe issues involved outline research plan current status 
peer peer networks quickly growing technologies computing 
current technologies applications today networks serious limitations 
poor scaling centralized design napster notoriously inefficient search process gnutella hierarchical designs fast track scalability designs problematic 
significant progress regard scaling issue currently deployed systems 
impoverished query languages networks largely filesharing support kind simplistic query facility filesystem search tools find files names contain string 
note search limited form querying intended identifying finding individual items 
rich query languages find things allow combinations correlations things 
example possible search gnutella music bach scott shenker international computer science institute shenker icsi berkeley edu ryan huebsch uc berkeley huebsch cs berkeley edu ion stoica uc berkeley cs berkeley edu possible ask specifically bach chorales typically contain word name 
problems subject intense research years 
overcome scaling problems unstructured systems gnutella overlay network construction essentially random number groups proposed structured designs 
proposals support distributed hash table dht functionality :10.1.1.140.3129
significant implementation differences dht systems call systems support directly indirectly hash table interface put key value get key 
systems extremely scalable lookups resolved log small overlay routing hops overlay network size hosts 
dhts largely solve problem 
dhts support exact match lookups hash tables 
fine fetching files resolving domain names presents impoverished query language original unscalable systems 
solving problem dhts aggravated second problem 
engaged research project address second problem studying design implementation complex query facilities dhts see description related effort 
goal bring traditional functionality systems filesharing dht implementation push dht query functionality current filesharing search maintaining scalability dht tures 
note offers description approach brief discussion current status 
background describing approach discuss general issues text retrieval hash indexes explain proposing database 
text retrieval hash indexes noted dhts support exact match lookups 
somewhat surprisingly shown exact match facility hash indexes substrate textual similarity searches including strict substring searches fuzzy matches 
basic indexing scheme split string indexed grams distinct length substrings 
example file id filename th split twelve trigrams bee eet eth tho ove ven ens ns th represents space character 
gram gi pair gi inserted hash index keyed gi 
build index grams various values typical mixture bigrams trigrams 
index substring lookup split grams tho ove ven lookup done index gram query 
resulting lists matches concatenated grouped file id count copies file id concatenated list computed 
strict substring search files returned count copies number ngrams query example 
represents small superset correct answer grams may occur consecutively correct order results 
account resulting list directly test substrings 
text search literature tends think relational terms note query represented nearly directly sql select fileid filename hashtable text list grams search group fileid having count grams search filename substring expression relational algebra implementation terms requires index access operator grouping operator selection operators point discussion dwell details query 
sql query language important merely highlights universality operators apply database queries text search naturally hash indexes 
process relational algebra operators network dhts certainly execute traditional substring searches special case 
peer peer databases 
noted relational query processing powerful search lookups provided filesharing tools 
course traditional database systems provide great deal additional functionality missing filesharing notable features reliable transactional storage strict relational data model 
combined functionality cornerstone traditional database systems arguably database systems database research traditional high transactional applications 
environments quite different world wish study 
users systems focused perfect storage semantics carefully administered data 
interested ease massive scalability robustness volatility failures best effort functionality 
explosive growth networks show viable niche systems 
transactional storage semantics important kept substring match example strict clarity exposition 
cases gram search support useful fuzzy semantics files simply ranked descending count gram matches subtle ranking metric cutoff 
allows searching robust misspellings acronyms expense false positives answer set 
ranking scheme represented sql order clause containing externally defined ranking function 
note index augmented entry holds offset gram string allows tests ordering done observing actual string 
optimization usually helps strings indexed long fulltext documents file names 
clumsy express sql relational algebra implementation relatively straightforward 
applications familiar endusers today typically file systems storage 
users want deploy manage database kind 
believe street reality worth facing order maintain approach natural 
part see transactions integral part research thrust describe 
hand relational data modeling sense universal details abstracted away user 
data relational level inasmuch think storing table column labeled bits 
cases somewhat natural structure exploit noted sets files thought relations attributes name id host user need go complex data modeling exercise enable system index query attributes sophisticated ways 
see pressing need users system load data database prefer build query engine natural attributes exposed users existing data querying attributes intelligently providing storage semantics users learned live 
fact wish stress point may strategically unwise discuss peer topeer databases attendant complexities software administration associated database storage 
focus peer peer query processing separate problem storage semantics administration 
course leave option open ideas combined transactional mechanisms suggested 
wed success technical efforts 
worth noting despite current commercial packaging relational database research early prototypes onward separated storage layer query processing layer 
simply footsteps new storage regime 
query processing design constrained goals broad applicability main goal broadly practically usable 
short term means able interact user filesystems way query processor enhanced dht layer data storage file system network software architecture node implementing query processing 
existing filesharing systems 
minimal extension dht apis dhts proposed number purposes networks want complicate design dht excessive hooks specifics query processing 
direction need query processing technology portable dht implementations clear winner emerged dht design space 
reasons wish keep dht apis thin general purpose possible 
relational operators seek implement challenging workloads dht designers 
believe encourages synergistic research query processing dht design mind 
architecture design decisions propose architecture diagrammed 
note networking handled dht layer dhts indexing mechanism network routing mechanism 
proceed basic overview architecture components 
bottom layer local data store support api iterator java stl supporting interface scan set objects 
object accessors attributes contents 
unique identifier object content object byte array 
metadata interface find additional attributes objects store 
accessors additional attributes 
note specify details data store interface read 
design goal expect store filesystem easily wrapper database table view 
layer dht layer supports put get interface enhanced iterator called scan allocated code links dht library machine typically query processor 
scan allows local code iterate dht entries stored machine 
callback notifies higher layers identifier new insertions local portion dht 
scan important various query processing operators need scan data shall see 
addition scanning unusual popular hashing packages support scanning items 
note break location transparency dht abstraction scan order allow scans parallelized machines distributed scan interface single caller iterator 
scan interface allows code run machine scanning local data parallel machines 
desirable dhts temporary state query processing want insertions state dealt timely fashion 
top layer query processing qp layer includes support parallel implementations query operators described support specifying queries iterating query results 
query executor implemented traditional pull iterator style surveyed graefe parallel communication encapsulated exchange operators 
plan support query apis graph scripting interface specifying explicit query plans simplified sql interface support declarative querying 
common query types keyword search supported sugar sql application programming easier 
namespaces multicast dht systems assume flat identifier space appropriate manage multiple data structures required query processing 
particular need able name tables temporary tables tuples table fields tuple 
approach implement hierarchical name space top flat identifier space provided dhts partitioning identifiers multiple fields field identify objects granularity 
hierarchical name space requires complex routing primitives multicast 
suppose wish store small temporary table subset nodes network 
need route queries just subset nodes 
possibility modify routing protocol node forwards query neighbors progress identifier space identifiers covered query 
query processing operators focus traditional relational database operators selection projection join grouping aggregation sorting 
number themes arise designs 
expect communication key bottleneck query processing try avoid excessive communication 
second wish harness parallelism inherent leverage traditional ideas intra operator parallelism pipelined parallelism achieve goals 
third want answers stream back style online query processing users impatient expect perfect answers ask broad queries interested results 
focus example joins grouping unary hashing operators quite analogous joins subtle differences 
basic join algorithm relations pipelined symmetric hash join dht infrastructure route store tuples 
algorithm begins query node initializing unique temporary dht namespace 
assume data iterating relations may generated scan complex query subplan 
join algorithm fully symmetric respect describe loss generality perspective 
join operator repeatedly gets datum relation extracts join attribute datum uses attribute insertion key dht 
new data inserted node call notifies qp layer takes datum uses join key probe local data matches 
matches pipelined iterator query plan client machine case final results 
case table say stored hashed join attribute need rehash tuples scanned parallel scans probe dht 
selection important operator 
relational selection achieved followed explicit test selection predicate index lookup optionally followed predicate test 
clearly explicit tests pushed network limit flow data back 
index supported selections limit network utilization sending requests nodes data 
dht indexes currently support equality predicates 
interesting question try develop range predicate support manner efficient current dhts 
status implemented join operation modifying existing simulator performed exhaustive simulations 
addition solution previous section implemented join variants 
example variants rehash tables say join attribute 
node scans locally table tuple queries tuples st join attribute value performs local joins 
main metric consider simulations join latency function defined fraction total result tuples join initiator receives time interesting result function significantly smoother fair queueing algorithm allocate communication process resources 
metrics consider simulations data placement query processing hotspots routing hotspots 
preliminary results show realistic distributions join attribute values significant hotspots dimensions storage processing routing 
degenerate case hash join simply parallel index nested loops join dht 
suggests fly scheme table probes 
index fly blocks query pipeline duration rehashing dominate pipelining scheme 
acknowledgments authors benefited discussions michael franklin petros maniatis sylvia ratnasamy shelley zhuang 
insights suggestions 
astrahan chamberlin eswaran gray griffiths iii lorie mcjones mehl traiger wade watson system relational approach database management 
acm transactions database systems tods 
hashing methods relational algebra operations 
proc 
international large data bases vldb pp 

druschel rowstron past persistent anonymous storage peer peer networking environment 
proceedings th ieee workshop hot topics operating systems hotos germany may pp 


www fasttrack nu 
graefe encapsulation parallelism volcano query processing system 
proc 
acm sigmod international conference management data atlantic city may pp 

graefe query evaluation techniques large databases 
acm comput 
surv 
june 
gribble halevy ives suciu database vice versa 
proc 
webdb workshop 
haas hellerstein online query processing tutorial 
proc 
acm sigmod international conference management data santa barbara may 
notes posted online control cs berkeley edu 
hellerstein haas wang online aggregation 
proc 
acm sigmod international conference management data 
kubiatowicz bindel chen czerwinski eaton geels gummadi rhea weatherspoon weimer wells zhao oceanstore architecture persistent storage 
proceeedings ninth international conference architectural support programming languages operating systems asp los boston ma november pp 

plaxton rajaraman richa accessing nearby copies replicated objects distributed environment 
proceedings acm spaa newport rhode island june pp 

ratnasamy francis handley karp shenker scalable content addressable network 
proc 
acm sigcomm san diego ca august pp 

seltzer new hashing package unix 
proc 
usenix winter conference dallas jan pp 

stoica morris karger kaashoek balakrishnan chord scalable peerto peer lookup service internet applications 
proceedings acm sigcomm conference san diego california august 
stonebraker wong kreps held design implementation ingres 
acm transactions database systems tods 
wilschut apers dataflow query execution parallel main memory environment 
proc 
international conference parallel distributed info 
sys 
pdis pp 

witten moffat bell managing gigabytes compressing indexing documents images second ed 
morgan kaufmann 
zhao kubiatowicz joseph tapestry infrastructure fault tolerant wide area location routing 
tech 
rep ucb csd university california berkeley computer science department 

