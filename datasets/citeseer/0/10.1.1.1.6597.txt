trees grown yannis manolopoulos nanopoulos papadopoulos aristotle university thessaloniki greece yannis theodoridis university greece spatial data management active area intensive research decades 
order support spatial objects database system issues taken consideration spatial data models indexing mechanisms efficient query processing cost models 
influential access methods area tree structure proposed guttman effective efficient solution index rectangular objects vlsi design applications 
variations original structure proposed providing efficient access handling objects high dimensional spaces supporting concurrent accesses supporting cpu parallelism efficient bulk loading 
due modern demanding applications academia paved way industry recognized necessity trees 
simplicity structure resemblance tree allowed developers easily incorporate structure existing database management systems order support spatial query processing 
provide extensive survey tree evolution studying applicability structure variations efficient query processing accurate proposed cost models implementation issues concurrency control parallelism 
observation space anticipate era ubiquitous tree analogous manner trees considered years ago 
categories subject descriptors data data structures trees database management physical design access methods database management systems query processing concurrency parallel databases general terms algorithms management additional key words phrases spatial data management spatial query processing selectivity cost estimation author address yannis manolopoulos nanopoulos papadopoulos department informatics aristotle university thessaloniki greece alex csd auth gr yannis theodoridis department informatics university greece unipi gr permission digital hard copy part material fee personal classroom provided copies distributed profit commercial advantage acm copyright server notice title publication date appear notice copying permission acm copy republish post servers redistribute lists requires prior specific permission fee 
yy acm yy acm computing surveys vol 

month yy pages 
yannis manolopoulos 
entitled ubiquitous tree comer published acm computing surveys 
keyword tree standing generic term family variations trees trees minor variants 
title provocative time 
represented big truth valid days textbooks databases data structures devote considerable number pages explain definitions characteristics basic procedures searches inserts deletes trees 
trees just theoretical notion 
contrary years remain de facto standard access method prototype commercial relational systems typical transaction processing applications observe quite elegant efficient structures appeared literature 
period wide acceptance relational systems market time apparent relational model adequate host new emerging applications 
name multimedia cad cam geographical medical scientific applications just examples relational model proven behave poorly 
object oriented model object relational model proposed sequel 
reasons shortcoming relational systems inability handle new kind data trees 
specifically trees designed handle alphanumeric dimensional data integers characters strings ordering relation defined 
number new tree variations appeared literature handle object oriented data see comparative study 
mainly structures aiming hosting data object hierarchies data single structure 
efforts limited applicability cover requirements new application areas 
light evolution entirely novel access methods proposed evaluated compared established 
structures tree proposed guttman aiming handling geometrical data points line segments surfaces volumes hyper volumes high dimensional spaces 
trees treated literature way trees 
particular improving variations proposed various instances environments novel operations developed new cost models suggested 
due modern demanding applications academia paved way industry recognized necessity trees 
trees adopted additional access method handle multidimensional data 
observation space anticipate era ubiquitous tree analogous manner trees considered years ago 
nowadays spatial databases geographical information systems established mature field spatiotemporal databases manipulation moving points trajectories studied extensively image multimedia databases able handle new kinds data images voice music video designed developed 
application cases rely trees acm computing surveys vol 

month yy 
trees grown necessary tool data storage retrieval 
tree applications cover wide spectrum spatial temporal image video multimedia databases 
initial application motivated guttman pioneering research vlsi design efficiently answer space covered chip 
course handling rectangles quickly application geographical general spatial data including gis buildings rivers cities image video audio retrieval systems similarity objects original space high dimensional feature space time series chronological databases time intervals just objects 
argue trees 
survey aims summarizing literature relevant trees 
structure follows 
section original tree structure variants 
number tree variants quite large examine subsections having mind special characteristics assumed environment application 
section query processing issues focusing new types queries topological directional distance operators 
section presents query optimization including analytical cost models histogram optimization techniques 
section describes implementation issues concerning trees parallelism concurrency control summarizes known literature prototype commercial systems implemented 
section concludes survey 

family tree trees survey gaede annotates vast list citations related multidimensional access methods particular refers trees significant extent 
survey focusing family trees enlightening similarities differences advantages disadvantages various variations exhaustive manner 
numbers variants appeared literature large group special characteristics assumed environment application examine members group chronological order 
dynamic versions trees subsection dynamic versions tree objects inserted basis opposed case special packing technique applied insert apriori known static set objects structure optimizing storage overhead retrieval performance 
case examined subsection 
simple words focus way dynamic insertions splits performed assorted tree variants 
original tree 
nowadays original tree described standard textbooks monographs databases briefly recall basic properties 
trees hierarchical data structures trees 
dynamic organization set dimensional geometric objects representing minimum bounding acm computing surveys vol 

month yy 
yannis manolopoulos dimensional rectangles simplicity mbrs sequel 
node tree corresponds minimum mbr bounds children 
leaves tree contain pointers database objects pointers children nodes 
nodes implemented disk pages 
noted mbrs surround different nodes may overlapping 
mbr included geometrical sense nodes associated 
means spatial search may visit nodes confirming existence mbr 
rules obeyed tree follows 
leaves reside level 
leaf contains pairs form mbr contains spatially object node contains pairs form pointer child node mbr contains spatially mbrs contained child 
node possible exception root tree class contains pairs 
root contains pairs leaf 
depicts objects left corresponding tree right 
data rectangles stored leaf nodes mbrs ra rb rc hosted intermediate nodes 
fig 

tree example 
insertions new objects directed leaf nodes 
level node enlarged chosen 
object inserted existing leaf adequate space split takes place 
minimization sum areas resulting nodes driving criterion guttman proposed alternative algorithms handle splits linear quadratic exponential complexity linear 
choose objects seeds nodes objects furthest possible 
consider remaining object random order assign node requiring smaller enlargement respective mbr 
quadratic 
choose objects seeds nodes objects put create dead space possible dead space space remains mbr areas objects ignored 
remaining objects choose insertion object difference dead space assigned nodes maximized insert node requires smaller enlargement respective mbr 
acm computing surveys vol 

month yy 
trees grown exponential 
possible groupings exhaustively tested best chosen respect minimization mbr enlargement 
guttman suggested quadratic algorithm compromise achieve reasonable retrieval performance 
tree variants appeared literature tree traversals kind operations executed exactly way original tree see section 
basically variations trees differ way perform splits insertions considering different minimization criteria sum areas resulting nodes 
sequel annotate chronological order appearance 
tree 
trees proposed structure avoids visiting multiple paths point queries retrieval performance improved 
achieved clipping technique 
simple words trees allow overlapping mbrs tree level 
turn achieve inserted objects divided mbrs means specific object entries may duplicated redundantly stored various nodes 
redundancy works opposite direction decreasing retrieval performance case window queries 
time side effect clipping insertions mbr augmentation may lead series update operations chain reaction type 
certain circumstances structure may lead deadlock example split take place node rectangles rectangle encloses smaller 
tree dataset illustrated 
fig 

tree example 
tree 
proposed trees received widely accepted literature prevailing performance wise structure basis performance comparisons 
tree obey limitation number pairs node follows sophisticated node split technique 
specifically technique forced reinsertion applied node overflows entries extracted reinserted tree parameter suggested optimal value 
novel features trees takes account additional criteria minimization sum areas produced mbrs 
benefit involving criteria clear section acm computing surveys vol 

month yy 
yannis manolopoulos performance tree analyzed 
criteria minimization overlapping mbrs level minimization perimeter produced mbrs 
benefits considering criteria clear section tree performance analyzed 
conclusively tree insertion algorithm quite improving comparison original tree improves structure considerable far retrievals concerned 
evidently insertion operation free cpu demanding applies plane sweep algorithm 
hilbert tree 
hilbert tree hybrid structure trees trees 
tree geometrical objects characterized hilbert value centroid 
leaves internal nodes augmented largest hilbert value contained objects descendants respectively 
insertion new object level hilbert values alternative nodes checked smallest larger hilbert value object insertion followed 
addition heuristic case overflow hilbert trees redistribution objects sibling nodes 
words case siblings checked order find available space absorb new object 
split takes place siblings full nodes produced 
heuristic similar applied trees redistribution splits performed node overflows 
authors experimentation hilbert trees proven best dynamic version trees time publication 
variant vulnerable performance wise large objects 
linear node splitting 
ang tan proposed linear algorithm distribute objects overflowing node sets 
primary criterion algorithm distribute objects nodes evenly possible second criterion minimization overlapping 
third criterion minimization total coverage 
experiments algorithm shown results trees better characteristics better performance window queries comparison quadratic algorithm original tree 
optimal node splitting 
garcia lopez leutenegger elaborated optimal exponential algorithm guttman reached new optimal polynomial algorithm space dimensionality 
authors give insertion heuristic called sibling shift 
particular objects overflowing node optimally separated sets 
set stored specific node set inserted sibling node depict minimum increase objective function expected number disk access 
node accommodate specific set algorithm terminates 
recursive manner node split 
process terminates sibling absorbs insertion possible case new node created store pending set 
authors reported combined optimal partitioning algorithm sibling shift policy improves index quality node utilization retrieval performance comparison hilbert trees cost increased acm computing surveys vol 

month yy 
insertion time 
trees grown branch grafting 
insertion heuristic proposed improve shape tree tree achieves elegant shape smaller number nodes better storage utilization 
particular node overflows father content checked sibling node overlapping mbr accommodate objects node question 
technique called branch grafting considered eager method handling overflows locally reasonable cost forced reinsertion viewed lazy approach higher costs applied 
comparison regards various storage utilization parameters query processing efficiency 
compact trees 
huang proposed compact trees dynamic tree version optimal space overhead 
entries overflowing node insertions set entries selected remain node constraint resulting mbr minimum possible 
remaining entry inserted sibling available space ii mbr enlarged minimum possible 
split takes place available space sibling 
heuristic quite simple implement results storage utilization area opposed original tree extra insertion overhead window query performance similar original tree 
cr trees 
lastly altered assumption overflowing node necessarily split exactly nodes 
particular relied means clustering algorithm assumed overflowing node split nodes parameter 
experimentation showed resulting index quality retrieval performance insertion time significantly better trees assuming quadratic split similar trees 
deviating variations 
interesting variants proposed sense deviate drastically original idea trees 
efforts note works 
sphere trees minimum bounding spheres mbrs cell trees minimum bounding polygons designed accommodate arbitrary shape objects 
cell tree clipping structure variant cell trees proposed overcome disadvantages clipping 
variant uses shelves special nodes attached internal ones contain objects normally cause considerable splits 
similarly cell trees jagadish proposed independently structure polyhedral trees trees minimum bounding polygons mbrs 
tree berchtold uses notion supernodes nodes greater size handle overflows avoid splits 
tree relaxes rule tree balanced structure may leaves different tree levels 
trees static structures sense demand data known advance 
effort acm computing surveys vol 

month yy 
yannis manolopoulos ang tan bitmap tree node contains bitmap descriptions internal external object regions mbrs objects 
extra space demand paid savings retrieval performance due better tree pruning 
trade holds rs tree proposed park connects tree signature tree node correspondence 
agarwal proposed box tree hierarchy uses axis aligned boxes bounding volumes 
provide worst case lower bounds query complexity showing box trees close optimal algorithms convert box trees trees resulting trees optimal query complexity 
lee chung developed dr tree main memory structure multi dimensional objects 
couple tree structure improve spatial query performance 
partitioned tree number smaller trees lines binomial queues efficient variation heaps 
static versions trees common applications static data 
instance insertions deletions census cartographic environmental databases rare performed 
applications special attention paid order construct optimal structure regards tree characteristics storage overhead minimization storage utilization maximization minimization overlap cover tree nodes combinations 
anticipated query processing performance improved 
methods known literature packing bulk loading 
examine methods require data known advance 
packed tree 
packing algorithm proposed roussopoulos soon proposal original tree 
effort basically suggests ordering objects spatial criterion ascending coordinate grouping leaf pages 
experimental compare performance method original tree 
simple inspiration number efforts proposed literature 
hilbert packed tree 
kamel faloutsos proposed elaborated method construct static tree storage utilization 
particular heuristics proposed sorting objects hilbert value centroids build tree bottom manner 
experiments showed method achieves significantly better performance original tree quadratic split tree packed tree roussopoulos point window queries 
kamel faloutsos proposed formula estimate average number node access independent details tree maintenance algorithms applied tree variant 
str tree 
str sort tile recursive bulk loading algorithm trees proposed leutenegger 
number rectangles dimensional space 
basic idea method tile address space acm computing surveys vol 

month yy 
trees grown vertical slices slice contains rectangles create approximately nodes tree node capacity 
initially number leaf nodes determined 
rectangles sorted respect coordinate centroids slices created 
slice contains rectangles consecutive sorted list 
slice objects sorted coordinate centroids packed nodes placing objects node 
method applied tree levels formulated 
str method easily applicable high dimensionalities 
experimental evaluation performed demonstrated str method generally better previously proposed bulk loading methods 
cases hilbert packing approach performs marginally better 
noticed garcia proposed tree node restructuring algorithm post optimizing existing trees improving dynamic insertions incurs optimization cost equal str 
resulting tree outperforms dynamic tree versions hilbert tree small additional cost insertions 
analytical model predict number disk accesses buffer management described leutenegger lopez evaluates quality packing algorithms measured query performance resulting tree 
top greedy split 
aforementioned packing algorithms build tree bottom top greedy split tgs method constructs tree top manner 
tgs recursively applies splitting process partitions set rectangles subsets applying orthogonal cut selected axis 
process satisfy conditions value objective function minimized subset cardinality resulting subtrees packed 
method recursively applied subsets 
objective function form mbrs subsets produced 
performance evaluation method reported demonstrated tgs approach generally better previously proposed packing algorithms 
small tree large tree 
previous packing algorithms build tree access method set spatial objects 
small tree large tree method performs efficient bulk insertions existing tree structure 
set spatial objects indexed existing tree set new objects inserted 
inserting objects tree method constructs small tree inserts small tree large tree 
obviously efficiency resulting index depends data distribution small tree 
objects cover large part data space approach result increasing overlap resulting index 
method best suited skewed data distributions 
extended generalized tree bulk insertion strategy proposed 
inserts new incoming data sets active trees follows partitions data sets set clusters outliers constructs small tree cluster finding suitable places original tree insert newly created trees bulk inserts acm computing surveys vol 

month yy 
yannis manolopoulos new trees outliers original tree 
buffer tree 
arge proposed buffer tree br performing bulk update queries 
br buffer tree lazy buffering technique exploits available main memory 
analytical results show efficiency br experimental results illustrates superiority methods 
br requires smaller execution times perform bulk updates produces better quality index terms query performance 
br differently methods allows simultaneous batch updates queries 
tree low stabbing number 
proposed rtree construction algorithm set spatial objects focus high dimensionality prove resulting tree query complexity point range queries ranges small width 
analysis stabbing number number rectangles containing point 
produced bounds optimal certain special cases 
comparison performed methods 
spatiotemporal tree variants spatiotemporal access methods provide necessary tools query spatiotemporal data 
large number proposed methods known tree structure 
sequel introduce number query processing techniques related spatiotemporal applications spatial applications trajectory monitoring moving objects 
methods concept tree 
trees 
tree proposed considers time extra dimension represents rectangles time intervals dimensional boxes 
tree original tree ephemeral variants 
tree approach assumes ends interval rectangle known fixed 
time known approach 
instance assume object extends fixed time current time refer thorough discussion notion 
approach represent time instance sufficiently far 
leads excessive boxes consequent poor performance 
standard spatial access methods sams tree variants suited handle open expanding objects 
special case problem overcome movements known priori 
cause closed objects entries tree 
tree implemented evaluated analytically experimentally compared alternative solution maintaining spatial index tree temporal index tree segment tree 
synthetic uniform datasets retrieval costs pure temporal pure spatial overlap spatiotemporal operators combinations measured 
results suggest unified scheme single tree obviously superior spatiotemporal queries posed mixed workloads decision depends selectivity operators 
acm computing surveys vol 

month yy 
trees grown tree 
possible solution problem open geometries maintain pair trees tree stores dimensional entries represent current spatial information data tree stores dimensional entries represent past spatiotemporal information name tree 
tree approach variation original idea proposed context databases generalized accommodate general data 
long time object interval unknown indexed front tree keeping start time position id known associated entry migrated front tree back tree new entry storing updated current location inserted front tree 
know object movements priori front tree tree reduces tree earlier 
important note trees may need searched depending time instance related posed queries 
historical tree 
historical trees hr trees short proposed implemented evaluated improved 
stam overlapping technique 
hr tree conceptually new tree created time update occurs 
obviously practical physically keep entire tree update 
update localized indexed data index remain unchanged update 
consequently tree successor identical nodes 
hr tree exploits represents trees logically 
hr tree viewed acyclic graph collection independent tree structures 
aid array pointing root underlying trees easily access desired tree performing timeslice query 
fact root node desired tree time instance specified query obtained query processing cost trees kept physically 
concept overlapping trees simple understand implement 
number objects change location space relatively small approach space efficient 
number moving objects time instance large approach degenerates independent tree structures common paths 
st tree 
st tree capable indexing spatio data discretely changing spatial extents 
contrast indexing structures described previously st tree supports data temporal dimensions spatial dimensions 
valid time data time past data true modeled reality transaction time acm computing surveys vol 

month yy 
yannis manolopoulos data time data current database 
data valid transaction time captured termed 
mv tree 
overcome shortcomings tree hr tree tao papadias proposed mv tree consisting multiversion tree small auxiliary tree built leaves 
extensive experimentation mv tree turned efficient timestamp interval queries relatively small space requirements 
partially persistent tree 
proposed partially persistent tree ppr tree directed acyclic graph nodes number root nodes root responsible recording subsequent part ephemeral tree evolution 
disadvantage indexing techniques space requirements prohibitive agile datasets 
tb tree 
tb tree trajectory bundle relaxes fundamental tree property keeping neighboring entries node strictly preserves trajectories leaf node contains segments belonging trajectory 
achieved giving space discrimination 
indexes past locations objects supports continuous changes 
time parameterized tree 
aforementioned access methods focus providing access paths past values objects 
access method tree structure provides access values time parameterized tree 
method concept non static mbrs leaf internal nodes 
words mbr object tree node function time 
assumed velocity vector object known 
location object velocity vector determine current object position space 
basic characteristic tpr tree structure covering mbrs internal nodes rarely minimum conservative 
efficient variation tpr tree proposed eliminates basic disadvantages structure shows better performance query processing 
trees olap data warehouses data mining trees storing processing spatial spatiotemporal data 
modifications tree structure proposed order handle queries olap applications data warehouses data mining 
variations olap data warehouses store summary information internal nodes cases necessary search lower tree levels 
examples queries window aggregate queries parts dataspace requested satisfy certain aggregate constraints 
nodes totally contained query window accessed 
efforts context variant ra tree proposed efficient processing window aggregate queries summarized data stored internal nodes addition mbr 
technique case spatial data warehouses 
ap tree introduced order process aggregate queries planar point data 
combination aggregate trees trees proposed spatiotemporal data acm computing surveys vol 

month yy 
trees grown warehouse indexing 
trees context data mining 
particular spatial data mining systems include methods gradually refine spatial predicates indexes tree derive spatial patterns spatial association rules 
nanopoulos tree structure closest pairs query developed algorithm efficient clustering proposed density biased sampling algorithm trees performs effective pre processing clustering algorithms 

query processing processing spatial queries presents significant requirements due large volumes spatial data complexity objects queries efficient processing spatial queries capitalize proximity objects achieved tree focus searching objects satisfy queries 
efficiency main reasons popularity tree indexes stems versatility efficiently support types spatial operators 
common types operators topological find objects overlap cover object directional find objects lie north object distance find objects lie distance object 
operators comprise basic primitives developing complex ones applications management spatial data gis cartography 
described tree abstracts object complex shapes polygons polygons holes mbr approximations 
answer queries containing aforementioned operators step procedure followed filter step collection objects mbrs satisfy query comprises candidate set 
ii refinement step actual geometry member candidate set examined eliminate false hits find answer query 
steps illustrated 
general filter step determine inclusion object query result 
operators directional ones allow finding query results filter step 
shown existence hits answers query filter step 
fig 

step query processing procedure 
acm computing surveys vol 

month yy 
yannis manolopoulos describe detail query processing techniques developed query type 
refinement step orthogonal filtering step developed techniques mainly focused 
details representations different mbr impact refinement step 
range topological queries common operation tree index range query finding objects query region intersects 
cases query region rectangle query called window query 
processing range window query defined 
commences root node tree 
entry mbr intersects query region process descends corresponding subtree 
leaf level object bounding rectangle intersects query region corresponding object examined refinement step 
mentioned point queries find objects contain query point treated range query query point considered degenerated rectangle 
case combining execution range queries order achieve better performance considered 
intersection operator examined range query considered special case detailed retrieval topological relations 
papadias developed systematic description topological information mbrs convey corresponding spatial objects proposed algorithm minimize cost topological queries queries involve topological relations 
particular intersection test range query corresponds disjoint non disjoint condition indexed objects called primary objects contained tree query object called object 
disjoint relation left unchanged non disjoint relation refined relations meet equal overlap contains covers 
depicts possible relations objects 
fig 

topological relations disjoint meet overlap covers contains inside equal 
topological relation mbrs necessarily coincide topological relations corresponding objects mbrs approximate representations 
objects corresponding mbrs satisfy general number possible relations 
order perform topological query tree defines general relations downwards propagation intermediate nodes 
convenience denote aforementioned approach names authors 
acm computing surveys vol 

month yy 
trees grown experimental results indicate topological relations divided categories respect incurred cost 
category contains relation disjoint requires larger cost equal scanning entire tree contents second contains relations meet overlap inside covered require medium cost third relations equal cover contains require small cost 
compared straightforward case range query executed topological relations examined refinement step approach shows improvement 
directional queries trees answer queries involving directional information left north 
papadias discussed relations points north relations non point objects approximated mbrs strong north weak north provided methodology support types queries objects mbrs indexed tree 
methodology includes steps node rectangles include hits detected direction relation possibly different target relation candidate hits accessed direction relation 
case topological queries procedure involves mbrs composes filter step actual hits detected refinement step involves exact geometry objects 
consider example assume ask objects weak north object object approximated mbr rectangle defined lower left corner rl upper right corner ru 
tree nodes include hits fulfill constraint pu north pl south respectively candidate hits fulfill constraint north north south strategy supported number directional queries showed experiments performance 
nearest neighbor queries problem answering nearest neighbor nn queries trees introduced roussopoulos 
approach metrics measure optimistic pessimistic distances tree contents query point query point object represented mbr describes metrics 
called mindist corresponds minimum possible distance second called minmaxdist corresponds minimum maximum possible distances vertex mbr 
metrics comprise lower upper bound actual distance respectively 
specifically mindist distance closest point boundary necessarily corner point 
minmaxdist distance closest corner adjacent connected edge nn query extended non point objects providing appropriate distance measures 
see details 
acm computing surveys vol 

month yy 
yannis manolopoulos corner farthest illustrates example mindist minmaxdist metrics dimensional query point mbrs rectangle includes mindist equal 
fig 

example mindist minmaxdist 
branch bound tree traversal algorithm uses aforementioned metrics order prune search tree 
search ordering determines node visits tree traversal 
described mindist produces optimistic ordering minmaxdist may exist cases data sets depending sizes layouts mbrs produces costly traversals 
query point pruning node visits searching performed heuristics 
complete algorithm finding st nn 
mbr mindist greater minmaxdist mbr discarded contain nn 
downward pruning 
actual distance object greater minmaxdist mbr discarded contains object nearer downward pruning 
mbr mindist greater actual distance object discarded enclose object nearer upward pruning 
cheung fu observed efficient version aforementioned branch bound algorithm derived basis pruning respect number node accesses considered 
observation third pruning heuristic necessary maintain number pruned nodes 
observation independently 
pruning heuristic applied different position resulting modified nn search algorithm denote mn 
reasons procedure modified removing step applies second pruning heuristics repositioning step third pruning heuristic recursive application step 
loop steps 
finding nn previous procedure easily modified maintain current closest objects pruning respect furthest object time 
acm computing surveys vol 

month yy 
procedure node point nearest 
node type leaf 
node count 
dist point node branch rect 
dist nearest dist 
nearest dist dist 
nearest rect node branch rect 
endif 
endfor 



node point nearest 

newnode node branch 
newnode point nearest 
node point nearest 
endfor 
endif 
fig 

nearest neighbor search algorithm 


apply pruning heuristic 
newnode node branch 
newnode point nearest 
endfor fig 

modification 
trees grown noticed proposed nearestneighbor algorithm tree variant 
method considers information space improve search 
resulting data structure integrates tree regular grid indexed hashing technique combining advantages rectangular space decomposition attained trees direct access attained hashing 
incremental nearest neighbor queries samet problem incremental nn searching tree 
incremental nn queries find data objects order distance query object ranking 
instance set cities query find nearest city population larger people 
obtaining neighbors incrementally examined specified criterion 
operation defined distance browsing 
noticed different searching prespecified known advance 
acm computing surveys vol 

month yy 
yannis manolopoulos algorithm incremental nn searching maintaining set nodes visited priority queue case skewed high dimensional data proposes queue divided tiers remains main memory secondary storage 
entries queue sorted mindist metric 
assumed actual objects polygons stored separately data level long object completely contained corresponding bounding rectangle 
leaf level tree object bounding rectangles mbrs data objects advocate pruning 
bounding rectangle object denoted 
algorithm depicted 
procedure 
enqueue root children 
empty 
element dequeue 
element object object bounding rectangle 
element empty key 
enqueue 

output element element bounding rectangle associated object 
endif 
element leaf node 
foreach object bounding rectangle element 
enqueue dist 
endfor 
non leaf node 
foreach entry element 
enqueue dist 
endfor 
endif 
endwhile 
fig 

optimal nearest neighbor search algorithm 
analysis incremental nn searching algorithm key observation algorithm tree visit nodes intersect search region notices incremental algorithm visits exactly nodes 
assumption low dimensionality uniform data distribution proven expected number leaf node accesses nn processing 
evidently incremental nn search algorithm applied problem finding nns specified terminate having neighbors 
case approach differs 
branch bound algorithm section traverses index depth fashion 
node visited processing completed sibling nodes probable contain nn object step acm computing surveys vol 

month yy 
trees grown local decisions 
contrast described algorithm global decisions priority queue maintain nodes going visited chooses child nodes nodes visited current 
uses best traversal tree prunes visiting nodes third pruning heuristic 
approach characteristic optimality respect number tree node visits nn problem 
interestingly described analogous nn searching algorithm approach prior version called optimal nearest neighbor search 
comparison nearest neighbor algorithms 
description nn algorithms original branch bound knn modified mnn incremental inn follows design issues affect performance nn searching criterion ordering node visits ii manner ordering node visits traversal type iii pruning heuristics 
table summarizes selection algorithm issues pruning heuristics explained section 
knn mnn inn ordering mindist minmaxdist mindist mindist traversal type depth depth best pruning heuristics table characterization nn search algorithms 
experimental results show inn clearly outperforms knn 
noticed comparison high dimensional data left open issue considered size priority queue may increase significantly stored disk 
reverse conditional nearest neighbor queries reverse nearest neighbors 
reverse nn queries find set database points query point nn 
reverse nn problems asymmetric 
nn query point data point hold general nn necessarily reverse nn 
aforementioned problem introduced restricted static data specialized data structures 
developed reverse nn algorithm tree handle dynamic data efficiently 
algorithm notion space dividing lines 
dimensional space point associated lines 
denoted parallel axis angle 
left part illustrates arrangement space dividing lines determine regions denoted 

acm computing surveys vol 

month yy 
yannis manolopoulos query point corresponding region si nn si reverse nn exist reverse nn si 
si regions nn query point 
set points regions determine candidate set examined identify reverse nn 
dimensional space limits choice rnn points regions 
corresponding algorithm depicted right part 
note computations corresponding regions done single traversal separately region 
procedure point 



foreach 
nn 


endif 
endfor 
return 
fig 

left space dividing lines 
right reverse nearest neighbor search algorithm 
conditions determined space dividing lines 
regions si conditional nn determines nn query point si 
procedure observation examination points belong mbrs si pruned 
mbr belongs si overlapping done fully partially 
leads possible cases region mbr fully contained vertices 
mbr vertices 
exist data points contained 
mbr vertices 
data point entire edge exist point edge 
mbr vertex 
implication done existence points belong 
mbr vertices part overlaps 
implication done existence points belong existence 
consideration aforementioned cases conditional nn searching traverses tree prunes sections lead answer mbrs belong examined region determined points region closer query point 
acm computing surveys vol 

month yy 
trees grown generalized conditional nearest neighbor searching 
conditional nn searching determined constraints due space dividing lines extended consider general constraints 
define constrained nn cnn queries nn queries constrained specified region determined convex polygon 
instance dimensional map depicted left part contains cities represented points 
query point cnn query find nearest city south evidently unconditional nn search result city contrast result cnn query city cnn queries combine directional distance operators 
cnn queries involve multiple constraint regions 
straightforward approach cnn problem apply range query specified constrained region search nns results range query inn finding nearest points order distance testing satisfy constraint time may unnecessarily retrieve large number points belong query region finding desired ones 
fig 

left example cnn query 
right modified metrics cnn 
reasons proposes new approach merges conditions nn regional constraints phase 
extension described reverse nn considers general areas defined polygons regions determined space dividing lines 
cnn considers possible cases overlap query region mbr described section 
mindist minmaxdist metrics modified different way 
query constraint region query point mbr ir polygon intersection ir known techniques exist identify intersection polygon 
having calculated edges ir polygon defines mindist minimum distances edges 
case illustrated right part noticed mindist offers tighter bound compared mindist 
similarly minmaxdist defined hold partially contained constraint explicitly determine convex polygon described combination directional line space boundary gives desired polygon 
acm computing surveys vol 

month yy 
yannis manolopoulos defines minmaxdist computed edges completely contained identify distance guarantees inclusion point 
case illustrated right part shaded area represents ir original metrics depicted dashed line modified ones solid line 
spatial join queries spatial relations 

bm ai bi spatial objects spatial join computes pairs ai bj ai bj satisfy spatial predicate topological operators overlap ai bj coverage ai covers bj 
instance queries find rivers cross cities 
step processing scheme section tree facilitates filter step determination pairs mbr ai mbr bj satisfy required operator instance mbr ai mbr bj case overlap 
spatial join queries differently selection queries range nn single scan characterized multiple scan queries objects may accessed 
types queries pose increased requirements efficient query processing 
examine case way join multi way join examined section 
algorithm depth traversal 
brinkhoff algorithm processing spatial joins trees 
joined trees 
basic form algorithm traverses trees depth manner testing time entries nodes nr ns tree respectively 
er nr es ns 
mbrs intersect examination corresponding subtrees avoided 
algorithm proceeds recursively entries subtrees 
presents search pruning criterion capitalizes clustering properties tree 
description basic form algorithm 
procedure rj nr ns 
foreach es ns 
foreach er nr mbr er mbr es 
nr leaf node ns leaf 
output er es 

rj er es 
endif 
endfor 
endfor 
fig 

basic depth spatial join algorithm 
procedure rj assumed step trees equal height 
described trees different heights algorithm reaches acm computing surveys vol 

month yy 
trees grown leaf node node leaf window queries subtrees rooted non leaf node performed mbrs entries belonging leaf node 
experimental results indicate window queries profit proposed optimizations described sequel performance join query may impacted case 
avoid possible multiple nodes lru buffer 
basic form algorithm node entry examined entries node 
reason optimizations proposed restricting search space nodes nr ns mbr nr mbr ns intersection rectangle 
optimization observation entries er nr es ns er es examined common intersection 
spatial sorting plane sweep nodes nr ns represent collection mbrs node entries 
sorted respect lower coordinate values entries 
sequences processed plane sweep algorithm sweep line moved time unmarked rectangle smaller value procedure repeated sequences exhausted 
noted sorted node entries maintained nodes insertions deletions 
reduction cost compared basic form algorithm achieved computation read schedule controls way nodes fetched disk buffer 
local optimization polices proposed spatial locality try maintain buffer nodes mbrs close space local plane sweep order pinning plane sweep sequence described tuning cpu time 
time pins buffer mbrs maximum number intersections mbrs entries belonging tree processed 
due pinning pages mbr frequently intersects mbrs completely processed avoid 
local order intersections mbrs nodes computed 
mbrs sorted respect space filling curve peano curve opting bring mbrs closed space 
previous case pinning nodes applied 
experimental results evaluate described optimizations indicate optimized form spatial join performs times faster basic notice basic form cpu bounded optimized bounded 
noticed reported improvement join execution time applying grid heuristic plane sweeping 
consideration paid case buffer overflow 
acm computing surveys vol 

month yy 
yannis manolopoulos algorithm breadth traversal 
huang differently depth traversal propose synchronous traversal trees breadth manner processing spatial joins 
approach observation method ability achieve global optimization ordering node visits local optimizations read scheduling performed capture access pattern nodes currently examined nodes 
breadth tree join algorithm opts global optimizations 
basic form depicted results pairs intersected entries level maintained intermediate join index trees height reaching leaf level tree proceed descending levels tree leaf level reached tree 
procedure 
nr root ns root 
iji er es er nr es ns mbr er mbr es 
height 
foreach er es 
nr er ns es 
nr ns mbr er mbr es 
endfor 
endfor 
output iji leaf level 
fig 

breadth tree join algorithm 
huang cpu tuning optimizations proposed propose new global optimizations tuning time experimental results indicate improvement terms disk accesses compared approach 
level global optimizations schedule reading nodes described follows 
iji ordering orders contents iji trying spread widely multiple appearances 
member iji corresponds mbrs form clustering may performed concurrently 
options considered processing efficient respect sum centers member iji coordinates centers mbrs calculated sum taken 
memory management iji main memory exists contents iji stored disk 
stores contents corresponding level completely written 
option shuffling iji contents disk main memory avoided 
buffer management iji multiple reading nodes minimized predicting node fetched sequel 
buffer purge nodes completed processing 
acm computing surveys vol 

month yy 
trees grown easy comparison described spatial join algorithms table ii summarizes options followed 
traversal type depth breadth cpu time restrict search space plane sweep restrict search space plane sweep time plane sweep pinning ordering iji ordering memory buffer management iji table ii 
characterization spatial join algorithms 
join tree non index data set 
case intermediate query result range query participates join tree available 
straightforward approach perform join case apply multiple range queries object non indexed data set tree data set 
evidently approach efficient size intermediate data set small 
tree created bulk loading non indexed data set order apply described algorithms joining trees 
approach may introduce non negligible cost required rtree creation 
order improve approach lo propose existing tree skeleton build seeded tree non indexed data set 
sort match algorithm sorts objects non indexed data set spatial ordering creates leaf nodes accommodated main memory examines leaves existing tree data set respect join condition 
analogous approach sort sweep algorithm developed plane sweeping 
arge propose priority queue driven traversal pq algorithm combines index non indexed approaches forms processed single algorithm 
papadias propose slot index spatial join applies hash join structure existing tree determine extents spatial partitions 
additionally considering data indexed quadtrees proposes algorithm joins quadtree tree data structure 
hoel samet performance comparison pmr quadtree join join tree structures 
aforementioned methods employ specialized techniques handle non index data set directly relate query processing existing trees 
interested reader directed 
multiway spatial join queries spatial join algorithms examined section focus case trees 
gis applications large collections spatial data may thematic contents involve join multiple inputs 
multiway spatial joins queries proposed papadias earlier version involve arbitrary number trees 
acm computing surveys vol 

month yy 
yannis manolopoulos data sets 
dn indexed tree query qij represents spatial predicate hold di dj multiway join query finds tuples 
ri 
rj 
rn ri di rj dj ri qij rj 
multiway spatial join queries considered generalization pairwise spatial join section 
query represented graph nodes correspond data sets di edges join predicates qij 
general query graph tree graph cycles graph cycles complete graph node connected 
instance depicts different cases query graph tuple satisfies corresponding predicates henceforth assumed simplicity predicate qij corresponds spatial operator overlap 
fig 

examples multiway queries acyclic chain query 
query cycle 
complete graph query 
method perform multiway spatial joins combination sequence pairwise joins 
order pairwise joins determined minimization expected cost terms page accesses 
sequence pair necessarily correspond join trees indexed data sets 
rj see section applied inputs indexed ii slot index spatial join applied data set indexed iii hash spatial join hj data sets indexed intermediate results 
different approach described called synchronous traversal st 
st starts root nodes synchronously traverses trees 
proceeds combination nodes satisfy query predicates qij reaching leaf nodes 
st facilitated tree structure decompose problem smaller local ones level 
fmax maximum node fanout worst case local problem examines max combinations 
local problem defined set variables 
vn corresponding tree 
domain di variable vi consists entries ei 
ei fi node ni ri tree fi fanout ni 
pair variables vi vj constrained predicate overlap qij true 
binary assignment vi ei vj ej consistent iff qij true ei overlaps ej 
solution local problem tuple 
ei 
ej 
en vi ei vj ej acm computing surveys vol 

month yy 
trees grown consistent 
objective st finding assignments entries variables predicates satisfied 
park observation optimization techniques original way tree join algorithm required case multiway join proposed way join algorithm 
furthermore papadias propose optimizations st algorithm exploit spatial structure multiway join problem static variable ordering svo heuristic pre orders problem variables placing constrained 
variables sorted decreasing order degree 
svo applied performing st produces static order find combinations space restriction procedures 
plane sweep combined forward checking improved implementation procedure find combinations decomposes local problem series smaller problems event sweep line 
heuristic overhead searching backtracking large domains avoided 
experimental results show improvement due svo significant variables constrained apply complete query graphs 
combination svo presents significant reduction cpu cost compared version st optimizations performs better increasing page size 
general savings cpu cost considered significant st cpu bounded 
noticed proposes optimization dynamic programming derive query execution plan 
time st selected intermediate executions 
approach execution plans slightly expensive worst case optimal selected 
number input trees larger cost dynamic programming prohibitive 
reason describes randomized search algorithm finding execution plan large queries large incremental distance join closest pair queries incremental distance join 
spatial relations distance join queries find subset cartesian product satisfies order distance 
samet incremental approach processing distance join distance semi join queries variant finds object nearest object 
incremental algorithms queries described report results respect distance ordering 
contrast spatial join algorithms described section compute entire result sort starting output 
evidently focus incremental algorithm starting output results early possible 
trees incremental distance join algorithm idj maintains set pairs pair item respectively 
processing entries time pair encountered contains node item data object replaced pairs resulting acm computing surveys vol 

month yy 
yannis manolopoulos substituting children nodes 
elements maintained sorted distance 
achieve implemented priority queue 
basic algorithmic form idj depicted processnode procedure depicted uses basic loop incremental nn algorithm section item corresponds query object reason notation object bounding rectangles 
procedure idj 
enqueue root root 
empty 
elem 
items elem data objects 
output elem elem 
items 

empty front dist 
output 

enqueue 
endif 
item elem node 
processnode elem 

processnode elem 
endif 
procedure processnode elem order elem 
order 
node item 

node item 
endif 
node leaf 
foreach entry node 
enqueue dist item item 
endfor 

foreach child node 
enqueue dist item item 
endfor 
endif 
fig 

basic form incremental distance join algorithm 
optimizations described basic form algorithm respect tie braking criteria order processing node items 
evaluation described options experimental results 
results indicate best performance achieved combination optimizations depth traversal elements containing data objects object bounding rectangles priority elements distance resolves tie breaking elements containing nonleaf items priority nodes smaller level deeper tree 
ii pair non leaf nodes retrieved head priority queue node higher level chosen processed achieve traversal trees resolves order processing 
processing distance join priority queue may large 
implementation priority queue describes approach analogous section divides queue number partitions kept main memory maintained disk 
pairs large distance probably retrieved queue 
order limit number entries acm computing surveys vol 

month yy 
trees grown priority queue proposes restrictions minimum maximum specified distance query results satisfy 
constraints distance posed user sets upper bound number examined pairs facilitated clause sql reports specified number results 
done estimating lower bound distance dmax impose required constraint 
noticed distance join algorithm proposed shin differently joins pairs respect distance 
approach bi directional expansion tree nodes plane sweeping pruning distant pairs 
develop adaptive multi stage algorithms distance join incremental distance join algorithms 
experimental results illustrate performance gains due adaptive algorithms previous approaches including 
distance semi join 
mentioned distance semi join query special case distance join query pair result object appears appear pair 
order achieve uses set keep track objects pair output 
experimental evaluation indicates option presents best performance 
option operates follows node data object tree smallest dmax distance encountered far maintained 
new pair enqueued case distance smaller dmax 
option may require significant memory space dmax maintained nodes 
compared straightforward approach applying multiple nn queries object tree results show incremental algorithm outperforms straightforward 
finding closest pairs 
described incremental distance join algorithm easily modified produce pairs 
case algorithm finds closest pairs data sets pairs objects data sets smallest distances yields classic closest pair problem computational geometry 
instance collection archaeological sites holiday resorts closest pair query finds sites smallest distances resort tourists accommodated easily 
corral proposed different approach called cp closest pair queries 
types algorithms investigated described briefly sequel 
case extension easy 
assume trees height 
recursive sorting distances 
algorithm called std descends trees keeps track closest distance far 
internal nodes accessed minmaxdist calculated pairs formed contents 
updated kind downward pruning larger acm computing surveys vol 

month yy 
yannis manolopoulos distances 
reaching leaf leaves actual object distances calculated updated 
non recursive heap similar algorithm called heap maintains pairs examined heap structure sorted respect mindist metric 
differently heap considers pairs mindist smaller similar std heap updates respect minmaxdist metric 
std type depth closest pair algorithm considers local optimizations 
contrast heap incremental distance join algorithm belong type best algorithms consider global optimizations 
recall different algorithmic types described nn join queries 
evidently closest pair queries combine characteristics types queries 
regarding tie braking criteria describes ones best performance achieved resolving ties giving priority pair elements largest mbr 
different tree heights addressed methods proposes fix root policy stops downwards propagation tree lower level continues propagation tree pair nodes level 
comparison std heap experimentally performed indicates heap outperforms std small buffer sizes data sets large overlapping 
medium large buffer sizes std clearly compares favorably heap 
impact buffering performance cp queries trees considered searching approaches buffer replacement policies 
classification tree query processing algorithms section give summary classification described methods 
classification uses notation names algorithms previous sections 
links contents represent relationships 
fig 

classification described tree query processing methods 
note std formed number optimizations separately 
std final form significantly outperforms 
acm computing surveys vol 

month yy 
trees grown general types spatial queries range topological nn join queries 
algorithm range query denoted searching algorithm developed tree 
topological queries corresponding algorithm denoted form second type queries generalize non disjoint operator range query 
nn queries include knn improved version mnn address finding nn 
knn rnn determines reverse nns 
different approach followed inn incrementally finds nns order distance query object 
generalizing constraints rnn inn order achieve optimality cnn determines nns query constraint 
constrained nn queries combination range nn queries 
spatial join query trees addressed rj depth breadth 
multiway join rj order perform multiple pairwise joins st traverses trees time 
idj analogously inn focuses distance join operator finds results incrementally order distance 
closest pair queries cp algorithm find closest pairs indexed data sets considered combination nn join queries 
idj lead finding closest pairs reason connection cp idj 

query optimization issues determining best execution plan spatial query requires tools measuring precisely estimating number spatial data items retrieved query cost terms cpu effort 
traditional query optimization tools include cost optimization models exploiting analytical formulae selectivity hit percentage cost query histogram techniques 
particular spatial databases supported tree indices cost optimization exploits analytical models formulae predict number hits entries tree cost query retrieval measured tree node accesses actual disk accesses assuming existence buffering scheme 
traditionally tree performance evaluated ability answer range queries accessing smallest possible number pages nodes disk 
queries nn join queries great interest spatial query optimizer 
sections survey cost models selection join queries respectively followed section presents sampling histogram techniques 
cost models selection queries considering tree node corresponds physical page disk cost estimation query pages accessed order retrieve result query turns problem estimating number nodes visited tree traversal 
apparently actual time required number disk pages times time required read page resident disk estimated due buffering 
models included buffer parameters formulae 
acm computing surveys vol 

month yy 
yannis manolopoulos formulae range queries 
attempt estimate performance trees range queries faloutsos 
authors fundamental assumptions uniform distribution data ii tree nodes supposed full data 
point queries cost formula derived expressed fact number nodes visited equals overlap parent nodes level words density nodes level summed leaf level authors term density discussed 
analysis restricted uniformity assumption packed trees served framework related appeared 
proposed formulae useful expected height tree fanout parent nodes capacity leaf nodes number data entries 
kamel faloutsos pagel independently extended analysis formula gives average cost cw range query respect query window qd assuming dataset indexed dimensional tree provided sides sj sj tree node sj known summation extends tree nodes 
cw sj qi eq 
allows query optimizer estimate cost query window measured number node accesses assumed corresponding tree built mbr node sj tree measured 
formula implicitly presents dependency sizes tree nodes query window hand cost range query hand 
influence node perimeters revealed helps understanding tree efficiency method tree variants take account node perimeter construction phase see section relevant discussion performance wise comparison popular members tree family time 
extending performed pagel proposed optimal algorithm established lower bound result performance packed 
shown experimental results best known static dynamic tree variants packed tree kamel faloutsos tree respectively performed worse lower bound 
defined problem measuring performance sams trees follows bucket set query model qm prob meets bi probability performing query forces access bucket bi 
expected number bucket accesses needed evaluate query called performance measure acm computing surveys vol 

month yy 
qm qm trees grown prob meets bi formalized called bucket set problem bsp set geometric objects bucket capacity cb query model qm determine bucket set performance measure minimal 
distinguished cases simple case called cb universal case called cb proved solved polynomial time np hard 
practically means trees 
cb possible find integrate optimal construction algorithm 
impact parameters involved eq 
area sum rectangles perimeter sum number rectangles studied formulae various kinds range queries intersection containment enclosure queries various shapes points lines circles windows derived 
main window queries considered representative range queries general 
eq 
predict cost range query just consideration dataset properties tree properties involved tree node extents sj 
faloutsos kamel theodoridis sellis extended formula goal 
property dataset called fractal dimension 
fractal dimension fd dataset consisting points mathematically computed constitutes simple way describe non uniform datasets just single number 
model proposed estimation number disk accesses level leaf level denoted cw cw qi fd average fanout tree nodes 
hausdorff fractal dimension estimate cost range query 
fractal dimension correlation selectivity estimation 
cases accuracy estimations fact illustrated surprisingly real point datasets behave fractals 
attempts support analytically non uniform distributions data uniform distribution special case fd analysis assumed uniformity 
models proposed applicable point datasets 
different line property dataset called density surface 
density set hyper rectangles average extent sd average number rectangles contain point ddimensional space 
equivalently expressed ratio global data area space area 
consider unit workspace acm computing surveys vol 

month yy 
yannis manolopoulos density formula si framework proposed investigations expected number node accesses cw query window equal expected number intersected nodes level ii average number intersected nodes equal density node rectangles inflated qi direction iii average number nodes nj level nj cardinality dataset fanout iv expression density dj node rectangles level expressed function density dataset proposed formula cw si dj qi reach formula authors assumed square node rectangles argued reasonable simplification nice property efficient tree argued 
assumed uniform distribution data node rectangles 
assumptions formula estimates number node accesses dataset properties typical tree parameter extents query window provided formula selectivity range query specified query window ratio expected number hits dataset total number entries 
equal ratio number intersected rectangles rectangles input dataset formula proposed selectivity qi eqs 
assumed uniformity data particular order express density parent nodes level function density child nodes level 
assumption restrictive discussed overcome authors proposed evolution density single number varying parameter graphically surface dimensional space showing deviations projected different points space respect average value example real dataset illustrated density surface dimensional histogram 
introduced density surface showed non uniform distributions data supported modifications eqs 
average density dataset replaced actual density dataset area query window 
ii cardinality dataset replaced transformation called computed follows noted order formulae usable point datasets average density dataset considered acm computing surveys vol 

month yy 
trees grown fig 

real dataset lb county tiger dataset density surface 
point datasets zero density corresponds zero populated area 
comparison analytical estimates experimental results trees synthetic real datasets showed estimates accurate relative error cw uniform non uniform data respectively similar idea proposed jin density file proposed maintained addition tree 
particular density file proposed auxiliary data structure contains number points assuming point dataset falling specific hilbert range 
case rectangular data items cumulative density scheme proposed spatial extents keeping values hilbert cell number rectangles lower left lower right upper left upper right corner lies cell 
density file models estimating selectivity cost range query proposed accuracy shown high usually errors uniform skewed datasets packed tree case study 
authors studied distribution mbrs rtree nodes observed follows distribution underlying data set 
accurate estimations number accessed nodes range queries obtained consideration mbr distribution 
models provide cost estimations measured number tree nodes accessed upper bound number actual disk accesses 
significantly lower existence buffering scheme case real life systems 
effect buffering tree performance selection queries studied 
particular leutenegger lopez modified eq 
originally proposed introducing buffer size lru replacement policy 
authors discussed appropriate number tree levels pinned argued pinning may benefit point queries special conditions 
example point queries argued pinning tree levels advantageous total number nodes pinned factor buffer size range queries benefit modest 
practically buffer shared applications suggested acm computing surveys vol 

month yy 
yannis manolopoulos pinning trees done rest applications need full buffer size 
formulae nn queries 
exploiting branch bound algorithm nn query processing proposed papadopoulos manolopoulos derived lower upper bounds performance number disk accesses rtree leaf pages 
particular proved propositions expected number tree leaf pages accessed order find nn point minimum maximum number leaf pages touched number leaf pages intersected circle center radius dnn dm dnn actual distance nn known advance dm minmaxdist touched leaf page 
cf 
subsection definition discussion minmaxdist metric extending eq 
proposed range queries uniform datasets came pair formulae lower upper bounds cnn lower dnn cnn upper dm experimental results showed actual cost bounded proposed bounds general measured cost closer lower upper bound 
analysis restricted estimating cost nn extension support nn queries straightforward 
bohm tao tackled problem estimating average dk distance th nn 
model proposed involves integrals computation dk solved numerically making easily applicable query optimization purposes 
hand proposed closed formula dk cv cv side effect analysis estimation smallest value sequential scan surpass tree search side effect curse dimensionality 
authors experiments threshold value decreases dramatically dimensionality consistent related 
cost models join queries spatial join requires high processing cost due high complexity large volume spatial data 
accurate estimation selectivity cost spatial join queries great influence query optimizer 
range queries number input datasets join queries variable distinguish models proposed pair wise joins proposed multi way joins 
acm computing surveys vol 

month yy 
trees grown formulae pair wise joins 
predicting selectivity join queries aref samet 
authors proposed analytical formulae number hits uniformity assumption tree analysis provided 
motivating idea consideration join query set selection queries tree playing role target index second tree assumed source query windows 
demonstrated experimental results showed accuracy proposed selectivity estimation formula 
assuming uniform distribution data huang proposed cost model tree spatial joins distinguishing cases lack existence buffering mechanism 
corresponding formulae proposed estimating cost assuming buffering estimating actual cost account probability page re visited due buffering mechanism csj sr sr csj actual csj prob triple sum eq 
denotes pairs considered node mbrs tree levels 
find cost number counted twice tree 
eq 
terms represent total number accesses tree pages traversed join node traversed term csj represents expected number non accesses probability access causing page fault rob 
accuracy formulae demonstrated comparison experimental results varying buffer size relative error 
theodoridis considered depth approach join query trees series query windows node rectangles level play role query windows dataset consisting node rectangles corresponding level 
consideration eq 
proposed range queries modified calculate cost join query 
particular cost tree level sum costs nr different window queries cw cw nr nr sr sr 
trees equal height total cost spatial join sum node accesses level csj cw cw nr nr sr sr acm computing surveys vol 

month yy 
yannis manolopoulos evidently cost shown eq 
upper bound buffer considered node access ri corresponds node access rj 
provided detailed description cost formulae rj including case trees different heights 
involved parameters expressed functions dataset properties cardinality density experimental results suggested cost model accurate uniform data density remains invariant workspace reasonably non uniform data distributions density surface similar results shown 
formulae multi way joins 
discussed section multiway spatial join queries trees rn represented graph qij denotes join condition ri rj 
papadias provided formulae selectivity number solutions possible tuples cartesian product cost terms node accesses special cases multi way queries 
particular consideration general idea total number solutions formula solutions possible tuples prob tuple constitutes solution fact pairwise probabilities independent case acyclic graphs selectivity acyclic join graph prob tuple solution rue total number solutions tree level solutions nri rue sri sri case cycles assignments independent anymore eq 
accurately estimate probability random tuple constitutes solution 
special case cliques provided formula selectivity fact set rectangles mutually overlap share common area proof extensive solutions nri order provide cost formulae multi way joins decomposed query graph set legal subgraphs qx legal means connected graph processed applying synchronous traversal cf 
st algorithm 
st algorithm roots trees accessed order find root level solutions turn solution lead accesses lower level generalization level solutions qx node accesses total cost processing qx acm computing surveys vol 

month yy 
st trees grown rn qx solutions qx formula useful query optimization purposes accurate estimation number solution possible cases acyclic graphs cliques 
experimental results types query graphs uniform distributions data demonstrated accuracy eqs 
relative error average worst case 
extension cost models support arbitrary query graphs non uniform data distribution left open issue 
extending park chung analyzed time temporary space complexity formulae tree clique multi way joins showed complexity type type 
different line papadias addressed problem complex query processing way join follows independent selection queries original tree indexed spatial datasets see example illustration 
assuming original datasets share common workspace authors anticipated spatial selections affect number objects participate succeeding join spatial distribution adding dependency overhead 
selectivity formulae acyclic clique joins proposed 
experimental results provided showed formulae accurate especially pair wise joins relative error raised 
analysis assumed uniformity model extended arbitrary data distributions account density surface concept 
case accuracy estimation lowered 
fig 

complex query execution plan 
sampling histogram techniques recalling query optimization problem illustrated selectivity estimation samples general spatial datasets involved 
proposed step methodology pick samples input datasets exploiting tree indices ii construct tree samples iii perform tree join constructed trees 
evaluated comparison alternative joining sample entire dataset 
drawn experimentation clearly favor proposed methodology 
acm computing surveys vol 

month yy 
yannis manolopoulos significant research effort focused selectivity estimation histograms 
particular introduced novel types histograms estimating selectivity spatial selections spatial joins respectively addressed issue accuracy estimations related due ignorance cost refinement step proposed new types histograms capture complexity size location spatial objects 
provide details works directly related tree query optimization 
interested reader find cited papers 

implementation issues implementation access method commercial dbms research prototype raises issues considered order provide effective efficient access underlying data 
access method useless efficiently implemented real life data intensive applications 
making access method part larger usually multi user system easy task 
access method adjusted underlying system architecture issues concurrency control parallelism handled carefully 
section discuss implementation issues regarding tree access method 
specifically investigate issues adjustment tree parallel architectures management concurrent accesses tree implementations research prototypes commercial systems parallel systems primary goals database research investigation innovative techniques order provide efficient query processing 
goal important considering modern applications resource demanding usually multi user systems 
database research direction widely accepted developers exploitation multiple resources processors disks efficient processing 
design algorithms parallel database machines easy task 
cases parallel version serial algorithm straightforward look carefully fundamental performance measures speed shows capability algorithm number processors increased input size constant 
perfect speed linear speed meaning seconds required perform operation processor seconds required perform operation processors 
size shows behavior algorithm input size increased number processors remains constant 
scale shows performance algorithm input size number processors increased 
basic parallel architectures research development fields acm computing surveys vol :10.1.1.104.8594

month yy 
trees grown shared processors share resources memory disks communication processors performed means global memory 
shared disk processors share disks memory 
shared processors different disks different memory units communication processors performed message passing mechanisms 
addition basic parallel architectures hybrid schemes proposed order combine advantages avoid disadvantages 
example shared virtual memory scheme combines shared shared memory scheme order provide global address space 
parallelism categorized cpu parallelism task partitioned processors execution parallelism data partitioned secondary storage units disks cd roms order achieve better performance 
multi disk systems 
disk devices leads increased system throughput workload balanced participating disks operations processed parallel 
raid systems introduced inexpensive solution bottleneck 
disk devices leads increased system throughput workload balanced participating disks operations processed parallel 
disk array faces problem partitioning data associated access information order take advantage parallelism 
way data partitioned reflects performance read write operations 
declustering problem attracted researchers lot performed advantage parallelism support data intensive applications 
techniques tree declustering reported 
authors study effective declustering schemes grid file structure 
challenge decluster tree structure available disks order distribute workload query processing evenly possible disks activate disks possible alternative designs followed order take advantage multiple disk architecture 
alternatives studied 
independent trees 
data partitioned available disks tree build disk 
performance depends data distribution performed data distribution 
data objects assigned different disks round robin manner hash function 
method guarantees disk host approximately number objects 
small queries disks activated order answer query 
acm computing surveys vol 

month yy 
yannis manolopoulos space distribution 
space divided partitions number available disks 
drawback approach due non uniformity real life datasets disks may host number objects may bottleneck 
large queries large query regions method fails balance load equally disks 
fig 

independent trees 
tree super nodes 
alternative uses tree 
exploitation multiple disks obtained expanding tree node 
specifically logical tree node size times larger node partitioned disks disk stripping 
load equally balanced query processing disks activated query 
happens total order rectangles mbrs hosted tree node node reconstructed accessing disks node partitioned disks 
fig 

tree super nodes 
multiplexed mx trees 
alternative uses single tree having nodes distributed disks 
main difference ordinary tree inter disk pointers order formulate tree structure 
node pointer pair form pageid disk identifier contains page pageid 
example mx tree nodes distributed disks 
assumed tree root maintained memory 
acm computing surveys vol 

month yy 
fig 

mx tree example 
trees grown main issue explained node disk assignment policy 
insertion new objects cause nodes split 
problem disk newly created node nn assigned target minimize query response time 
order obtain best result examine nodes lie tree level 
operation costly results operations 
sibling nodes examined nodes parent nn 
necessary fetch sibling nodes information require mbrs resides parent node fetched memory order insert new object 
criteria order perform placement new node nn data balance best case disks host number tree nodes 
disk contains nodes may bottleneck query processing 
area balance area disk covers plays important role answer range queries 
disk covers large area accessed higher probability may bottleneck 
proximity nodes near space probability accessed high 
proximal nodes stored different disks order maximize parallelism 
difficult satisfy criteria simultaneously heuristics proposed order attack problem round robin new node assigned disk round robin algorithm 
minimum area heuristic assigned new node disk covers smallest area 
minimum intersection heuristic assigned new node disk order minimize overlap new node nodes stored disk 
proximity index heuristic proximity measure compares rectangles calculates probability accessed query 
rectangles correspond tree nodes high proximity stored different disks 
experimental results reported 
main tree proximity index method node disk assignment acm computing surveys vol 

month yy 
yannis manolopoulos forms methods range query processing 
performance evaluation conducted uniformly distributed spatial objects uniformly distributed range queries 
proposed method manages activate disks small range queries activate disks large queries achieving load balancing efficient method parallelizing tree structure 
interesting investigate performance method non uniform distributions 
parallel query processing 
parallel version tree answers type queries original tree structure efficiently 
focuses range queries parallel algorithms exist types queries 
parallel algorithms nn queries multi disk system studied 
possible similarity search techniques studied detail branch bound full parallel candidate reduction 
optimal approach defined assumes distance dk query point th nn known advance relevant nodes inspected 
unfortunately algorithm hypothetical distance dk generally known 
useful lower bounds derived studying behavior optimal method 
methods studied extensive experimentation simulation 
studied algorithms proposed careful inspection tree nodes leads effective candidate reduction shows best performance 
performance difference suggests research required order approach lower bound possible 
multi processor systems 
exploitation multi processor systems spatial query processing order achieve better performance spatial data intensive applications 
ability execute operations parallel may dramatic impact efficiency database system 
multi disk systems main target achieve parallelism multiprocessor systems processing parallelism may achieved processor may control disks 
parallelism extremely attractive query performance efficiency factors taken consideration order provide viable solution 
parallel query execution plans constructed order exploit multiple processors 
careful decomposition query performed achieve load balancing processors 
processor largest task assigned bottleneck 
processors communicate means local area network lan communication costs interprocessor data exchange taken account 
costs included query optimization query cost estimation 
proposed techniques applied case processors communicate means local area network loosely coupled architecture applied case processors hosted computer tightly coupled architecture 
case communication costs reduced significantly 
acm computing surveys vol 

month yy 
trees grown independent trees 
methods multi disk tree declustering multi processor case 
example spatial data partitioned allowing processor manipulate local tree structure independent trees 
scheme disadvantages observed majority queries refer subset data hosted single processor processor may bottleneck parallelism exploited sufficient degree 
case spatial data partitioned respect partitioning scheme non spatial attribute processors activated answer single query processor contains irrelevant data respect query spatial attributes 
leaf declustering 
parallel version tree proposed order exploit parallelism multi computer system network workstations 
system architecture composed master processor primary site number slave processors secondary sites 
sites communicate ethernet network 
allocation pages sites carefully performed order achieve efficiency range query processing 
leaves corresponding data objects stored secondary sites upper tree levels maintained primary site 
specifically leaf level stored master contains entries form mbr pageid 
upper tree levels occupy relatively little space maintained main memory primary processor 
dataset known advance koudas suggest sorting data respect hilbert value object mbr centroid 
leaf tree level formed assignment leaves sites performed roundrobin manner 
method guarantees leaves contain objects close address space assigned different sites processors increasing parallelization range query processing 
way decluster tree processors primary secondary 
simplicity assumed processor controls disk 
fig 

declustering tree sites 
parallel version tree described implemented easily acm computing surveys vol 

month yy 
yannis manolopoulos multi computer system network workstations 
main drawback approach processor contains upper levels tree may bottleneck intensive demands 
gpr tree 
gpr tree proposed utilizes global index structure shared number processors multi computer system 
processor maintains memory fraction gpr tree having nodes partitioned groups local corresponding page resides local disk remote corresponding page managed processor 
master client trees 
technique proposed leaf declustering approach uses master slave architecture 
master holds upper levels tree 
previous approach leaf level master contains entries form mbr 
client maintains local tree index portion data assigned 
potential problem method master may hot spot 
upgraded parallel trees 
upgraded parallel tree structure proposed 
partition function partition area sub areas 
partition function determined distribution underlying data 
sub area indexed tree structure 
structure composed number sub trees data partitioning functions primary mapping category secondary mapping category 
item primary mapping category form number objects 
item secondary mapping category form subtree pointer number objects 
order reduce communication costs processor hosts complete structure fraction database stored locally 
experimental results offered demonstrating performance method 
comparison previous approaches provided 
parallel query processing 
methods proposed parallel query processing trees 
performance evaluation performed comparing parallel equivalents trees pmr quadtrees shared memory architecture 
experimental results reported range query spatial join queries 
brinkhoff study efficient parallel algorithms parallel spatial join processing trees 
shared virtual memory architecture special implementation shared global address space implement access methods proposed algorithms 
parallel range query processing trees leaf declustering studied 
authors provide cost estimates consideration communication costs incurred due message passing processors 
parallel nn query processing techniques provided multi computer architecture described previously 
main motivation branch bound nn algorithm proposed directly applied parallel trees structure parallelism exploited due serial nature algorithm 
parallel algorithms acm computing surveys vol 

month yy 
trees grown proposed implemented evaluated synthetic real life spatial datasets 
authors discuss tree implementation issues multi computer architecture 
performance parallel trees evaluated insertions range queries large query window range queries small query window 
uniform non uniform datasets performance evaluation 
metrics query response time system throughput multiple queries executed concurrently 
shown parallel implementation trees cluster workstations comprising sun ultra sparc processors give significant improvement response time throughput 
parallel range query processing distributed shared virtual memory architecture reported 
range query decomposed number subqueries subquery assigned processor 
phases identified workload phase number internal tree nodes determined ii search phase corresponding subqueries executed parallel 
performance results query response time speed provided 
important issue parallel distributed query processing migration data disk server access patterns access data 
authors study migration issues trees 
concurrency control management concurrent operations access methods considered important strongly related system performance data consistency data integrity 
index updates interfere access operations synchronization mechanism exist order guarantee result operation correct 
synchronization efficient preventing exclusive index locking long time periods 
main categories scheduling operations identified top approaches update operation locks scope prevent updates 
read operations allowed scope update operation commits may allowed search phase restructuring phase update 
bottom approaches update operation behaves read operation way leaf level index moves tree locking nodes simultaneously making necessary changes 
tree implemented commercial systems concurrency control issues trees extensively studied 
concurrent operations improve efficiency trees similarly improve rtree efficiency 
due different nature tree structure tree applied directly 
straightforward modifications applied results efficient 
link 
ng kameda discuss methods concurrency control spatial access methods particularly trees 
method discuss similar link method case trees 
link method acm computing surveys vol 

month yy 
yannis manolopoulos proposed ng kameda simultaneously banks solution concurrency control problem tree access methods 
link tree variant tree node contains number pointers child node additional link pointer concurrency control 
nodes reside specific level tree linked 
main purpose link pointers able decompose operations smaller atomic actions 
study types locks 
lock shared reading lock exclusive lock 
case link search takes place concurrent insertion delete split merge node respectively 
result link pointers followed check cases split propagated parent node 
search operations start root descent tree locks 
visiting tree node lock applied node 
lock released child nodes visited determined 
problem insertions may committed means split nodes may recorded parent nodes recorded link pointers siblings 
examine nodes emanating horizontal pointers 
mbrs nodes overlap query region check parent node valid 
valid corresponding search path examined parent node tree search algorithm 
include search path subtree emanating corresponding split node contains relevant data existence recorder parent node 
insertion operations start root descent tree appropriate leaf node detected 
leaf hold entries split operation performed 
changes propagated upwards 
mbrs need enlargement going change 
order avoid conflicts operations mbr enlargement deferred 
tree descent expanded mbr stored list pending updates 
list second phase mbr enlargement takes place 
subsequent operations examine list 
phase descending tree corresponding mbrs enlarged parent nodes updated new split nodes existed linked nodes 
case deletions tree descent multiple paths examines node execute pending updates registered previously executed insertions deletions splits 
node empty marked deleted removed operations may 
garbage collection algorithm executed periodically order delete marked nodes 
node underflows appended list size list reaches threshold condense algorithm executed 
slightly different approach followed sophisticated technique order provide ordering sibling nodes 
logical sequence numbers lsn assigned nodes 
numbers similar timestamps monotonically increase time 
lsn numbers search insert operations order correct decisions tree traversal 
tree descent lock coupling needed acm computing surveys vol 

month yy 
trees grown node locked time 
comparison method lock coupling concurrency control mechanisms trees shown link trees maintain high throughput low response times load increases 
top approaches 
link widely recognized structure theoretical practical importance case link 
commercial systems classical tree structure tree 
concurrency control techniques proposed different methods link structure 
types locks locks locks 
lock coupling breadth search locate set objects satisfy query 
node examined remains locked search operation commits 
search operation starts root descends tree inserting visited node queue 
element queue extracted examined order determine children mbr overlap query region 
examined node leaf children relevant query region locked inserted queue left right hand examined node leaf corresponding children data objects examined refinement step check satisfy query 
search operations terminated queue empty 
nodes queue locked update operations applied nodes 
insertions performed phases 
phase lock coupling path root corresponding leaf node host new object 
node appropriate path selected followed 
mbrs nodes adjusted properly 
second phase new object placed corresponding leaf node 
leaf node full split operation applied 
avoid interference update operations leaf parent locked execution split 
applied full 
full nodes leaf root locked 
set nodes scope current operation 
reconstruction tree lock node converted lock modification 
split operations mbrs parent nodes adjusted accordingly cover mbrs children 
deletions applied similar manner characterized phases 
phase appropriate leaf corresponding path root leaf locked 
note paths may qualify mbrs may totally cover deleted object 
order guarantee deleted object missed paths examined breadth search manner 
second phase corresponding object deleted 
appropriate actions take place order deal node underutilization 
changes propagated upwards appropriate mbrs adjusted accordingly 
general techniques underutilized nodes reinsertion objects underutilized node reinserted tree merge half node merged free empty node deleted completely empty 
proposed algorithm technique efficient acm computing surveys vol 

month yy 
yannis manolopoulos 
study granular locking trees 
research prototypes commercial systems studying literature sams evident tree structure variants attracted lot attention 
simplicity structure ability handle spatial objects efficiently tempting reasons order incorporate structure research prototypes commercial database systems 
known sufficient support spatial objects database system 
efficient methods access data great importance consideration requirements modern demanding applications 
implementations tree access method variants offered researchers world 
implementations performed order conduct experiments performance comparisons structures investigate performance proposed algorithm provide modifications enhancements structure order improve efficiency 
implementations performed research purposes issues concurrency control recovery buffering issues implementation details generally neglected 
majority implementations stand meaning serve needs experimental evaluation integral part platform 
sequel briefly describe efforts tree implementations research prototypes commercial database systems 
basis 
basis prototype system benchmarking approach spatial index structures proposed order provide platform experimental evaluation access methods query processing algorithms 
outline architecture depicted fig 

platform implemented runs top unix windows 
platform organized modules storage manager provides os caching services sam toolkit set commonly sams defines design patterns support easy development new structures query processor library algorithms design follows general framework iterator model 
stt join sai join 
query processor sam toolkit iterator support index support iterators sam sort tree 
tree 
grid file 
buf 
pool storage manager 
flush fetch module write read database fig 

basis architecture 
acm computing surveys vol 

month yy 
buf 
pool binary file external data source trees grown storage manager essentially charge managing database 
database set binary files store datasets sequential collection records sams 
sam index refers records indexed data file record identifiers 
buffer manager handles buffer pools 
data file index sam assigned buffer pool buffer pool handle indices 
allows flexibility assigning memory different parts query execution plan 
buffer pool constant size cache lru fifo replacement policy lru default 
pages pinned memory 
pinned page flushed 
main types files handled storage manager data files sequential collections formatted pages storing records type 
records data file accessed sequentially address 
sams structured collections index entries 
index entry built record type attributes key record address 
key geometric key usually mbr 
currently implemented sams grid file tree tree tree variants bulk loading techniques 
basis architecture allows easy customization extension 
depending query processing experiment level easily extendible designer may add new sam add new spatial operator algorithm query processor level decide implement query processing module top buffer management module implements adequate functionality 
example performance evaluation spatial join processing algorithms implemented basis reported 
generally basis prototype system experimental evaluation sams spatial query processing algorithms allowing designer create various query execution plans needs experimentation 
platform offers fair comparison competing methods storage buffer management policies 
issues taken consideration concurrency control recovery 
generalized search trees gist 
extensibility data types queries important order allow database systems support new non traditional applications 
gist generalized search trees index structure supports extensible set data types queries 
gist balanced tree leaf nodes tree level provides template algorithms searching modifying tree structure :10.1.1.144.2507
leaf nodes pairs key stored internal nodes gist stores predicate pairs 
gist supports standard search insert delete operations 
order operations properly external functions provided 
combination generic functionality gist functionality provided designer results fully functional access method 
overview gist architecture 
external functions called gist core order provide required functionality 
acm computing surveys vol 

month yy 
yannis manolopoulos fig 

overview gist architecture 
external functions comprise gist interface briefly described consistent entry ptr query predicate function returns true matches union set entries ptr pn function returns union pn 
compress entry ptr function returns entry ptr compressed representation decompress returns decompressed representation entries ptr ptr returns domain specific penalty inserting subtree rooted 
function insertion splitting purposes criteria selecting subtree splitting node specified 
set entries function divides subsets 
function splitting purposes criteria node splitting defined 
providing implementations functions tree variants supported gist tree 
due fact tree performs object splitting allowing pieces object stored leaf nodes 
functionality supported gist assumes tree hierarchical partitioning data 
support trees trees rd trees provided performance implementation issues discussed 
shore project 
shore integrates concepts services file systems object oriented databases 
main objective shore project provide persistent object system serve needs modern demanding applications cad systems persistent programming languages geographic information systems gis satellite data repositories multimedia applications 
shore extends exodus storage manager providing features support typed objects multiple programming languages 
acm computing surveys vol 

month yy 
shore architecture layers trees grown shore storage manager ssm persistent object storage engine supports creation persistent files records 
storage manager offers concurrency control recovery supporting phase locking write ahead logging 
shore value added server functionality ssm order provide support types objects unix naming access control mechanisms client server capabilities 
shore data language sdl odmg odl supports objectoriented data types independently programming language 
paradise parallel geographic information system shore capabilities handling large geographic datasets 
paradise applies object oriented parallel database features provide efficiency storing querying large amounts spatial data 
paradise server implemented shore value added server top shore storage manager 
paradise adds extra functionality basic shore server catalog manager extend manager tuple manager query optimizer query execution engine support spatial data types points polylines polygons raster 
efficient access stored spatial objects enhanced trees 
tree implemented shore storage manager relatively easily lot tree code supported shore reused 
addition paradise supports bulk loaded trees 
packing algorithm paradise similar packing algorithm hilbert curve 
trees commercial database systems 
support complex data types non alphanumeric access methods key issue modern database industry allows dbms extend functionality pure relational data handling 
simple approach complex data handling blobs binary large objects store complex data 
limitation approach dbms aware stored blob management blob contents performed user application 
operations algorithms manipulate contents blob available query processor 
approach allow dbms provide needed functionality complex data types polygons line segments access methods 
data types supported dbms just ordinary alphanumeric data types 
problem possible dbms vendor implement data types access methods application demands require 
revolutionary approach allow user define additional data types access methods data handling application needs extendible dbms 
sequel briefly describe efforts database vendors spatial query processing trees postgresql postgresql provides support trees trees gist hashing 
user rely provided tree implementation implement tree variants gist approach 
tree supported original proposal guttman quadratic split policy 
create tree index sql issue command acm computing surveys vol 

month yy 
yannis manolopoulos create index rtree 
details regarding postgresql features 
mapinfo extends informix microsoft sql server ibm db oracle database handle spatial data points lines polygons 
extends database capabilities avoiding middleware architecture 
functionality contained directly dbms environment 
implemented ways informix sql server extended stored procedure mechanism ibm db extender oracle spatial server 
provides tree support spatial data indexing purposes 
oracle locator oracle spatial oracle locator feature oracle intermedia provides support location queries oracle dbms 
geographic location data integrated oracle server just ordinary data types char integer 
oracle spatial provides location facilities allowing extension oracle applications 
provides data manipulation tools accessing location information road networks wireless service boundaries customer addresses 
oracle locator oracle spatial provide support linear quadtrees trees spatial data indexing purposes 
ibm informix db informix tree built database kernel works directly extended spatial data types 
informix tree implementation supports full transaction management concurrency control recovery parallelism 
detailed description informix tree implementation 
description spatial data handling db database 
vendors apart large database vendors tree adopted application vendors 
examples include applications exploit tree index spatial objects 

epilog trees grown simplicity satisfactory average performance small subset successfully researchers developers prototype commercial database systems 
tree influential sam adopted index choice research works regarding spatial multidimensional query processing 
consideration performed far state tree spatial databases tree alphanumeric data types 
fact serious reason acceptance exactly resemblance tree 
considering performed trees realize contains aspects concerning database system query processing query optimization cost models parallelism concurrency control recovery 
main reason gradually database vendors adopted tree implemented products spatial data management purposes 
survey research performed years guttman tree access method 
described modifications original structure improve query processing acm computing surveys vol 

month yy 
trees grown performance ranging structural modifications algorithmic enhancements 
query processing algorithms described detail enable structure answer range nn spatial joins query types 
cost models estimating output size number node accesses query type 
cost estimates invaluable query optimizers 
implementation issues covered regarding concurrency control recovery parallel processing presentation tree implementations database vendors 
naughton accurate estimation cost spatial selections proceedings th ieee icde conference pp san diego ca 
adler ibm db spatial extender spatial data dbms proceedings th vldb conference pp roma italy 
aggarwal wolf wu tree efficient index multidimensional objects proceedings th ssd conference pp berlin germany 
agarwal box trees trees near optimal query time proceedings symposium computational geometry pp ma 
qian keefe evaluating parallel tree implementations network workstations proceedings th acm gis conference pp washington dc 

yang selectivity estimation spatial joins proceedings th ieee icde conference pp heidelberg germany 
ang tan new linear node splitting algorithm trees proceedings th ssd conference pp berlin germany 
ang tan bitmap trees informatica vol 
aref samet cost model query optimization trees proceedings nd acm gis conference gaithersburg md 
arge procopiuc ramaswamy suel vitter unified approach indexed non indexed spatial joins proceedings th edbt conference pp konstanz germany 
arge hinrichs vitter efficient bulk operations dynamic trees algorithmica vol pp 
beckmann kriegel schneider seeger tree efficient robust method points rectangles proceedings acm sigmod conference pp atlantic city nj 
faloutsos estimating selectivity spatial queries correlation fractal dimension proceedings st vldb conference pp zurich switzerland 
bertino catania spatial data access structures filtering nearest neighbor queries data knowledge engineering vol pp 
berchtold keim kriegel tree index structure high dimensional data proceedings nd vldb conference pp bombay india 
berchtold boehm keim 
kriegel 
cost model nearest neighbor search high dimensional data space proceedings th acm pods symposium pp tucson az 
bertino catania definition analysis index organizations object oriented database systems information systems vol pp 
jensen tree indexing relative data proceedings th vldb conference pp new york ny 
acm computing surveys vol 

month yy 
yannis manolopoulos jensen light weight indexing data proceedings th ssdbm conference pp berlin germany 
bohm cost model query processing high dimensional spaces acm transactions database systems vol pp 
nanopoulos manolopoulos lr tree logarithmic spatial index method computer journal accepted 
theodoridis revisiting tree construction principles proceedings th adbis conference pp bratislava slovakia 
brinkhoff 
kriegel seeger efficient processing spatial joins proceedings acm sigmod conference pp washington dc 
brinkhoff horn 
kriegel schneider 
storage access architecture efficient query processing spatial database systems proceedings rd ssd symposium pp singapore 
brinkhoff 
kriegel schneider seeger 
multi step processing spatial joins proceedings acm sigmod conference pp minneapolis mn 
brinkhoff kriegel seeger parallel processing spatial joins trees proceedings th ieee icde conference pp new orleans lo 
carey dewitt franklin hall mcauliffe naughton schuh solomon tan white persistent applications proceedings acm sigmod conference pp minneapolis mn 
chakrabarti mehrotra dynamic granular locking approach phantom protection trees proceedings th ieee icde conference pp orlando fl 
chen lee gibson katz patterson raid high performance reliable secondary storage acm computing surveys vol pp 
chen towsley performance evaluation raid architectures ieee transactions computers vol pp 
chen huang chin study concurrent operations trees information sciences vol pp 
chen rundensteiner bulk insertions trees small tree large tree approach proceedings th acm gis conference pp washington dc 
cheung fu enhanced nearest neighbour search tree acm sigmod record vol pp 
chen rundensteiner generalized tree bulk insertion strategy proceedings th ssd conference pp hong kong china 
clifford jensen snodgrass semantics acm transactions database systems vol pp 
comer ubiquitous tree acm computing surveys vol pp 
corral manolopoulos 
algorithms joining trees linear region quadtrees proceedings th ssd symposium pp hong kong china 
corral manolopoulos theodoridis closest pair queries spatial databases proceedings acm sigmod conference pp dallas tx 
corral manolopoulos impact buffering closest pairs queries trees proceedings th adbis conference pp 
overmars trees low stabbing number computational geometry theory applications vol pp 
acm computing surveys vol 

month yy 
trees grown dewitt gray parallel database systems high performance database systems communications acm vol pp :10.1.1.104.8594
dewitt kabra luo patel 
yu client server paradise proceedings th vldb conference pp santiago chile 
engineering www site www com faloutsos sellis roussopoulos analysis object oriented spatial access methods proceedings acm sigmod conference pp san francisco ca 
faloutsos kamel uniformity independence analysis trees concept fractal dimension proceedings th acm pods conference pp minneapolis mn 
agrawal abbadi constrained nearest neighbor queries proceedings th symposium pp redondo beach ca 
gaede multidimensional access methods acm computing surveys vol pp 
garcia lopez leutenegger greedy algorithm bulk loading trees proceedings th acm gis conference pp washington dc 
garcia lopez leutenegger optimal node splitting trees proceedings th vldb conference pp new york ny 
garcia lopez leutenegger post optimization incremental refinement trees proceedings th acm gis conference pp kansas city missouri 
graefe query evaluation techniques large databases acm computing surveys vol pp 
cell tree object oriented index structure geometric databases proceedings th ieee icde conference pp los angeles ca 
spatial database indices large extended objects proceedings th ieee icde conference pp kobe japan 
gaede shelves storage management technique large spatial data objects geographical information systems vol pp 
manolopoulos papadopoulos basis system benchmarking approach spatial index structures proceedings workshop pp edinburgh scotland 
sort sweep algorithm new method tree spatial joins proceedings th ssdbm conference pp berlin germany 
guttman trees dynamic index structure spatial searching proceedings acm sigmod conference pp boston ma 
han koperski geominer system prototype spatial data mining proceedings acm sigmod conference pp tucson arizona may 
hellerstein pfeffer rd tree index structure sets technical report 
hellerstein naughton pfeffer generalized search trees database systems proceedings st vldb conference pp zurich switzerland 
samet 
ranking spatial databases proceedings th ssd symposium pp portland 
samet incremental distance join algorithms spatial databases proceedings acm sigmod conference pp seattle wa 
samet distance browsing spatial databases acm transactions database systems vol pp 
hoel samet performance data parallel spatial operations proceedings th vldb conference pp santiago chile 
hoel samet benchmarking spatial join operations spatial output proceedings st vldb conference pp zurich switzerland 
acm computing surveys vol 

month yy 
yannis manolopoulos 
huang jing rundensteiner cost model estimating performance spatial joins trees proceedings th ssdbm conference pp wa 

huang jing rundensteiner 
spatial joins trees breadth traversal global optimizations proceedings rd vldb conference pp athens greece 
huang lin lin optimizing storage utilization tree dynamic index structure spatial databases journal systems software vol pp 
informix informix tree index user guide informix press 
jagadish spatial search polyhedra proceedings th ieee icde conference pp orlando fl 
jensen snodgrass semantics time varying information information systems vol pp 
jin analyzing range queries spatial data proceedings th ieee icde conference pp san diego 
johnson shasha performance concurrent tree algorithms acm transactions database systems vol pp 
lenz ra tree improved tree materialized data supporting range queries olap data proceedings th dexa workshop pp vienna austria 
kamel faloutsos parallel trees proceedings acm sigmod conference pp san diego ca 
kamel faloutsos packing trees proceedings nd cikm conference pp washington dc 
kamel faloutsos hilbert tree improved tree fractals proceedings th vldb conference pp santiago chile 
knuth art computer programming sorting searching vol addison wesley 
gunopulos indexing animated objects spatiotemporal access methods ieee transactions knowledge data engineering vol pp 
koperski han discovery spatial association rules geographic information databases proceedings th ssd symposium pp portland august 
banks high concurrency locking trees proceedings st vldb conference pp zurich switzerland 
high performance extensible indexing proceedings th vldb conference pp edinburgh scotland 
korn 
influence sets reverse neighbor queries technical report labs research 
quadtree tree indexes oracle spatial comparison gis data proceedings acm sigmod conference pp madison wi 
koudas faloutsos kamel declustering spatial databases multi computer architecture proceedings th edbt conference pp avignon france 
kumar faloutsos designing access methods databases ieee transactions knowledge data engineering vol pp 
lai zhu sun design parallel tree cluster workstations proceedings st conference pp aizu japan 
thomson fundamentals spatial information systems academic press london 
lee chung dr tree main memory data structure complex multidimensional objects vol pp 
acm computing surveys vol 

month yy 
trees grown leutenegger lopez buffer model evaluating performance tree packing algorithms proceedings acm sigmetrics conference pp philadelphia pa 
leutenegger lopez str simple efficient algorithm tree packing proceedings th ieee icde conference pp birmingham england 
leutenegger lopez effect buffering performance trees ieee transactions knowledge data engineering vol pp 
leutenegger lopez mechanism detect changing access patterns automatically migrate distributed tree indexed multidimensional data proceedings th acm gis conference pp washington dc 

lo ravishankar spatial joins seeded trees proceedings acm sig mod conference pp minneapolis mn 
lo ravishankar generating seeded trees data sets proceedings th ssd conference pp portland 

lo ravishankar spatial hash joins proceedings acm sigmod conference pp montreal canada 
papadias integration spatial join algorithms processing multiple inputs proceedings acm sigmod conference pp 
papadias slot index spatial join ieee transactions knowledge data engineering appear 
papadias selectivity estimation complex spatial queries proceedings th conference pp redondo beach ca 
papadias multiway spatial joins acm transactions database systems appear 
manolopoulos theodoridis advanced database indexing kluwer academic publishers 
mapinfo www site www mapinfo com variations tree structure indexing spatial objects proceedings nd adbis conference pp moscow russia 

spatial joins trees proceedings rd adbis conference pp moscow russia 
mina mapinfo spatial information server rdbms proceedings th vldb conference pp new york ny 
mond raz concurrency control trees databases preparatory operations proceedings th vldb conference pp stockholm sweden 
silva historical trees proceedings th acm sac symposium pp atlanta ga 
silva theodoridis evaluation access structures discretely moving points proceedings workshop pp edinburgh scotland 
nanopoulos theodoridis manolopoulos clustering closest pairs proceedings th vldb conference pp roma italy 
nanopoulos theodoridis manolopoulos efficient effective algorithm density biased sampling proceedings th cikm conference pp maclean va 
ng kameda concurrent access trees proceedings rd ssd symposium pp singapore 
ng kameda link tree recoverable index structure spatial data proceedings th dexa conference pp athens greece 
reactive data structures geographic information systems ph dissertation university leiden 
oracle www site www oracle com oracle com products spatial acm computing surveys vol 

month yy 
yannis manolopoulos orenstein spatial query processing object oriented database system proceedings acm sigmod conference pp washington dc 

pagel 
widmayer analysis range query performance proceedings th acm pods symposium pp washington dc 

pagel 
winter window query optimal clustering spatial objects proceedings th acm pods symposium pp san jose ca 

pagel 
window queries representative arbitrary range queries proceedings th acm pods symposium pp montreal canada 
papadias theodoridis sellis retrieval direction relations trees proceedings th dexa conference pp athens greece 
papadias theodoridis sellis egenhofer topological relations world minimum bounding rectangles study trees proceedings acm sigmod conference pp san jose ca 
papadias theodoridis 
processing optimization multiway spatial joins trees proceedings th acm pods symposium pp philadelphia pa 
papadias theodoridis constraint processing multi way spatial joins algorithmica vol pp 
papadias zhang tao efficient olap operations spatial data warehouses proceedings th conference pp redondo beach ca 
papadias tao zhang indexing spatio temporal data warehouses proceedings th ieee icde conference pp san jose ca 
papadopoulos manolopoulos parallel processing nearest neighbor queries declustered spatial data proceedings th acm gis workshop pp rockville md 
papadopoulos manolopoulos performance nearest neighbor queries trees proceedings th icdt conference pp delphi greece 
papadopoulos manolopoulos nearest neighbor queries shared environments vol pp 
papadopoulos manolopoulos multiple range query optimization spatial databases proceedings nd adbis conference pp poznan poland 
papadopoulos manolopoulos similarity query processing disk arrays proceedings acm sigmod conference pp seattle wa 
papadopoulos scholl performance evaluation spatial join processing strategies proceedings th ssd symposium pp hong kong china 

park 
cha 
chung 
multi way spatial joins trees methodology performance evaluation proceedings th ssd symposium pp hong kong china 

park 
chung complexity estimating multi way join result sizes area skewed spatial data information processing letters vol pp 
park heu kim rs tree efficient data structure distance browsing queries information processing letters vol pp 
patel dewitt 
partition spatial merge join proceedings acm sigmod conference pp montreal canada 
patterson gibson katz case redundant arrays inexpensive disks raid proceedings acm sigmod conference pp chicago il 
jensen theodoridis novel approaches indexing moving object trajectories proceedings th vldb conference pp cairo egypt 
postgresql www site www postgresql org procopiuc agarwal har peled star tree efficient self adjusting index moving points proceedings rd workshop pp san francisco ca 
acm computing surveys vol 

month yy 
trees grown faloutsos complexity range queries region data stored tree proceedings th ieee icde conference pp sydney australia 
ross stuckey cost unbalanced trees proceedings th ssdbm conference pp fairfax va 
roussopoulos direct spatial search pictorial databases packed trees proceedings acm sigmod conference pp austin tx 
roussopoulos kelley vincent 
nearest neighbor queries proceedings acm sigmod conference pp san jose ca 
sagiv concurrent operations trees overtaking proceedings th acm pods symposium pp portland 
jensen tree indexing general spatiotemporal data technical report tr time center 
time center www site www cs auc dk jensen leutenegger lopez indexing positions continuously moving objects proceedings acm sigmod conference pp dallas tx 
samet design analysis spatial data structures addison wesley reading ma 
samet applications spatial data structures addison wesley reading ma 
und geo objekte ph dissertation ludwig maximilians universitaet muenchen 
leutenegger master client trees new parallel tree architecture proceedings th ssdbm conference pp cleveland oh 
chen branch grafting method tree implementation journal systems software vol pp 
seeger larson multi disk trees proceedings acm sigmod conference pp denver colorado 
sellis roussopoulos faloutsos tree dynamic index multidimensional objects proceedings th vldb conference pp brighton england 
sellis roussopoulos faloutsos multidimensional access methods trees grown proceedings rd vldb conference pp athens greece 
sharma implementation spatial multimedia extensions commercial systems tutorial th ssd conference hong kong china 
shasha goodman concurrent search structure algorithms acm transaction database systems vol pp 
naughton shared virtual memory parallel processing proceedings acm sigmod conference pp washington dc 
shin moon lee adaptive multi stage distance join processing proceedings acm sigmod conference pp dallas tx 
snodgrass ahn taxonomy time databases proceedings acm sigmod conference pp austin tx 
agrawal abbadi 
reverse nearest neighbor queries dynamic datasets proceedings th dmkd workshop pp dallas tx 
stonebraker sellis hanson analysis rule indexing implementations data base systems proceedings st conference expert database systems pp charleston sc 
sun agrawal el abbadi selectivity estimation spatial joins geometric selections proceedings th ieee icde conference pp 
tao papadias zhang efficient cost model nn search technical report cs 
acm computing surveys vol 

month yy 
yannis manolopoulos tao papadias efficient historical trees proceedings th ssdbm conference pp fairfax va 
tao papadias mv tree spatio temporal access method timestamp interval queries proceedings th vldb conference pp roma italy 
tao papadias zhang aggregate processing planar points proceedings th edbt conference pp prague czech republic 
theodoridis sellis optimization issues tree construction proceedings conference pp switzerland 
theodoridis sellis model prediction tree performance proceedings th acm pods conference pp montreal canada 
theodoridis vazirgiannis sellis spatio temporal indexing large multimedia applications proceedings rd ieee conference pp hiroshima japan 
theodoridis sellis cost models join queries spatial databases proceedings th ieee icde conference pp orlando fl 
theodoridis sellis efficient cost models spatial queries trees ieee transactions knowledge data engineering vol pp 
vazirgiannis theodoridis sellis spatio temporal composition indexing large multimedia applications multimedia systems vol pp 
wang kaneko parallel tree search algorithm proceedings th dasfaa conference pp taiwan 
weber schek blott quantitative analysis performance study similarity search methods high dimensional spaces proceedings th vldb conference pp new york ny 
fu wang zheng gpr tree global parallel index structure multiattribute declustering cluster workstations proceedings conference pp shanghai china 
zhou shekhar coyle disk allocation methods parallelizing grid files proceedings th ieee icde conference pp houston tx 
acm computing surveys vol 

month yy 
