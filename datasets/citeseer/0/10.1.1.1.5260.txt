efficient rdf storage retrieval jena kevin wilkinson craig kuno dave reynolds enterprise systems data management laboratory hp laboratories palo alto hpl december th mail firstname lastname hp com semantic web jena database rdf sql rdf related semantic web technologies focus research activity 
led new specifications rdf owl 
efficient implementations standards needed realize vision world wide semantic web 
particular implementations scale large enterprise class data sets required 
jena second generation jena leading semantic web programmers toolkit 
describes persistence subsystem jena intended support large datasets 
describes features changes jena relevant details implementation performance tuning issues 
query optimization rdf identified promising area research 
internal accession date approved external publication hewlett packard laboratories road gifford bristol bs qz uk published international workshop semantic web databases september berlin germany 
copyright hewlett packard jena leading semantic web programmers toolkit 
open source project implemented java available download sourceforge 
jena offers simple abstraction rdf graph central internal interface 
uniformly graph implementations including memory database backed inferred graphs 
jena second generation jena toolkit 
conforms revised rdf specification new capabilities new internal architecture 
design principle jena minimize changes api 
simplifies migration jena jena 
describes jena persistent storage details aspects jena available 
jena database subsystem implements persistence rdf graphs sql database jdbc connection 
jena implementation supported number database engines postgresql mysql oracle flexible architecture facilitated porting new sql database engines experimentation different database layouts 
options included value identifiers sha inter table database procedures jena worked berkeley db 
lessons learned jena database portability valuable open source community retained goal jena 
jena users little experimentation schema flexibility 
general default layouts 
design focus jena performance scaling 
jena performance quite room improvement 
felt performance issues important renewed interest applying semantic web technology real world applications 
jena addresses performance issues 
joins 
normalized schema requires way join find operations 
single statement table 
single statement table doesn scale large data sets take advantage locality subjects predicates 
reification storage bloat 
naive implementation rdf specification stores statements reification 
efficient technique required especially applications reify statement 
jena provided optimized storage reified statements statement reified 
revisions rdf specification removed restriction 
goal jena implement revised specification similar better optimization 
query optimization 
jena joins rdql queries pushed database engine performed java layer jena 
describes performance issues addressed 
section provides overview jena rdf readers unfamiliar technologies 
details rdf available 
section describes jena database schema 
section high level overview database subsystem jena 
section addresses query processing 
final sections cover miscellaneous topics status implementation related 
overview jena rdf jena overview jena offers simple abstraction rdf graph central internal interface 
uniformly graph implementations including memory database backed inferred graphs 
main contribution jena rich api manipulating rdf graphs 
jena provides various tools rdf xml parser query language modules triple rdf xml output 
underneath api user choose store rdf graphs memory databases 
jena provides additional functionality support rdfs owl 
key architectural goals jena multiple flexible presentations rdf graphs application programmer 
allows easy access manipulation data graphs enabling application programmer navigate triple structure 
simple minimalist view rdf graph system programmer wishing expose data triples 
layered top second essentially triple source back presentation api 
triple sources may materialized example database memory triple stores virtual example resulting inference processes applied triple sources 
simplified overview jena architecture shown 
applications typically database graphs specialized graph interface specialized graphs property tables database specific drivers 
jena architectural overview application model interface model graph interface graphs memory interact model translates higher level operations low level operations triples stored rdf graph 
different graph implementations focus provide persistent storage 
level jena storage subsystem need implement operations add statement store rdf statement database delete statement remove rdf statement database find operation 
find operation retrieves statements match pattern form constant don care 
jena query language rdql converted set find operations variables permitted find patterns 
variables enable joins patterns 
widely implementation technique store rdf statements relational database single statement table called triple store table stores rdf statement row columns subject predicate object 
jena approach normalized statement table literals resources stored 
described 
rdf overview resource description framework rdf rapidly gained popularity means expressing exchanging semantic metadata data specifies semantic information data 
rdf originally designed representation processing metadata remote information sources referred resources web resources defines model describing relationships resources terms uniquely identified properties attributes values 
rdf provides simple tuple model express knowledge 
interpretation statement subject property value resource uris uri literal value 
rdf related specifications rdf schema owl provide predefined basic properties type class subclass rdf characterized property centric extremely flexible dynamic data model 
resources acquire properties types time regardless type resource property 
flexibility rdf attractive technology specification exchange arbitrary metadata resource descriptions grounded necessarily bound fixed schemas 
object oriented oo terms consider rdf resources analogous objects rdf properties represent attributes rdf statements express attribute values objects 
key difference communities oo systems concept type hierarchy constrain properties object may possess rdf permits resources associated arbitrary properties statements associating resource new properties values may added rdf fact base time 
challenge provide persistent storage new rdf data model efficient flexible manner 
na approach map rdf data xml simply leverage prior efficient storage xml 
standard rdf xml mapping unsuitable multiple xml serializations possible rdf graph making retrieval complex 
non standard rdf xml mappings possible statement table implementations 
simpler mappings unable support advanced features rdf ability rdf treat properties statements resources allows metadata describing elements incorporated seamlessly data model queried integrated fashion 
rdf systems relational object databases persistent storage retrieval 
fit mapping challenging semantics underlying database model clash openness flexibility rdf 
example sql requires fixed known column data types object systems restrictions class inheritance type membership changes 
storage schema subject predicate null null null literals table id value id uri jena doc description dc title long literal dc creator stored blob 
hp 
jena schema normalized dc description section compare storage arbitrary rdf statements jena jena 
look optimizations common patterns statements 
storing arbitrary rdf statements jena 
version jena different database schemas 
relational databases special berkeley db 
relational databases schema consisted statement table literals table resources table 
statement table contained asserted reified statements referenced resources literals tables subjects predicates objects 
distinguish literal objects resource uris columns 
literals table contained literal values resources table contained resource uris graph 
counting reduce overhead 
schema efficient space multiple occurrences resource uri literal value stored 
find operation required multiple joins statement table literals table resources table 
jena schema quite different 
stored parts statement single resources table row statement stored times indexed subject predicate object 
comparing approaches observed jena graphs stored berkeley db accessed significantly faster graphs stored relational databases 
part attributed absence transactional overheads intuition speed difference berkeley db schema single access method store statements denormalized relational schema reduce response times 
jena 
jena schema trades space time 
drawing experience jena uses denormalized schema resource uris simple literal values stored directly statement table 
order distinguish database literals uris column values encoded prefix indicates kind value codes shown 
separate literals table store literal values length exceeds threshold blobs 
similarly separate resources table store long uris 
storing values directly statement table possible perform find operations join 
denormalized schema uses database space value literal uri stored repeatedly 
increase database space consumption addressed ways 
common prefixes uris namespaces compressed 
stored separate table shown prefix uri replaced database 
expected number common prefixes small cacheable memory 
expanding prefixes done memory require database join 
second mentioned earlier long values stored 
length threshold determining store value literals resources table configurable 
applications may tradeoff time space lowering threshold 
third jena supports property tables described statement table subject predicate object doc dc title jena doc dc creator hp labs bristol doc dc creator hewlett packard doc dc description dc title jena persistence dc publisher com hp literals table id value description long literal stored blob 
resources table 
jena schema denormalized id uri hp 
property tables offer modest reduction space consumption property uri stored 
jena jena permit multiple graphs stored single database instance 
jena graphs stored single statement table jena supports multiple statement tables single database applications flexibly map graphs different tables 
way graphs accessed may stored graphs accessed may stored separately 
example described system metadata stored rdf statements statement table separate user tables 
multiple statement tables may improve performance better locality caching 
may simplify database administration separate tables separately managed tuned 
optimizing common statement patterns rdf graph typically number common statement patterns 
source patterns rdf specification defines types properties modeling higher level constructs bags sequences reification 
example object sequence type property value rdf seq element properties specify elements sequence 
reified statement statement statement type property value rdf statement properties rdf subject rdf predicate rdf object values statement subject predicate object 
source common patterns user data 
applications typically access patterns certain subjects properties accessed 
example graph data persons occurrences objects properties name address phone gender referenced 
knowledge access patterns influence underlying database storage structures provide performance benefit 
techniques detecting patterns user data rdf query logs reported 
jena 
jena commonly occurring case reified statements handled special case 
storing separate triples reified statement stored reified subject predicate object regular statements table additional columns indicate reified state store statement identifier 
statement identifier reified 
jena changes required conform revised rdf specification allows multiple reified instances statement 
jena property tables 
jena provide general facility clustering properties commonly accessed 
jena property table separate table stores subject value pairs related particular property 
property table stores instances property graph property appear table graph 
properties maximum cardinality possible efficiently cluster multiple properties single table 
single row table store property values common subject 
example dublin core may beneficial create property table 
jena jena tables include column graph identifier shown 
properties dc title dc publisher dc description properties frequently accessed 
property table data 
multi valued properties may clustered may stored separate table 
example dc creator stored multi valued property table containing columns subject dc creator 
alternatively stored property table title publisher description may efficient results null valued columns row 
glance may multi valued property tables offer little benefit 
may benefits clustering values frequently accessed set values searched lookup table 
note property tables offer small storage savings property uri stored table clustered property tables subject stored 
properties datatype object value fixed known 
may specified property range constraint 
property tables leverage knowledge possible making underlying database column property value match property type may enable database better optimize storage searching column 
jena property class tables 
property class table special kind property table serves purposes 
records instances specified class resources class 
stores properties class property table class domain 
property class table columns subject resource second boolean column indicating subject explicitly asserted class member opposed inferred member zero columns property values 
worth noting jena implements reification property class table 
prop statement table subject predicate object doc dc creator hp labs bristol doc dc creator hewlett packard dc properties table subject title publisher description doc jena jena persistence com hp reified statement table 
xsd types correspond sql datatype 

dublin core property table subject predicate object type alice doc dc title jena rdf statement bob doc jena 
reification property class table erties rdf subject rdf predicate rdf object class constrained rdf statement 
subject property class table uri reifies statement 
storing reification way saves space compared alternative explicitly storing statements reification 
note partially reified statements easily supported 
applications specify schema graph property property class statement tables graph creation time configuration meta graph 
simplify implementation defined table configuration altered 
indexes may added removed 
limited changes table configuration may enabled 
jena persistence architecture overview jena persistence architecture 
section describe implementation architecture including specialized graph interface implements rdf sub graphs database drivers access database behalf 
specialized graph interface jena persistence layer presents graph interface higher levels jena supporting usual graph operations add delete find 
logical graph implemented ordered list specialized graphs optimized storing particular style statement 
example logical graph implemented specialized graphs optimized reified statements optimized ontology triples third handles remaining triples 
operation entire logical graph add statement delete statement find processed invoking add delete find specialized graph turn 
results individual operations combined returned result entire graph 
note process optimized certain cases operation completely processed entire graph specialized graph 
operation need invoked remaining specialized graphs 
example specialized graph stores statement property dc title process add delete operations dc title fully satisfy request find properties 
support optimization specialized graph operation returns completion flag indicate operation completely processed ordering specialized graphs kept constant 
case find operation additional optimization specialized graphs permit evaluate find graph lazy fashion resources specialized graphs application hungry consuming results earlier graphs 
specialized graph maps graph operations appropriate tables database 
implementation mapping specialized graphs database tables 
cases allows overhead database table amortized graphs 
specialized graph optimized reification triples property table optimized reification triples property table optimized ontology triples property table logical graph specialized graph optimized ontology triples specialized graph optimized ontology triples database tables 
graphs comprise specialized graphs tables database driver database driver provides storage interface insulates specialized graphs differences database engines support blobs nulls expressions table index creation generic driver implementation sql databases engine specific drivers postgresql mysql oracle engine specific drivers override generic methods necessary different quoting conventions treatment blobs 
driver responsible data definition operations database initialization table creation deletion allocating database identifiers 
responsible mapping graph objects java representation database encoding 
data manipulation drivers logical graph specialized graph handles triple specialized graph handles triple standard triple table standard triple table standard triple table combination static dynamically generated sql 
static sql fixed predefined operations inserting triple graph various forms find operation 
access property class tables rdql queries drivers dynamically generate sql select statements 
reduce overhead query compilation driver layer maintains cache prepared sql statements 
driver uses storage abstraction designed mapped persistent stores 
non sql drivers possible 
plan support berkeley db driver native java persistent store 
configuration meta graphs jena database configuration parameters options specified configuration file property value pairs read initially connecting database 
jena files 
configuration parameters specified rdf statements 
analogous storing metadata relational databases tables 
graph containing configuration parameters may passed argument creating new persistent graph 
jena provides default graphs containing default configuration parameters supported databases 
associated jena persistent store meta graph separate auxiliary rdf graph containing metadata logical graph 
auxiliary graph includes configuration parameters options mentioned metadata date database formatted version driver list graphs stored database mapping graphs tables meta graph may queried just jena graph graphs may modified support reification 
default schema graph statement table reified statement table implemented property class table 
user provided meta graph may specify graphs share tables 
meta graph may specify additional property property class tables indexes 
parameters threshold size long literals resources specified statements meta graph 
jena query processing forms jena querying 
find operation returns statements satisfying pattern 
find pattern form element constant don care 
rdql query compiled conjunction find patterns may include variables specify joins 
returns possible valid bindings variables statements graph addition property tables significantly complicates query processing 
consider iterators 
statement table row corresponds single rdf statement iterator property table may need expand row multiple statements add uris properties explicitly stored 
addition columns property table null 
major complexity occurs query unknown property 
querying inferred graphs addressed 
property don care variable bound query processed 
cases discussed 
find processing jena find pattern evaluated single sql select query statement table 
jena generalized multiple statement tables graph 
evaluate pattern jena pattern passed turn specialized graph handler evaluation stopping completion flag set 
results concatenated returned application 
handles case pattern contains unspecified property don care note find operations variables 
currently specialized graph issues separate database query pattern 
plan investigate single database query specialized graphs efficient 
example suppose pattern retrieves statements suppose graph tables statement table reified statement table 
separate queries single sql query process pattern 
select subject predicate object stmt table union select uri rdf subject subject reif table subject null union select uri rdf predicate predicate reif table predicate null union select uri rdf object object reif table object null union select uri rdf type type reif table type null queries quickly unwieldy complicated patterns statement tables may cause challenges query optimizers 
addition clear single large union query efficient alternative issuing separate queries 
single union query rows reification table read times 
rdql processing jena rdql query converted pipeline find patterns connected join variables 
query evaluated nested loops fashion jena result find operation pattern bind values variables generating patterns new find operations 
efficient join pushed database engine evaluation 
goal jena query processing converting multiple triple patterns single query evaluated database engine 
full discussion query processing scope 
section discuss simple cases mention difficulties general case 
simple case assume find patterns query statement table determined priori statements property tables match patterns 
mentioned single pattern completely evaluated single sql query statement table 
evaluate multiple patterns sufficient associate table alias pattern perform join aliases linking variables find patterns 
example consider rdql query get authors 
requires patterns associated sql evaluation expression 
pattern var dc title jena pattern var dc creator var select subject object stmt table stmt table predicate dc title object jena predicate dc creator subject subject second simple case occurs patterns completely evaluated single property table 
interesting thing case possible eliminate joins patterns single valued properties clustered 
example suppose clustered property table dc title dc creator assume creator single valued 
patterns previous example require single table alias evaluated join 
select subject creator title jena find patterns query apply multiple tables difficult construct single sql query satisfy patterns 
presents issues generating single sql query find operation 
current approach jena partition patterns groups group contains patterns completely evaluated single table plus additional group containing patterns span tables 
sql query generated groups group processed nested loops approach jena 
jena cases pattern may span tables 
property may don care case tables searched 
second property may refer unspecified class property rdf type object value class specified 
case impossible know property table may contain values pattern 
third property may variable 
interesting case corresponds table variables relational database querying processing table name unknown query processed 
difficult query processing problem 
feature jena queries may span graphs 
done specifying graph pattern applies 
graphs reside database instance possible optimize query patterns part graph 
graphs reside different instances different database engines attempt optimize query basic nested loop approach applied 
miscellaneous topics jena performance toolkit 
explore various layout options understand performance tradeoffs set jena utility programs development 
rdf synthetic data generator generates statements specified number classes instances 
uniform skewed data distributions generated predefined patterns properties trees taxonomies ancestor relations 
second tool benchmark suite measure effectiveness jena enhancements compare different database layouts 
designed general framework comparative runs arbitrary set jena programs 
third tool rdf data analysis tool applied set rdf statements suggests potentially beneficial property property class tables store statements 
jena transaction management 
jena underlying database may may support transactions 
consequently jena api methods atomic ensure database consistency 
addition transaction commit abort methods available declare explicit transactions desired 
jena provides capabilities 
interesting case jena ensure database consistency 
jena query handler supports queries graphs 
graphs stored separate databases consistent read set query guaranteed jena transaction applies single database connection 
principle possible open xa distributed transaction connection data source ensure consistency 
open world semantic web common case data sources support transactions xa protocol 
suggests richer transaction interface jena needed remains 
bulk load 
goal jena significantly reduce time load persistent graphs compared jena 
critical issue rdf applied large datasets 
denormalized schema helps address problem typical jena add operation updates fewer tables jena 
jena includes support jdbc batch operations enable multiple jdbc statements passed call database engine 
value batching depends level optimization database engine event reduces number database calls significantly 
status performance notes 
preliminary performance measurements indicate denormalized schema jena faster normalized schema jena twice fast operations 
results simple retrieval experiment table 
test retrieved single byte property value randomly selected objects 
test run configurations 
denormalized configuration stored property value directly statement table 
normalized configuration reduced long literal threshold see section bytes caused property value stored literals table 
retrieving property value denormalized configuration requires retrievals statement table second literals table denormalized case requires 
configuration run multiple times different random seeds result final run 
times milliseconds tests run mysql generation pc workstation gb ram 
large reduction run time initial run compared final run attribute hardware cache effects 
warm run expected denormalized retrieval twice fast normalized retrieval 
schema completely normalized subject predicate stored separate tables done jena see greater speed denormalized schema 
systematic study done completion jena table 
retrieval times normalized vs denormalized literal number retrievals normalized denormalized speed initial run final run performance toolkit 
similarly database size increase due denormalized schema studied pending uri prefix compression 
provide preliminary results show value property class tables reification 
synthetic database reified rdf statements generated stored different formats 
case reified statement stored optimized form property class table 
second case reified statement stored unoptimized rdf triples reified statement stored rdf statements 
consequently table contained rows second table contained rows 
simple test program randomly selected reified statement retrieved reification triples statement recall retrieval property class table converts table row set triples 
test run times different random number seeds different test sizes run retrievals 
results table 
times milliseconds tests run mysql generation pc workstation gb ram 
table 
retrieval times triples reified statement number retrievals optimized unoptimized speed initial run final run initial run final run initial run final run expectation optimized format perform times faster unoptimized form needs invoke database engine get triples unoptimized format calls 
small number retrievals optimized format shows large improvement fourth run 
attribute caching effects decrease larger numbers retrievals 
interesting see speed large numbers retrievals exceeds expectations 
may due database caching effects 
optimized table smaller possible cache larger percentage entire table reduces number relatively slow disk seek operations 
comprehensive study rdql query processing done 
preliminary analysis indicates jena algorithm modest improvement jena nested loops approach 
jena algorithm works quite queries high selectivity queries require nested find operations 
queries jena jena perform 
jena performs better jena queries join large number tuples 

currently jena stores literals strings 
important enhancement typed lit store native sql types 
enable inequality comparisons range queries processed database engine 

major goal jena support owl reasoning 
available interesting explore persistence layer better support capabilities performing transitive closure database 
presently investigating caching strategies improve performance 
approach implement caching inside persistence layer specialized graph interface 
alternative implement caching arbitrary logical graphs 
provides convenient general purpose solution may intimate knowledge database improve performance 
initial caching algorithm implement write cache holds statements commonly subjects 
cache holds statement subject statement subject currently cache assumes exclusive access subject avoid cache consistency issues due conflicting updates jena applications 
exclusive access appears common case 
style cache previously suggested experience rdf jena hope prove match common application usage patterns 
testing analysis underway 
related rdf storage subsystems comparative review implementation available 
attempt duplicate survey 
compare jena persistent store systems dimensions database schemas architecture system functionality better characterize strengths limitations approach 
jena schema design unique supports basic schema types denormalized schema storing generic triple statements property tables store pairs related arbitrarily specified properties 
best knowledge system supports generation property tables arbitrary properties systems strictly schema specific 
jena uses arbitrary property tables implement novel architecture statements associated graph stored multiple specialized subgraphs 
architecture enables jena query processor effectively treat subgraphs data partitions provides efficient implementation reification 
systems including kaon parka database support fixed set underlying tables implement non schema specific generic store 
means storage mechanism adapt data characteristics impacting scalability 
ics forth rdf suite supports generic stores automatically generated schema specific object relational sql schema definitions 
jena rdf suite relies schema specifications create specialized tables doesn support arbitrary property tables 
similarly sesame system creates specialized table class 
tightly coupling table layout schema structure facilitate inferencing allowing systems exploit explicit schema relationships means tables rebuilt schema structure changes 
forces storage system rdf unique support flexible dynamic schema restructuring jena subject limitation 
insofar schema specific tables partition stored data schema specific storage resembles jena notion specialized subgraphs 
systems tightly couple subgraphs schemas partition data syntactic structure create subgraphs factors 
storage inference layer sail provides layered interfaces sesame modules stack allow actions passed handled 
sesame sail database schema class specific subject limitations listed 
best knowledge rdf system optimizes storage reification style jena 
notion property class tables appears new rdf stores commonly object functional database systems 
jena persistence layer supports application specific schema retaining flexibility store arbitrary graphs 
notion property class tables appears new beneficial query languages expose higher level abstractions applications 
mixing property tables statement tables graph database complicates query processing optimization 
needed efficient algorithms case 
authors new jena effort wish rest jena team includes forth author help allowing participate development 
rest jena team includes jeremy carroll ian dickinson chris brian mcbride andy seaborne 
particularly chris andy seaborne generous time 

mcbride jena ieee internet computing july august 

carroll dickinson reynolds seaborne wilkinson jena semantic web platform architecture design hp laboratories technical report hpl 

berners lee primer getting rdf semantic web www org swap primer html 
beckett europe scalability storage survey free software open source rdf storage systems www org sw europe reports rdf scalable storage report 
beckett europe mapping semantic web data www org sw europe reports scalable rdbms mapping report 
berners lee web services semantic web keynote speech world wide web conference www org talks www keynote tbl 
alexaki christophides karvounarakis plexousakis tolle ics forth managing voluminous rdf description bases nd intl workshop semantic web semweb www pp 
hongkong may 

reynolds jena relational database interface performance notes jena download www hpl hp com semweb download htm 
kaon karlsruhe ontology semantic web tool suite kaon semanticweb org broekstra kampman van harmelen sesame generic architecture storing querying rdf rdf schema pdf international semantic web conference iswc sardinia italy june 
banks personal communication 
ics forth high level scalable tools semantic web 
rdf parka db scalable knowledge representation system 
www guha com internals html sesame generic architecture storing querying rdf rdf schema 
sesame aidministrator nl publications del pdf ding wilkinson kuno application specific schema design large rdf datasets workshop practical scalable semantic systems october sanibel island florida usa 
hp laboratories technical report hpl 
seaborne rdf hp laboratories technical report hpl 

