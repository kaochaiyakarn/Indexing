bootstrapping distributed computational economy peer peer bartering brent chun intel research berkeley bnc intel research net yun fu duke university fu cs duke edu amin vahdat duke university vahdat cs duke edu presents architecture distributed computational economies peer peer bartering 
architecture position computational economies ought bootstrapped layer simple robust resource exchange 
architecture comprised pieces resource discovery ii secure resource peering iii bartering 
pieces address problem describing discovering exchanging distributed resources secure decentralized manner 
key approach ability securely exchange resources delegated paths trust 
combined secure resource peering allows peers engage resource exchange directly connected peers addition peers direct bartering relationships 
bartering economy base envision evolutionary path complex scenarios layering richer functionality higher layers 
decades numerous proposals emerged economic distributed resource management large scale distributed systems 
observe widespread deployment systems practice 
argue key reason lack adoption initial complexity proposals 
vast majority previous proposals presume existence widespread acceptance currencies associated infrastructure start 
contrast history shows real economies evolve way 
real economies virtually simple bilateral exchange bartering 
number successful large scale distributed systems similarly rooted simple base functionality introduce richer functionality higher layers 
cases simplicity robustness critical promoting growth providing foundations layering additional complexity 
historical precedents propose distributed computational economy bootstrapped thin layer enables simple robust resource exchange bartering richer functionality ought layered top 
motivated providing transparent access remote resources largely context network services advantageous multiple vantage points network 
course believe goals applicable distributed systems particular grid 
envision bartering economy providing basis decentralized growth foundation layering additional functionality higher layers 
examples higher level functionality include currencies computational analogues financial instruments cpu futures distributed incentive compatible economic mechanisms 
baseline architecture bootstrapping distributed computational economies peer peer bartering eye support planetlab network testbed 
architecture consists pieces resource discovery ii secure resource peering iii bartering 
pieces address problem describing discovering exchanging distributed resources secure decentralized manner 
implementation currently underway 
resource discovery resource discovery process binding specific resources description services required particular user program 
process requires number components resource description lan guage allows peers describe resources making available sharing ii query language allows peer express resources interest iii resource discovery system accepts query requests evaluates returns query results 
resource discovery system takes resource availability information provided peers exposes information peers query language 
resource description language resource description language common language describe computational resources 
peers baseline bartering economy language purposes 
language expresses resources available sharing bartering occurs 
standard protocol exposing information enable automated querying peers dynamically discover resources currently available subsequently engage bartering protocol agree exchange rate 
second language expresses local resources exchanged ongoing bartering relationships remote resources available result bartering relationships analogous advertising peer resources acquired bartering resource description language essentially expresses terms bartering exchange 
expressive resources advertised varying levels complexity extensible know priori resources peers want advertise 
concretely describe number nodes available peer turn represent interests entire administrative domain 
classes nodes characterized cpu memory network storage capacity turn provided contiguous non overlapping time intervals 
length 
acquire resources long running application peers need engage continuous rounds bartering continuously acquire resources applications 
resource discovery systems architecture prescribe single resource discovery system 
flexibility encourage healthy competition provides baseline language express available resources low level allows multiple competing existing resource discovery systems information expose query languages provide varying degrees expressiveness expose information different levels abstraction 
resource discovery systems initially expose resources level abstraction mirrors resource description language 
longer term envision resource discovery systems allow resources interest succinctly described high level 
cases queries system ultimately mapped back set distributed resources names peers resources available 
resource discovery system ultimately scalable fault tolerant decentralized 
initially start simple centralized solutions established technology relational databases 
longer term envision transitioning emerging decentralized distributed query processing systems pier irisnet 
secure resource peering peers required resources discovered reliable accountable scalable resource exchange framework established provide mechanisms peer peer resource bartering 
implemented secure highly available resource peering sharp system planetlab global overlay testbed discovering sharing resources pairwise resource exchange resource exchange paths delegated trust 
sharp represents resource delegation tickets assert peer holder controls set peer resources time interval term 
ticket signed private key resource owner issuer 
holder may delegate portion resources claimed ticket peer issuing subset resources subinterval term signing concatenating original ticket new ticket 
cryptographically signed tickets unforgeable non independently verifiable third parties 
holder ticket issuer resources specified ticket 
resource owner may resources issuing tickets support improve resource availability utilization 
ticket holder replicate ticket multiple peers 
issuer ticket honors ticket probabilistic assurance 
probability issuer honors ticket depends degree rate ticket 
issuer honors ticket specified resources allocated lease returned ticket holder hard guarantee ownership resources 
lease renewed allow continuous resources 
may may involve acquiring additional tickets 
ticket soft claim resources lease hard claim resources 
peers exchange resources tickets leases 
tickets replicated arbitrarily ticket issuer maintain ticket tree tickets amount resources ticket detect conflicts delegation 
build tree delegation ticket associated global unique id identify transaction 
ticket construct unique path leaf ticket root ticket issuer ticket tree root ticket released issuer 
ticket exceed resource amount allocated ancestors issuer honors ticket 
ticket causes conflict ancestor issuer refuses ticket considers ancestor earliest conflict accountable conflict 
tickets provide accountable means sharp support transitive resource delegation basis resource exchange sharp 
optimal degree function multiple target metrics including utilization availability rejection rate 
degree implies peer issues exactly tickets support resources 
case paths trust peer fully utilized tickets issued peer subset immediate peers may go unused associated resources go idle 
increasing degree utilization availability increase presence unused tickets 
hand increasing degree probability rejection increases 
observed rejection rate function degree peering graph workload 
optimal degree balances desired utilization availability expected rejection rate see analysis trade offs 
ticket soft claim potentially rejected resources 
rejection occur desired resources fully utilized peer acting maliciously claiming resources fully utilized fact 
potentially result tickets rejected normal operation peers prepared handle ticket rejection 
determining peer rejected request intentionally separate matter 
peer point view requests rejected bottom line resources acquired 
response propose peers exchange rates number rejections 
peering relationship proving fruitful probably peer best interest favorable exchange rate peering altogether 
paths trust sharp peers obtain tickets pairwise ticket exchange establish trust relationship 
peers dynamically discover exchange tickets remote peer direct trust relationship discovering path remote peer series trust relationships recursive pairwise ticket exchange 
currently sharp uses bgp protocol secure resource discovery protocol discover paths trust 
peer advertises direct peers routes uses reach peers 
eventually peer maintains multiple paths peers 
peer attempts obtain tickets resources remote peer peer selects path path selection algorithm starts ticket bartering hop peer path turn repeats pairwise bartering required tickets obtained 
enables peer maintain trust relationships limited number peers obtain global resources peers reachable paths trust lowers barriers entry new peers participate system 
bartering distributed computational economy propose bartering foundation simple robust resource exchange 
higher layers build foundation provide sophisticated methods exchange infrastructure increased functionality 
bartering economy sharp core secure resource exchange protocols peer peer bartering mechanisms discovering utilizing paths delegated trust enable resource sharing chains peers 
sharp basis address additional aspects bartering economy bartering strategies advertising bartering exchange rates path selection algorithms mechanisms 
bartering strategies bartering strategies specify peers negotiate exchange rates peering peers execute peering protocol 
negotiating exchange rates involves determining amount resources peer exchanges peer part peering exchanges occur 
view execution peering protocol sequence rounds involves exchanging amount resources amount resources exchanged round assessment valuable peer resources 
number rounds involves trade locking exchange rate able dynamically respond changing conditions 
strategies determining parameterization range simple ones simple static configuration complex ones dynamic information current load observed supply demand 
execution peering protocol depends peers correctly faithfully executing protocol 
largescale distributed system infeasible assume peers trusted behave properly 
bartering economy peering relationship viewed instance iterated prisoner dilemma 
round peers play instance prisoner dilemma 
assume peers engage peering relationship remote resources valuable local resources 
peers agreed participate peering place 
local denote value local resources remote value remote resources 
reward cooperation remote local punishment mutual defection 
temptation detect payoff remote local respectively 
necessary conditions prisoner dilemma encourage large scale cooperation peers strategies cognizant defections respond appropriate manner encourage cooperative behavior 
strategies reciprocity feedback properties 
strategies involve elements 
need mechanisms detect defections 
example context sharp peering protocol observe defection round absence peer sending appropriate tickets 
second need strategies determine peer cooperates defects historical information peer behaved past 
society various arenas political social military observe situations large scale cooperation reciprocity occur despite temptation peers defect 
effective strategies tend optimistic largely cooperative forgiving responsive feedback observing reciprocity punishing peers defect 
simple strategy reciprocity proven remarkably robust effective wide range competing strategies tit tat 
tit tat strategy cooperation doing peer previous round 
simple encourages cooperation punishes defection forgiving practice outperforms virtually competing strategies number situations 
natural strategy bootstrapping computational economy start tit tat resource exchange round rewarded resource exchange round round punished round 
base strategy augment additional features additional robustness 
example share tit tat history information friendly peers thresholds quorums increase confidence information better engage interactions peers limited previous history information 
essentially constitutes form robust reputation management 
environments set peers fairly static peers tend interact large numbers peers tit tat appropriate strategy 
planetlab initial target environment fits profile 
may planetlab testbed consists nodes hosted sites spanning countries 
target applications planetlab planetary scale network services content distribution networks global storage systems require wide geographical coverage reasons including performance fault tolerance crossing administrative political boundaries having multiple vantage points network 
applications naturally involve sites peering sites order allocate resources application 
property combined fairly static set peers suggests tit tat effective 
hand environments set peers large dynamic probability peers interacts decreases 
tit tat effective 
environments sophisticated strategies need employed 
distributed trust reputation systems addressing problem 
advertising exchange rates peering relationships arranged sharp associated bartering parameters need advertised peers perform appropriate optimizations 
set bartering parameters pair peers essentially specifies exchange rate 
source wanting acquire resources remote destination exchange rates minimize amount local resources acquire remote resources path peering relationships 
making exchange rate information available achieved number ways 
natural approach annotate sharp paths trust advertised protocol exchange rate information 
necessary exchange rate information available locally peer local sharp routing table 
path selection appropriate resources discovered step acquiring tickets resources paths trust established sharp 
process involves examining source local sharp routing table selecting path trust desired destination resources 
desired resources particular peer paths trust source destination 
path trust sequence ongoing pairwise bartering agreements exchange rate 
selecting optimal trust path local optimization problem 
algorithms select optimal trust paths path exchange rate information local sharp routing table optimize target metrics 
practice examples target metrics number peering hops destination analogous bgp amount resources relinquished acquire remote resources 
economic setting natural metric minimizes cost performing pairwise bartering 
path trust selected need mechanism coordinate pairwise bartering exchanges source exchange resources desired destination resources path 
doing source provide tickets representing local resources provide tickets representing remote resources acquired local peering relationships 
case source needs instruct peers path trust perform bartering specific hop peers reaching destination 
allows source ultimately acquire remote resources selected path manner similar source ip routing 
architecture distributed computational economies peer peer bartering 
described process describing discovering exchanging distributed resources secure decentralized manner 
architecture supports process sharp secure highly available resource peering framework 
sharp provides secure resource exchange protocols enable peer peer bartering provides mechanisms discovering utilizing paths delegated trust enable resource sharing chains peers 
sharp base described remaining mechanisms needed peer peer resource bartering discussed bartering strategies reciprocity feedback 
mirroring evolutionary path followed economies real world believe distributed computational economy bootstrapped bartering economy simple robust resource exchange 
peer peer bartering base envision human nature lead formation powerlaw distribution peering graph 
peers establish peering relationships large number peers 
presence large number high degree nodes may lead csp computational service provider model analogy isps 
csp may accept cash return resource rights 
time csp may trusted longer barter local resources generic currency directly resources sites peer 
pre established trust rela sites receive generic currency able trust generic currency valid resources delivered appropriately 
take place involving middle man adamic huberman 
power law distribution world wide web 
science 
axelrod 
evolution cooperation 
basic books 
buyya giddy abramson 
case economy grid architecture service oriented grid computing 
proc 
hcw apr 
chase chun fu schwab vahdat 
sharp architecture secure resource peering 
review 
clark 
design philosophy darpa internet protocols 
proc 
sigcomm sep 
deshpande nath gibbons seshan 
cache query wide area sensor databases 
proc 
sigmod jun 
faloutsos faloutsos faloutsos 
power law relationships internet topology 
proc 
sigcomm aug 
feigenbaum shenker 
distributed algorithmic mechanism design results directions 
proc 

ferguson yemini 
economy flow control computer networks 
proc 
infocom apr 
foster kesselman 
globus metacomputing infrastructure toolkit 
intl 
supercomputer applications 
harren hellerstein huebsch loo shenker stoica 
complex queries dht peer peer networks 
proc 
iptps mar 
levy nisan 
line markets distributed object services system 
proc 
usits mar 
peterson culler anderson roscoe 
blueprint introducing disruptive technology internet 
proc 
hotnets oct 
regev nisan 
popcorn market online market computational resources 
proc 
ice oct 
saltzer reed clark 
toend arguments system design 
tocs nov 
waldspurger hogg huberman kephart stornetta 
spawn distributed computational economy 
ieee transactions software engineering feb 
wolski plank 
commerce building computational marketplaces computational grid 
technical report cs university tennessee knoxville apr 

