centro la ricerca scientifica tecnologica povo trento italy tel fax mail itc url www itc specifying analyzing early requirements tropos liu mylopoulos pistore roveri traverso july technical report istituto di cultura limited distribution notice report submitted publication outside itc probably copyrighted accepted publication 
issued technical report early dissemination contents 
view copy right outside publisher distribution outside itc prior publication limited peer communications specific requests 
outside publication material available form authorized copyright owner 
requirements engineering manuscript 
inserted editor specifying analyzing early requirements tropos ariel lin liu john mylopoulos marco pistore marco roveri paolo traverso department computer science university toronto st george st toronto canada department information communication technology university trento sommarive trento italy itc irst sommarive trento italy cs toronto edu roveri traverso pistore dit unitn irst itc liu jm received revised version 
framework supports formal verification early requirements specifications 
framework formal tropos specification language adopts primitive concepts modeling early requirements actor goal strategic dependency rich temporal specification language 
show existing formal analysis techniques particular model checking adapted automatic verification formal tropos specifications 
techniques implemented tool called tool maps formal tropos specifications language handled nusmv model checker 
evaluate methodology course exam management case study 
experiments show formal analysis reveals gaps inconsistencies early requirements specifications means trivial discover help formal analysis tools 
keywords early requirements specifications formal methods model checking 
early requirements engineering phase software development process models analyzes operational environment software system eventually function 
order analyze environment necessary investigate objectives business processes interdependencies different stakeholders 
principles understanding strategic aspects operational environment necessary motivate direct development software system 
errors misunderstandings stage frequent costly early requirements engineering usually done informally correspondence requests marco roveri itc irst sommarive trento italy 
mail roveri irst itc 

formal framework adapts results requirements engineering formal methods communities facilitate precise modeling analysis early requirements 
formal methods successfully applied verification certification software systems 
industrial fields formal methods integral components standards 
application formal methods early requirements means trivial 
formal techniques designed mainly applied phases software development architectural design level 
result mismatch concepts early requirements specifications actors goals needs 
constructs formal specification languages scr trio 
framework supports automatic verification early requirements specified formal modeling language 
framework part wider going project called tropos aim develop agent oriented software engineering methodology starting early requirements 
methodology supported variety analysis tools formal methods 
focus application model checking techniques early requirements specifications 
allow formal analysis introduced formal specification language called formal tropos ft 
language offers primitive concepts actors goals dependencies actors supplements rich temporal specification language inspired kaos 
notations allow description structural aspects early requirements model instance terms network relationships dependencies actors 
ft permits represent dynamic aspects model describing instance network relationships evolves time 
ft define circumstances dependency actors arises conditions ariel permit consider dependency fulfilled 
experience representing analyzing dynamic aspects allows precise understanding early requirements model reveals gaps inconsistencies means trivial discover help formal analysis tools 
order support automated analysis ft specifications extended existing formal verification technique model checking 
implemented extension tool called tool state art symbolic model checker nusmv 
tool translates automatically ft specification intermediate language il specification potentially link ft different verification engines 
il representation automatically translated nusmv perform different kinds formal analysis consistency checking animation specification property verification 
methodological side defined heuristic techniques rewriting diagram corresponding ft specification 
methodology offers guidelines tool effectively formal analysis suggesting model checking technique particular formal property validated 
preliminary reports ft language appeared 
includes integrates contents previous papers 
structured follows 
section introduces case study shows build ft specification model 
section uses case study illustrate ft incremental refinement specification 
section describes tool focusing functionalities architecture usage guidelines 
section report results series experiments conducted order evaluate scope scalability approach 
section discusses related section draws outlines 
formal tropos section course exam management case study describe ft specification obtained 
models starting point methodology provide informal graphical description organizational setting 
graphical description translated formal language suitable analysis dynamic aspects operational setting 
strategic modeling modeling language designed description early requirements 
founded premise phase important understand model strategic aspects underlying organizational setting software system eventually function 
understanding strategic aspects better identify motivations software system role play inside organizational setting 
instance order develop software system supports teacher running marking exam need understand aspects interdependencies teacher students define process giving exams 
framework offers categories concepts drawn goal agent oriented languages actors intentional elements intentional links 
actor active entity carries actions achieve goals 
depicts high level diagram course exam management case study main actors student teacher 
intentional elements include goals softgoals tasks resources internal actor define dependency relationships actors 
goal rounded rectangle condition state affairs world actor achieve 
example student objective pass course modeled goal pass course 
softgoal irregular curvilinear shape typically non functional condition clear cut criteria achieved 
instance fact teacher expects students honest modeled softgoal honesty 
goal teacher softgoal precise number students attracted order consider goal fulfilled 
task hexagon specifies particular course action produces desired effect 
example element give exam represented task 
resource rectangle physical information entity 
instance student waits lectures course lectures course mark exam mark exam teacher waits answer exam answer exam 
boundary delimits intentional elements internal actor 
intentional elements outside boundaries correspond goals softgoals tasks resources responsibility delegated actor 
instance student depends teacher marking exams resource mark exam modeled dependency student teacher 
diagrams dependency links represent inter actor relationships 
zooms actors domain student 
shows high level intentional elements student refined operationalized 
refinements relationships intentional elements represented intentional links include means ends decomposition contribution links 
element connected goal means ends link alternative way achieve goal 
instance order pass course pass course student pass exams course pass exam research project course course 
complete early requirements model include actors teaching assistant secretariat 
presentation purposes concentrate main actors student teacher 
specifying analyzing early requirements tropos integrity pass course integrity study course student research project course write report course know correct answer exam pass course honesty lectures course answer exam mark exam fig 

high level model course exam management case study 
pass exam get exam exam student fig 

high level model focusing student 
take exam give answer exam sition links define refinement task 
instance student wants pass exam pass exam needs attend exam take exam get passing mark exam 
contribution link describes impact element 
negative positive 
instance exam positive impact pass exam fair marking easier student judge ready take exam 
elements original definition turn useful subsequent phases methodology 
prior links describe temporal order intentional elements 
example student write report studying course get passing mark takes exam 
cardinality constraints numbers labeling links define number instances certain element exist system 
instance pass course goal pass exam subgoal 
links number suggest connections 
teacher teach course give exam attract students completes inner description teacher 
observe new dependencies teacher student added respect high level diagram 
dynamic modeling formal tropos model provides static description course exam management domain 
order fully understand domain needs describe analyze strategic aspects dynamics 
instance expectations dependencies student wants pass exam change time depending take exam waiting marking wants discuss marking teacher 
student take exam may possibly decide write report happen student got passing mark 
prior links cardinality constraints shown permit describe aspects dynamics course exam management case study expressive power limited 
general informal notations ones provided inadequate carry accurate dynamic analysis 
formal specification languages suited purpose 
ft designed supplement models precise description dynamic aspects 
ft focus intentional elements circumstances arise conditions lead fulfillment 
way dynamic aspects requirements specification introduced strategic level requiring operationalization specification 
ft specification ask questions construct valid dynamic scenarios model 
possible fulfill goals actors 
decomposition links prior constraints induce meaningful temporal order 
dependencies represent valid synergy synchronization actors 
precise definition ft semantics 
relevant aspects ariel study course student integrity write report course know correct answer exam research project course pass course pass exam get exam exam take exam give answer exam language 
grammar ft 
ft specification describes relevant objects domain relationships 
description object structured layers 
outer layer similar class declaration defines structure instances attributes 
inner layer expresses constraints lifetime objects typed order lineartime temporal logic 
ft specification completed set global properties express properties domain 
outer layer excerpt outer layer ft specification course exam management case study 
transformation diagram ft specification actors intentional elements mapped corresponding declarations outer layer ft entities course exam added represent non intentional elements domain 
instances element may exist evolution system 
example different pass course goals may exist different student instances different courses taken student 
reason refer different elements compose ft declarations classes 
class associated list attributes 
attribute sort type optional facets 
sorts primitive boolean integer 
classes 
attributes primitive sorts usually define relevant state instance 
example boolean attribute passed resource dependency mark determines mark passing 
attributes non primitive sorts define instances domain 
example attribute exam goal pass exam specific lecture course honesty instructions exam answer exam fair marking scheme exam post exam discussion exam mark mark exam pre exam discussion exam mark run exam fig 

annotated model course exam management case study 
give exam marking exam teach course prepare exam teacher attract students answer questions give instructions exam initial reevaluate exam exam receive marking answer exam exam produce marking scheme exam exam passed attribute pass course pass course instance motivates student pass exam 
similarly dependency mark refers exam marked attribute exam exam goal student motivates expectation having mark attribute gpm 
facets represent basic properties attributes 
facet optional means attribute may undefined 
facet constant means value attribute change initialization 
initialization happens instance class attribute belongs created case attributes optional constant time creation instance 
cases attributes refer classes constant values change time values user defined attributes usually change lifetime class instances 
case attribute passed dependency mark instance change value model change mark due re evaluation exam 
special attributes declarations intentional elements 
internal intentional elements associated corresponding actor special attribute actor instance pass exam student instance actor attribute 
similarly depender dependee attributes dependencies represent parties involved delegation relationship 
important aspect ft focus conditions fulfillment goals dependencies 
intentional element characterized mode declares modality fulfillment 
example modality student goal pass exam achieve means student expects reach state exam passed 
student softgoal integrity maintain mode condition cheating con specifying analyzing early requirements tropos outer layer specification entity actor int element dependency global properties entity entity name attributes creation properties invar properties actor actor name attributes creation properties invar properties int element type name mode actor name attributes creation properties invar properties fulfill properties dependency type dependency name mode depender name dependee name attributes creation properties invar properties fulfill properties type goal softgoal task resource mode mode achieve maintain achieve maintain avoid attributes attribute attribute attribute facets name sort facets constant optional 
sort name integer boolean 
attributes inner layer creation properties creation property creation creation property property category event category temporal formula invar properties invar property invariant invar property property category temporal formula fulfill properties fulfill property fulfillment fulfill property property category event category temporal formula property category constraint assertion possibility event category trigger condition definition global properties global property global global property property category temporal formula maintained 
modalities achieve maintain combination previous modes requires fulfillment condition achieved continuously maintained avoid means fulfillment conditions prevented 
inner layer inner layer ft class declaration consists constraints describe dynamic aspects entities actors goals dependencies 
presents excerpt constraints lifetime dependency mark management case study 
actual constraints described formulas typed order linear time temporal logic see section 
ft distinguish different kinds constraints invariant creation fulfillment constraints depending scope 
invariant constraints class define conditions hold lifetime class instances 
global properties fig 

formal tropos grammar 
typically invariants define relations possible values attributes cardinality constraints instances class 
instance invariant states relationship attributes instances mark class 
second invariant imposes cardinality constraint mark instances mark goal 
creation fulfillment constraints define conditions critical moments lifetime intentional elements dependencies creation fulfillment 
creation goal interpreted moment actor associated intentional element depender dependency begins desire goal 
fulfillment goal occurs goal achieved 
creation fulfillment constraints define conditions time instants 
creation constraints associated class including actors entities 
constraints satisfied instance class created 
fulfillment constraints associated intentional elements ariel entity course entity exam attribute constant course course actor student actor teacher goal actor student mode achieve attribute constant course course goal passexam actor student mode achieve attribute constant exam exam constant pass course goal actor student mode achieve attribute constant exam exam constant pass exam passexam softgoal integrity actor student mode maintain task actor teacher mode achieve attribute constant exam exam resource dependency mark depender student dependee teacher mode achieve attribute constant exam exam constant gpm passed boolean fig 

excerpt outer layer ft class declaration 
cies 
constraints hold goal softgoal achieved task completed resource available 
creation fulfillment constraints distinguished sufficient conditions keyword trigger necessary conditions keyword condition necessary sufficient conditions keyword definition 
ft specification primary intentional elements pass course integrity typically fulfillment constraints creation constraints 
interested modeling reasons student wants pass course maintain integrity taken granted 
subordinate intentional elements pass exam exam typically constraints relate creation state parent elements 
instance creation condition instance dependency mark parent goal fulfilled far 
words student re resource dependency mark depender student dependee teacher mode achieve attribute constant exam exam constant gpm passed boolean invariant gpm exam exam gpm actor depender invariant creation condition fulfilled gpm fulfillment condition mark self gpm gpm im im exam exam im actor dependee fulfilled im fulfillment trigger changed passed reevaluation mark self self fig 

example ft constraints 
passing mark need ask mark 
note creation condition dependency mark fulfillment condition task exam elaborate delegation relationship student teacher corresponding diagram 
goal decomposition relationships specified similar fashion 
ft temporal logic ft constraints described formulas typed order linear time temporal logic 
linear time temporal logic quite common formal specification verification frameworks 
temporal operators provided logic shown capture relevant temporal properties dynamic systems 
ft temporal operators complemented quantifiers take account aspect dynamics ft models presence multiple instances classes 
possible represent ft dynamic aspects model may want express 
ft temporal logic described syn tax sort sort changed fulfilled boolean op 
relational op 
quantifier op 
past op 
special pred 
self actor depender dependee special term const 
var 
standard boolean relational operators logic provides quantifiers range specifying analyzing early requirements tropos instances class set past temporal operators 
allow expressing properties limited current state may refer past history 
instance formula expresses fact formula hold state reached model formula previous requires condition hold previous state 
formula eventually requires formula true eventually true state formula expresses requirement past states 
formula expresses fact formula hold current state states evolution model formula past holds true current state past state model 
formula holds state holds formula holds state formula holds past state holds formula holds state 
special predicates appear temporal logic formulas 
predicate holds element exists state changed previous 
predicate holds state value term changed respect fulfilled previous state 
predicate holds fulfilled predicate fulfilled holds holds state previous 
predicates defined intentional elements dependencies 
terms formulas defined may integer boolean constants variables may refer attribute values class instances standard attribute special attribute actor depender 
instances may express properties keyword self see second invariant dependency mark 
temporal logic incorporated ft quite expressive simple formulas typically specification 
possibility anchoring temporal formulas critical events lifetime object possibility expressing modalities goals dependencies provide implicitly easy understand subset language temporal logics 
consider creation condition fulfillment condition dependency mark 
temporal operators needed constraints kinds constraints define lifetime instants conditions refer 
lifetime events modalities sufficient capturing temporal aspects conditions temporal operators need appear explicitly formulas 
instance temporal operator appears explicitly fulfillment trigger dependency mark needed want bind fulfillment dependency condition hold moment fact attribute passed change re evaluation 
assertions possibilities constraints represented express conditions required hold possible scenarios 
ft specification specify properties desired hold domain verified respect model 
presents properties management case study 
distinguish assertion properties desired hold valid evolutions ft specification possibility properties hold valid scenario 
properties anchored important event lifetime class instance 
example assertion requires instance pass exam created instance pass exam exists corresponding exam student 
properties examples global properties express conditions entire model attached particular event 
ft translation guidelines developing satisfactory formal specification software system hard starts informal model 
experience difficulties developing ft specification substantially reduced extracts information possible model produce reasonable initial ft model 
fact constraints ft specification appear implicitly model 
identified set translation rules permit systematically derive constraints 
rules capture intuitive semantics designing model 
instance decomposition means ends links describe possible ways achieving parent goal terms lower level sub goals 
sub goals created purpose fulfilling parent goal 
leads translation rules creation fulfillment conditions sub goals default creation condition sub goal decomposition means ends link parent goal exists fulfilled 
fulfillment condition parent goal depends fulfillment sub goals 
sub goals connected parent goal means ends links fulfillment subgoals necessary fulfillment parent goal 
connected decomposition links fulfillment subgoals necessary 
parent goals sub goals typically share entity owner 
instance pass exam take exam refer exam student wants pass exam take 
leads translation rule invariant condition added sub goal order force binding owners goals attributes goals 
ariel goal passexam creation assertion condition student pass exam 
passexam actor actor exam exam pass course pass course self resource dependency mark fulfillment assertion condition mark answer corresponding 
answer dependee depender depender dependee exam exam fulfilled resource dependency mark fulfillment assertion condition mark changed 
passed passed ped ped mark self global assertion student wants maintain integrity pass exam studying 
honesty fulfilled actor dependee exam give exam exam fulfilled study actor actor course exam course fulfilled study global possibility possible student pass course 
pc fulfilled pc global possibility possible student passed course passing exam 
pc fulfilled pc pe passexam pe pass course fulfilled pe goal passexam fulfillment possibility condition possible student passed exam thinks marking fair 
pass exam self fulfilled satisfied global possibility possible teacher expects exam answer student committed exam 
answer passexam exam exam actor dependee rules capture semantics cardinality constraints 
instance case connection refinement means ends link handled translation rule sub goal connected parent goal refinement means ends link invariant added sub goal requiring instance sub goal associated instance parent goal 
example interpret prior link temporal constraint requires fully complete goal moving 
leads translation rule prior constraint sub goals common parent creation condition added goal comes requiring goal fulfilled 
rules meant definitive exhaustive systematic application leads quick generation reasonable initial model 
case dependency mark see invariants creation condition fulfillment condition formalize goal delegation cardinality constraints appear mode 
automatically generated rules 
order capture nature application domain generated constraints need corrected additional non standard constraints need manually added ft specification 
instance constraint dependency mark non standard 
expresses sufficient condition considering dependency fulfilled fig 

example formal tropos properties 
committed change passing status mark re evaluation occurred 
currently developing tool support designer semi automatic extraction initial ft specification starting diagram 
formal tropos illustrate usage ft refining early requirements specification 
section describe tool tool supports analysis performed section 
explanatory purposes focus subset ft specification 
initial model shown strongly specified 
particular cover dynamic aspects domain 
interactively improve refine guided results provided analysis 
section scenarios represented diagrams automatically generated tool 
scenario 
symbol indicates instant creation object 
simplicity diagrams report relevant objects scenario 
refinement step consider achievement goal 
case study student passes course takes exams course passing mark exam 
capture requirement modify ft model adding task passexam means achievement goal 
fulfill goal require exam course exists denote different time instants specifying analyzing early requirements tropos entity course entity exam attribute constant course course actor student goal mode achieve actor student attribute constant course course actor teacher task mode achieve actor teacher attribute constant exam exam resource dependency answer mode achieve depender teacher dependee student attribute constant exam exam resource dependency mark mode achieve depender student dependee teacher attribute constant exam exam passed boolean fig 

initial ft specification analysis case study 
instance passexam fulfilled 
require instance passexam created corresponding fulfilled goal fulfilled need pass exam course 
allow instances class mark passexam 
sufficient condition passing exam corresponding mark passing 
goal fulfillment definition exam course course passexam exam pc self fulfilled task passexam mode achieve actor student attribute constant pc constant exam exam creation condition fulfilled pc invariant pc actor actor pc course exam course fulfillment condition mark depender actor exam exam fulfilled passed analysis extended specification reveals problems 
specification allows unrealistic scenarios depicted 
scenario shows correctly instance passexam created time fulfilled time fulfilled 
scenario shows value attribute passed dependency mark may oscillate passing mark exam exam created passexam pe mark mark passed fig 

scenario attribute passed oscillates 
fulfilled created fulfilled created true false dependency fulfilled 
consider assertion requires passing mark passexam goal fulfilled 
global assertion pe passexam fulfilled pe mark exam pe exam fulfilled passed hold time time scenario depicted 
enforce requirement mark produced change value add invariant constraint dependency mark 
resource dependency mark invariant fulfilled self passed passed ft specification specify teacher going give exam student interested passing 
task giving exam created fulfilled answers students marked 
requirements modeled additional constraints task 
task creation condition fulfillment condition answer exam exam depender actor mark exam exam dependee actor depender dependee fulfilled pe passexam pe exam exam trivial problem specification allows scenarios mark student answer student 
example scenario instances passexam mark created time answer created 
behaviors easily ruled adding creation constraint dependency mark 
resource dependency mark creation condition domain fulfilled time answer depender dependee dependee depender exam exam fulfilled instance notice value attribute passed relevant dependency fulfilled care changes fulfillment 
ariel exam passexam pe answer mark mark passed created fulfilled created fulfilled created fulfilled created true false fig 

student receives mark exam providing answer 
specification suffers subtle problem 
expect creation condition teacher waits answers students committed pass exam 
expectation captured assertion 
global assertion answer pe passexam pe exam exam pe actor dependee unfortunately scenario depicted shows case assertion valid 
scenario teacher gives exam time student student committed pass exam proven instance class passexam created time teacher waiting answer student student interested giving exam 
subtlety problem relies fact instance class student necessary order reveal 
behavior suggests need refine specification introducing registration mechanism exams 
constrain creation resource answer exam existence student aiming pass exam 
resource dependency answer creation condition passexam actor dependee exam exam specification grows important detect overconstrained situations rule desired behaviors 
instance want sure specification allows student pass course 
requirement formulated possibility 
ge passexam pe passexam pe answer answer fig 

teacher waits answer arrive 
fulfilled created fulfilled created fulfilled created fulfilled created fulfilled created fulfilled pc created passexam pc mark mark passed exam global possibility fig 

student passes course 
fulfilled created fulfilled created true false created fulfilled existence proof possibility shown 
class instance pc created time jointly class instances passexam pc mark exam 
class instance mark fulfilled time mark passed true passexam pe fulfilled 
time object pc fulfilled 
interesting scenario want rule student fails pass exam able pass course 
requirement formulated possibility 
global possibility student mark depender fulfilled passed course exam course actor fulfilled possibility false allow instance class 
case possibility obtain second mark exam 
consider multiple class instances satisfy possibility 
tool section describe tool tool supports analysis described previous section 
tool available dit unitn ft 
tool finite state model checking 
advantages model checking respect formal techniques theorem proving see comparison allows automatic verification specification counter example traces produced witnesses validity invalidity specification 
limit finite state model checking requires model finite number states 
forces define upper bound number class instances created model checking 
tool input ft specification parameters specify upper bounds class instances 
basis input tool builds finite model represents possible behaviors domain satisfy constraints specification 
tool verifies model exhibits desired behaviors 
tool specifying analyzing early requirements tropos provides different verification functionalities including interactive animation specification automated consistency checks validation specification possibility assertion properties 
verification phase usually generates feedback errors ft specification hints fix 
verification phase iterates fixed version model possibly different upper bounds number class instances reasonable confidence quality specification achieved 
verification functionalities provided tool standard model checking concepts algorithms 
application ft required substantial effort customization development extensions 
report extensions section described tool functionalities detail 
tool functionalities animation advantage formal specifications possibility animate 
animation user obtain immediate feedback effects constraints 
animation session consists interactive generation valid scenario specification 
stepwise tool proposes user possible valid evolutions animation user selected system evolves state animation 
animation allows better understanding specified domain early identification trivial bugs missing requirements taken granted difficult detect informal setting 
animation facilitates communication stakeholders generating concrete scenarios discussing specific behaviors 
consistency checks consistency checks standard checks guarantee ft specification self contradictory 
inconsistent specifications occur quite due complex interactions constraints specification difficult detect support automated analysis tools 
consistency checks performed automatically tool independent application domain 
simplest consistency check verifies valid scenario respects constraints ft specification 
consistency check verifies exists valid scenario class instances specified input parameters eventually created 
check aims verifying parameters violate cardinality constraint specification 
tool checks exists valid scenario instances particular goal dependency eventually created fulfilled fulfillment conditions goal dependency compatible constraints specification 
consistency checks may relevant model 
instance model may perfectly reasonable single scenario instances generated classes 
case consistency check excluded model investigation 
possibility checks possibility checks verify specification overconstrained ruled scenarios expected stakeholders 
possibility property ft specification checked tool verifies valid traces specification satisfy condition expressed possibility 
expected outcome possibility check example trace confirms possibility valid 
sense possibility checks similar consistency checks verify ft specification allows certain desired scenarios 
difference consistency generic formal property independent application domain possibility properties domain specific 
assertion checks goal assertion properties dual possibilities 
aim verify requirements underspecified allow scenarios violating desired properties 
unsurprisingly behavior tool case assertion checks dual behavior possibility checks tool explores valid traces checks satisfy assertion property 
case error message reported counterexample trace generated 
counter examples facilitate detection problems ft specification caused assertion violation 
instance course exam management case study sample assertion student pass course exams course doing research project 
quite reasonable assertion false tool produce trace shows circumstances student pass course passing exams doing research project 
discussions stakeholder may clarify trace produced corresponds valid scenario assertion changed ft specification strengthened order prohibit counter example 
tool architecture tool performs verification ft specification steps see 
step ft specification translated intermediate language il specification 
second step il specification input verification engine built top nusmv model checker 
ft il ft il module takes care translation ft specification corresponding il specification 
ariel ft ft scenario il il scenario tool fig 

tool framework 
verification engine translates back ft counter examples scenarios produced verification engine 
internals verification engine hidden user 
il seen simplified version ft particular strategic flavor ft lost focus shifts dynamic aspects system 
details ft specification removed translation 
case instance distinction different types intentional elements dependencies 
aspects important description specification organizational setting play role formal analysis 
give excerpt il translation running example 
il model consists parts class declarations constraints assertion possibility properties 
class declarations keyword class define data types specification 
instances represent entities actors dependencies outer layer ft specification 
note attributes explicitly declared ft specification added class definitions translation 
case instance attribute actor type student classes passexam integrity attributes depender dependee respectively type student teacher dependency mark 
boolean attribute fulfilled added classes corresponding goals task resources softgoals 
notice fulfillment primitive concept ft fulfilled predicate il encoded state variable attribute fulfilled 
example change focus occurs translating ft specification il 
il allows dynamic creation class instances 
instance predicate fifth constraint check instance class created current time instant scenario 
constraint formulas keyword constraint restrict valid temporal behaviors system 
formulas model semantics ft specification 
instance constraint formulas express respectively fact attribute course instances exam attribute actor instances passexam constant 
formulas correspond temporal constraints constitute inner layer ft specification 
instance third fifth constraint formulas class exam course course class course class teacher class student class passexam actor student fulfilled boolean exam exam pass course class integrity actor student fulfilled boolean class actor student fulfilled boolean exam exam pass exam passexam class mark dependee teacher depender student fulfilled boolean exam exam gpm passed boolean class declarations constraint formulas constraint attribute course entity exam constant exam course course course constraint actor goal passexam constant pe passexam student pe actor pe actor constraint creation condition dependency mark mark mark gpm fulfilled constraint invariant dependency mark mark mark gpm gpm constraint creation definition softgoal integrity integrity actor constraint fulfillment condition dependency mark mark fulfilled fulfilled im im exam exam im actor dependee im fulfilled assertions possibilities possibility possibility pc pc fulfilled pe passexam pe pass course pc pe fulfilled assertion assertion mark fulfilled answer dependee depender depender dependee exam exam fulfilled fig 

excerpt il translation running example 
specifying analyzing early requirements tropos correspond creation condition classes mark integrity respectively 
fourth constraint corresponds cardinality constraint class mark 
il constraints creation fulfillment class instances longer syntactically anchored corresponding class 
need give context precisely define meaning 
context provided translation rules map ft specification corresponding il 
instance fulfillment condition dependency achieve modality mapped constraint form fulfilled fulfilled stating achieve dependency fulfilled fulfillment condition hold 
rule applied fulfillment condition dependency mark results sixth constraint 
translation ft il auxiliary temporal operators added il specification 
operators depend kind formula translated mode dependency 
instance case maintain dependency translation fulfillment condition rule fulfilled stating maintain dependency fulfilled conditions hold full lifetime dependency 
similar rules apply goals softgoals task resources 
possibility assertion formulas keywords pos assertion respectively state expected properties behavior system 
correspond assertion possibility properties ft specification 
notice translation assertions possibilities need add context see assertion 
role il il plays fundamental role bridging gap ft formal methods 
advantage il compact ft allows simpler formal semantics 
fact formal semantics ft defined top semantics il translation rules map ft specification il specification 
semantics il specification terms sets scenarios scenario infinite sequence states 
state consists set instances classes il specification definition values attributes instances 
valid states conform attribute sorts declared specification 
valid scenario sequence valid states satisfy temporal conditions expressed constraint declarations specification 
il allows clear definition verification assertions possibilities specification 
set constraints il specification 
checking assertion valid corresponds checking implication valid semantic model scenarios satisfy constraints satisfy assertion 
checking possibility valid corresponds checking formula satisfiable scenarios satisfy constraints possibility 
advantage il suitable formal analysis independent particular analysis techniques employ 
moment applied model checking techniques plan apply techniques satisfiability theorem proving 
il independent particular constructs ft moving different domains probably necessary tune ft instance adding new modalities dependencies 
formal approach described applied dialects ft cost defining new translation 
furthermore il applied requirements languages different set concepts ft kaos 
model checking verification engine actual verification performed nusmv 
nusmv implements state art model checking algorithms 
provides open architecture facilitates implementation new algorithms customization verification process specific application domain 
nusmv symbolic model checking techniques 
symbolic techniques developed reduce effects state explosion problem enabling verification large designs 
nusmv adopts symbolic model checking algorithms binary decision diagrams bdd propositional satisfiability sat 
bdd model checking performs exhaustive traversal model considering possible behaviors compact way 
exhaustive exploration allows bdd model checking algorithms conclude property satisfied falsified model 
hand exhaustive exploration bdd model checking expensive large models 
sat model checking algorithms look trace length satisfies falsifies property 
sat algorithms usually efficient bdd algorithms traces reasonable length trace length may case property satisfied longer trace 
sat model checking verifies satisfiability property length called bounded model checking bmc 
tool exploits bdd sat model checking 
implemented extensions nusmv model checker order allow verification il specifications 
particular il smv module ariel added 
takes il specification builds finite state machine nusmv format 
il specification upper bounds number class instances il smv synthesizes model specification 
states model respect class part il specification transitions respect temporal specification defined constraint formulas 
nusmv formalism allow creation new objects run time translation special flag added class deal instance creation 
quantifiers il interpreted number class instances exist current state 
construct model il smv adopts synthesis algorithm lineartime temporal logic specification provided nusmv 
immediate outcome synthesis process consistency checking 
fact specification inconsistent respect declared number instances synthesis process fails automaton built 
extension nusmv model checker new flexible interactive animator allows interactive exploration automaton random execution certain number steps 
allow verification assertion possibility formulas executions automaton bmc engine extended past operators 
heuristics model construction property verification tool builds finite state model infinite state specification 
upper bound number class instances specified ft specification 
choice upper bound plays critical role verification step 
bugs appear certain number class instances allowed valid scenarios require number class instances 
checks performed tool guarantee correctness specification respect considered number class instances 
practice convenient generate check various models different number class instances larger set possible cases covered verification 
set upper bound class instances basic approaches 
uniform upper bound set classes instance instance case 
second cardinality constraints model different upper bounds set different groups classes teacher vs students course vs exams third subset classes selected instantiation property verified 
instance allowed classes selected 
approach referred reduced case 
complex ft specifications verification properties model take long time require considerable effort 
situation provide guidelines effective application verification methods supported tool 
possibility consistency checks sat bounded model checking techniques preferable effective finding scenarios bounded length satisfy property 
scenarios short scenario reasonable length typically steps case possibility satisfied 
case direct inspections specification interactive animations shown effective means finding problem ft specification 
assertion checks sat bounded model checking techniques give preliminary results 
fact techniques able find counter examples assertion false able prove truth assertion length possible counter examples 
guarantee ft specification satisfies assertion bdd techniques needed allow exhaustive analysis model 
strategy help checking assertions bdd techniques consider subset constraints ft specification 
seen check assertion specification consisting constraints looking solutions problem derive positive answer subset constraints job done 
constraints add restricted behavior system 
interested verifying possible scenarios compatible specification satisfy prove holds constrained system infer holds constrained system 
fail checking property need consider new set constraints iterate 
counter example produced subset guide selection new constraints added exhibits possible behavior violates relevant constraints considered 
iterative process eventually terminate set constraints finite 
theory initial set constraints chosen arbitrarily empty set practice starting guess important reduce number iterations 
moment intervention user needed choosing initial set constraints adding new constraints 
practical cases approach successful user mind reason assertion needs hold exploit knowledge choose suitable set currently implementing testing different heuristics supporting user selection relevant constraints 
experimental results guidelines described previous sections conducted iterations experiments 
dur example abstraction technique verification done general specification obtained removing irrelevant details 
abstraction techniques common practice model checking community see instance 
specifying analyzing early requirements tropos possibility checks instance instances instances bmc bdd bmc bdd bmc bdd valid valid valid undecided valid undecided sec mb sec mb sec mb sec mb valid valid valid undecided valid undecided sec mb sec mb sec mb sec mb valid valid valid undecided valid undecided sec mb sec mb sec mb sec mb undecided invalid undecided undecided undecided undecided sec mb sec mb sec mb table 
results possibility checks 
assertion checks instance instances bmc bdd bdd reduced bmc bdd bdd reduced valid valid undecided valid sec mb sec mb sec mb sec mb sec mb valid valid invalid undecided invalid sec mb sec mb sec mb sec mb sec mb valid valid undecided undecided sec mb sec mb sec mb sec mb valid valid undecided undecided sec mb sec mb sec mb ing iteration ft specification validated human inspection animation consistency checking possibility assertion verification 
bug detected ft specification cases model revised new iteration performed 
iterative refinement specification ended checks ft specification successful 
setup experiments order illustrate performance tool verification process experiments results intermediate version ft specification contains bugs 
report results assertions possibilities model assertions possibilities 
results url dit unitn ft cs cm 
stress scalability proposed verification techniques performed tests considering models different size 
precisely considered different upper bounds number instances class 
report case instances class intermediate case allow instances classes particular student goals tasks instance classes teacher tasks course 
experimented different model checking techniques sat bounded model checking bmc tables bdd model checking bdd case assertions bdd model checking reduced models described section bdd reduced 
case study composed table 
results assertion checks 
classes constraints 
model instance class requires boolean state variables instance requires boolean state variables 
state space grows states moving instance instance class 
results results experiments carried reported table table 
experiments executed pc pentium iii mhz gb ram running linux 
verification tests executed time limit seconds hour memory limit gb 
problem report cpu time seconds amount memory mb 
mark experiments complete time limit mark experiments memory limits 
maximum length considered bounded model checking experiments 
experiments show 
possibilities valid witness scenarios length produced tool 

possibility invalid 
witness scenario length instances length instances 
analysis specification shows possibility teacher expects exam answer student intend pass exam occur assumed teacher knows students want pass exam requiring register 
possibility removed final version ft specification 
experiments confirm reasonable bound generated witness scenarios counter examples length shorter 
ariel 
assertions correct 
counterexample scenarios performed checks 

assertion false 
counter example length instances case 
due missing creation condition dependency mark allows teacher assign marks students provided exam answers 
bug fixed final version ft specification 
case instance counter example 
right ft specification teacher starts marking student takes exam 
discussion effectiveness case study proposed approach effective improving early requirements specification 
discussion dynamic aspects specification led better understanding domain revealed tricky aspects case study evident model 
validation techniques provided tool useful detecting correcting bugs 
instance animation revealed due missing creation condition student goal student allowed try take exam teacher giving 
likewise consistency checks able detect trivial error creation condition student goal study allow students study course 
validation assertions possibilities revealed subtle bugs due interaction different goals dependencies constraints 
instance due error fulfillment condition student prevent teacher fulfilling task declaring intention take exam 
case student decide fairness marking softgoal received mark expecting marking scheme wrong teacher 
due missing creation condition dependency fair 
tool ability generate counter examples helped pinpointing problems refining ft specification 
counter example generated tool trivial irrelevant scenario informative user 
example assertion claiming case teacher waiting answer student committed take exam see section 
tool generates trivial counter example violates assertion insufficient number answers created 
cases easy refine property trivial counter examples ruled 
instance impose instance class answer exists student tool produces informative counter example depicted 
limiting factor current framework correctness specification asserted con sidered upper bounds number class instances 
currently looking infinite state model checking techniques guarantee model correct sufficiently high upper bounds correct regardless upper bounds 
looking verification techniques theorem proving require finite state model verify directly correctness unbounded model 
conclude comment scalability approach 
operational framework course exam management case study tiny compared real domains 
approach larger domains expect apply formal analysis techniques selected critical parts model 
claim size course exam management model considered experiments comparable sizes formal models critical subsets 
performance performance results tool encouraging needed order allow black box usage techniques 
fact tool allows usage different verification techniques important factor effectiveness 
particular bdd bmc model checking complement 
bmc verification efficient checking possibility properties 
average valid scenario possibility property produced seconds 
verification preliminary verification assertion properties 
hand bdd model checking practice large models big state spaces 
experiments show usage abstraction techniques described section checking assertions reduced model promising 
properties techniques resulted speed ups orders magnitude respect case model 
allows check correctness assertions instances case instances case 
animation specification useful improved reducing setup time improving usability allowing automated generation scenario set target states 
related proposals literature related 
best knowledge differ approach target domain early requirements case support automated analysis model checking techniques case 
huge number tools techniques place emphasis automated analysis relevant alcoa 
aspects design choices specifying analyzing early requirements tropos tool alcoa similar 
alcoa offers front language alloy translated smaller formally defined intermediate language 
ft alloy built analysis mind designed way amenable automated verification 
similarly tool alcoa relies idea bounding number instances specification order verify finite model system 
promotes methodology automatically generated scenarios 
supports forms analysis ft consistency possibility assertion checks animation temporal logic alcoa expressive ft alcoa sat bounded model checking formal analysis techniques supported ft fundamental difference ft alcoa target domain 
alcoa tool describing structural properties suitable early requirements specification 
main reason describing dynamic interactions objects unable model analyze dynamic aspects actors dependencies organizational setting 
furthermore ft inspired starting point alcoa front language offer notations adequate reason strategic aspects organizational setting typical early requirements 
similar considerations hold methodologies apply automated verification requirements specifications scr rsml 
able describe dynamic systems input languages low level operational 
tools applied specification embedded systems process control analysis organizational settings 
proposals concentrate verification early requirements closest approach kaos 
ft offers goal agent oriented constructs formal semantics 
relies fundamentally different analysis techniques 
particular advocates theorem proving opposed model checking 
unable provide animation models concrete scenarios direct user iteratively refine specification 
concluding remarks proposed framework specification verification early requirements 
framework includes ft formal specification language early requirements tool tool supports verification ft specifications 
tool nusmv open architecture model checking 
experience possibility extending nusmv new functionality new input language past operators enhanced animator crucial effective application analysis ft specification 
tested scalability approach number experiments 
important contribution demonstrate formal analysis techniques useful early development phases 
novelty approach lies extending model checking techniques rely design inspired specification languages early requirements modeling analysis 
results suggest approach successful identifying subtle bugs difficult detect informal setting 
bugs detected consider examples small number instances 
directions research 
investigating techniques guarantee ft specification correct qualifications 
looking theorem proving techniques require finite state model infinite state model checking techniques guarantee model correct sufficiently high bounds correct bounds 
working refinement automation verification process 
example developing heuristics choosing set constraints considered proving property heuristics automatically alternating phases tool tries prove validity model phases tries find bugs 
investigating optimizations model generator advanced abstraction techniques exploit instance possible symmetries specification 
planning develop graphical front tool allow user write ft specifications annotations model see scenarios produced tool animations diagrams 

research partly supported project automated knowledge level software engineering 

formal tropos language 
available dit unitn ft doc 

cimatti 
bounded model checking past ltl 
proceedings international conference tools algorithms construction analysis systems number lecture notes computer science pages warsaw poland april 
springer 

campos clarke 
compositional reasoning model checking 
proceedings international symposium compositionality compos number lecture notes computer science pages bad germany september 
springer 

biere cimatti clarke zhu 
symbolic model checking bdds 
proceedings international conference tools algorithms construction analysis systems number lecture notes computer science pages amsterdam netherlands march 
springer 

bowen 
safety critical systems formal methods standards 
ieee bcs software engineering journal july 
ariel 
bryant 
symbolic boolean manipulation ordered binary decision diagrams 
acm computing survey 

choi heimdahl 
rsml model checking requirements 
proceedings ieee international symposium high assurance systems engineering pages tokyo japan october 
ieee computer society 

cimatti clarke giunchiglia giunchiglia pistore roveri sebastiani 
nusmv opensource tool symbolic model checking 
proceedings computer aided verification conference number lecture notes computer science copenhagen dk july 
springer 

clarke grumberg peled 
model checking 
mit press 

dardenne van lamsweerde fickas 
goal directed requirements acquisition 
science computer programming 

darimont massonet van lamsweerde 
grail kaos environment goal driven requirements engineering 
proceedings international conference software engineering volume pages kyoto japan april 


formal analysis early requirements specifications 
master thesis university toronto 

liu pistore roveri mylopoulos 
specifying analyzing early requirements tropos experimental results 
proceedings ieee international requirements engineering conference monterey bay california usa september 
acm press 

pistore mylopoulos traverso 
model checking early requirements specifications tropos 
proceeding ieee international symposium requirements engineering pages toronto ca august 
ieee computer society 

ghezzi mandrioli 
trio logic language executable specifications real time systems 
journal systems software may 

halpern vardi 
model checking vs theorem proving manifesto 
proceedings international conference principles knowledge representation reasoning pages 

heitmeyer jeffords labaw 
automated consistency checking requirements specification 
acm transactions software engineering methodology 

heitmeyer kirby labaw 
scr method formally specifying verifying validating requirements tool support 
proceedings international conference software engineering pages 
acm press 

jackson 
alloy lightweight object modeling notation 
acm transaction software engineering methodology 

jackson schechter 
alcoa alloy constraint analyzer 
proceedings international conference software engineering june 
acm press 

mcmillan 
symbolic model checking 
kluwer academic publisher 

san pietro 
object oriented logic specifications time critical systems 
transactions software engineering methodologies january 

pistore roveri 
agent oriented modeling interleaving formal informal specification 
proceedings international workshop agent oriented software engineering lecture notes computer science melbourne australia july 
springer 

spivey 
notation 
prentice hall nd edition 

yu 
modeling reasoning support early requirements engineering 
proceedings ieee international symposium requirement engineering pages 
ieee computer society 
