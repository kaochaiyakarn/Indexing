flexible approach visualize large software products jean marie favre laboratoire lsr imag universit grenoble rue de la domaine universitaire bp grenoble cedex france www adele imag fr kinds software structures large software product impossible build specific visualization tool specific need 
context flexibility important 
claim producing specific view large software product simple spreadsheet produce new view arbitrary set data 
building visualization tools scratch existing components reused possible 
particular possible connect interactively source components providing information software visualization components displaying graphical views 
support approach built see generic software exploration environment making possible visualize virtually kind software structures low cost 

widely accepted visualization help understanding software 
done today oriented program visualization 
surprising programs common example software artifacts programs defined software models examples entities include statement variable procedure examples relation include call inherits 
consequence wide range techniques proposed visualize specific program structures resulting static dynamic analysis programs 
techniques included case tools displaying instance control flow graphs call graphs inheritance hierarchies profiling information 
software visualization reduced program visualization 
particular large software products developed large teams wide range concepts including instance configuration parameters libraries licensing information makefiles software components product lines usually set software models manage large software products defined 
software models specific particular software evolve time 
large software usage visualization techniques restricted programmers plenty potential users including instance software architects team managers members quality teams configuration management teams business teams various stakeholders different needs requirements software visualization tools 
unfortunately currently manage software entities blind way 
information available cost building specific visualization tool specific situation 
tough buy tool visualize programs written conventional programming language tool market visualize large proprietary software structures flexible way 
difficult understand large software products small programs 
tough promising visualization techniques failed far find way industry part existing tools flexible adapted wide range specific needs 
believe producing specific view large software product simple spreadsheet produce new view arbitrary set data 

visualization data spreadsheets spreadsheets excel easy generate pie charts graphical representations arbitrary pieces data 
probably popular application visualization techniques today 
believe analyzing reasons huge success interesting similar approach applied domain software visualization 
tools possible produce new views existing piece data cost just specifying data result needed 

getting basic data respect data spreadsheets simple data model including elementary data types numbers strings dates type constructors table 
tools totally independent actual data represented long represented terms data model 
independent actual sources data data imported wide range formats directly accessed database new data sources added interactively information available processing results fusion data sources 

deriving new information main power spread sheet approach new derived information added interactively highlevel declarative language 
general purpose operators include aggregate functions sum average filtering operations specific requirements addressed integration specific libraries adding library statistical functions environment 
strongest features spreadsheet possible analyze existing data produce new information flexible way 

creating new views production graphical views data strong feature spreadsheets associated tools report generators 
piece data visualized different forms just selecting visualization technique pie chart histogram setting appropriate rendering parameters binding axis collection values color expression 
view specified declarative way language described extended operators suited visualization 
default values enable get result quickly 
view improved interactively refining view specification 
interesting aspect modern spreadsheet environments extensibility 
point possible integrate new sources data new libraries operators 
possible integrate new visualization components display instance geographical information map world 

visualization software reader may wonder spreadsheets related software visualization 
believe approach followed context large software products 
possible create new view software cost 
pointed kinds entities involved large software products specific approach fail feasible build scratch specific tool specific view 
generic approach needed 
support approach define see generic software exploration environment :10.1.1.22.2383
see environment similar spirit approach visualization data 
software just specific case data 
software visualization specific case information visualization 

background requirements see experience building reverse engineering visualization tools non traditional contexts including configuration management component models 
particular importance generic approach emphasized context partnership lsr laboratory dassault syst mes ds world leader cad cam markets 
study focused large software product developers classes files versions 
context built specific visualization tool called dedicated visualization software components developed ds :10.1.1.22.2383
success version visualization tool naturally brought problem evolution generalization interviews software engineers revealed existence perspectives software models 
decided follow generic approach built see able generate easily new views demand arbitrary software models 
see successfully visualize various structures 
totally independent data sources visualization techniques 
see follows spirit spreadsheets context software 

getting basic data step able manage arbitrary software structures define suitable data model 
software structures far complex managed spreadsheets 
see relies simple powerful data model set theory 
model includes conventional types constructors sets sequences functions relations :10.1.1.22.2383
limit type entities managed making possible deal statements variables configurations frameworks spreadsheets see independent source data 
extracting information software complex process function encapsulated source components 
source components responsible give access data extracted way software 
extraction software facts responsibility see providing easy ways integrate source components responsibilities 
common approach integration store software facts file exchange format rsf gxl 
file formats handled see appropriated source components 
idea see look information unnecessary file conversion 
instance spreadsheets see directly access data stored databases emphasis put fact see restricted access components storing explicitly facts software 
contrary strongest features ability handle source components computing demand information software 
allows instance directly access parsers cross tools profilers configuration management system new source components loaded interactively session 
illustration show dynamically integrated see extract information java programs :10.1.1.22.2383
lines necessary get result 

deriving new information pointed main power spread sheet approach ability derive new information existing 
applies see environment provides high level language derive new information software 
wide range operators provided deal concepts available data model 
includes instance operators union sets sorting set get sequence filtering collection entities predicate just spreadsheet see includes arithmetic operators aggregate functions sum average 
easy define compute new metrics software 
see includes sophisticated operators transitive closure operations paths operators necessary deal complex structures software 
illustration expression yields package name names packages package inherits directly indirectly class 
package getname assumes source component extracting information java programs just loaded 
various identifiers defined component 
operator means composition functions 
operator transitive closure 
interesting note spread sheets see allows merge different sources data transparent way instance data coming relational database data obtained plain files composed functions 
approach useful context collaboration ds software facts stored object store object oriented database system 
allowed explore software writing line code 
implemented batch system 
example various identifiers defined source component different source components collaborate scenes give result 
spreadsheets derived information just status basic information 
model software extended interactively 
instance expression extend model defining new relation inherits package entities 

creating new views step consists creating new graphical views 
just spread sheet approach done interactively 
particular possible choose visualization technique get results quickly 
view adjusted changing rendering parameters mapping color see concept visualization component 
components responsible display information way 
currently incorporates large set visualization components display sequences sets tables trees treemaps graphs hypertexts visualization components built scratch previous projects 
instance built implementation tree map implementation sequence lines inspired seesoft 
see gives access third party components 
includes swing component sun jtree grappa att emphasis put fact set components limited new visualization components loaded dynamically integrated environment 
information displayed visualization component specified terms expressions described 
instance graph visualization component relation displayed expressed 
expression indicates class super class displayed interfaces implements directly indirectly 
respect rendering options visualization components responsible describe parameters 
interesting point value parameters restricted constant background grey possible expression arbitrary complexity 
instance height maps height node number methods declared class means size collection 
alleviate effort required produce new view default values provided 
see language includes operators specific visualization 
instance operators provided convert arbitrary range values discrete set colors convert interval values color gradation combine operators default type conversions automatically inserted required 
instance possible write color function obviously returns package entity color 
arbitrary mapping chosen case created automatically just spread sheets 
user improve mapping necessary 

current version see proved useful practice 
environment applied large set software artifacts including components frameworks context ds bytecodes statements classes packages context java programs workspaces projects context kawa programming environment historical information context adele configuration management system see limited visualization large software product 
instance display fine grain information syntax trees byte code structures need generic approach important context large software high number entity types relation types 
software models vary possible build tool scratch 
see limited software tough operators designed specifically handle features typically associated software structures 
lot space improvement 
currently user interface rudimentary 
fact see objectoriented framework component approach 
simple tools provided demonstration purpose 
current components passive working integration active components sending events see allow instance animate views minimal cost 
instance planning integrate active source components visualize execution java programs 
similarly continue visualization software components providing static views dynamic views 
designing component model top component model get rid limitations 
goal able build sophisticated exploration tools just interactive assembly existing components 

yann remy implemented version treemap package 

cia ciao www research att com ciao david fly class browser www docs uu se demeyer ducasse lanza 
hybrid reverse engineering approach combining metrics program visualisation proc 
working conference reverse engineering wcre ieee 
eick steffen sumner seesoft tool visualizing line oriented software statistics ieee trans 
software engineering vol 
nov 
favre preprocessors point view proc 
int 
conf 
software maintenance proc 
working conference reverse engineering favre understanding large proc 
th international workshop program comprehension iwpc 
favre rigorous approach maintenance large portable software proc 
european conference software maintenance reengineering ieee mar 
favre estublier reverse engineering large component software product proc 
european conf 
software maintenance reengineering ieee march 
favre generic software exploration environment proc :10.1.1.22.2383
th international workshop program comprehension iwpc ieee may 
graphviz www graphviz org holt winter sch rr gxl standard exchange format tech 
report univ koblenz landau may 
holt pbs portable bookshelf tools www turing toronto edu www com www research ibm com kawa ide 
www tek tools com kawa lethbridge pak integrated personal management software exploration tool proc 
nd int 
symp 
constructing software engineering tools coset june 
mendelzon reverse engineering visualizing querying muller rigi www rigi csc uvic ca nguyen favre estublier exploring large software products proc 
paris dec french 
perry software interconnection models proc 
th int 
conf 
software engineering ieee march 
favre helping various stakeholders understand large software product proc 
european conference component software engineering september sun java sun com de pauw information exploration tool performance analysis java programs proc 
tools europe march 
