incentives compatible peer peer multicast wan johnny ngan dan wallach peter druschel department computer science rice university peer peer system designs assume cooperative environments clients correctly running software 
client modifies software may able unfairly benefit 
considers fairness issues context multicast streaming services 
mechanisms distinguish nodes selfish behavior reduce quality service experienced selfish nodes peers 
peers judgments strictly observing behavior upstream peers 
require multicast trees periodically rebuilt increasing likelihood node downstream peers upstream refusing serve 
multicast systems demonstrated streaming media applications scale reliably support large numbers nodes need costly server network infrastructure :10.1.1.135.6100
unfortunately systems assume peers correctly protocol 
node refuse transmit data downstream peers node simply refuse accept downstream peers system 
node follow similar policy system collapse 
way solve problem design incentives compatible policies 
wish build applications nodes maximize utility correctly prescribed protocol 
number systems built generally variety tit tat strategies 
systems intended provide fair sharing disk storage network bandwidth downloading large files 
multicast applications represent related problem existing tit tat mechanisms map cleanly multicast systems relatively static distribution trees constructed forever 
need way detect misbehaving peers refuse service 
describes simple mechanisms hand observations avoiding thorny trust issues 
nodes remember upstream peers fail provide service 
requiring multicast trees periodically rebuilt upstream relationships reverse giving nodes chance refuse service email druschel cs rice edu downstream 
section discusses threat model provides background 
section describes different approaches implementing fairness policies multicast systems 
experimental results section 
section discusses related section concludes 
model ideas general applicable tree multicast systems bullet concreteness discuss system terms splitstream 
splitstream supports applicationlevel multicast pastry routing substrate 
key idea splitstream split original content stream stripes multicast stripe separate multicast tree 
nodes subscribe different trees roots spread uniformly pastry ring 
node interior node exactly tree leaf node remaining trees 
forwarding load distributed participating peers 
node supported fan children total degree degree equal 
splitting strategy provides robustness packet loss 
audio video stream types potentially split media specific codecs allow media streams partially reconstructed part data 
stripes general purpose data benefit error correcting codes 
course leaves room variety behaviors 
node falsely claim outgoing bandwidth fully utilized refuse accept new child 
node likewise accept new child refuse send data 
node avoid joining tree interior node joining trees leaf 
nodes form conspiracy cooperation helps 
addresses behaviors address malicious behavior node goal deliberately prevent distribution streaming media damage pastry routing splitstream service 
castro discuss number techniques limit damage malicious node cause network ideas applied 
designs section describe na approach expose problems 
discuss space possible mechanisms detect combined form robust incentive compatible policy 
na approach selfish node claim receive stream parent unable forward data stream 
assuming multicast trees constructed fair manner prescribed protocol na approach solve problem require node fails receive desired data parent send random data size equal expected stream children 
node required transmit transmit correct data 
approach obvious problems 
wastes bandwidth potentially causing legitimate traffic dropped underlying network suffering congestion 
furthermore approach prevents nodes claiming children refusing accept 
legitimate multicast tree construction nodes may depending protocol chance leaves requirement retransmit content 
differentiating luck require effort 
fairness mechanisms need mechanisms distinguish selfish nodes nodes protocol correctly 
wish focus mechanisms individual nodes follow strictly information observe peers information infer nodes root tree 
debt maintenance node forwards stream data packet node nodes track owes debt packet 
debt exceeds threshold refuse send data periodic tree reconstruction multicast trees constructed randomly nodes may stuck unfair unfavorable positions 
lucky node happen leaf unlucky node happen downstream selfish node refusing forward data children 
periodically reconstructing multicast tree node benefit suffer situations fixed time period 
new multicast trees constructed concurrently existing trees 
require new multicast tree sufficiently different old leaf node ancestral nodes old tree replaced 
remain trade bandwidth overhead tree reconstruction desire smaller time steps 
smaller time steps allow nodes respond rapidly detect node selfish 
parental availability node joins multicast tree refused service prospective parent way determine prospective parent genuinely serving maximum number children system 
claim serving peers 
service refused just bad luck 
numerous tree reconstructions prospective parent demonstrated history refusing service children child legitimately refuse serve parental roles reversed 
ability child measure parental availability depend specific details multicast trees constructed system 
node joins splitstream tree example routes message root tree 
node receives message joining node parent 
node refuses connection saying children joining node search parent 
search children failed parent siblings grandparent recursively 
splitstream nodes operating correctly searches occur service failed parent immediate children 
parent consistently refuses accept node child highly 
reciprocal requests behaved nodes expected equal chance parent child multicast tree 
regularly refuse accept children 
asks prospective node parent needs way judge history behaving 
address allow break traditional join protocol occasionally attempt parent requesting join directly multicast tree supposed interior node 
done number requests direction exceeds constant factor requests opposite direction 
allow determine misbehaving stronger basis ignoring 
ancestor rating approach extension debt maintenance apply debts credits node immediate parent ancestors responsible forwarding data multicast root 
node receives packet increments confidence value node path root 
expected packet received noticed packets arrive timely periodic fashion video audio streams node decrements confidence value node path root equally lack specific information 
trees reconstructed blame assigned falsely due lost packets average nodes observed behave correctly 
nodes hand consistently blamed misbehavior 
service eventually refused 
authenticity data path mechanisms rely knowledge ancestors 
selfish node course incentive provide information correctly 
false information allow nodes falsely considered likewise false information allow nodes escape detection 
outline low cost method authenticate stream data verify integrity path 
borrow ideas hash chains path authentication ariadne 
source creates hash chain randomly generating value xn sufficiently large iteratively computing cryptographically secure way hash function md sha 
important property way hash functions cheap compute hash computationally infeasible find inverse 
trivial verify hashes infeasible find assume source distribute initial shared secret receivers 
source sends th packet computes base message digest data 
node sends packet hashes message digest receives parent source receiving node nodeid 
message digest received source child child 
packet include hash chain value previous packet th packet contains receipt node confirm 
node verify integrity previous packet reconstructing message digest path 
case lost packets node needs hash value multiple times matches seen likewise node joining ongoing streaming session needs hash value multiple times matches source runs values hash chain generate new chain fly old chain authenticate new 
multicast tree separate hash chain trees reconstruction 
scheme nodes fake path root children knowing revealed packet obsolete 
nodes lie children 
issue require nodes sign lists children creating structure analogous merkle hash tree 
sybil attacks rating mechanisms described potentially defeated nodes poor reputations quit system rejoin new identities example sybil attack 
address attacks requiring certified nodeids limit effectiveness attacks putting new nodes probation experience lower quality service 
splitstream trees concurrently reconstruct tree time step 
close trees new members start running new node able join tree reconstructed receive streams time steps elapsed 
get lower quality service joins quality progressively improving time 
may may inconvenience legitimate nodes 
example nodes subscribing lecture starts known time need join time steps advance 
time step seconds period minutes long 
selfish node attempt join multiple identities hope getting portion stream pseudonym 
regardless pseudonyms selfish node immediately required participate protocol suffer 
furthermore node multiple pseudonyms pay fixed overhead underlying protocol maintaining pseudonym providing creating pseudonyms 
result nodes incentive join single identity behave correctly allowing develop positive reputation 
experiments section simulations study effectiveness variety different mechanisms 
study mechanisms isolation describe combination effective discriminating normal nodes 
experiments run instrumented version splitstream nodes randomly chosen nodeids 
splitstream considers node proximity building multicast trees node locations randomly distributed plane proximity nodes determined euclidean distance 
node attempts subscribe trees accept children 
root node transmits data unit multicast tree trees reconstructed time step 
actual implementation trying spread load tree reconstruction cut time step smaller steps reconstruct trees step 
net cost 

messages reconstruct tree unsubscribe tree 
nodes average tree reconstruction cost 
tree reconstruction cost tree reconstruction useful cost prohibitively expensive 
study cost reconstructing discarding trees 
shows average number messages sent node order reconstruct tree 
subscribing tree simply sending subscribe message specific nodeid cost proportional log number nodes 
message small size contains nodeids kilobytes transmitted node minimal relative typical data rates streaming video 
unsubscribe tree node needs notify parent tree cost constant regardless size system 
unsubscription cost saved nodes tree discard tree time 
possible data source include information data stream 
estimate overhead practice consider video streaming nodes 
assume video streaming kbps typical upstream bandwidth dsl user 
shows average node needs send messages reconstruct tree 
assume message size bytes multicast trees reconstructed minutes 
total overhead stream 
debt consider randomly chosen nodes splitstream system 
trees constructed randomly odds node parent child random coin flip 
trees reconstructed expected average debt accumulated tend vary square root number rounds 
define debt level debt level accumulated debts credits total transfers shows cumulative distributions debt levels selfish nodes rounds tree reconstruc percentage relationships fraction relationships normal nodes selfish nodes debt level cumulative distribution debt level 
parental availability cumulative distribution parental availability nodes normal 
tions 
despite tree reconstructions see debt levels discriminate selfish normal nodes 
believe occurs mainly result split stream preference routing local nodes meaning nodes pairings round round nodes learn distinguish selfish normal nodes 
parental availability order understand parental availability child rating parent accept child simulated network node accept children 
shows distribution tree reconstruction time steps 
half availability ratings system half 
node parent availability rating zero 
choose cut parents low availability take care avoid false positives particularly legitimate parents low ratings 
example cut normally reject legitimate parents 
confidence debts peers parental availability rates insufficient detect nodes consider rating mechanism see section percentage relationships normal nodes selfish nodes negative confidence cumulative distribution negative confidence 
blames upstream peers transmission failure 
shows distribution negative confidence selfish nodes full reconstructions 
debt confidence value effectively distinguish selfish nodes 
example setting threshold selfish node positively identified nodes system false positives 
refusing service experiment evaluate effectiveness combination mechanisms 
simulate system consisting nodes correctly protocol selfish nodes 
selfish nodes cheating immediately start cheating time 
cheaters refuse forward traffic children refuse parent 
performing simulations tried variety different parameters eventually settling ones described 
normal nodes forward data children child confidence value parental availability confidence value 
accepting children parent preempt previously accepted children node higher parental availability 
reciprocal requests prospective child attempted contact parent factor times roles reversed 
furthermore decay positive confidence values time multiplying time step 
result nodes forget parents remember bad parents 
parent forced continue providing service maintain children confidence likewise forced provide service wish reestablish reputation 
shows hybrid policy considering confidence values parental availability effectively punishes nodes refuse forward traffic children 
nodes fraction multicast data received type count description normal nodes refuse accept children refuse accept children refuse forward data refuse forward data time full reconstructions fraction multicast streams successfully received nodes refuse send data 
refuse accept children likewise manage receive multicast data 
observed initial cooperation followed behavior limited effect short term effect long term 
performed experiment types refusing send data children refusing accept children 
experienced similar levels reception normal nodes reception levels dropped 
indicates increasing numbers cause worsening performance normal nodes benefit increased presence 
contrast ran similar simulation original splitstream random distribution nodes normal nodes reception levels 
shows techniques represent improvement original system bandwidth wasted 
possible way address data encoding requires node receive certain fraction multicast data decode 
scheme reduce utility experienced gain benefit staying leave bandwidth consuming revert back nodes 
related distributed mechanisms ngan consider storage system propose auditing mechanism cheaters discovered evicted system 
modeled utility function nodes system showing nodes similar prefer ences incentive cluster reveal preferences truthfully 
feigenbaum consider multicast transmissions micro payments proved strategy proof property simple cost sharing mechanism 
systems examples problems distributed algorithmic mechanism design 
mazi res propose technique sender multicast data confirm message delivery receivers 
help sender learn identity nodes refusing forward data prevent nodes refusing accept children 
reputation systems systems depend nodes observing behavior peers gossiping observations 
dingledine surveys schemes tracking nodes reputations 
reputation systems obtaining new identity cheap negative reputations shed easily 
friedman resnick study case cheap pseudonyms argue suspicion strangers costly 
distributed reputation systems proposed number contexts including mix nets gnutella 
system uses notion period new nodes see degraded service participate fully protocol 
similar concept appears 
demonstrated regularly rebuilding multicast trees having nodes track hand observed behavior peers suitably denied service 
network computational overhead mechanism low scale large number nodes 
remains study improve robustness system tolerate larger fraction operating concert 
addition effectiveness mechanism may depend choice multicast applications routing substrates network topologies 
regardless shown effectiveness combining node direct observations mechanisms guarantee parent child relationships chance reversed effective providing behaviors 
castro druschel ganesh rowstron wallach 
security structured peer peer overlay networks 
proc 
osdi boston ma dec 
castro druschel 
kermarrec nandi rowstron singh 
splitstream high bandwidth multicast cooperative environments 
proc 
sosp bolton landing ny oct 
cohen 
incentives build robustness bittorrent 
workshop economics peer peer systems berkeley ca june 
damiani di vimercati samarati 
choosing reputable network 
proc 
th int www conf honolulu hawaii may 
cox noble 
honor thieves peer peer storage 
proc 
sosp bolton landing ny oct 
dingledine freedman molnar 
reputation system increase mix net reliability 
proc 
th int workshop information hiding pittsburgh pa apr 
dingledine freedman molnar 
accountability 
oram editor peer peer harnessing power disruptive technologies chapter 
reilly associates 
douceur 
sybil attack 
proc 
iptps cambridge ma mar 
feigenbaum papadimitriou shenker 
sharing cost multicast transmissions 
journal computer system sciences aug 
feigenbaum shenker 
distributed algorithmic mechanism design results directions 
proc 
th int workshop discrete algorithms methods mobile computing communications pages atlanta ga sept 
friedman resnick 
social cost cheap pseudonym 
journal economics management strategy 

ngan wallach 
economic behavior peer peer storage networks 
workshop economics peer peer systems berkeley ca june 

distributing heads minus tails 
college mathematics journal 

hu perrig johnson 
ariadne secure demand routing protocol ad hoc networks 
proc 
mobicom atlanta ga sept 
rodriguez albrecht vahdat 
bullet high bandwidth data dissemination overlay mesh 
proc 
sosp bolton landing ny oct 
merkle 
digital signature conventional encryption function 
advances cryptology crypto lncs vol 


ngan wallach druschel 
enforcing fair sharing peer peer resources 
proc 
iptps berkeley ca feb 
mazi res 
secure acknowledgment multicast messages open peer peer networks 
proc 
iptps san diego ca feb 
perrig canetti song tygar 
efficient secure source authentication multicast 
proc 
ndss san diego ca feb 
rowstron druschel 
pastry scalable distributed object address routing large scale peer peer systems 
proc 
ifip acm int conf 
distributed systems platforms heidelberg germany nov 
waldman mazi res 
publishing system document 
proc 
th acm conf 
computer communications security philadelphia pa nov 
