aspectual component development real time systems te dag nystr rgen hansson christer link ping university department computer science link ping sweden ida liu se university department computer engineering ster sweden dag nystrom christer se 
increasing complexity real time systems demands enabling configurability strong motivations applying new software engineering principles aspect oriented component development 
introduce novel concept aspectual componentbased real time system development 
concept design method assumes decomposition real time systems components aspects provides real time component model supports notion time temporal constraints space resource management constraints composability 
anticipate successful applications proposed concept positive impact real time system development enabling efficient configuration real time systems improved reusability flexibility real time software modularization crosscutting concerns 
provide arguments assumption presenting application proposed concept design development configurable embedded real time database called comet 
furthermore comet system example introduce novel way handling concurrency real time database system concurrency modeled aspect crosscutting system 
real time embedded systems widely today modern society 
successful deployment embedded real time systems depends low development costs high degree market 
component software development cbsd paradigm realtime embedded systems development offers significant benefits configuration embedded real time software specific application components component library reducing system complexity components chosen provide exactly functionality needed system ii rapid development deployment real time software software components properly designed verified reused different embedded real time applications iii evolutionary design components replaced added system supported network real time graduate education swe den center industrial information technology contract 
appropriate complex embedded real time systems require continuous hardware software upgrades 
aspects real time embedded systems encapsulated component defined interfaces crosscut structure system synchronization memory optimization power consumption temporal attributes 
aspect oriented software development aosd emerged new principle software development provides efficient way crosscutting concerns software systems 
aosd allows encapsulating system crosscutting concerns modules called aspects 
applying aosd real time embedded system development reduce complexity system design development provide means structured efficient way handling crosscutting concerns real time software system 
integration disciplines cbsd aosd real time systems development enable efficient system configuration components component library system requirements ii easy tailoring components system specific application changing behavior code component applying aspects iii enhanced flexibility real time embedded software notion system configurability components 
able successfully apply software engineering techniques aosd cbsd real time systems questions need answered 
appropriate design method allow integration software engineering techniques real time systems 
components aspects appropriate real time embedded environment 
component model capture adopt principles cbsd aosd real time embedded environment 
address research questions proposing novel concept aspectual component real time system development accord 
concept founded design method decomposes real time systems components aspects provides real time component model rtcom supports notion time temporal constraints space resource management constraints composability 
rtcom component model addressing real time software reusability composability combining aspects components 
experience far applying proposed concept positive impact real time system development enabling efficient configuration real time systems improved reusability flexibility real time software structured way handling crosscutting concerns 
show accord successfully applied practice describing way applied design development component embedded real time database system comet 
comet example novel approach modeling implementing real time policies concurrency control scheduling aspects crosscut structure real time system 
modularization real time policies aspects allows customization real time systems changing code components 
organized follows 
section outline accord design method 
rtcom section 
section show application accord development comet 
comet example describe new way modeling real time concurrency control policy aspect real time database system 
related discussed section 
finishes section summary containing main directions research 
accord design method growing need enabling development configurable real time embedded systems tailored specific application managing complexity requirements real time system design calls new concepts new software engineering paradigms real time system development 
propose accord 
notion aspects components ac cord enables efficient application divide conquer approach complex system development 
effectively apply accord provide design method constituents 
decomposition process sequential phases decomposition realtime system set components ii decomposition real time system set aspects 
components software artifacts implement number defined functions defined interfaces 
components interfaces communication environment components 
aspects properties system affecting performance semantics crosscutting system functionality 
real time component model rtcom describes real time component supporting aspects look 
rtcom specifically developed enable efficient decomposition process ii support notion time temporal constraints iii enable efficient analysis components composed system 
design real time system accord method performed phases 
phase real time system decomposed set components 
decomposition guided need functionally exchangeable units loosely coupled strong cohesion 
second phase real time system decomposed set aspects 
aspects crosscut components system 
phase typically deals non functional requirements crosscutting concerns real time system resource management temporal attributes 
final phase components aspects implemented rtcom 
non functional requirements important issues real time system development focus aspectual decomposition discuss rtcom 
non functional requirements referred extra functional requirements 
aspects real time systems classify aspects real time system follows application aspects ii run time aspects iii composition aspects 
application aspects change internal behavior components crosscut code components system 
application context refers application real time embedded system configured memory optimization aspect synchronization aspect security aspect real time property aspect real time policy aspect 
optimizing memory usage key issues embedded systems crosscuts real time system structure view memory optimization application aspect real time system 
security application aspect influences system behavior structure system able distinguish users different security clearance 
synchronization entangled entire system encapsulated represented synchronization aspect 
memory optimization synchronization security commonly mentioned aspects aosd 
additionally real time properties policies viewed application aspects influence structure system 
depending system requirements real time properties policies refined show example comet system see section 
application aspects enable tailoring components specific application change code components 
run time aspects critical refer aspects monolithic real time system need considered integrating system run time environment 
run time aspects give information needed run time system ensure integrating real time system compromise timeliness available memory consumption 
component declared resource demands resource demand aspect information temporal behavior contained temporal constraints aspect worst case execution time wcet 
temporal aspect enables component mapped task group tasks specific temporal requirements 
additionally component contain information platform compatible real time operating system supported hardware related information 
information contained portability aspect 
imperative information contained run time aspect provided ensure predictability composed system ease integration run time environment ensure portability different hardware software platforms 
composition aspects describe components component combined compatibility aspect version component version aspect possibilities extending component additional aspects flexibility aspect 
having separation aspects different categories eases reasoning different embedded real time related requirements composition system integration run time environment 
example run time system define run time aspects real time system fulfill proper components application aspects chosen library composing monolithic system 
approach offers significant flexibility additional aspect types added components monolithic real time system improving integration run time environment 
aspects identified recommend table components identified application aspects crosscutting effects different components recorded example table section 
show section step especially useful phase design component modeled designed take account identified application aspects 
real time component model rtcom section rtcom allows easy predictable weaving aspects integrating aspects components reflecting decomposition system components aspects 
rtcom viewed component colored aspects inside application aspects outside run time composition aspects 
rtcom language independent component model consisting parts see functional part ii run time system dependent part iii composition part 
functional part run time part policy mechanisms 
portability operation operation mechanism wcet wcet memory memory composition part aspect component functional compatibility temporal compatibility resource platform compatibility fig 

real time component model rtcom functional part represents actual code implements component functionality 
rtcom assumes functional part component 
component provides set mechanisms basic fixed parts component infrastructure 
mechanisms fine granule methods function calls 
component provides set operations components system 
implementation operations determines behavior component component policy 
operations represented coarse granule methods function calls 
operations flexible parts component implementation change applying different application aspects 
operations implemented underlying mechanisms fixed parts component 
order enable easy implementation application aspects component design functional part component performed manner 
mechanisms basic blocks component implemented 
particular attention identified application aspects table reflecting crosscutting effects application aspects different components determine application aspects component mechanisms 
operations component implemented component mechanisms 
note implemented operations provide initial component policy basic somewhat generic component functionality 
initial policy call policy framework component 
policy framework modified applying different application aspects provides way tailoring component changing behavior application aspects change component policy 
crosscutting application aspects considered implementing operations mechanisms framework generic highly flexible 
system evolves new application aspects considered developing policy framework need implemented component code new mechanisms defined application aspect 
development process functional part component results component colored application aspects 
graphical view rt com application aspects represented vertical layers functional part component influence component behavior change component policy 
run time system dependent part rtcom accounts temporal behavior functional part component code aspects aspects weaved component 
run time aspects part run time dependent part rtcom represented horizontal parallel layers functional part component describe component behavior see 
runtime part component run time aspects expressed attributes operations mechanisms application aspects elements component functional part influence temporal behavior component 
composition part refers functional part run time part component represented third dimension component model see 
different application aspects weaved component composition aspects represented composition part rtcom contain information component compatibility respect different application aspects respect different components 
component implemented rtcom functional part component implemented application aspects run time system dependent part run time aspects implemented followed composition part rules composing different components application aspects 
sections give close application aspects runtime aspects rtcom followed interfaces supported rtcom 
application aspects rtcom existing aspect languages implementation application aspects integration components 
weaving done aspect weaver corresponding aspect language 
existing aspect languages aspectj conceptually similar aspectj developed java 
application aspect declaration consists advices pointcuts 
pointcut consists join points described pointcut expression 
join point aspect language refers method type struct union point component code accessed 
rtcom pointcut model restricted mechanisms operations component type struct 
restriction necessary obtaining predictable aspect weaving enabling temporal analysis resulting code 
advice declaration specify code run join points specified pointcut expression reached 
different kinds advices declared advice executed join point ii advice executed immediately join point iii advice executed place join point 
rtcom advice model restricted reasons enabling temporal analysis code 
advices implemented mechanisms components advice change behavior component policy framework changing operations component 
run time aspects rtcom illustrate run time aspects represented handled rtcom important run time aspects example wcet 
way enabling predictable aspect weaving ensure efficient way determining wcet operations real time system modified weaving aspects 
wcet analysis aspects components resulting aspect oriented software aspects weaved components symbolic wcet analysis 
applying symbolic wcet analysis accord implies mechanisms obtained symbolic wcet analysis ii wcet operation determined mechanisms implementing operation internal wcet function method implements operation manages mechanisms iii wcet advice changes temporal analysis refers static wcet analysis code dynamic schedulability analysis tasks 
implementation operation mechanisms implementing advice internal wcet advice code manages mechanisms 
shows wcet specification mechanisms com mechanisms mechanism name wcet value wcet 
fig 

specification wcet aspect component mechanisms operations operation name uses name mechanism number times value internal operation wcet called mechanisms excluded 
fig 

specification wcet aspect component policy framework ponent mechanism wcet declared assumed known 
similarly shows wcet specification component policy framework 
operation defining policy component declares mechanisms uses times uses specific mechanism 
declaration computing operations component aspects 
shows wcet specification application aspect 
advice type modifies operation operation modifies declared mechanisms implementation advice number times advice uses mechanisms 
resulting wcet component operation component colored application aspects computed algorithm 
algorithm utilizes knowledge mechanisms involved aspects change specific operation 
detailed explanation algorithm discussion computing components modified aspects 
rtcom example aspect advice name type changes name uses number times value internal advice wcet called mechanisms excluded 
fig 

specification wcet aspect application aspect give brief simple example component application aspect 
purpose simple example provide guidance process rtcom implementation provide clear understanding rtcom internals introduced far complex detailed example rtcom comet discussed section 
policy mechanisms fig 

functional part linked list component example consider component implementing ordinary linked list 
mechanisms needed ones manipulation nodes list see 
operations implementing policy framework define behavior component implemented underlying mechanisms 
example uses mechanisms create link new node list fifo order 
policy framework fifo 
aspect pointcut list operands op call void list operands args op advice op void list operands op node position determined node node determine position op node priority priority node list fig 

application aspect assume want change policy component fifo ordering nodes 
achieved weaving appropriate application aspect 
shows application aspect consists pointcut identifying join point component code lines 
join point reached advice executed 
application aspect intercepts operation method function call code executed advice component mechanisms determines position node priority lines 
consequence weaving application aspect code component temporal behavior resulting component colored aspects changes 
run time aspects need defined policy framework component application aspects application aspects determine run time aspects component colored different application aspects 
presents specification wcet aspect policy framework liked list component 
operation framework named internal wcet number times uses particular mechanism declared see 
wcet specification application aspect changes policy framework shown 
temporal information application aspect includes internal wcet advice modified operation information mechanisms advice number times upper bound advice particular mechanism 
information provided run time part component enables temporal analysis combinations component policy frameworks application aspects 
operations operation name uses ms operation name uses ms mechanisms mechanism name wcet ms mechanism name wcet ms mechanism name wcet ms 
fig 

wcet specification policy framework aspect advice name type changes name uses ms 
fig 

wcet specification application aspect rtcom interfaces rtcom supports different types interfaces see functional interface ii configuration interface iii composition interface 
composition interface provided functional interface rtcom configuration interface fig 

interfaces supported rtcom required functional interface functional interfaces components classified categories provided functional interfaces required functional interfaces 
provided interfaces reflect set operations component provides components system 
required interfaces reflect set operations component requires components 
having separation provided required interfaces eases component exchange addition new components system 
provided functional interface rtcom system real aspects component configuration interface system interface composition interface required functional interface system fig 

interfaces role composition process configuration interface intended integration real time system run time environment 
interface provides information temporal behavior component reflects run time aspect component 
combining multiple components results system configuration interface enables designer inspect behavior system run time environment see 
composition interfaces correspond join points embedded functional component part 
weaver identifies composition interfaces uses aspect weaving 
composition interfaces ignored component system compiletime needed activated certain application aspects weaved system 
composition interface allows integration component aspectual part system 
aspect weaving performed component level weaving application aspects component functionality system level weaving application aspects monolithic system 
explicit separation software component interfaces composition interfaces functional interfaces introduced 
comet component embedded real time database section shows apply introduced concept aspectual component development design development concrete real time system presenting application design method development configurable real time embedded database system called comet 
background goal comet project enable development configurable real time database embedded systems enable development different database configurations different embedded real time applications 
types requirements dealing best illustrated example comet targeting application areas control systems automotive industry 
systems typically hard real time safety critical systems consisting distributed nodes implementing specific functionality 
nodes depend collaborate provide required behavior vehicle control system node viewed stand real time system nodes implement transmission engine instrumental functions 
size nodes vary significantly small nodes large nodes 
depending functionality node available memory different database configurations preferred 
safety critical nodes tasks non preemptive scheduled line avoiding concurrency allowing task active time 
turn influences functionality database node respect concurrency control 
critical nodes having preemptable tasks require concurrency control mechanisms 
furthermore nodes require critical data logged warning errors require backups startup shutdown nodes ram mainmemory require non volatile backup facilities database 
narrow sense application area goal enable development different comet configurations suit needs node respect memory consumption concurrency control recovery different scheduling techniques transaction storage models 
sections show reached goal applying ac cord design development comet system 
comet components transaction manager recovery logging userinterface indexing transaction scheduler locking fig 

comet decomposition set components accord design method section performed decomposition comet set components defined functions interfaces 
comet basic components see user interface component transaction scheduler component locking component indexing component recovery logging component memory handling component transaction manager component 
user interface component uic enables users access data database different applications require different ways accessing data system 
transaction scheduler component tsc provides mechanisms performing scheduling transactions coming system scheduling policy chosen 
comet supports variety scheduling policies edf rm 
hard real time applications real time embedded systems controlling vehicle typically require sophisticated transaction scheduling concurrency control system allows transaction access database time 
tsc flexible exchangeable part database architecture 
locking component lc deals locking data provides mechanisms lock manipulation maintains lock records database 
indexing component ic deals indexing data 
indexing strategies vary depending real time application database integrated trees multi versioning suitable applications large number read transactions 
additionally possible customize indexing strategy depending number transactions active system 
example vehicle control applications transaction active time non thread safe indexing complex applications appropriate aspects weaved component allow thread safe processing indexing strategy achieved weaving synchronization aspect 
recovery logging component rlc charge recovery logging data database 
comet stores data main memory need different recovery logging techniques depending type storage non volatile eeprom flash 
memory handling component mhc manages access data physical storage 
transaction manager component tmc coordinates activities components system respect transaction execution 
example tmc manages execution transaction requesting lock unlock operations provided lc followed requests operations provided ic inserting updating data items 
comet aspects run time temporal constraints portability composition compatibility versioning flexibility application transaction real time scheduling memory optimization synchronization security fig 

classification aspects embedded real time database system accord decomposing system set components defined interfaces decompose system set aspects 
decomposition comet aspects fully corresponds accord decomposition section types aspects run time composition application aspects 
comet real time database system refinement application aspects reflect real time database issues 
comet decomposition application aspects real time policy aspect refined include real time scheduling concurrency control policy aspects real time property aspect replaced transaction model aspect database specific 
crosscutting effects application aspects comet components shown table 
seen table identified application aspects crosscut component 
application aspects vary depending particular application real time system particular attention identify application aspects real time system 
components application aspects transaction real time scheduling concurrency control memory optimization synchronization security uic tsc lc ic rlc mhc tmc table 
crosscutting effects different application aspects comet components comet rtcom components aspects comet implemented rtcom discussed section 
functional part components implemented application aspects 
illustrate process benefits drawbacks example component lc application aspect concurrency control 
lc performs functionality assigns locks requesting transactions maintains lock table records locks obtained transactions system 
seen table lc crosscut application aspects 
application aspect influences policy changes behavior lc concurrency control cc aspect defines way lock conflicts handled system 
enable lc reuse code largest possible extent lc implemented policy framework lock conflicts ignored locks granted transactions 
policy framework modified weaving cc aspects define ways handling lock conflicts 
different cc policies real time database systems exist mechanisms lc compatible existing cc algorithms 
lc contains mechanisms see left part record maintaining table locks held transactions system 
policy part consists operations performed lock records transactions holding requesting locks 
operations lc implemented functional part policy mechanisms run operations operation name uses ms mechanisms mechanism name wcet ms 
lc changes uses aspect lc operands op apply specific cc policy resolve lock conflict hp pl op priority priority abort block pointcut lc operands op call void lc operands args op pointcut lc operands op call void lc operands args op advice op void lc operands op write lock held conflict needs resolved applying cc policy op advice op void lc operands op write read lock held conflict needs resolved applying cc policy op fig 

locking component concurrency control aspect underlying lc mechanisms 
mechanisms provided lc cc aspects implementing class pessimistic locking protocols hp pl 
large class optimistic protocols implemented locking mechanisms mechanisms provided lc cc aspects implementing optimistic protocols occ ti occ apr 
right part represents specification real time cc aspect lines applied class pessimistic locking cc protocols 
chose give specific details hp pl protocol commonly main memory database systems known pessimistic cc protocol 
cc aspect pointcuts advices execute pointcut reached 
defined rtcom pointcut model pointcuts refer operations lines 
pointcut intercepts call function read lock transaction records lock table 
similarly second pointcut intercepts call function gives write lock transaction records lock table 
granting read write lock advices lines check lock conflict 
conflict exists advices deal calling local aspect function lines resolution conflict done implementing specific cc policy 
advices check conflicts implemented lc mechanisms traverse lock table list transactions holding locks 
far shown cc aspect affects policy lc cc aspect crosscuts components see table 
example cc aspect implementing pessimistic hp pl protocol see aspect uses information transaction priority lines maintained tsc crosscutting tsc 
optimistic protocols occ ti require additional pointcuts defined tmc protocol compared pessimistic protocols assumes execution transactions phases read validate write 
additionally depending cc policy implemented number pointcuts advices varies 
example cc policies optimistic policies require additional data structures initialized 
cases additional pointcut named added aspect intercept call initialize lc 
advice initialize necessary data structures cc aspect data structures lc initialized 
benefits applying accord development comet platform context example 
enabling clean separation concurrency control aspect crosscuts lc allows high code reusability component mechanisms cc aspects 
weaving cc aspect lc changes policy component changing component code provides efficient way tailoring component system fit specific requirement case specific cc policy leaving configuration comet unchanged 
having lc functionality encapsulated component cc encapsulated application aspect enables reconfiguring comet support transaction execution excluding lc completely non locking cc protocol needed 
having run time part components aspects enables analysis temporal behavior resulting code see run time part lc left 
drawback applying accord real time system development explosion possible combinations components aspects 
common software systems aspect components extensive research done identifying defining composition rules components aspects 
related section address research area component real time database systems real time database research projects aspects separate concerns 
focus existing component real time systems enforcement realtime behavior 
systems component usually mapped task passive component binary component port object component 
analysis real time components solutions addresses problem temporal scopes component level task attributes wcet release time deadline 
accord rtcom model supports mapping component task takes broader view composition process allowing real time systems composed tasks components necessarily mapped task 
accord contrast approaches building real time component systems enables support multidimensional separation concerns allows integration aspects component code 
vest uses aspect oriented paradigm provide component model enables weaving application aspects component code focuses composition aspects 
area database systems aspect oriented databases aod initiative aims bringing notion separation concerns databases 
focus initiative providing non real time database limited configurability aspects components 
best knowledge kids research project focusing construction configurable database composed components database subsystems object management transaction management 
commercial component databases introduce limited customization database servers allowing components managing non standard data types data modules plugged fully functional database system 
somewhat different approach microsoft universal data access architecture components data providers wrap data sources enabling translation local data formats different data stores common format 
real time point view component database approaches discussed enforce real time behavior aspects separate concerns system 
contrast traditional methods design real time systems focus primarily ways decomposing system tasks handling temporal requirements accord design method focuses ways decomposing realtime system components aspects achieve better reusability flexibility real time software 
summary years key research challenges software engineering research community enabling configuration systems reuse software composing systems components component library 
research focuses applying aspect oriented component software development real time system development introducing novel concept aspectual component realtime system development accord 
accord elements applied development real time database system called comet 
accord introduces real time system development design method enables improved reuse configurability real time database systems combining basic ideas component aspect oriented communities real time concerns bridging gap real time systems embedded systems database systems software engineering ii real time component model called rtcom enables efficient development configurable real time systems iii new approach modeling real time policies aspects improving flexibility real time systems 
comet example shown applying accord impact real time system development providing efficient configuration real time systems improved reusability flexibility real time software modularization crosscutting concerns 
research questions remain resolved including developing rules checking compatibility aspects components analyzing component aspect behavior different hardware software platforms real time environments identify trade offs applying aspects components real time setting studying performance real time system different configurations components aspects providing automated tool support proposed development process 
currently focusing enabling predictable aspect weaving component composition providing tools temporal analysis aspects components resulting system 

stankovic vest toolset constructing analyzing component operating systems embedded real time systems 
technical report cs department computer science university virginia 
kiczales lamping mendhekar maeda lopes loingtier irwin aspect oriented programming 
proceedings ecoop 
volume lecture notes computer science springer verlag 
larsson eds building reliable component real time systems 
artech house publishers isbn 

xerox aspectj programming guide 
kiczales feeley improve modularity path specific customization operating system code 
proceedings joint european software engineering conference esec th acm sigsoft international symposium foundations software engineering fse 

gal schr der aspect oriented extension 
proceedings tools pacific australian computer society 
burns approach symbolic worst case execution time analysis 
proceedings th ifac workshop real time programming palma spain 
te nystr hansson integrating symbolic worst case execution time analysis aspect oriented system development 
oopsla workshop tools aspect oriented software development 
mann invasive software composition 
springer verlag universit karlsruhe 
liu layland scheduling algorithms hard real time traffic environment 
journal association computing machinery 
nystr te hansson data management issues vehicle control systems case study 
proceedings th euromicro international conference real time systems vienna austria 
lu ng tian tree tree main memory database index structure revisited 
th australasian database conference 
rastogi seshadri bohannon silberschatz sudarshan improving predictability transaction execution times real time databases 
real time systems kluwer academic publishers 

abbott garcia molina scheduling real time transactions performance evaluation 
acm transactions database systems 
sha rajkumar son chang real time locking protocol 
ieee transactions computers 
lee son dynamic adjustment serialization order real time database systems 
proceedings th ieee real time systems symposium 

datta son bird hand worth birds bush 
limitations priority conflict resolution firm real time database systems 
ieee transactions computers 
bosch design software architectures 
addison wesley 
bass long robert technical concepts component software engineering 
technical report cmu sei tr carnegie mellon university 
lindgren system development real time components 
proceedings ecoop workshop pervasive component systems france 
stewart designing software components real time applications 
proceedings embedded system conference san jose ca class 

rashid object oriented aspect oriented databases 
proceedings dexa 
volume lecture notes computer science springer verlag 
scherrer dittrich kids construction database management systems reuse 
technical report ifi department computer science university zurich 
oracle data oracle extensibility architecture 
oracle technical white 
informix developing modules informix universal server 
informix technology available www informix com 

papers 
software development real time systems 
communications acm 
kopetz sch tz design realtime systems specification implementation verification 
software engineering journal 
