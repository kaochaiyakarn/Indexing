object oriented approach discrete event simulation complex large systems moving objects mauricio mar departamento de computaci departamento de universidad de universidad de chile arenas chile santiago chile ona fi cl cec uchile cl modelling programming process requires completely different approach discrete event simulation complex large systems moving objects 
describe public interface class library addresses problem 
class library virtue flexible application independent object oriented environment presents user world view simplifies simulation systems 
discrete event simulation powerful analytical tool study complex systems moving objects 
application ranges variety systems including airplane vehicular traffic message passing wide area networks microscopic fluids 
generic problem consists simulating behavior moving object space populated objects 
main aspect simulation interactions objects 
example airplane enters region covered radar elastic collisions particles fluid 
interaction event occurs discrete instant time simulation 
addition events generated object may exist case airplane changes route pre established flight plan 
events interesting happens simulation advances variable intervals time driven chronological occurrence events 
simple simulation models obvious reduce high cost associated modelling programming process commercial simulation products slam 
moving objects simulation requires completely different approach necessary develop new strategies able reduce effort involved analysis complex large systems 
steps direction 
propose class library addresses modelling programming process complex large systems moving objects 
interest centered systems consisting thousands objects object classes binary interactions 
implementation details describe conceptual model world view library provides user public interface 
furthermore example showing world view virtue increasing user productivity providing environment flexible independent applications logic descriptive procedural 
thereof show object oriented kind simulations 
library design class library divided main components ffl simulation system kernel contains data structures algorithms efficient simulation general systems moving objects 
implemented kernel generalized versions strategies originally microscopic fluids strategies may simulations 
ffl modelling system builder enables communication specific features simulation model kernel 
features mainly related classes object belongs functions determine interactions 
module provides formalisms define object classes objects interactions grouping interactions parallel processes strategy automatic allocation objects space model 
conceptual model instances set classes stored library called descriptors patterns sheets maps build valid model simulated kernel 
methodology sort client server model user initializes interface model passed server kernel proceeds simulation 
sake simplicity class descriptions dimensional systems 
class described assumed may exist constructors destructors additional methods performs tasks example graphic display objects screen 
greater part public names library describe detail 
example part show class library developing illustrative example describes modelling programming process dimensional microscopic fluid 
part example developed turn section new concepts introduced 
fluid modeled set hard disks uniformly distributed rectangular space circular obstacle center 
obstacle states denoted simulation objects hard disks obstacle interactions collisions 
variables functions connection physical aspects model description leaves scope article long collisions long void void init void dd disk disk disk obstacle void void void void void void void void rest organized follows 
classes define simulation objects described section 
section gives classes create objects allocate positions space model 
section presents classes define interface simulation model kernel 
final comments investigations area section 
objects distinguish active passive objects 
active objects perform perceptible activity system operation 
conversely passive objects represent inert system entities 
kernel performs simulation active objects 
passive objects considered partners active object interactions 
descriptors descriptor user defined class contains data structures functions associated collection objects defines computer implementation 
object collection created instance specific descriptor adequately initialized user 
descriptors defined derived class library classes class public int type int states void int state void int newstate class public public void double double double radius void double xa double ya double xb double yb 
gc geometric center void double double double angle void double double double angle type defines objects passives states identifies maximal number discrete states may attain object 
behavior active object private integer discrete state variable set method subsequently modified method 
methods add build list geometric primitives define approximate shape objects 
coordinates primitive considered geometric center object 
example part microscopic fluid example define descriptors initialized instances descriptors disk obstacle shown program fragment class public private double public void double vx double vy vx vy void double vx double vy vx vy class public private double temperature public void double temperature double return temperature disk active obstacle passive states void descriptors initialize geometric form disk obstacle instances disk obstacle create simulation objects define interface kernel 
approach necessary descriptor represents physical concrete system entity 
may represent entities weather flux 
furthermore requirement objects geometric shapes consequently defined class derived class base descriptor 
user may define derived classes queue centers example 
term active object strictly synonym moving object concrete entity geometric shape 
space section methodology automatic allocation objects geometric shape space model 
define space rectangular area geometric objects placed 
origin spatial coordinates located lower left corner space 
basically objects come space sheets previously created 
sheets created making fusion sheets duplicating patterns spread inserting objects individually 
patterns pattern small rectangle contains geometric objects 
patterns defined simulation model instances library class class pattern public pattern double double void double double double angle set rectangle size method place objects pattern 
geometric center object placed position parameters rotation angle angle 
case origin lower left corner rectangle defined sheets sheet large rectangle contains objects created duplicating pattern extent adding objects individually making fusion sheets 
sheet instance class library class sheet public sheet double double double xo double yo void duplicate pattern void double double double angle void fusion sheet sheet boolean boolean set rectangle size xo yo specify rectangle position lower left corner space 
parameter identifies pattern duplicated method duplicate area defined fusion sheets performed method fusion join sheets may take values true false 
false objects included final sheet 
inversely true objects included final sheet 
true included final sheet objects intersect object 
false included final sheet objects intersect object 
space space model instance library class class space public space double double void objects int sheet int int double double double angle void int identifier specify extent rectangular space 
method objects variable argument list insert space objects stored sheets specified argument list 
objects stored sheets inserted space 
simulation possible delete create objects dynamically 
object identified integer number 
method creates new object inserts space returns identifier assigned new object 
true objects intersect created object deleted 
false new object created inserted considering intersections objects 
conditional object created inserted intersect objects 
example part microscopic fluid example objects space created follows space void objects pattern disk sheet sd sd duplicate sheet obstacle sheet fusion sd true true objects simulation define xlist list pointers kernel execute functions routines pointed pointers 
define map input output structure contains xlist output input parameters allow kernel find map 
class descriptors object states interaction types input parameters 
simulation model maps ffl predictions map contains point prediction functions calculate interaction times simulation objects ffl interactions map contains point interaction functions change states objects involved interaction 
kernel performs simulation system making accesses predictions interactions maps order execute functions pointed 
model dependent functions pointed members correct evolution system simulated 
kernel calls functions precise instants 
xlist may contain general purpose model dependent functions called control functions may tasks example system evolution measuring 
objects states class descriptors input parameters predictions interactions maps fd addition defined interactions interactions valid states input parameters interactions map may include interaction processed just instant kernel accesses map 
simulation algorithm performed kernel consists searching executing predictions map getting chronological event take place processing event searching executing xlist interactions map returning predictions map forth condition simulation reached 
detail interaction objects kernel executes xlist associated input parameters fd ag interactions map 
kernel predictions executing stored predictions map object objects defined xlist associated input parameters repeated active object 
kernel determines event accesses interactions map 
possible form groups predictions interactions maps 
groups build parallel process called activities associated object class 
activities defined object class 
activity may seen set predictions interactions simulated kernel individually object associated 
grouping predictions interactions set additional input parameter interaction associated activity takes place predictions performed kernel process event realized objects class descriptors members words defined class descriptors belong activity interaction object kernel performs predictions objects class descriptors activities focuses predictions determined object classes making possible existence independently simulated processes object 
conditional events activities events executed condition reached 
example condition may test activities associated event triggered condition true may execution new activity 
object interactions strictly binary particular case unary interactions implemented predefined void class called 
void class model activities uniquely associated specific class having relation object classes 
xlist list function pointers instance library class class xlist public void insert char list void delete char list void execute methods insert delete add remove function pointers xlist 
methods variable argument lists 
parameter list string specifies mean letters number pointers placed argument list example pointers specified value list fff 
furthermore possible assign priority value function pointer associating integer number 
example value list sets pointers priorities 
case kernel execute functions priority order greater priority greater 
function pointers placed parameter list assumed type void function pointers 
maps map sets relations descriptors states interactions 
map instance library class class map public map int type void connect descriptor descriptor int stated int stated xlist xl int activity int interaction void connect descriptor descriptor int stated int stated char list void disconnect descriptor descriptor int stated int stated int activity int interaction type specifies instance predictions interactions map 
method connect associate xlist xl combination descriptors states objects stated stated 
parameter activity grouping combinations descriptors states activities 
instance class map defined predictions map parameter interaction ignored 
instance interactions map parameter interaction define interactions pair descriptors states 
similar way parameter list class xlist parameter list second method connect specify directly xlist define activities interactions 
interactions parameter list include letter followed integer activities letter integer 
method disconnect dynamic disconnection relations established descriptors states activities interactions connect methods 
default activity activity consists making predictions objects system objects belong classes associated xlist 
parameters connect disconnect methods predefined constants 
example part example microscopic fluid defined maps xlist initialize finalize simulation 
calls map mp predictions predictions map map mi interactions interactions map void insert init insert insert mp connect disk disk mp connect disk obstacle mp connect disk obstacle mi connect disk disk mi connect disk obstacle mi connect disk obstacle event list event list data structure event generated simulation stored 
kernel performing efficient administration events 
library provides methods related event list class event public void double time int int int activity int interaction void int int int int activity int interaction class kernel public void schedule event void cancel event void cancel int int activity void cancel int int descriptor void predictions int int int activity void predictions int int int descriptor methods initialize user events stored event list 
user event instance class event derived class event 
methods allow defining user event take place instant parameter time conditional user event take place function pointed parameter returns value 
conditional user events tested scanning non conditional event event list 
method schedule inserts event event list 
cancel removes specific event event list 
second cancel removes events scheduled object specified activity 
third cancel removes event list events related object objects partners belong classes methods predictions control access predictions map process interaction 
effect methods vanishes processing interaction 
parameter enables predictions object 
furthermore predictions restricted specific activity set classes descriptors step simulation kernel initializes global object called contains data associated event processed currently 
declared user object class event user defined class derived event 
kernel kernel contains algorithms perform model initialization efficient simulation 
methods doing tasks library class class kernel continued public void space space void xlist xlist xlist xlist void maps map mp map mi void start void void continue void finish int descriptor void int identifier parameter indicates space model initialization finalization simulation period respectively indicates xlist time initiated predictions xlist processing interaction takes place simulation 
parameters mp mi specify maps predictions interactions respectively 
method start initiate new simulation period terminated methods finish 
temporally terminates simulation period possible continue method continue 
finish terminates completely simulation 
methods create eliminate objects geometrical shape 
example final part initialization simulation microscopic fluid realized follows initialization simulation kernel sim event void main descriptors objets sim space sim sim maps mp mi sim start sim finish application independence ensured class library works class descriptors system dependent functions defined user 
class descriptors create simulation objects represent system entities system dependent functions modelling behavior entities interaction 
provide flexibility needed simulations possible insert remove function pointers simulation 
example stage simulation necessary hold functions dedicated validate model stages functions needed study system evolution 
increase efficiency simulation strictly necessary pointers 
maps provide intuitive mechanism defining relations class descriptors object states interactions 
relations grouped activities representing parallel processes associated simulation objects 
concept define independent processes associated determined object classes simulated individually kernel objects belongs classes 
conditional events enable activity 
kernel realize predictions interactions objects classes related xlist predictions interactions map possible define objects distinct significance simulation model objects see objects belongs determined classes ones see simulation objects simulation relations change 
patterns sheets fusions provide user general formalism simplify process creating allocating thousands object geometrical shape space model 
currently research oriented problem creating graphical language define simulation models moving objects systems 
case class library described low level language outcome specifications highlevel graphical transformed declarations microscopic fluid example 
research activity focuses rule expert system technology providing user descriptive mechanism prediction interaction functions mechanism described 
case partial global state simulation considered fact data base production rules guiding behavior active objects simulation 
case exist pointers functions send messages inference machine expert system obtaining answer represented form events triggered steps ahead simulation 
partially supported university ic 
dr baeza yates encouraging presentation 
baeza yates mar analysis improved priority queue discrete event simulation moving objects proceedings xiv international conference computer science society nov chile 
discrete event simulation object movement interactions simulation 
gonnet baeza yates handbook algorithms data structures addison wesley ny 
simulate systems journal computational physics 
mar efficient algorithms body hard particle molecular dynamics journal computational physics 
rapaport time dependent patterns simulated convection phys 
rev lett 
anzai reduction molecular dynamic simulation computer physics 
rapaport event scheduling problem molecular dynamics simulation journal computational physics 
