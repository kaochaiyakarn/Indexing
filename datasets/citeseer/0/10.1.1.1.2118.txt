configuration design problem solving wielinga th 
schreiber university amsterdam department social science informatics wb amsterdam netherlands 
mail wielinga schreiber swi psy uva nl problem configuration design form design set pre defined components assembly selected components sought satisfies set requirements obeys set constraints 
optimality criterion may defines ordering possible solutions 
typical example configuration problem design elevators set parameterized components number initial value specifications requirements 
problem initially studied marcus known vt problem subject extensive experiment conducted knowledge engineering community order compare different methods solve problem sisyphus ii vt initiative see side bar 
example problem illustrates aspects configuration problems general consider configuration artifacts lego blocks 
shows types lego blocks different viewpoints 
set components consists number component types 
consider task building small boat model components 
general goal building boat translated set requirements 
assume requirements specify general geometric properties boat illustrated table 
example problem constraints hand determined properties lego blocks fit hand constraints design boat symmetric parts boat connected holes boat 
optimization criterion example problem minimal number blocks configuration 
shows minimal solution boat configuration problem 
standard dimensions lego components requirements satisfied exactly solution dimensions slightly different requirements 
typical phenomenon configuration design 
web page www cs unh edu ccc config contains variety links interesting configuration design type back view side view top view components example problem requirement type geometry side view hull cross section aft view dimensions width cm length cm height cm table requirements lego boat view back top view side view solution lego boat problem systems solve problems satisfy general definition configuration design described takes closer look various variants configuration task subtle differences exist impact knowledge involved task performed 
source variation set components 
hand set components entirely determined advance case configuration mold production completely defined product 
components shape dimensions known configuration problem consists finding optimal layout components mold 
example domain lego boat configuration described fully specifies components 
hand significant amount freedom may exist specifying components properties components may assigned values components may different instantiations components may variable number places components connected ports 
lego world set basic blocks specified generalized block parameterized length width height color 
case specification component space contain type rectangular block parameters replace types 
relations arrangement components provide second source variation configuration design 
extreme spectrum configuration problems case arrangement fixed configuration task reduced assigning values parameters components parametric design 
restricted case skeleton arrangement specific arrangement determined 
extreme case space possible arrangements limited way specification problem 
lego boat problem example configuration problem skeleton arrangement constituent blocks relations determined 
third source variation task degree requirements directly related components relations 
example vt problem requirements specified terms number initial value assignments component parameters 
variants configuration assume requirements functional case relation arrangement components required function determined 
lego boat problem requirements directly related components geometric properties final assembly 
testing requirements possible solution involve aggregation properties individual components 
constraints differ requirements requirements satisfied constraints violated 
example requirement house outlet smoke fire 
requirement satisfied chimney fulfills function 
example constraint house chimney higher meter 
constraint say chimney exceed certain height 
difference requirements constraints subtle recognized 
logical terms difference amounts distinction logical consequence requirements logical consistency constraints 
constraints local applicable single parameter single component relation components constraint global 
example constraint weight device exceed global constraint weight device property components 
hand constraint distance platform edge wall larger local constraint pair parameters 
lego boat example local constraints determine lego blocks connected orientation knobs align global constraint symmetry 
constraints concern function assembly global constraints 
addition local global constraints intermediate group constraints termed incrementally applicable 
constraints defined local part assembly checked parts designed 
configuration design differs types design respects new components designed set requirements constraints assumed complete requirement design necessary 
hierarchies partial assemblies configuration hierarchies assumed known 
configuration design special case brown chandrasekaran call class design 
terms component parameter assembly suggest configuration design mainly applies configuration physical artifacts components represent things activities 
perspective scheduling respects similar layout design components activities fully specified problem find arrangement activities time satisfies number constraints 
planning task possible actions constitute plan known time order dependencies actions unknown viewed example configuration design task 
set solutions configuration problem subset space possible assemblies components 
space subdivided space valid configurations satisfy constraints space suitable configurations satisfy constraints requirements space optimal configurations suitable configurations satisfy optimality criteria 
addition distinctions distinguishes configurations constructed real world 
example imagine configuration molecules performs motor function device difficult construct state art technology 
principle conditions formulated constraints practice omitted 
table summarizes dimensions configuration problems differ shows dimensions values problem 
space configuration problem types constructed cross product values dimensions 
course subtle differences included table restrict limited range values 
components assembly requirements constraints fixed set fixed local fully directly applicable fixed set parameterized set types parameterized components skeleton incrementally applicable free functional global table dimensions configuration design problems table gives examples cells cross product corresponding term problem type 
rows represent degenerate forms configuration design entire assembly problem verify validity suitability 
assignment viewed configuration task set elements people fitted skeletal arrangement rooms 
components fixed arrangement largely open task usually called layout design scheduling concerns arrangement activities time 
parametric design assumes arrangement mainly concerned assignment values parameters components 
skeletal design assumption model assembly known details mapping components assembly 
nature requirements constraints see table column influences way configuration design approached 
requirements constraints local apply single components relations verified relevant part configuration known 
requirements constraints involve larger number components ordered respect partial assemblies apply verified incrementally configuration process 
requirements apply functional behavioral properties system tested full assembly determined 
cell task category local verification incremental verification functional verification assignment layout scheduling parametric design skeletal design full configuration design table example types configuration design configuration design spans large space problem types different types knowledge required different problem solving methods applicable 
goal input knowledge problem specific knowledge case knowledge requirements constraints technology configuration design knowledge domain specific method independent knowledge persistent knowledge method specific domain knowledge search control knowledge general classification knowledge involved configuration design investigate different types knowledge play role configuration design identify problem solving methods apply configuration task 
result full theory configuration design hope steps direction 
knowledge categories configuration design problems look different kinds knowledge involved configuration design problem solving detail define major categories knowledge involved task indicate circumstances relevant 
distinction problem dependent knowledge knowledge remains valid multiple problem solving sessions 
category input knowledge persistent knowledge 
special category knowledge concerns previously solved cases 
previous solutions stored knowledge base persistent general resource problem solving processes 
second general distinction knowledge pertains aspects design domain example domain elevator knowledge specific particular problem solving method 
category persistent knowledge independent domain specific particular method solving problem 
type called search control knowledge 
shows hierarchy global knowledge categories configuration design 
literature configuration design exists wide variety definitions constitutes input configuration problem solver belongs knowledge base persists problem solving processes 
general consensus requirements constraints user supplied input 
assumption set requirements constraints input complete 
realistic design tasks requirements constraints derived knowledge design domain 
certain constraints depend design decisions problem solving process 
example architect decides place heating equipment certain place house doubt constraints fire prevention regulations apply place 
cases constraints generated dynamically design process 
authors include optimality criteria part user provided input 
view information set components possible compositional structures part input specification 
chandrasekaran argue specification technology applied design process part input 
addition problem specification knowledge needed design domain domain theory additional requirements constraints explicitly input implicitly regulations common sense optimality criteria optionally certain preferences 
preferences design choices outcome design process constrain space design options 
design choices may changed solution constrained search space 
example vt domain parameters get values assigned predefined range 
values cause constraints violated range possible values relaxed fixes 
essential type knowledge configuration design knowledge components 
simplest form knowledge takes form names representing component types cases names associated properties pre defined values fixed components assigned certain types values parameterized components 
constraints values property usually represented value sets ranges 
knowledge components organized subclass hierarchies 
relations components usually connections take entire components argument relate ports components 
case knowledge ports type number part component knowledge 
components assembly build represented instances component types 
causes issue cardinality important instances component part assembly 
cardinality components derived various ways part requirements car wheels specified part knowledge assembly car consists wheels result problem solving process 
domains particular technical ones knowledge partial assemblies components available 
assemblies viewed aggregate components provided properties ports known satisfy local constraints apply parts 
context configuration design assume partial configurations fixed parameterized 
knowledge connection relations exist components take various forms 
knowledge required relation name arity argument types constraints arguments information constitutes signature relation 
second relation properties 
example relation represents design choice components may want add distance property relation 
third relations hierarchical sub super type structure 
subtype relations commonly concepts relations type hierarchy relations play important role configuration design 
example connection electrical components may needed satisfy requirement 
representing connection general terms may reason requirements details nature connection may needed solution configuration problem 
connection electrical components wire bus plug infra red channel laser signals subordinate relations general connect relation specify nature connection 
configuration domains knowledge global structure assembly known advance 
designing car designer skeletal assembly mind consisting component types wheels engine steering system skeletal assemblies formulated terms general component classes specific instances components 
example vt domain general structure elevator system choices component classes specialized instantiated 
yu introduce similar concept product breakdown structure essence part tree component classes 
mittal define functional architecture decomposition artifact terms functions terms components case skeletal assemblies 
boundary functions components fuzzy 

term function refer general types components motor door vt domain reserve term component parts artifact decompositions 
ontolingua ontology vt domain uses term component cases see gruber 
terminological confusion arises components viewed physical objects classified function 
require clear separation function component merge notions functional abstraction hierarchy components advantages problem solving mittal show 
term constraint variety ways 
vt ontology uses notion constraint forms mathematical logical relations holds parameters 
distinguish expressions compute value parameter proper constraints just test parameter values certain boundaries 
secondly distinction constraints involve values parameters local constraints involve parameters associated component larger part assembly 
constraints represent preferred strategies hard constraints inherent domain 
motta 
argue favor clear separation inherent constraints types expressions similar syntactical structure different underlying rationale 
yu distinguish constraints represent certain dependencies design choices design choice forces constraints act limitations space design choices 
systems degenerate representations knowledge described 
example vt problem component selection represented value assignment property model represent subtypes components 
representational choices problem solving process configuration design easier uniform cause lack ontological clarity negative effects knowledge maintenance reuse 
shows consists hierarchy domain specific method independent knowledge categories 
addition domain specific knowledge configuration design system may need component hierarchy component knowledge component properties parameters value sets domain specific method independent knowledge constraint knowledge component ports signature assembly knowledge relation knowledge partial assemblies relation hierarchy skeletal assemblies relation properties functional architecture consists hierarchy domain knowledge configuration design additional knowledge reduce search space control problem solving process 
categories knowledge discussed section 
methods solving configuration design problems functional knowledge functional theory knowledge base contains knowledge types described previous section configuration design task principle solved straight forward search process 
combinatorial nature problem option unrealistic practice 
problem solving methods psms needed way constrain search process knowledge heuristic introducing additional assumptions restrict search space 
authors overviews psms design specifically configuration 
describes main psms construction problems heuristic construction model construction case construction 
heuristic methods configuration include skeletal construction propose revise commitment see 
chandrasekaran describes number psms context general family methods top level decomposition design task sub tasks propose critique modify pcm 
maher describes process models design decompositional design case reasoning transformational design 
detailed kads models case configuration structure oriented approach taxonomical structure components mapped graph resource oriented approach balancing resource requesting production model components 
clear consensus taxonomy psms configuration design task clearly overlap 
psms discussed knowledge intensive heavy knowledge constrain configuration process 
classes methods uniform reasoning procedures combined specialized representations problem solved 
vast literature solving constraint problems falls category 
configuration design problems formulated constraint satisfaction problem csp 
working systems ideas developed csp literature 
pure csp methods fail effective knowledge domain hand 
methods unable explain rationale solution 
tradeoff representational transformations uniform methods hand complex representations consequently complex reasoning procedures hand 
combinatorics complex problems best handled domain specific knowledge 
select verify model methods uniform methods heuristic classification case methods configuration problem solving methods match modify verify design methods knowledge intensive methods pcm type methods propose backtrack iterative transformation methods hierarchical methods propose revise holistic partial taxonomy psms design configuration shows attempt classify psms configuration design 
top level distinguish methods extensive knowledge domainindependent uniform methods constraint satisfaction linear programming 
transformational model methods applicable configuration design wider scope 
methods covered papers issue grammatical design functional design 

focus methods knowledge intensive 
case methods class methods assumption knowledge solutions configuration problems explicitly represented 
knowledge previous solutions just obtained knowledge acquisition human experts 
simple variant configuration design handled case methods arises set arrangements potential solution selected subsequently needs verified problem dependent requirements constraints 
simple form generate test call select verify requires knowledge guide selection process find configuration corresponds best current knowledge verification process 
selection process simple complex matching process requirements matched properties arrangements 
clancey proposes heuristic classification way selecting verifying enumerated solutions configuration problems 
select verify psm assumes solution set arrangements 
general case reasoning assumption relaxed solution modifying configuration 
aspects case configuration problematic finding best candidate set configurations blame assignment identification aspects stored solution cause violations constraints requirements 
see case design issue details case design method general 
propose critique modify pcm methods class methods pcm approach extensively discussed chandrasekaran 
general principle initial configuration proposed subsequently tested constraints requirements 
violations modifications remove conflicts 
specializations general pcm method configuration design 
discuss detail 
propose backtrack propose backtrack iterative method design decision subsequently tested requirements constraints 
test fails alternative decisions considered 
viable alternatives chronological backtracking undo earlier decisions 
major difference propose backtrack straightforward depth search propose step 
knowledge domain inform propose step select appropriate decision 
initial version dids solution vt problem see combined method constraint propagation 
major problem method inefficiency 
vt domain method appeared order magnitude slower methods 
argue xcon uses form propose backtrack 
fact performs little search backtracking arises possesses crucial knowledge 
large fraction knowledge concerns decision sub task appropriate search minimized mcdermott 
observation appears generalize order design extensions proposed crucial effectively solving configuration problems see yost 
commitment method way reducing backtracking search 
principle commitment method postpone design decisions possible leave options open 
pending decisions transformed constraints reflect dependencies parameters actual values 
general form commitment knowledge intensive method systems method may difficulty recovering wrong decisions 
propose revise propose revise method original vt system subsequently studied extensively sisyphus vt study 
method decomposes configuration design task sub tasks propose design extension ii verify current design iii revise design necessary 
main difference propose backtrack undo previous design decisions fixes 
require explicit description components connections 
method basically operates large bag parameters 
arrangement information represented special type parameter 
invocation propose task produce full design smallest possible extension existing design new parameter assignment 
order parameters selected guided domain specific search control knowledge provides ordering parameters components belong 
verification task applies simple form constraint evaluation 
method perform domain specific calculations provided constraints 
word constraint restricted meaning described previous section formula delivers boolean value 
revise task implements quite specific strategy modifying current design constraint violation occurs 
task requires knowledge fixes 
fixes second form domain specific search control knowledge method 
fixes represent heuristic strategies repairing design case constrain violation 
fixes incorporate design preferences 
goal revise task change current design way consistent violated constraint 
goal realized applying combinations fix operations change value parameters subsequently propagating changes network formed computational dependencies parameters 
application fix may introduce new violations 
fixing new violations involve recursive invocation revise 
tries reduce complexity configuration design disallowing recursive fixes 
application fix introduces new constraint violation fix discarded new combination fixes tried 
motta 
pointed terms flow control possibilities perform verification revision directly new design parameter values proposed 
strategy original vt system motta argues second strategy efficient comes different set solutions 
method proven practice inherent limitations 
fix knowledge implies design revisions guided heuristic strategies 
fix knowledge implicitly incorporates preferences certain designs 
difficult assess quality final solution produced method 
hierarchical configuration variants psm employs form hierarchical decomposition exist 
basic form hierarchical configuration form graph search 
top level goal decomposed number alternative substructures represents potential refinement original goal 
variants hierarchical decomposition method differ type knowledge represented nodes decomposition tree way tree constructed traversed 
variants approach exist including named nodes tree functional architecture parts tree separated different knowledge structures design plans additional knowledge handle constraint violations problem decomposition versus device decomposition design plan knowledge structure describes particular requirement sub problem solved 
explicit notion configuration design plans feature 
method assumes localized knowledge handling constraint violations 
presupposes functional architecture mapping design functions components 
architecture limited configuration design design problems 
hierarchical methods configuration design preferred arrangement components important element application problem single fixed skeletal design 
practice major selection criterion example 
configuration design simpler forms design problem solving involves different categories knowledge amenable different problem solving approaches 
simplest forms configuration design parametric design layout design require advanced ai technology solved 
required domain knowledge structures various approaches configuration design differ significantly 
authors prefer parsimonious set knowledge structures suit favorite problem solving method domain 
gained making ontological commitments explicit clearly distinguishing domain dependent method dependent knowledge categories 
knowledge reuse integration different methods system benefit ontological distinctions 
parsimony representational efficiency achieved mappings general ontology configuration design ontology particular application see schreiber 
major approaches problem solving configuration design distinguished domain independent uniform methods knowledge intensive methods 
approach advantage wide applicability remains weak methods 
clever techniques human computer interfaces engineered algorithms formal theories methods attractive efficient certain problem areas 
realistic configuration design problems remain methods unacceptably inefficient due combinatorial nature domain 
knowledge intensive approach proven successful constructing maintaining particular application may time consuming expensive 
salient feature knowledge intensive approach configuration design order design decisions crucial 
lesson drawn long standing experience xcon general sisyphus vt effort 
current knowledge ordering decisions entirely domain specific 
issue research see knowledge reformulated generalized applicable wider class configuration design problems reusable 
propose revise promising method main problem find value assignments parameters 
component selection major importance hierarchical methods appear candidates 
issue remains decided repairing wrong configuration proposal easier difficult designing place 
indications competent ai systems human experts getting right attempt significant amount domain specific knowledge optimal route efficient competent configuration design systems 
acknowledgments discussions akkermans gratefully acknowledged 
dave brown bill birmingham anonymous reviewers helpful comments earlier versions 
reported partly carried course project 
project partially funded esprit programme commission european communities project number 
partners project isl uk spain lloyd register united kingdom norway cap sweden university amsterdam netherlands university karlsruhe germany spain delos italy italy sintef norway 
reflects opinions authors necessarily consortium 
benjamin borst akkermans wielinga 

ontology construction technical domains 
shadbolt hara th 
schreiber eds 
advances knowledge acquisition proceedings ninth european knowledge acquisition workshop ekaw pp 
lecture notes artificial intelligence volume berlin heidelberg germany may 
springer verlag 
birmingham gupta siewiorek 

automating design computer systems project 
boston jones 
brown chandrasekaran 

design problem solving knowledge structures control strategies 
research notes artificial intelligence london pitman 
chandrasekaran 

design problem solving task analysis 
ai magazine winter issue pages 
clancey 

heuristic classification 
artificial intelligence 
latombe 

making compromises antagonistic constraints planner 
artificial intelligence 
iwasaki 

concepts implementation skeletal plans 
automated reasoning 


configuration 
breuker van de velde commonkads library expertise modelling 
amsterdam ios press pp 
marcus stout mcdermott 

vt expert elevator designer uses knowledge backtracking 
ai magazine spring issue pages 
maher 

process models design synthesis 
ai magazine winter issue pp 
mcdermott 

xcon age lessons elementary school artificial intelligence 
mittal falkenhainer 

dynamic constraint satisfaction problems proc 
th nat 
conf 
ai aaai pp 

mittal 

generic model configuration tasks 
proceedings th ijcai pages san mateo ca morgan kaufman 


systematic expert systems 
berlin springer verlag 
schreiber th 
birmingham 

sisyphus vt initiative 
special issue int 
human computer studies stefik 

planning constraints part 
artificial intelligence 
yu 

modelling product configuration design management product structure knowledge 
int 
workshop knowledge intensive cad finland 
side bar placed second page sisyphus vt study knowledge acquisition community decided annual workshop banff canada conduct comparative study existing knowledge engineering methods techniques 
method request people build system common data set 
purpose elevator design application chosen 
domain target vt application developed marcus stout mcdermott 
prime reason choice availability documented description original application data written gregg yost purpose ph carnegie mellon 
tom gruber jay added predefined ontology configuration design plus corresponding knowledge base elevator domain 
results study part series studies named sisyphus special issue int 
human computer studies 
side effect papers issue contain wealth information model practical configuration design problems 
issue contains original data set proposed configuration design ontology 

