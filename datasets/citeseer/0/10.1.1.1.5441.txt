development api create interactive storytelling systems jes savage jos roc ruiz de interfaces national university mexico school engineering building mexico city mexico yahoo com savage unam mx lycos com instituto de campus de mexico city mx 
interactive storytelling incipient field completely formalized 
significant amount research done 
especially regarding topics freedom granted user modify story effects freedom quality story 
object oriented expandable api provides low level functionality requirements interactive storytelling system research regarding topics done worrying implementation details 
api includes capability graphic representation story world 
basic agent class provides curve navigation animation text speech capabilities 
interactive storytelling system iss software system stores information regarding virtual world story takes place 
includes story objects characters iss simulates evolution events form story diverse mechanisms different degrees freedom 
allows user modify story course events 
capability necessary system order called interactive 
important distinction iss way story told created 
systems generate completely new story time systems may basic line development story events follow small changes depending user input 
second type systems content creator general outline events system usually flexible user input 
gives high amount freedom user anticipate cover branches story take user actions little effect final outcome story system hardly called interactive 
hand systems generate story take account user actions kind parameter set indicate mood tone pace story 
problem kind approach lack dramatic entertaining quality generated stories 
additionally cost development iss usually high developers lack experience area short proven design patterns different disciplines take part kind project 
problems cause scattering efforts areas artificial intelligence computer graphics animation text speech conversion voice recognition 
building basic systems developers deal integration story system developed 
complexity system built order test new theories main problems affect development research 
purpose project provide api developers iss includes basic functionality allow develop systems easily 
api render research real issues api tested development virtual reality environment represents site see 
fig 

virtual environment 
purpose project allow users system visit virtually newly discovered site state mexico 
integration nebula game engine api help tourist guide controlled api agent class system lets users know site located inaccessible area 
types interactive storytelling models different artificial intelligence approaches applied implementation iss restricted way interaction model iss uses 
depending way user allowed interact story way story depending ai methods applied may vary greatly 
models system respond simply selecting branch story built depending significant user actions 
agents control story characters specific ai implementation tries reactions look real generating story modified user actions 
necessary state different models 
great variety completely different systems main reasons lack standard design patterns field obviously obstacle deep thorough research paragraphs common interactive storytelling models 
linear story branching points simplest interactive models 
systems story develops linear fashion certain specific actions users affect plot story branching limited set selections 
systems upper layer high interactivity users actions layer significant impact story 
systems hardly called interactive level branching covers possible action user may perform possible object story world 
obviously hard number branches increase fast infinite amount 
due problem number important branches story runs type systems 
model usually applied systems interactive software kids 
emergent story intelligent agents type model attention placed way characters behave emotions profiles 
ai solutions systems applied agents giving unpredictable result quality story aylett points soccer game analogy 
characters interact user realistic behavior order emerge interesting story 
example possible create ai system virtual characters acted completely natural impossible distinguish real person guarantee generated story 
simply look real life sequence events happen real life dramatic comic quality really call story 
improvisational drama plot actors 
constrains directs actions character represent 
means developers interactive systems model face challenging problem generating story level 
particular problem arises emergent stories shared improvisational drama boring parts story aren authors usually traditional narrative scenes 
argued digital emergent stories advantage improvisational drama flip scene computing boring parts happened scenes pointed 
solution difficult problems may arise 
need create system module charge selecting element story emerging dramatic interesting user boring mundane irrelevant computed screen 
story driven interaction uncertain quality story generated intelligent agents motivated researchers propose interaction models generation quality stories emphasized 
proposal kind systems states need story engine story generated account user actions narrative dramatic principles order ensure story quality 
admittedly easy feat 
definitive solution problem step right direction 
problem model difficulty represent mold qualities dramatic story needs 
agreement exactly story 
problems approach aggravated lack definitive narrative theory theories commonly applied interactive stories story functions proposed propp structural analysis 
necessary point story driven interactive system theories difficult implement theories intended computer application high level abstraction 
concluded narrative theories conceive story authored dynamically created approach suitable application intelligent agents characters implementation 
certainly dynamic approach easier allow tested researched agent solutions 
api interactive storytelling current state interactive storytelling great variety disciplines needed develop complete iss developed api includes common difficult implement functions iss 
api help easier faster development iss facilitate research new models confirmation proposed theories field 
possible stories text text speech system computer user accustomed interface see graphic representation characters story environment 
due important part api include graphic engine help developer graphic centered computer user 
engine software architecture api developed integrating basic functionality iss requires 
effort building api put objectoriented approach part scheme insure developer interactive stories api build system 
object oriented design mentioned section api help programmers develop completely modular fully expandable projects 
object oriented design natural intuitive way 
design pattern follows main kinds classes story entities objects control internal state behavior element exists story servers just software elements implement common function share entities story 
help developers follow pattern api includes base class minimum functionality common interfaces story entity character object needs 
classes root class game engine base class api see 
fig 

object hierarchy basic classes api 
design pattern promoted api division object stores status behavior object story world stores graphic representation 
way api ready easy change game engine obsolescence 
due division class api store story entities store graphic representation 
world class story entities stored updated scene class graphic representations objects stored rendered 
design pattern followed server class intended combine set related functions sole class 
instance class accessible functionality entity may need 
classes time server graphic server voice server belong kind classes implemented api 
developers follow design pattern create new classes control generate story developing story servers ones mentioned section 
included functionality developing new server class generates story story entities follow example way expect api drive development new iss 
basic simulation system stated order create experience necessary iss graphic representation events happen story 
problem arises events way need simulation movements characters controlled user agents 
simulation collision detection user able direct character controlling wall find character goes 
reason api includes complete physics particle simulation system ensures realistic physical behavior objects story world 
api simulates gravity inertia friction inelastic collisions 
just simple physics laws enhance realism graphic representation virtual environment story 
high level functionality control characters class api includes actor class 
class charge actions story characters 
requirement developers ease class functionality accessed high level commands 
purpose high level access actor functionality allow inexperienced programmers develop iss scripts encouraging increase number artistic members iss development groups 
chris crawford points part lack new models ideas interactive storytelling product lack multidisciplinary groups develop iss 
actor class coupled model class supports cycling blending bone animations see 
way designer apply different models walk run animation blend animation controls model hands 
model class implemented open source cal library supports models animations exported studio max 
fig 

animation characters bone order adapt animation different models 
lack artists content creators development teams iss caused difficulty face create content 
difficulty posed fully developed design tools utilization low level languages control actions characters 
expect high level control offered api help creation rule system control characters high level actions details actions controlled code api 
example api basic navigation system curves 
feature api meant create network nodes representing important points scene communicated paths created curves 
way necessary develop algorithm search selects best path reach place agent needs go 
wide variety camera styles telling story graphical way show events happen 
order increment dramatic quality camera plays key role 
depending position movement camera scene changes completely 
ideas feelings author intends transmit may severely distorted position camera 
epic dramatic scene turned comedy right camera angle 
reason api contains complete camera class 
lets developers show scene appropriate way 
camera class automated functions free developer having control movement moment 
text speech conversion depending way iss displayed different forms communication employed inform user effectiveness may vary greatly depending factors 
example iss displayed cave user completely immersed developers intention making user feel place text messages bad choice 
text messages interfere cave display making look real 
considering possible decided integrate api microsoft speech sdk text speech capabilities allowing agents say small phrases written developer 
phrases converted speech depending developers scripting 
interactive storytelling models suitable api functionality architecture api suitable models mentioned early 
api completely suitable implement functionality required system linear branching story model 
case mentioned models interaction api provide functionality iss implementing requires 
architec ture provides foundation covers low level actions virtual character requires 
allowing required high level functionality easily implemented incorporated 
emergent story telling advanced agent built top existing functionality order obtain story emergence 
api suitable iss implements story driven model story engine stills built server top api lowlevel functionality 
possible roles agents created api capabilities api agents enables behave reactive agents 
responses completely scripted 
allows creating agents simple automaton triggers scripts depending state behavior emotion control 
right functionality implemented api enables agents created role story participants creators active modifiers story 
example api functionality implement virtual tourist guide answers possible questions site 
development rule system complex parts develop iss control characters 
api presents script control mechanism object 
feature extended game engine architecture api classes 
scripting language tcl flexible powerful needs iss developers 
system requires real independent intelligent agents kind control tcl scripting offers may suitable 
support cases planning include api rule system clips help enable agents plan execute complex sets actions explicit programming developer 
help create better interpretation user actions knowledge representation capacities enabling agents react complex situations environments context important 
stated earlier intelligent agents improve quality interactive story behavior characters believable 
depend developers creation system tells user real interesting story changes accordingly actions 
contribution project propose basic framework api development iss giving developers certain basic functions recommending software architecture development easier 
tries promote creation common agreed concepts field effort directed research solution problems affect novel field 
unsolved issues focused specialized research discover 
multidisciplinary development groups find right system real interaction quality stories 
refined systems game engine research purposes believe distinctive characteristic application development process 
code open sourced exception text speech module ms developers kind application worrying paying license fee 

www de nebula html 
aylett narrative virtual environments emergent narrative 
narrative intelligence symposium aaai fall symposium series 
interactive drama computer linear narrative 
aaai fall symposium 
aaai press menlo park ca 
propp morphology 
university texas press 
communication analyse des 
editions du 
aylett narrative theory emergent interactive narrative 
nd international workshop narrative interactive learning environments edinburgh scotland 
crawford artist engineers cats dogs implications interactive storytelling 
computer graphics 
cal sourceforge net 
www net clips clips html 
sourceforge net 
