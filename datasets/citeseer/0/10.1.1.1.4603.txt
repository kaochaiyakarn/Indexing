survey point techniques computer graphics kobbelt mario computer graphics group rwth aachen university kobbelt cs rwth aachen de years point geometry gained increasing attention alternative surface representation efficient rendering flexible geometry processing highly complex models 
point sampled objects store maintain globally consistent topological information 
flexible compared triangle meshes comes handling highly complex dynamically changing shapes 
attempt give overview various point methods proposed years 
particular review evaluate different shape representations geometric algorithms rendering methods points universal graphics primitive 
key words point sampled geometry point graphics gpu processing triangle meshes common surface representation computer graphics applications 
simplicity flexibility replace traditional cad surface representations nurbs surfaces areas processing performance matters 
reason triangle meshes significantly flexible surfaces shape topology represented single mesh need satisfy complicated inter patch smoothness conditions 
simplicity triangle primitive allows easier efficient geometry generation geometry processing algorithms 
evident interactive graphics highly optimized specialized graphics hardware able process millions triangles second 
obviously preprint submitted elsevier science july triangle primitive mathematically simpler compared nurbs patch obtain approximation quality 
smooth surface represented triangle mesh piecewise linear surface approximation order quadratic halving edge lengths reduces error factor means number triangles inversely proportional approximation error 
weaker asymptotic behavior approximation typical precision requirements graphics applications achieved moderately fine mesh vertex density distribution adapt surface curvature shape complexity 
flexible nurbs triangle meshes restrictions disadvantages special applications 
algorithms working triangle meshes require topologically consistent surfaces 
consequence manifold extraction topology cleanup steps necessary mesh generation methods amenta bischoff 
maintaining topological consistency mesh processing pipeline algorithms significantly complicated eventual target application visualization consistent topology necessary 
dynamic mesh connectivity welch witkin kobbelt example frequent topology changes occur mesh locally restructured order avoid stretching extreme deformations provide degrees freedom certain regions interest 
cases point representations allow flexibility globally consistent surface topology necessarily required rendering 
consequent step simpler flexible geometric primitives unstructured clouds points disks need store maintain globally consistent connectivity information 
rendering point view triangle meshes may suitable meshes complex typical screen resolution grow fast 
steadily increasing performance cpus graphics hardware cheap memory wide availability range scanning devices result acquisition generation massive highly detailed geometry data models consisting millions triangles common nowadays levoy 
number triangles exceeds number pixels screen rendering massive datasets leads triangles projected area pixel 
situation traditional incremental rasterization methods inefficient expensive triangle setup 
points qualify better suited rendering primitive highly complex models 
survey discuss point geometry representations sec 
show special application scenarios geometry processing algorithms greatly benefit flexibility offered geometries sec 

sec 
review various point rendering methods 
details point geometry processing pointbased rendering point computer graphics general pauly zwicker alexa 
point representations point geometry representation considered sampling continuous surface resulting positions pi optionally associated normal vectors ni auxiliary surface properties colors material properties 
neighborhoods normals normal vectors estimated analyzing local neighborhood sample point 
connectivity information available local neighborhoods usually constructed euclidean neighborhoods nearest neighbors 
case samples ball query point defined neighbors 
na method suited irregularly sampled models neighbors may ball 
neighborhood estimate get unreliable soon local feature size amenta smaller separate surface sheets located spatially close 
contrast nearest neighbors provide naturally adaptive neighborhood relation situations 
points satisfy certain sampling criteria adaptation local feature size neighborhood estimate guaranteed reliable amenta andersson 
nearest neighborhood structure linear complexity number sample points similar polygon meshes 
euclidean neighborhood nearest neighborhood computed efficiently hierarchical space partitioning technique 
contrast triangle meshes consistent neighborhood information represented explicitly local neighborhoods usually dynamically re computed case point sampled geometries 
certain applications caching local neighborhood information may suitable 
fig 

comparison different shape approximations piecewise linear polygons left piecewise constant points center piecewise linear splats right 
splats provide approximation power triangle meshes due continuity offer flexibility point clouds 
sample point 
pk nearest neighbors 
covariance matrix pi pi ir pi symmetric positive semi definite 
eigenvector corresponding smallest eigenvalue gives estimate normal direction 
determines normal vector sign consistent orientation sample points constructed propagation minimum spanning tree hoppe 
purely point representations approximation point view point cloud piecewise constant surface approximant 
resulting approximation power linear average spacing samples pi approximation error respect coordinate function order davis cf 
fig 

approximation geometric shape means approximation error determined spacing samples 
consequence sampling adjusted surface area implying dense sampling flat surface regions 
fact number samples inversely proportional squared approximation error 
point representation mainly targeting rendering proposed grossman dally 
completely unorganized point cloud set depth images orthogonally sampled input geometry 
similar image approaches representation constructed views input object differs pixel surface sample containing geometric position surface color 
fig 

point sampling circle different quantization levels left bit right bit different sampling densities top bottom 
top row approximation error continuous circle discrete point sets dominated distance samples bottom row error dominated quantization 
top left bottom right samples quantization error sampling density order minimizing redundancy 
input geometry contains certain amount tolerable noise exact sampling may necessary 
varshney proposed non deterministic statistical point representation hierarchical pca analysis partitions geometry attributes normals colors set local gaussian probability distributions 
reconstruction rendering performed random sampling probability distribution functions 
compact representation quantization precision storing sample coordinates taken account 
average sample spacing approximation error order quantization error magnitude order minimize redundancy cf 
fig 

sample resolution need samples cover surface 
quantization precision leads total memory consumption log store coordinates sample points 
memory cost reduced significantly hierarchical point representation 
start regular binary voxel grid represent point model non empty grid cell center position sample point 
sampling respects proportionality sample spacing quantization precision complexity empty cells stored 
recursively sub sampling regular grid applying zero tree pruning results adaptive octree structure 
hierarchical organization full cells yields compact point lod representation needs bit sample point 
entropy encoding amount reduced bit point 
bit rate independent sampling density total memory costs fact reduce 
insufficient object space approximation power purely pointbased representations usually requires dense sampling 
splats better compromise simplicity geometric primitive number primitives shown section 
surface splats surface splats proposed rendering purposes zwicker 

order bridge gaps neighboring point samples points pi associated normal vector ni radius ri turning object space circular disks 
locally optimal adaptation curvature underlying surface provided elliptical splats defined tangential axes ui vi respective radii 
optimal local approximation achieved axes aligned principal curvature directions underlying surface radii inversely proportional corresponding minimum maximum curvatures 
tangent vectors scaled corresponding ellipse radii arbitrary point plane spanned pi ui vi lies interior splat satisfies condition pi pi 
differential geometry tells locally proper ellipse best linear approximant smooth surface 
sense splat representations superior triangle meshes 
splats piecewise linear surface primitives provide quadratic approximation order triangle meshes cf 
fig 

just triangle meshes sampling density adapt surface curvature highly detailed regions sampled higher density flat surface regions sampled sparsely 
higher approximation power quantization precision splat coordinates denoting sampling density 
splats join continuously triangles mesh continuous provide topological flexibility pure point clouds cf 
figs 

representing sharp features edges corners technical datasets studied problem triangle meshes 
surface longer differentiable approximation power breaks linear order 
addi fig 

order represent sharp features technical datasets splat clipped clipping lines 
left example generated csg operations right example shows splat approximation known fandisk model 
alias artifacts introduced insufficient sampling removed increasing sampling density kobbelt 
order remove artifacts reduce normal noise sampling aligned principal curvature directions kobbelt 
surface splats represent sharp features splats sample features clipped edges corners clipping lines specified local tangent frames cf 
fig 
pauly 
moving squares surfaces moving squares mls surfaces levin provide approximating interpolating surface set point samples local higher order polynomials applied point methods alexa 

mls surface defined terms mls projection operator ir projects points vicinity mls surface surface 
surface defined fix points operator project range 
domain projection operator neighborhood input points pi defined union balls centered pi ir pi rb actual computation projection split steps find local plane hr ir minimizing non linear energy functional pi pi ir ir ir denotes smooth positive monotonically decreasing weight function 
find local bivariate polynomial approximation hr ir weighted squares fit points pi neighborhood qi orthogonal projection pi hr xi yi local coordinates fi qi pi height hr 
error xi yi fi pi minimized 
projection defined typical choice decreasing weight function gaussian resulting continuous mls surfaces 
parameter gaussian corresponds globally estimated sample spacing control degree smoothing 
irregularly sampled point sets parameter chosen locally proposed pauly 
approximation power mls surfaces conjectured degree local polynomial approximant drawback mls surfaces computationally involved non linear optimization problem finding frame hr 
slightly different considerably simpler projection approach proposed alexa adamson take correct normal computation account order properly define implicit surfaces point cloud data adamson alexa 
projection procedure repeatedly projects point local planes defined weighted average position pi pi pi normal computed weighted squares fit argmin pi pi weighted averaging input normals ni pi ni pi ni fig 

simplified mls projection procedure 
step current approximation updated projecting orthogonally plane 
iterative projection procedure proposed follows cf 
fig 
initialize 
compute 
nt return project nn go back 
iteration converges yields point mls surface 
simplified projection procedure result orthogonal projection enhanced alexa adamson 
contrast algorithmic construction mls surfaces projection operator amenta kil give explicit definition mls surfaces terms critical points energy function lines determined vector field 
discuss stability issues traditional projection operator points sufficiently close surface propose alternative projection technique 
mls surfaces define smooth surface set points versatile tool generate additional sample points surface sampling model low pass filtering mapping points back initial surface local restructuring 
mls surfaces valuable efficient tool point geometry processing 
rendering sufficient sampling quite involved map graphics hardware see sec 

interactive applications usually combination surface splats mls surfaces 
point geometry processing concepts algorithms known triangle meshes transfered point geometry representations simply replacing manifold neighborhood relation implied triangle connectivity general nearest neighborhood relation point clouds 
developed techniques especially designed point sampled geometries exploit additional flexibility offered 
connectivity information topological consistency maintained local re sampling restructuring easier triangle meshes 
point models usually acquired range scanning image reconstruction methods 
cases point samples contain certain amount noise due physical measurement errors reduced low pass filtering techniques 
decomposition patches local height field approximations pauly gross transfered fourier spectral methods point sampled geometries 
method allows mathematically defined frequency analysis filtering 
frequencies find feature regions geometry robust feature detection method pauly 

local covariance analyses multiple scales robustly find feature regions connected feature lines minimum spanning tree approach 
scanned data usually contains artifacts just measurement noise 
occlusions concave areas specular surface materials may lead holes insufficient sampling requiring kind hole filling mechanism 
difficult material reflectances textured models lead outliers detected removed processing 
intuitive tools post processing scanned data weyrich 

real world objects captured detail possible resulting models usually highly complex simplified order suitable complexity processing 
pauly 
transfered mesh decimation methods vertex clustering incremental decimation error quadrics remeshing particle simulation point sampled surfaces 
methods show behavior mesh counterparts greedy incremental decimation gives results point distribution greatly equalized point repulsion iterations 
methods allow prescribe exact global error decimation full splat geometry account rely proper distribution splat centers 
fig 

optimized sub sampling left points circular splats right 
respecting prescribed error tolerance global optimization yields regular splat distribution 
contrast wu kobbelt propose simplification method especially designed splat surface approximations 
full piecewise linear geometry surface splats account method provides exact global error bound high quality splat distribution cf 
fig 

step patch respectively splat grown input sample violate error tolerance 
set candidate splats subset fully covers input geometry chosen greedy manner 
global optimization patch selection improves splat distribution similar repulsion particle simulation 
candidate splats constructed stay error tolerance coverage tests done simple set operations 
technique exploits improved local approximations elliptical splats added flexibility comes having maintain globally consistent topology order obtain considerably better approximation compared triangle meshes cf 
fig 
left fig 

biggest advantage point representations polygonal meshes easily restructured need take care manifold conditions 
applications requiring frequent geometry re sampling benefit point methods 
prominent example zwicker 
photoshop tool manipulating models cf 
fig 

point samples represent surface fig 

offers various manipulations point sampled models texture painting left low distortion parameterization displacement mapping center carving right 
positions material properties textures values easily modified point basis 
tools sculpting carving change point positions texture smoothing painting modifies point colors 
order able paint arbitrary fine details model fill gaps displacing points local re sampling heavily 
approach painting point sampled surfaces proposed adams 

targeting realistic painting method provides haptic feedback physically simulated paint transfer 
method allows user paint arbitrarily fine detail surface locally upsampling affected regions fly order provide sufficient sample resolution 
simultaneous point sampling geometry normals appearance attributes greatly simplifies painting methods 
contrast triangle meshes tight coupling geometry appearance requiring texture atlas painting mesh 
enable painting fine details texture atlas refined dynamically carr hart considerably complicated natural point sampling approach 
challenging topic shape deformation 
different approaches model freeform shapes volumetric freeform deformation best suited interactive modification point sampled geometries 
deformation techniques generate displacement function ir ir surface sample pi mesh vertex splat center shifted pi pi 
applying extreme deformation triangle mesh certain triangles exhibit strong stretching leading numerically visually undesirable triangles removed local restructuring welch witkin kobbelt lawrence funkhouser 
point models problem worse model tear apart stretch 
splats exhibiting stretching easily detected looking jacobian displacement function splitting fig 

shape modeling point sampled models 
frequent local re sampling accounts stretching allows extreme deformations left 
combination free form deformation csg operations displacement mapping create mug right 
splats followed local tangential relaxation particle repulsion mls projections solves dynamic restructuring problem point clouds allows extreme deformations point models cf 
fig 
pauly 
similar sense oriented particles represent deformable parametric implicit surface models easily stretched split joined repulsion particle simulation achieves uniform sufficiently dense surface sampling modeling process szeliski witkin heckbert 
constructive solid geometry csg common technique building complex models boolean combinations simpler ones 
requires inside outside tests solids implicit representation models best suited hoffmann 
volumetric surface representation easily derived point sampled surface observing direction shift vector pi pi induced mls projection operator relative oriented normal vector 
intersection smooth objects may result sharp feature curves sampled properly order avoid aliasing artifacts 
pauly 
proposed simple technique snap nearby sample points sharp features local newton type iteration method 
sharp features represented clipped splats cf 
fig 
left 
efficient method interactive csg computations proposed adams cf 
fig 
right 
implemented approach gpu order exploit hardware acceleration csg adams 
solving pdes triangle meshes important topic widely mesh smoothing mesh editing deformable models geometry processing tasks 
transferring methods models missing geodesic neighborhood information replaced spatial nearest neighbors 
define fig 

left part shows different steps point csg operations classification top row intersection curve sampling bottom row 
examples difference intersection head helix shown right 
approximate tangent space point models local delaunay triangulations define coupling neighboring points 
allows straightforward discretization differential operators derivation corresponding stiffness matrix 
approach proposed 
pde segmentation texture texture synthesis geometric smoothing applications framework 
physically modeling animation volumetric point sampled models proposed ller 
surface volume model represented point samples local restructuring easily possible allowing arbitrarily large distortions original shape 
exploiting flexibility point methods complicated topology changes water simulated 
point rendering final stage interactive geometry processing applications efficient rendering point sampled geometries 
points proposed universal rendering primitives levoy whitted 
deriving rendering algorithm geometry representation propose subdivide representation sufficiently dense set sample points 
rendering points performed specially tuned technique 
want generate continuous hole free images rendering discrete set surface samples methods closing holes gaps samples 
done image space reconstruction techniques grossman dally pfister object space re sampling 
techniques category dynamically adjust sampling rate density projected points meets pixel resolution 
depends current viewing parameters re sampling fig 

checkerboard texture rendered surface splats left ewa filtering right 
done dynamically frame 
examples dynamic sampling procedural geometries drettakis randomized buffer wand rendering mls surfaces alexa 
contrast surface splatting zwicker renders splats object space disks ellipses points 
case mutual overlap splats object space guarantees hole free rendering 
hand na rendering inter penetrating splats results shading discontinuities cf 
fig 

zwicker 
proposed high quality anisotropic anti aliasing method resembles anisotropic ewa texture filtering heckbert 
splat assigned radially symmetric gaussian filter kernel continuous surface signal object space reconstructed respectively weighted averaging splat data colors normals 
combining object space reconstruction kernels band limiting image space filter results high quality ewa splatting framework cf 
fig 

object space image space filters gaussians projection locally splat approximated affine mapping filters combined single gaussian enabling quite efficient implementation 
purely software implementation approach computationally expensive displaying highly complex models achieves splat rate splats sec current hardware 

proposed hierarchical representations efficient rendering 
octree point clouds see sec 
displayed rendering point splat non empty leave cell 
showed projection transformations leaf cell center implemented incremental summation depth traversal octree followed final de homogenization step 
points sharing common octree path share terms sums turns point transformation requires just scalar additions divisions total 
combining pre computed tables lighting splat footprints results splat rate splats sec 
implementation completely software puts high load cpu blocking geometry processing tasks 
fig 

sequentialization lod hierarchy results rendering continuous segments linear point list 
delegation fine grained lod control gpu results hierarchical lod rendering cpu load 
years increasing efficiency programmability modern graphic cards lindholm mark triggered development hardware splatting methods 
targeting efficient visualization models acquired digital michelangelo project levoy rusinkiewicz levoy proposed hierarchical rendering method pre computed bounding sphere tree structure 
recursive tree traversal efficient keep current gpus busy 
proposed sequentialization lod tree structure corresponds breadth re ordering 
rendering model certain level detail requires process continuous sub segment linear point list directly gpu cf 
fig 

transferring point list video memory implementing lod selection vertex shaders gpu results low cpu load impressive splat rate splats sec 
drawback approach rendering primitives splat un filtered image space squares quality improved considerably gaussian filtering elliptical splat primitives 
remove shading discontinuities achieve visually smoother rendering gaussian filter kernel assigned splat case hardware accelerated rendering 
difficulty splats projected pixel closely overlapping splats blended cases distance splats certain threshold front splat overwrite splats 
implementation functionality requires fuzzy depth test general buffer carpenter 
available current gpus multiple rendering passes 
called visibility splatting fills buffer rendering lighting objects slightly shifted away viewer 
second pass renders splats gaussian blending turned alter buffer blending splats differ depth rusinkiewicz levoy 
process accumulates weighted sum colors pixel pixel division fig 

previous local affine approximations projective mapping caused holes extreme viewing angles center 
holes closed affine approximation correctly maps outer splat contour right pixel ray casting exactly computes inverse projective mapping 
accumulated alpha value calculates correct weighted average 
pixel normalization efficiently done window sized quad textured result second rendering pass kobbelt paulin 
pixel shaders current graphics hardware allows rasterization elliptical splats rendering just vertex splat 
computing projected size vertex shader triggers rasterization image space square 
fragment shader processes pixels constructs elliptical shape discarding pixels outside ellipse 
implementation circular object space splats pass gaussian filtering kobbelt achieving splat rate splats sec 
method uses affine approximation projective mapping order compute splat footprint image space 
simplification may lead holes image model viewed extremely flat angles shifted away main viewing axis cf 
fig 

problem addressed perspective accurate splatting zwicker 
different affine approximation projection outer splat contour splat center correctly mapped 
slightly incorrect splat interior method effectively avoids holes image 
projection approximated affinely full ewa splatting framework integrated approach 
pixel correct projections achieved performing local ray casting fragment shaders proposed 

point rendering methods constant normal vector lighting individual splat leading results comparable flat shading triangle meshes cf 
fig 
center left 
blending gaussian reconstruction kernels smoothes shading artifacts comparable gouraud fig 

comparing different rendering techniques simplified model scanned statue na splatting filtering comparable flat shading center left gaussian blending corresponds gouraud shading center right phong splatting yields quality phong shading triangle meshes right 
shading shading varies smoothly image may appear blurry cf 
fig 
center right 
non constant normal fields pixel lighting significantly improves visual quality zwicker varshney 
triangle meshes phong shading achieves superior rendering quality computing pixel lighting interpolated normal vectors triangle vertices object space 
concept directly applicable point rendering access normal vectors neighboring points splats possible due lack explicit connectivity information 
order achieve pixel normals maintaining simplicity splat representations 
assign linear normal field splat individually 
normal fields derived squares fitting dense set sample normals 
rendering phong splats easily efficiently implemented gpu yields high visual quality comparable phong shading triangle meshes cf 
fig 
right 
order represent sharp features point sampled geometries pauly 
proposed clip splats clipping lines defined local tangent frames cf 
fig 

representation easily rendered integrating pixel clipping test fragment shaders proposed zwicker 


techniques exploit programmable shaders current gpus hardware acceleration directly available point rendering 
resulting rendering approaches efficient provide high visual quality 
elliptical splats represent optimal approximation local surface geometry continuity splats provides degrees freedom splatting techniques lead superior visual rendering results fig 

comparing different shape approximations consisting geometry primitives irregular triangle meshes left regular aligned triangle mesh center left circular splats center right elliptical splats right 
respective approximation errors continuous torus 
compared triangle rendering number linear primitives cf 
fig 

current graphics hardware highly optimized specialized triangle rendering points splats keep triangles terms effective rendering performance 
point representations proven valuable alternative polygonal meshes special applications 
particular highly complex dynamic models processed proper surface topology necessarily required simplicity point representations leads simpler efficient algorithms 
elliptical surface splats provide asymptotic approximation power triangle meshes achieve locally better approximation axes elliptical splats aligned principal curvature directions surface 
splats offer flexibility require continuity 
certain budget surface primitives splats usu ally yield better approximation results compared triangles cf 
fig 

current graphics hardware optimized triangle rendering programmable shaders enable efficient implementation high quality point rendering techniques performance coming close effective polygon rate 
new types graphics hardware architectures exploit particular advantages points general graphics primitive supporting adaptive object space sampling techniques order reduce redundancy point representation rate screen pixels 
acknowledgments mark pauly marc alexa helpful comments people providing images papers matthias zwicker fig 
mark pauly fig 
bart adams fig 
carsten fig 
wu fig 

adams 
interactive boolean operations bounded solids 
proc 
acm siggraph 
pp 

adams 
boolean operations bounded solids programmable graphics hardware 
proc 
symp 
point graphics 
pp 

adams gross pauly teschner 
interactive painting point sampled objects 
proc 
symp 
point graphics 
pp 

adamson alexa 
approximating intersecting surfaces points 
proc 
eurographics symposium geometry processing 
pp 

adamson alexa 
approximating bounded non orientable surfaces points 
proc 
shape modeling international 
alexa adamson 
normals projection operators surfaces defined point sets 
proc 
symp 
point graphics 
pp 

alexa cohen levin silva 
point set surfaces 
proc 
ieee visualization 
pp 

alexa cohen levin silva 
computing rendering point set surfaces 
ieee transactions visualization computer graphics 
alexa gross pauly van baar zwicker 
point computer graphics 
eurographics tutorial notes 
alexa gross pauly pfister zwicker 
point computer graphics 
siggraph course notes 
amenta bern 
new voronoi surface reconstruction algorithm 
proc 
acm siggraph 
amenta kil 
defining point set surfaces 
proc 
acm sig graph 
andersson pauly 
bounds neighborhood locally uniformly sampled surfaces 
proc 
symp 
point graphics 
pp 

bischoff kobbelt 
automatic restoration polygon models 
preprint 
kobbelt 
resampling feature blend regions polygonal meshes surface anti aliasing 
proc 
eurographics 
pp 

kobbelt 
high quality point rendering modern gpus 
proc 
pacific graphics 
kobbelt 
phong splatting 
proc 
symp 
point graphics 
kobbelt 
efficient high quality rendering point sampled geometry 
proc 
eurographics workshop rendering 
carpenter 
buffer hidden surface method 
proc 
acm siggraph 
pp 

carr hart 
painting detail 
proc 
acm siggraph 

finite elements point surfaces 
proc 
symp 
point graphics 
pp 


sequential point trees 
proc 
acm siggraph 
davis 
interpolation approximation 
dover publications 
cohen alexa silva 
progressive point set surfaces 
acm transactions graphics 
grossman dally 
point sample rendering 
proc 
eurographics workshop rendering 
pp 

paulin 
efficient screen space approach hardware accelerated rendering 
proc 
vision modeling visualization 
heckbert 
fundamentals texture mapping image warping 
master thesis university california berkley 
hoffmann 
geometric solid modeling 
morgan kaufmann publishers hoppe derose duchamp mcdonald stuetzle 
sur face reconstruction unorganized points 
proc 
acg siggraph 
pp 

varshney 
differential point rendering 
proc 
eurographics workshop rendering techniques 
varshney 
modeling rendering points local geometry 
ieee transactions visualization computer graphics 
varshney 
statistical point geometry 
proc 
eurographics symposium geometry processing 
pp 

kobbelt seidel 
multiresolution shape deformations meshes dynamic vertex connectivity 
proc 
eurographics 
kobbelt seidel 
feature sensitive surface extraction volume data 
proc 
acm siggraph 
pp 

lawrence funkhouser 
painting interface interactive surface deformation 
proc 
pacific graphics 
pp 

levin 
approximation power moving squares 
mathematics computation 
levin 
geometric modeling scientific visualization 
springer ch 
mesh independent surface interpolation pp 

levoy pulli curless rusinkiewicz koller pereira anderson davis ginsberg shade 
digital michelangelo project scanning large statues 
proc 
acg siggraph 
pp 

levoy whitted january 
points display primitives 
tech 
rep cs departement university north carolina chapel hill 
lindholm 
user programmable vertex engine 
proc 
acm siggraph 
pp 


fan clouds alternative meshes 
proc 
dagstuhl seminar theoretical foundations computer vision 
pp 

mark 
cg system programming graphics hardware language 
proc 
acm siggraph 
ller pauly gross alexa 
point animation elastic plastic melting objects 
proc 
eurographics acm siggraph symp 
computer animation 
pauly 
point primitives interactive modeling processing geometry 
ph thesis eth rich 
pauly gross 
spectral processing point sampled geometry 
proc 
acm siggraph 
pauly gross kobbelt 
efficient simplification surfaces 
proc 
ieee visualization 
pauly gross 
multi scale feature extraction point sampled surfaces 
proc 
eurographics 
pauly kobbelt gross 
shape modeling point sampled geometry 
proc 
acg siggraph 
pfister zwicker van baar gross 
surfels surface elements rendering primitives 
proc 
acm siggraph 
pp 

rusinkiewicz levoy 
multiresolution point rendering system large meshes 
proc 
acm siggraph 
pp 

drettakis 
interactive sampling rendering complex procedural geometry 
proc 
eurographics workshop rendering 
pp 

szeliski 
surface modeling oriented particle systems 
proc 
acm siggraph 
wand fischer peter meyer auf der heide stra er 
randomized buffer algorithm interactive rendering highly complex scenes 
proc 
acm siggraph 
pp 

welch witkin 
free form shape design triangulated surfaces 
proc 
acm siggraph 
weyrich pauly gross 
post processing scanned surface data 
proc 
symp 
point graphics 
pp 

witkin heckbert 
particles sample control implicit surfaces 
proc 
acm siggraph 
wu kobbelt 
optimized subsampling point sets surface splatting 
proc 
eurographics 
zwicker 
continuous reconstruction rendering editing surfaces 
ph thesis eth rich 
zwicker pauly gross 
interactive system point surface editing 
proc 
acm siggraph 
zwicker pfister van baar gross 
surface splatting 
proc 
acm siggraph 
pp 

zwicker nen pauly 
perspective accurate splatting 
proc 
graphics interface 

