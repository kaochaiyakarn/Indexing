loosely coupled web services remote object federations uwe zdun department information systems vienna university economics austria zdun acm org loosely coupled services gaining importance business domains 
compared oo rpc middleware approaches emerging technologies proposed implement loosely coupled services web services frameworks practical problems 
arise typical business domains instance missing central control high network scalability problems performance overheads security issues 
propose ideas emerging technologies controlled environment called federation 
remote object peer controlled federations environment peers collaborate simple loosely coupled ad hoc style communication 
design implementation relies popular remoting patterns 
generic framework architecture patterns prototype implementation 
loosely coupled business services nowadays propagated enabled different technologies including web services systems coordination cooperation technologies spontaneous networking 
compared oo rpc middleware approaches corba rmi dcom approaches promise loose coupling service architecture ease ease deployment 
point section today technologies limitations context business critical systems instance regarding central control tasks network scalability performance security 
typical applications loosely coupled web services different business domains workflows groupware legacy integration coordination business components 
offer loosely coupled web services business domains specific recurring requirements 
instance spontaneous connections allowed require level control ensure business service misused 
consider commerce service provided service users paid service 
business peer play role different contexts 
consider peer represents delivery service content provider provide contract engine handle rights enforcement 
model situations peers equals model current environments system 
useful peers equals certain situation handled 
simple remoting model cases ease development distributed programs significantly 
service architectures ad hoc connectivity may ease deployment controlled environment say 
propose federated model remote objects solution 
federation peer offers web services possibly kinds services peers connect spontaneously peers federation equal peers 
remote object potentially part federation peer peer decides services provides federation 
certain peers federation able access extra services offered peers federation federations 
semantic lookup service allows finding peers metadata exposed peers ontology 
enables loosely coupled services simple self adaptations interface version changes 
framework loosely coupled web services built internally known oo rpc remoting patterns 
discuss implementation written object oriented tcl variant xotcl soap communication 
pattern design aim similar framework implemented language web service framework 
framework designed extensible implementation decisions particular soap implementation communication protocol exchanged required 
discuss prior areas web services systems coordination technologies spontaneous networking 
discuss open issues approaches regarding loosely coupled services 
discuss generic framework design prototype implementation xotcl top soap called 
discuss far open issues resolved concepts conclude 
related section discuss related areas web services systems coordination technologies spontaneous networking 
see concepts implement desired functionalities leave issues open 
web services web service architectures center service concept meaning service seen set component providing organization 
web services technology offering concepts deployment providing access business functions web 
technically web services build different web service stacks ibm microsoft net 
standard protocols common web service stack architectures currently diverse 
usually supported remote communication 
asynchronous messaging protocols supported 
soap message exchange protocol top communication protocol 
remote services specified web service description language wsdl 
wsdl xml format describing web services set endpoints 
operations messages described abstractly bound concrete communication protocol message format define endpoint 
naming lookup supported uddi 
web service accessed ad hoc services located bound runtime 
additional composition services supported business process execution languages bpel ws 
languages provide high level standards hierarchical flows web services 
web services providing loosely coupled service architecture service deployment model 
today web service stack architectures relatively complex considerable overhead especially xml processing 
federated grouped composition focus technically possible 
peer peer systems peer peer computing refers concept networks equal peers collaborating specific tasks 
environments allow kind spontaneous ad hoc networking abilities 
typical applications file sharing grid computing groupware 
computing special form distributed computing gained attention times especially systems personal gnutella napster 
technically quite diverse views 
instance interpreted variant client server paradigm clients servers interpreted network servers 
referred type network peer equivalent capabilities responsibilities 
differs client server architectures computers dedicated serving 
note distinction application level 
technology level architectures implemented means 
basic functionalities shared current systems connect peers common purpose permit users lookup peer services provide way exchange data invoke remote services 
basic properties quite vague apply client server architectures 
optional properties expect system single identifying property missing usually kind sharing resources services ease users developers direct exchange peer systems usually clients servers load distribution may supported way notion location regarding service provided mainly lookup service locate desired service 
regarding remote business services offers set potential benefits provide simple remoting infrastructure loose coupling inherently modeled 
missing central coordination may cause problems regarding security performance scalability network traffic 
coordination models coordination models foundations coordination language coordination system implementation model 
coordination model seen mal framework expressing interaction components multi component system 
related especially coordination distributed concurrent systems interest 
coordination language linda introduced view coordination concurrent systems orthogonal execution operations calculations system 
linda model prevalent coordination languages 
consists small number coordination primitives shared dataspace containing tuples tuplespace 
original linda notions multiple federations single tuplespace processes 
practical limitation regarding distributed systems single tuplespace performance bottleneck 
structuring sub spaces scalability limited 
bauhaus introduces idea bags nest processes 
process coordinated processes bags move common bag coordinate processes 
pagespace structures linda spaces controlled access different agents user representation interfaces agents administrative functionality gateways 
spontaneous networking spontaneous networking refers automatic self adaptive integration services devices distributed environments 
new services devices available intervention users 
services provided located network 
providing means dynamically added removed network group interfering global functionality 
failure attached service affect functionality network group 
failing services automatically removed respective services de registered 
jini distributed computing model built spontaneous networking 
service providers clients firstly locate lookup service 
lookup service received multicast 
service providers register lookup service providing proxy services set service attributes 
service receives lease renewed time time 
lease expires service automatically removed network 
clients looking service particular attributes send request lookup service service 
response client receives proxies services matching requested service attributes 
home audio video interoperability havi standard designed networking consumer electronics ces 
especially self management plug play functionalities provided spontaneous networking 
remote services registered unique software element identifier system wide registry service lookup 
havi specifies communication protocols access methods software elements platform independent way 
open issues loosely coupled service architectures concepts described previous sections implement loosely coupled service architectures 
different benefits liabilities context business systems information systems organization workflows groupware information systems offering services outside commerce environments 
propose combine ideas approaches resolve open issues control peers access network peer offers vital service visible instance paid control access business environments 
idea combine grouping concepts coordination models basic networking properties model 
dynamic invocation static interface descriptions mandatory remote invocations ad hoc connectivity hard model 
context loosely coupled web services propose dynamic invocation mechanisms top soap 
simplicity application developer remoting technologies place simple 
coordinated group sure access granted developers remote objects accessing service able simple remoting model direct interactions 
security access coordinated groups permissions peer group secured 
performance scalability internal protocols exchangeable deal performance scalability issues 
possible replace performance intensive memory intensive framework parts transparently provide means qos control 
deployment accessible remote object provide services expose ease deployment access known web services 
peer federations section step step discuss concepts peer federations 
combining concepts different approaches discussed previous section resolve named open issues 
illustrate concepts examples prototype implementation 
implemented xotcl objectoriented scripting language tcl 
framework designed remoting patterns 
illustrate designs uml diagrams 
describe peer federation concepts describe basic concepts communication framework 
communication framework model tightly integrated higher level peer federation concepts 
important understand design go details peer federation concepts 
basic communication framework basic communication resource application uses classes implementing see highlight pattern names font 

pattern describes send requests network receive responses efficient way client side 
server side requests received 
pattern describes efficiently receive request network dispatch requests server application send response back client side 
application instance acts client server time 
application instance request handlers accessed peer 
request handlers contain different protocols transport message network 
currently support soap protocol plug 
communication protocol 
described supports different invocation activation styles see sections 
specialties protocols supporting mainstream communication models remote procedure calls rpc messaging supported 
expected protocol transport kind strings message payload invocation activation styles supported peers mapped protocol 
protocols possible map invocation activation styles protocol course different trade offs 
interface peer invoke plugins interface plugins invoker interface requestor invoke requestor intercepts invocations intercepts invocations interface interface 
structure communication framework remote invocations abstracted patterns 
responsible building remote invocations runtime handing invocation sends network 
offers dynamic invocation interface similar offered oo rpc middleware corba rmi 
supports peer federation proxies act offering interfaces remote peer federation 
gets invocation performs invocation peer 
different different activation strategies see section 
responsible selecting correct 
checks possible dispatch invocation exported objects methods dispatched 
way developers ensure malicious invocations invoked remotely 
invocation chain client side server side 
invocation sides extended transparently new behavior 
interceptors add information federation invocation see 
client side add security attributes similar information invocation 
server side interceptor read handle information provided client 
request handlers handle synchronization issues client server side 
request handlers handle invocations invocation activation styles 
server side receives network events asynchronously 
multiple different time 
network events come different channels concurrently 
queues network events event loop 
actual invocations peers executed separate thread control 
access particular peer queued synchronized handled multithreaded 
results queued handed back receiving thread 
client side different styles asynchronous invocation result handling supported 
client server synchronous invocations client process block result option application blocks service incoming requests anymore 
implements variety asynchronous invocation styles common callback model 
request handlers event loop queues incoming outgoing requests 
client side invocations run separate thread control 
result arrives asynchronously obtained receiving thread 
done raising event event loop 
event executes callback specified invocation 
act map result invocation 
callback model implement different asynchronous invocation styles described 
send invocation forget result described pattern 
result needed want acknowledgment server 
patterns allow receive result asynchronously 
lets callback write result object subsequently polled client result 
propagates callback client informs client actively result 
invocation types remote invocation consists number elements 
firstly actual invocation data consists method name parameters 
secondly service name required unique enables select peer object 
thirdly protocol specific location information required case soap host port 
plus location information implement pattern unique particular service network 
invocation contain data 
contains additional parameters invocation information federation security attributes 
extensible peers 
invocation servicename act aor marshall method arguments marshall marshall result marshall 
invocation types sends message payload structured string tcl lists 
strings different different invocation types 
currently support request response error invocation types 
scheme extensible invocation type 
error message type implement pattern signal remoting specific error conditions framework 
shown different invocation types contain different information 
converting invocations byte streams transported network task pattern 
invocation classes shown able marshal information stored implement main part pattern framework 
federations peers federation concept manage remote objects remote object group federation members called peers 
federation central federation object manages federation data consistently 
allow peers connect federation federation accessible remotely 
federation special peer 
peers added removed federation 
federation accessed remotely federation proxy 
special enables peers access federation located machine 
federation proxy local object implements federation interface 
principle sends invocation network connected federation 
similar federations peers peer proxy 
peer proxy basically implements peer interface sends invocations connected peer holds 
peer proxy local peer interact remote peer part federation local lease peer lease peers send ping federations lookup federation lookup describes remote proxy remote proxy 
peer federations structure peer 
peer invoke local remote peers location information method send method 
federation peer structures shown 
federations peers properties semantic lookup service see section 
peers perform lookup federations peer queried 
peer activation loosely coupled remoting environment activation remote objects critical issue 
activation means creation initialization remote object serve requests 
peers long living persistent entities 
client dependent peers represent session data 
client dependent peer removed federation peer uses destroyed leaves federation 
cases ensure peers removed federation required anymore 
support activation see peer activated exported survives explicitly destroyed process stops 
class peer exported peer activated request arrives 
peer serves request de activated 
call activated peers apply pattern pre initialized pool reduce activation overhead instantiation 
factory operation provided federation create client dependent peers store session data 
remote environment unclear client dependent object needed anymore client explicitly destroys 
object accessed lease peer invoke invoker interface manage 
activation strategies implemented mean client forgotten clean instance requires longer computation time till access network latency causes delay client application crashed 
pattern helps federation decide certain client dependent peer required 
client dependent peer lease started created 
activating peer renew lease time time 
lease automatically renewed peer accessed 
client renew lease explicitly operation ping peer 
lease expires renewed client dependent peer removed federation 
pattern implementing management activation implemented different elements framework 
peers registered activation strategy 
different different activation 
appropriate chosen 
peer invocation federation control peer may invoked federation peer federations local object scope helper object peer created 
peers executed thread control threads tcl interpreter 
peers direct access main interpreter 
threaded peer interpreters synchronized implemented event loops interpreters 
peer threads post send result events main interpreter request handlers decide handle events 
words federation controls peers 
accessed outside federation permission federation 
course peers federation need declared publicly accessible 
instance federation peer accessible outside remote peers able join federation 
control remote federation access done see 
client side intercepts construction remote invocation adds federation information peer invoker interface requestor federations invoke invoke peer federation intercepts invocations send intercepts requests send writes federation information reads federation information invokes requestor 
peer federation interceptor structure 
server side information read 
remote peer allowed access invoked peer stops invocation sends client 
access granted 
peers federation access services equal rights 
default peer allowed freely send invocations peer federation access exported services 
service offered federation explicitly exported peer 
exported services accessed peers 
introducing particular peers peer types fine tune control elements accessed 
instance introduce interceptor access security credentials user name password sent invocation 
peers members multiple federations 
able access services peers federations peers federation 
optionally peers act bridge federation offering federation services context federation 
shows example sequence diagram invocation sequence static 
details marshaling shown 
activation strategies just require additional steps interacting object pool dealing lease 
semantic lookup service idea provide loosely coupled business services easy implement dynamic invocation services requires know object id operation name operation signature 
enable ad hoc connectivity information potential unknown runtime 
compile time approaches interface description languages 
dynamic required 
federation interceptor client peer send requestor async queued result callback send soap plugin client client request handler send transport server request handler async send soap plugin client queued invoke federation interceptor client static invoker invoke peer async queued transport queued result invoke queued result 
sequence diagram simple invocation static invoker pattern implemented discovery naming services 
provide necessary details remote object matching query 
problem designers lookup services know advance query look strategies applied retrieve results 
instance searching matching peers problematic regarding performance deterministically returning matching peer cause problems regarding load balancing 
propose lookup service extensible regarding provided information possible queries 
basic concept lookup service peer provides semantic metadata federation lookup service 
peers perform lookups lookup services federations 
rdf describe peers 
rdf supports semantic metadata web resources described ontology schema 
instance rdf schema owl support general relationships resources subclass 
developers rdf ontologies domains instance learning system probably ontology learning materials 
federation provides metadata peers list service names 
peer adds information exported methods interfaces activation strategy 
information clients 
currently implements distributed interface redland rdf library interface abstractions 
peers federation read write metadata repository 
query abstractions redland supports lookup specific resources sets resources generation streams iterators 
actual query constructed client side 
plan support powerful query engine top redland 
discussion approach service remote programming remote object groups called federations 
approach similarities web services systems coordination technologies spontaneous networking resolve apparent open issues approaches 
important design goal ease regarding development deployment remote services 
business scenarios certain level control required 
goal provided simple control model introduced concept peers join multiple federations 
services accessed remote peer exported 
interceptors fine tune remote access 
services metadata semantic lookup service 
deal unexpected lookup information query types services just expose additional metadata appropriate queries constructed client side 
design implementation known remoting patterns follow pattern language quite closely 
underlying parts framework exchanged oo rpc middleware implemented programming languages benefit pattern design 
currently working java implementation apache axis web service framework implementing protocol plug ins 
believe results generally applicable 
potentially deal scalability performance problems framework designed way internal protocols technologies exchangeable 
deployment model similarly simple web service models require know location known federation connect business service environment 
consider drawback incentive business scenarios 
note known federation just provide lookup service 
activities objects initially located quite similar lookups middleware environments corba web service frameworks different environments exploiting broadcasts similar means 
security aspect handled controlling objects join federation exported methods invoked 
peer executes interpreter thread control peers interfere 
security issues handled 
believe framework design usable business scenarios plan apply different applications 
especially want framework simple remoting infrastructure 
federation model simple role modeling top models workflows groupware applications implemented 
scripting language xotcl primarily designed component composition want framework distributed component gluing coordination especially context legacy system integration 
ingredients approach known approaches combine easy remoting concept 
framework extended add functionality 
liabilities current prototype implementation current prototype allow structured federations hierarchical federations implemented soap offers qos failover control features web server 
plan deal issues releases framework 

andrews curbera goland klein leymann liu roller smith thatte weerawarana 
business process execution language web services version 
www ibm com developerworks library 

arnold wollrath sullivan scheifler wald 
jini specification 
addison wesley 

beckett 
redland rdf application framework 
www redland opensource ac uk 

box layman mendelsohn nielsen thatte 
simple object access protocol soap 
www org tr soap 

brickley guha 
rdf vocabulary description language rdf schema 
www org tr rec rdf schema 

carriero gelernter zuck 
bauhaus linda 
ciancarini nierstrasz yonezawa editors object models languages concurrent systems proc 
ecoop workshop languages coordination parallelism distribution pages 
springer berlin heidelberg 

christensen curbera meredith weerawarana 
web services description language wsdl 
www org tr wsdl 


patterns results europlop focus group 
proceedings europlop germany july 

ciancarini 
coordination models languages software integrators 
acm computing surveys 

ciancarini tolksdorf 
pagespace architecture coordinate distributed applications web 
computer networks isdn systems 

fielding gettys mogul masinter leach berners lee 
hypertext transfer protocol 
rfc 

gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 

gelernter carriero 
coordination languages significance 
commun 
acm 

havi 
havi specification 
www havi org may 


web service conceptual architecture 
ibm whitepaper 

mcguinness van harmelen 
web ontology language owl 
www org tr rec owl features 

microsoft 
net framework 
msdn microsoft com 

neumann zdun 
xotcl object oriented scripting language 
proceedings tcl th usenix tcl tk conference austin texas usa february 

oasis 
uddi 
www uddi org 

schmidt stal rohnert buschmann 
patterns concurrent distributed objects 
pattern oriented software architecture 
wiley sons 

zdun 
object oriented remoting pattern language 
proceedings denmark sep 

zdun 
patterns asynchronous invocations distributed object frameworks 
proceedings europlop germany jun 

zdun 
remoting patterns 
published wiley sons wiley pattern series 


resource description framework rdf 
www org rdf 
