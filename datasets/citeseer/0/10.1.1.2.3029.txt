event detection algebra reactive systems jan carlson jan carlson se bj orn bjorn se department computer science engineering university sweden reactive systems execution driven external events system respond appropriate actions 
events simple systems supposed react sophisticated situations involving number simpler events occurring accordance pattern 
systematic approach handle type systems separate mechanism detecting composite events rest application logic 
event algebra composite event detection 
show number algebraic laws facilitate formal reasoning justify algebra semantics showing extent operators comply intuition 
implementation algebra identify large subset expressions detection performed bounded resources 
categories subject descriptors symbolic algebraic manipulation languages systems special purpose algebraic systems computer systems organization special purpose application systems real time embedded systems general terms theory performance algorithms keywords event detection event algebra resource ciency reactive systems 
real time embedded systems reactive meaning execution driven external events system react appropriate response 
applications system react complex event patterns called composite events permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
september pisa italy 
copyright acm 
single event occurrence 
systematic approach handle type systems separate mechanism detecting composite events rest application logic 
detection mechanism takes input primitive events detects occurrences composite events input application logic 
separation concerns facilitates design analysis reactive systems detection complex events formal semantics independent application remaining application logic free auxiliary rules information partially completed patterns 
example 
consider system input events including button pressure alarm temperature alarm desired reaction system perform action button pressed twice seconds alarms occurs 
achieved set rules specifies reactions events combined behaviour implements desired reaction 
alternatively separate detection mechanism define composite event corresponds described situation single rule stating occurrence trigger action approaches illustrated 

application logic 

event detection application logic implicit explicit detection composite events mechanism detect composite events constructed event algebra number operators expressions built represent event patterns interest 
propose event algebra specifically targets applications limited resources embedded real time systems 
number algebraic laws facilitate formal reasoning justify algebra semantics showing extent operators comply intuition 
identify criteria detection performed limited resources transformation algorithm lows expressions transformed form criteria met 
proposed algebra consists operators disjunction represents occurs denoted conjunction means events occurred possibly simultaneously denoted negation denoted occurs occurrence occurrence sequence occurrence followed occurrence temporal restriction occurs occurrence shorter time units 
example 
composite event previous example corresponds expression algebra 
operator semantics described informally specify handle situations occurrence participate occurrences composite event 
example occurences followed occurrences result occurrences may acceptable desirable applications memory requirements occurrence remembered forever increasing number simultaneous events means unsuitable cases 
common way deal introduce variants operators impose stronger constraints addition basic conditions give 
example possible sequence variant require addition occurring occurrence far 
variants defined means general restriction policies combination operator restriction policy yields operator variant specific semantics 
restriction applied individual operator occurrences expression existing event algebras restriction policies user algebra understand interference nested restrictions ect restriction di erent operator combinations 
developed novel restriction policy conceptually applied expression individual operators results algebra simpler intuitive semantics 
policy carefully designed applying top level semantically consistent applying recursively subexpressions allows cient implementation 
far know previous research event algebras addressed conformance algebraic laws 
particular event algebras suited systems limited resources typically exhibit unintuitive semantics poor algebraic properties 
proofs reduced left due space limitations reader referred full proofs 
rest organised follows section surveys related 
algebra defined section followed presentation algebraic properties section 
section presents implementation including analysis time memory complexity 
section describes semantic preserving transformation algorithm section concludes 

related operators algebra interval semantics restricted detection influenced area active databases 
snoop ode examples active database systems event algebra specify reactive behaviour 
systems di er primarily choice detection mechanism 
petri nets snoop uses event graphs 
ode event definitions equivalent regular expressions detected state automata 
area active databases event algebras formal semantics algebraic properties operators investigated 
resource ciency typically main concern 
common systems consider composite events instantaneous occurrence associated single time instant normally time detected 
galton shown results unintended semantics operation compositions 
example occurrence followed accepted occurrence composite event occurs occurrence core alternative interval semantics handle problems 
similar semantic base algebra extend restriction policy allow algebra implemented limited resources retaining desired algebraic properties 
interval event specification language snoop 
language targets real time systems particular achieves predictable resource requirements composite events explicit expiration time 
liu real time logic define system composite events expressed timing constraints handled general timing constraint monitoring techniques 
mechanism early detection timing constraint violation show upper bounds memory time derived 
middleware platforms event detection techniques handle high volumes event occurrences allowing consumers subscribe certain event patterns single event types 
sanchez event correlation language event expressions translated nested petri net automata 

event detection mechanisms described provide assistance developer terms algebraic properties event expression equivalence theory 
cases memory usage addressed example means restriction policies results complicated semantics 
knowledge representation techniques similar operators reason event occurrences 
detecting complex events occur focus express formally fact event occurred defining inferences rules type statements 
examples include interval calculus event calculus 
propose algebra large class composite events detected limited resources 
algebra defined simple declarative semantics number algebraic laws facilitate formal reasoning supports claim intuitive meaning operators valid complex nested expressions 
preliminary version algebra useful algebraic properties memory bound described previous 

declarative semantics simplicity assume discrete time model 
declarative semantics algebra dense time model restrictions prevent primitive events occur infinitely times finite time interval 
definition 
temporal domain set natural numbers 
primitive events assume system pre defined set primitive event types able react 
events external sampled environment originating system internal violation condition system state timeout detection mechanism distinguish categories 
primitive events useful associate additional information occurrence 
example occurrences temperature alarm carry measured temperature value responding action 
values manipulated algebra grouped forwarded part system reacts detected events 
definition 
finite set identifiers represent primitive event types interest system 
identifier dom denote domain values taken 
occurrences primitive events assumed instantaneous atomic 
algebra represented event instances contain event type occurrence time value 
formally represent primitive instance singleton set allow primitive complex instances treated uniformly 
definition 
dom singleton set primitive event instance 
occurrences certain event type form event stream 
allow simultaneous occurrences general occurrences primitive event type assumed non simultaneous 
definition 
primitive event stream set primitive event instances identifier di erent times 
set identifiers value domains capture static aspects system 
instances event streams dynamic concepts describe happens particular scenario 
interpretation formal representation single scenario describes possible ways primitive events occur 
definition 
interpretation function maps identifier primitive event stream containing instances identifier example 
dom dom high low 
low examples primitive event streams possible interpretation 
composite events composite events represented expressions built identifiers operators algebra 
definition 
event expression 
event expressions event expressions 
extend concepts instances streams composite events primitive 
way instances constructed defined algebra semantics 
define structure 
definition 
event instance union primitive event instances informally instance composite event represents primitive event occurrences caused occurrence composite event 
semantics associate instance interval definition 
definition 
event instance define start min max interval start thought smallest interval contains occurrences primitive events caused occurrence note primitive event instance event instance primitive instance start 
example 
low 
event instance start 
need definition general event streams 
represent instances composite event 
definition primitive event stream event stream just names suggest 
definition 
event stream set event instances 
naming convention event streams event expressions 
lower case letters event instances 
general belongs event stream event stream defined semantics interpretation provides occurrences primitive events mapping identifier event stream role algebra semantics extend mapping composite events defined event expressions 
functions event streams form core algebra semantics define basic characteristics operators 
definition 
event streams define dis con neg start start seq tim start semantics algebra defined recursively applying corresponding function operator expression 
definition 
meaning event expression interpretation defined follows dis con neg seq tim simplify presentation notation choice obvious arbitrary 
definitions result algebra simple semantics intuitive algebraic properties di cult implement limited resources 
deal resource limitations define formal restriction policy require implementation compute valid restriction event stream specified algebra semantics 
formally restriction policy defined relation rem rem means valid restriction alternatively seen non deterministic restriction function family acceptable restriction functions 
reasons repeatability typically desirable implementation algebra deterministic 
theoretical point view prefer leave detailed design decisions possible open ensure implementation consistent restriction policy relation guaranteed properties described 
basis restriction policy restricted event stream contain multiple instances time ciency issues 
informally instances time restriction policy keeps exactly maximal start time 
definition 
event streams rem holds conditions hold 

start start 
computing event expression implementation algebra computes event stream rem holds 
user algebra means time occurrences detected 

properties aid user algebra selection algebraic laws 
laws facilitate reasoning formally informally algebra system embedded 
show extent operators behave intuition 
define expression equivalence 
definition 
event expressions define hold interpretation trivially equivalence relation 
theorem shows satisfies substitutive condition defines structural congruence event expressions 
theorem 
proof 
follows straightforward way definitions 
laws formulated 
extensive set laws formal proofs reader refered 
theorem 
event expressions laws hold 
laws describes temporal restrictions propagated expression 
section laws define algorithm transforming event expressions equivalent expressions detected ciently 
theorem 
event expressions laws hold 
min laws identify expressions semantically equivalent order handle resource limitations expect implementation algebra compute event stream rem computing 
result detecting yield di erent stream detecting consequently clarified extent laws applicable restriction applied 
theorem 
event expressions rem holds rem holds 
ensures result implementation detecting valid result long reasoning algebra semantics restriction policy details particular detection algorithm equally valid equivalent expressions 
investigate relation equivalent expressions restriction applied notice restriction policy implies detected event streams equivalent expressions contain instances corresponding start times 
means part system responds detected event occurrences notified time equivalent expressions possibly di erent values attached detected occurrences 
formally express follows 
definition 
event streams define hold holds start start trivially equivalence relation 
theorem 
event streams rem rem holds proof 
take second condition definition rem exists start start 
start start 
third condition definition rem implies means start start start start start 
start time 
trivially opposite holds 
corollary 
rem rem ensures implementation consistent restriction policy instances detecting start times 
means part system responds detected event occurrences notified time equivalent expressions possibly di erent values attached detected occurrences 
order get desired ciency subexpressions expression detected cient way restriction policy applied recursively subexpression 
scenario normally require user algebra understand restrictions di erent subexpressions interfere ect di erent operator combinations 
avoid operators restriction policy carefully designed support theorem 
informally states restricting subexpressions expression gives result valid case restriction applied top level 
theorem 
rem rem holds event stream implications hold rem dis rem dis rem con rem con rem neg rem neg rem seq rem seq rem tim rem tim proof 
proof negation refer full proof 
assume rem neg 
neg subset requirement definition rem exists start start exist start start contradicts fact neg 
exist neg neg satisfying condition definition rem 
take arbitrary neg 
exists start start 
exists start start fact contradicts neg 
exist neg 
means exists start start start start satisfies second constraint definition rem 
rem neg ensures instances di erent times 
shows constraints definition satisfied rem neg holds 

event detection algorithm section imperative algorithm event expression computes event stream rem holds 
section denotes event expression detected 
numbers 
assigned subexpressions bottom order denote subexpression number consequently presents algorithm 
algorithm executed time instant computes current instance current instances primitive events stored information past 
operator occurrence expression requires state variables variables indexed variable store current instance am contains output algorithm execution 
auxiliary variables store information past needed detect properly 
single event instance stored stores time instant contains set event instances 
symbol represent non occurrence define start simplify algorithm 
algorithm designed detection arbitrary expressions main loop selects dynamically part algorithm execute subexpression 
systems event expressions interest static known time development main loop unrolled top level conditionals indices statically determined 
concrete example 
algorithm correctness relation algorithm algebra semantics described previous sections established 
purpose need formalise algorithm output constructing corresponding event streams 
definition 
define denotes value executing algorithm times due space limitations give informal description operator refer formal proofs 
current instance current instance 
start start ak ak start start ak ak start ak start ak start ak ak foreach start ak start start algorithm detecting event expression initially disjunction disjunction operator fairly simple requires auxiliary variables 
occur time restriction policy requires latest start time selected 
start times implementation gives precedence right subexpression 
fact implementation disjunction operator corresponds declarative semantics restriction respect instances detected subexpressions formulated rem dis 
conjunction conjunctions necessary store instance maximum start time far subexpressions 
start time instant element maximum start time set empty 
corresponding property holds 
conditionals conjunction part algorithm correctly update state time instant 
new state construct current output instance conjunction 
current instance 
current instance 
start start current instance 
start start start statically simplified algorithm detecting 
initially 
negation semantics negation operator instance instance invalidated instance occurring interval 
current instance invalidated invalidated instance maximum start time occured far 
su cient store single start time time trivially known time current instance start time instant maximum start time elements set empty 
conditional updates state valid time instant 
updated variable check current instance invalidated 
sequence sequence operator requires complex algorithm 
reason order detect sequence correctly store instances occurs start time instance determines stored instances combined form instance hold start time instant maximum start time elements set empty 
start start conditional selects best match current instance instances stored creates output instance matching instance 
second conditional state updated 
ensure contain fully overlapping instances instance checked added 
temporal restriction temporal restriction fairly straightforward implement requires auxiliary state variables 
putting theorem establishes correctness algorithm stating subexpression including detected instances correspond valid restriction 
theorem 
rem holds 
proof 
assumption interpretation correctly represents real world scenario 
rem holds trivially 
ak foreach start ak start start foreach algorithm assume rem holds discussion rem dis 
subexpressions numbered bottom assumption rem rem holds 
theorem rem dis holds means rem holds 
similar proof constructed operators 
induction theorem holds 
memory complexity instances fixed size instance subexpression contains primitive instances identifier occurrence assuming elements value domains constant size size single event instance bounded 
quick analysis algorithm reveals disjunction conjunction negation temporal restriction event expression requires limited amount storage 
storage required sequence operator depends maximum size bound exists general case 
important class sequence expressions detection algorithm redefined ensure limited memory time complexity 
sequence know maximum length instances expressed limits number instances stored order detect sequence correctly 
informally start instance time units back time need store instance ends earlier store maximum start time 
instances point time need store original algorithm 
improved algorithm detecting bounded memory 
access current time instant 
state similar state sequences original algorithm contains su variable original version 
remaining elements single element maximum start time stored size exceeds type sequences detected limited memory 
large values example systems fine granularity timebase resource bound sufficient practice 
bound large occurs frequently 
information minimum separation time primitive events minimum time transform max transform transform transform transform transform transform transform transform min transform transform transform transform transform min transformation function tive occurrences event precise worst case memory estimates derived 
time complexity result instances having fixed size assigning instance variable constant operation proportional instance size 
operator contributes factor complexity algorithm 
sequences straightforward representation variables gives linear time complexity finding best matching instance respect size limit variable 
gives total complexity mn number subexpressions max maximum size limit variables 
due particular characteristics elaborate implementation possible best match logarithmic time updates bounded factor variable sized instances details see 
implementation total complexity mn max log 

transformation algorithm section describes event expressions automatically transformed equivalent expressions allow cient detection 
transformation algorithm algebraic laws describing temporal restrictions propagated expression theorem 
simplify presentation extend algebra syntax constructs 
symbol added temporal domain allow temporally restricted unrestricted expressions treated uniformly 
formally define improved sequence algorithm defined sequences introduce notation label sequences information 
transformation algorithm recursive function takes expression time input returns transformed expression time 
function defined 
input time represents tempo ral restriction applied expression changing meaning expression 
returned time represents temporal restriction applied transformed expression changing meaning 
meaning expression unchanged algorithm sequences labeled correctly specified theorem 
proof reader refered 
theorem 
transform sequences labeled form holds 
trivially time complexity transformation algorithm linear respect size sequence labeled consequently correctly detected limited memory 
example 
transform means expression detected limited memory 
note temporal restriction left subexpression negation propagated right subexpression making detectable limited memory 

fully formal event algebra operators disjunction conjunction negation sequence temporal restriction 
allow cient implementation formal restriction policy defined 
restriction policy applied expression individual operator occurrences means user algebra required understand ects nested restrictions 
number algebraic laws facilitate formal reasoning justify algebra semantics showing extent operators comply intuition 
imperative algorithm computes restricted version event stream specified algebra semantics accordance restriction policy 
user algebra means time occurrences composite event detected algorithm 
criteria detection performed limited resources identified described algorithm expressions transformed meet criteria 
ongoing includes investigating combine algebra languages specifically target reactive systems particular esterel frp timber 
considering extending algebra delay operator allow definition timeout events adding support manipulating values associated event occurrences 

allen ferguson 
actions events interval temporal logic 
journal logic computation oct 
berry 
esterel language primer 
cma inria sophia antipolis france release edition may 
carlson 
intuitive resource cient event detection algebra 
licentiate thesis june 
university sweden 
carlson 
interval algebra restricted event detection 
int 
workshop formal modeling analysis timed systems formats volume lecture notes computer science 
springer verlag sept 
carlsson kieburtz 
semantic layers timber 
proceedings asian symposium programming languages systems volume lecture notes computer science beijing china nov 
springer verlag 
chakravarthy mishra 
snoop expressive event specification language active databases 
data knowledge engineering 
galton 
approaches event definition 
proc 
database expert systems applications th int 
conference dexa volume lecture notes computer science 
springer verlag sept 
dittrich 
events active object oriented database system 
proc 
st intl 
workshop rules database systems rids edinburgh uk sept 
springer verlag 
gehani jagadish shmueli 
compose system composite specification detection 
advanced database systems volume lecture notes computer science 
springer 
kowalski sergot 
logic calculus events 
new generation computing 
liu mok 
unified approach specifying timing constraints composite events active real time database systems 
th ieee real time technology applications symposium pages 
ieee june 
mellin 
resource predictable cient monitoring events 
phd thesis department computer science university june 
nilsson courtney peterson 
functional reactive programming continued 
proceedings acm sigplan haskell workshop haskell pages new york oct 
acm press 
sanchez sipma zhang dill manna 
event correlation language semantics 
embedded software third international conference volume lecture notes computer science pages 
springer 
wan taha hudak 
event driven frp 
proceedings th international symposium practical aspects declarative languages volume lecture notes computer science 
