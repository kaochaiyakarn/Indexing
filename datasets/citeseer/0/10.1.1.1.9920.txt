decidability model checking infinite state concurrent systems javier esparza institut fur informatik technische universitat munchen 
munchen germany study decidability model checking problem linear branching time logics models concurrent computation petri nets basic parallel processes 
techniques verification concurrent systems proceed exhaustive traversal state space 
inherently incapable considering systems infinitely states 
new methods developed order problem 
verification problems restricted infinite state models shown decidable 
results classified showing decidability equivalence relations showing decidability model checking different modal temporal logics 
contribute second group 
model checking problem studied far infinite state models context free processes pushdown processes petri nets 
models sequential computation explicitely models concurrency 
modal mu calculus powerful modal temporal logics commonly verification known decidable context free processes pushdown automata 
proof complicated reduction validity problem monadic second order logic successors 
simpler algorithms alternation free fragment mu calculus 
results extended context free processes pushdown processes 
model checking problem petri nets studied howell observed certain linear time temporal logic undecidable conflict free petri nets fairly small class 
logic interpreted infinite occurrence sequences net consists atomic sentences usual boolean connectives operator eventually 
atomic sentences type ge intended meaning current marking number tokens place done author university edinburgh 
greater equal type fi intended meaning transition sequence 
petri net said satisfy formula infinite run satisfies 
subsequent howell yen showed model checking problem positive fragment logic negations applied atomic sentences reduced reachability problem decidable 
showed positive fragment gf infinitely operator decidable 
results deep fragmentary 
logics chosen ad hoc way main interest authors study particular problems main goal study fairness problems logics 
particular branching time logics received little attention 
logics contain ad hoc set atomic sentences impact decidability particular choice cleared 
goal offer systematic global picture decidability issues concerning model checking infinite state concurrent models linear time branching time logics 
recall results obtained author complement new ones 
consider interleaving semantics different models labelled petri nets called just petri nets rest section basic parallel processes 
petri nets powerful model represent analyse large variety systems 
natural model concurrent computation lying strictly petri nets turing machines proposed far context sensitive grammars lie strictly petri nets turing machines model concurrency 
decidability results petri nets significant easily generalized undecidability results conclusive problem undecidable arbitrary petri nets decidable relevant net classes 
study interleaving semantics seen small subclass petri nets 
weak process algebra processes built action prefix nondeterministic choice parallel composition communication recursion 
argued reasonable infinite state model concurrency computing power 
undecidability results expected significant 
organised follows 
section define petri nets 
section recalls results linear time logics 
section deals branching time logics 
sections consider action logics atomic sentences 
section investigates results change atomic sentences added 
models notations basic definitions introduce petri nets basic parallel processes models study 
need notions transition systems 
transition systems labelled transition system set actions act consists set states relation gamma theta action act path infinite sequence gamma 
gamma 
finite sequence gamma 
gamma gamma 
successors 
transition system rooted distinguished initial state 
run rooted transition system path starts initial state state reachable appears run 
language set sequences actions obtained dropping states runs language may contain finite infinite words 
proofs consider states transition system strong bisimulation 
relation theta strong bisimulation act ffl gamma 
gamma 
ffl gamma 
gamma 
states strongly bisimilar denoted strong bisimulation definition extended states different transition systems putting side side considering single transition system 
petri nets labelled net ffl disjoint finite sets ffl theta theta weight function ffl surjective mapping act act set actions surjectivity assumed convenience 
elements called places transitions respectively 
places transitions generically called nodes 
marking mapping marking enables transition place enabled occur occurrence leads successor marking defined place gamma marking called dead enables transition labelled petri net pair sigma labelled net marking rooted transition system sigma markings states initial state 
action act define gamma 
enables transition labelled marking reached occurrence language petri net language transition system 
unlabelled petri nets obtained labelled ones dropping labelling function 
equivalently think unlabelled petri nets labelled petri nets labelling function assigns transition name 
convention definition transition system language petri net carries unlabelled petri nets 
basic basic parallel processes class basic parallel process bpp expressions defined syntax inaction process variable delta action prefix choice merge belongs set act actions 
bpp expressions containing occurrence choice operator called basic parallel process expressions 
bpp family recursive equations fx def ng distinct bpp expressions containing variables fx assume variable occurrence expressions guarded appears scope action prefix 
variable singled leading variable def called leading equation 
rooted transition system bpp fx def ng bpp expressions variables states leading variable initial state 
act transition relation gamma 
relation satisfying rules delta gamma 
gamma 
gamma 
gamma 
gamma 
gamma 
gamma 
def gamma 
gamma 
gamma 
gamma 
subset actions relation gamma 
defined gamma 
bpp normal form expression right hand side equation form delta ff delta ff expression ff merge process variables 
shown bbp strongly bisimilar bpp normal form leading variables strongly bisimilar 
bpp normal form translated labelled petri net 
translation graphically illustrated means example 
net place variable subexpression delta ff defining equation transition added having place preset variables appear ff postset 
variable appears times ff arc leading weight token put place corresponding leading variable 
easy see exists isomorphism reachable parts transition systems bpp normal form associated petri net 
follows easily translation ffl transitions petri nets corresponding normal form exactly input place ffl places normal form output transition ffl arcs leading places transitions weight 
fig 
bpp corresponding petri net linear time logics contents section taken 
show model checking problem petri nets closed formulas linear time mu calculus decidable 
linear time mu calculus powerful linear time logic usual linear time operators eventually expressed 
describe briefly refer reader information 
linear time mu calculus syntax oe oe oe oe oe oe ranges set act actions set propositional variables 
free bound occurrences variables defined usual 
formula closed variable occurs free 
formulas built grammar subject monotonicity condition free occurrences variable lie scope number negations 
act act set finite infinite words act act act act valuation logic assigns variable set words act denote valuation agrees word oe act oe denotes action oe oe denotes word 
notations denotation koek formula oe set words act inductively defined rules kzk oek act gamma koek koe koek oek foe act oe oe koek kz oek fw act koek kz oek greatest fixpoint function assigns set words set koek denotation closed formula oe independent valuation symbol koek 
rooted transition system satisfies closed formula oe linear time run satisfies oe 
accordingly petri net sigma satisfies oe sigma koek sigma denotes language transition system 
notice definition satisfaction case sigma satisfies formula negation 
definition denotation formula set finite infinite words 
choice due fact wish define satisfaction sigma koek wish define sigma set finite infinite words order account deadlock properties 
particular definition express act denotation formula defined set infinite words instance 
define model checking problem linear time mu calculus petri nets follows petri net sigma closed formula oe determine sigma satisfies oe 
problem proved decidable 
just sketch proof 
decision procedure automata theoretic characterisation logic 
shown closed formula oe exists finite automaton oe buchi automaton oe accept finite infinite words oek respectively 
easy see sigma satisfies oe sigma oe sigma oe 
order decide properties new petri nets sigma theta sigma oe sigma theta sigma oe constructed having properties sigma theta sigma oe sigma sigma oe sigma theta sigma oe sigma sigma oe 
results proved ffl sigma oe holds petri net sigma theta sigma oe run contains infinitely occurrences transitions set set efficiently computed sigma oe ffl sigma oe petri net sigma theta sigma oe reachable dead marking marks place set set efficiently computed sigma oe existence run shown decidable valk 
yen shows decidable exponential space 
existence dead marking decided solving exponential number instances reachability problem 
reachability problem decidable known require exponential space algorithms known far primitive recursive 
branching time logics decidability border changes drastically move linear time branching time logics 
seen powerful linear time logic linear time mu calculus decidable powerful model petri nets 
section shall see weak branching time logic ise undecidable weak model computation 
smooth approach result shall prove modal undecidable 
introduce modal mu calculus briefly details 
modal mu calculus modal mu calculus syntax linear time mu calculus just substituting oe 
interpreted labelled transition systems 
gamma 
act labelled transition system 
valuation assigns variable subset states denotation formula subset states defined rules kzk oek gamma koek koe oe koe koe fs gamma 
koek kz oek fa koek loosely speaking state belongs reachable means action satisfies oe 
abbreviations true oe oe oe oe oe oe oe hai oe case linear time mu calculus denotation closed formula independent valuation drop index observe rooted transition system satisfies closed formula oe denotation oe contains initial state 
modal mu calculus property states transition system strongly bisimilar satisfy exactly closed formulas logic 
undecidability modal mu calculus prove undecidability model checking problem means reduction halting problem counter machines precisely halting problem counter machines counters initialised 
counter machine tuple fq fc fffi ffi counters states initial state unique halting state ffi transition rule state 
states divided types 
states type transition rules form goto states type ii transition rules form goto gamma goto configuration tuple state natural numbers indicating contents counters 
interested behaviour machine counters initialised 
define initial configuration 
computation sequence configurations starts initial configuration inductively defined expected way transition rules 
notice computation unique state transition rule 
say halts computation finite equivalently computation contains configuration state undecidable counter machine halts 
counter machine reduction constructs leading variable formula halt modal mu calculus halts satisfies halt considering turing powerful model ccs problem trivial just faithful model counter machine occurrence action halt signals termination take halt true expresses eventually performs halt 
powerful turing machines 
idea reduction construct simulates counter machine weak sense may execute runs honest runs simulate computation counter machine rest dishonest runs instance counter decreased 
replace formula halt complicated formula expressing certain honest run eventually executes halt 
problem having weaker simulation compensated stronger formula case counter machine halts bpp satisfies new formula 
weak model counter machine 
counter containing number modeled copies parallel process def dec delta action dec models decreasing counter 
notice enforce synchronisation action dec change state counter machine 
sense formula halt charge modelling synchronisations 
states counter machine modelled associated instruction 
state type modelled processes sq def delta sq def delta state type ii modelled processes sq def delta sq def delta actions model fact counter machine enters leaves state respectively 
notice model fact state states reached order model choice need choice operator 
halting state modelled processes sq def delta sq def halt delta define follows sm def sq sq def sm follows easily operational semantics reachable state strongly bisimilar unique expression form sm jm def def 
instance initial state strongly bisimilar sm gamma expressions indices say correspond configurations counter machine 
nonzero index indicates state machine indices indicate values counters 
say states expression form meaningful 
mapping assigns meaningful state corresponding configuration counter machine 
run gamma 
gamma 
gamma 
delta delta delta honest prefix satisfying property image subsequence meaningful states prefix yields computation counter machine loosely speaking honest run simulates computation counter machine simulation terminates execution halt may behave arbitrarily 
clear definitions honest runs run honest 
construct formula mu calculus expressing certain honest run eventually executes halt 
state type define open formula oe hout state type ii define oe dec false hout hin hout hin formula expresses action dec enabled models counter empty execution sequence models transition state state formula holds execution sequence dec models decreasing counter moving state formula holds 
define halt true oe loosely speaking run satisfies formula eventually executes action halt prefix preceeding occurrence halt concatenation small sequences actions satisfies formulas oe small sequences simulates step counter machine 
theorem model checking problem closed formulas modal mu calculus undecidable 
proof counter machine initially empty counters 
satisfies formula halt iff honest run eventually executes action halt 
honest runs faithfully simulate computation case iff halts 
theorem may surprising modal mu calculus known extremely powerful logic may expect undecidable simple processes 
show undecidability result holds small subset modal mu calculus 
unified system branching time unified system branching time ub logic introduced ben ari manna pnueli state oriented semantics terms kripke structures 
particular ub includes operator eoe meaning oe holds successor current state 
action oriented model version ub operator relativised action operator oe meaning oe holds successor reached performing allow atomic sentence true holds state 
changes syntax ub oe true oe oe oe oe ef oe ub fragment computation tree logic turn easily embedded modal mu calculus see instance 
interpret ub formulas rooted labelled transition system 
denote state satisfies formula oe oe 
satisfaction relation inductively defined follows true oe iff oe oe oe iff oe oe oe iff gamma 
oe ef oe iff path oe iff path oe define dual operators ag ef af rooted transition system satisfies formula oe initial state satisfies oe 
model checking problem formula oe bpp petri net consists deciding initial state associated transition system satisfies formula 
rest section consider different fragments ub denote ef 
syntax ef obtained syntax ub removing operator implicitely dual af 
ef express properties form oe holds oe holds ef oe properties eventually oe holds af oe 
fragment called ub gamma syntax obtained syntax ub removing operator ef implicitely dual ag 
prove results ffl model checking problem undecidable 
ffl model checking problem ef petri nets undecidable 
ffl model checking problem ef decidable pspace hard 
model checking problem ef decidable class petri nets set reachable markings effectively semilinear concept defined 
undecidability proceed reduction halting problem counter machines 
counter machine construct weak model formula oe satisfying properties exists run states reached satisfy oe states reached run satisfy oe run honest 
see oe undecidability result follows easily 
define formula halt af oe halt true satisfies halt runs satisfy oe state contain state satisfying halt true 
runs exist honest honest runs faithfully simulate behaviour counter machine counter machine terminates 
conversely assume counter machine terminates 
run model honest visits state satisfy oe case machine terminates run contains state satisfying halt true satisfies halt second case run directly satisfies halt unfortunately possible find formula oe weak model counter machine modal mu calculus 
essence problem easier see simpler process def def delta def delta assume simulating weak sense certain system 
assume honest runs prefixes satisfy gamma rj number prefix 
easy see formula oe ub satisfies conditions 
reason run gamma 
gamma 

intermediate states satisfy exactly properties formula ub distinguish honest dishonest runs 
rest section devoted finding weak model counter machine formula oe exists 
shall formulas form true 
notation define en true en read enabled 
solution 
idea introduced yoram 
allowed split actions definition process things change 
define def def delta delta delta def delta delta delta define honest runs satisfying gamma 
formula oe holds states run performs sequence honest 
oe en en en en en en en en en en en en action occur occurs state reached enables state satisfy oe similarly prove occur 
incidentally reader check splitting 
power splitting identified rest straightforward 
refine model way 
second weak model 
counter modelled def dec delta dec delta dec delta state type ii modelled sq def delta sq def delta delta delta equations replace consistency actions split 
definition formula oe convenient introduce notations 
order allow compact representation formula rename action halt define fout fdec dec mg notice actions dec belong actions en en en en words en states actions enabled sequence enabled actions disabled 
formula oe disjunction formulas 
state type state oe contains disjunct form en state type ii oe contains disjuncts 
en dec en en en en second en dec en en dec en en dec en en dec en dec en dec en dec difficult see exists run states visits satisfy oe run simulates computation counter machine case terminates executes sequence halt prove lemma states run model satisfy formula oe run honest 
proof sm meaningful state run state satisfies oe assume halting state 
show meaningful state run corresponds configuration computation counter machine 
concretely examine actions enabled check leads state satisfying oe examine actions enabled check leads state satisfying oe 
terminate sequence actions leading meaningful state determined 
counter corresponding state appears possible cases type type ii type ii 
procedure repetitive requires consider different cases deal detail case case form goto gamma goto contains copies process 
actions enabled actions dec actions counters nonempty particular action dec enabled 
state reached occurrence actions exhibit disjunct oe satisfied items marked ffl feature easy deduce satisfy disjunct oe items marked gamma 
actions lead states enable action sequence dec actions lead states enable dec action action ffl action leads state sm delta satisfying en dec en 
actions enabled actions dec actions nonempty counters 
action leads state enables actions 
dec actions lead states enable dec action action actions lead states enable dec action ffl action leads state sm delta satisfying en dec en 
actions enabled actions dec actions nonempty counters 
action leads state enables actions lead states enable different actions sequence dec actions lead states enable dec action different dec ffl action leads state sm delta satisfying en dec en 
actions enabled actions dec actions nonempty counters 
action leads state enables actions lead states enable different actions sequence dec actions lead states enable dec action different dec enabled 
ffl action leads state sm satisfying en dec en 
meaningful state 
run executes sequence faithfully simulates transition keeping counter 
concludes discussion case 
cases proceed similarly 
possible sequence case possible sequence case dec dec dec sequences faithfully simulate computation counter machine 
theorem model checking problem undecidable 
proof argument section prove machine terminates iff model satisfies formula halt undecidability ef arbitrary petri nets 
result obtained 
briefly sketch proof 
prove undecidability reduction containment problem 
instance problem triple sigma sigma sigma sigma petri nets having number places bijection sets places sigma sigma mapping extended bijection markings obvious way 
question decide reachable marking sigma reachable marking sigma rabin showed problem undecidable 
proof 
look proof shows safely assume transitions sigma sigma input place arcs weight 
sigma sigma instance restricted containment problem sets sigma sigma assume loss generality sets nodes sigma sigma disjoint 
construct unlabelled petri net sigma 
description sigma mistake corrected 
construction takes place steps 
step add new places transitions arcs 
represent node place transition having input output sets nodes wish give name node write arcs sigma going weight notation specify time set nodes weighting function 
steps ffl add sigma sigma ffl add places 
ffl add transitions ab fag fbg bc fbg fcg 
put token tokens ffl place sigma add transition fs cg fcg 
ffl place added far add transition fsg fsg 
sigma simulates sigma transition ab occurs 
transition sigma occur anymore sigma simulates sigma transition bc occurs 
pairs tokens may extracted simultaneously place image 
dead conjunction formulas en transition sigma 
marking satisfies dead iff dead enable transition 
proved triple sigma sigma instance containment problem iff sigma satisfies formula ag en tab tab ef dead formula states sequence form oe gamma 
ab gamma 
extended sequence oe gamma 
ab gamma 
gamma 
dead marking 
place transition fsg fsg dead reachable marking sigma puts token tokens 
sequence generates marking sigma occurrence bc empties sigma sigma formula holds reachable marking sigma reachable marking sigma converse direction proved similarly 
decidability ef petri net classes prove decidability model checking problem ef petri nets reachability relation effectively semilinear 
introduce notion 
markings petri net places represented vectors natural numbers th component vector indicates number tokens th place fixed order places 
identify set reachable markings set vectors 
set elements linear exist fv semilinear union finite number linear sets 
easy see semilinear set expressed presburger arithmetic order theory addition see instance 
semilinear set exists formula presburger arithmetic free integer variables holds assignment reachability relation net set pairs markings reachable reachability relation semilinear denote reach formula presburger arithmetic expressing vectors free variables 
reachability relations class petri nets effectively semilinear semilinear sets algorithm net class computes reach 
prove decidability reduce problem problem determining formula presburger arithmetic true decidable 
theorem class nets reachability relations effectively semilinear 
model checking problem ef decidable 
proof sigma petri net oe formula ef 
prove set reachable markings satisfy oe expressed formula oe presburger arithmetic effectively computable 
proof structural induction syntax ef ffl oe true 
set reachable markings satisfy oe set reachable markings sigma effectively semilinear hypothesis 
take true reach assign 
ffl oe 
oe 
ffl oe oe oe oe oe oe 
ffl oe 
marking satisfies enables transition label marking reached executing transition satisfies 
easily encoded presburger arithmetic 
instance places sigma assume input places transition output places set variables corresponding places formula gamma gamma encodes markings enable occurs transformed markings satisfying 
ffl oe ef 
fef reach 
check sigma satisfies formula oe suffices decide formula true 
proved reachability relations petri nets corresponding normal form effectively semilinear property holds persistent reversible petri nets 
particular case obtain lower bound theorem model checking problem ef pspace hard finite state 
proof proof straightforward reduction problem deciding quantified boolean formula free variables evaluates true known pspace complete 
consider loss generality quantified boolean formula alternating quantifiers phi delta delta delta oe delta delta delta oe delta delta delta boolean formula conjunctive normal form 
construct polynomial space bpp leading variable formula true phi ef phi true iff satisfies true phi 
oe cm clause 
clause define bpp true def true delta variable set clauses oe contain literal set clauses true set true set clauses contain literal set clauses true set false 
define def assign delta true assign delta false true def prop delta true false def prop delta true process perform assign action models setting true false respectively 
set true clauses contain literal true clauses contain literal true 
propagation truth value clauses contain modeled action prop define leading variable bpp follows def equations bpp recursive finite state process 
construct formula true phi 
define auxiliary formula assigned en prop en prop en assign en assign loosely speaking assigned expresses variables variable case set true false values propagated prop actions longer enabled variables assigned truth value assign actions longer enabled 
define formula true phi follows ef assigned ag assigned ef assigned ef assigned en true en true formula expresses truth value truth value exists truth value clause formula oe true 
satisfies formula iff formula phi true 
results easy show model checking problem formulas ef nested temporal operators arbitrary np complete 
conjecture problem formulas nested temporal operators complete th level polynomial time hierarchy model checking problem arbitrary formulas pspace complete yield exponential time upper bound 
known checking validity presburger arithmetic requires doubly exponential nondeterministic time result improve upper bound derived proposition 
adding atomic sentences study impact decidability caused addition certain atomic sentences logics studied far 
atomic sentences understand propositional constants semantics determined priori valuation 
mu calculi atomic sentences equivalent free variables 
logic ub described section atomic sentence true 
linear time logics add atomic sentences weak linear time temporal logic show exist simple valuations model checking problem undecidable 
precisely show valuations possible construct formula halt equivalent formula halt ef true transition systems 
syntax logic oe true en oe oe oe oe oe action act en atomic sentence 
logic interpreted paths labelled transition system 
consider valuation assigns en paths start state enables negation conjunction true interpreted usual 
path satisfies oe contains suffix satisfies oe 
labelled transition system initial state satisfies formula oe runs paths start satisfy oe 
particular transition system satisfies en satisfies formula en ub 
define formula oe logic result replacing occurrence expression en formula oe sentence en 
construct formula halt oe en halt transition system satisfies halt run visits state satisfies oe en halt 
clearly meaning formula halt af oe en halt 
follows model checking problem linear temporal logic undecidable 
notice addition atomic sentences dramatic effect model checking problem closed formulas linear mu calculus arbitrary petri nets decidable model checking problem weak temporal logic undecidable 
model checking petri nets common logics atomic sentences express properties markings visited path 
instance sentence assigned set paths starting markings put tokens place easy see sentences simulate sentences en undecidability results hold 
branching time logics theorem proved section logic ef true atomic sentence 
decidability result holds add atomic sentences long restrict valuations expressible presburger arithmetic valuations assign sentence set states expressible presburger arithmetic 
particular add sentences form delta matrix integers vector marking variables vector integers 
example formula extension ag ef expresses marking puts total tokens places successor puts tokens place case petri net derived proves reachability relation set parikh mappings sequences actions executed net 
sequence oe act parikh mapping oe assigns action number times oe 
result allows extend ef keeping decidability 
instance possible operator operators 
effectively semilinear set parikh mappings introduce operator ef oe holds marking exists marking satisfies oe reached execution sequence actions parikh mapping belongs ag defined similarly 
studied model checking problem petri nets basic parallel processes models concurrent computation different temporal logics 
gamma gamma gamma gamma hennessy milner logic ef ub ctl ctl modal mu calculus fig 
branching time logics petri nets powerful model weak 
studied weaker model basic parallel processes 
table summarizes results 
en denotes linear time logic having single modal operator atomic sentences form en see section 
ef pres denotes branching time logic having ef modal operator atomic sentences evaluated sets expressible presburger arithmetic see section 
petri nets linear linear time mu calculus time en branching time ef ef pres relevant existence decidability gap linear time branching time logics 
linear time mu calculus decidable expressive model petri nets consider closed formulas undecidable weak model 
linear time mu calculus powerful linear time logic strictly expressive ltl linear time logic commonly verification 
contrary weak branching time logic 
shows hierarchy branching time temporal logics order decreasing expressive power considered action logics 
logics strictly expressive 
decidability gap exist sequential models context free processes pushdown automata 
modal mu calculus decidable modal mu calculus known strictly expressive linear time mu calculus 
undecidability result logic remains investigated ef 
shown undecidable arbitrary petri nets decidable classes nets semilinear reachability relations 
include persistent reversible nets see 
studied addition atomic sentences linear time logics 
linear time logic eventually operator enriched atomic sentences able express actions enabled state undecidable 
loosely speaking addition atomic sentences linear time logics undecidable branching time logics 
gap linear time branching time time logics fact gap linear time step branching time logics logics look step ahead branching structure transition system 
mads dam colin stirling helpful discussions anonymous referees detailed comments 
azar structural complexity eatcs monographs theoretical computer science 
ben ari manna pnueli temporal logic branching time 
acta informatica 
jeffrey computability logic 
cambridge university press 
verifying temporal properties systems 
birkhauser 
steffen model checking context free processes 
proceedings concur lncs 
steffen pushdown processes parallel composition model checking 
proceedings concur lncs 

christensen decidability decomposition process algebras ph 
thesis university edinburgh cst 
christensen moller bisimulation equivalence decidable basic parallel processes 
concur lncs 
christensen stirling bisimulation equivalence decidable context free processes 
proceedings concur lncs 
clarke emerson sistla automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems pp 

dam fixpoints buchi automata 
proceedings th international conference foundations software technology theoretical computer science lncs 
emerson srinivasan branching time temporal logic 
lncs 
emerson jutla tree automata mu calculus determinacy proceedings focs 
esparza petri nets commutative context free grammars basic parallel processes 
proceedings fct lncs 
esparza decidability model checking mu calculi petri nets 
proceedings caap lncs 
esparza nielsen decidability issues petri nets survey 
bulletin eatcs 
fischer rabin super exponential complexity presburger arithmetic 
complexity computation proceedings siam ams symposium applied mathematics 
petri nets equivalence problem 
proceedings csl lncs 
howell problems concerning fairness temporal logic conflict free petri nets 
theoretical computer science 
howell yen taxonomy fairness temporal logic problems petri nets 
theoretical computer science 
steffen local model checking context free processes 
proceedings icalp lncs 
model checking macro processes 
proceedings cav lncs 
decidability temporal logic problem petri nets 
theoretical computer science 
decidability questions bisimilarity petri nets related problems 
proceedings stacs lncs 
appear theoretical computer science 
valk residue vector sets applications decidability problems petri nets 
acta informatica hennessy decidability non interleaving process equivalences 
proceedings concur lncs 
kosaraju decidability reachability vector addition systems 
proceedings th annual acm symposium theory computing 
lichtenstein pnueli checking finite state programs satisfy linear specifications 
proceedings th acm symposium principles programming languages 
lipton reachability problem requires exponential space 
technical report yale university 
mayr algorithm general petri net reachability problem 
siam journal computing 
minsky computation finite infinite machines 
prentice hall 
muller schupp theory ends pushdown automata second order logic 
theoretical computer science 
peterson petri net theory modelling systems 
prentice hall 
stirling modal temporal logics 
handbook logic computer science vol 
oxford university press 
vardi wolper automata theoretic techniques modal logics programs 
journal computer system sciences 
yen unified approach deciding existence certain petri net paths 
information computation 

