non hierarchical procedure re synthesis complex textures paul harrison school computer science software engineering monash university wellington rd clayton melbourne australia yoyo cc monash edu au procedure described synthesizing image texture input image 
achieve output image built successively adding pixels selected input image 
pixels chosen searching input image patches closely match pixels output image 
shown accurate reproduction features input texture depends order pixels added output image 
procedure selecting ordering transfers large complex features input output image described 
procedure capable reproducing large features interactions nearby pixels considered 
procedure altered allow specification placement particular features output texture 
applications described 
keywords texture synthesis image manipulation texture image defined broadly interrelationships pixels image 
ability analyse manipulate image texture number interesting applications 
simplest application create new image texture different size shape sample image 
seamless editing images possibility 
example object removed image synthesizing new section background texture top 
applications rely ability re synthesize sample texture fit variety constraints 
number texture re synthesis methods described literature 
approach searching specific features textures bonet :10.1.1.42.1445
methods input image decomposed set features 
statistics features collected synthesize new image 
problem methods recognize set features specified advance 
results impressive difficult devise generic feature set describe textures 
approach texture re synthesis problem analyse reproduce interactions individual pixels 
methods approach define function describing pixel terms neighbours random element 
function generate new image pixel pixel 
new pixel technique developed best fit searching 
efros leung efros independently developed approach pixel selected searching input image patch pixels closely matching nearby pixels output image :10.1.1.44.14
results output image small parts input image 
technique textures synthesized relationships neighbouring pixels extremely set pixel locations input image 
pixel input image location set locations containing pixels output image 
pixel output image location location pixel input image output image location set offsets considered calculating similarity texture patches 
weighting particular offset uniformly random functions 
complex 
table table symbols 
efros leung report results size patch searched input image correspond size largest feature texture 
allow larger features wei levoy wei propose hybrid feature best fit techniques generates output pyramid successively finer resolutions 
presents refinement best fit re synthesis procedures introduced efros leung efros :10.1.1.44.14
important change selection order pixels added output image 
order selected allow reproduction features larger size patches searched input image 
procedure avoids decomposing input image predefined feature set re synthesize wide range textures 
extension procedure allows specification layout different regions texture output image 
re synthesis procedure procedure described takes input image containing sample texture produces image texture 
procedure stages 
stage pixel interrelationships input image analysed 
extent value pixel constrains values taken neighbouring pixels determined 
reasons doing discussed section calculations necessary described section 
second stage pixels added initially blank output image locations filled 
order pixels added chosen facilitate faithful reproduction texture input image results stage described sections 
section describes initialization stage terms choice locations values seed pixels 
add pixel output image particular location surrounding pixels added output image examined 
closest match pixels located input image corresponding pixel input image inserted output 
described section 
symbols listed table 
colours stored rgb values 
compare individual pixels sum absolute values differences colour component measure closely patches input image match patch output image distance function 
distance function weighted manhattan city block distance function 
allow synthesis textures random element distance function contains small random component weight specified parameter manhattan distance chosen commonly euclidean distance forgiving outliers 
match pixels patch negated poor match pixels 
barcode texture 
location output image pixel input image chosen 
location input image selected minimize distance eq 

ordering pixel insertion section discusses order pixels added output image second stage procedure 
demonstrated certain features branching patterns reproduced correctly output image placement pixels proceeds particular order 
consider values particular pixel textural image take 
pixel value consistent values pixels image 
pixels may said constrain values selected pixel take 
important property constraints constraint imposed distant pixel direction may provided closer pixel direction 
general constraint imposed nearby pixels 
example fig 
constraint imposed pixels far pixel provided pixels small distance pixel 
kind relationship may directional 
fig 
applies vertically horizontally 
constraints thought terms information theory 
prior knowledge pixel equally take value requires certain number bits encode 
neighbours impose constraints values take require average bits encode 
average number bits required encode information referred entropy pp 

entropy measure constraints imposed pixel 
pixel selection procedure search patches pixels input image match placed output 
patches cover pixels capture textures generated different orders pixel insertion 
input image weighting distance function center pixel output raster scans proceeding top bottom bottom top left right right left 
constraints location texture reproduced correctly 
patch size large chance finding matches input image 
desirable choose order add pixels output image constraints imposed location captured small neighbourhood pixels 
order add pixels raster scan 
fig 
shows images generated raster scans different directions 
texture synthesized complex branching pattern 
seen scan proceeds bottom top fig 
reproduces pattern accurately 
raster scans fig 
various problems 
top bottom scan fig 
produces anomalous dark sideways scans fig 
branches side 
artifacts explained considering pixels constrain 
constraint imposed pixel pixels immediately constraint imposed pixels 
true pixels side pixel 
bottom top raster scan produces better result tested 
utilize types constraint resynthesis procedure assigns priority location output image 
highest priority locations highly constrained neighbouring pixels added 
procedure followed empty locations output image find empty location highest priority 
choose pixel input image place location 
update priorities empty neighbouring locations new pixel value 
system assigning priorities needs chosen 
simple prioritization scheme estimates entropy unfilled location nearby neighbours gives higher priority locations lower entropy 
problem scheme may areas texture nearby pixels tightly constrain constraint pixel values random 
areas tight constraints higher priorities disproportionately represented output image 
approach taken define normalized weighting 
weighting indicates relative amount information pixel gives neighbours 
ensure part image advantage part weighting defined sums unity pixel 
priority empty location output defined sum weightings neighbouring pixels 
analysing interactions neighbouring pixels weightings needed prioritize order pixels inserted 
needed distance function select pixels 
create weightings interactions neighbouring pixels input image analysed 
calculation weightings stage synthesis procedure 
purposes computational simplicity effect neighbour location assumed independent effects neighbours 
interactions constraints different neighbours location neglected 
compute weightings amount information pixel provides near neighbours needs estimated 
neighbours considered offset central pixel member set offsets calculate distance function eq 

amounts information may measured considering offset turn 
offset number bits information provided pixel input image pixel offset estimated explained 
offset pixels grouped sets value corresponding pixel 
set pixels distribution values 
values modelled normally distributed colour component red green blue parameters distributions estimated 
calculate number bits required encode pixels set 
distribute pixels sets classified significant bits red green blue components 
value chosen sets small accurate estimate mean standard deviation impossible large information discarded 
assumed pixels set come distribution standard deviations calculated sets describe individual pixels sets 
gives standard deviations pixel offset colour component 
standard deviations calculate entropy pixel 
average number bits required store normally distributed variable standard de accuracy log ln log summing colour component gives entropy pixel log ln log performing calculation splitting image sets gives entropy pixels image independent neighbours 
number bits pixel pixel offset subtracting entropy entropy pixels image known neighbours 
call value prioritization weighting normalized weighting suitable prioritizing order pixels added output image defined priorities unfilled locations output image may defined additionally locations near edge image priorities adjusted positions edge image filled pixels having average properties weights averaged 
locations act starting positions filling output image 
value pixel added having neighbours chosen random input image basis random component distance function 
distance function weighting distance function eq 
select pixels requires set weightings 
best input image weightings reflect degree neighbour constrains value pixel 
entropy normally distributed random variable color components pixel logarithm base standard deviation constant see eq 

means time constraint particular location halves standard deviation possible values color component location bit information location known 
light relationship weighting neighbour doubled bit gives location 
weighting system distance function chosen satisfy constraint average value weightings particular offset results procedure example results procedure shown fig 

neighbourhood pixels generate images 
images fig 
required average half minutes half megabytes memory produce mhz pentium ii 
time taken procedure increases approximately linearly size input image extremely slow large input images 
successful results shown fig 

particular procedure sensitive features appear edge input image 
case output tends contain artifacts repeating patterns 
seen fig 
procedure recognize regularly spaced components texture tiles 
specification placement texture regions textures contain regions properties differ region 
simple extension distance function select pixels gives means specifying layout regions output image 
extension requires definition new images maps regions input specifies corresponding regions output 
requires weightings sample results 
output procedure shown input image 
represent relative importance pixels input map determining value surrounding pixels input image 
chosen method choose 
new distance function place eq 
implementation procedure obtained www monash edu au failures 
results extended procedure example extended synthesis procedure shown fig 

texture photograph clouds fig 

map texture created showing regions cloud blue sky fig 

map checkerboard pattern output map fig 

result applying procedure images shown fig 

texture re synthesis previously applied removal objects homogeneous background synthesizing new section background efros :10.1.1.44.14
ability constrain placement texture regions allows synthesis new background replace object background non homogeneous 
example shown fig 

fig 
shows picture standing field 
picture field homogeneous perspective expansion 
feature map image fig 
constructed parts image equidistant camera having value 
new section background synthesized replace rest background input texture 
new section constrained join existing background follow feature map 
constraining cloud texture checkerboard pattern 
input map input texture output map output extended synthesis procedure 
example object removal 
original image map image object removed 
result shown fig 

procedure described synthesizing image arbitrary size texture sample input image 
procedure capable reproducing large features input image examines interactions pixels close neighbours 
significantly procedure preconceived notion features expect input texture 
simple extension procedure allows feature placement new image constrained 
effectively generic filter example change image reproduce change image 
procedure described refine distance function consider matches similar structure slightly lighter darker different hue 
extended geometries allow synthesis textures covering dimensional objects 
applied dimensions manipulate animations solid textures dimension sound synthesis technique 
supervisor dr alan patience helpful suggestions 
lucas pereira images 
blahut 
principles practice information theory 
addison wesley 
bonet de bonet 
multiresolution sampling procedure analysis synthesis texture images 
proceedings sig graph pages 
efros efros leung :10.1.1.44.14
texture synthesis non parametric sampling 
proceedings th ieee international conference computer vision pages 
de ma 
sequential synthesis natural textures 
selected papers digital image processing pages 
spie optical engineering press 

computational models texture analysis texture synthesis 
phd thesis university southern california 
heeger bergen :10.1.1.42.1445
pyramid texture analysis synthesis 
proceedings siggraph pages 
pereira 
image replacement texture synthesis 
proceedings ieee international conference image processing 
available graphics stanford 
edu papers texture replace accessed september 
schmitt 
bidimensional texture synthesis markov chains 
computer graphics image processing 
portilla simoncelli 
texture modeling synthesis statistics complex wavelet coefficients 
proceedings ieee workshop statistical computational theories vision 
available www cis ohio state edu html accessed september 
wei wei levoy 
fast texture synthesis tree structured vector quantization 
proceedings siggraph 
available graphics 
stanford edu projects texture accessed september 
