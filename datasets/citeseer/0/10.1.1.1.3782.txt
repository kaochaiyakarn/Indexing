case hybrid search infrastructure boon loo ryan huebsch ion stoica joseph hellerstein uc berkeley berkeley ca usa huebsch cs berkeley edu intel research berkeley cs berkeley edu 
popular file sharing systems gnutella kazaa unstructured network designs 
networks typically adopt flooding search techniques locate files 
flooding techniques effective locating highly replicated items poorly suited locating rare items 
alternative wide variety structured networks distributed hash tables dhts proposed 
structured networks efficiently locate rare items incur significantly higher overheads unstructured networks popular files 
extensive measurements gnutella network multiple vantage points argue hybrid search solution structured search techniques index locate rare items flooding techniques locating highly replicated content 
illustrate experimental results prototype implementation runs multiple sites planetlab participates live gnutella network 
unstructured networks gnutella kazaa widely filesharing applications 
networks organized ad hoc fashion queries flooded network bounded number hops ttl 
networks effective locating highly replicated items rare items alternative proposals inverted indexes distributed hash tables dhts 
absence network failures dhts guarantee perfect recall able locate matches small number hops usually log hops number nodes 
dhts may incur significant bandwidth publishing content executing complicated search queries multiple attribute queries 
despite significant research efforts address limitations flooding dht search techniques consensus best design searching measure traffic characteristics gnutella network multiple vantage points located planetlab 
findings confirm gnutella effective locating highly replicated items suited locating rare items 
particular queries rare items low recall rate queries fail return files files stored network 
addition queries poor response times 
observations best terms files items interchangeably knowledge study quantify real network 
example show queries return results despite fact thirds queries results available network 
extensive measurements analyze traffic characteristics gnutella observations propose simple hybrid design aims combine best worlds flooding techniques locating popular items structured dht search techniques locating rare items 
find design particularly appropriate existing file sharing systems number replicas follow long tailed distributions techniques best files head distribution dht techniques best files tail distribution 
evaluate proposal experimental results hybrid file sharing implementation combines gnutella pier dht relational query engine 
prototype runs multiple sites planetlab testbed participates live gnutella network 
setting methodology analyze gnutella network instrumented limewire client software 
client participate gnutella network ultrapeer leaf node log incoming outgoing gnutella messages 
addition client ability inject queries network gather incoming results 
current gnutella network uses optimizations improve performance original flat flooding design 
notable optimizations include ultrapeers dynamic querying techniques 
ultrapeers perform query processing behalf leaf nodes 
node joins network leaf selects number ultrapeers publishes file list ultrapeers 
query leaf node sent ultrapeer floods query ultrapeer neighbors limited number hops 
crawl reveals ultrapeers today support leaf nodes dynamic querying search technique queries return fewer results re flooded deeper network 
modified client supports optimizations 
gnutella search quality estimate size gnutella network began study performing crawl gnutella 
increase accuracy estimation crawl performed confirmed development history limewire software newer limewire ultrapeers support leaf nodes maintain ultrapeer neighbors older ultrapeers support leaf nodes ultrapeer neighbors 
side note newer versions limewire client leaf nodes publish bloom filters keywords files ultrapeers 
proposals cache bloom filters neighboring nodes 
bloom filters reduce publishing searching costs gnutella preclude substring wildcard searching similarly unsupported dht search schemes 
parallel ultrapeers minutes 
parallel crawl carried oct noon pacific time 
network size gnutella time crawl nodes roughly files system 
query results size average replication factor fig 

correlating query results size vs average replication factor 
turn attention analyzing search quality gnutella terms recall response time 
recall query defined number results returned divided number results available network 
results distinguished filename host 
replica file counted distinct result 
difficulty snapshot files network time query issued approximate total number results available system issuing query simultaneously planetlab ultrapeers union results 
approximation appropriate reasons 
number planetlab ultrapeers exceeds little increase total number results see fig 

suggests number results returned ultrapeers reasonable approximation total number results available network 
second approximation underestimates number total results network recall value compute overestimation actual value 
obtained gnutella query traces chose distinct queries traces replay planetlab ultrapeers 
factor effects workload fluctuations replayed queries different times 
total generated queries 
observations results returned queries 
expected strong correlation number results returned query number replicas network item query result set 
replication factor item defined total number identical copies item network 
approximate number count number items filename union query results obtained ultrapeers query 
compute average replication factor query averaging replication factors distinct filenames query result set 
summarizes results axis shows query results set size axis shows average replication factor averaged queries results set size 
general queries small result sets return rare items queries large result sets return rare popular items bias popular items 
queries results node total results nodes number results fig 

result size cdf queries issued ultrapeers 
queries results node total results nodes total results nodes total results nodes total results number results fig 

result size cdf queries results 
second results demonstrate effectiveness gnutella finding highly replicated content 
plots cdf number results returned queries results curve lower bound total number matching items query total results curve 
compute lower bound union result average result latency number results fig 

correlating result size vs result latency 
sets obtained ultrapeers query 
note queries returning results sufficient file sharing uses 
addition fig 
shows queries large result sets response times 
queries return results obtain result seconds average 
third results show ineffectiveness gnutella locating rare items 
shows average response time queries return results poor 
queries return single result seconds elapsed average receiving result 
important point note queries return items quite prevalent 
shows results experiment fig 
limited queries return results ultrapeers 
note queries receive results receive results queries receive fewer results queries receive results 
large fraction queries receive results matching results fact available network time query 
union results ultrapeers query results improve considerably queries receive fewer results queries receive results 
means opportunity reduce percentage queries receive results equivalently reduce number queries receive results 
say union results underestimation total number results available network 
increase search horizon 
obvious technique locate rare items gnutella increase search horizon larger ttls 
help search latency improve query recall 
search horizon increases number query messages sent increase exponentially 
queries return results fairly common aggressive flooding locate rare items scale 
plan quantify impact increasing search horizon system load 
summary gnutella measurements reveal findings gnutella highly effective locating popular items 
items retrieved large quantities queries response times 
gnutella effective locating rare items queries receive fewer results queries receive results 
furthermore results poor response times 
queries return single result result arrives seconds average 
queries return fewer results seconds elapsed average receiving result 
significant opportunity increase query recall locating rare items 
instance number queries return results reduced 
considerable number queries rare items considerable opportunity improve recall response times queries 
furthermore note flooding aggressively answer problem flooding higher ttl necessarily decrease response time significantly increase system load 
case hybrid various research efforts proposed dhts alternative unstructured networks gnutella arguing dhts improve query performance 
section explore feasibility dht query system 
flooding scheme queries moved data 
contrast dht search schemes move queries data causing rendezvous network 
movement typically consists phases 
content publishing phase moves copies data traditional inverted files indexed keyword dhts 
known inverted indexes 
inverted file comprises set unique file identifiers posting list distinct keyword 
secondly query execution phase performs boolean search routing query dht sites host keyword query executing distributed join postings list entries matching items 
dht search provides perfect recall absence network failures full fledged dht implementation drawbacks 
content publishing phase consume large amounts bandwidth compared queries retrieve sufficient results flooding unstructured network 
consider query britney spears requests songs popular artist 
britney spears popular keywords large posting lists 
publishing costs building inverted indexes keywords high 
britney spears query requires shipping large posting lists perform distributed join 
back envelope calculations suggest shipping large posting lists dhts bandwidth expensive 
compression techniques bloom filters reduce bandwidth requirements publishing flooding scheme incur publishing overheads simpler efficient queries 
hand queries rare items bandwidth intensive compute fewer posting list entries involved 
validate claim replayed gnutella queries sample files distributed join algorithm dhts 
observed average queries return fewer results require shipping times fewer posting list entries compared average queries 
motivates hybrid search infrastructure dht locate rare items flooding techniques searching highly replicated items 
hybrid techniques hybrid search infrastructure utilizes selective publishing techniques identify publish rare items dht 
different heuristics identify items rare 
simple heuristic initial observation section rare files seen small result sets 
essence dht cache elements small result sets 
scheme simple suffers fact rare items may previously queried published caching scheme 
items techniques determine rare 
example publishing known term frequencies maintaining possibly gossiping historical summary statistics file replicas 
hybrid infrastructure easily implemented ultrapeers organized dht overlay 
ultrapeer responsible identifying publishing rare files leaf nodes 
search performed conventional flooding techniques overlay neighbors 
results returned predefined time query reissued dht query 
network churn practical concern dhts network churn 
high network churn rate increase dht maintenance overhead manage publishing 
understand impact churn measure connection lifetimes ultrapeer leaf neighbors leaf nodes ultrapeers hours 
connection lifetimes measure lower bound session lifetime nodes may change neighbor sets course gnutella session 
observations 
measured average connection lifetimes leaf ultrapeer nodes minutes minutes respectively 
ultrapeers times longer lifetimes leaf nodes 
reduce overheads dht maintenance stable ultrapeers resources dht nodes 
second measured median connection lifetimes leaf ultrapeer nodes minutes minutes respectively 
median lifetime lower queries files collected ultrapeers described section 
mean discounting short lived nodes fairly stable network 
instance eliminate leaf nodes lifetimes exceed minutes average lifetime remaining nodes minutes general longer node longer expect node stay 
address issue stale data dht file information short lived nodes simply indexed 
nodes useful sources data anyway disconnect download content 
preliminary experimental results evaluate hybrid design deploy number hybrid clients planetlab participate gnutella network ultrapeers 
addition clients plugged dht search engine built top pier relational query engine dhts 
deployment seen strawman fully deployed hybrid infrastructure require upgrade existing clients 
addition traditional distributed join algorithm discussed earlier searching pier search engine utilizes join indexes storing full text filename redundantly posting list entry 
search query sent single node hosting search terms remaining search terms filtered locally 
technique incurs extra publishing overheads prohibitive text document search tolerable indexing short filenames 
hybrid ultrapeer monitors query results regular gnutella traffic 
query results responses queries forwarded ultrapeer 
query results belong queries fewer results published dht 
publishing rate approximately file seconds node 
published file corresponding posting list entries incurs bandwidth overhead kb file 
join indexes increase publishing overhead kb file 
large part bandwidth consumption due overheads java serialization self describing tuples pier principle eliminated 
test hybrid search technique planetlab leaf queries hybrid ultrapeers 
leaf queries return results seconds gnutella re queried pier search engine 
pier returns result seconds join indexes respectively 
decreasing timeout invoke pier improve aggregate latency increase likelihood issuing extra queries 
part plan study tradeoffs timeout query workload 
note average latency queries return result gnutella seconds see fig 

hybrid approach reduce latency seconds 
addition hybrid solution reduces number queries receive results gnutella 
reduction serves lower bound potential benefits hybrid system 
reason value significantly lower potential reduction number queries receive results fold consistent results reported limewire measurements connections days 
gnutella measurements reported section queries proactively flooded ultrapeers experiment consider files returned results previous queries 
scheme return rare items queried experiments 
employing simple optimizations peers publish proactively list rare items considerably boost benefits scheme 
number clients implement scheme increase expect coverage improve 
coverage better full fledged implementation ultrapeer responsible set leaf nodes identify publish rare items 
join indexes query needs sent node 
cost query dominated shipping pier query approximately distributed join algorithm incurs kb overhead query 
results indicate benefits reducing query bandwidth outweigh publishing overheads storing filename redundantly join indexes attractive option 
related studies study shown file downloads highly replicated items 
think findings contradict analysis section shows queries rare items substantial 
studies focus different aspects gnutella workload 
measure result set sizes queries study measures download requests 
downloads reflect successful queries instances users identified matching items result set satisfied search queries 
approach excludes queries failed find matching rare items exist network return results relevance search query 
second studies correctly reflect different aspects zipfian distributions 
study shows head zipfian popularity distribution measure download requests items match top query requests seen 
contrast study focuses long tail distribution 
individual rare items tail may requested frequently queries represents substantial fraction workload worth optimizing 
separate study shown popularity distribution file sharing workload flatter expect zipfian distribution 
popular items significantly popular zipfian distribution predict 
proposed hybrid infrastructure apply utilizing schemes items flattened head region dhts indexing searching items tail distribution 
case hybrid search infrastructure utilizes flooding popular items dht searching rare items 
support case performed live measurements gnutella workload different vantage points internet 
substantial fraction queries returned results despite fact results available network 
preliminary experimental results deploying ultrapeers gnutella showed hybrid scheme potential improve recall response times searching rare items incurring low bandwidth overheads 
authors shawn jeffery lakshminarayanan sylvia ratnasamy sean rhea timothy roscoe scott shenker lakshminarayanan subramanian shelley zhuang insights suggestions 
anonymous reviewers comments 
research funded nsf iis iis iis intel research berkeley 

gnutella 
gnutella wego com 

gnutella proposals dynamic querying 
www limewire com developer dynamic query html 

gnutella ultrapeers 
rfc gnutella sourceforge net proposals ultrapeer ultrapeers htm 

kazaa 
www com 

limewire org 
www limewire org 

planetlab 
www planet lab org 

query routing gnutella network 
www limewire com developer query routing htm 

balakrishnan kaashoek karger morris stoica looking data systems 
communications acm vol 
feb 

chawathe ratnasamy breslau lanham shenker making gnutella systems scalable 
proceedings acm sigcomm 

gummadi dunn saroiu gribble levy za measurement modeling analysis peer peer file sharing workload 
proceedings th acm symposium operating systems principles sosp bolton landing new york october 

huebsch hellerstein lanham loo shenker sto ica querying internet pier 
proceedings th international conference large databases vldb sep 

li loo hellerstein kaashoek karger morris feasibility peer peer web indexing search 
proceedings nd international workshop peer peer systems iptps 
