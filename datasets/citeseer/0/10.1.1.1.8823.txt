contribution free software software evolution andreas bauer markus institut informatik technische universit nchen 
germany tum de remarkable think interest finding suitable methods concepts allow complex software systems evolve remain manageable growing open source movement silently managed establish highly successful evolution techniques decades 
concepts represent best practices applied equally number today crucial problems concerning evolution complex commercial software systems 
authors state explain principles perspective experienced open source developers give rationale highly dynamic free software development process entangled constantly growing code bases changing project sizes deals successfully 
virtue feared vice subject regulation conscience adam smith development continuous evolution open source software exposes astonishing similarities ideas free market economies 
liberal manipulation software practised open source environments shares principles economic establishing unrestricted trade growth manipulation software 
consequently argued evolution products processes open source environments prove superior model long run self regulating interplay demand supply provides constant selection improvement 
growing evidence hypothesis 
initially insignificant open source community grown extensive free market software artefacts thousands participants world wide products 
due enormous power market quality products gnu linux sufficiently high broad commercial deployment 
addition size diversity open market allows respond quickly changing requirements see example new device drivers 
products development process market evolves constantly 
emergence structured communication platforms sourceforge roles maintainers dissemination elements agile methods clearly substantiate supposition 
want give impression open source development silver bullet software engineering obviously open source shortcomings troubles 
argue long history free software introduced concepts potentially useful help large software projects consisting millions lines code evolve develop healthy manner decades 
experience high profile open source products gnu compiler collection gcc gnu linux authorship involvement smaller open source products benefits free software development model resulting architectures evident 
suggest principles practices discussed adopted non open commercial software organisations improve evolution capabilities products development processes 
outline clarify scope context 
defines term open source precisely free software describes related successfully evolving free software projects puts context descriptions research software evolution 
take depth look evolution process free software environments focus corresponding evolution technical architecture 
conclude summarising major results study discussing transferability non free commercial software systems 
open source free software refer open source software restrict open source movement largely sparked gnu linux project 
talk free software general discuss software open sources older gnu linux particular free free speech free free beer 
main difference free speech primarily regarded fundamental human right free beer merely enjoyable cost 
free software foundation fsf gnu general public license license gnu linux project source code may modified third party long program changes remain just free open original copyright notices altered 
fsf believes best way accomplish people right see alter program source code 
bsd style licenses hand liberal basically allow third party sources distribute modifications closed source 
remainder concerned describing authors experiences free software general particular occurrence 
myths clich es common misconception think open source purely chaotic process results usable software product created spare time hackers share maintainability concerns professional academic counterparts 
unfortunately title eric raymond seminal cathedral bazaar misunderstood supporting chaos clich course far true 
show free software development organised structured processes defined roles 
consequently large number free software products considered equal quality commercial counterparts supporting thesis 
unfortunately free software movement largely ignores results trends academia field evolution research side ignores circumstances favourite text editors compilers operating systems brought life 
aim narrow gap achievements free professional software engineers academia industry alike 
reality name just successful free software systems point particular operating systems freebsd netbsd openbsd darwin originate ideas code created 
high quality products free beer philosophy bsd license simply cost major vendors apple commercial operating system open source kernel named charles darwin gave birth theory evolution 
free speech projects gcc gnu linux driven large parts financial involvement major companies ibm red hat assign skilled developers monetary resources software products read modify source code 
outcome course maintainable product way maintainability major reason dinosaur projects gcc bsd emacs gnu linux play important role today individual fields 
obviously open source movement developed concepts techniques help big projects evolve successfully time constantly changing requirements 
free software products interesting anymore terms technical innovation irrelevant today 
part evident success say operating system gnu linux related way software adopts changing technical reality community increasing numbers contributors project see 
related evolution due large gap commercial software development academic research practices free software community comes surprise little research directly targeted evolution free software 
hand extensive variety evolution concepts techniques configuration management cvs regression testing refactoring source code analysis code generators separation concerns name play important role free software world 
deliberately abstain enumerating extensive list obvious evolution free software described links various concrete evolution techniques 
interest focused principles evolution free software independent certain techniques 
lehman known laws software evolution address fundamental concepts underlying dynamics software evolution 
see free software complies exceptionally lehman laws laws free software development process emerged independently free software continuously changed law complexity increases noticeably law ii self regulation evolution process obvious law iii 
observations described strongly support laws iv viii 
contrary substantial compliance free software development lehman laws way explaining success open source software development 
evolution development process lot closed source software projects free software tends start hardly administrative overhead 
early project phases structure coordinate development process proper requirements engineering usually play significant role 
obvious project size grows administrative efforts remain constant 
prominent examples second 
fact free software development process highly dynamic scaling underlying architecture number skills people involved project 
single free software development process se evolution firmly entangled complexity resulting product 
inevitable technical changes dynamics free software development process due technical changes developers decisions 
example widely compiler suite gcc originally created mid fast practical compiler bit platforms address bit bytes general purpose registers 
nowadays gcc supports different platforms bit ranges programming languages core consists lines code 
gcc project started simple email transfers core developers usenet current development process works fundamentally different today 
project obviously changed original aims number types people contribute way contribute constantly evolving product 
accompanying manual gcc states names different contributors course strong contrast richard stallman created versions back simple system compiler potential gnu platforms 
drastic changes possible mainly technical conditions improved vastly creation gcc especially due expansion internet new transfer protocols spawned process hypertext transfer protocol 
particular gcc project today benefits strongly technical advances automated mailing list management access searchable archives web interfaces coordinate review efforts world wide distributed network developers public cvs servers web interfaces keep track different versions independent developments project huge number ftp mirror sites increase availability relevant data world wide interest new languages java haskell hardware platforms ia architecture modern automated bug tracking system accessible world wide web compile farms offering central access multiple platforms usually sponsored industry firms substantial interest open source products growing number external projects built top gcc manage progress independently glasgow haskell compiler ghc realtime java implementation mercury compiler case big open source projects evolve deploying tools cvs rcs bugzilla similar circumstances technical conditions 
examples bsd mozilla linux operating system kernel 
compare rise numbers contributors freebsd gcc see similarities projects freebsd released contributors people write access code repository total people allowed commit changes code base 
change organisation real challenge establishing maintaining successful development process free software product introduce technical changes accompanying social changes project surpasses critical size 
critical size depend lines code program modules number contributors basically metric allows draw complexity software product 
table 
size open source products lines code project age linux kernel mozilla gcc gdb mid 
mid 
glibc early emacs source david wheeler estimating gnu linux size 
nowadays free software projects surpassed critical size usually lines code number contributors 
seen table linux version consists lines code addition current files suggest equal amount active developers say involved freebsd 
numbers hint fact management tasks successful free software projects solved single person original author project 
critical size reached executive board emerges way board coordinates controls evolution product 
consequently mature project gcc driven forward richard stallman anymore steering committee consists professional software developers partly paid software vendors red hat ibm apple focus development free compiler suite see table 
members experts fields expected single member keep full understanding entire lines unity 
seen table free software products cope executive board members 
obviously large manage complex project small ensure development cease due internal debates politics 
interestingly listed projects roughly equivalent size age table 
executive boards free software projects project board name members freebsd core gcc steering committee debian leader technical committee mozilla project managers drivers kde core group hardly connected find core members comfortable size right decisions project 
pointed strategy perfectly suits results extensive studies success failure commercial software projects known chaos reports standish group 
studies show project tendency fail larger gets 
highly recommended keep project considerably small fail 
agile methods xp deliberately refuse carry huge projects single step 
unfortunately dissemination fundamental lesson commercial environments slow 
contrast due competition selection free software projects provides suitable size project 
project gets split continuously smaller subsets needed new maintainance tasks assigned core team members skill experience current project responsibilities 
effect entire organisation scales effectively size product 
way executive board nominated differs various free software projects 
debian example uses democratic elections kde team solely merit 
member kde core group particular applicant distinguished outstanding contributions dedication kde project considerable period time 
albeit kde debian sure suited skilled people charge oldest youngest happens commercial environments 
evolutionary process puts forth skill pure authority 
change management despite similarities various big free software projects different approaches handling change management 
converging due deployment similar utilities cvs rcs patch diff parts complex tasks involved 
observed various approaches open source change management equally successful prominent examples individual techniques 
different histories change management called evolutionary patterns distinguish mainly way patches tested reviewed merged project 
linus torvalds alan cox example driving forces linux kernel development raised concerns interviews public cvs servers handle change management internally important linux modules concurrently version controlled 
gcc bsd hand comfortable facilities possibilities provided public cvs server despite occasional commit wars 
talk commit war people working parts code keep overwriting changes 
happen main linux kernel linus torvalds project leader decides personally patches adopted dropped picked maintainers individual trees 
terms change management open source projects doing things closed source software see 
pointed cvs tool roots free software world just shows open source program started couple shell scripts posted usenet evolved de facto standard today simply tightly integrated evolution free software products aimed support 
numerous products developed cvs effectively triggered evolution process toolkit point cornerstone free commercial projects 
evolution architecture free software project social structure adopting changing reality architecture subject natural evolution result say carefully planned requirements analysis 
example supporting claim gcc project adoption cross vendor application binary interface proposed intel initially received negative response users introduced incompatibilities previous programs 
step necessary order compatible binaries created commercial compilers support code generation new intel bit hardware support majority features proposed latest iso standard programming language 
modular code layers changing abi existing compiler trivial task case gcc possible due modular design architecture allows majority code generation happen manner see fig 

back modifications transparent final compilation passes rtl representation gets mapped machine language templates describe specific platform properties 
projects linux kernel mozilla bsd similar logical physical program modules enabling optimal coordination contributor efforts better approach change management 
majority modules necessarily obvious projects initiated years ago 
sensible differentiation result evolution process happening increasing number contributors submit new source code ideas solutions improve existing code 
entanglement process architecture argue maintained successful free software projects technical structure underlying architecture entangled organisation project 
words change organisation project result change technical composition underlying architecture vice versa 
fig 
shows intense correlation gcc technical structure organisation project 
shows additions code base coordinated public review mailing lists order eliminate obvious bugs committed cvs repository 
gcc maintainers go process inform rest contributors upcoming changes 
fact uncommon patch file evolve process integral part gcc suite 
reason large complex patches understood adopted process constant refinement necessary converge new functionality changing code base 
experience gcc development shown process takes weeks months 
consequence organisation reorganisation contributors efforts claim natural process driven mainly necessity rationale authority 
due strong entanglement archi source code normally attr 
syntax trees ast compiler back commit scanner parser register transfer language rtl gcc symbol table rtl rtl optimisation templates ports rtl assembler 
logical physical program modules gcc core misc 
contributors cvs write access gcc steering committee controls controls gcc maintainers web site documentation ports front ends cvs repository ix ia ada public review mailing lists contributors machine language commit commit commit commit commit patches specific cvs branch source code submissions patches 
main parts gcc project structure organisation decisions project organisation lot technical structure evolving naturally solution practical robust maintainable succeeds instantly certainly asymptotically 
project dependencies commercial software vendors concerned evolution software static product oriented project organisation strong contrast semantics word evolution 
fact cases project structure closed source projects reflects geographic distribution purpose goals product 
example team city assigned task team city responsible task software really expected evolve sensible manner static conditions 
popular open source project commercial roots backs theses 
netscape released communicator sources gave birth mozilla project years example unsuccessful open source project 
nowadays mozilla fundamentally different communicator project undergone architectural changes led successful commercial applications newly emerging mozilla components 
fig 
illustrates complexity single large product systematically broken manageable projects splitting continues gain flexibility independent main mozilla organisation 
matter fact april mozilla project leaders released statement announce biggest architectural split far 
mozilla remain project core components mail news web browsers turning separate projects reflected new roadmap reasoning new roadmap elements comes preferring quality quantity 
better sound extension mechanisms moment mozilla consists approximately core projects lines code project leaders active contributors 
project gotten rid old roots netscape bases browsers mozilla days vice versa 
reduction complexity code splitting simple descriptive calculation helps comprehend success separation strategy 
re 
code splitting sults cost estimation research function points scales known cost software project grows non linear size 
experience approach models cost project formula size source code kloc lines code 
assume piece code consists modules interchangeable kloc 
simplifying assumption program dependencies inside piece code cause quadratic growth complexity 
complexity expressed cold divide piece code thoroughly separated parts system complexity decreases accordingly cnew words complexity cnew product significantly reduced 
absolute reduction significant growing constant linear factor represents new glue components need introduced separated code pieces 
due isolation parts assume new glue components cause quadratic complexity 
technically achieved thin interfaces separated components interprocess communication primitives provided operating system encapsulated data structures 
algorithmic viewpoint surprisingly complexity remains quadratic absolute numbers cnew smaller cold sufficiently large compared maintainers free software project provide sensible division code soon envisaged evolution step comprehensibility code demand 
incremental rewrites successful free software projects share strong ability incremental rewrites hard maintain source code 
mozilla example practice today components netscape communicator rewrite mozilla org gecko mathml javascript web browser mail news calendar shares basically zero source code predecessor communicator rewritten just single step 
netscape contrast single worst strategic mistake software decided wait complete rewrite code base case done mozilla project 
time netscape forced skip version communicator lost valuable market share mainly internet explorer microsoft 
albeit mozilla project free open organisation significant pressure market huge success lead industrial strength components commercial applications borland api aol web browser netscape communicator various embedded web browsers mobile phones pdas 
case shows huge discrepancy outcome intention applied commercial environment compared outcome intention applied free environment 
succeeded free environment due flexible self regulatory evolution failed ill lead unrealistic planning 
consider linux kernel rewrite unix bsd come similar decade ago disaster immature linux building block business model free software community years intense development turned extremely successful clearly witness today 
independence mozilla org 
dependencies mozilla org high current linux kernel major incremental rewrites happening latest infamous example disputes restructuring ide layer see kernel mailing list archives 
gcc suite older open source project linux mozilla subject major changes 
ast project goal rewrite syntax tree handling back shift lot register transfer language optimisation tree optimisation passes 
single static assignment branch ssa mainly sponsored red hat lead distributed incremental rewrite process success 
obvious years existence trivial task restructure compiler back previous successful rewrites hint fact open source project success firmly connected ability restructure necessary 
believe important evolutionary principle long living free software projects 
evidently successful free software development model formidable source software evolution principles practices 
contrast commercial software projects continuous unrestricted evolution intrinsic free software products 
usually constant free software project constant change 
considering lehman laws software evolution surprising strategy produced long living high quality software products 
process free software development chaotic 
process organisation scales size project 
projects start zero overhead able grow rapidly 
certain size exceeded regulations steering committees tools added needed process evolves 
resulting organisation correlates strongly technical structure product geographic location teams organisation chart 
commercial software organisations benefit strongly process evolution technical product 
employ single structured process carried rigidly projects tailored projects 
usually evolution process matching needs project free software 
addition commercial software projects fall far short assigning right people right task 
natural competition selection free software process emphasises skill authority rank 
increases quality outcomes 
kind competition combined dynamic assignment roles companies increase quality non free software products 
course require radical cultural change organisations agile methods changes disseminating commercial environments 
evolution process interesting principles learn arise close entanglement changing development process evolution technical architecture product 
architecture product hardly evolves freely changing requirements size product 
certain points time architecture organisation split isolated parts leading independently maintainable modules completely new products 
evolution architecture accompanied incremental code rewrites 
scope rewrites determined solely required change available resources 
contrast non free environments rewrites constrained non technical aspects lack rights static responsibilities 
turn reduces necessity expensive inefficient arounds add complexity decrease quality maintainability alike 
piece free software evolves healthy natural way incremental rewrites sensible additions code 
observations summarised far support initial thesis compared non free environments free software movement delivers superior evolution strategies similar economic business 
sponsored german federal ministry education research bmbf part project virtual software engineering competence center 
syntax tree optimizations 
web site www gnu org software gcc projects ast optimizer html 
darwin open source 
web site developer apple com darwin 
linux org 
web site www linux org 
mozilla development roadmap 
web site www 
mozilla org roadmap html 
open source development network 
web site sourceforge net 

web site www 
org 
mozilla project 
web site www mozilla 
org 
bauer 
compilation functional programming languages gcc tail calls 
master thesis department informatics technische universit nchen munich germany 
beck 
embracing change extreme programming 
computer oct 
boehm 
software engineering economics 
prentice hall 
version management cvs 
technical manual signum support ab 
booth 
coordinating open source software development 
eighth ieee international workshop enabling technologies infrastructure collaborative enterprises pages stanford ca usa 
ieee computer society press 
darwin 
origin species means natural selection preservation favoured races struggle life 

brooks jr mythical man month 
addison wesley 
free software foundation 
gnu general public license 
www fsf org licenses gpl html free software foundation cambridge massachusetts 
godfrey tu 
evolution open source software case study 
proceedings icsm pages san jose ca 
harris linux handbook guide ibm linux solutions resources 
ibm international technical support organization 
intel 
intel itanium software conventions runtime architecture guide 
intel santa clara california intel document sc rev edition 

bsd darwin theory 
australia tech news 

evolution free software project 
proceedings australian unix user group annual conference pages melbourne australia sept 
lehman 
programming process 
technical report rc ibm research centre yorktown heights ny sept 
lehman 
rules tools software evolution planning management 
annals software engineering 
yamamoto ye 
evolution patterns open source software systems communities 
proceedings international workshop principles software evolution pages 

tree ssa new high level optimization framework gnu compiler collection 
proceedings nord usenix users conference ster february 
opdyke 
refactoring object oriented frameworks 
phd thesis urbana champaign il usa 

design implementation gnu compiler 
technical report tum technische universit nchen munich germany 
raymond 
cathedral bazaar nov 

gnu testing framework 
technical report free software foundation 
smith 
wealth nations 

southern murphy 
eine explosion 
linux 
stallman 
gnu compiler collection internals 
gcc gnu org free software foundation cambridge massachusetts 
stallman 
gnu compiler collection 
gcc gnu org gcc 
gcc free software foundation cambridge massachusetts 
eberlein 
preliminary results empirical study growth open source commercial software products 
proceedings workshop economics driven software engineering research pages toronto canada 
standish group international 
chaos 
standish group international 
chaos recipe success 
university california berkeley 
bsd license 
www opensource org licenses bsd license html university california 
van der hoek 
configuration management open source projects 
proceedings rd international workshop software engineering internet limerick ireland june 
wheeler 
estimating gnu linux size 
web site www 
com sloc redhat redhat sloc html 
