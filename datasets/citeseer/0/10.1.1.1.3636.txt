parameterized object sensitivity points analysis java ana milanova dept computer science rensselaer polytechnic institute milanova cs rpi edu goal points analysis java determine set objects pointed variable object field 
object sensitivity new form context sensitivity flow insensitive points analysis java 
key idea approach analyze method separately object names represent runtime objects method may invoked 
ensure flexibility practicality propose parameterization framework allows analysis designers control tradeoffs cost precision object sensitive analysis 
side effect analysis determines memory locations may modified execution program statement 
def analysis identifies pairs statements set value memory location subsequently value 
information computed analyses wide variety uses compilers software tools 
proposes new versions analyses object sensitive points analysis 
implemented instantiations parameterized object sensitive points analysis 
set java programs experiments show analyses comparable cost context insensitive points analysis java andersen analysis results show object sensitivity significantly improves precision side effect analysis call graph construction compared context insensitive analysis context sensitive points analysis models context invoking call site 
experiments demonstrate object sensitive analyses achieve substantial precision improvement time remaining efficient practical 

points analysis fundamental static analysis optimizing compilers software engineering tools determine set objects addresses may stored variables fields objects 
points sets typically computed constructing preliminary version article appeared proceedings international symposium software testing analysis pages july 
rountev dept computer science engineering ohio state university rountev cis ohio state edu barbara ryder division computer information sciences rutgers university ryder cs rutgers edu points graphs serve abstractions run time memory states analyzed program 
example points graph shown discussed section optimizing java compilers points information perform various optimizations virtual call resolution removal unnecessary synchronization object allocation 
points analysis prerequisite variety analyses example sideeffect analysis determines memory locations may modified execution statement analysis identifies pairs statements set value memory location subsequently value 
analyses necessary perform compiler optimizations code motion partial redundancy elimination 
addition analyses needed context software engineering tools example def analysis needed program slicing data flow testing 
points analysis crucial prerequisite employing analyses optimizations 
wide range applications important investigate approaches precise efficient computation points information 
major dimensions design space points analysis flow sensitivity context sensitivity 
intuitively flow sensitive analyses take account flow control program points inside method compute separate solutions points 
flow insensitive analyses ignore flow control program points precise efficient flow sensitive analyses 
contextsensitive analyses distinguish different contexts method invoked analyze method separately context 
context insensitive analyses separate different invocation contexts method improves efficiency expense possible loss precision 
shown context insensitive points analysis java efficient practical large programs realistic candidate optimizing compilers software engineering tools :10.1.1.25.4206:10.1.1.32.1100
context insensitivity inherently compromises precision points analysis object oriented languages java 
imprecision results fundamental object oriented features programming idioms 
section presents examples illustrate point 
imprecision decreases impact points analysis client optimizations virtual call resolution leads precise client analyses def analysis 
existing flow context insensitive analyses useful important introduce context sensitivity targets sources imprecision specific object oriented languages 
time context sensitivity increase analysis cost point compromising practicality analysis 
propose object sensitivity new form context sensitivity flow insensitive points analysis java 
approach uses receiver object method invocation site distinguish different calling contexts 
conceptually method replicated analysis object name represents possible receiver object 
analysis computes separate points information replica local variable separate points information valid method invocations corresponding receiver object 
furthermore naming objects object sensitive object allocation site may represented object names corresponding different receiver objects enclosing method 
propose parameterization framework allows precision improvement object sensitivity incurring cost non discriminatory replication objects variables 
framework parameterized dimensions 
analysis designers select degree precision object naming scheme set variables analysis maintains multiple points sets 
approach tune cost analysis define targeted sensitivity certain objects variables precise handling improve analysis precision 
discuss parameterized object sensitive points analysis andersen style pointsto analysis java 
andersen analysis wellknown flow context insensitive points analysis :10.1.1.109.6502
shows extend analysis java :10.1.1.25.4206:10.1.1.32.1100
demonstrate technique andersen analysis parameterized object sensitivity trivially applied enhance precision flow context insensitive analyses java analyses flow context insensitive points analyses :10.1.1.11.3368
modification side effect analysis mod determines statement set objects may modified statement 
similarly analysis computes set objects may read statement 
information plays important role optimizing compilers software productivity tools 
side effect analysis requires output points analysis precision underlying points information directly affects precision side effect analysis 
define evaluate new mod analysis parameterized object sensitive points analysis 
omit discussion approach applies corresponding analysis 
goal def analysis compute def associations pairs statements 
def associa tion memory location pair statements assigns value subsequently uses value 
similarly mod analysis def analysis requires output points analysis 
define new object sensitive def analysis parameterized object sensitive points analysis 
addition show object sensitive points analysis compute contextual def associations generalization standard def associations defined purposes data flow testing 
implemented instantiations parameterized object sensitive analysis 
compare instantiations andersen style flow context insensitive points analysis 
set java programs experiments show cost analyses comparable 
cases object sensitive analyses faster context insensitive analysis 
evaluate precision analyses respect client applications 
mod analyses object sensitive points analyses significantly precise corresponding mod analysis context insensitive points analysis 
object sensitivity improves precision call graph construction virtual call resolution 
addition compare object sensitive analyses context sensitive points analysis uses call site distinguish different calling contexts 
experimental results show object sensitive analyses capable achieving significantly better precision contextinsensitive call site context sensitive ones time remaining efficient practical 
improved precision due fact object sensitive analyses specifically target object oriented features idioms precision analyses compromised due features 
contributions 
contributions propose object sensitivity new form context sensitivity flow insensitive points analysis java 
define parameterization framework allows analysis designers control degree object sensitivity consequently cost precision tradeoffs analysis 
define new object sensitive side effect analysis java parameterized object sensitive points analysis 
define new object sensitive def analyses parameterized object sensitive pointsto analysis 
compare instantiations parameterized object sensitive analysis andersen style context insensitive analysis call context sensitive analysis 
experiments large set programs show object sensitive analyses practical significantly improve analysis similar cfa analysis 
class 
class void set static void main new new set sample program points graph 
precision mod analysis call graph construction virtual call resolution 
outline 
rest organized follows 
section describes andersen analysis java discusses sources imprecision due context insensitivity 
section defines object sensitive analysis 
section discusses parameterized object sensitivity section describes techniques efficient implementation 
new mod analysis defined section 
section describes def analyses 
experimental results section 
section discusses related section presents 

flow context insensitive points analysis java previous proposes various flow context insensitive analyses java :10.1.1.25.4206:10.1.1.32.1100
analyses typically derived similar analyses section describes flow context insensitive points analysis java derived andersen points analysis analysis previously described detail :10.1.1.109.6502
section illustrates context insensitivity compromises analysis precision 
analysis semantics andersen analysis java defined terms sets 
set contains variables analyzed program including static variables 
set contains names objects created object allocation sites allocation site si separate object name oi set contains instance fields program classes 
analysis constructs points graphs containing kinds edges 
edge oi shows variable points object oi 
edge oi oj shows field object oi points object oj 
sample program points graph shown 
brevity discuss detail kinds statements listed 
kinds statements calls constructors static methods handled similar fashion discussed shortly 
assumptions program consists kinds statements analysis literature simplify presentation 
necessary temporary variables may introduced achieve restrictions 
si new oi oi oi oi oj oi oj oi oj oi oj 
rn resolve oi 
rn oi resolve oi 
rn mj 
pn ret dispatch oi oi 
ret points effects program statements andersen analysis 
direct assignment instance field write instance field read object creation new virtual invocation rk virtual call name uniquely identifies method program 
method compile time target call determined declared type section 
run time invoked method determined examining class receiver object superclasses finding method matches signature return type section 
analysis semantics defined terms transfer functions add new edges points graphs edges removed graphs analysis 
transfer function represents semantics program statement 
functions different statements shown format statement input points graph resulting points graph 
denotes points set set successors graph analysis computes closure empty graph application transfer functions program statements 
statements effects points graph straightforward example statement creates new points edges objects pointed virtual call sites resolution performed receiver object pointed 
function dispatch uses class receiver object compile time target call determine actual method mj invoked run time 
variables 
pn formal parameters method variable corresponds implicit parameter 
variable ret contains return values mj assume method unique variable assigned values returned method achieved inserting auxiliary assignments 
calls static methods shown resolved immediately appropriate updates parameters return values performed example formal class 
class void set new new new new set set imprecision due field encapsulation 
actual bindings treated direct assignments 
assume object creation represented new followed immediately call appropriate constructor 
constructor call treated instance call target method 
analysis ignores statements effect flow values example assignments variables primitive types int boolean imprecision context insensitive analysis section presents examples basic objectoriented features programming idioms contextinsensitive analysis produces imprecise results 
encapsulation illustrates typical situation encapsulated field written modifier method 
call site line points points 
analysis applies transfer function virtual call shown implicit parameter method set points formal parameter points 
analysis processes call line points points 
statement line analysis erroneously infers points edges 
imprecision avoided analysis distinguishes invocations set invocations set 
distinction achieved analysis able associate multiple points sets objects set invoked 
allow statement analyzed separately receiver objects avoid creating spurious points edges 
section show object sensitive analysis achieves goal 
context insensitive analysis single copy method possible invocations 
field receiver object point objects passed arguments method sets value objectoriented languages encapsulation information hiding strongly supported fields accessed indirectly method invocations 
result contextinsensitive analysis incur significant imprecision 
inheritance consider example 
line class void 
class extends void 
class extends void 
class xa xa class extends xb super xb 
void xb xb class extends xc super xc 
void xc xc new new new new field assignment superclass 
executed constructor line invoked points xb points 
analysis processes call superclass constructor xa point respectively 
call line occurs due constructor call line point xa point 
statement xa line spurious edges added graph 
imprecision propagates analysis infers xb line points class class 
appears possible targets virtual call line problem occurs line 
result calls lines solution computed context insensitive analysis 
imprecision due statement xa constructor superclass merges information possible receiver objects 
presence inheritance instance fields located superclasses written invocations superclass constructors methods 
context insensitive analysis fields subclass instances point objects intended instances subclasses 
presence wide deep inheritance hierarchies context insensitivity lead substantial imprecision 
collections maps consider example 
single object refer method constructor class similarly refer local variable formal parameter method constructor brevity 
class container object data container int size object data tmp new object size data data tmp void put object int object data tmp data data tmp object get int object data tmp data return data tmp container new container container new container new put new put simplified container class 
name represents data arrays instances container 
objects stored individual containers appear shared containers 
order avoid imprecision data array instance container represented distinct object name 
addition analysis able assign distinct points sets put put possible receiver object put 
context insensitivity causes data stored instance collection map retrieved instance class instances subclasses 
collections vector maps hashtable commonly java context insensitivity seriously compromise analysis precision 

object sensitive analysis context sensitive analysis method analyzed separately different calling contexts 
define new form context sensitive points analysis java refer object sensitive analysis approach introduced 
object sensitivity instance method non static method constructor analyzed separately object method constructor may invoked 
precisely analysis uses set object names represent objects allocated run time 
method constructor may invoked run time objects represented object name object sensitive analysis maintains separate contextual version method constructor corresponds invocation context object sensitive analysis andersen analysis java section 
approach trivially applied flow context insensitive analyses java analyses derived context insensitive points analyses :10.1.1.11.3368
section defines semantics object sensitive analysis 
section discusses object sensitivity appropri ate flow insensitive analysis object oriented programs compares approach context sensitive analyses 
analysis semantics object sensitive analysis defined terms sets 
recall section set contains variables analyzed program including static variables set contains instance fields program classes 
set contains object allocation sites program 
set object names set replicas variables sets discussed shortly 
simplify presentation define relation shows method constructor may invoked instances class suppose defined class relation holds class subclass note hold overridden inheritance chain invoked instances super 
extend notation object names represents instances class 
object names analysis uses set object names 
parameter analysis 
oij pq denote sequence allocation sites si sj 
sp sq 
consider allocation site sq method static method run time objects allocated sq represented single object name oq 
instance method constructor run time objects allocated sq represented set object names form oij pq 
particular name oij pq represents run time objects created sq enclosing instance method constructor invoked object represented name oij created allocation site sp 
contextsensitive naming scheme allows analysis distinguish different objects created allocation site 
contrast andersen analysis uses single object name allocation site 
example allocation site appears constructor container 
sites create instances container object names correspond 
formal definition follows oq sq located static method oij sq located instance method constructor oij 
ij 
oij pq 
ij 
oj pq definition ensures object name corresponds sequence allocation sites analysis parameter 
continuing container example allocation sites dropped sequences respectively leaving object name represent objects created allocation site 
sq new cm cm cm cm 
rn cm sq resolve 
resolve 
mj 
pn ret dispatch 
ret object sensitive points effects statements instance methods constructors 
cm set possible contexts enclosing method 
context sensitivity set represents space possible contexts object sensitive analysis 
static method analyzed empty context 
instance method constructor separately analyzed context holds 
separation achieved maintaining multiple replicas variables possible context 
set replicas variables defined partial injective function map static variable local variable static method pair mapped local variable formal parameter instance method constructor pair mapped fresh variable context holds 
rest refer elements context copies 
example copies corresponding contexts 
similarly copies xa 
example container put container put context copies put put data tmp put corresponding contexts 
analysis easily extended analyze static methods separately contexts invoking instance methods constructors 
java programs static methods rarely change state invoking object expect analyzing static methods different contexts lead relatively small gains precision making analysis complex 
decided treat static methods intuitive manner analyze special context 
approach naming objects allocated static methods runtime objects created allocation site sq represented single object name oq 
transfer functions object sensitive analysis constructs points graphs nodes elements analysis semantics defined transfer functions add new edges points graphs 
statements located inside static methods transfer functions identical 
statements located instance methods constructors transfer functions 
example transfer function allocation site creates points edges context copies appropriate object names 
operation sq adds sq necessary removes allocation sites ensure length resulting name exceed effects essentially equivalent applying corresponding context set cm method located 
simplicity semantics elements cm possible contexts 
discussed section analysis implementations need consider contexts occur calls correctness transfer functions established considering small step operational semantics java 
define abstraction relation encodes correspondence entities semantics stack variables static fields heap objects points relationships nodes edges points graphs 
shown semantic effects kind statement modeled correctly corresponding transfer function abstraction relation holds statement holds statement executed 
property proof induction demonstrate points relationship occur run time represented appropriate points edge analysis solution 
example consider set statements 
xb xa similarly xc xa line points xb points 
analysis processes call line xa mapped context copies corresponding points edges xa added graph 
similarly line points xa points 
statement xa line occurs context 
xa xa produces edges 
xb xc analysis processes statement line xb mapped context copies corresponding 
points points statement line produces edge xb 
similarly statement line produces edge xc 
advantages object sensitivity object oriented languages java primary roles instance methods access modify state objects invoked 
instance methods typically encapsulated data implicit parameter modify retrieve data object structure rooted receiver object 
points analysis distinguish different receiver objects instance methods states objects essentially merged access modification state object propagated objects 
crucial distinguish different objects pointed analyze instance methods separately different receiver objects 
similarly role constructor create initial object state 
avoid merging initial states objects pointed points analysis distinguish different objects constructor invoked 
context sensitivity mechanisms finer granularity receiver object may create redundant contextual versions 
example popular mechanisms context sensitivity call string approach represents invocation context string enclosing call sites 
method analyzed separately call site invokes method 
statements redundant distinguish distinct call sites receiver object 
example statement formal analyzed separately distinct call sites receiver object effect analyzed object field receiver point objects points sets corresponding actual parameters call sites 
clearly flow insensitivity analysis effects distinct call site versions statement merged 
kind redundancy occurs statements read value field receiver object certain method invocations receiver 
redundancies cause call string approach incur increased analysis cost cases gain precision 
hand object sensitive analysis performs exactly necessary amount statements 
certain cases distinguishing calling context chain enclosing call sites precise distinguishing context receiver object 
illustrate case recall set statements 
suppose new statement added line new calling context distinguished call site effects constructor invoked line merged receivers 
redundant points edges 
imprecision propagates affects points analysis clients example virtual call line resolved 
cases distinguishing context chain enclosing call sites precise distinguishing context receiver object 
suppose instance method returns formal parameter param return param different call sites receiver actual parameters passed call sites different object sensitive analysis propagates redundant information left hand side call 
analysis distinguishes calling context call site infers correctly information passed call site flow left hand side call site 
general object sensitivity instance functional approach context sensitivity call chain context sensitivity instance call string approach incomparable terms precision 
observations java programs indicate situations object sensitivity beneficial call chain context sensitivity occur frequently practice 
examined output client analyses side effect analysis described section analysis computes test coverage requirements error recovery code java web services applications 
encountered situations simple practical object sensitive analysis produces precise results time call chain approach require call chain length achieve level precision call chains length greater typically considered impractical 
find situation java program distinguishing context call site produce precise results respect client analysis compared distinguishing context receiver object 
empirical results section indicate practice object sensitivity significant impact precision context sensitivity call chains 

parameterized object sensitivity section define parameterized framework object sensitive analysis 
precise costly instantiation framework context insensitive andersen analysis precise expensive instantiation object sensitive analysis described section 
framework parameterized dimensions 
analysis designer select degree precision naming scheme object names 
accomplished defining separate context depth kq allocation site sq having single depth entire analysis 
second analysis designer specify set variables multiple points sets maintained 
analysis replicates selected variables 
goal parameterization enhance flexibility object sensitive analysis 
varying object naming scheme set variables replicated analysis designer control directly size points graph cost analysis 
furthermore parameterization allows targeted context sensitivity 
global non discriminatory replication section analysis designer choose objects variables keeping precise information improve precision points solution implicit parameters formal parameters return variables sub objects composite objects 
parameterization object names separate context depth kq allocation site sq 
object name form oij pq analysis ensures ij 
pq kq 
boundary case kq single object name allocation site similarly andersen analysis 
example allocation site analysis maintain separate object names 
case analysis maintain single object name corresponding 
straightforward modify definition section accommodate parameterization 
similar change transfer function kq parameterization variables set contains variables replicated analysis 
boundary case replication analysis behavior similar andersen analysis 
function map constructs follows local variable instance method constructor mapped fresh variable context 
variable mapped 
map replicates variables applicable contexts preserves variables map 
example xa analysis maintain separate context copies variable context context 
xa just single variables result statement xa line analyzed context introduces spurious points edges 
transfer functions parameterized analysis identical ones modified function map parameter set clearly possible dimensions parameterization 
example analysis designer may choose analyze sequence constructor calls context sensitively designer may choose analyze parts program class object parameterizations object names variables simple formulate intuitive understand 
due simplicity dimensions parameterization chosen formalize idea targeted context sensitivity 
started experimental studies dimensions parameterization plan continue direction 

implementation techniques typical implementation andersen flow contextinsensitive analysis java uses statement processing routine processes different kinds program statements virtual dispatch routine models semantics virtual calls 
parameterized object sensitive analysis build existing implementation andersen analysis java 
achieved implementing function map augmenting statement processing routine process statement possible context accordance rules augmenting virtual dispatch routine map formal parameters return variable invoked method corresponding invocation context 
implementation parameterized analysis augments function map alters state ment processing routine virtual dispatch routine 
optimized ways 
semantics implicitly assumes possible contexts method calls method invoked context holds 
clearly keep track contexts occur calls take account effects statement context invoked receiver object current analysis solution 
second points set replica needed analysis return singleton set 
avoid storing replicas redundant points edges retrieving points set third processes statement contains non replicated variables need analyze multiple times different contexts 
similarly replicated variable assigned statements form statements analyzed 
case context copies values analysis needs keep copy words transfer function replaced 
rest refer statements analyzed context independent statements need analyzed multiple times different contexts context dependent 
kinds statements analyzed multiple times 
example consider statements occur instance method suppose void suppose analysis keeps non replicated variable points set union points sets context copies easy see analyzing statements multiple times analysis algorithm analyze statements affecting computed points sets 
observation leads implementation technique recognizes statements contain replicated variables may processed context independently processed multiple times 
technique affect analysis correctness precision 
suppose replicated variable 
simplification creates new variable new context dependent statement clearly points set union points sets context copies consider assignments form left hand side replicated variable changes replaced context sensitive information may lost 
remaining kinds statements replaced statement analyzed 
see loss precision consider processed context dependently context analysis get object points set set field refer objects pointed processed context independently analysis process exactly objects create exactly points edges 
similar reasoning determine replaced certain calls 
consider virtual call pn pi call analyzed context independently loss precision cases analysis examine set receiver objects pro cess set formal actual assignments recall points set union points sets context 
similarly call pn processed 
replicated set target methods invoked contexts call 
call analyzed context dependently analysis process assignments param 
param param formal parameter method target 
call analyzed context independently analysis process assignment param equivalent effect 
ease explanation rest section cci denote set context independent calls categories 
analyze context independently call sites ci ln li replicated 
precompute certain information provide input points analysis 
computation uses conservative call graph computed cha 
site ci analyzed context independently replacing modifying transfer function assign values actuals non replicated corresponding formals pi 
change occurs values pi contextdependent manner ci callees guaranteed conditions 
assignments contain replicated variables reachable ci conservative call graph value replicated formal context dependent manner assignments callees 
example sample method shown earlier statements contain non replicated variables calls satisfy condition 
second call site cj reachable ci including ci monomorphic belong set cci defined earlier 
information cj may propagated imprecisely 
example consider sample method call site ci invokes context method context 
value propagated value 
conditions hold ci formal actual pairs treated context independently 
finding call sites done single pass conservative call graph 
order access points sets context copies formals additional context dependent assignments need added ci formal actual pair 
described cases assignments removed points analysis 
technique increases number context independent calls takes account sequence constructor calls 
cn ci invokes constructor class ci invokes constructor superclass sequences common new objects created 
constructors contains assignment formal assignment input stmt set statements map methods set methods pt output mod stmt initialized stmt declare mmod methods initialized methods foreach instance field write stmt foreach context appears mod pt map add mod mmod changes occur mod mmod foreach virtual call :10.1.1.109.6502
stmt foreach context appears foreach object pt map add mmod target mod add mod mmod foreach static call 
stmt foreach context appears mod mod mmod add mod mmod object sensitive mod analysis 
denotes power set inlined call site cj constructor possible call sites cj cj example statement inlined constructors subsequently constructor calls lines 
result calls lines line line context independent inexpensive process 
depending intended uses points analysis non replicated variable remove completely context copies replicated variable suppose purposes analysis clients call graph construction sufficient compute union points sets replicas case eliminated changing function map map contexts 
perform change occurrences statements original program replaced techniques discussed earlier 
case statements introduced call sites described removed 

side effect analysis section mod analysis points analysis 
statement context method enclosing mod algorithm computes set mod objects modified executing algorithm shown 
pt denotes set objects pointed context copy say statement appears context holds method enclosing mmod stores sets objects modified contextual version method objects modified invoked context 
virtual calls lines target methods determined receiver object context class compile time target addition object determines set modified objects associated target method added mod set line 
static calls lines denote special empty context statements methods appear 
formulated respect underlying analysis mod analysis easily generalized account arbitrary method context sensitivity 
example consider points analysis distinguishes context call site 
mod algorithm points analysis compute mod sets statement call site enclosing method virtual calls lines target methods determined receiver object context class compile time target update mod line altered add set mmod target objects associated target method context represented call site case context insensitive mod analysis single mod set statement single mmod set method 
example treatment virtual calls foreach virtual call 
stmt foreach object pt mod mod mmod target add mod mmod example 
consider example 
mod analysis context insensitive points analysis erroneously determines mod sets statements 
consider mod analysis object sensitive points analysis section 
statement line appears contexts 
mmod mmod 
receiver call statement line mod analysis infers mod 
similarly mod 
mod algorithm easily adapted exploit implementation techniques section 
recall client analysis points analysis need individual points sets context replicas variable cases replicas eliminated 
mod analysis modified points sets context copies certain formal parameters necessary part mod analysis input 
particular possible formal parameter assigned inside body method reality formals assigned inside methods 
param denote set explicit formal parameters param param assigned body method param modified mod analysis introduces additional sets param 
set contains points sets context copies formal parameter param 
sets initialized mod analysis 
modified part analysis changes occur mod mmod foreach instance field write param foreach context appears mod param add mod mmod foreach virtual call :10.1.1.109.6502
rn foreach context appears foreach object pt add mmod target mod foreach param add pt param add mod mmod lines update set mod indirect write statements param param corresponding set param modified 
note cases indirect writes done implicit parameters expect analysis perform due lines infrequently 
lines propagate points set context copy actual set param 
ri param pt ri pt pt map ri 
programs chains parameters rare typically ri param amount due statements expected small 
addition implementation mod analysis take advantage fact variables statements analysis need maintain multiple mod sets set statements denoted sci 
similarly methods analysis need maintain multiple mmod sets set methods denoted mci consider assignment si call sj 
clearly mod si pt contexts si mod sj mmod target contexts sj 
analysis needs maintain single mod set statement 
statements method sci mci 
furthermore call statements added repeatedly sci follows possible targets call members mci call added sci 
techniques analysis avoid storing processing redundant context sensitive mod mmod sets 

def analysis goal def analysis compute def associations pairs statements 
def association memory location pair statements assigns value subsequently uses value 
procedural languages fortran known algorithms computing intraprocedural associations procedure interprocedural associations different procedures 
information wide variety uses optimizing compilers dependence analysis software tools slicing data flow testing 
presence pointers def analyses output pointer analysis disambiguate indirect definitions indirect uses 
typically analysis followed reaching definitions analysis determines sets definitions may reach program statement order identify def associations 
object oriented languages def analyses defined similar manner 
java different categories memory locations need considered 
local variables including formals java aliases intra method def associations exist 
true variables primitive types variables types 
traditional intraprocedural def analyses trivially applied situation 
global variables static fields aliases def associations may cross method boundaries 
associations identified traditional interprocedural def analyses 
def associations object fields computed manner similar associations procedural languages pointers 
points analysis determine objects may accessed expressions form object oi points set memory location oi added def set corresponding statement 
standard def analysis subsection def analysis object fields directly instantiates standard techniques interprocedural def analysis 
analysis takes input solution computed parameterized points analysis computes set def associations 
analysis input contains interprocedural control flow graph icfg program 
icfg directed graph nodes representing statements edges representing flow control statements 
method associated single entry node single exit node 
call statement represented pair nodes call node return node 
described icfg contains edges call node entry nodes methods invoked call site virtual calls may multiple outgoing edges 
graph contains matching edges exit nodes called methods return node call site 
loss generality simplifying assumption statement writes object field form statement reads object field form def set icfg node defined def occurs context pt form def nodes 
defined similarly 
example program non empty sets def 
node analysis computes set reaching definitions rd 
definition pair form icfg node 
rd analysis reports def association 
example computed associations 
analysis defined instance general framework interprocedural analysis due reps 
system equations defines analysis semantics 
method set contains definitions created direct indirect callees definitions propagated back return nodes calls due fact analysis perform kills definitions may point information 
interprocedural propagation sets callees input stmt set statements pt output du subset stmt stmt method def def def callees node entry node return node rd pred rd def return node corresponding call node rd rd entry node rd def solution callees rd du rd stmt standard def analysis 

call node virtual call 
callees set methods target pt context occurs 
set encodes call entry edges call site 
non virtual instance calls static calls set contains compile time target method 
similar set callees defined method union corresponding sets call sites inside entry node set contains call nodes callees contains enclosing method example 
consider statements 
def 
definitions reach bottom statement propagated statement 
result rd analysis reports def association 
similarly rd results association 
object sensitive def analysis points analysis construct sets def order compute def associations object fields 
straightforward application standard def analyses may introduce imprecision 
example reach bottom node reality definition feasible program point 
particular example imprecision create infeasible def associations 
general arbitrary number infeasible associations may introduced 
example 
consider set statements 
class 
class void void static void main new new new new imprecision standard def analysis 
case def 
definitions reaching bottom statement due statement propagated body method result analysis reports associations 
associations infeasible field null cases called 
potential source imprecision standard def analysis fact treats uniformly definitions created method 
result definitions propagated back callers method 
example definition valid calling context 
definition propagated back statement calling context 
problem solved def analysis uses output object sensitive points analysis 
case def analysis object sensitive described 
node form define def sets follows def occurs context pt nodes def 
sets defined similarly 
example program non empty sets def def 
multiple rd sets node rd contains pairs form definitions reach calling context enclosing method rd analysis reports association 
entry node context analysis uses set defined follows enclosing method called context call site node occurs context 
set constructed easily object sensitive points solution 
analysis pair set definitions reaching context propagated entry node context semantics object sensitive def analysis defined equations 
informa input stmt set statements pt output du subset stmt stmt method def def def pt pc call site target static call node entry node return node rd pred rd def return node corresponding call node rd rd entry node rd rd contains call node occurs context pt target def solution du occurs context stmt rd object sensitive def analysis 
tion propagated callee back caller propagation takes account available information calling context 
example definition reaches call site context enclosing method definition propagated callees potentially invoked context similarly definition created inside callee context propagated back callers introduce context restriction encoded definition 
example set definitions reaching bottom node 
pt equivalent contains 
object sensitive analysis keeps track calling context avoids propagating spurious definition back bottom node 
final solution rd rd 
object sensitive analysis correctly concludes def associations involving nodes 
contrast standard def analy sis reports spurious associations 
contextual def analysis object oriented programs typically manipulate object state invocation instance methods 
purposes data flow testing test construction standard def uses may provide insufficient information include information calling context enclosing definition statements 
address problem pollock propose contextual def associations generalization standard includes information context enclosing field writes field reads 
contextual def association tuple form cdef cdef chain call sites enclosing statement writes field location similarly chain call sites enclosing statement reads location standard def analysis assigns non empty def sets exclusively statements form contextual analysis assigns cdef sets call sites call sites lead directly indirectly definition statement example set statements contextual analysis associates cdef tuple statement tuple statement computing def association analysis computes association 
contextual def associations computed object sensitive points analysis 
computation consists phases 
phase analysis determines cdef tuples associated program statements 
second phase uses information construct contextual def associations 
construction cdef tuples object sensitive points analysis determine cdef sets program statements 
algorithm cdef construction parameterized object sensitive points analysis described construction essentially 
brevity show calls instance methods calls static methods handled similarly 
algorithm produces sets cdef node represents field write call nodes cdef sets empty 
similarly propagation standard def sets callees callers statements form modified location propagated callers 
propagation expressed equations statements form compute cdef sets 
call site propagation point attached chain forms context definition 
backward propagation defined terms auxiliary function escapes 
method object escapes holds reachable points graph formal parameters return variable global static variable 
intuitively object escapes passed caller escapes callee caller call site affects definition part contextual input stmt set statements pt output cdef stmt stmt node form cdef occurs context escapes edef occurs context escapes node form cdef call site edef method edef edef edef call site node corresponding call site pt pc target escapes cdef pt pc target escapes algorithm cdef computation 
chain 
example accesses propagated caller 
appropriate mechanisms prevent infinite call chains example decomposition call graph strongly connected components limit length call chains 
limiting call chains call site provides practical approximation precise contextual def analysis 
example 
consider example 
algorithm edef edef edef edef propagating definitions callers attaching corresponding call sites results algorithm computes cdef sets cdef node return node entry node rd pred rd cdef return node corresponding call node rd rd cdef entry node rd contextual reaching definitions 
cdef similarly contextual uses 
example consider statements suppose class integer field method contains statement line 
suppose statement added line int case contextual def tuple field object corresponding tuple 
construction def associations second phase analysis computes reaching definitions node propagating cdef tuples control flow graph method enclosing cdef tuple 
algorithm rd computation shown computes essentially information computed tuple construction algorithm 
algorithm propagates return node reaching definitions corresponding call node cdef tuples associated note definition propagated backwards callee 
statement form modifies object visible method propagated cdef construction phase analysis shown 
appears appropriate context cdef cdef tuple caller similarly definition propagated entry method corresponding uses propagated backwards appropriate context phase analysis 
contextual def tuples constructed examining rd node contextual definition cd rd writes matching cu algorithm computes association cd cu 
call node algorithm considers cd cdef creates def associations matching cu 
example 
example contextual definition reaches nodes 
similarly reaches nodes 
node matches corresponding results contextual def tuple 
similarly node matched leads construction 
example augmented integer field described earlier tuple created 
imprecision context insensitive analysis clearly cdef tuples computed 
ignoring context backward propagation introduce substantial imprecision modified locations propagated uniformly callers regardless invocation context 
example consider set statements 
algorithm take account object context compute sets edef edef 
propagating definitions callers attaching corresponding call sites results leads infeasible contextual definitions cdef cdef 
imprecision results infeasible contextual def associations 

empirical results chose implement particular instantiations parameterized object sensitive points analysis 
instantiation denoted objsens keep contextsensitive information implicit parameters formal parameters instance methods constructors 
second instantiation denoted objsens keep context sensitive information implicit parameters formal parameters return variables instance methods constructors 
cases context depth allocation sites 
methods constructors java usually short keeping precise information formals including return variables potential improve considerably points solution significant increase analysis cost 
potentially beneficial instantiations object sensitive framework may context depth allocation sites container classes example array hash entries hashtable array objects vector increased precision object naming allow avoid sharing objects stored different containers 
generally object naming context depth may beneficial subobjects composite objects example allocations sites constructors create new objects immediately assigned instance fields object constructed 
addition object sensitive analyses implemented context sensitive analysis instantiation popular call string approach context sensitivity call string length 
analysis distinguishes context call site conceptually similar cfa algorithm 
order allow comparison object sensitive analyses context replication performed formal parameters return variables instance methods constructors 
discussed section approach context sensitivity theoretically incomparable object sensitive analyses 
program user size program class kb class method stmt proxy compress db jb echo raytrace mtrt jlex javacup rabbit jack jess mpegaudio sablecc javac creature soot beta javacc table characteristics data programs 
columns show number bytecode size user classes 
columns include library classes 
object sensitive analyses objsens objsens compared andersen context insensitive analysis denoted call string context sensitive analysis denoted callsite 
context sensitive analyses built top existing constraint implementation andersen analysis 
implementation techniques described sections order identify context independent statements eliminate unnecessary replication replicated variables 
soot framework www sable mcgill ca process java bytecode build typed intermediate representation 
points analysis implementation bane toolkit bane cs berkeley edu constraint program analysis 
experiments performed mhz sun fire shared machine gb physical memory 
reported times median values runs 
publicly available data programs ranging size kb mb bytecode 
set programs previous andersen analysis 
set includes programs spec jvm suite benchmarks previous analysis java programs internet archive www com popular publicly available java applications 
table shows characteristics data programs 
columns show number user classes bytecode size 
columns show size program including library classes class hierarchy analysis cha filter irrelevant classes methods 
cha inexpensive analysis determines possible targets virtual call examining class hierarchy program 
number methods essentially number nodes call graph computed cha 
column shows number statements soot intermediate representation 
size measurements subsequent points analyses effects jvm startup code native methods jdk encoded stubs included analysis input 
dynamic class loading class forname reflection calls class newinstance resolved manually similar approaches typical static program compilers tools 
analysis cost measurements analysis cost table 
columns show running time memory usage andersen analysis 
columns show cost callsite objsens objsens running times executions constraint analyses including construction soot intermediate representation 
empirical results demonstrate object sensitive analyses practical terms running time memory consumption 
majority programs comparable performance andersen analysis 
certain cases sablecc creature cost object sensitive analyses significantly lower cost contextinsensitive analysis 
factors explain results 
improved precision produces smaller points sets results reduced memory consumption analysis 
case points sets significantly smaller objsens objsens run faster observed data programs 
second pointsto sets statements objsens objsens perform comparable amount 
expect object sensitive analyses analyze context dependent statements multiple times context expensive 
statement accesses receiver object containing different contextual versions number receivers enclosing method 
processes consider possible receivers 
amount perform receiver roughly corresponds amount objsens objsens perform contextual version 
statement object sensitive analyses comparable cost 
statements instance methods constructors access receiver object may explain analyses exhibit comparable costs 
majority programs adding return variables result increased analysis cost 
reason cases assignments return variables analyzed context independent recall section context independent statements analyzed regardless calling contexts 
case statement ret var statement typically involves implicit parameter statements objsens objsens perform comparable amount 
certain cases replication return program callsite objsens objsens time mem time mem time mem time mem sec mb sec mb sec mb sec mb proxy compress db jb echo raytrace mtrt jlex javacup rabbit jack jess mpegaudio sablecc javac creature soot javacc table running time memory usage analyses 
variables substantial effect analysis 
example sablecc declares pair methods set get root wide deep inheritance hierarchy 
methods write read field receiver object invoked frequently receivers different classes 
objsens able separate object context invocation set object fields assigned correctly 
get method invoked results merged possible receivers return variables distinguished different contexts 
replicating return variables objsens avoids imprecision results significant reduction running time 
substantial benefits object sensitivity due parameter replication replicating return variables increase analysis cost cases results significant precision cost improvements 
beneficial replicate return variables addition formal parameters 
similarly object sensitive analyses call string context sensitive analysis achieves practical cost 
due factors 
implemented optimization techniques analogous ones described section 
second callsite benefits increased precision context insensitive analysis 
largest programs experiments running times callsite slower objsens may explained fact callsite precise objsens analysis precision evaluated precision improvements objsens context insensitive analysis call string anal ysis respect mod analysis call graph construction virtual call resolution 
mod analysis mod algorithm described section performed measurements objsens callsite order estimate impact analyses mod analysis 
precise points analyses produce smaller number modified objects statement 
considered methods objsens callsite reported potentially executable methods reachable main static initializers jvm start methods 
statements methods computed mod sets algorithm mod sets callsite corresponding version algorithm distinguishes context invocation site mod sets corresponding context insensitive version algorithm 
order compare output callsite output merged mod sets callsite different contexts obtain single mod set 
similarly merged mod sets objsens different object contexts 
example aggregate objsens mod set line union mod mod 
analogously callsite mod set union mod mod 
table shows distribution number modified objects program statement analyses 
statements modify object considered results 
column corresponds specific program callsite objsens proxy compress db jb echo raytrace mtrt jlex javacup rabbit jack jess mpegaudio sablecc javac creature soot javacc average table number modified objects program statements 
column shows percentage statements number modified objects corresponding range 
range numbers 
example column corresponds statements may modify objects column corresponds statements may modify objects 
column shows percentage total number statements corresponds particular range numbers modified objects 
measurements table show object sensitivity significantly improves analysis precision 
mod analysis objsens average statements modify objects 
contrast mod analysis percentage 
significant note nearly statements modify objects 
indicates substantial imprecision reduced significantly objsens results mod analysis objsens shown essentially exception sablecc objsens slightly precise objsens modifications object oriented programs occur implicit parameter objsens benefits object sensitivity separates different object contexts 
experiments demonstrate distinguishing context invocation site substantially improve mod analysis precision 
mod analysis callsite average statements modify objects 
substantially worse objsens slightly better 
addition callsite statements modify objects indicates substantial imprecision 
examination examples extracted benchmarks clearly reveal precision callsite mod analysis compromised inherent object oriented features encapsulation inheritance 
example benchmark jb defines class extends java util hashtable overrides hashtable put 
uses call sequence put contains call site super put 
hashtable put contains call site rehash 
method hashtable rehash allocates new array hash entries assigns array field receiver contains instance field write statement table 
call site program invokes rehash callsite mod analysis computes single set mmod hashtable rehash rehash 
hashtable put typically invoked instance class hashtable instance subclasses set mmod hashtable rehash contains direct indirect instance hashtable 
callsite mod analysis propagates set call site invokes hashtable put including subsequently propagates set call put 
callsite mod analysis determines call statement put modifies objects due instance field write rehash fact modifies exactly object receiver object call put 
contrast mod analysis computes mmod sets rehash hashtable put put possible receiver object precisely determines call put program callsite objsens objsens resolved removed resolved removed resolved removed proxy compress db jb echo raytrace mtrt jlex javacup rabbit jack jess mpegaudio sablecc javac creature soot javacc average table improvements context insensitive analysis 
increase number resolved call sites 
improvement number removed target methods 
modifies exactly object receiver call due instance field write statement table rehash 
object oriented programs instance fields written sequence method invocations receiver implicit parameter 
context insensitive mod analysis incur substantial imprecision merges information indirect modifications possible receivers 
call string context sensitive analysis incur substantial imprecision length call string sufficiently large 
hashtable example analysis needs call string length order determine precisely call method put modifies exactly object due instance field write rehash 
call string length greater usually considered impractically expensive large programs 
empirical results show object sensitive analysis promising candidate producing useful sideeffect information 
able capture side effects arise due fundamental object oriented features encapsulation inheritance 
contrast contextinsensitive analysis call string context sensitive analysis appear ill suited side effect analysis objectoriented languages 
precise information computed object sensitive analysis important implementing advanced optimizations aggressive optimizing compilers improving precision software productivity tools corresponding reduction human time effort spent software understanding restructuring testing 
virtual call resolution call graph construction application points analysis determine potential target methods virtual call sites 
information construct program call graph prerequisite interprocedural analyses identify virtual call sites resolved single target method 
performed measurements evaluate improvement callsite objsens objsens virtual call resolution call graph construction 
andersen analysis produces relatively precise call graph results 
determine improvement number resolved calls considered call sites resolved single target method cha 
set cha unresolved call sites occur methods identified executable objsens callsite 
computed number sites resolved single target method callsite objsens objsens improvement number resolved call sites callsite objsens objsens shown columns table 
average callsite resolves call sites objsens resolves objsens resolves call sites 
increased precision allows better removal redundant run time virtual dispatch enables additional method inlining 
computed total number removed target methods sites callsite objsens objsens improvement total number removed target methods callsite objsens objsens shown columns table 
average callsite removes target methods objsens removes objsens removes target methods 
improved precision beneficial reducing cost improving precision subsequent interprocedural analyses 
context sensitive analyses able improve precision context insensitive analysis 
analysis produces precise results call string context sensitive analysis handles objectoriented features precisely 
consider example 
statement new added line callsite unable resolve virtual call line 
presence encapsulation inheritance instance fields written sequence invocations 
call string analysis typically need impractically long call string order separate writes fields instances different classes writes fields different instances class 
object sensitive analysis able separate field writes precisely improves precision client analyses call graph construction virtual call resolution 
precision experiments confirm substantial benefits object sensitivity due parameter replication 
replicating return variables addition parameters appear increase analysis cost result significant improvements cost precision 
objsens better candidate objsens optimizing compilers software tools 

related flow insensitive context sensitive alias analysis java developed ruf context specialized algorithm synchronization removal 
ruf analysis uses method summaries model context sensitivity analysis requires bottom traversal call graph called method analyzed callers 
analysis andersen analysis cubic time worst case complexity contrast ruf algorithm linear steensgaard points analysis :10.1.1.11.3368:10.1.1.109.6502
context sensitive pointsto analyses java :10.1.1.18.621:10.1.1.37.6842
algorithm uses method summaries model context sensitivity uses call string approach :10.1.1.18.621
analyses precise significantly costly 
flow insensitive context insensitive points analyses java described :10.1.1.25.4206:10.1.1.32.1100
andersen analysis points analysis described context insensitive flow sensitive 
dimensions precision analysis object oriented languages discussed 
class analysis object oriented languages computes set classes program variable set approximates classes run time values variable 
typical clients information call graph construction virtual call resolution 
various practical contextinsensitive class analyses :10.1.1.136.9764
different mechanisms context sensitivity studied context class analysis methods typically combination parameter types context :10.1.1.18.621:10.1.1.30.8177:10.1.1.48.5515
presents class analyses smalltalk self 
similarly analysis analyses information receiver object order create select contextual method versions 
analysis additional information method invocation site 
idea object sensitivity receiver object context believe purposes flow insensitive points analysis java invocation sites information may redundant cases 
non parameterized analysis section expressed general framework context sensitive class analysis identified studied :10.1.1.18.621
conceptually mod analysis similar mod analyses :10.1.1.52.5364
presents algorithms side effect analysis java context insensitive information 
precise algorithms context insensitive points analysis java derived steensgaard analysis :10.1.1.11.3368
clausen investigates side effect analysis java context java bytecode optimizer 
clausen side effect analysis points information modification field assumed write objects class contains field 
may result precise sideeffect information 
previous pande defines def analysis programs single level pointers 
analysis flow context sensitive pointer analysis allows def analysis context sensitive 
def analyses section similar idea take advantage context sensitivity points analysis 
targets different language different notion context sensitivity appropriate object oriented software 
data flow testing object oriented programs includes :10.1.1.27.3919
harrold rothermel describe techniques data flow testing classes 
focuses def pairs instance variables class address interactions polymorphism aliasing 
pollock develop contextual def associations generalization existing data flow testing techniques addresses interactions polymorphism aliasing 
computation def pairs points escape analysis :10.1.1.12.2189
shows object sensitive points analysis purposes computing contextual def uses practical alternative context flow sensitive analysis :10.1.1.12.2189

framework parameterized object sensitive points analysis side effect def analyses 
basic idea approach distin different receiver objects method 
show object sensitive analysis capable achieving significantly better precision context insensitive analysis time remaining efficient practical 
object sensitive analysis better candidate relatively precise practical general purpose points analysis java 
plan investigate instantiations framework especially instantiations involve precise object naming schemes targeted context sensitivity 
example interesting consider precise naming sub objects composite objects object associated single enclosing object 
parameterization framework plan focus instantiations significantly improve precision acceptable increase analysis cost 
especially important software productivity tools imprecision may result wasted time effort tool user 
presents experimental comparison analyses context sensitive analysis distinguishes context enclosing call site instance call string approach 
interesting perform theoretical empirical comparisons object sensitivity instances functional approach context sensitivity :10.1.1.37.6842
plan investigate applications points side effect def analyses context software productivity tools tools program understanding testing 
tradeoff cost precision important issue tools intend focus problem 
acknowledgments 
reviewers helpful comments 
research supported part nsf ccr 

agesen 
constraint type inference parametric polymorphism 
static analysis symposium lncs pages 
agesen 
cartesian product algorithm simple precise type inference parametric polymorphism 
european conference object oriented programming 
aho sethi ullman 
compilers principles techniques tools 
addison wesley 
aiken hndrich foster su 
toolkit constructing type constraint program analyses 
international workshop types compilation 
andersen 
program analysis specialization programming language 
phd thesis diku university copenhagen 
bacon sweeney 
fast static analysis virtual function calls 
conference object oriented programming systems languages applications pages 
qian hendren 
points analysis bdd conference programming language design implementation pages 
chatterjee ryder landi 
relevant context inference 
symposium principles programming languages pages 
clausen 
java bytecode optimizer side effect analysis 
concurrency practice experience 
das 
unification pointer analysis directional assignments 
conference programming language design implementation pages 
dean grove chambers 
optimizations object oriented programs static class hierarchy analysis 
european conference object oriented programming pages 
defouw grove chambers 
fast interprocedural class analysis 
symposium principles programming languages pages 
diwan moss mckinley 
simple effective analysis statically typed object oriented programs 
conference object oriented programming systems languages applications pages 
fitzgerald knoblock ruf steensgaard tarditi 
marmot optimizing compiler java 
software practice experience mar 
fu ryder milanova wonnacott 
testing java web services robustness 
international symposium software testing analysis 
gosling joy steele 
java language specification 
addison wesley 
grove chambers 
framework call graph construction algorithms 
acm transactions programming languages systems 
grove defouw dean chambers :10.1.1.18.621
call graph construction object oriented languages 
conference object oriented programming systems languages applications pages 
harrold rothermel 
performing data flow testing classes 
symposium foundations software engineering 
harrold soffa 
efficient computation interprocedural definition chains 
acm transactions programming languages systems mar 
hind 
pointer analysis 
international symposium software testing analysis pages 
ibm 
high performance compiler java 
www alphaworks ibm com formula 
hendren 
scaling java points analysis spark 
international conference compiler construction lncs pages 
liang harrold 
extending evaluating flow insensitive context insensitive points analyses java 
workshop program analysis software tools engineering pages june 
milanova 
precise practical flow analysis object oriented software 
phd thesis rutgers university aug 
available report dcs tr 
milanova rountev ryder 
parameterized object sensitivity points side effect analyses java 
international symposium software testing analysis pages 
palsberg schwartzbach 
making type inference practical 
european conference object oriented programming pages 
palsberg schwartzbach 
object oriented type inference 
conference object oriented programming systems languages applications pages 
pande landi ryder 
interprocedural def associations systems single level pointers 
ieee transactions software engineering may 
plevyak chien 
precise concrete type inference object oriented languages 
conference object oriented programming systems languages applications pages 

study side effect analyses java 
master thesis mcgill university dec 
reps horwitz sagiv 
precise interprocedural dataflow analysis graph reachability 
symposium principles programming languages pages 
rountev milanova ryder 
points analysis java annotated constraints 
conference object oriented programming systems languages applications pages oct 
ruf 
effective synchronization removal java 
conference programming language design implementation pages 
ryder 
dimensions precision analysis object oriented programming languages 
international conference compiler construction lncs pages 
invited 
ryder landi stocks zhang 
schema interprocedural modification side effect analysis pointer aliasing 
acm transactions programming languages systems mar 
shapiro horwitz 
effects precision pointer analysis 
static analysis symposium lncs pages 
shapiro horwitz 
fast accurate flow insensitive points analysis 
symposium principles programming languages pages 
sharir pnueli 
approaches interprocedural data flow analysis 
muchnick jones editors program flow analysis theory applications pages 
prentice hall 
pollock 
construction contextual def associations object oriented systems 
ieee transactions software engineering nov 
pollock 
inter class def analysis partial class representations 
workshop program analysis software tools engineering pages 
steensgaard 
points analysis linear time 
symposium principles programming languages pages 
snelting 
points java general framework empirical comparison 
technical report passau sept 
sundaresan hendren rai lam gagnon godin 
practical virtual method call resolution java 
conference object oriented programming systems languages applications pages 
tip sweeney streeter 
practical experience application extractor java 
conference object oriented programming systems languages applications pages 
tip palsberg 
scalable propagation call graph construction algorithms 
conference object oriented programming systems languages applications pages 
vall rai gagnon hendren lam sundaresan 
optimizing java bytecode soot framework feasible 
international conference compiler construction lncs 
whaley lam 
efficient inclusion points analysis strictly typed languages 
static analysis symposium pages 
whaley rinard :10.1.1.12.2189
compositional pointer escape analysis java programs 
conference object oriented programming systems languages applications pages 
