enhancing file sharing internet scale query processor boon loo joseph hellerstein ryan huebsch scott shenker ion stoica uc berkeley intel research berkeley international computer science institute huebsch shenker cs berkeley edu address problem designing scalable accurate query processor peerto peer filesharing similar distributed keyword search systems 
globally distributed monitoring infrastructure perform extensive study gnutella filesharing network characterizing topology data query workloads 
observe gnutella query processing approach performs popular content quite poorly rare items replicas 
consider alternate approach distributed hash tables dhts 
describe implementation piersearch dht system propose hybrid system gnutella locate popular items piersearch handling rare items 
develop analytical model approaches concert gnutella traces study tradeoff query recall system overhead hybrid system 
evaluate variety localized schemes identifying items rare worth handling dht 
lastly show live deployment nodes continents nicely complements gnutella ability handle rare items 
distributed query processing topic database research late years problem revisited setting peer peer filesharing systems focused point design space quite different traditional database research 
filesharing applications demand extreme scalability federation involving orders magnitude permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference toronto canada machines ambitious goals distributed database systems proposed literature 
filesharing networks knit hundreds thousands unmanaged computers globe unified query system 
data filesharing consists simple files stored hosts names files queried situ transmitting centralized repository 
filesharing network typically runs thousands concurrent keyword queries names files network 
separately supports point point downloads actual file content peers 
popular filesharing systems gnutella kazaa simple designs controversy effectiveness 
systems connect peer machines ad hoc unstructured network 
query processing proceeds simple fashion known flooding node transmits keyword query network neighbors forward query recursively finite number hops known time live ttl query 
node matching filename reports back query source displays list matching file locations properties 
scale networks flooding schemes exhaustive query visit small fraction nodes network 
result networks provide guarantees query recall fail return matches exist network 
researchers focusing significant attention alternative structured networks support content routing 
networks able ensure messages labeled key routed particular machine 
allows network coordinate global agreement location particular items queried keyed items routed network particular node key lookups routed node 
functionality provided need centralized state works machines join leave network 
content routing akin put get interface hash tables networks dubbed distributed hash tables dhts 
dhts matured rapidly years theoretical results system prototypes 
popular unstructured networks dhts principle provide terms files items interchangeably full recall network connected peers 
date little agreement best design query processing filesharing systems 
attempt address question number fronts 
highlight strengths weaknesses unstructured networks extensive empirical analysis gnutella network 
performed live distributed monitoring gnutella network multiple machines spread continents planetlab testbed 
gathered extensive traces network graph structure query workload file contents 
key observations replication files network follows long tailed distribution moderate number popular files containing replicas network long tail rare files containing replicas 
observation observe flooding approach unstructured networks efficient simple solution finding copies popular files poor latency result quality queries focus rare items 
second describe piersearch implementation dht keyword querying 
piersearch application built top pier dht internet scale relational query engine built group :10.1.1.14.7680
dht approach provide better answers terms query recall require network overhead publish files keyword dht perform distributed joins keyword lists query processing time 
analysis workload solutions propose simple hybrid approach high quality search piersearch build partial index rare items gnutella network 
queries handled hybrid manner popular items native gnutella protocol rare items piersearch 
provide analytical model study potential benefits universal deployment piersearch bundled gnutella 
model gnutella traces study trade query recall system overhead hybrid system 
addition propose compare variety techniques key challenges hybrid solution correctly identifying rare files indexed dht 
implemented solution modifying open source limewire gnutella software combining piersearch 
ran implementation planetlab nodes continents participating live gnutella network addition piersearch alongside gnutella limited subset gnutella nodes demonstrates notable benefits latency recall queries focus rare items 
background dhts planetlab proposals dht designs years briefly describe salient features 
overview dht research appears 
name implies dht provides hash table abstraction multiple distributed compute nodes 
node dht store data items item indexed lookup key 
heart dht overlay routing scheme delivers requests key node currently responsible key 
done global knowledge permanent assignment mappings keys machines 
routing proceeds multi hop fashion node keeps track small set neighbors routes messages neighbor sense nearest correct destination 
dhts guarantee routing completes log message hops network nodes 
dht automatically adjusts mapping keys neighbor tables set nodes changes 
dht forms basis communication pier 
exception query answers messages sent dht routing layer 
pier stores temporary tuples generated query processing dht 
dht provides pier scalable robust messaging substrate set nodes dynamic 
realistic assessments peer peer systems difficult achieve machines spread world 
heavy planetlab testbed analyze gnutella multiple vantage points test implementation piersearch truly distributed setting 
planetlab open globally distributed platform developing deploying accessing planetary scale network services 
planetlab today consists machines located sites continents 
experiments utilized machines different parts north america including canada europe 
planetlab enabled achieve serious experimental results report injected queries gnutella crawled gnutella nodes minutes deployed piersearch engine sites distributed continents 
fact challenges planetlab power carefully early experiments raised warning flags system administrators resembled malicious network behavior 
overview piersearch piersearch dht search engine implemented pier 
shows design piersearch single node 
piersearch supports class queries keyword search enables query items containing set keywords terms 
items filenames contain search terms satisfy query 
piersearch consists main components publisher search engine described detail 
publisher support queries piersearch maintains inverted file index structure enables fast retrieval items contain search term 
term index maintains inverted list posting list file identifiers items contain indexed term 
order quickly find inverted list search term possible query terms organized index structure tree hash index 
case piersearch indexing search engine piersearch queries results publisher item inverted tuples pier query processor dht overlay piersearch single node 
keyword inverted fileid fileid mechanism provided dht 
summary item publisher generates tuples conforming schema primary keys underlined item fileid filename port 
item table contains tuple item shared 
stores filename location ip address port host sharing file additional fields describing item 
fileid unique file identifier item generated applying hash fields publishing index key dht 
inverted keyword fileid 
item set keywords describes 
typically file sharing comprises terms filename 
words mp usually considered 
keyword generate inverted tuple contains keyword fileid item 
fields keyword fileid form primary key keyword field publishing index key dht 
ensures inverted tuples keyword hosted node 
search engine search query search engine forms query local pier engine executes behalf 
shows example query plan term query 
conceptually query plan retrieves sets inverted tuples keyword keyword executes join sets tuples 
item tuples resulting form answer set 
query plan extended queries search terms simply adding extra self join inverted relation additional keyword 
query executed pier routes query plan dht sites host keyword query executes distributed join posting list entries matching inverted tuples 
example query plan node hosts keyword query plan send rehash matching inverted tuples node hosts keyword 
receiving node perform symmetric hash join shj results fileid item fileid 
keyword inverted relational query plan term keyword query 
fileid results fileid substring filename substring filename item fileid 
query plan inverted cache option term query 
corresponding filename cached inverted tuple 
coming tuples local matching tuples send results node keywords 
node hosting keyword query plan matching streamed back query node fetches item tuples dht incoming 
addition distributed join algorithm piersearch provides alternative approach call option 
option schema modified replacing inverted table new table keyword fileid fulltext 
table stores full text filename redundantly keyword fileid pair 
shows query plan 
option essentially caches file text inverted file entry 
consequently matching search query resolved distributed joins query sent single node hosting search terms example remaining search terms filtered locally substring selection operators 
communication cost computing matching greatly reduced inverted tuples need shipped 
technique incurs extra publishing overheads prohibitive typical full text document search tolerable indexing short filenames 
quantify overhead experimentally typical filenames section 
gnutella measurements order motivate need piersearch enhance existing unstructured networks analyze gnutella file sharing network unstructured network design 
dht search scheme data need published unstructured network 
node joins network shares local files queries flooded network 
node receives query checks local files returns query response containing information matches local files 
current gnutella network uses optimizations improve performance original flat flooding design described 
notable optimizations include ultrapeers dynamic querying techniques 
describe informally thorough description gnutella protocol today available gnutella protocol specification 
node starts gnutella client joins leaf node gnutella network issue queries network answer forward query requests nodes 
joining network leaf node selects small number nodes elected ultrapeers publishes file list ultrapeers 
ultrapeers perform query processing behalf leaf nodes 
query leaf node sent ultrapeer floods query ultrapeer neighbors recursing query ttl 
nodes regularly determine eligible ultrapeers ultrapeer capable looking uptime operating system bandwidth 
nodes decide ultrapeer capable express capabilities connecting hosts gnutella connection headers 
dynamic querying search technique queries return results re flooded deeper network 
scheme gnutella today say efficacy deep flooding small results section 
analyze gnutella network modified popular limewire client software 
modified client participate gnutella network ultrapeer leaf node log incoming outgoing gnutella messages 
addition client ability inject queries network gather incoming results 
client software deployed multiple planetlab nodes participated directly gnutella network 
gnutella topology estimate size gnutella network confirm gnutella topology began study performing crawl gnutella network graph recursively invoke gnutella api call returns node current list neighbors 
network gnutella subject noticeable churn nodes joining leaving elongated crawling process provide accurate snapshot 
increase accuracy estimation performed distributed parallel crawl starting ultrapeers running planetlab minutes oct 
measurements network size gnutella crawl nodes roughly files system 
note size network lower bound nodes respond crawler 
crawl revealed ultrapeers today support leaf nodes 
confirmed development history limewire software newer limewire ultrapeers support leaf nodes maintain ultrapeer neighbors older ultrapeers support leaf nodes ultrapeer neighbors side note newer versions limewire client leaf nodes publish bloom filters keywords files ultrapeers 
proposals cache bloom filters neighboring nodes 
bloom filters reduce publishing searching costs gnutella preclude substring wildcard searching similarly unsupported dht search schemes 
query results size average replication factor correlating query results size vs average replication factor 
gnutella search quality turn attention analyzing search quality gnutella terms recall response time 
possible definitions recall 
query recall qr defined percentage available results network returned 
case replica file counted distinct result 
results distinguished filename host 
query distinct recall defined percentage available distinct results network returned 
case gain having multiple replicas file result set 
simplicity defining metric assume files uniquely distinguished filename files grouped filename gnutella clients 
order measure recall accurately need know files network time experiments 
difficulty accurate snapshot files approximate total number query results available system issuing query simultaneously planetlab ultrapeers union results 
justify union approach approximating true contents network ways 
experimentally verified increased number planetlab ultrapeers little increase total number results see 
suggests number results returned ultrapeers reasonable approximation total number results available network 
second approximation underestimates number total results network recall values compute gnutella search strategy worst overestimates actual values 
deployed modified limewire ultrapeers planetlab nodes continents obtain real gnutella query traces 
chose distinct queries traces replay planetlab ultrapeers 
factor effects workload fluctuations replayed queries different times 
total injected queries gnutella 
observations results returned queries 
expected strong correlation number results returned query number replicas network item query queries results node union results number results result size cdf queries note log scale axis 
result set 
replication factor item defined total number identical copies item network 
approximate number count number items filename union query results obtained ultrapeers query 
compute average replication factor query averaging replication factors distinct filenames query result set 
summarizes results axis shows query results set size axis shows average replication factor averaged queries results set size 
general queries small result sets return rare items queries large result sets return rare popular items bias popular items 
second results demonstrate effectiveness gnutella finding highly replicated content 
analysis qr metric results similar omit 
plots cumulative distribution function cdf number results returned queries results curve unionof results provide lower bound total number matching items network 
note queries returning results single client sufficient filesharing uses 
addition shows queries large result sets response times 
queries return results obtain result seconds average 
third results show ineffectiveness gnutella locating rare items 
shows average response time queries return results poor 
queries return single result seconds elapsed average receiving result 
important point note queries return items quite prevalent 
shows results experiment limited queries return results unions ultrapeers 
note standard single node queries receive fewer results standard queries receive results 
large fraction queries receive results matching results fact available network time query 
comparison union results considerably better queries receive fewer results queries receive results 
means opportunity reduce queries results node union results union results union results union results number results result size cdf queries results 
average result latency number results correlating result size vs result latency 
percentage queries receive results equivalently reduce number queries receive results 
say union results underestimation total number results available network 
switch metric queries receive distinct results queries receive distinct results queries receive fewer distinct results 
percentage reduced look union results 
improvements empty query results remain metric emptyset duplicates 
graphs omitted brevity 
increase search horizon 
obvious technique locate rare items gnutella increase search horizon larger ttls 
help search latency improve query recall 
search horizon increases number query messages sent increase substantially decreasing payoffs 
shows number query messages sent average reach number ultrapeers network 
analyzing crawl topology obtained section 
search horizon increases suppress duplicate messages received node diminishing returns reaching ultrapeers number messages increases 
messages required reach ultrapeers reach ultrapeers extra messages required 
search horizon increases single hop number nodes contacted increase rate messaging overheads 
diminishing returns increasing search horizon due nodes receiving duplicate messages neighbor node 
duplicate messages result redundant paths network 
node received query message may receive query message neighbor search horizon increases 
address problem proposals research literature flooding gnutella nodes dht overlay eliminate redundant paths 
queries return results fairly common aggressive flooding locate rare items scale 
plan quantify im number ultrapeers visited message thousands gnutella flooding overhead pact increasing search horizon system load 
summary gnutella measurements reveal findings gnutella highly effective locating popular items 
items retrieved large quantities queries response times 
gnutella effective locating rare items queries receive fewer results queries receive results 
furthermore results poor response times 
queries return single result result arrives seconds average 
queries return fewer results seconds elapsed average receiving result 
significant opportunity increase query recall locating rare items 
instance number queries return results reduced 
hybrid search infrastructure view shortcomings flooding unstructured network explore feasibility piersearch alternative supporting file sharing networks 
piersearch utilizes dhts various research efforts proposed dht search engines alternative unstructured networks gnutella arguing dhts improve query performance 
piersearch provides perfect recall absence network failures full fledged implementation nodes run piersearch drawbacks 
content publishing phase consume large amounts bandwidth compared queries retrieve sufficient results flooding unstructured network 
consider query britney spears requests songs popular artist 
britney spears popular keywords large posting lists 
publishing costs building inverted indexes keywords high 
britney spears query requires shipping large posting lists perform distributed join 
back envelope calculations suggest shipping large posting lists dhts bandwidth expensive 
compression techniques bloom filters reduce bandwidth requirements publishing flooding scheme incur publishing overheads simpler efficient queries 
hand queries rare items bandwidth intensive compute fewer posting list entries involved 
validate claim replayed gnutella queries sample files shj algorithm optimized compute smaller posting lists described section 
observed average queries return fewer results require shipping times fewer posting list entries compared average queries 
motivates hybrid search infrastructure piersearch builds partial index locating rare items flooding techniques searching highly replicated items 
hybrid search infrastructure utilizes selective publishing techniques identify publish rare items dht 
hybrid infrastructure easily implemented ultrapeers organized dht overlay run piersearch client 
full deployment scenario ultrapeer responsible identifying publishing rare files leaf nodes 
search performed conventional flooding techniques overlay neighbors 
results returned predefined time query reissued piersearch 
key challenge hybrid system identifying rare items publishing dht 
schemes localized possible minimizing communication nodes 
proposed schemes listed 
revisit comparison schemes section 
query results size qrs 
initial observation section rare files seen small result sets 
parameter results size threshold determine query results needs cached 
query results queries results set size smaller threshold published 
essence dht cache elements small result sets 
scheme simple suffers fact rare items may previously queried published caching scheme 
term frequency tf 
hybrid node gathers term statistics filenames period time monitoring filenames search results traffic 
parameter term frequency threshold determine item rare 
items term threshold considered rare items 
measurements gnutella ultrapeers ultrapeer sees average query results hour 
observing days ultrapeer easily identify millions filenames 
exhaustive feasible term frequencies remain fairly constant short period time 
term pair frequency 
individual terms may subjected skews popularity 
example rare item may popular keyword 
alternative scheme considers term pair frequencies 
queries files collected ultrapeers described section 
parameter value number nodes system 
number distinct nodes contacted query flooded gnutella network 
horizon includes query node 
ri number replicas item ti lifetime item network 
qi frequency item queried time unit 
table system parameters hybrid system items term pair term pair frequency threshold considered rare 
generating possible term pairs memory consuming consider ordered term pairs adjacent filename 
sampling sam 
scheme samples neighboring nodes compute lower bound estimate number replicas item 
parameter sample threshold node select local items lower bound estimate sample threshold publishing 
ideally sampling done line time hybrid node joins system 
may incur high overhead accurate bandwidth consuming alternative gather replica counts filenames period time 
modeling evaluating hybrid search section describe simple analytical model quantify benefits hybrid system better understand trade query recall system overhead 
addition model quantify quality query results obtained publishing schemes described section 
purpose trace driven simulations see section 
model consider hybrid system consisting gnutella network piersearch system share common set nodes 
assume gnutella network model applies flooding unstructured network 
set items including duplicate items shared nodes arbitrary item network 
tables summarize notations describe system 
simplifying assumptions nodes involved query processing 
new items nodes added removed network files replicated queried 
replicas randomly distributed network identical replicas reside node 
links nodes random 
querying item gnutella equivalent querying random sub set nodes network 
costs system dominated communication overhead measured terms transmitted messages 
search horizon fixed queries regardless number results returned flooding implemented efficient broadcast mechanism 
takes messages flood nodes 
note overhead constant factor average node degree overhead incurred gnutella 
hybrid system query item issued gnutella 
gnutella return results query re issued dht 
probability fi hybrid item hybrid system simply fi hybrid fi gnutella nfi gnutella fi dht query item gnutella visits nodes probability item query re issued dht fi gnutella ri ri represents number replicas item system 
note ri represents probability replica item node visited query ri represents probability replica item second node 
compute overheads incurred query publishing operations 
qi query frequency item number queries item time unit 
cost time unit querying item hybrid system csi hybrid qi nfi gnutella csi dht represents cost querying item gnutella csi dht represents cost querying item dht 
typical dht system csi dht log messages option 
ti life time node system cpi dht cost publishing item dht 
total cost time unit maintaining querying item coi hybrid csi hybrid fi dht cpi dht optimizations dynamic flooding proposed improve query performance consider optimizations model 
typically life time item equal interval time node system 
ti variable value fi gnutella probability item gnutella network 
nfi gnutella probability item gnutella network 
set fi gnutella 
fi dht probability item published dht 
fi hybrid probability item hybrid system 
csi hybrid cost time unit searching item hybrid system 
csi dht cost searching item dht 
cost publishing item cpi dht coi hybrid hybrid posting list entries dht 
cost time unit supporting item result hy system 
total publishing cost hybrid system 
table search capabilities cost variables hybrid system total cost publishing rare items dht hybrid fi dht cpi dht goal system maximize probability fi hybrid item minimizing publishing overhead hybrid 
maximizing probability item hybrid system directly translates improvements query recall 
query recall complete knowledge probability threshold horizon percent horizon percent horizon percent replica threshold vs replica threshold 
section quantify search quality publishing overhead hybrid system function replica threshold 
assume node system complete knowledge number replicas item 
node selects items number replicas smaller equal replica threshold publishing dht 
derive replica distribution items system experiments described section 
particular consider results returned distinct queries issued ultrapeers 
results consists files stored nodes 
plots probability threshold versus replica threshold determines lower bound probability fi hybrid item hybrid system 
clearly shows diminishing increase popular items published dht 
shows publishing overhead measured percentage items published versus replica threshold 
note percentage items published proportional total publishing cost hybrid 
replica threshold set items published 
replica threshold increases increase publishing overhead diminishes 
plots average query recall qr queries trace versus replica threshold different values percentage nodes search horizon 
search horizon represents total number nodes system involved gnutella query 
defined section qr computed ratio number results returned hybrid network total number results entire network 
expected items published dht replica threshold zero average query recall equal percentage nodes search horizon 
replica threshold increases query recall increases sharply 
replica threshold average query recall increases respectively 
replica threshold average query recall exceeds cases 
similarly plots query distinct recall versus replica threshold 
query defined percentage distinct results network returned query 
definition naturally leads higher recall values replicas item results set ignored 
conversely publishing multiple copies item benefit metric 
note average exactly fi hybrid computed equation 
summary figures show diminishing return increase query recall replica threshold larger 
little benefit publishing items popular 
addition plots suggest hybrid system works rare items published 
example publishing items replicas raises average qr average respectively horizon percentage 
rare items schemes previous section assumed items number replicas smaller equal replica threshold published dht 
represents best terms query recall subject publishing cost constraints 
reason refer scheme publishing overhead items replica threshold publishing overhead items published vs replica threshold 
average query recall perfect sam tf random publishing overhead budget items compare schemes average query recall different publishing overhead items published 
average query recall horizon percent horizon percent horizon percent replica threshold average query recall vs replica threshold perfect publishing scheme 
unfortunately scheme practical requires knowledge replicas stored system 
section evaluate publishing schemes described section term frequency tf term pair frequency sampling sam addition perfect scheme consider random publishing scheme item randomly published dht irrespective number replicas 
perfect publishing scheme upper bound random publishing scheme lower bound evaluating publishing schemes 
shows average qr achieved scheme publishing overhead percentage items published search horizon 
publishing overhead publishing budget available hybrid system 
budget scheme avoids false positives false negatives identify set replicated items published 
vary publishing budget experiment adjusted replica threshold term frequency threshold term pair frequency threshold sample threshold respective schemes 
assume sam samples random nodes denoted sam 
expected average recalls schemes lie perfect best random worst recalls 
sam highest average query recall due lack sufficient queries train query results size qrs scheme omitted evaluating scheme 
average query distinct recall perfect sam tf random publishing overhead budget items compare schemes average query distinct recall different publishing overhead items published 
average query distinct recall horizon percent horizon percent horizon percent replica threshold average query distinct recall vs replica threshold average query recall perfect sam sam sam random sam publishing overhead budget items compare sampling sizes sam scheme average query recall different publishing overhead items published 
schemes achieving nearly average query recall perfect recall publishing overhead exceeds 
tp perform similarly large publishing overheads 
low publishing overheads tp performs better 
tp tfp provide noticeable improvement random 
example publishing overhead average query recall schemes represents improvement random 
shows experiment measuring average average query recall 
results similar 
large publishing overheads sam perfect 
similarly performs worse tf low publishing overheads better tf publishing overheads larger 
summarize observations term frequency schemes relatively attractive due modest storage requirements keep term statistics 
traces distinct terms distinct adjacent term pairs 
typical pc easily accommodate data sets order magnitude higher observed 
reduce storage requirements bloom filters encode sets 
effective tf low publishing overheads large number term pairs low counts leads poorer accuracy term pair frequency threshold small 
sam best query recall comes expense non trivial sampling overhead 
example node network sam needs sample nodes 
solutions alleviate problem 
reduce number nodes sampled 
suggests approach 
sam performs marginally worse reducing percentage nodes sampled 
second sampling aggregated ultrapeers ultrapeer aggregates file information leaf nodes responsible sampling nodes ultrapeers 
technique reduce sampling overheads factor average number leaf nodes supported ultrapeer 
third sampling done long period time monitoring files gnutella traffic expense accurate 
implementation deployment strawman deployment selected set ultrapeers section report initial deployment hybrid design motivated 
goal deploying real implementation ensure piersearch worked live gnutella queries non trivial scale get initial validation hypotheses benefits design 
evaluate hybrid design deployed hybrid limewire piersearch clients planetlab participate gnutella network ultrapeers 
shows partial deployment experiments planetlab 
full deployment scenario nodes system upgraded run hybrid ultrapeer deployment feasible planetlab backward compatible installed gnutella base 
deployment modest compared gnutella large see provides significant benefits 
hybrid ultrapeer deployed consists main components gnutella ultrapeer 
gnutella ultrapeer modified limewire ultrapeer section 
participates gnutella network perspective gnutella nodes network hybrid ultrapeer single planetlab node piersearch search engine queries results publisher rare items pier query processor gnutella proxy queries items limewire ultrapeer traffic results pier traffic dht overlay gnutella network hybrid client implementation single planetlab node 
hybrid ultrapeer behaves ordinary gnutella ultrapeer 
modified limewire ultrapeer forwards file information queries gnutella proxy described 
file information gathered number mechanisms fetch list local files fetch lists files neighboring nodes accessible gnutella api snoop file information limewire ultrapeer sees responses queries forwards behalf gnutella network queries snooped gnutella traffic queries issued leaf nodes local ultrapeer queries forwarded ultrapeer behalf neighboring ultrapeers 
gnutella proxy 
proxy accepts queries file information gnutella ultrapeer 
file information filtered rare items sent piersearch client 
queries selectively sent proxy reissued piersearch client 
piersearch client 
piersearch client receives rare items gnutella proxy constructs item inverted tuples published dht 
similarly receives queries proxy formulates query described section sends pier execution 
pier client 
dht query engine pier utilizes bamboo dht 
hybrid client participates separate networks gnutella network bamboo dht overlay 
deployment limewire ultrapeer monitors query results regular gnutella traffic 
query results responses queries forwarded ultrapeer 
query results belong queries fewer results identified rare items sent piersearch publishing 
scheme qrs rare item scheme section chose easy implement partial deployment model 
describing behavior piersearch publishing experiments 
publishing rate observed approximately file seconds node 
published file corresponding posting list entries incurred bandwidth overhead kb file 
full deployment scenario forwarded query results need sent proxy ultrapeer responsible indexing files leaves 
tested option increased publishing overhead kb file 
large part bandwidth consumption piersearch publishing today due overheads java serialization self describing tuples pier principle eliminated 
consider latency benefits piersearch brought gnutella deployment 
tested hybrid search technique planetlab leaf queries hybrid ultrapeers 
implementation leaf queries return results seconds gnutella considered timed re queried piersearch 
experiments pier executed query returned result seconds option seconds 
decreasing timeout invoke pier improve aggregate latency increase likelihood issuing queries pier 
part plan study tradeoffs timeout query workload 
note average latency queries return result gnutella seconds see 
hybrid approach second timeout reduce latency seconds 
measured bandwidth overheads querying piersearch 
option query needs sent node 
cost query dominated shipping pier query approximately bytes 
distributed join algorithm incurs average kb overhead query 
considering numbers publishing costs latencies reported benefits reducing query bandwidth outweigh publishing overheads storing filename redundantly making attractive option scenario 
consider benefits answer quality resulted partial deployment 
experiments show hybrid solution reduced number queries receive results gnutella 
reduction serves lower bound potential benefits hybrid system 
reason value significantly lower potential reduction number queries receive results twofold gnutella measurements reported section queries proactively flooded ultrapeers experiment consider files returned results previous queries 
scheme return rare items queried experiments 
employing schemes identifying rare items described section conjunction peers proactively publishing list rare items considerably boost benefits hybrid infrastructure 
number clients implement scheme increase expect coverage improve 
coverage better full fledged implementation ultrapeer responsible set leaf nodes identify publish rare items 
related survey distributed database research 
knowledge distributed database system targeted largest number nodes mariposa envisioned scaling sites 
course distributed database literature typically targets broader functionality offered peer topeer filesharing including flexible schemas general sql queries transactional storage 
goal pier study challenges scaling nodes relaxing design requirements traditional distributed databases 
current incarnation pier uses bamboo dht dht described earlier papers 
simple join algorithm describe section discussed earlier papers arose naturally context filesharing workloads 
seeds workshop including gnutella measurements section 
workshop focused largely case building hybrid search infrastructure 
expand workshop significantly presenting architecture implementation deployment results pier hybrid ultrapeers 
proposes analyzes solutions identifying rare items problem left unsolved earlier 
gnutella results flesh issues unclear workshop including separation qr metrics results metric 
study shown file downloads highly replicated items :10.1.1.10.5444
think findings contradict analysis section shows queries rare items substantial 
studies correctly reflect different aspects zipfian distributions 
study shows head zipfian popularity distribution measure download requests items match top query requests seen 
contrast study focuses long tail distribution 
individual rare items tail may requested frequently represent substantial fraction query workload worth optimizing 
proposals text search dhts 
feasibility study web search focuses demanding web corpus documents larger query rate queries second 
done optimizing search performance unstructured networks address shortcomings flooding 
hybrid infrastructure offers simple alternative optimizing searching structured unstructured networks combining strengths networks 
alternative hybrid infrastructure proposal build gnutella network nodes organized structured overlay 
authors argue building gnutella structured overlays lead improved performance floods random walks reduce maintenance overheads 
piersearch search engine utilizes pier dht query processor 
proposed hybrid search infrastructure utilizes flooding popular items piersearch indexing querying rare items 
support case performed live measurements gnutella workload different vantage points internet 
gnutella highly effective querying popular content ineffective querying rare items 
substantial fraction queries returned results despite fact results available network 
key challenge hybrid search infrastructure identify rare items publishing 
model hybrid search gnutella traces study tradeoffs improving query recall publishing overheads introduced hybrid infrastructure 
experiments show building partial index replicated items improve query recall dramatically especially query require multiple copies item results set 
top diminishing returns indexing popular items dht flooding 
model gnutella traces compare different schemes identifying rare files selective publishing hybrid nodes dht 
evaluation shows localized schemes proposed identifying rare items compare favorably perfect baseline assumes global knowledge system 
deployment hybrid ultrapeers gnutella shows hybrid scheme potential improve recall response times searching rare items incurring low bandwidth overheads 
authors members pier project group berkeley database research group insights suggestions 
anonymous reviewers comments 
research funded nsf ani iis 
gnutella protocol protocol specification 
groups yahoo com group files development 
balakrishnan kaashoek karger morris stoica 
looking data systems 
communications acm vol 
feb 
castro costa 
build gnutella structured overlay 
hotnets 
chawathe ratnasamy breslau lanham shenker :10.1.1.10.5444
making gnutella systems scalable 
proceedings acm sigcomm 
crespo garcia 
routing indices peerto peer systems 
icdcs 

keyword set search system peer peer networks 
master thesis massachusetts institute technology june 
gnutella 
gnutella wego com 
gnutella proposals dynamic querying 
www limewire com developer dynamic query html 
query routing gnutella network 
www limewire com developer query routing keyword routing htm 
gnutella ultrapeers 
rfc gnutella 
sourceforge net proposals ultrapeer ultrapeers htm 
harren hellerstein huebsch loo shenker stoica 
complex queries dht peer peer networks 
st international workshop peer peer systems iptps march 
huebsch hellerstein lanham loo shenker stoica 
querying internet pier 
proceedings th international conference large databases vldb sep 
kazaa 
www kazaa com 
li loo hellerstein kaashoek karger morris 
feasibility peer peer web indexing search 
iptps 
limewire org 
www limewire org 
loo huebsch stoica hellerstein 
case search infrastructure 
iptps 
mitzenmacher 
compressed bloom filters 
twentieth acm symposium principles distributed computing august 
ozsu valduriez 
principles distributed database systems second edition 
prentice hall 
planetlab 
www planet lab org 
ratnasamy francis handley karp shenker 
scalable content addressable network 
proceedings acm sigcomm 
rhea geels roscoe kubiatowicz 
handling churn dht 
uc berkeley technical report ucb csd dec 
revised version appear usenix annual technical conference june july 
rowstron druschel 
pastry scalable decentralized object location routing large scale peer peer systems 
lecture notes computer science 
seshadri swami 
generalized partial indexes 
icde pages 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
proceedings acm sig comm pages 
acm press 
stonebraker aoki litwin pfeffer sah staelin yu 
mariposa wide area distributed database system 
vldb 
tang xu mahalingam 
psearch information retrieval structured overlays 
acm hotnets october 
yang garcia molina 
efficient search peer peer networks 
icdcs 
zhao kubiatowicz joseph 
tapestry infrastructure fault tolerant wide area location routing 
technical report ucb csd uc berkeley apr 
