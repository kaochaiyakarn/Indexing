mini bucket heuristics max csp rina dechter department information computer science university california irvine ca ics uci edu june evaluates power new scheme generates search heuristics mechanically 
approach evaluated context optimization belief networks 
extend max csp 
approach involves extracting heuristics parameterized approximation scheme called mini bucket elimination allows controlled trade computation accuracy 
heuristics guide branch bound search performance compared number constraint problems 
results demonstrate search schemes exploit heuristics effectively permitting controlled trade preprocessing heuristic generation search 
general scheme mechanically generating search heuristics solving combinatorial optimization problems branch bound best search 
scheme trade quality heuristic function computational complexity quantified input parameter 
scheme mini bucket technique class parameterized approximation algorithms optimization tasks bucket elimination framework 
mini bucket approximation uses controlling parameter allows adjustable levels supported nsf iis rockwell micro 
accuracy efficiency 
analyzed deterministic probabilistic tasks finding probable explanation mpe belief updating finding maximum posteriori hypothesis 
encouraging empirical results reported variety classes optimization domains including medical diagnosis networks coding problems 
evident error bound produced algorithms cases approximation seriously suboptimal highest feasible accuracy level 
cases augmenting mini bucket approximation search cost effective 
demonstrated mini bucket scheme extended mechanically generating heuristics search algorithms solve optimization tasks task finding probable explanation bayesian network 
showed functions produced mini bucket method serve basis creating heuristic evaluation functions search 
heuristics provide upper bound cost best extension partial assignment 
mini bucket accuracy controlled bounding parameter allows heuristics having varying degrees accuracy results spectrum search algorithms trade heuristic computation search 
extend approach max csp 
max csp optimization version constraint satisfaction 
finding assignment satisfies constraints max csp solution satisfies maximum number constraints 
approximation generate heuristic function computes lower bound minimum number constraints violated best extension partial assignment 
evaluate power generated heuristic branch best search variety randomly generated constraint problems 
branch bound searches space partial assignments depth manner 
expand partial assignment lower bounding heuristic function smaller current best upper bound solution 
virtue branch bound requires limited amount memory anytime scheme interrupted branch bound outputs best solution far 
best explores search space uniform frontiers partial instantiations having value evaluation functions progressing waves increasing values 
shown generated heuristics admissible monotonic best search yields type algorithms properties understood 
algorithm finds solution guaranteed optimal 
provided accurate heuristics explores smaller search space requires substantial memory 
known best algorithms optimal performance wise 
heuristic information best search efficient algorithm terms size search space explores 
particular branch bound expand node expanded best tie breaking conditions cases explores larger space 
best may occasionally fail memory requirements 
hybrid approaches similar search community past decade clearly potential 
extend studies mini bucket search heuristics max csp class 
specifically evaluate best algorithm mini bucket heuristics bfmb branch bound algorithm mini bucket heuristics bbmb compared empirically full bucket elimination mini bucket approximation randomly generated constraint satisfaction problems solving max csp problem 
comparison ran number state art algorithms pfc variant stochastic local search 
show bbmb bfmb exploit heuristics strength similar manner problem classes optimal trade point heuristic generation search lies intermediate range heuristics strength 
problems larger harder optimal point gradually increases computationally demanding heuristics 
show bbmb bfmb outperform sls pfc mrdac problems sls pfc mrdac better 
results branch bound clearly dominates best search 
section provides preliminaries background mini bucket algorithms 
section describes main idea heuristic function built top algorithm proves properties embeds heuristic best branch bound search 
sections empirical evaluations section provides 
related approach applies paradigm heuristics generated consulting relaxed models suggested 
viewed generalization branch bound algorithms integer programming restricted linear objective functions constraints relaxation linear programming assuming integer restrictions domains removed 
mini bucket heuristics viewed extension bounded constraint propagation algorithms investigated constraint community decade 
applying idea constraints extend objective function 
background notation definitions constraint satisfaction framework formulating real world problems set constraints variables 
graphically represented nodes corresponding variables edges corresponding constraints variables 
definition graph concepts undirected graph pair fv fx set variables jx set edges 
degree variable number edges incident 
definition constraint satisfaction problem csp constraint satisfaction problem csp defined set variables fx associated set discrete valued domains fd set constraints fc cmg 
constraint pair relation theta theta ik defined subset variables fx ik called scope consisting tuples values fx ik compatible 
max csp problem express relation cost function ik ik ik 
constraint network represented constraint graph contains node variable arc nodes iff corresponding variables participate constraint 
solution assignment values variables constraint satisfied 
problem solution termed satisfiable consistent 
binary csp constraint involves variables 
real world problems constrained don solution 
cases desirable find assignment satisfies maximum number constraints 
definition max csp csp max csp task find assignment satisfies constraints 
max csp problem defined maximization problem implemented minimization problem 
maximizing number constraints satisfied minimize number constraints violated 
definition induced width ordered graph pair undirected graph ordering nodes 
width node ordered graph number earlier neighbors 
width ordering maximum width nodes 
induced width ordered graph width induced ordered graph obtained processing nodes recursively node processed earlier neighbors connected 
definition function defined subset variables functions minx maxx defined gamma fxg follows denoting extension tuple assignment width induced width constraint graph graph coloring problem ordered graph minx min maxx max 
set functions defined subsets product function pi defined pi pi 
example graph coloring problem typical example csp problem 
defined set nodes arcs nodes 
task assign color node adjacent nodes different colors 
example constraint graph graph coloring problem containing variables variable having values colors 
fact adjacent variables different colors represented inequality constraint 
problem inconsistent 
formulated max csp problem solution satisfies constraint 
ordering graph width induced width ordered graph 
bucket mini bucket elimination algorithms bucket elimination unifying algorithmic framework dynamic programming algorithms applicable probabilistic deterministic reasoning 
adaptation solving max csp problem 
input bucket elimination algorithm consists collection functions relations clauses propositional satisfiability constraints conditional probability matrices belief networks 
variable ordering algorithm partitions functions buckets associated single variable 
function placed bucket argument appears latest ordering 
algorithm phases 
algorithm elim max csp input constraint network ordering variables constraint represented function ik ik ik 
output assignment satisfying constraints 

initialize partition bucket bucket bucket contains constraints highest variable scopes functions new old processed bucket 

backward bucket ffl bucket contains instantiation assign put resulting function appropriate bucket 
ffl generate function add bucket largest index variable gamma fx 
forward assign values ordering sum cost functions bucket minimized 
algorithm elim max csp top phase processes bucket variable 
bucket processed variable elimination procedure computes new function placed lower bucket 
max csp procedure computes sum constraint matrices minimizes bucket variable 
second bottom phase algorithm constructs solution assigning value variable ordering consulting functions created top phase 
shows elim max csp bucket elimination algorithm computing max csp 
shown theorem time space complexity elim max csp applied order exponential induced width network ordered moral graph ordering main drawback bucket elimination algorithms require time especially space storing intermediate functions 
mini bucket elimination approximation scheme designed avoid space time complexity full bucket elimination partitioning large buckets smaller subsets called mini buckets processed independently 
rationale 
functions bucket elim max csp processes bucket computes function mini bucket algorithm creates partitioning fq contains functions processes mini bucket sum minimizing separately 
computes clearly lower bound computed bucket yields lower bound number constraints violated output assignment 
quality lower bound depends degree partitioning 
bounding parameter algorithm creates partitioning mini bucket includes variables 
algorithm mb max csp described parameterized bound 
algorithm outputs lower bound max csp value minimum number violated constraints assignment number violated constraints upper bound collection augmented buckets 
comparing lower bound upper bound bound error instance 
algorithm complexity time space exp bound large mini bucket algorithm coincides full bucket elimination 
summary theorem algorithm mb max csp generates lower bound exact max csp value time space complexity exponential bound example illustrates algorithms elim max csp mb max csp process network ordering 
algorithm elim max csp records new functions 
bucket min equals minimum number constraints violated 
subsequently assignment computed variable selecting value minimizes sum functions corresponding bucket conditioned previously assigned values 
hand approximation mb max csp splits bucket mini buckets containing variables generates 
lower bound max csp value computed min 
suboptimal tuple computed similarly max csp tuple assigning value variable minimizes sum functions corresponding bucket 
heuristic search mini bucket heuristics heuristic function assume mini bucket algorithm applied constraint network variable ordering algorithm outputs ordered set augmented buckets bucket bucket bucket containing input constraints newly generated functions 
relative ordered set augmented buckets convention algorithm mb max csp input constraint network ordering variables constraint represented function ik ik ik 
output upper bound max csp assignment set ordered augmented buckets 

initialize partition constraints buckets 
scopes constraints bucket 
backward ffl bucket contains instantiation assign put appropriate bucket 
ffl bucket generate partitioning fq containing generate function add bucket largest index variable gamma fx 
forward gamma choose value minimizes sum cost functions bucket 

output ordered set augmented buckets upper bound lower bound assignment 
algorithm mb max csp min bucket bucket bucket bucket bucket max csp complexity exp mini bucket mini buckets max variables lower bound max csp complexity min exp trace elim max csp trace mb max csp execution elim max csp mb max csp ffl denotes input constraint matrix bucket highest ordered variable enumerated ffl denotes function residing bucket generated mini bucket algorithm enumerated ffl stands function created processing th mini bucket bucket ffl stands arbitrary function bucket enumerated notice fc fh denote buckets union functions bucket bucket denotes scope function show functions recorded mini bucket algorithm lower bound number constraints violated best extension partial assignment serve heuristic evaluation functions best branch bound search 
definition exact evaluation function variable ordering assignment variables number constraints violated best extension denoted defined min sum defining divided sums expressed functions ordered augmented buckets 
sum arguments instantiated belong buckets minimization operation applied second product 
denoting buckets min buckets get search function evaluated partial assignment estimated heuristic function derived functions recorded mini bucket algorithm defined definition ordered set augmented buckets generated mini bucket algorithm heuristic function defined sum functions satisfy properties generated buckets reside buckets bucket generated bucket processed bucket proposition shows updated recursively 
proposition partial assignment computed recursively gamma gamma gamma proof 
straightforward derivation definition 
theorem mini bucket heuristic partial assignment variables evaluation function admissible overestimates number constraints violated best extension monotonic 
notice monotonicity means better accuracy deeper nodes search tree 
proof 
prove monotonicity recursive equations proposition 
value domain gamma gamma gamma computed th mini bucket bucket minimizing variable eliminating variable get concluding proof monotonicity 
proof admissibility follows monotonicity 
known heuristic function monotone exact full solution case admissible 
extreme case bucket contains exactly mini bucket heuristic function equals full evaluation function computes exact number constraints violated best extension current partial assignment 
search mini bucket heuristics tightness lower bound generated mini bucket approximation depends bound 
larger values generally yield better lower bounds require computation 
mini bucket algorithm parameterized get entire class branch bound search best search algorithms parameterized allow controllable trade preprocessing search heuristic strength overhead 
figures algorithms bbmb bfmb 
algorithms bbmb bfmb initialized running mini bucket algorithm produces set ordered augmented buckets 
branch bound mini bucket heuristics bbmb traverses search space depth manner instantiating variables ordering search algorithm maintains upper bound value max csp assignment corresponds number constraints violated best full variable instantiation far 
algorithm processes variable variables preceding ordering instantiated compute gamma gamma extension algorithm prunes values heuristic estimate lower bound greater equal current best upper bound partial assignment gamma extended improved full assignment 
algorithm assigns best value variable proceeds variable variable values left backtracks variable gamma search terminates reaches time bound variable values left 
case algorithm optimal solution 
algorithm best mini bucket heuristics bfmb starts adding dummy node list open nodes 
node corresponds partial assignment associated heuristic value 
initially 
basic step algorithm consists selecting assignment list open nodes having smallest heuristic value expanding computing partial assignments values adding list open nodes 
shown generated heuristics admissible monotonic best search yields type algorithms properties understood 
algorithm bbmb input constraint network ordering time bound constraint represented function ik ik ik 
output max csp assignment upper bound lower bound max csp 

initialize run mb algorithm generates set ordered augmented buckets lower bound max csp 
set upper bound 
set 
search execute procedure variable legal values left time case output current best solution 
ffl expand partial instantiation compute partial assignments value node compute heuristic value gamma 
discard assignments smaller upper bound add remaining assignments search tree children ffl forward legal values left goto backtrack 
best extension set goto backtrack 
remove list legal values 
set goto expand 
ffl backtrack exit 
set gamma repeat forward step 
algorithm branch bound mb algorithm bfmb input constraint network ordering time bound constraint represented function ik ik ik 
output max csp assignment just lower bound upper bound produced mini bucket 

initialize run mb algorithm generates set augmented buckets lower bound upper bound assignment 
insert dummy node set open nodes 
set 
search ffl time output mini bucket assignment 
ffl select remove node smallest heuristic value set open nodes ffl optimal solution 
exit 
ffl expand computing child nodes value domain node compute heuristic value gamma 
ffl add nodes goto search 
algorithm best search mb algorithm guaranteed terminate optimal solution 
provided powerful heuristics explores smaller search space requires substantial space 
known best algorithms optimal 
heuristic information best search efficient algorithm terms size search space explores 
particular branch bound expand node expanded best tie breaking conditions cases explores larger space 
best may occasionally fail memory requirements maintain large subset open nodes search tie breaking rules frontier nodes having evaluation function value equals optimal solution 
observe experiments branch bound best search complementary properties strengthen mini bucket heuristics 
experimental methodology tested performance bbmb bfmb set random csps 
problem class characterized parameters arity constraint number variables domain size number constraints tightness constraint defined number tuples allowed 
experiments binary 
problem generated randomly picking constraints total possible constraints picking nogoods maximum possible constraint 
ran experiments classes csps 






binary csps constrained 
problem classes complete graphs problems medium density problems sparse 
problems set arity contain solvable unsolvable problems 
max csp time sec solved exactly bbmb bfmb bbmb bfmb bbmb bfmb sls max csp 
min degree heuristic computing ordering variables 
places variable smallest degree ordering connects neighbors removes variable graph repeats procedure 
addition mb bbmb bfmb ran comparison state art algorithms pfc defined stochastic local search sls algorithm developed csps 
pfc branch bound search algorithm 
uses forward checking step partitioning unassigned variables disjoint subsets variables 
partitioning computing heuristic evaluation function determining variable value ordering 
stochastic local search sls algorithms gsat starts randomly chosen complete instantiation variables moves complete instantiation 
guided cost function number unsatisfied constraints current assignment 
step value variable leads greatest reduction cost function changed 
algorithm stops cost zero global minimum case problem solved way improve current assignment changing just variable local minimum number heuristics reported literature designed overcome problem local minima greatly improve performance basic scheme 
implementation sls basic greedy scheme combined constraint reweighting introduced 
algorithm constraint max csp time sec solved exactly bbmb bfmb bbmb bfmb bbmb bfmb sls max csp 
weight cost function weighted sum unsatisfied constraints 
algorithm reaches local minimum increase weights unsatisfied constraints current assignment local minimum new cost function 
sls algorithms popular shown practice solving constraint satisfaction satisfiability problems 
solve problems larger complete algorithm solve 
naturally suitable solving max csp problem cost function tries minimize number constraints satisfied 
treat algorithms approximation algorithms 
algorithms bbmb bfmb allowed run completion solve problems exactly 
time bound algorithms may return suboptimal solutions especially harder larger instances 
bbmb outputs best solution bfmb interrupted outputs mini bucket solution 
consequently bfmb effective complete algorithm 
measure performance accuracy ratio opt alg fmax value solution test algorithm alg value optimal solution fmax fmax available 
record running time algorithm 
recorded distribution accuracy measure opt predefined ranges opt opt opt opt opt 
report number problems fall range 
problems range solved optimally 
max csp time sec solved exactly bbmb bfmb bbmb bfmb bbmb bfmb sls max csp 
addition execution bbmb bfmb stored current upper bound regular time intervals 
allows reporting accuracy algorithm function time 
results tables report results random csps 
table contains results binary csps domain size table contains results binary csps domain size table contains csps arity domain size 
tables contain large blocks corresponding set csps fixed number constraints 
block small blocks corresponding different constraint tightness column 
columns tables columns table results mb bbmb bfmb different rows different bound 
tables results sls columns 
table include results pfc mrdac implemented binary constraints 
entry table gives percentage problems fall range average cpu time problems 
example looking middle block second large block table corresponding binary csps see mb bound column solved problems exactly seconds cpu max csp time sec solved exactly bbmb bfmb bbmb bfmb bbmb bfmb sls max csp 
time 
set problems bbmb mini bucket heuristics solved problems optimally seconds cpu time bfmb solved problems exactly seconds 
moving columns rows corresponding set problems see gradual change caused higher level mini bucket heuristic higher values bound 
expected mini bucket solves problems time 
focusing bbmb see solved problems bound total running time function time forms shaped curve 
high bound increases total time decreases total time bound increases total time starts increase 
behavior shown bfmb 
demonstrates trade amount preprocessing performed mb amount subsequent search heuristic cost function generated mb 
optimal balance preprocessing search corresponds value bound bottom shaped curve 
added amount search top mb estimated search total gamma mb increases average search time search decreases accuracy search algorithm increases problems fall higher ranges opt 
increases time mb preprocessing increases 
crucial difference bbmb bfmb bbmb anytime algorithm outputs assignment time increases solution improves 
bfmb hand outputs solution finds optimal solution 
experiments bfmb finish preset time bound returned mb max csp time sec bbmb bbmb bbmb sls max csp anytime 
assignment 
data tables see performance bfmb consistently worse bbmb 
bfmb solves fewer problems bbmb average takes longer problem 
pronounced non trivial amount search required lower bound values heuristic exact 
speculate large numbers nodes level search tree heuristic values 
result large branching factor bfmb 
tables report results pfc mrdac 
constraint graph dense blocks pfc mrdac times faster best performing bbmb 
constraint graph sparse block best bbmb order magnitude faster pfc mrdac 
figures provide alternative view performance bbmb bfmb sls 
fraction problems solved completely bbmb bfmb respectively time graph plots values figures display trade preprocessing search clear manner 
clearly bbmb completely dominates bbmb 
example bbmb completely dominates bbmb 
intersect display trade function time 
example seconds bbmb better bbmb 
sufficient time allowed bbmb superior bbmb 
max csp time sec bbmb bbmb bbmb bbmb sls max csp anytime 
anytime algorithms tables report results sls 
problem set sls time bound bbmb bfmb 
execution sls outputs best assignment 
set problems report number times sls solution optimal 
determine optimal cost bbmb bfmb 
report average time took sls algorithm find assignment optimal cost opposed completion time sls 
sls time bbmb bfmb pfc mrdac times reported tables directly compared bbmb bfmb pfc mrdac times completion times 
figures compare bbmb sls anytime algorithms 
corresponds row table 
constraint graph dense sls substantially faster bbmb 
constraint graph sparse bbmb bbmb faster sls 
summary evaluate power scheme generates search heuristics mechanically solving max csp problem 
heuristics extracted mini bucket approximation method allows controlled trade computation accuracy 
experiments demonstrate potential scheme improving general search showing mini bucket heuristic accuracy controlled yield trade preprocessing search 
demonstrate property context branch bound best search 
best threshold point predicted priori preliminary empirical analysis informative class problems heterogeneous 
show search mini bucket heuristics competitive state art algorithms solving max csp problem 
sls faster bbmb bfmb pfc mrdac classes problems tried complete methods bbmb bfmb pfc mrdac number advantages 
complete methods sls prove optimality 
reported literature classes constraint satisfaction satisfiability problems performance sls poor easy complete methods backtracking 
due close nature csp max csp problems true max csp problems 
dechter 
constraint networks 
encyclopedia artificial intelligence pages 
dechter 
bucket elimination unifying framework probabilistic inference algorithms 
uncertainty artificial intelligence uai pages 
dechter 
bucket elimination unifying framework reasoning 
artificial intelligence 
dechter pearl 
generalized best search strategies optimality 
journal acm 
dechter rish 
scheme approximating probabilistic inference 
proceedings uncertainty artificial intelligence uai pages 
gent walsh 
understanding hill climbing procedures sat 
proceedings eleventh national conference artificial intelligence aaai pages 
rish dechter 
approximation algorithms probabilistic decoding 
uncertainty artificial intelligence uai 
dechter 
branch bound mini bucket heuristics 
proc 
ijcai 
dechter 
mini bucket heuristics improved search 
proc 
uai 
dechter 
gsat local consistency 
international joint conference artificial intelligence ijcai pages montreal canada august 
korf 
linear space best search 
artificial intelligence pages 
meseguer 
partition lower bound max csp 
proc 
cp 
morris 
breakout method escaping local minima 
proceedings eleventh national conference artificial intelligence aaai pages 
pearl 
heuristics intelligent search strategies 
addison wesley 
philips minton johnston 
solving large scale constraint satisfaction scheduling problems heuristic repair methods 
national conference artificial intelligence aaai pages anaheim ca 
selman kautz 
empirical study greedy local search satisfiability testing 
proceedings eleventh national conference artificial intelligence pages 
selman kautz cohen 
noise strategies local search 
proceedings eleventh national conference artificial intelligence pages 
selman levesque mitchell 
new method solving hard satisfiability problems 
national conference artificial intelligence aaai 
nemhauser gu 
lifted flow covers mized integer programs 
mathematical programming pages 
mb mb mb mb mb bbmb bbmb bbmb bbmb bbmb pfc mrdac sls time time time time time time time 
time bound sec 

time bound sec 

time bound sec 
table max csp 

mb mb mb mb mb mb mb bbmb bbmb bbmb bbmb bbmb bbmb bbmb pfc sls mrdac time time time time time time time time time 
time bound sec 

time bound sec 

time bound sec 
table max csp 

mb mb mb mb mb bbmb bbmb bbmb bbmb bbmb sls time time time time time time 
time bound 
table max csp 
mb mb mb mb mb bbmb bbmb bbmb bbmb bbmb pfc mrdac sls time time time time time time time 
time bound sec 

time bound sec 
table max csp 


