enforceable security policies bauer david walker department computer science princeton university princeton nj tech report tr june analyze space security policies enforced monitoring programs runtime 
program monitors automata examine sequence program actions transform sequence deviates specified policy 
simplest automaton truncates action sequence terminating program 
automata commonly known security automata enforce schneider em class security policies 
define automata powerful transformational abilities including ability insert sequence actions event stream suppress actions event stream terminating program 
give set theoretic characterization policies new automata able enforce show superset em policies 
designing secure extensible system operating system allows applications download code kernel database allows users submit optimized queries ask important questions 

sorts security policies demand system 

mechanisms implement enforce policies 
questions answered effectively understanding space enforceable security policies power various enforcement mechanisms 
schneider sch attacked question defining em subset safety properties lam general purpose enforcement mechanism security automaton interposes program machine program runs 
examines sequence security relevant program actions time automaton recognizes action violate policy terminates program 
mechanism general decisions terminate program depend entire history program execution 
automaton able recognize bad sequences actions terminate program enforce safety properties 
re examine question security policies enforced runtime monitoring program actions 
schneider automata theory basis analysis enforceable security policies 
take novel approach automata transformers program action stream simple recognizers 
viewpoint leads define new enforcement mechanisms insertion automaton able insert sequence actions program action stream suppression automaton suppresses certain program actions terminating program outright 
joined insertion automaton suppression automaton edit automaton 
characterize class security policies enforced sort automata provide examples important security policies lie new classes outside class em 
schneider cognizant power automata limited fact terminate programs may modify 
best knowledge formally investigated power broader class runtime enforcement mechanisms explicitly manipulate program action stream 
schneider ues implemented inline monitors allow arbitrary code executed response violation security policy demonstrated effectiveness range security policies different levels abstraction software fault isolation policy pentium ia architecture java stack inspection policy sun jvm ues 
evans implemented general enforcement mechanism java allows system designers write arbitrary code enforce security policies 
mechanisms may powerful propose mechanisms formal semantics analysis classes policies enforce 
researchers investigated optimization techniques security automata cf thi certification programs instrumented security checks wal run time monitoring checking distributed ss real time systems 
overview remainder begins review alpern schneider framework understanding behavior software systems sch section explanation em class security policies security automata section 
section describe new enforcement mechanisms insertion automata suppression automata edit automata 
mechanism analyze class security policies mechanism able enforce provide practical examples policies fall class 
section provide syntax operational semantics simple security policy language admits editing operations instruction stream 
section discuss unanswered questions continuing research 
section concludes taxonomy security policies 
security policies enforcement mechanisms section explain model software systems execute alpern schneider sch 
define means security policy give definitions safety liveness em policies 
give new presentation schneider security automata semantics emphasizes view machines sequence transformers property recognizers 
provide definitions means automaton enforce property precisely conservatively means automaton effective enforcer automaton particular property 
systems executions policies specify software systems high level abstraction 
system specified set program actions referred events program operations set possible executions 
execution simply finite sequence actions 

previous authors considered infinite executions finite ones 
restrict finite arbitrarily long executions simplify analysis 
metavariables range finite sequences 
symbol denotes empty sequence 
notation denote th action sequence count 
notation denotes subsequence involving actions 
denotes subsequence involving actions 
notation denote concatenation sequences 
prefix write 
important distinguish uniform systems nonuniform systems 
uniform system set finite sequences symbols conversely nonuniform system uniform systems arise naturally program completely unconstrained unconstrained programs may execute operations order 
effective security system combine static program analysis preprocessing run time security monitoring 
case java virtual machines example combine type checking stack inspection 
program analysis preprocessing give rise nonuniform systems 
concerned nonuniform systems may generated model checking programs control dataflow analysis program instrumentation type checking proof carrying code care exist 
security policy predicate sets executions 
set executions satisfies policy 
common extensional program properties fall definition security policy including 
access control policies specify execution may operate certain resources files sockets invoke certain system operations 
availability policies specify program acquires resource execution release resource arbitrary point execution 
bounded availability policies specify program acquires resource execution release resource fixed point execution 
example resource released steps system invariant holds 
call condition demands release resource bound policy 
information flow policy concerning inputs outputs specify execution function exist execution 
security properties alpern schneider distinguish properties general policies follows 
security policy deemed computable property policy form 

property computable predicate property defined exclusively terms individual executions 
property may specify relationship possible executions program 
information flow example specified condition set possible executions program property 
example policies provided previous section security properties 
implicitly assume empty sequence contained property 
properties interested okay run program question 
technical perspective decision allows avoid repeatedly considering empty sequence special case definitions enforceable properties 
set actions predicate induces security property 

symbol interchangeably predicate execution sequences induced property 
normally context clear meaning intend 
safety properties safety properties properties specify bad happens definition precise follows 
safety property safety informally definition states bad action taken place excluding execution property extension execution remedy situation 
example access control policies safety properties restricted resource accessed policy broken 
way un access resource fix situation afterward 
liveness properties liveness property contrast safety property property exceptionally bad happen finite amount time 
finite sequence actions extended lies property 
formally liveness property liveness availability liveness property 
program acquired resource extend execution releases resource step 
properties surprisingly alpern schneider show property decomposed conjunction safety property liveness property 
bounded availability property combines safety liveness 
example suppose bounded availability policy states resource acquired released released steps acquired 
property contains element safety bad thing may occur steps releasing resource 
purely safety property sequences property taken steps releasing resource may extended sequences property release resource ninth step 
em schneider sch defined new class security properties called em 
informally em class properties enforced monitor runs parallel target program 
target program wishes execute security relevant operation monitor checks policy determine operation allowed 
operation allowed target program continues operation monitor change program behavior way 
operation allowed monitor terminates execution program 
schneider showed em property satisfies safety em subset safety properties 
addition schneider considered monitors infinite sequences showed monitors enforce policies obey continuity property 
continuity continuity states infinite execution em policy finite prefix policy 
security automata em policy enforced security automaton deterministic finite infinite state machine specified respect system 
specifies possible automaton states initial state 
partial function specifies transition function automaton 
presentation operational semantics security automata deviates presentation alpern schneider view machines sequence transformers simple sequence recognizers 
specify execution security automaton sequence program actions labeled operational semantics 
basic single step judgment form denote input program action sequence current automaton state denote action sequence state automaton processes single input symbol denotes sequence actions automaton allows occur action input sequence case action bad actions 
may refer sequence observable actions automaton output 
input sequence considered observable outside world 
step extend single step semantics multi step semantics rules 
reflex trans limitations schneider ues ues demonstrate security automata enforce important access control policies including software fault isolation java stack inspection 
enforce example policies availability bounded availability information flow 
schneider sch points security automata enforce safety properties systems automaton exert sufficient controls system 
example actions system passage time automaton able enforce property terminate action sequence effectively automaton passage real time 
enforceable properties able discuss different sorts enforcement automata formally analyze enforce different properties need formal definition means automaton enforce property 
say automaton precisely enforces property system 

informally sequence belongs property automaton modify 
case say automaton accepts sequence 
input sequence property automaton may fact edit sequence output sequence satisfies property 
properties extremely difficult enforce precisely practice enforce stronger property implies weaker property interested 
example information flow impossible enforce precisely run time monitoring proper property 
enforcing information flow automaton enforce simpler policy access control 
assuming access control implies proper information flow policy say automaton conservatively enforces information flow policy 
formally automaton conservatively enforces property condition holds 
condition need hold automaton conservatively enforce property 
words automaton conservatively enforces property may occasionally edit action sequence obeys policy editing unnecessary potentially disruptive benign program execution 
course edits result action sequence continues obeys policy 
henceforth term enforces qualification precisely conservatively mean enforces precisely 
say automaton enforces property precisely effectively automaton 
accepts sequences 
automata accept sequences average edit distance inputs outputs 
em novel view security automata sequence transformers short step define new sorts automata greater transformational capabilities 
section describe insertion automata suppression automata conjunction edit automata 
case characterize properties enforce precisely 
insertion automata insertion automaton finite infinite state machine defined respect system executions 
set possible machine states distinguished starting state machine 
partial function specifies transition function 
new element partial function specifies insertion number actions program action sequence 
call insertion function type order maintain determinacy automaton require domain insertion function disjoint domain transition function 
specify execution insertion automaton 
relation defined 
step ins edit distance sequences minimum number insertions deletions substitutions applied sequences equal gus 
extend single step semantics multi step semantics 
enforceable properties examine power insertion automata uniform systems nonuniform systems 
theorem uniform enforcement uniform system insertion automaton precisely enforces obeys safety 
proof assume anticipating contradiction insertion automaton enforces property satisfy safety 
definition safety exists sequence extension 
loss generality consider action seen input stream consisting symbol 
confronted symbol input sequence prefix automaton things corresponding possible operational rules 
case step accepts symbol waits 
unfortunately input sequence processed may exactly 
case automaton fails enforce 
case ins inserts sequence 
action automaton gives enforcing property precisely 
input sequence input obeys property automaton unnecessarily edited program action stream 
case case ins automaton gives precise enforcement 
matter automaton try enforce precisely contradiction 
consider nonuniform systems insertion automaton enforce non safety properties 
example reconsider scenario proof time carefully chosen nonuniform system action sequence special symbol appears assuming sequence insertion automaton safe course action 
seeing automaton waits symbol exist asserted symbol 
symbol inserts stops enforcing policy 
hand program continues produce automaton need 
normally simple matter instrument programs conform nonuniform system discussed 
instrumentation process insert event program exits 
avoid scenario non terminating program sits tight loop commits security relevant actions ensure time period automaton receives timeout signal acts event 
bounded availability properties em properties form policy considered result insertion automaton enforce bounded availability properties non uniform systems 
general automaton monitors program acquires releases resources 
detecting bound automaton inserts actions release resources question 
releases resources question detects termination event timeout 
characterize properties enforced insertion automaton follows 
theorem nonuniform enforcement property system enforced insertion automaton exists function executions 

proof direction construct insertion automaton precisely enforces properties stated 
automaton definition follows 
states sequence actions seen far automaton step start state empty sequence transition function consider processing action current state undefined rule applies 
current state proceed follows 
emit action continue state simply 

emit continue state insertion function consider processing action state 
insert continue state 
input far automaton maintains invariant invp 
automaton emitted action 
emitted 
automaton initially establish invp definition property assumes properties 
simple inductive argument length input suffices show invariant maintained inputs 
invariant straightforward show automaton processes input properly precisely enforces cases 
case consider prefix 
induction show automaton accepts stopping inserting actions moving state 
automaton accepts prefix continues 
case 
automaton accepts prefix continues 
case invp automaton definition imply automaton halts lack input stops intentionally sequence symbols output 
automaton processes input properly 
direction define undefined exists 
consider arbitrary show hold 


consider case 
hold 
definition 
remains show 
holds case 
insertion automaton enforces 
part definition precise enforcement edits supplied input 
excludes rules ins steps rule step input point processing exactly step transitions input sequence may extended assume sake obtaining contra diction 
second part definition precise enforcement fact violates assumption 
required case 
hold 

limitations security automaton insertion automaton limited fact may able able exert sufficient controls system 
precisely may possible automaton synthesize certain events inject action stream 
example automaton may access principal private key 
result automaton may difficulty enforcing fair exchange policy requires computational agents exchange cryptographically signed documents 
receiving signed document agent insertion automaton may able force agent sign second document forge private key perform necessary cryptographic operations 
suppression automata suppression automaton state machine defined respect system executions 
set possible machine states distinguished starting state machine partial function specifies transition function 
partial function domain indicates action question suppressed emitted 
steps extend single step relation multi step relation reflexivity transitivity rules 
enforceable properties uniform system suppression automata enforce safety properties 
theorem uniform enforcement uniform system suppression automaton precisely enforces obeys safety 
proof sketch argument similar argument insertion automata previous section 
attempting enforce property allow sequence may extension 
step processing final symbol result accepting despite fact giving precise enforcement altogether 
nonuniform system suppression automata enforce non em properties 
example consider system aq rel aq rel aq rel aq rel symbols aq rel denote acquisition release resource 
set executions includes zero uses resource 
scenario arise publish policy programs resource times 
publishing policy find bug implementation impossible handle load predicting 
naturally want tighten security policy soon possible able change policy published 
fortunately suppression automaton suppress extra uses dynamically change policy policy policy 
notice ordinary security automaton sufficient change terminate execution 
terminating application unable insert release necessary satisfy policy 
compare power suppression automata insertion automata 
suppression automaton enforce bounded availability policy described previous section insert release events necessary program halts prematurely 
suppression automaton suppress non release actions reaching bound waiting release action appear program may halt releasing leaving resource 
note suppression automaton premature termination executions takes outside system rel symbol missing sequence 
model operation security automaton situation need separate set possible input sequences set possible output sequences 
sake simplicity done 
simply suppress resource acquisitions uses modify sequences satisfy policy contrary definition precise enforcement 
insertion automata enforce properties suppression automata 
suppression automaton construct insertion automaton enforces property 
construction proceeds follows 
suppression automaton acts simple security automaton insertion automaton clearly simulate 
suppression automaton decides suppress action exists extension input processed 
suppression automaton suppresses giving precisely enforcing sequence prefix insertion automaton merely inserts terminates giving precise enforcement sequences prefix 
course practice uncomputable intractably computable suppression automata useful 
scenarios suppression automata precise insertion automata 
particular situations described publish policy need restrict due changing system requirements policy bugs suppression automata suppress resource requests longer allowed 
suppression results new program action stream edit distance increased insertion automaton may produce output arbitrary edit distance input 
characterize properties enforced suppression automaton generalize suppression functions act sequences symbols 
set actions computable function suppression function satisfies conditions 


suppression automaton enforce properties 
theorem nonuniform enforcement property system enforceable suppression automaton exists suppression function sequences 

proof direction previous section properties described construct suppression automaton enforces 
states sequence actions seen far paired indicate actions action suppressed far start state transition function simplicity combine consider processing action current state emit action continue state simply halt 
suppress continue state emit continue state current state 
suppress continue state emit continue state input far automaton maintains invariant invp 

emitted 



emitted 


automaton initially establish invp definition property assumes properties suppression functions 
simple inductive argument length input suffices show invariant maintained inputs 
invariant straightforward show automaton processes input properly precisely enforces cases 
case case similar analogous case insertion automata 
prove automaton accepts input stopping suppressing actions induction length sequence 
case invp implies automaton stops state automaton output satisfies property 
implies process properly 
direction define sequence emitted suppression automaton input 
show suppression function 
clearly 
processing action having processed sequence automaton may step steps 
case automaton emits emitted processing definition followed cases automaton emits 
valid suppression function 
consider arbitrary definition precise enforcement automaton modify sequence satisfied requirement 
remains show 

consider case 
hold 
analogous case insertion automata may process processes may extended 
enforces case 
definition second part definition precise enforcement 
implying case 


holds 

limitations similarly relatives suppression automaton limited fact events may 
example program may direct connection output device automaton may unable interpose device program 
case program unable continue proper execution action suppressed 
instance action question input operation 
edit automata form edit automaton combining insertion automaton suppression automaton 
machine described tuple form 
operational semantics derived composition operational rules previous automata 
steps ins extend single step semantics multi step semantics rules reflexivity transitivity 
enforceable properties insertion suppression automata edit automata capable enforcing safety properties uniform systems 
theorem uniform enforcement uniform system edit automaton precisely enforces obeys safety 
proof sketch argument similar proofs uniform enforcement 
confronted processing final action accept despite fact give precise enforcement altogether 
theorem provides formal basis intuition insertion automata strictly powerful suppression automata 
insertion automata enforce superset properties enforceable suppression automata edit automata composition insertion suppression automata precisely enforce exactly properties precisely enforceable insertion automata 
theorem nonuniform enforcement property system enforced edit automaton exists function executions 

proof direction nonuniform enforcement theorem function property satisfying requirements stated may build insertion automaton enforce construct edit automaton defined domain domain 
clearly enforce property steps step ins respectively steps ins emitting exactly actions enforces 
direction direction proceeds exactly direction proof nonuniform enforcement 
edit automata powerful precise insertion automata effectively enforce wide variety security policies conservatively edit automata 
describe particularly important application implementation transactions policies section 
example transactions demonstrate power edit automata show implement monitoring transactions 
desired properties atomic transactions en commonly referred acid properties atomicity entire transaction executed part executed consistency preservation completion transaction system consistent state isolation effects transaction visible concurrently executing transactions transaction committed durability permanence effects committed transaction undone failed transaction 
property atomicity modeled edit automaton suppressing input actions start transaction 
transaction completes successfully entire sequence actions emitted atomically output stream discarded 
consistency preservation enforced simply verifying sequence emitted leaves system consistent state 
durability permanence committed transaction ensured fact committing transaction modeled outputting corresponding sequence actions output stream 
action written output stream longer touched automaton furthermore failed transactions output 
model actions single agent example ignore issues isolation 
pay pay pay pay warning pay pay pay pay edit automaton enforce market policy conservatively 
example concrete model simple market system main actions take pay represent acquisition apples corresponding payment 
range actions occur system window shop browse 
policy time agent takes apples pay apples 
payments may come acquisition vice versa 
automaton conservatively enforces atomicity transaction emitting take pay transaction completes 
payment automaton allows clients perform actions browse paying pay take transaction appears atomically intermediary actions 
hand apples taken paid immediately issue warning abort transaction 
consistency ensured remembering number apples taken size state machine 
acquisition payment occur sale final durability 
displays edit automaton conservatively enforces market policy 
nodes picture represent automaton states arcs represent transitions 
predicate arc true transition taken 
sequence arc represents actions emitted 
arc symbols suppression transition 
arc multiple symbols insertion transition 
simple policy language section describe syntax semantics simple language specifying edit automata 
syntax program language consists declaration automaton state transition function 
state described number state variables 
sn assigned initial values 
vn 
leave value space unspecified 
normally include values full fledged programming language 
specify transition functions order differentiate internal events events program actions control security automaton external events security automaton suppress synthesize insert 
metavariable iin denote internal events iex denote external events 
transition function sequence nested statements 
guard statement consists boolean predicates current state read instruction 
guards combined standard boolean algebra 
assume set atomic predicates suitable evaluation function predicates 
evaluating transition function guards evaluate true automaton halts 
main body transition function consists assignments state variables commands emit sequence instructions 
assume set functions compute values stored state variable instructions emitted automaton 
sequence commands ends command continue evaluation state consuming current input symbol continue state consume input consume halt halt 
bnf grammar describes language syntax 
states sn vn transitions iex iin run operational semantics halt 
sn sk emit consume halt 
sn order specify execution program need define system configurations arise computation 
system configuration tuple contains instruction stream read automaton external jin jin internal jin jin jin sem lam ex sem lam 
vn sn true 
sn vn 
sn vn sem bool 
vn sn false 
sn vn 
sn vn sem bool 
vn sn 
sn vn sk 
sn vn sk sem state update 
vn sn 
ap ak internal emit ap external consume internal consume external halt nil internal halt nil 
sn vn jin sem emit sem consume ex sem consume sem sem halt ex sem halt sem refl sem trans sem setup states 
sn vn transitions jin run operational semantics 
set state variables pair functions describe transitions input symbols program expression currently evaluated 
metavariable range pair functions metavariable range program expression evaluation 
paired action stream program gives rise machine configuration natural way 
specify execution language judgments 
configuration emits evaluating configuration configuration emits evaluating configuration steps sequence program emit evaluating configuration steps evaluates boolean evaluates operational semantics language 
rules sem lam ex sem lam describe automaton begins processing topmost instruction input stream 
control flow differs instruction external internal 
evaluating appropriate transition expression substituting current instruction formal parameter represents 
postpone removing instruction instruction stream wish guide evaluation type instruction 
program expression currently evaluated guarded statement reducing boolean guard true false described rules sem bool sem bool 
boolean guard contains predicates current state involves substituting current values state variables 
evaluating guards may involve standard boolean algebra 
due space constraints omitted standard rules 
guard evaluates true evaluate body guarded statement 
may involve updates state variables functions parameterized current state 
rule sem state update describes update state variable necessary substitutions 
addition statement may include emitting instructions output stream 
rule sem emit describes emission internal instructions 
emission external instructions control programmer done automatically described rules sem consume ex sem halt ex 
step evaluating transition function consume instruction input stream starting process instruction reevaluate transition function current instruction updated state halt automaton 
mentioned instruction read input stream external automatically emitted output stream consumed 
order halt automaton transition system configuration rest input stream ignored 
example illustration language encode security policy show possible way encoding transaction automaton 
code corresponds exactly picture automaton 
states apples transitions iex halt iin 
apples iin apples apples iin take apples iin pay apples iin take iin pay emit apples iin consume halt run apples iin apples iin take iin pay iin apples iin pay take pay apples iin pay warning apples iin take take pay specification transaction automaton 
assume predicate evaluates true transition input action state defined market automaton 
valid transitions state variable apples updated appropriate instructions calculated function emitted output stream 
adequacy policy language policy language sufficiently expressive describe edit automaton 
consider edit automaton 
encode automaton states transitions iex 
halt iin 
run dom iin iin iin emit iin consume dom iin iin iin consume dom iin state iin emit seq iin halt general encoding edit automaton 
policy language provided assume existence set values encoding automaton states auxiliary functions predicates 
dom true defined dom true defined implements transition function implements suppression function state produces state seq produces inserted actions encoding uses single variable represent current state 
implicitly assuming actions processed edit automata internal actions susceptible insertion suppression 
program external transition function trivial 
internal transition function encodes operations automaton directly 
considering number directions research 

composing schneider security automata straightforward sch case edit automata 
edit automata sequence transformers easily define composition automata result running input sequence running output 
definition give conjunction properties enforced 
example insert sequence actions violates 
automata operate disjoint sets actions run automaton fear saf em editing saf liveness ties em su taxonomy precisely enforceable security policies 
interfere 
generally case 
considering static analysis automaton definitions determine safely composed 
definitions precise conservative enforcement provide interesting bounds strictness properties enforced 
precise enforcement property desirable benign executions guaranteed disrupted edits disallowing provably benign modifications restricts useful transformations example enforcement market policy section 
conservative enforcement hand allows freedom property enforced property conservatively enforced automaton simply halts inputs assumption 
working defining means effectively enforce property 
definition may place requirements exactly portions input sequences examined restrictive precise enforcement general conservative enforcement 
definition hope provide formal proof intuition suppression automata effectively enforce properties effectively enforceable insertion automata vice versa edit automata effectively enforce properties insertion suppression automata 
defined new classes security policies enforced monitoring programs runtime 
new classes discovered considering effect standard editing operations stream program actions 
summarizes relationship taxonomy security policies discovered alpern schneider sch new editing properties 
acknowledgment authors grateful fred schneider making helpful comments suggestions earlier version 
bowen alpern fred schneider 
recognizing safety liveness 
distributed computing 
cf thomas pascal fradet 
enforcing trace properties program transformation 
seventh acm symposium principles programming languages pages boston january 
acm press 
en elmasri navathe 
fundamentals database systems 
benjamin cummings publishing 
david evans andrew 
flexible policy directed code safety 
ieee security privacy oakland ca may 
gus dan gusfield 
algorithms strings trees sequences 
cambridge university press 
kim mahesh viswanathan ben abdallah kannan lee oleg 
formally specified monitoring temporal properties 
european conference real time systems york uk june 
lam leslie lamport 
logical foundation 
lecture notes computer science 
sch fred schneider 
enforceable security policies 
acm transactions information systems security february 
ss anders sandholm michael schwartzbach 
distributed safety controllers web services 
fundamental approaches software engineering volume lecture notes computer science pages 
springer verlag 
thi peter thiemann 
enforcing security properties type specialization 
european symposium programming genova italy april 
ues fred schneider 
sasi enforcement security policies retrospective 
proceedings new security paradigms workshop pages hills canada september 
ues fred schneider 
irm enforcement java stack inspection 
ieee symposium security privacy pages oakland california may 
wal david walker 
type system expressive security policies 
seventh acm symposium principles programming languages pages boston january 

