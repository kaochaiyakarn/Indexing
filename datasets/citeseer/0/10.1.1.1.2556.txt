division invariant integers multiplication rn granlund cygnus support drive mountain view ca cygnus com integer division remains expensive today processors cost integer multiplication declines 
code sequences division arbitrary nonzero integer constants run time invariants integer multiplication 
algorithms assume complement architecture 
require upper half integer product quickly accessible 
treat unsigned division signed division quotient rounds zero signed division quotient rounds division result known priori exact 
give implementation results compiler gcc 
cost integer division today risc processors times integer multiplication 
trend fast pipelined combinatoric multipliers perform operation typically cycles hardware support integer division iterating times slower multiplier 
table compares multiplication division times processors 
table illustrates discrepancy multiplication division timing growing 
integer division heavily base conversions number theoretic codes graphics codes 
compilers done author swedish institute computer science stockholm sweden 
done second author university california los angeles 
supported army fellowship daal 
peter montgomery centrum voor wiskunde en informatica las road san rafael ca math orst edu generate integer divisions compute loop counts subtract pointers 
static analysis fortran programs knuth reports arithmetic operators additions subtractions multiplications divisions exponentiations 
knuth counts distinguish integer floating point operations divisions divisions 
integer multiplication cheaper integer division beneficial substitute multiplication division 
multiple authors algorithms division constants divisor divides small give foundation general approach implements tera computing system 
compiler writers aware general technique 
example version ibm rs compilers uses integer multiply instruction expand signed integer divisions odd integer divisors unsigned division 
assume bit complement architecture 
unsigned nonnegative integers range inclusive signed integers range 
denote integers sword respectively 
unsigned integers range denoted 
signed integers range denoted 
type int shift counts logarithms 
algorithms require upper half integer product obtained multiplying 
algorithms need simple operations adds shifts bitwise operations bit ops summarized table 
show operations divide arbitrary nonzero constants divisors loop invariant repeated basic block multiplication plus simple instructions division 
presentation concentrates types architecture implementation approx 
year motorola mc pp 
time cycles high bit bit motorola mc intel intel intel pentium sparc cy sparc viking hp pa hp pa fp mips mips time cycles bit bit divide unsigned signed power rios signed signed powerpc mpc dec alpha aa motorola mc motorola mc direct hardware support approximate cycle count software implementation include time moving data floating point registers pipelined implementation independent instructions execute simultaneously table multiplication division times different cpus division order difficulty unsigned ii signed quotient rounded zero iii signed quotient rounded 
topics division run time invariant division remainder known priori zero testing remainder 
case give mathematical background suggest algorithm compiler generate code 
algorithms ineffective divisor invariant euclidean gcd algorithm 
algorithms yield quotient 
remainder desired computed additional multiplication subtraction 
implemented algorithms developmental version gcc compiler 
dec uses algorithms alpha axp compilers 
mathematical notations real number 
denotes largest integer exceeding denotes integer trunc denote integer part rounded zero 
formally trunc trunc 
absolute value 
real base logarithm log multiplication written integers mod means multiple remainder operators common language definitions 
remainder sign dividend sign divisor 
ada notations rem trunc sign dividend mod sign divisor 
fortran names mod modulo 
definition remainder implementation dependent implementations round signed quotients zero rem 
definitions proposed 
high low denote significant significant halves low high sword 
cases high low 
assumed instructions suggested code assumes operations table bit machine 
primitives loading constants operands implicit notation included operation counts 
trunc truncation zero see 
high low upper lower halves see 
lower half product product modulo 
upper half signed product 
upper half unsigned product 
bitwise eor bitwise exclusive bitwise complement equal signed unsigned 
bitwise sll logical left shift bits 
sra arithmetic right shift bits 
srl logical right shift bits 

short sra srl 
complement addition subtraction negation 
table mathematical notations primitive operations algorithm requires ability add subtract obtaining result typically expands instructions 
algorithms processing constant divisors require compile time arithmetic 
algorithms processing run time invariant divisors require base logarithm positive integer rounded require dividing 
algorithms constant divisors operations needed compile time 
architecture leading zero count instruction logarithms log log 
algorithms may produce expressions srl optimizer obvious simplifications 
descriptions show addition subtraction op 
architecture lacks arithmetic right shift computed identity sra srl 
architecture computed arbitrary bit patterns interpreted 
unsigned division suppose want compile unsigned division constant run time invariant variable 
try find rational approximation 
setting shows require setting shows 
multiply derive inequality hold values theorem states conditions sufficient maximum relative error part small affect quotient theorem suppose nonnegative integers 
integer proof 
define hypothesis 
write 
show 
calculation gives 
difference nonnegative exceed 
theorem allows division replaced multiplication holds 
general require ensure suitable multiple exists interval 
compatibility algorithms signed division convenient choose theorem permits equality 
large don multiply directly leads code 
cost multiply adds subtracts shifts quotient computing constants dependent divisor 
initialization int log int sh min int sh max sh sh srl srl sh sh unsigned division run time invariant divisor explanation 
sh sh 
code computes sh sh 
value fits 
formula simplifies srl srl 
set 
hypothesis theorem satisfied caution 
conceptually srl 
compute way may overflow bits shift count may bounds 
improvement 
constant power replace division shift 
improvement 
constant reduce lowest terms 
reduced multiplier fits bits original 
rare cases bit machine bit machine final shift zero 
improvement 
constant rewrite 
computed srl 
precision needed multiplier 
ideas reflected generates code unsigned constant 
procedure choose multiplier shared algorithms appears 
inputs constant 
dodd int dummy choose multiplier find dodd dodd odd 
dummy choose multiplier dodd issue srl assert issue issue srl srl issue srl srl optimized code generation unsigned constant nonzero examples illustrate cases 
assume unsigned bit arithmetic 
example 

choose multiplier finds 
round divisions returns 
suggested code srl eliminates pre shift 
see table 
example 

example uses longer sequence 
example 

choose multiplier returns multiplier 
suggested code uses separate divisions srl srl 
signed division quotient rounded suppose want compile signed division trunc constant run time invariant variable 
quotients rounded zero 
prove theorem theorem trunc trunc suitable range cf 
wouldn help compute right side 
show adjust estimated quotient dividend divisor negative 
theorem suppose integers arbitrary integer 
define 
trunc 
proof 
theorem replaced 
suppose say 
define 
hypothesis fraction right positive nonnegative 
sum asserted 
trunc trunc 
caution 
avoid rewriting quotient trunc fails run time invariant divisor leads code 
cost multiply adds shifts bit op quotient 
explanation 
multiplier satisfies cases 
case fits sword 
compute 
subtraction adds 
line negates tentative quotient 
variation 
alternate computation trunc uses signed bit bit division bit quotient 
initialization constant sword int max log sword sword int trunc sword sword sra eor signed division run time invariant divisor rounded zero overflow detection 
quotient overflows 
algorithm returns overflow detection required final subtraction check overflow 
improvement 
constant reduce lowest terms unsigned case 
improvement reflected generates code trunc nonzero constant 
checks divisor power negative thereof 
inputs sword constant 
int choose multiplier issue issue sra srl sra issue sra issue sra cmt 
caution negative 
issue optimized code generation signed trunc constant example 
trunc 
bit machine 
choose multiplier returns 
code uses multiply shift subtract 
signed division quotient rounded languages require negative quotients round zero 
ingenuity compute quotients terms quotients round zero signs dividend divisor unknown compile time 
integers identities trunc trunc trunc trunc easily verified 
new numerators overflow identities computation 
summarized trunc eor 
cost shifts adds subtracts bit ops plus divide repeated subexpression 
remainders corollary mod trunc rem rem 
equality verified separately checking cases 
subexpression depends rounding analog trunc eor 
improvement 
constant 
trunc 
trunc trunc eor equivalent eor eor trunc 
dividend divisor right nonnegative view signed unsigned applying earlier algorithms 
improvement 
equivalent produce true false 
mips example compute srl slt signed eor trunc instructions plus divide saving instruction 
improvement 
known nonzero simplifies 
constant divisors algorithm 
constant shorter algorithm appears 
inputs sword constant 
int choose multiplier issue sra assert issue sword issue eor issue eor srl optimized code generation signed constant example 
signed bit arithmetic code mod nonnegative remainder sword eor sword eor srl sll sll 
cost multiply shifts bit ops subtracts 
alternately fast signed division algorithm rounds quotients returns remainders justifies code rem 
cost divide shift bit op adds subtracts 
procedure choose multiplier int prec cmt 
constant divisor invert 
cmt 
prec number bits precision needed prec cmt 
finds cmt 
cmt 

prec 
cmt 
sh post sh post prec 
cmt 
corollary 
prec sh post sh post cmt 
fits max prec bits unsigned 
cmt 
int log prec cmt 
avoid numerator overflow compute 
cmt 
likewise 
compare 
invariant 
sh post sh post prec 
reduce lowest terms 
return outputs 
choose multiplier floating point alternative uses floating point arithmetic 
floating point mantissa bits wide ieee double precision arithmetic 
floating point operation relative error regardless rounding mode exponent overflow underflow occurs 
suppose 
claim trunc trunc selection multiplier shift count regardless rounding modes compute 
proof assumes negating sides necessary case trivial 
relative error operation estimated quotient satisfies inequalities derive denote trunc 
implies trunc exactly representable floating point numbers representable numbers strictly contradiction shows trunc 
quotients rounded 
bit integer division 
algorithm may trigger ieee exception application program enables condition 
uses integer multiplication computes multiplier floating point arithmetic 
baker modular multiplication combination floating point integer arithmetic 
dividing primitive operation multiple precision arithmetic division obtaining quotient remainder quotient known initialization int log sll normalized divisor sll high srl low see note shift count 
sll low ignore overflow 
sword high underflow impossible 
see lemma 
dr high dr dr dr low dr add quotient dr 
high dr add remainder dr 
unsigned division run time invariant 
describe way compute quotient remainder preliminary computations involving divisor divisor run time invariant expression 
lemma suppose nonnegative integers 
write integers 
define integers 
proof 
define implies 
bound implies 
equation implies corollary proves upper bound integer 
straightforward calculation definitions reveals 
hypothesis right side nonnegative 
remainder bounded completing proof 
leads algorithm dividing run time invariant quotient known previous algorithms code rounds multiplier computing reciprocal 
initializations depending divisor algorithm requires products halves simple operations including adds subtracts 
registers hold 
note 
shift count computations may equal large separate shifts 
shift available compute 
exact division constants occasionally language construct requires division remainder known vanish 
example occurs subtracting pointers 
numerical difference divided object size 
object size compile time constant 
suppose want code nonzero constant expression known divisible write dodd dodd odd 
find dodd mod 
dodd dodd dodd mod 
mod 
dodd fits bits equal lower half product 
sra signed division srl unsigned division produces quotient multiplicative inverse dodd modulo extended euclidean gcd algorithm 
algorithm observes holds modulo dodd 
newton iteration dodd mod doubles known exponent holds log iterations suffice 
dodd dodd multiplication trivial negation 
odd shift disappears 
variation tests integer exactly divisible nonzero constant computing remainder 
power negative thereof signed case check lower bits test divides compute 

multiple original division exact remainder precisely multiple ii sufficiently small dodd representable original data type 
unsigned division check bottom bits zero 
tests combined architecture rotate circular shift instruction expanding rotate srl sll signed division check bottom bits zero interval check done add signed unsigned compare 
test rem constants signed check nonnegative multiple exceeding 
example 
test signed bit value divisible 
compute sword 
check multiple interval qmax qmax qmax 
algorithms require lower half product optimizations integer multiplication apply 
example applying strength reduction loop signed long imax imax yield denotes exponentiation const unsigned long const unsigned long qmax unsigned long test qmax test qmax mod imax test test qmax test 
explicit multiplication division remains 
implementation gcc implemented algorithms constant divisors freely available gcc compiler extending machine language independent internal code generation 
minor machine dependent modifications machine descriptor md files get optimal code 
languages processors supported gcc benefit 
changes scheduled inclusion gcc 
generate code division bit quantities choose multiplier function needs perform bit arithmetic 
procedure complex appear 
optimal selection instructions depending operation tricky problem spent quite time 
architectures important select multiplication instruction smallest available precision 
architectures multiplication performed faster sequence additions subtractions shifts 
implemented algorithm run time invariant divisors 
architectures amd intel motorola extent ibm power adequate hardware support implementation viable instruction integer logarithm computation bit bit divide instruction 
hardware support careful transformation really improves code loop need executed times faster loop body outweighs cost multiplier computation loop header 
results example compile time constant divisor gets drastically faster processor implementations 
program converts binary number decimal string 
calculates quotient remainder output digit 
table shows generated assembler codes alpha mips power sparc 
explicit division 
initially computed separately quotient remainder calculations combined gcc common subexpression elimination pass 
unsigned int data type bits architectures alpha bit architecture 
alpha code longer multiplies slower cycle 
illustrates multiplications needed algorithms computed quickly sequence shifts adds subtracts multipliers small constant divisors regular binary patterns 
table compares timing processor implementations radix conversion routine division elimination algorithms 
number converted full bit number sufficiently large hide procedure calling overhead measurements 
ran integer benchmarks spec 
improvement negligible programs best improvement seen 
benchmarks involve hashing show improvements 
anticipate significant improvements number theoretic codes 
robert 
integer division reciprocals 
peter david editors proceedings th symposium computer arithmetic pages grenoble france june 
ehud james harry 
fast division technique constant divisors 
cacm february 
henry baker 
computing mod efficiently ansi acm sigplan notices january 

ibm risc system processor hardware overview 
ibm journal research development january 
robert bernstein 
multiplication integer constants 
software practice experience july 
raymond 
euclidean definition functions div mod 
acm transactions programming languages systems april 
chang 
note modulo operation 
sigplan notices april 
digital equipment 
aa microprocessor hardware manual st edition october 
intel santa clara ca 
dx microprocessor programmer manual 
intel santa clara ca 
intel microprocessor family programmer manual 
david 
combinatoric division algorithm fixed integer divisors 
ieee trans 
comp june 
gerry kane 
mips risc architecture 
prentice hall englewood cliffs nj 
define char decimal unsigned int static char buf char bp buf bp bp return bp return pointer digit radix conversion code alpha mips power sparc lda buf ldq addq stq subq addq subq sll subq addq sll ldq addq addq srl addl addq subl addl bis bis stq bne ret la buf sb li ori srl sll addu sll addu move bne sb move lc cal stb mul sri sf ai 
ai bc ai br table code generated gcc radix conversion sethi hi buf lo buf stb sethi hi add rd srl sll add sll sub add bne stb mov architecture implementation mhz time division performed time division eliminated speedup ratio motorola mc pp 
motorola mc sparc viking hp pa mips mips power rios dec alpha time difference artificial 
alpha architecture integer divide instruction dec library functions division slow 
table timing microseconds radix conversion division elimination donald knuth 
empirical study tran programs 
technical report cs computer science department stanford university 
stanford artificial intelligence project memo aim 
donald knuth 
algorithms volume art computer programming 
addison wesley reading ma nd edition 
yen robert li 
fast constant division routines 
ieee trans 
comp september 
daniel liz peters karl pettis dan 
integer multiplication division hp precision architecture 
proceedings second international conference architectural support programming languages operating systems asplos ii 
acm 
published sigplan notices volume october 
mips computer systems sunnyvale ca 
mips microprocessor user manual 
motorola mc bit microprocessor user manual nd edition 
motorola powerpc risc microprocessor user manual 
sparc international menlo park ca 
sparc architecture manual version 
richard stallman 
porting gcc 
free software foundation cambridge ma 
henry warren 
predicting execution time ibm risc system 
ibm 
preliminary version 
