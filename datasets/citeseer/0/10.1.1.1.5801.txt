iterative generalized vickrey auction strategy complete revelation generalized vickrey auction gva strategy proof combinatorial auction truthful bidding optimal strategy agent 
address fundamental problem gva requires agents compute reveal values combinations items 
difficult bounded rational agents limited costly computation 
propose experimental design iterative combinatorial auction 
theoretical proof auction implements outcome vickrey auction special cases initial experimental results support conjecture auction implements outcome vickrey auction cases 
auction better information properties gva round agents bid set bundles maximize utility current ask prices require agents compute exact values bundle 
central problem distributed open systems agents private information compute optimal system wide solutions global problem involves agents 
market methods proposed solve problems type distributed scheduling wellman supply chain walsh course registration graves airport scheduling air conditioning office building huberman clearwater 
generalized vickrey auction gva varian mackie mason received wide attention literature wellman 
grosz incentive properties truthful bidding optimal strategy agent gva 
gva solves combinatorial allocation problem cap rothkopf de vries vohra discrete set items allocate agents values combinations items want get :10.1.1.56.9425:10.1.1.56.9425
goal cap compute allocation maximizes total value 
expressing contingencies kind important applications example bid compatible pair take landing slots airport scheduling problem 
address fundamental shortcoming gva requires complete information agents agent reveal value pos david parkes department computer information science university pennsylvania south rd street philadelphia pa cis upenn edu sible combinations items 
difficult bounded rational agents limited costly computation hard valuation problems 
complete information requirement arises single shot nature auction agent submits sealed bid auctioneer allocation computed 
option ask agent information mechanism compute efficient allocation problem instance complete information front agents valuation functions 
comparison iterative gva terminate outcome allocation payments information revelation 
iterative auction elicit information agents dynamically required determine efficient allocation 
terminating vickrey outcome provides iterative procedure strategy sealed bid gva 
design iterative gva stated important open problem auction design literature milgrom 
iterative vickrey auctions known special cases kelso crawford gale gul restrictions agent valuation functions 
propose experimental design combinatorial auction 
theoretical proof auction terminates vickrey outcome special cases initial experimental results support conjecture auction implements vickrey outcome cases 
auction extends parkes parkes ungar builds ideas introduced proxy adjust parkes ungar 
goal implement vickrey outcome best response agent strategies agents bid round bundle maximize utility 
auction distinct phases 
phase determine efficient value maximizing allocation second phase determine vickrey payments 
transition phase phase ii hidden participants 
auction design quite novel 
adjust agents payments auction terminates agents pay final bid prices 
allows implementation non equilibrium solutions important gva outcome ways supported equilibrium 

second introduce dummy agents phase ii force continued bidding winning agents elicit information adjust agent payments vickrey payments 
methodology construct auction implement primal dual algorithm gva best response agent strategies 
best response bids agents provide information complementary slackness conditions primal dual formulation adjust optimal solution 
bertsekas similar connection auction algorithm simple assignment problem 
outline section provide brief discussion consequences agent bounded rationality mechanism design 
application combinatorial auction hard valuation problems package delivery problem 
define gva show example possible compute outcome auction complete value information 
discuss methods reduce information revelation gva bidding programs dynamic methods 
describe new auction procedure illustrate mechanism couple examples 
initial experimental results confirm conjecture auction implements outcome gva 
brief theoretical justification design auction 
close suggestions 
mechanism design bounded rational agents brief discussion implications agent bounded rationality mechanism design 
nisan ronen provide related concerns follow computational requirements placed mechanism infrastructure 
important consideration amount value information required mechanism 
single shot mechanisms gva fail expensive agents compute reveal value combination items 
describe example agents hard valuation problems 
comparison iterative mechanism solve realistic problems information eliciting minimal information required compute efficient allocation 
addition solving problems complete information revelation important agents participate computing exact values bundles 
auction require information agents agents compute values bundles provide information 
focus information revelation conflicts central result mechanism design revelation principle green myerson 
revelation principle states design mechanisms restrict attention direct revelation mechanisms request complete information agent valuation function 
revelation principle assumes unlimited computational resources agents submitting valuation functions auctioneer computing outcome mechanism ledyard 
continue interesting surprising note sense agent help mechanism design 
design mechanisms manipulated agent solve np hard computational problem 
nisan ronen follow line reasoning describe concept feasible truthfulness mechanism design 
combinatorial allocation problem focus mechanisms combinatorial allocation problem cap quite general resource allocation problem agents values combinations items 
resource allocation problems modeled cap including job shop scheduling course registration airport scheduling problems mentioned 
formally represent set discrete items allocate agents 
agent value vi bundles gof items 
cap allocate items maximize total value agents max cap known cap np hard equivalent maximum weighted set packing problem rothkopf 
straightforward statement complexity hides important computational problem cap arises case hard computational problem solved agent compute value bundle 
quite applications example agent solve local optimization problem compute value different outcomes 
example consider package delivery problem 
example package delivery problem 
package delivery problem example distributed optimization problem agents hard valuation problems 
problem modeled combinatorial allocation problem items represent packages delivery pick delivery requirements locations times priority agents represent individual delivery companies transportation resources vans airplanes trucks agent value vi bundle packages computed payment receives delivering package minus cost 
assume payment linear sum payments packages denote cost ci 
global objective package delivery problem captured cap formulation determine allocation maximizes total value agents 
equivalent allocating packages minimal cost dropping packages delivered profitably 
reasonable expect cost agent pickup delivery particular package depend factors prior commitments prescheduled deliveries van capacities delivery locations times 
example additional cost deliver package van scheduled pick destination location 
formally cost particular set packages commitment perform set deliveries computed multi vehicle capacity constrained traveling salesperson problem np hard 
example give sense value information hard provide distributed optimization problems 
gva incentive compatibility complete revelation section define generalized vickrey auction gva incentive compatible efficient mechanism combinatorial allocation problem 
observe gva requires complete information revelation agents demonstrate fact possible compute outcome gva payments allocation information agent 
describe approaches reduce information revelation compute outcome gva allow agents submit bidding programs auctioneer query determine values particular bundles involve agents dynamically execution algorithm compute vickrey outcome request additional information fly required 
state number drawbacks bidding programs suggest iterative auctions useful class dynamic methods 
generalized vickrey auction agent submits possibly valuation function auctioneer 
auctioneer solves cap reported values computing allocation value allocation implemented auction 
auctioneer solves cap agent turn computing best allocation agent value vickrey payment agent computed words agent pays marginal negative effect participation reported value agents 
equivalently vickrey payment computed discount bid price vickrey discount interpretation consistent method compute vickrey payments iterative gva introduce 
quite straightforward show optimal strategy agent gva bid true valuation function bids agents 
theorem 
groves truthful bidding dominant strategy gva 
furthermore discount non negative agents pay bids discount large adjusted price negative implies 
computational problems gva unreasonable computational properties interesting problems 
problem 
gva intractable auctioneer 
auctioneer received bids agent solve multiple cap instances compute compute agent optimal allocation 
problem 
gva intractable agents hard valuation problems 
gva requires complete information revelation agent 
soon agent submits approximate missing information probability agent worse terms value bundle receives price pays revealed complete accurate information ii allocation implemented gva efficient 
problem received attention context sealed bid auctions addressing second problem 
general introducing approximation algorithms winner determination break incentive compatibility gva tennenholtz nisan ronen 
comparison problem information revelation gva received little attention 
exception discussion bidding programs nisan 
solving gva complete information section demonstrate possible compute verify optimality solution gva complete information agents values 
ignore moment question elicit required information simply demonstrate compute solutions incomplete information 
example 
single item auction agents values 
vickrey outcome sell item agent agent value 
information fv sufficient know fv compute outcome 
example 
consider simple combinatorial allocation problem instance table items agents 
ab agent agent agent table agent values example 
values agent item bundle ab stated cases left undefined 
consider case gva assigns bundle ab agent max payment agent max max 
sufficient know fa compute outcome 
max case gva assigns item agent item agent 
payment agent payment agent sufficient know fa compute outcome 
note necessary compute value optimal allocation need compute allocation agent 
consider example 
compute optimal allocation give item agent infor mation fv knowing exact value 
necessary compute compute vickrey payments common terms cancel 
example know value compute agent vickrey payment value cancels 
methods reduce information revelation consider different methodologies reduce information revelation compute gva outcome bidding programs dynamic methods 
bidding programs 
requiring agents compute reveal valuation functions ask agents provide program oracle auctioneer compute values bundles demand nisan 
reduce agent computation easier agent construct program compute explicit value bundles 
approach may useful practice number reasons trust agents reluctant reveal information goes assigning value outcome cost constructing program costly collect necessary information define autonomous program computational burden merely shifts computation auctioneer 
note particular functionality provided bidding program compute exact value vi bundle agent auctioneer compute complete value agent possible bundles compute gva outcome 
straightforward information theoretic argument value agent bundle considered compute solution cap instance 
usefully agent provide program give approximate value information auctioneer allows richer modes 
dynamic methods 
alternative approach open algorithm computing outcome gva involve agents dynamically computational process 
algorithm ask agents types information execution ordinal information bundle highest value approximate information value bundle greater best response information bundle want prices equivalence set information item substitutable notice cases agent respond computing exact value bundles 
iterative price directed auctions provide useful class dynamic methods implement mechanisms 
iterative auctions solve realistic problems complete information agents agents computing exact values bundles 
consider classic english auction ascending price auction single item 
sufficient determine round agents value greater ask price necessary know exact value agent item 
second iterative auctions quite transparent methods implement outcome mechanism 
example information requested agents round english auction captured best response current ask prices bidding item price agent value 
third agents follow myopic best response strategies iterative price directed auctions computing exact values bundles 
example agent follow best response bidding strategy price directed iterative auction lower upper bounds values bundles 
myopic best response requires agent bids bundle maximum utility value price round 
utility maximizing set bundles computed refining values individual bundles utility bundles dominates bundles 
earlier parkes demonstrates iterative auctions compute better solutions single shot auctions simple model agent bounded rationality 
standard algorithmic approaches provide lower upper bounds values anytime algorithms heuristic search compute lower bounds optimal solutions maximization problems introducing problem relaxations solving easy special cases compute upper bounds value 
iterative generalized vickrey auction section describe experimental ascending price combinatorial auction 
theoretical proof auction implements outcome gva special cases experimental results support conjecture auction implements vickrey outcome cases 
quite significant iterative vickrey auction inherits strategy gva information revelation agents 
hidden participants auction distinct phases 
phase identical combinatorial auction introduced parkes 
phase ends terminates point auctioneer stores provisional allocation computes initial price discounts introduced parkes ungar 
allocation phase implemented auction 
auctioneer uses simple test determine execute phase ii terminate auction immediately 
purpose phase ii collect additional information able compute vickrey payments 
phase ii phase phase ii skipped agents payments computed bid prices phase minus total discounts computed phases 
describe theoretical properties auction proven properties conjectures 
describe auction detail illustrate couple worked examples 
auction properties assume agents follow truthful myopic bidding strategy definition 
truthful myopic best response bidding strategy bid maximize utility current round prices fixed 
claim auction implements vickrey outcome truthful myopic best response justifies assumption theorems 
result allocation implemented auction efficient small bid increments 
result follows immediately efficiency best response strategies parkes ungar phase identical final allocation allocation computed phase theorem 
parkes ungar auction terminates allocation optimal solution myopic best response bidding strategies 
jgj number items jij number agents minimal bid increment auction rate prices increased see 
clearly auction terminates optimal allocation 
conjecture states auction implements vickrey payments iterative gva proposition 
auction terminates outcome gva agents follow myopic best response bidding strategy minimal bid increment 
initial experimental results support conjecture 
belief statement follows theoretical underpinnings auction design discuss 
auction provably implements outcome gva cases adjust computes vickrey outcome 
special cases include theorem 
parkes ungar auction terminates outcome gva special cases assignment problem unit demands multiple identical items subadditive valuation functions decreasing returns linear additive valuation functions items 
proposition think myopic dominant strategy iterative auction truthful bidding dominant strategy gva 
fact manipulation remains possible difficult strategy best response 
statement iterative auction implements outcome gva auction implements outcome gva agents follow truthful myopic best response strategies 
theorem 
gul truthful myopic bidding sequentially rational best response truthful myopic bidding agents iterative auction implements vickrey outcome 
proof follows quite directly gva 
basically strategy agent selects gva outcome non truthful valuation function preferable gva outcome true valuation function 
stronger claim strategy restrict strategies agents follow 
particular useful restrict agents follow possibly best response strategy theorem 
truthful myopic bidding dominant strategy iterative auction implements vickrey outcome agents constrained possibly best response bidding strategy 
pursued idea parkes ungar idea proxy bidding agents 
proxy bidding agent sit participant auction best response bids value information provided participants 
crucially participants provide incremental information proxy agents require complete information agents 
required information compute best response current prices 
proxy agent checks information consistent course auction 
claim iterative vickrey auction theorem 
truthful dynamic information revelation sequentially rational best response truthful dynamic information revelation agents iterative auction best response proxy bidding agents gva 
unfortunately quite true truthful incremental information revelation proxy agents dominant strategy 
agents commit single valuation function start auction report incremental value information auction 
long information self consistent agent condition values chooses report bids agents auction 
remains slight gap strategy theoretically agent able squeeze 
auction description auction ascending price combinatorial auction agents bid bundles items 
auctioneer increases prices bundles bids received computes provisional allocation round auction maximize revenue 
distinct phases phase final allocation determined followed phase ii final payments determined 
intermediate computation performed phase determines phase ii safely skipped 
phases follow price update rules bidding rules winner determination rules parkes version separate ask prices agent auction 
termination condition phase ii additional steps performed round phase ii new 
common elements 
describe elements common phases bids 
agents place exclusive bids bundles xor indicate agent wants items items 
bid associated bid price agent bundle bid price greater ask price announced auctioneer 
parameter minimal bid increment minimal price increase auction see 
agents repeat bids bundles provisional allocation committed bids single round 
winner determination 
auctioneer computes provisional allocation round maximize revenue agents bids 
price update 
auctioneer maintains separate ask prices agent 
prices bundles agent increased round agent bids unsuccessfully round agent receive bundle provisional allocation 
bundle received unsuccessful bid ask price round increased max minimal bid increment initial ask prices zero 
bundles received unsuccessful bids explicitly priced 
additional consistency rule states ask price bundles high greatest ask price bundle contain phase termination condition phase follows phase termination 
phase terminates agents submit bids consecutive rounds agents bid receive bundle 
phase denote allocation phase denote auctioneer revenue set agents receive bundle denote bid final bid price agent bundle receives final allocation 
intermediate computation 
phase auctioneer performs intermediate computation determine initial discounts agent ii enter phase ii terminate immediately 
init denote initial discount computed stage extra denote additional discount computed phase ii 
agent final payment auction discounted bid price init extra phase max need definitions definition 
denote second best revenue maximizing allocation auctioneer current ask prices revenue maximizing allocation feasible allocations allocations agent maxs 
ni denote set agents receive bundle allocation 
definition 
dependents agent ifi 
words dependents agent agents receive bundle allocation receive bundle revenue maximizing allocation agent current ask prices 
definition 
set active agents set active agents agents dependent agent current ask prices active 
phase auctioneer computes initial discounts sets dependents determines active agents 
compute initial discount init agent allocation init 

compute dependents agent init set remove depen bid dents agent 
initialize set active agents 
simple test performed determine enter phase ii 
early termination test 
phase ii skipped active agents 
active agent information required compute vickrey payments auction continues phase ii 
phase ii 
purpose phase ii compute additional discount extra agent dependents 
introduce dummy agents compete agents allocation phase auctioneer simulates dummy agents generating bids round 
say agent participates auction provisional allocation bidding ask price bundles 
similarly say agent dropped auction provisional allocation submitting new bids 
start phase ii auctioneer initializes extra agents introduces dummy agent agent dropped auction round phase simple method construct dummy agents definition 
valuation function dummy agent agent ask prices agent set bundles bundles large constant 
auctioneer performs additional steps round phase ii 
update dependents agents 
example compute restricting allocation real agents agent 
dummy agents 
update phase 

agent increment extra incr incr increase bid price agent bundle sj previous round 

init extra pi 
update set active agents 
reinterpretation vickrey test parkes ungar 
valuation function satisfy free disposal price consistency maintained ask prices 

introduce new dummy agents 
agent just dropped auction 
second detect state quiescence active agents 
case simple rule choose agent receive dummy agent select agent dummy active failing active agent dummy failing active agent dummy agent 
termination condition phase ii termination 
terminate phase ii active agents dropped auction set active agents empty 
final price adjustment 
auction terminates allocation computed phase implemented agent payments computed 
max bid init extra worked examples illustrate auction example different values case 
phase ab bid 
intermediate computation 
init 
active 
skip phase ii 
outcome allocate bundle ab agent vickrey payment 
case 
phase bid 
intermediate computation 
ab nf init ab nf init 
active 
phase ii 
introduce dummy agent agent values large 
prices increase agent drops 
time extra agent bid increased phase dummy agent introduced agent values 
agent drops time extra agent bid increased phase outcome allocate item agent item agent 
vickrey payments 
case 
phase intermediate computation case 
phase ii 
introduce dummy agent agent values large 
dummy agent exists agent replace new 
precise definition quiescence important 
consider auction quiescence active agents participated auction past rounds participating active agents allocated non empty bundle provisional allocation past rounds price 
prices increase agent drops extra 
introduce dummy agent agent value 
agent enters extra 
stage agent longer active 
outcome allocate item agent item agent 
vickrey payments 
experimental analysis section describe initial experimental results support conjecture ascending price combinatorial auction computes outcome gva 
auction tested suite problem instances problems ps parkes problems decay weighted random random uniform sandholm 
problem set defines distribution agents values bundles items 
measure distance agent payments auction gva payments norm particular bid increment compute average distance vickrey payments instances auction terminates optimal allocation 
bid increment gets small fraction approaches proportion trials measure distance vickrey payments approaches 
plots distance vickrey payments auction payments correctness auction fraction instances allocation phase efficient allocation 
reduce minimal bid increment correctness increases move right plots 
corresponding allocative efficiency increases correctness correctness 
plot distance gva payments phase initial price discounts phase phase ii 
comparison compute average distance minimal competitive equilibrium ce prices vickrey payments see section discussion relevance minimal ce prices 
problem sizes num agents num items num bundles set decay uniform random weighted random 
decay parameter 
results averaged trials 
provides useful measure distance computing average distance trials including wrong agents final allocation 
alternative compute distance norm trials equivalent comparing total revenue auction revenue gva 
additional statistics ps correctness average number rounds phase compared phase ii round phase takes average compared phase ii agent valuation information provided phase increases phase ii metric introduced parkes approximately distance gva payments distance gva payments distance gva payments phase initial adjust phase ii min ce fraction allocations correct distance vickrey payments ps 
phase initial adjust phase ii min ce fraction allocations correct uniform 
fraction allocations correct random 
distance gva payments distance gva payments fraction allocations correct decay 
fraction allocations correct weighted random distance vickrey payments 
illustrates performance auction problems uniform decay random weighted random 
problems allocative efficiency approaches small bid increments distance gva payments approaches zero 
payments auction converge gva payments problems examined minimal bid increment gets small correctness allocation auction approaches 
effect phase ii quite significant initial price adjustment phase smaller effect 
worth noting auction implements vickrey outcome problems outcome supported competitive equilibrium notice distance minimal ce prices gva payments non zero experiments 
agents receive dummy agent phase ii 
auction design theoretical motivation section briefly provide theoretical justification design phase phase ii auction 
phase phase determine efficient allocation myopic best response bids agents 
phase equivalent implements primal dual algorithm cap best response bids agents respect linear program formulations lp dlp introduced 
round provisional allocation feasible primal solution ask prices feasible dual solution 
complementary slackness conditions necessary sufficient optimality provisional allocation interpretations auction 
parkes ungar prove terminates prices allocation satisfy complementary slackness conditions efficient allocation 
intermediate computation 
intermediate computation determines initial price discounts agent 
parkes ungar demonstrate competitive equilibrium prices pi prices init pi competitive equilibrium ce 
ce prices set prices satisfy complementary slackness optimal primal solution optimal dual solution 
note unique 
prove ce prices upper bounds vickrey payments adjusted price bid init upper bound agent vickrey payment 
adjusted payment computed intermediate computation phase auction 
addition prove parkes ungar see theorem sufficient condition adjusted payments equal vickrey payments active agents agents allocation phase revenue maximizing allocation single agent 
phase ii 
motivation phase ii force active agents bid higher prices bundles received optimal allocation 
ask prices agents remain valid competitive equilibrium prices phase ii 
compute discount agent auction continues 
computed dynamically auction sum init extra 
parkes ungar prove necessary sufficient conditions discount compute vickrey payments ask prices leave agent optimal allocation indifferent receiving bundle bundle receives second best allocation 
ask prices leave agent optimal allocation indifferent bundle receives optimal allocation bundle receives allocation 
agent final allocation adjusted payment zero ask price dependents agent bundle receive final allocation equal value bundle 
hard show conditions satisfied phase ii 
agents continue bid higher prices increase ask prices enter drop auction 
tricky part proof terminate gva payments show competition dummy agents sufficient phase ii terminate push bid prices high active agents 
believe current protocol detecting quiescence phase ii introducing new dummy agents sufficient purpose 
example 
example consider case example 
phase ce prices 
phase ii agents bid continue bid face higher ask prices 
phase ii additional sets ce prices compute minimal ce prices ii compute minimal ce prices 
set minimal ce prices supports vickrey payment agent 
second set minimal ce prices supports vickrey payment agent 
discussion important agents identify transition phase phase ii auction agent bids phase ii change final allocation final payment 
effect agent bids phase ii reduce final payment agents 
costly participate auction agent choose drop phase addition opportunities collusion agents phase ii just gva vulnerable collusion 
certainly hide bids dummy agents phase give dummy agents false identities 
agent needs information ask prices receiving bundle provisional allocation 
agents need information bids prices allocations participants 
sure agents distinguish competitive effects bids dummy agents competitive effects bids real agents 
reasoning constructing dummy agents clone real agents compete items phase auction 
number interesting areas 
possible reduce computational demands auctioneer 
example useful allow auctioneer recompute dependent agents round phase ii explicitly computing second best revenue maximizing allocations 
second reduce level price discrimination auction 
example application allocation single item current auction maintains separate ask price agent 
comparison english auction implements vickrey outcome single ask price agents 
looking ahead proxy bidding agents situated real agents auctioneer suggest method integrate rich preference semantics auction ordinal cardinal constraint information 
interesting area 
addressed unreasonable information demands generalized vickrey auction place agents 
introduce experimental design iterative combinatorial auction 
auction provably terminates outcome gva special cases experimental results support hypothesis auction implements outcome gva cases 
preliminary auction may lead practical strategy proof mechanisms interesting applications 
acknowledgments research funded part national science foundation sbr 
addition gratefully acknowledge financial support ibm fellowship 

efficient dynamic auction heterogeneous commodities 
technical report department economics university maryland 
bertsekas 
auction algorithm assignment network flow problems tutorial 
interfaces 

package assignment model 
technical report anderson school management department economics ucla 
de vries vohra 
combinatorial auctions brief survey 
technical report department kellogg graduate school management northwestern university 
gale 
multi item auctions 
journal political economy 
graves schrage 
auction method course registration 
interfaces 
green 
characterization satisfactory mechanisms revelation preferences public goods 
econometrica 
groves 
incentives teams 
econometrica 
gul 
english auction differentiated commodities 
journal economic theory 
huberman clearwater 
multi agent system controlling building environments 
proc 
st international conference multi agent systems icmas 
grosz 
combinatorial auction collaborative planning 
proc 
th international conference multi agent systems icmas 
kelso crawford 
job matching coalition formation gross substitutes 
econometrica 
tennenholtz 
mechanism design resource bounded agents 
technical report technion 
ledyard 
incentive compatibility 
newman eds allocation information markets 
norton 

milgrom 
putting auction theory simultaneous ascending auction 
journal political economy 
forthcoming 
myerson 
optimal auction design 
mathematics operation research 
nisan 
bidding allocation combinatorial auctions 
proc 
nd acm conf 
electronic commerce ec nisan ronen 
computationally feasible vcg mechanisms 
proc 
nd acm conf 
electronic commerce ec parkes 
efficient ascending price bundle auction 
proc 
st acm conf 
electronic commerce ec 
parkes 
optimal auction design agents hard valuation problems 
proc 
ijcai workshop agent mediated electronic commerce 
stockholm 
parkes ungar 
iterative combinatorial auctions theory practice 
proc 
th national conference artificial intelligence aaai 
parkes ungar 
preventing strategic manipulation iterative auctions proxy agents 
proc 
th national conference artificial intelligence aaai 
smith 
combinatorial mechanism airport time slot allocation 
bell journal economics 
rothkopf 
computationally manageable combinatorial auctions 
management science 
sandholm 
algorithm optimal winner determination combinatorial auctions 
proc 
th international joint conference artificial intelligence ijcai 
varian mackie mason 
generalized vickrey auctions 
technical report university michigan 
walsh wellman ygge 
combinatorial auctions supply chain formation 
proc 
acm conference electronic commerce 
wellman walsh wurman mackie mason 
auction protocols decentralized scheduling 
games economic behavior 
appear 
