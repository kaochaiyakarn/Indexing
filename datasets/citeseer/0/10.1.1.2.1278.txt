adaptive hypermedia presentation modeling system custom knowledge representations pablo castells jos antonio mac de inform tica universidad aut noma de madrid campus de madrid spain pablo castells uam es www ii uam es castells 
propose generic presentation system adaptive educational hypermedia highly independent domain knowledge representation application state management 
approach providing module knowledge representation means definition domain ontologies best fit specific domains authors module building courses constructing semantic networks interrelated domain ontology instances presentation module presentation models templates rules associated ontology object classes relations 
explicit presentation model separate course contents course designers provided extensive control generation aspects presentation moderate development cost 
minimum assumptions domain knowledge structured updated presentation system potentially integrated wide range adaptive hypermedia support tools 
keywords 
adaptive hypermedia knowledge representation ontology engineering presentation design web learning user modeling interface design tools 
rapid web technology educational field learners gaining increasing autonomy instructional applications reaching unprecedented diversity users 
context growing interest raised development hypermedia systems able adapt automatically different types users platforms situation take account evolution user time 
common implicit explicit priority concern research adaptive education finding appropriate representation pedagogical knowledge 
courseware development tool establishes way structure domain designers describe subject matter tool prescribes tool takes care selection presentation dynamic sequencing teaching materials interaction user 
propose generic hypermedia presentation system pegasus presentation modeling environment generic adaptive hypermedia support systems minimum assumptions instructional knowledge represented 
purpose provide courseware designers simple specification paradigm non trivial adaptive presentation constructs different course management systems 
order allow different approaches pegasus supports definition measure domain ontologies description conceptual structuring subject matter 
ontology defined designers build courses creating domain objects relating conceptual vocabulary defined ontology 
course presentation designed defining explicit presentation model presentations associated ontology object classes relations 
related explicit representation semantic knowledge domain facilitate guide access information primary concern hypermedia systems early times 
literature adaptive hypermedia ways structure knowledge proposed 
level contents discretized basis kind elementary unit level semantic structure road map guide navigation 
great variation contents structured conceptual network organized levels connected 
name examples interbook structures courses hierarchical aggregate units chapters sections subsections terminal pages accompanied set interconnected concepts types relation prerequisite outcome :10.1.1.16.4906
relative simplicity relation model contrasts lexical richness tools conceptual map takes wide variety relations educational theory literature prerequisite sequence aggregation similarity opposite example specialization exception 
aha allows flexible composition pages conditional html fragments 
concepts boolean attributes indicate student state knowledge respect concept known read ready read relations concepts parameter represents state boolean quantitative measure number 
dcg distinguished generating course structure parts runtime 
dcg level interconnected concepts defined concept tree learning tasks subtasks created sequence documents actions follow student learn concept 
task decomposition association fragments atomic tasks determined dynamically runtime means rules 
uses conditional hierarchy similar dcg dcg contents associated composite tasks consequence visited student 
systems generation semantic relations dynamic takes place means automatic search mechanisms metadata associated information units 
approach useful knowledge space large volatile define maintain explicitly desired relationships 
hypermedia field eon takes general approach preceding systems allowing author define knowledge categories topics relations considers appropriate 
topic assigned sets content units different relations defined designer explanation evaluation basic level advanced level summary 
effective selection contents takes place runtime applying predefined pedagogical strategies content selection ordering choose element randomly sequence 
eon provides graphical tool designer builds parameterized user interfaces associates units contents way interface widgets buttons tables graphs dialog boxes take values knowledge unit 
knowledge representation specific knowledge representation approach ones described preceding section domain model built 
adaptive systems associate information student domain model objects order maintain date model student knowledge goals respect described subject matter overlay model 
information run time adapt selection presentation contents links user 
cited systems provide different forms explicit author control teaching strategies corresponding conceptual map update mechanisms generation pages eon done fixed presentation patterns styles programmed tool 
system supports automatic generation hypermedia documents type supported adaptive systems full control designer visual aspects presentation generated hyperdocuments imposing particular representation knowledge 
eon pegasus allows definition taxonomies fit domain author 
terminology defined hand description subject matter author construction presentation models associated different knowledge categories 
domain ontology domain ontology pegasus consists set classes best fit specific application domain reflect specific view particular author domain 
approach ontologies defined high degree freedom generic classes concept lesson fact specific algorithm theorem definition designer sees fit 
ontologies include terms subject matter information theorem statement proof pedagogical information lessons levels difficulty run time user system state information concept known student 
knowledge captured defining attributes classes relations classes 
pegasus provides root class predefined subclasses topic fragment ontology designers subclass 
topic user separate page fragment inserted page 
predefined subclass fragment carries content media html source 
predefined attributes id title designer add read known visible new relations prerequisite subunit 
formats pegasus allows representation ontology classes domain instances xml 
example illustrates definition class algorithm relations procedure examples proof correction 
sake brevity omit relations normally included previous definitions problem solve analysis complexity 
class name algorithm parent topic attribute name recursive type boolean relation name procedure type multivalued false title procedure relation name examples type multivalued true title examples relation name correction type theorem multivalued true title proof correction attribute name relevant type boolean attribute name difficulty type number relation class relations attributes difficulty proof correction example reflect properties relation 
relations predefined title attribute certain cases generate titles text hypermedia links 
addition domain ontology simpler data structures defined designer describe user profiles information course plan goals requirements duration number students platform characteristics aspects considered relevant adaptivity application built 
domain model ontology defined courses constructed creating semantic networks domain objects classes relations defined ontology 
example illustrates creation instance algorithm represent dijkstra algorithm shortest paths problem assume attribute title relation prerequisite predefined root class 
algorithm id dijkstra title dijkstra algorithm recursive false prerequisites algorithm ref relaxation prerequisites procedure tt dijkstra br init br br empty br br relax tt procedure examples url html examples correction relevant true difficulty theorem ref theorem correction algorithm elements attribute ref indicate course units instance line refers algorithm id relaxation 
atomic fragments directly consist string dijkstra algorithm procedure line web address line 
runtime pegasus maintains copy domain objects user class attributes read measure user progress 
values influence presentation see section complementary update module required keep date see architecture section 
domain model pegasus supports definition adaptive elements model means conditions part structure 
example select different examples depending student experience level line changed examples test condition user expertise url example html test test condition user expertise url example html test examples way possible build dynamic structures dcg task hierarchies take definitive shape runtime depending user model 
adaptive elements pegasus admits include mechanism dynamic construction modification course structure 
system takes care may affect presentation course structure state updated external presentation system 
presentation model existing adaptive hypermedia systems explicit presentation model 
consequence presentation partly intermingled contents partly set automatically system rigid design choices link annotation designer configure see instance 
pegasus separation content presentation achieved defining presentation template class ontology 
templates define parts attributes relations knowledge item included presentation order visual appearance layout 
templates complemented presentation rules responsible generating adaptive presentation constructs involving relations domain objects succinct high level descriptions templates 
eon user interface components associated specific units knowledge pegasus presentations defined categories knowledge 
presentation templates templates defined extension html pages tm jsp allows inserting control statements java expressions html code 
templates designer presentation constructs html language lists tables frames links forms insert simple java expressions domain items 
instance simple template class algorithm follows title previous concepts prerequisites procedure procedure examples examples proof correction correction templates presentation author needs refer attributes relations class shown bold example 
presentation system takes care internally aspects automatically handling lists multivalued relations examples algorithm recursively applying templates referenced objects class proof correction theorem algorithm 
resulting page dijkstra algorithm presentation template seen 
html elements surrounding algorithm presentation frame structure contextual index left previous buttons bottom come presentation template root class 
fig 

generated web page topic type algorithm template definition language supports adaptive elements conditionals 
instance lines preceding example information conditioned student level expertise including available examples student beginner single example advanced students showing proof correction relevant difficult student user expertise examples examples upto correction relevant correction difficulty user expertise proof correction correction expression language templates includes facilities allow instance cutting filtering sorting lists arbitrary comparison function generating trees linked lists traversing relation forcing generation hypermedia links 
basic template language allows specification wide set non trivial presentations simple syntax 
designer write arbitrarily complex java code inside templates 
presentation rules presentation rules govern aspects link generation correspondence link styles topic states ordering layout fragment link lists generation built presentations topic network subsets linked lists trees 
previous subsection designer refers relation prerequisite template class algorithm rules take care automatically deciding insert prerequisite details generated page generate link prerequisite style annotation case pieces laid 
doing system analyzes relation simple multivalued class involved topics fragments state conditions stated designer 
designer modify existing rules define 
rules consist list zero conditions followed presentation applied conditions hold described syntax templates 
example rule establishes green tonality color links knowledge items read prerequisites known student rule class test condition read test var item list prerequisites condition item known presentation font color font presentation rule html lists time lists links displayed rule defined rule class list test var item list condition item presentation ul iterate var item list li item li iterate ul presentation rule writing rules delicate task requires familiarity system author basic html knowledge modify rule instance html tables lists 
presentation systems receives request item applying corresponding template pegasus tries fire applicable rules 
objects appear right side rule part relation explicitly expressions item lines objects processed turn applying rules 
longer possible apply rules template corresponds object class applied sense templates seen lowest priority rules condition true 
procedure repeated recursively objects appear turn processing template 
architecture runtime student interacts application web browser 
interaction application built sus consists traversing domain object network 
time user moves object pegasus responds generating html page 
doing system resolves user request determining actual object move locates instance domain model updates domain user models generates html presentation applying pertinent rules template corresponds object class 
generated pages links point pages refer explicitly descriptively domain objects 
fig 

course model system architecture cases presentation system steps external pegasus 
ontology subject matter built runtime module needed set update topic networks step illustrated 
optionally planner included dcg determine path follow response user requests step 
proposed knowledge representation system reproduce domain models wide range hypermedia systems 
dynamic generation presentation separated mechanism application state update mechanisms pegasus compatible different courseware support tools ones described related section 
approach allows specification presentation independently content construction enhancing presentation reuse consistency reducing development cost 
construction templates reach web page designer familiar html jsp technologies definition ontologies delicate task requires participation advanced designer trained system 
ontology associated presentation models defined construction domain model reach average author 
modifications presentation templates rules easy step kind author advanced usage level 
pegasus implemented java tm jdk xml dom pages tm 
time writing complete set interactive authoring tools facilitate construction ontologies domain object networks 
plans include development graphical editing tool authors customize presentation models example editing generated html pages 
creation kind tool possible explicit declarative model presentation 
reported partially supported spanish commission science technology cicyt project number tel 

brusilovsky eklund schwarz web education tool development adaptive courseware 
computer networks isdn systems 

brusilovsky methods techniques adaptive hypermedia 
brusilovsky kobsa vassileva 
eds adaptive hypertext hypermedia 
kluwer academic publishers 

rodr guez dynamic generation adaptive internet courses 
journal network computer applications 

castells szekely presentation models example 
duke puerta 
eds design specification verification interactive systems 
springer verlag pp 


de bra aha 
open adaptive hypermedia architecture 
new review hypermedia multimedia 
taylor graham publishers 

mac castells generic presentation modeling system adaptive web instructional applications 
appear proceedings acm conference human factors computing systems chi extended abstracts 
seattle washington 

mac castells adaptive hypermedia presentation modeling domain ontologies 
appear proceedings th international conference human computer interaction 
new orleans louisiana 

murray authoring tutors tools content instructional strategy student model interface design 
journal learning sciences 

rez guy adaptive hypermedia system 
proceedings artificial intelligence education aied 
aace charlottesville 

sun microsystems pages tm technology 
java sun com products jsp 

trigg weiser network approach text handling 
acm transactions office information systems tois january 

vassileva dynamic courseware generation cross point cal authoring 
proceedings international conference computers 


vassileva dynamic course generation www 
proceedings th world conference artificial intelligence education aied 
kobe jap 

wilkinson smeaton automatic link generation 
acm computing surveys es december 
