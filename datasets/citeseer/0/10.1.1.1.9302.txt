comparative study methods reducing myopia hill climbing search multirelational learning pe castillo pena cs uni magdeburg de otto von university magdeburg germany stefan wrobel wrobel ais fraunhofer de fraunhofer ais university bonn germany hill climbing search commonly search algorithm ilp systems permits generation theories short running times 
known drawback greedy search strategy myopia 
macro operators macros short proposed technique reduce search space explored exhaustive search argued reduce myopia hill climbing search automatically performing variable depth look ahead search space 
surprisingly macros employed greedy learner 
integrate macros hill climbing learner 
detailed comparative study domains show hillclimbing learner macros performs significantly better current state art systems involving techniques reducing myopia fixed depth look ahead template look ahead beam search determinate literals 
addition macros contrast approaches computed fully automatically require user involvement special domain properties determinacy 

multirelational learning inductive logic programming ilp zeroski lavra subfield machine learning concerned inducing concept definitions order representation 
typically appearing proceedings st international conference machine learning banff canada 
copyright authors 
ilp systems take input background knowledge positive examples negative examples find clausal theory set rules classify examples 
systems task find theory minimizes classification error instances 
multirelational learning performing exhaustive search inefficient hypothesis space multirelational learning problems large 
consequently search strategies consider limited number alternatives level search typically applied 
search strategies hill climbing search called greedy search takes best alternative level commonly search algorithm ilp rnkranz 
known problem hill climbing search myopia search algorithm unable correctly assess quality refinement non optimal clause 
hill climbing occurs hillclimbing search consider existence relations inability evaluation function deal properly literals denoting kind relations 
example consider trains domain learning task find theory classify trains traveling direction east west 
relations domain structural relation train cars denoted predicate car 
non discriminating relation train cars literals having predicate useful distinguish examples trains belonging different classes 
introduce new car new variable clause 
problem literals evaluation value clauses containing literal low selected hill climbing 
case hillclimbing search may non optimal clause hit dead 
fact hill climbing see combined literals may yield solution called myopia 
integrate macro operators shown reduce search space explored exhaustive search pe castillo wrobel hill climbing learner empirically show greedy system macros performs significantly better current systems involving techniques reducing myopia 
macros provider consumer iterations existential variables literals refinement operator refines clause adding macros single literals 
benefit derived macros hill climbing evaluation function applied admissible clauses advantage quality clauses accurately assessed discriminative power solution 
example case trains domain literals predicate added clause consumer output variables 
consumer added evaluation function able appropriately estimate relevance refinement 
macros number literals added clause automatically adjusted admissible clauses generated 
addition detailed comparative study approaches reduce myopia problem hill climbing search multirelational learning 
study involves fixed depth look ahead look ahead beam search determinate literals macros 
results show exception beam search hill climbing learner macros reports significantly lower classification error systems approaches 
section describes hill climbing search algorithm illustrates 
section briefly explain look ahead beam search determinate literals 
section explains macros reduce hill climbing myopia problem 
section describes experiments related macros surveyed section section concludes 

myopia hill climbing search purpose having search algorithm able perform various search strategies formulate algorithm 
algorithm performs top search top search input top lattice output clause 
ordered set clauses consider 
clause refined search resources exhausted set refinements clause refined refining ii 
sort eval rb best refinements rb 
best evaluated clause 
covers positive negative examples return return algorithm top search algorithm uses example guide search hypothesis 
receives user defined parameters indicate amount look ahead beam width respectively 
default values correspond hill climbing search 
algorithm set clauses obtained step refinements clause evaluate quality clause ci algorithm uses evaluation function shown equation information gain heuristic rnkranz flach 
equation posi number positive negative examples covered ci total number positive negative examples respectively ci number body literals ci ci body empty refers unit clause top refinement lattice ic returns information content posi clause ic ci log posi 
eval ci pos neg ic ic ci 
ci illustrate myopia problem hill climbing algorithm consider student loan domain pazzani brunk learning task find theory classify individuals required pay back educational loan pay 
assume set maximum length clauses body literals bottom 
search space explored hill climbing 
clause ci posi shown braces followed ci heuristic value obtained equation 
square encloses clause chosen hill climbing iteration 
payment due male longest absence school enrolled enrolled gte gte gte lte lte lte 

bottom clause student loan example clause see derived example bottom clause guide search solution lower bound search space 
bottom clause shown numbers precede literals indicate position literal refer literals 
explain algorithm works 
iteration step set contains refinements clause payment due refinements 

refinements level hypothesis language allow clauses unbound input variables 
refinements best evaluated clauses equation 
assume step chosen 
iterations hill climbing hits dead clauses refined satisfy criterion step algorithm returns 
hill climbing fails find solution literals discriminative power evaluation function unable correctly assess quality added clause 
refinements lead solution example solution clause payment due 
reducing hill climbing myopia reviewing various approaches ilp alleviate myopia greedy systems introduce terminology describe techniques 
proposed pe castillo wrobel literals classified providers consumers 
literal consumer literal input variable bound output argument value conversely provider notice relations apply head literal 
literal providing value output argument head literal head provider body literal head consumer consumes input argument value head 
literal dependent provider introduces existential variables clause combination ground bindings input variables ground binding output variables 
sense dependent providers represent non discriminating relations 

beam search ilp systems foil zeroski bratko icl de raedt van laer mitigate myopia problem hill climbing search performing beam search 
beam search considers best refinements level beam width 
value greater algorithm beam search obtained 
considers best refinements probability including refinement yields solution increases respect hill climbing search beam search disregards existence dependent providers 
beam search relies tuning beam width time consuming yield optimal results 

fixed depth look ahead fixed depth look ahead ilp systems consists allowing system evaluate clauses refinement steps 
setting parameter value algorithm step look ahead performed 
means step ii adds set refinements obtained applications employing step look ahead drawback non admissible clauses clauses contain dependent provider literal considered 
described evaluation function adequately estimate value clauses 
furthermore shown section fixed depth look ahead may incur significantly longer run times gain accuracy 

template look ahead template look ahead relies user defined templates perform selective look ahead relational clich silverstein pazzani tilde look ahead blockeel de raedt 
drawback approach templates hand written user basically user provide template match 
addition system templates provided refine clause doing non admissible clauses considered 

determinate literals determinate literals quinlan follows 
step determinate literals added clause refined 
second step refinements containing consumers literals evaluated best selected 
determinate literals consumer removed clause 
determinate literals subset dependent providers uniquely satisfied examples 
determinate literals approach requires determinacy application domain 
domain property implies mapping input output argument values literals 
determinacy property application domains 
example trains domain train multiple cars mesh design domain node multiple neighbours 

macros hill climbing search section review macros explain hill climbing search 

macro operators macros introduced pe castillo wrobel formal approach reduce search space exhaustive search defined downward refinement operator restricting hypothesis space 
macros relations literals 
addition dependent providers macros introduce concept dependent consumers dependent consumer literal input argument value provided exclusively dependent providers 
macro literal dependent provider dependent consumer subsequence literals consumer dependent provider subsequence 
subsequence literals contains subset literals bottom clause 
macro refinement operator refines clause adding macros single literals generates admissible clauses 
admissible clauses clauses contain unneeded literals called legal subsequences literals 
macros automatically created list user declared automatically determined dependent providers 
macros construction algorithm differs pe castillo wrobel generation macros dependent provider 
employing macro refinement operator step algorithm obtain macro hill climbing 

hill climbing macros illustrate macros alleviate myopia problem hill climbing student loan domain 
domain literals having predicate longest absence school enrolled dependent providers 
dependent providers macros obtained bottom clause listed section 
macros 
depicted iteration hill climbing evaluates refinements unneeded literal removed clause affecting clause coverage consistency 
complete correct algorithm constructing macros pe castillo 
recall literals referred number corresponding position see 

search space explored macro hill climbing 
square encloses clause chosen iteration 
hypothesis language obtained adding payment due generated macros 
refinements obtains highest heuristic value selected step 
second iteration step refined adding available macros step selected 
refined algorithm terminates returns solution added final theory 
macros alleviate hill climbing myopia problem equation applied clauses quality accurately assessed discriminative power solution 
macros automatically adjusted variable depth look ahead performed admissible clauses considered 

empirical evaluation section empirically analyze performance approaches described terms classification error run time 
carried experiments application domains 

chess moves 
dataset contains positive negative examples valid chess moves pieces learning task learn correct moves pieces 

trains 
system determine direction east west trains attributes 
dataset contains positive negative examples 

student loan pazzani brunk 
dataset consists positive negative examples 
learning task discriminate individuals required pay back educational loan pay 

mutagenesis srinivasan :10.1.1.36.9903
ilp benchmark dataset compounds positive negative examples 
mutagenesis problem deals prediction mutagenic activity small heterogeneous molecules 

mesh design dol sak 
stresses physical structures analyzed approximating structures mesh model 
task determine appropriate number elements edge 
data contains information edges different structures 

traffic problem detection zeroski 
dataset examples traffic situations road sections classified accident congestion non critical section 
fold cross validation datasets fold cross validation mutagenesis traffic cross validation leave mesh 

results summary experiments hill climbing macros hill climbing fixed depth look ahead beam search performed algorithm 
determinate literals template lookahead carried experiments foil quinlan cameron jones version tilde blockeel de raedt contained ace 
provide comparison exhaustive search included progol muggleton experiments :10.1.1.31.1630
defined templates needed tilde perform look ahead macros settings mode declarations tilde progol available request foil defaults values 
classification error run time point approach run error time hill climbing beam search fixed depth ahead beam search beam search beam search fixed depth ahead fixed depth ahead 
average classification error running times datasets hill climbing fixed depth look ahead beam search 
table 
win loss tie comparison approaches terms 
domains significant difference accuracy vs win loss tie tilde template progol exhaustive search foil det literals hill climbing fixed depth ahead beam search created 
done dataset mutagenesis mesh templates recommended author tilde 
run look ahead 
table shows win loss tie accuracy comparison approaches table shows accurate approaches beam search statistical significance 
analyze detail empirical results 

comparing macros fixed depth look ahead beam search compare macros fixed depth look ahead ran algorithm different values parameters reports results obtained set algorithm different parameter settings hill climbing table contains results obtained look ahead beam search best settings section 
step look ahead 
beam search various beam widths 
shows average classification error datasets obtained parameter setting 
horizontal line represents average classification error settings reported 
table right shows values data points 
experiments hill climbing see data point expected highest classification error 
lowest classification error obtained macros look ahead data points beam search beam width set data points 
beam search drawback beam width tuned trial error 
case tried total different beam width values application domain reported 
increasing amount fixed depth look ahead points pay long running times marginal decrease classification error 
addition behaviour beam search macros stable fixed depth look ahead descent accuracy oversearching occurs beam width amount look ahead increased 

comparing existing systems table show classification error lower tilde foil progol mesh exception tilde obtains lowest error 
significance value accuracy statistically classification error progol foil tilde chess student loan trains traffic mutagenesis dataset 
classification error progol left foil nd bar tilde rd bar right dataset table 
average error system dataset dataset progol foil tilde chess loan trains traffic 
mesh table 
average run time system dataset dataset progol tilde foil chess loan trains traffic 
mesh higher foil chess student loan trains mesh design domains 
accuracy statistically higher tilde chess student loan trains datasets 
accuracy statistically higher progol trains student loan mesh datasets 
macros significantly improve accuracy compared template look ahead tilde determinate literals foil obtain average accuracy positively compares obtained exhaustive search progol 
table shows average run time mhz sun blade mb ram progol tilde foil dataset 
see macros represent significant improvement accuracy respect systems attain middle place terms running time exhaustive system progol systems tilde mesh foil 
reason believe longer running times part due implementation issues implemented java uses java sicstus progol interface jasper execute prolog code foil implemented tilde implemented built high performance prolog system special features ilp 
determine impact implementation executed single query obtain coverage clause tilde 
tilde takes average execute query dataset takes 
generating macros minor time overhead average takes milliseconds automatically construct macro macros generated covering iteration 
macros efficiency bottleneck system 

related macros definition macros may similar local clauses language bias proposed cohen 
bias clauses locality considered locality clause size largest set literals contain free local variable free variable influenced set called locale 
contrary clauses generated macro refinement operator local clause legal subsequence literals need considered solution 
example suppose search local clauses 
case clause body consists dependent provider considered 
clause admissible 
macros side generates clauses 
reminiscent macros order feature construction individual centered domains lavra flach 
approach bc flach lachiche restrict search space linus rsd lavra input data nondeterminate literals 
approaches feature construction macros key idea provider consumer relations existential variables literals basis construct features respectively macros 
structural predicates order features binary predicates similar structural literals defined zucker ganascia structural predicates relax condition transitivity 
macros dependent providers relax addition requirement antisymmetry 
macros extend order feature construction allowing head providers ary dependent providers 
addition macros contrary firstorder features suitable non domains program synthesis tasks 

showed learner hillclimbing search macro operators exhibits significantly lower classification error greedy systems techniques look ahead template look ahead determinate literals 
addition macros automatically computed sensitive domain dependent tuning parameters require determinacy application domain 
plan compare hill climbing macros stochastic hill climbing reduce myopia problem greedy learners rnkranz 
acknowledgments oscar valuable suggestions 
second author partially supported german science foundation projects wr wr 
blockeel de raedt 

lookahead discretization ilp 
proc 
th int 
workshop ilp pp 

blockeel de raedt 

top induction order logical decision trees 
artificial intelligence 
cohen 

pac learning non recursive prolog clauses 
artificial intelligence 
de raedt van laer 

inductive constraint logic 
proc 
th conf 
algorithmic learning theory pp 

dol sak bratko 

application machine learning finite element computation 
machine learning data mining methods applications 
zeroski bratko 

handling noise inductive logic programming 
proc 
nd int 
workshop ilp 
zeroski jacobs molina muggleton laer 

detecting traffic problems ilp 
proc 
th int 
conf 
ilp pp 

zeroski lavra 

inductive logic programming 
zeroski lavra eds relational data mining 
flach lachiche 

bc order bayesian classifier 
proc 
th int 
workshop ilp pp 

rnkranz 

separate conquer rule learning 
artificial intelligence review 
rnkranz flach 

analysis rule evaluation metrics 
proc 
th icml pp 

lavra flach 

extended transformation approach inductive logic programming 
acm transactions computational logic 
lavra flach 

rsd relational subgroup discovery order feature construction 
proc 
th int 
conf 
ilp pp 

muggleton 

inverse entailment progol 
new generation computing 
pazzani brunk 

detecting correcting errors rule expert systems integration empirical explanation learning 
knowledge acquisition 
pe castillo 

search improvements multirelational learning 
doctoral dissertation university magdeburg 
pe castillo wrobel 

multirelational learning search space reduction technique 
proc 
th ecml pp 

quinlan 

determinate literals inductive logic programming 
proc 
th ijcai pp 

quinlan cameron jones 

induction logic programs foil related systems 
new generation computing 
silverstein pazzani 

relational clich constraining constructive induction relational learning 
proc 
th int 
workshop machine learning pp 

srinivasan muggleton king sternberg 

theories mutagenicity study order feature induction 
artificial intelligence 
zucker ganascia 

learning structurally indeterminate clauses 
proc 
th int 
conf 
ilp pp 

