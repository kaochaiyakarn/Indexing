algebraic languages xml databases maria arches uga edu tel john miller contact author department computer science university georgia boyd graduate studies research center athens ga jam cs uga edu tel fax xml increasingly popular means exchanging wide variety data web 
anticipated websites built xml documents 
xml databases required manage websites provide way users search contents 
give overview development query algebras original relational algebra algebras extended relational object oriented semi structured xml data models 
discuss detail provide cross comparison various algebras proposed xml 
discuss implementation particular algebra context main memory xml database system developing 
index words xml query algebra semi structured database 
xml increasingly popular means exchanging wide variety data web 
anticipated websites built xml documents 
xml databases required manage websites provide users search contents 
standard xml query language algebra required standard data model 
xml query working group world wide web consortium established september working developing standards xml databases 
discusses done major research groups developing xml algebra 
algebra help generating query plans efficient query execution 
xml data semi structured algebras developed relational object oriented data directly xml queries 
research areas influenced design xml algebras provided overview development relational object algebras 
review xml algebras carried intention choosing express queries input xml database system developing 
main memory database system designed storage querying xml documents 
particular xml algebra development gave opportunity study implementation issues involved generating query plans 
organization follows 
section give overview various query algebras developed extended relational object oriented semi structured xml data models 
section analyze various xml algebras discuss choice particular algebra implementation 
section implementation algebra findings 
conclude section discuss directions 
review query algebras database query algebras algebra relational model proposed codd formalized 
relational model world entities represented tuples records 
tuple fixed integral number named attributes fields 
fields restricted contain atomic scalar non composite values 
known normal form nf restriction 
relation table tuples identical layout 
layout called relation schema 
relations manipulated relational algebra expressive power relational calculus 
standard relational algebra operators union difference cartesian product projection selection 
extended relational algebras codd proposed relational algebra researches developed algebras operated non normal form relations 
nf nested relation attribute values restricted scalars relations sets tuples 
nested relations advocated 
nested relation model discussed associated algebras developed 
nf algebras aim vanderbilt verso sql nf powerset 
algebras value opposed identity relational algebra 
means get handle tuple value sort name identifier surrogate tuple 
algebras formal calculus defined 
study algebras showed common features operators codd original relational algebra operators 
table extended relational algebras operators 
union difference selection projection cartesian product operators defined relational algebra selection projection extended different ways 
selection operator extended allow comparators allow algebraic expressions appear selection condition 
algebras extended projection allowing arbitrary algebraic expressions appear projection lists order facilitate retrieval nested data relation 
extended union operator defined recursively pairs relations schema 
schema works exactly relational relation valued attribute encountered operator applied relation recursively 
tuples values combined single tuple relation valued fields operated illustrates union extended union relations algebras listed table nf algebras complex object algebra defined complex object data model 
shortly describe model differs extended relational model 
operator defined recursively fashion similar operator 
operator consists normal relational operator level attribute may projected need scalar followed resulting tuples remove duplicates 
renaming operator rename attributes nested relation 
powerset algebra powerset operator takes relation produces subsets relation 
complex object algebra powerset operator set collapse operator sets unions produce single set 
operators appear algebras nest unnest operators 
operator applied single relation specify attributes nested name single attribute replace 
unnest inverse nest 
example table relational extended relational algebra operators algebra operators year relational vanderbilt nest unnest unnest aim verso extension selection restrict rename join sql nf powerset complex object replace powerset set collapse nested relations 
union extended union relations projects projects staff staff dept code name dept code name age mike bob sales pete sales tom bob bob ann ann luke projects projects staff code name age dept code name mike mike sales tom sales pete sales ann luke luke help illustrate nest unnest operators 
shows result applying unnest operator twice relation projects code name age name age dept code name sales mike sales 
result applying unnest operator relation relation applying operator twice relation projects code staff staff code name age vanderbilt algebra unnest operator simulates sequence unnest operations relation transform nf relation 
important property nest unnest operators unnest inverse nest case nest unnest issue associated operators discussed appendix verso extension operators operate schema extend restructure respectively 
early researchers worked developing algebras complex object data models extend models removing restriction data relation scalar 
models data represented sets tuples longer constrained appear sets combination tuple type constructors called construct types 
algebra complex object algebra 
replace operator restructuring operator takes function parameter describing restructuring 
object oriented algebras algebras developed object oriented data models extensions complex object models notions object identity inheritance methods 
nf algebras common operators emerged general approach manipulation complex objects evolved algebras functional programming languages 
functional programming concepts needed order perform restructuring operations complex objects 
relational model require sophisticated restructuring operations relational model restructuring limited adding deleting fields tuples 
complex object models restructuring defined function applied member example image project operators encore equal algebra replace operator higher order operators function parameters describe restructuring applied objects 
higher order operators operators operators functions parameters 
need operators emphasized view algebra functional language 
higher order operators gives advantage functional programming language allowing construction complex queries incrementally simpler ones 
object algebras aqua qal 
aqua proposed result joint effort researchers participated design previous algebras including qal proposed 
table shows operators object algebras 
operators complete listing illustrates defined common operators operators derived relational algebra 
select operator encore equal algebra similar relational selection 
mentioned earlier image project operators retrieve object result image project functions defined objects set 
union intersection difference operators object identity 
flatten operator set collapse complex object algebra 
nf operators unnest provided 
explicit duplicate elimination operator available operator called coalesces eliminate duplicates certain level nesting object 
attribute different tuples refers objects equal contain collection object identifiers different object identifiers objects destroyed replaced equal object 
operator helps avoid creation multiple copies nested compared encore equal aqua operators 
authors explicitly state aqua minimal operators 
aqua designed general order easily accommodate query languages 
aqua designed support different collection types uniform manner currently defined operate multisets 
instance operator generalized take extra function argument addition input sets multisets matching predicate 
function argument combining function allows specify combine pairs objects input sets satisfy predicate 
combining function required standard tup join operator 
aqua unique approach enforcing notion equality elements equality essential definition operators union 
object identity default equality elements 
contents needed fashion sensitive notion equality dup elim operator 
operator generalized take equality form binary predicate parameter eliminate duplicates table object oriented algebras operators algebra operators year encore equal select image project union intersection difference flatten duplicate elimination coalesce unnest aqua apply select exists forall mem choose group dup elim nest unnest convert join tup join outer join union intersect multiset qal select union differ unnest group apply tuple close apply equality 
group operator takes function parameter group elements equivalence classes 
choose takes set nondeterministically selects element set result 
multiset operators definition operators convert convert 
apply operator described earlier mapping operator applies function input objects 
operators qal algebra evolved relational algebras family functional languages select union differ intersect nest unnest apply group operators defined earlier object algebras 
main operator proposed apply operator extends apply operator path expression dept projects code input addition function parameter 
useful operator algebra expression simpler eliminating restructuring operators nest unnest apply query nested components complex objects 
close operator takes function parameter computes closure input set function 
provided simple tool manipulation recursive data structures 
tuple operator similar select operator object algebras 
qal operators querying database schema discussed 
qal object oriented algebra heavily influenced earlier time simple number operators complete set 
early object oriented algebras developed 
semi structured algebras semi structured data data structure irregular loosely defined 
semi structured documents may represent kind known sources relational data object oriented data xml documents viewed semi structured sources context 
section focus done developing algebra xml queries 
xml algebras discuss operators similar extended relational object algebra operators 
operators modified applied xml data model describe shortly 
world wide consortium established xml query working group september order establish standards xml databases 
include standards xml model query language algebra 
detailed discussion different xml query languages algebras proposals xml algebras submitted algebra selected working draft published december 
section discuss various proposals submitted done xml algebras working draft published 
xml query working group published xml query data model draft may 
xml query data model formally defines information contained input xml query processor 
words xml query processor evaluates query instance xml query data model 
consider xml document associated dtd 
simplified version data model 
smith clark xml document dbgroup xml associated dtd document element attribute dbgroup member member name age office building room smith 
xml model discuss ibm algebra proposed september researchers ibm microsoft oracle 
algebra operators similar object algebra operators 
discuss niagara algebra proposed researchers university wisconsin 
algebra developed authors unsuccessfully tried implement existing algebras including ibm algebra 
discuss system specific algebras yatl lore yatl algebra proposed may developed yat xml integration system 
lore specifically developed lore database system originally proposed researchers stanford university 
describe algebra updated version algebra originally proposed june researchers bell labs 
ibm algebra ibm algebra provides algebra operators operate graph data model proposed 
purely logical model specified underlying storage representation physical operators 
addition standard retrieval querying operators ibm algebra called reshaping operators help create new xml documents fragments selected documents 
path navigation operator expressed name vertex expression element attribute 
vertex expression describes collection vertices data model graph edges name originate 
operator returns edges 
simplicity written consider query xml document 
members database group years 
expressed shown value member age data selection operator child property edge returns vertex referred edge 
selection operator returns collection vertices 
operators operate collections edges collection vertices 
operator takes collections vertices arguments condition 
pair condition evaluates true virtual edge created vertices 
expose return operations provided queries may want expose components fragments documents 
numerous operators provided sort allows reordering edges map applies specific function collection edges vertices 
directly mentioned authors algebra influenced concept algebra functional language operators defined functions operate collections edges vertices 
main drawback algebra lack optimization rules reduce cost query execution 
niagara algebra algebra similar ibm algebra operators designed operate graph model 
developers niagara discuss drawbacks ibm algebra discovered trying implement drawbacks prompted design niagara algebra 
drawback ibm algebra algebraic framework assumes time writing query type vertex attribute element known 
secondly algebra defines large collection operators explicitly preserves variable bindings appearing query creating multiple clauses query assigning intermediate results bindings 
leads complex structures representing query operators hard deal implementation 
pointed earlier optimization rules 
new ideas proposed niagara algebra having operators operate vertices operate bags vertices 
contains vertex operated vertices visited path vertex 
understand need approach consider document consists book elements author sub elements 
operator filtered books specific author operator considered authors books specific author filtered authors came book element 
problem starting set book elements started bags consisted book element author sub elements 
shows difference sets 
differentiate different elements bag bag element annotated path expression corresponds contents 
trigger evaluation path expression specific element bag algebra uses element annotations entry points 
example book element bag lastname authors entry point notation author lastname book author element lastname entry point notation book author 
entry point notation algebra expression complex 
query expressed algebra member member age member dbgroup xml book author book author book author vertices bags vertices source operator specify source xml document follow operator follow specified path inside elements select operator expose operator expose specified path expressions incoming bags 
operators algebra relational operators union intersection difference cartesian product rename rename entry point vertex create new vertex group group bags specified list elements 
authors specified explicit optimization rewrite rules algebra 
yatl algebra algebra developed yat xml integration system integrates data different sources object databases semi structured web repositories 
authors proposed new operators bind tree operators 
standard operators drawn earlier relational algebra object algebra 
starting arbitrary xml structure bind operation applied purpose extract relevant information produce structure called comparable nf relation 
tab structures standard operators join select project applied 
inverse operation bind called tree generates xml structure 
query represented shown algebra independent underlying storage structure 
main focus efficient query evaluation integrated system authors discussed optimization rewrite rules bind tree operators 
bind quite powerful operation providing support filtering horizontal vertical navigation 
user queries optimized generating integration views locally pushing queries external source 
tree operation sequence group sort map operations object algebra operators 
xml algebra better algebra sense optimizable 
drawback authors developed context integration system model system provided defined list operators explicit optimization rules 
dbgroup member members member dbgroup 
query evaluated yatl algebra lore algebra lore system stanford complete dbms designed specifically semi structured data 
main focus lore query processor cost query optimization specially efficient evaluation expressions 
query transformed logical query logical operators select project discover name considered algebra operators 
logical query plan give rise physical query plan approach select physical plan 
logical query plan possible physical query plans query shown project glue chain exists select age vindex age age logical physical query plan name dbgroup discover member 
lore query plans query simple path expression query represented discover node indicates fashion information discovered database 
simple path expressions grouped single path expression discover nodes connected chain nodes 
responsibility chain operator path expression represented left right subplans 
places independent components meet called rotation points creation physical query plans order independent components rotated vastly different physical query plans 
rotation point represented glue node 
project nodes plan responsible gathering satisfying evaluations returning appropriate objects user 
physical operators vindex op value accepts label operator op value places atomic objects satisfy op value condition incoming edge labeled operator places objects parents edge labeled operator allows evaluation passed parent node object bound seen 
nested loop join operator denotes dependent join left subplan passes bound variables right subplan 
see main physical operators index operators represent specific types indexes maintained lore system 
main drawback algebra logical operators developed keeping mind physical index operators specific lore system 
algebra algebra inspired sql oql nested relational algebra 
authors implemented type checker interpreter algebra ocaml functional programming language 
storage structures discussed 
algebra operations iteration operation 
iteration operation expression iterates elements document path expression 
selection operation expression clause operation nested expressions 
operator expressions project operation built expressions children function match expression 
example expression dbgroup member equivalent expression children dbgroup match case member type element 
algebra query expressed follows dbgroup member age data optimization rules specified algebra simplify queries eliminating unnecessary expressions reordering distributing computations 
analysis cross comparison xml algebras operators operate model similar xml query data model shown seen previous section algebras quite different 
ibm niagara algebras proposed stand xml query algebras lore yatl algebras developed lore database system yat integration system respectively 
algebra operators proposed lore generate query plans efficiently executed physical index operators lore database system 
similarly yatl developed xml integration system optimization strategies focused efficiently querying distributed data 
ibm algebra system specific lore suffers drawbacks complex query structures large number variable bindings lack optimization rules 
niagara algebra proposed algebra proposed selected algebra proposed standard operators similar ibm algebra operators similar object algebra operators 
niagara developed overcome drawbacks ibm algebra 
authors proposed technique operating sets annotated bags reduces complexity query 
query rewrite rules optimization discussed 
algebra selected proposed standard xml algebra 
chose propose algebra standard fact remains algebras expressions resemble high level query language 
fact july revision original algebra document syntactical changes document titled proposed semantics xml query language xquery 
experimentation chosen algebra xml algebras proposed discussed implementation issues detail decided build experimental prototype xml database system process queries written algebraic form 
interested implementation issues generation optimization evaluation query plans 
implementing database system involves storage indexing transaction support focus 
indexing storage query evaluation techniques prototype system described 
choose lore yatl algebras existing systems 
niagara algebra proposed started 
left ibm algebras opted implement chosen algebra proposed standard xml queries 
experimental prototype architecture architecture prototype xml database system shown simple main memory database system initial stages development support transactions concurrency control security recovery 
client passes user queries algebraic form database system 
parser parses query produce syntax tree 
syntax passed query plan generator modifies syntax form query evaluation tree 
query evaluation tree input query evaluator interacts storage manager evaluates query 
client query generator parser storage manager evaluator physical storage architecture query processing algebra syntax modifications syntax algebra implemented 
algebra specific syntax define data schema algebra documents 
consider xml document data definition statements document shown dbgroup dbgroup member member member ssn integer name integer office office office office building string room integer core syntax algebra data population statements document shown dbgroup dbgroup member ssn name smith office building member ssn name clark office building name name variable var constant const binary operator unary operator expression exp const atomic constant name element name variable name attribute exp exp sequence exp intersection empty sequence exp conditional var exp local binding exp function application exp binary operator exp unary operator var exp exp iteration exp sort exp bracket sum min max query item query query exp query expression path navigation operator part core algebra syntax 
wanted find members query syntax query member rewritten core algebra syntax query nodes match member expression nodes exp built function algebra returns children input node 
algebra similar built functions defined data model known data model constructor accessor functions 
implemented nodes function match case expression 
believe rewrite original query simpler form shown query member expression core algebra syntax allow element name case member specified function name 
information lose book indicates book element 
attribute book ssn type specified 
avoid information prefix name underscore attribute name 
query find ssn members query member ssn equivalent expression member ssn parsing javacc parser generator order generate parser algebra input grammar specification 
shown partially motivated earlier active alternative parser generator written works recursive grammars cup algebra document grammar production rules specified generating parser complicated 
problem encountered javacc recursive grammars 
algebra recursive 
grammar left recursive nonterminal ax string algebra grammar production rules exp exp exp recursive 
standard approach eliminating left recursion introduce nonterminal production repeatedly 
syntax tree generation step generating query generate syntax tree query algebra expression 
tool comes javacc constructs syntax expression successfully parsed 
default structure tree production rule generates tree children trees generated rules called right hand side 
tree nodes classes name rule left hand side 
shows syntax query section nodes name left hand production rule generated node 
tree transformation optimization evaluation just looking syntax tree clear production rule generated node 
especially true production rules term exp left hand side 
step generating query evaluation annotate tree nodes syntax tree meaningful 
annotating tree nodes syntax shown 
alternative syntax tree generator query member ssn exp syntax query query member ssn annotated syntax tree query 
slight modifications syntax trees order reorder remove nodes generated nonterminals added grammar remove recursion 
instance shows part syntax tree node added remove recursion expressions form exp exp exp tree removing node 
syntax tree node 

syntax node removed observing syntax trees generated noticed leaf nodes data nodes words nodes specified operated data flow bottom decided annotated syntax tree slight modifications suffice query tree 
modification syntax shown removed node annotated variable associated path variable 
defined evaluate function type internal node 
query evaluated recursively calling evaluate function node starting root node 
details strategy various evaluate functions described detail 
observations findings query generated evaluate functions various types nodes defined evaluating kind tree simple involved evaluate function root node 
felt advantages query member ssn 
query tree query algebra 
disadvantages 
disadvantages recursive evaluation technique query plan difficult optimize 
little room reorder operators joins algebra nested loops efficient query evaluation 
creative storage indexing techniques needed order efficiently execute queries algebra 
mentioned authors specified rewrite rules algebra optimize user expressions rewriting queries eliminate unnecessary expressions system accepts queries algebraic form translate xml query language algebra 
feel algebra difficult translate queries written xml query language algebra particular query language xquery syntactically similar algebra 
gave overview development query algebras codd relational algebra algebras extended relational object oriented semi structured xml data models 
showed algebras operators codd original relational algebra operators common set algebra operators appeared extended relational models case object oriented xml models 
object oriented algebras called higher order operators operators take operators parameters 
higher order operators emphasized view algebra functional language 
focus xml algebras discussed detail compared various xml algebras proposed 
discussed stand xml algebras ibm niagara lore algebra developed lore database management system yatl algebra developed yat xml integration system 
reviewed xml algebras point view choosing express user queries main memory xml database system developing 
decided implement algebra chosen proposed standard xml algebras 
changes algebra order simplify query rewrites 
algebra considered functional language recursive nature algebra expressions generate query recursively evaluated 
order generate query plan study algebra semantics rewrite expressions simplicity 
modify grammar non left recursive build parser syntax generator 
findings show major disadvantages query plan algebra generated difficult optimize 
order efficiently execute query plan need address storage indexing issues 
focus details issues 
reasons optimize query plan may strategy recursive evaluation 
possible direction different evaluation strategy allow reorder operators efficiency 
direction develop physical operators take advantage physical storage structures generate mapping query plan physical plan 
abiteboul bidoit normal form relations algebra allowing data restructuring journal computer system sciences 
abiteboul beeri power languages manipulation complex objects technical report inria may 
beech malhotra formal data model algebra xml communication september 
buneman frankel functional query language proc 
acm conf 
management data 
malhotra miller progress standards xml databases proceedings th annual acm southeast conference 
codd relational model data large shared data banks comm 
acm june 
christophides cluet simeon wrapping query languages efficient xml integration acm sigmod conference management data 
dadam dbms prototype support extended relations integrated view flat tables hierarchies proc 
acm sigmod conference management data washington dc 
deshpande van gucht implementation nested relational database proceedings th international conference large data bases april pp 

simeon wadler semi monad semi structured data international conference database theory london january 
fischer thomas operators non normal form relations proceedings ieee computer software application conference 
paths xml data algebraic framework xml query evaluation technical report university wisconsin madison 
gyssens van gucht powerset algebra result adding programming constructs nested relational algebra proc 
acm sigmod pp 
mchugh widom query optimization xml proceedings international conference large databases vldb edinburgh scotland august 
peyton implementation functional programming languages 
prentice hall 
kuper logical data model new approach database logic thesis stanford university 
leung aqua data model algebra technical report 
cs brown university march 
malhotra miller xml database engines submitted knowledge information systems july 
microsystems javacc java parser generator version www com products java doc html john miller walter potter kochut active object oriented database system application simulation support journal object oriented programming special issue databases vol 

july august 
osborn identity equality query optimization dittrich ed advances object oriented database systems lecture notes computer science springer verlag 
potter kochut miller evolution knowledge data model delcambre eds advances databases artificial intelligence vol 
pp 

roth korth silberschatz extended algebra calculus nf relational databases acm tods december 
tari qal query algebra complex objects data knowledge eng 
journal 
scholl theoretical foundations algebraic optimization utilizing unnormalized relations ausiello atzeni eds icdt volume lecture notes computer science springerverlag 
shaw zdonik query algebra object oriented databases proceedings international conference engineering los angeles california february 
vance object oriented query algebra technical report cs oregon graduate institute january algebras object oriented query languages phd thesis university madison 
world wide web consortium xml query algebra working draft december 
www org tr wd query algebra world wide web consortium xml query data model working draft may 
www org tr query datamodel world wide web consortium xquery formal semantics working draft june 
www org tr wd query semantics sheth qt xml query xml documents databases masters thesis university georgia july 
hudson cup parser generator java version www cs princeton edu appel modem java cup license 
java tree builder version www cs edu index html 
consideration normal form necessarily normalized relations third international conf 
large databases tokyo 
codd relational completeness data base languages data base systems courant computer symposia series prenticehall 
appendix non invertible unnesting important property nest unnest operators extended relational algebras unnest inverse nest case nest unnest equality holds certain functional dependency holds relation non scalar fields functionally dependent scalar fields 
known partitioned normal form pnf 
relation dependency dept projects holds 
case relation 
nf algebras impose pnf restriction 
aim algebra keying operator introduced eliminate problem non invertible unnesting 
operator appends key column relation unnested ensures nesting unnest result original nf relation 
shown algebras impose pnf restriction reality powerful relational algebra 
intuitively pnf longer needs explicitly describe order get handle denoted scalar value scalar value key particular level nested relation resides 
