real time systems kluwer academic publishers manufactured netherlands 
feedback control real time scheduling framework modeling algorithms lu cs virginia edu john stankovic stankovic cs virginia edu sang son son cs virginia edu department computer science university virginia charlottesville va usa gang tao gt ee virginia edu department electrical computer engineering university virginia charlottesville va usa 
presents feedback control real time scheduling fcs framework adaptive real time systems advantage fcs framework feedback control theory ad hoc solutions scienti underpinning apply control theory methodology systematically design fcs algorithms satisfy transient steady state performance speci cations real time systems particular establish dynamic models real time systems develop performance analyses fcs algorithms major challenges key steps design control theory adaptive real time systems fcs architecture allows plug ins different real time scheduling policies qos optimization algorithms framework identify different categories real time applications different fcs algorithms applied performance evaluation results demonstrate analytically tuned fcs algorithms provide robust transient steady state performance guarantees periodic aperiodic tasks task execution times vary initial estimate 
keywords real time scheduling feedback control quality service modeling unpredictable environment 
motivation real time scheduling algorithms fall categories static dynamic scheduling 
static scheduling scheduling algorithm complete knowledge task set constraints deadlines computation times precedence constraints release times rate monotonic rm algorithm extensions klein liu layland static scheduling algorithms represent major paradigm real time scheduling dynamic scheduling scheduling algorithm complete knowledge task set timing constraints example new task activations known algorithm scheduling current task set may arrive unknown time dynamic scheduling divided categories scheduling algorithms resource suf cient environments resource cient environments resource supported part nsf ccr ccr eia darpa extension previous papers published proceedings ieee real time systems symposium lu 
lu suf cient environments systems system resources suf cient priori guarantee tasks arrive dynamically time tasks schedulable certain conditions earliest deadline rst edf liu layland stankovic optimal dynamic scheduling algorithm resource suf cient environments edf second major paradigm real time scheduling real time system designers try design system suf cient resources cost unpredictable environments impossible guarantee system resources suf cient case edf performance degrades rapidly overload situations spring scheduling algorithm zhao dynamically guarantee incoming tasks line admission control planning applicable resource cient environments algorithms stankovic developed operate way admission control algorithms represent third major paradigm real time scheduling despite signi cant body results paradigms real time scheduling real world problems easily supported algorithms edf rm spring scheduling algorithm support sophisticated task set characteristics open loop scheduling algorithms open loop refers fact schedules created adjusted continuous feedback open loop scheduling algorithms perform predictable environments workloads accurately modeled traditional process control systems perform poorly unpredictable environments systems workloads accurately modeled example systems open loop schedulers spring scheduling algorithm usually designed worst case workload parameters 
accurate system workload models available approach result highly underutilized system extremely pessimistic estimation workload 
years new category soft real time applications executing open unpredictable environments rapidly growing stankovic 
examples include open systems internet online trading business servers data driven systems smart spaces agile manufacturing defense applications example business server resource requirements arrival rate service requests known priori performance guarantees required applications failure meet performance guarantees may result loss customers nancial damage liability violations mission failures applications system design open loop scheduling result extremely expensive underutilized system 
cost effective approach achieve performance guarantees unpredictable environments adaptive scheduling algorithms developed early research real time scheduling concerned guaranteeing complete avoidance undesirable effects overload deadline misses adaptive real time systems designed handle effects dynamically remain open research questions adaptive real time scheduling particular system designer specify performance requirement adaptive real time system 
designer systematically design scheduling algorithm satisfy system performance speci cations 
design methodology automatic adaptive systems developed feedback control theory franklin 
feedback control theory feedback control real time scheduling applied mechanical electrical systems trying apply feedback control theory computer systems domain modeling implementation adaptive real time systems face signi cant research challenges challenges answered 
works applied control theory computing systems example papers abdelzaher eker exible scheduling techniques improve digital control system performance techniques tailored speci characteristics digital control systems general adaptive real time computing systems li nahrstedt utilized control theory develop feedback control loop guarantee desired network packet rate distributed visual tracking system apply control theory analyze congestion control algorithm ip routers approach applied provide qos guarantees web servers abdelzaher lu mail servers parekh :10.1.1.17.2469
works control theory analysis computing systems directly address timing constraints key requirement real time systems 
transient state performance adaptive real time systems received special attention years example brandt evaluated dynamic qos manager measuring transient performance applications response qos adaptations rosu proposed set performance metrics capture transient responsiveness adaptations impact applications proposed metrics similar settling time steady state error metrics control theory 
authors best knowledge uni ed framework exists date designing adaptive real time computing system performance speci cations desired dynamic response feedback control real time scheduling fcs analytical framework maps qos control adaptive real time systems feedback control theory control theoretical framework includes elements scheduling architecture maps feedback control structure adaptive resource scheduling real time systems set performance speci cations metrics characterize transient steady state performance adaptive real time systems control theory design methodology resource scheduling algorithms satisfy system performance speci cations 
contrast ad hoc approaches rely laborious design tuning testing iterations fcs enables system designers systematically design adaptive real time systems established analytical methods achieve desired performance guarantees unpredictable environments 
feedback control real time scheduling architecture described section 
performance speci cations metrics adaptive real time systems lu section control theory design methodology section analytical model generic cpu bound real time systems established section 
model design analysis set fcs algorithms section performance evaluation results scheduling algorithms section conclude section 
feedback control real time scheduling architecture feedback control real time scheduling fcs architecture composed feedback control loop composed monitor controller qos actuator basic scheduler describe components fcs architecture de ne task model set control related variables 

task model task qos levels task model task qos levels qos level characterized attributes relative deadline 
ee estimated execution time 
ae actual execution time vary considerably instance instance unknown scheduler 
value task contributes completed qos level deadline lowest qos level represents rejection task 
feedback control real time scheduling architecture 
feedback control real time scheduling called rejection penalty abdelzaher shin qos level contributes value misses deadline 
periodic tasks invocation period 
estimated cpu utilization ee 
actual cpu utilization ae 
aperiodic tasks ei estimated inter arrival time subsequent invocations 
ai average inter arrival time unknown scheduler 
estimated cpu utilization ee ei 
actual cpu utilization ae ai 
model higher qos level task higher estimated actual cpu utilization contributes higher value meets deadline simplest form task qos levels corresponding admission rejection task respectively applications including web services abdelzaher bhatti multimedia brandt nutt embedded digital control eker systems support imprecise computation liu exible security son task qos levels scheduler trade cpu utilization task value contributes system ner granularity qos levels differ term execution time period inter arrival time example web server dynamically change execution time session changing complexity requested web page abdelzaher bhatti example papers shown deadlines periods tasks embedded digital control systems multimedia players adjusted line brandt nutt 
key feature task model characterizes systems unpredictable environments task actual cpu utilization time varying unknown scheduler systems amenable feedback control loops dynamically correct scheduling errors adapt load variations run time 

control related variables important step designing fcs architecture decide variables real time system terms control theory 
lu controlled variables performance metrics controlled scheduler 
controlled variables real time system may include deadline ratio cpu utilization called ratio utilization respectively de ned time window kw sampling period called sampling instant 
ratio th sampling instant de ned number deadline misses divided total number completed aborted tasks sampling window kw ratio usually important performance metric real time system 
utilization th sampling instant percentage cpu busy time sampling window kw cpu utilization regarded controlled variable real time systems due cost throughput considerations cpu utilization important direct linkage deadline ratio see section 
controlled variable total value delivered system th sampling period remainder directly total value controlled variable address value imparted tasks qos actuator see section performance represent desired system performance terms controlled variables desired ratio desired cpu utilization example particular system may require deadline ratio cpu utilization difference performance current value corresponding controlled variable called error ratio error utilization error manipulated variables system attributes dynamically changed scheduler affect values controlled variables architecture manipulated variable total estimated utilization iu tasks system task qos level th sampling window 
rationale choosing total estimated utilization manipulated variable real time scheduling policies edf rate deadline monotonic guarantee deadline misses cpu overloaded normal situations ratio increases system load increases controlled variable utilization usually increases total estimated utilization increases utilization different total estimated utilization due estimation error execution times workload unpredictable time varying difference exceed limit 
feedback control real time scheduling 
feedback control loop fcs architecture features feedback control loop invoked sampling instant composed monitor controller qos actuator 
monitor measures controlled variables feeds samples back controller 
controller compares performance corresponding controlled variables get current errors computes change called control input total estimated requested utilization errors controller uses control function compute correct manipulated variable value compensate load variations keep controlled variables close detailed design controller section 
qos actuator dynamically changes total estimated requested utilization sampling instant control input adjusting qos levels tasks goal qos actuator enforce new total estimated requested utilization utilization constraint qos actuator calls qos optimization algorithm see section maximize system value simplest form task qos levels qos actuator essentially admission controller assume system arriving time qos control qos actuator invoked arrival task arriving time admission control isolates disturbances caused variations task arrival rates see section feedback control scheduling systems arriving time qos control previously studied lu 


basic scheduler fcs architecture basic scheduler schedules admitted tasks scheduling policy edf rate deadline monotonic 
properties scheduling policy signi cant impact design feedback control loop fcs architecture permits plugging different policies basic scheduler designing entire feedback control scheduling system choice 
key difference previous previous assumes cpu utilization task known priori focus systems unpredictable environments tasks actual cpu utilizations unknown time varying challenging problem necessitates feedback control loop dynamically correct scheduling errors run time 
lu 
performance speci cations metrics describe second element fcs framework performance speci cations metrics adaptive real time systems traditional metrics average ratio capture transient behavior system response load variations 
set metrics lu rosu proposed characterize transient steady state behavior adaptive system :10.1.1.45.5226
section extend map metrics dynamic responses control systems 
performance speci cations consist set performance pro les terms controlled variables utilization ratio set representative load pro les adapted control theory franklin 

performance pro le performance pro le characterizes important transient steady state performance real time system 
characterize system performance sampling window kw contrast traditional metrics real time systems average ratio average utilization de ned larger time window sampling period average metrics inadequate metric characterizing dynamics system performance response overload conditions lu 
performance pro le real time system includes stability real time system stable ratio utilization bounded bounded ratio utilization naturally bounded range stability necessary condition prevent ratio utilization staying undesirable limit 
transient state response represents real time system responsiveness ef ciency qos adaptation reacting changes run time conditions 
overshoot real time system de ne overshoot maximum amount system overshoots ratio utilization divided ratio utilization max max respectively maximum ratio utilization transient state called absolute overshoot overshoot important real time system high transient ratio utilization cause system failure systems robots media streaming brandt nutt 
settling time time takes system enter steady state response load pro le settling time represents fast system settle steady state desired ratio utilization 
feedback control real time scheduling steady state error sm su difference average values ratio utilization steady state corresponding steady state error characterizes precisely system enforce desired ratio utilization steady state 
sensitivity relative change controlled variable steady state respect relative change system parameter example sensitivity ratio respect task execution time ae represents signi cantly change task execution time affects system ratio sensitivity describes robustness system regard workload system variations 

load pro le control theory performance pro le adaptive system may speci ed assuming representative load pro les including step load ramp load step load represents worst case load variation overloads system instantaneously ramp load represents nominal form load variation load pro les de ned follows 
step load sl load pro le instantaneously jumps nominal load higher load stays constant jump instantaneous load change step load dif cult handle gradual load change 
ramp load rl load pro le increases linearly nominal load higher load time interval seconds compared step load ramp signal represents severe load variation scenario 
key advantage load pro les performance speci cation amenable established design analysis methods control theory ts control theoretical framework means system designer control theory methods analytically design system satisfy performance pro le response load pro le de ned speci cally load pro le modeled disturbance signals form step ramp signal control theory linear system dynamic properties determined dynamic response step signal ramp load regardless parameters including magnitude load variation ramp duration real time system approximated linear model performance pro le determined stressing system step load system achieve satisfactory performance combinations step ramp load performance pro le response step load ramp load satis es speci cations 
real time system non linear dynamic response system response load variations determined response single step load single ramp load system performance depends speci parameters load pro les case performance pro les response speci load pro les lu indications system performance general case load pro les application speci set expected load characteristics system requirements 
load pro les abstractions workload possible instantiations load pro le instantiation load pro le incorporate knowledge workload load pro le viewed enhancement existing benchmarks example system load interpreted total requested cpu utilization system cpu bottleneck resource example load internet server may interpreted number concurrent users 

control design methodology third element fcs framework control theory design methodology 
scheduling architecture performance speci cations system designer systematically design adaptive resource scheduler satisfy system performance speci cations established analytical methods control theory methodology contrast existing ad hoc approaches depend laborious design tuning testing iterations control design methodology follows 
system designer speci es desired dynamic behavior transient steady state performance metrics step maps performance requirements adaptive real time system dynamic response speci cation control system 
system designer establishes dynamic model real time system purposes performance control dynamic model describes mathematical relationship control input controlled variables system differential difference equations state matrices modeling important provides basis analytical design controller modeling major challenge applying control theory real time systems due lack established differential difference equations describe real time systems 
performance specs system model step system designer applies established mathematical techniques root locus method frequency design state design feedback control theory franklin design fcs algorithms analytically guarantee speci ed transient steady state behavior run time 
compared existing ad hoc approaches analytical design approach signi cantly reduces design time adaptive systems resultant system parameters easily tuned existing control theory methods resultant system proved satisfy performance speci cations contrast tuning adaptive systems designed ad hoc methods depends repeated testing guessing rule thumb performance guarantees run time 
feedback control real time scheduling 
modeling controlled real time system key step control theory methodology establish analytical model approximate controlled system fcs architecture 
controlled system includes qos actuator scheduled tasks cpu basic scheduler monitor control input controlled system change total estimated utilization output controlled system includes controlled variables ratio utilization dif cult precisely model nonlinear time varying system real time system approximate system linear model purpose control design robustness feedback control regard system variations derive model control input output 
starting control input qos actuator changes total estimated utilization sampling period control input sampling instant precise execution time task unknown time varying total actual requested utilization may differ total estimated requested utilization called utilization ratio time variant variable represents extent workload variation terms total requested utilization example means actual total requested utilization twice estimated total utilization time variant maximum possible value called worst case utilization ratio control design guarantee stability cases equation simpli ed formula purpose control design ab relationship total requested utilization controlled variables nonlinear due saturation controlled variables remain constant control input cpu underutilized utilization outside saturation zone equals cpu overloaded saturates exceed 
equations analytical model utilization output follows ad lu derive model ratio output contrast saturates overload conditions saturates cpu underutilized total requested utilization utilization threshold ath real time scheduling theory schedulable utilization bounds derived various real time scheduling policies different workload assumptions liu layland utilization bound ab typically de ned xed lower bound possible workloads certain assumptions de ne utilization threshold ath time varying actual threshold system particular workload th sampling period ab ath 
ath usually increases nonlinearly total requested utilization relationship needs linearized derivative vicinity performance ms ratio factor gm dm da practice ratio factor estimated experimentally plotting ratio curve function total utilization experimental data maximum slope vicinity control design guarantee stability ratio factor linearized formula purpose control design equations analytical model ratio output th mg ad th note different scheduling policies basic scheduler usually lead different utilization threshold th example edf plugged fcs architecture workload composed independent periodic tasks utilization threshold th comparison utilization threshold usually lower rm plugged architecture scheduling policy workload characteristics affect choices controlled variable performance 
convert models domain transfer functions amenable control theory methods transform output variable transform input variable linear system linearized system represented transfer function controlled real time system linearized models equations equivalent transfer functions outside zones respectively 
utilization ratio ag feedback control real time scheduling model ratio utilization extra ratio factor equation simplicity discussion formula represent transfer functions controlled variables called process gain 
utilization output ag ratio output 
saturation renders special challenges controller design output unresponsive control input saturation zones 
utilization threshold lower th scheduling policy liu layland saturation zones mutually exclusive leads important property realtime systems property instant time controlled variables saturate real time system 
design scheduling algorithm fc um solve saturation problem advantage property section 
design feedback control real time scheduling algorithms section apply control theory methods controller key component fcs algorithms rst control algorithm model feedback control loop controlled variable analytical models apply control theory tune controller develop mathematical analyses performance pro les resultant controller fcs algorithms handle different types real time systems 

design ofthe controller sampling instant controller computes control input change total estimated requested utilization ratio error cpu utilization error section focus controller single controlled variable goal controller includes guaranteed stability zero steady state error zero sensitivity workload variations satisfactory settling time overshoot control function controlled variables symbol denote ratio error utilization error similarly denote ratio utilization symbol denote ratio utilization 
lu fcs architecture choose simple proportional control function franklin compute control input 
control function equation tunable parameter 
pe rationale controller sophisticated controller pid proportional integral derivative controller controlled system includes integrator qos actuator equation zero steady state error achieved integral term controller see detailed analysis section 
derivative term case derivative control may amplify noise ratio utilization due frequent workload variations unpredictable environments 
performance real time system depends controller parameter ad hoc approach design controller repeat numerous experiments different parameter values apply established control theory methods tune parameters analytically guarantee performance speci cations section rst tune controller controlled variables linear models controlled system equation due saturation properties performance closed loop system may deviate linear case 

closed loop system model system output ratio utilization input signals closed loop system single ratio utilization controller 

input arrival overload rst input performance modeled step signal sz domain note arrival time qos control mechanism fcs architecture particular form load pro les affect system response actual tasks admitted system determined qos actuator system response input corresponds system performance response arrival overload model controlled system equation controller equation establish closed loop transfer function ratio utilization control response input hs hs ga utilization control ratio control 
feedback control real time scheduling 
disturbance input internal overload second input closed loop system internal overload admitted tasks cpu utilizations vary internal overload modeled disturbance adds total requested utilization see particular step load sl ln lm modeled step signal jumps instantaneously lm ln lm ln domain ramp load rl ln lm tr modeled ramp signal linearly increases duration seconds 
note case internal overload input speci load pro le decides input signal direct impact system performance focus analysis step load pro le represents severe load variations ramp load nite duration regarding disturbance input transfer function utilization control system output response internal overload follows 
hd hs hd transfer function applicable ratio control disturbance input gml gml account extra gm term 

control tuning analysis tuning analysis utilization controller ratio controller analytical models described equations 
control theory performance pro le system depends poles 
models feedback control loops 
lu closed loop transfer function equations place closed loop pole pg desired location choosing right value control parameter control theory derive achieve desired performance pro le 
suf cient necessary condition utilization ratio control guarantee stability proof control theory system stable poles fp ng total number poles transfer function unit circle plane franklin jp jj 
equations pole utilization ratio control system response arrival overload internal overload pg utilization control ratio control guarantee stability suf cient necessary condition stability equation 
derive steady state performance utilization ratio control system applying nal value theorem franklin system output equations steady state analysis assumes stability condition equation satis ed 
steadystate error arrival overload stability condition equation response arrival overload ratio utilization control guarantee zero steady state error 
proof output stable system nal value theorem digital control theory states system output converges nal value lim lim 
equation output utilization ratio control response arrival overload sz represents constant performance follows lim lim sz steady state error esc 
feedback control real time scheduling steadystate error internal overload stability condition equation ratio utilization control achieve zero steady state error despite presence internal overload 
proof equation system output utilization ratio control response internal overload sl sz dl utilization control dl ratio control 
applying nal value theorem equation nal value utilization control ratio control lim lim sz follows steady state error sc 
sensitivity stability condition equation steady state performance utilization control ratio control zero sensitivity regard task execution times inter arrival times ratio factor 
proof equation utilization control ratio control variation represents variation task execution times inter arrival times variation represents variation ratio factor 
equations nal output utilization ratio control system response arrival overload internal overload equals performance value satis es stability condition equation related sensitivity zero 
summary steady state analysis proven stability condition equation utilization control ratio control achieve performance steady state response arrival internal overload furthermore shown guarantee robust regard task execution times inter arrival times ratio factor 
control theory system transfer function equation overshoot remains zero response arrival overload closed loop pole equation utilization control ratio control achieves zero overshoot 
lu settling time increases controller parameter increases range 
place pole settling ratio control kp utilization control kp ga values controller parameter properties control analysis 
parameters equations satisfy stability condition equation 
control parameter value equations satisfy zero overshoot condition overshoot response input ratio control max utilization control max controller affect overshoot response disturbance input directly changes output control action take place ratio control mo gm lm ln ms mmax ms gm lm ln utilization control mo lm ln umax lm ln regarding system steady state output nal value pole placement corresponds settling time response input disturbance input 
ratio utilization control seconds settling time applicable ratio control response arrival overload ratio saturates assume arrival overload occurs idle system time ratio control observes results control signal pm typically small control signal small due saturation problem ratio stay cause control signal remain small property cause utilization ratio increase slower case linear model result longer settling time equation solution assign high initial value estimated requested utilization system idle help push system saturation zone faster zero initial 
analysis transient performance closed loop system 
feedback control real time scheduling transient performance response arrival overload equation response arrival overload output settles performance seconds 
furthermore equation ensures ratio control ratio exceeds ratio response arrival overshoot similarly equation ensures utilization control cpu utilization exceeds utilization response arrival overload 
internal overload equation system output recover performance seconds internal equations show system suffers non zero overshoot transient state response internal step overload 
ratio control system ratio overshoot ms gm lm ln utilization control cpu utilization overshoot gm lm ln 

impact system workload variations performance pro les real time system usually time varying system discussed section important issue variations system workload parameters task execution times ratio factor affect analysis xed values parameters speci cally may different worst case utilization ratio worst case ratio factor need analyze changes ratio factor utilization ratio affect performance pro le closed loop system 
stability stability condition equation controller parameter equations derive range system stability guaranteed 
ratio control ag utilization control note usually compute controller parameter worst case estimation closed loop system guarantees stability furthermore actual system parameter exceed design time estimations due estimation error dramatic system change stability guaranteed closed loop system long stay stability range 
steady state performance proven ratio control utilization control achieve performance steady state long systems remains stable ratio control utilization control provide lu 
settling time vs process gain 
robust accurate performance guarantees steady state regardless actual values ratio factor utilization ratio stay stability range equation 
transient performance stability steady state performance closed loop system settling time sensitive variations ratio factor utilization ratio assume estimation compute utilization control parameter experiments section plot theoretical settling time corresponding different process gains shown process gain decreases process gain increases 
result shows controller parameter system reacts faster overload utilization ratio ratio factor larger controller xed parameter guarantee xed settling time range process gain known range settling times guaranteed example know process gain stays range settling time guaranteed range seconds shown 
similarly overshoot sensitive variations process gain closed loop transfer function response arrival overload equation overshoot remains zero closed loop pole system achieve zero overshoot response arrival overload ratio factor ratio control ag utilization control summary system parameters worst case utilization ratio ratio factor directly derive control parameter equations guarantee set performance pro les including stability zero steady state error satisfactory range transient performance note analytical tuning method control parameter signi cantly easier time consuming ad hoc approaches repeated simulation experiments important advantage control theory fcs framework ad hoc solutions 
feedback control real time scheduling 
fcs algorithms section fcs algorithms utilization ratio control achieve satisfactory performance pro les different types real time systems discuss impact basic scheduling policy workloads design fcs algorithms 

fc feedback utilization control fc embodies utilization control loop control utilization utilization control loop periodically samples utilization computes change total estimated utilization calls value optimization algorithm assign qos levels tasks constraint new total estimated utilization pseudo code fc follows 
invoked periodically sampling instant utilization utilization control parameter computed equation fc monitor utilization sampling period kw controller pu actuator decide task qos levels optimize total value constraint total estimated utilization tasks fc guarantees ratio steady state ath ath schedulable utilization threshold system 
utilization saturates fc detect severely system overloaded remains consequence problem severely overloaded conditions fc longer settling time analysis results linear model closer longer settling time utilization control measures error smaller magnitude generates smaller control input ideal case described linear model equation example suppose total requested utilization utilization error measured controller eu error eu lu linear model extreme case cause system stay overload settling time nity error system severely overloaded distance alleviate impact saturation control performance 
fc especially appropriate systems utilization bound priori known pessimistic systems fc guarantee zero ratio steady state th example fc performs system edf scheduling periodic independent task set utilization bound 
fc applicable systems utilization bounds unknown pessimistic 
systems optimistic higher utilization threshold cause high ratio steady state hand pessimistic unnecessarily system 

fc feedback ratio control fc controls ratio indirectly utilization control fc utilizes ratio control loop directly control ratio 
pseudo code fc 
invoked periodically sampling instant ms ratio ratio control parameter computed equation fc monitor ratio sampling period kw controller pm actuator compared fc advantage fc depend knowledge utilization bound process directly controlling ratio ratio control loop changes total requested utilization vicinity unknown utilization threshold th additional advantage fc achieve higher cpu utilization fc utilization threshold higher utilization bound 
similar fc fc restrictions ratio due saturation ratio saturates fc detect severely system underutilized consequently fc longer settling time analysis results linear model equation severely feedback control real time scheduling underutilized conditions settling time increases ratio decreases ratio control measures error smaller magnitude generates smaller control input case linear model example suppose total requested utilization ratio error measured controller error larger linear model negative ratio extreme case cause cpu remain underutilized error system severely underutilized ratio distance saturation boundary alleviate impact saturation control performance 
unfortunately positive ratio means system achieve zero ratio steady state 
summary fc scheduling algorithm small positive ratio achieve low deadline ratio close high cpu utilization system utilization bound unknown time varying fc guarantee zero deadline ratio steady state applicable soft real time systems tolerate sporadic deadline misses steady state 

fc um integrated utilization ratio control fc um integrates ratio control utilization control combine advantages fc fc 
integrated control scheme ratio utilization monitored sampling instant fed back separate controllers ratio controller utilization controller respectively controller computes control signal independently control input utilization control bu compared ratio control input bm smaller min bu bm sent qos actuator 
invoked periodically sampling instant ms ratio utilization ratio control parameter computed equation utilization control parameter computed equation fc um ms monitors ratio sampling period kw utilization sampling period kw controllers em ms dbm em bu pu min bm bu lu actuator note advantage fc achieve excellent performance steady state utilization correct advantage fc achieve low non zero ratio robust face utilization threshold variations integrated control structure achieve advantages controls reasons utilization control change total requested utilization steady state ratio control loop change vicinity utilization threshold ath steady state due min operation control inputs integrated control loop change total requested utilization lower value caused control loops min ath implication feature integrated control loop achieves performance relatively conservative control loop steady state speci cally system scheduled fc um th utilization control dominates steady state guarantees total requested utilization stays close utilization ratio steady state hand th utilization control dominates steady state guarantees total requested utilization stays close utilization threshold th ratio steady state 
system fc um scheduler system administrator simply set utilization value causes deadline misses nominal case system pro ling experiences set ratio application requirement ratio fc um guarantee zero deadline misses nominal case guaranteeing ratio stays close utilization threshold system lower utilization threshold experimental results section demonstrate fc um achieves satisfactory performance 

impact scheduling policies applications fcs algorithm design important factor affects design fcs algorithms priori known non pessimistic utilization bound exists scheduling policy workload system existing real time scheduling theory derived schedulable utilization bound various scheduling policies different workload assumptions example assuming periodic independent task set established schedulable utilization bound edf rm respectively liu layland schedulable utilization bound deadline monotonic scheduling derived general aperiodic periodic tasks ideal case abdelzaher lu papers established schedulable feedback control real time scheduling utilization bounds types workloads klein stankovic fc guarantee ratio steady state utilization ab utilization determined scheduling policy workload system example independent periodic task set scheduled edf suf cient guarantee ratio stays steady state fc achieve zero steady state ratio appropriate fcs algorithm systems known non pessimistic utilization bound fc um achieve zero steady state ratio type system complicated fc 
unfortunately utilization bounds unpredictable real time systems unknown example typical line trading server database transactions web request processing blocked frequently due concurrency control disk tcp congestion control task arrival patterns may vary considerably workload composed periodic price updating tasks unpredictable aperiodic stock trading request processing deciding utilization bound top commercial os dif cult due unpredictable kernel activities interrupt handling issue theoretical utilization bound severely pessimistic speci workload currently system example utilization bound rate monotonic periodic independent tasks uniformly distributed task sets suffer deadline misses cpu utilization reaches 
enforcing utilization utilization bound may cost effective soft realtime systems fc fc um appropriate fc systems known non pessimistic utilization bounds 
note different scheduling policies workloads usually introduce different ratio factors gm gain kp ratio controller inversely proportional ratio factor equation scheduling policy workload directly affect correct parameter settling ratio controller 
example previous experiments showed edf algorithm periodic task set led ratio factor gm extended deadline monotonic dm algorithm mixed periodic aperiodic task set smaller ratio factor gm see section 
result means dm mixed task set kp ratio controller times kp edf aperiodic task set order achieve similar performance 
summary designed fcs algorithms fc fc fc um control theory analytical model real time system control theory analysis proves resultant fcs algorithms achieve performance guarantees stability condition equation guaranteeing stability 
guaranteeing system ratio utilization remain close corresponding performance steady state 
achieving satisfactory settling time zero overshoot condition equation transient state 
lu 
experiments section describe simulation experiments evaluate performance fcs algorithms correctness control design rst describe realtime cpu scheduling simulator experiments describe con gurations experiments workloads set pro ling experiments controlled system sets evaluation experiments fcs algorithms 

simulator fcs architecture implemented generic uniprocessor real time system simulator called components set sources generates periodic aperiodic task executor emulates basic scheduler execution tasks monitor periodically measures controlled variables controller periodically computes control input performance errors qos actuator adjusts qos levels tasks optimize system value estimated utilizations utilization constraints different basic real time scheduling policies plugged executor controller turned emulate closed loop open loop scheduling 

scheduling policy ofthe basic scheduler demonstrate generality fcs architecture robustness fcs algorithms experimental results combinations task sets scheduling policies basic scheduler denote combinations dm pa 
simulator 
feedback control real time scheduling table 
testing con gurations 
con guration basic scheduling policy task set edf edf periodic dm pa extended deadline monotonic periodic aperiodic pa edf see table describe scheduling policies section workloads section 
different scheduling policies extended deadline monotonic dm edf basic scheduler 
dm task assigned xed priority equals relative deadline shorter relative deadline leads higher priority dm proved optimal static scheduling policy term maximizing schedulable utilization bound certain conditions abdelzaher lu edf task dynamically assigned priority equals absolute deadline 
earlier absolute deadline leads higher priority edf dynamic real time scheduling policy liu layland 

workload different task sets evaluation experiments 
periodic aperiodic pa workload composed aperiodic tasks periodic tasks type task set typical line trading server workload composed periodic stock updating tasks aperiodic user requests trading information queries 
periodic tasks periodic tasks type task set emulates real time applications multimedia streaming process control system operations periodic 
task follows task model described section 
task assumed qos levels including lowest level represents service rejection rejection level task execution time value set distributions task parameters follows purpose presentation assume time unit ms ee estimated execution time task qos level follows uniform distribution range ms 
lu aei actual execution time aei task ti qos level follows normal distribution aae average execution time called execution time factor tunable workload parameter approximates utilization ratio ga larger pessimistic estimation execution time 
maximum value experiments means estimated execution time twice average execution time worst case utilization ratio ga 
value compute controller parameters equations 
qos levels task xed relative deadline follows uniform distribution range task instance immediately aborted misses deadline 
value task qos level computed weight times estimated execution time iet weight follows uniform distribution range 
periodic tasks qos levels task period equals deadline average utilization periodic task qos level aa aae aperiodic tasks ai inter arrival time aperiodic task follows exponential distribution average inter arrival time ai average utilization periodic task qos level aa aae ai ei estimated inter arrival time aperiodic task equals average interarrival time ei ai 
qos actuator highest value density rst qos assignment algorithm skiena skiena qos actuator value density qos level task de ned vd algorithm assigns qos levels current tasks order decreasing value density total estimated requested utilization reaches utilization constraint xed threshold open loop scheduling algorithms comparison fcs algorithms dynamically change threshold sampling instant 
task utilization small deadline misses approximates optimal value utilization constraint task execution times task inter arrival rates unknown open loop qos optimization algorithm may achieve maximize values due deadline misses 
note fcs architecture incorporate different real time scheduling policies qos optimization algorithms focuses steady transient state feedback control real time scheduling performance feedback control loop evaluating basic scheduling policies qos optimization algorithms 

pro ling controlled real time systems rst set experiments pro le controlled system verify saturation properties controlled variables ratio cpu utilization measure ratio factor key system parameter computing controller parameter ratio control equation 
interested properties controlled system turn controller qos actuator pro ling experiments set step loads sl different overload level stress seconds step load composed set tasks average total requested utilization experiments repeated edf dm pa con gurations plot measured average cpu utilization average ratio corresponding step load level dm pa edf point gures represents average value runs con dence intervals average ratio shown con dence intervals average utilization skipped corresponding average values 

pro ling results dm pa study pro ling results dm pa cpu utilization saturates step load level exceeds ratio saturates 
controlled variables vs total requested utilization 
lu average total requested utilization deadline misses start occur reaches 
system average ratio increases total requested utilization increases measure maximum slope ratio curve near boundary saturation zone approximate ratio factor maximum slope average total requested utilization increases worst case ratio factor dm pa 
pro ling results edf second study pro ling results edf cpu utilization saturates step load level exceeds ratio saturates average total utilization deadline misses start occur reaches deadline misses due random execution times workload 
system average ratio increases total requested utilization increases maximum slope average total requested utilization increases worst case ratio factor edf 
controller parameters worst case utilization ratio worst case ratio factor compute controller parameter equations resultant controller parameter fcs algorithm listed table 

performance ratio depends application requirement tolerance deadline misses steady state example amazon com may accept higher ratio trade com usually purchase strict timing constraints trading transactions assume ratio fc fc um appropriate simulated table 
controller parameters fcs algorithms 
fc um fc fc dm pa edf sampling window sec feedback control real time scheduling applications utilization lower nominal utilization threshold basic scheduling policy task set 
lower saturation boundary utilization control theoretical utilization bound edf periodic task set ideal case liu layland set fc fc um edf case shown dm general aperiodic periodic task sets theoretical utilization bound bound pessimistic mixed aperiodic periodic task set example pro ling experiments utilization threshold th appears range choose fc fc um fc um optimistic utilization fc ratio control fc um provides worst case bound closed loop performance utilization higher actual utilization threshold chosen performance summarized table 

evaluation experiment arrival overload section performance evaluation results fcs algorithms fc fc fc um response arrival overload sl execution time factor average execution time task twice estimation open loop scheduling algorithm xed utilization constraint qos optimization evaluated baseline scheduling policies dm edf qos optimization algorithm algorithm fcs algorithms baseline zero initial value total estimated utilization section larger initial value experiment section reduce settling time fc fc um 
describe results scheduling algorithms 

fc look fc dm pa response arrival overload fc increases cpu utilization increasing total estimated utilization tasks system increasing enforced qos actuator increases task qos levels qos optimization algorithm settling time predicted control analysis reaches table 
performance fcs algorithms 
fc fc fc um dm pa edf lu 
fc response arrival overload 
result close prediction reach seconds 
small difference experimental results theoretical prediction due randomness workload 
reaches transient state seconds 
result consistent theoretical prediction zero overshoot 
cpu utilization remains stable run seconds utilization stays close system error stays close zero stays utilization threshold ratio run 
performance fc edf see similar fc dm pa seconds fc increases cpu utilization 
reaches transient state seconds 
cpu utilization remains stable run close seconds 
stays utilization threshold ratio run 

fc performance evaluations fc dm pa edf illustrated 
rst study fc dm pa response arrival overload fc increases feedback control real time scheduling 
fc response arrival overload 
total estimated utilization increasing qos levels arriving admitted tasks 
due saturation ratio control settling time fc response arrival overload longer prediction linear model equation 
stays rst seconds arrival overload 
system settles approximately seconds reaches reaches 
shorten settling time fc response arrival overload assigning larger initial value total estimated utilization shown section 
reaches achieves zero ratio overshoot transient state 
remains stable run steady state seconds stays close run seconds 
result shows steady state error close predicted analysis 
observe fc cpu utilization steady state clearly higher cpu utilization close run fc directly controlling ratio fc change cpu utilization vicinity priori unknown utilization threshold higher utilization fc set priori 
performance fc edf similar case dm pa settling time approximately seconds ratio reaches 
fc edf achieves zero overshoot transient state ratio stays close steady state remains stable run similar case dm pa fc lu edf higher cpu utilization close fc edf close steady state 
summary compared fc fc achieves higher cpu utilization robustness regard utilization threshold variations cost low non zero ratio steady state 

fc um performance evaluations fc um dm pa edf illustrated study performance fc um dm pa overload arrives fc um increases utilization similar fc ratio stays cpu utilization increases slower fc run saturated ratio control computes smaller control signal bm utilization control signal bm due min operation control inputs controllers ratio control dominates control loop starting phase control signal remains stays smaller utilization control signal decreases utilization increases time seconds utilization reaches ratio utilization control signal bu smaller ratio control signal bm takes control loop utilization threshold higher utilization utilization control 
fc um response arrival overload 
feedback control real time scheduling dominates control loop stays close ratio stays seconds settling time approximately seconds surpasses corresponding transient state seconds fc um achieves overshoot 
steady state utilization stays close fc um achieves zero steady state error term utilization ratio remains close lower ratio steady state utilization lower utilization threshold dominates control loop steady state note utilization higher utilization threshold ratio control dominate control loop fc um achieve zero steady error term ratio steady state utilization close utilization threshold system remains stable run 
performance fc um edf similar case fc um dm pa ratio control dominates control loop experiment seconds settling time utilization control starts take control loop fc um edf achieves zero overshoot utilization utilization lower utilization threshold fc um edf achieves zero steady state error term utilization ratio stays steady state 
summary fc um combines advantages fc fc achieves zero steady state ratio nominal case utilization lower utilization threshold furthermore fc um achieve low steady state ratio system utilization threshold changes lower utilization 

open loop qos optimization comparison fcs algorithms system scheduled open loop qos optimization algorithm suffers high ratios dm pa edf see task execution time average twice estimation qos optimization algorithm overloaded cpu due incorrect estimations task execution time hand system suffer low cpu utilization task execution time lower estimation see section 
result demonstrates open loop qos optimization algorithm incapable maintaining satisfactory performance face unpredictable workload 
summary demonstrated fcs algorithms fc fc fc um provide desired performance guarantees terms ratio cpu utilization steady state achieve satisfactory performance pro les response arrival overload sl average task execution times different estimation contrast open loop qos optimization fails provide performance guarantees face overload 
lu 
open loop qos optimization response arrival overload 

evaluation experiment arrival internal overload second set evaluation experiments stress fcs algorithms baseline unpredictable load pro le experiment new load pro le causes arrival overload sl run 
furthermore average task execution times tasks vary seconds create internal overload system execution time factor run shown table execution time factor instantaneously jumps time seconds change causes increase average execution time task suppose total requested utilization system jump execution time change corresponds internal overload sl similar step load sl occurs time seconds jumps 
jump time seconds hand creates internal sl modeled negative step signal instantaneously decreases 
table 
execution time factor experiment interval feedback control real time scheduling set experiments larger initial value assigned estimated requested utilization shorten settling time fc fc um response arrival overloads open loop baseline uses xed qos optimization dm pa edf respectively due space limitations results fc um open loop baseline detail 
detailed results fc fc available lu 

fc um runs fc um dm pa edf illustrated rst study run fc um dm pa response arrival overload time ratio control dominates control loop transient state utilization approaches utilization utilization takes control loop utilization lower utilization threshold utilization control dominates control loop system settles steady state seconds 
ratio stays time steady state utilization stays close 
system stays steady state seconds average execution time task increases 
utilization overshoots ratio overshoots 
ratio control utilization control compute negative control signals response internal overload 
fc um response arrival internal overload 
lu ratio takes control loop utilization saturates resulting control signal smaller magnitude ratio control dominates control loop utilization approaches ratio zero fc um takes system settles new steady state seconds average ratio average utilization steady state error su 
fc um responds similarly internal overload seconds execution factor increases 
system settles satisfactory steady state seconds 
steady state seconds average ratio average utilization steady state error su 
time seconds execution time factor decreases utilization drops 
similar run fc um increases total estimated utilization improving task qos levels time seconds increases system steady state average ratio average utilization close steady state error su 
performance fc um edf similar case dm pa fc um edf successfully reacts arrival overload internal overload re settles satisfactory steady states ratio stays close utilization stays close despite difference execution times observation veri es fc um zero sensitivity regard execution time variations provides robust performance guarantees face unpredictable workloads 

open loop qos optimization performance open loop baseline dm pa edf illustrated contrast fcs algorithms open loop baseline fails provide performance guarantees ratio utilization edf dm pa tests 
task execution times lower estimations seconds baseline algorithm cpu utilization close hand execution exceeds estimations seconds system suffers persistent deadline misses example baseline dm pa average ratio seconds ratio reaches 
baseline edf average ratio period 
summary evaluation results verify fcs algorithms provide performance guarantees stability condition equation stability face arrival overload internal overload 
system ratio utilization stay close corresponding performance steady state regardless variations task execution times 
satisfactory settling time low overshoot transient state 
feedback control real time scheduling 
open loop qos optimization response arrival internal overload 

average performance fcs algorithms open loop baseline ma average ratio ua average utilization va average value completion ratio 
lu addition performance pro les average performance fcs algorithms baseline shown dm pa edf considered performance metrics include average ratio average cpu utilization average value completion ratio de ned total completed value divided total values arriving tasks highest qos level 
characterizes utility throughput system run metrics computed performance run data point mean repeated runs con dence interval respectively mean 
see fcs algorithms consistently outperform open loop baseline terms average ratio value completion ratio 
summary evaluation results demonstrate fcs algorithms provide robust precise performance guarantees term utilization ratio workload signi cantly varies estimation furthermore achieve satisfactory transient state performance pro les response arrival internal overload contrast open loop qos optimization algorithm fails provide guarantees workload deviates priori estimation 

summary presents fcs framework adaptive real time systems advantage fcs framework feedback control theory ad hoc solutions scienti underpinning apply control theory design methodology systematically design fcs algorithms satisfy desired transient steady state performance speci cations real time systems particular establish analytical model analyses fcs algorithms major challenges key steps design adaptive real time systems model identify different types real time applications fcs algorithm applied 
performance evaluation results demonstrate analytically tuned fcs algorithms provide robust steady transient state performance guarantees periodic aperiodic tasks task execution time varied estimation 
notes performance pro le called ratio pro le lu performance pro le generalized metrics response time throughput value cognizant metrics 
fc called fc edf lu working edf basic scheduler 
fc um called fc edf lu working edf basic scheduler 
feedback control real time scheduling acknowledgments want especially abdelzaher inspiring ideas valuable discussions project anonymous reviewers helpful suggestions improving 
abdelzaher lu schedulability analysis utilization bounds highly scalable real time services ieee real time technology applications symposium taipei taiwan 
abdelzaher automated pro ling subsystem qos aware services ieee real time technology applications symposium washington abdelzaher atkins shin 
qos negotiation real time systems application automatic ight control ieee real time technology applications symposium 
abdelzaher bhatti web server qos management adaptive content delivery international workshop quality service 
abdelzaher lu modeling performance control internet servers th ieee conference decision control sydney australia 
abdelzaher shin host architecture qos adaptive communication ieee real time technology applications symposium denver colorado 
abdelzaher shin qos provisioning web multimedia servers ieee real time systems symposium phoenix arizona pp 
brandt nutt 
dynamic quality service middleware agent mediating application resource usage ieee real time systems symposium 

elastic task model adaptive rate control 
ieee real time systems symposium madrid spain pp 
sha 
capacity sharing overrun control 
ieee real time systems symposium orlando fl 
eker flexible embedded control systems design implementation ph thesis lund institute technology 
franklin powell 
digital control dynamic systems rd edn 
addison wesley 
misra towsley gong 
control theoretic analysis red 
ieee infocom anchorage alaska 
klein pollak harbour 
practitioner handbook real time analysis guide rate monotonic analysis real time systems kluwer academic publishers 
lee lehoczky siewiorek rajkumar hansen 
scalable solution qos problem ieee real time systems symposium phoenix az 
lehoczky sha ding 
rate monotonic scheduling algorithm exact characterization average case behavior ieee real time systems symposium 
li nahrstedt 
control middleware framework quality service adaptations 
ieee journal selected areas communications special issue service enabling platforms 
liu layland scheduling algorithms multiprogramming hard real time environment 
journal acm 
liu lin shih yu chung zhao 
algorithms scheduling imprecise computations 
ieee computer 
lu abdelzaher stankovic son 
feedback control approach guaranteeing relative delays web servers ieee real time technology applications symposium taipei taiwan 
lu stankovic abdelzaher tao son 
performance speci cations metrics adaptive real time systems ieee real time systems symposium orlando fl 
lu lu stankovic tao son 
design evaluation feedback control edf scheduling algorithm ieee real time systems symposium phoenix az 
lu feedback control real time scheduling ph dissertation university virginia cs 
mathworks www mathworks com products matlab 
parekh gandhi hellerstein tilbury jayram 
control theory achieve service level objectives performance management ifip ieee international symposium integrated network management 
rajkumar lee lehoczky siewiorek 
practical solutions qos resource allocation problems ieee real time systems symposium 
rosu schwan jha 
adaptive resource allocation complex real time applications ieee real time systems symposium 
ryu hong 
automatic synthesis schedulable real time controllers 
integrated computer aided engineering 
skiena skiena algorithm design manual new york telos springer verlag 
son zimmerman hansson 
adaptable security manager real time transactions 
euromicro conference real time systems stockholm sweden 
stankovic ramamritham 
deadline scheduling real time systems edf related algorithms kluwer academic publishers 
stankovic lu son tao 
case feedback control real time scheduling 
euromicro conference real time systems york uk 
steere feedback driven proportion allocator real rate scheduling symposium operating systems design implementation 
zhao ramamritham stankovic 
preemptive scheduling time resource constraints 
ieee transactions computers 
