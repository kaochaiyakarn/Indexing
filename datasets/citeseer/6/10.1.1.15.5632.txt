distributed deadlock ron obermarck ibm san jose research laboratory detection algorithm propose algorithm detecting deadlocks transactions running concurrently distributed processing network distributed database system 
proposed algorithm distributed deadlock detection algorithm 
proof correctness distributed portion algorithm followed example algorithm operation 
performance characteristics algorithm 
categories subject descriptors computer communication networks distributed systems distributed databases operating systems process management deadlocks operating systems organization design distributed systems general terms algorithms distributed processing systems especially distributed database systems implemented requirement distributed deadlock detection apparent 
majority literature speaks terms waitfor resource graphs transactions 
employs terminology 
words originate author enclosed quotation marks mention appear initial capital letters 
definition transaction consistent defined 
transaction convenient abstraction application processing including underlying system support performed take database consistent state consistent state way transition appears atomic 
failure occurs processing transaction changes behalf transaction undone database returned consistent stage 
order allow concurrent access database ensuring consistent view transaction concurrency control mechanisms locking 
locking concurrency control introduces possibility transaction may suspended requests lock held transaction 
transaction suspended waiting second transaction second transaction waiting directly indirectly transaction result circular wait condition called deadlock 
algorithms implemented centralized database systems deadlock detection 
finding cycles transaction waitfor graph nodes graph represent author address ibm san jose research laboratory road san jose ca 
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
acm acm transactions database systems vol 
june pages 
obermarck transactions directed edges indicating transactions transaction waiting 
cycles detected broken choosing transaction involved cycle causing transaction fail usually allowing transaction restart original input 
operation complex distributed multiple sites distributed database 
distributed database system transaction usually perform actions site originates may perform actions actions may performed behalf original site 
happens agent created remote site represent transaction site 
agent part original transaction concurrency control recovery purposes 
section relate proposed algorithm prior 
section distributed environment algorithm expected operate 
section contains simplifying assumptions formulation distributed transaction wait graph explanation algorithm 
section contains description algorithm 
section proof correctness algorithm 
section distributed transaction wait graph section step step explanation algorithm applied 
performance analysis provided section followed section 
relationship prior reader find similarities algorithm proposed published algorithms 
proposed algorithm distributed section generally limited distributed algorithms 
noted proposed algorithm nearly identical centralized algorithm proposed section entitled find global deadlocks 
significant differences points 
muntz distributed protocol similar new algorithm 
utilize transaction wait graph concurrency control deadlock detector site network 
protocols transmit waitfor information site site 
muntz protocol modification increasingly complex potential performance problem 
key differences outlined points 
goldman local recreated time deadlock detection performed 
addition transac tion wait information transmitted site site viewed sets ordered blocked process lists 
key differences proposed algorithm follows 
communications status transactions existing local site waiting receive expected send represented transaction wait graph site adding single node represents communications links local deadlock detection site 
node called external 
potential deadlock information transmitted site 
potential deadlocks cycles contain node external 
acm transactions database systems vol 
june 
distributed deadlock detection system optimizations reduce deadlock detector deadlock detector message traffic employed 
optimization ensures potential deadlock cycle information transmitted single direction path elementary cycle 
second optimization uses lexical ordering transaction identifiers reduce average number messages half 
deadlock detection assumed service separate concurrency control mechanism 
covered specifically separation key element allowing inclusion lock waits normal resource conflict distributed database examples consideration deadlock detection algorithm 

problem statement number sites exist connected communications network 
transaction node wait graph globally unique identifier 
unique identifier distributed system means correlate agents created behalf transaction recovery concurrency control 
transaction originates site may migrate sites 
agent represents transaction site migrates 
order perform agent representing transaction contend resources agents representing transactions site may suspended resource required continuation transaction held transactions 
commonly mentioned resource class termed locks 
resource classes contention occur pool directly address 
follows discussion transaction agent site waited 
waited transaction may agents sites 
transaction agents multiple sites communications link exists connects agents transaction directly indirectly 
agents transaction considered nodes graph communications links bidirectional edges able start node reach node 
linkage necessarily hierarchical 
agent representing transaction site waiting agents representing transactions resource wait communications link agents sites agent waiting expected transmit communications links 
agents transaction waiting receive message lock wait 
transaction single locus control time 
similar model 
site contains distributed deadlock detector 
communicate deadlock detectors site local transactions direct communications links 
assumption messages transmitted deadlock detector deadlock detector received 
problem describe distributed deadlock detection algorithm operate correctly assumptions stated 
acm transactions database systems vol 
june 
obermarck 
example simplifying assumptions proposed deadlock detection algorithm uses directed graph 
nodes graph represent transactions 
directed edges show wait relationship nodes transactions 
edge directed node node indicates transaction represented node waits transaction represented node 
note representation resources held waited 
purposes deadlock detection unnecessary complication carry resource identities wait graph 
assumptions ease explanation 
affect operation algorithm 
alternatives optimizations transmission information deadlock detectors explanation section detection algorithm assumes deadlock detection site deadlock detector deadlock detector communication completed prior iteration algorithm sites prior transmission deadlock detector deadlock detector results 
leads iterative process site receives deadlock information sites produced previous deadlock detection iteration 
site performs deadlock detection 
site transmits deadlock results sites required 
actual practice synchronization sites roughly controlled agreed interval deadlock detection iterations timestamp associated messages transmitted 
synchronization need precise deadlocks persist broken 
communications link agents transaction considered logically synchronous agent receiving waiting receive agent transmitting expected transmit 
simplifying assumption coupled single locus control transaction problem statement produces relationship agents transaction transaction agents agent may active processing lock wait 
active agent expected send message 
agents transaction waiting receive message may active lock wait 
wait graph example explanation 
graph shown seen centralized detection algorithm 
centralized deadlock detection algorithm detect elementary deadlock cycles graph 
assumes nodes directed graph numbered ascending order elementary cycle unique path formed directed edges lowest numbered node nodes ends back starting node 
elementary acm transactions database systems vol 
june 
distributed deadlock detection system fig 

wait graph seen centralized system site site site fig 

wait graph split sites 
cycles graph centralized deadlock detection algorithm cause deadlock cycles broken choosing victim request resource waits denied 
victim abort causing processing undone resources held released 
victim restarted initial input 
distributed system transactions processing sites graph distributed 
possible splitting graph consistent problem description simplifying assumptions shown 
transaction done site migrated site waiting resource shared transactions 
transaction done site migrated site site transaction waiting transaction 
transaction migrated site waiting resource shared agents transactions 
similar scenario devised account segment graph 
problem definition sites communications links connect various pairs agents transaction 
minimum acm transactions database systems vol 
june 
obermarck site site site fig 

wait graph communications links 
communications links agents transaction shown fig ure 
directional arrows point agent transaction waiting receive agent transaction expected send answer request 
wait relationship established various agents transaction 
example transaction may originated site request caused migrate site communications link established sites agent site owing answer request site transaction site unable continue agent site provides answer 
agent transaction site request site communications link established transaction migrated site performed request sent answer site agent site shown waiting request site agent 
answer request site agent transaction site proceeded 
agent site required exclusive resource owned jointly transactions shown waiting 
similar scenarios explain remainder graph shown 
acm transactions database systems vol june 
distributed deadlock detection system 
detection algorithm deadlock detection algorithm site builds analyzes directed graph nodes represent transactions directed edges represent transaction waiting transaction 
indicates transaction waits transaction 
loops allowed directed edge created node 
matter times transaction waits transaction edge node directed node 
deadlock detection algorithm utilizes distinguished node site called external 
external site deadlock detection represent portion distributed external unknown site 
external abbreviated ex referred 
status agent direct communication links local site cohorts sites time deadlock detection done determine transaction waiting external waiting receive external waiting transaction agent site expected send 
allows detection potential deadlock cycles form ex 
ex strings global edge lists developed 
term string various steps algorithm 
string considered list transaction waits transaction information sent site sites result sending site deadlock detection 
string received site included site wait graph specific manner described step algorithm 
example potential deadlock cycle ex 
tran ex produce string global edge list ex 
communication protocols receive strings sites critical assumptions problem statement 
receipt strings sites may done asynchronously deadlock detection 
multiple sets strings received site deadlock detections receiving site earlier set may discarded loss 
actual implementation rough synchronization deadlock detectors various sites maintained global timestamp received strings retained input iterations site deadlock detection process overridden receipt newer input 
detection algorithm site performs build wait graph transaction transaction wait relationships extracted lock tables resource allocation tables queues transaction waits may obtained 
note process centralized deadlock detection algorithm perform 
described 
see detect deadlock simple description 
obtain add strings nodes transmitted sites existing wait graph 
transaction identified string create node exists site 
transaction string starting acm transactions database systems vol 
jne 
obermarck external create edge node representing transaction string 
rules covering string creation transmission covered step 
create wait edges external node representing transaction agent expected send communications link 
create wait edge node representing transaction agent waiting receive communications link external 
analyze resulting graph listing elementary cycles 
published algorithm perform analysis described 
list elementary cycles opposed remaining steps algorithm 
select victim break cycle contain node external 
victim chosen cycle remove cycles include victim 
note longer cycles listed step 
victim selected sets actions occur chosen victim distributed transaction site remember transaction id victim deadlock detection cycle 
enables site discard strings received iteration deadlock detection contain victim victim agent site fact transaction chosen victim transmitted site known contain agent victim victim communications link established fact transaction chosen victim transmitted site string containing victim id received 
alternative broadcast victim sites direct communication site 
examine remaining cycle contains node external cycles broken choosing victim 
transaction identifier node external waits greater transaction identifier node waiting external transform cycle string starts transaction identifier node external followed transaction identifier cycle transaction identifier node waits external 
send string site transaction terminating string waiting receive 
example remaining cycle site ex tran tran 
tran ex transformed string ex acm transactions database systems vol 
june 
distributed deadlock detection system agent tran site waiting message agent site transaction 
string sent site 

proof validity algorithm show deadlock detection algorithm works show global cycle 
detected site 
site detects cycle deadlock 
definition deadlock required 
deadlock defined relationship transactions waiting transactions manner proceed 
relationship represented directed graph nodes graph represent transactions directed edges graph represent wait relationships transactions called 
deadlocks represented graph cycles 
order show deadlock site detects cycle assumption valid real world portion local transaction wait graph shipped string site change string reached processed final site 
final site defined site string completes deadlock cycle distant site global deadlock proved exist 
short discussion assumption follows proofs 
states reasons assumption valid suggests method eliminating phantom deadlocks cycle detected site really deadlock 
discussion symbols denote nth site denote nth transaction denote ruth agent nth site denote transaction represented ruth agent nth site tv refer identifier transaction tv refer identifier transaction represented agent site 

global elementary deadlock cycle cycle detected site 
proof 
suppose global elementary deadlock cycle 
contiguous pieces cycle represented sites 
cycle 
global 
acm transactions database systems vol 
june 
obermarck sites containing contiguous pieces deadlock cycle 
note may occur times pieces cycle 
problem description derive transaction represented site agent transaction originated site migrated site site 
transaction migrated site origin perform site represented agent site agent site 
wait message relationship agents 
transaction waiting resource owned transaction specific relationship agents waiting transaction wait occurs site agent wait message relationship 
preclude complicated agent wait message structures occur transaction originated site migrated site agent assigned represent migrated site site represented agent 
description algorithm dummy transaction id node local labeled ex site represent local agents wait message status sites cycle detection process 
description algorithm obtain elementary cycle detected site ex 
ex converted string 
agent waiting need current site 
transaction waits transaction relationship may provided input deadlock detection algorithm string received node 
ex 
site means site agent waits message site may agent oft waits resource owned transaction 

ex indicates agent transaction exist site waits message agent site transaction 
string shipped site ff lexical ordering tv tv 
string contains ex followed tv tv 
tv transaction waits transaction order 
site receives string includes described transaction transaction relationships 
note site agent representing transaction need agents representing transactions string 
acm transactions database systems vol 
june 
distributed deadlock detection system ex 
ex piece cycle length piece 
note affect proof 
piece cycle site ends agent transaction waiting receive message agent remote site tv tv tv tv 
dealing cycle may rotate sequence equivalent cycle 
may label assume loss generality tv tv represents transaction maximum id transactions cycle waiting receive message 

words nontrivial piece cycle piece agents representing transactions waiting single agent merely waiting receive message expected send 
transactions 
rn similarly relabeled maximum transaction id 
constraints defining mutually satisfiable transaction rn waits transaction site deadlock involving 
waiting turn message agents 
consider site 
key property ordering 
site receives string ex tv tv 
intuitively tv tv pushes edges ahead site 
prove property need follow observation tv true directly indirectly waited representing represents transactions 
rn 
rn elementary cycle tv tv tv tv 
prove property induction vacuously true consider site 
minimality tv tv tv 
maximality tv tv tv tv send string ex tv tv 
proves hypothesis 
acm transactions database systems vol 
june 
assume hypothesis true receive string ex tv tv 
wait relationships included creating elementary cycle ex ex elementary cycle ex ex tv tv 
string shipping algorithm constructs string ex tv dealing elementary cycle 
tv tv tv 
property tv tv tv string shipping algorithm cause send string ex tv tv 
induction proves property 

applying site shows receive string ex tv 
tv 
concatenated piece site cause cycle appear site 
detect deadlock 
proves theorem 
theorem 
elementary global cycle detected site deadlock 
definition deadlock assumption site constructs cycle cycle represents deadlock 

false deadlocks assumption portions distributed transmitted strings remain frozen global deadlock determined piece reached final destination valid real world distributed environment 
fact case local true picture wait relationships single site 
depending amount concurrent processing centralized system deadlock detector may obtain information transaction waiting transaction true state time 
deadlock detector obtaining transaction wait information transactions transaction release resource transaction waiting proceed request resource acm transactions database systems vol 
june 
distributed deadlock detection system held longer waiting transaction 
deadlock detector requests wait information transaction transaction shown waiting transaction 
false deadlock detected analyzed 
centralized systems deal potential problem suspending resource allocation release activity time deadlock detector begins collecting transaction waits transaction information deadlock detection completed validating detected cycles 
distributed deadlock detection environment transactions distributed transactions deadlock detector site may detect potential global deadlock ex ex deadlock detection cycle send string ex site time deadlock detection cycle transaction site may receive message agent site process release resource transaction waiting allowing transaction respond agent site time deadlock detector run site local portion site may show 

string ex added false deadlock appear 
main approaches problem false deadlocks 
approach treat false deadlocks valid 
approach acceptable long number false deadlocks low 
alternate approach fact real deadlocks persist broken 
deadlock cycle detected validation transaction wait relationships cycle performed 
single site deadlock method redo deadlock detection determine deadlock cycle formed 
global deadlock cycle detected site validated sending site turn contains local edge cycle follow cycle backward example 
cycle constitutes true deadlock return detecting site validation edge 
works reason original detection works 
error occurs site failure communications failure cycle broken site sites detecting failure assume correction error abort transactions involved 
ensure break deadlocks existed 
possibility elementary deadlock cycle broken site longer exists broken asynchronously site transaction cycle site canceled originator 

example deadlock detection processing example starting assumption deadlock detection performed application distributed deadlock detection algorithm perform follows 
detection iteration shown result activity status site 
iteration deadlock detection acm transactions database systems vol june 
site obermarck string rec wait graph cycles broken ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex fig 

iteration detection algorithm 
string sent ex ex ex algorithm site input strings added local wait graph site 
site external depicted ex shown waiting transaction 
due state communications link expected write associated agent representing transaction site 
transactions shown waiting external agents representing transactions site waiting receive message 
cycles detected site shown cycles column 
cycles contain special node external listed transaction waits transaction order 
cycles listed column shown start transaction equal 
lexical ordering transaction waited external transaction waits external cycle string sent site sites similar potential cycles owing lexical ordering transactions cycles send strings 
site send string ex site transaction waiting external waiting receive message site string ex likewise sent site site potential cycles string ex sent site acm transactions database systems vol 
june 
distributed deadlock detection system site string rec ex ex ex walt graph cycles string sent broken ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex victim ex ex fig 

iteration detection algorithm 
shows second iteration distributed deadlock detection algorithm 
note strings sent iteration received destination sites incorporated site 
string ex received site included site additional potential cycles created 
additional potential cycle ex ex converted string sent site site string ex received site causes creation additional strings ex ex sent site receipt string ex site completes global deadlock cycle 
transaction arbitrarily chosen deadlock victim breaking listed cycles parentheses contain transaction 
string ex sent site notification transaction chosen deadlock victim 
fact transaction deadlock victim retained site deadlock detection iteration 
third iteration deadlock detection shown 
receipt strings site extended information received previous iteration causes detection elementary cycles listed site real deadlock cycles broken 
transaction arbitrarily chosen deadlock victim removing cycles parentheses 
acm transactions database systems vol 
june 
site obermarck string rec ex ex ex ex victim ex ex wait graph cycles string sent broken ex ex ex ex ex ex ex victim ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex ex fig 

iteration detection algorithm 
interesting note remaining elementary deadlock cycles detected site detected site string ex contains wait information combined local site completes elementary cycles 
extended string sent site site prior iteration contains information complete elementary cycle site site transaction arbitrarily chosen break cycle 
string ex received site included site contains remembered victim transaction chosen site previous iteration 
final iteration deadlock detection algorithm shown 
final iteration deadlock cycles broken final state deadlock detection message traffic occurs 
iterations assumption transactions remaining incur conflicts show potential deadlock cycles 
acm transactions database systems vol 
june 
site string rec victim ex ex victim ex distributed deadlock detection system wait graph ex ex cycles broken string sent victim ex ex ex fig 

iteration detection algorithm 

performance considerations method described detects global deadlock cycles transmitting transaction wait information strings potential global deadlock discovered site 
global deadlock cycle involves sites cycle detected maximum messages transmitted 
include strings sent successive iterations deadlock detection algorithm 
assume strings sent site iteration deadlock detection algorithm sent single message 
transmitting messages potential global deadlock cycle direction agent waiting receive message agent transaction expected send deadlock message follows path potential global cycle 
problem statement agent transaction may expected send message agents waiting message agent time 
message traffic halved average potential cycle information transmitted transaction identifier potential deadlock cycle lexically greater transaction identifier 
people submit transactions usually expect timely response 
submitters canceled request timeout mechanisms local systems aborted transactions involved worst case situation number sites get large 
worst case performance characteristics implementation considered normal case performance key criterion 
case described number sites large probability high acm transactions database systems vol 
june 
obermarck cycle broken means complete 
expectation number global edges strings formed site interest 
equations calculation expected normal case calculating expected normal case rough probabilistic analysis 
choose average site represent network determine probability having global edge string produced deadlock detection iteration site determine message load expected deadlock detection 
number concurrently processing local transactions site requirement access data sites complete successfully number concurrently processing distributed transactions site originated site require access data site vice versa total number concurrently processing agents site pw probability agent experiences lock wait time processing transaction worry lock wait occurs assume waits seen deadlock detector sw fraction waiting receive message original problem statement excludes possibility lock wait expected number global edges strings site form picture agents site 
agents divided classes shown representing local transactions presumably majority active lock wait representing distributed transactions waiting receive state active lock wait representing distributed transactions actively processing lock wait 
lock waits interested form potential global cycles 
requires situation 

probability agent representing distributed transaction class active lock wait distributed transactions lock wait resource held distributed transaction waiting receive expressed pw wait resource resource owned distributed agents waiting receive agents 
probability agent representing distributed transaction class active lock wait distributed transactions lock wait acm transactions database systems vol 
june 
distributed deadlock detection system local transactions waiting receive waiting receive fig 

transaction states 
resource held local transaction expressed pw wait resource resource owned member set local agents set agents 
global detection algorithm considers wait relationships form string starting possibility local agents wait string probability specific local agent waiting required specific pw specific local agent waiting interested waited directly indirectly creating global edge 
longer strings probability specific local agent waiting agent specific pw probability agent representing distributed transaction set waiting receive lock wait local agent turn lock wait resource held distributed transaction waiting receive expressed pw pw 
probability agent representing distributed transaction ut waiting receive lock wait local agent turn lock wait second local agent turn lock wait resource held distributed transaction waiting receive expressed 
pw pw pw pw pw 
follows expected number global edges normally occur site contribute communications overhead distributed deadlock detection algorithm determined pw pw pw 
acm transactions database systems vol 
june 
obermarck fig 

probable number transaction state 
local transactions total active lock wait waiting receive waiting receive total total act lk calculation expected case realistic view distributed systems measurements lock waits production experimental database systems shows true pw transaction volume response time requirements placed current production database systems coupled communications delays occur distributed system follows words transactions access data local original site expected majority 
agent distributed transaction active remaining agents waiting receive sw major delay overhead distributed deadlock detection involved transmission global edges strings site site suppose transactions originating site percent transactions distributed distributed transaction agents involves sites percent potentially active agents experience lock wait sw shows application probabilities classes agents expected site 
agents site local agents active lock wait agents representing distributed transactions active lock wait di di di expected number global edges acm transactions database systems vol 
june 
distributed deadlock detection system expected number strings shipped site detection algorithm ship half average global edges 
interesting note probabilities favor short cycle 
fact expect global cycles length involving sites 
comparison centralized algorithm centralized global detection algorithm described requires global edge information distributed site 
global deadlock detection iteration messages distributed site required message request global edges distributed site reply distributed sites site global edges message stating time 
site network give total messages iteration 
long number sites involved global deadlock cycle expected low average number global edges site distributed detection algorithm send fewer messages centralized algorithm 
calculations cycles length expected number global edges distributed detection algorithm require fewer messages centralized algorithm 
rough guess indicates improvement factor 
changing percentage transactions distributed probability agent experience lock wait percent expected number global edges produced site increases approxi mately 
number strings transmitted site expected half number global edges case acceptable limits 
expectation global edges low performance proposed distributed deadlock detection algorithm expected 

advantages distributed deadlock detection algorithms 
follows potential deadlock cycle information victims need transmitted 
deadlock information transmitted single direction path potential deadlock cycle 
advantage new communications links required deadlock detection 
site processes local transaction wait graph plus specific nodes edges receives sites 
dependent distinguished site communication sites prone failure 
acm transactions database systems vol 
june 
obermarck stated proof detection false deadlock cycles possible algorithm 
basis expectation global edges shown performance section apply major approaches potential problem mentioned proof section 
acknowledgments am deeply indebted assistance fellow project members significant contributions jim gray gave equations normal case performance calculations spent hours explaining understood majority final version proof correctness distributed algorithm bruce lindsay discovered optimization allows algorithm reduce average number string messages half patricia griffiths selinger supplied initial version proof correctness algorithm 
addition reviewed drafts making constructive comments 

ax roc deadlock detection distributed systems 
computer science tech 
rep university maryland college park md dec 

goldman deadlock detection computer networks 
tech 
rep lcs tr massachusetts institute technology cambridge mass sept 

gray notes data base operating systems 
operating systems advanced course bayer eds lecture notes computer science vol 
springer verlag berlin new york 

discussion distributed systems 
res 
rep rj ibm research division sept 

gray ano straw man analysis ity waiting deadlock 
res 
rep rj ibm research division feb th berkeley workshop distributed data management computer networks feb 

jo finding elementary cycles directed graph 
ia cornput 
mach 

mun locking deadlock detection distributed data bases 
rans 
ow 
en 
may 

ra ck distributed data base 
ibm palo alto systems center tech 
bull 
ibm pa alto ca sept 

ros sa ns wls ii 
system level concurrency control distributed database systems 
acm rans 
database 
june 
received june revised april accepted may acm transactions database systems vol 
june 
