mdl language compiler dynamic program instrumentation form dynamic code generation called dynamic instrumentation collect data execution application program 
dynamic instrumentation allows instrument running programs collect performance types information 
instrumentation code generated incrementally inserted removed time 
instrumentation currently runs sparc pa risc power alpha architectures 
specification data collect written specialized language called metric description language part paradyn parallel performance tools 
language allows platform independent descriptions collect performance data 
provides concise way specify constrain performance data particular resources modules procedures nodes files message channels combinations resources 
describe details weave instrumentation running program 
jeffrey hollingsworth oscar barton miller xu marcelo gon alves ling zheng cs umd edu bart cs wisc edu computer science department university maryland college park md dynamic run time code generation powerful idiom allows system adapt changing functional demand workloads 
extensible operating system kernels construct efficient network protocols compile demand interpreted languages 
form dynamic code generation called dynamic instrumentation paradyn parallel performance tools run time decisions performance data collect 
dynamic instrumentation differs run time code generation schemes periodically modifies running program collect information execution 
computer sciences department university wisconsin madison wi instrumentation activity collecting information execution modifying intent underlying calculation 
code generation modification techniques variety uses concentrate program instrumentation 
describe mdl language instrument running programs analyze binary programs code generation scheme performance measurements 
techniques described part paradyn tools run solaris sparc aix hp ux dec unix windows nt 
permit dynamic instrumentation foundation constructing run time tools developed api runtime code insertion 
defined language called metric description language mdl cleanly specify data collected collect 
mdl specialized language key roles 
specifies code inserted application program calculate value performance metrics 
code includes simple control data operations plus ability instantiate control real virtual timers 
second specifies instrumentation code inserted application program 
specification includes points application program place instrumentation code 
technical challenges include support wide class architectures 
address issue standard language intermediate form keeping instrumentation specifications simple 
second challenge generate efficient instrumentation code 
avoid instrumentation overhead minimize 
third challenge dealing optimized code 
tools operate code generated 
supported part wright laboratory avionics directorate air force material command usaf arpa order 
department energy de fg er 
hollingsworth supported nsf award asc 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright notation thereon 
views contained authors interpreted necessarily representing official policies endorsements expressed implied government 
full optimization current compilers 
cases forces de optimize small parts code run time insert instrumentation 
current instrumentation procedure granularity entry exit call complexity manageable versions handle basic blocks require additional development 
dynamic code generation general specialization general dynamically compiling procedural programming language 
incrementally generate relatively small pieces code afford cost full compiler simple code templates specialization restrictive 
dynamic instrumentation pushes spectrum instrumentation technology complementing techniques binary rewriting 
dynamic instrumentation defers decision instrument program execution time 
performance evaluated onthe fly changes instrumentation application program execution characteristics 
allows long running programs large scientific codes running programs database servers instrumented 
dynamic instrumentation rewriting advantage requiring access source code 
binary rewriting static process works best advanced knowledge collect available remains fixed program execution 
instrumentation performance debugging performance debugging parallel programs requires detailed understanding program execution interaction hardware executing 
wide range hardware operating systems programming languages libraries primitives parallelism difficult build performance measurement tools provide required detailed information hardware platforms 
key problem facing tool builders create tools flexible useful variety platforms provide sufficient detail assist programmer 
performance debugging consists steps data collection data presentation 
focus making collection new types data easier 
language called mdl describing parallel program performance metrics 
mdl permits compiler library application programmers customize performance measurement tool gather desired data 
continually adding hard wired data collection analysis techniques tool preferable build performance tool extensible permits easy addition new types data 
goals metric description language portability 
portability performance tool requires tool run variety platforms instrumentation specifications portable platforms 
example library writer describes performance metric library description usable system run library 
achieve portability data collection described higher level abstraction machine instructions 
important portable metrics types data may relevant particular platforms 
consequently metric description language needs permit platform specific metrics 
decoupling metrics program components 
metrics entire computation useful generally necessary gather data finer granularity 
example possible report waiting time entire program file name procedure 
depending situation useful combination 
describing individual metrics different ways isolate data practical 
metrics orthogonal ways constrain metrics aren different combinations 
writing custom definitions metric program component combination impractical metrics program components 
decouple description metric constrain different program components 
result sufficient describe constraints metrics 
rest describes language implementation 
section describes mdl language 
section describes obtain structural information binary executable 
section describes insert remove code running program 
section section discuss issues relating instrumenting optimized code 
section describes dynamic instrumentation code generation 
metric description language mdl mdl special purpose language writing instrumentation requests 
instrumentation requests written terms performance metrics 
performance metric timevarying function characterizes part program behavior percent cpu usage message bytes second 
specifications written mdl describe basic instrumentation calculate performance metric additional specifications constrain metric different program components 
mdl metric description represents potentially enormous number variations possible performance measurements gather 
metric combinations requested execute 
mdl description thought part program 
part describes insert program instrumentation code specification second specifies code inserted application specification 
execution request instrument application program specification interpreted compute places application instrument 
specification translated machine code combined specification information control structure application program 
machine code inserted running program 
shows flow information mdl evaluation introduce model program instrumentation describe mdl language 
section short example shows mdl metric description combined request generate instrumentation 
mdl program paradyn mdl parse parsed mdl instrument parsed mdl instrument paradyn code generator instrumentation machine code mdl flow control dashed line boxes generated paradyn mdl user input metrics focus application binary exe paradyn structural analysis application control information paradyn instrumentation manager previously developed simple defined set operations building blocks compute metrics desired program components 
collect data insert software instrumentation program 
keeping instrumentation operations simple optimize performance platform 
recording performance information application program accomplished points primitives predicates 
points defined locations application code instrumentation inserted 
currently available points procedure entry procedure exit individual call statements 
points extended include basic blocks individual statements 
primitives simple operations change value counter timer 
predicates boolean expressions associated primitives determine associated primitive gets executed 
inserting predicates primitives correct points program wide variety metrics computed 
mdl differs languages part program specification executes request insert instrumentation received part executes inside application process measure performance 
clarify parts language consider example foreach procedures append entry proc calls line contains loop implicitly declares variable iterate list procedures defined list variable procedures 
second line contains keywords append described indicate instrumentation code inserted 
second line defines point instrumentation inserted 
example inserting instrumentation entry procedure defined variable instrumentation code insert bracketed tokens 
code inserted increment variable proc calls 
result code snippet time procedure called application program counter calls incremented 
instrumenting point controlling instrumentation happens code desirable controlling order snippet execution multiple snippets inserted single point 
mdl includes parameters controlling placement instrumentation code 
control instrumentation executed instruction corresponding instrumentation point 
especially useful points procedure calls permits instrumentation inserted immediately call immediately returns 
possible values modifier 
control order instrumentation code snippets snippet inserted point 
new snippet added point added snippet point prepend append 
order important snippet execution change value instrumentation variables 
addition calls basic primitives procedures predefined variable lists procedures application program 
tion code blocks contain conditional expressions calls subroutines application variables application program 
example uses application variable timesteps start timer th time step application 
timesteps program instrumentation generally needs inserted specific procedures application library 
example compute metrics message passing library requires instrumentation inserted message passing functions 
instrumentation needs inserted procedures library entry points 
operation easier mdl includes way create lists procedures 
example simple list declaration list pvm msg func procedure flavor pvm items pvm send pvm recv line defines name list pvm msg func type list procedure 
second line indicates list applies pvm programs 
third line enumerates procedures list 
list mdl evaluation listed procedures looked application program program removed list 
constraints key feature mdl ability constrain metric description different program components 
program components identified hierarchical naming system 
program component procedure file process unique name 
collections program components grouped resource hierarchies 
example procedures grouped modules modules grouped resource called code 
located file test named code test func 
gather performance data specific program component metric description language provides constraint clauses 
constraint clauses create boolean variables true specific program component active 
example constraint module true procedure module currently executing procedure 
example simple con straint clause true selected module active 
constraint module code counter foreach func constraint append func entry module prepend func return module part constraint clause describes constraint name module resource hierarchy constraint clause applies code 
constraint clause variable constraint bound name resource selected 
case metric user requested metric restricted specific module resource named code foo constraint variable bound foo associated module described constraint attribute value list procedures defined module 
constraint shown code fragment creates boolean variable true selected module active 
power constraints combined 
example module constraint combined message type tag constraint restrict metric messages specific type sent received single module 
combining constraints possible metric users request detailed metrics application programs 
constraint corresponds boolean variable constraints combined operation 
complete mdl definition complete metric definition contains description code insert compute un constrained metric metric computed entire application list attributes metric list constraints applied metric 
shows complete metric description 
section definition includes information display metric name units operations second 
describes metric combined different processes threads compute single value threads execution 
metrics combined sum operation minimum maximum operators provided 
field lists different programming models metric valid 
metrics apply possible configurations provides control metrics requested 
second part metric description lists constraints 
subscripts resource names start zero specific trailing component name 
applied metric 
constraints may appropriate metrics apply metric defined listed 
final section metric definition base clause describes instrumentation code necessary compute value metric entire program 
example shown base metric increments counter time function msg func called 
list pvm msg func procedure flavor pvm items pvm send pvm recv constraint procedure code counter append constraint entry procedure prepend constraint return procedure metric msgs name messages units sum flavor pvm constraints applied constraint module constraint procedure constraint base computation metric 
base counter foreach func pvm msg func append func entry constrained msgs complete metric description metric msgs counts messages sent pvm message passing routines listed msg func 
application execution user higher level software request metric defined mdl enabled specific combination program resources 
example user requested msgs metric enabled procedure code foo code shown inserted program 
satisfy request instrumentation code snippets inserted 
inserted procedure foo 
entry point foo sets counter foo called instrumentation foo clears counter foo returns 
snippets inserted evaluating constraint clause 
third fourth code snippets inserted message passing routines pvm send pvm recv 
statements conditionally increment variable counts number messages sent received 
snippets inserted evaluating base clause msgs procedures defined list pvm msg func 
metric requested entire program un constrained snippets statements inserted entry send recv 
msgs msgs foo instrumentation generated msgs metric constrained foo function 
capabilities limitations mdl mdl simple type system consisting base types instrumentation code types define instrumentation code inserted 
instrumentation code types counter timer instrumentation code integer variables record time events respectively 
types define instrumentation inserted procedure module list iterator 
procedure aggregate type describes subroutine contains fields entry point return statements subroutines called 
modules collections procedures 
list aggregate type represents collection variables type 
lists may accessed sequentially iterators randomly array subscript notation square brackets 
mdl describe types metrics 
instrumentation code lacks looping construct language turing complete 
choose include looping construct impossible predict execution time instrumentation code 
mdl currently possible execution time called application subroutines develop fairly accurate model cost execute instrumentation snippet inserted 
paradyn cost information control amount instrumentation inserted program 
metrics written date absence looping statement limitation expressing metrics wanted create 
gain experience mdl pvm send 
pvm recv 
evaluate absence looping construct unduly limits type metrics created structural analysis parsing binary file paradyn performs simple form structural analysis identify instrumentation points application program 
result analysis list instrumentation points function annotated address point original instruction point additional instructions replaced point instrumented 
useful information functions obtained analysis executable 
determine function leaf function function creates new stack frame 
information useful stack trace inserting deleting instrumentation described section 
paradyn finds points analyzing executable file application 
goal able handle arbitrary executable file gathering information symbol table scanning binary image 
identify point determine instrumentation inserted point 
analysis uses techniques binary rewriting 
executable file processed steps 
step process symbol table get size address code data segments 
result step platform independent representation executable file consisting pointers code text segment memory mapped executable file list symbols functions data objects annotated name type starting address size cases module symbol belongs 
important piece information directly available platforms size function 
size needed look instrumentation points 
size symbol table infer size locating starting address function data object 
inference step needed platforms supposedly provide size directly functions correct size symbol table 
aix power platform determine function scanning signature trace back record follows procedure extended file format 
platforms solaris hp ux read symbolic debugging information find module source file functions information derived standard symbol table 
list functions second step find instrumentation points function 
instrumentation points currently provided function entry exit points call sites 
entry point function defined starting address obtained symbol table 
basic method finding instrumentation points sequentially scan code function entry point searching instruction sequences implement calls exit 
step platform dependent 
scanning instructions trivial risc platforms instructions size perform simple matching 
instructions different sizes decode instruction determine length processing find start instruction 
cases find function exit points call sites looking return call instructions 
jumps leave function defined exit points 
indirect jumps difficult analyze know target analysis time know indirect jump leaving function 
basic approach assume indirect jumps leave function cases heuristics find target indirect jump 
example sparc code uses idiom target jump loaded register indirect jump register sethi hi addr reg low addr reg reg jump reg code sequence frequently jumps distance target jump instruction greater value fits immediate field jump instruction 
find instruction sequence code target outside function jump defined exit point 
cases possible insert code dynamically check jump destination address 
addition finding instrumentation points analysis executable finds additional instructions point instrumenting point 
additional instructions needed cases replace instructions insert jump point instructions needed build jumps distant destination 
check jumps middle instruction sequences collect targets direct jumps scan instructions looking instrumentation points 
compilers put data code segment way difficult distinguish data instructions scan executable file 
common data mixed code jump table switch statements 
heuristics find skip jump tables effective code generated gnu sun microsoft visual compilers 
example indirect jumps form jmp dword ptr reg addr reg general register addr immediate value gives base address jump table 
depending base address tell jump table code segment 
know size table infer looking addresses table 
long find address current function assume part jump table 
inserting deleting instrumentation major challenge dynamic run time instrumentation encountered binary rewriting interacting execution state application program 
instrument program run time generate instrumentation code fragments place dynamically allocated patch areas called trampolines 
code generated placed trampolines tied application program 
instrumentation manager responsible insertion instrumentation deletion application process 
complete details trampolines described section 
block generated instrumentation code tied instrumentation point application processes 
insert code application process install code data counters timers application address space operating system facilities unix systems ptrace proc file system 
code generated trampolines original instruction point relocated trampoline 
original instruction instrumentation point modified jump base trampoline 
instrumentation disabled remove branch trampoline reclaim memory code longer active 
instrumentation insertion inserting instrumentation requires creating trampolines described section modifying original instructions instrumentation point jump base trampoline 
instrumentation instrumentation point existing trampoline 
instrumentation inserted point original instruction point changed jump trampoline 
instruction point replaced single jump instruction 
general may replace multiple instructions point size instruction point smaller size jump instruction need instructions jump 
sure jumps location middle sequence instructions modified 
handle case checking direct jump application jumps middle instruction sequence want modify 
jump middle instruction sequence modify sequence 
alternatives insert trap instruction requires modification instruction safely inserted copy larger instruction sequence including jump trampoline padding code room instrumentation code modifying jump reject instrumentation request point 
checking targets direct jumps may indirect jumps target determined execution time 
cases heuristics find targets indirect jumps statically works code encountered gnu commercial compilers 
increase abilities structure analysis include full control data dependences issue 
general solution problem instrument indirect jumps analyzed check target run time special action find target middle modified instruction sequence implemented solution currently demand 
want instrument functions small insert jumps base trampoline entry exit points 
happens library functions read write 
case relocate entire function different location near base trampoline short jumps platforms require modification instruction 
original function replaced jump relocated function 
problem modifying multiple instructions program executing particular instruction sequence moment insert instrumentation 
simply resume program modifying instruction sequence executing middle new code cause unpredictable results 
simple solution modify application pc code resumes relocated instructions trampoline original location 
insert breakpoint trap sequence run program wait reaches breakpoint 
instrumentation deletion delete request prevent activations instrumentation modifying jump trampoline bypass 
memory block contains deleted code freed sure code active 
requests delete instrumentation code collected handled batch amortize fixed overhead involved deletion 
queued deletes processed list exceeds predefined length total free space drops specified threshold 
delete instrumentation application process examine pc call stack 
check pc current stack frames sure instrumentation code currently executed 
currently executed defer deletion placing deletion request back list deletion attempted deletion triggered 
delete instrumentation code delete data counters timers code 
data shared multiple instrumentation points count counter timer control deallocation 
handle fragmentation instrumentation heap compacting heap updating branch destinations data addresses 
compaction algorithm run request satisfied free list 
dealing compiler optimizations major challenge run time tools coping compiler optimizations 
users interested improving performance applications able measure programs compiler optimizations enabled 
optimizations affect ability instrument code obtain meaningful performance results certain optimizations lead instrumentation produce incorrect results 
general method dealing compiler optimizations handle specific optimizations way get meaningful results 
techniques undo compiler optimizations fuse multiple instrumentation points instrumentation request fused point 
compilers tail call optimization functions procedure call operation 
optimized function return caller gives return address called function returns directly caller 
sparc platform tail call optimization usually implemented having instruction delay slot call instruction modify register return address call written 
example call restore kind optimization difficult collect correct performance data 
treat call normal call site exit point function 
alternative treat tail call exit point time spent called function 
approach problem undo tail call optimization gather accurate performance data 
instrument point relocating instructions generate new code trampoline emulates original code optimized tail call 
code fragment generate code restore st fp call nop ld fp de optimization commonly instrumenting library functions read 
compiling code generation mdl compiling generating code mdl takes place points time see 
stage occurs paradyn mdl parse processes configuration file containing basic metric definitions definitions compiled parse trees 
second interesting stage code generator occurs request instrument running program 
machine code generated satisfy request 
code generation incremental process new request instrumentation generating new fragment code application program 
section basic structure instrumentation code 
describe code generation instrumentation primitives predicates 
describe optimizations various points code generation 
features described section available supported architectures sun sparc hp pa risc ibm power dec alpha intel pentium architectures accommodating idiosyncrasies various architectures 
trampolines tying step inserting code application allocate space dynamically generated code 
code generation done incrementally new request instrumentation 
point application program instrumentation code inserted deleted 
small code fragments called trampolines mechanism tie 
associated active instrumentation point base trampoline block instrumentation code placed 
base trampoline contains relocated original instructions instrumentation point application program instructions save restore registers slots jumps mini trampolines inserted jump return application code 
mini trampolines contain instrumentation code followed jump 
multiple instrumentation requests point mini trampolines chained done synthesis trampoline list jumping back base trampoline 
trigger instrumentation code instructions inserted point application code jump base trampoline see section 
cost instrumentation particular instrumentation point updated base trampoline pre instrumentation post instrumentation 
way paradyn keep track perturbation introduced application 
shows structure base mini trampolines 
application program func foo base trampoline save regs update cost pre instrument 
restore regs relocated instruction save regs update cost post instrument 
restore regs mini trampoline instrumentation primitive application code base mini trampolines base trampoline need reserve space hold relocated instructions application 
normally relocate instructions delay slot times additional save call need relocate extra instructions 
example sparc function returns structure instruction delay slot size structure relocated 
nop added relocating jump instruction currently try fill delay slots relocated instructions 
mini trampoline illustrates example increment primitive similar generated entry loads value counter increments value counter stores value counter jumps back base trampoline mini trampoline 
relocate jump branch instruction base trampoline need modify jump instrumentation code incr primitive load counter sethi hi ld increment counter store counter sethi hi st branch base trampoline mini trampoline nop mini trampoline sparc architecture architectures range jump instructions limited 
may generate multiple instructions emulate original jump destination away displacement original jump instruction 
architecture additional difference base trampoline 
instruction length variable may need relocate instructions instruction point plus additional instructions point 
extra instructions moved sufficient space jump base trampoline 
additional instructions taken instrumentation point relocated base trampoline additional instructions point relocated base trampoline just return application code 
permits include jump instruction relocated sequence je leave ret ret instruction instrumentation point instruction byte need relocate additional instructions 
je instruction relocated long jump leave ret instructions 
je relocated base trampoline instrumentation executed jump taken base trampoline je leave pre point instrumentation ret post instrumentation reached return user code instrumentation function return point handled special way power platform 
difficult determine precisely exact return points approach 
insert instrumentation entry point replace value link register contains return address address return point 
original return address saved stack restored 
function returns jump base trampoline executes instrumentation code retrieves real return address stack jumps location 
optimizations places optimizations dynamic code generation 
optimization environment unique aspects interacting existing application code previously inserted instrumentation code 
avoid repeated address computation perform common sub expression elimination 
avoid long streams redundant instrumentation collecting data instances resource employ simple form vectorization 
simple optimization eliminating common subexpressions 
type operation particularly effective frequently multiple computed addresses 
code generation standard techniques generating code expression keep result possible register occurrence sub expression 
collecting performance data instances resource generate expensive instrumentation 
example situation occur profiling memory blocks 
case hundreds thousands instances resource 
instrumentation request generated separately need detect independent requests vectorize 
vectorization generated code look constraint arg instance counter constraint arg instance counter 
constraint arg statement represents constraint related vectorization constraining particular procedure 
second statement group target vectorization optimization 
note optimization similar switch statement 
arg term specifies resource instance example means instance identified parameter function instrumentation inserted 
number instructions inserted linearly proportional number resource instances 
amount instrumentation perturbation intolerable 
allocate vector counters timers resource instances insert code index appropriate cells vector 
optimized code looks constraint index arg resource vector index example user supplied function maps resource instance vector index 
function takes input description resource class arg case 
number instructions inserted constant independent number resource instances 
optimization especially effective mapping function produce dense vector 
improve optimization pre calculate propagate constants time instrumentation 
example measured operations cache misses memory block cache line arrays application program 
allocate vector counters counter associated memory block array 
resource case user array information mapping function base address length 
resource instance specified arg memory address 
function maps arg cell counter vector array information memory block size 
example unoptimized instrumentation executes instructions number resource instances number instructions register save restore constraints 
vectorization number instructions 
peephole optimization reduce number instruction 
memory objects numerous vectorization saves substantial amount time 
performance measurements critical performance cost instrumentation time takes go user code trampolines back 
cost instrumentation code part calculates metrics specific semantics metric description difficult general statements 
counter timer operations previously reported costs 
results figures show performance code patching system different processor architectures 
time shown fourth row reflects time required execute instrumentation call empty procedure single point program 
due need preserve machine state mhz pentium pro squeeze code existing binary image times somewhat higher traditional compiler generate procedure call 
architectures largest share time spent saving restoring machine state 
example platform time spent saving restoring machine state 
time spent preserving register flags 
saving restoring register required ns total instrumentation time 
sparc register wheel preserve local parameter registers preserve general floating point registers ensure correct behavior 
save restore time significantly shorter power architecture save registers resulting instrumentation 
thorough analysis instrumentation code sparc mhz ii decide really need save registers specific instrumentation point 
third row shows time required execute null procedure trap instruction 
expected requires trap operating system kernel time significantly longer simply executing branch instruction versus ns 
uses data breakpoints approach faster trap instruction context switch separate debugger process 
opportunities improve performance instrumentation system 
base trampoline static code template place holders nop possible situations 
customizing base trampoline situation improve time base trampoline execution cases 
likewise fuse base mini trampolines reduce number branches 
change improve run time performance cost greater complexity managing multiple mini trampolines single point 
power mhz power pa risc mhz hp call empty procedure ns ns ns ns base trampoline jump saves restores base trampoline trap saves restores base trampoline jump saves restores ns ns ns ns ns ns ns ns empty mini trampoline ns ns ns ns cost triggering instrumentation 
st line cost procedure call parameters instrumentation place 
nd line adds jump base trampoline back register save restores jump mini trampolines 
rd line uses trap instruction jump get base tramp 
th line adds register save restores jump case 
th line adds base tramp register save restores jump empty mini trampoline 
numbers parentheses cost relative empty procedure call 
cost operations normalized clock speed introduced mdl language dynamic program instrumentation 
mdl provides machine independent way describe instrumentation inserted application program 
language includes features de couple specification data collect constrain data collection particular program components procedures 
addition mdl permits customization data collection different parallel programming models permitting metric definitions tagged specific programming models 
second part described mechanisms create run time instrumentation compiler 
run time code instrumentation system differs binary editors run time code specialization tools need generate code run time weave arbitrary points binary image execution 
techniques squeeze instrumentation tight code sequences including moving code selective de optimization compiler generated code 
reported ways insert delete code running program optimization techniques run time code generation 
allow instrumentation optimized code supported platforms including commercial compilers ibm microsoft visual sun 
compiler technology advances dynamic instrumentation advance 
ability handle optimizations may depend compiler providing information nature transformations 
run time code generation system currently produces code sun sparc hp pa risc dec alpha ibm power intel architectures 
features described incorporated paradyn parallel performance tools 
created api export run time compiler features uses 
beguelin dongarra geist sunderam 
visualization debugging heterogeneous environment 
ieee computer june 

post pass object code optimization tool 
international conference compiler construction linkoping spring verlag lncs april 
lzle chambers ungar 
debugging optimized code dynamic deoptimization 
sigplan pldi conf san francisco june 
heath 
visualizing performance parallel programs 
ieee software sept 
hollingsworth miller 
integration application system metrics parallel program performance tool 
rd acm symp 
principles practice parallel programming williamsburg va april 
hollingsworth miller 
adaptive cost model parallel program instrumentation 
euro par lyon france august 
hollingsworth miller 
dynamic program instrumentation scalable performance tools 
scalable high performance computing conference knoxville tn may 
hough cuny 
perspective views technique enhancing parallel program visualization 
international conference parallel processing vol ii august 
hollingsworth buck 
programmer guide 
university maryland computer sciences technical report cs tr august 

environments visualization program execution 
performance instrumentation visualization simmons editors 
addison wesley 
larus schnarr 
eel machine independent executable editing 
sigplan conference programming language design implementation la jolla ca june 
massalin pu 
threads input output synthesis kernel th symposium operating systems principles operating systems review december 
miller callaghan hollingsworth tia 
paradyn parallel performance measurement tools 
ieee computer november 
necula lee 
safe kernel extensions run time checking 
nd symposium operating systems design implementation seattle washington october 
pu black consel cowan inouye walpole zhang 
optimistic incremental specialization streamlining commercial operating system 
th symposium operating systems principles copper mountain december 
joyce 
purify fast detection memory leaks access errors 
winter usenix conference january 
reed noe roth shields schwartz 
scalable performance analysis pablo performance analysis environment 
scalable parallel libraries conference skjellum editor 
ieee computer society 
cuny hansen kundu wolf 
event state debugging tau prototype 
sigmetrics symposium parallel distributed tools philadelphia pa may srivastava eustace 
atom system building customized program analysis tools 
sigplan conference programming language design implementation orlando fl 
stasko sunderam 
monitoring visualization cluster environments 
technical report git cc georgia institute technology march 
yan performance measurement 
visualization modeling parallel distributed programs aims toolkit 
software practice experience 
