software practice experience vol 
may profile guided automatic inline expansion programs chang scott mahlke william chen wen mei hwu center reliable high performance computing coordinated science laboratory university illinois springfield ave urbana champaign il summary describes critical implementation issues addressed develop fully automatic inliner 
issues integration compiler program representation hazard prevention expansion sequence control program modification 
automatic inter file inliner uses profile information implemented integrated optimizing compiler 
experimental results show inliner achieves significant speedups production programs 
key words mine expansion compiler code optimization profile information large computing tasks divided smaller subtasks easily developed understood 
function definition invocation high level languages provide natural means define ordinate subtasks perform original task 
structured programming techniques encourage functions 
unfortunately function invocation disrupts compile time code optimizations register allocation code compaction common subexpression elimination constant propagation copy propagation dead code removal 
emer clark reported composite vax workload cent dynamic instructions function calls returns 
assume equal numbers call return instructions number indicates function call instruction instructions executed 
patel reported dynamic call frequency vax instructions 
gross cited dynamic call frequency mips instructions 
patterson sequin reported function call costly source language statement 
previous results argue effective approach reducing function call costs 
inline function expansion simply inlining replaces function call function body 
inline function expansion removes function call return costs provides enlarged specialized functions code optimizers 
study allen johnson identified inline expansion essential part vectorizing compiler 
scheifler implemented inliner takes advantage profile infor received april john wiley sons revised november chang mation making inlining decisions clu programming language 
experimental results including function invocation reduction execution time reduction code size expansion reported programs written clu 
code improving techniques may applicable inline expansion 
include register allocation code scheduling common subexpression elimination constant propagation dead code elimination 
richardson ganapathi discussed effect inline expansion code optimization functions 
optimizing compilers perform inline expansion 
example ibm pl compiler inline expansion low level intrinsic functions 
gnu compiler programmers keyword inline hint compiler inline expanding function calls 
stanford mips compiler compiler examines code structure loops choose function calls inline inline expander program structure analysis expansion 
increase exposed program parallelism 
noted careful macro expansion language preprocessing utilities effect inline expansion inline expansion decisions entirely programmers 
davidson holler developed automatic source source inliner inliner works source program level existing programs various computer systems optimized inliner 
effectiveness inliner confirmed strong experimental data collected machine architectures 
process developing optimizing compiler decided allocate man months construct profile guided automatic inliner 
expect inliner enlarge scope code optimization code scheduling eliminate large percentage function calls 
describe major implementation issues regarding fully automatic inliner design decisions 
implemented inliner integrated prototype compiler 
inliner consists approximately lines commented code including profiler collect profile data 
inliner part portable compiler front ported sun sun dec oo workstations running unix operating systems 
critical implementation issues basic idea inlining simple 
difficulties due hazards missing information reducing compilation time 
identified critical issues inline expansion 
inline expansion performed compilation process 

data structure employed represent programs 

hazards avoided 

sequence inlining controlled reduce compilation cost 

program modifications inlining function call 
static function call site simply call site refers function invocation specified static program 
function call activity invoking particular function particular call site 
dynamic function call executed function call 
call site potentially invoke function call site automatic inline expansion function call associated 
usually due call pointer feature provided programming languages 
caller function call function contains call site function call 
callee function call function invoked function call 
integration compilation process issue regarding inline function expansion inlining performed translation process 
traditional program development environments source files program separately compiled corresponding object files linked executable file see 
compile time defined period time source files independently translated object files 
link time defined duration object files combined executable file 
optimizations performed compile time minimal amount link object files performed link time 
simple stage translation paradigm frequently referred separate compilation paradigm 
major advantage separate compilation paradigm source files modified corresponding object file needs regenerated linking object files new executable file leaving object files intact 
translation performed compile time separate compilation greatly reduces cost program recompilation small number source files modified 
stage separate compilation paradigm attractive program development environments programs frequently recompiled usually small number source 
separate compilation paradigm chang files modified recompilation 
programming tools unix program exploit advantage 
extension separate compilation paradigm allow inlining compile time illustrated 
performing inline function expansion code optimization steps ensures code optimization steps benefit inlining 
example functions created generic modules invoked variety purposes 
inlining function call places body corresponding function specific invocation eliminates need cover service required callers 
optimization constant propagation constant folding dead code removal expected effective inlining 
performing inline function expansion compile time requires callee function source intermediate code available caller compiled 
note callee functions reside different source files callers 
result caller callee source files longer compiled independently 
callee function modified callee caller source files 
inlining compile time note possible link time inline expansion perform global optimization 
mips compiler instance link phase function inlining optionally occur optimizer subsequent compilation phases 
effect achieved line expansion performed optimization steps 
automatic inline expansion recompiled 
coupling caller callee source files reduces advantage step translation process 
practice library functions written assembly languages available form object files integrated user object files link time 
library functions available inline function expansion compile time 
dynamically linked libraries represent step direction separating library functions user programs invoking 
dynamically linked library functions available inline function expansion 
program representation second issue regarding inline function expansion data structure employed represent program 
order support efficient inlining data structure characteristics 
data structure conveniently capture dynamic static function calling behaviour represented programs 
secondly efficient algorithms available construct manipulate data structure process inline function expansion 
weighted call graphs described exhibit desirable characteristics 
weighted call graph captures static dynamic function call behaviour program 
weighted call graph directed multigraph main characterized major components set nodes set arcs main node call graph 
node function program associated weight number invocations function callers 
arc static function call program associated weight execution count call 
main function executed program 
node weights arc weights determined profiling 
example weighted call graph shown 
functions example main weights functions indicated names functions 
example weights functions respectively 
arc call graph represents static function call weight gives expected dynamic execution count run 
example main function calls different static locations expected execute time expected execute times typical run 
inlining function call equivalent duplicating callee node absorbing duplicated node caller node eliminating arc caller callee possibly creating new arcs weighted call graph 
example inlining involves duplicating absorbing duplicated eliminating arc going creating new system call arc resulting call graph shown 
support program development inliner generate makefile correctly program source file modified 
makefile specifies source files object file depends lining 
source file modified files received function bodies modified source file recompiled invoking makefile 
problem program development debugging inlining scope currently investigated authors 
currently inliner serves tool enhance performance program production 
chang 

weighted call graph detecting recursion equivalent detecting cycles weighted call graph 
example recursion involving functions identified detecting cycle involving nodes weighted call graph 
identifying functions reached execution equivalent finding unreachable nodes main node 
example function longer reachable main function inline expanded function see 
determined identifying unreachable nodes main node weighted call graph 
efficient graph algorithms operations widely available 
inline expander fails positively determine internal function calling characteristics functions missing information call graph construction 
major causes missing information calling external functions calling pointers 
calling external functions occurs program invokes function source file unavailable inline expander 
automatic inline expansion 
inlining example examples include privileged system service functions library functions distributed source files 
functions perform function calls call graphs constructed incomplete 
practically privileged system services library functions invoke user functions call external function may assumed indirectly reach nodes function addresses computation order detect recursions functions reachable main 
special node extern created represent external functions 
function calls external functions requires outgoing arc extern node 
turn extern node outgoing arcs function address computation reflect fact external functions potentially invoke function call graph 
calling pointers language feature allows callee function call determined run time 
theoretically set potential callees call pointer identified program analysis 
special node ptr represent functions may called pointers 
calls pointers considered inlining implementation 
assigning node represent potential callee call pointer ptr shared calls pointers 
fact ptr assumed reach functions addresses computation 
ensures potential recursions functions reachable main safely detected 
chang hazard detection prevention third issue regarding inline function expansion hazardous function calls excluded inlining 
hazards identified inline expansion unavailable callee function bodies multiple potential callees call site activation stack explosion variable number arguments 
practical inline expander address hazards 
hazardous function calls excluded weighted call graph considered inlining sequence controller 
bodies external functions unavailable compiler 
external functions include privileged system calls library functions written assembly language 
case privileged system calls function body usually available regardless inline expansion performed compile time link time 
multiple potential callees call site occur due calling pointers 
callees calls pointers depend run time data general potential callee call site 
note inline expansion equivalent replacing call site callee function body 
potential callee replacing call site potential callee function bodies eliminates calls callees mistake 
function calls originating call site multiple potential callees considered inline expansion 
call pointer executed extremely high frequency insert statements selectively inline frequent callees 
may useful programs lot dispatching run time logic simulators 
parameter passing register saving local variable declarations returned value passing associated function contribute activation stack usage 
summarized activation stack usage computed function 
recursion may cause activation stack overflow call site large activation record inlined functions recursion 
example recursive function function defined follows return return int 
example activation stacks shown inline expansion 
note inlining recursion significantly increases activation stack usage 
tends called large value expanding cause explosion activation stack usage 
programs run correctly inline expansion may run inline expansion 
prevent activation stack explosion limit control stack usage imposed inline expanding call recursion 
function expect variable number parameters 
parameter data types may vary call call printf 
current implementation compiler calls excluded inlined 
done writing names type functions file specifying file compiler option 
currently developing program analysis required efficiently handle functions important programs graphics windowing packages 
sequence control stack growth automatic inline expansion call graph expansion expansion 
activation stack explosion fourth issue regarding inline function expansion sequence inlining controlled minimize unnecessary computation code expansion 
step consider hazardous function calls 
sequence control inline expansion determines order arcs weighted control chang graph static function calls program inlined 
different sequence control policies result different numbers expansion different code size expansion different reduction dynamic function calls 
considerations affect cost effectiveness inline expansion conflict 
sequence control inline expansion naturally divided steps selecting function calls expansion expanding functions 
goal selecting function calls minimize number dynamic function calls subject limit code size increase 
goal expansion sequence control minimize computation cost incurred expansion selected function calls 
steps discussed section 
section limit discussion class inline expansion restriction 
function callee inlined functions absorbing absorb note restriction cause extra code expansion illustrated example 
function calls times called times times see 
call graph information separate number times calls invoked assume absorbed calls times invoked time absorbed see 
restriction absorbed see 
obviously absorbing cost effective case 
problem information call graph attribute weight separately 
decision absorb non existing information 
accurately break weights needs duplicate arc times number possible paths arc reached main function 
cause exponential explosion number arcs weighted call graph 

example restricted inlining automatic inline expansion restriction restriction 
lost opportunity detecting hazards due recursion call graph simplified breaking cycles 
cycles call graph broken excluding important arc cycle call graph 
important arc excluded inlining break cycle involving functions lose opportunity eliminate dynamic calls involved recursion 
usually acceptable greater 
equal breaking cycle eliminate opportunity reducing dynamic calls recursion 
recursion happens dominating cause dynamic function calls entire program lose call reduction opportunity breaking cycle 
simple solution problem see 
inline recursive function call times 
handling single function recursions chang breaking cycle 
case loses call reduction opportunity breaking cycle 
weighted call graph directed acyclic graph cycles broken 
discussions assume property 
desirable expand frequently executed function calls heavily weighted arcs call graph possible 
unlimited inline expansion may cause code size explosion 
order expand function call body callee duplicated new copy callee absorbed caller 
obviously code duplication process general increases program code size 
necessary set upper bound code size expansion 
limit may specified fixed number function original program size 
problem fixed limit size programs handled varies difficult find single limit suit programs 
setting upper limit function original program size tends perform better virtual memory favour large programs 
chose set limit percentage original program size compiler option 
code size expansion increases memory required store program affects instruction memory hierarchy performance 
precise costs obtained inline expansion code size depends optimizations performed inline expansion 
combination copy propagation constant propagation unreachable code removal reduce increase code size 
original function bodies may unreachable main function eliminated inlining 
detailed evaluation shown code expansion due inlining necessarily reduce instruction cache perform ance 
cost inlining estimated intermediate code size increase accurate effect instruction memory system performance 
accurate benefits inline expansion equally difficult obtain inline expansion 
inline expansion improves effectiveness register allocation algebraic optimizations reduces computation steps memory accesses required execute program 
optimizations performed inline expansion precise improvement effectiveness due inline expansion known inline expansion 
benefit inline expansion estimated reduction dynamic function calls 
problem selecting functions inline expansion formulated optimization problem attempts minimize dynamic calls limited code expansion allowance 
terms call graphs problem formulated collecting set arcs total weight maximized code expansion limit satisfied 
appears problem equivalent knapsack problem defined follows 
pile valuable items value weight 
knapsack hold certain weight 
problem select set items total weight fits knapsack total value maximized 
knapsack problem shown np complete 
straightforward formulation unfortunately incorrect inlining 
code size function changes inlining process 
code size increase due inlining function call depends decision function call 
decision function call turn depends code size increase 
dilemma illustrated 
automatic inline expansion 
inter dependence code size increase sequencing inlined code expansion due inlining total size code expansion just size problem code increase expansion decision depend 
inline expansion sequencing difficult knapsack problem 
show selection algorithm call reduction achieves results practice 
arcs weighted call graph marked decision 
arcs inlined order minimizes expansion steps source file accesses incurred 
different inline expansion sequences expand set selected functions 
example function invoked assume selection step decides absorb sequences achieve goal 
sequence illustrated eliminated 
note absorbing eliminating expansion steps new arcs created takes steps absorb eliminate new arcs 
takes total expansion steps achieve original goal 
second sequence illustrated absorbed eliminating function absorbing absorbed eliminates note takes total expansion steps achieve original goal 
general chang 
inlining function absorbing callees observation function absorbed caller inlining function caller absorbing callees increase total steps expansion 
class inlining algorithms considered rule minimizing expansion steps stated follows function absorbed caller callees inlined inlined 
clear violation rule increase number expansions 
clear algorithm conforming rule perform expansion steps number function calls inlined 
algorithm automatic inline expansion 
inlining function absorbing callees conforming rule optimal far number expansion steps concerned 
directed acyclic call graph optimal rule realized algorithm manipulating queue terminal nodes 
terminal nodes call graph inlined callers desired eliminated call graph 
produces new group terminal nodes inserted queue 
algorithm terminates nodes eliminated call graph 
complexity chang algorithm number function calls program eligible inlining 
implemented simpler sequence control method approximates optimal queue algorithm 
inline expansion constrained follow linear order 
functions sorted linear list weights 
frequently executed function leads linear list 
function inlined function appears linear list 
inline expansions pertaining function done function processed 
rationale functions executed frequently usually called functions executed frequently 
program modifications fifth issue regarding function inline expansion essential operations inlining function call 
task consists parts callee duplication variable renaming parameter handling elimination unreachable functions 
avoid conflicts local parameter static variables caller callee compiler creates global name space entire program intermediate representation 
achieved renaming mechanism invoked inlining 
inliner handles formal parameters assigning actual parameter values 
return value assigned new local temporary variables caller 
assignments eliminated constant copy propagation dead code elimination 
programs start main function function reachable main function removed 
function reachable main function directed path call graph main function function function may serve exception handler activated external functions 
language detected identifying functions addresses computations 
experiments table shows set classic local global code optimization implemented prototype compiler 
code optimizations common commercial compilers 
implemented priority global register allocator uses profile information allocate important variables processor registers 
register allocator assigns variables caller save registers intelligently remove part function calling overhead 
table ii shows set application programs chosen benchmarks 
size column indicates sizes benchmark programs terms number lines code 
description column briefly describes benchmark program 
table iii describes input data profiling 
runs column lists number inputs profiling benchmark program 
description column briefly describes nature input data 
executing benchmark program input produces profile data file 
benchmark automatic inline expansion table code optimizations local global constant propagation copy propagation common subexpression elimination redundant load elimination redundant store elimination constant folding strength reduction constant combining operation folding dead code removal code reordering table ii 
benchmarks name size description cccp compress eqn espresso lex tbl xlisp yacc constant propagation copy propagation common subexpression elimination redundant load elimination redundant store elimination loop invariant code removal loop induction strength reduction loop induction elimination global variable migration dead code removal loop unrolling gnu preprocessor compress files typeset mathematical formulas troff boolean minimization lexical analysis program generator format tables troff lisp interpreter parsing program generator table iii 
characteristics profile input data name runs description cccp compress eqn espresso lex tbl xlisp yacc source files lines source files lines ditroff files lines boolean minimizations original espresso benchmarks lisp pascal awk pic ditroff files lines gabriel benchmarks grammars pascal pie eqn awk program profile data files summarized profile data file guide automatic inline expander 
evaluate performance different input data profiling measure execution time compiled program 
table iv describes static compile time characteristics function calls 
report call sites visible compiler chang table iv 
static characteristics function calls name external pointer intra file inter file inlined cccp compress eqn espresso lex tbl xlisp yacc external column shows numbers static call sites call functions source codes available compiler 
pointer column shows number static call sites call pointers 
intra file column shows number static call sites call functions source file 
column shows number static call sites call functions different source file 
inlined column shows number static call sites inlined expanded 
table describes dynamic execution time characteristics function calls 
note benchmark programs large fractions calls external functions cccp xlisp yacc 
currently access source code library functions 
including library functions inline expansion reduce relative importance external function calls 
inliner inline call sites shown inter file intra file columns 
tables iv show inlining small percentage static call sites removes large percentage dynamic calls 
number static call sites inlined directly correspond compile time spent inlining result clearly shows profile information allows compiler spend small portion compile time budget eliminate dynamic calls 
table vi indicates code expansion ratios benchmark programs 
global column shows program sizes bytes inline expansion 
global inline column shows program sizes bytes inline expansion 
table dynamic characteristics function calls name external pointer intra file inter file inlined cccp compress eqn espresso lex tbl xlisp yacc automatic inline expansion table vi 
code expansion dec name global global inline ratio cccp compress eqn espresso lex tbl xlisp yacc ratio column shows code expansion ratios 
average code expansion ratio benchmark programs 
table vii shows speed ups benchmark programs 
speed calculated real machine execution time dec workstation 
global inline column computed dividing execution time code execution time inlined code 
note intelligent assignment variables caller save callee save registers removed part overhead function calls non inlined code 
average speed benchmark programs 
table viii shows speed comparison code produced mips cc gnu cc final inlined code 
code produced cc gnu cc slightly slower inline code 
speed calculated real machine execution time dec workstation 
note mips cc performs link time inline expansion gnu cc performs intra file inline expansion code optimization 
purpose table viii calibrate final inlined code code generated optimizing compilers 
compilers different optimization capabilities speed comparison compare inline capabilities compilers 
mips cc release gnu cc release table vii 
speed ups dec name global global inline cccp compress eqn espresso lex tbl xlisp yacc average chang 
table viii 
speed comparison compilers dec name impact global inline mips gnu cccp compress eqn espresso lex tbl xlisp yacc automatic inliner implemented integrated optimizing compiler 
inliner consists lines commented statements accounts cent source code compiler 
process designing implementing inliner identified critical implementation issues integration compiler program representation hazard prevention expansion sequence control program modification 
described implementation decisions 
shown inliner eliminates large percentage function calls achieves significant speed set production programs 
authors acknowledge nancy warter members impact research group support comment suggestions 
special anonymous referees comments suggestions helped improve quality significantly 
research supported national science foundation nsf mip dr lee ncr amd advanced processor development division electric national aeronautics space administration nasa contract nasa nag cooperation illinois computer laboratory aerospace systems software 
emer clark characterization processor performance vax proceedings th annual symposium computer architecture june 

patel performance evaluation multiple register sets proceedings th annual international symposium computer architecture pittsburgh pennsylvania june pp 

gross hennessy measurement evaluation mips architecture processor acm trans 
computer systems august pp 


patterson sequin vlsi risc ieee computer september pp 


allen johnson compiling vectorization parallelism inline expansion proceedings sigplan conference programming language design implementation june 

scheifler analysis inline substitution structured programming language communications acm 
automatic inline expansion 
richardson ganapathi code optimization procedures ieee computer february 

auslander hopkins overview pl compiler proceedings sigplan symposium compiler construction june 

stallman internals gnu cc 

chow hennessy register allocation priority coloring proceedings acm sigplan symposium compiler constructions june 

line subroutine expander university illinois 
champaign urbana 

davidson holler study function inliner software practice experience 

davidson holler model subprogram inlining computer science technical report tr department computer science university virginia july 

hwu chang inline function expansion compiling realistic programs proceedings acm sigplan conference programming language design implementation june 

mips mips compiler manual 

tarjan data structures network algorithms siam philadelphia pa 

chen chang conte hwu effect code expanding optimizations instruction cache design crhc center reliable high performance computing university illinois urbana champaign may 

garey johnson computers intractability guide theory np completeness freeman new york 
