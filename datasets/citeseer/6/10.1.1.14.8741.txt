effect initial window size limited transmit algorithm transient behavior tcp transfers france telecom rue albert einstein sophia antipolis cedex france mail com study impact modifications proposed tcp context short file transfers 
important proposals increment initial window size iw limited transmit algorithm lt :10.1.1.13.3367
analyze analytically simulations effect proposals tcp latency 
demonstrate lt proposal reduces tcp latency similarly iw proposal lt aggressive iw 
context short file transfers point scenario single packet loss sender times iw lt enabled 
harmful scenario happens packets file transfer lost 
avoid situation propose new modification reducing number duplicate tcp reacts 
order avoid potentially harmful effect needless retransmissions network load suggest implement new modification short file transfers 
key words 
tcp ip short file transfers initial window limited transmit algorithm 
observed tcp loss recovery mechanism properly congestion window tcp sender small 
happen transient steady state behavior example due limit imposed receiver advertised window constraints imposed connection small bandwidth delay product link 
order avoid harmful effect suggestions proposed 
probably important ones increase initial congestion window iw proposal limited transmit algorithm lt proposal :10.1.1.13.3367
cases aim decrease probability event tcp connection goes timeout 
timeout harmful tcp performance conservative approach value normally set times greater average rtt round trip time implies reduction average throughput konstantin avrachenkov inria sophia antipolis route des lucioles sophia antipolis cedex france mail avrachenkov sophia inria fr case long live tcp sessions increment transfer time case short live tcp sessions 
far tcp algorithm regardless size file transfered 
known see tcp session typically belongs kinds mice elephants 
tcp sessions mice small size smaller amount elephants terms flows responsible largest amount transfered data terms bytes 
natural little bit different tcp modifications different types flows 
initiate research subject 
want concentrate efforts short live tcp transfers 
evaluate analytically simulations performance iw lt proposals 
point situations single loss event sender inevitably timeout iw lt proposals 
propose modifications order decrease probability timeout events 
suggest modifications mice type tcp transfers 
rest organized follows section outlines recursive approach calculation expected transfer time short tcp session 
detailed version approach 
section provides performance analysis iw lt proposals 
section numerical results possible tcp modifications discussed 
expected latency tcp transfers section explain model calculate expected time tcp file transfer complete explanation refer reader 
expected latency computed conditioning number losses 
input parameters model packet loss proba bility average round trip time document size transfered initial window size initial slow start threshold maximum receiver advertised window number packets receiver acknowledges ack option 
fluid model approach represent evolution congestion window 
particular means discrete number packets continuous volume data course size transfered network 
turns fluid model approach analytically tractable discrete 
related previous works assumption packets lost independently prob ability :10.1.1.143.6798
expected latency file size bytes conditional expected la tency exactly losses happened file transfer 
latency loss case losses easily calculated analysis tcp congestion window evolution 
calculate recursive approach outlined 
calculate probability having retransmission bytes transmitted 
parameter corresponds amount data successfully transmitted consecutive losses 
packets lost independent fashion number packets successfully sent consecutive losses geometric distribution 
adapt assumption fluid model standard approximation geometric distribution exponential distribution 
parameter exponential distribution determined relation transmitted bytes consecutive losses model tcp newreno sack versions 
assumptions flavors tcp behave similar way 
define number duplicate acks sender receive order infer loss occurred start running fast recovery fast retransmission algorithms 
important depend receiver acknowledges packet received order 
packet loss event number acks tcp sender receive depend general loss occurs congestion window sender continue sliding forward lost packet gets left position 
value commonly set 
ss ss rt mss mss rtt rtt sending rate evolution packet lost bytes sent congestion window tcp session timeout 
initial settings tcp session define parameter amount bytes sent value reached 
value simply amount bytes sent final sending rate reaches value initial window size greater equal sender timeout 
situation sender inevitably timeout 
loss occurs remaining amount data matter actual value sending rate sender receive duplicate acks rely timeout detect loss 
scenarios harmful performance point view 
tcp retransmission time measured round trip times sender receiver specified avoid retransmissions packets delayed lost minimum conservatively chosen second 
computational purposes substitute value timeout expression suggested 
point suggested smaller value minimum leads tcp better performance 
analyze happen transmission file packet lost 
consider scenarios depending amount bytes sent loss occurs see figures 
observe bytes sent total transfer time equal sum time required send bytes retransmission time time required send bytes 
second scenario tcp sender detect loss event reception duplicate acks 
case tcp sender halve sending rate transmit new bytes addition lost round reception ss mss rtt dup mss ss mss rtt mss rtt sending rate evolution packet lost bytes sent ss ss ss dup mss rt mss sending rate evolution packet lost bytes sent acks transmit new bytes 
sake simplicity fluid model consider remaining data new sending rate set approximation remain ing data allows keep exact track evolution sending rate 
scenario total transfer time equal sum time required send bytes initial parameters time required send 
third scenario corresponds situation loss occurs amount data remaining case transfer time equal sum time required send bytes retransmission time time required send packet 
timeout value changed 
particular value regardless value sending rate just timeout set packet new value slow start threshold loss event new tcp settings define density function amount data sent loss occurs loss events happened transmission data 
density related uniform distri rtt bution distribution amount bytes sent loss minimum independent uniformly distributed random variables 
corresponding density function putting results recursive approach expected conditional latency tcp file transfer calculated knowing expected conditional latency probabilities cal expected latency formula 
validation result comparison formulas derived 
distinct features approach fact capable model accurately easily situations sender timeouts 
modeling iw lt modifications model permits study impact initial window parameter straightforward manner input parameters 
adaptation needed model limited transmit algorithm 
algorithm described detail 
basic idea tcp react duplicate acks duplicate acks attempt avoid timeout events making tcp aggressive 
lt algorithm tcp sender send new packets arrival duplicate acks eventually receive third duplicate trigger fast retransmission fast recovery phases 
define number acks sender running lt receive order send new data important note modification decreases value performance tcp improves 
hand lt help avoiding timeouts due data effect reception duplicate acks lt transmits new recommended value 
assumption data left reception duplicate acks sender receiving third avoiding timing 
data take decision retransmit packet till packets received 
tcp sender congestion window allow receive duplicate acks timeout loss event congestion window allows receive duplicate acks limited transmit algorithm take eventually sender get fast retransmission scenario loss event sender receive duplicate acks 
sake simplicity model consider different possibilities sender timeout get fast retransmission directly reception duplicate acks 
purpose redefine parameter model described section 
case initial window packets value performance analysis proposed tcp modifications previous section introduced model calculate tcp latency explained circumstances single lost packet tcp sender timeout 
model provides interesting useful 
instance calculating theoretic model expected conditional latency observed interesting phenomena non monotonicity expected conditional latencies see 
latency sec theoretic latency theoretic latency simulated latency simulated latency min file size bytes expected conditional transfer time obtained simulation theoretic model behavior due conservative value retransmission timer see section 
fact exists threshold file size file size threshold loss lead timeout 
value sum see 
previous example observe maximum conditional latency packet lost corresponds particular case value corresponds sum see values pa rameters slow start phase table 
min dup mss graphic illustration value analyze way proposed modifications help narrowing intervals 
value explained section equal sum bytes sent reception acks due previous packets congestion window smaller example calculate value particular case 
consider sender running lt algorithm 
evolution congestion window bytes round follows threshold congestion window value justify result explain segment provokes sender timeout corresponds congestion window size clear segment lost timeout happen sender receive duplicate acks 
segment sent successfully lost sender send new packets reception ack corresponding successfully transmitted segment 
receiver receive order packets send back duplicate acks sender enter fast recovery avoid timeout 
course analysis complicated reality phenomena taken account simple derivation 
tables values obtained different initial windows lt algorithm cases sake simplicity consider sender stays slow start slow start congestion avoidance lt alg 
lt alg lt alg 
lt alg table numerical results case slow start congestion avoidance lt alg 
lt alg lt alg 
lt alg phase congestion avoidance phase reality mixed situations possible believe situations get idea impact parameter 
values tables clear value negligible 
considering typical values see lt algorithm 
consider respectively 
user point view wants transmit small file session experiences loss time required transmit considered instantaneous average modifications tcp increasing initial window provide tremendous benefit 
contrary session experience loss time performance degrades notably 
think context short tcp transfers modification considered 
proposed modification actual tcp implementation value set tcp avoid spurious retransmissions 
lt algorithm improve performance tcp aggressive packet retransmitted till duplicate acks received 
context short tcp file transfers sender faces different harmful scenarios 
scenario corresponds situation size congestion window size allow sender receive duplicate acks case lt second scenario example transmission timeouts initial window set packet slow start threshold set half current congestion size example loss event tcp sender enters fast recovery certain timeouts initial window set packets slow start threshold systems adaptive implementation short flows modeled 
table numerical results case packet lost packets sender timeout 
case short files occurrence timeout deteriorates severely performance retransmission timer typically greater average necessary introduce changes improve transfer short files 
propose modify tcp short file transfers follows order reduce probability timeouts small congestion window size propose lt algorithm parameter implies considering initial value window size greater tcp able regardless value recover single loss having rely timeout 
sender receives duplicate ack corresponding packets propose tcp retransmits immediately lost packet 
modification packet file provoke timeout 
order allow retransmissions reception single duplicate ack mandatory small probability packet reordering network 
studies point internet paths routes persisting days weeks 
numerical results section theoretic model evaluate benefit obtained different proposals validate results ns simulations 
consider simple topology single link capacity dependent packet loss probability value parameters propagation delay chosen way model tcp behavior terms rounds round starts transmission packet congestion window ends sender receives acknowledgment 
order assumption hold bandwidth delay product greater maximum window size 
assumption responsible stair case pattern simulated conditional latency case losses file sizes need number rounds require amount time transfered 
increasing iw increasing initial window advantages example avoiding timeouts due acks transfer elimination elimination delayed ack timeout reduces general transmission time :10.1.1.13.3367:10.1.1.13.3367
increased tcp aggressive observed certain conditions tcp sessions performed better starting small initial window 
context short tcp transfers beneficial effect increasing initial window clear observation tables related reduction beneficial effect reducing timeouts transmission 
observing tables see similar benefit achieved lt algorithm aggressive modification iw 
limited transmit algorithm study extent lt beneficial 
figures depict conditional latency lt algorithm 
observe utilization lt algorithm solve completely problem timeouts value similar cases ing lt lt 
concerning short tcp transfers drawback lt algorithm case increasing initial window 
reduces value produces benefit respecting packets 
show lt algorithm benefit long live tcp sessions reducing notably timeout probability 
reduction shown proposed modifications quite achieve aim case short tcp transfers reduce value succeed avoiding timeouts transmission 
proposals intend improve performance tcp case small transfered files consider intervals equally important 
plot results conditional latency obtained case tcp sender adopts modifications explained latency sec theoretic latency theoretic latency theoretic latency simulated latency simulated latency simulated latency file size bytes expected conditional transfer time obtained simulation theoretic model lt algorithm 
latency sec theoretic latency theoretic latency theoretic latency simulated latency simulated latency simulated latency file size bytes expected conditional transfer time obtained simulation theoretic model running lt algorithm 
section 
see transfer time file significantly reduced case loss event happens transfer 
latency sec theoretic latency theoretic latency theoretic latency simulated latency simulated latency simulated latency file size bytes expected conditional transfer time obtained simulation theoretic model tcp retransmits packet reception duplicate acknowledgment 
figures depict expected transfer time tcp newreno lt algorithm proposal 
proposal differentiate sessions greater smaller sessions smaller consider lt parameter case packets lost sender retransmit immediately reception duplicate ack 
sessions greater packets standard lt algorithm 
conclude lt reduces latency significantly furthermore proposal reduces expected transfer time short tcp transfers 
latency sec tcp newreno proposed tcp modification limited transmit algorithm file size bytes expected transfer time running different versions tcp note proposal brings dramatic improvement tcp latency file transfer experiences loss 
instance see file size experiences loss lt proposal decreases transfer time file proposal tcp latency relative improvement limited transmit algorithm proposed tcp modification file size bytes relative reduction conditional tcp latency lt tcp modification carry analysis iw lt proposals aim improve performance tcp 
demonstrate lt proposal brings similar benefits iw proposal aggressive 
show proposals completely achieve goal context short tcp transfers 
particular fact take account losses file transfers lead inevitably timeouts 
deficiency corrected reducing number duplicate acknowledgments allow packet loss detection 
particular modification reduces significantly tcp latency file transfer experiences packet loss 
course proposal aggressive modification iw lt result unnecessary packet retransmissions 
uses modification transfer short files lead large additional network load 
recall total contribution short live tcp transfers internet traffic small terms bytes 
instance considered short sessions smaller effect proposal network performance subject research 
allman balakrishnan floyd rfc enhancing tcp loss recovery limited transmit january 
allman stevens rfc tcp congestion control april 
allman floyd partridge increasing tcp initial window september :10.1.1.13.3367
altman avrachenkov barakat impact bursty losses tcp performance performance evaluation pp october 
altman avrachenkov barakat stochastic model tcp ip stationary random losses acm sigcomm stockholm sweden computer communication review pp 
avrachenkov altman barakat dube modelling short tcp transfers inria technical report 
barakat iannaccone diot flow model internet backbone traffic technical report epfl dsc jul 
shorter version appears acm sigmetrics 

bolot packet delay loss behavior internet proc 
acm sigcomm pp 
san francisco ca sept 
sojourn times cyclic queues influence slowest server computer performance reliability courtois editors elsevier science publishers 
north holland pp 

bu towsley fixed point approximation tcp behaviour aqm network proceedings sigmetrics conference 
web site cooperative association internet data analysis caida www caida org 
cardwell savage anderson modeling tcp latency ieee infocom pp tel aviv israel march 
stochastic processes prentice hall 
dawkins vaidya performance implications links errors august 
ben roberts statistical bandwidth sharing study congestion flow level sigcomm 
heidemann performance interactions tcp implementations acm computer communication review april 
kumar performance analysis tcp sessions workshop modeling flow congestion control inria ecole normale superieure paris september 
lakshman madhow performance tcp ip networks high bandwidth delay products random loss ieee acm transactions networking jun 
mathis semke mahdavi ott macroscopic behavior tcp congestion avoidance algorithm acm computer communication review jul 
integrated model latency steady state throughput tcp connections performance evaluation pp september 
web site national laboratory applied network research nlanr www nlanr net 
padhye firoiu towsley kurose modeling tcp throughput simple model empirical validation acm sigcomm sep 
paxson routing behavior internet ieee acm transactions networking pp 

paxson allman rfc computing tcp retransmission timer november 
nichols networks simulation studies increased initial tcp window size september 
telatar behavior certain stochastic processes arising window protocols ieee globecom dec 
