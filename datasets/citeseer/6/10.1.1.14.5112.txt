formal framework reasoning uml class diagrams andrea cal diego calvanese giuseppe de giacomo maurizio lenzerini dipartimento di informatica sistemistica universit di roma la sapienza salaria roma italy lastname dis uniroma 
formalize uml class diagrams terms logic belonging description logics subsets order logic thoroughly investigated knowledge representation 
logic devised specifically tailored high expressiveness uml information structuring mechanisms allows formally model important properties typically specified means qualifiers 
logic equipped decidable reasoning procedures profitably exploited reasoning uml class diagrams 
possible provide computer aided support application design phase order automatically detect relevant properties inconsistencies redundancies 
vast consensus need precise semantics uml particular uml class diagrams :10.1.1.10.1512
types formalization uml class diagrams proposed literature 
proved useful respect task establishing common understanding formal meaning uml constructs 
best knowledge explicit goal building solid basis allowing automated reasoning techniques algorithms sound complete wrt semantics applicable uml class diagrams 
propose new formalization uml class diagrams terms particular formal logic family description logics dl 
dls proposed successors semantic network systems kl explicit model theoretic semantics 
research logics resulted number automated reasoning systems successfully tested various application domains see 
long term goal exploit deductive capabilities dl systems show effective reasoning carried uml class diagrams provide support specification phase software development 
dls domain interest modeled means concepts relationships denote classes objects relations respectively 
generally speaking dl formed basic components description language specifies construct complex concept relationship expressions called simply concepts relationships starting set atomic symbols applying suitable constructors knowledge specification mechanism specifies construct dl knowledge base properties concepts relationships asserted set automatic reasoning procedures provided dl 
seehttp dl kr org home page description logics 
set allowed constructors characterizes expressive power description language 
various languages considered dl community numerous papers investigate relationship expressive power computational complexity reasoning see survey :10.1.1.126.8320
works point dls profitably provide formal semantics reasoning support formalisms areas natural language configuration management database management software engineering 
example illustrates dls database modeling 
best dls applied unified modeling language uml exception 
goal formalization uml class diagrams terms dls 
particular show map constructs class diagram exptime decidable dl dlr 
mapping provides rigorous logical framework representing automatically reasoning uml class specifications 
logic devised specifically tailored high expressiveness uml information structuring mechanisms allows formally model important properties typically specified means constraints 
logic equipped decidable reasoning procedures profitably exploited reasoning uml class diagrams 
possible provide computer aided support application design phase order automatically detect relevant properties inconsistencies redundancies 
classes concentrate class diagrams conceptual perspective 
deal features relevant implementation perspective public protected private qualifiers methods attributes 
class uml class diagram denotes sets objects common features 
specification class contains name class unique diagram attributes class denoted name possibly followed multiplicity square brackets associated class indicates domain attribute values 
specification contains operations class operations associated objects class 
operation definition form operation name parameter list return list observe operation may return tuple objects result 
uml class represented dlr concept 
follows naturally fact uml classes dlr concepts denote sets objects 
uml attribute type class associates instance zero instances class optional multiplicity specifies associates instance instances multiplicity missing assumed attribute mandatory 
formalize attributes think attribute type class binary relation instances instances capture binary relation means binary relation dlr 
specify type attribute assertion assertion specifies precisely instance concept objects related instances note attribute name necessarily unique diagram different classes attribute possibly different types 
situation correctly captured formalization dlr 
specify multiplicity associated attribute add assertion assertion specifies instance participates times times relation component 
attribute optional omit conjunct omit second 
observe attributes multiplicity omit assertion multiplicity missing assertion operation class function objects class operation associated possibly additional parameters tuples objects 
class diagrams code associated operation considered typically represented signature operation 
dlr model operations means dlr relations 

pm 
rn operation class parameters belonging classes 
pm respectively return values belonging 
rn respectively 
formalize operation dlr relation pm rn arity instances dlr concepts 
pm 
rn 
relation enforce assertions assertion imposing correct types parameters return values op pm rn pm rn assertions imposing invoking operation object parameters determines unique way return value relation corresponding operation fact function invocation object parameters returned values pm rn 
pm rn 
functional dependencies determined number parameters number result values specific class operation defined types parameters result values 
overloading operations pose difficulty formalization operation represented dlr relation having name signature operation consists name operation parameter return value types 
observe formalization operations dlr allows operations name signature different classes 
associations aggregations association uml relation instances classes 
association related association class describes properties association attributes operations binary association instances ml 
mu fig 

binary association aggregation uml 
rn fig 

association uml cn nu classes graphically rendered left hand side class association class related association role names respectively specify role class plays relation multiplicity specifies instance class participate times times relation analogous meaning class 
aggregation uml binary association instances classes denoting part relationship relationship specifies instance class set instances class 
aggregation graphically rendered shown right hand side diamond indicates containing class opposed contained class 
multiplicity meaning associations 
associations aggregation possible define role names denote role class plays aggregation 
observe names associations names aggregations names classes unique 
words associations aggregations name 
turn formalization dlr 
aggregation depicted considering multiplicities formalized dlr means binary relation assertion enforced 
note distinguish contained class containing class simply convention argument relation containing class 
express multiplicity nl 
nu participation instances instance assertion nl nu similar assertion multiplicity participation instances instance 
observe formalization dlr aggregation role names play role 
want keep track formalization suffices consider convenient abbreviations components dlr relation modeling aggregation 
focus associations 
associations related association class formalize associations dlr reifying association dlr concept suitable properties 
consider association shown 
nu nu fig 

multiplicity aggregation represent dlr introducing concept binary relations 
rn component association enforce assertion rn rn rn cn ri 
specifies concept components 
rn association ri 
specifies component single valued ri ci 
specifies class component belong 
assertion id 
rn specify instance represents distinct tuple cn 
easily represent dlr multiplicity binary association imposing number restriction relations modeling components association 
differently aggregation names relations correspond roles unique wrt association entire diagram 
state constraints dlr slightly involved way 
suppose situation 
consider association constraint saying instance nl nu instances related 
capture constraint follows nl nu observe prevents different association role different multiplicity nl nu 
observe modeled totally unrelated assertion nl nu generalization inheritance uml generalization parent class child class specify instance child class instance parent class 
relations may name roles association available uml diagram arbitrary name role names available 
case preserve possibility role name different associations 

fig 

class hierarchy uml instances child class inherit properties parent class typically satisfy additional properties general hold parent class 
generalization naturally supported dlr 
uml class generalizes class express dlr assertion inheritance dlr concepts works exactly inheritance uml classes 
obvious consequence semantics subsetting 
assertion tuple dlr relation having th argument type may th component instance fact instance 
consequence formalization attribute operation aggregation association involving correctly inherited 
observe formalization dlr captures directly inheritance association classes treated exactly classes multiple inheritance classes including association classes 
uml group generalizations class hierarchy shown 
hierarchy captured dlr set inclusion assertions child class parent class cn ci 
discuss section formalize dlr additional properties class hierarchy mutual disjointness child classes covering parent class 
constraints uml possible add information class diagram constraints 
general constraints express informal way information expressed constructs uml class diagrams 
discuss common types constraints occur uml class diagrams taken account formalizing class diagrams dlr 
defining generalizations classes need add additional constraints involved classes 
example class hierarchy constraint may express 
cn mutually disjoint 
dlr relationship expressed assertions ci cj 
general uml specified constraint classes may common instances disjoint 
constraint imposes disjointness classes say formalized dlr means assertion disjointness classes just example negative information 
exploiting expressive power dlr express additional forms negative information usually considered uml introducing suitable assertions 
example enforce instance class attribute means assertion analogously assert instance class involved association aggregation 
turning attention generalization hierarchies default uml generalization hierarchy open sense may instances superclass instances subclasses 
allows extending diagram easily sense new subclass change semantics superclass 
specific situations may happen generalization hierarchy superclass covering subclasses 
cn 
represent situation dlr simply including additional assertion cn assertion models form disjunctive information instance instance instance 
instance cn 
forms disjunctive information modeled exploiting expressive power dlr 
example attribute specified set 
cn classes modeled suitably union classes cn 
keys modeling notion common databases express certain attributes uniquely identify instances class 
exploit expressive power dlr order associate keys classes 
attribute key class means pair instances value capture dlr means assertion id 
generally able specify set attributes 
key case assertion id 

discussed section constraints correspond specialization type attribute multiplicity represented dlr 
similarly consider case class participating aggregation class subclasses respectively related aggregation subset constraint modeled correctly dlr means assertion involving binary relations represent aggregations 
generally exploit expressive power dlr formalize types constraints allow better represent application semantics typically dealt formal way 
observe allows take constraints fully account reasoning class diagram 
reasoning class diagrams traditional case tools support designer user friendly graphical environment provide powerful means access different kinds repositories store information associated elements developed project 
support higher level activities related managing complexity design provided 
particular burden checking relevant properties class diagrams consistency redundancy see left responsibility designer 
formalization dlr uml class diagrams fact properties inheritance relevant types constraints perfectly captured formalization dlr associated reasoning tasks provides ability reason class diagrams 
represents significant improvement step development modeling tools offer automated reasoning support designer modeling activity 
briefly discuss tasks performed exploiting reasoning capabilities dlr reasoner allow modeling tool take tasks traditionally left responsibility designer :10.1.1.106.75
tool may construct class diagram dlr knowledge base manage way completely transparent designer 
exploiting dlr reasoning services various kinds checks performed class diagram 
prototype design tool kind automated reasoning support available athttp www cs man ac uk franconi icom 
consistency class diagram 
class diagram consistent classes populated violating constraints diagram 
observe interaction various types constraints may difficult detect inconsistencies 
exploiting formalization dlr consistency class diagram checked checking satisfiability corresponding dlr knowledge base 
class consistency 
class consistent populated violating constraints class diagram 
inconsistency class may due design error due constraining 
case designer forced remove inconsistency correcting error relaxing constraints deleting class removing redundancy diagram 
exploiting formalization dlr class consistency checked checking satisfiability corresponding concept dlr knowledge base representing class diagram 
class equivalence 
classes equivalent denote set instances constraints imposed class diagram satisfied 
determining equivalence classes allows merging reducing complexity diagram 
checking class equivalence amounts check equivalence dlr corresponding concepts 
class subsumption 
class subsumed class constraints imposed class diagram satisfied extension subset extension 
subsumption allows deduce properties hold 
basis classification classes diagram 
classification object oriented approach exploited ways modeling process 
subsumption classification checked verifying subsumption dlr 
logical consequence 
property logical consequence class diagram holds constraints specified diagram satisfied 
example consider generalization hierarchy depicted assume constraint specifies complete 
attribute defined mandatory classes 
cn follows logically attribute mandatory class explicitly diagram 
determining logical consequence useful hand reduce complexity diagram removing constraints logically follow ones hand explicit properties implicit diagram enhancing readability 
logical consequence captured logical implication dlr determining logical implication basis types reasoning dlr reasoning system provide 
particular observe reasoning tasks considered rephrased terms logical consequence 
proposed new formalization uml class diagrams terms particular formal logic family description logics 
long term goal exploit deductive capabilities dl systems showing effective reasoning carried uml class diagrams provide support specification phase software development 
step shown map constructs class diagram description logics 
mapping provides rigorous logical framework representing automatically reasoning uml class specifications 
started experimenting approach 
particular fact representing reasoning class diagrams 
fact incorporate features required formalization keys results encouraging 
particular able draw interesting non trivial inferences class diagrams containing classes 
experiments way plan report near 
aim extending formalization order capture aspects uml 
step direction add formal framework possibility modeling reasoning objects links instances classes associations 

bergamaschi nebel 
acquisition validation complex object database schemata supporting multiple inheritance 
applied intelligence 

calvanese de giacomo lenzerini 
decidability query containment constraints 
proc 
pods pages 

calvanese de giacomo lenzerini 
reasoning expressive description logics fixpoints automata infinite trees 
proc 
ijcai pages 

calvanese de giacomo lenzerini 
identification constraints functional dependencies description logics 
proc 
ijcai pages 

calvanese lenzerini nardi 
description logics conceptual data modeling 
chomicki saake editors logics databases information systems pages 
kluwer academic publisher 

clark evans 
foundations unified modeling language 
duke evans editors proc 
nd northern formal methods workshop 
springer verlag 

donini lenzerini nardi schaerf 
reasoning description logics 
brewka editor principles knowledge representation studies logic language information pages 
csli publications 

evans france lano rumpe 
uml formal modeling notation 
kilov rumpe simmonds editors proc 
oopsla workshop object oriented behavioral semantics pages 
technische universit nchen tum 

evans france lano rumpe 
meta modelling semantics uml 
kilov editor behavioural specifications businesses systems chapter 
kluwer academic publisher 

evans 
reasoning uml class diagrams 
second ieee workshop industrial strength formal specification techniques 
ieee computer society press 

haarslev ller 
expressive abox reasoning number restrictions role hierarchies transitively closed roles 
proc 
kr pages 

harel rumpe 
modeling languages syntax semantics stuff 
technical report mcs weizmann institute science rehovot israel 

horrocks 
expressive description logic fact fiction 
proc 
kr pages 

horrocks patel schneider 
optimizing description logic subsumption 
log 
comp 

horrocks sattler tobies 
practical reasoning expressive description logics 
ganzinger mcallester voronkov editors proc 
lpar number lnai pages 
springer verlag 

kirk levy sagiv srivastava 
information manifold 
proceedings aaai spring symp 
information gathering heterogeneous distributed pages 

mcguinness wright 
industrial strength description logic configuration platform 
ieee intelligent systems pages 

sattler 
terminological knowledge representation systems process engineering application 
phd thesis theoretical computer science rwth aachen germany 
