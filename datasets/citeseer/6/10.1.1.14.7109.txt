context free parsing regular approximation mark jan nederhof dfki germany 
show context free parsing realised phase process relying approximated context free gr mm phase finite transducer performs parsing approximation 
second phase approximated parses refined original grammar 
publication novel way transforming context free grammar new grammar generates regular language 
new language superset language 
argued approach advantages methods regular approximation 
method approximation 
define condition context free gram mars condition grammar generate regular language 
give transformation turns arbitrary grammar grammar satisfies condi tion 
transformation obviously language preserving adds strings language generated original grammar way language regular 
communication show procedure needs extended context free parsing realised phase process 
phase approximated grammar turned finite transducer 
transducer processes input linear time produces table 
second phase table processed obtain set parses original grammar 
order time complexity second phase cubic corresponds time complexity context free parsing algorithms practice 
phase filters parses inconsistent respect regular approximation 
may reduce effort needed second phase 
interesting note conceptually related regular lookahead context free parsing 
structure follows 
section recall standard definitions language theory 
section investigates sut cient condition context free grammar generate regular language construction finite transducer grammar 
transducer reads input output transducer turned representation parse trees discussed sections respectively 
algorithm transform grammar sufficient condition mentioned satisfied section 
section explains transformation incorporated construction transducer output transducer interpreted order obtain parse trees original grammar 
preliminary drawn empirical results section 
preliminaries context free grammar tuple finite disjoint sets terminals nonterminals respectively start symbol finite set rules 
rule form denotes 
relation extended relation usual 
transitive reflexive closure denoted 
language generated context free grammar set 
definition set free language 
reduction grammar mean elimination rules aa atb hold 
generally symbols range symbols range symbols range symbols range symbols range 
write denote empty string 
rule form called nit rule 
finite tuple finite set states initial state final states input alphabet transition relation finite subset define configuration element 
define binary relation configurations vw transitive reflexive closure denoted 
input recogn zed language accepted defined set strings recognized 
definition language accepted finite automaton called regular language 
finite transducer tuple 
input alphabet output alphabet 
transitions form iv 
finite transducers configuration element 
define binary relation configurations qp wl vl iv input wl associated output wl set pairs wx regular transduction represented transducer 
structure parse trees define spine parse tree path runs root leaf 
main interest spines lies sequences grammar symbols nodes bordering spines 
simple example set parse trees line grammar palindromes 
intuitively clear language regular grammar symbols left spine root communicate right spine 
precisely prefix input point meets final node spine determines point way unbounded quantity symbols prefix need taken account 
formal explanation grammar may generate regular language relies definition ii ii ii ii ii ii ii ii ii ii ii ii ii ii ii ii asa bsb ss si ss si si ss ss ss ss qs ss tl ss ss sis ss ss 
parse trees palindrome original grammar transformed grammar sec tion 
definition grammar self embedding aa order avoid somewhat unfortunate term embedding define strongly regular grammar grammar self embedding 
strong regularity informally means section spine parse tree repeats grammar symbols occur left section spine grammar symbols occur right 
prevents unbounded communication sides spine exemplified palindrome grammar 
prove strongly regular grammars generate regular languages 
arbitrary grammar define set re cursive nonterminals determine partition consisting subsets na 
nk mutually recursive 

vi ni vi nil aa alb ab define function recursive set left right self cyclic ni left ni right ni ni self ni ni cyclic ni ni ni abl ni ni ni abe ni ni recursive ni left ni consists left recursive nonterminals mean contain right recursive nonterminals case right recursion amounts application unit rules 
recursive ni cyclic unit rules take part recursion 
recursive ni self sufficient 
necessary condition grammar self embedding 
prove recursive ni left right cyclic gra generates regular language 
proof dif existing proof fully constructive presents algorithm creating transducer recognizes input strings language generated grammar produces output strings form discussed shortly 
process initiated start symbol process descends gram mar ways terminals encountered 
descending grammar straightforward case rules left hand side recursive nonterminal subautomata recursively members right hand side connected 
case recursive nonterminals process depends nonterminals corresponding set mutually left recursive right recursive ff means cyclic subprocess applied code cyclic left recursive subsets ni treated 
discuss case nonterminals left recursive cyclic 
new state created set 
transitions created terminals nonterminals ni connected way reminiscent construction left parsers lr 
output transducer consists list filter items interspersed input symbols 
filter item rule distinguished position right hand side indicated diamond 
part left diamond generates part input just left current input position 
part right diamond potentially generates subsequent part input 
string consisting filter items input symbols seen representation parse different existing representations 
point initial filter items set xi 

lx recursive ni right ni xl xl recursive ni right xr ni 
ni implies rule exactly initial filter item 
diamond holds rightmost position dealing right recursive rule 
example 
states labelled names procedure st states labelled qs 
explained fact nonterminal reached descending grammar essentially distinct ways 
ii ii ii ii ii ii ii il ii ii ii ii ii ii ii ii nn ii ni nn fresh state fresh state st 
procedure st qo ql ifa qo le ql elseif zl ala ql elseif fresh state fst qo st ql consist single nonterminal ni ni qs fresh state recursive right xm xm ni fresh state st qs 
el ql 
xmc ni ni fresh state st qs 
xm zi el qc au qo qa 
xm ni fresh state st qo 
xm zi el sx qb cx xm 
xm ni fresh state st qc 
xm el cx qb ii qa le ql recursive fresh state st qo ql 
procedure fresh state create fresh object return 

transformation tom strongly regular grammar finite trans ii 
tabular simulation finite transducers finite transducer obtained may turned deterministic transducer 
possible regular transductions aa sb bb cb left ri ht 
dld 
bb ala 

aa qb qa qs 
application code small grammar 
cob described means deterministic finite transducers 
case input processed simulating ic transducer tabular way 
assume finite transducer input string 
create tables 
table contains entries form qx ql entry indicates transducer may state qz reading position second table contain entries form ql 
entry indicates furthermore transducer may go state ql single step reading input position position producing output 
preferred way looking tables set states set transitions finite automaton subset initially 
repeated new elements added 
choose state ql transition ql 
add state transition ql 
define 
input recognized non empty 
language accepted set output strings 
associated 
continuing phases processing sections may reduce automaton may remove transitions contribute paths state 
simplifying discussion section assume transformed transitions satisfy iv 
running example may obtain finite automaton indicated thick lines 
transitions implicitly eliminated automaton reduced 
time demand construction ax 
linear measured size 
note general language accepted may infinite case grammar cyclic 
ii cos bl aa bb sb aa 

finite automaton resulting simulating transducer input thick lines subsequent table dotted items thin lines 
retrieving parse forest compact representation possible output strings discussed obtain structure input context free structure input mean collection parse trees 
tabular representation called parse 
particular kind parse forest table consisting items form states cl rule 
dot indicates far recognition fight hand side progressed 
precise meaning dotted item input symbols path derived 
note recognition fight hand sides done right left 
reversed order respect earley algorithm 
certain instance rule initial position dot position diamond corresponding filter item 
ways construct presentational reasons algorithm relatively simple style cyk algorithm 
initially empty 

perform new elements added choose tran add item ct 
choose transition ct item add item ti 
choose transition item aa add item 
choose pair items clb 
add item assume gr 
performed set recursive ni self 

add nonterminals ab ni 

add rules ni bb cy ym 
ym ni 
ni ba 
ni csy ym ym ym ni 
remove old rules form ni 

reduce grammar 

approximation transforming grammar 
items produced running example represented thin lines 
approximating context free language section sufficient condition generated language regular explained condition violated 
suggests change arbitrary grammar come satisfy condition 
intuition unbounded communication left right sides spines broken 
done transformation operates separately set ni recursive ni self indicated 
grammar strongly regular 
consider grammar palindromes left half 
approximation algo rithm leads grammar right half 
shows effect structure parse trees 
note left sides spines treated new nonterminal ss right sides new nonterminal ss 
example deals special case nonterminal lead recursive call 
general case complicated treated 
obtaining correct parse trees section discussed table resulting simulating transducer interpreted order obtain parse forest 
assumed transducer constructed grammar strongly regular 
case original grammar strongly regular approach task different way 
possibility apply grammar transformation previous section subsequently perform phase process 
approach results parse forest reflects structure transformed grammar original grammar 
second preferred approach incorporate grammar transformation construction transducer 
accepted language case approach symbols occur output carry information rules original grammar 
construction finite transducer needs changed indicated 
show part code deals case consists single nonterminal 
set ni recursive ni self treat ment applied 
encountering nonterminal ni recursive ni self consider structure grammar transformed 
transformation creates new sets recursive nonterminals treated depending may left recursive right recursive 
example fixed nonterminal ni recursive ni self set nonterminals ni form set transformed gram mar recursive right 
may construct transducer dictated case 
particular relates rules form ac ca ba 
note nonterminal form ac belong set say transformed grammar satisfies recursive right recursive cyclic 
similarly nonterminal form ca belongs set say satisfies recursive left recursive cyclic 
treatment nonterminals occurs deeper level recursion fst appears separate cases 
important remember sets ni refer nature recursion original grammar transformed grammar merely implicit construction transducer helps understand construction terms 
addition filter items set oe recursive ni self ni meaning largely unchanged regard section 
example rule ac 
corresponds rule ca 
transformed grammar filter item ac 
output indicates instance 
ym approximation thereof just read potentially preceded instance ac followed instance 
hand encountering rule ba artifact grammar transformation output symbol generated 
retrieving forest need take account additional form filter item 
steps required choose add 
choose add consist single nonterminal form ni recursive ne right left cyclic treatment elseif form ni recursive self implicitly replace ne qa fresh state qd fresh state ni 
ni ni fresh state jst qa ac 
ym 
ym qc ac 
ni 
ni 
ym ni fresh state st qa ca 
ym ac 
ym qe ate ne ni fst qa ba ql ate ba le qe elseif form de ne ni qa fresh state yz 
ni ym ni fresh state jst 
ym au ym ab 
ym cb tu ql bb ele jjb elseif form db ni ne qa fresh state 
ni ym fresh state fst 
ym au aa ca 
ym qo le bb ql consist single non recursive nonterminal treatment 
code changed deal arbitrary context free grammars 
ii choose aa add 
choose ct nid add add empirical results implementation completed 
initial experiments allow tentative conclu sions reported 
compared phase algorithm traditional tabular context free parsing algo rithm 
order allow fair comparison taken mixed parsing strategy applies set dotted items comparable section 
ass ming input steps choose add 
choose add 
choose aa add le 
choose add experiments taken grammar german generated automatically ebl considerable part self embedding 
transducer minimized finite automaton transition pair treated symbol pair ele treated empty string 
test sentences obtained random generator 
input sentence define number steps performed respective phases phase algorithm creation input second creation 
define tcf number steps performed direct construction table tabular algorithm 
concerning processes context free power viz 

observed majority cases reduction number steps 

reduction hundreds steps 
individual cases especially long sentences larger 
explained fact may states input sentence positions leads sharing computation 
adding cases leads higher numbers steps 
stage say implies phase idea useful 
refinements especially concerning reduction number states order enhance sharing computation explored 
context observe size repertoire filter items conflicting consequences complexity 
outputs filter items reduces recognizer 
consequently equal sentence length fact identical 
hand outputs types filter item determinization minimization difficult consequently yr may large may high 
parts research carried framework priority programme lan guage speech technology tst author employed university groningen 
tst programme sponsored nwo dutch organization scientific re search 
funded german federal ministry education science research technology bmbf framework verbmobil project iv 
responsibility contents lies author 

berstel 

conte free languages 
teubner stuttgart 

lang 

sta shared forests ambiguous parsing 
tth annual meeting association computational linguistics proceedings conference pages vancouver british columbia canada june 

chomsky 

note phrase structure 
information control 

chomsky 

certain formal properties grammars 
information control 


ii cohen 

lr regular grammars extension lr grammars 
journal computer system sciences 

earley 

context free parsing algorithm 
communications cm february 

evans 

approximating context free grammars finite state calculus 
th annual meeting association computational linguistics proceedings conference pages madrid spain july 

harrison 

formal language theory 
addison wesley 

des 

transducers grammars theories language 
theoret ical linguistics 

lang 

deterministic techniques efficient non deterministic parsers 
automata languages programming nd colloquium lecture notes computer science volume pages 
springer verlag 

langendoen 

finite state parsing phrase structure languages status read rules grammar 
linguistic inquiry 

langendoen 

new method representing constituent structures 
annals new york academy sciences 

mohri 

finite state transducers language speech processing 
computational lin 


nederhof 

generation random sentences 
natural language engineering 


nederhof 

regular approximations grammatical view 
international workshop parsing technologies pages massachusetts institute technology ber 

pereira wright 

finite state approximation phrase structure grammars 
roche schabes editors finite state language processing pages 
mit press 

rosenkrantz lewis ii 

deterministic left corner parsing 
ieee conference record th annual symposium switching automata theory pages 
ii ii ii ii ii ii il ii hi ii ii ii ii la ii 
