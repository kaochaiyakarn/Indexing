software practice experience vol 
may kibitz connecting multiple interactive programs don libes national institute standards technology bldg 
gaithersburg md summary expect programming language automating interactive programs 
people begun expect connect multiple interactive programs allowing new classes applications 
basic building blocks little scripting possible build applications quickly 
discusses general technique focusing particular example kibitz 
kibitz connects multiple sessions applications providing means consulting group editing cooperative tasks 
kibitz turn module building additional programs type 
kibitz demonstrate enable cron background processes call interact users guidance debugging 
owing program reuse approach avoids portability issues addressed solved existing programs 
kibitz special coding byte swapping structure encoding job control requires kernel modifications setuid permissions runs network deals multiple users job control sophisticated programs shells full screen editors 
key words automating interaction expect interprocess communication software reuse tcl programs designed interactively 
people inevitably want non interactive automated 
witness numerous variants ftp capabilities background ftp recursive ftp mirrored ftp performed ubiquitous interactive version 
usefulness connecting multiple interactive programs increasingly evident applications hard recognize traditional mind set 
example frequently asked questions list usenet newsgroup comp unix questions addresses question program monitor user terminal answer suggests hard wired tap programs require kernel modifications peek non portable data structures 
kibitz script written expect connects process keyboards screens people 
obvious allow person see typing receiving 
sophisticated uses possible allowing people edit document simultaneously 
received july john wiley sons revised november libes solving problem reuse existing programs create kibitz similar programs wanted write little new code possible striking balance code reuse portability efficiency 
unix philosophy encourages building larger programs smaller ones interactive programs traditionally considered building blocks expect implementation base able incorporate interactive unix tools non interactive ones 
expect tool automating interactive programs 
movie script expect scripts describe dialogues human possibly multiple programs 
expect includes programming language scripts take different paths dialogues 
programmatically describing dialogues possible automate interactive programs 
expect kibitz uses number interactive programs change 
example kibitz uses interactive unix utility write send message user 
contrast unix talk daemon dedicated write code wired 
reusing interactive programs write allows significantly decreased development time compared programming scratch 
time develop kibitz week 
estimate code re techniques described taken months produce program comparable quality 
kibitz short expect idiom connecting multiple sources sinks 
example connects output process input vice versa 
scripting language tcl 
fragment loop expect command waits input process 
processes introduced flag followed descriptors script process process 
language distinguish variable literals 
flag appears interaction occurs process identified variable spawn id allows scripts dealing single process omit constant process descriptor 
processes started spawn command sets spawn id side effect 

expect fragment connect process experiences described come unix environment apply environments 
referenced specific commands mentioned unix environment described unix manuals 
write interactive sense prompts information 
write started environment associated terminal 
behavior disabled considered interactive 
kibitz re introduces regular expression match input order successfully complete command 
expression matched associated action executed 
case send action sends characters process 
regular expression matches characters allowing program dispatch characters received single iteration 
complete script starts chess programs sends output 
uses idea idiom particular chess program outputs extra formatting stripped acceptable input 
script complicated formatting different depending program moves second 
problems demonstrate additional reasons interactive processes difficult building blocks 
kibitz uses slightly complicated version idiom 
fragment copies characters users shared process 
script interacts sources user user process 
user refers user input 
user input arrives sent process referred process 
user second user input 
similarly sent process 
users effectively control process 
output process sent users 
interacting process echoes keystrokes users see results keystrokes typed user 
cases regular expression wait characters input 
expect automatically provides descriptor corresponding user invoked kibitz 
descriptor called user 
default kibitz sets process command spawn env shell starts shell named user environment variable shell 
remaining problem descriptor user created 
described sections 

chess process plays ken thompson wrote chess program continues distributed versions unix 
libes 
kibitz excerpt connects users common process intra host communication communication second user requires way communications path way paths 
writing code required lot dealing system specific issues port numbers protocols servers course existing programs create communications paths paths inaccessible applications communication capabilities bundled 
example talk unix tool performs user user communications 
talk insists graphically formatting conversation 
inappropriate processes shells interest receiving user commands interspersed formatting characters 
telnet hand formatting different problem 
telnet requires side connection exist entertaining requests connections 
bootstrap problem solved existence daemon writing led extensive coding pointless possible reuse existing code 
solution uses fifos connect original kibitz process kibitz process started second user 
represents largest part script dedicated portability 
unix program create fifos located standard place file system users paths script explicitly search 
second user starts kibitz prompted write mentioned 

tcl procedure create fifo fifo unix abstraction way communications path 
kibitz prompt includes unique identifier avoid conflicts kibitz sessions 
unique identifier process id original kibitz process 
necessary second user appreciate prompt specifies exactly type 
second user sees message talk 
please type kibitz 
graphical view resulting process relationship shown 
inter host communication second user system necessary cross machine boundaries 
avoid building machinery handling networking kibitz creates communication path rlogin 
rlogin understands hostnames provides security rhosts reliable transport 
telnet rlogin normally works passwords preferred 
remote system prompts password kibitz intercepts prompt user understands remote system 
necessary rest interaction seen user bare prompt password confusing unfamiliar kibitz works internally 
waiting password prompt kibitz recognizes command prompt user shell 
different shells prompt differently kibitz uses regular expression matches variety common prompts 
kibitz send commands matching prompt 
users customize prompt longer matched default prompt pattern 
case users supply pattern distinguish prompt things printed login message day 
recognizing prompts common obstacle automating interactive applications 
storing pattern environment variable program 
prompt pattern definition specific kibitz 
remote login established users logically appear machine 
kibitz process started remote machine initiate rendezvous previously described method communication fifos 
possible prompting password starting connecting processes invisible users 
result illustrated 
displays pty pseudo terminal interfaces inserted 
pty interprocess interface provides semantics physical terminals enabling 
kibitz session users host libes 
kibitz session users hosts correct handling screen size attributes 
expect inserts pty interfaces automatically kibitz starts shared process rlogin 
purposes rlogin inserts remaining pty 
errors occur remote kibitz started computer exists name original kibitz detects reports back user 
normally original kibitz passes characters processes indicated 
possible remote kibitz need report problems initialization user exists name 
inappropriate remote kibitz pass error messages back original kibitz sent shared process 
original kibitz send user originally invoked kibitz 
avoid problem tiny band protocol kibitz processes 
remote kibitz running sends string 
tells original kibitz remote kibitz begun running 
remote kibitz sends presumably diagnostics sent directly back user original kibitz 
remote kibitz fails establish connection sent original kibitz having passed diagnostics user exits remote kibitz 
remote kibitz successfully establishes connection sends back meaning user data sent back shared process 
establishment process connections thing remaining define escape mechanism 
entering escape sequence user speaks directly expect interpreter perform job control band communications operations 
interaction style exactly mimics ubiquitous telnet user interface 

define escape mechanism user kibitz successful communications kibitz process closes connection local user request reading file kibitz 
applications approach kibitz provides model similar applications connect multiple interactive programs 
example experimented replacement unix learn program 
new version users interactions closely original 
instance job control vi fg bg taught script watch keystroke losing control matter user 
similarly telnet shell style history full screen editors taught 
application regression testing technique comparing program behavior program modified 
regression testing difficult apply interactive programs especially respect user interfaces 
experience user interfaces rarely specified ftp example 
ftp protocol defined user interface 
techniques described possible write script concurrently tests versions program user puts tandem 
script record entire interaction notations differ 
time user change viewing output different version 
application borrow front program 
example ksh unix shell sophisticated user interface includes ability automatically complete filenames edit command line emacs commands 
possible ksh syntactically semantically analyze commands 
user completed composition command passed program evaluation 
ksh input buffer cleared command 
technique enables simple program behave sophisticated user interface 
helpful deciding different interface styles adopt selecting implement great expense 
kibitz building block kibitz interactive program 
may re building block technique described build 
example expect script allows cron background process contact user request help 
option kibitz skips creation new process interact providing direct connection users suggested 
run cron script requests help user 
user acknowledges request script question dialogue hand complete control user 
imagine questions need password continue rd backup tape bad replace tell go 
cron process runs user privileges started system usually time 
conventional background process cron process controlling terminal lacks certain attributes real user interactive environment 
libes 
background process contact user assistance technique provides way experiment cron environment debug processes situ possible 
script works follows 
line runs interactive program 
expect interacts indicated ellipses eventually finds needs assistance 
attempts contact person running kibitz 
person responds script explains situation person 
possible script mediate access person process example script effectively joins interact command 
interact expect command connects output program input vice versa 
interact user essence talking directly troublesome process originally controlled expect cron 
user relinquishes control kibitz processes go away expect continues executing script 

technique connecting interactive programs general allowing arbitrary data transformation rearrangement data flow 
specific case kibitz demonstrates clean user interface 
underlying interactive programs entirely user view 
kibitz follows traditional user expectations rhosts authorization model providing 
user providing assistance cron process kibitz shell style job control 
seamless transparency users quite surprised find kibitz just script joining old programs brand new program 
kibitz aids communication users problem developers solution describe correctly 
developer assist user immediately mailing transcripts back forth 
developer user works account 
environment directory ironically kibitz flexible talk function talk designed kibitz supports interaction process 
talk 
connecting kibitz full screen editor allows conversation formatted automatically talk 
talk users edit conversation save read files carrying discussion 
functionality provided interactive process users choose 
comes networked connections approach described drawback initiating user account machines 
possible remedy server 
hand likelihood users unrelated hosts extremely low 
kibitz effectively allows second user masquerade user context particular application 
significant amount trust exist user attempts kibitz host different 
limitation kibitz applied existing data stream 
kibitz create new streams 
paramount debugging certain kinds problems 
contrast advise applied existing data streams highly non portable requiring kernel modifications network 
programming effort required written number scripts techniques described 
experience took man week create kibitz including debugging documentation 
production script kibitz lines 
half code dedicated handling error conditions third comments see table 
remaining lines handle usual overhead appropriately setting signals terminal modes domain name reflects lack high level commands decide possibly partially qualified hostnames equivalent local host domain names matter local names 
example unix command returns nis name hosts kibitz code digging order obtain internet domain name 
hostname similarly non standard returns 
kibitz building block allows scripts requiring lines code 
missing application dependent code earlier line script complete 
expect interpreter significant effort invested efficiency level system 
example commands variables hashed underlying tcl interpreter 
expect compiles commonly regular expressions 
actual kibitz code minor refinements increase perform libes table 
lines function comment blank lines copy loops process creation control cleanup fifo pipe creation cleanup domain name inter process handshaking argument processing informational user messages ance reducing interpretation expect statements loop shown compiled 
size performance statistics expect reported previously 
provided motivation described techniques connecting multiple interactive programs 
techniques straightforward portable substantially reduce programming time 
kibitz examples mentioned solve long standing problems unix environment 
time effort invested writing quite small due extensive reuse existing interactive programs 
availability design implementation expect kibitz paid government public domain 
author nist appreciate credit programs documentation ideas portions 
expect kibitz may ftp pub expect expect shar ftp cme nist gov expect kibitz mailed send mail message send pub expect expect shar quotes library cme nist gov supported national institute standards technology nist automated manufacturing research facility 
funded nist navy manufacturing technology program 
joe sun microsystems demonstrated technique front borrowing described 
university washington wrote kibitz server demonstrate possible avoid restriction forcing initiating user account machines 

ted frequently asked questions unix answers monthly posting comp unix questions questions nff ncl jp kyoto japan posted monthly 
kibitz 
keith advise attach user unpublished manual page october west pennsylvania 

don libes expect uncontrollable fits interaction proceedings summer usenix conference anaheim california june 

don libes expect scripts controlling interactive programs computing systems 

john ousterhout tcl embeddable command language proceedings winter usenix conference washington dc january 

john ousterhout tcl overview tool command language facilities unpublished manual page university california berkeley berkeley california january 

don libes regression testing conformance testing interactive programs proceedings summer usenix conference san antonio texas june pp 


jon postel joyce reynolds file transfer protocol ftp rfc network information center sri international menlo park california october 

morris david korn korn shell command programming language prentice hall englewood cliffs nj 
