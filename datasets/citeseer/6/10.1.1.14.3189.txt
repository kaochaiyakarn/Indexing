cps transformation flow information jens palsberg purdue university mitchell wand northeastern university december consider question continuation passing style cps transformation changes ow analysis program 
algorithm takes solution ow constraints program constructs linear time solution ow constraints cps transformed program 
previous studies question cps transformations ect duplicating code introducing ow sensitivity analysis 
algorithm property program point original program corresponding program point cps transformed program ow information 
carefully avoiding duplicated code ow sensitive analysis nd accurate analysis cps transformed program better worse accurate analysis original 
compiler needed ow information cps transformation ow information original program annotate program points algorithm nd rest ow information quickly having analyze cps transformed program 
simply typed calculus typability preserved cps transformation 
cps transformation 
call value terms meyer wand shown type answers de ned inductively 
purdue university dept computer science lafayette usa palsberg cs purdue edu 
college computer science northeastern university huntington avenue cn boston ma usa wand ccs neu edu 
function 
de nes cps transformation type information 
fact related system showed converse implication holds 
series papers suggested ow analyses analogous type systems 
natural ask question ow information preserved cps transformation 
show untyped calculus constants conditionals standard notion cfa ow analysis carefully formulated de nition cps translation ow information preserved re ected cps transformation 
precisely show accurate ow analysis ow analysis cps 
linear time computable transformation ow information 
algorithm property program point original program corresponding program point cps transformed program ow information 
algorithm change ow information merely extends cover new program points 
aside role answering theoretical question algorithm useful compiler needed ow information cps transformation 
analyzing cps transformed program cps transform ow information source program 
depending amount ow information generated doing transformation time linear size annotation faster cps transformed program time possibly cubic size transformed program 
hand certain typed programs heintze mcallester shown cfa ow information computed time 
programs reanalysis may attractive 
experiments needed get grip issues 
previous palsberg shown cfa ow information valid beta reduction 
note ow information need preserved beta reduction 
parallels types need preserved beta reduction 
range previous relationship cps transformation ow analysis 
previous studied frameworks somewhat di erent ow analysis preserved cps transformation see section detail 
necessary careful formulation analysis cps transformation avoid ects code duplication ow sensitivity 
independent studied framework somewhat di erent damian danvy shown result similar result section 
consider di erent cps transformation study terms intermediate results name expression 
section give informal account approach cps transformation ow information section algorithm main result 
section show preservation theorem ow types nally section discuss related 
summary approach principal diculty de ning cps transformation ow information cps transformed program contains program points counterparts source program 
main observation task manageable variant plotkin call value cps transformation introduced danvy filinski :10.1.1.44.7943
part de nition cps transformation scheme labeling expressions di erent danvy filinski 
label occurrences expressions source target programs function maps term topmost label 
labels cps transformed program chosen label abstraction source program label corresponding abstraction cps transformed program 
labels target program obtained applying label transformer label source program 
example denotes label computed label essential approach compute compute notation denote topmost label give informal explanation compute ow information new program points 
consider rst question applied 
answer suppose set labels application points tells source program applied 
suppose consider cps transformation application point labeled ga da sa hold value evaluating applied application point labeled general applied application points labeled labels set notation label transformers question applied 
result evaluating expression ga applied application points labeled labels set consider 
question labels abstractions applied consider program point 
argument abstraction sa set labels abstractions applied consider ga da sa suppose set labels abstractions applied source program 
due approach labeling set labels abstractions applied ga 
question set functions applied application labeled set consider 
question sa applied 
analyzed applied points express set labels algorithm cps transformation ow information expands observations give ow analysis cps transformed program 
main result initial algebra lab labels lab nite collection constant label symbols lab lab apologize mnemonic signi cance names unary operations 
write application say notice lab initial algebra unary operations ranges mutually disjoint disjoint set constant label symbols 
furthermore initiality implies operations injective example recover example language de ned grammar range set rst order constants includes true false 
construct conditional expression branches depending evaluates true false 
program closed expression 
range programs 
labels solely identify occurrences terms uence evaluation program 
function maps term topmost label study cfa style ow analysis 
program low denote powerset set labels abstractions occurring denote union set labels occurrences subterms set label abstraction label abstraction implicit label variable bound abstraction 
alternative name variable label prefer keep name label separate 
ow analysis total mapping low occurring bound abstraction labeled occurring occurring occurring notice constraints constants 
domain low ordered pointwise ordering functions induced set inclusion 
denote ordering 
program ow analysis computed time size program 
set ow analyses denoted 
example program true low ow analyses notice constraint abstractions forces map label set 
notice constraint variable occurrence equality inclusion 
choices lead ow analysis program see appendix chosen equality constraint enables simple proof theorem see 
function cps transforms program cps target term cps notice cps translation duplicate contexts conditional expressions done cps transformations compilers 
cps terms result cps transformation generated grammar simple tail tail simple tail simple simple tail tail grammar generate terms result cps transformation 
tighter grammars constructed hope grammar may help build intuition structure cps terms 
labeling occurrences subterms cps follows guidelines 
occurrence subterm label occurrence labeled occurs cps part subterm body labeled single occurrence labeled subterm result guidelines abstraction label applied application point labeled take argument continuation label applied application point labeled setting simply typed calculus consequences stated particularly succinct way see theorem 
guidelines enables succinct proofs particularly lemma see 
note cps low low cps occurrences subterms labeled distinctly true cps 
henceforth assume occurrences subterms labeled distinctly constant label symbols 
function 
transforms ow information program ow information program cps low 
cps low cps de nition table form 
program fx ux labels occurrences subterms fp fr fr fr ur occurring fq occurs uq occurs occurring fs occurring fj ft ft ft ft informal justi cation cases uq de nition explicitly implicitly section 
provide intuition cases 
notice cps interested ow analysis cps empty context applied ux initial continuation ow information result applying empty set ow information result applying continuation empty set ow information body continuation empty set fc 
abstractions occurring cps labels label list fag 
suppose occurs cps part subterm unique argument supplied abstraction label abstraction label fr notice cps contains redex ft cases ur follow easily cases explained 
need de nition state results 
cps low cps denote restriction 


computed linear time 
immediate case 
consider done case 
assume labels numbers interval ow information array linked lists labels 
require entry array contain information form syntax tree node label stems labels immediate descendants syntax tree 
represent dimensional array kinds derived labels de nition 
dimensional array easily attened dimensional array desired 
ll dimensional array single traversal representation 
main problem computing compute equal uq occurrence done label occurrence application nding entry element list extending list requires amount application linear size total amount linear size 
main results 
theorem 
cps 
cps 
proof 
see appendix theorem consider mappings 

functionalities cps 
cps ignore originally de ned larger domains 
theorem states basic relationships 

rst part theorem says 
followed 
identity 
second part theorem says analyze cps restrict result source term 
build analysis cps 
get result initial analysis cps 
reason 
chooses best solution labels cps nf 
theorem 

cps proof 
see appendix 

monotone functions satisfy theorem immediate consequence form galois connection cps theorem 
main result ow analysis program ow analysis cps proof 


form galois connection implies theorem 
flow types shown cfa style ow information maintained cps transformation 
parallels classical result typability simple types maintained cps transformation 
show typability ow types maintained cps transformation 
flow types studied tang jouvelot heintze wells muller turbak 
idea expression ow type set labels abstractions expression evaluate set labels application points abstractions applied 
consider ow types style generated grammar ranges set base types includes boolean range nite subsets lab 
types distinguished type answers 
type environment partial function nite domain maps variables types 
notation denote environment maps maps 
type judgment form means type environment expression type formally holds derivable nite derivation tree rules taken 
boolean boolean lab write similarly unary operations lab 
de ne cps transformation ow types de ne theorem 
fr fa fp fb proof 
induction structure derivation notice theorem corresponds rst half theorem 
counterparts rest results untyped case 
related nielson showed imperative language analysis continuation semantics precise analysis direct semantics 
similarly burn showed call name language cps transformation improve analysis 
sabry felleisen concluded gain precision examples solely due duplication analysis continuations 
example call site conditional continuation may duplicated possible path enabling separate analysis copy 
ow insensitive analysis transformed program corresponds ow sensitive analysis original 
contribution current attempt separate consequences cps transformation duplication 
sabry felleisen gave example cps transformation decreased precision analysis 
studied cps transformation call value language ow analysis 
example program bound cps transformation program bound bound continuation 
cps transformation analysis nds constant cps transformation analysis fails nd information 
analysis sabry felleisen operational interpretation program source program analysis rst reaches call site point gets bound gets bound 
analysis reaches call site new value merge old value new value 
value unchanged 
cps program analysis rst performs call gets bound gets bound 
little analysis performs call new value merge new value set consisting 
analysis performs call analysis applies continuations value merges results 
nal call get bound merge 
sabry felleisen state loss information due confusion distinct procedure returns 
example calls confused cps program 
operational nature process ow sensitivity analysis 
monovariant constraint ow analysis get result corresponding program points programs 
analysis monovariant exactly ow variable occurrence expression program 
notion getting getting 
source program ow variable ow variable solution constraints assigned merge 
confusion distinct procedure returns happens monovariant ow analysis source program cps program 
result supports sabry felleisen improvement analysis transformed program due duplication program points 
concluding remarks straightforward extend result language features 
experience sign rst proved result language conditional expressions codifying guidelines labeling occurrences subexpressions guidelines extend result conditional expressions 
statement proof lemma needed change proofs lemmas extended easily cover new cases 
results depend particular formulation cps transformation 
formulations cps transformation may derived applying administrative reductions cps terms 
solutions cfa constraints preserved administrative reductions 
may include extending results polyvariant ow analysis investigations ow information preserved call byname cps transformations 
acknowledgments fritz henglein didier emy helpful discussions 
bob muller joe wells macro formatting palsberg supported national science foundation faculty early career development award ccr 
wand supported part national science foundation ccr ccr 
appendix proof theorem theorem follows immediately lemmas 
proof lemma uses lemma 
lemma appendix lemma 
cps 
proof 
proceed case analysis expressions cps 
consider rst expression cps form bound abstraction labeled cases 
de nition conclude 
straightforward case analysis shows 
consider forms abstractions cps 
fx immediate de nition fag 
remaining case assumption de nition conclude 
consider forms applications cps consider turn 
desired property 

fp case analysis possibilities body shows form 
conclude fr 

fr case analysis possibilities body say abstraction label shows form 
notice argument property conclude ur 


suppose suppose cps 

conclude fq 

suppose 
cps 
conclude fs occurs uq 

occurs suppose 
cps 

conclude 

fj 
conclude ft 

suppose 
ft body say abstraction label satis es 

conclude 
consider nally conditionals cps 
lemma 
cps label occurrence subterm 
proof 
labels occurrence subterm cps expressions 
bound abstraction label 
ur 
variable occurrence labeled bound abstraction labeled ur 
conclude ur 
lemma 
cps 
proof 
proceed case analysis expressions consider rst expression form bound abstraction labeled bound cps abstraction labeled 
consider expression form 
consider expression form suppose 
need show cps expressions lemma 
follows observation body abstraction labeled labeled 
lemma 
uq 
variable occurrence labeled bound abstraction labeled uq 
follows uq 
lemma 
variable occurrence labeled bound abstraction labeled 
conclude 
consider nally expression form lemma bound 
appendix proof theorem straightforward show 
prove cps proof 
suppose cps 
proceed case analysis fx fag 
label abstraction 
conclude 
fy ux 
fl 
lemma 
occurs suppose 
lemma 
cps expression body abstraction cps labeled labeled 
conclude 
uq occurs occurs suppose occurs cps established 
gives uq 
fr cps follows 
ft cps follows 
fk ur label cps uq respectively established 

see case notice label variable bound abstraction labeled 
similar remarks apply cases 
conclude 
item proof notice constraint variable occurrence inclusion equality proof technique 
example ur ur ur derive 
appendix equalities versus inclusions full blown ow analysis total mapping low de ned way ow analysis occurring bound abstraction labeled 
theorem 
program full blown ow analysis ow analysis 

proof 
notice ow analysis full blown ow analysis 

second de ne occurring bound abstraction labeled 
ow analysis occurring bound abstraction labeled satis es see ow analysis notice satis es constraints variable occurrences 
notice remaining constraints occurs occurs constraints form may conditional statement form de nition ow analysis ow analysis ow analysis putting 
andrew appel 
compiling continuations 
cambridge university press 
daniel damian olivier danvy 
syntactic accidents program analysis impact cps transformation 
proceedings icfp acm sigplan international conference functional programming pages 
daniel damian olivier danvy 
cps transformation ow information part ii administrative reductions 
technical report rs brics university aarhus 
olivier danvy andrzej filinski :10.1.1.44.7943
representing control study cps transformation 
mathematical structures computer science 
olivier danvy jens palsberg 
eta expansion trick 
acm transactions programming languages systems november 
nevin heintze 
control ow analysis type systems 
proceedings sas international static analysis symposium pages 
springer verlag lncs glasgow scotland september 
nevin heintze david mcallester 
linear time control ow analysis 
proceedings acm sigplan conference programming language design implementation pages 
albert meyer mitchell wand 
continuation semantics typed lambda calculi 
proceedings logics programs pages 
springer verlag lncs 
burn 
continuation passing transformation interpretation 
proceedings imperial college department computing workshop theory formal methods 
flemming nielson 
denotational framework data ow analysis 
acta informatica 
jens palsberg 
closure analysis constraint form 
acm transactions programming languages systems january 
preliminary version proceedings caap colloquium trees algebra programming springer verlag lncs pages edinburgh scotland april 
jens palsberg 
equality ow analysis versus recursive types 
acm transactions programming languages systems 
jens palsberg patrick keefe 
type system equivalent ow analysis 
acm transactions programming languages systems july 
preliminary version proceedings popl nd annual sigplan sigact symposium principles programming languages pages san francisco california january 
jens palsberg christina 
polyvariant ow information intersection union types 
journal functional programming may 
preliminary version proceedings popl th annual sigplan sigact symposium principles programming languages pages san diego california january 
jens palsberg michael schwartzbach 
object oriented type systems 
john wiley sons 
amr sabry matthias felleisen 
continuation passing useful data ow analysis 
proceedings sigplan conference programming language design implementation pages 
yan mei tang pierre jouvelot 
separate interpretation control ow analysis 
proceedings tacs theoretical aspects computing software pages 
springer verlag lncs 
turbak allyn robert muller wells 
compiling polymorphic polyvariant ow types 
acm sigplan workshop types compilation june 
www cs bc edu muller postscript tic ps mitchell wand 
embedding type structure semantics 
proceedings popl nd annual symposium principles programming languages pages 
wells allyn robert muller turbak 
typed intermediate language ow directed compilation 
proceedings tapsoft theory practice software development 
springer verlag lncs 

