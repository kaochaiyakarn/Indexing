taming complexity biochemical models bisimulation collapsing theory practice mishra piazza courant institute mathematical science nyu new york watson school biological sciences cold spring harbor new york dipartimento di informatica universit ca di venezia italy dipartimento di matematica informatica universit di udine italy cs nyu edu mishra nyu edu piazza dsi dimi dsi 
biological systems modeled systems ordinary differential algebraic equations systems allowing study solutions behavior automatically suitable software tools plas octave matlab tm 
usually numerical solutions traces trajectories appropriate initial conditions analyzed order infer significant properties biological systems study 
variables involved traces span long interval time analysis phase necessitates automation scalable efficient manner 
earlier advocated experimented automata temporal logics purpose xs systems continue investigation deeply 
propose hybrid automata discuss notions bisimulation collapsing qualitative analysis temporal evolution biological systems 
compared previous approach hybrid automata allow maintenance information differential equations system standard automata 
notion bisimulation definition projection operation restrictions subset interesting variables possible reduced automata satisfying formulae initial ones 
notion collapsing introduced move simpler equivalent automata taming complexity automata number states depends level approximation allowed 
keywords biochemical models hybrid automata bisimulation collapsing 
emerging fields system biology sister field bioinformatics focuses creating finely detailed mechanistic picture biology cellular level combining part lists genes regulatory sequences objects annotated genome known metabolic pathways observations transcriptional states cell micro arrays translational states cell proteomics tools 
need arisen sophisticated mathematically founded computational tools capable analyzing models core system biology 
computational models implemented software packages faithfully exploiting potential trade offs usability accuracy scalability dealing large amounts data 
described part larger project progress provides partial evolving picture new paradigm computational biology 
consider scenario 
biologist trying test set hypotheses corpus data produced different ways vitro vivo silico experiments 
system biologist considering may piece pathway organism 
biologist access pieces information raw data stored temporal evolution biological system data may previously collected observing vivo vitro system simulating system silico mathematical model biological system biologist want formulate queries evolution encoded data sets 
example may ask system reach steady state increase level certain protein activate transcription 
clearly set numerical traces complex systems rapidly unwieldy wade increasingly larger numbers variables 
eventually models available large public databases foresee biologist test hypotheses silico setting expensive wet lab experiments 
biologist mix match models raw data coming public databases produce large datasets analyzed 
address problem proposed set theoretical practical tools xs systems allow biologist formulate queries simple way 
computational tool derives expressiveness flexibility power integrating novel manner commonly available tools numerical analysis symbolic computation temporal logic model checking visualization 
particular automaton semantics temporal evolution complex biochemical reactions starting representations sets differential equations introduced 
propositional temporal logic qualitatively reason systems 
speak qualitative reasoning preceding sentence intend describe abstracted reasoning process devoid quantitative information focus relation basic properties note simulating system silico requires mathematical model 
want consider case mathematical model unavailable biologist software system 
described atomic proposition may involve quantitative information property protein concentration reaching half initial value continue research computational models core approach 
bring techniques fields verification logic control theory maintaining trade need manipulate large sets incomplete data requirements arising needs provide mathematically founded system 
particular propose hybrid automata notions bisimulation collapsing 
hybrid automata equipped states embodying time flow initial final conditions allow maintenance information differential equations system 
notion bisimulation definition projection operation restrictions subset interesting variables provides way introduce reduced automata satisfying formulae initial ones 
notice idea potential notion bisimulation exploited just fruitfully context standard automata 
notion collapsing introduce serves dual purpose provides natural approach qualitative reasoning automata extracted analysis traces summarizing behavior second complexity automata terms size function levels approximation allowed 
cellular biochemical processes analyzed xs systems provide large set application examples framework 
order motivate choices modeling framework focuses detailed examination example system described leibler 
section study complex natural systems metabolism described chapter fully analyzed quorum sensing process studied 
conclude pointing analysis limited xs systems extended general hybrid system models 
related works survey different approaches modeling simulating genetic regulatory systems author takes consideration different mathematical methods including ordinary partial differential equations qualitative differential equations evaluates relative strengths weaknesses 
problem constructing automaton mathematical model general dynamical system previously considered literature 
particular investigated brockett approach certainly focused deals specific mathematical models systems 
move farther away purely discrete models adapt hybrid automata describe underlying biochemical behavior standard automata 
consequently able take advantage continuous component hybrid automata allowing quantitative information addition qualitative reasoning 
hybrid automata modeling simulation biomolecular networks proposed alur 
discrete component hybrid automaton switch different behaviors models considered biological system example depending concentration involved molecules 
hybrid automaton implemented charon 
case continuous component model permanence state depending values involved variables reactants discrete component enabling transition state 
model biological systems query temporal logics 
similar approach considered variant euler method applied order obtain symbolic representation system 
authors show symbolic model checkers nusmv dmc study system 
formalisms modeling biochemical systems notion concurrency explicitly involved reactants represented processes running parallel 
case kind concurrency implicit states automaton representing system values reactants evolutions represented 
setting context systems presenting basic definitions properties systems 
definition systems basically augmented set algebraic constraints 
constraints characterize conditions additionally satisfied system obey conservation mass relations definition system 
system quadruple dv iv de dv 
xn finite non empty set dependent variables ranging domains 
dn respectively iv xn 
xn finite set independent variables ranging domains dn 
dn respectively de set differential equations dependent variable form xi gij hij called rate constants set algebraic constraints form cj 
xn called rate constraints 
follows denote vector 
xn xn 
xn variables 
denote vector 
dn dn 
dn 
dn dn 
dn values 
similarly set variables xu 
dv iv denote vector variables denotes vector values du 
du 

dynamic behavior system simulated computing approximate values variables different time instants traces 
determine trace system necessary fix initial time values variables initial time final time tf step 
definition trace 
dv iv de system 

fn approximated solution system time interval tf starting initial values 
time step tf sequence vectors values tr tf 
trace interested parameters defining trace notation tr 
notice 
trace sequence values 
dn representing solution system time instants 
varying initial values variables obtain different system traces parameters tf notice restrictive consider traces having fixed time step theory develop adapted variable time steps 
simulations behavior system automatically obtained tool plas see 
fact plas takes input system approximates values system variables parameters definition specified 
output exactly trace describing behavior system 
example 
feedback system taken chapter plas see book examples feedback plc 
represents system inhibited independent input variable independent inhibitor degradation 
dv iv initial time initial values reactants time step tf final time 
simulating system plas values setting taylor method tolerance obtain trace 
due lack space values low precision decimal places omitted description states 
trace instance observe quantity tree steps 
solutions system nice properties 
admit derivatives intersect hyperplane xi 
problems xi 
case exponent instance form 
noticed corresponds fact reasonably high molecular concentrations adopt continuum models lend deterministic models lower concentrations discrete molecular interactions important deterministic models difficult obtain 
existence derivatives implies instant xi 
different exists unique solution interval solution extended holds variables different 
solutions obtained different initial values pass point possibly different times exist instants instants coincide 
consequence fact variable time explicitly occur differential equations 
just stated mathematical terms restated biological point view saying biological system modeled system reaches state evolution depend states system reaching system memory 
particular set traces property consequence 
proposition 

aj 
bi traces system obtained time step exist ah bk holds ah bk obviously proposition assuming approximation method obtain traces 
case traces equal 
property sets traces system implies known area model checking fusion closure see 
anticipate results rest consequences proposition hold time deal set traces satisfying 
formalize follows 
definition convergence 
set traces tr convergent traces 
aj 
bi belonging tr exist ah bk holds ah bk corollary 
tr set traces system obtained time step tr convergent 
example 
consider simple feedback system described example 
simulate trace example obtain 
exactly trace state 
xs systems basic idea xs systems introduced associate system finite automaton obtained suitably encoding set traces essentially trace encoded simple automaton states correspond trace elements values system variables observed step transitions reflect sequence structure trace exists transition state vi state vj consecutive trace 
trace involved process coinciding elements different traces correspond state automaton 
consider system set traces 
automaton derived system traces defined follows 
definition system automaton 
system tr set traces system automaton tr 
vn tr tr tr 
dn set states tr tr consecutive tr transition relation tr tr initial tr set initial states tr tr final tr set final states 
automata equipped labels nodes edges see 
labels nodes maintain information properties nodes labels edges impose conditions action represented edge see 
case system automata edges unlabeled label assign node name identifier node concentrations reactants state 
way system automata maintain qualitative information system instants corresponding steps 
say automaton deterministic node outgoing edge edge label case outgoing edge 
proposition get result 
proposition 
system tr convergent set traces automaton tr deterministic 
example 
trace shown example gives automaton omit values independent variables 
initial state left final state right 
trace example trace example obtain automaton initial states 
automaton represents fact steady state values globally reachable 
simulations system reach steady state independent initial values equal values state automaton reactants assumed 
language called automata systems simulation analysis language inspect formulate queries simulation results xs systems 
aim language provide biologists tool formulate various queries repository simulation traces 
essentially temporal logic language see english version ctl specialized set predicate variables aim ease formulation queries numerical quantities 
fusion closure sets traces see proposition corollary necessary order reflect behavior set traces temporal logic semantics see 
means formula true system automaton true set traces 
intuitively behavior traces approximated automaton traces reach state coincide 
example 
automaton example satisfies formula eventually means system admits trace certain point greater 
similarly satisfies formula eventually reaches steady state 
notion steady state plays fundamental role biological systems predicate steady state introduced language 
predicate satisfied system system automaton exists instant state derivatives equal zero system ends loop involving state 
unfortunately practical cases automata built sets traces enormous number states 
techniques proposed reduce number states system automaton projection collapsing 
definition projection 
system subset set variables trace tr 
aj projection tr sequence tr 
aj set traces tr projection tr set projected traces tr tr tr tr 
projected system automaton tr tr 
automaton tr usually states tr 
set traces tr satisfy convergence fusion closure 
furthermore automaton tr non deterministic 
introduce approximation formulae satisfied automaton tr satisfied set traces tr example 
simple interesting example consider system constructed leibler 
authors constructed mathematical model network interacting transcriptional regulators produced trace interaction traditional mathematical package matlab tm 
subsequently constructed regulators collected data vivo experiments order match predicted values 
particular contains proteins refer ci 
protein protein ci ci completing feedback system 
dynamics network depend transcription rates translation rates decay rates 
depending values rates system converge stable limit circle unstable 
system represents system rate values set way system converges stable limit circle 
simulate plas tf obtain trace automaton reaches loop shown left omit independent variables dotted lines represent fact intermediate states 
automaton satisfy eventually 
fact limit cycle reached values range interval precise system described system 
reasonably approximated system proved general theory 
notice automaton model built directly traces system 
fig 

automaton projected automaton 

formula false projected trace 
formula satisfied projected automaton partially depicted right 
fact projected automaton represents system possible certain instant variable assumes values interval 
collapsing operation defined way state removed trace behaves similarly previous derivatives computed approximated derivatives computed previous state see formal definition 
operation introduce approximation shown example 
example 
system dependent variables 
assume admits trace form assume derivative states similarly states 
applying definitions collapse states obtaining reduced trace formula eventually true trace false collapsed 
consider system example automaton partially represented left 
intermediate states dotted lines collapsed obtain automaton states satisfy formula eventually easy check formula satisfied system 
order avoid approximations obtain powerful flexible framework sections propose hybrid automata reformulation projection collapsing 
hybrid automata model systems notion hybrid automata introduced model specification language hybrid systems systems consisting discrete valued program finitely modes continuously changing environment 
definition hybrid automata 
hybrid automaton init inv flow jump consists components 
zk finite set variables 
zk denotes derivatives continuous change 
denotes values discrete change automaton nodes called control modes edges called control switches labeled init inv flow labels init inv constraints free variables label flow constraint free variables labeled jump constraint free variables example 
consider simple hybrid automaton 
init inv flow jump jump init inv flow initial state left 
state grows constant rate 
instants jump right state 
second state decreases jump state left 
usefulness hybrid automata widely proved area verification see 
order exploit expressive power hybrid automata properties deeply studied see specification languages introduced describe model checkers developed automatically verify temporal logic properties 
specification languages model checkers deal hybrid automata mention shift see hytech see developed berkeley university charon see developed university pennsylvania 
system automata introduced previous section quantitative information maintained values variables instants corresponding steps 
values instants steps lost 
situation particularly dangerous apply reduction operation collapsing 
novelty approach way circumvents problem continuous component hybrid automata maintain approximate information values variables steps 
introduce notations simplify definition hybrid automaton modeling convergent set tr traces system 
vectors 
xn 
vn notation denote conjunction 
xn vn notation similar meaning stands 
xn wn vn definition system hybrid automaton 
system tr convergent set traces consider system automaton tr 
system hybrid automaton built tr tr init inv flow jump 
xn dv iv automaton tr init inv flow jump notice definition state necessarily mean values variables exactly fact assume values particular grow linearly interval reach system jumps new state 
automaton tr rectangular singular automaton temporal logic ctl decidable class automata see 
model checker hytech check temporal formula satisfied tr 
tr deterministic require tr convergent tr deterministic 
notice information needed build tr encoded tr possible tr maintaining memory tr 
example 
traces feedback system examples obtain hybrid automaton shown 
state init inv flow init inv 
flow 
fig 

feedback hybrid automaton 
init inv flow jump jump left variable starts value decreases reaches value variable starts value grows reaches value 
jump second state 
reach state values variables stable system loops forever 
additional quantitative information stored state system hybrid automaton allows deeply investigate behavior system individual step 
see section process assumes additional relevance apply collapsing technique reduce number states 
invert interval wi vi 
bisimulation projection pointed example projection operation lead incorrect prediction reduced automaton 
order avoid problem define section projection operator notion bisimulation 
bisimulation equivalence relation preserving temporal logic formulae see obtained projected automata satisfy formulae original 
introduce notations 
condition init inv flow resp 
dv iv init inv flow resp 
denote consider conditions relative variables definition bisimulation 
tr system hybrid automaton 

xn subset variables 
relation bisimulation vr init init inv inv flow flow vr vr intuitively states bisimilar case variables values additionally system evolves way respect variables fact instance possible states variables values state evolves state variables incremented second evolves state variables decremented case wish identify states equivalent 
lemma 
exists unique maximum bisimulation equivalence relation 
jump jump proof 
part follows immediately fact bisimulation tr strong bisimulation tr nodes labeled part conditions defining hybrid automaton tr 
second fact consequence fact jump uniquely defined know init inv 
definition projected hybrid automaton tr 
tr init inv flow jump system hybrid automaton subset variables 
projected hybrid automaton tr vu iu fu init inv flow jump defined follows vu vu init init vu inv inv vu flow flow jump jump definition depend representative element class 
consequence definition far init inv flow conditions concerned lemma far jump conditions concerned 
familiar automata bisimulation reductions immediately recognize hybrid automaton tr hybrid automaton built bisimulation reduced automaton tr conditions defined variables automaton tr rectangular singular automaton ctl decidable 
deterministic bisimulation preserves determinism 
fact working deterministic automata implies bisimulation relation computed linear see time procedure defined 
far correctness reduction involved result 
proposition 
tl temporal logic fragment calculus 
formula tl involving variables tr satisfies tr satisfies 
tr satisfies tr satisfies 
proof 
part consequence fact strong bisimulation strong bisimulations preserve formulae calculus see 
second part consequence part fact tr basically hybrid automaton built tr example show difference tr tr difference basis correctness tr 
example 
consider system example 
part projected automaton obtain applying bisimulation shown left 
states coincide bisimulation 
fact state evolves state protein concentration decreasing second state evolves state protein concentration increasing 
projected automaton fails satisfy formula eventually 
correct system simulated reaches steady loop oscillates 
part projected hybrid automaton shown right 
init inv flow init inv flow fig 

bisimulation automata 
collapsing states init inv flow init inv flow section introduce definition collapsing trace 
definition similar equivalent 
fact consider difference derivatives calculated states degree growth step 
reformulation inspired hybrid automaton flow condition state derivatives calculated time step coefficients lines connecting values ones time step 
collapsing definition compact notation similar introduced section 
definition collapsing 

vector values 
tr 
aj trace obtained simulating system time step collapsing tr partition states tr blocks sub traces tr block formed states ai ai aj aj belong block aj aj ai ai 
collapsing operation difference derivatives computed elements trace 
consider collapsing criterion degree growth step 
practice definition requires lines connecting ai ai approximations lines connecting aj aj 
consequence obtain lines connecting ai ai approximations small lines 
particular result holds 
lemma 
block collapsing formed sequence states ai ai aj aj belong block aj aj ai ai 
proof 
restrictive prove result holds component 
ai ai 

easy prove ai ai ai ai ai ai ai ai 
hypothesis coef coef obtain coef ai ai coef coef ai ai coef 
observation get coef coef ai ai coef coef ai ai equivalent thesis 
trace tr vector partition state constitutes singleton class collapsing 
definition maximal collapsing 
collapsing tr 
say coarser block included block 
say collapsing maximal exist collapsing coarser 
uniqueness coarsest collapsing guaranteed 
give algorithm find maximal collapsing 
algorithm performs steps starts check collapsed case goes 
assume ai state collapse state algorithm starts block ai goes way 
proposition states maximal collapsing traces match state match 
proposition 
tr convergent set traces system tr set collapsed traces obtained applying trace tr maximal collapsing 
set tr convergent 
property sufficient guarantee set traces collapsing maximal collapsing set collapsed traces build automata hybrid automata defined previous sections 
fact pointed earlier correctness framework holds convergent sets traces 
statement imply automaton build set collapsed traces satisfies formulae original set traces satisfies formulae set collapsed automata derived traces 
example 
consider system trace example 
collapsed trace obtain hybrid automaton build trace states 
state call conditions inv flow eventually true automaton original trace 
similarly safely collapse states system obtain hybrid automaton states correctly satisfies formula eventually 
example shows additional information maintained hybrid automaton particularly useful techniques collapsing reduce number states 
case studies section case studies framework 
concerns metabolism pathway complexity candidate reasoning computational tools developed 
second quorum sensing process allows discuss extension framework admitting system description system 
metabolism revisit example metabolism described chapter fully analyzed 
pathway metabolism 
brief description key reactions follows reader invited examine detailed summaries contained literature referenced 
main 
linear cascade reactions converts imp 
imp central branch point metabolism pathway 
imp transformed amp gmp 
derivatives recycled hx xa 
xa ua acid 
addition processes appear salvage pathways serve maintain imp level levels 
pathways adenine combine form 
consequences malfunctioning metabolism pathway severe lead death 
entire pathway quite complex contains feedback loops cross activations reversible reactions ideal candidate reasoning computational tools developed 
sequence models metabolism alongside analysis identify discrepancies physically observed data amend current model order explain discrepancies 
show formulate queries simulation traces express various desirable properties absence undesirable ones model possess 
queries fail model marked examination experimentation correction 
consider final model metabolism 
silico experiment shows initial level increased fold steady state concentration quickly absorbed system 
level returns quickly expected steady state values 
imp fig 

metabolic scheme metabolism human 
reprinted full description 
concentration level rises hx level falls returning predicted steady state values 
prove final model correctly shows behavior proceed way 
simulate system normal conditions initial values 
way obtain concentrations imp hx 
reactants steady state 
particular imp hx 
ask simulate system conditions initial concentration equal initial concentrations reactants equal concentrations steady state steps second final time seconds 
formulate query steady state eventually imp imp eventually hx hx eventually imp imp eventually hx hx particular trace obtain respect imp hx form 
applying collapsing obtain hybrid automaton states correctly satisfies formula 
case obtain correct answer standard hybrid automaton 
concentrate attention hx consider part previous query relative eventually hx hx eventually hx hx 
clearly formula true trace 
fact trace respect hx form 

applying projection operation conclude formula false obtain loop state 
bisimulation correctly demonstrate formula true 
quorum sensing section extension framework allows system described system 
aim able capture reason complicated systems classically modeled hybrid automata 
extension implemented tool set requires automata composition operation needs investigated 
hybrid automata natural formal models mixed discrete continuous systems 
typical examples systems showing different continuous behaviors specific discrete values involved variables 
state hybrid automaton usually models continuous behavior set differential equations specified flow condition state transition models triggering mechanism jump condition allowing changing continuous model 
example mixed discrete continuous biological system quorum sensing process see 
cell density dependent gene expression process single cell able sense quorum minimum population unit bacteria achieved correspondingly certain behavior 
type cell cell signaling called quorum sensing phenomenon example kind process 
marine bacterium free living organism marine fish squid 
free living organism exists low density non lives high densities 
accumulation activator molecule responsible triggering production light 
bacteria able sense cell density detecting presence concentration 
natural way model different behavior cells hybrid automaton state mode represents specific behavior cell switching state ruled degree concentration 
introducing mathematical model describe details phenomenon controlled transcription lux genes 
shows lux region organized units operons ol operon contains gene encodes protein transcriptional activator system operon contains genes 
transcription produces protein required endogenous production ai 
genes code subunits 
genes code proteins fatty acid needed substrate 
gene encodes 
camp receptor protein crp plays important role controlling 
crp ai ai fig 

lux region 
biochemical network reactions cell shown works follows ai binds protein form complex binds lux box 
lux box transcriptional units contains binding site crp 
transcription promoter activated binding crp binding site transcription binding lux box 
growth levels camp crp inhibit transcription respectively 
ai crp fig 

biochemical network quorum sensing 
mathematical model quorum sensing proposed alur 
model hybrid automaton composed different states systems differential equations corresponding modes pos neg 
switching mode ruled degree concentration ai 
precisely mode corresponds low concentration ai ai ai bacterium mode pos positive growth corresponds increasing concentration ai ai ai ai mode neg negative growth corresponds high concentration ai ai ai 
complete description model refer 
systems differential equations associated mode alur model systems 
possible translate systems equivalent systems equipped linear constraints 
moment biologist simulate query system time 
system involved define looking behavior system conditions system reflect real behavior triggering conditions combining various systems 
idea automatically compose systems basis defined conditions 
essentially composition operation glue states different automata eliminate states specified conditions reflect real biological behavior 
coming back example simulating obtained systems separately possible build corresponding hybrid automata combined respect degree concentration ai obtain final hybrid model 
illustrates automata combined 
clearly depicted automata really reflect real system behavior 
pos fig 

final model 
described hybrid automata model analyze set traces representing behavior biological system 
automata give qualitative view set traces abstracting time instants allowing compact representation properties system easily investigated 
hybrid automata standard ones simplifies construction qualitative complete model biological system 
fact powerful techniques bisimulation projections collapsing safely applied hybrid automata order reduce number states 
particular bisimulation projection applied standard automata behavior collapsing operation respect verification temporal formulae strongly depends information stored state hybrid automata 
notice construction hybrid automata standard systems difficult modify framework order deal complicated systems systems differential equations change evolution system 
intend extend tool set directions integrate temporal model checking tools time frequency analysis tools capable identifying distinct modes system incorporate learning scheme approach keep track parametrized family automata order identify kinetic parameters system 

alur kumar mintz pappas rubin 
hybrid modeling simulation biomolecular networks 
hybrid neg systems computation control volume lncs pages 
springer verlag 

alur courcoubetis henzinger ho 
hybrid automata algorithmic approach specification verification hybrid systems 
grossman nerode ravn editors hybrid systems lncs pages 
springer verlag 

ll 
shift smart ahs language hybrid systems engineering modeling simulation 
conference domain specific languages santa barbara ca october 
usenix 

park mishra 
foundations query simulation system modeling biochemical biological processes 
proc 
pacific symposium biocomputing psb 

mishra 
xs systems extended algebraic differential automata modeling cellular behaviour 
proc 
int 
conference high performance computing 

mishra 
model building model checking biological processes 
cell biochemistry biophysics 
appear 


data base cellular signaling 
web site res 

brockett 
dynamical systems associated automata 
systems networks mathematical theory applications volume 
akademie verlag 

browne clarke grumberg 
characterizing finite kripke structures propositional temporal logic 
theoretical computer science 

fages 
symbolic model checking biochemical networks 
priami editor computational methods systems biology volume lncs pages 
springer verlag 

cimatti clarke giunchiglia giunchiglia pistore roveri sebastiani 
nusmv opensource tool symbolic model checking 
brinksma larsen editors int 
conf 
computer aided verification cav volume lncs pages 
springer verlag 

clarke grumberg peled 
model checking 
mit press 

degano 
casual pi calculus biochemical modelling 
priami editor computational methods systems biology volume lncs pages 
springer verlag 

degano priami 
casual calculus biochemical modelling 
dit university trento 


analysis abnormalities metabolism leading neurological man biochemical journal 


mathematical models metabolism man mathematical biosciences 

danos laneve 
graphs core molecular biology 
priami editor computational methods systems biology volume lncs pages 
springer verlag 

de jong 
modeling simulation genetic regulatory systems literature review 
dit inria 

podelski 
dmc user guide 


piazza 
fast bisimulation algorithm 
berry comon finkel editors proc 
int 
conference computer aided verification cav volume lncs pages 
springer verlag 

leibler 
synthetic oscillatory network transcriptional regulators 
nature 

emerson 
temporal modal logic 
van leeuwen editor handbook theoretical computer science volume pages 
mit press 

henzinger 
theory hybrid automata 
proc 
ieee symposium logic computer science lics pages 
ieee press 

henzinger ho wong toi 
hytech model checker hybrid systems 
international journal software tools technology transfer 

hopcroft ullman 
automata theory languages computation 
addison wesley 

james james 
control marine bacterium analysis dynamic lux 
mol biol 

karp riley paley pellegrini toole 
database 
nucleic acid research 

karp riley paley pellegrini toole 
ecocyc database 
nucleic acids research 

kegg database 
www genome ad jp kegg 

kitano 
systems biology overview 
science march 

kozen 
results propositional mu calculus 
theoretical computer science 

mcadams arkin 
simulation genetic circuits 

rev 

struct 

ller 
modelling verification linear hybrid automata 
mathematical computer modelling dynamical systems 

paige tarjan 
linear time solution single function coarsest partition problem 
theoretical computer science 

database 
www org 

regev silverman shapiro 
representation simulation biochemical processes calculus process algebra 
proc 
pacific symposium biocomputing psb pages 

baldwin 
transcriptional regulation genes 
mol 



computational analysis biochemical systems 
guide molecular biologists 
cambridge university press 

wit database 
wit mcs anl gov wit 
