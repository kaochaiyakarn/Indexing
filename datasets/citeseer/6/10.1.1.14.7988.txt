designing agent behavior extensible agent behavior specification language xabsl martin tzsch bach hans dieter burkhard matthias institut informatik lfg nstliche intelligenz humboldt universit zu berlin berlin germany mail bach hdb informatik hu berlin de 
specific behavior description languages prove suitable replacements native programming language number complexity behavior patterns agent increases 
xml extensible agent behavior specification language xabsl tries simplify process specifying complex behaviors supports design reactive long term oriented behaviors 
xabsl uses hierarchies behavior modules called options contain state machines decision making 
introduce architecture xabsl formalization architecture xml software library runs formalized behavior agent platform 
germanteam employed xabsl robocup sony legged league competitions fukuoka 
sony legged league humanoid league differs wheel leagues complexity physical actions employed interaction perception 
sony robots legs dof head dof 
kicking single kicking device middle small sized league allows lot different kicking skills legs body head require preparatory movements 
moving wheels different styles walking different situations 
wireless lan communication sony league cooperative strategies complex consequently require adequately formulated high level behavior 
perception sony robots need set perception behaviors 
field vision image quality quality sensors limited information collected time movement legs head coordinated current vision needs perception process needs supported methods active vision 
usually related behaviors merged movement skills 
huge set abilities results need complex behavior control architecture integrates behavior patterns 
modular deutsche forschungsgemeinschaft supports priority program cooperating teams mobile robots dynamic environments 
meaning behavior patterns reused different contexts 
support reactive realtime decision making long term deliberative behaviors 
set behaviors needs easy extend adding new behaviors side effects ones 
suited specifying agent behaviors 
especially extension maintenance complex behavior control systems may tedious error prone task 
high level behavior specification languages allow separation behavior design implementation agent platform 
related robocup leagues intentional cooperation pursuit long term strategic behavior remain challenge 
dynamics soccer agents act limited foresight 
teams robocup layered architectures relatively reactive behaviors basic skills lowest level cf 

ordering different behaviors layers allows follow different goals parallel 
behaviors higher levels invoke activate behaviors lower levels 
long architecture manage basic behaviors separation behaviors layers may sufficient 
experience difficult control basic behaviors hierarchies usage depends careful analysis situation require complex preconditions achieved performance needs considerable amount time 
attempts behavior languages order simplify process behavior development 
example golog logic robot control language :10.1.1.54.7045
employ uml state charts specifying multiagent systems 
follow layered state machine approach fixed number layers 
uml exists rich set easy adapt editors editing state charts 
state machines suited behavior modelling cf 

decision action executed depends environment state 
allows keep behaviors stable define behaviors avoiding oscillations sensor informations noisy 
main contributions flexible open hierarchical behavior control architecture 
consists state machines manage transitions new behaviors state situation 
flat architecture number transitions states increases fast number states 
options encapsulate limited number states transitions abstractness 
options form rooted directed acyclic graph 
section describe approach detail 
architecture introduce xabsl xml behavior language allows completely specify behavior autonomous agents 
xabsl part runtime system comes visualization debugging tools 
development robot control includes design hierarchy options implementation internal state machines 
extension means insertion new options graph 
xabsl supports tasks advantages xml technologies 
xabsl framework contains variety visualization debugging tools 
runtime system section executes behaviors written xabsl 
germanteam competes sony legged league national team consists separate teams german universities humboldt university berlin 
section shows xabsl employed team experiences competitions 
xabsl proven allow efficient integration program parts different groups 
possible develop new robot control different behaviors weeks 
developing agent behavior xabsl architecture xabsl architecture agent consists number behavior modules called options 
options ordered rooted directed acyclic graph option graph cf 
fig 
may expanded tree 
terminal nodes graph called basic behaviors 
generate actions agent associated basic skills 
task option graph activate parameterize basic behaviors executed 
root option active option activate parameterize option lower level graph basic behavior 
options activation behaviors lower levels done state machines cf 
fig 

state subsequent option subordinated basic behavior 
note states subsequent option basic behavior 
state decision tree cf 
fig 
transitions states leaves 
decisions agent world state sensory informations messages agents 
timing important time long state active time long option active taken account 
additionally state set special requests influence information processing determine robot point camera 
behavior specification xml previous robocup germanteam experience implementing architecture totally error prone stand goalie return goal goalie goalie playing go point position inside goal kick go ball option goalie playing clear ball kick get ball go ball stay goal return goal return goal position inside goal fig 

option graph simplified goalie simple example option graph developed germanteam competitions fukuoka contains options 
boxes denote options ellipses denote basic behaviors 
edges show option basic behavior activated option 
internal state machine option goalie playing 
circles denote states double circle initial state 
edge states indicates transition state 
dashed edges show option basic behavior activated corresponding state active 
charts generated automatically xml source fig 

comfortable 
source code large quite hard extend behaviors 
extensible agent behavior specification language xabsl developed simplify process specifying behaviors 
xabsl xml dialect specified xml schema 
reasons xml technologies defining new grammar scratch big variety quality existing editing validation processing tools xml editors able check xabsl document valid runtime possibility easy transformation languages general flexibility data represented xml languages 
behaviors specified xabsl easily visualized xslt 
note figures generated automatically xml source fig 
agents architecture described previous section completely described xabsl 
implemented language elements options states decision trees 
boolean logic simple arithmetic operators min max conditional expressions 
custom arithmetic functions part language easily defined instance documents 
independent specific software environments platforms formalization interaction software environment included xabsl defining symbols 
interaction means access input functions variables world state output functions set requests option goalie playing state get ball ball distance cm clear ball ball seen ball far away get ball return goal ball time seen ball seen ball distance ball kickable transition state clear ball ball distance ball far away transition state return goal transition state get ball transition state return goal fig 

decision tree state get ball 
graphical notation leaves tree transitions states 
dashed transition transition state 
pseudo code tree 
note charts generated automatically xml source fig 

parts information processing 
variable function shall conditions symbol defined 
example decimal input symbol name ball measure mm description absolute position field decimal input symbol name utility dribbling measure description utility dribbling passing kicking boolean input symbol name goalie jump right description ball right ahead rolls goal symbol ball simply refers variable world state agent utility dribbling stands member function utility analyzer goalie jump right represents complex predicate function determines fast moving ball headed right portion goal 
options symbols referenced 
example condition description ball decimal input symbol ref ref self plus decimal input symbol ref ref ball decimal value value plus condition transition state ref foo condition description clear right boolean input symbol ref goalie jump right condition transition state ref clear right 
developer may decide express complex conditions xabsl combining different input symbols boolean decimal operators implementing condition analyzer function referencing function single input symbol 
basic behaviors written prototypes parameter definitions specified xabsl document states 
xabsl behavior specification distributed files 
germanteam uses different xml files symbol definitions basic behavior definitions predefined conditions agents options 
helps larger teams behavior developers parallel 
easier keep overview agent version control system cvs easily 
developed tools generating different types documents xabsl instance document intermediate code executed see 
done embedded computing platforms sony aibo xml parsers available due resource portability constraints 
debug symbols containing names options states basic behaviors symbols possible implement platform application dependent debugging tools monitoring option state activations input output symbols 
extensive auto generated html documentation containing svg charts agent option state helps developers understand behaviors 
fig 
shows example xabsl source file 
details language xabsl web site contains complete language xml schema files examples 
runtime system running compiled behavior target agent platform runtime environment developed 
engine meant platform option name goalie playing initial state stay goal description goalie playing behavior state name get ball basic behavior ref go ball set output symbol ref head control mode value search ball decision tree condition description ball seen decimal input symbol ref ref ball time seen decimal value value condition condition description ball kickable decimal input symbol ref ref ball distance decimal value value condition transition state ref clear ball condition description ball far away greater decimal input symbol ref ref ball distance decimal value value greater condition transition state ref return goal transition state ref get ball transition state ref return goal decision tree state 
option fig 

example xabsl xml notation 
source code fragment state get ball cf 
fig 
option goalie playing cf 
fig 
shown 
application independent easily employed robotic platforms 
results variety helper classes adapted current software environment 
parses executes intermediate code 
links symbols xml specification options states variables functions agent platform 
symbol entity software environment registered engine 
example connects variable xabsl symbol ball ball options states represented xml basic behaviors written 
derived common base class registered engine 
engine provides extensive debugging interfaces able monitor option state activations values symbols parameters options basic behaviors 
executing engine root option single options basic behaviors tested separately 
complete documentation engine code xabsl web site 
fig 

scenes video round robin game team georgia tech fukuoka communication 
forward performs bicycle kick directed opponent goal 
second forward told wait front opponent goal able help kick fails 
positioning 
second forward tries dribble ball opponent half 
defender stays support forward 
forward waits opponent half pass 
application xabsl developed participation sony legged team humboldt university berlin paderborn 
approach chosen participation germanteam robocup fukuoka 
competitions germanteam won games cmu unsw 
strength team big set different behavior patterns 
instance players employed different kicks different situations 
bicycle kick method getting ball player previously turning ball 
cf 
fig 
kicks require different behaviors approaching ball 
better bigger ball distances require grab ball front legs 
varying ball handling behaviors chosen depending ball opponent half half left border right border front opponent goal 
xabsl proved suitable implementing integrating different abilities 
higher levels set team strategies communication implemented 
disadvantageous players try obtain ball robots negotiated handles ball stays waits pass cf 
fig 

state architecture xabsl simplifies developing strategies 
robot sends option state activations automatically robots players know plan 
wireless communication reliable strategies able resort non communicative behavior necessary 
complex positioning strategies employed 
player care area responsibility changed depending score number players distribution opponent players field cf 
fig 

xabsl state architecture continuous approaches easily integrated behaviors 
potential field employed determine optimal dribbling direction 
direction available options input symbol 
fuzzy logic basic behavior approaching ball implemented 
options continuous utility models state transitions 
hierarchical constitution xabsl allows short term reactive decisions deliberative long term decisions instantaneous 
lower behaviors option hierarchy responsible ball handling react instantly changes environment 
high level behaviors waiting pass positioning role changes try prevent frequent state changes avoid oscillations 
altogether germanteam implemented different options games fukuoka 
team members involved developing tuning behaviors 
modular approach xabsl easy extend advance behaviors 
new options easily added existing ones having negative side effects 
better solutions existing options developed parallel easily compare previous ones 
outlook approach behavior design teams autonomous agents hierarchical state machines 
extensible agent behavior specification language xabsl xml dialect allows conveniently develop behaviors architecture 
show germanteam employed language develop complex team behaviors robocup competitions sony legged league 
language code library independent software platform germanteam uses 
relatively easy employ xabsl robotic platforms code library open source publicly available website 
current developments behavior architecture aim supporting pre deliberation long term strategies take place parallel real time execution strategies 
done adopting double pass architecture developed simulation league team humboldt group 
double pass architecture annotates option hierarchies deliberation pass intended desirable inapplicable executes resulting plans second pass commitment approach 
accommodation additional condition types different run time requirements ask extensions xabsl 
acknowledgments authors members germanteam especially uwe jan hoffmann max filling xabsl framework content thomas fer technical advice 

arai 
multiagent systems specification uml statecharts aiming intelligent manufacturing 
proceedings st international joint conference autonomous agents multi agent systems castelfranchi lewis johnson eds pages 
volume 
arkin 
behavior robotics 
mit press 

bray paoli sperberg mcqueen maler 
recommendation extensible markup language xml second edition 

www org tr rec xml 


burkhard bach berger 
mental models robot control 
beetz eds advances plan control robotic agents lecture notes artificial intelligence pages 

clark 
recommendation xsl transformations xslt version 

www org tr xslt 

kwok meyers fox 
team description uw 
robocup robot soccer world cup vi gal kaminka pedro lima rojas eds lecture notes computer science 
appear 

hm heintz berg 
team description 
robocup robot soccer world cup iv stone balch eds number lecture notes artificial intelligence pages 

tzsch fer 
german team 
robocup robot soccer world cup vi kaminka lima rojas eds lecture notes computer science 
detailed www tzi de papers germanteam pdf 

fallside 
recommendation xml schema part primer 

www org tr xmlschema 

levesque reiter lesperance lin scherl 
golog logic programming language dynamic domains 
journal logic programming 

tzsch 
xabsl web site 

www ki informatik de xabsl 

murphy 
ai robotics 
mit press 


specifying rational agents statecharts utility functions 
robocup robot soccer world cup birk coradeschi eds number lecture notes artificial intelligence pages 
