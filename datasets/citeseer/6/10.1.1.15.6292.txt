edge disjoint paths revisited chandra chekuri sanjeev khanna approximability maximum edge disjoint paths problem edp directed graphs seemingly settled omega gamma gamma hardness result guruswami approximation achievable natural lp relaxation greedy algorithm :10.1.1.55.2776
number edges graph 
observe hardness approximation shown applies sparse graphs expressed function number vertices omega gamma gamma hardness follows 
hand approximation algorithms guarantee sub linear terms approximation algorithm dense graphs 
note similar gap exists known results integrality gap natural lp relaxation omega gamma lower bound upper bound 
motivated discrepancy upper lower bounds study algorithms edp directed undirected graphs obtaining improved approximation ratios 
show greedy algorithm approximation ratio min undirected graphs ratio min directed graphs 
graphs give log approximation lp rounding 
sub linear approximation ratios edp 
results extend edp weights unsplittable flow problem uniform edge capacities 
consider studied edge disjoint paths problem edp 
instance edp consists directed undirected graph set kg source sink pairs objective connect maximum number pairs edge disjoint paths 
edp classical np hard problems addition having applications notably vlsi routing problem central importance combinatorial optimization graph theory 
consequently substantial effort gone understanding approximability problem special cases generalizations 
see bell labs mountain ave murray hill nj :10.1.1.55.2776
mail chekuri research bell labs com 
dept cis university pennsylvania philadelphia pa 
email sanjeev cis upenn edu 
supported part alfred sloan research fellowship nsf career award ccr 
extensive literature 
general graphs refer directed undirected instances explicitly indicate 
best known approximation ratio general graphs number edges graph :10.1.1.55.2776
essentially approaches algorithms obtain upper bounds general graphs randomized rounding fractional solution natural multicommodity flow relaxation greedy algorithm 
refer lp approach greedy approach 
denote optimal solution lp relaxation instance opt denote integral optimum value instance 
clear opt 
best known results edp summarized 
lp approach srinivasan shows randomized rounding obtains maxf paths average length flow paths lp solution 
stein show similar bounds greedy algorithm obtaining maxf opt opt opt paths number edges average length paths respectively optimum solution 
edp directed graphs appears fundamentally harder undirected graphs 
example directed graph problem deciding pairs connected disjoint paths np hard 
undirected graphs fixed robertson seymour gave polynomial time algorithm decide set pairs connected disjoint paths 
algorithm highly non trivial requires extensive machinery graph minors 
surprisingly fairly simple algorithm problem directed acyclic graphs 
known edp apx hard 
guruswami simple reduction pair decision problem mentioned showed np hard approximate edp directed graphs omega gamma gamma factor fixed 
independently ma wang showed complex indirect reduction maximization version label cover problem edp directed graphs omega gamma log gamma hard 
hardness result stronger observe instances generated construction acyclic reduction uses graphs cycles essential way 
glance appear complexity directed edp resolved 
true parameter expressing approximability edp 
hardness approximation shown applies sparse graphs 
expressed function number vertices graph hardness approximation obtained omega gamma gamma 
obvious question ask obtain approximation edp directed graphs 
particular approximation algorithm 
positive answer question settle approximability problem simultaneously improve current ratio graphs super linear number edges substantial factor dense graphs 
furthermore answering question help understand right parameter express approximability results edp 
note vertex disjoint paths problem special case edp directed graphs essentially tight theta approximability threshold established 
progress answering question positive obtaining approximation edp directed graphs 
directed acyclic graphs obtain log approximation 
undirected graphs obtain approximation 
sub linear approximation guarantees problem 
overview results techniques set results analysis greedy algorithm edp iteratively picks shortest path pairs show greedy minfn mg approximation algorithm undirected graphs minfn mg approximation algorithm directed graphs 
upper bound approximation ratio greedy known observations greedily chosen path short edges result removal paths fixed optimum solution long omega gamma edges graph capacity route pairs residual graph 
key observation underlying analysis greedy algorithm short paths capacity graph route additional pairs strongly diminished suggested counting argument 
tarjan showed simple unit capacity directed graph vertices maximum flow shortest path distance analysis greedy algorithm question 
unit capacity graph kleinberg defined online bounded greedy algorithm picks pair long shortest path parameter analysis fact bounded greedy algorithm greedy algorithm defined natural offline algorithm 
set ordered pairs dist 
maximum multi commodity flow pairs show simple counting argument undirected graphs maximum flow 
argument generalize directed graphs 
different idea karloff rabani directed show exists cut value separates pairs course implies maximum flow 
bounds establish greedy algorithm translated similar upper bounds integrality gap natural lp formulation 
able improve gap known upper bound lower bound omega gamma 
show greedy algorithm improved approximation undirected graphs graph uniformly dense 
particular show graphs minimum degree ffi greedy yields ffi approximation 
ffi omega gamma gamma obtain approximation 
analysis case uses charging scheme different general case 
show infinite family undirected directed graphs approximation ratio obtained greedy omega gamma analysis greedy tight undirected graphs 
second result edp directed acyclic graphs 
graphs obtain log approximation 
establish upper bound lp integrality gap matching log factor omega gamma lower bound applies acyclic graphs 
recall omega gamma log gamma hardness shown acyclic graphs 
note omega gamma lower bound approximation ratio greedy applies acyclic graphs show lp approach stronger natural class directed graphs 
show congestion paths allowed obtain log bound general graphs 
congestion paths bound known obtain result byproduct algorithm acyclic graphs 
underlying idea algorithms novel describe 
difficult case existing approaches edp paths chosen optimal algorithm omega gamma long 
address case follows simple counting argument shows paths vertex high congestion paths go 
order take advantage observation introduce restricted class instances call separable instances 
informally speaking instances property vertex set partitioned sets containing sources variants multi commodity flow maximum concurrent flow maximum sum multi commodity flow 
concerned sum multi commodity flow 
sinks common vertex sets paths pairs share bottleneck vertex instances naturally define single source disjoint paths problems 
approach obtain log approximation separable instances 
acyclic graphs vertex naturally defines separable instance key obtaining approximation 
general graphs similar idea works get congestion paths 
observe obtain paths intersect restricted fashion believe obtain improved ratios undirected graphs 
results conjecture 
conjecture approximation edp 
lp integrality gap theta 
extensions concentrate basic edge disjoint paths problem ideas extend generalizations problem 
particular loss additional logarithmic factor approximation ratio straightforward extend results weighted edp pair weight associated goal find maximum weight set pairs routed 
show bounds hold uniform capacity unsplittable flow problem pair demand associated edges identical capacity 
organization start describing multicommodity flow lp relaxation edp section 
section new analysis greedy algorithm upper bound lp integrality gap 
show greedy algorithm get stronger approximation guarantees underlying graph large minimum degree 
section describe log approximation directed acyclic graphs 
obtain result formalize notion separable instance show approximation separable instances translates approximation edp directed acyclic graphs 
section give lp approximation algorithm separable instances 
section describes extension uniform capacity unsplittable flow problem 
section concluding remarks explore ideas sections potentially extend general case 
preliminaries edp natural ip formulation multicommodity flow 
give path formulation convenience equivalent compact flow formulation 
denote set paths path binary variable indicates chosen solution 
pair variable indicating pair chosen connected 
relaxing final set constraints obtain lp relaxation shall refer lp mcf fractional solution shall refer value solution 
shall say solution uses flow path 
optimal solution lp mcf obtained polynomial time standard techniques 
simple efficient combinatorial methods obtain approximation known 
max greedy algorithm show studied greedy algorithm gives approximation ratio undirected disjoint paths problem approximation ratio directed case 
algorithm simply considers shortest path length pair connects pair minimum shortest path length shortest path 
earlier analysis greedy algorithm fact minimum path length pairs exceeds certain bound say opt route pairs 
show large capacity network route pairs case restricted suggested bound 
particular show undirected case optimal solution route pairs directed case route pairs 
bounds apply fractional optimum result allow obtain sub linear bounds integrality gaps natural lp formulation described preceding section 
start establishing bounds 
theorem 
simple unit capacity undirected graph collection source sink pairs shortest distance source sink 
value maximum fractional multicommodity flow pairs bounded 
proof 
call vertex high degree vertex degree strictly greater low degree 
claim pair path low degree vertices 
follows fractional flow path carrying flow consumes omega gamma delta capacity incident low degree vertices 
total fractional flow supported total capacity incident low degree vertices bounded 
prove claim contradiction 
suppose exists path connects pair low degree vertices 
consider breadth search tree rooted layer denote set vertices distance easy see edge connects vertices layer adjacent layers 
claim layers layers consist low degree vertices 
suppose 
partition layers blocks contiguous layers block consists vertices layers discard blocks contain layer consisting low degree vertices 
assumption blocks discarded remain blocks 
blocks disjoint remaining blocks contains vertices altogether 
consider high degree vertex middle layer block edges go vertices block 
contradiction 
layers consist entirely low degree vertices 
path cross layers hit low degree vertex layer 
claim theorem follows 
preceding argument extend directed case 
technical difficulty breadth tree vertex directed graph forward arcs non adjacent layers back arcs non adjacent layers 
easy construct graphs degree outdegree vertex omega gamma exists pair shortest path distance omega gamma 
directed case different argument part inspired algorithm analysis karloff rabani directed multicut problem 
find cut lp relaxation find cut fact pairs far apart graph 
theorem 
simple unit capacity directed graph collection source sink pairs shortest distance source sink 
exists cut size separates pairs value maximum fractional multicommodity flow pairs bounded 
proof 
pairs ordered say path mean directed path separating imply separated show exists set size deleting edges separate source sink pair construct set iteratively follows 
initialize 
denote residual graph iteration pick pair contains path 
breadth search graph layer denote vertices distance partition layers blocks adjacent layers ith block consists vertices layers assumption occurs block 
consider blocks contained blocks blocks blocks disjoint exists block blocks total number vertices exceed 
include edges block edges go layer total number edges 
remove edges clear path iterate pairs left separate 
argue total number iterations exceed 
combined fact remove edges iteration gives desired bound consider iteration separates pair shortest path arguments clear separate separate particular separate note path vertex reach vertex iteration 
sets contain vertices iteration separates omega gamma pairs vertices connected iteration 
total number iterations 
show theorems obtain tighter bounds performance greedy algorithm 
purpose analysis find convenient variation algorithm terminates soon minimum shortest path length pairs exceeds certain bound say 
clearly unrestricted greedy algorithm dominates performance restricted version 
analysis applies undirected directed graphs 
necessary explicit directed undirected nature underlying graph 
set paths chosen greedy algorithm 
fix optimal solution say opt 
denote set pairs routed opt greedy algorithm 
path shares edge path charge path greedy solution 
denote set paths accounted manner 
clearly jo jsj 
def subgraph remains termination greedy algorithm 
applying theorems graph follows jo undirected case directed case 
choosing threshold undirected case threshold directed case gives result 
theorem 
edp greedy algorithm gives approximation undirected graphs approximation directed graphs 
lower bound greedy show performance ratio greedy omega gamma undirected directed edp 
analysis asymptotically tight undirected setting 
theorem 
exists infinite family directed undirected instances approximation ratio achieved greedy algorithm omega gamma 
directed instances family acyclic 
proof 
describe family instances greedy algorithm may routing path exists solution size omega gamma 
focus directed case underlying undirected graph serves lower bound example undirected case 
instance consists layered graphs say contains layers vertices 
notational ease layers layers vertex connected vertex connected similar way 
graphs connected follows 
odd pick representative vertex say pick representative vertex say add edges gamma assume loss generality 
source sink pairs set completes description instance 
see 
observe source sink path length gamma instance 
suppose greedy algorithm chooses connect pair path gamma note path shortest path 
simple modification graph ensure path unique shortest path pairs 
remaining source sink pairs disconnected residual graph pairs routed greedy 
hand claim optimal algorithm route omega gamma pairs 
notice choice source sink pairs suffices show cut separates capacity omega gamma 
yq xq lower bound instance greedy algorithm 
vertices proof 
order show convenient imagine super source vertex connected edges infinite capacity super sink vertex vertices connected edges infinite capacity 
argue cut capacity 
consider cut 
suppose exists layer js 
consider smallest index occurs 
js gamma easy see capacity cut done 
may assume js similar argument implies jt suppose contains representative vertices preceding condition vertex neighbors capacity cut 
gamma representative vertices similar argument shows gamma representative vertices implies capacity cut 
integrality gap lp formulation preceding analysis greedy algorithm obtain improved upper bounds integrality gap lp mcf directed undirected graphs 
best previous bound 
lower bound omega gamma known directed acyclic graphs remains open matching upper bound exists 
shortly see section question answered affirmative directed acyclic graphs 
theorem 
integrality gap lp mcf undirected graphs directed graphs 
proof 
undirected case directed case 
feasible fractional solution consider subgraph contains edges positive fractional flow 
run restricted greedy algorithm terminate shortest path length pair exceeds 
set paths chosen greedy 
focus pairs fractionally routed fractional solution greedy 
fix decomposition fractional solution fractional flow paths discard flow paths pairs routed greedy algorithm 
fractional flow path intersects path charged clearly total flow flow paths charged manner bounded jsj delta 
consider residual graph consists edges intersect unaccounted fractional flow path strictly contained total fraction flow routed bounded theorems 
putting get claimed bounds 
note algorithm theorem ignores flow paths fractional solution 
contrast randomized rounding techniques route pair flow path pair provided fractional solution 
undirected dense graphs show dense graphs graphs minimum degree large greedy algorithm gives improved approximation ratios 
analysis case differs general case 
specifically show pair routed optimal solution routed greedy pass heavily vertex greedy solution 
result account pairs charging paths greedy algorithm pass heavily vertices 
theorem 
approximation ratio greedy algorithm ffi undirected graphs minimum degree ffi 
particular graphs minimum degree omega gamma gamma approximation ratio greedy 
proof 
restricted version greedy stops shortest path length exceeds certain bound bound ffi 
termination restricted greedy denote residual graph 
partition vertices sets saturated ratio degrees vertex called saturated degree half initial degree 
set paths chosen greedy algorithm 
fix optimal solution say opt denote set pairs opt connected greedy 
saturated vertex define subset paths pass vertex path passes saturated vertex simply charge path set clearly saturated js paths charged set manner 
hand js ffi jsj 
account ffi jsj paths manner denote set 
consider def path passes vertices degree ffi elementary result graph theory shows connected graph minimum degree ffi diameter ffi 
pair connected path length ffi 
contradicts fact greedy algorithm terminated 

putting jsj ffi jsj theorem follows 
theorem hold directed graphs reasons similar mentioned theorem 
approximation acyclic graphs section obtain log approximation algorithm edge disjoint paths problem acyclic graphs lp relaxation 
able match log factor known lower bound omega gamma integrality gap 
large class general graphs result provably demonstrate lp provides asymptotically better approximation ratios greedy algorithm 
contrast randomized rounding approaches algorithm routes pairs paths necessarily provided lp solution 
main idea describe key high level idea algorithm 
obtain approximation algorithm sufficient restrict instances shortest path omega gamma long 
greedily route pairs short paths remove 
opt number paths optimal solution instance long paths 
optimal paths constrained long share vertices 
particular straight forward averaging argument shows vertex omega gamma opt paths go assume knowledge enumerating vertices 
information help 
consider variant edge disjoint paths problem find maximum number pairs routed disjoint paths constrained go specific vertex show variant approximated acyclic graphs fact vertex set vertices reach directed paths set vertices reached directed paths disjoint 
particular variant edge disjoint paths problem mentioned induces separable instance 
call separable instance formally defined shortly 
section show log approximation obtained separable instance lp rounding 
guessing route omega gamma opt pairs leads promised approximation 
define separable instance 
definition 
instance edp problem pairs 
instance separable partition induced graphs ffl fvg ffl ffl note separable instance paths go see 
instance edp acyclic graph vertex subgraph induced vertices reach similarly subgraph induced vertices reached acyclic share set pairs routed restrict pairs 
doing naturally obtain separable instance edge disjoint paths problem note path goes preserved new separable instance 
section show result 
theorem 
separable instance maximum edge disjoint paths problem partition polynomial time algorithm finds omega gamma log disjoint paths value feasible lp mcf solution formally describe approximation algorithm acyclic graphs theorem 
algorithm threshold specified analysis 
algorithm acyclic dp 

kg 

exists path jp greedy phase add remove 
remove edges graph 

residual graph 
max 

vertex separable phase approximately solve separable instance induced set indices paths routed 
max js set max js set 
output phases algorithm 
step implements greedy phase remove paths long short length 
set pairs routed phase 
step implements second phase solves separable instance vertex induced residual graph pick vertex results number paths routed 
set pairs routed phase 
analyze performance algorithm 
set pairs routed fixed optimal solution 
set pairs partition sets follows 
pair path optimal solution intersects path pair easily seen jo delta jsj path pair edges long 
recall algorithm description residual graph edges paths route removed 
claim easy see 
claim 
pairs routed paths long 
claim simple averaging argument get exists vertex jo paths go note ae set pairs step 
separable instance induced jo paths routed 
theorem algorithm route omega gamma jo log pairs 
theorem 
log approximation edge disjoint path problem acyclic graphs 
furthermore lp integrality gap log 
proof 
arguments jo delta jsj jo cn log sufficiently large constant choosing log obtain jo jo jo log jsj js constant obtain desired approximation 
algorithm greedy phase lp solution 
possible argue similar lines feasible lp solution establish bound log lp integrality gap 
omit details version 
approximating edge disjoint paths separable instance section prove theorem 
properties single source flow problem important way 
start preliminary lemma guarantees near optimal feasible solution lp mcf additional properties 
lemma 
instance edp feasible fractional solution lp mcf value exist absolute constants ff fi feasible solution lp mcf ffl exactly flow path ffl ff log ffl fio log integer 
solution computed polynomial time 
proof 
give feasible solution flow decomposition randomized rounding standard way 
exists absolute constant ff high probability get integral solution flow edge log ff 
furthermore value solution obtain feasible fractional solution scale integral solution log ff factor flow edge 
solution satisfies requirements lemma integrality scaling factor changed slightly ensure property 
single source flows directed undirected graph single source terminals finding maximum number disjoint paths terminals easy 
reduce standard source sink flow connecting terminal new sink vertex directed edge capacity computing maximum flow integral flow guaranteed 
flow integral systems inequalities describing flow totally unimodular see obtain decomposition properties 
state lemma convenience 
lemma 
unit capacity directed graph source vertex distinct terminals feasible flow vector terminal gets flow kz integer 
exists positive real ff edge disjoint path collection subset terminals properties 
ffl ff ffl fractional flow ff ffl terminal ff decomposition computed polynomial time 
proof 
connect terminals sink vertex directed edges capacity flow value kz 
edge connecting send flow value kz flow exactly flow value integral capacities fractional flow decomposed convex combination integral flows value kz edge fractionally capacity convex combination integral flow value kz defines disjoint path collection terminals 
put path collection corresponding integral flow flow 
lemma follows 
algorithm separable instance observation establishes connection single source flows 
proposition 
feasible solution lp mcf separable instance defines feasible solution separate single source flow problems flow value algorithm sep 
solve lp mcf obtain fractional solution value 
convert solution value properties described lemma 
common flow value pairs positive flow 

feasible fractional solutions single source flow problems induced respectively 
decompose single source flow instance separately obtain convex combinations ff fi disjoint path collections guaranteed lemma 
pick random disjoint path collection distribution ff 
independently pick random path collection distribution fi 

connected connected connect joining paths single path 
pair connected 
easy see feasible solution generated original instance lemma 
probability pair positive flow fractional solution connected disjoint path proof 
consider convex decomposition ff single source instance pick random disjoint path collection decomposition 
lemma guarantees disjoint path collection probability value flow exactly reasoning connected probability events independent probability connected disjoint path expected number pairs connected lemma log omega gamma log 
expected number pairs connected log 
upper bound integer optimal solution completes proof theorem 
obtain corollary theorem 
corollary 
directed undirected graph pairs exist edge disjoint paths pairs go specified vertex find polynomial time set ae kg ffl jsj omega gamma log ffl exist disjoint paths connects connects ffl paths edge disjoint edge disjoint 
unsplittable flow unsplittable flow problem ufp generalization maximum edge disjoint path problem 
edge capacitated graph denoting capacity edge pair specifies demand ae needs routed single path 
objective find maximum number pairs routed violating edge capacities 
special case ufp interest uniform capacity ufp ucufp short 
ucufp edges assumed capacity note problem generalizes edp hard 
best known approximation ratio ucufp 
observe approximability bounds edp obtained theorems apply ucufp 
arbitrary set demands partition sets contains demands large contains remaining demands 
srinivasan azar regev give approximation ucufp demand half edge capacity 
get approximation respect demands demands hand share common edge define instance edp 
approximate demands bounds theorems 
result follows better solutions 
extend algorithm acyclic dp section general graphs 
acyclicity graph step argue flow paths go vertex maximum congestion matter vertex induce separable instance 
allows argue paths routed disjoint 
general graphs corollary place theorem 
theorem follows exactly reasoning analysis section longer guaranteed edge disjoint paths corollary guarantees paths congestion 
theorem 
instance edp problem polynomial time algorithm connects omega gamma opt log pairs paths congestion exists special vertex intersecting paths solution go furthermore suppose connects pair intersects connects pair segments edge disjoint segments edge disjoint 
observe paths guaranteed theorem intersecting substantial structure 
theorem mainly interesting perspective fact mentioned earlier bound congestion follows randomized rounding 
believe restricted nature paths taken advantage obtain improved bounds undirected graphs 
illustrate intuition consider graph shown 
solid lines represent known graph 
easy see pairs routed edge disjoint paths pairs routed congestion allowed 
ratio solid lines indicate graph 
number pairs routed congestion allowed number congestion allowed large 
consider graph fig vertex attached edges shown dotted lines 
graph pairs connected paths restricted form specified theorem 
paths pair uses edges row reach edges columns reach case route half pairs edge disjoint paths 
note route half pairs permutation bottom grid 
property paths go enables efficient 
give lemma indicates consequence understanding problem 
lemma 
paths undirected graph paths edge graph 
furthermore distinct segments disjoint segments edge disjoint 
instance omega gamma gamma pairs routed disjoint paths approximation maximum edge disjoint path problem undirected graphs 
acknowledgments anupam gupta bruce shepherd useful discussions clarifications 
azar regev 
strongly polynomial algorithms unsplittable flow problem 
proceedings th ipco 
srinivasan 
approximation algorithms disjoint paths related routing packing problems 
mathematics operations research vol 
pp 

karloff rabani 
approximating directed 
proceedings nd focs pp 

tarjan 
network flow testing graph connectivity 
siam journal computing vol 
pp 

fortune hopcroft wyllie 
directed subgraph homeomorphism problem 
theoretical computer science vol 
pp 

frank 
packing paths cuts circuits survey 
korte lovasz schrijver eds paths flows vlsi layout 
springer verlag berlin 
garey johnson 
computers intractability guide theory np completeness 
freeman 
garg 
faster simpler algorithms multicommodity flow fractional packing problems 
proceedings th focs 
garg vazirani yannakakis 
approximation algorithms integral flow multicut trees 
algorithmica pp 

preliminary version proceedings th international colloquium automata languages programming pp 

guruswami khanna shepherd man yannakakis 
near optimal hardness results approximation algorithms edge disjoint paths related problems 
proceedings st stoc pp 

kleinberg 
approximation algorithms disjoint paths problems 
phd thesis mit cambridge ma may 
stein 
approximating disjoint path problems greedy algorithms packing integer programs 
integer programming combinatorial optimization 
lawler 
combinatorial optimization networks matroids 
holt rinehart winston 
leighton rao srinivasan 
multicommodity flow circuit switching 
proceedings hawaii international conference system sciences hicss pages 
ma wang 
inapproximability disjoint paths minimum steiner forest bandwidth constraints 
journal computer systems sciences vol pages 
raghavan thompson 
randomized rounding technique provably algorithms algorithmic proofs 
combinatorica vol 
pp 

robertson seymour 
outline disjoint paths algorithm 
korte lovasz schrijver eds paths flows vlsi layout 
springerverlag berlin 
schrijver 
theory linear integer programming 
john wiley sons 
srinivasan 
improved approximations edge disjoint paths unsplittable flow related routing problems 
proc 
th symposium foundations computer science pp 

west 
graph theory 
prentice hall 
