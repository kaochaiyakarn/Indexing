modern concurrency abstractions nick benton luca cardelli fournet microsoft research polyphonic extension language new asynchronous concurrency constructs join calculus 
describe design implementation language give examples addressing range concurrent programming problems 
categories subject descriptors programming languages language constructs features concurrent programming structures programming languages language classi cations concurrent distributed parallel languages object oriented languages programming languages processors compilers programming techniques concurrent programming general terms design languages additional key words phrases asynchrony chords events join calculus messages polyphonic synchronization threads contents languages concurrency 
asynchronous programming 
net 
polyphonic language overview basic idea 
informal speci cation grammar 
formedness 
typing issues 
programming polyphonic simple cell class 
reader writer locks 
combining asynchronous messages 
active objects 
custom schedulers 
implementation synchronization state automata 
translation 
discussion implementations samples 
remarks concrete syntax 

authors address microsoft research thomson avenue cambridge cb fb united kingdom 
rst fool foundations object oriented languages january 
preliminary version appears proceedings ecoop objectoriented programming lncs june 
prototype implementation described shortly available research microsoft com nick polyphony 
draft submitted acm transactions programming languages systems july 

nick benton 
languages concurrency concurrency important factor behaviour performance modern code concurrent programs dicult design write reason debug tune 
concurrency signi cantly ect meaning virtually construct language atomicity assignment ect ability invoke libraries 
popular programming languages treat concurrency language feature collection external libraries underspeci ed 
considerable attention fact speci cation important concurrency libraries birrell gosling detlefs gurevich point usually determine behaviour implementation 
concurrency libraries satisfactorily speci ed simple fact libraries features language undesirable consequences 
features provided principle language features libraries typical examples memory management exceptions 
advantage having features language compiler analyze produce better code warn programmers potential actual problems 
particular compiler check syntactically embedded invariants dicult extract collection library calls 
programmers reliably state intentions clear syntax tools compiler easily determine programmers intentions 
domain speci languages kamin extreme example linguistic approach new ad hoc languages routinely proposed replace general purpose language facilitate domain speci code analysis simple fact expressing domain related features primitive language constructs 
believe concurrency language feature part language speci cations 
serious attempts direction concept monitors hoare occam language inmos limited communicating sequential processes hoare 
general notion monitors popular particularly current objectoriented form threads object bound mutexes provided veneer syntactic sugar optionally locking objects method calls 
things changed concurrency monitors introduced 
communication asynchronous concurrent computations orchestrated larger scale 
concern ecient implementation locks single processor multiprocessor ability handle asynchronous events unnecessarily blocking clients long periods 
words concern shifting shared memory concurrency message event oriented concurrency 
new requirements deserve programming constructs handle asynchronous communications shared memory approach 
despite development large collection design patterns lea concurrent languages america agha philippsen draft submitted acm transactions programming languages systems july 
modern concurrency abstractions 
monitors gained widespread acceptance programming constructs 
interesting new linguistic approach emerged fournet gonthier join calculus process calculus suited direct implementation distributed setting 
languages jocaml le funnel odersky combine similar ideas functional programming model 
propose adaptation join calculus ideas object oriented language existing threads locks concurrency model 
asynchronous programming asynchronous events message passing increasingly levels software systems 
lowest level device drivers respond promptly asynchronous device events parsimonious resource 
graphical user interface level code programming models notoriously complex asynchronous nature user events time users hate blocked unnecessarily 
wide area network level collaborative applications distributed ow web services experiencing similar problems complexity asynchronous nature latencies global communication 
areas naturally lead situations asynchronous messages handled concurrently threads handle 
threads expensive resource systems 
somewhat hide messages threads language mechanism options possible 
compiler may transform patterns concurrency state machines optimize queues lightweight threads possible avoid forking threads necessary thread pools 
really possible handle spectrum things happen handle syntax concurrent operations hide enable multiple implementation techniques 
aim promote abstractions asynchronous programming high level point view programmer enable low level optimizations point view compiler run time systems 
propose extension language modern concurrency abstraction asynchronous programming 
tune musical spirit orchestration concurrent activities call language polyphonic net modern type safe object oriented programming language introduced microsoft part visual studio net ecma 
programs run top net framework includes multilanguage execution engine rich collection class libraries 
net execution engine provides multithreaded execution environment synchronization locks potentially associated heap allocated ob polyphony musical composition uses simultaneous largely independent melodic parts lines voices world english dictionary microsoft 
draft submitted acm transactions programming languages systems july 

nick benton ject 
language includes lock statement obtains mutex associated object execution block 
addition net libraries implement traditional concurrency control primitives semaphores mutexes reader writer locks asynchronous programming model delegates 
net framework provides higher level infrastructure building distributed applications services messaging remote method call 
concurrency distribution mechanisms net framework powerful complex 
quite apart bewildering array primitives baked infrastructure mismatch model concurrency single machine shared memory threads synchronization mutual exclusion asynchronous message style uses programming web applications services 
ideal testbed ideas language support concurrency mainstream languages 

polyphonic language overview section describes syntax semantics new constructs polyphonic gives precise informal speci cation syntax 
basic idea fairly conventional object oriented programming model polyphonic adds just new concepts asynchronous methods chords 
asynchronous methods 
conventional methods synchronous sense caller progress callee completes 
polyphonic method declared asynchronous call guaranteed complete essentially immediately 
asynchronous methods return result throw exception declared async keyword void 
calling asynchronous method sending message posting event 
asynchronous methods return immediately behaviour method async data large method body thing reasonably call returns immediately large method body scheduled execution di erent thread new spawned service call worker pool 
kind de nition rare polyphonic commonly asynchronous methods de ned chords described necessarily require new threads 
instance delegate class encapsulates object method object particular signature 
delegate style function pointer slightly closure 
draft submitted acm transactions programming languages systems july 
modern concurrency abstractions 
chords 
chord called synchronization pattern join pattern consists header body 
header set method declarations separated 
body executed methods header called 
method calls implicitly queued matching chord 
consider example class bu er string get async put string return code de nes class bu er declaring instance methods jointly de ned single chord 
method string get synchronous method arguments returning string 
method async put string asynchronous returns result takes string argument 
bu instance bu er calls synchronous method bu get possibilities previously unmatched call bu put string match pending put de queued body chord runs returning caller bu get 
previous unmatched calls bu put 
call bu get blocks thread supplies matching put 
conversely call asynchronous method bu put caller wait possible behaviours regard threads previously unmatched call bu get match pending call de queued associated blocked thread awakened run body chord return pending calls bu get call bu put simply queued arrives 
exactly pairs calls matched unspeci ed singlethreaded program bu er bu new bu er bu put blue bu put sky console write bu get bu get non deterministic printing 
note implementation bu er involve spawning threads body chord runs preexisting thread viz 
called get 
reader may point wonder rules deciding thread body runs know method call course real implementation nondeterminism simple example resolved statically di erent executions produce result part ocial semantics 
draft submitted acm transactions programming languages systems july 

nick benton nal value computed body returned 
answer chord method may synchronous 
method body runs thread associated value returned call method 
method methods chord asynchronous body runs new thread value return 
pointed bu er code trivial unconditionally thread safe 
locking required example prevent argument single put returned distinct gets generated automatically compiler 
precisely deciding chord enabled call removing pending calls queues scheduling body execution atomic operation 
mutual exclusion chord bodies explicitly provided synchronization headers 
bu er example uses single chord de ne methods 
possible common multiple chords involving method 
example class bu er int get async put int return string get async put int return tostring de ned method putting integers bu er methods getting happen distinguished type name 
call put synchronize call get methods 
pending calls get synchronizes subsequent put unspeci ed 

informal specification grammar syntactic extensions grammar ecma appendix minor 
add new keyword async add alternative return type return type type void async allows methods delegates interface methods declared asynchronous 
class member declarations replace method declaration chord declaration chord declaration method header method header body method header attributes modi ers return type member name formals call chord declaration trivial declares single synchronous method standard method declaration 
draft submitted acm transactions programming languages systems july 
modern concurrency abstractions 
formedness extended classes subject number formedness conditions single method header return type async formal parameter list formals may contain ref parameter modi er 
single chord declaration method header may non async return type 
chord method header return type type body may return statements type expressions body may empty return statements 
formals appearing method headers distinct identi ers 
method headers may member name argument type signature 
method headers declare instance methods declare static methods 
particular class method headers member name argument type signature return type identical sets attributes modi ers 
value class struct static methods may appear nontrivial chords 
chord declaration includes virtual method override modi er method appears chord superclass containing overridden de nition overridden subclass 
conditions fairly straightforward conditions deserve comment 
condition provides conservative simple sanity check re ning class contains chords general implementation inheritance concurrency mix matsuoka yonezawa 
approach enforce separation concerns series chords syntactically local class subclass declaration methods overridden chords completely overridden 
takes view implementation method consists synchronization bodies chords appears inheritance restriction unreasonable illegal code class virtual void virtual async body virtual void virtual async body ref parameters sense asynchronous messages passed addresses locals stack frame may disappeared message processed 
methods intended subclasses explicitly marked virtual modi er whilst methods intended override ones inherited superclass explicitly say override modi er 
draft submitted acm transactions programming languages systems july 

nick benton class override async body overriding half overridden 
pragmatically removing restriction inheritance easy introduce inadvertent deadlock async leakage 
code legal code written expect instances class matching calls fail passed instance calls cause body run calls deadlock 
note inheritance restriction means declarations virtual void private async body incorrect declaring just virtual sense overriding requires overridden 
worth observing transitive closure operation implicit inheritance restriction overridden joined overridden method joined 
possible devise complex permissive rules overriding 
current rule advantage simplicity refer reader fournet thorough study inheritance join calculus including advanced type systems control 
formedness condition justi ed potentially bad interaction existing features pure join calculus 
allowing synchronous call appear single chord give potentially useful rendez vous facility provided added syntax allowing results returned particular calls 
example instances class class rendezvous public int int public int int return return match pairs calls exchange values proceed 
condition decide blocked threads body ran choice generally observable 
thread identities obtained checked equality problem fairly academic 
choice thread signi cant di erence behaviour program due reentrant locks stack security thread local variables making non commutative 
course hard program explicitly rendez vous polyphonic class rendezvous class thunk draft submitted acm transactions programming languages systems july 
modern concurrency abstractions 
int wait async reply int return public int int thunk new thunk af return wait private async af int thunk public int int reply returning return returning call create instance auxiliary class thunk order wait asynchronous reply message sent synchronization 
typing issues treat async subtype void allow covariant return types just case pseudo types 
async method may override void void delegate may created async method async method may implement void method interface conversely 
design intuitive sense async method void extra property returning immediately maximises compatibility existing code superclasses interfaces delegate de nitions making void 

programming polyphonic having introduced language show may address range concurrent programming problems 
simple cell class start implementation simple place cell class 
cells public synchronous methods void put object object get 
call put blocks cell empty lls cell argument 
call get blocks cell full removes returns contents class public empty public void put object private async empty contains public object get private async contains object empty draft submitted acm transactions programming languages systems july 

nick benton return addition public methods class uses private asynchronous methods empty contains object carry state cells 
simple declarative reading constructor chords explains works constructor 
cell created initially empty 
put chord 
put object cell empty cell subsequently contains 
get chord 
get contents cell contains object cell empty returned value implicitly 
cases uts gets wait 
technique private asynchronous methods elds carry state common polyphonic observe constructor establishes body class preserves simple easily veri ed invariant exactly pending asynchronous method call empty contains object 
contrast may arbitrary number client threads blocked pending calls put get concurrently running statement return body 
read class de nition direct speci cation automaton empty contains get put return reader writer locks realistic example asynchronous methods carry state chords synchronize access state consider classic problem protecting shared mutable resource multiple reader single writer lock 
clients request release shared access exclusive access corresponding public methods shared exclusive requests shared access block client exclusive access whilst requests exclusive access block client access 
canonical solution problem traditional concurrency primitives modula birrell polyphonic written just chords draft submitted acm transactions programming languages systems july 
modern concurrency abstractions 
class idle public void shared async idle public void shared async int public void async int idle public void exclusive async idle fg public void idle provided release follows corresponding request invariant state lock message single message idle single message shared matches kind number threads currently holding lock exclusive thread thread sharing threads 
matter choice private elds parameters private messages 
example sense message 
write equivalent code class idle private int protected public void shared async idle public void shared async public void async idle public void exclusive async idle fg public void idle model concurrency provides basic fairness properties 
cases application speci fairness required supplement programmed fairness 
instance re ne code implement fairness readers writers pending writers acquire lock current readers release 
add extra shared states don accept new readers provide exclusive lock previously selected thread class 
content plus public void async draft submitted acm transactions programming languages systems july 

nick benton public void exclusive async wait void wait async fg combining asynchronous messages external interface server uses message passing typically consist asynchronous methods takes arguments parameters request send nal result noti cation request serviced 
example delegates callbacks service string argument returning integer look public delegate async int result public class service public async request string arg cb int 
cb send result back common client side pattern involves making concurrent asynchronous requests blocking completed 
may programmed follows class join public void wait int int public async rst int fst public async second int snd fst snd class client public void main string args service 
service 
join new join request args new rst request args new second 
useful int wait wait results come back 
call wait block services replied invoking respective callbacks happened results draft submitted acm transactions programming languages systems july 
modern concurrency abstractions 
assigned client proceed 
generalising join arbitrary number simultaneous calls de ning classes wait conditions calls completed straightforward 
active objects concurrent object oriented languages take primitive notion active objects 
independent thread control associated instance process typically sequentially messages sent typically asynchronously objects 
way express pattern polyphonic inheritance base class public class protected bool done protected void public done false mainloop async mainloop done constructor calls asynchronous method mainloop spawns new message handling thread object 
subclasses de ne chords message synchronize call 
example skeleton active object multicasts stock quote messages list clients public class private arraylist clients new arraylist public async client add new client override protected void clients add public async quote get new quote wire override protected void foreach client clients send clients draft submitted acm transactions programming languages systems july 

nick benton public async request terminate override protected void done true note access done clients need protected lock message handling thread accesses 
attempt share behaviour active objects moving chord superclass making virtual caught compile time violation inheritance restriction section 
custom schedulers polyphonic coexist build existing threading model 
threads relatively expensive holders locks programmers need explicit control thread usage 
cases polyphonic convenient way write amount custom schedulers particular application 
illustrate point example dynamically schedule series related calls large batches favour locality spirit staged computation server larus parkes 
assume class heavy encapsulates access expensive resources les remote connections 
client rst allocates instance class heavy performs series calls eventually calls close release resource 
calls constructor heavy assumed potentially blocking relatively expensive 
class heavy public heavy int slow 
public int int request relatively fast public void close class implements scheduler 
resource instance class burst provides front attempts organise calls long series share cost heavy 
burst states represented idle open 
state initially idle 
rst thread tries resource state open thread calls result potentially blocking heavy call 
long state open subsequent callers queued 
rst thread completes closing heavy resource calls behalf pending calls resuming threads respective results 
state open new threads may queued 
long pending calls similarly processed state idle 
section auxiliary class thunk block queued thread resume asynchronous message carrying result draft submitted acm transactions programming languages systems july 
modern concurrency abstractions 
class burst int int public burst int idle public int int async idle open heavy new heavy int helpful delayed threads 
close return public int int async open open thunk new thunk delayed return wait usually blocking void helpful heavy async open idle int batch open batch helpful newly delayed threads 
void heavy async delayed thunk int done class thunk public int wait public async done int return written simulations unsurprisingly exhibit large speedup numerous client threads call burst independently calling heavy 
implementation section describes implementation chords lower level concurrency primitives 
compilation process best explained translation polyphonic class plain class 
resulting class name signature source class mapping async void private state methods deal synchronization 
draft submitted acm transactions programming languages systems july 

nick benton synchronization state automata implementation polyphonic class method body combines kinds code corresponding synchronization polyphonic method calls generated chord headers actual computation copied chord bodies respectively 
describe synchronization code generated set chords 
synchronization statically de ned chords eciently compile state automaton 
approach initially described le implementation construct explicit state machines 
synchronization state consists pending calls methods occur non trivial chords threads regular methods messages asynchronous methods 
synchronization depends presence absence pending calls method number calls actual parameters calling contexts relevant chord red 
synchronization state summarized bitmap single bit records presence pending calls method appearing chord 
accordingly chord declaration represented constant bitmap bit set method appearing chord synchronization code checks chord red testing synchronization constant 
performance considerations 
ideally cost polyphonic method calls similar regular method calls call blocks waiting async messages case avoid paying high cost dynamic thread scheduling 
asynchronous method called performs small amount computation caller thread returning 
synchronous method called critical path optimize chord complementary asynchronous messages 
case synchronization code retrieves content complementary messages updates synchronization state immediately proceeds method body 
thread suspended cost running synchronization code small compared lower level context switching scheduling 
firing completely asynchronous chord comparatively expensive involves spawning new thread 
asynchronous message arrives sense check matches synchronous chords rst 
lower cost asynchronous chords net thread pool mechanism simply spawning fresh system thread time 
scheduling policy thread pool optimal applications may attributes allow programmer control thread creation policy 
low level concurrency 
code handling chords unconditionally thread safe source code class 
single auxiliary lock protect private synchronization state 
regular object lock private queues 
locking occurs brie draft submitted acm transactions programming languages systems july 
modern concurrency abstractions 
incoming call expect contention rare 
lock independent regular object lock may usual protect rest state prevent race conditions 
translation means simple example details translation polyphonic ordinary translation abstraction implemented didactic purposes translated code introducing auxiliary classes queues current implementation inlines code contained classes 
supporting classes 
value class structure provides operations struct private int public void set int public void clear int public bool match int return de ne classes represent message queues 
asynchronous method compiler associates message queue stores pending messages method empty property testing state methods add get adding element queue getting element back asserting queue empty 
implementation queue depends message contents potentially compiler deduced invariants necessarily actual queue 
simple case single argument asynchronous messages int messages generate thin wrapper top standard queue library class private queue public fq new queue public void add int enqueue public int get int dequeue public bool empty count gg important case message queue deals empty argument messages 
implemented single message counter 
class private int public public void add public void get public bool empty return gg draft submitted acm transactions programming languages systems july 

nick benton synchronous methods need classes implementing queues waiting threads 
message queues uniform interface choice implementations 
method yield called store current thread queue awaits additional messages assumes thread holds private lock polyphonic object releases lock waiting 
conversely method wakeup called wake thread queue immediately returns ect caller thread 
code implements synchronization monitors low level interface object locks class private queue public new queue public bool empty return count gg public void yield object enqueue thread monitor exit try thread sleep timeout nite catch fg monitor enter dequeue public void wakeup thread peek interrupt speci cation monitors guarantees interrupt non sleeping thread happen thread call thread sleep correct release lock entering try catch statement 
thread awakens catch clause rst lock block thread expect case uncommon 
thread de queued discarded current thread 
generated synchronization code 
shows simple polyphonic class token section addition parameter passed returned grab method translation ordinary making auxiliary classes de ned 
token implements token lock 
regular synchronous method asynchronous method single chord synchronizes 
describe happening translations methods code release 
chord lock add message queue messages stored update mask scan active chords 
larger class chords involve release scan statement usefully inlined specialized need test patterns async release appears know bit set 
draft submitted acm transactions programming languages systems july 
modern concurrency abstractions 
class token public token int initial tokens int initial tokens release public int grab int id public async release return id class token private const int private const int private new private new private const int private new private object private void scan match wakeup public token int initial tokens int initial tokens release oneway public void release lock add 
match set scan gg public int grab int id monitor enter 
match goto yield empty clear match get empty clear scan monitor exit return id source code chord set goto gg fig 

token class translation draft submitted acm transactions programming languages systems july 

nick benton oneway 
reader unfamiliar may wonder translation release method pre xed oneway 
attribute indicates net infrastructure appropriate calling di erent machines calls release genuinely non blocking 
translation adds attribute asynchronous methods 
code grab 
chord lock rst check deferred grabs stored call proceed enqueue current thread retry 
check pending release message complete chord int grab int id async release 
select chord immediate execution update mask record presence deferred grabs enqueue current thread retry 
classes multiple patterns grab perform series tests potential chord 
notice safe retry independently synchronization state 
chord selected update mask 
asynchronous parameters generally remove queue bind local variables 
check messages awaken thread discussed 
release lock enter block associated selected chord 

may wonder systematically call scan selecting chord immediate execution just releasing lock executing guarded block 
simple example unnecessary know scan call release message 
general may required prevent deadlocks 
consider instance polyphonic class class foo void async async void async void async global execution trace threads thread 
calls blocks 
thread 
calls blocks 
thread 
calls thread thread 
calls succeeds consuming 
thread 
retries blocks 
scheduling thread preempts thread steals message 
thread blocks remaining message suces run thread 
attributes standardized declarative way adding custom metadata net programs 
code manipulating tools libraries compilers debuggers object serialization libraries attribute information vary behaviour 
draft submitted acm transactions programming languages systems july 
modern concurrency abstractions 
thread thread thread race condition leading deadlock 
accordingly implementation synchronization code thread performs additional scan thread unfortunate cases 
special cases nal scan safely omitted identifying cases complicate translation 
deadlock freedom 
sketch proof translation introduce deadlocks 
course calls involving chord red may deadlocked translation implement deadlocks 
say object active calls queues trigger patterns assuming fair scheduling runnable threads show active states transient 
prove invariant object active thread top queue scheduled execution succeed 
scan invariant holds 
object active asynchronous message received triggers scan 
thread polyphonic call succeeds consumes asynchronous messages triggers scan 
algorithm thread guaranteed thread may succeed immediately scheduled necessarily succeed 
fully asynchronous chords 
complete description implementation describe compilation fully asynchronous chords 
chords red thread hand execute body new thread created 
illustrate case assume class token contains asynchronous method declaration public async live string int id grab id release console generated code verbose straightforward private class public string public int id public string int id id id private void object string int id id grab id release async chord body code console draft submitted acm transactions programming languages systems july 

nick benton oneway public void live string int id new id new auxiliary class pass parameters new thread delegate host object method resume execution object context 
generally chord containing asynchronous methods code live method occur mq wakeup re pattern method scan 

discussion implementations samples prototype implementations polyphonic rst lightweight source source translator written ml 
proven invaluable explaining language straightforward modify maintain cope full language 
initial experiences polyphonic positive built robust full featured maintainable implementation top experimentation friendly compiler developed group microsoft research 
written number non trivial samples polyphonic including web combinators lines cardelli davies animated version dining philosophers distributed stock dealing simulation built net remoting infrastructure multithreaded client web service barclay microsoft 
cases rapidly correctly concisely express intended concurrency synchronization 
interfacing libraries write thin wrappers providing polyphonic interface code written di erent style example proxy classes web services 
remarks concrete syntax immediate plans revise redundancy concrete syntax polyphonic attributes modi ers return type information method repeated consistently chord method appears 
alternative approach essentially funnel odersky allow synchronous method de nitions body guarded purely asynchronous pattern specify modi ers attributes asynchronous methods separate declarations 
style reader writer lock section look class remoting provides remote method call tcp binary soap 
draft submitted acm transactions programming languages systems july 
modern concurrency abstractions 
async idle just signatures modi ers async int attributes occur idle public void shared idle int public void int idle public void exclusive idle fg public void idle alternative syntax compact cases subclasses exible group chords synchronous methods example asynchronous state awkward turn void async vice versa 
areas polyphonic think particularly interesting concurrency types 
suggested examples relatively easy state verify invariants polyphonic classes shape chords visibility methods 
type systems static analyses developed similar settings automate process check infer compile time behavioural properties pending message asynchronous method set methods 
calls method eventually processed partial deadlock freedom 
potential bene ts obvious compiler catch programming errors produce ecient code 
tools complex active area research concurrency nielson nielson igarashi kobayashi chaki 
needless say dicult check properties code directly uses threads locks chords 
optimizations 
opportunities optimizing implementation described 
require proper static analysis usefully implemented basis naive compile time checks draft submitted acm transactions programming languages systems july 

nick benton lock optimization 
situations safely fuse successive critical sections protected lock example bounded series asynchronous messages sent object chord body immediately sends messages 
queue optimization 
ane methods determined pending call particular object may compiled queues 
thread optimization 
purely asynchronous chords perform brief terminating computations sending messages compiled run invoking thread new 
desirable optimization uncommon public method arguably asynchronous synchronize send typically private asynchronous messages 
cases usually prefers pay cost thread startup de nes method void async damages compositionality example preventing instantiating async delegate method 
concrete examples situation provided methods class section calls obtain lock clearly synchronous methods relinquishing safely neatly asynchronous fact handled expensive new task 
unfortunately static analysis detect non trivial chord body terminate quickly hard may programmer annotation better solution problem 
pattern matching 
situations convenient specify chords enabled values passed arguments methods satisfy additional constraints 
example wish correlate related messages code public async sell string item client seller public async buy string item client buyer 
match item parameters passed calls required equal pattern match 
common scenario equality patterns help concerns asynchronous messages embedded sequence numbers 
wishes ensure messages processed sequence currently manage new queue unprocessed messages hand 
example class private pending new private int public async message int stamp string contents override protected void stamp contents draft submitted acm transactions programming languages systems july 
modern concurrency abstractions 
pending string pending pending remove pending add stamp contents pattern matching achieve ect class public async message int stamp string contents override protected void async int stamp contents stamp usefully allow richer guard conditions attached chords unwise allow general boolean expressions guards arbitrary side ects evaluated unpredictable number times arbitrary semantics 
reasons intend add restricted matching certain built types language 
timeouts priorities 
tempting supplement syntax chords declarative support priorities timeouts generally provide ner control dynamic scheduling 
considering designs timeouts essentially generalising notion guard discussed investigating implementation trade 
asynchronous concurrent programming important widespread remains hard 
designed implemented join calculus extension simple expressive ecient 
experience writing correct concurrent programs considerably dicult polyphonic ordinary certainly go far claim easy 
integration join calculus constructs objects existing net mechanisms concurrency entirely straightforward implementation constrained underlying threads locks model 
uses polyphony draft submitted acm transactions programming languages systems july 

nick benton existing libraries require little matching 
new constructs practice 
acknowledgment mark initial implementation polyphonic compiler internship microsoft research 
agha wegner yonezawa 
research directions concurrent objectoriented programming 
mit press 
america 
issues design parallel object oriented language 
formal aspects computing 
barclay gray 
microsoft spatial data warehouse 
proceedings acm sigmod 
microsoft research tech report ms tr 
birrell 
programming threads 
research report dec src 
jan birrell guttag horning levin 
synchronization primitives multiprocessor formal speci cation 
research report dec src 
aug cardelli davies 
service combinators web computing 
software engineering 
chaki rajamani rehof 
types models model checking messagepassing programs 
proceedings th annual acm sigplan sigact symposium principles programming languages 
acm 
le 
jocaml mobile agents objective caml 
international symposium agent systems applications asa third international symposium mobile agents ma 
ieee computer society 
software documentation available pauillac inria fr jocaml 
detlefs leino nelson saxe 
extended static checking 
research report dec src 
dec ecma 

standard ecma language speci cation 
fournet gonthier 
re exive chemical machine 
proceedings rd acm sigact symposium principles programming languages 
acm 
fournet gonthier 
join calculus language distributed mobile programming 
proceedings applied semantics summer school sept barthe dybjer pinto eds 
lncs vol 

springerverlag 
appear 
draft available research microsoft com fournet 
fournet laneve emy 
inheritance join calculus extended 
fst tcs foundations software technology theoretical computer science 
lncs vol 

springer verlag new delhi india 
full version available research microsoft com fournet 
gosling joy steele 
threads locks 
java language speci cation 
addison wesley chapter 
gurevich schulte wallace 
investigating java concurrency state machines 
state machines theory applications gurevich kutter odersky thiele eds 
lecture notes computer science vol 

springer 
hoare 
monitors operating system structuring concept 
communications acm oct 
hoare 
communicating sequential processes 
prentice hall 
igarashi kobayashi 
generic type system pi calculus 
proceedings th annual acm sigplan sigact symposium principles programming languages 
acm 
draft submitted acm transactions programming languages systems july 
modern concurrency abstractions 
inmos limited 

occam programming manual 
prentice hall int 
kamin ed 

proceedings acm sigplan workshop domain speci languages 
paris france 
larus parkes 
cohort scheduling enhance server performance 
tech 
rep msr tr microsoft research 
mar le 
compiling join patterns 
high level concurrent languages nestmann pierce eds 
electronic notes theoretical computer science vol 

elsevier science publishers 
lea 
concurrent programming java design principles patterns second edition ed 
addison wesley 
matsuoka yonezawa 
analysis inheritance anomaly object oriented concurrent programming languages 
see agha chapter 
microsoft 


microsoft net 
nielson nielson 
higher order concurrent programs nite communication topology 
proceedings st annual acm sigplan sigact symposium principles programming languages 
acm 
odersky 
functional nets 
proceedings european symposium programming 
lncs vol 

springer verlag 
philippsen 
imperative concurrent object oriented languages annotated bibliography 
tech 
rep tr international computer science institute berkeley ca 
ed 

proceedings usenix conference domain speci languages 
santa barbara california 
draft submitted acm transactions programming languages systems july 
