modularity termination dependency pairs thomas arts jurgen giesl computer science laboratory ericsson telecom ab stockholm sweden mail thomas cslab ericsson se fb informatik darmstadt university technology 
darmstadt germany mail giesl informatik th darmstadt de 
framework dependency pairs allows automated termination innermost termination proofs trss proofs possible 
refinement framework order prove termination modular way 
modularity results significantly increase class term rewriting systems termination resp 
innermost termination proved automatically 
modular approach dependency pairs yields new modularity criteria extend previous results area considerably 
particular existing results modularity innermost termination easily obtained direct consequences new criteria 
termination important properties term rewriting system trs 
general problem undecidable hl methods proving termination developed surveys see der ste dh 
methods amenable automation restricted generation simplification orderings exist numerous important trss termination proved orderings restricted class 
reason developed framework dependency pairs ag ag ag allows apply standard methods termination proofs trss failed 
way termination non simply terminating systems proved automatically 
proving termination benefits modularity results ensure termination trs soon proved parts trs 
aim refine dependency pair approach order allow modular termination proofs dependency pairs 
toyama toy showed termination modular direct sum partition trs subsystems disjoint signatures 
barendregt klop adapted toyama toy dro gave counterexamples subsystems complete confluent terminating trss special form termination fact modular property technical report tu darmstadt 
extended version rta 
partially supported deutsche forschungsgemeinschaft 
wa part focus program 
direct sums rus mid gra smp 
survey see mid gra 
trs split subsystems disjoint signatures 
partitions considered 
cases desirable constructors common parts 
subclass constructor systems termination modular provided parts complete disjoint sets defined symbols mt 
result generalized overlay systems gra 
simple termination modular trss shared constructors disjoint defined symbols ko result extended composable trss mz 
practice results applied automated termination proofs 
example systems hierarchical combinations trss constructors common subsystem contains defined symbols subsystem 
termination proved modular hierarchical combinations restricted forms der fj 
modularity results innermost termination restrictive termination 
innermost termination modular direct sums trss shared constructors gra composable constructor systems mt composable trss proper extensions kr special class hierarchical combinations 
innermost termination implies termination classes trss gra gra results termination proofs systems 
particular holds locally confluent overlay systems particular non overlapping trss 
show modular approach dependency pairs extends previous modularity results demonstrate framework existing modularity results innermost termination trss shared constructors composable trss proper extensions obtained easy consequences 
sect 
dependency pair approach introduce new termination criterion allows framework modular way 
similarly sect 
modular approach innermost termination proofs dependency pairs 
shown sect 
results imply new modularity criteria independent dependency pair technique sect 
give comparison related demonstrate results extend existing criteria modularity innermost termination 
conclude sect 
give collection examples demonstrate power results sect 

modular termination dependency pairs ag introduced dependency pair technique prove termination automatically 
section briefly recapitulate basic concepts new modular approach automated termination proofs 
root term leading function symbol trs rules signature froot jl rg set defined symbols nd set constructors stress splitting signature denote trs 
example consider trs constructors defined symbol methods automated termination proofs restricted simplification orderings der ste 
methods prove termination trss reduced term embedded 
contrast previous approaches compare left right hand sides rules compare left hand sides subterms may possibly start new reduction 
focus subterms right hand sides defined root symbol 
precisely rewrites defined symbol context compare argument tuples avoid handling tuples new tuple symbol introduced defined symbol comparing tuples terms compared 
ease readability assume signature consists lower case function symbols denote tuple symbols corresponding upper case symbols 
definition dependency pair 
term rewriting system 
rewrite rule hf dependency pair example obtain dependency pairs hf hf hf trace newly introduced reduction consider special sequences dependency pairs 
right hand side dependency pair corresponds redex traced 
reductions instantiations righthand sides instantiations left hand sides consecutive dependency pairs contract arguments 
definition chain 
trs 
sequence dependency pairs hs hs chain exists substitution oe oe oe holds consecutive pairs hs hs sequence 
assume different occurrences dependency pairs disjoint sets variables regard substitutions domains may infinite 
example chain hf hf hf oe oe oe oe hold substitution oe replacing 
fact fi ffl fi ffl phi phi phi phi hj hf hf hf fig 

estimated dependency graph example 
finite sequence dependency pair chain 
proved ag absence infinite chains sufficient necessary criterion termination 
theorem termination criterion 
trs terminating exists infinite chain 
dependency pairs occur twice chain need considered proving infinite chain exists 
recall dependency pair hv wi may follow hs ti chain toe reduces voe substitution oe 
term constructor root symbol toe reduced terms root symbol root symbol defined give direct information terms toe reduced 
cap result replacing subterms defined root symbol different new variables ren result replacing variables different fresh variables 
determine hv wi follow hs ti chain check ren cap unifies function ren needed rename multiple occurrences variable instantiated oe occurrences xoe reduce different terms 
instance ren cap ren ren cap ren 
follow chain unify 
estimate dependency pairs may occur consecutive estimated dependency graph introduced cf 
ag 
definition estimated dependency graph 
estimated dependency graph trs directed graph nodes dependency pairs arc hs ti hv wi ren cap unifiable 
example obtain estimated dependency graph fig 

usual subset dependency pairs called cycle dependency pairs hs ti hv wi path hs ti hv wi hv wi hs ti estimated dependency graph 
particular path hs ti hs ti 
example non empty cycles viz 
estimated dependency graph develop new modular refinement thm 

restrict finite trss 
infinite chain corresponds cycle 
dependency pairs occur cycles ignored 
suffices prove infinite chain cycle 
theorem modular termination criterion 
trs terminating cycle estimated dependency graph exists infinite chain dependency pairs proof 
direction direct consequence thm 

direction suppose terminating 
thm 
exists infinite chain 
finite finitely dependency pairs dependency pair occurs infinitely times chain renaming variables 
infinite chain form tae tae tae ae ae ae renamings 
tail tae tae infinite chain consists dependency pairs cycle estimated dependency graph 
ut theorem prove termination trs modular way absence infinite chains proved separately cycle 
cycle generate set inequalities existence founded quasi orderings satisfying inequalities sufficient absence infinite chains 
purpose ensure dependency pairs decreasing precisely sequence dependency pairs hs substitution oe oe oe demand oe oe oe oe oe oe hs ti demand strict inequality soe toe 
exists chain dependency pairs traverses dependency pairs infinitely times 
restrict weakly monotonic quasi orderings strict part closed substitution 
weakly monotonic implies 
guarantee oe oe oe oe holds sufficient demand rewrite rules trs 
resp 
ensures oe oe resp 
oe oe substitutions oe 
theorem modular termination proofs 
trs terminating cycle estimated dependency graph exists wellfounded weakly monotonic quasi ordering closed substitution ffl rules ffl dependency pairs ffl dependency pair proof 
suppose exists infinite chain dependency pairs cycle loss generality minimal contains cycle proper subset infinite chain dependency pairs quasi ordering reflexive transitive relation called wellfounded strict part founded 
dependency pair hs ti strict inequality due minimality hs ti occurs infinitely times chain variable renaming chain form hv hv tae hv hv tae ae ae renamings 
exists substitution oe oe oe oe sae oe tae oe oe 
holds rules weakly monotonic dependency pairs weakly decreasing 
obtain oe oe oe oe sae oe tae oe oe oe oe oe sae oe tae oe contradiction foundedness infinite chain dependency pairs exists thm 
terminating 
ut theorem termination example easily proved automatically 
computing estimated dependency graph fig 
quasi orderings generated satisfy note contrast direct termination proofs need weakly monotonic quasi orderings synthesizing suitable ordering arguments function symbols may eliminated 
instance inequalities may eliminate second argument function symbol term inequalities replaced new unary function symbol 
obtain inequality 
comparing terms resulting replacement original terms take advantage fact strongly monotonic second argument 
inequalities resulting satisfied lexicographic path ordering lpo subterms compared right left kl 
inequalities delete second argument inequalities satisfied lpo precedence time subterms compared left right 
note exist finitely possibilities eliminate arguments function symbols 
possibilities checked automatically 
path orderings lpo generated automatically enables fully automatic termination proof trs direct termination proof simplification orderings possible 
thm 
allows different quasi orderings prove absence chains different cycles 
example essential termination proof exists quasi simplification ordering satisfying inequalities elimination arguments 
modularity result automated termination proof example fails 
modular innermost termination dependency pairs ag showed dependency pair approach modified order verify innermost termination automatically 
previous methods technique prove innermost termination non terminating systems automatically 
similar preceding section technique innermost termination proofs modular way 
example consider trs inspired toy applying rule obtain infinite cycling reduction 
innermost reduction term contains redex proper subterm 
turns trs terminating innermost terminating 
develop criterion innermost termination similar termination criterion sect 
restrict notion chains 
consider innermost reductions arguments redex normal form redex contracted 
demand instantiated left hand sides oe dependency pairs normal 
reductions arguments normal forms innermost reductions denoted 
definition innermost chain 
trs 
sequence dependency pairs hs hs innermost chain exists substitution oe oe normal form oe oe holds consecutive pairs hs hs sequence 
course innermost chain chain vice versa 
example dependency pairs 
hf hf hf infinite sequence consisting dependency pair infinite chain innermost chain oe reduce oe substitutions oe oe normal form 
ag proved absence infinite innermost chains sufficient necessary criterion innermost termination 
theorem innermost termination criterion 
trs innermost terminating exists infinite innermost chain 
analogous sect 
introduce estimated innermost dependency graph approximate dependency pair hv wi follow hs ti innermost chain 
replace subterms defined root symbols new variables check modification unifies contrast sect 
rename multiple occurrences variable 
reason restrict normal substitutions oe variables instantiated normal forms occurrences xoe reduced 
arc cap unify 
furthermore demand general unifier cap instantiates left hand sides normal forms 
definition estimated innermost dependency graph 
estimated innermost dependency graph trs directed graph nodes dependency pairs arc hs ti hv wi cap unifiable general unifier normal forms 
estimated innermost dependency graph example arcs dependency pair arcs 
non empty cycles analogous thm 
show suffices prove absence infinite innermost chains separately cycle 
theorem modular innermost termination criterion 
trs innermost terminating iff cycle estimated innermost dependency graph exists infinite innermost chain dependency pairs prove innermost termination modular way generate set inequalities cycle search founded quasi ordering satisfying 
ensure toe voe toe reduces voe demand rules trs 
restrict normal substitutions oe rules usable reduction toe 
example rule reduce normal instantiation defined symbol 
general contains defined symbol rules usable rules usable right hand sides rules usable definition usable rules 
trs 
symbol rls fl root fg 
term define usable rules ffl ur ffl ur rls ur ur rls 
set dependency pairs define ur hs ti ur 
ur rls ur ur usable rules cycles 
note rls constructor theorem automatic modular verification innermost termination proved analogous thm 

additional refinements automated checking innermost termination criterion ag 
theorem modular innermost termination proofs 
trs innermost terminating cycle estimated innermost dependency graph exists founded weakly monotonic quasi ordering closed substitution ffl rules ur ffl dependency pairs ffl dependency pair way obtain constraints example may lpo comparing subterms right left may lpo comparing subterms left right 
innermost termination example easily proved automatically 
modularity result proof possible exists simplification ordering satisfying inequalities elimination arguments 
modularity criteria section corollaries results preceding sections particularly useful practice 
corollaries allow comparison existing modularity results shown sect 

hierarchical combinations straightforward corollary thm 
obtained hierarchical combinations 
term rewriting systems form hierarchical combination defined symbols may occur constructors vice versa 
example consider trs 
nil denotes empty list represents insertion number list abbreviates nffl 
function sum adds elements element sum ffln ffl ffln 
function weight computes weighted sum weight ffln ffl ffln sum sum sum sum sum nil weight weight sum weight consist sum rules system consisting weight rules 
systems form hierarchical combination sum defined symbol constructor note tuple symbols dependency pairs occur lefthand sides dependency pairs 
cycle estimated innermost dependency graph consists dependency pairs dependency pairs 
example cycle contains just sum just weight dependency pairs 
obtain corollary 
corollary innermost termination hierarchical combinations 
hierarchical combination 
innermost terminating iff innermost terminating exists infinite innermost chain dependency pairs 
innermost terminating innermost terminating exists founded weakly monotonic quasi ordering closed substitution dependency pairs hs ti ffl rules ur ffl proof 
corollary direct consequence thm 
dependency pair hs ti rules reduce normal instantiation rules ur 
ut innermost termination sum system easily proved lpo precedence sum ffl sum 
weight subsystem obtain constraints 
note sum dependency pair sum sum sum sum sum sum nil weight weight sum eliminating arguments sum ffl inequalities satisfied lpo precedence ffl sum 
way innermost termination example proved automatically 
system non overlapping proves termination 
note system simply terminating modularity quasi simplification ordering satisfied constraints resulting dependency pair approach elimination arguments 
corollary cor 
formulated termination innermost termination termination case cycle consisting dependency pairs 
contrast innermost termination case rules reduce instantiated right hand sides dependency pairs restrict normal substitutions 
prove absence infinite chains quasi ordering rules weakly decreasing 
constraints termination proof sum weight example sect 
satisfied quasi simplification ordering amenable automation constraints innermost termination fulfilled ordering 
non overlapping systems advantageous verify termination proving innermost termination 
splitting subsystems modularity results far context dependency pairs 
classical approach modularity split trs consideration subsystems prove innermost termination subsystems separately 
corollary thm 
shows consideration cycles estimated innermost dependency graph decompose original trs modular subsystems 
denote origin dependency pairs set rules dependency pairs stem innermost terminating example sect 
ff ff corollary modularity subsystems 
trs pn cycles estimated innermost dependency graph subsystems ur ng 
rn innermost terminating innermost terminating 
proof 
cycle dependency pair dependency pair 
reason hf dependency pair hg defined symbol corollary direct consequence thm 
innermost chain dependency pairs innermost chain 
ut instance example sect 
non empty cycles viz 
dependency pairs defined symbols right hand sides sets usable rules empty 
prove innermost termination system cor 
suffices prove innermost termination rule subsystems 
fact subsystems terminating easily proved automatically 
system polynomial interpretation mapping lan 
methods automated generation polynomial orderings instance developed ste gie 
second system lpo 
modularity criterion cor 
allows known simplification orderings innermost termination proofs non terminating systems guarantees innermost termination simply terminating subsystems sufficient innermost termination original trs 
similar splitting possible example sect 

particular modify trs non overlapping dependency pair may stem rules sufficient just contains 
denote tuples terms sn tm respectively 
cor 
allows conclude termination system termination rule subsystems 
termination proved lpo rule needs precedence second rule precedence required 
termination non simply terminating example implied termination simply terminating subsystems 
comparison related section show existing modularity results innermost termination obtained easy consequences criteria criteria extend previously developed results 
sect 
focuses composable trss sect 
gives comparison results hierarchical combinations 
shared constructors composable trss framework previous sections easily prove innermost termination modular composable trss trss disjoint sets defined symbols shared constructors gra 
trss composable systems contain rewrite rules define defined symbol symbol shared fl root cor 
implies result ohlebusch 
theorem modularity composable trss 
composable trss 
innermost terminating innermost terminating 
proof 
hf dependency pair exists rule 
rule composable 
constructors defined symbols similarly implies dependency pair dependency pair dependency pair 
arc hf dependency pair form hg hf dependency pair hg dependency pair 
cycle estimated innermost dependency graph consists dependency pairs dependency pairs 
contains dependency pairs superset ur defined symbols occur constructors similarly set dependency pairs ur cor 
innermost terminating innermost terminating 
ut modularity criterion composable trss direct consequence cor 

results extend modularity larger class trss allow splitting non composable subsystems share defined symbols demonstrated sect 

proper extensions krishna rao kr proved innermost termination modular certain form hierarchical combinations viz 
called proper extensions 
section show direct consequence results 
trs dependency relation smallest satisfying condition rewrite rule holds function depends definition defined symbols split sets contains defined symbols depend defined symbol definition proper extension kr 
form hierarchical combination 
set split sets ffl ff jf ffl proper extension rewrite rule satisfies condition subterm root root root contains symbols root position 
instance sum weight example sect 
weight depends definition sum 
note example proper extension weight rule symbol sum occurs symbol weight 
proper extension functions depending called recursive call functions 
cor 
imply result kr 
theorem modularity proper extensions 
proper extension 
trs innermost terminating innermost terminating 
proof 
similar cor 
form hierarchical combination cycle innermost dependency graph consists solely dependency pairs dependency pairs 
cycle consists dependency pairs ur dependency pairs contain defined symbols cycle consists dependency pairs 
hf dependency pair exists rule addition cycle 
belongs defined symbol occurs definition proper extension defined symbols cases defined symbols ur belong ur subsystem cycle dependency pairs ur cor 
innermost termination implies innermost termination ut modularity innermost termination proper extensions consequence cor 

hand demonstrated sum weight example results significantly extend class trss innermost termination proved modular way 
particular handle hierarchical combinations contains defined symbols arguments recursive calls 
systems occur frequently practice 
modularity criterion hierarchical combinations due dershowitz der 
occurrences symbols recursive calls symbols allowed oblivious rules termination depend rules 
criterion applicable sum weight example termination weight rules fact depends result sum 
alternative modularity result hierarchical combinations fernandez jouannaud fj 
result restricted systems arguments recursive calls decrease subterm relation compared multisets lexicographically 
result applicable sum weight example 
introduced refinement dependency pair approach order perform termination innermost termination proofs modular way 
refinement allows automated termination innermost termination proofs trss proofs possible cf 
sect 

showed new modularity results extend previous results modularity innermost termination 
due framework dependency pairs obtain easy proofs existing non straightforward modularity theorems 
examples section contains collection examples illustrate power modularity results 
examples trss innermost termination proof modularity provably impossible quasi simplification orderings examples standard path orderings amenable automation modularity results innermost termination easily verified automatically 
addition exist numerous examples innermost termination proof dependency pair approach may succeed modularity modularity results ease search quasi ordering satisfying resulting constraints 
example prove termination non simply terminating trs minus minus minus quot quot quot minus dependency pair approach directly apply cor 

subsystem consisting minus rules simply terminating instance proved recursive path ordering rpo 
quot system obtain constraints minus minus minus quot quot minus eliminating second argument minus satisfied rpo 
collection examples innermost termination proved automatically dependency pair approach ag 
examples hierarchical combinations proper extensions modularity results ease innermost termination proofs previous modularity results applied 
collection includes trss different areas computer science arithmetical operations mod gcd logarithm average sorting algorithms minimum sort quicksort algorithms graphs trees known non simply terminating trss literature der dh ste 
overlapping system trs leading example sect 

system simply terminating reduction embedded 
termination proved directly simplification ordering 
order quasi simplification ordering automated termination proof apply dependency pair approach 
constraints obtained modularity results include 
applying techniques synthesis quasi simplification orderings may eliminate arguments function symbols 
due fact need weakly monotonic ordering satisfying constraints generated 
example eliminate arguments simplification ordering satisfies constraints imply modularity result thm 
search different orderings satisfying constraints resulting different non empty cycles estimated dependency graph cf 
fig 

deleting second argument lpo comparing subterms right left lpo comparing subterms right 
note system overlapping locally confluent 
prove termination verifying innermost termination really thm 
termination proof 
non overlapping system system non overlapping variant preceding obtained replacing second rule cf 
sect 

system simply terminating reduction ex 

similar preceding example automatic termination innermost termination proof modularity fails resulting constraints imply satisfied simplification ordering 
example obtain estimated dependency graph fig 
identical estimated innermost dependency graph 
example non overlapping prove termination verifying innermost termination 
purpose may cor 

sets usable rules empty dependency pairs hf hf split original trs subsystems consisting rules respectively 
termination proved lexicographic recursive path ordering precedence termination proved lexicographic path ordering precedence way simply terminating subsystems imply termination non simply terminating trs 
hf hf hf fig 

estimated innermost dependency graph ex 

innermost terminating system system combines preceding examples known example toyama toy cf 
sect 

system terminating seen infinite cycling reduction 
innermost reduction term contains redex proper subterm 
similar preceding example cor 
innermost termination proof 
estimated innermost dependency graph contains non empty cycles consisting hf hf respectively 
example estimated innermost dependency graph identical estimated dependency graph arc hf 
cycles consist dependency pairs usable rules suffices prove innermost termination rules systems consisting second rule respectively 
fact subsystems simply terminating 
polynomial interpretation mapping lpo precedence cor 
allows split non terminating innermost terminating system simply terminating subsystems 
note modularity result simplification ordering satisfy resulting constraints 
reason eliminate arguments constraints imply sum weight trs computes weighted sum list see sect 
detailed description 
sum sum sum sum sum nil weight weight sum weight system hierarchical combination sum rules weight rules 
note proper extension oblivious trs obviously simply terminating 
estimated dependency graph identical estimated innermost dependency graph sketched fig 

ffi fl ffi fl fi ffl pq oe weight sum sum sum sum fig 

estimated innermost dependency graph ex 

trs non overlapping suffices prove innermost termination 
modularity resulting constraints satisfied quasi simplification ordering due constraint sum sum argument argument ffl eliminated 
eliminate arguments sum due constraint sum nil constraints sum sum enforces argument sum may deleted 
weight weight sum hold quasi simplification ordering 
termination sum weight example proved cor 

sum subsystem terminating proved lpo precedence sum ffl sum 
weight subsystem obtain constraints sum sum sum sum sum nil weight weight sum satisfied lpo deleting arguments sum ffl 
time precedence ffl sum 
note constraints termination sect 
satisfied quasi simplification ordering amenable automation example shows proving innermost termination essentially easier proving termination 
reason cycle consisting sum obtain constraints demand weight rules weakly decreasing 
similar argumentation showed modularity necessary example sum argument deleted 
due weight argument weight deleted 
weight weight sum satisfied quasi simplification ordering amenable automation 
obviously satisfied path ordering amenable automation satisfied polynomial ordering natural coefficients 
reason sum depends arguments 
polynomial corresponding sum monomials occur sum mapped number large sum numbers corresponding particular number corresponding sum strictly greater number corresponding 
renaming lambda calculus simplified variant trs shortened simplified variant system renaming lambda calculus 
full system ex 

true false true false system simply terminating left hand side rule embedded right hand side 
non overlapping sufficient prove innermost termination 
purpose need modularity results argument second argument eliminated 
system hierarchical combination proper extension 
prove innermost termination cor 

termination rules instance verified rpo 
rules obtain constraints eliminating arguments true false true false inequalities satisfied rpo precedence true false renaming lambda calculus system variant algorithm ma 
purpose function ren replace free occurrence variable term variable substitution applied lambda term lambda represents apply ff conversion step lambda rename new variable different occur lambda 
subsequently renaming applied resulting term 
reason trs nested recursive call function ren 
variables represented var list terms 
variable var distinct variables occurring lambda 
true false false eq nil nil true eq nil false eq nil false eq eq eq eq var var eq eq var apply false eq var lambda false eq apply var false eq apply apply eq eq eq apply lambda false eq lambda var false eq lambda apply false eq lambda lambda eq eq true var var var false var var var ren var var var eq var var ren apply apply ren ren ren lambda lambda var ren ren var consist rules ren rules ren subsystem 
trs hierarchical combination trs simply terminating left hand side rule embedded right hand side non overlapping 
cor 
termination proof 
termination instance proved rpo 
complete termination proof find quasi ordering rules weakly decreasing strict inequalities satisfied ren apply ren ren apply ren ren lambda ren ren var ren lambda ren var founded ordering satisfying constraints easily synthesized automatically 
instance polynomial interpretation ren mapped ren mapped lambda mapped apply mapped mapped nil var true false eq mapped constant 
note modularity result cor 
essential termination proof 
termination system proved resulting inequalities satisfied quasi simplification ordering 
reason due eq var var eq argument var deleted 
second argument deleted ren var var var eq var var enforces ren depend second argument 
due eq eq argument ffl eliminated 
inequality ren lambda ren ren var satisfied quasi simplification ordering 
simplified system ex 
obtained subsystem eq nil nil true eq nil false eq var var eq true var var var false var var var ren var var var eq var var ren lambda lambda var ren ren var removing arguments eq ren lambda eliminating arguments ffl second eq rule replacing var arguments rules deleting lambda unnecessary arguments var ren rule renaming variables function symbols eq corresponds nil corresponds ffl corresponds var corresponds ren corresponds lambda corresponds 
overlapping variant system overlapping trs inspired preceding example 
true false true false system simply terminating rule self embedding 
overlapping locally confluent sufficient prove innermost termination 
modularity automated termination proof fail third argument argument eliminated 
quasi simplification ordering satisfies 
just cycle estimated dependency graph contains dependency pair viz 
fhf ig 
absence infinite chains dependency pair proved rpo arguments deleted 
rules weakly decreasing precedence true false 
cycles eliminate arguments rpo 
selection sort trs wal obviously simply terminating 
trs sort list repeatedly replacing minimum list head list 
uses replace replace leftmost occurrence list functions min encode conditions 
ensure conditions evaluated true false corresponding result evaluated 
argument min condition tested argument original argument min 
evaluation possible condition reduced true false 
eq true eq false eq false eq eq le true le false le le min min min min le min true min min false min replace nil nil replace replace eq replace true replace false sort nil nil sort min replace min trs non overlapping verification innermost termination sufficient 
hierarchical combination proper extension oblivious cor 

trs consisting rules ones innermost terminating resp 
terminating proved dependency pair approach 
complete innermost termination proof obtain inequality sort sort replace min demand rules rules usable 
need weakly monotonic orderings synthesizing suitable ordering may eliminate arguments function symbols 
apart eliminating arguments function symbols possibility replace functions arguments 
example deleting arguments replace substitute terms replace third argument example suitable elimination 
ffl 
eq 
eq le 
le replace 
replace 
resulting inequalities satisfied recursive path ordering ffl greater min precedence 
note modularity path ordering lpo rpo amenable automation satisfy resulting constraints 
reason due eq eq argument eliminated min implies argument ffl deleted 
due replace true third argument replace removed 
replace replace implies replace depend second argument replace greater equal replace precedence replace xi replace replace depends second argument replace false implies replace xi ffl 
replace xi ffl 
sort sort replace hold 
different termination arguments version trs shortest systems demonstrate modularity 
modularity results termination system proved path orderings lpo rpo amenable automation termination proof polynomial orderings fails 
reason polynomial corresponding function lim gamma gamma 
large arguments inequalities corresponding second rule satisfied 
cor 
suffices prove termination rule subsystems 
termination easily verified lpo comparing subterms left right rule second rule compared right left 
different termination arguments version termination trs preceding example proved existing modularity criteria split subsystems disjoint defined symbols adding third rule turns hierarchical combination proper extension oblivious 
cor 
termination proof termination rule proved lpo comparing subterms left right 
constraints eliminate arguments lpo comparing subterms right left 
maximal cycles think formulating thm 
modularity theorems alternative way just considering maximal cycles modularity 
cycle called maximal proper superset cycle 
example consider modification ex 
obtain dependency pairs hf hf hg hg cycles estimated dependency graph maximal cycle example simple way compute set maximal cycles eliminate edges dependency pairs estimated dependency graph part cycle 
remaining unconnected graphs correspond maximal cycles 
modification thm 
trs terminating iff maximal cycle exists infinite chain dependency pairs subcycle quasi ordering prove absence infinite chains quasi ordering subcycles maximal cycle weak 
example dependency pairs maximal cycle 
quasi ordering subcycles maximal cycle resulting constraints satisfied path ordering amenable automation polynomial ordering 
due modularity result prove absence infinite chains separately cycle 
polynomial orderings mapped mapped 
cycle mapped cycle map cycles mapped polynomial orderings prove absence infinite chains cycles 
different eliminations version trs short example system modularity necessary 
system simply terminating automated termination proof dependency pairs requires modularity results 
reason due argument eliminated quasi simplification ordering satisfies constraint 
termination easily proved cor 

system consisting rule obviously terminating constraints argument eliminated 
constraints satisfied rpo precedence 
similar termination proof possible trs different eliminations version adding symmetrical rules trs ex 
turned system hierarchical combination 
dependency pairs example hf hf hf hg hg hg non empty cycles constraints resulting cycles thm 
eliminate arguments cycles eliminate arguments constraints satisfied rpo 
ag arts giesl termination constructor systems 
proc 
rta lncs new brunswick nj 
ag arts giesl automatically proving termination simplification orderings fail 
proc 
tapsoft lncs lille france 
ag arts giesl proving innermost normalisation automatically 
proc 
rta lncs spain 
ag arts giesl termination term rewriting dependency pairs 
technical report tu darmstadt germany 
informatik th darmstadt de reports notes ps gz art arts termination absence infinite chains dependency pairs 
proc 
caap lncs linkoping sweden 
art arts automatically proving termination innermost normalisation term rewriting systems 
phd thesis utrecht univ netherlands 
der dershowitz termination rewriting 
symb 
comp 
der dershowitz hierarchical termination 
proc 
ctrs lncs jerusalem israel 
dh dershowitz natural termination 
tcs 
dro 
springer berlin 
fj fern andez 
jouannaud modular termination term rewriting systems revisited 
proc 
th workshop specification data types lncs margherita italy 
gie giesl generating polynomial orderings termination proofs 
proc 
rta lncs kaiserslautern germany 
gra gramlich generalized sufficient conditions modular termination rewriting 
appl 
algebra engineering comm 
comp 
gra gramlich relations restricted termination confluence properties rewrite systems 
fundamenta informaticae 
gra gramlich termination confluence properties structured rewrite systems 
phd thesis universitat kaiserslautern germany 
gra gramlich proving termination innermost termination 
proc 
rta lncs new brunswick nj 
hl huet lankford uniform halting problem term rewriting systems 
technical report inria le chesnay france 
kl kamin 
levy generalizations recursive path ordering 
department computer science university illinois il 
kr krishna rao modular proofs completeness hierarchical term rewriting systems 
theoretical computer science 
ko kurihara modularity simple termination term rewriting systems shared constructors 
theor 
comp 
sc 
lan lankford proving term rewriting systems noetherian 
technical report memo mtp louisiana tech 
university la 
ma mcallester walther recursion 
proc 
cade lncs new brunswick nj 
mid middeldorp sufficient condition termination direct sum term rewriting systems 
proc 
lics pacific grove ca 
mid middeldorp modular properties term rewriting systems 
phd thesis free university amsterdam netherlands 
mt middeldorp toyama completeness combinations constructor systems 
journal symbolic computation 
mz middeldorp zantema simple termination rewrite systems 
theoretical computer science 
ohlebusch modularity termination term rewriting systems 
theoretical computer science 
ohlebusch modular properties composable term rewriting systems 
journal symbolic computation 
rus rusinowitch termination direct sum term rewriting systems 
information processing letters 
smp schmidt schau marchiori modular termination consistent left linear term rewriting systems 
tcs 
ste steinbach generating polynomial orderings 
information processing letters 
ste steinbach automatic termination proofs transformation orderings 
proc 
rta lncs kaiserslautern germany 
full version appeared technical report sr universitat kaiserslautern germany 
ste steinbach simplification orderings history results 
fundamenta informaticae 
toy toyama counterexamples termination direct sum term rewriting systems 
information processing letters 
toyama klop barendregt termination direct sums left linear term rewriting systems 
journal acm 
wal walther proving termination algorithms machine 
artificial intelligence 

