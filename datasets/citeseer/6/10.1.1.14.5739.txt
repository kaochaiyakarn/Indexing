uml action semantics model daniel budapest university technology economics department measurement information systems budapest 
mit bme hu 
graph transformation provides visual mathematically precise way specify arbitrary model transformations model driven architecture 
action semantics uml standard platform independent way describe dynamic behavior methods executable actions uml system models prior implementation allowing development highly automated optimized code generators uml case tools 
propose general encoding model transformations specified graph transformation rules executable action semantics expressions 
result implementations transformations generated automatically offthe shelf mda tools 
keywords action semantics model transformation mda uml graph transformation 
transformations model driven architecture main trends software engineering dominated model driven architecture mda vision object management group omg 
mda software development driven thorough modeling phase platform independent model pim business logic constructed ii platform specific models psms including details underlying software architecture derived model transformations followed iii automatic generation target application code 
psms defined means unified modeling language uml de facto standard visual object oriented modeling language systems engineering 
inclusion action specification language uml standard action semantics uml breakthrough tool vendors develop highly automated optimized code generators uml case tools executable action specification language 
uml lacks precise formal semantics hinders formal analysis uml designs indispensable developing complex dependable partially carried visit author university paderborn germany supported research network hungarian information communication technologies applications hungarian national scientific foundation safety critical applications 
provide formal semantics uml models frequently projected various mathematical domains petri nets transition systems process algebras results formal analysis back annotated uml system model hide mathematics designers 
model transformations mda environment upcoming uml standard aims uml family individual languages built small kernel language different kinds model transformations play central role uml entire mda approach 
model transformations language control correctness consecutive refinement steps evolution static structure model define rule operational semantics directly models model transformations different languages provide precise means project semantic content diagram indispensable consistent global view system design visual uml diagram sentence language uml family transformed individually defined semantic domain process called model interpretation denotational semantics 
related model transformation methodologies extensive research 
existing model transformation approaches grouped main categories relational approaches approaches typically declare relationship objects links source target language 
specification typically metamodel ocl constraints 
operational approaches techniques describe process model transformation source target language 
specification mainly combines metamodeling graph transformation triple graph grammars term rewriting rules xsl transformations :10.1.1.19.6381
problem statement approaches tackle automated generation model transformation programs provide precise mathematical conceptual background research prototype tools exist supporting transformations scale industrial applications 
order facilitate widespread model transformations integrate existing mda standards tools keeping mathematically precise conceptual framework 
words academic tools viatra useful experimentation verification model transformations final product quality implementation integrated mda approach uml standard possible :10.1.1.19.6381
contribution current aim encode model transformations specified visually metamodeling graph transformation standard action semantics descriptions allow automatic generation transformation scripts various software architectures shelf uml tools 
structure rest structured follows 
section provides brief concepts formal treatment model transformation systems sec 
gives overview uml action semantics standard 
sec 
describe general encoding model transformation systems action semantics expressions 
sec 
concludes 
formalizing model transformations models metamodels syntax visual modeling languages defined corresponding metamodel uml notation simplified class diagram conforms best engineering practices visual specification techniques 
models defined form uml object diagrams sentences languages formed model conform metamodel 
typically models metamodels represented internally typed attributed directed graphs 
metamodel classes mapped graph node associations projected graph edge type graph denoted tg 
model level objects links mapped nodes edges respectively model instance graph denoted 
example 
sample metamodel model finite automata depicted fig 

transitions states init states states transitions transitions automaton color state transition metamodel init states transitions reachable current transition transition automaton state transition state state model fig 

metamodel model finite automata metamodel formed instance finite automaton composed states transitions 
transition leading state state 
initial states automaton marked init active states marked current reachable states starting initial states modeled reachable edges 
sample automaton consisting states transitions leading leading leading depicted 
note initial state 
model transformation systems dynamic operational semantics modeling language transformations modeling languages formalized model transformation systems introduced variant graph transformation systems predefined set control structures 
graph transformation rule tuple rule lhs neg rhs lhs left hand side graph rhs right hand side graph neg denote optional negative application conditions 
application rule model graph uml model user rewrites user model replacing pattern defined lhs pattern rhs 
performed 
finding match lhs graph pattern matching 
checking negative application conditions neg prohibit presence certain nodes edges negative application conditions denoted graph objects cross 
removing part graph mapped lhs rhs graph yielding context graph 
gluing rhs context graph obtain derived model entire model transformation process defined initial graph manipulated set model transformation rules micro steps executed specific mode accordance semantics macro steps hierarchical control flow graph 
model transformation system mts init cfg respect type graph tg triple init defines initial graph set model transformation rules compatible tg cfg set control flow graphs defined follows 
types nodes cfg try forall loop 
types edges succeed fail 
control flow graph evaluated virtual machine traverses graph edges applies rules associated node 

try node reached associated rule tried executed 
rule applied successfully node determined succeed edge case execution failed fail edge followed 

loop node associated rule applied long possible may cause non termination macro step 
succeed edge may lead loop node 

forall node reached related rule executed distinct possible occurrences current host graph 
succeed edge may lead loop node 
note cfg model follows control flow concepts viatra tool 
long possible kind control conditions additional negative application conditions forall nodes directly yield appropriate control conditions existing graph transformation tools 
example 
pair rules describing reachability problem finite automata formulated graph rewriting rules depicted fig 

rule states states automaton marked initial reachable state marked previously 
rule expresses reachable state automaton connected transition state reachable reachable result rule application 
note negative application condition crossed reachable edge left hand side rule transformation terminate 
control flow graph apply forall mode executed long possible 
ut automata state transition state states transitions states reachable reachable lhs automata state transition state states transitions states reachable reachable rhs control flow graph automata state initial rhs reachable automata state initial lhs reachable fig 

calculating reachable states graph transformation action semantics uml overview action semantics uml provides standardized platform independent way specify behavior objects distributed environment 
basically user describe body methods executable actions language prior implementation phase constructing dataflow model 
action specification action specification consists main elements pins input output ports action having specific type multiplicity pin may hold collection values time allowed multiplicity variables auxiliary store results intermediate computations data flow connects output pin action input pin providing implicit ordering action execution control flow imposes explicit ordering constraint action pairs having connecting data flow actions object manipulation memory operations arithmetic message passing procedures provides packaging actions input output pins method body 
action execution execution action stages life cycle 
waiting 
action execution may created time procedure execution containing procedure created 
creation action execution status waiting pin values available 
ready 
action execution status waiting ready completion execution prerequisite actions actions sources data flows predecessors control flows action ready 
values input pins target action execution determined values output pins prerequisite action executions actions data flows 
executing 
ready action execution eventually begins executing action semantics determine specific time delay ready executing 
complete 
execution terminated action complete 
action execution pin values output pins action computed specific semantics different actions 
output values completed execution copied impossible access completed execution 
actions default orderings sequential execution traditional programming languages actions implicitly ordered data flow explicitly ordered control flow executed arbitrary order 
types actions specific semantics different kind actions grouped main categories actions relevant encoding sec 

computation actions primitive actions mathematical functions defined standard details composite actions recursive structures permit complex actions composed simpler ones providing means basic control flow actions read write actions access navigate modify model level constructs objects links attribute slots variables collection actions apply subaction collection elements avoid overspecification control caused explicit indexing extracting elements 
syntax actions action semantics standard defines metamodel formedness constraints language restrictions concrete syntax 
respect formed action expression complex object diagram easy process case tools extremely hard read write system engineers 
fact existing uml case tools integrated action specification language textual notations describing actions 
encoding model transformation systems sequel levels self explanatory pseudo action language understand idea encoding sticking specific existing dialects tools ii cope technicalities standardized way object diagrams 
action semantics model transformation systems section provide general way encode model transformation systems action semantics descriptions provide standard platform independent way implement transformations mda environment 
generation technique takes metamodel model transformation system input generates set actions output 
results transformations obtained form object collaboration diagram 
idea basically follows graph pattern matching techniques implemented progres fujaba tools procedural object oriented languages 
encoding consists main steps introduced details proposals section implementing graph pattern matching local searches user model collection actions navigation capabilities checking non existence certain objects links prescribed negative conditions user defined function adding deleting graph objects actions object link manipulation implementing rule application modes various corresponding collection actions simulating execution control flow graph conditional actions explicit control flow restrictions 
due page limitations part discussed extended version current 
encoding introduced running example reachability problem finite automata 
simple model transformation language includes handling major conceptual problems encoding model transformation systems expressions 
action semantics pattern matching implementation graph pattern matching algorithm action semantics central part entire encoding 
main challenge relies fact graph transformation tools traditionally control oriented global constraintbased graph pattern matching algorithms action semantics provide data flow specification technique allowing local navigations pattern matching algorithms 
addition encoding pattern matching depends rule application mode rule may different representations applied different application modes 
loop try modes handled similarly loop mode try mode rule tried applied long possible application depends applicability current differ essentially behavior forall mode rule applications executed matching 
sequel discuss encoding rule applied forall mode demonstrative example alg 
pseudo encoding shown alg 
detailed explanations current section 
note node identifiers rules correspond variables ease comparison graph transformation rules pseudo representation 
algorithm encoding pseudo action specification language automaton variable automaton fs initial fs parallel state reachable reachable starting point pattern matching proposal 
starting point pattern matching identified instance retrieved executed instance model class automaton example stored variable see line alg 

representation data flow required connect output pin input pin action 
specify previous value stored variable overwritten setting variable true 
note matching instances lhs graph nodes stored variables 
example 
representation line alg 
depicted fig 

expect retrieve automaton instance stored variable 
type checking objects problem solved visit type conforming objects pattern matching matching patterns 
proposal 
new object obtained time pattern matching matched corresponding node graph transformation rule immediately test type conforming metamodel class 
see lines alg 
examples 
testing performed test clause consisting single 
test action fig 

starting point pattern matching checking object instance certain class return boolean value output pin serves test output test clause 
value retrieved test subaction clause true body action clause executed consists actions pattern matching case 
example 
representation line alg 
depicted fig 

check value stored variable instance class automaton 
naturally get value variable connected input pin data flow 
fig 

checking types objects navigating links core operation graph pattern matching uml environment navigation links 
proposal 
certain object matched neighbors object connected links corresponding edge types graph transformation rule obtained navigating links line alg 

navigation results single object collection objects stored variable 
navigation link applying means exactly object called source object link known may associated single value input pin target link unknown naturally association navigated directions allowed metamodel link correspond certain association defined result navigation single object set objects retrieved depending multiplicities association topology interconnected objects stored variable 
fig 

navigating links example 
representation line alg 
depicted fig 

read value variable input pin corresponding association initial association 
executed result written variable variables capital initial store collection objects sequel 
rule application mode specific processing collections proposal 
processing collections obtained navigating links depends rule application modes 
algorithm encoding pseudo action specification language automaton variable automaton fs reachable fs sequential state states ft source ft sequential transition transitions fs target fs sequential state state reachable 
reachable processing collection pattern matching rule applied forall mode see line algorithm element collection processed independently subsequent actions pattern matching process applied required 
processing collection pattern matching rule applied try loop mode see lines alg 
element collection processed sequentially required element collection needs processed complete matching successfully far boolean condition lines 
cases current element collection corresponding matching certain node lhs rule stored variable 
collection empty subactions executed instantiation omitted 
fig 

implementing application modes forall example 
representation see fig 
line alg 
read collection variable input pin constraint stating value contained output pin stored variable 
testing existence links weakness standard nodes lhs instantiated objects test existence links objects prescribed edges lhs visited navigation non existence links case negative conditions 
efficiency reasons tests performed soon possible 
example 
instance line alg 
check negative condition existing reachable link automaton object stored variable initial state object stored executing boolean function reachable 
unfortunately existence link certain type relating objects tested 
function uml models expressions implemented predefined actions user function declared signature specification action defined specification semantics 
typically action implemented uml case tool action specification language part standard unfortunate 
proposal 
standard extended required store associated object input pin storing input boolean valued output pin 
extension standard implementation external mathematical function case tool dependent fit generality model transformations 
manipulating links objects successful pattern matching phase objects links manipulated difference lhs rhs rule 
proposal 
transformation rule prescribes addition object executed created object stored new variable 
deletion object executed object retrieved corresponding variable 
addition link executed create link certain type objects read corresponding variables 
deletion link executed destroy link certain type objects read corresponding variables 
fig 

creating links example 
encoding link creation line alg 
demonstrated fig 

reachable link created objects type automaton type state executed values specified data flows corresponding ends defined related association metamodel 
method automatically implement model transformations specified high abstraction level metamodeling techniques graph transformation rules mapping uml action semantics expressions 
main advantage approach visual mathematically precise model transformations directly encoded standard action specification language mda uml environment providing smooth integration formal specifications industrial standards 
entire encoding demonstrated small example reachability analysis finite automata rich cover basic rules encoding 
approach conceptually followed graph pattern matching algorithms progres especially fujaba systems 
global constraint satisfaction searches matching pattern searched locally navigating links objects 
strict theoretical point view global strategies efficient local searches practical experiences previous graph transformation systems demonstrated pattern matching navigation efficient practical cases fits better objectoriented nature uml 
encoding discovered weakness action semantics testing existence links certain type objects standard fixed order obtain fully functional navigation language actions 
acknowledgments authors grateful albert fruitful discussion tool demonstration conference 

kent 
relational approach defining transformations metamodel 

hussmann cook eds proc 
fifth intern 
conf 
unified modeling language language applications vol 
lncs pp 

springer dresden germany 

dal cin 
dependability analysis early phases uml system design 
international journal computer systems science engineering vol 
pp 


gy 
zs 
pap 
viatra visual automated transformations formal verification validation uml models 
ase th ieee intern 
conf 
automated software engineering 
edinburgh uk 

ehrig engels 
kreowski rozenberg eds 
handbook graph grammars computing graph transformation vol 
applications languages tools 
world scientific 

engels heckel 
rule specification behavioral consistency uml meta model 
gogolla eds uml unified modeling language 
modeling languages concepts tools vol 
lncs pp 

springer 

engels heckel 

consistency preserving model evolution transformations 

hussmann cook eds proc 
fifth intern 
conf 
unified modeling language language applications vol 
lncs pp 

springer dresden germany 

heckel taentzer 
automatic translation uml models semantic domains 
proc 
agt workshop applied graph transformation pp 

grenoble france 

juan de lara 
atom tool multi formalism meta modelling 

weber eds th international conference fase fundamental approaches software engineering grenoble france april proceedings vol 
lncs pp 

springer 

kennedy carter 
executable uml 
www kc com html html 

larrosa 
graph pattern matching constraint satisfaction 
ehrig taentzer eds joint workshop graph transformation systems 
berlin germany 

mellor 
executable uml foundation model driven architecture 
addison wesley 


automatic model transformations extended uml object diagrams modeling environments 
ieee trans 
software engineering vol 
pp 


nickel 
tool demonstration fujaba environment 
nd intern 
conf 
software engineering icse 
acm press limerick ireland 

object management group 
action semantics uml 
www omg 
org 

guillaume 
general framework xslt model transformations 
whittle 
eds workshop transformations uml pp 



project technology 
development suite 
www com 

rozenberg ed 
handbook graph grammars computing graph transformations foundations 
world scientific 

schurr 
specification graph translators triple graph grammars 
ed proc 
wg international workshop graph theoretic concepts computer science lncs pp 

springer 

schurr winter 
chap 
progres approach language environment pp 

world scientific 


viatra visual automated model transformations 
ph thesis budapest univ technology economics dept measurement information systems 
submitted 


metamodeling mathematics precise visual framework describing semantics domains uml models 

hussmann cook eds proc 
fifth intern 
conf 
unified modeling language language applications vol 
lncs pp 

springer dresden germany 


designing automatic transformation visual languages 
science computer programming vol 
pp 


whittle 
transformations software modeling languages automating transformations uml 

hussmann cook eds proc 
fifth intern 
conf 
unified modeling language language applications vol 
lncs pp 

springer dresden germany 

