revisiting tree construction principles dieter yannis theodoridis computer technology institute box gr patras 
cti gr 
spatial indexing researched field benefited computer science outstanding results 
effort seen revisiting outstanding contributions spatial indexing questioning paradigms designing access method globally improved performance characteristics 
particular argue dynamic tree construction typical clustering problem addressed incorporating existing clustering algorithms 
working example adopt known means algorithm 
study effect relaxing way split procedure propose multiway split inherently supported clustering techniques 
compare clustering approach prominent examples spatial access methods tree 
classically term spatial database refers database stores various kinds multidimensional data represented points line segments polygons volumes kinds geometric entities 
spatial databases include specialized systems geographical information systems cad multimedia image databases role spatial databases continuously changing importance increasing years 
emerging new classical applications urban transportation planning resource management environmental modeling new types data spatiotemporal fall realm spatial data handling 
expanding scope defines spatial databases demands methods supporting databases altered 
example traditionally indexing scope improving query response time facing dynamic environment data continuously updated added spatiotemporal context parameters insertion time gain importance 
key characteristic spatial database powerful tool ability manipulate spatial data simply store represent 
basic form manipulation answering queries related spatial properties data 
typical queries range queries searching spatial objects contained region point location queries special case range query search region reduced point nearest neighbor queries searching spatial objects reside closely object 
support queries efficiently specialized data structures necessary traditional data structures alphanumeric data trees hashing methods appropriate spatial indexing due inherent lack ordering multi dimensional space 
multi dimensional extensions trees tree structure variants popular indexing methods spatial query processing purposes 
vast majority existing proposals including original guttman tree integrated commercial database systems informix oracle heuristics organize entries tree structure 
heuristics address geometric properties enclosing node rectangles minimization area enlargement tree minimization area enlargement perimeter enlargement combined overlap increment tree 
argue crucial part tree construction node splitting procedure problem finding clusters set entries node overflows 
investigate idea go step relaxing way property node splitting 
adopting multi way split procedure permit clustering find real clusters just groupings 
term resulting tree variant adopts clustering splitting procedure cr tree 
organized follows 
section provides necessary background trees particularly tree node splitting procedure 
section proposes algorithm incorporates known clustering technique means node splitting procedure 
kms means split general finds clusters 
choice clusters silhouette coefficient measure proposed 
section provides experimental results terms performance speed tree quality obtained 
section briefly discusses related 
section gives directions 
spatial indexing trees extensions trees multi dimensional space 
trees balanced leaf nodes appear level desirable feature guarantee space utilization 
mbr approximations data objects stored leaf nodes intermediate nodes built grouping rectangles lower level maximum node capacity 
rectangles level overlapping covering completely disjoint assumption properties 
performance index characteristics tree performance usually measured respect retrieval cost terms page disk accesses queries 
majority performance studies concerns point range nearest neighbor queries 
considering tree performance concepts node coverage overlap nodes important 
obviously efficient tree search requires overlap coverage minimized 
minimal coverage reduces amount dead area empty space covered tree nodes 
minimal overlap critical minimal coverage search window falling area overlapping nodes paths leaf nodes may followed overlapping nodes slowing search 
advent new types data moving object trajectories index characteristics insertion time time takes insert tuple index gain importance 
similar argument actual size data structure comprising index 
emerging small scale computing devices resources available databases tightened large index structures unusable 
performance index measured terms query performance terms combined measures incorporates characteristics 
splitting previous trees shown split procedure critical part dynamic tree construction significantly affects index performance 
paragraphs briefly heuristic techniques split nodes overflow 
especially tree split techniques linear quadratic exponential proposed guttman original focus quadratic algorithm turned effective studies 
tree quadratic algorithm entry assigned produced nodes criterion minimum area selected node enlarged order include new entry 
tree tree split algorithm split axis minimizes cost value equal sum margin values different distributions 
second step distribution achieves minimum overlap value selected final chosen split axis 
hand tree split algorithm tends prefer group largest size higher population 
obvious group enlarged cases 
minimum node capacity constraint exists number entries assigned populated node control split procedure 
fact usually causes high overlap nodes 
hand distinction minimum margin criterion select split axis minimum overlap criterion select distribution split axis followed tree split algorithm cause loss distribution example distribution belongs rejected axis 
clustering algorithms node splitting mentioned split procedure plays fundamental role tree performance 
described section trees trees heuristic techniques provide efficient splitting entries node overflows groups minimization area enlargement minimization overlap enlargement combinations rule vast majority rtree variations 
node splitting optimization problem takes local decision objective probability simultaneous access resulting nodes split minimized query operation 
clustering maximizes similarity spatial objects cluster intra cluster similarity minimizes similarity spatial objects clusters inter cluster similarity 
probability accessing node rectangles query operation probability traversing subtrees proportional similarity queries study 
node splitting assign objects high probability simultaneous access node assign objects low probability simultaneous access different nodes 
account consider tree node splitting typical cluster problem problem finding optimal clusters data objects andn parameter values 
consideration suggest heuristic methods mentioned split algorithms easily replaced clustering technique chosen extensive related literature 
fig 

splitting overflowing node groups 
clustering algorithms proposed classified classes partitioning hierarchical density 
partitioning algorithms partition data way optimizes specified criterion 
hierarchical algorithms produce nested partitioning data iteratively merging agglomerative splitting divisive clusters distance 
density algorithms identify clusters dense regions data 
means clustering algorithm consider tree node splitting problem finding optimal bipartition point rectangle set choose partitioning algorithms 
existing techniques selected simple popular means algorithm 
selection means due reasons 
means clustering algorithm efficient respect execution time 
time complexity space complexity analogous tree linear split algorithm 
means order independent guttman linear split heuristic 
page split local decision 
simplicity means suits objective problem 
clustering algorithms reported focus handling large volumes datasets case 
algorithm means divide set objects clusters 
km initialization arbitrary choose objects initial cluster centers 
km re assign objects clusters assign object cluster object similar mean value objects cluster 
km update cluster centers update cluster means calculate mean value objects cluster 
km repeat repeat steps km km change 
means formally described find clusters means initially selects objects arbitrarily size data set centers clusters 
iterative manner assigns object closest cluster updates cluster centers mean objects assigned corresponding cluster starts 
iteration stops change cluster centers 
proceed discussion incorporate means tree construction procedure give give details algorithm 
intend apply means form clusters points rectangles leaf node overflows form clusters rectangles internal node overflows 
purpose showing dissimilarity define euclidean distance shapes includes points rectangles diagonal respective minimum bounding rectangle containing respective shapes 
mean set objects key parameter means 
definition mean set points may straightforward true mean set rectangles internal node splitting 
adopted definitions 
mean nd dimensional points xi pi pid defined point 
pi pid dimensional rectangles ri li lid ui uid li lid coordinates bottom left corner ui uid coordinates upper right corner define rectangle defined point corresponds center gravity 
li ui area ri area ri multi way node splitting area ri area ri li ui rule existing tree access methods split node overflows new nodes 
number origins tree split technique 
trees obvious choice split node overflows new ones considered single universal choice handling spatial data 
illustrate point alternative splitting 
relaxing constraint adopting novel multi way split procedure may reveal efficient tree structures 
knowledge time literature overcome way split property multidimensional access methods idea implemented kms algorithm means split 
algorithm kms divide set entries nodes kmax means 
kms initial clustering 
apply means entries find clusters 
compute 
average silhouette width max kms repeating step kmax apply means entries find clusters 
compute 
max kms assign entries nodes assign entries kth cluster kth node 
kms kms takes advantage means capability find general clusters set points space 
words kms addresses general cluster problem split node overflows groups 
multi way split algorithm fundamental revision classic split approach 
rest section focus issues describe implementational details respect gist relaxing way splitting gist straightforward :10.1.1.14.8651
finding optimal number clusters means requires number clusters input 
described literature priori knowledge optimal number clusters possible 
fact comparing compactness different clusterings set objects finding difficult problems cluster analysis unique solution 
compare quality different clusterings cluster cluster point data set recursively find measure called average silhouette width proposed 
number clusters average silhouette width average value silhouette widths silhouette width cluster average silhouette objects cluster 
turn silhouette object number indicates closeness object cluster varies range max andb equal mean dissimilarity object rest cluster objects belongs closest cluster respectively 
closer value higher object belongs cluster compared rest clusters 
having defined silhouettes objects average silhouette widths clusters define number gives maximum average silhouette width called silhouette coefficient sc sc max clustering select corresponds average silhouette width equal sc 
restricting maximum number clusters silhouette coefficient considered measure find optimal number clusters 
practice expensive set kmax order apply means possible values 
considered kmax parameter tuned kmax safe choice 
choice discussed detail extended version 
experimental results section presents methodology evaluation proposals obtained results terms speed index construction query performance index quality 
common implementation platform fair comparison selected gist framework 
original tree implementation included gist software package modified versions gist framework allowing tree implementation forced reinsertion support realization cr tree 
cr tree differs tree splitting routine rest tree construction procedure remains unchanged routine traverses tree finds suitable leaf node insert new entry 
details gist implementation 
study considered data sets illustrated 
random synthetic data set points generated random number generator produced coordinates 
clustered synthetic data set points generated algorithm introduced 
sierpinsky fractal data set points generated outputting center points line segments fractal sierpinsky data set 
generator 
real data set points representing earthquakes greece period 
publicly available web site institute national observatory athens greece www noa gr 
construction indices realized step fashion followed gist framework bulk loading str algorithm step successive insertions second step 
settings apply experiments conducted 
test case available data bulk loading remaining dynamic insertions 
pagesize set kbytes corresponding dimensional points leaf level dimensional rectangles intermediate level 
test run queries average result 
data set queries exercise follow distribution 
random points clustered points data set sierpinsky data set fig 

dimensional test data sets 
performance studies compares cr tree terms insertion time time needed second construction step indices dynamic insertions data sets intel mhz mb ram system 
query performance number operations range nearest neighbor query loads 
index quality quality indices measured terms leaf utilization sum leaf node rectangles perimeters areas overlap 
insertion time query performance index insertion time equally important measure robustness scalability critical factor emerging applications required manage massive amounts data highly dynamic environment efficiently 
compare structures measuring time required second step tree construction dynamic insertions 
results appear 
observed insertions cr tree done fast original tree times faster tree 
query performance common practice spatial database literature compare access methods terms node page accesses various query loads 
compare performance tree variants range nearest neighbor queries 
shows experimental results various range query sizes 
stated cr tree performance level tree outperforms tree 
particular performance cr tree identical tree random clustered sierpinsky data sets 
clustered data small range queries outperforms tree 
similar results obtained nearest neighbor queries 
cr tree performs level tree clearly outperforms tree 
index quality quality index resulting tree data structure easily quantified remains open issue theory 
selected factors indicators quality index space utilization sum node rectangles perimeters leaf level 
higher space utilization compact index expensive maintenance terms storage 
effect parameter tree performance shown studies 
true perimeter 
tree revealed effect perimeter margin discussed section 
cr tree impose restrictions regarding utilization nodes resulting split contrary tree minimum utilization tree minimum utilization achieves competitive space utilization illustrated 
lowest value achieved data set highest random data set 
perimeter measure better cr tree compared tree see 
improvement tree quality incorporating clustering fact 
quality cr tree general close tree clustered data better 
parameters related tree quality support results query performance reported previous sections 
cr tree data structure appears similar tree 
query performance similar tree tree 
summary cr tree query performance competitive tree far better tree 
query performance achieved having comprise insertion time 
cr tree level tree faster tree 
statistics collected index quality support fact resulting tree data structure cr tree similar tree 
seconds cr average insertion time random clustered sierpinsky fig 

average time insertion average os average os cr cr random data range queries query size workspace dimension sierpinsky data range queries query size workspace dimension average os nn queries cr random clustered sierpinsky fig 

average os nn queries 
average os fig 

operations range queries 
os cr cr clustered data range queries query size workspace dimension data set range queries query size workspace dimension utilization cr random clustered sierpinsky related fig 

quality metrics leaf level 
sum perimeters random clustered sierpinsky discussed vast majority tree access methods uses heuristics organize data split nodes 
exception worth mentioning 
proposes locally optimal split algorithm polynomial time global restructuring heuristic combined effects outperform trees hilbert trees 
extra time local optimality pay index dynamic new insertions may retract previous decisions 
related theoretical point view researchers addressed problem 
set axis parallel rectangles plane problem find pair rectangles member set enclosed ii minimize measure sum areas 
algorithms solve problem log time proposed 
field coupling clustering spatial indexing knowledge time incorporate clustering algorithm dynamic spatial access method 
related includes proposed generalized bulk insertion bulk loading technique partitions new data loaded sets clusters outliers integrates existing rtree 
directly comparable considers bulk insertions 
spatial data organized indices heuristic techniques minimization area perimeter enlargement minimization overlap increment combinations 
investigated idea examine data organization especially node splitting typical clustering problem replace cr heuristics clustering algorithm simple known kmeans 
proposed new tree variant cr tree incorporates clustering node splitting technique relaxes way split property allowing multi way splits 
main result study improved performance cr tree 
combines best worlds insertion time level tree query performance level tree 
fast insertion time cr tree preferable data intensive environments 
time rely complex techniques forced reinsertion reduce degree concurrency achieved due necessary locking disk pages 
suitable candidate multi user environment 
seen simple clustering algorithm easily implementable practice creates access method fast tree construction phase compromising query performance 
consequently multi way split deserves attention may result efficient indices 
additional improvements may achieved working directions 
tuning means 
weakness means sensitive selection initial seeds may converge local minimum 
variants proposed address issue 
experimentation clustering algorithms especially hierarchical algorithms means 
divisive agglomerative hierarchical algorithm kms restart clustering kmax respectively 
apart silhouette coefficient measure proposed investigation criteria find optimal number clusters 
anderberg 
cluster analysis applications 
academic press 
becker leonardi widmayer 
enclosing aset objects minimum 
journal algorithms 
beckmann 
kriegel schneider seeger 
tree efficient robust access method points rectangles 
proceedings acm sigmod conference management data pages 
theodoridis 
revisiting tree construction principles 
technical report computer technology institute patras greece 
dias cti gr clustering pdf 
chen rundensteiner 
generalized tree strategy 
proceedings international symposium spatial databases pages 
comer 
ubiquitous tree 
acm computing surveys 
gaede nther 
multidimensional access methods 
acm computing surveys volume 
garcia lopez leutenegger 
optimal node splitting trees 
proceedings th international conference large databases pages 
guttman 
trees dynamic index structure spatial searching 
proceedings acm sigmod conference management data pages 
han kamber 
data mining concepts techniques 
morgan kaufmann 
hellerstein naughton pfeffer 
generalized search trees database systems 
proceedings st international conference large databases pages 
jain murty flynn 
data clustering review 
acm computing surveys volume 
kaufman rousseeuw 
finding groups data cluster analysis 
wiley 
leutenegger lopez 
str simple efficient algorithm tree packing 
proceedings th international conference data pages 
milligan cooper 
examination procedures determining number clusters 
volume 
rourke 
computational geometry cambridge university press second edition 

pagel 
widmayer 
analysis range query performance 
proceedings th acm symposium principles database systems 
jensen theodoridis 
novel approaches indexing moving object trajectories 
proceedings th international conference large databases pages 
guha rastogi shim 
cure efficient clustering algorithm large databases 
proceedings acm sigmod conference management data pages 
theodoridis 
pattern recognition 
academic press 
theodoridis sellis 
optimization issues tree construction 
proceedings international workshop geographic information systems pages 
theodoridis sellis 
model prediction tree performance 
proceedings th acm symposium principles database systems pages 
wu faloutsos 

web site 
url www andrew cmu edu lw downloads html current sept 
zhang ramakrishnan 
efficient data clustering method large databases 
proceedings acm sigmod conference management data pages 
