composition refinement evolving specifications pavlovic douglas smith kestrel institute palo alto california usa 
represent state machines category specifications assignment statements correspond exactly tween theories :10.1.1.13.9145
guards assignment require special construction 
guards level assignments treating distinct category shared set objects 
guarded assignment represented pair arrows guard arrow assignment arrow 
give general construction combining arrows factorization system show specialization category specifications 
construction allows define fine structure state machine morphisms respect guards 
guards define flow control computation translated refinement central formal treatment safety liveness concurrency determinism 
software philosophy software essential part mental tissue western society 
global market goods informations implemented global network software systems agents offices 
interact depend human guidance science communication banking ability move space essentially depend 
carriers evolution software systems agents evolving society 
adaptability new tasks new environments created modifications fact life subject science 
generations software systems lived died front computer user computer scientists patiently analyzed static mathematical models programming structures 
various technical reasons possible conceptual reason may software evolution intrinsic carrier imposed outside developers passing evolutionary invariants embedded project documentation 
supported darpa project specification carrying software contract number onr project game theoretic framework reasoning security contract number 
matthias pavlovic douglas smith research agenda outlined pursues semantically approach dynamics evolution adaptability software 
obvious prerequisite mathematical model software components composition display evolution adaptability process property intrinsic software plays role fundamental carrier everyday life just aspect software development maintenance factor economy 
contend technical conceptual prerequisites necessary studying complex natural processes software evolution adaptation crucial aspect modern computation available technical advances semantics computation software science engineering 
software engineering years software engineering largely abandoned long standing waterfall model development software systems obeying strict rhythm analysis design implementation maintenance 
nowadays main challenge find methods help comprehend support multifaceted dynamics software systems open change long deployed development accommodate try dam evolutionary changes real systems old young 
traditional approach formalization requirements seen hardest problem software development long time view ing convincingly david parnas 
requirements hardly exists static entity formal change lifetime system 
shift focus reflected newer publications software development approaches instance continuous software engineering approach weber 
approach development piece software seen continuous circle engineering reverse engineering steps triggered changing requirements 
relation requirements software realizing somewhat complex simple dependency direction requirements interact dynamically change realizations 
view requirement specifications implementations inseparable constituents software systems 
interact environment evolve supporting carrying 
changing software lifetime precludes software development approaches don provide means accessing internal structure system impossible change extend functionality 
prominent reason componentbased approaches fields software engineering mainly fact paradigm provided framework providing kind information revealing implementation details 
approaches components runtime artifacts assembled dynamically 
composition refinement evolving specifications specification carrying software components doesn solve problem correctly re constructing software systems 
cases quantity quality information available components assure satisfaction desirable essential functionality safety reliability performance security system properties 
specification component exists expressive meaningful way composing software accessible needed resides document shipped component reason leave cases component specification doesn exist 
general approach problem shall idea specification carrying software 
roughly software components carry specifications implement just organisms carry genes embody carried just genes organisms specifications components evolve 
metaphor compatibility components needs resolved specifications just compatibility organisms resolved genes 
specifications class citizens software available runtime carriers preservation variation population components just genes population organisms 
dynamic world web data different unpredictable ways structured advance 
need semistructured self describing data addressed markup languages xml 
dynamic world software components different unpredictable ways 
idea structuring modules advance unfeasible 
oo development prefabricated class templates spawning objects constitute systems rigid 
whichever form solution may take semi structured software components carrying mutable specifications xml data carry theirs 
way software adaptation precondition software composi tion essence paradigm components hoped extend cots reuse glue system designers interventions enable runtime reconfigurations possibly involving fly source code regeneration recompilation 
evolving specifications previous introduced evolving specifications abbreviated especs framework specifying composing refining behavior :10.1.1.13.9145
point framework help cross path ideas running code 
programming languages designed support final matthias pavlovic douglas smith sections path 
hand especs evolving specifications diagrams specs displaying conditions satisfied variables computation change state state 
hand especs specification carrying programs pieces code global requirements invariants annotated local conditions state descriptions satisfied states computation 
construed formalized comments floyd hoare annotations class citizens code available runtime 
global local specifications intent computation hard reconstruct design record shave lost thrown away easy verify design records carried code 
state machines algebraic specifications originally state machines introduced studied turing moore mealy mathematical models computers 
software engineering tasks reached levels practical reasoning terms state machines indispensable designing reactive hybrid embedded systems various state modeling tools languages esterel statecharts 
verifying high assurance systems model checking state machine models 
argue discipline object oriented programming essentially method efficient management state software constructs 
conceptual gap state machines theoretical versus practical devices 
notable effort bridging gap gurevich state machines hand tional paradigm computation explicitly compared turing machines hand practically useful programming languages capturing semantical features java 
absence powerful typing structuring abstraction encapsulation composition 
mechanisms unsuitable development management large software systems 
wish investigate representation state machines framework large scale software specification development specs code 
previous kestrel institute implemented specware framework development functional programs category higherorder logical specifications composition colimit refinement diagram morphisms 
current builds extends framework behavioral specifications especs representing state machines diagrams specifications composition colimit refinement diagram morphism 
related approaches representing behavior terms category specifications include 
goal build practical software development tool geared large complex systems reactive distributed hybrid embedded features high assurance performance reliability security requirements clean simple semantical foundation 
composition refinement evolving specifications evolving specifications key ideas underlying representation state machines evolving specifications especs 
reveal intimate connection behavior logical specifications 
folklore third due gurevich lies foundation state machines contributed fourth way represent state machines behaviors category specifications 

state model state computation viewed snapshot computer performing computation 
state set named stores values certain properties 

state transition finite model change transition rewrites stored values state 

state theory properties state relevant common group states states models theory 
theory presents structure sorts variables operations plus axioms describe common properties invariants 
treat states static mathematical models global theory transitions correspond model morphisms 
extensions global theory provide local theories refined states introducing local variables local properties invariants 

transition interpretation theories just ab describe class states models theory abstractly describe class transitions interpretation theories 
see consider correctness assignment statement relative tion postcondition hoare triple consider initial final states characterized theories theorems respectively triple valid iff theorem triple valid iff symbol map interpretation note interpretation goes opposite direction state transition 
interpretations theories correspond exactly parallel statements 
model guarded assignments introduced notion guarded interpretation 
idea guards assign ments regarded arrows categories form factorization system 

general construction combines epi monic single morphism cocomplete category 
category guarded assignments interpretations falls special case 
basic idea especs specifications finite presentations theory state descriptions rouse guarded interpretations represent tran sitions state descriptions 
idea states transitions correspond specs interpretations suggests state machines diagrams pec fur thermore state machines composed colimits state machines refined diagram morphisms :10.1.1.13.9145
matthias pavlovic douglas smith example simple introductory example greatest common denominator especs 
espec gcd base defines basic operators axioms form basis subsequent refinements gcd specification 
espec gcd base spec op divides axiom gcd spec gcd divides fa divides spec espec boolean divides divides espec gcd import gcd base spec theorem fa gcd spec gcd axiom gcd composition refinement evolving specifications espec case consists spec part logical specification 
state machine case trivial state transition 
espec gcd defines gcd natural numbers state machine specifies required behavior greatest common denominator compu tation 
espec gcd import spec vat vat spec loop axiom axiom gcd shown graphical notation top represents spec part grey boxes arrows steps 
oval nodes contain input output parameters arrow parameter node stad node expresses things parameters contained input parameters initial stad 
analogously arrow matthias pavlovic douglas smith parameter node expresses final stad parameters defined output parameters espec 
contents stad boxes local specs labels arrows update rules representing transformation stad successor 
general guard term part step label specifying condition step activated state 
initial states represented node incoming step edges final state nodes outgoing edges 
espec gcd refines gcd 
state graph expresses classical gcd algorithm generated design tactic 
gcd extends logical spec gcd axiom serves key loop invariant program change transitions gcd gcd input values 
correctness refinement essentially amounts showing gcd axiom stad translates theorem gcd stad 
note possible behaviors gcd proper subset possible behaviors gcd 
implementation application areas planware planware domain specific generator high performance schedulers 
system supports rich modeling language especs users express complex multi resource problems 
example transportation organization want scheduler simultaneously handle aircraft crews fuel airport load unload facilities 
resource internal required patterns behavior may dependencies resources 
key domain specific language specifying scheduling problems lies semantically precise behavioral models tasks resources 
fortunately especs suited 
semantics source set possible behaviors exhibit 
treat behaviors temporal sequences activities model modes activity mode variables start time duration services offers flying mode aircraft offers transportation service services requires flying mode aircraft requires services crew 
formal theory resource models exactly physically feasible behaviors resource 
axioms serve constrain values mode variables take weight cargo exceed maximum bound flying mode aircraft 
transitions serve constrain evolution mode variables finish time activity occur start time activity 
task expressed formally espec 
main difference resource espec task espec offers service requires services resources 
example cargo container requires transportation service 
planware design process steps composition refinement evolving specifications 
requirement acquisition user supplies model scheduling problem terms especs kinds tasks resources concern 
problem model formalized specification read ab follows collection task instances accord task especs collection resource instances find schedule accomplishes tasks possible approximately optimizes cost function subject constraints resource models resources 
required offered services source express dependencies resource classes 
planware analyzes task resource models hierarchy service matches service required matched service offered rooted task model 

algorithm design problem specification automatically instantiate program schemes embody algorithmic knowledge global search constraint propagation 
algorithm generation process follows structure service hierarchy resulting nested structure instantiated search schemes 

datatype refinement optimization data types refined concrete programming language types optimizations applied 

code generation code programming language currently generated 
example developed formal models air cargo packages cargo aircraft port facilities espec models 
second planware generates loc local language translates loc comprising definitions 
evolving specifications security protocols security integral aspect software security engineering integral part software engineering 
practice communities methods largely disjoint software engineers talk architectures components security usually treated separately 
reason course dealing complex systems abstraction separation concerns 
capture dimensions methods analytic powers permit 
security obey established abstraction routines 
hand security properties refer system wide information flows concern architectures 
security protocols add new secure links system remove insecure transient links key server 
protocols encapsulated architectural connectors security protocols analyzed context architectural dynamics 
extant architecture description languages conveniently support need tend encapsulate away behavior connectors components leave extensions hardwired process calculi 
especs hand permit completely flexible level abstraction matthias pavlovic douglas smith aspect system captured mathematically expressed abstracted away needed 
subtle task reasoning security protocols context architectural dynamics induce suitable challenge important test case 
general method representing security protocols especs developed 
agent specified separate state machine state descriptions listing respective agents states knowledge 
fact fixed set formalized security properties interest generic espec describing suitable process calculus developed agents obtained instances generic spec 
connector especs describing relevant properties network principals protocol constitute diagram especs depicting desired architecture protocol 
case study analyzed proposal key exchange binding update mobile ipv protocol 
representing proposed protocol evolving specification enabled automatically calculate authenticated version protocol applying generic program transformation library 
resulting protocol stripped derivation details 
current extends analyzing proposals ipsec protocols 
verification framework game theory allows quantify various forms denial service resistance tradeoffs crucial novelties requirements 
quantitative analysis needed estimating strength authentication requirement minimizing need public key infrastructure 
evolving tool essence proposed mathematical course automated implemented tool 
starting point specware categorically specification environment developed maintained kestrel institute 
evolving specifications built diagrams dual category specifications 
categorical structure especs completely derived categorical structure specs 
specs morphisms interpretations appear different roles global specs structural refinements hand local state descriptions transitions computational steps 
furthermore morphisms especs built combining spec morphisms interpretations suitable morphisms state machines capturing simulations account boil families spec morphisms 
far category especs morphisms developed full support refinement evolving specifications provably protecting architecture diagram ensures information boundaries agents preserved 
fusing agents single evolving specification depicting joint runs allow refinements alice directly reads bob variables 
composition refinement evolving specifications correct genuinely imperative code 
generic transformations optimization code performed especs 
current focused providing automated support composition especs building systems systems colimits hereditary diagrams category especs 

abiteboul buneman suciu data web relations semistructured data xml 
morgan kaufmann publishers los altos ca usa 

datta mitchell muller pavlovic authentication mobile ipv 
tech 
rep kestrel institute mar 
submitted mobicom 

notes diagrams state 
tech 
rep 

gurevich evolving algebra guide 
specification validation methods ed 
oxford university press pp 

fiadeiro maibaum 
interconnecting formalisms supporting modularity reuse incrementality 
proc 
rd symposium foundations software engineering kaiser ed acm press pp 

kutter state transitions modeled refinements 
tech 
rep kes kestrel institute august 

odersky objects views components 
proceedings international state machines asm gurevich kutter odersky thiele eds vo lncs springer 

parnas precise specifications development software 
proceedings ifip congress north holland publishing 

pavlovic smith composition refinement behavioral specifications 
proceedings automated software engineering conference ieee computer society press pp 


pavlovic smith guarded transitions evolving specifications 
proceedings algebraic methods software technology amast springer verlag lncs 

robertson eds 
proceedings workshop self adaptive software vo lecture notes computer science springer verlag 

smith mechanizing development software 
calculational system design proceedings nato advanced study institute broy eds 
ios press amsterdam pp 


srinivas specware formal composing software 
proceedings conference mathematics program construction moeller ed 
lncs springer verlag berlin pp 


architectural design evolutionary software continuous software engineering 
der andere verlag 
ph thesis technical university berlin germany 

weber continuous engineering information communication infrastructures 
fundamental approaches software engineering fase amsterdam proceedings 
finance ed spr pp 

matthias pavlovic douglas smith 
weber inb il padberg modelling communication infrastructures evolutionary design business processes component technologies 
integrated design process technology june society design process science ieee international conference systems integration 
