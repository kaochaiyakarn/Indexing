secure access data internet eric jones rob mccool marianne winslett national center department computer science supercomputing applications springfield ave springfield ave university illinois university illinois urbana il champaign il ncsa uiuc edu cs uiuc edu 
current developments small portable computers proliferation online information servers world wide place new requirements computer software support appropriate notions privacy security 
research goal develop approaches authentication authorization databases operating open environment allow databases deal appropriately requests unknown individuals 
discuss major security issues currently preventing greater access databases internet 
propose framework suitable secure access databases wide audience internet making world wide web information servers modified version ncsa mosaic internet browser 
framework uses role wrappers software modules assign role roles incoming database request credentials submitted request 
roles assigned request internally dbms determine data request authorized access application software encapsulating database 
discuss results obtained embodying framework example application implementation privacy enhanced mail authentication protocol ontos database student information 
today technology easily encapsulate database available internet techniques section 
example today easily browse old census database url galileo ncsa uiuc edu search order government documents url com home html look object oriented systems url cui www unige ch access descriptions pictures children missing url www com public service missing html find information chromosome integrated genome database url fr acedb igd html internet ncsa mosaic www back databases 
relatively databases accessible internet today 
reason traditionally databases relied largely underlying operating systems physical environments guarantees security 
example commercial relational database management systems generally deny access tables column basis example individual authorized look salary able look salary 
approach coupled view mechanisms worked fairly date population users authorized access particular database usually manageable size carefully controlled 
databases accessible network security daunting concern 
conventional centralized user identification authorization schemes longer possible 
clients servers able interact prior knowledge 
allow server collect social security bank account numbers personal identification information merely confirm identity customer personal privacy maintained customer requests responses server 
addition client able authenticate servers communicates sensitive applications avoid fraud 
client software able deal gracefully wide variety types credentials obtained different sources 
largest preventing greater availability databases internet lack facilities authenticate incoming requests 
currently server way knowing exactly sent request help deciding authorizations role user request 
possible methods connecting database internet discuss choices user interfaces security protocols major issues revolving choice 
section candidate architecture securely connecting databases clients internet mosaic world wide web discuss additional design issues arise context architecture 
section results implementation architecture section particular application 
section presents see major issues area 
issues data access internet section describe problems consider attempting provide access data internet 
evaluate alternative solutions issues raised sections describe resolved particular example 
interface database internet database internet connection mechanism face problem determining sending requests database system reject requests inappropriate users provide different kinds services different users 
servers communicate clients authentication protocols server reject incoming requests include proper credentials provide privacy requests responses public private key encryption schemes 
return point section consider issues remainder section 
approach connecting database internet depicted connect database directly internet having dbms server process listen port incoming requests 
approach gives easy access pre existing database clients know connect 
potential new clients may difficulty learning new service obtaining access 
serious drawback security needs met dbms clients tall order considering limited security features today views column level security 
second approach write database specific front program encapsulate database listen port requests coming network shown 
existence encapsulating front program degree poor database dbms server process server host client host special purpose client code database special purpose front program dbms server process server host client host special purpose client code database general purpose browser mosaic client host server host special purpose front program dbms server process general purpose information server web server internet database access alternatives security facilities available dbms providing fixed set services clients 
hand correct construction front quite challenging limited database security features relied long term solution database authorization 
disadvantage easy way existence new service easily accessible new clients 
consideration separate encapsulating program written database accessible internet database owners complete control style interface users learn different way interact database 
putting encapsulating program general purpose information server web server database widely known easily accessible third approach 
world wide web set interlinked hypermedia information retrieval servers spread internet aiming give access large universe documents 
web servers world wide today average new services coming line day 
web server software available free number sources url info cern ch hypertext www daemon overview html web servers speak stateless protocol called hypertext transport protocol communicate clients 
web servers serve documents essentially type popular html hypertext markup language documents 
html offers facilities languages importantly database applications build web server scratch tailor database services 
approach certainly viable large databases specialized security communication needs database owners resources build specialized web servers keep current rapidly changing information server technology 
mosaic offers support fill forms 
web user request form document web server fill send back server 
server invoke script special purpose front program process filled form 
script written variety popular programming languages access resources databases 
output script shipped back client displayed user 
advantage web servers existence standard browsers web effect allowing users access different databases resources single consistent interface 
popular interface web servers users year life ncsa mosaic see 
mosaic provides unified interface accessing information web gopher wais ftp sites 
mosaic runs platforms pcs available free charge individuals anonymous ftp ftp ncsa uiuc edu 
due mosaic web wide acceptance universality support form access believe best candidates interfaces widely available databases internet 
number directories web servers exist known locations line web server database service easy attract new clients 
addition mosaic popularity attests ease uniformity variety purposes 
hand mosaic designed specifically browsing databases ideal purpose 
protocol communication mosaic web servers stateless database interactive suggests session oriented protocol 
html forms designed database applications mind lack mosaic developers may somewhat biased point 
number features database form packages dynamic forms ability tab fields form 
consideration html complete control form document look displayed client workstation 
current version html certainly allow database application get running internet html ultimate database interface doubtless undergo revisions convenient database interface 
examine issues 
important note encapsulating database brings security encapsulating program secure 
case web server example server installed correctly prevent unauthorized access database 
extreme example web server runs root place forms server allowed clients directly access database files bypassing dbms 
improper installation popular information server gopher ftp lead similar security problems improperly written special purpose database front programs 
properly installed web server adds new threats system security consider issues 
choosing security protocol network communication step choosing security protocol internet communication web server mosaic client determine security goals system information protected type protection needed privacy authentication 
request response protected just 
important privacy individual respect request information 
privacy concern authentication protocol provides encryption authenticate users appropriate 
authentication required protocol allows digital signatures asymmetric key encryption probably needed 
example line database acm journal articles may require authentication users verify subscribed services access privacy requests responses probably concern 
keeping long tradition privacy paramount concern accessing line public library rated mail order business 
privacy authentication vital issues network access public health care databases proposed government 
health care information server allow fine grained authorization controls physician versus hospital accounting clerk provide privacy individuals data pertains 
understand particular issues choosing protocol needs understanding basic building blocks secure distributed system symmetric asymmetric keys public private keys encryption decryption session keys digital signatures unforgeability attained role third parties types attacks guarded trust 
quick overview concepts recommend 
best known authentication protocols today probably kerberos pem 
kerberos designed large scale open network computing environment privately owned operated workstations 
kerberos uses symmetric cryptosystem trusted third party authentication servers 
pem developed provide security email users internet community 
pem uses symmetric asymmetric cryptography asymmetric algorithms provide authentication distribute symmetric keys symmetric algorithms encode decode actual message 
evaluating authentication protocol potential internet database application consider issues guarantees 
protocol meet security requirements system 
ideally formal guarantees correctness authorization protocols 
unfortunately current state art formal protocol analysis relatively primitive agreement formal analysis supposed show 
assurance particular implementation implements protocol correctly 
protocols constructed criticized publicly information discussion occasionally formal analysis available guarantees 
new protocols hard evaluate determine properties ensure formal analysis new protocol reach talented 
application environment 
protocol specification checked ensure compatible intended application environment 
authentication protocols designed particular problems purposes 
example pem designed private authenticated email web client server communications 
example potential problem protocols stateless require handshaking authentication key exchange difficulty adapting protocols web servers 
protocols require trusted third party may practical particular application 
execution speed 
overhead protocol acceptable application 
symmetric cryptosystem kerberos faster protocol asymmetric cryptography 
pem approach popular method combining symmetric asymmetric cryptography fashion faster pure asymmetric systems secure pure symmetric approaches 
performance considerations lead rethinking application requirements privacy 
portability 
protocol available users platforms 
cryptosystems available platforms 
example popular pem implementations pgp run ms dos unix platforms supports macintosh os windows nt pgp supports vax vms platforms 
scalability 
protocol handle large number users far locations 
example protocols rely trusted third party may find third party bottleneck wide deployment 
protocols rely client server directly possessing shared key may scale due problems secure distribution discussed 
ease 
protocols easier set 
database clients get needed client side software keys run protocol 
distribution public private keys individuals services difficult management keys client workstation burden specialized software keep track keys client knows remember uses keep safe tampering theft 
availability 
potential users permission protocol 
example countries including limit availability protocols import export restrictions cryptographic systems 
popular encryption decryption packages exported legally 
web easy browse database world corner inability reach international clients may problem applications 
users cryptographic systems software patents problem 
clear asymmetric key package sold prior agreement rsa patent holders 
reason asymmetric key packages available available may create legal obligations users 
note home grown protocols subject export controls subject software patent challenges 
key distribution credential servers important largely ignored issues distributed system authentication procedures distribution keys 
symmetric asymmetric encryption key required 
existing protocols authenticate communicating peers help third party service gives session key parties want communicate 
parties session key exchange messages directly perform mutual authentication 
approach ideal stateless communication web servers large overhead accompany request response 
stateless protocol symmetric encryption client server know shared key asymmetric encryption client know public key web server interest server know client public key 
public keys available credential servers store unforgeable certificates example public key associated particular entity 
approach client find name entity security identity contact appropriate credential server 
order client communicate specific server client know identity server able obtain public key 
client get information 
machine server name sufficient 
credential servers available trustworthy 
web servers names separate public private key pair name credential server know server aliases 
practical scalable solutions problems topic research distributed systems community 
internal dbms security role wrappers suppose security protocol place satisfactorily addresses network communication issues discussed previous sections allows authenticate clients servers 
dbms application special purpose front program authenticated request 
determine appropriate authorizations client especially previously known server 
believe promising approach discretionary security role security dbms client assigned roles turn determine access authorizations client 
anticipate offer powerful support roles today 
research roles picking steam distributed systems database communities see theoretical questions remain implementation issues abound 
applications discuss section knowledge user identity may needed assign request role 
especially client previously known server declaration identity may insufficient 
example suppose mary smith falls ill japan attending physician wishes access medical records internet 
declaration doctor identity insufficient convince mary home town clinic release records minimum proof requester medical doctor order 
obtain proof server side software query trusted third party credential server 
server prefer place time consuming burden proof client demanding client produce particular credentials assign current request role 
gives client ability pick choose credentials owns deciding willing divulge server current request 
server side responsible processing credentials selecting roles 
custom implementation web server necessary software built 
shelf web server role resolution software reside built special purpose front program residing separate module call role wrapper 
approach web server decides user authorized access server role wrapper determines role user authorized play particular requested database application 
example access web student information server open parties 
access record grades application server restricted current teaching faculty 
role wrappers extract credentials request service determine useful current request determine role roles assign request hand request processing 
credentials user may exactly match unique role role wrapper mediate technical sense knowledge mediators credentials offered requester needed service 
role wrapper built server special purpose front program separate program 
dbms sufficiently powerful authorization mechanism role information sufficient rest processing handled ordinary code special attention security matters 
case request role information handed special purpose front ends formulate necessary queries send dbms es appropriate role assemble answer 
architecture database access internet section draft architecture database access internet web servers mosaic publicly available authentication protocols describe implementation architecture 
architecture geared today technology address issues key distribution determination security identities 
presents example architecture general purpose web servers encapsulate database internet access 
protocol communication client server secure version protocol personal security agent charge managing credentials user determining protocols required services handling security concerns mosaic 
server receives request secure protocol allows determine protocol request reject request wrong protocol 
hands request server side modules protocol request processed protocol 
processing successful authentication succeeds request security identity requester passed server server host web server secure client host mosaic browser secure database server processes database server processes database applications database applications authentication protocols authentication protocols role wrappers role wrappers authentication protocols authentication protocols personal security agent databases databases databases architecture secure database access role wrapper appropriate request 
role wrapper uses requester identity additional credentials supplied request determine appropriate role request passes request appropriate database application equivalent special purpose front 
request processed database application converts response html file appropriate document type hands back web server appropriate protocol ships resulting message network client 
personal security agent extracts response appropriate protocol presents results user 
remainder section describe implemented components architecture 
security mosaic step modify protocol mosaic allow authentication protocols 
changes discussed section publicly released version mosaic modification simply adds new optional tag message sent network called 
tag allows client server name protocol implementation process message 
personal security agent shown really version mosaic 
mosaic tries send request security protocol 
request generates error message server saying certain protocol needed mosaic pass bounced request local implementation appropriate protocol request returns mosaic 
request resent server 
mosaic receives response automatically passed client local copy protocol processes message extracts text response passes back mosaic displays user 
obviously initial unencrypted send request inappropriate led refinements described section mosaic knows implementations security protocols pgp 
implementations pem protocol combination symmetric asymmetric encryption procedures authenticate messages guarantee privacy contents 
asymmetric encryption uses rsa code pgp uses implementation 
subject export controls finding abroad may difficult 
installation procedure mosaic relatively complex security features 
suppose mary smith wishes new mosaic features 
obtain binary mosaic ftp ncsa uiuc edu executable pgp 
decide security identity name known rest world mary smith bunny cs uiuc edu 
security identity included requests secure web servers 
generate public private key pair identity inform secure servers public key able read messages sends 
architecture address issues key distribution 
mosaic told location client protocol implementations parameters necessary invoke 
web server modifications modified web server code available ftp ncsa uiuc edu released version web server require authentication protocol documents placed selected directories 
directory server know security identity clients authorized access accomplished creating file contains names 
similar security identity chosen server appropriate protocol implementations installed 
security turned directory requested document resides access controls specifying pgp protection 
client requests protected document appropriate protocol server returns message requesting protocol 
mosaic client authentication capable reissue request appropriate protocol public key server user private key 
server decrypts request appropriate protocol public key user private key 
decryption successful sender authorized access requested document encrypted appropriate protocol returned 
improvements mosaic remove security holes mentioned additional modifications mosaic 
improvement allows html form declare returned server particular authentication protocol declare security identity server 
enhancement particularly important database applications prevents form sent network unencrypted 
example form order line catalog personal credit card numbers having worry theft credit card numbers passage network 
example points importance having secure mechanism distribution public keys con artist set order form specify web server legitimate catalog service collect credit card numbers unsuspecting individuals 
second enhancement adds support personal security agent fundamentals allowing user select authentication protocol sending request giving protection requests fill forms see 
glance addition solve problem remains question security identity server may may known time request 
protocols available today require request encrypted identity public key server attempts determine examining addressee finger file insecure arrangement 
making protocol user selectable architecture user essentially acts personal security agent 
role wrapper general problem assigning roles request credentials potential pit invoking information mismatch problems associated heterogeneous databases 
example student certificate illinois student information server tour europe may request discount european high school students 
student considered high schooler university student 
roles application simple student instructor database ontos support roles initial implementation merged role wrapper database application single software module 
experimental role wrapper user authenticated identity control flow execution database functions 
second implementation separating role wrapper database application implementation stratified datalog encode rules resolving credentials roles 
roles related directed acyclic graph user credentials resolve single role dominates ancestor roles user qualified 
conditions met error message returned user 
pgp task role wrapper simplified programs pass credentials back web server pem protocol allows inclusion multiple credentials 
credential role wrappers deal user security identity 
student aliases example application test architecture selection student aliases posting grades 
preserve anonymity university illinois requires student grades include identifying information students 
courses student chooses alias course grades posted 
advanced database course teaching semester essentially course information kept line web server course homework assignments sample answers project topics assignments project sign sheets resume forms grades announcements course notes url sparc cs uiuc edu 
wanted alias selection program available line due security concerns 
chose alias program application 
placed student information object oriented database ontos course information server program authentication routine 
architecture student database server depicted 
security desired authenticated private requests alias changes 
created html form students fill request alias change url sparc cs uiuc edu winslett html database application process form placed protected directory belonging server 
directory access control file specifies security protocol location file identifying users authorized access 
file specifies security identities exactly students database course plus course instructors 
distributed public private keys students ordinary email insecure satisfactory application 
students install keys set environment ontos server process server host web server secure client host student db student db student db part personal security agent mosaic browser secure remainder personal security agent alias change application role wrapper architecture secure student database access secure version mosaic correctly 
ready change aliases 
students enthusiastic went smoothly 
student submits completed form requesting new alias form encrypted signed client new form directives described sent server 
receipt encrypted form server decrypts form authenticates sender identity digital signature 
server invokes alias change processing script passing user identity 
ontos support roles database application simple merged role wrapper database application single program 
merged script uses role information control database functions user execute 
user student script uses authenticated identity verify old alias old alias user database updates alias identity student database old aliases match 
user instructor determined identity passed server old alias required selected alias reset database 
instrumenting mosaic browser code course information server able gather performance figures compare access protected ordinary documents 
protected documents request response processed 
unprotected documents unprotected directories processed 
measurements taken lightly loaded sparc mb memory local disk client sparc ipx mb memory remote disk server 
client server located local net different subnets 
time necessary server process send documents client plus time client process document significant penalty 
example client requests byte alias changing form unprotected directory response time seconds includes assembling request message network traversal time server processing time processing response display time 
document placed protected directory request response passed response time zoomed seconds tolerable certainly ideal 
unfortunately response time grew linearly message length example request kb document required seconds unprotected seconds protected 
response times acceptable application satisfactory applications 
proposed architecture connecting databases internet manner provide easy access world wide population potential clients easy advertising existence service 
architecture includes facilities protocols ensure privacy requests responses authentication clients servers personal security agent manage security related information client 
embodied architecture minus personal security agent modified version mosaic modified web server tested implementation student grade information database application approximately users 
application success open issues remain architecture see widespread application ffl personal security agent plays important role simplest secure database applications 
agent needs embodied separate module accessible mosaic needed 
great burden placed user manage information decisions 
implemented security protocols need rely personal security agents needed public keys network finger program 
personal security agent able find server identities public keys url determine protocol server able invoke protocol correctly 
ffl credential servers needed internet serve repositories unforgeable credentials associating security identities public keys 
personal security agents access servers find public key associated particular web server 
credential servers built technology available today help greatly key distribution problem 
ffl attention needs devoted formal analysis proposed security protocols 
example known weakness relating reuse keys clever adversary able exploit 
protocol analysis represents excellent chance theoreticians substantial impact real world distributed systems 
ffl interfaces user personal security agent mosaic need additional refinement easy users specify credentials included particular request 
addition simple mechanism needed determine particular request authentication protocol special type url proposed possible solution 
surprisingly described sparked intense external interest 
know fewer commercial efforts implement kerberos mosaic web servers commercial effort implement web server specialized database operations 
number near term projects planned 
new release mosaic additional security features planned 
second experimental secure database application approximately users world wide implemented summer 
third somewhat secure network interface place look forward focusing internal dbms security issues especially efficient implementation authorization objectoriented databases 
abadi burrows lampson plotkin calculus access control distributed systems technical report digital equipment systems research center february revised august 
ncsa mosaic global hypermedia system appear internet research 
privacy enhancement internet electronic mail part iii algorithms modes identifiers rfc february 
bellare rogaway entity authentication key distribution advances cryptology crypto proceedings springer verlag 
tim berners lee robert cailliau jean francois groff bernd world wide web information universe electronic networking research applications policy volume number spring 
tim berners lee daniel connolly hypertext markup language available electronically url ftp info cern ch pub www doc html spec ps 
tim berners lee hypertext transfer protocol available electronically url ftp info cern ch pub www doc spec ps 
tim berners lee uniform resource locators available electronically url ftp info cern ch pub www doc url ps 
extending access control duties proceedings th ifip workshop database security vancouver bc canada 
stephen kent internet privacy enhanced mail communications acm august 
lochovsky role security data base management systems database security status prospects landwehr editor 
bob metcalfe mosaic useful tool help navigate internet infoworld march 
bertino kim woelk model authorization generation database systems acm transactions database systems 
steiner neuman schiller kerberos authentication service open network systems proceedings winter usenix conference 
ting hu specification methodology user role security object oriented design model experience health care application proceedings th ifip workshop database security vancouver bc canada 
woo lam authorization distributed systems formal approach proceedings ieee symposium research security privacy oakland ca may 
woo lam authentication distributed systems ieee computer volume number january 

