adaptive spatial subdivision object space fast collision detection animating rigid bodies srikanth daniel thalmann computer graphics laboratory swiss federal institute technology ch lausanne switzerland thalmann lig di epfl ch epfl ch thalmann collision detection tests objects dominate run time simulation rigid body animation 
traditionally hierarchical bounding box tests minimize collision detection time 
bounding boxes take shapes objects account results large number collision detection tests 
propose adaptive spatial subdivision object space oct tree structure rectify problem 
technique efficiently updating structure periodically simulation 
keywords collision detection bounding box oct tree structure digital differential analyzer 

interaction objects virtual world important aspect computer animation 
key interactions objects collisions responses take place moving bodies typical dynamic process 
animator controlling object motion manually specify response objects situations 
number objects scene large tedious process result physically unrealistic behaviors 
need automatic dynamic interaction response requires research physics models 
key components dynamic simulation collision detection response objects 
objects assumed rigid polyhedral objects primitive elements triangles cover large class applications 
incremental time step approach dynamic simulation 
means objects moved space small time step dt current velocities 
collision detection objects involves testing intersections objects intersections dynamic equations applied simulate collision response 
process repeated time step simulation 
analytical methods determine collision points simple cases complex cases resulting higher order polynomials solved numerical methods moore 
collision response involves altering velocities colliding bodies order prevent passing collision 
means calculating new forces torques points collision colliding objects depending elasticity collision 
non analytic methods involve creation virtual springs collision points simulate response proposed computationally expensive moore 
analytical methods conservation momentum laws widely moore hahn baraff 
moore hahn compute slightly older version appeared eurographics 
exact version lost 
updated version see chapter discrete object space methods computer animation phd thesis srikanth epfl 
copy epfl ch thesis response case collision single point 
response simultaneous collision points approximated moore series collisions occurring short time intervals 
baraff suggested linear programming methods analytically solving collision response case multiple collision points 
optimization objects consist large number primitive elements collision detection response computationally expensive 
naive collision detection algorithm primitives take collision detection tests time step simulation 
highly desirable optimization methods order minimize computation time 
done level collision detection 
second level optimization possible calculation collision response 
baraff proposed method convert quadratic programming problem linear programming problem improvements baraff 
complex scenes number collisions small compared number collision detection tests carried 
statistical mechanics know system molecules equilibrium number collisions small time interval dt dt constant known average time collisions feynman 
general dynamic simulations tends large small values dt number collisions time step small collision response time negligible compared total computation time 
equation number collisions proportional number objects number collision detection tests proportional total number primitives considered proportion total number primitive faces number collisions negligibly small 
considerations deal level optimization minimizing collision detection tests 
deal research area 
common method bounding volumes early elimination collision detection tests 
object scene enclosed inside bounding volume sphere box 
preliminary collision detection carried bounding volumes 
collision detailed collision detection tests required objects bounding volumes 
web hierarchical bounding box methods reduce collision detection tests log time 
employed ad hoc methods update hierarchy periodically simulation 
extended binary hierarchy ary structures web improved results 
zyda bounding spheres uniform grid partitioning object space fast elimination collision detection tests achieving real time animation objects 
application geared real time animation moving colliding vehicles terrain accuracy sacrificed gaining efficiency collision detection response 
volino hierarchical bounding box method geometrical properties self intersecting smooth objects quickly determine self collisions geometrically modeled cloth objects 
baraff suggested bounding box techniques minimum comparison sorting suggested optimizations achieve preliminary collision detection practically time sig 
total time number collisions 
bounding box technique effective objects simple example convex 
complex unwieldy bounding boxes tend encompass empty space killing effectiveness 
effective bounding box tests ratio object volume bounding box volume high possible 
apart complex scenes consisting large number objects expensive handle bounding box methods due overhead 
avoid overhead proposed method trace object bounding volume usually bounding sphere easy comparisons object path space detect collisions analytically 
recommended sparse environments 
bounding spheres share disadvantages bounding boxes 
reasons adapted variant hierarchical oct tree spatial sub division partitioning object space 
spatial decomposition object space adaptive oct trees popular ray tracing glassner 
glassner uses method reduce number objects tested ray expensive ray object intersection tests 
collision detection useful reducing expensive geometric intersection tests object objects scene usually motion 
ray traced scenes usually static opposed animation scenes dealing 
consequently build oct tree hierarchy time step 
intersection tests carried check object belongs voxel periodic building expensive 
propose technique oct tree compact bounding volumes computationally expensive 

devising compact bounding volumes system objects highly irregular shapes moving space 
objects dynamic move time static fixed scene simulation 
objects ultimately decomposed simple geometric primitives triangles 
represent objects space spatial decomposition method combines uniform cell structures oct tree structures 
top level uniform dimensional grid subdividing space 
resolution grid set user 
case level grid voxels coordinate axis 
voxel structure remains empty dynamic simulation starts 
oct tree generated voxels cell structure explained section 
placing objects voxels start simulation objects scene placed respective dimensional cells uniform cell structure top level 
called digitizing objects scene voxel grid 
digitizing object face problem consists converting object face assume triangle defined floating point vertices space collection voxels depth oct tree 
conventional algorithms involve voxel face intersection tests time consuming thousands faces digitized time step 
propose method digitizing face resorting intersections 
version method proposed digitization straight line raster grid digital differential analyzer dda rogers 
identification voxels straight line method described glassner back face culling technique glassner efficiency 
real gains obtained extending dda concept digitization straight line space efficient identification cells spatial decomposition ray tracing fujimoto 
elegant algorithm proposed cohen 
apply method planar faces objects discretized triangles 
select lines lying triangle digitize 
lines selected way entire face covered digitization 
classical dda algorithms assume line starts ends center pixels voxels case 
objects randomly placed space line triangular face need satisfy condition size voxels quite large lower resolutions digitization large object spaces 
frequent case super sampling voxel overcome 
high virtual resolution imposed existing real resolution 
voxel consists smaller voxels maximum depth sampling carried 
virtual voxels emerge small allow assumption points line lie centers 
increment driving axis dda move real voxel 
error terms similarly scaled 
case example real voxel grid grid virtual grid resolution imposed making real voxel cell units size axis 
consequently algorithm complicated simple dda 
fig shows line digitized resolutions virtual resolution grid 
fig shows triangle digitized way 
red cells show digitization level yellow cells level blue cells level superimposed order 
digitizing quadrangle similar discussed 
voxel enumerated position oct tree hierarchy easily determined integer indices generated dda oct tree node containing face information inserted appropriate place 
problem selecting suitable lines triangle face cover completely digitization 
points line selected way lie largest sides triangle 
line parametrically advanced apex base obtain lines covering triangle 
fig shows process 
fig complete digitization face appropriate increment value parametric increment du obtained dividing length cell length largest side calculated virtual voxel units 
ensures voxels covering triangle enumerated 
decomposition carried time step simulation faces moving objects 
static objects walls roof floor done simulation stored memory 
large number static objects saves considerable amount time spatial decomposition objects done time step visualize voxels occupied object digitized version object space 
idea exploit digitized object information compact bounding volumes 
matter complex object broken primitive geometric elements digitized oct tree structure bounding volume compact sphere cube 
consider example line enclosed box area forms bounding area line shown fig 
box undergoes quad subdivision bounding area shrinks occupied quadrants fig 
quad subdivision generates bounding area fig 
general level quad subdivision reduces original noted spacial decomposition desirable primitive triangle large compared size voxel considerable time spent digitizing entire face 
cases bounding box may better alternative 
automatic way deciding optimum voxel size scene 
example illustration 
typically primitives occupy voxels face 
bounding area exponential reduction bounding area bounding volume results drastic reduction intersection tests seen 
moving objects fig fig fig fig line enclosed planar bounding box area time step dt objects expected move sweep object space 
movement taken consideration digitizing objects collisions essentially result object movements 
start smallest unit triangle 
fig triangle moves position movement vertices assumed linear small interval dt true due angular motion object 
combination initial final positions forms prism shown fig 
faces prism digitized explained previous section 
moving objects collide certain leave trail object space fill common voxels investigated 
collision detection fig fig object portion object lies voxel pointer object maintained voxel 
voxel maintains list objects lying inside 
objects share voxel means objects closely placed space potential candidates collision detection tests 
lower resolutions digitization number objects voxel contains quite large complex scenes 
results large number collision detection tests carried 
reduce process follows adaptive digitization speed digitization triangles 
dealing culling direction motion applied eliminate face completely embedded inside volume swept object 
consider example triangles fig digitized lowest resolution level common cell shown red 
digitization triangles tested intersection 
assuming maximum real resolution examples digitize triangles level fig common cells level fig 
call adaptive digitization 
turns case digitization level grid sufficient eliminate collision detection test 
initial digitization placed objects uniform voxel structure adaptive digitization oct tree model 
digitization proceeds predefined resolution reached collision detection eliminated 
voxel highest resolution contains face faces voxel tested possible collisions 
variable digitization generation oct tree adaptive digitization memory intensive slow performance considerably 
minimize number faces digitized simulation step preliminary elimination trivially non intersecting parent objects faces traditional bounding box technique 
experiments leaves large number objects process 
considering memory requirements considerably increase higher resolutions object digitization essential keep resolution digitization low possible 
objects primitive elements triangles primitive object maintains current level digitization 
primitive object shares voxel primitives objects digitization primitives carried higher resolution previous example triangles 
rest primitives objects share common cells left 
object various portions digitized various levels resolution depending share common cells objects 
call variable digitization 
comparison oct tree structure digitization approach oct trees differences conventional oct tree construction 
fig quad tree structure fig quad tree structure conventional oct tree construction subdivision carried node level 
node contains optimum number faces octal subdivision generated 
hand digitization subdivision carried face resolutions primitives necessarily increased simultaneously 
primitive lower resolution shares voxels primitive higher resolution usually increase resolution 
test intersection primitives carried share voxels highest resolution 
level 
face shares voxel faces different parent object entire face digitized higher resolution 
process shown quadtree version fig 
fig upper right quadrant contains ellipse triangle undergoes quad subdivision 
fig triangle ellipse share quadrant digitized higher resolution 
consequently lower right quadrant affected 
method generates voxels necessary unavoidable trade oct tree division intersection tests carried voxels triangle lower left sub voxel upper right quadrant objects difference refer hierarchy adapted oct tree structure avoid confusion 
calculation collision points collision said taken place vertex object intersects face object edge object cuts edge 
moore method binary subdivision simulation time interval calculate collision point desirable accuracy 
time interval object motion assumed linear 
objects rotate rapidly simulation step small allow linear approximation object movement 

collision response collision points detected main problem solved prevent interpenetration objects 
new velocities imparted objects allow colliding objects separate instantaneous collision 
impulse forces calculated collision points 
done analytically laws conservation linear angular momentum 
exhaustive theoretical treatment impact dynamics 
computational purposes sig 
chose analytical method calculating response single point moore extend simultaneous collisions sake simplicity 

results section timing statistics collision detection response technique draw 
table gives statistics examples 
times cpu times complete animation sequences combining collision detection response 
examples executed silicon graphics indigo extreme machines 
unoptimized version implemented level bounding box scheme fast preliminary test pair primitives eliminating intersection test 
bounding boxes rigid body tested 
overlap primitive elements rigid body compared preliminary bounding box tests 
overlap actual intersection calculation performed 
theoretically boxes bounding box tests carried log time making frame frame coherence practically achieved time time step sig 
implemented algorithm mentioned heavy overheads data structures 
simpler hierarchical bounding box elimination method works faster objects contains average primitives comparison 
optimized version bounding box elimination tests carried limited extent minimum comparison sorting binary trees 
strictly speaking log log 
approximated log knuth addition digitization 
table arranged increasing order number primitives scene 
scene faces intersection tests total time frames intersections tests frame time frame scene faces intersection tests total time frames intersections tests frame time frame scene faces intersection tests total time frames intersections tests frame time frame scene faces intersection tests total time frames intersections tests frame time frame scene faces intersection tests total time frames intersections tests frame time frame scene faces intersection tests total time frames intersections tests frame time frame scene faces intersection tests total time frames intersections tests frame time frame table cpu time seconds unoptimized optimized scene faces intersection tests total time frames intersections tests frame time frame complexity scene noticed performance optimized version increases relative unoptimized version increasing complexity scene 
table gives statistics amounts time spent collision detection versions 
unoptimized version includes bounding box tests intersection handling memory overheads 
optimized version digitization objects data structure maintenance major parts 
lower levels complexity fewer bounding box tests unoptimized version result better performance memory access operations optimized version 
fact examples unoptimized version performs optimized version see table 
complexity increases bounding box method increasingly inefficient 
versions collision detection consumes important part total time unoptimized version considerably higher especially complex scenes 
possible provide general estimate overheads consume amount time depend factors scene configuration complexity 
general experiments complexity scene increases bounding box technique cost efficient terms computation time 
table collision detection times seconds scene scene scene scene scene scene scene scene faces unoptimized collision detection total time optimized collision detection total time time digitization take 
assuming planar faces size number voxels enumerated preliminary intersection test faces 
generally small face typically small compared entire object space 
time proportional number faces digitized 
static objects digitized simulation considered time step 
objects eliminated preliminary bounding box tests object level 
consequently fraction total number faces digitized time step 
number varies widely scene scene 
example worst case scene nearly half faces digitized time step 
scene twentieth faces digitized average 
scene total number faces 
intersection calculations overheads table gives comparative figures number intersection tests carried primitives versions 
optimized version greatly reduces intersection tests due tighter bounding volumes cases time spent achieving offsets performance gain computation time 
actual intersection tests need influence computing time optimization applied 
due relatively potential intersections occur time step see table 
cases optimization overhead higher ultimate intersection calculations versions collision detection 
addition optimized version generates fewer intersection calculations simple scenes bounding box method 
hand scene difference number intersections optimized unoptimized versions small due overheads difference computation time high 
bounding boxes digitization bounding box technique generates intersection tests optimized version means true digitization reduces intersection tests 
intersection calculations eliminated bounding box tests carried objects remaining pruned digitization 
table presents intersections tests entire animation sequences 
table total number intersection calculations figures brackets frame scene scene scene scene scene scene scene scene faces bounding boxes digitization combined actual number collisions optimized table shows incorporation additional bounding box tests useful reducing number intersection calculations carried 
actual number intersections frame small fraction total number faces just stated section 
number intersection tests drastically came digitization method 
due compact bounding volumes generated method 
noted matter scheme optimizing periodic bounding box generation affect ultimate number intersection tests object faces 
improvements digitization process adapted section efficient previous scan line algorithms 
kaufman uses incremental arithmetic scan convert polygons surfaces kaufman kaufman consisting entirely integer arithmetic inner loops 
concept driving axis run dda done integer arithmetic incurs integer multiplication occasionally increment driving axis induces simultaneous increments axes 
due step size driving axis greater unity 
outside loop integer multiplications necessary initialize constants carried shift operator fact virtual resolution voxel power 
require integer multiplications involving integer dimensions line 
rest code involves integer additions 
possible improvement converting dda dda covering triangle lines parallel coordinate axes running parallel smallest side fig 
coupled scan line coherence axis significant gains 
resulting code complicated eliminate 

conclude digitization method helpful optimizing computationally expensive object intersections especially complex environments 
proved approach superior bounding box methods complex scenes consisting large number objects 
achieved due principle reasons 
hierarchical partitioning space oct tree structure fast dynamic construction structure digitization compact bounding volumes 
construction oct trees partitioning object space generic feature computer graphics applications method helpful fast generation structures 
example digitization simple line dda nearly times faster conventional method 
digitization done level primitives method easily extended cases primitives move independently global motion parent objects deforming bodies 
acknowledgments authors tom ronan boulic developed human body library examples 
shen help preparing document 
research partly supported national swiss research foundation 
baraff david baraff analytical methods dynamic simulation rigid bodies computer graphics proc siggraph vol pp july 
baraff david baraff fast contact force computation non penetrating rigid bodies 
computer graphics proc siggraph pp july 
raymond mechanical impact dynamics rigid body collisions 
wiley interscience publication wiley cop cohen daniel cohen voxel traversal line graphics gems iv academic press pp 
paul david zeltzer new model efficient dynamic simulation th eurographics animation simulation workshop pp september 
feynman feynman leighton sands feynman lectures physics vol addison wesley pp 
fujimoto fujimoto tanaka iwata arts accelerated ray tracing system ieee cg vol pp april glassner andrew glassner space subdivision fast ray tracing ieee cg vol pp october 
glassner andrew glassner graphics gems academic press pp 
hahn hahn realistic animation rigid bodies computer graphics proc 
siggraph vol pp 
kaufman arie kaufman efficient algorithms scan conversion parametric curves surfaces volumes computer graphics vol pp july kaufman arie kaufman efficient algorithms scan converting polygons computers graphics vol pp knuth donald knuth art computer programming vol sorting searching addison wesley 
moore moore wilhelms collision detection response computer animation computer graphics proc siggraph vol pp 
rogers david rogers procedural elements computer graphics mcgraw hill pp 
sig physically modeling course notes siggraph august 
volino pascal volino nadia magnenat thalmann efficient self collision detection smoothly discretized surface animations geometrical shape regularity computer graphics forum eurographics pp 

web robert webb mike dynamic bounding volume hierarchies improve efficiency rigid body simulations visual computing cgi proc pp 
web robert webb mike distributed multi person interaction virtual worlds communicating virtual worlds cgi proc pp 
zyda zyda david pratt william osborne james monahan real time collision detection response journal visualization computer animation pp 
