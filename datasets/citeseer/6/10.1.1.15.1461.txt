static verification security requirements role cscw systems static verification security requirements cscw systems finite state techniques model checking 
coordination security constraints cscw systems specified role collaboration model 
verification ensures completeness consistency specification global requirements 
developed verification models check security properties task flow constraints information flow confidentiality assignment administrative privileges 
primary contribution methodology verification security requirements designing collaboration systems 
categories subject descriptors operating systems security protection access controls management computing information systems security protection unauthorized access general terms management design security verification keywords ahmed anand tripathi department computer science university minnesota union street se minneapolis mn tripathi cs umn edu security policy specification role access control methodology access control policy design finite state model checking 
cscw computer supported cooperative systems range online interactive classroom traditional office automation workflow 
goal research statically verify security properties cscw systems 
requires formal specification model security policies supported national science foundation itr 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
june como italy 
copyright acm 
development verification model ensure requirements correctly realized design specification 
security policies practice concerned subjects access resources specified conditions 
traditional access control models access matrix take model specify conditions 
policies related security attributes privacy confidentiality integrity resource access cscw need handle various context sensitive aspects collaboration environment 
context sensitive security constraints coordination state cooperating users 
methodology verification security constraints cscw systems 
earlier developed role model collaboration specification integrating security coordination policies 
focus verification collaboration specifications model checker spin 
objectives verification ensure specified constraints violate desired coordination security properties user interactions follow coordination task flow requirements roles conflicting inconsistent constraints confidential information flow unauthorized users authorized information accessed temporal conditional constraints accessing objects satisfied classical safety property rights leaked unauthorized users 
fact classical safety property model decidable access control models placed constraints access control structures facilitate analysis safety properties typed access matrix 
cases users administrative rights create subject trusted violating security properties 
rbac role access control safety various role constraints separation duties analyzed logical expression rule systems graphical models 
finite state techniques model checking utilized correctness verification role collaboration model 
primary motivation approach existing model checking tools verify security requirements cscw systems design phase 
problem automata verification models state space explosion exponential increase state size addition new system components 
techniques required handle state space explosion problem 
challenge development verification models check security constraints may inter dependent 
modification specification comply requirement may violate previously verified requirements 
methodology different aspects security requirements task flow role constraints information flow assignment administrative roles verified 
aspects requirements developed verification models spin 
discuss models constructed specification 
section presents required background role collaboration model 
section discusses techniques efficient utilization spin 
aspects security requirements verification models developed section 
section section related 

background role col model illustrate role collaboration specification model example 
rbac models task access control team access control role management role active security address issues related context sensitive access control constraints 
model activity defines group users cooperate common objectives performing individual tasks set shared objects 
represents protection domain scope roles objects privileges collaboration 
roles activity assigned privileges perform certain tasks 
term role specific tasks operations 
associated role operation precondition action 
operation executed precondition true 
action associated operation consist object method invocations synchronization actions activity management actions instantiation new objects activities 
activity structured hierarchically consisting multiple nested concurrent activities 
activity template specifies generic collaboration pattern 
number instances template dynamically concurrently created 
activity specification shows example course activity 
course activity contains roles instructor assistant student 
roles disjoint members read write 
course activity nested examination activity 
members instructor assistant roles admitted grader role instance examination activity 
members student role course join examinee role nested examination activities 
examinee creates instance activity template take exam 
activity contains roles candidate checker 
examinee creating activity admitted legend role assistant course examination role grader role examiner role examinee role instructor role checker role candidate role reflection role assignment bulletin board role student parameter objects hierarchical structuring collaborative activities candidate role 
objects passed parameters exam session activity 
single object shared sessions 
hand new object created exam session 
activity template specified terms roles operations object types 
skeleton course activity template complete specification nested exam session activity examination activity shown 
specification model activity refer current instance pseudo variable creator 
similarly pseudo variables defined 
meta policy specification owner role specifies users manage activity instance nested entities 
model collaboration designer specify owner entity 
membership rules owner role follows template specification may indicate role owner entity 
explicitly specified activity owner parent activity owner role activity owner default owner default owner object role creates 
event specification events event counters specifying coordination dynamic security requirements 
events implicitly generated system model 
related role operation types events request start finish 
activity start finish events 
count operator counts number occurrence event type 
subset events defined event attributes 
role specification role specification includes role name assigned roles role admission activation constraints role operations preconditions 
specification boolean function member role user checks participant role members role returns role par course assistant instructor student 
examination owner instructor examiner 

role examiner 
role examinee reflect student 
role grader reflect assistant instructor 
owner grader objects exam ans candidate checker grade finish role candidate member examinee member creator members date date may date date may operation precondition start action exam operation write precondition finish action ans data operation submit precondition write finish role checker members member grader operation grade precondition candidate submit finish action ans data skeleton specification course activity template list 
count participants role members role 
role admission constraints role admission precondition true user admitted role 
assistant role may admission constraints shown members member staff member student admission constraints facilitate specification static separation duties constraint requiring assistant student course maximum cardinality constraint previous qualification ensuring assistant member staff role 
role admission activity creation specification model supports mechanisms admit participants parent activity role child activity role 
mechanism static role assignment referred role reflection reflect construct members specified roles parent activity members role child activity 
mechanism members student role parent activity admitted examinee role subject examinee role admission constraints 
removal participant reflected role role parent activity implies removal role child activity 
second mechanism dynamic role assignment role admission specified time activity instantiation 
template definition uses tag specify roles dynamically assigned instantiation specified candidate role 
partial specification operation examinee role examination activity template 
role examinee reflect student operation 
action ans new object act new activity exam ans candidate examinee invokes operation instance template created participant creating instance dynamically assigned candidate role 
operation specification preconditions enable specify coordination dynamic access control policies 
follows example operation specification examiner role examination activity 
operation performed specified precondition 
operation results creation object exam type invocation method object 
role examiner operation precondition start action exam new object exam data role validation activation constraints role validation constraints specify roles participant participant membership role valid 
lastly activation constraints role specify conditions common preconditions operations defined role 
time user performs role operation activation constraints validation constraints checked 
various dynamic security policies expressed means constraints preconditions 
shows example activation constraint candidate exam session activity perform operation designated time exam 

model checking spin spin performs exhaustive search verify safety properties assertions invalid states liveness properties related execution cycles sequences deadlocks livelocks unreachable code 
spin specification written promela focuses coordination interaction synchronization aspects concurrent systems 
model system desired property system spin converts finite state model system negation desired property buchi automata checks language intersection automata empty signifies property valid 
intersection empty spin provides trace counter example 
desired system property expressed ltl temporal operator eventually 
system model properties intact produces large search space 
properties concern verifying specific property independently verified 
example verify users admission roles modeling role operations affect users movement roles required 
properties related role operations viewed independent aspects verified separately 
model composed incrementally adding new property model set properties verified 
search space verification models reduced tailoring property specific information 
example verification property related user invocation method required model maintain users identities maintain bit variable signifying fact user invoked method 
verification specific user generalized verification global properties 
abstraction internal data structure reduces state space 
property interested outcome precondition model need maintain count events precondition 
bit maintained signifying precondition satisfied 
spin supports static analysis slicing algorithms provide hints possible reduction model property 

verification methodology security requirements collaboration designer may specify global properties designing collaboration specification 
methodology verify properties spin 
verification global properties verifying global security requirements verification collaboration specification ensure specification incomplete inconsistent 
role collaboration model supports context sensitive condition dependent access rights 
collaboration designer easily mistakes specifying policies precondition may incomplete role admission constraints may conflicting 
correctness consistency task role modeling corresponding specification weaved verification global security requirements 
discuss properties designer needs verify secure cscw system 
section show inter weaved multi dimensional verification concerns managed 
reachability operations primary correctness requirement role operation executed reachable 
operation model unreachable precondition satisfied 
example interdependent role operations represent deadlock operations performed 
operation op precondition op finish operation op precondition op finish task flow task modeling integral part collaboration specification role model 
event count conditions provide expressive power specifying coordination requirements collaboration designer may verify task flow requirement independent role constraints alternative form expression 
facilitate checks design task flow requirements expressed path expression constructs sequence selection count unbounded 
task flow requirement examination activity expressed requires performed started number exam sessions equal cardinality examinee role examination terminates 
second path specifies write performed time completion candidate role 
completion single write candidate submit 
submit checker grade completing activity 
examination examiner student member examinee candidate candidate write candidate submit checker grade role constraints incorrect inconsistent role constraints result due conflicting role admission validation constraints 
consider example participant role participant role hand role admission constraints require member participant role joining satisfied 
role validation constraints member role admission constraints member member information flow confidentiality rbac policy neutral model information flow constraints classifying roles disjoint members implicit labels 
doing collaboration designer may verify constraints satisfied 
similarly constraints specified information flow certain conditions satisfied certain information flow specific roles 
course activity example designer intends enforce verify confidentiality requirements 

participant examinee role access content question start exam session 

identity candidate known assistant grades candidate answer book submission grades 
integrity access leakage due owner assignments roles objects participants owner roles get extended privileges 
collaboration designer express integrity policies global properties check access rights unintentionally leaked owner assignments 
example collaboration designer specifies requirement 

participant examinee role modify answer book exam session 
models property verification approach collaboration specification xml converted promela verification language 
additional components needed added model verify properties related information flow owner assignments 
search space model small collaboration specification large 
second problem inter weaving aspects verification requirements 
verification methodology needs ensure follows precedence properties checks 
consequently developed aspects global requirements checked models efficient verification 
verification models automatically constructed collaboration specification 
models termed task model role model information flow model owner assignment model 
models respectively verify correctness coordination constraints role constraints confidentiality requirements assignment administrative roles integrity requirements owners assigned 
proctype activity bit write finish start finish submit finish grade finish grade finish atomic start start finish write finish write finish submit write finish submit finish grade submit finish grade finish fi grade finish finish break od spin model activity task model verification model coordination requirements task model designed verify aspects related coordination requirements reachability operations task flow 
exhaustive verification run model report unreachable code pointing operations unreachable 
operations preconditions operation depends represented model 
example operations access coordinated operations represented model 
verification model concerned requirements related users presence roles intra role coordination operational separation duties 
conversion activity promela shown 
verification model activity process multiple instances process created 
process loops till termination condition satisfied 
conditions expressed guard 
termination condition satisfied global variable finish incremented 
path expression task flow requirements automatically converted ltl expression ltl patterns corresponds path expression constructs 
path expression examination activity converted ltl expressions count event signifies true value number event equal examination start examiner start examiner finish student start count student finish member examinee examination finish verification model role constraints primary goal role verification model ensure roles members role related constraints satisfied 
check user related properties presence users roles modeled 
set users top level activity model exhaustively searches assigns members nested roles 
result large search space minimal number initial user assignment calculated cardinality roles 
verification minimal number initial users activate roles trigger intra role coordination constraints 
explain algorithm finding minimal number initial assignment course example 
initial roles course activity disjoint members cardinality constraints requires member 
second level examination activity roles require member active 
examinee role intra role coordination requirement expressed operation precondition specifies examinee start 
facilitate multiple instances activity members examinee role required 
bottom exam session activity level candidate checker role maximum cardinality constraint 
results minimal number initial users student role 
initial members assigned exhaustive search report unreachable codes turn pointing membership constraints satisfied 
large collaboration exhaustive search minimal members may feasible role membership related events confined activity boundary 
cases role properties specified ltl faster verification results searching specific counter examples 
course activity initial assignment user assistant role correctness requirement grader role eventually member expressed expression ltl 
member grader implementation verification model maintains bit vector bit signifies presence user specific role type 
initialization express roles users require tracking 
member bit vector spin ltl property verifier converts requirement expression represents bit corresponding presence grader role 
member facilitate designer express various types role constraints conversion functions role constraints ltl expressions developed 
example tuple static separation duties user automatically converted ltl expression shown 
assistant student member assistant member student verification model information flow confidentiality properties noninterference non deducible formalized comparative discussion types information flows models 
verification model explicit information flow captured summarized rules 
objects subject read permission time write permission time information flow 

similarly object subject write permission time subject read permission time information flow 
read write write read information flow object object subject subject incorporate rules model components related users knowledge objects internal information added 
model read permission assumed method returns values write assumed values passed method invocation object creation 
verification requirement knowing user initial members student role express information flow requirement section user examinee role access content question start exam session knowledge subject object signifies object content passed subject event user signifies user triggered specified type event 
knowledge event start requirement specified negating fact eventually user knows content starting 
initial run initial assignment users student assistant instructor counter example 
trace examiner leaked start exam sessions 
encode act performed examiner provided fact model tuple write examiner meant examiner write content 
second run similar situation grader role leaked 
grader direct access exam information leaked examinee grader examinee fact grader perform act provided model 
verification run counter example showing examinee able leak content user started 
preserve property information flow investigated solutions 
solution student role privileges revoked examination activity 
accomplished adding coordination requirement operations student role accessing 
restrictive examinee started exam session able bulletin board 
second solution ensured examinee initiated exam session access session 
enforce revoked privileges student role added new role user course activity privileges 
joining role participant student role access 
additionally operational separation duties constraint specified examinee leave user role activity 
verification confidentiality property failed examinee able wait completion examinee exam session able share 
circumvent added constraint exam session started predefined time 
submit performed period exam initiate exam sessions 
include restrictions required real time events spin support verification related real time 
proper duration events necessary verification modeled events signified events 
events modeled event submit event examinee respectively 
resulting specification valid requirement 
verification owner assignment cscw systems may possible assign single administrator collaboration aspects 
roles activity different administrative domains may need maintained disjoint owners 
collaboration model owner activity terminate activity owner role admit remove members role subject role admission validation conditions owner object unlimited access object 
owner assignment related concerns separately checked previous discussion information flow model taken consideration effect assigning owners different entities 
motivation owner model ensure due owner assignments confidentiality requirement violated access right leaked unauthorized users 
modeling owner rights assume protection mechanism tempered owner owner bypass precondition checks 
context collaboration systems assume owners adversarial participating cooperative activities 
implies trust follow policies derived specification 
trust framework components related owner rights modeled 
owner assignment model owner role view identities participants role 
owner object read modify restriction 
verification requirement owner model going back verification case study step checked confidentiality requirement preserved owners 
assigned instructor owner examination activity nested roles grader owner activities roles shown 
owner assignment configuration satisfied requirement 
verification requirement confidentiality requirement knowing user initial member assistant role expressed 
expression context es added imply grade finish event candidate checker roles activity instance scope 
identity user represents information object user identity 
event grade finish es member candidate es member checker es knowledge identity requirement expressed negation error behavior member candidate role member checker role exam session context identity known grade finished user added student role non deterministic steps checking identity knowledge suffices verification 
requirement satisfied grader owner candidate role access identities 
tried examinee owner candidate role 
counter example candidate leaked identity object 
fact candidate perform action provided model 
consequent verification requirement satisfied examinee owner candidate role 
verification requirement requirement related access leakage write privilege revoked terminates expressed event finish access write answer book requirement specified negating fact eventually state activity terminated write access answer book 
examinee owner candidate role verification requirement failed 
set examiner owner candidate role requirements satisfied 

related model checking various application specific property verification verification workflow properties 
mentor utilizes state activity chart formally specify business processes verifies workflow specification symbolic model checking ordered binary decision diagram 
model checkers support ltl property verification workflow processes nusmv spin 
compared systems mainly specify task coordination requirements provide model verify security properties information flow 
static analysis controlling information flow program analysis addressed researchers 
analysis concentrate program verification ensuring multi level security policies related information flow storage channels 
finite state model checking tools spin explored program analysis protocol verification 
role model specify coordination security requirements utilize finite state models verification specification 
approach specification functional confidentiality requirements cscw systems notation formal verification 
petri net tool validation system security policies specifically mandatory access policies proposed 
contrast methodology specifying verifying security constraints role cscw systems finite state model checking 

methodology verification security requirements cscw systems 
previous developed role model specifying collaboration systems 
specification statically verified finite state techniques spin 
global requirements verified converted ltl expressions checked spin models 
techniques handle state space explosion problem finite state models developing incremental modeling separation concerns property specific abstractions 
types security requirements cscw systems task flow constraints role constraints information flow confidentiality management administrative roles developed different verification models 
case study course activity shown global requirements specified verified models spin 
current model concerned explicit information flow 
verify types confidentiality properties 

bacon moody yao 
model oasis role access control support active security 
acm transactions information system security november 
bertino ferrari 
flexible model supporting specification enforcement role authorizations workflow management systems 
acm workshop role access control pages 
campbell habermann 
specification process synchronization path expressions 
operating systems international symposium rocquencourt 
lecture notes computer science vol springer verlag april 
castano samarati villa 
verifying system security petri nets 
security technology 
security technology proceedings 
institute electrical electronics engineers international conference pages oct 
corbett dwyer hatcliff laubach robby zheng 
bandera extracting finite state models java source code 
proc 
icse pages 
denning 
cryptography data security 
addison wesley 
wieringa 
verification support workflow design uml activity graphs 
proc 
icse pages 
foley jacob 
specifying security computer supported collaborative computing 
journal computer security 
harrison ruzzo ullman 
protection operating systems 
communications acm august 
holzmann 
model checker spin 
ieee transactions software engineering may 
jaeger 
practical safety flexible access control models 
acm transactions information system security may 
janssen 
verifying business processes spin 
proc 
th international spin workshop 
lupu sloman 
reconciling role management role access control 
acm workshop role access control pages 

spin verify security protocols 
proc 
th int 
spin workshop model checking software lncs pages 
muth weikum kotz dittrich 
enterprise wide workflow management state activity charts workflow management systems interoperability dogac ozsu sheth eds 
springer verlag 
myers liskov 
decentralized model information flow control 
proceedings sixteenth acm symposium operating systems principles pages 
osborn 
role graph model conflict interest 
acm transaction information system security february 
osborn 
information flow analysis rbac system 
acm symposium access control models technologies pages 
roberts 

autonomous descriptions synchronization modules 
proc 
ifip congress pages 
ryan mclean millen gligor 
non interference needs 
th ieee computer security foundations workshop pages 
sandhu 
typed access matrix model 
ieee computer society symposium research security privacy pages 
sandhu coyne feinstein 
role access control models 
ieee computer february 
snyder 
formal models capability protection systems 
ieee transactions computers march 
thomas 
team access control primitive applying role access controls collaborative environments 
acm workshop role access control pages 
thomas sandhu 
conceptual foundations model task authorizations 
ieee computer security foundations workshop pages 
tripathi ahmed kumar 
specification secure distributed collaboration systems 
ieee international symposium autonomous distributed systems april 
tripathi ahmed kumar 
design policy driven middleware secure distributed collaboration 
proc 
international conference distributed computing systems pages july 
lee 
general theory security properties 
ieee symposium security privacy pages 
