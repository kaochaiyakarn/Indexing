social structure open source software development teams kevin crowston james school information studies syracuse university centre science technology syracuse ny fax email crowston syr edu james com submission individuals teams virtual communities track international conference information systems draft may please cite quote social structure open source software development teams open source software development teams provide interesting convenient setting studying distributed 
answering basic question social structure teams 
social network analysis interactions represented bug reports large active projects find oss teams highly centralized contrary expectation 
furthermore find level centralization negatively correlated project size suggesting larger projects modular 
methodological contribution identifying appropriate analysis approaches interaction data 
conclude sketching directions research 
completed research submission individuals teams virtual communities track international conference information systems words pages title text keywords open source software software development bug fixing distributed social network analysis social structure open source software development teams years organizations reliant distributed teams 
report initial step study open source software development teams exemplars distributed teams 
specifically data social structure large active teams shows teams exhibit wide range degrees centralization contrary expectation large teams tend centralized 
distributed long history leary orlikowski yates contemporary teams typically rely computer mediated communications cmc communication coordination advances information communication technologies crucial enablers development organizational form ahuja carley 
result distributed teams lively area research information systems field 
distributed teams offer numerous potential benefits reducing costs associated travel relocation ease reconfiguring teams jackson drucker exploitation distributed expertise grinter perry orlikowski 
distributed teams successfully applied manage complex large non routine activities tenenbaum moon sproull 
distributed teams particularly attractive software development software information product easily transferred systems support teams scacchi 
unfortunately problems software development exacerbated development teams distributed environment reduced possibility informal communication langer carmel agarwal grinter 
lack common organizational setting functional background socialization communication coordination processes difficult reducing team performance increasing need coordination learning members armstrong cole sproull kiesler khoo powers 
furthermore teams rely cmc may difficult develop informal relationships communications necessary address interpersonal issues curtis krasner grinter 
literature software development distributed teams emphasize difficulties distributed software development case open source software oss development presents intriguing counter example 
oss broad term embrace software developed released sort open source license lawrie 
thousands oss projects spanning range applications 
due size success influence linux operating system apache web server probably known hundreds projects widespread 
key interest fact oss software developed distributed teams 
developers contribute world rarely meet face face coordinate activity exclusively means email bulletin boards raymond wayner 
surprising oss process appears eschew traditional coordination mechanisms mockus fielding 
participants describe oss development process lacking traditional mechanisms coordinate software development plans system level design schedules defined development processes grinter 
characterized globally distributed developer force rapid reliable software development process effective oss development teams profit advantages evade challenges distributed software development 
oss development poses real puzzle rich setting researchers interested practices distributed teams 
oss development teams convenient research setting studying distributed reasons 
lot successful meeting challenges developing large complex software systems cases records interactions products publicly available 
teams perform common task software development somewhat similar fashion similar tools studying control somewhat variations distributed practices difficult compare 
oss development important phenomena deserving study right 
millions users depend systems linux internet scacchi notes little known people communities coordinate software development different settings software processes practices organizational contexts necessary success 
report early results project study distributed open source software development teams 
answering basic question social structure teams 
question important right assess representative oss distributed general 
explore means conclusively answer question structure teams related variables interest 
section briefly review literature oss team structure presenting methods data analysis technique results 
conclude discussion suggestions research 
literature review study oss investigating basic structure oss teams 
authors described oss development teams having hierarchical onion structure cox moon sproull shown 
centre core developers contribute code oversee design evolution project 
example study apache web server developers contributed code new functionality mockus fielding 
core described small exhibiting high level interaction difficult maintain core group large 
surrounding core developers 
individuals contribute sporadically reviewing modifying code contributing bug fixes 
typically core developer review contributions accepted distributed 
example development linux linus torvalds personally reviewed decided code submissions torvalds 
developers group larger core required level interaction lower 
surrounding developers users 
subset users active users meaning latest releases contribute bug reports feature requests code 
non programmers may contribute writing documentation translating system 
majority users outermost circle passive meaning simply code making specific tangible contributions return 
oss projects freely distributed impossible know precisely size passive user population border outer circle indistinct 
important note description project team illustrated case studies large prominent teams apache web server project 
model face validity consistent research kinds distributed groups 
extensively tested may representative oss projects general 
understanding oss team structure important assess lessons oss teams generalized distributed settings differently organized 
assess proposed onion model holds wider range oss projects 
specifically test hypothesis oss projects exhibit high degree centralization 
methods data explore structure teams employed social network analysis sna 
sna set related techniques analyze structure social groups characteristics network interactions group 
sna may unfamiliar readers explain data collection analysis detail go 
step process collect interaction data 
analysis reported interactions related bug fixing process oss projects 
bug fixing chosen provides microcosm coordination problems crowston 
furthermore quick response bugs mentioned particular strength oss process raymond puts bugs shallow 
process involves entire community core developers active users provides evidence test model 
create sample oss projects selected projects hosted sourceforge free web system provides range tools facilitate oss development 
time study sourceforge supported oss projects wide diversity topics 
clearly projects suitable study inactive previous studies suggested fact individual projects krishnamurthy bug reports available 
restricted study projects listed developers bugs bug tracking system time selection april 
identified projects met criteria 
unfortunately space permit full listing projects table lists examples projects give sense sample 
familiar oss may recognize projects span wide range topics programming languages 
study network interactions bug fixing collected data sourceforge bug tracking system enables users report developers discuss bugs 
shown bug report includes basic information bug followed trail correspondence 
collect data analysis developed spider program downloaded bug report pages selected projects 
data collected april 
unfortunately selection projects data collection projects restricted access bug reports able collect data projects 
obtained data total bug reports average project 
median number reports indicating skewed distribution bug report counts 
poster bug reports messages identified sourceforge id counted total unique ids involved project involved 
downloaded bug report pages parsed extract interaction data represented project 
standard data representation network analysis wasserman frost 
matrix row column individual cells matrix count number interactions individual 
interactions directional resulting asymmetric individuals interact diagonals matrix meaningful 
conditions applied data 
key issues application sna definition actor interaction 
sourceforge system contributions system identified unique sourceforge id identify actors 
possible way knowing single individual utilize multiple sourceforge ids multiple individuals share 
believe due logistics maintaining multiple accounts lack incentive 
reputation accrues id believe individuals want maintain single id definition interaction involved 
analysis counted message bug tracking system interaction sender message preceding identified sender original bug reporter 
bug reports followup messages provided interaction data 
arrows show interactions coded fragment bug report messages 
note messages reverse chronological order response original report bottom message shown top message responds definition interaction required decisions source destination interaction 
messages labelled sender id identifying source straightforward 
message posted non logged user sender listed 
messages constituted average messages project low high projects missing data analysis 
considered alternative strategies handling missing data 
rejected simplest solution counting messages sender large number messages seriously biased results 
experimented alternative approaches simply dropping interactions deleting row column recoding unique individual bug report sender messages bug report number 
second approach retains interactions individual cost introducing host fictitious characters 
decide destination interaction 
appeared reading sample bug reports follow messages directed previous messages original poster 
unfortunately true destination difficult determine mechanically 
somewhat arbitrarily chose code interactions responses previous sender 
fortunately analysis approach chosen depend greatly choice 
analysis performed analyses examine projects structures test specific hypothesis 
exploratory data analysis philosophy plotted interaction graphs selection projects visualize interactions get sense data 
graph drawing turns surprisingly difficult problem involving variety tradeoffs single correct plot network 
experimented programs draw plots including pajek 
shows interaction plot typical project created hand edited reduce number labels 
note interaction plot important information pattern connections nodes precise locations dimensions graph interpretable 
distance nodes approximation strength ties kamada kawai spring embedding algorithm 
plot suggests interactions project centered individuals peripheral individuals typically posted bug report indicated having arrow coming consistent hypothesized structure 
numerically test hypothesis projects centralized structures calculated network centralization score project 
calculations report computed sna library www project org 
calculation network centralization starts determining centrality individual network 
different definitions centrality literature wasserman frost ch 
choice measures substantive nature interactions 
decided basic definition degree individuals receive send connections central 
choice interpretation individual posts messages reply bug reports central bug fixing process posts fewer 
alternative definitions centrality betweenness proximity closeness fit data collected 
usual calculation degree centrality dichotomous data communication vs communication 
message cut point individuals simply count individuals interacted possibly including 
concerned discarded data intensity interactions calculated individual raw interaction counts 
case actors total number interactions 
degree counted degree number interactions received degree number sent sum called freeman centrality 
typical attribute centrality individual receives lot messages degree centrality chose compute degree centrality interest identifying individuals contribute broad range bug reports 
create plot grouping individuals network calculated centrality central individuals centre central individuals periphery 
shows plot project note number bands plot chosen researchers result analysis 
plot confirms impression small number individuals project high rest low 
calculated individual centrality measures calculate centralization entire network 
standard definition network centralization inequality individual centrality measures centralized network individual high centrality low decentralized network single individual stand high low wasserman frost 
specifically network centralization calculated sum differences maximum individual centrality score normalized range dividing theoretical maximum centralization 
theoretical maximum centralization obtained perfectly centralized star network interactions central individual talking 
wasserman faust give formula theoretical maximum raw interaction counts calculated star network assuming total number observed interactions come central individual 
choice centralization score gini coefficient inequality distribution interaction counts 
concrete example various centralization scores project listed table 
histogram project centralization scores calculated data dropping interactions 
explore potential centralization measures understanding structure project groups calculated correlation scores measures interest 
specifically calculated pearson correlations coefficients centralization scores calculated different ways number developers contributed messages bug report tracking system measure project size 
count developers heavily skewed log transformed analysis 
transformation justified theoretically size project result kind growth process 
correlation coefficients shown table 
discussion findings methodological 
choice treatment missing data messages difference correlations centralization measures approaches highlighted blue table greater 
second centralization scores calculated raw interaction counts lower due conservative calculation theoretical maximum centralization correlations measures measures calculated data highlighted purple table higher 
varied centralization measures measuring thing simpler conventional definition centralization 
remainder section discuss centralization scores calculated data interactions 
third finding substantive 
surprise data indicate oss projects uniformly centralized contrary expectations 
fact calculated centralization measures display considerable range shown 
check unexpected result artifact calculations examined interaction graphs projects high low 
example highly centralized network project curl shown large centralized network 
plots drawn program pajek 
clearly shows extremely centralized network presents complicated picture 
large number peripheral individuals centre dense network clear centre 
nodes appear isolates pajek plot self interactions 
short data demonstrate centralization oss projects fact distributed highly centralized projects decentralized middle mean centralization 
fourth distribution individual centrality scores indicated highly non normal 
individuals large number interactions 
property indicates pattern interactions random may scale free albert barab si similar networks internet web wide variety social networks 
scale free network emerges result growth process new nodes preferentially attach popular nodes causing nodes hubs network 
clear explanation works data hubs ones deciding attachments developers choose bug reports respond bug reporters choosing developer forward report 
final finding centralization scores strongly negatively correlated number developers contributed bug reports highlighted green table 
concerned correlation result bias computed centralization measure plot relationship shown suggests small projects centralized decentralized larger projects decentralized 
interpret finding reflection fact large project simply possible single individual involved fixing bug 
projects grow modular different people responsible different modules 
words large project fact aggregate smaller projects resulting described shaped structure layers multiple centres 
clearly remains done 
immediately analyses plan perform data collected 
desirable perform direct study hypothesized project structure examining relative sizes network core periphery 
formal models developed core periphery structures everett unfortunately available analysis package 
second extension study evolution project structures time 
analysis provide insight projects develop change 
comparing structure different times enable isolate effects changes project leadership plausible alternative explanation observed decentralization projects 
interactions initially centered set leaders interaction different set plotting interactions show structure multiple centres project fact highly centralized 
third developers involved multiple projects examine pattern interactions multiple projects 
expect merged pattern interactions display clusters interconnections 
large number individuals analysis require considerable computation 
explore characterization project structures individually collectively scale free doing allow connect growing body research networks 
analysis require additional data collection 
significant limitation findings examined handful projects sourceforge bug tracking system bug reports public 
comfortable selection criteria appropriate identifying truly active projects go limits started examine interaction data patch reports mailing lists see display similar patterns interactions 
research approach extended data project management systems gnu gnu org org 
exploring relation project structure variables interest 
reported negative correlation centralization project size measured number developers 
process collecting variety sources additional data projects project performance associated project structure 
example identification relative size core periphery allow test hypothesis project success depends having strong active user community 
unfortunately collecting data performance defining poses significant challenges 
particularly interested identifying measures bug fixing performance go bug report centralization data 
initial interest open source projects better understand nature distributed successfully manage distributed teamwork 
really understand nature practices open source teams require examine just pattern interactions content observe elements coordination practices 
detailed studies guided analysis 
example scatter plot suggests projects particularly interesting comparisons 
bibliography ahuja carley 

individual performance distributed design groups empirical study 
conference san francisco 
albert barab si 

statistical mechanics complex networks 
reviews modern physics 


supporting virtual software projects web 
workshop coordinating distributed software development projects th international workshop enabling technologies infrastructure collaborative enterprises 
armstrong cole 

managing distance differences geographically distributed groups 
kiesler ed distributed pp 

cambridge ma mit press 


pajek program large network analysis 
connections 
langer 

groups communication network analysis 
proceedings international conference information systems pp 

helsinki finland 
everett 

models core periphery structures 
social networks 
carmel agarwal 

tactical approaches alleviating distance global software development 
ieee software march april 
cox 

town council org features shtml crowston 

coordination theory approach organizational process design 
organization science 
curtis krasner 

field study software design process large systems 
cacm 
tenenbaum 

collaborative engineering internet 
communications acm 


webpage www com 
retrieved april www com jackson 

coordination information technology management team structures computer communication systems 
journal management information systems 
drucker 

coming new organization 
harvard business review 
sproull kiesler 

communication performance ad hoc task groups 
kraut eds intellectual teamwork 
hillsdale nj lawrence erlbaum associates 
lawrie 

meanings open source unpublished manuscript 
newcastle tyne united kingdom centre software reliability department computing science university newcastle 
grinter perry 

geography coordination dealing distance 
proceedings group conference pp 

phoenix arizona 
grinter 

architectures coordination distance conway law 
ieee software september october 
grinter 

splitting organization integrating code conway law revisited 
proceedings international conference software engineering icse pp 

los angeles ca acm 
kamada kawai 

algorithm drawing general graphs 
information processing letters 
krishnamurthy 

cave community 
empirical examination mature open source projects 
wa university washington 
mockus fielding 

case study open source software development apache server 
proceedings icse pp 
pages 
mockus fielding 

case studies open source software development apache mozilla 
acm transactions software engineering methodology 
moon sproull 

essence distributed case linux kernel 
monday 


internet strategic tool software enterprise 
communications acm 
leary orlikowski yates 

distributed centuries trust control hudson bay 
kiesler ed distributed pp 

cambridge ma mit press 
orlikowski 

knowing practice enacting collective capability distributed organizing 
organization science 
raymond 

cathedral bazaar 
monday 
khoo powers 

situated learning cross functional virtual teams 
ieee transactions professional communication feb mar 
scacchi 

software infrastructure distributed software factory 
software engineering journal 
scacchi 

software development practices open software development communities comparative case study position 
torvalds 

linux edge 
communications acm 


provision online public goods examining social structure network practice 
proceedings third international conference information systems pp 

wasserman frost 

social network analysis methods applications 
new york cambridge 
wayner 

free 
new york harpercollins 
figures tables initiator release coordinator passive users active users developers core developers 
hypothesized oss development team structure 
table 
examples projects included sample 
project name short description curl command line tool library client side url transfers 
fink source retrieving package manager mac os gtk instant messaging client 
print top quality printer drivers posix systems 
complete world wide web indexing searching system jedit powerful text editor 
re implementation motif kernel level implementation protocol suite 
handles basic administration mysql www play role playing games real time internet php web email reader 
tcl tool command language 
example sourceforge bug report followup showing coding interactions sourceforge net tracker index php func detail aid group id 
plot interactions project bug report data created 

centralization plot project bug report data created 
table 
centralization scores project bug report data 
type interaction data raw counts treatment interactions dropped missing data sender uniquely recoded std 
dev mean 
histogram centralization scores projects 
data dropping interactions 
table 
correlation centralization measures centralization project size oe oe ln ln project outdegree dropping oe outdegree interaction counts dropping outdegree unique oe outdegree interaction counts unique log number individuals posting ln dropping ln unique 
correlations significant 
highlighting refers discussion text 

plot interactions curl highly centralized project centralization 

plot interactions decentralized project centralization 
project centralization number posters 
plot project centralization vs project size measured number posters extreme values labelled project 

outdegree centralization data dropping interactions 
log scale dropping interactions 
curl 
