space efficient hash tables worst case constant access time dimitris pagh 
peter sanders paul spirakis 
max planck institut fur informatik saarbrucken germany 
sanders mpi sb mpg de university copenhagen denmark 
pagh itu dk computer technology institute patras greece 
spirakis cti gr 
generalize cuckoo hashing ary cuckoo hashing show yields simple hash table data structure stores elements ffl memory cells constant ffl 
assuming uniform hashing accessing deleting table entries takes ln ffl probes expected amortized insertion time constant 
dictionary worst case constant access time expected constant update time works ffl space supports satellite information 
experiments indicate choices suffice ffl 
describe variants data structure allow hash functions constant time 
efficiency programs crucially depends hash table data structures support constant expected access time 
know hash table data structures support worst case constant access time quite time 
worst case guarantees relevant real time systems parallel algorithms delays single processor wait 
particularly fast simple hash table worst case constant access time cuckoo hashing element mapped tables size ffl hash functions ffl 
factor space expansion sufficient ensure high probability element stored 
main trick insertion moves elements different table entries room new element 
best knowledge previously known hash tables worst case constant access time sublinear insertion time share drawback factor memory blowup 
contrast hash tables expected constant access time open addressing memory consumption ffl ffl stands arbitrary positive constant 
main contribution hash table data structure worst case constant access time memory consumption ffl access time ln ffl preliminary version appeared proceedings th annual symposium theoretical aspects computer science stacs lecture notes computer science 
partially supported dfg sa emerging technologies programme eu contract number ist alcom ft 
initiated author brics aarhus university denmark 
part done author 
sense optimal expected insertion time constant 
proposed algorithm straightforward generalization cuckoo hashing ary cuckoo hashing element stored position dictated hash functions 
analysis insertion performed breadth search bfs space possible ways room new element 
order ensure amount memory bookkeeping bfs negligible limit number nodes searched perform rehash bfs find way accommodating elements 
practical implementation random walk 
unfortunately analysis works original binary cuckoo hashing log wise independent hash functions breaks 
develop new approaches give analysis simple algorithm outlined case hash functions truly random 
observed dietzfelbinger similar results obtained family hash functions described evaluated constant time 
provide experimental evidence indicates ary cuckoo hashing better practice 
example achieve space utilization space utilization insertion requires memory probes average factor 
filter hashing alternative ary cuckoo hashing uses polynomial hash functions degree 
performance ary cuckoo hashing uses ln ffl probes access worst case 
novel feature ary cuckoo hashing random walk variant implemented experiments filter hashing hash tables having size fraction number elements hashed 
means high space utilization ensured possible location element table 
traditional hashing schemes large hash tables space utilization achieved having possible locations element 
related space efficient dictionaries 
dictionary data structure stores set elements associates piece information element 
element dictionary look set return associated information 
usually elements come universe bounded size 
universe size information theoretical lower bound number bits needed represent set elements associated information log em gamma theta gamma log 
roughly log bits say sorted list elements 
log large compared log words log bits close optimal 
number papers data structures storing sets near optimal space supporting efficient lookups elements operations 
cleary showed implement variant linear probing space ffl bits assumption truly random permutation key space available 
expected average time lookups insertions ffl ordinary linear probing 
space usage log log bits obtained static case 
data structures support associated information essentially optimal additional space 
works focused dictionaries associated information 
munro achieve space dictionary worst case constant lookup time amortized expected constant time insertions deletions 
space usage improved bits raman rao 
data structures hash tables clear extend support associated information 
fact raman rao mention extension goal research 
generalization cuckoo hashing uses hash table ffl entries log bits 
hash table trivial store associated information elements 
time analysis depends hash functions truly random 
practical hash functions space usage decreased ffl bits quotienting 
scheme seen improvement result cleary worst case lookup bounds having better dependence ffl average case bounds 
remains gap experimental results insertion time theoretical upper bound beat cleary 
open addressing schemes 
cuckoo hashing falls class open addressing schemes places keys hash table sequence hash functions 
worst case ln ffl bound lookup time matches average case bound classical open addressing schemes double hashing 
yao showed bound best possible open addressing schemes move elements table 
number hashing schemes move elements order improve remove dependence ffl average lookup time 
classical open addressing schemes elements retrieval cost omega log log log 
bounding worst case retrieval cost open addressing schemes investigated rivest gave polynomial time algorithm arranging keys minimize worst case lookup time 
bound shown expected worst case lookup time achieved 
rivest considered dynamic case proposed insertion algorithm shown expected constant time low load factors particular shown ffl 
matchings random graphs 
analysis uses ideas seemingly unrelated areas connected cuckoo hashing fact problems understood finding matchings kind random bipartite graphs 
proof space consumption low similar structure result hash functions suffice map elements disk blocks places disks disk gets dn de blocks 
proof details quite different 
particular derive analytic expression relation ffl similar calculations may help develop analytical relation explains values dn de dropped 
relation tabulated small values analysis insertion time uses expansion properties random bipartite graphs 
motwani uses expansion properties show algorithm hopcroft karp finds perfect matchings random bipartite graphs ln edges expected time log log log 
shows log log bound model random bipartite graphs nodes constrained degree 
analysis insertion understood analysis simple incremental algorithm finding perfect matchings random bipartite graph nodes left side constrained constant degree ffl nodes right side constraint degree 
feel natural model sparse graphs model applications asymmetry node sets unrealistic assume lower bound degree right node 
conditions get linear run time sparse graphs simple algorithm additional advantage allow incremental addition nodes 
main new ingredient analysis expansion properties prove shrinking properties nodes reached bfs 
aspect proof difficult case graphs weaker expansion properties dense regular model 
overview section introduce cuckoo hashing matching problem class random bipartite graphs 
section constitutes main part 
section prove ffl ln ffl truly random hash functions ary cuckoo hashing results bipartite graphs contain matching covering left vertices elements high probability henceforth whp 

section show somewhat larger values incremental algorithm augments shortest augmenting path takes ffl ln expected time element visits vertices finds augmenting path whp 
section complements theoretical analysis experiments justify practical efficiency ary cuckoo hashing 
filter hashing analyzed section 
show theta ln ffl polynomial hash functions degree ln ffl filter hashing stores elements gamma ffl memory cells whp 
directions research modification ary cuckoo hashing hash functions evaluated constant time discussed section 
preliminaries natural way define analyze ary cuckoo hashing filter hashing matchings random bipartite graphs 
elements thought left vertices memory cells right vertices bipartite graph 
edges determined hash functions 
edge connecting left vertex right vertex whp mean probability gamma 
indicates corresponding element stored corresponding memory cell 
mapping elements left vertices memory cells right vertices forms matching element stored cell matching perfect covers left vertices fig 

ternary cuckoo hashing 
having fixed perfect matching think directed graph edges nm directed left right edges directed right left fig 

right vertex outdegree 
set free vertices simply consists right vertices outgoing edges zero outdegree 
directed path unmatched left vertex augmenting path reverse edge directions path obtain new matching covers denote set left vertices denote set right vertices 
set left vertices denote set mates current matching set vertices gamma denote neighborhood gamma fv fu vg sg 
emphasize gamma refer neighborhood vertex set consider edges undirected 
analysis ary cuckoo hashing repeatedly upper bound binomial coefficients 
proposition 
integer integer gamma gammak proof 
completeness give simple proof communicated dietzfelbinger 

observe gamma gammak gamma gammaj gamma implies proposition 
ut ary cuckoo hashing ary cuckoo hashing consider elements stored ffl memory cells 
element stored cells chosen uniformly random independently replacement 
consequently resulting bipartite graph jlj jrj ffl left vertex exactly neighbors selected uniformly random independently replacement existence perfect matching start proving sufficiently large values bipartite graphs contain perfect matching whp 
lemma 
constant ffl integer ffl ln ffl bipartite graph contains perfect matching probability gamma gamma 
proof 
establish bound gamma probability exists set left vertices having jxj neighbors 
lemma follows hall theorem chapter states bipartite graph contains perfect matching jxj neighbors 
fixed integer probability exists set left vertices neighbors 
probability bipartite graph contain perfect matching bounded sum probabilities integers integer fix set left vertices set right vertices size probability includes neighbors ffl dk multiplying number different sets obtain ffl ffl dk probability exists pair left vertices single neighbor gamma 
sufficiently large constant 
gamma delta get upper bound 
gamma gamma gamma right hand side inequality non increasing function exceed gamma 
gamma 

proposition obtain bound probability 
gamma gamma ffl ffl gamma ffl gamma ffl ffl value quantity square brackets strictly smaller 
solving resulting inequality obtain lower bound ln gamma ln gamma ffl gamma ln ffl ffl gamma ln ffl simplify inequality observe 
ffl ln ln ffl 

fixed value ffl ffl gamma ln ffl ffl gamma ln ffl non decreasing function interval 
maximized achieving value ffl ln ffl ffl ln ffl need proposition 
completeness provide simple proof proposition appendix 
proposition 
ffl gamma ln gamma ln ffl ffl ln ffl ffl ln ffl consequently integer ffl ln ffl ffl ln ffl bipartite graph contains perfect matching probability gamma gamma 
brief calculation ln ffl ffl gamma ffl shows inequality satisfied ffl ln ffl 
ut directly applying inequality specific values ffl obtain ffl ffl ffl bipartite graph contains perfect matching whp 
experiments section indicate smaller values ffl possible 
show bound lemma essentially best possible 
lemma 

ffl ln ffl contain perfect matching whp 
proof 
think right vertices bins edges balls 
ball placed bin selected uniformly random independently 
exactly ffl bins dn balls 
expected number empty bins isolated right vertices approaches ffl gamma ffl goes infinity chapter 
fi positive constant 
larger suitable constant smaller ffl ln ffl fi ffl expected number isolated right vertices greater fi ffln 
furthermore events right vertex isolated negatively associated apply chernoff bound chapter show 
ffl ln ffl fi ffl number isolated right vertices greater ffln whp 
clearly bipartite graph ffln isolated right vertices contain perfect matching 
lemma obtained setting fi ffl 
ut insertion algorithm define analyze insertion algorithm ary cuckoo hashing assume left vertices bipartite graph arrive random choices edges arbitrary order algorithm incrementally maintains perfect matching perfect matching fixed left vertex arrives 
recall edges considered directed right left edges directed left right 
edges initially directed left right matched recall directed path set free vertices augmenting path insertion algorithm analyze augments current matching shortest directed path path equivalent breadth search bfs directed version implicitly represented hash functions storage table 
ensure space efficiency restricting number right vertices bfs visit 
avoid dependencies random choices newly arrived left vertex current matching restrict attention case left vertex deleted hash table re inserted remaining section devoted proof theorem 
theorem 
positive ffl integer ln ffl incremental algorithm augments shortest augmenting path takes ffl ln expected time left vertex element maintain perfect matching algorithm visits right vertices finds augmenting path whp 

techniques prove theorem holds ffl 
ease exposition restrict attention interesting case small ffl 
augmentation distance 
proof theorem measure distance vertex set free vertices accounting number left right edges free edges short equivalently number left vertices appearing shortest path respecting edge directions refer distance augmentation distance emphasize augmentation distance vertex depends current matching augmentation distance vertex essentially measures depth bfs starting reaches time 
new left vertex neighbor augmentation distance shortest augmenting path time space 
establish theorem bound number right vertices large augmentation distance 
outline 
proof theorem divided parts 
prove number right vertices augmentation distance grows exponentially whp half right vertices reached 
call expansion property 
prove remaining right vertices number right vertices augmentation distance greater decreases exponentially whp 
call shrinking property 
proofs expansion property shrinking property fact appropriate choice ary cuckoo hashing results bipartite graphs expanders whp 
put expansion property shrinking property show number right vertices encountered bfs augmenting path whp 
expected insertion time element constant 
restriction deletions easily overcome just marking deleted elements removing periodically rebuilding hash table new hash functions 
notation 
integer denote set right vertices augmentation distance denote set left vertices augmentation distance sets computed inductively starting set free vertices 
integer gamma expansion property 
prove chosen appropriately large set right vertices size interval ffln expands factor whp 
lemma 
implies number right vertices augmentation distance ffln long small number exceed ffl lemma 
lemma 
constant ffl ln ffl integer 
set right vertices ffln jy jy neighbors probability gamma gamma omega proof 
establish lemma proof similar proof lemma 
lemma 
constant ffl ffi positive constant exceeding gamma ffl ffl integer ffl ffi ffl ffi ffl ln gamma ffl ffl delta ln ffl set left vertices jxj gamma ffi ffl ffl gamma ffi neighbors probability gamma gamma omega proof 
number interval ffl ffi gamma ffi integer 
simplicity presentation loss generality assume ffl gamma integer 
probability bipartite graph contains set left vertices size gamma ffi ffl gamma neighbors bound probability graph satisfy lemma sum probabilities different values gamma ffi integer 
fixed value fix set left vertices size gamma ffi set right vertices size ffl gamma probability neighbors included gamma ffl gamma ffl delta gamma ffi multiplying number different sets obtain upper bound 
ffi ffl ffl gamma ffl gamma ffi proposition working proof lemma obtain lower bound 
gamma ffi ln gamma ffi ffi ln ffi ffl gamma ln ffl ffl gamma ln ffl gamma ffi ln ffl ffl gamma ffl ffi gamma ffl ffl right hand side inequality maximized ffl yielding lower bound 
gamma ffl ffi ln gamma ffi ffl ffi ffl ln ffi ffl ln ffl ffl ln ffl ffl gamma ffl ffi ln ffl right hand side inequality simplified observing ln ffi ffl ln ffl ffl 
addition ffi gamma ffl ffl gamma ffi ffl ffl ffi ln gamma ffi ffl ln ffl ffi 
ffl different values consider probability graph claimed property gamma nfi constant fi depending choice ut show bipartite graph satisfying lemma satisfies lemma 
reach contradiction assume ffl ffi set size ffi neighbors set left vertices included neighborhood consists gamma ffi vertices 
lemma ffl gamma neighbors implies vertices neighbors contradiction definition conclude proof lemma observe ffl take ffi 
fact ln ffl ffl gamma ffl requirement inequality seen satisfied ln ffl 
ut lemma concludes proof expansion property 
lemma 
bipartite graph satisfying lemma 
integer log ffl number right vertices augmentation distance ffln 
proof 
prove lemma induction recall denotes set right vertices augmentation distance bipartite graph satisfies lemma set right vertices ffln jy expands factor 
lemma holds jy jf ffln ffln right vertices included integer log ffl gamma jy ffln 
neighborhood includes ffln left vertices 
mates left vertices free vertices augmentation distance ffln right vertices augmentation distance greater jy ffln 
argument works long log ffl expansion argument works size larger ffl time 
ut shrinking property 
expansion property nearly half right vertices augmentation distance greater dlog ffl second thing show set left vertices jxj jxj neighbors whp 
lemma 
implies number right vertices augmentation distance greater gamma 
lemma 
lemma 
integer 
set right vertices jy ffl gamma ffl neighbors probability gamma gammad 
proof 
show lemma proof similar proof lemma 
lemma 
fl positive constant log fl log fl integer 
set left vertices jxj fl fl jxj neighbors probability gamma fl gammad proof 
fixed integer fl probability exists set left vertices size expand fl 
ffl fl fl ffl dk working similarly proof lemma bound fl gammad small values sufficiently large positive constant 
fl 
proposition obtain lower bound fl ln gamma ln gamma ffl gamma fl ln ffl ffl gamma fl ln ffl fl observe right hand side inequality maximized fl exceed log fl log fl 
ut observe fl inequality satisfied 
conclude proof lemma show graph satisfying lemma satisfies lemma 
reach contradiction assume integer set right vertices size ffl gamma gamma neighbors 
set left vertices included neighborhood size greater lemma neighbors implies vertices neighbors contradiction 
ut observe ffl ln ffl hypothesis lemma satisfied choice satisfying hypothesis theorem 
lemma 
bipartite graph satisfying lemma lemma dlog ffl integer number right vertices augmentation distance greater gamma proof 
prove lemma induction lemma know jy ffl number right vertices augmentation distance greater 
integer number right vertices augmentation distance greater gamma consequently ffl gamma gamma right vertices augmentation distance greater jy ffl gamma gamma lemma neighborhood includes gamma gamma left vertices 
mates left vertices free vertices augmentation distance jy ffl gamma gamma gamma right vertices augmentation distance greater ut bounding size bfs tree 
newly arrived left vertex random variable denoting number right vertices encountered shortest augmenting path starting bfs reaches free vertex 
clearly insertion algorithm add current matching time space 
assumption current matching sets depend random choices show exceed whp 
ii expectation exceed assume bipartite graph satisfies lemma lemma contains perfect matching covers addition assume rehash carried right vertices bfs tree 
neighbors augmentation distance augmenting path right vertices visited 
integer probability exceeds gamma jy ffl lemma gamma right vertices augmentation distance greater gamma jy ffl gamma fi constant interval 
ipr gammafi gamma gammafi log gamma gammafi log fi conclude probability right vertices encountered augmenting path exceed gamma addition bipartite graph violates lemma lemma probability gamma contain perfect matching probability gamma 
expectation pr ipr neighbor gamma jy ffl probes space utilization fig 

scaled average number memory probes insertion ary cuckoo hash table entries function memory utilization ffl gamma 
starting delta random element removed new random element inserted 
repeated times independent runs 
hash functions full lookup tables filled random elements generated 
curves insertion fails probes 
inequality follows lemma 
sum bounded consider contribution low probability events expectation right vertices encountered augmenting path probability gamma bipartite graph violates lemma lemma probability gamma contain perfect matching probability gamma 
events causes rehash cost bounded 
low probability events negligible contribution expectation bounded choose theta ln ffl 
theta ln ffl conclude expectation ffl ln ut experiments theoretical analysis tight respect constant factors lower order terms relation worst case number probes waste space ffln 
analysis accurate respect insertion time 
quantities important judge practical ary cuckoo hashing designed experiment partially fill gap 
decided focus variant looks promising practice separate tables size ffl necessary reevaluate hash function led old position element moved 
insertion uses random walk element allocated randomly picks choices space occupied 
case displaced element randomly picks gamma remaining choices free table entry 
random walk insertion saves bookkeeping needed insertion bfs 
shows average number probes needed insertion function space utilization ffl 
ffl lower bound axis scaled ffl 
see schemes close insertion time ffl small utilization grow quickly approach capacity threshold depends increasing strictly decreases expected insertion time get clear trade worst case access time guarantees average insertion time 
maximum space utilization approaches quickly incremented 
observed thresholds 
filter hashing section describe analyze filter hashing simple hashing scheme worst case constant lookup time combination essentially hashing scheme improve space efficiency 
precisely filter hashing space efficiently stores elements set 
remaining elements stored space efficient hashing scheme 
explain filter hashing switch terminology bipartite graphs 
parameter fl fl split right vertices theta ln fl parts called layers total size left vertex associated exactly neighbor layers hash functions described 
newly arrived vertex matched unmatched neighbor layer smallest possible number 
name filter hashing comes analogy particle hash table element left vertex passing cascade filters layers 
neighbors layers matched vertex stored left hashing scheme handling overflowing vertices 
show happens fln elements whp 
hashing scheme overflowing vertices uses linear space total space usage ffl cells achieved fl omega ffl 
example dictionary handle overflowing vertices space overflowing vertices fln insertion lookup overflowing vertex takes constant time whp 
scheme exhibits relatively high constant factors time space effect space average time combined hashing scheme small choose constant fl small 
hashing scheme similar filter hashing log log layers proposed analyzed load factor 
stronger tools hash functions get analysis load factors arbitrarily close 
happens filtering scheme seen letting left vertices decide mates multi level balls bins scenario number unmatched left vertices small 
scheme gives trade number layers fraction fl overflowing vertices 
proceed describe precisely bipartite graph scheme jlj jrj partition layers sigma ln fl upsilon jr ln fl gamma ln fl gamma suppose mg integer equivalently way mapping vertex unique integer mg 
edges connecting vertex function values hash functions ij mod mod jr fl mn prime number ij randomly independently chosen gamma 
larger suitable constant depending total size jr layers range ln fl gamma ln fl gamma gamma ln fl gamma ln fl gamma gamma gamma ln fl gamma theta gamma fl description filter hashing straightforward worst case insertion time worst case access time prove fln left vertices overflow whp average time successful search ln fl 
results implied lemma 
lemma 
constant fl fl sigma ln fl upsilon larger suitable constant number left vertices matched vertices gamma fl jr probability gamma fl log log fl proof 
tools prove layers fraction gamma fl vertices matched left vertices probability gamma fl log log fl 
ln fl layers probability happens layers gamma fl log log fl 
number left vertices matched vertex layers gamma gamma gamma jr inequalities gamma ln fl gamma gamma ln fl gamma consider random variable free denoting number empty bins balls bins scenario balls jr bins positions balls hash function form 
pessimistic estimate number free vertices layer hashing scheme lower bound number vertices matched tools analyzing scenario show free fl jr probability gamma 
denote number balls bin number jr gamma delta number colliding sets balls 
inequality proposition free gamma load factor balls bins scenario ff jr ln fl 
mn get gamma ff gamma gamma ff gamma get upper bound free gamma ff gamma gammaff ff fl jr second inequality uses ff sufficiently large 
shown var ff 
chebychev inequality bound probability free exceeds fl jr pr free fl jr pr jc gamma fl jr var fl jr fl log log fl ut lemma implies fl right side vertices part probability gamma fl vertices layers matched 
probability gamma fln vertices overflow 
expected average time successful search bounded follows 
number elements search time jr probability random left vertex overflows fl expected total search time elements bounded fl nd jr ji fl ln fl ln fl gamma ln fl ln fl expected time perform rehash case elements overflow ln fl 
probability happens particular insertion fl log log fl expected cost rehashing insertion fl log log fl caused total number elements including marked deleted exceeding cost ln fl fl insertion deletion negligible 
open problems practical point view ary cuckoo hashing advantageous approach space efficient hash tables worst case constant access time 
worst case access time average insertion time 
average access time quite small 
wide spectrum algorithms tried maintaining optimal placement elements minimum weight bipartite matching simple fast heuristics 
theoretically main open questions 
concerns tight high probability bounds insertion time 
second question analysis ary cuckoo hashing works practical constant time evaluable hash functions 
dietzfelbinger suggested interesting solution simple hash function polynomials constant degree partition elements log disjoint groups size ffl log 
space linear size group dn log invested obtain emulation uniform hash functions group 
achieved constructions pagh dietzfelbinger 
group stored table ffl log entries 
main trick hash functions groups total space needed hash functions remains sublinear 
filter hashing inferior practice ary cuckoo hashing specialized applications 
example lossy hash table worst case constant insertion time 
sense real time applications delays acceptable losing entries tolerable gathering statistic information system 
context theoretically practically interesting give performance guarantees simpler hash functions 

brent 
reducing retrieval time scatter storage techniques 
communications acm 

broder karlin 
multilevel adaptive hashing 
proceedings st annual acm siam symposium discrete algorithms soda pages 
acm press 

munro 
membership constant time minimum space 
siam comput 

cleary 
compact hash tables bidirectional linear probing 
ieee transactions computers september 


graph theory 
springer verlag new york nd edition 

dietzfelbinger 
personal communication 

dietzfelbinger gil matias pippenger 
polynomial hash functions reliable extended 
proceedings th international colloquium automata languages programming icalp volume lecture notes computer science pages 
springer verlag 

dietzfelbinger hagerup 
simple minimal perfect hashing space 
proceedings th european symposium algorithms esa volume lecture notes computer science pages 
springer verlag 

dietzfelbinger karlin mehlhorn meyer auf der heide rohnert tarjan 
dynamic perfect hashing upper lower bounds 
siam comput 

dietzfelbinger 
random graphs simple hash functions 
proceedings th annual acm symposium theory computing stoc 

ranjan 
balls bins study negative dependence 
rsa random structures algorithms 

fredman koml os szemer edi 
storing sparse table worst case access time 
assoc 
comput 
mach 

gonnet munro 
efficient ordering hash tables 
siam comput 

hopcroft karp 
algorithm maximum matchings bipartite graphs 
siam journal computing 

kruskal rudolph snir 
complexity theory efficient parallel algorithms 
theoretical computer science 


fast lookup hash tables direct rehashing 
computer journal may 


scatter storage techniques uniform viewpoint method reducing retrieval times 
computer journal may 

matsumoto nishimura 
mersenne twister dimensionally uniform pseudo random number generator 
acm transactions modeling computer simulation 
www math keio ac jp emt html 

motwani raghavan 
randomized algorithms 
cambridge university press 

motwani 
average case analysis algorithms matchings related problems 
journal acm november 

pagh 
uniform hashing constant time linear space 
proceedings th annual acm symposium theory computing stoc 

pagh 
low redundancy static dictionaries constant query time 
siam comput 

pagh flemming 
cuckoo hashing 
proceedings th european symposium algorithms esa volume lecture notes computer science pages 
springer verlag 

raman rao 
dynamic dictionaries trees near minimum space 
manuscript 

rivest 
optimal arrangement keys hash table 
assoc 
comput 
mach 

sanders 
asynchronous scheduling redundant disk arrays 
th acm symposium parallel algorithms architectures pages 

sanders 
reconciling simplicity realism parallel disk models 
th acm siam symposium discrete algorithms pages washington dc 

sanders korst 
fast concurrent access parallel disks 
th acm siam symposium discrete algorithms pages 


yao 
uniform hashing optimal 
assoc 
comput 
mach 
appendix proof proposition cases consider 
distinguish case 
ffl gamma ln gamma ln ffl gamma ln gamma ln ffl ln gamma ffl ffl delta ln ffl case 
distinguish ffl ffl case 
ffl observe ln ffl ln ffl ffl 
claim follows gamma ln gamma ln ffl ln ffl ffl case 
ffl 
consider cases case gamma ffl 
gamma ffl function ln non decreasing interval conclude gamma ln gamma ffl ln ffl 
addition ln ffl ln ffl claim follows 
case ii 
gamma ffl 
function gamma ln gamma ln non decreasing obtain gamma ln gamma ln ffl gamma ln gamma ln ffl ln ffl gamma ffl ln gammaffl ffl ln ffl ffl ln ffl inequality holds ffl 
ut 
