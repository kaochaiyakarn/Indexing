context sensitive slicing concurrent programs program slicing technique identify statements may influence computations statements 
precise slicing shown undecidable concurrent programs 
presents context sensitive approach slice concurrent programs accurately 
extends known structures control flow graph interprocedural program dependence graph concurrent programs interference 
new technique require serialization inlining 
categories subject descriptors software engineering testing debugging software engineering distribution maintenance enhancement restructuring reverse engineering reengineering keywords program analysis program slicing context sensitive concurrency parallelism general terms algorithms performance 
today small programs parallelism languages ada java language features concurrent execution builtin 
analysis programs statements may explicitly executed concurrently new 
static analysis programs complicated execution order parallel executed statements dynamic 
testing debugging concurrent programs increased complexity may produce different behavior input 
nondeterministic behavior program hard understand finding harmful nondeterministic behavior harder 
supporting tools required 
unfortunately tools sequential programs applicable concurrent programs cope permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
esec fse september helsinki finland 
copyright acm 
jens krinke universit passau passau germany krinke fmi uni passau de entry read write write read write write program dependence graph nondeterministic execution order statements 
simple way circumvent problems simulate programs sequentialized serialized programs 
programs possible execution order statements modeled path statements executed sequentially 
may lead exponential code explosion unacceptable analysis 
special representations parallel programs developed 
new notation concurrent programs introduced extending control flow graph cfg program dependence graph pdg threaded counterparts 
graphs precise slicing algorithm shown basic model concurrency extended allow synchronization communication 
rest structured follows section gives example slicing sequential concurrent programs 
section defines slicing concurrent programs formally presents high precision approach simple model concurrency extended section 
related discussed section followed 

slicing slice extracts statements program potentially influence specific statement interest slicing criterion 
originally slicing defined weiser approach compute slices iterative data flow analysis 
main approach slicing uses reachability analysis program dependence graphs 
program dependence graphs mainly consist nodes representing statements program control data dependence edges control dependence statement nodes exists statement controls execution 
acm 
author version 
posted permission acm personal 
redistribution 
definitive version published esec fse 
read read read print procedure program data dependence statement nodes exists definition variable statement reach usage variable statement 
example pdg shown control dependence drawn dashed lines data dependence solid ones 
weiser program slicing debugging nowadays slicing various fields base technology testing differencing reengineering model checking 
broad overview slicing techniques applications 
slicing sequential programs example slicing procedures shows example want slice program procedures 
compute slice just follow shown dependences backwards 
example data dependences slice includes assignment read statement forb 
examples ignore control dependence just focus data dependence simplicity presentation 
slice backwards statement 
slicing procedures trivial just find reachable nodes pdg 
underlying assumption paths realizable 
means possible execution program exists path executes statements order 
proc read read print proc trace program procedures example slicing procedures read read print extended example procedures added 
ignore calling context just traversal data dependences add read statement slice wrong statement clearly influence statement 
statement just css avg context insensitive vs sensitive slicing size time influence call killed second call procedure assignment 
analysis called context insensitive calling context ignored 
paths considered realizable obey calling context 
slicing contextsensitive realizable paths traversed 
context sensitive slicing solvable efficiently generate summary edges call sites summary edges represent transitive dependences called procedures call sites 
slicing summary edges traversal consider edges entering leaving procedures separate passes 
computed slice context sensitive despite calling context handled explicitly 
context sensitive vs context insensitive slicing evaluate effect context sensitivity precision implemented infrastructure compute pdgs ansi programs 
infrastructure implemented evaluated various slicing algorithms 
complete evaluation compare context sensitive slicing algorithm uses summary edges context insensitive :10.1.1.20.2969
context insensitive slicing algorithm just simple graph traversal linear complexity 
context sensitive algorithm little bit complex needs preprocessing stage cubic complexity compute summary edges algorithm linear complexity pass graph traversal 
test data programs limited size program slices computed depending size program 
evaluation shows context insensitive slicing imprecise comparison context sensitive slicing css 
lighter bars show larger slices computed context insensitive slicing average test program 
darker bars show longer takes compute context insensitive slices ignoring time needed compute summary edges 
average avg computed contextinsensitive slices larger context sensitive slices 
shows context sensitive slicing highly preferable loss precision acceptable 
surprising result simple context insensitive slicing slower complex context sensitive slicing average context insensitive slicing needs time context sensitive slicing 
reason context sensitive algorithm visit fewer nodes traversal due higher precision 
thread read read print thread trace read read print program threads slicing concurrent programs example slicing concurrent programs trace read read print lets return example move concurrent programs 
example threads execute parallel 
concurrent programs share variables type dependence arises interference 
interference occurs variable defined thread parallel executing thread 
example interference dependences due definition usage variable due accesses variable simple traversal interference slicing slice imprecise interference may lead unrealizable paths 
example simple traversal include read statement slice 
possible execution read statement influence assignment matching execution require time travel assignment executed read statement 
path multiple threads realizable contains valid execution chronology 
call slicing state sensitive traversal pdg considers realizable paths 
point slicing consider reachable states program 
realizable paths considered slice precise possible 
slicing may imprecise reason imprecision parallel executing threads may kill definitions threads 
example statement reachable statement realizable path 
possible execution read statement influence print statement assuming statements atomic 
read statement reaches usage thread killed statement immediately killed reach usage 
procedure concurrent programs find algorithm obeys killing computes precise slices 
impossible concurrent programs procedures ller shown precise context sensitive slicing concurrent programs undecidable general 
reduction counter state machines 
important result proven ramalingam 
showed context sensitive analysis concurrent programs procedures synchronization undecidable general 
applies slicing data flow analysis 
conservative approximations analyze concurrent programs 
synchronization ignored 
case results correct imprecise unrealizable paths allowed 
leads additional interference depen thread read read read print thread trace read read read print program threads trace read read read print dences happen real executions 
precise may happen parallel mhp information 
interference dependences probably removed making slicing little bit precise 
simple approximation state insensitive analysis allowing time travel 
state insensitive slicing summary edges context sensitive 
summary edges ignore effects parallel executing threads 
contextinsensitive slicing accept lower precision inline called procedures 
precise slicing summary edges able provide precise slicing summary edges developed new slicing algorithm capturing calling context call strings :10.1.1.20.2969
call strings seen representation virtual machine call stack 
call strings seen virtual inlining 
frequently context sensitive program analysis pointer analysis 
presence recursion infinite set possible call strings analysis infeasible 
call strings finite fold cycles pdgs replace single node 
effect precision node cycle contained slice nodes contained 
side effect size reduction program dependence graphs average nodes removed making slicing faster 
graph acyclic folding finite call strings generated 
call strings propagated edges pdg edges connect procedures call string check call returns right call site 
call strings propagated unrealizable paths 
implemented call string slicing algorithm sequential ansi compared slicing algorithms 
result unexpected approach suffers combinatorial explosion call strings just call string data flow analysis algorithms 
usable length call strings limited elements length limitation call strings decreases precision 
interprocedural slicing concurrent programs rest section main idea approach slice concurrent programs 
formally section 
basic idea adaption call string approach concurrent programs 
assume concurrent program consists separate threads share code communicate shared variables 
context captured call string thread 
context tuple call strings propagated edges pdgs 
traversal intraprocedural edges change call string enclosing thread 
context simply propagated 
traversal interprocedural edges call string enclosing thread check call returns right call site 
may generate single new context 
traversal interference edges complicated call string newly reached thread check reached node reachable node old saved call string 
check call string reached node possibly 
generate set new call strings propagated 
avoid combinatorial explosion call strings pursue combined approach summary edges compute slice threads 
additionally generate propagate call strings interference edges slice crosses threads 
approach fewer contexts propagated length limitation increased higher precision 
outlines idea approach 
section presents detailed description 

context sensitive approach presentation purposes simple model concurrency 
concurrent program assumed consist set threads 
threads may executed parallel different processors interleaved single processor 
threads started immediately program start program exits threads finished 
threads share code communication done global variables statement assumed atomic synchronized properly 
thread consists series procedures may call may call procedure different thread 
procedures thread main procedure called runtime system corresponding thread started 
corresponding thread stops main procedure returns 
synchronization ignored discussed 
individual procedures program represented control flow graphs np ep ne procedure node set np edge set ep 
statements predicates represented nodes np control flow statements represented control flow edges ep written special nodes ns ne distinguished start node ns exit node ne represent procedure variables referenced node denoted ref variables defined assigned denoted def 
interprocedural control flow graph icfg directed graph ns ne np ec ep 
calls represented call return edges ec call edge ec going call node np start node ns called procedure return edge ec going exit node ne called procedure back immediate successor call node np 
nodes ns ne start exit node main procedure 
threaded interprocedural cfg thread represented interprocedural control flow graph ns ne 
threads independent edges exist control flow graphs different threads 
threaded interprocedural cfg rest node statement interchangeable bijectively mapped 
common variants immediate successor call node explicitly defined return node 
second return edge going exit node call node 
simply union different threads assumption exists returns set threads may execute parallel thread simple model trivial rely complex models possible 
function returns node enclosing thread 
function statically decidable generated parsing constructing 
main problem context sensitivity handled explicit context virtual inlining 
assumed execution state thread encoded context form possibly infinite call string 
call string represented stack nodes topmost node represents currently executing statement 
define context reaches context definition 
execution state thread context nk representing execution stack nodes ni topmost node context belongs current node nodes nk represent call nodes 
pop function defined nk 

context directly reaches context iff alternatives holds 
edge exists corresponding edge cfg procedure exists 
call edge exists corresponding call edge exists 
return edge exists corresponding return edge exists returns immediate successor call node 
context reaches context iff series contexts cn exists cn nci ci set possible contexts icfg gt ct 
note implies existence interprocedural realizable path 
disjunct 
threaded interprocedural witness defined terms contexts parallel execution relation symmetric holds 
note relation reflexive transitive 
definition 
sequence ck contexts execution stacks threaded interprocedural witness iff ci ci basically means contexts thread reachable predecessors execute parallel 
intuitively threaded interprocedural witness interpreted sequence contexts form valid execution chronology 
having threaded witness ck context decided ck threaded witness checking threaded witness properties observation prepending 
sequence ck threaded interprocedural witness 
ck threaded interprocedural witness iff ci ci follows definition 
definition 
ck threaded interprocedural witness thread 
defined ci ci result basically context witness relevant execution thread context exists 
theorem simplified prepending 
sequence ck threaded interprocedural witness 
sequence ck threaded interprocedural witness iff proof 
proof contradiction 
assume witnesses ci ci definition follows ci 
altogether ci ci contradiction observation threaded witnesses 
second assume witness 
hold threaded witness ci assume holds 
witness observation follows ci ci contradicts theorem holds 
having threaded witness ck edge decided ck threaded witness checking threaded witness properties theorem prepending edge 
ck threaded interprocedural witness 
edge exists ck threaded interprocedural witness 
proof 
possibilities exist traditional control flow call return edges 

follows 
observation ci ci ci ci ci ci ci ci observation 
concept threaded interprocedural witnesses needed define slices concurrent interprocedural programs threaded interprocedural pdg 
threaded interprocedural pdg threaded programs special representation control flow graph need special representation program dependence graph enable accurate slicing 
extensions icfg influence domination control dependence 
data dependence traditional cfgs reaching definitions 
inadequate reaching definitions include definitions parallel executing threads 
slicing purposes desirable separate reaching definitions parallel threads data dependence non parallel threads computable standard techniques sequential programs 
interference dependence variable defined thread referenced parallel executing thread interference occurs represented explicitly 
definition 
node called interference dependent 
variable def ref 
may potentially executed parallel 
dependences introduced interference handled normal data dependence normal dependence transitive transitivity data control dependence results definitions sequential path dependent nodes demanded 
composition paths cfg results path 
interference dependence transitive statement interference dependent statement interference dependent dependent iff possible execution statements executed sequence statements threaded witness 
control data dependence computed different threads assuming thread independent 
results set non connected interprocedural program dependence graphs thread 
step compute interference dependence threads 
variable defined thread referenced parallel executing thread interference dependence edge generated corresponding nodes 
threaded interprocedural pdg union thread connected interference dependence edges 
control flow call return edges icfg necessary algorithm 
usual call edges distinguished control flow call edges 
control flow edges denoted dependence edges 
different types dependence edges distinguished label dd data dependence edge dd 
interference dependence edge id inserted variable defined referenced holds 
interference computed precisely refined 
definition 
path nk threaded interprocedural realizable path iff 
path contains edge control flow graph control flow edges control flow call return edges dk nk 
sub path interference edge interprocedural realizable path containing dm id ni nj interprocedural realizable 
threaded interprocedural witness exists corresponds path ck ck node reachable threaded interprocedural realizable path denoted slicing pdg sequential programs simple graph reachability problem control data dependence transitive 
interference dependence transitive definition slice pdgs valid standard algorithms adequate 
slicing defined terms threaded interprocedural realizable paths definition 
backward slice node consists nodes depends transitively threaded interprocedural realizable path definition 
slice context consists contexts depends transitively threaded interprocedural realizable path additional constraint threaded interprocedural witness definition stays slice restricted 
definitions threaded interprocedural paths slices computable set possible contexts infinite recursion exists analyzed program 
section show way set possible contexts finite slices computable 
classical definition slice subset program change behavior respect criterion program correct slice 
interference modeled normal data dependence resulting slices correct imprecise 
slicing reachability amount recursive calls irrelevant cycles icfg folded single node representing strongly connected region 
sources cycles 
loops program cause cycles intraprocedural part cfg stacking influence amount possible contexts 

recursive calls cause cycles call return edges 
cycles replaced single node reachability realizable interprocedurally call return edges matched correctly 
cycles replaced pass approach keep matching call return edges intact 
pass finds folds strongly connected components consisting control flow call edges ignores return edges 
second pass finds folds cycles resulting graph consisting control flow return edges ignoring call edges 
replacement generates function maps nodes original icfg ns ne new graph ns ne dk di call return nk di call return dk ni interprocedural realizable path resulting graph corresponding realizable path original graph 
due unrealizable matchings call return edges cycles graph 
newly created graph set contexts reaches relation contexts redefined execution state ct thread stack nk nodes ni topmost node 
pop function defined nk 
definition 
context ct reaches directly context ct iff alternatives holds 
edge exists corresponding edge cfg procedure exists 
call edge exists corresponding call edge exists 
return edge exists corresponding return edge exists leading return node matches call node 
context reaches context iff series contexts cn exists cn nci ci set possible contexts icfg gt ct 
definition ct finite traversing call edges stack call nodes inside recursive cycles 
context nk reaches context ml ct terms definition iff nk reaches ml terms definition ct nk nk ml ml observation definition definitions theorems threaded interprocedural witnesses 
decidable computable path threaded interprocedural realizable 
slices computed definition denoted 
naive implementation enumerate possible paths slicing criterion node check threaded interprocedural realizable paths 
way expensive various approaches combined efficient approach slicing shown algorithm 
extraction ith element ci tuple cn denoted 
substitution ith element ci tuple cn value denoted 
basic idea coding possible execution states threads tuples ci contexts 
value ci represents possible reach context ci thread value restrict state execution 
keep track context ci thread left interference edge 
interference edge followed back thread node reachability contexts checked 
assures paths interference edges threaded witnesses 
reason control flow edges kept 
reachability computed checking threaded witness properties simplified prepending theorem allows checking reached context thread element threaded witness relevant thread 
algorithm keeps worklist pairs contexts state tuples examined 
computation slice inside thread shown algorithm edge reaching top node current context examined handled dependent type 
new pair consisting new context modified state tuple inserted worklist 
theorem done checking threaded witness property 
interference edges ignored computing handled explicitly algorithm 
interference dependence edge may considered old context relevant source node thread reachable context source node examined paths threaded witnesses 
new pair updated state tuple inserted worklist 
resulting slice set nodes constructed elements inserted pairs 
algorithm contains bottlenecks eased computation ct 
idea subsuming call strings build subsuming contexts subsuming contexts ct just contains element subsumes contexts nk ct 
third constraint definition alternative return edge exists constraint definition holds algorithm slicing algorithm input slicing criterion output slice set nodes ct function returns set possible contexts node gt 
initialize worklist initial state tuple ne thread node ct mark contents worklist repeat remove element compute slice gt 
compute set node contexts incoming interference dependence edges id foreach foreach edge id current thread reached thread compute valid contexts reached thread ct fill worklist foreach return 

return edge exists returns node matching automatically 
particular traversal return edge context leads context 
second bottleneck computation slice 
section showed computation explicit context may suffer combinatorial explosion 
computation restricted summary edges generated efficient slicing 
computing expensive slice traditional slice summary edges computed 
slice nodes identified incoming interference dependence edge 
nodes chop computed node original slicing criterion 
chop truncated non level computed efficiently 
nodes chop expensive slice computed 
efficient far smaller set nodes visited 
algorithm modifications algorithm implementing improvement shown 
algorithm improved slicing algorithm foreach generate summary edges transform gt sdg repeat remove element 
nc nc compute slice nc sdg gt 
id nodes slice incoming interference dep 
edges 
foreach compute truncated non level chop tn compute slice nodes tn 
foreach foreach incoming interference dep 
edge id current thread reached thread return 
extensions simplicity additional features threaded programs looked far 
models parallel execution include methods synchronization 
methods synchronized blocks send receive communication discussed including look models concurrency 
synchronized blocks synchronized blocks blocks statements executed atomically interference arise inside block 
example instance monitors 
synchronized 
example interference happen variables synchronized block executing usage line data dependent line 
definitions line line interfere usage definition variable threads 
possibility ignore synchronization statement treat synchronized blocks normal blocks 
conservative approximation add unrealizable interference 
precise solution compute set definitions reaching synchronized block set usages reaching entry 
definition 
node interference dependent node 
variable def ref 
embedded synchronized block definition reaches exit synchronized block 
embedded synchronized block usage reaches entry synchronized block 
may potentially executed parallel synchronized blocks potentially execute parallel synchronization 
improve precision interference dependence edges mhp information 
communication send receive threads exchange information send receive communication execution receiving thread may block sending thread sent information 
effects control data dependence 
exchange information creates data dependence sending receiving statement 
distinguish normal data dependence dependence may called communication dependence 
order omit time travel communication dependence treated interference dependence slicing 

execution receive may blocked thread sends data computation complex 
conservative approximation ignore blocking function return imprecise superset realizable relations 

receiving statement may block successors seen control dependent sending statement 
control dependence computed simply inserting communication dependence control flow graph treat control flow edge 
models concurrency simple model concurrency similar ada concurrency mechanism synchronization 
model ada style rendezvous send receive style communication 
allow code sharing threads duplication shared code sufficient 
thread instance shared code 
synchronization extensions represent concurrency model different threads allowed started stopped threads 
similar concurrency model java 
java threads generated dynamically represented simple concurrency model 
data flow analysis needed compute conservative approximation set possible threads 
static set represented simple concurrency model synchronization extensions enabling precise slicing concurrent java programs 
send receive style synchronization simulate cobegin coend parallelism model branches cobegin coend statement transformed single threads 
cobegin synchronization statements start newly created threads introduced coend synchronization statements introduced wait newly created threads finished 
requires modified function earlier trivial definition exploited proof theorems weakened 

related variations program dependence graph threaded programs parallel program graphs 
approaches static dynamic slicing threaded programs dependence graphs 
dynamic slicing threaded concurrent programs approached different authors surveyed 
probably approach static slicing threaded programs cheng 
introduced dependences specialized previously dependences 
needed variant pdg program dependence net pdn 
selection dependence special kind control dependence synchronization dependence basically control dependence resulting previously communication dependence 
cheng communication dependence combination data dependence communication dependence 
pdn vice versa graphs similar number nodes edges 
cheng defines slices simply graph reachability 
resulting slices precise take account dependences parallel executed statements transitive 
integration technique slicing threaded programs slicing threaded object oriented programs problem 
publication previous slicing concurrent programs precise static slicing done improves earlier version different approach dependence graphs 
series works static slicing concurrent programs treat interference transitive accept imprecision semantics simple multi threaded language contains synchronization statements similar java virtual machine 
statements introduce define additional types dependence divergence dependence synchronization dependence ready dependence 
applies cheng approach slice promela model checking purposes 
data flow analysis frameworks exist multi threaded programs uses cobegin coend model parallelism 
seidl presents framework problems strong copy constant propagation ordinary liveness variables concurrent programs 
proves problems complexity sequential parallel cases 
slicing harder problem reaching definitions 
proofs lower bounds 
show precise slicing concurrent programs undecidable interprocedural case 

previous approaches known author slice concurrent programs precisely rely inlining called procedures 
approach able slice concurrent recursive programs accurately 
approach precise threaded interprocedural realizable paths 
undecidability result apply simple model contain synchronization 
approach optimal terms undecidability results apply model possible thread kills definition different thread 
approach ignored killing 
explore precision lost approach done experiment modified underlying data flow analysis sequential ansi ignore killing 
definition killed definition 
adds data dependences pdg 
results quite surprising average generated slices larger 
result argue ignoring killing effects parallel executing threads small influence precision 
silvia breu st christian hammer provided valuable comments earlier version 

chen xu 
slicing concurrent java programs 
acm sigplan notices 
chen xu zhao yang 
static dependency analysis concurrent ada programs 
th ada europe international conference reliable software technologies pages 
cheng 
slicing concurrent programs 
automated algorithmic debugging st international workshop pages 
cheng 
dependence analysis parallel distributed programs applications 
international conference advances parallel distributed computing 

choi miller netzer 
techniques debugging parallel programs analysis 
acm trans 
prog 
lang 
syst 
duesterwald gupta soffa 
distributed slicing partial re execution distributed programs 
th workshop languages compilers parallel computing pages 
dwyer corbett hatcliff sokolowski zheng 
slicing multi threaded java programs case study 
technical report ksu cis tr department computing information sciences kansas state university 
ferrante ottenstein warren 
program dependence graph optimization 
acm trans 
prog 
lang 
syst 
mall 
dynamic slicing concurrent programs 
high performance computing th international conference pages 
hatcliff corbett dwyer sokolowski zheng 
formal study slicing multi threaded programs jvm concurrency primitives 
static analysis symposium pages 
horwitz reps binkley 
interprocedural slicing dependence graphs 
acm trans 
prog 
lang 
syst 
kamkar 
dynamic slicing distributed programs 
international conference software maintenance pages 
knoop steffen 
parallelism free efficient optimal bitvector analyses parallel programs 
acm trans 
prog 
lang 
syst 
korel ferguson 
dynamic slicing distributed programs 
applied mathematics computer science journal 
krinke 
static slicing threaded programs 
proc 
acm sigplan workshop program analysis software tools engineering paste pages 
acm press 
acm sigplan notices 
krinke :10.1.1.20.2969
evaluating context sensitive slicing chopping 
international conference software maintenance pages 
mcdowell helmbold 
debugging concurrent programs 
acm computing surveys 
miller 
choi 
mechanism efficient debugging parallel programs 
acm sigplan conference programming language design implementation pages 
teitelbaum 
slicing promela applications model checking 
proceedings th international spin workshop 
ller seidl 
optimal slicing parallel programs 
stoc th acm symposium theory computing pages 
ramesh 
slicing concurrent programs 
international conference software testing analysis issta pages 
avrunin 
conservative data flow algorithm detecting pairs statements may happen parallel 
proceedings th international symposium foundations software engineering pages 
avrunin clarke 
efficient algorithm computing mhp information concurrent java programs 
nierstrasz editors th acm sigsoft symposium foundations software engineering volume lncs pages 
springer 
ramalingam 
context sensitive synchronization sensitive analysis undecidable 
acm trans 
prog 
lang 
syst 
reps 
precise interprocedural chopping 
proceedings rd acm symposium foundations software engineering pages 
sarkar simons 
parallel program graphs classification 
proc 
th workshop languages compilers parallel computing pages 
seidl steffen 
constraint inter procedural analysis parallel programs 
proceedings esop th european symposium programming volume lncs 
sharir pnueli 
approaches interprocedural data flow analysis 
program flow analysis theory applications pages 
prentice hall 
tip 
survey program slicing techniques 
journal programming languages 
seki 
hypersequential programming 
ieee concurrency pages 
weiser 
program slices formal psychological practical investigations automatic program abstraction method 
phd thesis university michigan ann arbor 
weiser 
program slicing 
ieee trans 
softw 
eng 
zhao 
multithreaded dependence graphs concurrent java programs 
proceedings international symposium software engineering parallel distributed systems pages 
zhao 
slicing concurrent java programs 
proceedings th ieee international workshop program comprehension pages 
zhao cheng 
static slicing concurrent object oriented programs 
proceedings th ieee annual international computer software applications conference pages 
zhao cheng 
dependence representation concurrent object oriented software maintenance 
procedings nd euromicro conference software maintenance reengineering pages 
