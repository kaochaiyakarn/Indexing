stable fluids jos stam alias wavefront third ave suite seattle wa aw sgi com building animation tools fluid motions important challenging problem applications computer graphics 
physics models fluid flow greatly assist creating tools 
physical models key frame procedural techniques permit animator effortlessly create interesting swirling fluid behaviors 
interaction flows objects virtual forces handled elegantly 
believed physical fluid models expensive allow real time interaction 
largely due fact previous models unstable schemes solve physical equations governing fluid 
time propose unconditionally stable model produces complex fluid flows 
method easy implement 
stability model allows take larger time steps achieve faster simulations 
model conjuction solid textures create fluid animations interactively dimensions 
intriguing problems computer graphics simulation fluid behavior 
fluid solver great importance different areas 
special effects industry high demand convincingly mimic appearance behavior fluids smoke water fire 
paint programs benefit fluid solvers emulate traditional techniques oil paint 
texture synthesis possible application 
textures result fluid processes erosion 
modeling simulation fluids course prime importance scientific disciplines engineering 
fluid mechanics standard mathematical framework simulations 
consensus scientists navier stokes equations model fluid flow 
thousands books articles published various areas compute equations numerically 
solver practice depends largely problem hand computing power available 
engineering tasks require simulation provide accurate bounds physical quantities involved answer questions related safety performance visual appearance shape flow secondary importance applications 
computer graphics hand shape behavior fluid primary interest physical accuracy secondary cases irrelevant 
fluid solvers computer graphics ideally provide user tool enables achieve fluid effects real time 
factors important strict physical accuracy require computational power 
fact previous models computer graphics driven visual appearance physical accuracy 
early flow models built simple primitives 
various combinations primitives allowed animation particles systems simple geometries leaves :10.1.1.131.9652
complexity flows greatly improved random 
mass conserving automatically exhibit rotational motion 
turbulence periodic space time ideal motion texture mapping 
flows built superposition flow primitives disadvantage respond dynamically user applied external forces 
dynamical models fluids navier stokes equations implemented dimensions 
upson vortex method coupled poisson solver create dimensional animations fluids 
chen animated water surfaces pressure term dimensional simulation navier stokes equations 
method limited dimensions unstable 
kass miller linearize shallow water equations simulate liquids 
simplifications capture interesting rotational motions characteristic fluids 
foster metaxas clearly show advantages full dimensional navier stokes equations creating animations 
effects hard key frame manually swirling motion flows past objects obtained automatically 
algorithm mainly harlow welch computational fluid dynamics dates back 
techniques foster metaxas developed 
model advantage simple code finite differencing navier stokes equations explicit time solver 
similar solvers source code available book 
main problem explicit solvers numerical scheme unstable large time steps 
instability leads numerical simulations blow restarted smaller time step 
instability explicit algorithms sets serious limits speed interactivity 
ideally user able interact real time fluid solver having worry possible blow ups 
algorithm easy implement allows user interact real time threedimensional fluids graphics workstation 
achieve time steps larger ones foster metaxas 
obtain stable solver depart foster metaxas method solution 
explicit eulerian schemes lagrangian implicit methods solve navier stokes equations 
approach falls class called semi lagrangian schemes introduced early 
schemes rarely engineering applications suffer numerical dissipation simulated fluid tends dampen rapidly actual fluid 
shortcoming problem computer graphics applications especially interactive system flow kept alive actor applying external forces 
fact flow dampen chaotic difficult control 
results demonstrate able produce nice swirling flows despite numerical dissipation 
successfully integrated solvers environment user apply forces virtual fluid interactive rates effect achieved 
apply flows mainly simulation gaseous phenomena 
employ solver update flow motion densities flow 
increase complexity animations texture coordinates density 
manner able synthesize highly detailed gaseous flows low resolution grids 
believe combination physics fluid solvers solid textures promising method achieving highly complex flows computer graphics 
section presents navier stokes equations derivation leads method solution 
section contains fundamental ideas techniques needed obtain stable fluids solver 
relies sophisticated mathematical techniques written mathematical physics jargon familiar computer graphics researchers working physics modeling 
application oriented reader wishes implement solver skip section entirely go straight section 
describe implementation solver providing sufficient information code technique 
section devoted applications demonstrate power new solver 
section conclude discuss research 
keep confines short decided include tutorial type section fluid dynamics excellent textbooks provide necessary background intuition 
readers background fluid dynamics wish fully understand method consult text 
mathematically inclined readers may wish start excellent book marsden 
readers engineering bent hand consult didactic book abbott 
foster metaxas job introducing concepts fluid dynamics computer graphics community 
stable navier stokes basic equations section navier stokes equations manipulations lead stable solver 
fluid density temperature nearly constant described velocity field pressure field quantities generally vary space time depend boundaries surrounding fluid 
denote spatial coordinate dimensional fluids dimensional fluids equal decided specialize results particular dimension 
results valid dimensional dimensional flows stated 
velocity pressure known initial time evolution quantities time navier stokes equations kinematic viscosity fluid density external force 
readers unfamiliar compact version navier stokes equations 
eq 
vector equation dimensions components velocity field 
denotes dot product vectors symbol vector spatial partial derivatives 
precisely dimensions dimensions 
shorthand notation navier stokes equations obtained imposing fluid conserves mass eq 
momentum eq 

refer reader standard text fluid mechanics actual derivation 
equations supplemented boundary conditions 
consider types boundary conditions useful practical applications periodic boundary conditions fixed boundary conditions 
case periodic boundaries fluid defined dimensional torus 
case walls just fluid wraps 
fluids encountered practice useful creating evolving texture maps 
boundary conditions lead elegant implementation uses fast fourier transform shown 
second type boundary condition consider fluid lies bounded domain case boundary conditions function defined boundary domain 
see foster metaxas discussion boundary conditions case hot fluid 
case boundary conditions normal component velocity field zero boundary matter traverse walls 
pressure velocity fields appear navier stokes equations fact related 
single equation velocity obtained combining eq 
eq 

briefly outline steps lead equation fundamental algorithm 
follow marsden treatment subject ff 
mathematical result known helmholtz decomposition states vector field uniquely decomposed form zero divergence scalar field 
vector field sum mass conserving field gradient field 
result allows define operator projects vector field divergence free part operator fact defined implicitly multiplying sides eq 
poisson equation scalar field neumann boundary condition solution equation compute projection apply projection operator sides eq 
obtain single equation velocity fact develop stable fluid solver 
method solution fundamental equation eq 
solved initial state marching time time step assume field resolved time wish compute field time resolve eq 
time span steps 
start solution simulation step solver composed steps 
steps may take field space divergent free fields 
projection step ensures field divergent free entire simulation step 
solve advection part trace point field backward time 
new velocity velocity particle time ago old location previous time step sequentially resolve term right hand side eq 
followed projection divergent free fields 
general procedure illustrated 
steps solution time velocity field simulation obtained iterating steps 
explain step computed detail 
easiest term solve addition external force assume force vary considerably time step approximation effect force field time step interactive system approximation forces applied time step 
step accounts effect advection convection fluid 
dis fluid propagates expression navier stokes equations non linear 
foster metaxas resolved component finite differencing 
method stable time step sufficiently small term spacing computational grid 
small tions large velocities small time steps taken 
hand totally different approach results unconditionally stable solver 
matter big time step simulations blow 
method technique solve partial differential equations known method characteristics 
method crucial importance obtaining stable solver provide mathematical details appendix method understood intuitively 
time step fluid particles moved velocity fluid 
obtain velocity point new time backtrace point velocity field time defines path corresponding partial streamline velocity field 
new velocity point set velocity particle previous location time ago illustrates 
method advantages 
importantly unconditionally stable 
equation observe maximum value new field larger largest value previous field 
secondly method easy implement 
required practice particle tracer linear interpolator see section 
method stable simple implement highly desirable properties computer graphics fluid solver 
employed similar scheme move densities user defined velocity fields 
versions method characteristics researchers 
application employed visualizing flow fields improving rendering gas simulations 
application technique fundamentally different update velocity field previous researchers dynamically animate 
third step solves effect viscosity equivalent diffusion equation standard equation numerical procedures developed 
straightforward way solving equation discretize diffusion operator explicit time step foster metaxas 
method unstable viscosity large 
prefer implicit method identity operator 
diffusion operator discretized leads sparse linear system unknown field solving system done efficiently see 
fourth step involves projection step resulting field divergence free 
pointed previous subsection involves resolution poisson problem defined eq 
projection step requires poisson solver 
foster metaxas solved similar equation relaxation scheme 
relaxation schemes poor convergence usually require iterations 
foster metaxas reported obtained results small number relaxation steps 
different method resolve advection step accurate method 
method characteristics precise field close divergent free 
importantly visual point view projection step forces fields vortices result swirling motions 
reasons accurate solver projection step 
poisson equation spatially discretized sparse linear system 
projection viscosity steps involve solution large sparse system equations 
multigrid methods example solve sparse linear systems linear time 
advection solver linear time complexity proposed algorithm complexity foster metaxas solver complexity 
performance theoretically optimal complicated fluid algorithm consult cell computational grid 
periodic boundaries fft consider domain periodic boundary conditions algorithm takes particularly simple form 
periodicity allows transform velocity fourier domain fourier domain gradient operator equivalent multiplication consequently diffusion step projection step simpler solve 
diffusion operator projection operators fourier domain operator projects vector plane normal wave number fourier transform velocity divergent free field perpendicular 
diffusion interpreted low pass filter decay proportional time step viscosity 
simple results demonstrate power fourier transform 
able completely transcribe solver couple lines 
required particle tracer fast fourier transform fft 
add force transform diffuse project transform fourier transform complexity method theoretically slightly expensive method solution relying multi grid solvers 
method easy implement 
algorithm generate liquid textures section 
values discretized fields defined center grid cells 
moving substances fluid non reactive substance injected fluid diffusing time 
common examples phenomenon include patterns created milk coffee smoke rising cigarette 
scalar quantity moved fluid 
examples quantity include density dust smoke cloud temperature fluid texture coordinate 
evolution scalar field conveniently described advection diffusion type equation diffusion constant dissipation rate source term 
equation similar form navier stokes equation 
includes advection term diffusion term force term terms resolved exactly way velocity fluid 
dissipation term navier stokes equation solved follows time step similar equations stam fiume simulate fire gaseous phenomena 
velocity fields computed dynamically 
hope material section convinced reader stable solver full navier stokes equations 
pointed numerical techniques step solver 
proceed describe implementation model detail 
solver setup implementation handles motion fluids propagation fluid number substances mass density temperature texture coordinates 
quantity defined dimensional ndim dimensional ndim grid depending application 
grid defined physical dimensions ndim ndim side number cells ndim coordinate 
turn determines size 
definition grid input program specified animator 
velocity field defined center cell shown 
notice previous researchers defined velocity boundaries cells 
prefer cell centered grid straightforward implement 
allocate grids component velocity ndim andu ndim 
time step simulation grid corresponds solution obtained previous step 
store new solution second grid 
step grids swapped 
allocate grids hold scalar field corresponding substance transported flow 
implementation handle number substances sake clarity algorithm field section 
scalar quantity stored ands 
speed interactivity controlled single time large animator wishes algorithm stable 
physical properties fluid function viscosity 
varying viscosity animator simulate wide range substances ranging glue matter highly turbulent flows 
properties substance modeled diffusion constant ks dissipation rate 
parameters animator specify values fields boundary grid 
basically types periodic fixed 
boundary conditions different type coordinate 
periodic boundary conditions chosen fluid wraps 
means piece fluid leaves grid side grid opposite side 
case fixed boundaries value physical quantity specified boundary grid 
simplest method set field zero boundary 
refer reader foster metaxas excellent description different boundary conditions resulting effects 
results section describe boundary conditions chosen animation 
special case boundary conditions periodic coordinate elegant solver fast fourier transform employed 
algorithm described section 
repeat solver section general handle types boundary conditions 
fluid set motion applying external forces 
written animation system animator mouse apply directional forces fluid 
forces function substances fluid 
example temperature field moving fluid produce turbulent forces 
system allow user create sorts dependencies various fields described results section 
describe animation system great detail functionality evident examples section 
focus simulator takes forces parameters set animator input 
simulator worked mathematics underlying navier stokes equations section implementation straightforward 
wish emphasize theoretical developments section way gratuitous immensely useful coding compact solvers 
particular casting problem mathematical setting allowed take advantage large body done numerical analysis partial differential equations 
written solver separate library routines called interactive animation system 
entire library consists roughly lines code 
main routines library update velocity scalar time step 
assume external force array ndim source scalar field 
general structure simulator looks simulating handle display user interaction get ui swap swap dt sstep ks dt velocity solver composed steps forces added field field field diffuses due viscous friction fluid final step velocity forced conserve mass general structure routine dt ndim dt ndim transport dt ndim diffuse dt project dt general structure scalar field solver similar 
involves steps add source transport field velocity diffuse dissipate field 
scalar field solver shares routines called velocity solver sstep ks source dt source dt transport dt diffuse ks dt dissipate dt routine adds force field multiplied time step value field 
dissipation routine dissipate divides element array dt stores new array 
transport routine key step simulation 
accounts movement substance due velocity field 
importantly resolve non linearity navier stokes equations 
general structure routine transport dt cell dt routine traces path starting field time dt 
endpoint path new point 
simple second order runge kutta rk method particle trace adaptive particle tracer subsamples time step regions high velocity gradients near object boundaries 
routine linearly interpolates value scalar 
note higher order interpolation lead instabilities due oscillations overshoots inherent interpolants 
hand higher order spline approximants may tend smooth resulting flows 
solve diffusion diffuse perform projection project need sparse linear solver 
best theoretical choice multi grid algorithm 
solver library easy incorporate code gave results practice turned faster implementation multi grid algorithm 
appendix show exactly routines perform diffuse step project step 
routines ideal domains internal boundaries 
complex boundaries objects flow sophisticated multi grid solver relaxation routine 
case simulator easily accomodate new solvers 
results navier stokes solver applications requiring fluid motions 
implemented dimensional solvers interactive modeler allows user interact fluids real time 
motion modeled adding density fluid applying forces 
evolution velocity density computed solver 
increase visual complexity flows add textural detail density 
moving texture coordinates scalar solver achieve highly detailed flows 
compensate high distortions texture maps undergo sets texture coordinates periodically reset initial unperturbed values 
moment resulting texture map superposition texture maps 
idea suggested max 
shows sequence frames animation user interacts liquid textures 
siggraph proceedings frame similar sequence larger grid size figures show frames various animations generated dimensional solver 
case animations created allowing animator place density apply forces real time 
gases volume rendered threedimensional hardware texture mapping capabilities sgi octane workstation 
added single pass computes self shadowing effects directional light source fixed position 
evident quality renderings improved sophisticated rendering hardware software 
grid sizes ranged frame rates fast monitor animations able control behavior 
animations added noise term proportional amount density factor proportionality user defined parameter 
produced nice motions available fromhttp www netlib org 

animations 
figures fractal texture map texture map consisting evenly spaced lines 
animations created sgi octane workstation processor mbytes memory 
animations corresponding figures cdrom proceedings 
figures demonstrate ongoing collaboration israeli developed new camera records image depth simultaneously real time 
closest point camera moving location sources fluid simulation 
figures show actor interacting fluid solver tip finger add densities stir fluid 
included cdrom proceedings animation sequence 
motivation create general software system allows animator design fluid motions real time 
initial intention base system foster metaxas 
instabilities inherent method forced develop new algorithm 
solver property unconditionally stable handle wide variety fluids dimensions 
results accompany clearly demonstrate solver powerful allow animator achieve fluid effects 
believe solver substantial improvement previous area 
previous visually oriented models 
particular believe combination fluid solvers solid textures example may promising area research 
fluid solvers generate motion solid texture add additional detail higher quality animations 
addressed problem simulating fluids free boundaries water :10.1.1.108.1269
problem considerably difficult geometry boundary evolves dynamically time 
hope stable solvers may applied problem 
wish extend solver finite element boundary fitted meshes 
currently investigating extensions 
acknowledgments marcus grote informed input fluid dynamics pointing 
duncan constructive criticisms 
pamela jackson carefully proofreading brad clarkson help creating videos 
method characteristics method characteristics solve advection equations type scalar field steady vector field field time denote characteristics vector field flow point value field characteristic passing point variation quantity time computed chain rule differentiation shows value scalar vary streamlines 
particular initial field characteristics entirely define solution advection problem 
field time location computed tracing location back time characteristic get point evaluating initial field point method solve advection equation time interval fluid 
case components fluid velocity time routines linear designed solve general system finite difference equations type diffusion solver values constants left hand side dt ks dt ks dt ks dt ks right hand side equal grid containing previous solution 
projection step constants equal right hand side equal divergence velocity field 
gradient solution subtracted previous solution 
routine able handle different types boundary conditions periodic fixed 
information web www com 
abbott 
computational fluid dynamics engineers 
wiley new york 
chen da lobo hughes 
real time fluid simulation dynamic virtual environment 
ieee computer graphics applications pages may june 
marsden 
mathematical fluid mechanics 
springer verlag 
texts applied mathematics 
second edition new york 
courant rees 
solution nonlinear hyperbolic differential equations finite differences 
communication pure applied mathematics 
ebert perlin 
texturing modeling procedural approach 
ap professional 
ebert carlson parent 
solid spaces inverse particle systems controlling animation gases fluids 
visual computer 
foster metaxas :10.1.1.108.1269
realistic animation liquids 
graphical models image processing 
foster metaxas 
modeling motion hot turbulent gas 
computer graphics proceedings annual conference series pages august 
lopes gomes 
dimensional simulation gaseous phenomena vortex particles 
proceedings th eurographics workshop computer animation simulation pages 
springer verlag 

numerical simulation fluid dynamics practical 
siam philadelphia 

multi grid methods applications 
springer verlag berlin 
harlow welch 
numerical calculation time dependent viscous incompressible flow fluid free surface 
physics fluids december 
kass miller 
rapid stable fluid dynamics computer graphics 
acm computer graphics siggraph august 
max williams 
visualizing wind velocities cloud textures 
proceedings visualization pages los alamitos ca october 
ieee cs press 
press flannery teukolsky vetterling 
numerical recipes art scientific computing 
cambridge university press cambridge 
reeves 
particle systems 
technique modeling class fuzzy objects 
acm computer graphics siggraph july 
fournier 
stochastic motion motion influence wind 
proceedings eurographics pages september 
sims 
particle animation rendering data parallel computation 
acm computer graphics siggraph august 
sims 
image flow 
journal visualization computer animation 
stam 
general animation framework gaseous phenomena 
ercim research report january 
www ercim org publications technical reports html 
stam fiume 
turbulent wind fields gaseous phenomena 
proceedings siggraph pages 
addison wesley publishing august 
stam fiume 
depicting fire gaseous phenomena diffusion processes 
proceedings siggraph pages 
addison wesley publishing august 
sweet 
efficient fortran subprograms solution separable elliptic partial differential equations 
acm transactions mathematical software september 

animation aerodynamics 
acm computer graphics sig graph july 
upson 
combining physical visual simulation 
creation planet jupiter film 
acm computer graphics siggraph august 
snapshots interactive fluid solver 

