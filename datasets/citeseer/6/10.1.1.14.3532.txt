views way pattern matching cohabit data abstraction philip wadler programming research group oxford university uk programming methodology group chalmers university sweden pattern matching data abstraction important concepts de signing programs fit 
pattern matching depends making public free data type representation data abstraction depends hiding representation 
proposes mechanism means conflict 
view allows type viewed free data type combining clarity pattern matching efficiency data abstraction 
induction abstraction fundamental tools trade computer scientist 
pattern matching language feature supports induction data ab feature supports abstraction unfortunately features get 
proposes views mechanism means resolving problem 
au example pattern matching data abstraction consider definition exponentiation 
mathematicians define follows nt ap definition easy prove properties exponentiation means induction 
functional programming languages age similar style definition 
example language hope miranda declare new type peano zero succ write definition equivalent power succ power style definition advantages case dis played clearly pattern left hand side equation compiler check cases accidentally omitted definitions suited proofs structural induction program transformation 
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee permission 
received problem definition specifies particular way representing natural numbers aa free data type 
representation number data structure succ succ succ succ succ succ succ zero compared representation integers built computer hardware representation inefficient 
fol fundamental principle abstraction hiding problem arise free implement numbers convenient way including built integer data type 
short pattern matching supports clear induction requires representing type free data type visible 
data abstraction supports requires representing type hidden 
programmer faced choice clarity efficiency 
programming language hope problem special case natural numbers 
provides special mechanism allows built integer type viewed type peano 
useful mechanism clearly candidate generalisation need view data type hardly limited special case 
proposes language mechanism called views means satisfying need 
view specified arbitrary data type including data type viewed free data type 
possible specify different views type 
discusses views context functional languages similar ideas may useful imperative languages 
notation miranda 
essential requirement host language permits declaration free data types 
views useful regardless eager order evaluation hope normal order evaluation ss miranda examples evaluation order 
views described confused views obj 
views obj specify homomorphisms mod ules views described specify isomorphisms data types 
joseph goguen suggested views called problem extending pattern matching apply non free types abo addressed miranda mechanism types 
mechanism limited views 
type simply subset free type allow specify correspondence free type desired type 
remainder organised follows 
section views showing define view integers 
section briefly describes alternative view integers 
section gives simple example views data types context representations complex numbers 
sections demonstrate applications views lists trees 
section shows un usual uses views 
section describe views support equational reasoning induction 
section outlines efficient implementation method 
section concludes 
viewing integer zero sor section introduces views mechanism defining view built integer type int analogous free data type discussed 
definition view view int zero succ int inn zero ifn succ line introduces new namer zero succ may terms right hand ride equations patterns left hand aide equations 
similar function definitions 
clause defines function apply int get zero succ zero succ appear pattern left hand aide equation 
tht clause defines function apply zero succ zero suce appear right hand side equation 
view defined functions defined clause art inverses 
specify isomorphism subset viewed type subset viewing type 
case isomorphism natural numbers subset type values succ zero viewing type 
view declaration may write definitions section definition fibonacci numbers fib zero zero fib sw zero succ zero fib sw fib succ art right hand ride symmetry purposes demonstration 
just ar say fib zero equation 
see examples views right hand ride natural 
view applies natural numbers 
attempt view negative integer zero succ example evaluating fib cause run time error 
easy translate program uses views program 
view definition equivalent type definition function definitions zero sw int zero succ zero succ function win int function type int 
function power fib translated 
pattern matching translated case expressions rte aug wad 
second calls vie art inserted appropriate places 
example fib definition fib ease zc zero succ cme zero succ zero succ fib fib succ note values type program restricted way result argument 
view may expanded way outlined 
views require significant change semantics functional language 
view integers possible ont view data 
alternative view integers follows view int zero int odd int inn zero lfn div odd div xn xn odd xn xn clauses define inverse functions 
nott tht constructor zero appears views permissible unam ia definition 
view give efficient definition ion power power power power odd power expresses traditional divide conquer algorithm 
viewing complex number cartesian polar coordinates section gives simple illustration data types bt combined pattern matching 
pattern matching extremely simple case analysis recursive types useful 
known representations complex numbers polar cartesian 
represent complex numbers polar representation provide cartesian view pole real real view cart real reel pole cart toe sin cart pole define multiplication addition add cart cart cart pole pole pole addition defined tam cartesian representation multiplication terms polar 
alternatively choose represent complex numbers cartesian representation provide polar ij view 
requires just small variation tht declaration cart real real view pole real nol cart pole pole cart toe rin definitions add mult previously valid un der declaration 
shows views hide choice representation allowing tht pattern matching 
traditional method hiding representation ia data type 
just data types export values functions able export views 
easy modify data type mechanism miranda include views example cort real real pole red real type definer general type define views functions syntax declaring func tions shown 
declaration implemented polar representation cartesian view cart representation polar view third representation cartesian polar views 
definitions add mult valid regardless representation chosen 
comparison consider equivalent type views complex complex real real real single identifier cart replaced identifiers apart similarly pole 
corresponding defini addition multiplication add sport sport mult example difference great complicated examples advantages views pattern matching pronounced 
example slightly contrived practice sensible define operations odd mult inside abstraction outside 
serves show views combine data abstraction particularly views reconcile conflict pattern matching data abstraction mentioned 
way summa result follows 
abstraction achieved refusing export representation 
views abstraction achieved exporting representations desired 
viewing list backwards assume lists represented traditional way example taken cons cons nil constructors nil cons defined follows wt nil cons list cons zd just different syntax cons se 
course cons representation lists biased rst element lid 
example easier write function return element function return head com za lost cons nil fad lt define new view constructors nil snot biased opposite way view list nil list snot costa nil cops snot com sd snot nil snot code zd snot cons sn snot allows view list nil snot snot 
write definitions zn snot snot con zd equivalent definition example 
attention drawn features view 
constructor nil part representation appears view just zero shared different views integers 
general permissible unambiguous views representation share number representation 
second left hand sides clause contain snot 
matching cause recursive invocation 
clause recursive similar way 
recursive clauses perfectly acceptable way recursive function definitions 
third definition clauses exact inverses 
abbreviated follows view lint nil cz snot cons nil cons snot cons se snot mentioned previously view defined clauses define functions inverses 
case view defined inout clause property follows automatically 
course representation biased 
example cons zs evaluates efficiently snot consider function definitions jl cone con zn cl zn snot snot cz matching ft takes constant time matching fi takes time proportional length input lint 
input list traversed decompose lit outer snot entire input list element traversed decompose inner snot 
section repre sentation bias removed cons snot views equally efficient 
join representation lists au alternative cons representation lists researchers suggested representation sh lid nil unit lid join list interestingly meertens suggestion reasons math elegance sleep suggested reasons efficiency 
list possible representations 
example list represented unit join unit nil join unit join join nil unit join unit join nil list potentially infinite number representations nil join represent list 
assuming new representation define view allows view join list cons list view list nil cone list unit nil join unit join zu cons sn rs join ys unit join clause maps ways representing join list view cons list cone cons nil 
conversely clause maps term back particular rep join list unit join unit join nil 
correctness view depends equivalence various ways representing join list functions inverses 
note recursion clause indicated explicitly compared implicit recursion iu snot view previous section 
equation clause appears inverted 
easy show clauses define inverse 
thin case omitted favour inout clause cons list represented way join list 
choosing equations include clause equivalent choosing representation 
view join lists defined way completely sym metric definition 
left exercise reader 
join list viewed cons list snot list time proportional sire join lint 
join list abundance nil nodes proportional sire corresponding cons snot fits 
join representation appending lists requires constant time time proportional 
properties join representation desirable terms efficiency 
viewing list pairs pair lists function converts pair lists lit pairs defined follows nil nil nil zip os bs pair notation just syntax constructors think equivalent pair 
example sib necessary decompose list pairs pair lists 
usually done idiom es fcr ci ce uses list comprehension notation see wad 
clearly sip defines isomorphism lid pairs ce unique pair lists tip aa cs 
discard definition sip define view zip pairs lists view list zip ii lid nil zip nil nil cons zip ba zip aa cona type pair written 
write zip bs place right hand side equations 
write zip am ba left hand sides equations 
example idiom somewhat shorter 
zip bn representations trees common representation trees tree leaf branch tree tree common representation uses called spine mixing anatomical metaphor 
spine trees isomorphism relates branch trees described view view tree spine tree inout lea spine nil inout brand spine zt spine st example branch tree brand leaf leaf equivalent tree spine spine spine 
course spine trees underlying representation branch trees view hide representation type provide branch spine views 
uses views section presents unusual uses views 
clear uses considered demon power view mechanism 
occasionally convenient match argument pattern refer single name 
ray wish eat argument hope provides ar construct purpose 
example write au zero aa succ factorial surprisingly defined view view aa defines isomorphism type subset viewing type ci left right arguments constructor equal 
want au right hand side equation clause necessary view defined 
may views place predicates 
define write view int int inn cl pa caa fn eln replacing conditions patterns may occasionally clearer particu functions test condition 
may improve clarity function arguments test con dition interacts pattern matching 
clause seen term equivalent additional assertion 
conceivably useful right hand equations way documenting certain conditions hold 
equational reasoning order language feature useful easy reason programs containing feature 
views carefully de signed support important proof equational reasoning induction 
discussed section 
equational reasoning principle supreme importance goes names transparency rule plainly substituting equals equals 
simple example function definition ion cons nil io coils zd equational reasoning sufficient calculate value lost cons nil cons nil key principle design clauses view just equational 
view view fiat nil lid shoe inout cons nil inout cons snot za snot definition may calculate follows snot cons cons nil hat cone nil lost cone nil snot main value equational reasoning calcu performing proofs 
definitions may prove cons snot cons non empty finite list ze simply cone za rode snot cone definitions proof involved view ur ed 
equational reasoning ia valid pattern matching free data types 
view establishes isomorphism subset viewed data type subset free data type 
equational reasoning valid definitions pattern matching views 
caution required view may imply additional conditions program satisfy 
example polar view complex section valid angles tr equation pole pole ta consistent rest program 
required points form pole map fame cartesian representation cart 
ab extended example consider view join lists cons 
look view reveal establishes conditions join lists xu zj join yj joh ea join yu join ia join nil left identity associative 
programmer verify definition containing join consistent conditions 
desirable consistent condition ee required view 
example definition length nil length unit ct length join ye length zd length ye definition establishes homomorphism mapping join nil 
valid identity tive desired properties preserved 
discus homomorphisms operations lists reader referred bi 
example definition nil unit silly zd join yd zd ys definition preserve desired properties right identity 
condition se nil join xe derive silly silly nil join unit impossible reason equationally program containing definition ia just nn silly program 
example definition ia unif join ze definition won init join nil join unit join unit applying left equation yields ag right en undefined value 
consider bonus views reveal additional con dition involving join checked 
hand useful able limit portions program checked 
done usual way join data type 
completely safe export cona snot views lint type guaranteed enforce necessary conditions 
example definition completely satisfactory cone view necessarily equivalences various join representations list 
induction abo induction views 
example order demonstrate property holds list zd sufficient show 
nil holds 
zs snot holds assuming holds 
similarly prove properties natural numbers zero succ 
general induction view valid demonstrate properties hold elements generated viewing type 
example finite list generated nil snot induction serves prove proper finite lists 
similarly natural number generated zero suce induction serve prove natural numb 
induction demonstrates properties subset natural numbers viewed type integers 
problematic example la view odd integers section 
set values generated just constructors empty induction appropriate view 
implementation explained section view expanded defi nition new type conversion functions vie 
workable ideal 
constructors viewed type ae zero appear es result argument 
run time constructors allocated storage immediately examined referenced 
preferable scheme avoided allocating constructors altogether 
scheme 
introducing new type conversion functions mod ad scheme view con introduces new functions new types 
func tion acts equivalent vie case expression remaining functions provide equivalent constructor 
view integers section translates functions tr note designed corresponds zero returned corresponds succ returned 
function defined higher order language functions may passed functions 
scheme definition fik translates follows tro mn 
fib fi left verify translation described section 
new translation desired property new constructors succ zero requires extra allocation operations run time 
vantage application may difficult evaluate efficiently corresponding case 
exact nature problem depend evaluation method 
problem considered context machine style com piler solution suggested 
familiarity machine set aug joh pey 
example consider definition happens provide fast method calculating fibonacci numbers zero cc translated scheme lambda lifting definition turn run time code implementing body need locate heap storage represent application 
allocation constructor zero succ replace potentially larger allocation general storage need allocated free variable argument 
fortunately problem solved simply rearranging way free variables art passed 
rearranged method free variables function containing lambda abstracted argument order art passed result returned 
definition translates xa ab xm xn xa xb am lambda bm body bz need merely push pointers stack copy parameter top tack perform tail call jump 
turn examine argument aero perform tail call jump positive push stack perform tail call jump fib passing free variables body argument rearrangement stack necessary run time minimised 
definition current machine compiler produce quite sequence steps described modi ed 
quite acceptably efficient 
efficiency gamed expanding non recursive function applications compile time 
compilers described hk perform expansion kind 
example performing expansion de nition yields code write view 
difficult see perform equivalent expansion recursive associated snot view lists 
designers software continually faced trade offs 
trade offs necessary avoided careful design 
particularly worrying forced choose tween valuable methods pattern matching data 
views move trade ec sary avoidable cat 
views mechanism defined unexpected uses emerged 
included list pairs pair lists view dis cussed section unusual views discussed section 
doubt uses views waiting discovered 
programming languages features new features approached caution 
views worth consideration cause address important pattern matching data abstraction 
doing aim bring new perspective 
data type hides representation views think export representations convenient 

am grateful tony hoare pointing views support equational reasoning providing useful comments earlier draft report bernard john hughes acting sounding boards ideas thomas johnsson careful proofreading 
research performed fellowship supported icl 
trademark notice 
miranda trademark research software aug 
compiler ml 
fu cm symposium functional ming pager aug augustsson 
compiling matching 
proceedings con erence functional computer architecture springer verlag september 
bd 
transformation system developing recursive programs 
journal acm january 
bir bird 
theory lists 
iu workshop programming august 
macqueen sane 
hope ez applicative language 
technical report report csr edinburgh university computer science dept 
bui 
proving em pr gr induction 
computer journal february 
goguen 

principles obj 
acm symposium programming pages jan 
fairbairn wray 
code generation techniques functional languages 
proceedings acm symposium lisp functional programming pages boston 
hk hudak 
combinator compiler functional language 
acm symposium principles programming pages january 
joh johnsson 
lambda lifting transforming programs re cursive 
func tional programming computer architecture nancy france 

programming mathematical activity 
de bakker edi computer north holland 
peyton 
functional reduction 
prentice hall 
sh hi 
sleep 

short note concerning reduction append 
software ez november 
tho thompson 
miranda 
iii acm lisp functional pages august 

recursion equations ae programmmg ian guage 
henderson tier ed functional application cam bridge university press 

miranda non strict language polymorphic types 
tbc programming computer ar chitecture springer verlag 
wd 
wadler 
compiling pattern matching list 
pey 

