lpsat engine application resource planning compilation boolean satis ability powerful paradigm solving ai problems 
domains require metric reasoning compiled ciently sat bene compilation 
address problem introducing representation combines propositional logic metric constraints 
lpsat engine solves problems calls incremental simplex algorithm systematic satisfaction methods 
describe compiler converts metric resource planning problems processing lpsat 
experimental section explores optimizations lpsat including learning constraint failure randomized cuto advances satis ability sat solving technology rendered large previously intractable problems quickly solvable crawford auton selman cook mitchell bayardo schrag li anbulagan gomes 
sat solving successful di cult tasks compiled propositional form solved sat problems 
example sat encoded solutions graph coloring planning circuit veri cation fastest approaches problems kautz selman selman 
people provided code help discussion greg alan borning corin anderson mike ernst ives kambhampati henry kautz koehler lau denise rachel pottinger bart selman blind reviewers 
research funded part ce naval research arcs foundation barbara tom cable fellowship national science foundation iri iis national science foundation graduate fellowship 
appear ijcai 
copyright international joint conference arti cial intelligence www ijcai org 
rights reserved 
steven wolfman daniel weld department computer science engineering university box seattle wa usa cs washington edu planning problem compiler solver value lpsat decoder plan data ow demonstration resource planning system space precludes discussion grey components 
real world tasks metric aspect 
instance resource planning temporal planning scheduling analog circuit veri cation problems require reasoning real valued quantities 
unfortunately metric constraints di cult express sat encodings solver ciently handle metric constraints propositional formulae yield powerful substrate handling ai problems 
introduces new problem formulation combines expressive power propositional logic linear equalities inequalities 
argue provides ideal target language compiler translate tasks combine logical metric reasoning 
describe lpsat solver systematic satis ability solver integrated incremental simplex algorithm 
lpsat explores propositional search space updates set metric requirements managed linear program solver turn simplex noti es propositional solver requirements unsatis able 
report optimizations lpsat learning backjumping adapting lpsat core heuristic trigger variables random restarts 
ective combination learning backjumping lpsat learns new clauses discovering explanations failure branch search terminates 
resulting clauses guide backjumping constrain truth assignments 
particular show analysis state linear program solver crucial order learn ectively constraint con icts 
demonstrate utility approach fully implemented compiler resource encoding value separate boolean variable simple unwieldy solution bitwise encodings produce smaller formulae ones appear hard solve ernst 
load statements fuel de ning fuel load triggered load constraints triggers load fuel limits unit deliver goal unit move moving requires fuel move deliver moving implies delivery deliver trip requires full delivery portion tiny logistics problem greatly simpli ed compiler output 
truck load fuel limits delivery small carry load available constraint 
italicized variables boolean valued typeface real 
planning problems 
shows components 
performance impressive lpsat solves large resource planning problems encoded variant pddl language mcdermott metric constructs metric ipp koehler including metric version att logistics domain kautz selman 
formalism representation combines propositional logic formula set metric constraints 
key encoding simple expressive concept triggers propositional variable may trigger constraint constraint enforced trigger variable truth assignment istrue 
formally problem tuple hr ti set real valued variables set propositional variables set linear equality inequality constraints variables propositional formula cnf variables function establishes constraint triggered propositional variable 
require contain special null constraint true value variable denote triggers constraint 
variable de ne null 
de nition assignment problem mapping variables real values variables truth values 
problem assignment set active constraints fc true cg 
say assignment satis es problem literal true clause satis es set active constraints 
shows fragment sample problem truck carries maximum load fuel level executing move action 
discuss 
lpsat solver rst step constructing lpsat engine choose solvers foundation metric propositional solving portions 
choice motivated criteria 
easy modify propositional solver order support triggers handle reports inconsistency constraint reasoner 

metric solver support incremental modi cations constraint set 

simplex solve expensive setting single propositional variable value propositional solver minimize modi cations constraint set 
principles led implement lpsat engine modifying relsat satis ability engine bayardo schrag combining cassowary constraint solver borning borning method described nelson oppen 
relsat excellent start processing reasons 
performs systematic depth rst search space partial truth assignments minimizes changes set active metric constraints 
second code exceptionally structured 
third relsat incorporates powerful learning backjumping optimizations 
cassowary appropriate simplex solver handling designed support quickly respond small changes constraint set 
order build lpsat modi ed relsat include trigger variables constraints 
required changes 
solver trigger constraints truth 
second solver check solvable constraint set ensure truth assignment satisfying 
third solver report solution truth assignment tothe boolean variables assignment real values constraint variables purely positive trigger variable may set true trigger inconsistent constraint pure literal elimination act positive trigger variables displays pseudocode resulting algorithm 
incorporating learning backjumping lpsat inherits methods learning backjumping relsat bayardo schrag 
lpsat assignment constraint variables optimal cassowary objective function guaranteed globally optimal assignment real variables measure di erent assignment propositional variables provide better solution 
speci function vital cassowary default minimizes slack inequalities 
restriction falls line pure literal elimination rule consider triggers clauses 
trigger load clause load longer purely positive 
procedure lpsat problem hr ti empty clause bad return empty return solve 
pure literal null return fug lpsat hr ti 
unit clause fug return fug lpsat hr ti 
choose variable mentioned 
lpsat hr ti return fvg return vg lpsat hr ti 
core lpsat algorithm learning backjumping 
bad 
denotes check constraint inconsistency solve returns constraint variable values 
returns constraint triggered possibly null 
denotes result setting literal true simplifying 

possible search tree constraints 
node labeled variable set node true false branches 
indicates inconsistent constraint set 
bold variables members con ict set 
depth rst search propositional search space creates partial assignment boolean variables 
search fails partial assignment inconsistent problem 
lpsat identi es inconsistent subset truth assignments partial assignment con ict set uses subset learn ways 
making truth assignments represented con ict set leads inevitably failure lpsat learn clause disallowing particular assignments 
example problem constraints triggered setting true inconsistent form con ict set 
lpsat learn clause 
second continuing search futile variables con ict set truth assignment changed lpsat search deepest branch points con ict set variable received assignment ignoring deeper branch points 
shows search tree set true 
con ict set containing loaded lpsat past fuel load graphical depiction constraints 
shaded area represents solutions set solid line constraints 
dashed constraint causes inconsistency 
deepest member con ict set 
lpsat inherits methods con ict sets relsat lpsat produce con ict sets propositional constraint failures relsat produces propositional failures 
propositional failure lpsat uses relsat con ict set discovery mechanism unchanged learning set clauses led contradiction bayardo schrag 
constraint con ict lpsat identi es inconsistent subset active constraints propositional triggers constraint compose con ict set 
examine methods identifying inconsistent subsets 
rst method called global con ict set discovery lpsat includes entire set active constraints con ict set 
mechanism simple suboptimal smaller con ict set provide greater pruning action 
preliminary experiments showed global con ict set discovery increase solver speed solver learning backjumping facility con ict sets average twice large logical con icts 
second method called minimal con ict set discovery lpsat identi es potentially smaller set constraints responsible con ict 
speci cally technique identi es inconsistent con ict set proper subset consistent 
illustrates constraints example 
constraints min fuel implicit constraints fuel load non negative consistent dashed constraint marked constraint set inconsistent 
informally lpsat nds minimal con ict set identifying constraints greatest con ict new constraint 
discuss lpsat discovers con icting constraints gure discovers 
lpsat adds constraint cassowary constraint set cassowary initially adds slack version constraint allows error trivially consistent current constraint set 
error minimized routine minimize objective function borning 
show tion move initial solution upper left corner point solution upper right corner point shaded region 
error solution horizontal distance solution point new constraint 
progress shaded region error minimized error non zero strict constraint inconsistent 
point lpsat uses marker variables cassowary adds original constraint establish con ict set 
marker variable variable added exactly original constraints identi es constraint derived equations 
lpsat examines derived equation gives error new constraint notes constraint marker variable equation contributes keeping error non zero 
constraints identi ed equation plus new constraint compose con ict set 
constraints restrain solution point coming closer loaded line 
entire active constraint set constraints intersection constraints lines valid solution valid solution constraints 
note con ict set plus exists smaller cardinality nd 
general may minimal con ict sets con ict discovery technique discovery guarantee discovering global minimum 
sets may prove better pruning action know way nd best minimal con ict set ciently 
minimal con ict set usually better supersets 
brief proof technique return minimal con ict set appears longer version wolfman weld 
resource planning application order demonstrate lpsat utility implemented compiler metric planning domains starting base ipp koehler blackbox kautz selman parsers translates resource planning problems form 
lpsat solves problem small decoding unit maps resulting boolean real valued assignments solution plan 
believe translate solve decode architecture ective wide variety problems 
action language planning problems speci ed extension pddl language mcdermott support pddl typing equality quanti ed goals ects disjunctive preconditions conditional ects 
addition handle metric values new builtin types oat uent 
oat value may change course plan uent value may change time step time step 
action loop action loop pre test fluent pre test fluent eff set fluent eff set fluent actions execute parallel serialized 
support uent oat valued functions distance nagoya stockholm 
floats uents manipulated special built predicates test set influence 
test statements predicates action preconditions set influence ects 
argument test takes constraint equality inequality expressions composed uents basic arithmetic operations evaluates true constraint holds 
set influence take arguments object oat uent expression 
action causes set asserted object value action de ned expression value action 
asserted influence changes object value value expression equation object object expression multiple simultaneous influences cumulative ect falkenhainer forbus 
plan encoding compiler uses regular action representation explanatory frame axioms con ict exclusion ernst 
adopt standard uent model time takes nonnegative integer values 
state uents occur numbered times actions odd times 
initial state completely speci ed time zero including properties presumed false closed world assumption 
test set influence statement compiles propositional variable triggers associated constraint 
just logical preconditions ects implied associated actions triggers metric preconditions ects implied actions 
compiler generate frame axioms constraint variables propositional variables axiomatizations di erent 
explanatory frames boolean variables real variables compilation proceeds steps 
create constraint activated set value variable step equal current value plus uences act uences set zero 
construct clause activates constraint action sets variable value 
parallel encoding compiler consider certain set influence statements mutually exclusive 
simplicity adopt convention actions mutually exclusive sets variable influences sets 
exclusivity policy results plan correct actions step executed strictly parallel actions may serializable demonstrated 
order parallel time easy easy easy easy log log log log metric logistics problems learning global conflict sets minimal conflict sets solution times versions lpsat metric logistics domain 
learning backjumping performed line marked learning 
global con ict sets minimal con ict sets progressively better learning algorithms 
note nal point curve reaches resource cuto hour 
actions arbitrarily serializable adopt restrictive exclusivity conditions expressive format test statements 
experimental results currently available metric planners compare lpsat 
zeno system penberthy weld expressive system zeno unable complete easy simplest metric logistics problem 
results available koehler metric ipp system koehler code available direct comparisons 
light section concentrates displaying results lpsat interesting domain describing heuristics optimization enhance lpsat performance 
report lpsat solve time running pentium ii mhz processor mb ram averaged runs problem showing percent con dence intervals 
include compile time unoptimized compiler focus design optimization lpsat compile time substantial minutes log 
report sequence problems metric logistics domain includes features att logistics domain kautz selman airplanes trucks moving packages cities sites cities 
metric version adds fuel distances cities airplanes trucks individual maximum fuel capacities consume fuel move amount trip trucks distance cities airplanes depots 
log log att problems addition fuel 
easy easy simpli cations log elements retained higher numbered problems 
report highly successful experiments learning backjumping interesting optimizations 
learning backjumping results demonstrate improvement solving times resulting activating learning time raw tuned cutoff cutoff doubling log log log metric logistics problems solution times types random restarts 
tuned cuto uses raw experimental data select constant cuto 
cuto doubling starts cuto second doubles run 
backjumping facilities described section 
runs cut hour solve time minimal con ict set technique ran hour log 
learning backjumping lpsat quickly exceeds maximum time allotted 
learning backjumping activated global con ict sets solver handles larger problems runs faster 
best method minimal con ict sets quickly solves harder problems metric logistics domain 
splitting heuristic line lpsat pseudocode nondeterministic choice variable recursive call splitting heuristic guide choice bias performance 
expected standard relsat heuristic perform poorly due overly strong preference trigger variables reasons trigger implicit clause resolved trigger variable set time solver modi es trigger variable may call cassowary calls dominate runtime 
tried methods including information trigger variables splitting heuristic including adding multiplying score trigger variables user settable preference value 
surprise unable achieve signi cant improvement increasing preference trigger variables slow execution 
results lead suspect problems generally insensitive heuristics compilation metric planning domains encodes information trigger variables structure problem 
experiments decide issue 
random restarts lpsat uses randomized backtracking algorithm early experimental results showed small percentage runs far exceeded median runtime experimented random restarts process similar described gomes 
cut solving deadline xed geometrically increasing restart solver new random seed 
shows results experiments 
rst ran algorithm times problem produce raw entries calculated cuto time minimized expected runtime system runs 
reran problems tuned cuto time produce tuned cuto data 
technique provides speedup log impressive speedup log requires substantial preliminary di culty problem order determine appropriate cuto time 
lpsat repeatedly solve single problem similar problems process nding restart times dominate runtime 
experimented restart system requires prior analysis 
cuto doubling approach sets initial restart limit second increases limit factor restart reaching solution 
performed theoretical analysis ectiveness technique demonstrates small improvement 
interesting average improvement fact method improved consistency runtimes harder problems log raw runs lasted longer longest cuto doubling run 
related limited space precludes survey propositional satis ability algorithms linear programming methods 
see cook mitchell survey satis ability survey linear programming 
inspired idea compiling probabilistic planning problems littman 
extend sat virtual machine support probabilistic reasoning useful consider orthogonal extension handle metric constraints 
researchers combined logical constraint reasoning usually context programming languages 
may thought integration prolog linear programming introduced notion incremental simplex ja ar 
saraswat thesis saraswat formulates family programming languages operate incremental construction constraint framework 
chip van hentenryck augments logic programming tools ciently solve constraint satisfaction problems consistency checking deals variables nite domains 
numerica extends adding variety di erential equation solvers mix van hentenryck 
hooker describe technique combining linear programming constraint propagation hooker 
blackbox uses translate solve decode scheme planning satis ability kautz selman 
zeno causal link temporal planner handled resources calling incremental simplex algorithm plan re nement loop penberthy weld sets runs minimal con ict sets learning backjumping 

graphplan blum furst descendant ipp extended handle metric reasoning plan graph koehler 
sipe wilkins currie tate industrial strength planners include resource planning capabilities 
systems address metric planning problem compilation integer programming kautz vossen 
lpsat promising new technique combines strengths fast satis ability methods incremental simplex algorithm ciently handle problems involving propositional metric reasoning 
contributions de ned formalism combining boolean satis ability linear equalities 
implemented lpsat solver combining relsat satis ability solver bayardo schrag cassowary constraint reasoner borning 
experimented optimizations lpsat adapting splitting heuristic trigger variables adding random restarts incorporating learning backjumping 
minimal con ict sets guide learning backjumping provided orders magnitude speedup 
implemented compiler resource planning problems 
lpsat performance compiler better zeno penberthy weld 
remains done 
ways improve compiler improving runtime optimizing exclusion detection exploring new exclusion encodings optimizing number constraints uences improving handling conditional effects 
addition wish investigate issue tuning restarts problems including thorough investigation exponentially growing resource limits 
interesting implement solver stochastic engine 
hope add support expressive constraints adding nonlinear solvers 
borning greg alan borning 
cassowary linear arithmetic constraint solving algorithm interface implementation 
technical report university department computer science engineering june 
bayardo schrag bayardo schrag 
csp look back techniques solve real world sat instances 
proceedings fourteenth national conference arti cial intelligence pages providence july 
menlo park calif aaai press 
blum furst blum furst 
fast planning planning graph analysis 
proceedings fourteenth international joint conference arti cial intelligence pages 
san francisco calif morgan kaufmann 
borning alan borning kim marriott peter stuckey yi xiao 
solving linear arithmetic constraints user interface applications 
proceedings acm symposium user interface software technology october 
cook mitchell cook mitchell 
finding hard instances satis ability problem survey 
pro ceedings dimacs workshop satis ability problems pages 
crawford auton crawford auton 
experimental results cross point satis ability problems 
proceedings eleventh national conference arti cial intelligence pages 
menlo park calif aaai press 
currie tate currie tate 
plan open planning architecture 
arti cial intelligence november 
ernst ernst millstein weld 
automatic sat compilation planning problems 
pro ceedings fifteenth international joint conference arti cial intelligence pages 
san francisco calif morgan kaufmann 
falkenhainer forbus falkenhainer forbus 
setting large scale qualitative models 
proceedings seventh national conference arti cial intelligence pages 
menlo park calif aaai press august 
reprinted 
gomes gomes selman kautz 
boosting combinatorial search randomization 
proceedings fifteenth national conference arti cial intelligence pages madison wi july 
menlo park calif aaai press 
hooker hooker kim 
integrating constraint propagation linear programming combinatorial optimization 
proceedings sixteenth national conference arti cial intelligence orlando florida july 
menlo park calif aaai press 
ja ar ja ar michaylov peter stuckey roland yap 
clp language system 
acm transactions programming languages systems july 

linear programming 
birkh auser boston 
kautz selman kautz selman 
pushing envelope planning propositional logic stochastic search 
proceedings thirteenth national conference arti cial intelligence pages 
menlo park calif aaai press 
kautz selman kautz selman 
blackbox new approach application theorem proving problem solving 
aips workshop planning combinatorial search pages 
pittsburgh penn carnegie mellon university june 
kautz kautz 
statespace planning integer optimization 
proceedings sixteenth national conference arti cial intelligence orlando florida july 
menlo park calif aaai press 
koehler koehler nebel ho mann dimopoulos 
extending planning graphs adl subset 
proceedings fourth european conference planning pages 
berlin germany springer verlag sept 
koehler koehler 
planning resource constraints 
proceedings thirteenth european conference arti cial intelligence pages 
chichester uk john wiley sons 
li anbulagan li anbulagan 
heuristics unit propagation satis ability problems 
proceedings fifteenth international joint conference arti cial intelligence pages 
san francisco calif morgan kaufmann august 
littman littman 
new approach probabilistic planning 
proceedings fourth international conference arti cial intelligence planning systems pages 
menlo park calif aaai press june 
mcdermott drew mcdermott 
pddl planning domain de nition language 
aips competition committee draft edition june 
nelson oppen greg nelson derek oppen 
simpli cation cooperating decision procedures 
acm transactions programming languages systems october 
penberthy weld penberthy weld 
temporal planning continuous change 
proceed ings twelfth national conference arti cial intelligence 
menlo park calif aaai press july 
saraswat vijay saraswat 
concurrent constraint programming languages 
phd thesis carnegie mellon university computer science department january 
selman selman kautz cohen 
local search strategies satis ability testing 
dimacs series discrete mathematics theoretical computer science 
selman bart selman henry kautz david mcallester 
computational challenges propositional reasoning search 
proceedings fifteenth international joint conference arti cial intelligence pages 
san francisco calif morgan kaufmann 
van hentenryck pascal van hentenryck 
constraint satisfaction logic programming 
mit press cambridge ma 
van hentenryck van hentenryck 
numerica modeling language global optimization 
proceedings fifteenth international joint conference arti cial intelligence 
vossen vossen ball lotem nau 
integer programming models ai planning 
proceedings sixteenth international joint conference arti cial intelligence stockholm sweden aug 
san francisco calif morgan kaufmann 
wilkins wilkins 
ai planners solve practical problems 
computational intelligence november 
wolfman weld wolfman weld 
lpsat system application resource planning 
technical report university department computer science engineering april 
