inheritance interorganizational workflows agree disagree loosing control 
van der aalst department technology management eindhoven university technology box nl mb eindhoven netherlands aalst tm tue nl department computer science university colorado boulder campus box boulder usa 
internet technology commerce rise networked virtual enterprises fueled need interorganizational workflows 
xml allows trading partners exchange information coordinate activities different organizational entities 
business business processes hindered lack common language support collaboration 
describes public private approach addresses notorious problems domain design interorganizational workflow local autonomy compromising consistency process 
approach uses notion inheritance consists steps create common understanding interorganizational workflow specifying shared public workflow partition public workflow organizational entities involved organizational entity create private workflow subclass relevant part public workflow 
shows approach avoids typical anomalies business business collaboration deadlocks livelocks yields interorganizational workflow guaranteed realize behavior specified public workflow 
keywords information systems electronic commerce workflow management petri nets inheritance dynamic behavior verification 
today corporations operate organizational boundaries 
phenomena commerce extended enterprises internet stimulate cooperation organizations 
importance workflows distributed number organizations increasing 
interorganizational workflow offers companies opportunity re shape business processes boundaries organizations 
interorganizational workflows typically subject conflicting constraints 
hand strong need coordination optimize flow different organizations 
hand organizations involved essentially autonomous freedom create modify workflows point time 
suggests agree disagree loosing control exactly problem tackled 
motivate approach described discuss developments field commerce internet technologies 
commerce refers enabling purchasing selling goods services communications network 
ability conduct business activities involved marketing finance manufacturing selling negotiation electronically commerce 
major objective adopting commerce strategies reduce costs improve efficiency business processes replacing business electronic alternatives 
commerce earliest incarnation known electronic data interchange edi traditionally larger corporations share exchange information business partners suppliers private networks 
edi enables exchange business data computer computer 
eliminates need re key information documents messages supporting creation electronic versions documents messages public standard formats transmitted received interpreted systems 
typical applications supply chain management processes order placement processing 
explosive growth internet couple years commerce able offer solutions broader range business processes edi previously addressed 
extensive availability internet enabled smaller companies hindered previously large financial investment required private networks conduct business electronically 
technologies bar coding automatic teller machines mail fax video conferencing workflow world wide web continued impact success commerce 
term commerce frequently refers line involving businesses consumers experts predict commerce continues grow business business commerce continue enjoy lion share revenue 
internet world wide web www de facto standard commerce 
internet evolved primitive medium exchange data backbone today information society 
kumar zhao identify stages development www 
phase primitive text tools gopher archie primarily knowledge discovery 
second phase hypertext graphical browsers knowledge discovery 
third phase marked connecting applications databases www gateways technologies cgi 
result www process transactions synchronous manner date information 
fourth phase phase asynchronous mode interaction series trading partners enabled semantic languages xml ontologies fifth phase procedural information attached information exchanged workflow processes explicit common language www applications process aware 
today phase phase 
kumar zhao envision emphasis shift short lived transactions synchronous nature long lived transactions require complex asynchronous exchange information 
clearly main focus www tools associated research information communication presentation 
result problems related collaboration coordination business process support neglected 
satisfactory concepts products support interorganizational workflows missing 
business business commerce hindered problems 
focus problems related interorganizational workflow 
contractor order specification cost statement product subcontractor fig 

interactions contractor subcontractor 
introduce problems tackled small example interorganizational workflow involving business partners contractor subcontractor 
interaction business partners shown called sequence diagram 
contractor sends order subcontractor 
contractor sends detailed specification subcontractor subcontractor sends cost statement contractor 
specification subcontractor manufactures desired product sends contractor 
simple business business protocol sequence diagram suitable 
sequence diagrams typically describe scenarios complete specification business business protocol trade procedure 
sequence diagram problems expressing mixture choice synchronization subtle aspects moment choice 
section address subtle crucial issues workflow model shown 
limitations petri nets model business business protocols 
specifies process described earlier terms petri net 
transitions represented squares correspond tasks places represented circles correspond causal relations tasks 
places order specification cost statement product exchange messages shown 
places may contain tokens time distribution tokens places specifies current state process 
initially place source place contains token corresponding new case called workflow instance 
transitions enabled input place contains token initially transition send order enabled 
enabled transitions fire removing token input place producing token output place firing send order results consumption token production new tokens 
firing send order transitions receive order create specification enabled 
transitions process cost statement send order create specification handle product order specification cost statement product fig 

public workflow receive order process specification create cost statement ship product fired executed order 
firing transitions transition process specification enabled 
easy see starting token place transitions executed fired predefined order resulting state just token sink place 
exchange tokens places order specification cost statement product matches interaction pattern shown 
petri net exhibits choices degree parallelism limited model may unnecessary complex 
complex business protocols advanced constructs offered petri net formalism indispensable 
contrast shows tasks 
term public workflow petri net shown 
think petri net contract contractor subcontractor necessarily show way tasks executed 
real process may detailed involving tasks 
public workflow contains tasks interest parties 
show executing tasks 
extend petri net notion hierarchy shown figures 
shows toplevel interorganizational workflow business partners involved messages exchanged 
large squares called domains 
case domains contractor left subcontractor right 
domains connected channels order specification cost statement contractor part order specification cost statement product fig 

interorganizational workflow subcontractor part product 
shaded rectangles correspond methods services offered domains 
contractor send order create specification process cost statement handle product fig 

wf net public part contractor 
interorganizational workflow shown figures public workflow partitioned domains 
shows contractor share public workflow shows subcontractor share public workflow 
transitions domains mapped methods execution transition provides corresponding service offered domain 
particular example correspondence transitions methods 
general transitions may offer service mapped method 
may transitions just added routing purposes correspond relevant tasks 
tasks mapped methods 
receive order process specification create cost statement ship product subcontractor fig 

wf net public part subcontractor 
cs contractor send order create specification process cost statement handle product fig 

wf net private part contractor 
interorganizational workflow corresponding partitioned public workflow figures serves agreement business business protocol business partners agreed real workflow executed 
workflow description execute workflow domains called private workflow 
private workflow typically contains tasks local interest 
shows typical private workflow 
private workflow contractor contains additional tasks 
thing added place cs connecting task processes cost statement task creating specification 
place may added contractor thinks efficient create specification cost statement processed 
local point view change quite acceptable 
contractor interested part public workflow shown change may harmless 
subcontractor executes local workflow specified process interorganizational workflow deadlock execution send order receive order 
example shows local changes may dramatic effects 
bill ok nok prepare cs check prepare ph collect input contractor send order create specification process cost statement handle product fig 

alternative wf net private part contractor 
shows alternative private workflow 
workflow tasks added local interest sending order creation specification task collect input may executed multiple times 
private workflow shown adds tasks part public workflow original order key tasks changed 
contrast consistent 
subcontractor executes local workflow specified contractor executes local workflow specified interorganizational workflow run smoothly deadlocks similar anomalies 
receive order process specification create cost statement ship product subcontractor decide fig 

wf net private part subcontractor 
procedure procedure shows private workflow subcontractor 
workflow contains tasks decide procedure procedure 
order received decision 
decision possible procedures executed 
procedure specification processed cost statement created 
procedure cost statement created specification processed 
local perspective apparent reason private workflow extended way 
procedure corresponds order specified public workflow 
second procedure offers opportunity reverse order tasks process specification create cost statement 
private workflow subcontractor shown combined private workflow contractor shown potential deadlock 
executing alternative procedure help avoid deadlock mentioned earlier 
subcontractor uses second procedure addition place contractor workflow result deadlock 
illustrates contractor detect presence alternative procedure indicates private workflow shown consistent 
private workflow subcontractor shown combined private workflow contractor shown potential anomalies deadlocks livelocks 
essential changed 
public workflow contractor may assume specification processed subcontractor cost statement processed 
workflow shown longer guaranteed 
consider workflow shown suitable candidate realize subcontractor share public workflow 
receive order process specification create cost statement ship product subcontractor process order decide produce discuss long assemble fig 

alternative wf net private part subcontractor 
short shows alternative private workflow 
workflow consistent subcontractor part public workflow 
private workflows shown figures combined key tasks executed order specified public workflow 
addresses problems illustrated small example sure local implementation workflow create kinds anomalies organizational borders 
solve problems propose public private approach projection inheritance 
projection inheritance defined uses encapsulation mechanism establish subclass superclass relationships 
contrast notions inheritance primarily addresses dynamic behavior data types method signatures 
approach consists steps 
step public workflow created 
second step public workflow partitioned number domains 
private workflow created domain private workflow subclass corresponding part public workflow 
approach followed guaranteed workflow workflow obtained combining private workflows free deadlocks similar anomalies 
workflow subclass public workflow 
guaranteed business business protocol specified public workflow realized 
demonstrate validity approach show greatest common denominator gcd local views part process visible domain public workflow 
show common multiple lcm local views workflow 
remainder organized follows 
introduce notations techniques theoretical results 
unfortunately proofs quite complex require lot preliminaries 
builds petri nets sound wf nets branching bisimilarity projection inheritance gcd lcm processes :10.1.1.30.3125
corresponding concepts introduced section 
readers familiar concepts pass selected parts section 
section introduces framework model interorganizational workflows 
approach described section 
section demonstrates workflow realizes public workflow approach 
section introduces notion views shows gcd lcm views coincide public respectively workflow 
conclude relating results existing describing tool woflan partly supports approach summarizing plans 
preliminaries sketched potential problems connecting autonomous workflow processes interorganizational setting 
reason problems concrete approach dealing problems need introduce basic notations concepts 
concurrent nature distributed workflow processes tricky nature errors pointed forces rigorous formalism deal issues 
workflow management systems vendor specific workflow language 
avoid results tool specific benefit years research concurrent systems petri nets 
variant petri nets class sound workflow nets closely related modeling languages contemporary workflow management systems 
close relationship demonstrated tool woflan automatically translates workflow processes specified staffware cosa protos meteor workflow nets 
reason petri nets approach heavily depends inheritance notions described 
place transition nets section define variant classic petri net model labeled place transition nets 
elaborate petri nets reader referred 
universe identifiers set action labels 
set visible labels 
role silent action explained 
assume reader familiar basic mathematical notations 
denote powerset set consisting subsets 
denotes set sequences empty sequence sequence length 
relation transitive closure inverse 
function set set denoted 
range 
definition labeled net 
labeled place transition net tuple 
finite set places 
finite set transitions 
finite set methods 
set directed arcs called flow relation 
labeling function 
transition label refers method operation executed transition fires 
transition bears label method executed 
note transitions label executing method 
shows net places transitions 
shows labels transitions identifiers transitions places shown 
particular example transitions label 
transition labels identify transitions 
labeled net 
elements referred nodes 
node called input node node exists directed arc 
node called output node exists directed arc 
place called input place output place transition called input output transition 
set input nodes node called preset set output nodes called postset preset transition labeled receive order singleton containing order preset transition labeled handle product contains places 
auxiliary functions defined assign node preset postset respectively 
node 
note preset postset functions depend context net function applies 
node nets clear net preset postset functions refer 
augment preset postset notation name net confusion possible preset node net postset node net 
definition marked labeled net 
marked labeled net pair labeled net bag denoting marking called state net 
set marked labeled nets denoted bag alphabet denotes number occurrences called cardinality 
set bags denoted empty bag function yielding element denoted explicit enumeration bag square brackets superscripts denote cardinality elements 
example denotes bag elements elements allow sets bags 
definition transition enabling 
marked labeled net transition enabled denoted input places contains token 

transition enabled marking notation fire 
addition label associated method operation observable action firing results marking denote potential firing 
definition firing rule 
firing rule smallest relation satisfying ternary relation linking markings transition labels transition label enabled execution results consider labeled net shown 
marking just token marking transition send order enabled 
firing transition marking results state output places send order marked transition consumes token produces tokens 
note transition handle product fired tokens consumed token produced 
definition firing sequence 
marked labeled net sequence called firing sequence positive natural number exist markings transitions sequence said enabled marking denoted firing sequence results unique marking denoted 
firing sequence enabled marking send order receive order create specification process specification create cost statement process cost statement ship product handle product 
execution firing sequence starting yields marking state just token sink place 
definition reachable markings 
set reachable markings marked labeled net denoted isdefined set 
eleven markings reachable 
note correspondence places markings 
marking may mark multiple places markings marking place 
definition connectedness 
labeled net weakly connected simply connected nodes 
net strongly connected nodes 
net shown connected strongly connected directed path place place 
definition directed path 
labeled net 
directed path node node sequence elementary nodes 
non trivial iff contains nodes 
net shown acyclic directed paths elementary 
definition union labeled nets 
labeled nets union labeled net nets satisfy abovementioned conditions union said defined 
definition boundedness 
marked labeled net nis bounded set reachable markings finite 
labeled net shown bounded initial marking 
marked net shown bounded place cost statement marked number tokens executing transitions create cost statement repeat alternatingly 
definition safeness 
marked labeled net safe reachable marking place safeness implies boundedness 
unbounded marked net shown safe 
definition dead transition 
marked labeled net dead reachable marking transitions process cost statement handle product dead marked shown 
transition process cost statement requires token specification cost statement 
way produce token cost statement fire process specification remove token specification result handle product enabled transitions dead 
transitions dead initial marking 
process cost statement send order create specification handle product order specification cost statement product receive order process specification repeat create cost statement ship product fig 

non bounded non safe non live marked net dead transitions 
definition liveness 
marked labeled net live reachable marking transition reachable marking marked net containing dead transitions live marked net shown live contains dead transitions 
non live marked nets dead transitions 
consider example net shown initial marking live dead transitions 
note fuse corresponding net live 
workflow nets modeling workflow processes labeled nets specific structure 
name nets workflow nets wf nets 
definition wf net 
labeled net 
net workflow net wf net conditions satisfied 
instance creation contains input source place 
instance completion contains output sink place 
connectedness strongly connected 
method 
visible start 
visible 
note connectedness requirement implies unique source unique sink place 
readers familiar wf nets defined extended requirements methods network start transitions transitions non labels :10.1.1.30.3125:10.1.1.30.3125:10.1.1.30.3125
nets shown figures wf nets 
structure wf net allows define functions 
definition 
wf net 

unique input place 
unique output place 
set start transitions 
set transitions 
wf net source sink place :10.1.1.30.3125:10.1.1.30.3125
definition gives static characterization wf net 
workflows life cycle satisfies requirements 
definition soundness 
wf net said weakly sound conditions satisfied 
safeness safe 
proper completion reachable marking implies 
completion option reachable marking said strongly sound simply sound addition dead transitions contains dead transitions 
set strongly sound wf nets denoted requirement states sound wf net safe 
second requirement states moment token put place places empty corresponds termination workflow instance case leaving dangling 
third requirement states starting initial marking activation case possible reach marking token place means feasible terminate successfully 
wf net meets requirements weakly sound 
fourth requirement states dead transitions corresponds requirement transition execution sequence note bags containing input respectively output place activating transition 
weakly sound wf net strongly sound fourth requirement met 
wf net shown strongly sound 
wf net shown strongly sound weakly sound possible mark sink place third requirement violated :10.1.1.30.3125:10.1.1.30.3125
fact requirements second violated 
show relation strong weak soundness operator removes dead transitions corresponding places net 
definition removing dead transitions 
marked labeled set dead transitions function maps marked nets nets wf net source place applied stating initial marking theorem states weakly sound wf net transformed strongly sound wf net removing dead transitions operator 
theorem relation weak strong soundness 
weakly sound wf net 
strongly sound 
proof 
satisfies requirements stated definition 
removing dead transitions associated places change set reachable markings 
satisfies requirements 
removal dead transitions satisfies fourth requirement 
remains prove wf net 
easy show requirements stated definition removal dead parts 
fact weakly sound wf net transformed strongly sound net allows focus properties strongly sound wf nets 
term soundness refer strongly sound wf nets stated 
theorem characterization soundness 
wf net short circuited version 
sound live safe 
proof 
proof similar proof :10.1.1.30.3125
difference stronger notion soundness implies safeness boundedness short circuited net 
add transition described theorem corresponding net live safe 
add transition resulting net live unbounded 
note observations support theorem 
fact soundness coincides standard properties liveness safeness allows existing tools techniques verify soundness wf net 
alphabet operator function yielding set visible labels transitions net dead 
definition alphabet operator 
marked labeled net function 
sound wf nets contain dead transitions equals denoted branching bisimilarity formalize projection inheritance need formalize notion equivalence 
branching bisimilarity standard equivalence relation marked labeled nets notion silent action pivotal definition branching bisimilarity 
silent actions actions transition firings observed 
silent actions denoted label transitions net label different observable 
note assume element 
labeled transitions distinguish external observable internal silent behavior 
single label sufficient internal actions equal sense visible effects 
marked labeled nets called branching bisimilar denoted observable behaviors coincide abstracting silent actions 
formal definition refer definition appendix branching bisimilarity relation equivalence relation reflexive symmetric transitive see appendix details 
equivalence relations define wf nets behavioral equivalent denoted cf 
definition appendix 
inheritance notions inheritance identified 
notions inheritance notions focus dynamics data signatures methods 
inheritance notions address usual aspects substitutability superclass replaced subclass breaking system subclassing implementation inheritance subclass implementation superclass subtyping interface inheritance subclass conform interface superclass 
inheritance notions inspired mixture aspects 
restrict inheritance notions projection inheritance 
hope extend framework notions inheritance cf 
section 
basic idea projection inheritance characterized follows 
possible distinguish behaviors arbitrary methods executed effects methods considered subclass 
projection inheritance new methods methods added subclass hidden 
introduce abstraction operator hide methods 
definition abstraction 
labeled net 
abstraction operator function renames transition labels silent action 
formally implies implies definition projection inheritance straightforward abstraction operator branching bisimilarity equivalence notion 
definition inheritance 
weakly sound wf nets subclass projection inheritance denoted easy show partial order reflexive anti symmetric transitive 
consider wf nets shown illustrate fig 

subclasses projection inheritance 
notion projection inheritance 
subclass hiding new task results potential trace followed executing wf net renamed branching bisimilar :10.1.1.30.3125:10.1.1.30.3125
subclass hiding results behavior equivalent behavior addition execution allow bypass subclass hiding parallel branch containing yields original behavior 
subclass notion projection inheritance defined transformation rules 
rules correspond design patterns extending superclass incorporate new behavior adding loop inserting methods existing methods putting new methods parallel existing methods 
see appendix formal definition rules 
transformation rules distinguish earlier inheritance 
rules correspond design constructs practice iteration sequential composition parallel composition 
designer sticks rules inheritance guaranteed 
greatest common divisor common multiple wf nets projection inheritance provides partial ordering wf nets 
ordering ordering define notions greatest common divisor gcd common multiple lcm 
total ordering unique upper lower bound 
define maximal common divisor mcd minimal common multiple mcm set wf nets 
definition gcd lcm 
natural number sound wf nets 
net maximal common divisor mcd workflow process definition 

net greatest common divisor gcd mcd mcds 

net minimal common multiple mcm workflow process definition 

net common multiple lcm mcm 
gcd set wf nets wf net captures part nets common part agree 
lcm captures possible behaviors 
consider example wf nets shown :10.1.1.30.3125:10.1.1.30.3125
gcd nets wf nets subclass net possible find different wf net subclass time subclass reasonable choice gcd nets executes sequential order 
shows gcd 
shows wf net :10.1.1.30.3125:10.1.1.30.3125
subclass nets considered 
possible find different subclass time superclass gcd lcm fig 

greatest common divisor common multiple shown 

lcm 
sequence generated nets generated appropriate abstraction 
indicates size gcd typically smaller lcm 
may confusing gcd larger respect ordering apparent paradox easily explained property implies notions gcd mcd lcm mcm explored context inheritance relations 
inheritance relation considered projection inheritance main results summarized follows set sound wf nets mcd upper bound respect modulo branching bisimulation 
set wf nets possible find mcd 
possible find mcm 
consider example wf nets containing transitions labeled 
net executed net executed possible construct mcm 
note notion mcm related multiple inheritance mcm needs inherit properties multiple wf nets 
object oriented frameworks multiple inheritance difficult handle 
surprising mcm necessarily exist 
natural number sound wf nets sound wf net sound wf net implies gcd unique mcd modulo branching bisimulation 
similarly sound wf net sound wf net implies lcm unique mcm modulo branching bisimulation 
interorganizational workflows wf net introduced section specifies workflow process isolation 
goal tackle problems related interorganizational workflows 
define interorganizational workflow net iowf net set wf nets connected channels 
definition iowf net 
interorganizational workflow net iowf net tuple 
finite set channels 
wf nets 
union methods 
set directed arcs called channel flow relation 
iowf net consists set interconnected wf nets 
interconnection structure specified set channels set methods channel flow relation 
figures show example iowf net 
shows channels order specification cost statement product 
figures show wf nets 
methods labels attached transitions wf nets visible :10.1.1.30.3125:10.1.1.30.3125
methods send order create specification process cost statement handle product 
methods receive order process specification create cost statement ship product 
shows channel flow relation method send order connected channel order channel order connected method receive order semantics iowf net terms labeled net union wf nets adding place channel connecting transitions newly added places specified removing superfluous source sink places iowf net transformed labeled net 
call flattening interorganizational workflow 
definition describes function transforms iowf net labeled net 
definition 
iowf net 








labeled net obtained removing places flattened iowf net 
definition fairly straightforward removal source sink places 
source place removed transition consumes tokens place source places serve input place connected transitions kept 
similarly sink place removed transition produces tokens place 
shows flattened interorganizational workflow defined figures 
note source place sink place wf net shown removed flattened net source place input place receive order sink place output place ship product :10.1.1.30.3125:10.1.1.30.3125
cases start transition connected place representing channels 
note wf net shown flattened interorganizational workflow defined figures semantics interorganizational workflow changed partitioning contractor subcontractor :10.1.1.30.3125:10.1.1.30.3125
send order handle product create specification process cost statement create cost statement order specification cost statement specification receive order process specification ship product decide create cost statement process specification procedure procedure fig 

flattened interorganizational workflow composed private wf nets shown figures 
illustrated channels connect wf nets constituting interorganizational workflow :10.1.1.30.3125:10.1.1.30.3125
easy see connections may cause deadlocks 
example wf net shown procedure chosen workflow process deadlocks state obtained executing send order receive order decide procedure dead :10.1.1.30.3125:10.1.1.30.3125
undesirable phenomenon called multiple activation 
explain anomaly introduce term activation iowf net activated places marked source sink place 
note activated start transitions fires 
deactivated places empty transitions fires 
ideally activation followed deactivation 
interorganizational workflow activated activated deactivated 
multiple activation may lead kinds anomalies embedded interorganizational workflow exhibits behavior possible wf net isolation :10.1.1.30.3125:10.1.1.30.3125
example multiple activation may result states considered establishing soundness wf net 
formulate requirement multiple activation define notion activation safeness 
definition activation safeness 
marked labeled net subset places activation safe reachable state transition place implies set places activation safe transitions producing tokens consuming tokens enabled long tokens easy see multiple activation interorganizational workflow places activation safe 
definition formulate notion soundness iowf nets 
definition soundness 
iowf net corresponding flattened net dead transitions sound 
sound 
flattened iowf net sound wf net 
activation safe multiple activation 
requirements fairly straightforward sound iowf net composed sound wf nets flattened iowf net sound wf net 
note consider flattened iowf net dead transitions dead parts affect dynamic behavior removed 
requirement added avoid multiple activation 
iowf net defined figures example sound iowf net composed sound wf nets flattened iowf net sound wf net multiple activation 
iowf net defined figures sound flattened net sound 
requirements definition checked result stated theorem 
requirement correspond established notions liveness safeness may hard check efficient analysis techniques tools verify requirement 
introduce stronger requirement validated syntactically structure flattened net 
requirement states path transition inside start transitions containing transitions topology net guarantees trigger indirectly deactivated 
words self triggering 
property defines absence self triggering shows absence self triggering assures multiple activation 
property self triggering 
iowf net satisfying requirements stated definition sound flattened iowf net sound wf net 
non trivial directed paths contain occurrence transition start transitions share input places sound 
proof 
prove property proof contradiction assume firing sequence marked 
loss generality assume state sequence having properties start transition enabled place marked 
partition sequence subsequences contains firings firing transition empty ends firing transition sequence ends state 
note places empty 
prefix containing anomaly 
concentrate second subsequence sequence transition fires 
remove transitions name new net note re non trivial directed paths transition inside start transitions contain transitions implies partition transitions subsets cause transitions removed 
apply known exchange lemma see example page allows project transi tions shows execute followed state state executing exchange lemma easy see input places start transitions contains multiple tokens start transitions share input places 
note marks place fires start transition enables start transition adding new tokens input places 
safeness property violated 
sequence composed followed possible sound wf net find contradiction 
property shows way activated multiple times place activation safe self triggering 
notion soundness iowf nets definition semantics iowf nets definition define requirements partitioning valid 
definition valid partitioning 
sound wf net iowf net 
valid partitioning sound iowf net defined figures valid partitioning wf net shown :10.1.1.30.3125:10.1.1.30.3125
approach example nice illustration anomalies occur business partners common understanding interorganizational workflow hand 
problems occur workflow supervision organizational unit occur workflow partitioned multiple organizations 
developments rise www business commerce networked virtual companies fueled need complex interorganizational workflows 
avoid anomalies interorganizational deadlocks livelocks hand allow local autonomy organizational units involved hand propose public private approach 
approach projection inheritance consists steps 
steps introduced informally section 
definition approach 
set domains 
public private approach consists steps step create public workflow sound wf net 
step map task domains construct function valid partitioning 
called partitioned public workflow domain called public part 
step domain define sound wf net subclass projection inheritance labels start transitions changed iowf net 
called private workflow domain called workflow called wf net 
step public workflow created 
workflow specified terms sound wf net serves contract business partners involved 
shows example public workflow 
second step public workflow partitioned set domains 
note domain corresponds organizational entity 
definition approach prefer neutral term domain terms business partner organizational unit 
figures show example partitioning domains 
note partitioned workflow valid interorganizational workflow defined definitions 
glance may requirement restrictive 
case motivate 
result partitioning fragment partitioned workflow corresponds domains represented sound wf net 
wf net domain called public part 
step public parts replaced private workflows 
private workflow corresponds actual workflow executed domains 
key approach private workflow subclass corresponding private workflow projection inheritance private workflow allowed change labels start transitions 
requirement follows fact interorganizational level clear domain active 
figures show private workflows satisfying requirements formulated step 
interorganizational workflow obtained connecting private workflows called workflow note figures describe workflow 
iowf net function obtain wf net section show iowf net wf net 
fact show wf net iowf net sound :10.1.1.30.3125:10.1.1.30.3125
shows iowf net workflow described figures 
easy verify result shown sound wf net 
approach impose restrictions public workflow sound wf net promoted public workflow 
requirement partitioning step valid may quite restrictive 
recall partitioning valid public parts local fragments workflow sound multiple activation flattened iowf net equals public workflow 
illustrate implications prerequisites consider shown 
wf nets consists sequential tasks prepare produce assemble ship 
dashed lines indicate partitioning corresponding wf nets 
wf net partitioned vertically prepare produce mapped domain assemble ship mapped domain 
easy see partitioning valid 
wf net shown partitioned horizontally prepare ship mapped domain produce assemble mapped domain 
partitioning valid fragment net left hand side line wf net 
causal relation prepare ship produce assemble removed partitioning wf net :10.1.1.30.3125:10.1.1.30.3125
requires fragment sound wf net public part workflow isolation correct workflow 
clearly requirement stated step restrictive 
closer observation shows apparent reason horizontal partitioning allowed 
shows problem easily solved adding implicit place 
horizontal partitioning wf net valid :10.1.1.30.3125:10.1.1.30.3125
example shows partitioning valid possible massage public workflow bit valid partitioning possible 
bill ok order specification cost statement product nok prepare cs check prepare ph send order collect input process cost statement receive order process specification create cost statement ship product handle product create specification process order decide produce discuss long assemble short fig 

flattened iowf composed private wf nets shown figures 
place called implicit influence behavior wf net place marked net said implicit redundant depend number tokens place output transitions enabled reachable marking :10.1.1.30.3125:10.1.1.30.3125
definition implicit place 
marked labeled ordinary net 
place called implicit reachable markings transition 
implicit places properties studied 
adding implicit places change behavior 
fact extending wf net implicit places yields net branching bisimilar original net 
computational point view may quite expensive check place implicit 
authors investigated techniques find structural implicit places 
structural implicit place place guaranteed implicit structure petri net 
structural implicit place implicit place may implicit places structural implicit 
set prepare prepare ship ship produce assemble produce assemble prepare ship produce assemble fig 

valid partitioning non valid partitioning valid partitioning obtained adding implicit place 
structural implicit places constructing reachability graph allows efficient analysis techniques 
particular application suffices consider structural implicit places 
quite easy build facility semi automatically adds implicit places needed 
information adding structural implicit places refer 
adding implicit places possible partitioning valid long public part public workflow clear starting point clear point activated firing start transitions deactivated firing transitions activation deactivation communicated channel source sink place public workflow multiple activation 
conditions quite reasonable clear domain activated 
conditions met partitioning valid adding structural implicit places 
workflow realizes public workflow approach starts creation public workflow serves kind contract 
approach partitions public workflow creates set private workflows constitute workflow 
think workflow interorganizational workflow executed 
section show approach workflow fact realizes public workflow 
precise show flattened workflow sound wf net workflow sound wf net subclass public workflow projection inheritance 
prove properties start section complex fairly general theorem 
theorem states certain conditions replaced subclass soundness yielding subclass 
illustrates essence theorem consider sound wf net composed 
communicate set common places 
chosen way remove places add source sink place obtain sound wf net addition assumed multiple activation 
additional nets composed 
connections essentially connections see theorem details 
chosen way remove places add source sink place obtain sound wf net subclass projection inheritance 
conditions guaranteed sound subclass words theorem shows inheritance kind congruence composition wf nets 
theorem compositionality projection inheritance 
subclass subclass fig 

essence theorem subclass subclass labeled nets 

sound wf net source place sink place 
defined 
defined 



sound wf net 
sound wf net 
coincide sets start labels 
coincide sets labels 



activation safe 
weakly sound wf net proof 
proof variant proof theorem 
note necessarily strongly sound 
simply removing dead parts obtain strongly sound wf nets sound 
solves problem raised 
applying theorem possible prove obtained approach sound wf net subclass theorem 
defined definition 

sound 
subclass projection inheritance 
proof 
iowf net public parts replaced private workflows 
induction prove sound subclass 
base case assume valid partitioning sound subclass inductive step assume induction hypothesis states sound subclass need prove sound subclass clearly iowf nets 
apply function obtain easy verify satisfy requirements mentioned theorem 
theorem show sound projection inheritance transitive conclude remains prove multiple activation 
contains start transitions individual possible fire start transition places empty 
easily verified considering firing sequences abstraction 
sound sound sound multiple activation 
sound subclass theorem clearly shows value approach need coordination business involved resulting interorganizational workflow guaranteed sound 
guaranteed resulting interorganizational workflow realizes public workflow tasks agreed public workflow executed proper order 
consider example public workflow shown iowf net described figures 
bill obtained approach wf net shown subclass wf net shown wf net shown subclass wf net shown :10.1.1.30.3125:10.1.1.30.3125
guaranteed wf net shown sound subclass wf net :10.1.1.30.3125:10.1.1.30.3125
local view section focus view interorganizational workflow perspective domains 
local view domain detailed description private workflow high level description part workflow handled domains local view composed definition local view 
defined definition 
local view wf net 
called local view 
shows local view wf net contractor interorganizational workflow described figures 
contractor detailed view part workflow left high level view subcontractor part workflow right 
ok nok prepare cs check prepare ph send order collect input process cost statement handle product order specification create specification process specification cost statement create cost statement product receive order ship product fig 

local view contractor interorganizational workflow composed private wf nets shown figures 
theorem shows local view desirable properties 
theorem 

defined definitions 
sound 
subclass 
subclass 
proof 
reorder domains domain reordering proof similar proof theorem 
defined proof theorem reordering 
clearly sound 
theorem illustrates local views generated approach consistent public workflow workflow local view sound subclass public workflow superclass workflow 
consider example interorganizational workflow described figures 
contractor local view described wf net shown guaranteed sound subclass wf net shown superclass wf net shown :10.1.1.30.3125:10.1.1.30.3125
combine local views calculate gcd part workflow domains agree obtain public workflow 
calculate lcm obtain workflow 
theorem 
defined definitions 

greatest common divisor gcd 
common multiple lcm proof 
prove gcd property stated section 
need prove sound wf net implies property follows directly theorem 
prove take arbitrary need show note arbitrary local view wf net hiding methods yields hiding methods yields obtain abstracting methods holds 
proof lcm similar 
crucial element proof observation theorems illustrate fact workflow business partners agreed actual workflow harmony local views 
results demonstrate sophistication approach 
related extensions petri nets proposed modeling workflow process definitions long term workflow management coined workflow management systems readily available 
consider example information control nets variant classical petri nets late seventies 
reader interested application petri nets workflow management refer workshops workflow management held conjunction annual international conference application theory petri nets elaborate workflow modeling petri nets :10.1.1.30.3125
papers literature focus verification workflow process definitions 
verification issues examined complexity selected correctness issues identified concrete verification procedures suggested 
concrete verification procedures petri nets proposed :10.1.1.30.3125
builds concept sound wf net introduced see section :10.1.1.30.3125
technique developed checking consistency transactional workflows including temporal constraints 
technique restricted acyclic workflows gives necessary conditions sufficient conditions consistency 
reduction technique proposed 
reduction technique uses correctness criterion corresponds soundness class workflow processes considered essence acyclic free choice petri nets 
reduction technique analysis tool developed 
interface ibm mqseries workflow product 
researchers worked compositional verification workflows known petri net results refinement rules 
differs approaches focus interorganizational workflows 
papers explicitly focus problem verifying correctness interorganizational workflows 
interaction domains specified terms message sequence charts actual workflow checked respect message sequence charts 
similar formal complete approach martens reisig 
authors give local criteria concept scenarios similar runs basic message sequence charts guarantee absence certain anomalies global level 
approaches constructive specify criteria various notions correctness provide concrete design rules transformation rules section 
decade researchers explored notions behavioral inheritance named subtyping substitutability 
researchers domain formal process models petri nets process algebras tackled similar questions explicit representation process various notions bi simulation 
inheritance notion characterized fact equipped inheritance preserving transformation rules construct subclasses transfer rules migrate instances superclass subclass vice versa 
features relevant constructive robust approach interorganizational workflows 
primary focus ensure correctness interorganizational workflows conceptual level 
approach independent workflow management systems applied different technical infrastructures 
clearly researchers focused different aspects interorganizational workflows 
done workflow transactions context cross organizational workflows 
typically considers correctness issues task level process level 
example coordination model service model explicitly addressing control flow problems resulting causal relations absence relations 
conducted projects crossflow wise cosmos highly relevant enactment interorganizational workflows 
projects consider correctness issues tackled 
consider example common open service market infrastructure proposed 
infrastructure proposes mobile agents 
controlflow agent managed petri net workflow engine 
unfortunately address design problems mentioned 
observations conclude complementary reported 
address implementation issues 
today commercial workflow systems centralized enactment service 
research prototypes mentor university saarland saarbrucken meteor university georgia mobile university erlangen university klagenfurt wasa university focus distribution aspects 
systems typically provide message passing 
support approach 
detailed discussion architecture enactment service take care interorganizational workflows outside scope 
focus design analysis interorganizational workflows 
developed tool named woflan workflow analyzer 
woflan analysis tool verify correctness workflow process definition 
analysis tool uses state art techniques find potential errors definition workflow process 
woflan designed wfms independent analysis tool 
principle interface workflow management systems 
moment woflan interface wfms cosa software ley wfms meteor lsdis wfms staffware staffware bpr tool protos pallas athena 
woflan designed analyze interorganizational workflows 
woflan verify soundness property 
woflan check workflow wf net subclass workflow 
key features woflan ability guide user source design error woflan supplies context sensitive diagnostics support user correcting design flaws 
woflan specifically designed verify correctness interorganizational workflows support crucial steps approach woflan verify correctness public workflow domain woflan check private workflow subclass corresponding public part projection inheritance 
shows screenshot woflan analyzing process realized workflow management system cosa 
illustrate relevance results approach design interorganizational workflow electronic bookstore similar amazon com fig 

screenshot showing cosa background woflan foreground public workflow electronic bookstore implemented cosa verified woflan 
bn com 
case study described 
screenshot shown shows analysis public workflow book ordering process electronic bookstore described :10.1.1.30.3125
predecessor approach applied interorganizational workflow telecom industry 
workflow deals issue service bundling service providers 
hope extend approach directions 
want address local dynamic changes 
transfer rules migrate cases workflow instances superclass subclass vice versa 
possible change workflows domains fly possible automatically transfer case latest version process 
long superclass subclass relationships established possible migrate cases correctness local workflow 
second want tackle topic address reconfiguration interorganizational workflows 
assumed public workflow partitioning public workflow domains fixed 
real applications tasks moved organization contract public workflow changed regular basis 
preliminary exploration problems shows approach extended address reconfiguration issues 
third want evaluate approach real implementation 
example workflow management system meteor enact interorganizational workflows designed approach 
meteor system entirely corba provide platform independent reliable environment 
supports interoperability mechanisms swap jflow 
meteor model introduces notion foreign task vs native tasks 
foreign task refers task realization implementation unknown workflow designer implementation details known workflow designer native task 
important feature interorganizational workflows channels called sink nodes specify communication synchronization independent workflows 
preliminary meteor predecessor approach 
fourth experiment notions inheritance 
deploys notion projection inheritance 
defined notions inheritance 
notions suitable interorganizational workflows 
try generalize results weaker notion inheritance 
plan extend woflan offer support interorganizational workflows 
author basten excellent inheritance dynamic behavior eric verbeek development woflan verification tool analyze properties defined applying approach telecommunications case 
author anonymous referees associate editor useful suggestions 

van der aalst 
application petri nets workflow management 
journal circuits systems computers 

van der aalst 
interorganizational workflows approach message sequence charts petri nets 
systems analysis modelling simulation 

van der aalst 
inheritance interorganizational workflows agree disagree loosing control 
beta working series wp eindhoven university technology eindhoven 

van der aalst 
workflow verification finding control flow errors petri techniques 
van der aalst desel oberweis editors business process management models techniques empirical studies volume lecture notes computer science pages 
springer verlag berlin 

van der aalst 
inheritance interorganizational workflows enable business business commerce 
van editors proceedings second international conference telecommunications electronic commerce pages nashville tennessee october 

van der aalst basten 
identifying commonalities differences object life cycles behavioral inheritance 
editors application theory petri nets volume lecture notes computer science pages 
springer verlag berlin 

van der aalst basten 
inheritance workflows approach tackling problems related change 
theoretical computer science 

van der aalst van hee 
workflow management models methods systems 
mit press cambridge ma 

van der aalst van hee van der 
component software architectures framework inheritance behavior 
science computer programming 

van der aalst van hee van der 
compositionality projection inheritance erratum 
science computer programming 

van der aalst weske 
approach interorganizational workflows 
dittrich norrie editors proceedings th international conference advanced information systems engineering caise volume lecture notes computer science pages 
springer verlag berlin 

adam huang 
modeling analysis workflows petri nets 
journal intelligent information systems 

america 
designing object oriented programming language behavioral subtyping 
de bakker de roever rozenberg editors foundation object oriented languages volume lecture notes computer science pages 
springer verlag berlin 

basten 
terms nets system design petri nets process algebra 
phd thesis eindhoven university technology eindhoven netherlands december 

basten van der aalst 
inheritance behavior 
journal logic algebraic programming 

benjamin 
electronic markets virtual value chains information 
sloan management review pages 


checking properties nets transformations 
rozenberg editor advances petri nets volume lecture notes computer science pages 
springer verlag berlin 


transformations decompositions nets 
brauer reisig rozenberg editors advances petri nets part petri nets central models properties volume lecture notes computer science pages 
springer verlag berlin 

lee 
designing trustworthy interorganizational trade procedures open electronic commerce 
international journal electronic commerce 

silva 
improving linearly characterization nets 
rozenberg editor advances petri nets volume lecture notes computer science pages 
springer verlag berlin 

desel esparza 
free choice petri nets volume cambridge tracts theoretical computer science 
cambridge university press cambridge uk 

ellis 
information control nets mathematical model office information flow 
proceedings conference simulation measurement modeling computer systems pages boulder colorado 
acm press 

ellis nutt 
modelling enactment workflow systems 
ajmone marsan editor application theory petri nets volume lecture notes computer science pages 
springer verlag berlin 

georgakopoulos schuster cichocki baker 
managing process service fusion virtual enterprises 
information systems 

van glabbeek weijland 
branching time abstraction bisimulation semantics 
journal acm 

grefen aberer ludwig 
crossflow cross organizational workflow management dynamic virtual enterprises 
international journal computer systems science engineering 

ter hofstede orlowska 
verification problems conceptual workflow specifications 
data knowledge engineering 

whinston 
frontiers electronic commerce 
addison wesley reading massachusetts 

kilov harvey editors 
object oriented behavioral specifications volume kluwer international series engineering computer science 
kluwer academic publishers boston ma usa 

kilov rumpe simmonds editors 
behavioral specifications businesses systems volume kluwer international series engineering computer science 
kluwer academic publishers boston ma usa 

martens reisig 
inter operability workflow applications local criteria global soundness 
van der aalst desel oberweis editors business process management models techniques empirical studies volume lecture notes computer science pages 
springer verlag berlin 

kumar zhao 
workflow support electronic commerce applications 
decision support systems 

alonso schuldt schuler 
wise approach electronic commerce 
international journal computer systems science engineering 

lee 
distributed electronic trade scenarios representation design prototyping 
international journal electronic commerce 

lee 
soft coded trade procedures open edi 
international journal electronic commerce 

liskov wing 
behavioral notion subtyping 
acm transactions programming languages systems november 

malone benjamin yates 
electronic markets electronic hierarchies effects information technology market structure corporate strategies communications acm 

merz liberman lamersdorf 
mobile agents support interorganizational workflow management 
international journal applied artificial intelligence 

merz liberman lamersdorf 
crossing organisational boundaries mobile agents electronic service markets 
integrated computer aided engineering 

merz liberman muller jones lamersdorf 
workflow management mobile agents 
proceedings paam conference practical application agents multiagent systems 

murata 
petri nets properties analysis applications 
proceedings ieee april 

pallas athena 
protos user manual 
pallas athena bv netherlands 

reisig rozenberg editors 
lectures petri nets basic models volume lecture notes computer science 
springer verlag berlin 

reisig rozenberg editors 
lectures petri nets ii applications volume lecture notes computer science 
springer verlag berlin 

reuter 
contracts low level mechanism building generalpurpose workflow management systems 
data engineering bulletin 

orlowska 
product information distributed systems technology centre queensland australia 
www dstc edu au research projects index html 

orlowska 
applying graph reduction techniques identifying structural conflicts process models 
jarke oberweis editors proceedings th international conference advanced information systems engineering caise volume lecture notes computer science pages 
springer verlag berlin 

schuster georgakopoulos cichocki baker 
modeling composing service process multi enterprise processes 
bergman editors advanced information systems engineering th international conference caise number lecture notes computer science pages 
springer verlag berlin 

sheth kochut miller 
large scale distributed information systems lsdis laboratory meteor project page 
lsdis cs uga edu proj meteor meteor html 

sheth van der aalst arpinar 
processes driving networked economy dynamically trading processes 
ieee concurrency 

software ley 
cosa user manual 
software ley gmbh germany 

staffware 
staffware user manual 
staffware plc united kingdom 

white house 
framework global electronic commerce 
www ecommerce gov htm 


analysis petri nets stepwise refinements 
journal computer system sciences 

verbeek basten van der aalst 
diagnosing workflow processes woflan 
computer journal 


compositional modeling verification workflow processes 
van der aalst desel oberweis editors business process management models techniques empirical studies volume lecture notes computer science pages 
springer verlag berlin 


electronic commerce structures issues international journal electronic commerce 
branching bisimilarity indicated section need notion equivalence formalize projection inheritance purpose branching bisimilarity standard equivalence relation marked labeled nets notion silent action pivotal definition branching bisimilarity 
silent actions actions transition firings observed 
silent actions denoted label transitions net label different observable 
note assume element 
labeled transitions distinguish external observable internal silent behavior 
single label sufficient internal actions equal sense visible effects 
context workflow management want distinguish successful termination deadlock predicate defines states marked net terminate successfully 
marked labeled net state perform actions terminate successfully said deadlock 
notion soundness successful termination corresponds state token sink place 
definition 
class marked labeled nets equipped termination predicate wf net 
define branching bisimilarity auxiliary definitions needed relation expressing marked labeled net evolve marked labeled executing sequence zero actions predicate expressing marked labeled net terminate performing zero actions 
definition 
relation defined smallest relation satisfying definition 
predicate nis defined smallest set marked labeled nets satisfying marked labeled nets nand action abbreviation predicate means zero actions performed disjunct predicate satisfied action performed second disjunct satisfied 
observable action disjunct predicate satisfied 
simply equal meaning single action performed 
definition branching bisimilarity 
binary relation nis called branching bisimulation nand 


fig 

essence branching bisimulation 
marked labeled nets called branching bisimilar denoted exists branching bisimulation 
shows essence branching bisimulation 
firing rule depicted arrows 
dashed lines represent branching bisimulation 
marked labeled able simulate action equivalent marked labeled net performing number silent actions silent action may may simulate 
third property definition guarantees related marked labeled nets termination options 
branching bisimilarity equivalence relation reflexive symmetric transitive 
see details pointers notions branching bisimilarity 
illustrate relevance branching bisimilarity equivalence notion marked wf nets shown 
nets visible behavior trace realized trace realized 
interesting investigate marked wf nets branching bisimilar 
branching bisimilar 
trace equivalent reason moment choice execution choice execution 
distinction vital dealing interorganizational workflows 
assume corresponds sending request supplier executed case positive response executed case negative response 
wf net handle positive response negative response sending request :10.1.1.30.3125:10.1.1.30.3125
handle positive negative response choice execution 
clearly wf net acceptable assumes sending request answer supplier known 
simple example shows straightforward notions equivalence trace equivalence abstraction internal steps selective problems addressed 
refined notion branching bisimilarity 
definition behavioral equivalence wf nets 
wf nets consider nets shown fig 

marked wf nets branching bisimilar third branching bisimilar 
inheritance preserving transformation rules proof summarize results 
theorem projection inheritance preserving transformation rule 
sound wf net labeled net place 



live safe 
defined sound wf net note construct subclass wf net shown :10.1.1.30.3125:10.1.1.30.3125
theorem projection inheritance preserving transformation rule 
sound wf net labeled net place transition 


live safe 
defined sound wf net transformation rule construct 
theorem projection inheritance preserving transformation rule 
sound wf net labeled net 
assume fresh identifier appearing contains place transitions 



live safe 
defined 
implicit 
sound wf net sound wf net transformation rule construct subclass superclass 
rule insert loop iteration point process provided added part returns initial state 
rule insert new methods replacing connection transition place arbitrary complex subnet 
rule add parallel behavior new methods executed parallel existing methods 

