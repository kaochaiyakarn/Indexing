mining order knowledge bases association rules hasan jamil member acm ieee jamil acm org data mining relational databases popular way discovering hidden knowledge 
methods association rules chi square rules ratio rules implication rules proposed contexts er complimentary choices rule induction model 
inductive abductive logic programming research data mining knowledge bases non existent contemporary methods involve inherent dicult cast knowledge base systems 
propose logic technique association rule mining declarative knowledge rely procedural concepts candidate generation 
development signi cant empowers users capability explore knowledge bases mining association rules declarative ad hoc fashion 
years mining association rules popular way discovering hidden knowledge large databases 
orts focused developing novel algorithms data structures aid ecient computation rules 
despite major orts computational complexity best known methods remains high 
ecient algorithms association rule mining proposed eciency major issue specially kinds rule induction ratio rules chi square rules :10.1.1.3.2424:10.1.1.3.2424
forms rule inductions interesting association rules appealing simplicity intuitiveness 
paradigm rule mining process divided distinct steps discovering frequent item sets generating rules 
practical reasons step process eciency computability 
explain issues need brie summarize concept association rules 
fi mg set item identi ers 
transaction table tuple pair called transaction form ht id xi id unique transaction id set item identi ers items 
transaction usually identi ed transaction id id said contain item set association rule implication form 
association rules assigned support written con dence written measure denoted rule support denoted sup transaction table transactions contain words sup sup gj jt set items 
hand rule said con dence denoted con transaction table transactions contain contains con dence rule con sup sup transaction table problem mining association rules generate set quadruples table form hx user supplied minimum support con dence thresholds respectively 
clarity de nitions simplicity problem deceptive 
mentioned able compute rules rst compute frequent item sets 
set items called frequent item set support greater minimum support frequent item sets determined essentially scanning database 
unfortunately process scanning means easy 
algorithms apriori nding frequent item sets passes pass uses frequent item sets generated previous pass seed generate new frequent item sets 
problem algorithms generate large set candidate frequent item sets prune ones seed iteration :10.1.1.3.2424:10.1.1.3.2424
candidate sets usually stored hash trees accounting signi cant overhead 
set items jij number candidate frequent item sets jp essentially expensive generate test large set candidate frequent item sets 
example set items jxj apriori generate candidate sets huge 
inherent cost candidate set generation matter implementation chosen :10.1.1.3.2424
properties transaction tables section identify basic properties shared transaction tables 
explain properties synthetic transaction table relational data model 
section introduce rst order knowledge base solution association rule mining problem 
set items possible item sets set identi ers threshold 
item set table scheme jsj 
item set table admissible tuple subset items exists tuple items 
words possible subset items tuple member frequency table admissible item set table obtained items count tid scheme 
frequent item set table set tuples satis es count threshold property follows 
ff count ff satis es additional interesting properties 
suppose items item set tuple exists ff items items count count count count count min count count 
converse true 
tuples ff necessarily true exists tuple items items items 
exists relation count min count count true 
relationship called anti transitive 
goal rst stage apriori algorithms generate frequent item set table described transaction table note transaction table de ned reality admissible 
rst stage apriori mimics admissibility constructing item sets kth iteration step 
frequent item set table available association rule table computed items items count count count items items expression produces possible rules redundant 
example bh ab ab sa ab ch abc abc ab rules discovered ff sx represent respectively frequency item set item set table count number transactions item set table case contains rule transitive implication bch abc abc sa notice rule logical consequence rst rules derived inference rule item sets 
zh zh recall traditional group relational algebra operator count aggregate function described 
assuming copies available written di erently symbols support con dence inference rule reads follows 
zh zh formalize idea de nition 
de nition set items 
rules zh zh hold 
zh anti transitive rule 
de nition rule respectively minimum support con dence requirements 
redundant derivable rules lemma minimum support con dence thresholds respectively rules zh hold 
rule zh holds min 
proof sketch showing chain violation contradiction inference rule shown 
notice con dence threshold words lemma rule 
redundant anti transitive 
proof sketch showing exist rules imply de nition rule redundant 
frequent item set table item set member chain di ers element modi cation compute rules satis es support con dence thresholds avoids generating redundant rules conf ant cons sup conf items items count count count items items jf challenge preceding discussion aimed demonstrate relational computation association rules possible 
explicit generation power set items able compute frequent item set relation renaming operator de ned 
changes name relation optionally changes names attributes corresponding columns real focus interest 
notice expression optimized assume relational optimizer easily identify opportunity execute suitable optimized expression 
table item set table huge space overhead consequently imposes substantial computational burden method 
furthermore required item set table admissible signi cant restriction input transaction table 
just diculties faced logical characterization data mining considered 
involved acts major bottleneck 
challenge admit arbitrary transaction table able compute association rules explicit generation candidate item sets rst order knowledge base compute relation introduced existing logical constructs 
illustrative example point sale transaction knowledge bases concept association rules knowledge bases best explained called transaction knowledge base 
example database explain intuitive grounds implications knowledge content regard association rules 
consider rst order knowledge base shown gure represents transactions item set fa 
trans trans trans trans trans trans trans trans trans trans trans trans trans transaction database alternatively think set group facts gure aggregate items transaction numbers 
group facts easy see frequency set fa cg appears th transactions 
similarly frequency fag fa dg fb 
closer look show frequency set fag additional subset set fa cg fa dg appears times respectively 
interesting obvious item set fb cg appears exactly times 
notice set intersection item sets fa cg fb appears times respectively yielding frequency fb cg 
observations cumulative ects captured respectively set facts freq cand gure 
suppose interested considering transactions contain sets items shared large set transactions knowledge base support threshold 
take support threshold means consider item sets appear transactions assertions large shown essentially large item sets association rule terminology 
facts large association rules compute greater con dence bc bc bch bc ah group fa cg freq fa cg cand fa cg group fag freq fa dg cand fa dg group fa dg freq fag cand fag group fag freq fag cand fb group fa cg freq fag cand fb cg group fb freq fb freq fb cg mining process generating possible large item sets 
shown facts rules fag fb cg rules fb cg fag large fa cg rules fag fb cg large fag rules fb cg fag large fb cg large item sets association rules implied corresponding support con dence equal respectively 
rules serve important reminders hs hs computing association rules order knowledge bases challenge nd logic program compute facts large consequently facts rules 
pioneering association rules proposed iterative method generates item sets cardinality jij set items pass sets called candidate item sets ck checked see appear minimum support threshold number times 
generating testing candidate item sets immensely expensive inherently procedural task 
procedural method called fp tree proposed avoids generating candidates creating complex data structure :10.1.1.3.2424
goal hand develop declarative means computing association rules candidate generation mine large rst order knowledge bases deductive methods 
turns abstraction declarative computation association rules exists 
require availability aggregate functions 
functions available logic languages prolog deductive database systems ldl coral xsb 
gure entire program called rules needed compute association rules knowledge base predicate trans need stored knowledge base fact 
fact intentional predicate de ned terms extensional predicate 
verify query rules produce rules preceding section apply program rules trans facts gure assuming support group trans total count group inh count group total inh inh inh freq inh inh cand sum freq large cand rules sy large sx large sy sy sx large sz deductive association rule mining system rules 
con dence establishing correctness program intuitive grounds 
formal treatment concepts serve backbone program informal explanation rules 
rule essentially aggregates items transaction predicate refer items pertaining single transaction 
facilitate set operations involving item sets 
second rule gives total number transactions knowledge base calculate support item sets subsequently support con dences generated rules 
rule helps group item sets group facts helps count support computing proportion transactions particular item set appears number total transactions 
rule conjunction computes meet irreducible elements trans database item sets support count zero see section rationale 
item sets related subset superset relationship 
rule says item set inh subset item set inh item set inherit support rule generates sum total supports corresponding item set minimum support threshold rule computes large item sets ltering item sets freq support fall threshold 
rule generates rules minimum con dence large item sets 
note rule generates non redundant rules stipulated de nition 
theoretical basis program rules order appreciate novelty method proposed preceding section theoretical basis example full treatment possible space constraints 
consider transaction knowledge base set items fa 
ensuing discussion examples assume item set natural numbers denotes fact appears exactly transactions appears subset transactions number times called transaction count called total count item set item set having total count equal support threshold called large item set 
method represent transaction knowledge base lattice structure shown gure representing arbitrary abcde bcde abce abcd abc abd acd bcd abe ace bce ade bde cde ab ac bc ad bd cd ae ce de null level level level level level level lattice representation knowledge base item set fa 
lattice top element set items bottom element null set 
item set height lattice jij 
example 
node level lattice degree equal number items ii parents called degree super sets nally iii children called degree subsets ancestors level node level called degree supersets general 
likewise descendants called degree subsets fact descendant denoted notice ancestors descendants di er items 
nodes satisfy additional interesting properties 
example node level di ers child level exactly element children node nodes cu cc level join de ned meet cm min cu cv cm max cu cv 
de ne meet join nodes levels possible level example nodes ab ce meet join 
de nition total count node level height sup set degree supersets 
total count cs sup ts example total count abcd abcd abcd abcde total count acd acd acd abcd abcde 
de nition large item sets node total count null total number transactions support threshold 
large item set null gure nodes dotted line called envelop large item sets insist 
contrast ones line 
note node large item set descendants 
conversely node large item set degree subset descendant 
referred called anti monotonicity property transaction knowledge bases 
interested nding envelop lattice may nodes envelop redundant carry useful information 
goal nd sub lattice envelop redundant nodes 
de nition redundant nodes cu cv nodes cu degree subset cv node cu redundant cu cv cu computable solely cv de nition transaction virtual nodes node called transaction node fact hv ti derivable called virtual node 
lattice nodes envelop satisfy condition 
node envelop transaction node exists node transaction node 
observation indicates need compute entire lattice able compute large item sets nding association rules 
de ne concepts sublattice mapping knowledge base follows 
de nition sub lattice item set lattice subset nodes sub lattice partial lattice involving nodes obtained removing nodes edges exists holds 
example sub lattice knowledge base gure shown gure envelope corresponding support threshold 
abc bce ab ac bc ce null ad mapping knowledge base gure 
de nition mapping transaction knowledge base set items corresponding item set lattice 
distinct set items appearing mapping denoted lk sub lattice 
note mapping example section shown gure 
mapping nodes marked solid rectangle nodes nodes marked dotted ellipses redundant 
nodes dotted line large item sets 
notice node bc large item set member ad bce included set large item sets assuming support threshold 
basically compute nodes abc bc results guarantee proposed computations correct intended sucient 
lemma lk mapping transaction knowledge base 
nodes lk degree subset node total count node higher node transaction nodes proof sketch showing subset transaction nodes non zero transaction count 
transaction count greater transaction count de nition total count corollary lk mapping transaction knowledge base 
nodes lk degree subset node node redundant total counts identical node virtual 
proof sketch showing non redundancy impossibility 
corollary lk mapping transaction knowledge base 
nodes lk degree subset node total count node equal total count node virtual proof sketch follows directly lemma 
corollary lk mapping transaction knowledge base 
virtual node lk non redundant common descendant transaction nodes lk proof sketch follows fact total count higher transaction nodes inherit counts transaction nodes 
lemma corollaries suggest safe prune mapping knowledge base remove redundant virtual nodes 
recall virtual nodes exists parent node identical total count redundant virtual node parent 
needless say transaction nodes non redundant may large item set 
lemma essentially captures anti monotonicity property frequent item sets literature terms total counts framework 
lemma lk signature mapping transaction knowledge base 
jk nodes lk jm degree supersets node proof sketch showing total count child node equal parent item set lattice sum total parents 
suciency correctness rules proceed show rules program rules sucient correctly compute large item sets association rules 
transaction knowledge base know sucient compute total counts transaction nodes lemma corollary know avoid computing virtual nodes redundant corollaries know compute non redundant virtual nodes appear compute total counts transaction nodes follows 
rule compute group facts refer transaction set items item time 
frequency proportion exact distinct item group parameter computed rule accomplished count transaction ids group transactions exactly item sets 
rule possible inherit transaction counts superset transaction nodes transaction node supersets subsequently summed rule lemma knowledge base rules rules compute total count transaction nodes 
proof sketch showing rules collect subsets inclusive superset node transaction node transaction node carries superset transaction count 
grouped summed gives total count node 
unfortunately computing signature counts transaction nodes sucient demonstrated example gure may non redundant virtual nodes interest 
scenario occur pair transaction nodes common descendant transaction node gure 
nodes redundant corollary 
furthermore transaction nodes related degree subsets relation 
observations follow lemma corollaries 
non redundant virtual nodes appear knowledge base compute explicitly 
expression rule computes total count nonredundant virtual nodes nding intersection pair transaction nodes related relationship 
lemma knowledge base rules compute total count non redundant virtual nodes 
proof sketch showing expression collects non redundant virtual nodes lemma proof follows 
theorem follows immediately 
theorem transaction knowledge base minimum support threshold 
rules correctly compute non redundant association rules entailed prove theorem need theorem establishes fact set large item sets subset transaction nodes non redundant virtual nodes mapping dicult prove 
theorem suciency transaction knowledge base minimum support threshold 
set transaction nodes non redundant virtual nodes sucient nd non redundant large item sets multiset processing normally expect system rules ne breaks practical cases 
situation explained example gure 
recall expect system compute freq facts shown leftmost column gure facts group rules bottom deductive database keep distinct facts set semantics produce set shown middle column gure 
process system throw away boxed fact rst column ultimately produce boxed cand fact shown rightmost column re ecting incorrect computation support item set fag 
freq fa cg freq fa cg cand fa cg freq fa dg freq fa dg cand fa dg freq fag freq fag cand fag freq fag freq fag cand fb freq fag freq fb cg cand fb cg freq fb freq fb cg incorrect execution due set semantics datalog 
remedy system peculiarity modify rules system follows 
critical observation freq fact contributes support count item sets redundant predicate may identical predicates 
issue force database system treat facts multisets bag start processing rule set adopt multiset semantics simulate 
freq facts derived unique transactions knowledge base exploit fact utilize system de ned interpreted function generate new id time freq fact created include argument freq shown gure 
way able force inclusion derivation predicate unique due inclusion unique id argument count contributions 
accomplish goal modify freq inh inh cand sum freq modi ed rules simulates multiset semantics datalog 
rules obtain rules shown gure 
rules system de ned function called returns unique identi er time called 
notice rules rules rules recursive safe 
furthermore important maintain set semantics complete processing rules need unique derivations meet irreducible elements inh 
modi ed system rules behaves expected computes correct support item sets knowledge base including example knowledge base important note arti cial proposed simulate multiset operation set framework function necessary systems including coral deductive database systems 
example coral supports multiset relations bags multiset declaration 
grouping set valued terms allowed coral 
system works reader may noticed rules system rely generating candidate item sets way apriori 
apriori rely level wise computation 
uses critical observations systems fail notice summarize critical observations exploit system 
observations follow formal properties transaction knowledge bases section section 
item sets large computed database principal ways 
appear transactions knowledge base computable transactions follows item sets transaction table related subset superset relationship intersect produce intersection virtual nodes item set lattice meets 
intersection nodes turn intersect meet irreducible elements 
subset intersection nodes large item sets 
elements generated knowledge base computing xpoint pairwise intersection elements transaction knowledge base 
need generate zaki similar observations closed sets concept lattices 
important di erences observations manner utilize observations 
observations techniques rely search algorithm charm essential order compute called closed sets completely procedural 
candidate item sets arti cially way apriori 
possible item sets large item sets redundant computed large item sets types sets computed 
observations intuitively understood example 
consider knowledge base shown gure 
trans trans trans trans trans trans trans trans trans trans trans trans trans trans new knowledge base 
application rules produce group inh facts shown gure 
group fa cg inh fa cg group fa dg inh fa dg group fd inh fd group fa dg inh fa dg group fa cg execution trace 
conventions lattice building previous sections construct mapping gure item set lattice corresponding example knowledge base gure 
notice gure node ab intersection nodes abc abd inherits transaction count ancestors abc abd record total count 
notice transaction count zero virtual node appearing created intersection 
recall total count virtual node parents created 
fact higher parents count refer lemma 
de ac acd ad abc abd bd cd ab null bc acd ad transaction nodes intersection transaction nodes redundant nodes meet irreducible element envelope envelope mapping knowledge base 
furthermore intersection transaction nodes abc abd acd cross level item sets ab ac ad intersections produce meet largest possible common subset parents 
particular intersection nodes yield produce need take round intersection new intersection nodes produced rst round 
turns meet irreducible element mapping intersection involving required 
general need compute xpoint pairwise intersection process compute intersection nodes set generated nal stage meet irreducible elements 
xpoint computation generate nodes ab ac ad abd acd rst round 
particular xpoint compute nodes bc shown called envelope gure 
recall node envelope large item set 
consequently envelope example assumes support large item sets 
notice node identical total count non redundant parent ab redundant node computing generating node result loss information infer ab case need 
generate redundant large item sets rules systems works just ne 
wish create large item sets similar apriori add rule achieve goal explicitly compute view large 
addition rule essentially copies count large item set subsets exist large item set trick 
large large large subtle issue point 
consider mapping shown gure corresponding knowledge base shown removed redundant nodes shown transaction intersection virtual nodes 
rst glance may think possible compute total count nodes item sets level wise manner save time redoing certain computations 
example consider computing total count node abc recall initially node abc read abc 
assume compute abc abc abcd adding total count abc abcd 
recall abc re ects fact abc appears twice database abc represents fact abc appears twice database transaction appears sub item transaction abcd 
assume moment compute total count node fashion starting node abcd level wise fashion compute total count node adding total counts parents 
third level top compute node counts ac add total count parents giving 
seen gure count really accurate 
discrepancy resulted added total counts parents transaction counts ancestors compute total count node ac 
notice count corresponding ac abcd accounted twice node ac distinct branches shown 
similarly continue scheme compute node reality correct total count 
ac ac abd null abcd abc acd ab ac ad mapping new database showing incorrect inheritance transaction count total count parents compute total count lower level nodes transaction count 
rule system worked correctly inherited transaction counts freq rules node related subset superset relationship rst generating intersection node initializing transaction count zero rule intersection node inherit transaction counts subset superset relationship ancestors 
added transaction counts grouping operation followed count operation de nition total count node 
breaking barrier highlight observations early section critical developing model theoretic declarative characterization large item set computing process depend procedural concepts candidate generation 
observation need generate test intersection nodes helped visualize process sort cartesian product knowledge base compare transaction tuple tuples knowledge base see unrelated relationships 
recall pairs potential contributors intersection node 
xpoint intersection process helped know computed meet irreducible elements intersection nodes exists 
works investigated issue declarative association rule mining sql 
works specially attempt simulate apriori sql giving rise complicated awkward method 
exploit inherent declarative properties transaction databases identi ed 
inherent proposed expressions appears major bottleneck 
obviously possible develop operators hide complexity expressions system awkward unnatural procedural may eciency related drawbacks 
furthermore specifying semantics procedural terms compromise query optimization aspects system 
reason loss opportunity fact process coded sql database system consider local optimization query expression having global view intention 
big chance encoded procedure may best way compute rules depending database instance 
furthermore understand proposals require potentially large number name generation relations attributes 
names needed usually database dependent possibly gathered query time 
additional process needs completed gather variables actual computations optimization issues intellectually challenging develop declarative expression association rule mining deductive databases open issues great promises resolution 
worst case xpoint needs generate tuples rst pass database size theoretically happen transaction database produces intersection node related subset superset relationship 
second pass need computations 
question avoid generating scanning combinations lead useful intersections 
example node gure redundant 
signi cant di erence apriori systems system generates item sets top lattice large item set consideration 
apriori hand generate node subsets large item sets prunes large set nodes 
optimization techniques exploit called anti monotonicity property item set lattices similar apriori di erence setup 
key issue push selection threshold minimum support inside top computation nodes lattice method 
moment sake discussion consider higher support threshold database gure 
envelope shown lighter dashed lines gure nodes line large item sets 
notice discard nodes ad 
raises question possible utilize support con dence thresholds provided query prune candidates intersection 
ideas similar magic sets transformation may borrowed address issue 
problem pruning node depends support count may come stage 
nodes may computed pushing selection conditions inside aggregate operator may non trivial 
special data structures indexes may aid developing faster methods compute ecient intersection joins utilized 
leave questions open issues taken 
fortunately vast body research optimizing datalog programs including recursive programs new questions research recall proposal requires express mining problem system queries update statements utilizes information database contents achieve functionality 
challenges proposal raises declarative mining may exploit advances 
needless emphasize declarative method preferably formal desirable understand functioning system able select appropriate procedures depending instances compute semantics program know intended establish equivalence declarative procedural semantics system 
fortunately numerous procedural methods computing association rules complement terms speed database instances 
fact declarative systems buy choice ecient accurate processing possible 
primary goal demonstrate mining association rules rst order knowledge base possible declarative way help special tools machinery intuitive simple program 
shown possible mine declarative knowledge exploiting existing machinery supported contemporary inference engines programming languages prolog knowledge base systems xsb ldl coral 
require engine able support set valued terms grouping aggregate functions set relational operators comparison functionalities systems currently support 
demonstrated formalism grounded mathematical foundation formal properties semantics rules system rely 
raised open issues related eciency query optimization order business 
research plan develop optimization techniques mining queries require non trivial look ahead pruning techniques aggregate functions 
developments signi cant implications 
example possible compute chi square rules building blocks provided system 
declarative computation chi square rules knowledge attempted procedural concepts computation chi square method relies 
separate show counting method proposed ectively utilized generate expectations needed order compute rules easily 
issues plan address near 
motivation importance need integrating data mining technology relational databases addressed articles 
convincingly argue integration data mining technology may nd viable position years come 
successful feasible tool analysis business data relational databases technology available part database engines part declarative query language 
proposal declarative mining bears merit sheds light rst order databases mined declarative procedure independent way optimization issues delegated underlying database engine 
arguments accepted systems related issues prime candidates immediate attention 
example traditionally database systems supported declarative querying necessity care queries 
demonstrated association rule mining viewed datalog query 
immediate direct mapping datalog expressions sql developed problem 
rely ecient database processing query optimized fashion 
come close essence visions expressed leading database researchers 
rakesh agrawal ramakrishnan srikant 
fast algorithms mining association rules large databases 
vldb pages 
anonymous 
declarative method mining rules deductive databases 
technical report department computer science anonymous university usa february 
beeri ramakrishnan 
power magic 
proceedings th acm symposium principles database systems pages 
sergey brin rajeev motwani craig silverstein 
market baskets generalizing association rules correlations 
proc 
acm sigmod pages 
ldl system prototype 
ieee journal data knowledge engineering 
jiawei han jian pei yin :10.1.1.3.2424
mining frequent patterns candidate generation 
proc 
acm sigmod pages 
marcel martin kersten heikki mannila hannu toivonen 
perspective databases data mining 
proc 
sixth acm sigkdd intl 
conf pages montreal quebec 
flip korn yannis kotidis christos faloutsos 
ratio rules new paradigm fast quanti able data mining 
proc th vldb pages 
brian lent arun swami jennifer widom 
clustering association rules 
proc th icde pages 
liu 
typed extension datalog sets tuples 
john lloyd editor proceedings th international logic programming symposium pages portland oregon december 
mit press 
rosa meo giuseppe psaila stefano ceri 
extension sql mining association rules 
data mining knowledge discovery 
amir surajit chaudhuri je usama fayyad 
integration data mining database technology 
proceedings th vldb pages 
amir surajit chaudhuri usama fayyad je 
integrating data mining sql databases 
ieee icde 
raymond ng laks lakshmanan jiawei han alex pang 
exploratory mining pruning optimizations constrained association rules 
proc 
acm sigmod pages 
jong soo park ming chen philip yu 
ective hash algorithm mining association rules 
proc 
acm sigmod pages 
rajamani alan cox bala iyer atul :10.1.1.3.2424
ecient mining association rules relational database systems 
proceedings international database engineering applications symposium pages 
ramakrishnan srivastava sudarshan 
coral control relations logic 
proc 
th vldb conference pages 
sagonas swift david scott warren 
xsb ecient deductive database engine 
proc 
acm sigmod intl 
conf pages 
sunita sarawagi thomas rakesh agrawal 
integrating mining relational database systems alternatives implications 
proc 
acm sigmod pages 
savasere edward omiecinski navathe 
ecient algorithm mining association rules large databases 
proc th vldb pages 
pradeep shenoy jayant sudarshan gaurav bawa shah 
turbo charging vertical mining large databases 
acm sigmod pages 
abraham silberschatz henry korth sudarshan 
database system concepts 
mcgraw hill third edition 
thomas sunita sarawagi 
mining generalized association rules sequential patterns sql queries 
kdd pages 
ullman 
principles database knowledgebase systems part ii 
computer science press 
mohammed zaki 
generating non redundant association rules 
proc 
th acm sigkdd intl 
conf boston ma august 

