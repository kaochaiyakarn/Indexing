peer peer caching schemes address flash crowds petros maniatis mary baker computer science department stanford university stanford ca usa maniatis cs stanford edu stanford edu flash crowds web site performance 
infrequent unpredictable floods justify cost traditional commercial solutions 
describe backslash collaborative web mirroring system run collective web sites wish protect flash crowds 
backslash built distributed hash table overlay uses structure overlay cache aggressively resource experiences high request load 
redirecting requests resource uniformly created caches backslash helps alleviate ects flash crowds 
explore cache di usion techniques system find probabilistic forwarding improves load distribution albeit dramatically 
flash crowds bane web masters web explosion mainstream popularity 
term flash crowd describe unanticipated massive rapid increase popularity resource web page lasts short amount time 
long term ects hardly noticeable short term flash crowds incur high loads web servers gateway routers links 
render ected resources collocated resource unavailable rest world 
flash crowds relatively easy cause 
mere mention interesting web page address popular news feed result instant flood lasts long attention span news feed audience 
fact flash crowds commonly referred slashdot ect name popular news feed caused quite floods stories 
concept malicious flash crowd certainly realm possibility intent ect usually impossible distinguish real time 
practice important understand adapt ciently changing resource demands distribute unexpected high load available resources regardless intent 
commercial solutions previously addressed problem popular sites large corporations extensive web presence 
companies akamai earn income distributing load highly web sites geographically dispersed network advance 
akamai solution focuses primarily proprietary networks strategically placed dedicated caching centers intercept serve customer requests flood 
sites non profit organizations schools governments generally expect flash crowds cost high profile content distribution solution akamai justifiable 
sites currently recourse pay price occasional disastrous flash crowd including unavailability prolonged recovery isp penalties loss legitimate desirable tra purpose introduce motivate describe evaluating backslash web content distribution system peer peer overlays 
backslash collaborative scalable web mirroring service run maintained collective content providers expect consistently heavy tra sites 
relies content addressable overlay self organization participants routing requests load balancing :10.1.1.140.3129:10.1.1.105.3673:10.1.1.115.4299:10.1.1.28.5987
remainder identify requirements system design detail 
focus caching aspects backslash limit scope evaluation section cache di usion issues 
conclude research agenda area 
system requirements section outline basic requirements web mirroring system 
backslash intended drop replacement current web servers reverse proxy caches 
driving requirement development deployment completely transparent client web browsers 
setting hope deploy system example collective universities research institutions possibly 
institution backslash connected low pc grade computer time writing pentium ii class computer mb ram su ce 
node node links bandwidths mbps latencies ms 
client node link characteristics range kbps modems cable adsl home connections 
node stores complete copy data collection published hosting site stanford backslash node holds entire web collection www stanford edu web site free storage caching 
expect available free space small multiple say times local collection size 
objective backslash er fair load distribution face flash crowds 
primary interest limit load participating node overwhelm distributing requests participants possible 
consider task identifying penalizing documents consistently exhibit disproportionately high popularity scope 
similarly ignore security implications malicious backslash nodes early stage 
ignore problems mirroring dynamically generated content 
problem mirroring static content formidable context 
consequently tackle harder problem dynamic content 
design sections describe design backslash high level 
backslash bridges gap resource location subsystem traditional browser server relationship section 
describe resource location subsystem peer peer distributed hash table paradigm section 
go cache di usion detail section 
redirection backslash node primarily regular web server document collection hosting site 
normal mode operation long request load perceived node manageable backslash node little normal web server 
increased request load perceived backslash node switches special modes operation pre overload mode node sees high load overwhelmed overload mode node nearly overrun requests 
pre overload mode operation node satisfies requests arrive subsequent requests associated resources embedded images away 
overload mode node redirects requests receives surrogate backslash nodes serves content 
node locally defined load thresholds determine boundaries normal pre overload overload modes 
backslash nodes di load directed flooded document collection url rewriting 
node pre overload mode overwrites embedded urls documents returns divert subsequent follow requests 
requests example embedded images directed surrogate backslash nodes 
url rewriting takes advantage stages web requests commonly consist dns lookup request 
fact backslash node runs simplified dns server intercept dns requests caused url rewrites 
types url rewrites goal cause client browser look flooded document 
dns rewrite accomplishes directing dns lookups hostname rewritten url backslash dns server 
example original url www backslash stanford edu image jpg rewritten backslash berkeley edu www 
backslash stanford edu image jpg redirect requester surrogate backslash node berkeley denotes base encoding sha hash entire original url 
similarly rewrite accomplishes thing naming specific surrogate ip address rewritten url 
example original url www backslash stanford 
edu image jpg rewritten www 
backslash stanford edu image jpg ip address backslash node berkeley 
functionally similar rewrite techniques di erent performance implications 
dns rewrite overlap document location task triggered intercepted dns request surrogate node tcp client connection establishment follows 
hand dns requests result long latencies high loss environments udp time outs especially wireless clients 
result embedded links served client browsers coming nearby network locations dns rewriting rewriting remote clients local policy 
url rewriting option specifically case request overloaded node particular client plain redirection dns 
example mini dns server responsible backslash stanford edu domain backslash node return ip address surrogate node asked record www stanford site overload mode 
similarly redirection uses redirect responses cause browsers retry request rewritten url 
combination url rewriting redirection allows unaware client browsers reach unloaded surrogate backslash node serve requests 
explain surrogate backslash nodes serve requests content sites collections section 
resource location surrogate backslash node received request document site act gateway client browser collaborative mirroring portion backslash 
mirroring implemented peer peer overlay distributed hash table paradigm 
systems category implement hash table large number self organized nodes :10.1.1.140.3129:10.1.1.105.3673:10.1.1.115.4299:10.1.1.28.5987
node responsible chunk entire hash table 
hash function table uniform regardless distribution resource names stored resources distributed uniformly hash space 
long chunks hash space assigned participating nodes roughly equal size node maintains roughly equal portion resources stored distributed hash table achieving load balancing 
backslash specifically implemented content addressable network rely specifics operation :10.1.1.140.3129
overlay underneath backslash interchangeable distributed hash table 
addition hash table operations backslash requires knowledge neighborhood overlay node popular systems easily modified export information apis 
caching replication distributed hash table explains find copy popular document backslash web mirror explain copy created propagated system 
section explain basic cache di usion techniques explore context backslash 
backslash node available storage caching times size local document collection 
storage split categories replica space temporary cache space 
hand replica cached copy document guaranteed placed 
replicas placed overlay insertion operations distributed hash table 
temporary cache hand cached copy document placed opportunistically node overlay speed subsequent retrievals 
temporary caches created response retrieval operations distributed hash table guaranteed remain placed 
fact replaced soon created temporarily cached document node 
fixed portion available free space node allocated replica space 
remains unused replica space remainder free space allocated temporary cache space 
backslash replica space exclusively copy file participating mirrored web collections 
backslash node periodically injects documents local document collection distributed hash table 
single copy document created insertion time replica 
cache di usion schemes explore remainder create replicas 
cache di usion method consider local di usion 
local di usion node serving document replica temporary cache monitors rate requests receives document 
node determines request rate reached predetermined push threshold pushes new temporary cache document overlay hop closer source request 
technique aims offload demand having nodes locality observed flood intercept serve requests 
sense node observes local flood creates bubble temporary caches di load neighborhood 
diameter bub ble grows relation intensity flood node perimeter bubble observes high request rates document 
second cache di usion method consider directory di usion 
method distributed hash table stores directories pointers document copies document copies 
replicas temporary caches stored backslash nodes location related hash table structure 
node receives newly inserted document creates directory picks random backslash node stores replica document node documenting directory 
directory receives request document returns permuted directory entries pointing individual copies document fit single response packet 
create new temporary caches directory node monitors request rate document 
request rate reaches predetermined threshold directory responds requester invitation new temporary cache list pointers copies file 
cache di usion techniques require node serve request holds copy requested document 
explore modification requirement node may choose random forward request holds copy requested document 
allows node shed probabilistically fraction request load observes creating new temporary caches 
introduce variation called probabilistic forwarding increase reuse existing caches curtail creation new ones 
especially case local di usion method requests originating outside bubble handled nodes perimeter leaving caches inside bubble practically unused 
probabilistic forwarding enables caches interior 
evaluation preliminary evaluation orts focused behavior cache di usion techniques 
mechanisms responsible backslash protocol stream unaware client browsers delineated section building simple self maintained overlays pointed section available pose significant challenges purposes target application 
experimental setup involves nodes participating single dimensional overlay 
node twice size collection available free space exactly half allocated replicas half temporary caches 
simplicity document collection owned node consists single document documents exactly size 
brief preliminary exploration particular design choices cache di usion mechanism di usion agility probabilistic forwarding 
di usion agility speed backslash reacts new flash crowd 
highly agile di usion mechanism spreads cached copies flooded document rapidly reach state requests document served collectively nodes possible 
high agility carries early commitment heavy resources storage space cache di usion bandwidth flood necessitate 
controlling agility allow system moderate amount resources commits particular flood 
represent agility parameter push threshold number requests node serve decides push neighbors copy flooded file 
push threshold means time backslash node receives request pushes copy requested file neighbor forwarded request caching 
push threshold means node pushes new cache requested file th request 
illustrate ects push threshold simulated scenario floods handled time backslash 
flood starts manages saturate system causing copy flooded file placed node 
saturation flood ongoing second flood begins gradually displacing cached copies file copies second file 
second flood terminates allowing file saturate system 
shows di usion evolves scenario push threshold 
note agility high system responds rapidly changes ered load 
benefits lower push thresholds illustrated 
graphs cumulative load distribution system short second flood representative thresholds 
hand threshold second flood causes higher load requests node 
hand highest threshold nodes participate caching second file time maximum node load reaches requests 
higher agility satisfaction requests second file expensive 
request caches diffusion threshold second push threshold cache pushes vs push threshold max load group size request load file thres 
thres 
thres 
max load group size request load second file thres 
thres 
thres 
simultaneous flash crowd scenario discussed text 
cache di usion evolution scenario 
number cache pushes function push threshold 
cumulative load distribution requests served function number requests served node long flood second short flood respectively 
number requests satisfied higher thresholds result fewer cache pushes face contention 
graphs total number cache pushes function push threshold 
threshold results cache pushes mainly due oscillations caused contention second files 
hysteresis introduced highest threshold mitigates ect indicated tenfold reduction cache pushes shown graph 
note actual point benefit lower threshold justifies cost specific underlying topology resource restrictions backslash participant temporarily high load justified lower tra described section local di usion cached copies flooded document inside cache bubble requests initiated locally caches perimeter bubble locally requests initiated outside bubble 
perimeter caches hotter internal bubble caches 
explore probabilistic forwarding method spread load perimeter incurred requests initiated outside bubble nodes bubble 
probability function assigns linearly decreasing forwarding probability bubble node path external request originator authority node 
way cache perimeter bubble maximum forwarding probability experiments 
subsequent hop nodes center bubble decrease forwarding probability proportionally get closer center 
expect see better load distribution nodes bubble result technique 
show ects probabilistic forwarding single flood 
calibrated push threshold probabilistic run achieve similar di usion patterns runs see 
surprisingly initially expected probabilistic forwarding distribution load nodes caches flooded file graph shows small improvement specifically slightly lower load nodes slightly fewer higher load nodes 
ascribe surprising result monolithic fashion measure load simulations 
conjecture cumulative load node duration experiment little ected probabilistic forwarding distribution load time single node improves bursty case 
deterministic forwarding creates high bursts load perimeter bubble nodes service requests 
reaching threshold bubble expands outward new perimeter services incoming requests 
node longer perimeter bubble receive requests outside load drops significantly 
probabilistic forwarding allows interior nodes continue servicing requests longer perimeter bubble 
results similar floods equal intensity compete 
shows di erence load distribution probabilistic forwarding simultaneous floods 
probabilistic forwarding evens load distribution favor lower loads ect quite significant anticipated 
hope experiment di erent forwarding probability functions achieve pronounced benefit 
preliminary evaluation cache di request caches diffusion flood standard probabilistic max load group size request load flood standard probabilistic request diffusion floods file standard probabilistic max load group size request load floods file standard probabilistic ects probabilistic forwarding flood concurrent floods equal intensity 
graph cache di usion evolution experiments achieved calibrating push threshold probabilistic experiments standard experiments threshold 
show cumulative load distributions flood scenarios probabilistic forwarding 
sion backslash 
hope perform thorough analysis near 
related shares goals pioneering done adaptive web caching project 
local di usion method similar di usion method awc 
awc ers benefits proxy cache backslash replaces reverse proxy cache 
lot done building overlay networks follow distributed hash table paradigm :10.1.1.140.3129:10.1.1.105.3673:10.1.1.115.4299:10.1.1.28.5987
results area extensively 
set extensions content addressable web proposed 
backslash certainly benefit extended functionality ered 
exists need cost ective method combat flash crowds 
backslash addresses problem preliminary results promising method mitigating flash crowd ects 
steps research involve deeper exploration di erent forwarding probability functions interactions aspects cache diffusion development hybrid local directory diffusion method exploit benefits methods closer cooperation cache invalidation scheme higher fidelity simulation trial deployment plan 
acknowledgments started summer internship project icsi center internet research guidance mark handley scott shenker sylvia ratnasamy 
grateful motivation guidance feedback provided formulation research 
thankful generous funding received stanford networking research center darpa contract 
adaptive web caching project 
irl cs ucla 
edu awc 
content addressable web 
com 
kubiatowicz bindel chen czerwinski eaton geels gummadi rhea weatherspoon weimer wells zhao oceanstore architecture global scale persistent storage 
proceedings asplos cambridge ma usa nov pp 

ratnasamy francis handley karp shenker scalable content addressable network :10.1.1.140.3129
proceedings sigcomm san diego ca aug acm sigcomm pp 

rowstron druschel pastry scalable distributed object location routing large scale peer peer systems :10.1.1.140.3129
proceedings ifip acm middleware heidelberg germany nov 
stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications 
proceedings sigcomm san diego ca aug acm sigcomm pp 

