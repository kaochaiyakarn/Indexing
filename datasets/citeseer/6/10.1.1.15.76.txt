tql query language semistructured data ambient logic luca cardelli microsoft research cambridge uk giorgio ghelli universit di pisa pisa italy received may revised apr ambient logic modal logic proposed describe structural computational properties distributed mobile computation 
structural part ambient logic essentially logic labeled trees turns foundation query languages semistructured data way order logic fitting foundation relational query languages 
define query language semistructured data ambient logic outline execution model language 
language turns quite expressive 
strong foundations equivalences hold ambient logic helpful definition language semantics execution model 

unstructured collections unstructured data collections respect predefined schema need carry description structure 
called semistructured recognize degree homogeneity 
partial regularity semistructured collections amenable accessed query languages query languages designed access fully structured databases 
new languages needed able tolerate data irregularity query time data structure 
semistructured collections usually modeled terms labeled graphs labeled trees abiteboul 
ambient logic modal logic proposed describe structural computational properties distributed mobile computation cardelli gordon 
logic comes equipped rich collection logical implications equivalences 
structural part ambient logic essentially logic designed describe properties labeled trees 
foundation query languages semistructured data way order logic fitting foundation relational query languages 
giorgio ghelli luca cardelli tql query language semistructured data ambient logic 
language turns quite expressive tql query nesting comprehensions operations built logical formula expressed tree logic 
fact tree logic naturally express types constraints semistructured data opens interesting possibilities 
nutshell problems subtyping constraint implication constraint satisfiability query correctness query containment special cases validity problem logic 
holds combinations query containment presence constraints query correctness presence subtyping 
high level expressiveness logic allows describe complex types constraints 
example type constraint languages proposed hosoya buneman easily translated tree logic 
course full power logic aspect static query analysis correctness containment subtyping 
undecidable validity tree logic formula undecidable general 
believe decidable subsets logic defined expressive encode interesting type constraint systems 
search decidable subsets right balance expressiveness cost open problem results field emerging cohen 
unified framework types constraints queries central long term aim tql project currently just steps direction 
introduce query language tql examples full formal definition define formal execution model basis current tql implementation 
structured follows 
section preview query language 
section define tree data model 
section logic query language section 
section briefly discuss represent types constraints tql logic 
section evaluation model 
section compare tql related proposals 
section draw 

tql examples 
simplest queries tql examples 
standard queries borrowed xmp cases 
tql queries evaluated respect global environment defined user variables bound local remote xml files 
assume variable bib bound document available tql di unipi tql xml contains bibliographic entries fragment written tql syntax bib book year title tql query language semistructured data author serge abiteboul author dan suciu author peter buneman publisher price book year title author serge abiteboul author richard hull author victor vianu publisher addison price book year title editor peter buneman publisher springer price 
format bib stands element tagged bib contents concatenation elements generally sets elements 
tql notation different xml tql intended language query semistructured data general unordered trees labeled edges xml just way construct trees tagged elements attributes build labeled edges 
basic tql query select subject data source matched formula result expression 
matching returns set bindings variables free evaluated bindings concatenation results evaluations result query 
example consider tql query returns titles books written evaluated environment bib bound specified bib bib book year title select title formula bib book year title logical formula read path bib book reaches place matches year title place find giorgio ghelli luca cardelli path year leading path title leading shall call 
tql di unipi tql xml contains books year titles query computes set bindings subquery title evaluated binding yielding result title title 
formula reads exists element contents satisfy defined terms primitive operators truth horizontal splitting element matching 
element formula matches element document matches trees 
provided matches formula matches 
truth formula matches tree 
formula matches iff equal modulo reordering matching matching 
example tree formula pairs match provided bound date title idb author date year author title idb year title idb year title idb author date year author author date author formula lines read author equivalent author fourth pair matches empty tree matches 
reason take primitive define abbreviation decomposition operator expressive derived step operator analyze horizontal structure tree 
example query matching formula year book return book year year 
abbreviates bib bib book year select books possible bindings corresponding contents book year edge result title author serge abiteboul 
title editor peter buneman 
examples match variables trees tql variable matched tag 
example query returns tag inside book tagging element contains serge result author tql query language semistructured data bib bib book tag serge select tag convention lowercase initials variables bound tags uppercase initials variables bound trees 

matching logic tql logic dialect ambient logic contains structural operators 
structural operators 
express matching conditions combine conditions quantify variables 
example condition query requires existence title field field containing springer author editor path leading buneman 
bib bib book title exists springer author buneman editor buneman select title pattern exists common deserve abbreviation read match label 
conjunction disjunction existential quantification languages 
tql full power order logic express universal quantification negation arbitrary formulas 
discussed 
tql logic includes recursion operator example define derived path operator matches path arbitrary length formally described section 
example query finds nesting depth publication pub suciu plays role role 
returns title publication field suciu appears preserving tags 
bib pub title role lastname suciu select pub title role dan suciu 
restructuring data source tql subquery appear tree expression expected 
feature exploited nesting structure query order describe nesting exists springer dots belongs exists second belongs springer means springer giorgio ghelli luca cardelli structure result 
example data source entry book containing list authors 
restructure obtain entry author containing list books 
structure result visualized follows indicates arbitrary repetition structure author 
book observe structure reflected structure query select 
bib bib book author select author bib bib book author select book query performs nested loop 
binding different author returns edge author book book book 
book 
result inner query contains book element book author previous example extract input book fields author 
query exemplifies double role variables inside formulas 
outer formula provides bindings satisfy outer condition inner formula evaluated binding provides bindings bind satisfy inner condition 
may say occurrence binds verify binding 
formalized 

checking schema properties key constraints section show tql check structural properties semistructured data 
closed formula expresses property interest check running query select success query returns edge labeled success holds empty tree 
example consider query verifies tag title mandatory book elements bib document 
bib bib book title select title mandatory formula book title means case exists book contents contain title book contains title 
tql features operator defined directly query 
book title abbreviation book title means book title 
tql query language semistructured data bib bib book title select title mandatory formula dual sense dual dual 
tql primitive operator derived dual implies negation pushed inside operator 
rewrite query atomic formulas negated 
fact negation appears query cases tql optimizer pushes atomic formulas tree variables tree emptiness comparisons negation quite expensive 
reason claim unlimited negation important feature tql see little explicit negation examples 
query verifies title appears twice field showing express horizontal properties 
bib bib book title title select title appears twice important property tag key 
possible generalizations relational notion key semistructured case 
statement example says title mandatory field impossible find separate books title precisely title common 
operator express fact distinct subtrees title 
traditional logical approaches order modal logics need notion node identity world identifier order express existence distinct nodes satisfy property 
bib bib book title foreach book title book title select title key course system knows bib satisfies bib book title knowledge implies bib book title foreach book title book title equivalent bib bib foreach book title book title 
properties bib book title easily derived type declaration expressed tql logic see section equivalence simple consequence rules section 
comment point kind optimization exploited current implementation tql 
query checks bib element contains elements labeled book asking tag inside outer bib equal book 
giorgio ghelli luca cardelli bib bib foreach implies book select book inside bib query rewritten path operators follows bib bib book select book inside bib book tag expression stands tag different book 
book means exists subelement tag different book 
book means exists subelement tag different book 

extracting tags satisfy property tql query tag variable appear tag appear 
take query checks title key substitute title follows bib bib book foreach book book select key query formed returns set book content key set books 
instance general property tql 
query checks property tag substitute tag variable obtain query finds set tags satisfy set finite implementation compute 
unique property due fact tql constraint appearance free variables formulas 
example query universal quantification foreach formula free variable aware query languages quantification open formula allowed 
query evaluation algorithm exploit allow kind quantification non standard quite sophisticated 
described 
query languages kind generalization definitely trivial 
example xquery modify structure query example adding outer clause bind variable replaces tag 
similar generalization performed queries check label mandatory occurs inside 
query produces dtd input xml file modulo ordering 
query extracts tags database lists labels may appear distinguishes ones may repeated ones appear 
query may look sight just generalization simple queries 
extract tags appear tag 
contain subtag tag 
tag return structure tql query language semistructured data tag mandatory optional list non list computes partitions divides mandatory optional tags second divides list repeatable vs non list 
subtag mandatory case find tag subtag inside tag subtag 
subtag optional tag element subtag inside subtag inside tag subtag tag subtag 
subtag list subtag tag element appears twice tag subtag subtag 
subtag non list subtag appears tag subtag appears twice tag subtag subtag 
query defined database parts 
parts tag select tag mandatory parts tag subtag select subtag optional parts tag subtag tag subtag select subtag list parts tag subtag subtag select subtag non list parts tag subtag tag subtag subtag select subtag 
recursion tql logic includes recursion operators rec similar operators minimal maximal fix point modal logic 
traverse arbitrarily deep paths generalizing operator seen express recursive tree properties 
consider example formula rec binary 
binary binary giorgio ghelli luca cardelli formula describes binary tree defined empty tree tree children binary 
query features combination horizontal analysis vertical recursion 
order check tag tt appears split source edge tt appears rest tt appears 
edge tt appears immediately tt appears inside tt 
formula looks rec 
tt tt actual query expressed tt source rec 
tt tt tt tt select substituting tt variable get query computes tags appear 
queries section written checked tql implementation 
running queries realistic pieces data requires prototype quite long time 
surprising current implementation proof concept aimed showing language implemented 
remains done query optimization 
hope reader curious complete formal definition tql 
theme sections 

tql data model represent semistructured data information trees 
section define information trees give syntax denote define equivalence relation determines different expressions denote information tree 
syntax sense semantics information trees corresponds spatial subset ambient calculus ambients actions cardelli gordon 

information trees section formally define unordered edge labeled trees nested multisets course model unordered labeled trees 
ordered trees represented nested lists 
option impact logic symmetric operator replaced asymmetric change simplify aspects logic stick original notion unordered trees cardelli gordon 
set labels define set information trees ranged smallest collection empty multiset notation tql query language semistructured data singleton multiset notation closed multiset union index set par notation binary union 
information terms denote finite information trees syntax information term borrowed ambient calculus cardelli gordon 
define function mapping info term denoted information tree 
table 
info terms information tree meaning info term denoting empty multiset denoting multiset denoting multiset union def def def def def def abbreviate assume includes disjoint union basic data type interest integers strings 
legitimate info term 
assume associates right read 

congruence info terms interpretation info terms information trees induces equivalence relation info terms 
coincides ambient calculus congruence restricted set terms 
relation called info term congruence axiomatized minimal congruence includes commutative monoidal laws follows 
table 
congruence info terms giorgio ghelli luca cardelli axiomatization congruence sound complete respect information tree semantics 
represent information tree 

information trees data models compare information trees popular models semistructured data oem data papakonstantinou unql trees buneman xml query data model 
obvious difference oem unql models represent trees graphs focus trees 
approach applied graphs substituting tree edge constructor graph edge constructor label tree logic corresponding graph logic defined cardelli 
believe full graph language need operators create new nodes hide identity nodes 
reason prefer focus simpler issue trees rich warrant separate study leave issues node hiding generation studies cardelli 
unql trees characterized fact considered equivalent modulo bisimulation essentially means information trees seen sets multisets 
example considered unql trees precise sense identify terms 
hand information trees oem data oem data distinguish dag tree unfolding 
data model essentially unordered version xml query data model defined 
apart order main difference model consider different kinds nodes elements attributes text 
consider essentially elements model assigns node identity node consider 
practice node identity allows nodes compared way distinguishes built different applications node constructor 
model describes data node labeled forests talk terms trees 
perfectly isomorphic 
tql data seen node labeled forests interpreting empty forest forest union tree rooted node labeled children trees forest implemented version tql richer data model consider types edges nodes element edges text pcdata edges lead leaf 
text edges little impact language structure simply assume piece text xml input mapped terminal edge 

tree logic section tree logic 
tree logic cardelli gordon modal ambient logic defined aim specifying spatial temporal properties tql query language semistructured data mobile processes described ambient calculus cardelli gordon 
ambient logic particularly attractive equipped large set logical laws tree structures particular logical equivalences provide foundation query rewriting rules query optimization 
hope exploit current research decision procedures ambient logic cohen build tools decide problems query correctness containment equivalence described section 
start subset ambient logic cardelli gordon enrich information tree variables label comparison recursion 
results sections standard results ambient logic transposed specific variant 
reason detail proofs give essential outline 

formulas syntax tree logic formulas table 
symbol label comparison clause stands label comparison operator chosen predefined family assume contains equality sql string matching operator negations 
recursion variable appear positively scope means number negations traversed path goes occurrence binder 
assume quantifiers bind variables far right possible example means 
negation binds strongly operator means precedence rule assumed 
table 
formulas label expression label constant label variable formula empty tree location composition true negation conjunction tree variable quantification label variables quantification tree variables label comparison recursion variable recursive formula fixpoint may appear positively giorgio ghelli luca cardelli interpretation formula semantic map maps set information trees respect valuations 
valuation maps label variables labels elements tree variables information trees maps recursion variables sets information trees 
table 
formulas sets information trees def def def def def def def def def def def def say satisfies information tree set write def talk information trees satisfying formula follows def context disambiguate notation 
cases omit empty function 
semantic definition probably easier understand terms associated satisfaction relation 
example interpretation corresponds property satisfaction relation def lines prove properties conjunction negation case characterized property def tql query language semistructured data list essential property operator table 
may properties definition satisfaction relation done original cardelli gordon follow style cardelli works better recursion operator 
semantics defined fixpoint function maps set trees set trees 
definition formulated terms pre fixpoint coincides standard lattice theory arguments fixpoint function monotone lemma 
definition semantics induces satisfaction relation property lemma 
valuation mechanism connects logic pattern matching example maps 
process finding possible logic way describing process finding possible answers query respect database table 
properties satisfaction 
properties table easy prove 
recursive case need couple lemmas 
lemma substitution 
lemma monotonicity 
appears positively appears negatively 

lemma properties satisfaction 
properties table hold 
proof 
cases proved text table trivial apart recursive case 
giorgio ghelli luca cardelli property observe monotone lemma appears positively knaster tarski lemma fixpoint function 

thesis follows def 
lemma def 

derived operators usual negation allows define useful derived operators described table 
table 
derived operators def def def def def def def means true shape 
appreciate difference dual consider statements 
book date author book author date book date author book author date means true means decomposition appreciate difference operators consider statements 
exists decomposition satisfies book satisfies book inside satisfies book decomposition satisfies book satisfies book inside satisfies book dual fixpoint operator greatest fixpoint operator operator useful context tql query finite trees 
example finite trees describe information tree matches 

infinite tree 
matched 
satisfaction derived operators enjoys properties 
obvious subtle include coinduction principle 
tql query language semistructured data properties form basis pattern matching algorithm 
omit obvious properties disjunction universal quantification 
table 
properties satisfaction derived operators 
logical equivalences derived ambient logic inherited tree logic 
equivalences exploited query logical optimizer 
example properties list reduce size formula evaluated may generate propagate 
equations listed appendix table 
equations 
path formulas query languages semistructured data provide way retrieving data reachable path described regular expression 
tree logic powerful express kind queries 
show fact defining syntax path expressions showing expressions translated logic 
way obtain compact readable way expressing common queries partially exemplified section 
consider statement book books collection author abiteboul 
express logic pattern books book author abiteboul special syntax path expressions express condition follows 
books book author abiteboul path expressions support features universally quantified paths book author abiteboul 
books book author abiteboul giorgio ghelli luca cardelli label negation book date value field author 
books book author date path disjunction book deals ssd cites book deals ssd 
books book keyword cites book keyword ssd path iteration kleene star book deals ssd reach chain citations book deals ssd 
books book cites book keyword ssd label matching exists path reach field label contains mail matches substring 
books mail define syntax paths interpretation 
table 
path formulas label matching expression matches matches match path element edge matches edge matches path elementary path pq path concatenation kleene star disjunction naming tree path path formula translated tree logic shown 
define tree formula matches follows matches def matches def matches path elements interpreted translation logic patterns previously def matches def matches general paths interpreted follows 
recursively interpreted holds holds traversing 
target naming means find satisfies interpreted logical conjunction 
formally tql query language semistructured data path interpretation defined shown path interpretation translates non path operators exemplified 
pq def def def def def def 
tree query language section build full query language top logic defined 

query language query language provide functionalities binding selection mechanism select values database bind variables construction result mechanism build result starting bindings collected previous stage 
tree query language tql uses tree logic binding selection tree building operations construct result 
logical formulas previously defined 
table 
tql queries query select valuation collecting query matching variable empty result composition results nesting result tree function fixed set allow tree functions chosen set functions type appear query 
example count yields tree cardinality multiset sum yielding sum multiset integers 
appears implemented systems set extended user java function appropriate signature 
definition free variables query standard select case 
binder computes valuations variables free uses evaluate binds variables free formalized line table 
table 
free variables tql queries fv select def fv fv fv giorgio ghelli luca cardelli fv def fv def fv def fv fv fv def fv fv fv def fv select abbreviation select select 
query semantics ranges finite sets variables vn variable vi information tree variable universe defined set information trees label variable universe defined set labels 
ranges valuations schema finite domain functions mapping vi element vi 
semantics query defined respect context valuation binds variables occur free query 
context valuation bind top level names bib section documents queried 
query select binder generates context valuations evaluate enriching current context valuation values variables fv 
semantics binder query defined table 
binder denotes function takes valuation fv returns set valuations precisely returns valuations extend context valuation notation means graph function includes means coincide new valuations change defined variables assign values free variables 
query denotes function takes valuation fv returns tree query select evaluated evaluating subquery valuation computed binder resulting trees combined par ary version binary operator defined section 
table 
query semantics fv tql query language semistructured data select par interpretation result query select infinite multiset 
nested query database infinite start finite initial database 
obviously happen practice 
possible solution syntactically restrict variable solution static dynamic check finiteness result option discussed section 
current implementation tql executes run time test infinite raises infinite result run time exception 
discuss theme subsections 

safe queries known disjunction negation universal quantification create safety problems logic query languages 
problems appear query language 
consider example query db author select author intuitively entry db author binds vice versa entries 
formally unbound variable corresponds infinite amount valuations example db author db author infinite set triples db author negation creates similar problem 
consider query 
db author select binder respect context valuation generates infinite set bindings db author query infinite result par queries generate finite infinite tree depending context valuation 
example closed formula db db db db db db db giorgio ghelli luca cardelli query db select returns infinite tree db empty tree 
say query safe semantics finite independently context valuation 
say formula safe respect set bound variables fv valuation semantics finite case say variables bound binds free variables 
formula query safety undecidable 
consider formula generates infinite set bindings applied database safe iff unsatisfiable valid 
validity undecidable tree logic talbot 
unsafe formulas difficult evaluate return infinite set 
safe formulas problematic safe formula may general contain unsafe subformula 
example formula author safe conjunct 
formula safe subformula inside quantifier 
problem traditionally confronted defining decidable subclass hereditarily finite queries property query subqueries yield finite results 
defines larger decidable class queries easily rewritten hereditarily finite form 
queries larger class evaluated query discarded statically safe ullman gelder topor abiteboul 
approach satisfactory safe queries discarded complex syntactic conditions chosen order capture large class queries 
main advantage traditional approach applied relational queries static safeness conditions chosen allowed queries translated efficient algebraic expression 
interested aspect want search new tree relational algebra better suited tree query languages studying translation tql traditional relational algebras 
reasons pursue different road define evaluation mechanism works formula safe unsafe 
mechanism finite representation computed set valuations finite infinite 
mechanism allows evaluate binder need discard unsafe rewrite acceptable form 
way optimizer free rewrite formula formula worrying syntactic safety conditions 
approach new database field described generalization constraint database approach kanellakis kuper 
top evaluation binder completed final result may finite infinite intermediate results infinite 
point computed set bindings infinite raise run time error interested tql query language semistructured data current implementation defining finite representation infinite tree result evaluate select branch 
solved problem evaluating unsafe binders reason try statically identify class formulas guaranteed return infinite set valuations allow statically analyze query tell programmer guaranteed raise infinite result exception 
quite different relational safety tests 
case formulas pass test translated algebra executed 
case formula translated executed pass test know may return infinite result 
formula evaluation mechanism copes infinite results described section example static analysis algorithm characterize decidable subset safe formulas described section 
different solution widely studied database literature modify semantics query evaluated active domain subset contains labels database query 
way finite results generated 
approach satisfactory semantics query depend constants appearing parts database may completely unrelated query reason consider 
active domain semantics advocated tool theoretic studies expressive power different query languages tool study domain independent queries queries semantics depend set 
discussion classical problem domain independent queries reader may consult database textbook abiteboul ullman 

restricted queries give example simple static analysis algorithm compute subset variables bound formula define notion restricted queries restricted query statically guaranteed safe generate finite answer 
simplicity consider recursive operators 
define predicate binds bound implies informally valuation extract finitely matches see property formal definition 
set bound variables dealing equality operator 
binding predicate defined follows 
simplicity assume negation pushed leaves formula 
rules formulas bind variable 
omit symmetric rules equality case 
observe specified property predicate computes decidable giorgio ghelli luca cardelli approximation semantic binding relation def fv 
property finite example closed formula binds variable unsatisfiable empty predicate prove may perform better analysis true binding relation general undecidable hard unsatisfiability closed formulas discussed 
table 
binding predicate talk query safety 
query safe respect context valuation safe holds 
safe select holds free variables bound safe evaluate safe evaluate valuations produced query safe contains unsafe subquery 
table 
query safety respect context substitution binds binds def safe select fv binds safe safe binds safe safe safe safe safe safe safe safe safe safe safe soundness analysis expressed properties 
property 
ranges finite information trees ranges valuations mapping variables labels finite trees fv 
set finite property 
ranges valuations mapping variables labels tql query language semistructured data finite trees safe vis finite relation similar relations define static notions safety relational calculus queries liberal respect quantified variables 
example gelder topor query considered allowed free variables bound quantification bound authors embed condition definition binding relation abiteboul 
require 
difference derives fact classical notion static safety meant prove query finite translated algebraic query defined finite relations 
interested finiteness query result going translate algebra infinite tables able implement quantification infinite structures need require quantified variables bound 

tql logic schemas constraints 
schemas traditional path query languages explore vertical structure trees 
logic easily describe horizontal structure common schemas semistructured data 
xml dtds xduce types hosoya xsd schemas version logic considers unordered structures 
example extract regular expression sublanguage inspired xduce xsd types 
expression language denotes set information trees empty tree element element edge leading def 
finite multiset zero def finite multiset 
def optionally general believe number proposals describing shape semistructured data embedded logic 
proposals usually come efficient algorithm checking membership properties 
example efficient algorithm check subtyping xduce types set inclusion constraint solver hosoya 
efficient algorithms course fall automatically general framework 
van gelder topor analysis sophisticated simplifying ease comparison 
giorgio ghelli luca cardelli 
constraints types constrain shape data useful constrain values canonical examples key constraints referential integrity constraints 
provided example key constraint tql section observed different notions keys studied semistructured data 
example buneman 
buneman define notion relative keys 
consider set books type expressed previous section books books book chapter number contents say number key chapter relative books book means specific book case different chapters number 
course number absolute key books book chapter different chapters different books may number 
expressed tql formula 
books books book chapter number chapter number positive version formula find chapter number violates constraint involved book books books book chapter number chapter number select book number notion defined buneman slightly complex 
relative key constraint shown described books book chapter number special case general constraint 
pn 

pn specifies element reached path root book different subelements reachable chapters book key path pi exists subelement reachable pi different subelement reachable pi 
quite verbose express order logic especially actual definition buneman distinguish compare value equality compare subelements 
tql logic order logic notion easier formalize 
fully captured formula operator allows express fact talking different subtrees need exploit notion node identifier 
xn 

pn xn 
pn xn referential integrity constraints exemplified considering schema tql query language semistructured data describing list books list authors 
books book author auth id authors author id author identified auth id referential constraint specifies included actual id registered authors 
tql expressed follows 
books book author auth id authors author id tql logic allows types constraints easily specified exemplified tql allows write queries check constraint holds discover constraint hold discover constraints hold section 
step reasoning constraints types example optimize queries pinpoint parts query compatible constraint constraints mutually compatible constraints compatible schemas 
restrict tql version families constraints studied reuse known algorithms deciding constraint implication example rephrase study manipulation key constraint buneman consistency dtds constraints fan libkin terms tql logic 
course real issue generalization result encompass greater natural subset tql logic 
aim plan exploit emerging results algorithms checking validity ambient logic formulas 
tql best suited deal constraints described term paths express compute constraints defined type level ucm constraints defined fan 
case different syntax describe mutually recursive formulas useful 

query evaluation section define query evaluation procedure 
procedure really refined semantics queries intermediate abstraction semantics section implementation algorithm constitutes high level specification implementation 
core query evaluation binder evaluation procedure execute part query 
takes value context valuation returns set valuations basic feature procedure fact compute valuation time style example prolog interpreter set manipulation set valuations associated pair obtained combining set operations sets valuations extracted immediate subformulas chose set evaluation approach guarantees reasonable performance giorgio ghelli luca cardelli presence large amounts data forced choice database applications 
reason procedure algebra tables sets valuations trees precise specification actual tql implementation 
tql implementation described seen kernel realistic database implementation 
procedure describe manipulation sets valuations may infinite 
implementation adopt specific finite representation infinite tables terms finite disjunction set conjunctive constraints valuations style kanellakis kuper 
going describe information 
implementation directly supports logical operators indicated table section 
sake simplicity assume derived operators rewritten terms basic operators include course negation execution 
query evaluation procedure shows directly evaluate query resulting tree 
actual implementation translate query expression algebraic operators include operators iteration fixpoint 
expressions syntactically manipulated enhance performance 
evaluated 
ignore issues translation manipulation intermediate representations 
practical implementation query language efficiently implementable operators relational join union 
write query evaluation procedure style possible basic operators consider 
describe procedure introduce algebra tables 
tables sets valuations called rows 
algebra define evaluation procedure 

table algebra previous sections vn finite set variables row schema function maps vi element vi 
table schema set rows denote largest table schema set rows schema set tables schema meta variable range omit superscript irrelevant clear context 
empty set row denote tables schema empty singleton table algebra primitive operators union complement product projection restriction carrying schema information 
correspond standard operations relational algebra 
table 
operators table algebra def def tql query language semistructured data rv def rv rv def fv rv def union complement product projection completely standard 
infinite complement finite table infinite 
function define restriction denotes function coincides maps 
example nr returns rows yr returns rows 
nr returns returns derived operators defined table 
table 
table algebra derived operators ext rv def def rv def ext rv ext extension ext rv right inverse projection adds new columns fills possible value 
extending table produces infinite table 
intersection standard defined dualizing union 
operator rv known database field 
called natural join defined follows row belongs rv iff restriction rv restriction important property natural join yields finite tables applied finite tables definition uses extension operator 
optimization join extensively studied reason operator extension plus intersection definition query evaluation procedure 

query evaluation specify query evaluation procedure binder evaluation procedure 
takes information tree formula yields table contains valuations schema fv takes query row specifies value free variable evaluates corresponding information tree 
closed query select evaluated evaluating information tree set valuations computed 
evaluated row resulting information trees combined obtain query result 
process expressed case table 
binder evaluation procedure exploits parameter deal recursive formulas 
formula specifies function trees tables maps recursion variable recursive function information trees tables 
giorgio ghelli luca cardelli value specifies type follows dom 
rules contains free recursion variable schema table returned fv situation contains free recursion variables 
example schema 
general schema table returned schema function specified table enjoys expected property fv notation represents table contains row similarly 
definitions table easier read ignores schema information 
table 
binder query evaluation fix select fv par fv tql query language semistructured data table 
schema function fv explain evaluation procedure 
formula evaluated testing subject empty tree returning trivial singleton empty set 
query select iszero select iszero branch executed evaluates 
generally context valuation fv set valuations corresponds truth case holds similarly table corresponds case hold formula tests edge label empty set binders returned 
contents matched formula evaluated way bound context valuation 
edge binder returned previous case 
result built joining result matching definition natural join bound just cartesian product equivalent nr truth negation need explanation 
set complement finite table produces infinite table general quite expensive compute 
reason implementation minimize operator operating extensive query rewritings 
conjunction corresponds natural join valuation satisfies restriction free variables satisfies restriction free variables satisfies valuation satisfies exists decomposition reason try possible decompositions subject compute natural join sets valuations time decomposition contributes valuations put result aim big union outside 
information tree top giorgio ghelli luca cardelli level branches admits different decompositions operation expensive 
satisfied edge subtree different decompositions shape tried 
actual implementation systematically exploits observation result decomposition appears queries section executed linear time 
optimization simple algorithm tries verify simplicity effectiveness algorithm consequence fact operators appear tql binder simple logic interpretation 
bound context valuation checks 
bound valuation returned 
projection evaluate existential quantification definition rv 
rv 
rule comparisons subtle expand special cases table 
evaluation returns table schema corresponds fv 
constant bound returns table empty schema cases 
unbound variables returns infinite table defines operator example equality returns diagonal table maps case 
table 
special cases comparison evaluation 




recursive case 
fix denotes minimal fixpoint function mapping programming language express letrec fun transform recursive formula recursive function information trees tables apply recursive function subject correctness evaluation technique far obvious proved detail appendix prove correctness evaluation procedure need couple lemmas state types correct 
lemma 
contains free recursive variable fv tql query language semistructured data proof 
thesis follows immediately property dom contains free recursive variable dom 
fv dom property proved induction definition case inspection 
lemma 
proof 
induction commute binding 
def 
cases immediate induction 
lemma 
proof 
induction cases 
non trivial case recursion resort lemma 
state main lemma specifies correctness binder evaluation procedure 
lemma 
formula set variables set recursion variables includes free function defined disjoint proof 
see appendix theorem states query evaluation procedure equivalent query semantics section 
theorem 
fv proof 
induction cases 
assume select definition select fv par fv induction lemma contains free recursion variables fv giorgio ghelli luca cardelli induction 
select def 
par fv par par fv par fv def 
select cases immediate 

comparisons related proposals describe logic query language evaluation mechanism 
tree logic compared standard order formalizations labeled trees 
terminology abiteboul encode labeled tree relation ref source oid label destination oid 
nodes tree oids object identifiers appear source destination columns tuple relation represents edge label label 
course relation represent graph tree 
represents forest destination key relation exists order relation oids tuple source strictly precedes destination 
order formulas defined relation constitute logical language describe tree properties 
trees represented oid root 
say example tree saying ref ref ref differences approach 
logic modal term mean formula specific subject part database currently matched order logic implicit subject name subject 
example modal formula implicitly describes current tree translation order logic gives name tree describes 
modal merit fault merely difference 
modality easier describe just tree structure difficult describe relationship different trees 
modal logics defined validity decidable 
case tql logic logics may provide hints definition decidable expressive 
apart modality feature ambient logic fundamental operators deal simple branches tree composition order approach describes terms existence edges ref 
composition powerful operator purposes tql query language semistructured data easy say properties satisfied disjoint subtrees node edge identity 
example formula specifies title key title title 
easy describe record structures partially meaning contains possibly fields completely meaning contains 
complete descriptions difficult path approach 
possible bind variable rest record title title 
operator sets logic apart modal logics proposed querying semistructured data reasoning schemas types ssd logics proposed calvanese 
essential difference fact modal logics better suited deal graph structures logic deals trees 
composition similar operator bunched logic separation logic hearn pym hearn 
different logics defined independently ambient logic different motivations exhibit deep similarities 
important technical difference logics describe flat horizontal structure tql logic adds second dimension operator allows describe tree shaped space 
tql derives essential select structure set comprehension sql tradition similar query languages semistructured data struql fernandez fernandez lorel abiteboul goldman xml ql deutsch quilt chamberlin xquery extent yatl cluet 
depth comparison xml ql yatl lorel languages carried fernandez analysis thirteen typical queries 
ghelli write queries tql 
thirteen queries fernandez tql description quite similar corresponding xml ql description couple exceptions 
xml ql queries fernandez expressed skolem functions expressed different way tql skolem functions current version tql 
skolem free version queries complex 
second xml ql general way expressing universal quantification problem shows query asks pairs books set authors 
express query universal quantifier foreach pair matches formula author author 
separate book formulas book appear result paired lorel query appears fernandez exhibit problem 
bib foreach bib book author book author select pair original copy giorgio ghelli luca cardelli authors fernandez write xml ql version query say xml ql express complex nested query uses negation isempty predicate 
tql better xml ql languages expressing queries dealing non existence paths find papers title find papers author buneman 
lorel scores case presence universal quantification 
quilt xquery xduce hosoya turing complete expressive languages cited 
binding mechanism quilt xquery share limitations path approaches languages struql lorel unql xml ql family 
presence universal quantification binding mechanism important difference languages family tql 
distinctive feature tql declarative procedural nature binding mechanism 
example consider query collects suciu plays role inverts name role bib bib suciu rest select suciu rest xquery expressed follows bib bib xx xx data suciu return xf name suciu xf local name suciu op xx xf name bib binding mechanism xquery requires programmer write nested loop specify bindings extracted data tql specifies conditions variables rest satisfy 
evident considers query verifies title key bib bib book title foreach book title book title select title key tql property specified query ready 
xquery tql query language semistructured data step specific algorithm check property true designed example algorithm loops books collects titles multiset checks multiset contains repeated elements 
shown tql program transformed program finds key just changing constant variable 
xquery program rewritten different algorithm needed 
essential feature tql clean semantic interpretation pays ways 
semantics possible prove correctness completeness specific implementation 
simplifies task proving equivalences different logic formulas queries 
knowledge formal semantics defined yatl 
semantics lorel defined looks quite involved extensive coercions 
semantics xquery defined intermediate spirit notions semantics section implementation specification section 
logic languages semistructured data defined precise semantics focus graphs trees 
example language defined bidoit order logic enriched fixpoint operator variables ranging paths graphs 
resulting language different non modal character focused graphs may interesting try import idea path variables logics 

directions defined query language logic express types constraints 
important optimization problems analysis relationship query schema typical example removal parts query incompatible schema 
logical language queries types constraints allow rephrase problems terms implications equivalences logical formulas 
schema query analysis problems satisfiability constraints arenas query path correctness similarly expressed 
may able ambient logic techniques approach problems 
query language operates information represented unordered trees 
take different views information represented 
example ordered trees xml unordered graphs semistructured data 
believe choice representation lead slightly different logic query language lines described 
currently looking options 
currently proposals languages semistructured data enrich regular path expression approach mechanisms describe tree shapes linear paths 
expressive power general recursive formulas believe capture proposals important part proposals describe efficient matching techniques 
study exploited subset ambient logic 
ambient logic giorgio ghelli luca cardelli calculus offer operators specify perform tree updates cardelli 
possible connections semistructured data updates explored 
implementation tql implementation model described available tql di unipi tql 
current prototype query xml documents accessible files web servers 
acknowledgments andrew gordon contributed useful suggestions 
giorgio ghelli partially supported microsoft research workgroup 
implementation tql mainly due francesco giovanni orlando ferrara 
antonio albano dario paolo contributed tql project ways 
abiteboul buneman suciu 

data web relations semistructured data xml 
morgan kaufmann san mateo ca 
abiteboul hull vianu 

foundations databases 
addison wesley reading ma 
abiteboul quass mchugh widom wiener 

lorel query language semistructured data 
international journal digital libraries 


modal logics data 
lambrix borgida lenzerini ller patel schneider editors proc 
int 
workshop description logics dl link ping sweden 
de rijke 

path constraints modal logic point view extended 
lenzerini nardi nutt suciu editors proc 
th int 
workshop knowledge representation meets databases krdb roma italy 
arenas fan libkin 

verifying consistency xml specifications 
proc 
st symposium principles database systems pods pages new york 
acm press 
bidoit 

fixpoint calculus querying semistructured data 
atzeni mendelzon mecca editors proc 
world wide web databases selected papers int 
workshop webdb volume lncs pages 
chamberlin fernandez florescu robie simon stefanescu 

xquery xml query language 
available www org tr xquery 
buneman davidson fan hara tan 

keys xml 
proc 
th international world wide web conference www hong kong china pages 
buneman davidson fan hara tan 

reasoning keys xml 
proc 
th intl 
workshop data base programming languages dbpl frascati italy number lncs berlin 
springer verlag 
buneman davidson hillebrand suciu 

query language optimization techniques unstructured data 
proc 
acm sigmod tql query language semistructured data international conference management data sigmod montreal quebec canada pages 
sigmod record june 
buneman fan sim weinstein 

constraints semi structured data xml 
sigmod record 
cardelli 

spatial logic concurrency part 
information computation 
appear 
cardelli gordon 

deciding validity spatial logic trees 
proc 
acm sigplan workshop types language design implementation new orleans usa 
calvanese giacomo lenzerini 

description logics information integration 
computational logic logic programming essays honour robert kowalski part ii number lncs pages berlin 
springer verlag 
cardelli 

semistructured computation 
proc 
seventh intl 
workshop data base programming languages dbpl 
cardelli gardner ghelli 

spatial logic querying graphs 
proc 
th international colloquium automata languages programming icalp malaga spain number lncs pages berlin 
springer verlag 
cardelli gardner ghelli 

manipulating trees hidden labels 
proc 
foundations software science computation structures fossacs warsaw poland 
cardelli gordon 

mobile ambients 
proc 
foundations software science computation structures fossacs volume lncs pages 
springer verlag 
accepted publication theoretical computer science 
cardelli gordon 

anytime modal logics mobile ambients 
proc 
principles programming languages popl 
acm press 
chamberlin robie florescu 

quilt xml query language heterogeneous data sources 
proc 
workshop web data bases webdb 
talbot 

decidability model checking mobile ambients 
proc 
th annual conference european association computer science logic number lncs pages berlin 
springer verlag 
cluet delobel sim 

mediators need data conversion 
proc 
acm sigmod international conference management data sigmod 
cohen 

validity model checking logics finite multisets draft 
unpublished note 
ghelli 

types correctness queries semistructured data 
proc 
th workshop web data bases webdb madison wisconsin usa pages 
ferrara ghelli 

tql algebra implementation extended 
proc 
ifip international conference theoretical computer science ifip tcs montreal canada 
ferrara ghelli 

tql algebra implementation full 
appear 
deutsch fernandez levy suciu 

query language xml 
proc 
eighth international world wide web conference 
fan kuper sim 

unified constraint model xml 
world wide web pages 
fan libkin 

xml integrity constraints presence dtds 
acm editor proc 
th symposium principles database systems pods santa giorgio ghelli luca cardelli barbara california sigmod record pages new york ny usa 
acm press 
fernandez florescu kang levy suciu 

catching boat strudel experiences web site management system 
proc 
acm sigmod international conference management data sigmod pages 
fernandez florescu levy suciu 

query language processor web site management system 
proc 
workshop management semistructured data tucson 
fernandez sim wadler cluet deutsch florescu levy maier mchugh robie suciu widom 

xml query languages experiences exemplars 
available www db research com user simeon xquery ps 
gelder topor 

safety translation relational calculus queries 
acm transactions database systems 
ghelli 

tql xml query language 
available www di unipi ghelli papers html 
goldman mchugh widom 

semistructured data xml migrating lore data model query language 
proc 
workshop web data bases webdb pages 
hosoya 

xduce typed xml processing language preliminary report 
proc 
workshop web data bases webdb 
hosoya vouillon pierce 

regular expression types xml 
acm sigplan notices 
kanellakis 

tutorial constraint programming database languages 
proc 
th symposium principles database systems pods san jose california pages 
acm press 
kuper libkin paredaens 

constraint databases 
springer verlag berlin 
hearn reynolds yang 
local reasoning programs alter data structures 
proc 
th annual conference european association computer science logic number lncs pages berlin 
springer verlag 
hearn pym 

logic bunched implications 
bulletin symbolic logic 
papakonstantinou molina widom 

object exchange heterogeneous information sources 
proc 
eleventh ieee int 
conference data engineering birmingham england pages 
ullman 

principles database systems nd edition 
computer science press 
ullman 

principles database knowledge base systems volume computer science press 

xml query cases 
www org tr cases 

xml schema 
www org xml schema 

xquery xpath data model 
www org tr 
tql query language semistructured data appendix proof lemma lemma 
formula set variables set recursion variables includes free function defined disjoint proof 
observe defined care result application belongs prove theorem induction size simplicity focus case prove observe statements logically equivalent true reverse consider set equality 
consider case cases far easier 
proof equality considering inclusions prove definition means equivalent fix 
fix prove showing fixpoint function 
apply reduction abbreviate 
giorgio ghelli luca cardelli reduce function comparison pointwise comparison definition implies proof follows immediately induction able prove functions coincide applied yield prove opposite inclusion equivalent definition sufficient prove 
statement rewritten induction equivalent deduced expand fix unfold fix point apply expand fix replace left hand side definition 
fix fix tql query language semistructured data sides equal 
appendix table equivalences logical equivalences derived ambient logic inherited tree logic 
list 
equivalences exploited logical optimizer queries 
table 
equations fv fv fv fv 
