atomicity isolation transactional processes heiko schuldt swiss federal institute technology eth zurich gustavo alonso swiss federal institute technology eth zurich beeri hebrew university jerusalem hans org schek swiss federal institute technology eth zurich processes increasingly complex application logic explicit 
programming processes significant advantages poses difficult problem system point view interactions processes controlled conventional techniques 
terms recovery steps process different operations transaction 
termination semantics dependencies different steps 
regarding concurrency control flow control process complex flat transaction 
process may partially rollback execution may follow alternatives 
deal problem atomicity isolation context processes 
propose unified model concurrency control recovery processes show model implemented practice providing complete framework developing middleware applications processes 
categories subject descriptors software engineering design tools techniques software engineering software program verification correctness proofs reliability database management systems concurrency distributed databases transaction processing database management database administration logging recovery information systems applications office automation workflow management general terms algorithms design reliability additional key words phrases advanced transaction models business process management electronic commerce execution guarantees locking semantically rich transactions transactional workflows unified theory concurrency control recovery 
appear acm transactions database systems tods march 
authors addresses schuldt alonso 
schek swiss federal institute technology eth zurich department computer science eth zentrum ch zurich switzerland alonso inf ethz ch beeri school computer science engineering hebrew university jerusalem israel beeri cs huji ac il 
permission digital hard copy part material fee personal classroom provided copies distributed profit commercial advantage acm copyright server notice title publication date appear notice copying permission acm copy republish post servers redistribute lists requires prior specific permission fee 
fl acm acm transactions database systems vol 
march pages 
delta schuldt 
processes defined sequences computational steps executed coordinated manner 
business processes example 
business process represents different steps organization organizations required complete task open bank account providing electronic service 
important advantage processes application logic information system explicit 
traditionally application logic coded difficult evolve understand maintain 
processes information systems high level representation internal logic greatly facilitating evolution maintenance logic 
processes widely clear need address problem interprocess interaction 
particular concurrency control recovery understood transactions grouped entities higher level semantics weihl lynch schek processes alonso :10.1.1.30.7027
regarding concurrency control flow control process complex flat transaction 
process may partially rollback execution may follow alternatives 
different possibilities need taken consideration deciding interleave processes 
long executions compared traditional transactions blocking processes acceptable 
question allow interaction parallelism possible guaranteeing correctness 
similarly terms recovery process activities different operations transaction 
step termination semantics dependencies different steps 
steps executed heterogeneous autonomous systems transactional properties underlying systems considered 
unified model concurrency control recovery transactional processes tackles problems 
show model implemented prototype 
challenge design correctness criteria account concurrency control recovery cope added structure processes reflect layered structure system 
approach followed extends previous area concurrency control recovery transactional process management schuldt reformulation unified theory concurrency control recovery schek alonso :10.1.1.32.8317:10.1.1.30.7027:10.1.1.30.7027:10.1.1.30.7027:10.1.1.30.7027
main contributions 
clarify problem process structure 
second starting correctness single processes extensions flexible transaction model elmagarmid mehrotra zhang zhang provide correctness criteria concurrent execution processes account interaction hierarchical schedulers alonso alonso 
third describe working prototype implemented electronic commerce workflow management specialized coordination tools alonso alonso schuldt :10.1.1.30.7027
prototype application illustrates usefulness process abstraction acm transactions database systems vol 
march 
atomicity isolation transactional processes delta applicability theory developed 
structured follows section motivates approach discusses sample transactional processes 
section introduces system model model transaction programs process model 
detailed discussion correctness multi process executions characterized provided section 
section dynamic scheduling protocol concurrent fault tolerant execution transactional processes 
details prototype system implemented section 
section discusses related 
section concludes 

motivation illustrate motivate notion process properties examples 
briefly discuss characteristics processes 
process execution process program 
steps called activities typically transactional properties 
process may include points 
activity executed rolling back process impossible proceed 
activity return point fails retried 
different path guarantees completion selected 
sharp contrast classical transactions return point commit operation assumed non compensatable activities deferred commit time 
classical transactions transaction scheduler knowledge state execution transaction program encapsulated transaction transaction messages 
processes existence return points execution process scheduler needs know state execution 
example shows process programs define concrete process executions 
payment interactions business customer electronic commerce applications 
example payment processes electronic commerce 
goal allow line purchasing possibly items single atomic transaction distributed purchase atomicity schuldt 
assumed items digital goods delivered line 
issue tie delivery items payment payment fails customer able items items delivered payment performed 
done trusted third party payment coordinator runs appropriate payment process programs 
structure process program payments shown 
crucial aspect cryptographic techniques decouple transfer encrypted items transfer appropriate cryptographic keys camp tygar 
delivery cryptographic keys performed trusted third party coupled party procedures ensuring payment 
note encrypted goods delivered customer start process usable corresponding keys transferred correctly 
individual activities process program depicted circles flow control activities arcs 
note activities transactional 
example step customer committed payment 
acm transactions database systems vol 
march 
delta schuldt information bank check validity payment receive payment information check timeout notify merchants receive key merchants customer bank deliver keys money transfer 
abort notify customer commit merchants confirmation handle charges notify bank fig 

process program payment interactions electronic commerce business transaction may fail go instance bank refuses validate guarantee payment 
process program points return exist check timeout key delivery 
keys received timeout check successful execution terminate commit abort 
check timeout essentially writes legally binding log entry payment coordinator site recording receipt cryptographic keys 
log record generated process simply rolled back discarding received information 
second keys delivered customer commit branch correct money transfer take place 
guaranteed bank previous step check payment information money credit card number cash token identified correct lock placed 
activities second point return notify merchant fails retried succeeds 
note failure second return activity due unavailability customer preventing correct key delivery lead complete rollback process follows return activity 
alternative abort branch taken 
effects activities abort branch similar abort process prior return activity 
semantics slightly different business transaction marked completed previously generated log record 
cases abort branch may consider small service fee charged customer 
shaded boxes represent alternatives order indicates preference commit branch preferred abort branch 
previous example process isolation illustrated notion return activity retriable activity 
example taken computer integrated manufacturing outlines problems occur process programs executed parallel 
shows possibility aborts acm transactions database systems vol 
march 
atomicity isolation transactional processes delta eot bot eot bot manager transactional process read bom cnc programs conflict 
write bom produce alternative erp system transactional subsystems construction cad design process cad system technical documentation check test stock resources bot eot bot eot bot eot repository documentation cad production process human pdm system test norm repository product document transfer stock bot eot bot eot bot eot bot eot program dbms dbms inverse fig 

concurrent processes cim applications execution process may impose restrictions execution concurrent process 
particular second process may prevented executing return points process successfully executed return activity 
example computer integrated manufacturing cim 
objective bring goods marketplace soon possible 
design production run parallel possible risk production stopped modified tests design phase fail 
process programs describe customized design production certain goods schuldt 
due customization design product manufacture strongly tied 
link processes bill materials bom 
bom generated design process provides input required production process services accessing shared resources underlying applications 
bom creates dependency processes 
example shows tree structure process programs 
structure guarantees general notion atomicity traditional transactions 
case design process instance failure detected test activity undoes pdm entry alternatively documents cad drawing facilitate reuse 
discard outcomes complex cad activity case traditional semantics atomicity 
acm transactions database systems vol 
march 
delta schuldt additional prerequisite guarantee consistent interaction processes 
consider parallel execution design production process 
parallelization important practice 
seen activities pdm system conflict 
concurrency control purposes order activities sufficient 
recovery considered dependencies exist 
inverse production activity exists executed test terminated successfully 
test fails pdm entry compensated design process bom read production process invalidated 
activities production process compensated including produce step point return production process 
production parts performed lead severe inconsistencies valid design bom parts exists 
context concurrency compensation sufficient guarantee correct executions 
additional dependencies taken account 
dependencies arise special termination characteristics activities inverse exists 
traditional transaction model operation inverse dependencies appear 

model system model consider architecture layers 
top layer involves execution transactional processes specified process programs 
process program set partially ordered activities 
activity turn corresponds conventional transaction transaction program executed transactional application 
bottom layer system model formed available transactional applications see 
concurrent execution transactional processes controlled transactional process manager pm responsible scheduling execution transaction programs 
interested correctness level invocation transaction programs marked 
scheduling pm exploits information commutativity transaction programs termination properties programs process structure 
underlying applications assume conventional architecture bernstein transaction manager tm executes transactional programs submitting operations data manager dm 
transaction programs model processes conventionally seen collection activities 
process program structured collection transaction programs activities 
activities definition atomic 
set activities available system 
account aborts commits processes augment fc ag denotes commit process abort 
activity assumed provide return value indicating succeeded failed 
treat transactional service run activity black box 
process manager reason activity outcome basis return value 
acm transactions database systems vol 
march 
atomicity isolation transactional processes delta process layer layer subsystem transactional process manager pm transaction programs activities process program process program transaction manager tm dmn dm tm data manager dm tmn transactional applications operations fig 

system model activities differ terms termination guarantees 
consider cases compensatable retriable pivot mehrotra zhang 
compensatable activity compensating activity semantically undoes effects original activity 
formally definition effect free activities 
oe ha sequence activities sequence oe possible activity sequences ff return values activities ff concatenated activity sequence hff oe activity sequence hff special case effect free activities sequence oe omega gamma ff consisting compensatable activity compensating activity gamma formally definition compensating activity 
activity compensatable activity gamma activity sequence oe omega gamma ff effect free 
activity gamma called compensating activity acm transactions database systems vol 
march 
delta schuldt activity compensatable called pivot 
obviously pivot executed successfully process proceed 
rolling back compensation option 
activities executions guaranteed successfully terminate finite number invocations called retriable 
definition retriable activity 
activity retriable sequence ff activities expanded ff invoking finite number times invocation terminates committing previous ones return abort 
guaranteed semantics transaction associated activity 
retriable activities implemented instance escrow mechanisms neil 
pairs activities exist successful execution guarantees second retriable subsequent execution repeated execution case failures guaranteed eventually succeed 
escrow semantics money transfer activity payment process example 
case initial check payment information positive bank guarantees money eventually credited requested 
usually done marking electronic cash token reserving certain amount credit card account 
actual guaranteed retriable money transfer shifted process 
note contrast flex transaction model mehrotra zhang availability compensation orthogonal properties 
model activity 
note semantics compensation require compensating activity compensatable 
assume compensating activity retriable guaranteed succeed 
follows indicate termination property activity superscript compensatable pivot retriable activity respectively 
ordering constraints process program executes activities results past activities 
process program viewed tree nodes activities edges correspond order constraints activities 
path tree reflects effects possible execution 
generalize view follows 
program allows concurrent execution activities group partially ordered set activities single multi activity node tree distinct nodes 
nodes singleton totally ordered respect preceding subsequent nodes tree node precedes activities terminate activity starts 
temporal order activities defined union partial orders nodes order induced ordering nodes called strong order semantics handshake 
generalization possible assume process program may allow activities say executed concurrently request execution equivalent precedes weak order alonso 
ensuring constraints service provided underlying systems acm transactions database systems vol 
march 
atomicity isolation transactional processes delta accomplished commit order serializability beeri 
recalling multi activity node partially ordered set activities represent requests associating weak order request partial strong order multi activity node 
activities strongly ordered multi activity node executed order process program invoke second returns 
weakly ordered necessary ordering enforced underlying system 
process structure non compensatable activity path root tree primary pivot process 
marks return point process commits process rollback able complete 
pivots represented singleton nodes members multi activity node 
captures fact activity process may executed parallel pivot activity 
able complete pivot commits tree assured termination tree starting pivot consisting retriable activities 
successfully executing pivot process program may try different alternatives fail execute termination assured 
generally pivot may ordered set children subprocess program assured termination path previous ones recursively properties process program 
particular may pivots assured termination path 
note children regular node ordered 
program selects results previous activities ideas formalized definition 
definition process program 
process program pp tuple iv delta set nodes 
node consists set activities 
card node called singleton node called node 
associated multi activity node different orders corresponding activities partial strong order partial weak order non compensatable activity included singleton node 
set directed edges set nodes forms directed tree 
edge corresponds strong order constraint 
partial strong order union order induced activities edges partial orders multi activity nodes 
partial weak order union weak orders multi activity nodes 
generalization model may allow partial order children non pivot nodes 
failure handling purposes partial order may specify alternative taken case failure 
acm transactions database systems vol 
march 
delta schuldt 
iv set distinguished singleton nodes tree singleton node tree containing activity compensatable iv 
nodes iv path root tree called primary pivots 
preference order delta defines total order children member iv 
child root assured termination tree 
child process program 
universe app activities explicitly encompassed process program pp union activities nodes app example 
revisited 
payment process program depicted encompasses multi activity nodes pivot activities check timeout transfer keys 
abort subtree assured termination tree check timeout remaining activities commit branch guaranteed completion second pivot activity transfer keys 
preference order delta guarantees commit subtree preferred abort subtree 
note process program may pivot case properties regular transaction aborted time prior commit 
zhang shown formed flex structures guarantee existence execution path executed correctly paths leave effects 
definition captures property 
program reached primary pivot abort executing compensating activities 
executing pivot proceed alternative guaranteed succeed 
process program may encompass pivots path root leaf long pivots followed assured termination tree 
refer process programs conforming definition having guaranteed termination 
guaranteed termination property transactional processes generalization atomicity traditional acid transactions 
depicting process programs solid arcs strong order constraints dashed arcs weak order constraints 
preference order delta depicted dotted arcs 
example process program structure 
consider process program pp depicted 
pp consists nodes singleton nodes encompassing activity activity activity activity multi activity node encompassing activities fa strong order weak order pp alternative executions commit primary pivot order children delta fpp delta pp pp subprocess program consisting nodes pp subprocess program contains activities node case branching prior pivot activity process program tree primary pivots may exist 
acm transactions database systems vol 
march 
atomicity isolation transactional processes delta fig 

process program pp strong weak 
order constraints preference order delta orders executed failed failed compensated gamma included node identifiers process program tree depicted follows attach node associated activities omit node identifiers 
process states denote execution single process program process 
consider partial executions process may terminated 
executions general concurrent underlying system guarantees serializability activity level 
simplicity exposition consider totally ordered processes 
serialized executions assume activities node executed order compatible strong weak orders defined node 
process assumed unique identifier subscript superscript id process program execution reflects process corresponds pp index may omitted associated process program relevant 
activities denoted superscript denotes property activity subscripts process id unique id activity 
superscripts omitted relevant interesting 
commitment process denoted abort process execution path tree 
may contain aborted activities compensating activities process subprocesses may contain aborted executions subprocesses 
actual effects process activities executed correctly compensated represented path tree 
convenient represent point path reached process notion process state 
possible states processes associated state changes follows instantiated process state running 
prior commit primary pivot abort compensatable activity primary pivot changes state aborting compensating activities executed 
acm transactions database systems vol 
march 
delta schuldt running aborting completing aborted committed initial commit fig 

possible states process having compensated activity process state aborted 
commit primary pivot causes state change running completing 
program may try alternatives 
failure abort alternative causes try 
state specifies alternative say state subprocess alternative 
alternative commits subprocess completes process contains commit activity process changes final state committed 
process running completing called active 
example 
revisited 
payment process defined process program depicted running long timeout check committed 
case failure prior timeout check failed check cash token process changes aborting notification customer sent changes aborted 
timeout check succeeded essentially log entry generated process completing terminate commit abort branch 
due assured termination trees pivot activity process guaranteed change state committed 
process executions process collection activities may performed execution process program partial order hold execution actual execution order may include partial order 
partial order required order mainly induced ordering constraints process program reflects natural constraints precedence regular activity compensation occurs execution 
note process contains subset activities explicitly specified associated process program 
activity required atomic repeated invocation retriable activities explicitly appear notion acm transactions database systems vol 
march 
atomicity isolation transactional processes delta process 
aborted instances leave effects invocation retriable activity terminated correctly 
addition regular activities process may contain compensating activities regular ones 
formally definition process 
process tuple oe reflecting execution process program pp fa gamma fc set activities contains subset regular activities pp may contain compensating activities 
addition may contain 
required order oe theta minimal partial order pp oe preservation strong order pp oe preservation weak order compensating activity gamma occurs oe gamma addition gamma compensating activity gamma occurs oe gamma oe gamma activities respect oe definitions show activities process explicitly process program includes compensating activities implicitly pp contains termination activities respectively said complete 
similarly order constraints explicitly specified process program pp consider regular activities 
definition order compensating activities regular activities compensating activities corresponding regular activities ordered imposed process 
regular activity compensation inevitably strongly ordered allow compensating activities executed weakly ordered corresponding regular activities allowed weakly ordered process program 
regular activities strongly ordered compensating activities strongly ordered reverse order 
constraints required order oe process process execution process program best discussed possible states 
process running execution sequence compensatable activities corresponding path root 
process aborting execution consists sequence committed activities followed aborted activity may primary pivot preceding activity followed sequence compensating activities reverse order 
acm transactions database systems vol 
march 
delta schuldt 
execution aborted process consists sequence previous case committed activity corresponding compensating activity final activity refer execution abort process execution process 
process changed state running completing contains activities path root primary pivot followed abort process executions alternatives gamma execution alternative compatible state 
process committed changed state completing committed committing retriable activities assured termination tree process subprocess may abort retried process execution may contain subsequence aborted instances retriable activity followed committed 
commit executed state running preceded compensatable activities 
process termination note long pivot selected path committed process abort executed isolation 
running aborting said backward recoverable 
sequence activities executed states called backward recovery path 
activities preceding primary pivot compensatable 
primary pivot preceding activities fails abort requested reason backward recovery performed successively applying compensation activities 
primary pivot terminated successfully process state completing 
final alternative consisting retriable activities previous alternatives smaller subprocesses properties process state guaranteed complete 
process said forward recoverable completing 
sequence activities leading activity succeeding primary pivot defined termination process forward recovery path 
partially ordered set activities need executed terminate partial process called completion denoted 
note case state running consists compensating activities 
state completing structure complex 
process assured termination subprocess consists path retriable activities case subprocess assured path 
process subprocess deepest subprocess completing completion determined completion subprocess 
deepest subprocess aborting consists completion bringing aborted state followed assured termination path parent 
may consist compensating activities backward recovery aborting subprocess followed path retriable activities parent process 
example execution process programs 
consider process program pp depicted 
process program guaranteed termination 
possible complete executions pp acm transactions database systems vol 
march 
atomicity isolation transactional processes delta gamma standard execution failures fails fails fails gamma fig 

possible executions process program pp depicted 
executions activity primary pivot 
denote partial execution pp successful termination running state completion consists fa gamma executed successfully 
successful termination completing 
instance committed failed completion evaluates fa gamma oe oe correct subsystem execution discussing scheduling process manager pm level clarify requirements imposed subsystems 
traditional transaction model consider operations transaction program executed commit decision compensatable 
subsystem produce sr aca schedules bernstein schedules serializable avoid cascading aborts executing operations belonging transactions data manager dm level subsystem marked 
addition subsystem provide order preserving serializability bernstein papadimitriou serialization order subsystem matches strong order imposed process manager 
allow process manager determine serialization order pair activities subsystem impose order subsystem 
achieved commit order serializability breitbart raz subsystems 
allows process manager map desired serialization order activities commit order associated transactions 
furthermore commit ordering implies order preserving serializability fulfilling compliance strong temporal orders subsystems 
commit order serializability provided requirement order preservation handshaking mechanism schedulers beeri holds 
general discussion requisites implemented practice schuldt schuldt schuler :10.1.1.30.7027:10.1.1.30.7027
acm transactions database systems vol 
march 
delta schuldt note consideration level system intrinsic requirement transactional process management 
motivated goal clarify contracts subsystems process manager order provide correct process executions 
model extended address multiple levels long mentioned requirements met resources accessed different subsystems pairwise disjoint 

correct process execution process schedule main prerequisite multi process executions process program inherently correct axiom guaranteed termination 
process programs fulfill guaranteed termination property 
correct structure process programs guaranteed termination process schedule reflects concurrent processes concurrent execution process programs 
notion process schedule defined set processes ps includes regular activities recovery related compensating activities considered processes 
furthermore process schedule includes observed execution order activities required order oe specified process corresponding process program 
need including required order explicitly process schedule stems fact process program may require order activities related oe ordered execution 
oe requested orders processes reconstructed process schedule 
order apply reduction techniques section process schedules information required 
definition process schedule process schedule quadruple ps oe ps set partial processes oe fa ps set activities processes ps oe partial order activities called required order oe theta includes required order process ps oe ps oe partial order activities called execution order theta reflecting observed order activities executed 
required order oe contained observed execution order oe definition process schedule reflects invocation activities process manager level marked 
general processes need terminated definition includes partial complete processes 
accordingly processes process schedule terminated said complete called partial 
acm transactions database systems vol 
march 
atomicity isolation transactional processes delta note process schedule defined level activities includes activities aborted processes 
underlying subsystems guarantee serializability atomicity activities returning abort omitted serializability property subsystems allows consider activities belong subsystem correspond transactions subsystem totally ordered 
commutativity equivalence consider processes independent 
possibility information flow concurrent processes conflicting activities share resources flow information associated transactions activities 
common mechanism verify equivalence schedules commutativity 
notion commutativity defined return values activities assume activity provide return value includes description outcome success failure respectively :10.1.1.30.7027:10.1.1.30.7027
return value process function return values activities 
definition commutativity 
activities commute activity sequences ff return values activities activity sequence hff identical return values activity sequence hff activities conflict commute 
information commutativity behavior activities crucial process manager 
commutativity relation available scheduling purposes 
commutativity relation specifies pair activities commute considering predicates parameters associated invocation activities 
process manager able determine pairs conflicting activities concrete context indicated actual parameters 
activities may conflict executed subsystem 
observation kind layered architecture transactional process management addresses 
depicted subsystems independent 
particular resources subsystems operate pairwise disjoint 
conflict behavior pair activities coincides conflict behavior corresponding transactions necessary information commutativity transactions subsystem derive global commutativity relation process manager level encompassing activities furthermore observation guarantees return value commutativity applied subsystem supposed report return values activities possibly individual subsystem unique format 
practical applications common assumption commutativity perfect definition perfect commutativity :10.1.1.30.7027
commutativity relation perfect activities holds commutes ff commute fi acm transactions database systems vol 
march 
delta schuldt possible combinations ff fi gamma commute ff commute fi possible combinations ff fi gamma exception null activity inverse activity commuting activity 
perfect commutativity requires inverses carefully defined 
consider example activities electronic cash token example 
checking token 
gamma verifies validity case approval sets lock particular token token approved terminates lock gamma 
obviously checks commute 
case inverse check activity imprecisely defined release activity 
releases lock token exists perfect commutativity 
carefully defined inverses reflect outcome regular activity case 
realistically inverse gamma check activity gamma theta gamma 
gamma return value corresponding regular activity semantics gamma gamma undo gamma 
notion commutativity conflict equivalence defined follows definition conflict equivalence 
process schedules ps oe psk ask oe sk sk conflict equivalent defined set processes ps psk pairs conflicting activities appear order observed execution orders sk process schedules 
conflict equivalent process schedules defined set processes ps psk contain set activities ask required orders oe oe sk observed orders may differ 
process serializability traditional approach bernstein discussing concurrency control disregard recovery operations 
notion conflict equivalence process schedule process serializable projection committed active running completing processes activities abort subprocess executions omitted conflict equivalent serial process schedule 
definition committed active projection ca 
ps oe process schedule 
committed active projection ca process schedule defined processes running completing committed ca contains activities belonging processes activities aborted aborting subprocesses completing committed processes 
furthermore ca contains required orders processes projected activities ca 
analogously observed order ca ca projection activities 
acm transactions database systems vol 
march 
atomicity isolation transactional processes delta conflict conflict conflict pp pp fig 

non sr concurrent execution process programs pp pp definition process serializability sr 
process schedule ps oe process serializable sr committed active projection ca conflict equivalent serial process schedule ser ps ser ser oe ser ser 
note ca may contain smaller set processes compared analogously traditional consideration serializability considering committed projection schedule smaller set transactions processes possibly smaller set activities ones sub processes aborted aborting 
example non sr execution 
consider processes executed parallel 
associated process programs pp pp process schedule reflecting concurrent execution depicted 
total pairs activities exist commute 
time oe set processes fp set activities fa required order oe oe oe oe oe oe observed execution order sr equivalent serial execution exists definition due conflict cycle caused orders 
activities corresponds aborted sub process equivalent serial process schedule case different ordering pair conflicting activities 
process serializability prefix closed example shows 
example sr prefix closed 
consider concurrent execution reflected process schedule depicted 
activities commute denoted dashed arcs 
time process serializable acm transactions database systems vol 
march 
delta schuldt pp pp conflict conflict gamma gamma fig 

non prefix closed sr process schedule active running completing subprocess including aborting aborted execution processes equivalent serial execution due cyclic conflicts 
assume activity fails process manager decides abort subprocess containing order break conflict cycle 
cases lead compensation execution assured termination path changing state subprocess running aborting conflict involved neglected 
compensating activity gamma undoes effects regular activity 
time gamma committed process schedule sr ca conflict equivalent serial execution aborted subprocess followed 
traditional transactions total backward recovery allowed phenomenon occur commutativity activities perfect cycle conflict graph exists way involved transactions commit successfully 
process executions partial backward recovery combined alternative executions possible may case 
psg process serialization graph process schedule contains node running completing committed process directed edge pair conflicting activities exists observed order subprocess aborted edges introduced activities subprocess conflicts activity aborted subprocess involved removed psg 
theorem process serialization graph sr process schedule sr process serialization graph psg acyclic 
proof theorem 
psg acyclic process serialization graph process schedule process schedule defined set processes ps ps containing set activities committed active projection ca acm transactions database systems vol 
march 
atomicity isolation transactional processes delta encompassing total order processes compatible orders encompassed psg 
process schedule derived applying topological sort 
pairs conflicting activities appear order ca conflict equivalent serial process schedule sr 
sr process schedule serial process schedule exists conflict equivalent ca 
assume process serialization graph psg contains cycle psg contain edges activities involved appear committed active projection conflicts serial process schedule precede turn precede obviously leads contradiction initial assumption sr process 
convenience process serializability tested standard serialization graph sg defined process serialization graph active committed process corresponds node conflict leads edge sg 
contrast process serialization graph sg additionally contains edges induced activities aborted aborting subprocesses active committed processes 
process serialization graph psg process schedule considered serialization graph restricted committed active projection ca psg sg ca 
theorem serialization graph sr process schedule sr serialization graph sg acyclic 
proof theorem 
sg acyclic serialization graph process schedule committed active projection ca obtained dropping activities aborted aborting subprocesses 
serialization graph ca acyclic 
sg ca psg process serialization graph acyclic theorem implies sr note contrast traditional transaction model converse theorem hold 
process schedule may sr albeit serialization graph contains cycle 
case serialization graph considers active committed processes omit conflicts activities aborted aborting subprocesses involved 
acyclicity sg stronger criterion sr allows subset sr process schedules called sg sr encompassing process schedules serialization graphs acyclic dynamic scheduling abort subprocesses require examination edges graph deletion activities subprocesses involved case psg 
contrast psg possible successfully terminate set processes commit processes induce cycle sg cycle disappears completion processes 
process manager guarantee serialization graph point time free cycles 
leads acm transactions database systems vol 
march 
delta schuldt conflict conflict conflict pp pp fig 

process serializable concurrent execution process programs pp pp restriction sg sr prefix closed variant called sg sr note sg sr prefix closed assume cycle serialization graph sg process schedule exists 
abort process involved cycle associated node disappear may lead process schedule prefix meets sg sr example revisited 
seen process serialization graph process schedule contains time cycle sr cycle exists sg sg sr failure leads abort subprocess including turn leads deletion edge induced removes cycle psg 
note abort subprocess completely disappear psg primary pivot successfully committed completing 
abort edge corresponding conflict pair disappear psg sg sr meet sg sr criterion 
assume process aborted reason execution gamma time aborting activity gamma executed recovery purposes 
disappeared committed active projection corresponding node removed psg sg 
sg contains process sg sr trivially holds case prefix sg sr example correct sr execution 
consider process programs pp pp executed concurrently processes process schedule depicted 
time case traditional transaction model serializability notion committed projection schedule 
schedule serializable prefix 
restriction committed projection schedule possible traditional model active transaction aborted case active processes committed pivot 
acm transactions database systems vol 
march 
atomicity isolation transactional processes delta process schedule sr conflicting activities belong aborted sub process equivalent serial schedule 
serial execution activities followed activities conflict equivalent execution process schedule required order process respected process schedule process manager responsible correctly ordering conflicting activities 
mean process manager pm guarantee process serializability process schedules account information available 
mentioned process manager possibility impose temporal order conflicting activities submit activities concurrently time specifying order associated transactions serialized underlying subsystem 
cases commit order serializability protocols implemented subsystems guarantee compliance order 
note activities correspond transactions traditional sense assume implemented process programs notion commit order serializability needs extended 
case process subsystem commit pivot activities treated way 
pair conflicting activities subsystem processes requires points return processes pivot process commit follow imposed serialization order 
failure retriable activities may lead special treatment activities 
suppose activities executed concurrently subsystem serialization order process manager requiring serialized local transaction corresponding fails operations executed general local transaction corresponds activity running parallel respect weak order aborted 
due failure note aca guaranteed subsystem abort influence lead exception leading alternative 
restarted restarted subsystem guaranteeing compliance serialization order imposed process manager 
pm extends classical transaction scheduler ways exploits information properties activities compensatable pivot retriable different states active processes running completing considers process alternative execution paths defined process program pp respects required order process defined corresponding process program explicitly imposes appropriate weak orders conflicting activities 
process recoverability process recoverability addresses possibility abort subset running processes correctly presence concurrency 
avoiding cascading acm transactions database systems vol 
march 
delta schuldt aborts strong process level case semantical rich activities distinction read write access data hardly possible degenerate strictness breitbart 
arbitrary set rs running processes process schedule superset running processes exist processes aborting processes aborted correctly affecting processes 
note require partial processes aborted may performed pivot activity representing point return process 
schedule defined set processes processes running aborting processes leave effects 
furthermore return values activities belonging aborted processes processes process schedules 
return values processes function return values activities criterion guarantees correspondence return values committed processes process schedules 
fact return values activities especially completing processes left unchanged important processes able commit successfully 
effects aborting processes processes eliminated correspondence final states required 
presence concurrency care needed situations execution sequence activities process affected compensation activity process subprocess executed running candidate aborted 
running decide abort 
completing committed impossible 
note committed pivot successfully aborted 
process recoverability encompass restriction completing process dependent running process sense abort running process imply abort completing process state diagram depicted possible 
notion abort dependency formally specify situations possibly leading violation process recoverability 
short abort dependency processes imposed activities jm jm execution jm hinders compensation definition abort dependency 
abort dependency processes imposed activities jm exists process schedule ps oe properties hold precedes jm jm compensatable jm preceded gamma gamma 
jm 
jm point return succeeding pivot activity oe commit 
acm transactions database systems vol 
march 
atomicity isolation transactional processes delta activity exists precedes jm oe jm conflicts succeeds jm conflicts inverse activity gamma conditions definition situation sequence jm gamma appears process schedule bring gamma correctly undoes effects activities cancelled 
note perfect commutativity holds take jm 
case instance read dependency writes data reads gamma write conflicts gamma due semantically rich nature activities dependency may exist situations 
essentially abort dependencies imposed individual processes reads dependencies transactions transaction termination dependencies consider dependencies subtransactions single global transaction 
traditional model activity compensatable requirement running transactions able abort captured notion recoverability 
deal different states processes determining way recovery performed adapt notion recoverability structure transactional processes 
leads notion 
formally definition process recoverability rc 
process schedule ps oe process recoverable rc pair activities jm jm imposing abort dependency holds activity jm compensatable jm ordering exist point return succeeding respect required order oe may commit pivot running primary pivot pivot subprocesses point return succeeding jm respect oe may pivot 
jm compensatable order exist process schedule jm point return succeeding respect oe may commit pivot running primary pivot pivot subprocesses 
note analogously notion abort dependency generalization read dependency traditional notion recoverability special case definition 
pivot activities exist traditional case order imposed 
semantics quasi commit pivot activities included definition pivots treated way commit process 
obviously notion process recoverability weaker aca requirement require total absence abort dependencies process schedule 
acm transactions database systems vol 
march 
delta schuldt pp pp conflict fig 

process schedule violating rc property process recoverability explicitly require total absence abort dependencies 
absence case perfect commutativity instance prevent consecutively execute conflicting compensatable activities running processes process schedule compensated prior executed prior primary pivot 
strict fact correspond notion breitbart applied transactional processes case abort just require abort possible requirements rc met 
practical applications commutativity perfect 
enforce rc abort dependencies correspond pairs conflicting activities activity execute compensatable 
order enforce rc serialization graph sg sr sg sr respectively exploited 
terms graph violations rc may occur reasons firstly introducing edge corresponding abort dependency secondly state change process 
process manager allows edges introduced serialization graph due conflict nodes correspond running processes edges node corresponding completing process running process case critical resolved joint abort second case completing process running subprocess 
edges running processes completing processes prohibited 
edges completing processes may cases allowed pivot succeeded pivot general kind edges dealt care 
furthermore processes associated nodes may change state running completing running committed incoming edges originating nodes corresponding running processes dependent running processes 
incoming edges originating nodes corresponding completing processes may allowed dealt care especially case source node running subprocess 
note mechanisms guarantee rc may rule certain schedules correct acm transactions database systems vol 
march 
atomicity isolation transactional processes delta conflict conflict conflict pp pp fig 

violation rc state change running completing respect rc 
details protocol dynamically providing sg sr rc discussed section 
example non rc execution 
consider process schedule depicted reflecting execution processes assume commutativity perfect example 
process committed running 
abort dependency exists imposed definition rc requires order due oe violated execution leave effects activity appear return value process recoverable 
example rc abort dependencies 
consider execution time process schedule depicted 
process completing running 
abort dependency exists time dependency introduced allowed processes running 
executing changed completing making abort dependency disallowed order required rc violated 
abort time longer treated correctly cascading abort including process schedule process recoverable 
analysis process serializability shown process schedule may fulfill sr property exist prefix process serializable 
phenomenon subject lemma lemma rc prefixes 
rc process schedule 
prefix 
proof lemma 
rc process schedule prefix rc 
acm transactions database systems vol 
march 
delta schuldt rc exist abort dependency pair processes constraints subsequent points return met 
jm pair activities imposing abort dependency jp point return succeeding jm case jm compensatable jm jp 
orders exist jm jp 
jp point return succeeding order turn rc 
process reducibility far addressed isolation considering atomicity sr possibility abort running processes rc 
missing unified criterion jointly addresses problems allows check abort sub processes presence concurrency possible 
includes property conflicting activity jm executed regular activity compensation gamma case compensation jm appears gamma reduction techniques permutation cancellation activities applied 
recalling notion commutativity obvious consecutive activities different processes permuted process schedule commute permutation affect final state achieved return values transactional processes 
additionally elimination consecutive activities influence return values final state form effect free sequence 
formally definition reducible process schedule red 
process schedule ps oe reducible red transformed serial process schedule ps oe applying transformation rules finitely times commutativity rule order activities replaced conditions hold belong different processes commute belong process ordered oe corresponding process program allows unrestricted parallel execution activities compensation rule activities gamma gamma activity gamma gamma removed reducibility process schedules similar reduction applied traditional unified theory concurrency control recovery major difference 
prior application reduction techniques unified theory requires expansion schedule running transaction treated aborted 
expansion leads complete schedule transaction acm transactions database systems vol 
march 
atomicity isolation transactional processes delta committed aborted 
reduction process schedules require expansion notion process schedule considers abort related activities process recoverability require active processes abort 
red prefix closed see instance process schedule example 
restriction red requires prefix process schedule pred leads notion prefix process reducibility red 
order include aborting sub processes analogy reduction traditional unified theory concurrency control recovery applied schedule expanded processes terminate order ensure compensating activities considered reduction phase 
correct termination addition previous ideas addressing non complete process schedules completing processes able commit correctly 
reduction techniques red criterion applied completed process schedule process schedule leads notion correct termination ct 
completed process schedule aborting processes running processes abort requested aborted completing processes committed 
correct termination guarantee possible perform aborts completions correctly presence concurrency 
guaranteed termination addresses formed structure inherent correctness single processes correct termination addresses correctness complete multi process executions 
step formulating correct termination process schedule completed definition completed process schedule 
ps oe process schedule 
completed process schedule process schedule defined set processes ps activity prefix completed process schedule 
pair activities hold complete 
processes aborting aborted completing processes committed 
furthermore arbitrary set running processes rs set running processes rs rs rs set running processes processes aborted processes rs committed 
process schedule completed correct termination requires existence schedule serial processes equivalent respect return values processes initial final state 
note process serializability 
sr running completing committed processes considered case complete committed processes aborted processes ignored including aborted subprocesses completing processes 
acm transactions database systems vol 
march 
delta schuldt conflict pp pp conflict fig 

incorrect completion sr rc process schedule important aspect correct termination address correct abort processes correct execution compensating activities presence concurrency requires serial processes 
correct termination requires completed process schedule reducible 
case guaranteed aborted sub processes leave effect regular activities corresponding compensation activities disappeared 
definition correct termination ct 
complete process schedule correct termination ct property reducible red 
example non ct execution 
consider concurrent execution process programs pp pp processes reflected process schedule see 
time correct respect rc completing compensated red sr holds 
completion ct property 
execution inevitably required complete introduces cyclic dependencies 
changed completing conflict cycle resolved 
possibility successfully complete correctly abort impose activity gamma executed 
commit gamma able proceed forward executing terminate correctly 
example correct ct execution 
ct execution process programs pp pp process schedule depicted 
time red rc constraints imposed abort dependency met 
furthermore conflicts exist activities completion processes completed schedule correct equivalent serial schedule precedes note completion require abort running changes state running completing ensured commit correctly 
process schedule acm transactions database systems vol 
march 
atomicity isolation transactional processes delta pp pp conflict conflict conflict fig 

ct execution pp pp completed process schedule trivially case state change execution performed commit serialization order reduced process schedule ideas unified theory concurrency control recovery schek alonso notion ct process schedules addresses atomicity isolation jointly :10.1.1.32.8317:10.1.1.30.7027:10.1.1.30.7027:10.1.1.30.7027:10.1.1.30.7027
extends theory reasons 
require running processes abort process schedule completed 
ct necessarily require completing processes terminate retriable activities assured termination trees allows continue execution subprocesses processes preference order 
second traditional unified theory consider recovery related operations schedule expansion 
expansion phase abort operation schedule replaced appropriate undo operations set rules related conflicting regular operations undo operations concurrent transactions assuming rules respected system 
case transactional process management scheduling compensating activities explicitly performed process manager expansion obsolete 
despite differences model correctness criteria induced ct reduction rules permutation elimination activities follow original unified theory concurrency control recovery 
original unified theory criterion sot serializable ordered termination introduced order reason correct concurrency control recovery schedule considering expanded schedule alonso :10.1.1.30.7027:10.1.1.30.7027
similar sot criterion exist case transactional process management 
reason traditional transaction model operations required recovery purposes known 
addition commutativity perfect commutativity behavior recovery related operations known 
transactional process management especially presence completing processes pivot acm transactions database systems vol 
march 
delta schuldt activities considered criterion exist 
definition ct process schedule verified completed process schedule 
completing process schedule practical 
special considerations restrictions required guarantee violation ct occurs completion approach require activities completing processes known analyze conflicting activities exist transitively joint completion processes may violate ct conflicting activities exist may correspond paths effected 
alternatively analysis restricted assured termination trees completing processes 
ensured concurrent execution assured termination trees exists completing processes successfully commit sr violated 
activities time restrict completing process path assured termination tree 
previous variant restricted pair conflicting activities exist assured termination trees completing processes trivially fulfill requirement ct red rc prefix new conflicts introduced completion 
drawback approach forces completing process execute assured termination trees neglecting subprocesses higher priority 
approach allow completing process time 
limiting concurrency variant restrict completion assured termination trees require information behavior process programs 
possibilities guaranteeing ct stem fact way process schedule completed left intentionally vague definition 
problem shifted design implementation concrete protocols 
relationship classes process schedules previous sections reformulated traditional notions serializability recoverability context transactional processes particular introduced criteria jointly consider isolation atomicity transactional process management 
section recall different criteria introduced show related 
consider different levels serializability transactional processes corollary sr oe sg sr oe sg sr classes sr sg sr sg sr related way sg sr oe sg sr sg sr proper subclass sg sr 
sr oe sg sr sg sr proper subclass sr acm transactions database systems vol 
march 
atomicity isolation transactional processes delta rc sr sg sr fig 

relation sr sg sr rc proof corollary 
sg sr oe sg sr sg sr holds process schedule prefix sg sr 
process schedule sg sr changes state aborting appear sg time prefix sg sr shows sg sr proper subclass sg sr 
sr oe sg sr process schedule sg sr sg acyclic 
sr holds psg acyclic psg obtained sg deleting edges sg sr process schedule sr process schedule example sr sg sr sg sr proper subclass sr discussion analyzes relation rc sr relation rc variants serialization graph process serializability 
illustrated 
theorem rc vs sr rc vs sg sr rc vs sg sr rc class process recoverable process schedules sr class process serializable process schedules comparable 
analogously rc sg sr rc sg sr comparable 
proof theorem 
relation sr rc shown examples sr rc consider instance process schedule example 
shown sr order imposed abort dependencies violated rc 
sr rc example process schedule fulfilling sr violating rc example 
sr rc classes sr rc disjoint 
shown process schedule example accounts criteria 
cases show relation rc sg sr true relation rc sg sr acm transactions database systems vol 
march 
delta schuldt conflict conflict pp pp conflict fig 

sr rc execution process programs pp pp example sr rc execution 
consider concurrent execution process programs pp pp reflected process schedule depicted 
time ca conflict equivalent serial execution additionally rc met accounts criteria sr rc simultaneously 
note pair conflicting activities impose abort dependency compensatable 
process reducibility introduced criterion account atomicity isolation transactional processes 
follows compare red prefix closed variant red process recoverability different levels serializability identified transactional processes 
theorem sr oe red 
red proper subclass sr proof theorem 
red process schedule assume sr cycle exist committed active projection ca aborting aborted sub processes appear ca activities involved conflict cycle compensated cycle eliminated reduction rule contradicts initial assumption red 
furthermore red proper subclass sr considers committed active sub processes 
conflict cycle imposed compensating activities affect sr leads violation red shown example 
example non red execution 
consider process schedule reflecting concurrent execution process programs pp pp illustrated 
time active committed process exists 
sr trivially holds 
red 
pairs conflicting activities gamma gamma lead case resolved reduction techniques 
acm transactions database systems vol 
march 
atomicity isolation transactional processes delta pp pp gamma gamma gamma conflict gamma fig 

non red sr process schedule lemma red vs sg sr red vs sg sr red sg sr comparable 
analogously red sg sr comparable 
proof lemma 
examples show relation red sg sr red sg sr consider process schedule example 
shown sr active processes exist sg sr due cyclic conflicts imposed compensating activities case perfect commutativity red hold 
red sg sr process schedule example red sg sr 
red sg sr process schedule example shows red sg sr disjoint 
sub process aborted contains compensating activity sg acyclic criteria hold simultaneously 
cases apply relation red sg sr previously shown red sr comparable 
true comparing classes red rc theorem rc vs red 
rc red comparable 
proof theorem 
relation rc red shown examples rc red 
possible violations constraints imposed abort dependencies exist process schedule albeit red 
case instance sub processes involved abort dependency aborted note rc require active processes aborted compensating activity violate red acm transactions database systems vol 
march 
delta schuldt process schedule example represents case rc red compensation executed violate red 
rc red 
consider process schedule example 
compensating activity exists compensation rule applied commutativity rule allow transfer serial schedule 
red 
shown rc constraints imposed abort dependencies violated 
rc red 
process schedule example holds rc red 
commutativity rule allows rearrange activities order transform serial execution succeeded compliance rc shown 
process reducibility guarantees process serializability addresses correct execution compensating activities aborting processes aborting subprocesses 
red provide sr rc jointly lemma red sr rc 
red hold rc sr simultaneously 
proof lemma 
consider process schedule example 
shown red 
shown rc 
meet rc sr process recoverability simultaneously 
red jointly hold rc sr reasons 
require active processes process schedule abort subset running processes 
violations constraints imposed abort dependencies affect red corresponding processes aborted 
second red require process schedules complete 
violations rc exist associated sub processes commit aborting compensating activity leading violation red process schedule 
red ensures aborted process involved abort dependency process aborted 
formally definition abort process recoverability rc 
process schedule rc constraints imposed rc restricted abort dependencies activities sub process aborted met obviously absence abort dependencies imposed pairs activities jm aborted essential red process schedule meets sr rc simultaneously red ae sr rc 
corollary red 
relationships identified classes red acm transactions database systems vol 
march 
atomicity isolation transactional processes delta red red sg sr red sg sr red rc red ae red red proper subclass red 
red vs sg sr red sg sr comparable red vs sg sr red sg sr comparable red vs rc red rc comparable proof corollary 
red ae red prefix process schedule red red proper subset red process schedule example instance red prefix red 
red vs sg sr process schedule red sgp sr conversely process schedule red sg sr conflict cycle induced completing processes jm gamma jm gamma jm case completing conflicts aborted subprocesses included sg applying commutativity compensation rules activities conflict cycle cancelled 
red sg sr disjoint instance process schedule meets criteria 
red vs sg sr process schedule sg sr red instance defined processes say contains conflict cycle jm gamma gamma jm processes aborted aborting pairs conflicting activities exist 
cycle eliminated reduction rules sg prefix acyclic process aborting conflict cycle introduced 
process schedule completing processes red sg sr instance conflict cycle jm gamma jm gamma jm exists 
activities conflict cycle eliminated applying reduction rules cycle sg 
process schedule example accounts criteria sg sr red comparable 
red vs rc process schedule example red rc 
conflict cycle jm exists process schedule formed pivot activities addition free abort dependencies rc red 
classes red rc comparable 
lemma proven process reducibility meet sr rc jointly 
follows show true red prefix closed subclass red lemma red rc sr red hold rc sr simultaneously 
proof lemma 
order show relation red sr rc process acm transactions database systems vol 
march 
delta schuldt rc red sr sg sr rc red sg sr fig 

relation sr sg sr sg sr rc rc red red schedule analyzed 
prefix correctly reduced meets red 
rc red provide process serializability process recoverability jointly 
discussion summarized relationships classes sr sg sr sg sr rc rc red red ct illustrated 
ct corresponds red completed process schedules holds sr rc 
process recoverability requirement explicitly includes possibility chose partial process schedule arbitrary set rs running processes abort processes superset correctly prc sufficient 
reason contrast traditional unified theory require active processes abort scheduling performed dynamically subset active processes aborted completed process schedule known advance 
dynamic scheduling protocol transactional processes provide rc red simultaneously 
addition dynamic protocol guarantee ct correct termination possible partial process schedule implementing strategies completion discussed section 
process locking dynamic protocol process schedules wise system alonso transactional process manager implemented supports red rc psg sr process executions guarantees correct termination partial process schedule 
introducing process locking schuldt protocol implemented basic assumptions clarified 
process program executed inherently correct follow guaranteed termination property axiom 
additional acm transactions database systems vol 
march 
atomicity isolation transactional processes delta sumptions address commutativity compensation commutativity relation perfect see definition compensation state independent 
assumption commutativity 
commutativity perfect 
assumption state independent compensation 
compensation state independent compensating activity executed exactly point time state commit forward activity 
summarizing discussion section dynamic scheduling protocol enforce red rc completed process schedules ct avoid unresolvable situations completing processes involved 
process locking protocol wise system extends ideas locks constrained sharing agrawal abbadi timestamp ordering thomas 
follows motivate necessity advanced mechanisms supporting ct protocol detail 
particular process locking exploits restriction completing process time correctly terminate partial process schedule discussed section order avoid consideration activities process programs 
due restrictions process locking provide red rc sg sr superclass red rc sg sr process schedules produced process locking highlighted gray color 
locks constrained sharing considering type locks nature processes needs taken account 
activities transactional process high level semantic abstractions 
typically correspond complex application invocations 
conventional notions exclusive shared access restrictive 
appropriate concept exploit locks constrained sharing agrawal abbadi 
idea addition shared exclusive locks third category termed ordered shared locks osl 
osl shared different transactions certain constraints sharing order associated respected execution respective operations acquiring locks locks relinquished 
lock transaction said hold acquired transaction acquired lock data object released 
lock relinquish rule guarantees locks shared order transaction may release lock long locks hold 
process locking ideas ordered shared locks combined special semantics processes locks activities ordered shared 
prerequisite application locking techniques activity level complete commutativity relation available process manager 
section seen allowed disallowed interleavings processes governed conflict behavior activities termination properties compensated 
applied process schedules requirements imposed transactional process management ordered shared locks activity level provide straightforward means acm transactions database systems vol 
march 
delta schuldt table compatibility matrix locks ordered shared exclusive held acquired map allowed interleavings processes compatibility matrix different lock types 
purpose similar usage read write characteristics operations traditional locking protocols semantics activities respect termination characteristics compensatable pivot exploited 
locks compensatable activities locks pivot activities respectively schuldt retriable activities compensatable pivot types locks applied 
locks different processes lock followed lock may ordered shared case lock followed lock 
case process having requested lock running correspond abort dependency prevented order guarantee rc 
locks ordered shared exclusive 
combination locks dealt care combination locks implies associated processes completing may impose deadlocks resolved 
compatibility matrix depicted table denotes ordered shared mode stands non shared exclusive mode 
note compatibility matrix corresponds algorithm deciding edges serialization graph allowed disallowed discussed section 
timestamp ordering original protocol proposed agrawal el abbadi agrawal abbadi generalizes standard phase locking 
protocol optimistic character compliance orders checked lock released due lock relinquish rule 
appear ultimate solution case transactional processes possible paths considered eventually effected validation coincide commit process 
turn means violations order constraint locks detected late stage worse may occur situations appropriate corrective strategies abort processes involved possible processes completing running 
circumvent drawback impose early verification correct order shared locks 
adopt apply ideas borrowed timestamp ordering protocols thomas 
mechanisms control order ordered shared locks acquired original protocol priori determination serialization order order shared data objects accessed 
prerequisite process assigned unique timestamp taken strictly monotonically increasing series 
acm transactions database systems vol 
march 
atomicity isolation transactional processes delta process locking combining osl processes previous discussion application ordered shared locks timestamp ordering context transactional processes requires activity transaction program invoked process manager additional information form ordered list maintained comprises locks held invocations activity 
lock turn refers process lock acquired corresponding activity invoked implicitly associating lock process timestamp 
activity set activities con true taken matrix reflecting complete commutativity relation available 
combining original osl protocol locks timestamp ordered lock requests special treatment necessary pivot activities 
previous sections dual character pivot activities obvious hand normal activities hand commit semantics compensation unavailable preceding activities 
due dualism pivot activity treated commit process normal activity 
instance violations constraints imposed abort dependencies processes longer possible subsequent pivot executed locks compensatable activities released case commit 
sr longer guaranteed 
pivot activities considered regular activities abort dependencies detected pivot involved 
reconsider rc algorithm serialization graph sketched section certain state changes process executing pivot provoked verification existing dependencies process 
verification captured conversion locks held compensatable activities locks pivot activity executed 
aborting processes executing compensating activities require special treatment guaranteed aborting processes aborted 
additionally process completing favored may override timestamp orders lock requests 
process locking briefly summarized follows instantiated process assigned unique timestamp ts 
activity executed lock acquired meet termination property lock lock 
lock corresponds entry lock list activity 
prior permission lock conflicting activities particular locks held activities analyzed decide lock granted 
rules specify acquisition release locks respectively define process locking detail comp rule execution compensatable activity execution compensatable activity lock required 
depending process timestamp timestamps potential processes holding locks conflicting activities lock request granted immediately requires abort concurrent processes deferred 
acm transactions database systems vol 
march 
delta schuldt granting locks 
lock activity running process granted process holds lock conflicting activity locks held conflicting activities locks older processes respect process timestamp 
lock successfully acquired executed 
aborting concurrent processes 
process younger timestamp ts ts holds lock conflicting activity aborted 
aborting wait aborted aborting processes aborted 
aborted correctly locks released lock required execution acquired executed 
completing abort resubmitted timestamp order avoid starvation 
possible able execute execution constraints imposed process timestamps sharing locks associated locks met 
additionally request lock completing process leads abort older processes holding lock conflicting activity completing processes treated class processes favored compared running processes 
lock requests 
younger process ts ts exists holds lock conflicting activity deferred aborted commit special treatment applied completing process younger timestamp holds lock possible allow pivot activity process program recursively followed process programs 
deferred commit completing process ones cases lock sharing order serialization order timestamp order coincide 
piv rule execution pivot activity pivot activity acquire lock executed 
prior lock request locks held activities preceding converted locks 
reason dual character pivots 
locks ordered shared older processes running running subprocess 
execution pivot additionally corresponds state change running completing case primary pivot violate constraints imposed potentially existing abort dependencies turn correspond violation rc 
distinction required lock granted immediately lock conversion requires abort concurrent processes deferred 
granting locks 
lock granted lock conversion process holds lock conflicting activity 
aborting concurrent processes 
case younger processes ts ts hold locks conflicting activities aborted running aborting wait aborted 
resubmitted timestamp avoid starvation 
acm transactions database systems vol 
march 
atomicity isolation transactional processes delta lock requests 
older processes hold locks process holds lock request deferred processes 
case lock compatibility matrix newly acquired lock may shared lock held completing process time allowed 
comp piv rule conversion locks locks conversion required locks process prerequisite execution pivot activity conversion lock lock similar acquisition lock conditions hold lock conversion succeeds process holds lock conflicting activity existing locks locks held younger processes ts ts aborted resubmitted process timestamp 
case older processes hold locks process holds lock lock conversion deferred processes 
gamma rule execution compensating activity gamma process aborting able correctly undo activities 
eventually processes younger timestamps ts ts executed activity conflicts appears respect observed order process schedule comp rule case allowed processes running 
correctly undo lock acquired gamma leads abort processes common locks younger timestamps 
abort process may induce cascading aborts conforming notion rc 
case cascading aborts aborted processes resubmitted timestamp order keeping original timestamp 
older processes having locks common affected lock request induced gamma abort 
abort rule abort process abort process leads release locks held 
commit rule commit process accordance lock relinquish rule original osl protocol process allowed commit locks shared correct order 
applied transactional processes criterion rc process commit common locks correspond abort dependencies shared older processes ts ts 
case deferred committed 
note common locks shared older processes may locks 
common locks older processes exist allowed commit release locks process locking follows strict phase locking pl paradigm eswaran 
note compensating activities required pivot compensation compensated demand acquire locks due piv rule require lock conversion locks aborting processes 
essentially possible older processes exist holding ordered shared locks 
sufficient guaranteeing acm transactions database systems vol 
march 
delta schuldt ct abort processes executed conflicting activities regular compensating activity captured requiring locks compensation part special treatment part acquisition rules locks 
case retriable activities acquired adequate lock corresponding transaction invoked subsystem case failure transaction lock granted guarantees safely re invoked 
obviously allowing share locks timestamp order process may induce cascading aborts 
due exclusive treatment certain combinations locks ensured cascading aborts restricted running processes 
cascading abort process completed resubmitted timestamp order avoid starvation 
additionally process locking timestamp deadlock prevention strategies rosenkrantz bernstein restriction completing process time guarantees absence deadlocks imposed cyclic wait dependencies 
process locking supports correctness criteria transactional processes identified section 
particular provides sg sr rc process schedules guarantees process schedule terminated correctly ct accounts red 
formally theorem process locking 
process schedule generated process locking sg sr rc red 
addition completed process schedule generated process locking ct proof theorem schuldt 
due usage process timestamps assignment timestamps processes instantiated process locking may rule certain process schedules considered correct supports subset sg sr rc red process schedules 
shown example example restrictions process locking 
consider process schedule depicted 
obviously accounts sg sr rc red ct process timestamps coincide serialization order sharing locks violates comp rule 
produced process locking 

implementation support transactional processes implemented top wise system alonso acts transactional process manager 
wise system turn builds process support system opera hagen 
addition process manager functionality wise provides support various practical problems modeling development process programs integrating existing services process activities specification control flow dependencies precedence acm transactions database systems vol 
march 
atomicity isolation transactional processes delta pp pp conflict conflict fig 

ct process schedule violating process locking rules preference orders monitoring state active processes facilities state active process persistent recover system failures possibility integrate arbitrary transactional subsystems appropriate subsystem adapters 
shows architecture wise framework 
follows discuss important components process program specification tool wise transactional process manager 
process program specification commercial tool specifying process programs 
done graphically bringing activities core building blocks control flow aspects precedence preference dependencies data flow constraints activities 
specification tool supports full capabilities process programs model conditional branching partially ordered activities multi activity nodes 
case modeled encompassing activities multi activity nodes nested subprocess program recursively embedded top level process program 
addition process program specification extended system considers special runtime information activities 
contains location subsystem providing service ip address respective hosts parameters service invocation service characteristics compensation exists service retriable forth 
essentially information vital actual execution process programs 
important extension added system possibility check single process programs correctly defined meet guaranteed termination criterion 
verification control flow dependencies individual properties activities 
graphical representation produced compiled language called ocr opera canonical representation hagen acm transactions database systems vol 
march 
delta schuldt modeling program process monitoring process bookkeeping transactional process persistent state subsystem adapters 
transactional subsystems manager wise fig 

general architecture wise framework understood wise process manager directly execution purposes 
process program execution wise engine core component complete framework orchestrating concurrent execution process programs acting transactional process manager 
main components wise engine depicted 
follows concentrate discussion crucial features transactional process support 
details wise engine opera process support kernel hagen 
relevant components purposes navigator scheduler dispatcher modules 
navigator interprets process program described ocr determines active process control flow dependencies activities executed navigates process programs 
prior invoking services corresponding process activities navigator contacts scheduler determines activities allowed executed presence concurrency deferred certain processes aborted 
scheduler implements process locking protocol see section 
particular scheduler conflict matrix containing specification commutativity characteristics activities provided administrator termination properties individual activities specified ocr 
addition scheduler responsible assigning acm transactions database systems vol 
march 
atomicity isolation transactional processes delta dispatcher navigator scheduler database abstraction layer template instance 
space space history space config space space object wise matrix conflict fig 

general architecture wise engine managing timestamps associated processes 
navigator accordance scheduler decide activity execute information passed dispatcher turn associates processing node cluster service particular application 
dispatcher deals physical distribution transparently managing communication remote system components 
information necessary execute processes persistent underlying wise database 
characteristics purpose information subdivided separate spaces 
template space contains process programs loaded wise engine 
active process copy corresponding process program placed instance space 
copy record process state execution proceeds 
storing instances persistently guarantees forward recoverability execution resumed soon failure repaired solves problem dealing failures long lived processes dayal 
addition runtime information instance space contains timestamp currently held locks process 
history space manages information terminated processes config space encompasses global system information persistently stores conflict matrix 

related section introduce related area transactional workflows 
acm transactions database systems vol 
march 
delta schuldt contracts spheres isolation contract model wachter wachter reuter wachter reuter aims bringing elements programming languages control flow specifications iterations conditional branching transaction processing 
contract equivalent long running transaction process consists set steps combined script specifies execution dependencies allows encompass single steps atomic units 
associated single step required compensatable entry invariant exit invariant 
entry invariant reflects conditions true order start execution step 
exit invariant step contains post conditions hold successful execution 
condition entry invariant subsequent step violated establishment invariant 
concurrency control mechanism exploited contracts called invariant serializability 
spite existence compensation step default strategy dealing failures forward recovery persistently stored contract state context current execution 
joint criterion fault tolerant concurrent contract executions exists exploits notion expansion original unified theory concurrency control recovery 
forward recovery default mechanism recovery joint criterion backward recovery considered 
core model spheres isolation approach reuter extension contract model 
basic elements activities transitions specifying conditions activities started 
basic contract model constraints settled object level 
goal concurrent execution processes provide properties success correctness 
success process execution denotes possibility correct termination presence concurrency leading notion object local concurrency control 
notion correctness guarantees availability compensation process 
forward recovery considered default strategy failure handling correctness process addresses backward recovery compensation 
correctness successful termination treated differently assigning symbolic sphere isolation soi property 
spheres joint compensation spheres joint compensation approach addresses fault tolerant execution single processes leymann 
approach considers compensation single activities allows assign single compensation activity groups activities 
sphere joint compensation set activities process executed successfully compensated 
different spheres may intersect contained 
recovery purposes pure backward recovery partial compensation combined re invocation failed activities possible 
concurrency control addressed approach 
acm transactions database systems vol 
march 
atomicity isolation transactional processes delta open process management opm open process management opm chen dayal brings nested activity model combination closed nested moss open nested transactions weikum schek 
process consists single activities blocks consist recursively activities blocks 
activities process open allowed commit prior commit process changes visible activities process outside activities called process open 
process open activities open nested transactions scope closed transaction associated process 
goal activities increase parallelism compared closed nested transactions time avoid relaxation atomicity open nested transaction model 
recovery encompasses partial backward recovery alternative executions blocks available 
activity fails recovery addresses affected block checked block alternative executions exist 
failure handling extended block hierarchy 
addition treating concurrency control recovery independently opm differs transactional processes allow higher degree parallelism 
essentially restriction effects activities visible corresponding process case opm exist transactional process management 

large scale applications typically integrate independent distributed components relying single centralized database exploiting global data model 
development applications take account individual computation steps place glued coherent way means control data flow dependencies 
process programs allow kind higher level application development 
provide framework reason correct executions process programs termed processes 
generalize traditional notion atomicity single processes leading guaranteed termination allowing flexible failure handling alternative executions defined process programs account different termination properties single activities 
importantly treat problem atomicity isolation transactional processes simultaneously framework correct termination extending generalizing unified theory concurrency control recovery 
approaches jointly cover atomicity isolation concurrency control recovery appropriate level scheduling processes 
framework established covers various applications workflow management process support systems provision appropriate infrastructures electronic commerce schuldt virtual enterprises alonso coordination subsystems schuldt 
addition covering large variety applications framework completely transparent user 
wise process support system developed eth zurich hagen alonso implemented trans acm transactions database systems vol 
march 
delta schuldt process scheduler process locking protocol 
correctness checking single processes respect guaranteed termination property completes effort develop infrastructure supporting processes applications higher level semantics applications top independent component systems provide transactional execution guarantees processes 
agrawal abbadi 
locks constrained sharing 
proceedings th acm symposium principles database systems pods 
acm press nashville tennessee usa 
alonso 
processes transactions distributed applications 
proceedings th international workshop high performance transaction systems 
asilomar california usa 
alonso blott schek 

correctness parallelism composite systems 
proceedings th acm symposium principles database systems pods 
acm press tucson arizona usa 
alonso schek 

correctness general configurations transactional components 
proceedings th acm symposium principles database systems pods 
acm press philadelphia pennsylvania usa 
alonso schek 

transactions stack fork join composite systems 
proceedings th international conference database theory icdt 
springer lncs vol 
jerusalem israel 
alonso fiedler hagen schuldt weiler 
wise business business commerce 
proceedings th international workshop research issues data engineering 
information technology virtual enterprises 
ieee computer society press sydney australia 
alonso hagen schek 
distributed processing standalone systems applications 
proceedings rd international conference large databases vldb 
morgan kaufmann publishers athens greece 
alonso agrawal breitbart abbadi schek weikum 
unifying concurrency control recovery transactions 
information systems mar 
beeri bernstein goodman 
model concurrency nested transaction systems 
journal acm apr 
bernstein hadzilacos goodman 
concurrency control recovery database systems 
addison wesley 
bernstein shipman wong 
formal aspects serializability database concurrency control 
ieee transactions software engineering se may 
bhargava ed 

concurrency control reliability distributed systems 
van nostrand reinhold new york usa 
breitbart georgakopoulos rusinkiewicz silberschatz 
rigorous transaction scheduling 
ieee transactions software engineering sept 
camp tygar yee 
anonymous atomic transactions 
proceedings nd usenix workshop electronic commerce 
usenix association oakland california usa 
chen dayal 
transactional nested process management system 
proceedings th international conference data engineering icde 
ieee computer society press new orleans louisiana usa 
acm transactions database systems vol 
march 
atomicity isolation transactional processes delta chen dayal 
failure handling transaction hierarchies 
proceedings th international conference data engineering icde 
ieee computer society press birmingham england 
dayal hsu ladin 
transactional model long running activities 
proceedings th international conference large databases vldb 
morgan kaufmann publishers barcelona spain 
elmagarmid ed 

database transaction models advanced applications 
morgan kaufmann publishers 
elmagarmid leu litwin rusinkiewicz 
transaction model 
proceedings th international conference large databases vldb 
morgan kaufmann publishers brisbane australia 
eswaran gray lorie traiger 
notions consistency predicate locks database system 
communications acm nov 
hagen 
generic kernel reliable process support 
ph thesis swiss federal institute technology eth zurich 
diss 
eth nr 



process modeling simulation tool 
switzerland www com 
jajodia kerschberg eds 

advanced transaction models architectures 
kluwer academic publishers 
kumar ed 

performance concurrency control mechanisms centralized database systems 
prentice hall new jersey 
alonso schuldt schuler 
wise approach electronic commerce 
international journal computer systems science engineering sept 
special issue flexible workflow technology driving networked economy 
leymann 
supporting business transactions partial backward recovery workflow management systems 
proceedings buro technik und wissenschaft btw 
informatik 
springer verlag dresden germany 
lynch merritt weihl fekete 
atomic transactions 
morgan kaufmann publishers san california usa 
mehrotra rastogi silberschatz korth 
transaction model multidatabase systems 
proceedings th international conference distributed computing systems icdcs 
ieee computer society press yokohama japan 
moss 
nested transactions approach reliable distributed computing 
mit press 
moss 
nested transactions 
bhargava 
van nostrand reinhold chapter 
neil 
escrow transaction model 
acm transactions database systems tods dec 
papadimitriou 
serializability concurrent database updates 
journal acm oct 
raz 
principle commitment ordering guaranteeing serializability heterogeneous environment multiple autonomous resource managers atomic commitment 
proceedings th international conference large databases vldb 
morgan kaufmann publishers vancouver canada 
reuter schneider 
contracts revisited 
jajodia kerschberg 
kluwer academic publishers chapter 
rosenkrantz stearns lewis 
system level concurrency control distributed database systems 
acm transactions database systems tods june 
schek ohm grabs ohm schuldt weber 

proceedings st international conference web information systems engineering wise 
ieee computer society press hong kong china 
acm transactions database systems vol 
march 
delta schuldt schek weikum ye 
unifying theory concurrency control recovery 
proceedings th acm symposium principles database systems pods 
acm press washington usa 
schuldt 
process locking protocol ordered shared locks execution transactional processes 
proceedings th acm symposium principles database systems pods 
acm press santa barbara california usa 
schuldt 
transactional process management component systems 
ph thesis swiss federal institute technology eth zurich 
diss 
eth nr 

berlin ios press amsterdam 
schuldt alonso schek 

concurrency control recovery transactional process management 
proceedings th acm symposium principles database systems pods 
acm press philadelphia pennsylvania usa 
schuldt schek 

automatic generation reliable commerce payment processes 
proceedings st international conference web information systems engineering wise 
ieee computer society press hong kong china 
schuldt schek alonso 
transactional coordination agents composite systems 
proceedings rd international database engineering applications symposium ideas 
ieee computer society press montr eal canada 
schuldt schek 
coordination cim bringing database functionality application systems 
proceedings th european concurrent engineering conference 
erlangen germany 
schuler schuldt alonso schek 

workflows workflows practical experiences integration sap business workflows wise 
proceedings informatik gi workshop enterprise wide cross enterprise workflow management concepts systems applications 
paderborn germany 
technical report nr 
university ulm department computer science 
reuter 
synchronizing long lived computations 
kumar 
chapter 
thomas 
majority consensus approach concurrency control multiple copy databases 
acm transactions database systems tods june 
schwarz saake 
global transaction termination rules composite database systems 
proceedings th british national databases 
springer lncs vol 
exeter 
tygar 
atomicity electronic commerce 
proceedings th annual acm symposium principles distributed computing podc 
acm press philadelphia pennsylvania usa 
tygar 
atomicity versus anonymity distributed transactions electronic commerce 
proceedings th international conference large databases vldb 
morgan kaufmann publishers new york usa 
hasse ye breitbart schek 

unifying concurrency control recovery transactions semantically rich operations 
theoretical computer science jan 

contracts means improving reliability distributed computing 
proceedings th ieee computer society international conference compcon spring 
ieee computer society press san francisco california usa 

architecture reliable execution distributed applications shared resources 
ph thesis university stuttgart 
german 
reuter 
contract model 
elmagarmid 
morgan kaufmann publishers chapter 
weihl 
commutativity concurrency control data types 
ieee transactions computers dec 
weikum schek 

concepts applications multilevel transactions open nested transactions 
elmagarmid 
morgan kaufmann publishers chapter 
acm transactions database systems vol 
march 
atomicity isolation transactional processes delta zhang nodine bhargava 
global scheduling flexible transactions heterogeneous distributed database systems 
ieee transactions knowledge data engineering tkde may june 
zhang nodine bhargava 
ensuring relaxed atomicity flexible transactions multidatabase systems 
proceedings acm sigmod international conference management data sigmod 
acm press minneapolis minnesota usa 
received march revised august accepted january acm transactions database systems vol 
march 
