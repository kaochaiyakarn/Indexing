connections backdoors restarts heavy combinatorial search extended ryan williams carla gomes bart selman computer science dept cmu pittsburgh pa cs cmu edu dept computer science cornell university ithaca ny gomes selman cs cornell edu state art sat solvers handle hand crafted instances hundreds thousands variables clauses 
years ago ability handle instances appeared completely reach 
effective complete solvers generally davis putnam loveland logemann style search procedures augmented number special techniques clause learning non chronological backtracking lookahead fast unit propagation randomization restart strategies 
progress area largely driven experimental diverse sets benchmark problems including regular sat competitions 
tremendous advances years clearly highly successful approach 
key open area research obtain better understanding methods 
hope advance understanding effectiveness current techniques analyze features practical instances amenable solution methods 
enhancements dpll focus attention interplay certain special features problem instances polytime propagation methods restart techniques 
analysis clearly part full story enhancements clause learning non chronological backtracking provide additional power solvers 
order characterize hidden structure problem instances introduced notion special subset variables called backdoor variables 
set variables forms backdoor problem instance value assignment variables simplified formula solved polynomial time propagation simplification mechanism sat solver consideration 
way stating say setting backdoor variables simplified formula falls polynomially solvable class 
note class may simply syntactic characterization 
priori reason backdoor sets interesting 
observed structured problem instances small sets backdoor variables 
example logistics planning problem instance log cnf backdoor set just variables compared total nearly variables formula 
specifically setting variables remaining formula solved immediately polytime propagation techniques sat solver satz 
similarly small backdoors structured problem instances bounded model checking domains 
identified classes formulas appear small backdoors 
example random sat problems minimum backdoor size appears constant fraction roughly total number variables 
may explain current dpll solvers complements reported 
formally introduced notion backdoor characterize complexity algorithms designed take advantage backdoors including restart strategies 
focus connection heavy tails backdoors 
significant progress hard randomly generated instances 
hard random sat instances variables reach complete solvers 
see analysis 
backdoor variables related notion independent variables 
fact set independent variables problem forms backdoor set provided propagation mechanism sat solver setting independent variables effectively uncover remaining variable dependencies 
practice backdoors quite bit smaller set independent variables 
example logistics planning domain set independent variables number operators applicable time step 
set variables generally larger minimal backdoor set variables mentioned earlier 
intuitively minimal backdoor incorporates notion critical variables variables capture critically constrained resources original problem 
small backdoor set identified sat solver restrict search setting variables leading poly search backdoor variables poly capturing polynomial propagation setting backdoor variables 
small particular size log leads effective search 
course practice small backdoor set exists needs uncovered sat solver 
show account cost searching backdoor variables obtain computational advantage focusing backdoor set provided set sufficiently small 
heuristics incorporated current sat solvers implicitly search backdoor variables uncovering variables cause large amount unit propagation 
notion backdoor came context study heavy tailed behavior observed backtrack style search 
heavy tailed distributions provide justification restarts effective prevent search procedure getting stuck unproductive portions search space contain solutions 
distributions imply existence wide range solution times including short runs 
example proposed formal model heavy tailed behavior combinatorial search characterized infinite mean model reasonable probability finding solutions searching small sub trees sizes nodes small :10.1.1.21.4367
backdoors come intuitively small backdoor explains backtrack search get lucky certain runs backdoor variables identified early search set right way 
introduce notion strong backdoor explains short unsatisfiable runs 
fact provide detailed mathematical model explaining heavy tailed behavior pareto tails backtrack search function size minimal backdoor set 
researchers demonstrated effectiveness randomization restart strategies solving real world applications 
example marques silva shown success techniques combined learning electronic design automation 
randomization restart strategies integral part current sat solvers 
structure follows 
start formally introducing concept backdoor provide empirical results size backdoor 
relate backdoor notion variable choice trees provide formal heavy results function size backdoor 
certain problem classes parity problems des instances minimal backdoor set coincides full set independent variables forcing backtrack search procedure exhaustively search setting variables 
restart strategy need involve explicit randomization 
example clause learning mechanism chaff implicitly causes solver explore different parts search space restart form deterministic randomization 
backdoors section define notion backdoor variables introduced 
empirical results backdoors 
definitions sat problem easily adapted general setting constraint satisfaction problems csp 
sat problem defined usual way 
boolean formula boolean variables 
formula consists conjunction clauses clause consist disjunction literals 
literal boolean variable negation 
sat problem determining exists truth assignment boolean variables satisfies clauses 
true false partial truth assignment 
denote simplified sat instance obtained formula setting variables defined fixing truth values variables 
set backdoor variables defined respect particular algorithm backdoor variables assigned certain values problem easy algorithm 
call algorithms sub solvers solve tractable subcases general sat problem 
definition 
sub solver input formula satisfies rejects input determines correctly unsatisfiable satisfiable returning solution satisfiable efficiency runs polynomial time trivial solvability determine trivially true clauses trivially unsatisfiable contradictory clause self reducibility determines variable value determines 
instance algorithm determines satisfiability cnf formulas rejects cnf formulas 
general definition sub solver meant capture polytime propagation simplification mechanisms dpll style sat solvers 
follows sub solver boolean formula 
consider notion backdoor suitable satisfiable problem instances 
definition 
backdoor nonempty subset variables backdoor false true returns satisfying assignment 
intuitively backdoor corresponds set variables set correctly solve remaining problem 
sense backdoor witness satisfiability instance sub solver algorithm 
introduce stronger notion backdoor deal satisfiable unsatisfiable inconsistent problem instances 
definition 
strong backdoor nonempty subset variables strong backdoor false true returns satisfying assignment concludes unsatisfiability 
follows directly backdoor sat problem search cost order poly 
simply check possible assignments 
relatively small obtains large improvement searching full space variable value assignments 
observe independent variables particular kind backdoor 
stated set variables variables may thought defined terms example maximal subset independent variables sat encoding hardware verification problem backdoor unit propagation variables values may directly determined setting independent ones 
key questions concerning backdoors size backdoor practical problem instances 
account cost searching backdoor set obtain computational advantage 
formal complexity results show concrete computational advantage backdoor variables account cost searching backdoor set provided relatively small backdoor set exists 
empirical data shows practical structured problem instances backdoor sets small 
table gives example statistics backdoor sizes 
backdoors table obtained sat solvers satz satz rand randomized version 
satz incorporates powerful variable selection heuristics efficient simplification strategy sub solver 
table show logistics planning problem log circuit design problem bounded model checking problem pipe quasigroup completion problems 
see surprisingly small backdoor sets 
clearly problem instances lots hidden structure structure uncovered propagation simplification procedures satz 
noted instances range fastest current solvers satz 
non trivial solved previous generation sat solvers tableau 
clearly new solvers better able discover exploit hidden structure small backdoors 
instance vars clauses backdoor fract 
log pipe table 
size backdoors practical sat instances 
source mentioned earlier notion backdoor set came studied mechanisms underlying heavy tailed phenomena combinatorial search 
section provide formal analysis making connection backdoors heavy tails restarts precise 
search trees backdoors analysis introduce notion variable choice trees binary trees integer labels leaves semantics quite different standard search trees 
typical semantics search tree nodes represent variables branches node represent various values assigned variable 
variable choice trees inner node represents selection variable branches correspond possible variable choices point integer label table gives results satisfiable instances 
believe similarly small strong backdoors exist structure unsatisfiable problem instances 
currently modifying satz rand allow search strong backdoors 
successful leaf fig 

variable choice tree backdoor probability branching heuristic making decision branching factor case 
tree model finite mean infinite variance infinite variance infinite mean leaf represents cost search variables selected path 
assign costs inner nodes model assumes variable selection process incurs negligible polytime cost 
consider variables instance partitioned kinds variable choice tree binary 
purposes abstraction simply call kinds bad 
left branches tree represent variable choices right branches represent bad ones 
intuitively variables choose early search backdoor variables 
choose earlier search solver better performance 
backdoor variables chosen path tree path ends leaf labeled search cost algorithm run variable choices described branches 
empirical randomization variable selection leads increased search performance attach probabilities branches variables chosen probability bad ones depicts variable choice tree backdoor consisting single variable 
notice performance deterministic search algorithms sat csps represented variable choice tree problem algorithm unique ordering variables chosen branching corresponds different paths variable choice tree 
order formalize notion variable choice tree recursive infinite characterization 
version illuminates fact variable choice tree specifies kind tree self similar fractal 
definition 
variable choice tree minimum backdoor size defined inductively 
single leaf 

left subtree copy right subtree 
edge label leaf search cost example infinite binary tree 
see wehave left edges leaves unlabeled emphasize structure 

main reasons choose infinite tree model 
defining tree solely terms allows reason heuristic choices search independently total number variables instance 
secondly permits speak search cost distribution having heavy tail investigate 
simplify exposition assume left right branches labels respectively 
leaves labeled search cost function monotone increasing 
leaf gets label depth node function meant model impact choosing variables bad ones vice versa 
fig 

sketch 
connections heavy backdoors outline formal results connecting backtrack search heuristic search model heavytailed runtime phenomena 
particular show small sets backdoor variables lead runtime profiles bounded heavy tails 
follows fix particular variable choice tree search cost function heuristic having success probability step define notation tail probability 
definition 
pr tail probability probability randomly chosen path leaf search cost roughly speaking tail probability probability random variable choices heuristic result runtime greater assume branching factor example sat 
search cost leaf exponential length path leading leaf 
pr result essentially shown :10.1.1.21.4367
generalize result 
lemma gives recursive expression probability 
lemma 
pr bi pr bi pr 
proof 
omitted due lack space included proceedings version 
assume fixed search obviously unrealistic 
taken upper bound lower bound probability choosing variable specify precisely case considering go 
tail probability theorem step find closed form solution tail probability 
give solution warm theorem arbitrary observe pr 
simply leaf search cost depth root leaf theorem 
pr 
proof 
induction trivially pr 
pr bi pr bi pr lemma tail prob 
induction 
theorem 
pr bi hk 
proof 
omitted due lack space included proceedings version 
define mean having heavy tailed distribution 
concern having search cost distribution lower bounded heavy tail tail larger pareto levy restart strategy viable 
definition 
lower bounded heavy tail exists pr 
search cost distribution bounded pareto levy distribution 
existence heavy tail bound immediately imply polynomial time restart strategy available 
depending mean distribution exponential :10.1.1.21.4367
leads believe heavy tails may arise larger backdoors saw yielding efficient restart strategies earlier 
letting total number variables intuition confirmed calculation theorem 
heavy tail lower bound log exists probability heuristic failure tail probability search cost lower bounded heavy tail 
proof 
omitted due lack space included proceedings version 
observe treated lower bound failure probability 
intuitively theorem shows success probability heuristic sufficiently bad respect branching factor large potential reaching node variable choice tree high search cost 
discuss bearing results variable choice trees randomized backtracking 
consider model randomized depth search dfs sub solver running instance having backdoor size armed heuristic chooses variable minimal strong backdoor probability randomly chooses arbitrary assignment variable variable domain size 
notation dfs denote solver properties 
model worst case search cost leaf corresponding variable choice tree recall depth variable choice tree number variables chosen complete backdoor chosen simply backtracking may try possible assignments strong backdoor sub solver decide instance 
discussion concerning runs length immediately applies measuring runtime cost backtracking heuristics setting conclude follows previous theorem theorem 
dfs sat log strong backdoors runtime distribution lower bounded heavy tail success probability 
proof 
omitted due lack space included proceedings version 
propose general scenario provides valuable insights structure real world instances way state art procedures solve instances 
experimentally appears backdoors surprisingly small log certain structured problems cf 
table 
conditions heavy tail lower bound result failure probability heuristic backdoor size log expected runtime solver dfs exponential number variables 
contrast minimum backdoor size log heuristic success probability bounded constant exists polytime restart strategy 
reasonable conditions model restarts underlying distribution backtrack search heavy tailed exponential expected runtime proper restart strategy backtrack search takes polynomial time 
conditions precisely probability heuristic success scenario appears quite close observes structured practical instances 
believe model captures key features practical dpll style sat solvers 
essence subtle interplay set critical variables backdoors heuristics attempt guide search 
hand instances small backdoors hard random instances instances cryptographic protocols 
instances appear inherently hard backtrack search defy current state art complete sat solvers 
course strategies clause learning may prove effective instances 
shown theoretical experimental connections existence backdoor sets heavy tailed runtimes hope inspire investigation notions leading discovery new properties relationships solvers instances 
anonymous referees insightful comments corrections 
follows heavy tail lower bound similar argument prove :10.1.1.21.4367

achlioptas beame molloy 
sharp threshold proof complexity 
acm symposium theory computing pages 

marques silva 
complete restart strategies satisfiability 
proc 
workshop stochastic search algorithms ijcai 

bayardo schrag 
csp look back techniques solve real world sat instances 
proc 
fourteenth national conference artificial intelligence aaai pages new providence ri 
aaai press 

chen gomes selman 
formal models heavy tailed behavior combinatorial search 
proc 
th intl 
conference principles practice constraint programming cp lecture notes computer science vol 
springer verlag pages 

fix giunchiglia vardi 
benefits bounded model checking industrial setting 
proc 
th conf 
computer aided verification cav 

crawford auton 
experimental results crossover point random sat 
artificial intelligence 

giunchiglia 
personal communication 

goldberg 
fast robust sat solver 
proc 
design automation test europe date pages 

gomes selman kautz 
boosting combinatorial search randomization 
proceedings fifteenth national conference artificial intelligence aaai pages new providence ri 
aaai press 

gomes selman crato kautz 
heavy tailed phenomena satisfiability constraint satisfaction problems 
automated reasoning 


manuscript submitted sat 

kautz mcallester selman 
exploiting variable dependency local search 
proceedings international joint conference artificial intelligence 
aaai 

li 
constrained approach narrow search trees satisfiability 
information proc 
lett 

li anbulagan 
heuristics unit propagation satisfiability problems 
proceedings international joint conference artificial intelligence nagoya japan 

luby sinclair zuckerman 
optimal speedup las vegas algorithms 
information process 
lett pages 

marques silva 
building state art sat solvers 
proceedings european conference artificial intelligence ecai 

marques silva 
search algorithms satisfiability problems combinatorial switching circuits 
phd thesis dept eecs michigan 

marques silva sakallah 
boolean satisfiability electronic design automation 
proceedings ieee acm design automation conference dac 

moskewicz madigan zhao zhang malik 
chaff engineering efficient sat solver 
design automation conference pages 

selman kautz mcallester 
challenges propositional reasoning search 
proc 
international joint conference artificial intelligence 
aaai 

williams gomes selman 
manuscript review ijcai 

wolfram 
new kind science 
stephen wolfram 

zhang 
random jump strategy combinatorial search 
proc 
international symposium ai math 

