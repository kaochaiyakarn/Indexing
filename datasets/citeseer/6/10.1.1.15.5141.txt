longer foreign teaching ml compiler speak natively new foreign function interface sml nj 
idea data level interoperability ability ml programs inspect manipulate data structures directly 
core component encoding complete type system ml types 
encoding extensive folklore typing trick advantage ml polymorphism type constructors abstraction mechanisms functors 
small low level component deals new types struct union declarations program linkage hidden programmer eye simple program generator tool translates declarations corresponding ml glue code 
competent ml programmer know able new facility 
example suppose ml programmer need link program routines 
simple example functions input read list records file findmin find record smallest list 
implementors library provided header file describe interface typedef struct record list struct record int double list extern list input char extern list findmin list write ml code read list records file find corresponding smallest sml nj implementation start matthias blume lucent technologies bell labs september setting cm library cm library structure basis cm cm shell target cm ml glue sml client sml specification declares library exports structure :10.1.1.55.9444
libraries basis cm representing standard ml basis library cm providing types ml programmers available 
library cm available having generated shell command ml applied library implementation provided ml source files glue sml client sml 
glue code necessary instantiate functor exported cm implements ml interface argument describes dynamic linkage performed 
assume library name glue sml look structure val library name lazy true global true actual client code uses structure defined modules including structures encoding types routines dealing nul terminated strings exported cm structure struct fun minx val fn input valof val fn findmin cvt ml double get double cm compilation manager sml nj 
record ptr key code allocates character array sufficient size copies ml string result option allocation fail valof 
fn input represents function input declared fn findmin represents findmin 
ptr dereferences pointer yielding object pointing 
record selects field struct record object declared get double fetches contents double object 
cvt ml double converts double value version concrete ml equivalent type real 
add final twist suppose want find record largest interface provide function accomplish task shall despair write equivalent directly ml fun maxx fun cvt ml double get double record ptr fun loop ptr loop get ptr record ptr loop faced decision implement major piece software modern typesafe higher order language ml comes existing code integrated project 
existing code usually written ml low level language appearance 
serious provided merely convenience 
implemented top structure offer 
implementations high level languages provide foreign function interface ffi 
ffi ml bridge semantic gap languages mediate different data formats calling conventions 
fairly popular approach stub functions ml side call function arbitrary type really invokes helper routine stub coded type limited small set types possible single type ml compiler runtime system taught handle translates ml data data order pass arguments ml side invokes behalf caller translates data ml data order pass results back ml side takes care data conversion problems calling stub ml difficult 
sml nj old ffi needs carefully written assembly glue 
stub able deal high level data likelihood stub code ml side translate layers abstraction 
having stub code sides language boundary unsatisfactory reasons adds intermediate steps slow foreign function invocation 
takes apart phases translation high level ml data data 
combining phases potentially efficient 
code ml program want call know ml 
priori need ml side world visible foreign call 
side stubs wrap results ml values need allocate ml heap 
means considerable portion ml state available side garbage collector invoked ml side find state altered foreign call returns 
avoiding side stubs significantly simplify protocol cross language calls 
data level interoperability source inefficiencies stub routine approach marshalling scheme translation large data structures expensive 
overhead completely dominate potential savings calling fast routine ml side interested tiny portion result 
marshalling data usually involves copying useful properties sharing get lost process 
approach suffers problems avoiding marshalling operations need side stubs rely data level interoperability 
idea high level language augmented types represent low level data 
ml code call functions help intermediary passing arguments receiving results directly 
see encode entire type system ml types 
fact done entirely ml support compiler 
encoding ml programs traverse inspect modify create data structure marshalling 
ffi describe provides glue code generator ml automatically deals new types union declarations 
furthermore enables ml compiler generate correct calling sequences fixed arity function puts mechanisms dynamic linkage place 
encoding type system provided cm library ml hooked cm way gets invoked automatically necessary 
resulting system characteristics human programmer sees ml code 
theory necessary capable ml programmer know 
knowledge low level data representations required 
includes representations cas ml data structures 
types ml interface faithfully reflect types original interface represented 
interface changes changes propagated automatically ml side 
resulting inconsistencies show ordinary ml type errors fixed 
course providing type system embedded ml type system get programs safe programs parts new facility 
believe sacrifice safety act linking code 
fact new approach considered safer foreign function interfaces respects types original interface going completely typeless stub layer 
systems stub code generated automatically typed language course just safe 
variable argument functions major feature type system handle 
encoding type system encoding types ml type system folklore trick expresses constraints values type making type representation type new ary type constructor 
invariants concerning values expressed cleverly chosen type constraints instantiations array dimensions warmup consider full detail concrete example technique works 
incidentally toy example actual piece larger picture 
ml size runtime concept apparent array type 
contrast compiler statically distinguish types int int 
effect achieved ml 
unary type constructor form array talks array element type try define new type constructor includes dimension component 
arrays different size instantiate differently 
ml type system requires instantiated type number 
fortunately really interested actual numeric value array dimension 
require differently sized arrays different types 
approximation simply brand new type time new dimension value needed 
requires unpleasant bookkeeping avoid different types dimension value rendering incompatible equivalent array types 
better method set time infinite family types mapping non negative integers 
infinite family types consider ml signature sig type bin type dg type dg type dim type constructors seen little language writing numbers binary notation 
example bin dg dg dim stand bin dg dg dg dg dim read 
actual implementation uses decimal number representation type constructors works way 
clearly sufficiently rich infinite family types 
provides room mapping non negative integer type 
remaining problem prevent forming unintended types real int dim 
prevent formation values unintended types providing limited set constructors values types fit dim scheme sig val bin bin dim val dg dim dg dim val dg dim dg dim example saying dg dg dg bin produces dim value corresponding 
construct value non negative integer representing binary say 
invoking dgd bin 
set value constructors restricted prove straightforward way induction number applications dgd values types form bin dgd dgd dim 
missing piece proof mapping non negative integers dim values known uniqueness binary number uniqueness requires absence leading zeros 
prevent leading zeros need restrict application dg values type bin dim 
negative constraints expressed directly ml introduce second type parameter track sig type zero nonzero type bin dg dg type dim val bin bin zero dim val dg nonzero dim dg nonzero dim val dg dim dg nonzero dim notice dg enforces argument nonzero dg polymorphic indicating don care attitude 
provide concrete implementation signature 
type requires non trivial representation dim types phantom types meaningful values 
matter represents unit type contains value strictly necessary structure dim sig 
mapping positive integers easier simply don provide zero value bin start val bin dg dim 
val toint dim int struct type zero unit type nonzero unit type bin unit type dg unit type dg unit type dim int val bin fun dg fun dg fun toint opaque signature match crucial gives fresh identity type constructors bin dg dg dim zero nonzero 
representation types type equality representation types shine 
polymorphism add function toint returns integer 
dimension carrying array types fill dimension component type component dim type corresponds array size open dim sig type val create dim type element integer array int bin dg dg dg instance created follows val dg dg dg bin val create notice necessary write types 
ml type checker automatically infer type array dimension correctly 
dimension polymorphism emulate monomorphic array types ml lets possible write code polymorphic array size 
example function takes arrays statically known equal size val real real real expressions constructing dim values spell numbers bits reversed 
fix cosmetic problem continuation passing style value constructors 
expense making individual types complicated ends looking pleasant careful usefulness fairly simple constraints expressible 
type example force arbitrary arrays differ size exactly 
pointers objects lvalues implementation represents pointer simple address sufficiently wide word type concrete representation 
course exposing representation directly programming error prone 
language implementations typically low level representation provides type constructor pointers facts address tracked type value pointed value considered mutable 
dress low level pointer representation type models behavior type ro rw type ptr types ro rw phantom types instantiate 
indicate object pointed declared const instantiation complicated fully describes declared type value pointer points 
pointer points value residing memory 
values called objects 
non object values reside machine registers 
necessarily address pointed pointer 
related notion lvalues expressions denote objects 
lvalues bit troublesome unusual ml point property mean different things depending context appear left hand side assignment operator refer object address right hand side mutate rvalues refer value stored address 
ml values mimic behavior conversion lvalue rvalue operation fetching memory explicit 
fairly equivalent ways going 
abandon notion lvalues require pointer appear left hand side assignment operator 
route taken ml ref type code relies assignment typical ml code probably look awkward 

assignments look explicit notion objects object valued expressions 
fetching objects done explicitly 
route taken ffi design 
representation objects really pointers distinction purely reasons 
means address dereference identities low level terms type ptr type obj val ptr obj val obj ptr conceptual subtyping relation governing constant mutable objects 
pointer mutable object passed context accepts pointer constant object drawing compiler warning way requires cast 
ml model subtyping providing polymorphic injection function internally represented identity function turns object corresponding read object val ro obj ro obj memory fetches stores ideally polymorphic fetch function takes object type obj returns value type stored 
mean instantiation phantom type actual type value 
unfortunately fetch operation polymorphic ml sense 
remember concrete representations types compiler uses representing data 
fetching unsigned char object operationally fetching double object 
parametric polymorphism 
saved fact fetch arbitrary objects 
example way fetch contents entire array 
essence distinguishes class values fetched stored second class values 
possible cover range class types relatively small finite set individual fetch store operations need cover base types int double pointers 
means const qualifier indicates promise expectation context 
subtyping relationship way 
language ml provides overloading sets operations single uniform looking interface 
fetch operations polymorphic object store operations require object rw 
operation pointers polymorphic pointer target type fetching storing address works way regardless happens stored address 
type sint signed int type uint unsigned int type float type double val get sint sint obj sint val get double double obj double val get ptr ptr obj ptr val set sint sint rw obj sint unit val set double double rw obj double unit val set ptr ptr rw obj ptr unit coming back discussion type parameter means say types class values parameter instantiated ml side type value 
values values type true phantom type case 
arrays explained array values array objects 
phantom type describing arrays uses dim module dealing dimensions 
possible ml compiler statically distinguish arrays different sizes equal element types just compiler 
type arr val decay arr obj ptr val sub arr obj int obj sense important operation array objects decay 
array objects decay pointers respective elements contexts 
happened operations array objects explained terms operations pointers 
implementation provides separate array subscript operator sub performs dynamic bounds checking 
decay identity function hidden fancy types implementing sub tricky 
array subscript pointer arithmetic requires information size individual elements 
polymorphism really parametric low level operation depends instantiated 
discuss problem solution 
pointers pointer arithmetic runtime type information obtain operation adding pointers integers nice signature val ptr add ptr int ptr suppose represent ptr word word 
saying ptr add sint rw ptr correspond ptr add double rw ptr 
magic multipliers sizes types specific particular system 
communicate size information operation 
explicit type parameters approach modelling functions types sizeof operator explicit passing runtime type information rtti 
information need simply single number representing number bytes occupied object type 
imagine ml type rtti values 
pointer arithmetic typed follows val ptr add ptr int ptr problem prevent passing dynamic type information type perform pointer arithmetic 
prevent misuse static typing dynamic type values 
rtti type type typ 
individual operators ptr add enforce correct val ptr add typ ptr int ptr define type typ submodule module carries predefined rtti values base types value constructors type constructors structure sig type typ val sint sint typ val double double typ val ptr typ rw ptr typ val arr typ dim dim arr typ struct type typ int val sint val double fun ptr fun arr dim toint type fixed corresponding rtti value types statically known corresponding values 
cross module inlining transport size constants module type information 
result possible ml compiler generate pointer arithmetic code just efficient counterpart 
somewhat paradoxical situation ml compiler unable provide size information forces programmer help information programmer making mistakes process 
languages programmable access intensional type information example haskell type classes possible remove remaining burden programmer part need explicit rtti arguments :10.1.1.103.5639
keeping rtti scenes willing sacrifice low level efficiency eliminate explicit type arguments ml solution 
change concrete representation objects pointers addresses paired corresponding rtti 
change representation rtti 
longer sufficient pass simple size constants 
rtti structured 
see consider implement fetching pointer object 
object represented pair consisting object address rtti rtti pointer 
fetch object get address pointer pair rtti object pointer points 
come 
hope recover rtti pointer 
leads design structure sig type typ val sint sint typ val double double typ val ptr typ rw ptr typ val arr typ dim arr typ val sizeof typ int struct datatype base int ptr arr int type typ val sint base val double base fun ptr ptr fun arr arr dim toint fun sizeof base sizeof ptr sizeof arr sizeof corresponding implementation type constructors obj ptr structure sig type obj type ptr val fetch ptr ptr obj ptr struct type obj addr typ type ptr addr typ fun fetch ptr ptr load addr fetch ptr raise impossible notice prove reasoning types second clause fetch ptr truly impossible 
realistic hope ml compiler perform type reasoning eliminate runtime check 
case theoretically possible optimization real compilers mapping rtti values static types 
compiler principle reduce monomorphic call sizeof constant 
practice compiler understand nature mapping generate code calculate sizes runtime 
aside obvious representational overhead reasons keeping type information scenes going efficient explicit rtti passing 
providing interfaces tradeoffs efficiency vs ease light weight explicit rtti passing interface heavy weight rtti scenes approach 
implementation lets programmer choice provides ways mixing program 
type constructors ptr obj come flavors implemented simply machine address requires explicit type parameters pair machine address associated structured type information 
light weight representation require structured type information kinds runtime types typ ml type structured variety size provides size variety rtti 
void encoding direct equivalent void truly type means different things different contexts 
void outside function prototypes void generic pointer type 
model void separate ml type called 
conceptually supertype ptr types 
provide corresponding polymorphic injection function val ptr inject ptr generic pointers useless go way 
course safe operation subvert type system 
linking code cause additional problems ml code simply directly normally done just side 
ml casts provided functions polymorphic requiring programmer write explicit type constraint 
typed rtti effect val ptr cast ptr typ ptr fact heavy weight version ptr rtti part representation ptr cast needs explicit rtti able form value 
imagine keeping rtti values casting safe 
ml side better mechanism write code polymorphic pointer target type 
restricted cases interface existing code explicitly requires truly wants cheat type checker 
function pointers function pointers class values 
ml side type instantiated low level representation function pointers simply machine address interesting look kind rtti 
want provide polymorphic operator call takes function pointer suitable arguments invokes underlying function arguments val call underlying mechanism exact sequence machine instructions necessary dispatch call function highly dependent instantiated 
encapsulate letting rtti function pointer carry dispatch code 
revised implementation structure structure sig struct datatype base int ptr arr int addr type typ unfortunately code compile type abbreviation typ silently drop type parameter floor 
design add additional type parameter typ ptr obj type obj type ptr type structure sig type typ rule obj ptr typ occurs instantiation instantiated cases instantiated unit 
properly set interface types easy prove values violating rule constructed 
actual implementation decided cheat completely avoid type argument clause 
unsafe object object types implementation sml nj unsafe cast operation needed 
turns types public interface guarantee casts safe value converted unsafe object converted value type original type 
function arguments results type function pointer instantiated tuple type elements correspond arguments function instantiated type function result class value 
arguments class values familiar ml type encoding 
chosen model structs unions second class values objects values ml side pass arguments 
see phantom type say struct node node su 
function argument type struct node passed corresponding read object type node su ro obj 
function results struct union type handled additional writable object argument result written 
handling struct union far seen encoding fixed part type system 
programs usually declare new types struct union 
focus struct unions handled similar way structs fields offset 
fully defined structs tempting view mention struct generative type declaration ml datatype 
quite correct 
ml compiler encounters syntactically identical instances generative declaration construct distinct types considered equal type checker 
separate mentions structs tag program refer type 
way modeling assume predefined infinite family struct tags individual program select members family choose interface corresponding types 
struct declaration create new type takes existing type defines interface 
represent struct types ml precisely model 
consider struct node 
type encountered ml glue code generator issue code select tag type combining type constructors defined structure tag structure 
sig type node struct local open tag type node object pointer arguments light weight encoding implicit rtti 
structure type constructor character occur identifier 
phantom type describing second class struct node values node su 
associated structure node implements interface values object type node su obj consisting rtti run time size information field access operators 
field access operators correspond notation map struct object object describes selected field 
example suppose struct node definition struct node const int struct node ml produce signature structure node sig type tag node val size node su size val typ node su typ val node su obj sint ro obj val node su obj node su rw ptr obj treatment const qualifiers field declarations accessor constant field ignores argument returns read field object 
accessor mutable field result argument 
produces expected behavior field access yields constant object field object part declared mutable 
incomplete structs pointer type act form type target called incomplete type struct known tag fields declared 
model pointer incomplete type declared file fresh ml type problem complete type revealed file corresponding ptr type equal need way keeping identity type hidden part program part written compiled benefit knowing complete definition struct parts know identity 
ml functors parameterized modules answer puzzle 
ml generated code interface form functor 
minimum takes parameter mediate dynamic linkage 
takes additional argument incomplete pointer type interface 
example struct str produce functor argument form structure str pointer incomplete type signature pointer incomplete type library specifies type iptr 
think abbreviation str su ptr 
connection incomplete complete type spelled type str available point 
completion client code knowing full definition struct str having access structure str fill str functor argument pre defined conversion functor set way equates pointers structs described argument iptr type constructor result structure str str mutual recursion incomplete types structure str result applying functor representing interface struct str defined 
serious chicken egg problem interface defines struct containing pointer incomplete struct defines struct containing pointer incomplete struct account ml produce code pattern 
interface translates ml structure containing aforementioned functor partial definition structure dependent functor structure struct type structure struct type tag val size val typ functor structure pointer incomplete type struct type structure struct open inherit partial version 
provide missing pieces code look similar les swapped 
require full structure applied partial version break dependency cycle structure structure structure structure keeping types incomplete incomplete type stays 
provide placeholder corresponding functor argument invoke functor 
functor need arguments causes result iptr type constructor fresh structure str low level implementation implementation main foundations 
stage implementation type encoding consisting client visible high level structure corresponding low level structure int contains number unsound extensions 
abstraction raw memory 
representation class values ml values 
low level operation directly dispatching calls functions ml code stage encoding types code implements encoding types defines structure int 
second structure called obtained int applying restrictive signature match 
library mechanism sml nj compilation manager hide int ordinary programmer 
extensions contained int invalidate invariants structure guarantee 
code generated ml supposed int directly 
implementation done entirely ml ml compiler understanding type system 
raw memory access modified sml nj compiler provide primitive operations fetching storing raw memory 
representation memory addresses simply sufficiently wide word type 
memory access provided char short int long sized integral types pointers addresses single double precision floating point numbers 
representing class values sml nj currently full variety precisions integral floating point types typical compiler provide 
ml type double triple duty representing different types 
example fetching float value bit floating point number memory yields ml real real 
implicit promotions built respective memory access operations 
high level interface types float double distinct representations 
types float ptr hand double ptr considered equal possible perform arithmetic double rtti float guaranteed produce unintended results 
ptr add ptr float double rw ptr client programs set separately provided conversion functions translate types concrete ml types vice versa 
conversion functions exist typing reasons implementation side simply identities 
field access access struct field translates struct addresses field addresses adding field offset 
offsets machine compiler specific 
ml tool mainly consists compiler front implemented sml nj library calculate required numbers easily 
field access functions generated specializing generic function provided structure int 
give concrete picture assume lightweight representation objects implicit rtti structure int sig val mk field int su obj obj struct fun mk field int field offset struct node cause ml produce glue code fun node obj int mk field sint obj clearly int mk field dangerous access restricted trusted code generated ml 
function calls implementing direct calls functions ml code required somewhat extensive changes ml compiler 
avoid need outright syntax changes calls added new 
considerable magic needed implementation 
function prototypes calling protocol main hurdle fact need communicate code generator prototype function called prototype happens encoded corresponding type 
compiler supposed built knowledge encoding 
call operates level types actual values passed function concrete ml values integers words reals various precision 
mapping types ml representation types compiler recover prototype 
trick called arguments word representing function address 
second argument tuple ml values representing arguments function including address return struct necessary 
third argument dummy argument type describes function prototype precisely allow correct code generation 
compiler primitive environment type val word word actual constrain type 
particular form tk ti word word int int real real 
generating code function calls uses existing calls facility 
sml nj backend calls added support projects sml nj 
api facility relies experienced programmer gain access int referring cm library named int cm 
cm implements mechanism tracking access permissions enforcement 
bit machine description coded ml value lowlevel prototype function calling 
implement needed way constructing correct prototype value pass ml risc 
comes 
defined adhoc way little language expressed ml types decoded uniquely describe prototype value 
simple example 
prototype double int int double encoded unit int string real real list reader guess int stands int string stands pointer real stands double 
unit type added front tuple avoid anomalies cases fewer arguments 
final twist list type constructor 
semantics set way eventually ignores third argument 
declared formally necessary provide third argument 
making type list type simply pass empty list nil actual call 
nil argument obviously effect safely dropped optimizer 
result third argument typing trick achieves goal communicating prototype backend causing runtime overhead 
frame pointer sml nj allocates stack frames continuations heap 
result normally usual system stack function calls 
functions hand system stack 
principle cause major problems system stack exists pure ml code running 
properly set stack needed operating system invoking signal handlers 
effect point view program ml code acts single non recursive routine perform function calls long ffi calls 
advent new ffi literally true machine stack pointer stay constant times execution ml code 
sml nj backend took shortcuts treated stack pointer frame pointer 
particular machines limited register sets frame pointed frame pointer hold ml temporaries pseudo registers stack spills 
addressing temporaries involved stack pointer register changing value register setting foreign call break compiler assumptions 
avoid problem implements virtual frame pointer sml nj uses address frame 
avoids wasting machine register real frame pointer 
code generation addressing modes relative get rewritten addressing modes relative stack pointer offsets adjusted account temporary changes stack pointer register value 
fairly common optimization compilers needed sml nj 
addition expected beneficial ffi projects framework 
efficient signal handling systems precise collectors sml nj interrupted asynchronous signals arbitrary points 
execution advance safe point ml signal handler invoked 
low level signal handlers part runtime system simply record arrival signal code generated ml compiler check condition regular intervals 
known technique eliminates additional runtime overhead signal polling check double duty handler records arrival signal setting current heap limit zero 
causes heap limit check fail subsequent tests longer critical path distinguish genuine heap overflows arrivals signals 
heap limit implemented register blindly setting register zero ml code executing unsafe 
setting call ml involves temporarily turning form signal handling 
sml nj old ffi set called flag dispatching call returning call invoke run time system routine explicitly check signals arrived 
technique safe suffers increased overhead amounts doing function call 
new implementation calls avoids runtime penalty trick sets new ones bit pattern 
old ffi sets 
returning call sets back 
atomically performs bitwise runtime system signal handler modified set just resides main memory regardless state flag 
currently sets actual heap limit pointer 
fairly straightforward see signal eventually causes regardless arrives 
signal handler set zero directly zero result bit operation atomicity key avoiding races 
result new call mechanism need check pending signals explicitly rely heap limit check guaranteed come soon 
dynamic linking implementation linux provides interface dlopen structure 
possible link existing shared libraries having recompile relink runtime system 
problem dynamic linking automatically sml nj export heap facility 
ml garbage collector know data structures valid exported heap gets 
programmer responsibility data structures alive heap exported 
addresses symbols exported shared libraries corresponding global objects global function pointers represented handles stay valid heap exports package re validate necessary 
encoding expressed fact global variables represented ml thunks functions unit argument returning actual value 
exported functions represented similarly function pointers 
ml interface contain ml functions internally called obtain corresponding function pointer thunk dispatch call 
non trivial overhead function calls factored inner loops obtaining function pointer value performing calls 
related virtually implementations high level languages provide form ffi difficult list just small fraction 
idl approaches programmer writes specification interface uses special cases possible sml nj cleanup facility save restore certain data structures 
compiler generate glue code high level language side 
examples include direct 
approach falls idl side stub generation trivial 
closer spirit implementation data level interoperability moby 
moby takes ambitious approach modelling full type system 
particular older version ffi type constructors corresponding program generator separate moby types full set operations pointer type interface 
implementation side moby ffi takes advantage fact language specifically designed data level interoperability mind 
direct access intermediate language bol compiler 
contrast showed types modelled limited compiler support abstraction facilities high level language 
phantom type trick extensively come times past 
ffi designs example direct model subtyping relationship com interfaces 
new extreme taken old trick modelling size information pointer arithmetic run time types function prototypes array dimensions incomplete types 
preliminary results current implementation linux fully operational 
way provide missing bits pieces backends supported sml nj 
benchmarking results preliminary 
function calls dispatched function pointers perform numbers show 
looked different versions math structure 
versions differ square root sine cosine implemented 
corresponding pentium machine instructions baseline comparison 
library old ffi 
library new ffi 
portable ml code 
compiled relatively short floatingpoint intensive nucleic benchmark relative math implementations ran resulting code times succession lightly loaded mhz pentium iii system running linux discussions kathleen fisher john reppy led fairly extensive exchange technology 
moby adopted type encoding similar go ignoring const wrinkles language 
kernel 
cumulative results times seconds elapsed time machine old ffi new ffi ml calling highly tuned assembly code mechanisms turns win native ml solution 
call overhead eats close half advantage case old ffi new ffi incurs third penalty 
better sml nj cross module inlining facility working properly 
operations types simple identities projections address arithmetic 
inlining essential performance moment happen 
lack cross module inlining serious impact performance look data level interoperability traversing level deep complete binary tree generated program times slower traversal expressed inlining operations hand performance comes numbers shall expect cross module inliner debugged 
say succeeded provided ffi faster easier predecessors 
unique way fully encodes type system ml 
nearly programmer direct clumsy looking equivalent ml side 
resolve remaining performance problems reasons left ml programmer resort writing objective reuse existing code 
missing type encoding way handling variable argument functions printf 
chose encode enum types simply int place 
distinctions enum int weak 
lastly implementation currently support callbacks calls ml functions passed arguments callbacks require state ml world accessible side 
add second version save ml state defined way expense somewhat slower 
passing ml functions callbacks tricky requires dressing ml closure value looks function pointer 
way handling runtime code generation 
remaining probably due unrelated effects sml nj habit allocating stack frames heap 
test moby compiler achieved better performance simple benchmark 
callbacks fundamental problem acknowledgments john reppy suggested size lightweight variant typ 
designed calls api provided implementation architecture 
lal george hard implementing virtual frame pointers helped getting new set memory access primitives right 
allen leung providing typesetting sml code 
andrew appel 
compiling continuations 
cambridge university press 
andrew appel david macqueen :10.1.1.55.9444
standard ml new jersey 
martin wirsing editor third int symp 
prog 
lang 
implementation logic programming pages new york august 
springer verlag 
andrew appel zhong shao 
empirical analytic study stack versus heap cost languages closures 
functional programming january 
matthias blume 
cm sml nj compilation library manager 
manual accompanying sml nj software 
matthias blume andrew appel 
higher order approach cross module optimizations 
proc 
acm sigplan international conference functional programming icfp pages 
acm press june 
finne leijen meijer peyton jones 
direct binary foreign language interface haskell 
proc 
acm sigplan international conference functional programming icfp pages september 
kathleen fisher riccardo pucella john reppy 
data level interoperability 
bell labs technical memorandum april 
lal george 
customizable reusable code generators 
technical report bell laboratories may 
cordelia hall kevin hammond simon peyton jones philip wadler 
type classes haskell 
acm trans 
programming languages systems march 
lorenz 
portable interface standard ml new jersey 
technical report bell laboratories january 
xavier leroy 
user manual 
available caml inria fr march 
stefan matthias blume zhong shao 
cross function inlining flint 
technical report yaleu dcs rr dept computer science yale university march 
john reppy emden gansner 
standard ml basis library 
form 
sml nj class continuations 
usual solution ignore problem simply hope callback code exhibit non local flow control crosses boundary ml 
