staircase join teach relational dbms watch axis steps torsten maurice van jens teubner university konstanz department computer information science box konstanz germany teubner inf uni konstanz de relational query processors derive effectiveness awareness specific table properties sort order size absence duplicate tuples 
text applies adapts successful principle database supported xml xpath processing relational system tree aware tree properties subtree size intersection paths inclusion disjointness subtrees explicit 
propose local change database kernel staircase join encapsulates necessary tree knowledge needed improve xpath performance 
staircase join operates xml encoding knowledge available cost simple integer operations 
report quite promising experiments staircase join enhanced main memory database kernel 
relational database management systems rdbmss repeatedly shown versatile relational data model 
rdbmss successfully host types data anticipated live inside relational databases non normal form nf nested tables complex objects spatio temporal data 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference berlin germany university twente faculty box ae enschede netherlands utwente nl contributes building block staircase join help relational technology embrace tree data type 
ultimately strive efficient database support xml data storage xpath path queries 
key observation rdbms efficiency significantly improved increasing level awareness specific properties tree data type 
quite substantial body research proposed number tree mappings encode data especially xml documents relations :10.1.1.21.8854
encodings designed tree specifics ancestor descendant relationship tree nodes recovered relational query 
level tree awareness sufficient devise efficient relational implementations xpath ancestor parent child descendant axes 
encoding xml data xpath accelerator added real xpath awareness sense xpath axes supported efficiently 
nutshell xpath accelerator uses preorder postorder ranks document nodes map nodes dimensional plane 
evaluation xpath axis steps boils process region queries pre post plane 
orthogonal build simple xpath accelerator structure exactly described shift focus exploit additional properties pre post plane help significantly speed xpath query evaluation 
unexplored properties exclusively derive fact encode tree shaped data 
increase level tree awareness 
pure sql queries capable exploiting properties 
gist staircase join proposal join operator carefully tuned exploit encapsulate tree knowledge pre post plane 
staircase join xpath axes induce document regions shaded nodes reachable context node step preceding descendant ancestor axes 
leaf nodes denote empty xml elements attributes text comment processing instruction nodes inner nodes represent non empty elements 
added rdbms kernel sql suffices full tree awareness 
proceeds follows 
section briefly reviews core details xpath accelerator idea limitations rdbms faces sql processor taught advanced tree properties 
section introduces staircase join discusses tree aware optimizations built join operator 
pre post plane particularly easy extract certain tree properties 
leads algorithms cpu cycles xml document node 
discuss implications implementation staircase join especially context relational main memory dbms monet section 
section closes performance assessment ideas developed far 
section reviews related research conclude section 
xpath accelerator xpath accelerator relational xml document encoding 
relational meant sense encoded document represented relational table indexed index structures native rdbms preferably trees see may queried relational language sql 
encoding designed close eye xpath axes semantics node xml document axes preceding descendant ancestor partition document disjoint regions 
depicts document regions node xml instance seen context node xpath expression preceding node abbreviated preceding yields node sequence 
note context node plus nodes regions cover document nodes 
xpath accelerator observation nodes document encoded region notion maintained 
evaluation xpath step axes amounts ing nodes contained region associated axis 
xpath axes determine easily characterizable super subsets regions ancestor self supported standard rdbms join algorithms child parent 
focus partitioning axes 
actual encoding maps node preorder postorder traversal rank document tree pre post shows dimensional pre post plane results encoding sample xml instance 
original document tree pre post plane partitioned rectangular regions characterize xpath preceding descendant ancestor axes nodes preceding located lower left region respect context node note characterization document regions applies nodes plane 
example upper left region respect hosts nodes ancestor 
means pick node location plane evaluate xpath step context node 
turns important feature comes implementation xquery expressions compute arbitrary context nodes traverse 
exactly usage scenario led development ideas xpath accelerator serves back pathfinder xquery compiler runtime currently development university konstanz 
refer detailed explanation xpath accelerator idea 
follows assume database stores single large document 
discussion readily carries multidocument databases document identifiers new virtual root node documents may gathered 
post pre document node context node pre post pre post plane node encoding table doc xml document 
dashed dotted lines indicate document regions seen context nodes respectively 
select distinct pre doc doc pre pre pre pre post post post post order pre unique pre post doc doc query associated plan 
sql xpath evaluation pre post plane encoding enables rdbms translate xpath path expressions pure sql queries 
evaluation xpath path expression sn leads series region queries pre post plane node sequence output axis step si context node sequence subsequent step si 
context node sequence step singleton sequence arbitrary node 
note xpath semantics require resulting node sequence duplicate free sorted document order 
pre post plane initial context node sequence xpath path expression node descendant node get descendant doc denote column table loaded pre post node encodings cf 
systematically translate path expression equivalent sql query 
example get query 
xpath accelerator supports xpath features predicates node tests 
analysis actual query plan chosen optimizer ibm db case shows relational database system cope quite type query rdbms maintains tree concatenated pre post keys 
index scan outer left doc table pre sorted order 
actual region query evaluation happens inner join input predicates lines sql query act index scan range delimiters predicates lines sufficiently simple evaluated tree index scan 
join left semijoin producing output pre sorted order matches request line result sorted document order 
query optimizer delimit index range scan inner join input 
opportunity derives fact tree node anticipate size subtree descendant post pre level level denotes length path root obviously bound height document tree 
tree knowledge available rdbms optimizer delimit descendant range scan insert additional predicate initial sql query pre post post pre inner index range scan descendant step delimited actual size context nodes subtrees independent document size 
observed query speed orders magnitude 
see sequel awareness facts equation lead significant improvements xpath performance 
notice unique operator plan required general join generate duplicate nodes see section 
generation duplicates costly unique operator avoided altogether join operator informed fact doc table encodes tree structure 
similar reasons furthermore improve node distribution pre post plane arbitrary skip significant portions guide scans touch nodes constitute actual result modulo small 
system computes document loading time 
typical real world xml instances 
knowledge pre post encodings accessible query optimizer explicit sql level case additional range predicate line 
staircase join making query optimizer rdbms tree aware allow improve query plans concerning xpath evaluation 
incorporating knowledge pre post plane ideally clutter entire query optimizer xml specific adaptations 
explained propose special join operator staircase join exploits encapsulates tree knowledge pre post plane 
behaves query optimizer ways ordinary join example admitting selection pushdown 
section describe staircase join tree aware optimizations encapsulates 
proceed note attributes 
attribute axis axis produces attribute nodes 
special encoding attribute nodes allow filtered needed 
disregard attributes explanations clutter unnecessarily 
numbers experimental results obviously include attribute handling 
effects attribute handling observable indicate footnotes 
pruning evaluation axis step certain context node boils selecting document nodes corresponding region 
xpath axis step generally evaluated entire sequence context nodes 
leads duplication pre post plane regions associated step intersection inclusion ancestor self paths context node sequence 
pruned context node sequence covers ancestor self region produces duplicates 
post document node context node descendant axis post axis pre pre post ancestor axis post document node context node preceding axis overlapping regions context nodes ci 
pre pre independently evaluated context node 
depicts situation evaluate ancestor self step context sequence 
darker path shade nodes produced resulting node sequence ultimately leads need duplicate removal operator unique query plan meet xpath semantics 
obviously remove nodes located path context node root context node sequence effect final result 
opportunities simplification context node sequence arise axes 
depicts situation pre post plane rdbms view problem planes show encoding slightly larger xml document instance 
axis context nodes establish different boundary enclosing different area 
result nodes shaded areas 
general regions determined context nodes include partially overlap dark areas 
nodes areas generate duplicates 
removal nodes earlier case inclusion 
inclusion dealt removing covered nodes context example descendant axis 
post document node context node pre pruning produces proper staircase 
process identifying context nodes cover boundary referred pruning easily implemented pre post encoded context node sequence 
algorithm gives pruning procedure descendant axis ancestor pruning functions analogously 
desc context table pre post result new table pre post prev foreach context post prev append result prev post return result algorithm context pruning descendant axis table context assumed pre sorted 
pruning descendant ancestor axis remaining context nodes relate preceding axis illustrated descendant 
context establishes boundary pre post plane resembles staircase 
observe darker subregions contain nodes 
coincidence 
nodes partition pre post plane regions see 
cases distinguished regarding nodes relate ancestor descendant axis preceding axis 
regions necessarily empty ancestor precede region follow region descendant similarly region empty common descendants follows empty regions correspond regions 
rdbms tree aware know pruning empty regions post pre nodes relate ancestor descendant axis 
post pre nodes relate preceding axis 
empty regions pre post plane 
knowledge delimit index range scans exclude darker regions 
similar empty region analysis done xpath axes 
consequences preceding axes profound 
pruning axis remaining context nodes relate ancestor descendant axis 
see remaining context nodes region empty 
consequently prune context affecting result 
reasoning followed turns context nodes pruned maximum preorder rank case preceding minimum postorder rank case 
axes context reduced singleton sequence staircase join degenerates single region query 
focus ancestor descendant axes 
basic staircase join algorithm pruning leads significant reduction duplicate exemplifies duplicates remain due intersecting ancestor self paths originating different context nodes 
better approach results separate paths document tree evaluate axis step context node partition 
separation document tree easily derived staircase induced context node sequence pre post plane partitions define region plane containing nodes needed compute axis step result context nodes respectively 
note pruning reduces number partitions 
review details outside scope text obvious post pre partitions ancestor staircase separate ancestor self paths document tree 
partitioned pre post plane naturally leads parallel xpath execution strategy 
basic approach evaluating staircase join document context node sequence sequentially scan pre post plane left right selecting nodes current partition lie boundary established context node sequence see algorithm 
xpath accelerator maintains nodes pre post plane pre sorted table doc staircase join effectively visits tree document order 
nodes final result consequently encountered written document order 
basic algorithm closely described merge join dynamic range predicate 
important observe doc post algorithm really distinct lookup record preorder rank record encountered sequential scan 
notation doc just means record hand 
note furthermore algorithm works correctly proper pruned context 
pruning separate pre processing stage staircase join easily adapted pruning fly saving separate scan context table 
basic algorithm important characteristics scans doc context tables sequentially scans tables entire context sequence delivers duplicate nodes result nodes produced document order post processing needed comply xpath semantics 
desc doc table pre post context table pre post result new table pre post foreach successive pair context pre pre post node context node doc pre pre post return result anc doc table pre post context table pre post result new table pre post node context node doc pre pre post foreach successive pair context pre pre post return result pre pre post pre pre doc post post append doc result algorithm staircase join algorithms descendant ancestor axes 
tree aware optimization skipping empty region analysis explained section offers kind optimization refer skipping 
illustrates xpath axis step descendant 
staircase join evaluated scanning pre post plane left right starting context node 
scan partition node encountered outside descendant boundary part result 
note node current partition contributes result light grey area empty 
consequence fact scan encoding tree data structure node document order common descendants empty region region type 
staircase join uses observation terminate current early effectively means portion scan pre successive context node pre skipped 
change basic staircase join algorithm minimal procedure af post document node context node pre scan skip scan skipping technique descendant axis 

procedure desc merely modified invoke new replacement procedure desc shown algorithm 
desc pre pre post pre pre doc post post append doc result break skip algorithm skipping descendant axis 
effectiveness skipping high 
node context hit node copied result encounter node type leads skip 
produce result touch result context nodes pre post plane basic algorithm scan entire plane starting context node minimum preorder rank 
similar slightly effective skipping technique applied ancestor axis inside partition context node encounter node outside ancestor boundary know descendants preceding axis skipped 
case equation provides estimate maximally document height nodes may skip sequential scan post pre 
main memory rdbms implementation considerations assess viability impact staircase join idea enhanced kernel monet rdbms incorporate new join operator 
main memory rdbms monet chosen preferred implementation platform aforementioned pathfinder project 
additionally monet base type operator extensibility system suitable experimentation platform 
adding staircase join main memory rdbms kernel allowed study cpu related cache related adaptations original join algorithms 
turns staircase join optimized memory operation 
close section number experiments manifest efficiency staircase join 
experimentation platform describe experimentation platform monet order concrete material illustrative purposes 
show cpu related adaptations staircase join algorithm possible 
monet bulk data type binary table bat match column table doc holding pre post document encoding 
bats provide useful features special column type void virtual oid 
column type represents contiguous sequence integers 
offset needs stored 
saves storage space document occupies size monet storage structure allows operations executed positional lookups 
details monet rdbms refer 
experiments dual pentium xeon machine running ghz gb mainmemory level cache levels size kb kb cache line size byte byte latency cy cy ns ns measured 
loss generality characteristics machine illustrate machine dependent calculations 
cpu related adaptations staircase join algorithm basically includes loops scan context doc bats respectively 
context sequence ordinarily contains far elements document concentrate inner loop desc algorithm 
sequentially scans partition doc bat 
iteration contains comparison write result bat iteration 
preorder ranks table doc form contiguous sequence 
monet void column type store scan postorder ranks byte 
cache line contains post pre post document node context node pre copy scan skip scan pre post estimation skipping height document 
nodes 
machine cpu iteration desc cy 
cache line cy cy exceeds latency cy 
algorithm cpu bound concentrate reducing cpu 
major part cpu concerns postorder rank comparison line labeled algorithm 
large part take main loop follows 
equation page calculate lower upper bound number descendants node level 
bounds establish diagonals pre post plane see 
take context node 
preorder traversal tree encounters descendants directly visited guaranteed post pre nodes pre post plane descendants 
consequently simply copy nodes result checking postorder ranks copy phase interval 
upper bound tells additional descendants obtain original loop scan phase interval 
scanning node skip context node 
call technique estimation skipping estimate number descendants enter tight copy loop 
see algorithm 
error estimation maximally restricted postorder rank comparison number computed actual assembler instruction latencies pentium 
devised alternative pre postorder encoding allows exact calculation descendant node builds original encoding described 
desc pre pre post estimate min pre post copy phase pre estimate append doc result scan phase estimate pre doc post post append doc result break skip algorithm estimation skipping descendant axis 
context nodes 
remaining nodes result context simply copied 
single node copy iteration takes cycles 
processing cache line takes cy cy clearly undercuts latency 
copy phase cache bound 
small order tens nodes insignificant multi node documents copy phase represents bulk 
low number cpu cycles due branch prediction friendliness staircase join 
loops phases fixed condition conditional chooses branch iteration 
branching behavior tight inner loops staircase join perfectly predictable significant penalties instruction retirement avoided 
shift attention cpu cache turned bottleneck copy phase 
cache related adaptations sequential scan pre post plane mainmemory friendly cpu cache lines fully 
sequential memory bandwidth machine cache levels calculated follows ll ls ls ll ls byte byte ns ns byte mb ls cache line size cache lc cache latency cache 
pentium modern processors supports hardware prefetching partially hides memory cache latency effects startup penalty cpu recognized purely sequential access pattern staircase join read cache lines byte ahead 
copy phase uses data streams pentium supports independent streams load stream doc store stream result 
simple experiment evaluating root descendant show hardware prefetching improves performance staircase join 
particular experiment consists entirely copy phase query characteristics see table 
showed bandwidth bytes read bytes written execution time doc context nodes scanned result size byte execution time byte ms mb intel suggests bandwidth improvement obtained employing software prefetching 
latency cy cy cy suggested additionally put explicit prefetch instruction algorithm prefetch cache lines ahead 
combination extra loop unrolling reducing loop overhead employing duff device bandwidth boosted mb numbers specific platform believe staircase join implementation rdbms may encounter similar conditions may admit similar optimizations 
experiments staircase join encapsulates tree knowledge applying pruning skipping techniques described sections 
remainder section assess performance gain achieved employing techniques 
system experiments described section 
ensure test runs reproducible easily accessible source xml documents xml generator developed xmark benchmark project 
fixed dtd generator produces instances controllable size 
xml instances mb gb size document nodes 
documents height 
chose queries generate substantial intermediary results see table sizes documents proportionally smaller 
queries axis steps descendant step root subsequent descendant ancestor step 
third fourth descendant profile descendant education descendant increase ancestor bidder table number nodes intermediary results gb document nodes step behave second axis step restricted experiments step paths 
furthermore concentrate descendant ancestor explained earlier 
queries evaluated illustrated root doc desc doc increase anc doc bidder experiment pruning avoiding duplicates naive way evaluating axis step context node sequence evaluate step context node independently construct result intermediary results section 
advantages basic algorithm section avoids generation duplicates naive approach produce 
shows number result nodes ancestor step query excluding name test produce naive approach staircase join 
experiment staircase join saves generation subsequent removal duplicates 
number coincidence context sequence contains increase nodes appear path length root context nodes level 
large number pairs paths intersect level leading duplicate node ratio cf 

fact staircase join algorithm scans document context tables sequentially avoiding duplicates advantageous consequences execution times linear document size see 
effect access pattern result immediately document order costly sorting phase avoided 
experiment effectiveness skipping figures assess effectiveness skipping estimation skipping techniques 
experiment counts accessed nodes execution times staircase join second axis step number smaller total number nodes document result descendant step contain attributes 
number nodes time ms duplicates avoided staircase join document size mb avoiding duplicates skipping skipping skipping estimated document size mb effectiveness skipping time ms time ms staircase join document size mb staircase join performance ibm db sql staircase join scj early document size mb performance comparison time ms number nodes scanned skipping skipping result size document size mb effectiveness skipping ibm db sql staircase join scj early experimental results diagrams log scale 
query 
skipping reduces number nodes accessed result context see section 
logarithmic scale clearly shows amount nodes accessed skipping appear result remains limited 
amount nodes skipped difference skipping skipping significant nodes skipped 
number obviously depends query main point skipping number accessed nodes independent document size 
reduction accessed nodes effect execution times 
conditions staircase join second axis step query execution time attribute filtering difference skipping result size slightly larger context 
statement scan context nodes holds 
document size mb performance comparison cut half skipping vs skipping larger document sizes 
employing cache conscious implementation estimation skipping see sections gives additional performance gain skipping estimated 
experiment comparison ibm db focus staircase join benefit evaluating axis steps 
aspects xpath name tests predicates largely left discussion 
reason axis step cs ancestor treated anc doc cs fully evaluate ancestor step context sequence cs subsequent name test tag name mentioned staircase join behaves query optimizer ways ordinary join example admitting selection pushdown 
observe result staircase join contains selection nodes doc table 
subsequent name test selection tag name pushing name test staircase join means doing selections opposite order 
tree properties staircase join entirely preorder postorder ranks 
properties remain valid subset nodes 
anc doc cs valid equivalent example 
note consequently name test performed entire document obviously sense selective name tests 
figures compare execution times queries name test pushdown 
queries execution plan name test pushdown shows faster factor 
research cost model intended system intelligently decide name test pushdown similar rewrites 
experiment furthermore shows execution times implementation limited tree awareness top ibm db 
considering performance increases seen avoiding duplicates pruning skipping believe conventional rdbms achieve increase similar magnitude employing staircase join line observations 
note explicitly shown query plan ibm db performs early name test tree index uses concatenated pre post tag name keys 
note tree unaware rdbms query optimizer bad estimations consequently chooses bad query plans happened query observed actual execution times shown sql query corresponding equivalent manual rewrite descendant bidder descendant increase 
related research recall core operation staircase join resembles self merge join pre sorted doc table join predicate dynamically changed trace staircase boundary cf 
section 
multi predicate merge join introduced specific purpose efficiently support interval containment predicates 
predicates allow express semantics xpath ancestor descendant axes designed exploit hierarchical containment intervals lacks tree awareness due pruning skipping staircase join touches tests nodes 
subscribe view expressed increased awareness data type properties critical turning rdbmss efficient xml processors 
staircase join real self join sense context nodes document nodes tuples doc encoding table 
single tree built document loading time suffices index arbitrary context sequences document 
approaches described special purpose index structure needs built context document referred ancestor descendant lists support ancestor descendant step evaluation skipping 
staircase join algorithms depend lists sorted document order 
join operators modified tree implementation uses extra sibling pointers 
authors propose build new index structures xr trees context document 
staircase join derives pruning skipping information doc table simple integer arithmetic 
require underlying rdbms tree implementation altered 
furthermore single tree instance indexes context pre post plane index pages compete buffer slots query evaluation 
conceptual simplicity staircase join led algorithms exhibit particularly simple control flow 
just critical achieve high efficiency especially main memory rdbms context 
highly predictable branches inner loop strictly sequential access pattern staircase join cpu cache friendly 
note staircase join touches node tables context doc skipping fact helps avoid touching significant number nodes 
contrast ee ea join algorithms repeatedly iterate context document inner loops 
staircase join operator described exploits tree properties encoded pre post plane optimize database supported xpath evaluation 
knowledge tree properties subtree size inclusion disjointness subtrees available encoding cost simple integer operations 
shown increased tree awareness lead significantly improved xpath performance 
avoid cluttering query optimizer xml specifics propose teach rdbms tree properties means local change kernel addition single join operator staircase join encapsulating tree knowledge 
staircase join added main memory rdbms kernel 
context demonstrate staircase join optimized memory operation 
research ideally experiment staircase join implementation commercial disk rdbms possible 
secondly experiments documents gb 
larger documents large multi document databases evidently needs apply fragmentation strategies 
interesting strategy fragment tag name 
experiments encouraging execution time brought ms ms strategy probably combined partitioning inspired see section tag name fragments large 
obvious fragmentation naturally leads parallel xpath execution strategy 
research goes direction cost model able intelligently choose name node test pushdown related xpath rewriting laws 
acknowledgments authors monet people cwi amsterdam netherlands support useful feedback 
maurice van university konstanz daad funded research fellow 
ailamaki david dewitt mark hill 
data page layouts relational databases deep memory hierarchies 
vldb journal 
anders scott don chamberlin mary fernandez michael kay jonathan robie sim 
xml path language xpath 
technical report working draft version world wide web consortium november 
www org tr xpath 
scott don chamberlin fernandez mary daniela florescu jonathan robie sim 
xquery xml query language 
technical report working draft world wide web consortium november 
www org tr xquery 
peter 
monet generation dbms kernel query intensive applications 
phd thesis cwi amsterdam 
shu yao chien zhang vassilis carlo zaniolo 
efficient structural joins indexed xml documents 
proc 
th vldb conference pages hong kong china august 
intel 
intel pentium intel xeon processor optimization manual 
tom duff 
netnews posting 
www jargon net html 
torsten 
accelerating xpath location steps 
proc 
st acm sigmod conference pages madison wisconsin usa june 
acm press 
jiang hongjun lu wei wang beng chin ooi 
xr tree indexing xml data efficient structural joins 
proc 
th icde conference bangalore india march 
ieee computer society 
hans peter kriegel marco thomas seidl 
managing intervals efficiently object relational databases 
proc 
th vldb conference pages cairo egypt september 
li moon 
indexing querying xml data regular path expressions 
proc 
th vldb conference pages rome italy september 
stefan 
understanding modeling improving main memory database performance 
phd thesis cwi amsterdam 
dan holger meuss tim fran ois bry 
symmetry xpath 
technical report pms fb institute computer science university munich germany october 
kenneth ross 
conjunctive selection conditions main memory 
proc 
st acm symposium principles database systems pods pages madison wisconsin june 
acm press 
albrecht schmidt florian waas martin kersten michael carey ioana manolescu ralph busse 
xmark benchmark xml data management 
proc 
th vldb conference pages hong kong china august 
igor tatarinov kevin beyer shanmugasundaram eugene shekita chun zhang 
storing querying ordered xml relational database system 
proc 
st acm symposium principles database systems pods madison wisconsin june 
acm press 
chun zhang jeffrey naughton david dewitt luo guy lohman 
supporting containment queries relational database management systems 
proc 
th acm sigmod conference pages santa barbara california may 
acm press 
