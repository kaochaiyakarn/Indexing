visualizing impact cache program execution global cache misses ratio program reveal time distribution memory patterns detail 
hand cache visualization hampered huge amount memory display 
focus snapshot cache content viewing memory transactions 
cache visualizer introduced presents integral cache behavior program complementary views 
density view cache misses shows hot spots program reuse distances view shows data locality effect performance histogram view shows periodical patterns occurs trace 
number experiments visualizer characterize cache behavior effectively improve cache behavior program performance 
keywords program visualization cache reuse distance data locality loop tiling 
modern architectures face widening gap memory speed processor speed 
cache small fast memory delay memory access reduced requested address stored cache 
cache occurs stalls processor memory access done 
memory access time exceeding times delay cache hit cache misses important 
impact cache performance program measured cache ratio fraction memory accesses cache 
ratio determined memory trace sequence memory accesses program execution 
influenced cache hardware parameters cache size cache line size set associativity replacement policy 
yu erik hollander university ghent department electronics information systems st ghent belgium yu erik rug ac tools measure cache ratio cache simulation cprof sampling hardware counters 
compiler techniques estimate cache ratio analytically 
order minimize cache misses transformations improve data locality loop tiling loop fusion array padding array alignment proposed 
order understand cache behavior general programs needs look hit rate execution 
tools introduced visualize cache behavior 
example cvt provides visualization cache lines program simulation 
cache parameters allowed reconfigured effect stepwise observed 
rivet visualizes cache behavior statistical histograms cache lines 
histograms show cache lines frequently 
cvt rivet visualize distribution cache lines number cache lines relatively small comparison number memory program 
doesn allow visualize cache performance program cache content frequently refreshed huge data space program observed trough tiny cache window 
difficult recognize data access patterns generated program 
alternative way program cache centered 
millions memory shown compact view reveals global temporal patterns program execution impact cache behavior 
section cache model performance measures 
section different visualization views developed help programmer recognize cache access patterns give hints improve 
section cache visualizer applied number programs shown possible increases hit rate program execution 
observation changed density distribution gives information number cache misses reduced program transformation 

cache representation cache line block aligned consecutive bytes load store operates 
define size cache bytes size cache line bytes 
similar cache line block consecutive bytes moved memory cache transaction called memory line 
access memory address hit cache memory line cache cache memory line 
memory line placed different lines cache 
called associativity cache called way associative 
particular cache called fully associative called 
set cache lines memory line mapped called cache set 
fully associative cache fac cache set cache 
direct mapped cache dmc cache line distinct cache set 
cache misses distributed time categorized compulsory misses capacity misses conflict misses 
compulsory cold misses occur time memory address cached 
conflict misses occur cache set room new memory access room cache 
capacity misses generated cache full new memory line enters cache 

reuse distance important program parameter visualize reuse distance 
reuse memory line program 
reuse distance defined number distinct memory lines fetched accesses memory line 
called stack distance 
reuse distance measure indicate cache misses fully associative cache fac 
fac happens time access memory line reuse memory line reuse distance greater number cache lines case called compulsory cold case called capacity cold obviously avoided capacity misses may removed increasing cache size 
way associative cache happen fully associative cache size conflict indicate conflict reuse distance applied cache set set reuse distance number distinct memory lines fetched cache set accesses memory line 
call reuse distance fully associative cache fac reuse distance 
reuse distance greater corresponding fac reuse distance greater capacity corresponding fac reuse distance equal conflict order reduce number cache misses desirable minimize reuse distances 

program instrumentation visualize dynamic cache behavior program natural show trace driven simulation memory access patterns 
trace driven simulation requires instrument program order get address trace memory loads stores 
done inserting library function calls output statements data 
instrumenting binary program instrument source program compiler get result 
drawback source code instrumentation memory exactly optimized program hand advantage source code instrumentation possibility trace back exact line source program 
limitation trace driven simulation logged trace data huge memory intensive program 
compression techniques allow shrunk ninth plain text 
rapid access required order efficiently visualize dynamic cache behavior touched memory lines 
solved balanced avl tree data storage allows data access time number distinct memory lines 

visualization cache behavior program trace visualized frame 
order cache behavior millions memory program efficiently memory access represented pixel coded color 
consecutive memory accesses represented adjacent pixels pixel lines horizontally wrapped 
way program behavior immediately visible pattern 
global pattern allows visualize cache behavior program single view superb pattern recognition capabilities man discern different cache behaviors 
examples regular data access image hot spots indicating poor cache behavior 
possible filters available reveal different aspects program cache behavior 

density cache misses distribution cache misses program execution necessary identify areas congestion 
view cache hits white cache misses colored 
order classify cache misses type painted different color grey scale blue black compulsory green dark grey capacity red light grey conflict detailed distribution colored pixels density useful just having total number misses 
example 
shows regular access patterns matrix multiplication cache misses capacity misses 
suggests cache optimally 

reuse distances second view shows reuse distances 
colored value reuse distance defined section 
select types reuse set fully associative 
set reuse distance see pattern conflict misses fully associative reuse distances show capacity misses 
example view shown simple matrix multiply 

histogram grouped histogram view analyze regularity recurring patterns reuse distances 
view represents horizontally patterns analyze reuse distances vertically number identical patterns 
example shows histogram reuse distances larger peaks indicating distance consecutive memory lines regular 
cache visualizer possible highlight group memory line array element left right clicking individual trace view 
histogram built selected 
allows relate cache view data layout program 

experiments experiments density distribution patterns cache misses hot spots reuses histogram reuse distances shown programs 
comparison cache behavior transformed program original program indicates define double double double void mxm int pragma trace 
matrix multiplication example 
pragma statement indicates generate memory trace arrays 
instrumentation compiler suif generate trace output automatically 
transformation effective 
details website 

visualizing density cache misses simple example consider matrix multiplication program 
pragma statement indicates compiler instrument program generate memory trace 
instrumentation done suif compiler 
cache simulation shows configuration kb direct mapped cache byte cache line size 
cache patterns shown 
cache ratio 
cold misses shown blue upper left 
expected program suffers cold misses frequently arrays due intermittent access matrix cold misses happen occasionally till trace slanted downward line 
capacity misses shown densely green 
pattern comprises cache misses 
large number capacity misses may indicate cache size relatively small 
pattern looks regular matrix thrown cache iteration loop 
conflict misses shown red evenly spread trace regular pattern 
conflict misses low compared capacity misses 
program upper left corner enlarged 
cache patterns matrix multiplication black blue cold dark grey green capacity light grey red conflict misses 
table 
cache misses reduced tiling number matmult ratio tiled ratio refers cold capa conf misses 
visualizing improvement tiling better cache behavior obtained multiplication reorganized loop tiling 
inner loops perform calculations resulting tile matrix completely obtained single read corresponding tile matrices outer loops sure tile matrix calculated 
effect cache behavior visible 
improvement version shown table 

visualizing effects cache organization size cache affects total number capacity misses set associativity affects number con define min define define define void mxm tiled int int pragma min min min min min 
tiled matrix multiplication 
inner loops perform calculations resultant tile matrix completely obtained single read corresponding tile matrices outer loops sure tile matrix calculated 
program upper left corner enlarged 
cache patterns program 

view cache patterns tiled version kb fac 

view cache patterns tiled version kb fac 
misses 
example memory trace fully associative cache shown 
conflict misses red color 
means conflict misses removed fully associative cache 
enlarging cache shows cold misses blue means capacity conflict misses removed 

visualizing reuse distances fully associative cache fac reuse distances program shown 
value reuse distance indicated color blue red values small large 
allows trace hot spot patterns memory trace 
see hot spots closely correlated patterns cold misses capacity misses 
order reduce capacity misses tiling loop transformation applied shown 
fac reuse distance execution shown 
see hot reuse distances tiling compared 
program upper left corner enlarged 

view fac reuse distances matrix multiplication kb fac 
program upper left corner enlarged 

view fac reuse distances tiled multiplication kb fully associative cache 

histogram reuse distance figures histograms reuse distances shown original program tiled version 
peaks reuse distances indicate memory periodical 
visible reuse distance view shown 
furthermore tiled version fewer reuse distances exceed number cache lines original program goal tiling 
consequence data remains longer cache improves program performance 
capacity log infinity 
histogram fac reuse distances matrix multiplication kb fully associative cache 
cold misses represented infinity distances distances greater number cache lines lead capacity misses 
capacity log infinity 
histogram view fac reuse distances tiled multiplication kb fully associative cache 
total distance greater decreases 
capacity misses 
shown huge amounts cache misses hits adequately represented small image pattern giving valuable information programmer 
information programmer improve execution time better data layout change instruction order transformations tiling 
instances visualizer guide programmer writing cache efficient algorithm 
believed experience pattern cache visualizer show valuable tool overcome growing distance 
atkins subramaniam 
pc software performance tuning 
computer aug 
bosch tang gerth rosenblum hanrahan 
rivet flexible environment computer systems visualization 
computer graphics feb 
hollander yu 
parallel programming tools 
rug ac paris ppt 
ghosh martonosi malik 
precise analysis program transformations caches arbitrary associativity 
acm sigplan notices nov 
hall anderson amarasinghe murphy liao bugnion lam 
maximizing multiprocessor performance suif compiler 
computer dec 
hill smith 
evaluating associativity cpu caches 
ieee transactions computers dec 
intel 
intel performance analyzer 
technical report intel 
lebeck wood 
cache profiling spec benchmarks case study 
computer oct 
mckinley carr tseng 
improving data locality loop transformations 
acm transactions programming languages systems jul 
uhlig mudge 
trace driven memory simulation survey 
acm computing surveys june 

cache tool 
ieee computer july 
wolf lam 
loop transformation theory algorithm maximize parallelism 
ieee transactions parallel distributed systems oct 
