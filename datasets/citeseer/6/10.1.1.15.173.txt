generalized left corner parsing mark jan nederhof university nijmegen department computer science toernooiveld ed nijmegen netherlands cs kun nl show techniques known gen lr parsing applied left corner parsing 
parsing algo rithm context free grammars advantages generalized lr parsing sizes generation times parsers smaller produced output compact basic parsing technique easily adapted arbitrary context free grammars 
algorithm seen optimiza tion algorithms known existing lit 
strong advantage tation explicit role left corner parsing algorithms 
keywords generalized lr parsing left corner parsing chart parsing hidden left recursion 
generalized lr parsing described tomita tomita tomita 
regarded efficient parsing technique context free grammars 
technique adapted formalisms context free gram mars tomita 
useful property generalized lr parsing henceforth abbreviated glr parsing put parsed polynomial time 
exact length right side longest rule length input time com plexity np 
theoretically may worse supported dutch organization scientific research nwo time complexity earley algorithm ear ley 
practical cases natural language processing glr parsing give best results 
polynomial time complexity established graph structured stack tion notion parse stack pointers connect stack elements 
nondeterminism occurs search paths investigated simul initial part parse stack common search paths represented 
search paths share state top elements imaginary individual parse stacks top element represented computation pushes el ements stack performed 
useful property glr parsing output concise representation possi ble parses called parse forest seen generalization notion parse tree 
authors parse forests specifically called shared shared packed packed shared parse forests 
parse forests produced represented space 
efficient decoration parse forests attribute values investigated dekkers 
drawbacks glr pars ing 
order decreasing importance parsing technique lr tables may large grammars describing natural languages 
related large amount time needed construct purdom argues grammars program languages require lr tables size linear size grammar 
gener ally considered doubtful similar observations grammars natural languages 
parser 
incremental construction parsers may cases alleviate problem ers 
parse forests produced algorithm compact 
cause packing subtrees guided ing search paths due equal lr states stead equality derived 
solution rekers implies computational overhead 
adapting technique arbitrary grammars requires generalization cyclic graph structured stacks may complicate implementation 
minor disadvantage theoretical time complexity worsens larger 
solution obtain variant parsing technique fixed time complexity independent implies overhead computation costs worsens improves time com plexity practical cases 
disadvantages generalized lr parsing mainly consequences lr parsing tech nique consequences graph structured stacks parse forests 
lang lang lang gives general con struction deterministic parsing algorithms nondeterministic push automata 
pro duced data structures strong similarity parse forests argued lang lang 
general idea lang applied formalisms context free gram mars lang lang lang 
idea graph structured stack immediately follow lang construc tion 
lang uses notion table store information trying find best implementation table 
parsing techniques minor difficulties derived con struction lang generalized left corner parsing henceforth abbreviated glc parsing 
starting point left corner parsing formally defined rosenkrantz lewis ii 
generalized left corner parsing albeit dif ferent name investigated pratt sikkel argues way ta ble implemented dimensional matrix case earley algorithm graph structured stack secondary importance global parsing algorithm 
term generalized left corner parsing demers different parsing tech nique 
demers generalizes left corner right side prefix right side necessarily con member generalize lg parsing zero lookahead grammars lc 

see tanaka bear sikkel op den 
shown parsing technique se rival generalized lr parsing regard time complexities 
papers discussing time complexity glc parsing wir 
functional variant glc parsing defi nite clause grammars discussed mat 
algorithm achieve polynomial time complexity packing takes place 
variant earley algorithm discussed similar glc parsing top nature earley algorithm pre served 
glc rediscovered number times leermakers leermakers schabes perlin mention connection lc parsing presentations unnecessarily difficult un 
prevented discovery number optimizations obvious view point left corner parsing 
glc parsing combination graph structured stacks parse forests 
shown parsing technique subject disadvantages algorithm tomita 
structure follows 
sec tion explain nondeterministic lc parsing 
parsing algorithm starting point section shows deterministic algorithm defined uses graph structured stack pro duces parse forests 
section discusses gen lc parsing algorithm adapted ar context free grammars 
algorithm improved operate cubic time shown section 
improved algorithm produces parse forests non standard representation requires cubic space 
class optimizations discussed section 
preliminary results implementation algorithm discussed section 
left corner parsing define lc parsing define notions strongly connected kind parsing 
define spine path parse tree begins node son father father proceeds downwards time leftmost son ends leaf 
define relation nonterminals rule denotes sequence grammar symbols 
transitive reflexive closure denoted called left corner relation 
infor mally possible spine parse tree occurs 
pronounce left corner 
define set goal set consisting start symbol nonterminals occur rule form fl empty sequence grammar symbols 
informally nonterminal goal may occur node spine 
explain lc parsing means small context free grammar 
claims linguistic relevance grammar 
note transformed ambiguity grammatical ambiguity introducing 
spp np time np arrow np np np np vp vp np pp np flies algorithm reads input left right 
elements parse stack goal elements items item ele ments 
items consist rule dot inserted right side separate members recognized 
initially parse stack consists start symbol goal indicate fig ure 
indicated parse corresponds possible readings time flies arrow grammar 
define nondeterministic lc parser parsing steps possible fol lowing clauses la element top stack symbol remaining input may remove input push item stack provided lb 
element top stack non terminal may push item stack provided 
item derived epsilon rule 

element top stack item symbol remaining input may remove input replace item item ott ill 
top elements stack may replace item item form ill provided 
top elements stack ft may replace elements item fl 
step previous clauses ends item top stack nonterminal subse quently push stack 

stack consists elements input completely read may successfully terminate parsing process 
note nonterminals goal oc cur separate elements stack 
lc parsing algorithm de fined uses symbol lookahead case terminal left corners 
algorithm de lc grammars definition lc grammars soininen ukkonen 
definition ble rosenkrantz lewis ii 
exact formulation algorithm chosen simplify treatment generalized lc parsing section 
strict separation tween goal elements item elements achieved perlin opposed schabes 
generalizing left corner parsing construction lang form deter table driver parsing algorithms non deterministic push automata 
left corner parsers push automata lang construction applied formulate de parsing algorithm lc parsing 
parsing algorithm propose pa follow straightforwardly lang construction 
applied construction directly sharing provided 
caused fact sharing computation different search paths interrupted different elements occur top stack just beneath top elements top investigated 
explain carefully focus clause nondeterministic lc parser 
assume fol lowing situation 
different search paths time item element top stack 
goal elements say item element different search paths 
means step replaces done search paths provided done sepa differ 
unfortunate step parse stack input read np time np np 
np np np np 
np np flies np np 
np np np np 
np vp vp np vp vp np 
vp vp vp 
np np np 
vp vp vp 
np np np np 
vp vp vp 
np np np ii np 
vp vp vp np 
arrow arrow time flies arl arrow possible sequence parsing steps reading time flies arrow sharing computation case able efficiency reasons simplify construction compact parse forest 
related fact propose implement parse table means graph structured stack solution problem lies tion goal elements consisting sets goal single nonterminals goal 
example shows state graph structured stack situation just reading time flies 
note state represents states different search paths lc parser reading time flies state step 
see goals np vp merged goal element edge item element labelled flies goals 
merging goals stack element course useful goals left corner common 
simplicity algorithm allow merging goals goal element goals respect left corner relation 
formally define equivalence relation nonterminals reflexive transitive symmetric closure equivalence class relation includes nonterminal de noted 
goal element consist subset equivalence class 
running example goal elements con subsets np vp pp equivalence class example 
figures give complete generalized lc parsing algorithm 
stage want complicate algorithm allowing epsilon rules grammar 
consequently clause lb non deterministic lc parser corresponding piece code glc parsing algorithm 
clauses indicate new algorithm 
section explain algorithm extended grammars epsilon rules handled 
nodes arrows parse forest con structed means functions node constructs node label terminal nonterminal 
returns address node 
node associated number lists sons nodes forest 
list rep resents alternative derivation nonterminal node labelled 
initially node associated empty collection lists sons 
add subnode adds list sons node algorithm item element el labelled xx 
associated list nodes deriving 
xm 
list accessed sons el 
list consisting exactly node denoted list concatenation denoted operator 
goal element contains nonterminal value node node representing derivation current input position provided derivation exists node nil 
graph structured stack may edge item element unique goal element goal goal element number item elements 
item element el successor el yields unique goal element edge el 
goal element goal successors yields zero item elements edge global variables algorithm np 
np np vp 
symbols input string 
current input position 
graph structured stack reading time flies root parse forest 
value nil algorithm parse 
sets goal elements containing goals fulfilled current input position respectively 
sets item elements labelled shift may performed current input position respectively 
set pairs derivation current input po sition 
words set pairs node nil 
graph structured stack initially empty rules grammar implicit global data structures 
straightforward implementation relation recorded means large boolean matrix number nonterminals grammar number elements goal 
better fact true propose storage equivalence class separately store boolean matrix class members goal 
furthermore need list rules terminal nonterminal small op timization top town filtering see section achieved grouping rules lists left sides note storage relation main obstacle linear sized parser 
time needed generate parser determined time needed compute classes quadratic size grammar 
adapting algorithm arbitrary context free grammars generalized lc parsing algorithm pre vious section specified grammars epsilon rules 
allowing epsilon rules flies complicate algorithm gram mars introduce danger non termination parsing process 
sources non termination non deterministic lc lr parsing hid den left recursion 
grammar said cyclic derivation form grammar said hidden left recursive 
hidden left recursion special case left recursion fact hidden empty generating nonterminal 
nonterminal said generates empty string 
sources non termination studied extensively nederhof koster nederhof 
obvious way avoid non termination non deterministic lc parsers case hidden left recursive grammars 
general ize relation rule fl possibly empty sequence grammar symbols clause lb eliminated compensate clauses la modified take account prefixes right sides generate empty string la element top stack symbol remaining input may remove input push item stack provided 
top elements stack may replace item item form fl provided clauses allow members right sides 
allow non false members need extra seventh clause 
element top stack item fl may replace item item fl provided idea straightforward way generalized lc parsing suitable eighth clause necessary handle special case start symbol input empty 
omit clause sake clarity 
parse nil create goal element consisting start symbol parse word return root parse forest parse word pairs node nil node eq find corners shift find corners cf 
clause la nondeterministic lc parser goal elements containing goals class rules ai goal top filtering item elem ai shift cf 
clause item elements el labelled ai fl item elem ai fl sons el successor el item elem create item element el labelled fl sons el create edge el iff reduce el terminal el nonterminal goal el goal el goal element containing goals class add goal provided create goal element consisting add create edge el generalized lc parsing algorithm cf 
clause reduce el assume label el assume successor el node nil node node fu rules cf 
clause goal top filtering item elem goal successors el successors labelled cf 
clause item elem sons el successor el elseif cf 
clause rc add subnode node sons el generalized lc parsing algorithm continued hidden left recursive grammars similar way handled schabes leermakers 
technical problem der able construct complete parse est need precomputed derive empty string way 
precomputation consists performing node specific variables nonterminal subsequently performing add subnode ma ms 
mbk rule 
bk consisting non terminals 
variables contain pointers required 
glc parsing guaranteed terminate cyclic grammars case infinite amount parses reflected cyclic forests discussed 
parsing cubic time size parse forests optimally dense cubic length input 
precisely number nodes parse forest np length right side longest rule 
normal representation parse forests allow cubic parsing algorithms arbitrary grammars 
kind shorthand parse forests allows repre sentation requires cubic space 
example suppose rule fl prefix right side derives part input way derivations may combined new kind packed node 
multiple derivations packed node combined derivations deriving subsequent input 
call packing derivations prefixes right sides ing distinguish normal packing derivations nonterminal 
discussed lang leermakers see 
connected cubic representation parse forests cubic parsing 
glc parsing algorithm section time complexity np 
algorithm easily changed little amount overhead time complexit reduced similar algorithms perlin leermakers algorithm produces parse forests require space storage 
consider accomplished 
define underlying rule item element labelled fl rule ft suppose item elements ell el underlying rule dot position successor created input position may perform prefix right side dot 
need item elements ell el continuing parsing process 
item elements goal element successors efficiently veri 
propose introduce new kind stack element takes role mer item elements successors goal element lying rule 
leave details imagination reader 
optimization top filtering time costly activities general ized lc parsing check goal el ement nonterminal goal check times called top filtering occurs routines find corners reduce 
propose optimizations reduce number goals checked 
straightforward optimization consists annotating edge item element labelled goal element sub set goals include goals false 
set goals ally useful top filtering new item element labelled created reduce see piece code reduce corre sponding clause nondeterministic lc parser 
idea hold goal optimization realized easily sets goals implemented lists 
second optimization useful nonterminals case non terminal goal top filtering needs performed new item el ement labelled created reduce 
explained fact goal ifa know optimizations give better performance cases 
depends heavily properties gain time performing actual top filtering performing tests particular subset goals goal element outweighs time needed set ex tra administration purpose reducing subsets goals 
preliminary results author implemented glc parser 
algorithm implemented literally treat ment epsilon rules suggested section 
small adaptation deal termi different lengths 
members department completed implementation glr parser 
systems implemented ing different programming languages fair son systems difficult 
specific problems occurred concerning efficient calculation lr tables correct treatment epsilon rules glr parsing suggest glr parsing requires effort implement glc parsing 
preliminary tests show division equivalence classes yields disappointing results 
tested cases large class contained nonterminals 
optimization discussed section proved useful 
number goals considered cases reduced fifth 
discussed parsing algorithm context free grammars called generalized lc parsing 
parsing algorithm advantages generalized lr parsing order decreasing im 
size parser smaller neglect storage relation size linear size grammar 
related little amount time needed generate parser 
generated parse forests compact possible 
cyclic hidden left recursive grammars handled easily efficiently sec tion 
section shows glc parsing eas ily run cubic time arbitrary context free grammars 
furthermore done loss efficiency prac tical cases 
lr parsing refined form pars ing lc parsing generalized lr parsing may grammars efficient generalized lc parsing 
feel outweigh disadvantages large sizes generation times lr parsers general renders glr parsing unfeasible natural lan guage applications 
glc parsing suffer defects 
propose parsing algorithm rea alternative glr parsing 
small generation time glc parsers expect kind parsing particularly appropriate dur ing development grammars grammars ratio time complexities glc parsing glr parsing smaller constant dependent grammar 
change consequently new parsers generated times 
shown implementa tion glc parsing graph structured stack allows 
straightforward possibly ef dimensional matrix implementation parse table 
furthermore ma require large amount space especially long input causing overhead initialization optimizations 
contrast time space requirements glc parsing graph structured stack negligible quantity nondeterministic lc parsing nondeterminism occurs grammar lc 
worst case graph structured stack require amount space matrix 
considered glc parsing lookahead symbol terminal left corners 
reason feel main advantages parsing algorithm parsing small sizes parsers 
adding lookahead requires larger tables may reduce advantage generalized lc parsing lit counterpart 
hand phenomenon reported lang time complexity parsing ens lookahead possibly apply glc parsing 
parsing lookahead may result lit states may result sharing computation 
glc parsing relation amount head amount sharing computation 
judicious extra lookahead may advantageous usefulness glc parsing 
author greatly indebted sikkel janos franc kees koster fruitful discussions 
valuable correspondence rend leermakers jan masaru tomita dick gratefully acknowledged 
bear bear 
breadth parsing model 
proc 
eighth international joint con ference artificial intelligence volume pages karlsruhe west germany august 
lang lang 
structure shared forests ambiguous parsing 
th annual meeting acl pages 
dekkers el dekkers nederhof 
coping ambiguity dee parse forests 
coping linguistic ambiguity typed feature formalisms proceed ings workshop held ecai pages vienna austria august 
demers demers 
generalized left cor ner parsing 
conference record fourth acm symposium principles programming languages pages los angeles nia january 
earley earley 
efficient context free parsing algorithm 
communications cm february 


parsing time na 
tomita chapter pages 
lang lang 
deterministic techniques efficient non deterministic parsers 
au languages programming nd col lecture notes computer science volume pages 
springer verlag 
lang lang 
complete evaluation horn clauses automata theoretic approach 
rapport de recherche national de recherche en informatique en automatique france november 
lang lang 
datalog automata 
proc 
third international conference data knowledge bases improving usability responsiveness pages jerusalem june 
lang lang 
parsing incomplete sen tences 
proc 
international con ference computational linguistics volume pages budapest august 
lang lang 
systematic construction earley parsers application production earley parsers tree adjoining grammars 
unpublished december 
lang lang 
uniform mal framework parsing 
tomita edi tor current issues parsing technology chap ter pages 
kluwer academic publish ers 

empirical com parison generalized lit tables 

nijholt sikkel editors tomita gorithm extensions applications proc 
twente workshop language technol ogy pages 
university twente september 
memoranda informatica 
leermakers 
leermakers 
cover grammar 
th annual meeting acl pages 
leermakers 
leermakers 
non deterministic recursive ascent parsing 
fifth conference european chapter asso ciation computational linguistics proceedings conference pages berlin germany april 
leermakers leermakers 
recursive cent earley parser 
information processing ters february 

modification earley algorithm 
acm transactions pro gramming languages systems october 
matsumoto matsumoto 
parsing system logic programming 
proc 
tenth international joint conference artificial intel volume pages milan august 
nederhof nederhof 
generalized left corner parsing 
technical report uni versity nijmegen department computer sci ence august 
nederhof koster nederhof koster 
top pars ing left recursive grammars 
technical report university nijmegen department computer science 
forthcoming 
nederhof nederhof 
increasing applicability lr parsing 
submitted publication 

glr parsing grammars 
tomita chap ter pages 
perlin perlin 
lr recursive transition net works earley tomita parsing 
th meeting acl pages 
pratt pratt 
progress re port 
advance papers fourth interna tional joint conference artificial intelligence pages georgia ussr september 
purdom purdom 
size lalr parsers 
bit 
rekers rekers 
parser generation environments 
phd thesis university amsterdam 
rosenkrantz lewis ii rosenkrantz lewis ii 
deterministic left corner pars ing 
eee conference record th symposium switching automata ory pages 
schabes schabes 
polynomial time space shift reduce parsing arbitrary context free grammars 
th annual meeting acl pages 

experiments glr chart parsing 
tomita chapter pages 

observations context free parsing 
statistical methods linguistics pages 
sikkel sikkel 
cross fertilization ear ley tomita 
memoranda informatica university twente november 
sikkel op den sikkel op den 
head corner chart parsing 
computing science netherlands utrecht november 

practical comparison parsing strategies 
th annual meeting association computational linguistics pro ceedings conference pages stanford california june july 
soininen ukkonen soininen ukkonen 
method trans forming grammars ll form 
acta 
tanaka tanaka sato mo 
predictive control parser extended lin gol 
proc 
sixth international joint conference artificial intelligence volume pages tokyo august 
tomita tomita 
efficient parsing natural language 
kluwer academic publishers 
tomita tomita 
efficient augmented context free parsing algorithm 
computational linguistics 
tomita tomita 
graph structured stack natural language parsing 
th annual meeting association computational lin proceedings conference pages buffalo new york june 
tomita tomita editor 
generalized lr parsing 
kluwer academic publishers 
wir mats wir comparison rule invocation strategies context free chart pars ing 
third conference european chap ter association computational linguis tics proceedings conference pages copenhagen denmark april 
th annual meeting association com putational linguistics proceedings confer ence vancouver british columbia june 
annual meeting association com putational linguistics proceedings confer ence berkeley california june 
