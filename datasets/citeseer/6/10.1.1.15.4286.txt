copyright ieee 
published proceedings iwpc ieee computer society press los alamitos ca pp 

personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
contact manager copyrights permissions ieee service center lane box piscataway nj usa 
hidden dependencies program comprehension change propagation large software systems difficult understand maintain 
program dependency analysis plays key role understanding maintenance 
discusses hidden dependencies software components understanding maintenance hard 
hidden dependency relationship seemingly independent components caused data flow inside third software components 
uses system dependence graphs define hidden dependencies 
discusses impact hidden dependencies process change propagation discusses algorithm warns possible presence hidden dependencies 

software change basic process software evolution software servicing staged life cycle model 
program comprehension prerequisite change 
making change software programmer required identify consequences change reintroduce consistency software 
software maintenance tools depend tracing dependencies programs 
program dependency analysis plays fundamental role program comprehension change propagation impact analysis 
software components comprehended context context defined component dependencies 
software maintainers need trace system dependencies corresponding changes guarantee change propagated correctly software consistent 
introduces notion hidden dependencies software components 
hidden dependencies contradict popular opinion expressed class unaware existence class change 
ieee yu rajlich department computer science wayne state university detroit mi usa rajlich cs wayne edu consider hidden dependencies design faults violate rule treat discovered eliminated practical 
order discover hidden dependencies results standard program analysis 
example hidden dependence section 
section defines system dependence graph asdg object oriented programs 
section defines hidden dependencies analyzes impact program comprehension change propagation 
introduces algorithm warns possible presence hidden dependencies 
section contains related 
section 
example hidden dependence session manager section give example hidden dependence objects 
fragment widely java application 
fragment consists classes collaborating manage session including saving retrieval individual application status shown 
wrapper class application context 
contains state application shared applications 
calls methods class update delete context retrieve application contexts 
support undo class log keeps log transactions 
example application wants update context call log record update back current context update application context required 
undo requested call log get code transaction reverse previous transaction 
transaction code type int transaction code protocol assumed string new context hashtable old context hashtable read int update int delete int undo log understand 
instance code transaction read 
classes log completely independent 
measures indicate coupling log zero 
instance log instance inside class linked data flow inside method undo seen fragment code public class string log log null context null string new context hashtable old context hashtable undo ieee context log log string undo 
session manager class diagram context log log string undo read int update int delete int undo int class log hashtable timestamp hashtable void undo string context undo 
called retrieve relevant instance log 
returns code operation recorded log 
return value understood correctly instance context order undo transaction 
possible original protocol may broken program change 
example want log hashtable timestamp hashtable introduce new transaction undo capability undo transaction new entry undo transaction code 
change syntactical impact programmer may change propagation log seemingly independent 
original protocol broken log understand undo transaction code 
keep system working new code added log 
type dependence caused missing encapsulation 
eliminated new class 
change transaction coding localize class propagate properly log 
object oriented programs designed 
encapsulation missed done improperly 
missing improper encapsulation spreads data attributes concept objects results hidden dependency objects 
spite fact objects seemingly independent missing encapsulation causes dependencies may come class int foo int get return void foo int set class int void set int int get return ieee example system dependence graph surprise programmer 
call hidden dependencies 

system dependence graph order define hidden dependencies define system dependence graph asdg 
asdg represents program level software components captures issues related program design 
derived detailed system dependence graph 

system dependence graph system dependence graph sdg represents programs granularity level statements :10.1.1.50.4405
vertices classes class members program statements 
edges represent control data dependencies 
data flows defined way variable defined statement program data flow dependent variable may affect value 
statement def variables defined statement variables statement 
dataflow edge foo foo get set class member method data statement dataflow calling control membership instanceof exists conditions holds type statements def type variable statement type statement variable def model parameter passing sdg associates procedure formal vertex formal parameter method formal vertex formal parameter may modified method 
calling site actual vertex actual parameter actual vertex actual parameter may modified methods 
procedure entries call sites global variables treated parameters 
call edge connects call vertex entry vertex called procedure dependence graph 
shows construction sdg code sample 
return value foo return value get sdg focuses granularity statements level detail insufficient program comprehension tasks 
sdg large program complex 
maintainers dependencies higher granularity units system dependence graph asdg helpful 

system dependence graph asdg derived sdg represents program dependence classes class members 
vertices asdg classes ieee variables methods 
edge connects vertexes relationship composition membership method calling data flow inheritance instance 
asdg contain control flow edges 
vertexes asdg include statements process converts sdg asdg statement calling site def remove statement incoming outgoing edges data flow edges vertexes vertexes def remove statement edges associated 
statement calling site data flow edges variable vertexes variable vertexes def 
sdg builds summary edges actual actual vertexes 
asdg needs abstraction transitive flow remove actual actual vertex calling statements constructing new summary edges 
summary edges model transitive data flow procedure call 
example removed 
ii 
calling edge directly calling method vertex called method remove calling statement vertex 
foo foo get set retval system dependence graph shows construction system dependence graph sample code thick dashed edge represent data flow part hidden dependency 

hidden dependencies informally say data flow dependence class hidden dependence conditions hold class explicitly dependent asdg class class neighbors fulfill criterion class unaware existence class 
third class dependent class data flow inside class occurs instance class instance class system dependence graph class applied procedure defined section sdg 
indicates existence hidden dependence class log class 
data flow starting variable log reach new context old context class direct relationship ieee classes syntactically 
log undo context log 
hidden dependencies impact analysis described impact analysis uses dependency information produce change impact sets 
similarly models change propagation process keeps track inconsistent program dependencies proposes locations subsequent changes 
case study indicates dependencies investigated vain time significant number dependencies missed 
believe hidden dependencies missed dependencies 
original example knowing hidden data flow dependence may think change propagate 
log missed estimated impact set software left inconsistent state 

hidden dependencies anti pattern hidden dependencies complicate software comprehension evolution new context old context read undo system dependence graph class avoided 
fit notion 
literary form describes commonly occurring solution problem generates decidedly negative consequences 
cause hidden dependence anti pattern lack abstraction encapsulation 
example typical case lack encapsulation 
hidden dependencies negative impact method detecting 
asdg define class dependence relationship dependence edge exists class class depends 
single class collection dependencies associated class defined asdg 
dfd collection data flow dependencies occurring inside class defined dfd data flow dependence instance class instance class class 
assuming hd set potential hidden dependencies system hd calculated hd class dfd hd hd hd potential hidden dependence set 
knowledge semantics classes involved required determine actual hidden dependencies 
solution hidden dependence ensure proper design decreases number hidden dependencies 
program concepts localized encapsulated single class order disperse attributes classes cause implicit dependencies 
component provides service component served interpret service identical way 

related literature analysis algorithms tools procedural programs object oriented programs 
difficult problem data flow analysis pointer aliasing 
java eliminates pointers objects passed introduce aliasing problem 
techniques handling parameters passed ieee dealing aliasing discussed 
landi described pointer aliasing problem tonella approach interprocedural analysis 
problem understand class interactions establish set change propagation rules 
techniques models object oriented software maintenance change assistant uses cross information 
potential propagation rules introduced 
interest data model oo care 
change propagation model manages change dependence analysis 
researchers classes may coupled uncommon mechanisms existing dependencies may detected static analysis 
research coupling measurement suggests ordering impact analysis strength coupling 
case study shows significant number ripple effects covered selecting highly coupled classes existing dependencies may detected static analysis 
system dependence graph role program comprehension discussed 
describe commonly occurring solutions problem generate decidedly negative consequences 
hidden dependence important 

presents hidden dependencies components caused internal data flows inside components 
occurrence hidden dependence caused lack proper abstraction encapsulation 
devoted investigation hidden dependencies caused object oriented features inheritance 
empirical explore question common hidden dependencies actual systems 
planning software restructuring refactoring removes hidden dependencies 
barros th 

supporting analysis semi automated techniques associated tool proc 
intl 
conf 
software maintenance france october pp 
arnold software change impact analysis software change impact analysis ieee computer society press isbn pp 
briand 
coupling impact analysis object oriented systems proc 
intl 
conf 
software maintenance oxford uk sep pp 
briand daly 
unified framework coupling measurement object oriented systems ieee transactions software engineering pp 
brown brown mccormick refactoring software architectures projects crisis john wiley sons isbn chen rajlich case study feature location dependence graph proc 
int 
workshop program comprehension los alamitos ca pp 

ferrante ottenstein warren program dependence graph optimization acm transactions programming language systems july pp 

horwitz reps binkley interprocedural slicing dependence graphs acm transactions programming languages systems jan pp 
cornell 
core java volume fundamentals prentice hall isbn 
jang kwon bae change impact analysis class hierarchy conf 
asia pacific software engineering taiwan pp 

landi ryder zhang 
inter procedural modification side effect analysis pointer aliasing proc 
sigplan conf 
program language design implementation june pp 

larsen harrold slicing object oriented software proc 
int 
conf 
software engineering pp 

liang harrold slicing objects system dependence graphs proc 
intl 
conf 
software maintenance bethesda md november pp 

courtois tool understanding object oriented program dependencies ieee transaction software maintenance pp 

roy program dependence analysis proc 
int 
conf 
software maintenance pp 

loyall mathisen 
dependence analysis support software maintenance process proc 
int 
conf 
software maintenance calif pp 

wagner integrated program representation toolkit maintenance programs proc 
int 
conf 
software maintenance calif pp 

rajlich model change propagation graph rewriting proc 
int 
conf 
software maintenance bari pp 
rajlich bennet staged model software life cycle ieee computer july pp 

tonella antoniol merlo flow insensitive pointers polymorphism analysis application slicing proc 
int 
conf 
software engineering boston pp 

ieee tonella antoniol merlo variable precision reaching definitions analysis software maintenance proc 
euromicro conf 
software maintenance reengineering berlin pp 

wilde maintenance support object oriented programs ieee transaction software engineering december pp 

wilde matthews maintaining object oriented software ieee journal software january pp 

wilde dietrich designing knowledge base tools program comprehension comparison serc tr software engineering research center university florida cse fl december 
yau macgregor ripple affect analysis software maintenance proc compsac ieee computer society pp 

