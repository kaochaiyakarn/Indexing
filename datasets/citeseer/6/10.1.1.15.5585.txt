mobile computing middleware mascolo capra wolfgang emmerich dept computer science university college london gower street london wc bt uk mascolo capra emmerich cs ucl ac uk 
advances wireless networking technologies growing success mobile computing devices laptop computers third generation mobile phones personal digital assistants watches enabling new classes applications challenging problems designers 
mobile devices face temporary loss network connectivity move scarce resources low battery power slow cpu speed little memory required react frequent changes environment high variability network bandwidth resources availability 
support designers building mobile applications research field middleware systems 
middleware aims facilitating communication coordination distributed components concealing complexity raised mobility application engineers possible 
survey examine characteristics mobile distributed systems distinguish fixed counterpart 
introduce framework categorisation various middleware systems designed support mobility detailed comparative review major results reached field 
analysis current trends inside mobile middleware community discussion directions research conclude survey 
wireless devices laptop computers mobile phones personal digital assistants smartcards watches gaining wide popularity 
computing capabilities growing quickly smaller smaller part day life 
devices connected wireless networks increasing bandwidth software development kits available third parties develop applications 
combined technologies personal devices enables people access personal information public resources anytime 
applications types devices challenging problems designers 
devices face temporary loss network connectivity move connection sessions usually short need discover hosts ad hoc manner scarce resources low battery power slow cpus little memory required react frequent changes environment change location context conditions variability network bandwidth remain orders magnitude lower fixed networks 
developing distributed applications designers deal explicitly problems related distribution heterogeneity scalability resource sharing 
middleware developed network operating systems provides application designers higher level abstraction hiding complexity introduced distribution 
existing middleware technologies transaction oriented message oriented object oriented middleware built trying hide distribution possible system appears single integrated computing facility 
words distribution transparent 
technologies designed successfully stationary distributed systems built fixed networks 
analyse aspect suit mobile settings 
firstly interaction primitives distributed transactions object requests remote procedure calls assume stable constant connection components 
mobile systems contrast unreachability norm exception 
secondly synchronous point point communication supported object oriented middleware systems corba requires client asking service server delivering service running simultaneously 
mobile environment case client server hosts connected time voluntary disconnections save battery power forced disconnection network coverage 
traditional distributed systems assume stationary execution environment characterised stable high bandwidth fixed location hosts 
developments object oriented middleware introduced asynchronous primitives order allow flexible 
see asynchronous primitives better choice mobile scenarios 
mobile systems look service components hide service location order allow reconfiguration minimal disruption 
mobile systems location device changes continuously connectivity fluctuates service host discovery essential information services reach application layer 
stationary systems reasonable completely hide context information location implementation details application mobile settings difficult little sense 
providing transparency middleware take decisions behalf application 
constrained dynamic settings mobile ones applications efficient better quality decisions application specific information 
order cope limitations research efforts focused designing new middleware systems capable supporting requirements imposed mobility 
result efforts pool mobile middleware systems produced 
survey provide framework classification relevant literature area highlighting goals attained goals need pursued 
aim help middleware practitioners researchers categorise compare evaluate relative strengths limitations approaches applied problem 
exhaustive coverage existing potential approaches impossible attempt identify key characteristics existing approaches cluster natural categories 
allows classes middleware systems just instances compared 
section describes main characteristics mobile systems highlights extents differ fixed distributed systems 
section presents model section describes main characteristics middleware distributed systems limitations terms mobility requirements 
section contains detailed comparative review major results reached date framework 
class give brief description main characteristics illustrate examples highlight strengths limitations 
section points directions research area middleware mobile computing section concludes 
mobile distributed system 
section introduce framework highlight similarities importantly differences fixed distributed systems mobile systems 
preliminary discussion necessary understand different requirements middleware fixed distributed systems middleware mobile systems satisfy 
characterisation distributed systems middleware distributed system consists collection components distributed various computers called hosts connected computer network 
components need interact order example exchange data access services 
interaction may built directly top network operating system primitives complex application developers 
middleware layered distributed system components network operating system components task facilitate component interactions 
illustrates example distributed system 
definition distributed system applies fixed mobile systems 
understand differences existing extrapolate concepts hidden previous definition greatly influence type middleware system adopted concept device network connection execution context 
concepts depicted 
comp 
middleware network operating system hardware comp host comp 
middleware network operating system hardware network comp host comp 
middleware network operating system hardware fig 

example distributed system 
distributed system type device fixed mobile type network connection permanent intermittent type execution context static dynamic comp fig 

characterisation mobile distributed systems 
host type device basic distinction devices fixed distributed system fixed mobile mobile distributed 
key point fixed devices vary home pcs unix workstations ibm mainframes mobile devices vary personal digital assistants mobile phones cameras smartcards 
generally powerful machines large amounts memory fast processors limited capabilities slow cpu speed little memory low battery power small screen size 
type network connection fixed hosts usually permanently connected network continuous high bandwidth links 
disconnections explicitly performed administrative reasons caused unpredictable failures 
failures treated exceptions normal behaviour system 
assumptions hold mobile devices connect internet wireless links 
performance wireless networks gsm networks satellite wavelan hiperlan bluetooth may vary depending protocols technologies reasonable bandwidth may achieved instance hosts reach hundreds meters base station number area technologies different hosts cell share bandwidth grow bandwidth rapidly drops 
device moves area coverage high interference bandwidth may suddenly drop zero connection may lost 
unpredictable disconnections considered exception longer part normal wireless communication 
network protocols gsm broader coverage areas provide bandwidth smaller orders magnitude provided fixed network protocols kbps 
gsm charges users period time connected pushes users patterns short time connections 
failures explicit disconnections network connection mobile distributed systems typically intermittent 
type execution context 
context mean influence behaviour application includes resources internal device amount memory screen size external resources bandwidth quality network connection location hosts services proximity 
fixed distributed environment context static bandwidth high continuous location changes hosts added deleted moved frequency happens orders magnitude lower mobile settings 
services may change discovery available services easily performed forcing service providers register known location service 
context extremely dynamic mobile systems 
hosts may come leave generally rapidly 
service lookup complex mobile scenario especially case fixed infrastructure completely missing 
broadcasting usual way implementing service advertisement carefully engineered order save limited resources sending receiving power consuming avoid flooding network messages 
location longer fixed size wireless devices shrunk carried pocket moved easily 
depending location mobility bandwidth quality network connection may vary greatly 
example pda equipped wavelan network card gsm module connection may drop mbs bandwidth close base station conference room outdoor gsm cell car way home 
type device network connection context typical distributed systems distinguish traditional distributed systems nomadic distributed systems ad hoc mobile distributed systems 
traditional distributed systems fig 

structure traditional distributed system 
framework previously described traditional distributed systems collection fixed hosts permanently connected network high bandwidth stable links executing static environment 
application designers building distributed applications top physical infrastructure guarantee non functional requirements scalability ability accommodate higher load time 
load measured different parameters instance maximum number concurrent users number transactions executed time unit data volume handled openness possibility extend modify system easily consequence changed functional requirements 
real distributed system evolve lifetime 
system needs stable architecture new components easily integrated preserving previous investments heterogeneity calls integration components written different programming languages running different operating systems executing different hardware platforms 
distributed system heterogeneity unavoidable different components may require different implementation technologies 
ability establish communication essential fault tolerance ability recover faults halting system 
faults happen hardware software failures software errors hardware distributed components continue operate components rely failed resource sharing 
distributed system hardware software resources printer database shared different users system form access control shared resources necessary order access authorised users system 
traditional distributed systems form fixed distributed system 
started investigated employed years ago research effort directed solutions mentioned problems 
successful middleware technologies designed implemented 
briefly review section 
nomadic distributed systems nomadic systems sense compromise totally fixed totally mobile systems 
nomadic systems usually composed set mobile devices core infrastructure fixed wired nodes 
nomadic systems mobile devices move location location maintaining connection fixed network 
usually wireless network connects edges fixed infrastructure mobile devices 
load computation connectivity procedures mainly carried backbone network 
services mainly provided core network mobile clients 
network disconnection allowed services transparent reconnection re synchronisation provided 
non functional requirements listed section hold core systems fixed network 
scalability system related ability serving larger numbers mobile devices efficient way 
openness deal extensibility functionality provided core network 
heterogeneity complicated fact different links wireless fixed different wireless technologies may coexist network 
fault tolerance depending type application disconnection may fault exception functionality 
reconnection sharing services allowed 
resource sharing fixed networks resources core network 
picture gets complex allow services provided mobile devices case discovery quality provision need thought differently 
ad hoc mobile distributed systems ad hoc mobile simply ad hoc distributed systems consist set mobile hosts connected network high variable quality links executing extremely dynamic environment 
differ traditional nomadic distributed systems fixed infrastructure mobile fig 

structure ad hoc distributed system 
hosts isolate completely groups may evolve independently opportunistically forming clusters depicted clouds eventually rejoin time 
connectivity may asymmetric symmetric depending instance radio frequency transmission hosts 
radio connectivity defines clouds depicted implying connection default transitive 
ad hoc routing protocols defined order overcome limitation allow routing packets mobile hosts 
pure ad hoc networks limited applications range small ad hoc groups share information meetings short time military application battle fields discovery emergency networks areas 
non functional requirements discussed nomadic systems hold kind networks 
scalability issue big networks need coordinated 
contrast nomadic systems service provided mobile host 
big ad hoc networks ad hoc routing enabled instance routing tables messages big network large 
bandwidth connectivity may vary depending concentration interference devices 
heterogeneity network provide different connectivity strategies technologies bluetooth areas connected wavelan areas need coordination 
terms fault tolerance highly dynamic structure network disconnection consider norm exception 
security difficult obtain fixed networks message encryption techniques order avoid message spoofing 
physical structure mobile ad hoc network completely different traditional fixed networks 
types network large range network solutions adopt aspects 
believe heterogeneous networks fixed components interact ad hoc areas different connectivity technologies going networks middleware provide support 
effort middleware mobile networks term mobile network meaning different things 
introduce significant middleware categorisation peculiarities 
middleware systems model building distributed applications mobile stationary top network layer extremely tedious error prone 
application developers deal explicitly non functional requirements listed previous section heterogeneity fault tolerance complicates considerably development maintenance application 
novelties mobile systems approach adopted system developers give details section 
support designers building distributed applications middleware system layered network operating system distributed application put place 
middleware implements session presentation layer iso osi model see 
main goal enable communication distributed components 
provides application developers higher level abstraction built primitives network operating system 
middleware offers solutions resource sharing fault tolerance requirements 
application presentation session transport network data link physical fig 

iso osi model 
past years middleware technologies distributed systems built successfully industry 
example object oriented technologies omg corba microsoft com sun java rmi message oriented technologies ibm mqseries 
successful fixed environments systems suitable mobile setting different requirements entail 
discuss issue details section show traditional middleware adapted mobile setting section 
researchers actively working design middleware targeted mobile setting different solutions investigated 
order classify discuss compare middleware developed date understand suitability mobile setting introduce model depicted 
middleware type computational load heavyweight lightweight type communication paradigm synchronous asynchronous type context representation transparency awareness fig 

characterisation middleware systems 
shown picture distinguish middleware systems computational load require execute communication paradigms support kind context representation provide applications 
type computational load 
computational load depends set non functional requirements met system 
instance main purpose middleware enable communication allowing user request remote service distinguishes different middleware systems reliability requests handled 
fact expensive guarantee request executed exactly providing best effort reliability request may may executed 
example may consider replication 
replication widely middleware systems order achieve fault tolerance improve scalability 
keeping replicas synchronised master copy requires lot effort resources network communication 
depending consistent replicas computational load middleware varies accordingly 
term heavy weight denote system requires large amount resources deliver services applications opposed light weight runs minimum set resources cpu main memory lines code 
different computational loads imply different qualities service depending characteristics distributed system addressing amount resources available non functional requirements different middleware may suit better discuss section 
type communication paradigm 
basically types communication paradigms middleware system support synchronous asynchronous 
requires client asking service server exporting particular service connected executing time order request successfully processed 
require sender receiver request connected simultaneously 
forms communications exist sit way deferred synchronous 
way requests return control client awaiting completion operation requested server 
implies semantics client depend result requested operation 
deferred synchronous requests return control client immediately way requests client charge re synchronising server collect result may cause client block answer ready 
type context representation 
parameter identified distinguish different classes middleware refers fact information execution context fed applications awareness kept hidden inside middleware transparency 
middleware interacts underlying network operating system collects information actual location device value network bandwidth latency remote services available transparency mean context information privately middleware shown applications example middleware may discover congestion portion distributed system redirect requests access data replica residing part distributed system informing application decision 
awareness mean information execution context parts passed running applications charge strategic decisions 
example application layer choose replica contact non portion network 
due complexity introduced awareness approach middleware distributed systems usually chose transparent strategies 
justifiable lack behavioural optimisation application awareness compensated abundance resources 
discussed model characterise distribute systems section model characterise middleware distributed systems section need understand relationships models determine characteristics middleware mobile distributed systems satisfy differ ones required fixed distributed systems 
middleware fixed distributed systems respect conceptual model middleware fixed distributed systems mainly described resource consuming systems hide details distribution application designers 
exception message oriented middleware section mainly support synchronous communication components basic interaction paradigm 
analyse details relationship physical structure fixed distributed systems characteristics associated middleware 
fixed devices heavy computational load 
discussed section wired distributed systems consist resource rich fixed devices 
building distributed applications top infrastructure worthwhile exploiting resources available fast processors large amounts memory order deliver best quality service application 
higher quality service heavier middleware running underneath application 
due set non functional requirements middleware achieves fault tolerance security resource sharing 
permanent connection synchronous communication 
fixed distributed systems permanently connected network highbandwidth stable links 
means sender request receiver component asking service component delivering service usually connected time 
permanent connection allows synchronous form communication situations client server connected time considered exceptions due failures system disconnection due network overload 
asynchronous communication mechanisms provided message oriented middleware mom corba specification 
asynchronous communication fixed networks bulk middleware applications developed synchronous communication 
static context transparency 
execution context fixed distributed system generally static location device seldom changes topology system preserved time bandwidth remains stable abundance resources allows disregard application specific behaviours favour transparent efficient approach 
example achieve fault tolerance middleware transparently decide hosts create replicas data redirect requests access data case network failure inhibits direct access master copy completely transparent manner 
hiding context information inside middleware eases burden application programmers deal achievement non functional requirements fault tolerance explicitly concentrating real problems application building 
middleware ad hoc nomadic distributed systems nomadic ad hoc mobile systems differ aspects set similar characteristics influence way middleware behave 
justify set choices generally middleware describe 
mobile devices light computational load 
mobile applications run resource scarce devices little memory slow cpu generally limited battery power 
due resource limitations heavy weight middleware systems optimised powerful machines suit mobile scenarios 
right trade computational load nonfunctional requirements achieved middleware needs established 
example relax assumption keeping replicas synchronised allow existence diverging replicas eventually reconcile favour lighter weight middleware 
see examples middleware described section 
intermittent connection asynchronous communication 
mobile devices connect network opportunistically short periods time mainly access data request service 
periods available bandwidth orders magnitude lower fixed distributed systems may suddenly drop zero areas network coverage 
case client asking service server delivering service connected time 
order allow interaction components executing time line asynchronous form communication necessary 
example possible client ask service disconnect network collect result request point able reconnect 
dynamic context awareness 
fixed distributed systems mobile systems execute extremely dynamic context 
bandwidth may stable services available may second example moving hand held device loses connection service provider 
high variability constrained resources influences way middleware decides chooses 
optimisation application middleware behaviour application context aware techniques important limited resources 
middleware fixed distributed systems middleware technologies fixed distributed systems classified main categories object oriented middleware message oriented middleware transaction oriented middleware 
briefly review main characteristics technologies assess feasibility application mobile settings 
object oriented component middleware object oriented middleware supports communication distributed objects client object requests execution operation server object may reside host 
class middleware systems evolved remote procedure calls rpcs basic form interaction synchronous means client object issuing request blocked server object returned response 
products category include implementations omg corba iona orbix borland visibroker corba component model ccm microsoft com java rmi enterprise javabeans 
despite great success technologies building fixed distributed systems applicability mobile setting restricted heavy computational load required run systems mainly synchronous form object requests supported principle transparency driven design prevents forms awareness 
corba specification allows asynchronous communication time writing implementation exists 
systems mobile context investigated reported section 
message oriented middleware message oriented middleware supports communication distributed components message passing client components send message containing request service execution parameters server component network server may respond reply message containing result service execution 
message oriented middleware supports asynchronous communication natural way achieving de coupling client server requested mobile systems client able continue processing soon middleware accepted message eventually server send reply message client able collect convenient time 
middleware systems require resource rich devices especially terms amount memory store persistent queues messages received processed 
sun java message queue ibm mqseries examples successful message oriented middleware traditional distributed systems 
believe scope categories identified middleware scientific computing omit discussion loosely related mobile setting 
middleware mobile settings discuss adaptation jms ported mobile 
transaction oriented middleware transaction oriented middleware systems mainly architectures components database applications 
support transactions involving components run distributed hosts client component clusters operations transaction middleware transports network server components manner transparent clients servers 
middleware support synchronous asynchronous communication heterogeneous hosts achieve high reliability long participating servers implement phase commit protocol atomicity property transactions guaranteed 
causes undue overhead need transactions 
despite success fixed systems computational load transparency typical kind middleware ibm cics bea look suitable mobile settings 
classification middleware fixed distributed systems categories object oriented message oriented transaction oriented discussed rigid 
fact trend merging categories shown corba object transaction service convergence object oriented transaction oriented middleware corba event service publish subscribe communication la ccm union object oriented message oriented middleware 
assess impact traditional middleware mobile settings describe set middleware developed specifically mobile 
middleware mobile distributed systems different examples traditional middleware systems context mobile computing 
show examples adaptation object oriented middleware message oriented middleware small mobile devices 
main problem object oriented approach relies synchronous communication primitives necessarily suit possible mobile system architectures 
computational load systems quite high principle transparency adhere fit mobile applications 
seen requirements mobile applications considerably different requirements imposed fixed distributed applications 
developed systems mobile environments adopted radical approach having middleware rely application handle services deal non functional requirements contextaware approach allows adaptation changing context 
sun provides java micro edition basic jvm development package targeting mobile devices 
microsoft matched net compact framework support xml data web services connectivity 
approach non solution completely relies application designers solution non functional requirements middleware provide starting scalability 
hand middleware specifically targeting needs mobile computing devised assumptions scarce resources fluctuating connectivity order reach lightweight solutions 
approaches target mobility aspects instance location aware systems implemented allow application location information provide services 
describe developed solutions date starting examples adaptation object oriented middleware corba java messaging server mobile platforms solutions targeting completely ad hoc scenarios 
traditional middleware applied mobile computing object oriented middleware adapted mobile settings mainly mobile devices inter operated existing fixed networks nomadic setting 
main challenge direction terms software size protocol suitability mentioned 
iiop internet inter orb protocol essential part corba needed allow communication devices 
iiop successfully ported mobile setting minimal orb mobile devices 
iiop defines minimum protocol necessary transfer invocations orbs 
alice hand windows ce gsm adaptors provide support client server architectures nomadic environments 
adaptation iiop specifically mobile lw iop light weight inter orb protocol devised dol men project caching data combined scheme face wireless medium unreliability 
actual names machines translated dynamically name server maintains date information hosts location 
corba iiop wap wireless access protocol stack order allow corba services fixed network mobile devices connected wap gateway 
iiop achieve message exchange 
general synchronous connectivity paradigm introduced traditional middleware assumes permanent connectivity granted mobile computing scenarios 
mentioned systems usually targeted nomadic settings hand offs allow mobile devices roam connected 
minimal support disconnection introduced 
serious attempts direction traditional middleware sort semi asynchronous paradigm 
involved rpc middleware enhanced queueing delaying buffering capabilities order cope intermittent disconnections 
example behaviours rover mobile dce 
write implementation message oriented middleware jms java messaging server released 
supports point point publish subscribe models device communicate single queue register topic notified messages sent topic 
believe answer need adaptation traditional middleware mobile publish subscribe message oriented systems taken offer asynchronous communication mechanism allows disconnected operations 
communication aspect mobile computing middleware tackle important aspects context awareness data sharing need addressed 
existing examples traditional middleware mobile focus provision services back bone network set mobile devices main concerns scenarios connectivity message exchange 
case structured network case services provided mobile devices traditional middleware paradigms suitable new set strategies needs 
importance monitoring condition environment adaptation application needs communication context information upper layers vital achieve reasonable quality service 
highly dynamic environment scarce resources quality service provision presents higher challenges mobile computing 
researchers devised number interesting approaches quality service provision mobile devices 
time devices considered terminal nodes clients service provision network connectivity assumed fluctuating continuous gsm settings 
probably significant example quality service oriented middleware uses corba iiop java allow service quality adaptation mobile setting 
shown mobile devices seen terminal nodes network main operations services developed core programmable network routers switches 
mobile devices connected access points roam access point 
main idea mobile devices probe adapt constantly changing resources wireless link 
experimental network composed atm switches wireless access points broadband cellular ad hoc connected mobile devices 
toolkit focuses delivery multimedia application devices adaptation different quality service seamless mobility 
assumes service provision scenario mobile devices roaming permanently connected fluctuating bandwidth 
case ad hoc broadband link device supposed receive service provision core network cellular links ad hoc hops 
fig 

architecture 
extreme scenarios links ad hoc assumptions different middleware technologies need applied 
strength adaptation component customise quality service results 
clear middleware mobile devices ignore context adaptation key point limited resources changing conditions 
interesting example quality service oriented middleware tuple space quality service aware system 
description refer reader section describe advantages tuple space models 
context awareness middleware enable applications adapt heterogeneity hosts networks variations user environment systems provide mobile applications aware context 
furthermore context information optimise application behaviour counter balancing scarce resource availability 
user context includes limited location varying accuracy depending positioning system relative location proximity printers databases device characteristics processing power input devices physical environment noise level bandwidth user activity driving car sitting lecture theatre 
context aware computing new computing paradigm proposed decade ago researchers studied developed systems collect context information adapt changes 
principle reflection allow dynamic reconfiguration middleware proven useful offer context awareness 
concept reflection introduced smith principle allows program access reason alter interpretation 
initially reflection restricted field programming language design years reflection applied field operating systems distributed systems 
examples traditional middleware built principle reflection include limited openorb opencorba dynamictao blair 
role reflection distributed systems openness flexibility middleware platforms 
standard middleware complexity introduced distribution handled means abstraction 
implementations details hidden users application designers encapsulated inside middleware 
having proved successful building traditional distributed systems approach suffers severe limitations applied mobile setting 
hiding implementation details means complexity managed internally middleware layer middleware charge decisions behalf application letting application influence choice 
may lead computationally heavy middleware systems characterised large amounts code data order transparently deal kind problems find solution guarantees best quality service application 
heavyweight systems run efficiently mobile device afford computational load 
mobile setting possible desirable hide implementation details user 
fundamental problem hiding implementation details middleware take decisions behalf application application may vital information lead efficient suitable decisions 
limitations overcome reflection 
reflective system may bring modifications means inspection adaptation 
inspection internal behaviour system exposed straightforward insert additional behaviour monitor middleware implementation 
adaptation internal behaviour system dynamically changed modification existing features adding new ones 
means middleware core minimal set functionalities installed mobile device application charge monitoring adapting behaviour middleware needs 
possibilities opened approach remarkable light weight middleware built support context awareness 
context information kept middleware internal data structures reflective mechanisms applications acquire information execution context tune middleware behaviour accordingly 
specific communication paradigm related principle reflection issue left unspecified depends specific middleware system built 
approaches investigated reflection context mobile systems offer dynamic context awareness adaptation mechanisms 
uic universally interoperable core minimal reflective middleware targets mobile devices 
uic composed pluggable set components allow developers specialise middleware targeting different devices environments solving heterogeneity issues 
configuration automatically updated compile run time 
personalities defined client side server side behaviours 
personalities define server type interact corba java rmi depicted single personalities allow interaction type multi personalities allow interaction type 
case multi personalities middleware dynamically chooses right interaction paradigm 
size core goes instance kb client side corba personality running palm os device kb client server corba personality running windows ce device 
fig 

uic interaction paradigm 
top framework similar uic gaia developed adding support dynamic adaptation context conditions 
gaia defines active spaces services users data locations represented manipulated dynamically coordination 
gaia defines set services event distribution discovery security data storage 
approaches direction developed focusing meta data representation services application depended policies 
mechanisms dynamic adaptation conflict resolutions put place 
approach context awareness mobile computing 
presents middleware event notification mobile computing applications 
different event channels allow differentiation notification different context environmental variables 
shows architecture system 
asynchronous event channel suits mobile computing setting allowing disconnection model authors assume permanent fluctuating connectivity 
applications register notification specific events depending task perform 
applications relying middleware constructed decoupling application functionalities application context awareness policies defined adapt context 
fig 

event notification architecture 
main idea systems offer ability change behaviour middleware application knowledge changing context 
valid idea scarce resources dynamicity mobile environment 
research investigating context awareness issues 
example context aware systems odyssey data sharing middleware synchronisation policies depending applications 
describe middleware data sharing oriented middleware section 
location aware middleware 
location studied aspects context awareness 
location awareness attracted great deal attention examples exist applications exploit location information offer travellers directional guidance shopping assistant cyberguide find neighbouring devices services provide teleporting send advertisements depending user location people object pager send messages specific area conference assistant 
systems interact directly underlying network os extract location information process convenient format user 
major limitations concerns fact cope heterogeneity coordinate information different versions released able interact specific sensor technologies global positioning system gps outdoors infrared radio frequency indoors 
enhance development location services applications reduce development cycle middleware systems built integrate different positioning technologies providing common interface different positioning systems 
examples include oracle nexus released 
describe briefly nexus example middleware supports location aware applications mobile users 
idea motivated development system migration homogeneous communication environment possible infrastructure supports heterogeneous communication environment necessary 
nexus aims provide infrastructure 
nexus clients applications user interface distributed data management communication outdoor indoor dgps gps digital compass ins fig 

nexus architecture 
sensors infrared signals radio networks active badge systems architecture nexus infrastructure depicted 
picture shows different components working 
user interface component running mobile device carried user contains basic functionality required nexus clients interact nexus platform display navigate model 
provides support adapting devices different levels computing power different amounts memory different levels network connection different displays 
interior nexus platform split main elements communication distributed data management sensors 
sensors nexus applications run outdoor indoor areas 
difficult sensor positioning environments gps outdoor indoor satellite signals blocked buildings 
multi sensor tool needed different positioning systems 
communication access information mobile devices need able connect information source internet wireless communication 
wide area network data services mobile telephone systems gsm umts 
inside building wireless lan bluetooth 
nexus communication layer acts broker bridge differences existing heterogeneous networks 
distributed data management demands different location aware applications spatial data offered multiple representations 
appropriate algorithms deduce necessary levels detail implemented platform 
order guarantee interoperability relationships different models defined data formats exchangeable 
different aspects concerning management data nexus managed distributed data management component 
data sharing oriented middleware major issues targeted support disconnected operations data sharing 
systems coda successor odyssey bayou xmiddle try maximise availability data giving users access replicas differ way ensure replicas move eventual consistency mechanisms provide detect resolve conflicts naturally arise mobile systems 
despite proliferation different proprietary data synchronisation protocols mobile devices lack single synchronisation standard protocols implemented subset devices able access small set networked data 
represents limitation users application developers service providers device manufacturers 
coda coda file system large scale distributed computing environments 
provides resilience server network failures distinct complementary mechanisms server replication disconnected operation 
mechanism involves storing copies file multiple servers second mode execution caching site temporarily assumes role replication site particularly useful supporting portable computers 
coda distinction relatively servers physically secure run trusted software monitored operational staff clients far numerous may modified arbitrary ways users physically dispersed may turned long periods time 
coda middleware targets fixed nomadic systems relies fixed core infrastructure 
unit replication coda volume collection files stored server form partial subtree shared file system 
set servers contain replicas volume volume storage group 
disconnections treated rare events disconnected client access data previously cached client site reconnection modified files directories disconnected volumes propagated 
coda clients view disconnected operations temporary state revert normal operation earliest opportunity transitions normally transparent users 
disconnected operation entered voluntarily client deliberately disconnects network clients way influence portion file system replicated locally 
system bears responsibilities propagating modifications detecting update conflicts connectivity restored 
venus cache manager control replication volumes 
venus states hoarding client connected network case venus takes care caching information emulating disconnected cache throwing exceptions needed data cache integrating reconnection data modified need reconciled server copy 
venus attempts solve conflicts reconciliation application transparent way application specific resolvers asr may specified 
odyssey application transparent approach adopted coda improved introducing context awareness application dependent behaviours odyssey allowing approaches mobile computing settings 
odyssey assumes applications reside mobile clients access update data stored remote capable trustworthy servers nomadic scenario targeted 
odyssey proposes collaborative model adaptation 
operating system arbiter shared resources best position determine resource availability application entity properly adapt context conditions allowed specify adaptation policies 
collaborative model called application aware adaptation provided architecture depicted 
allow reaction changes applications need register interest particular resources 
resource define acceptable upper lower bounds availability resource register call procedure invoked availability resource falls application runtime upcalls interceptor viceroy web warden video warden middleware fig 

odyssey client architecture 
outside window acceptance 
viceroy component responsible monitoring resource usage client side notifying applications significant changes registered calls 
application notified change resource availability adapt access 
components responsible implementing access methods objects type interceptor module redirects file systems operations corresponding provide customised behaviour different replication policies type specific knowledge 
better suited mobile environment predecessor coda odyssey suffers limitations data moved mobile devices collection files may coarse grained mobile setting devices limited amount memory connection expensive low quality 
existence core capable trustworthy servers fit ad hoc scenario 
files uninterpreted byte streams lack semantics complicates development conflict detection reconciliation policies application point view 
bayou bayou storage system provides infrastructure collaborative applications 
bayou manages conflicts introduced concurrent activity relying fluctuating connectivity available mobile computing 
replication seen requirement mobile scenario single storage site may reachable mobile clients disconnected groups 
bayou allows arbitrary read write operations replica explicit coordination replicas computer eventually receives updates directly indirectly chain peer interactions 
weak consistency replicated data transparent applications aware may weakly consistent data write operations may conflict users applications 
applications involved detection resolution conflicts naturally depend semantics application 
particular system provides application ways specifying machine boundaries client application bayou api server storage system write read write read server storage system fig 

bayou system model 
client application bayou api server storage system notion conflict policy resolving 
return system implements mechanisms reliable detection conflicts specified application automatic resolution possible 
automatic detection achieved mechanism called dependency check write operation accompanied dependency set consists query expected result 
conflict detected query run server current copy data return expected result 
dependency check pre condition performing update 
example consider trying add appointment agenda knowing content agenda 
dependency check sure time appointment free adding 
check fails requested update performed server invokes procedure resolve detected conflict 
conflict detected merge procedure run bayou server attempt resolve 
merge procedures provided application programmers form templates filled details write accompany write operation 
users know automatic conflict resolution done manual resolution needed 
bayou flexible odyssey customisation performed write operation type 
bayou guarantees servers move eventual consistency 
means servers eventually receive write operations process called anti entropy system enforce bounds write propagation delays depend network connectivity factors outside bayou control 
eventual consistency guaranteed factors writes performed defined order servers detection resolution procedures deterministic servers resolve conflict way 
previous systems coda promote transparency conflict detection resolution bayou exploits application knowledge dependency checks merge procedures 
coda locks complete file volumes conflicts detected resolved bayou allows replicas remain accessible 
permits clients continue read previously written data issue new writes may lead cascading conflict resolution newly issued operations depend data conflict 
major drawbacks bayou client sever architecture 
principle client server may exist host see practise system requires data collection replicated full number servers 
course hand held devices play role clients architecture 
bayou suited nomadic ad hoc applications 
xmiddle xmiddle allows mobile hosts share data connected replicate data perform operations line disconnected reconciliation data takes place hosts reconnect 
tuple space systems see section store data flat unstructured structures xmiddle allows device store data tree structure 
trees allow sophisticated manipulations due different node levels hierarchy nodes relationships different elements defined 
hosts get touch need able interact 
xmiddle allows communication sharing trees 
device set possible access points private tree defined essentially address branches tree modified read peers 
size branches vary single node complete tree systems coda odyssey section entire collections files replicated unit replication easily tuned accommodate different needs 
example replication full tree performed laptop small branch pda memory capabilities devices differ greatly 
order share data host needs explicitly link host tree 
concept linking tree similar mounting network file systems distributed operating systems access update information remote disk 
shows general structure xmiddle way hosts get touch interact 
long hosts connected share modify information linked data trees 
disconnections occurs explicit save battery power perform changes isolation hosts implicit due movement host reach area disconnected hosts retain replicas trees sharing connected continue able access modify data 
hosts reconnect different possibly conflicting replicas need reconciled 
xmiddle exploits tree differencing techniques developed detect differences replicas hosts concurrently line modify shared data 
may happen fig 

host hb host hc connected 
host hb host hc connect host hb receives copy tree linked host hc 
reconciliation task completed xmiddle layer example different updates performed node tree 
order solve conflicts xmiddle enables mobile application engineer associate application specific conflict resolution policies node tree 
conflict detected reconciliation process finds policy application wants middleware apply order successfully complete merging procedure 
xmiddle implements tree data structure extended markup language xml related technologies 
particular application data stored xml documents semantically associated trees 
related technologies document object model dom xpath xlink exploited manipulate nodes address branches manage different parts xml document 
reconciliation policies specified part xml schema definition data structures handled xmiddle 
xmiddle moves step forward middleware systems focus problem disconnected operations 
particular coda odyssey unit replication easily tuned order accommodate different application device needs 
issue may play key role mobile scenarios devices limited amount memory quality network connection poor expensive 
xmiddle addresses pure ad hoc networks nomadic ones assumption existence powerful trusted hosts play role servers collection data replicated full 
representing starting point developing middleware mobile computing xmiddle suffers limitations require investigation communication paradigm sharing trees pro vided poor needs improved order model complex interactions occur mobile settings 
tuple space middleware characteristics wireless communication media low variable bandwidth frequent disconnections favour decoupled opportunistic style communication decoupled sense computation proceeds presence disconnections opportunistic exploits connectivity available 
synchronous communication paradigm supported traditional distributed systems replaced new asynchronous communication style 
seen attempts events queues rover mobile jms devised 
completely asynchronous decoupled paradigm tuple space isolated effective mobile settings 
initially designed purpose origins go back linda coordination language concurrent programming tuple space systems shown provide useful facilities communication wireless settings 
linda tuple space globally shared associatively addressed memory space processes communicate 
acts repository particular multi set data structures called tuples seen vector typed values 
tuples constitute basic elements tuple space systems created process placed tuple space write primitive accessed concurrently processes read take primitives blocking non blocking versions provided 
tuples anonymous selection takes place pattern matching tuple contents 
communications de coupled time space senders receivers need available time tuples life span independent process generated mutual knowledge location necessary data exchange tuple space looks globally shared data space regardless machine platform boundaries 
forms decoupling assume enormous importance mobile setting parties involved communication change dynamically due migration connectivity patterns 
traditional tuple space implementation 
basic questions need answered globally shared data space mobile hosts 
persistent 
solutions developed date basically differ depending answers give questions 
review tuple space middleware devised mobile computing applications lime tspaces 
lime lime shift fixed context dynamically changing accomplished breaking linda tuple space tuple spaces permanently associated mobile unit introducing rules transient sharing individual tuple spaces connectivity 
mobile units transiently shared tuple space fig 

transiently shared tuple spaces lime 
shown mobile unit access interface tuple space permanently exclusively attached unit transferred movement occurs data tree xmiddle 
contains tuples unit wishes share represents context accessible unit 
access takes place conventional linda primitives semantics basically unaffected 
content set tuples accessed dynamically recomputed way looks result merging mobile units currently connected 
arrival new mobile unit content perceived mobile unit recomputed content new mobile unit account 
operation called engagement tuple spaces opposite operation performed departure mobile unit called 
tuple space accessed mobile unit shared construction transient content changes movement mobile units 
term mobile unit understood mobile agent mobile host 
case context logical mobility second physical mobility 
lime notion transiently shared tuple space applicable generic mobile unit regardless nature long notion connectivity ruling engagement properly defined 
lime fosters style coordination reduces details mobility distribution changes perceived local tuple space 
powerful view simplifies application design scenarios relieving designer explicitly maintaining view context consistent changes configuration system 
may restrictive domains higher degrees context awareness needed example control portion context accessed 
lime tries cope problem extending linda operations tuple location parameters allow operate different projections transiently shared tuple space 
secondly information system configuration available read transiently shared tuple space called containing details mobile components community relationship reactions set tuple space enable actions taken response change configuration system 
important aspect lime tuple access movement events notify users new tuple available 
tspaces tspaces ibm middleware system 
goal tspaces support communication computation data management hand held devices 
tspaces marriage tuplespace database technologies implemented java 
tuplespace component provides flexible communication model database component adds stability durability advanced query capabilities extensive data storage capacity java adds instant portability 
tspaces client write tspaces server read answer take answer tspaces client tspaces client fig 

examples interactions tspaces 
tspaces design distinguishes clients servers 
tuple space exists tspaces server server may host spaces 
tuple space created tspaces client allowed perform operations read write 
tspaces server centralised server listens client requests time client issues operation information sent server lookup operation finds tuplespace operation needs performed passes operation tuple operand process see 
specific server systems tuple spaces galaxy contains tuples describing tuple space exists server admin contains access control permissions tuplespace goal check issuer operation proper access control privileges 
tspaces different tuple space systems reasons behaviour middleware dynamically modifiable 
new operators defined new datatypes operators introduced 
second tspaces employs real data management layer functionalities similar relational database systems 
operations performed transactional context ensures integrity data 
support indexing query capability provided 
data tuples stored database operations act data kept separated operations added changed affecting database 
lime tspaces mainly targets nomadic environments servers containing tuple data bases stored fixed powerful machines reachable mobile devices roaming 
transactional approach tuple read write limitation terms mobility paradigms heavy connection fluctuating 
furthermore disconnection seen fault disconnected clients access tuple spaces 

tuple space middleware emphasis quality service 
features multiple tuple spaces tuple type hierarchy quality service attributes monitoring adaptation agents 
tspaces lime provides ability create multiple tuple spaces 
tuple spaces created needed provided creation termination go universal tuple space main tuple space 
tuple spaces implemented distributed system fashion host holds replica tuple space allow disconnected operations 
provides quality service features quality service fields associated tuples deadline tuple indicates long tuple available space 
associated quality service fields qos monitoring agent monitors conditions network costs connection power consumption 
information quality service placed tuples available agents hosts 
support disconnected operations asynchronous communication paradigm suited highly mobile environments 
service discovery mobile computing middleware traditional middleware systems service discovery provided fixed name services host knows existence 
network dynamic difficult service host discovery 
distributed peer peer network service discovery complex hosts join leave overlay network frequently 
mobile systems service discovery quite simple speak nomadic systems fixed infrastructure containing information services 
terms ad hoc mixed systems services run roaming hosts discovery may complex expensive 
ad hoc systems encountered till discovery service 
lime xmiddle completely ad hoc strategy hosts continuously monitor environment check available offering 
trade power consumption broadcast discovery needs evaluated 
lime service advertisement discovery devised 
standard service discovery frameworks appeared years upnp jini salutation 
upnp stands universal plug play open standard transparently connecting appliances services adopted microsoft operating systems 
upnp different protocols tcp soap 
salutation general framework service discovery platform os independent 
jini java dependent java virtual machine 
purpose frameworks allow groups devices software components federate single dynamic distributed system enabling dynamic discovery services inside network federation 
describe jini salutation 
jini jini distributed system middleware idea groups users resources required users 
main goal turn network flexible easily administered framework resources hardware devices software programs services added deleted humans computational clients 
important concept jini architecture service 
service entity person program service 
members jini system federate order share access services 
services resolved lookup service maps interfaces indicating functionality provided service sets objects implement service 
lookup service acts central marketplace offering finding services members federation 
service added lookup service pair protocols called discovery join new service provider locates appropriate lookup service protocol joins second see 
distributed security model put place order give access resources authorised users 
jini assumes existence fixed infrastructure provides mechanisms devices services users join detach network easy natural automatic manner 
relies existence network reasonable speed connecting jini technology enabled devices 
large footprint jini mbytes due mainly java rmi prevents jini smaller devices ipaqs pdas 
direction developed complying client service object lookup lookup service service object service attributes service invocation join discovery service provider service object service attributes fig 

discovery join lookup mechanism jini 
jini specification 
rely java rmi messaging footprint just kbytes 
salutation salutation aims platform operating system independence 
focuses interoperability different services set common standards specification service functionalities 
discovery services managed salutation managers interact rpc exchanging service registration information 
salutation managers direct communication different clients notifying new data arriving example 
concept service decomposed sets functional units representing specific features services 
salutation managers specify format transmitted data implementing transport protocol independence 
general despite complete systems terms discovery systems hardly provide support important non functional requirements word middleware 
believe number functionalities systems seen combined efficient middleware mobile computing 
research directions model middleware mobile computing lightweight run hand held resource scarce devices support asynchronous form communication mobile devices connect network opportunistically short periods time built principle awareness mind allow applications adapt middleware behaviour changes context execution achieve best quality service optimal resources 
furthermore variability different mobile systems ranging pure ad hoc nomadic roaming hosts different network connectivity paradigms add parameters difficult isolate general purpose middleware solution 
believe research terms mobile computing middleware faces challenges solvable adapting traditional middleware techniques 
believe mobile networks heterogeneous sense different devices available market possibly different operating systems user interfaces 
network connectivity heterogeneous effort complete coverage different connection technologies 
reasons mobile computing middleware adapt customisable different dimensions start time case adaptation different operating systems run time case adaptation different connection technologies 
believe application dependent information play important role adaptation behaviour middleware tradeoff scarce resource availability efficient service provision 
direction effort presentation information application gathering application dependent policies important presentation layer issue integrated mobile computing middleware 
discovery existing services key point mobile systems dynamicity system orders magnitude higher traditional distributed systems 
interesting research advances peer peer systems focused discovery issues applicable partially mobile settings 
considerations variability connection load resources different mobile scenarios 
furthermore integration quality service consideration service advertisement discovery enable optimisation service provision 
direction research concerns security 
portable devices particularly exposed security attacks easy connect wireless link 
dynamic customisation techniques worsen situation 
reflection technique accessing protected internal data structures cause security problems malicious programs break protection mechanism reflective capability disclose modify delete data 
security major issue mobile computing application proper measures need included design mobile middleware system 
summary growing success mobile computing devices networking technologies wavelan bluetooth called investigation new middleware deal mobile computing challenges sudden disconnections scarce resource availability fast changing environment years research active field middleware considerable number new systems designed support new computational paradigm 
survey model classify distributed systems traditional nomadic ad hoc ones 
highlighted similarities mainly differences 
listed set characteristics effective mobile computing middleware 
list helpful describe unsuitable aspect traditional middleware systems mobile setting principles driven new set middleware mobile computing classes middleware mobile computing reflective middleware tuplespace middleware context aware middleware data oriented identified illustrated comparatively discussed 
addressing issues related mobility systems succeed providing support requirements highlighted framework 
authors engineering uk supporting capra gian pietro picco comments earlier draft 

solutions location data mediation 
www fr 

campbell liao 
toolkit programmable support adaptive mobile 
personal communications magazine special issue adapting network client variability 
ieee computer society press august 

ansa 
advanced network systems architecture ansa 
manual architecture project management castle hill cambridge uk 

byrne champion isaacs jacobs nicol robie wilson wood 
document object model dom level specification 
recommendation www org tr rec dom level world wide web consortium oct 

arnold sullivan scheifler waldo wollrath 
jini tm specification 
addison wesley 


indoor wireless system personalized shopping 
proceedings ieee workshop mobile computing systems applications pages santa cruz california dec 
ieee computer society press 

baker 
corba distributed objects orbix 
addison wesley nov 

bennett richardson harter 
teleporting making applications mobile 
proc 
ieee workshop mobile computing systems applications pages santa cruz california dec 
ieee computer society press 

blair coulson robin papathomas 
architecture generation middleware 
proceedings middleware pages 
springer verlag sept 

bluetooth com 
bluetooth 
www bluetooth com 

bray paoli sperberg mcqueen 
extensible markup language 
recommendation www org tr rec xml world wide web consortium mar 

brown 
triggering information context 
personal technologies mar 

system 
www com htm 

hess campbell 
gaia development infrastructure active spaces 
workshop application models programming tools ubiquitous computing held conjunction comp sept 

chalmers sloman 
survey quality service mobile computing environments 
ieee communications surveys second quarter 

clark derose 
xml path language xpath 
technical report www org tr xpath world wide web consortium nov 

davies friday wade blair 
distributed systems platform mobile computing acm mobile networks applications monet special issue protocols software paradigms mobile networks 

demers petersen spreitzer terry theimer welch 
bayou architecture support data sharing mobile users 
proceedings ieee workshop mobile computing systems applications pages santa cruz california dec 

dey salber abowd 
conference assistant combining context awareness wearable computing 
proc 
rd international symposium wearable computers iswc pages san california oct 
ieee computer society press 

emmerich 
engineering distributed objects 
john wiley sons apr 

emmerich 
software engineering middleware roadmap 
software engineering nd int 
conf 
software engineering icse pages 
acm press may 


openorb 
openorb org openorb html 

fallside 
xml schema 
technical report www org tr xmlschema world wide web consortium apr 

forum 
wireless application protocol 
www 

fritsch volz 
nexus positioning data management concepts location aware applications 
proceedings nd international symposium pages nice sophia antipolis france 

gelernter 
generative communication linda 
acm transactions programming languages systems 

cunningham cahill 
supporting corba applications mobile environment alice 
th int 
conf 
mobile computing networking mobicom 
acm press august 

hall 
building client server applications 
wiley 


roman 
service provision ad hoc networks 
coordination 
springer 

held 
data wireless networks bluetooth wap wireless lans 
mcgraw hill nov 


cics guide internal structure 
wiley 

joseph tauber kaashoek 
mobile computing rover toolkit 
ieee transactions computers 

kiczales des rivieres borrow 
art metaobject protocol 
mit press 

kon rom liu mao aes 
monitoring security dynamic configuration dynamictao reflective orb 
international conference distributed systems platforms open distributed processing middleware pages new york apr 
acm ifip 

capra emmerich mascolo 
micro economic approach conflict resolution mobile computing 
march 
submitted publication 

ledoux 
opencorba reflective open broker 
reflection volume lncs pages saint malo france 
springer 

long kooper abowd 
rapid prototyping mobile context aware applications cyberguide case study 
proceedings second annual international conference mobile computing networking pages white plains ny nov 
acm press 

maler derose 
xml linking language xlink 
technical report www org tr wd xlink world wide web consortium mar 

marsden 
communication network protocols osi explained 
bratt 

mascolo capra emmerich 
xmiddle data sharing middleware mobile computing 
int 
journal personal wireless communications april 


meta level architecture support distributed objects 
proceedings reflection pages san francisco 

microsoft 
net compact framework 
msdn microsoft com device asp 


enterprise javabeans 
reilly associates mar 

chappell 
java message service 
reilly associates dec 

murphy picco 
roman 
lime middleware physical logical mobility 
proceedings st international conference distributed computing systems icdcs may 

natarajan reich 
programming visibroker developer guide visibroker java 
john wiley sons oct 

networks 
etsi hiperlan standard 
portal etsi org bran hiperlan hiperlan asp 

omg 
corba component model 
www omg org cgi bin doc orbos 

oracle technology network 
oracle application server wireless 
oracle com products content html 

oram 
peer peer harnessing power disruptive technologies 
reilly 

perkins 
ad hoc networking 
addison wesley jan 

pitt 
java rmi remote method invocation guide 
addison wesley june 

pope 
corba guide understanding common object request broker architecture 
addison wesley jan 



www com 


mqseries version administration programming examples 
ibm 

seitz 
wap session layer supporting distributed applications nomadic environments 
int 
conf middleware pages 
springer nov 

reynolds 
service machine development open longterm mobile fixed network environment 
www 

rogerson 
inside com 
microsoft press 


roman murphy picco 
software engineering mobility roadmap 
software engineering nd int 
conf 
software engineering icse pages 
acm press may 

roman kon campbell 
reflective middleware desk hand 
ieee communications surveys 

salutation consortium 
salutation 
www salutation org 

satyanarayanan 
mobile information access 
ieee personal communications feb 

satyanarayanan kistler kumar okasaki siegel steere 
coda highly available file system distributed workstation environment 
ieee transactions computers apr 

schilit adams want 
context aware computing applications 
proc 
workshop mobile computing systems applications pages santa cruz ca dec 


system support mobile distributed applications 


wireless location services 
www com 

smith 
reflection semantics procedural programming langage 
phd thesis mit jan 


mobile 
www com products mobile mobile html apr 

stevens 
unix network programming 
prentice hall 

sun microsystem java micro edition 
java sun com products 

sun microsystems jxta initiative 
www jxta org 

tai 
tree tree correction problem 
journal acm 

terry theimer petersen demers spreitzer hauser 
managing update conflicts bayou weakly connected replicated storage system 
proceedings th acm symposium operating systems principles sosp pages cooper mountain colorado aug 

core 
universally interoperable core 
www core com 

upnp forum 
universal plug play 
www upnp org 

welling badrinath 
architecture exporting environment awareness mobile computing 
ieee transactions software engineering 

wyckoff lehman ford 
spaces 
ibm systems journal 


reflective operating system concept implementation 
proceedings oopsla pages 
acm press 
