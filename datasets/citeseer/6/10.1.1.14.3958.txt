web server view transport layer mark allman nasa glenn research center bbn technologies rd ms cleveland ohio nasa gov presents observations traffic particular world wide web server course year half 
presents longitudinal look various network path properties implementation status various protocol options mechanisms 
particular considers worldwide web clients utilize tcp connections transfer web data deployment various tcp options range round trip times observed network packet sizes www transfers implications measured advertised window sizes impact larger initial congestion window sizes 
properties mechanisms implications explored 
additional goal provide information help researchers better simulate emulate realistic networks 
presents observations traffic particular world wide web www server course months 
goals 
attempt evaluate performance impact deployment status features network stacks internet today 
second attempt determine protocol extensions features useful observed traffic 
hope data useful researchers designing simulations internet traffic answering key questions values key parameters realistic value tcp advertised window web clients 
world wide web traffic uses hypertext transfer protocol application protocol transfer data web servers user browsers 
uses transmission control protocol tcp pos transport protocol ensure reliable delivery extent possible sp 
web server observed nasa glenn research center 
server provides unofficial web pages internet engineering task force ietf working groups tcp impl 
pages provide mailing list archives meeting minutes draft documents community 
web server researchers personal web pages small pages 
study mainly focused characteristics client networking stacks network paths clients web server 
results biased feature server chose underlying operating appears acm computer communication review october 
system network server located 
alternative measurement methodologies follows 
ffl monitored www traffic traversing link closer center network 
produced traces large number network paths endpoints 
tracing network connections middle network may analysis difficult due vantage point trace instance determining initial congestion window difficult 
addition variables play traces direct meaningful comparisons traffic difficult 
sort measurement study produces useful results sizes web transfers 
ffl conducted active measurement study tracing web connections lab various www servers 
study shares problems study 
instance transfers share portion network path web client 
type study quite useful certain measurements wide range web servers checking web server conformance standard ka 
ffl mesh hosts nimi pa active measurements 
mitigates problems measurements single client machine single server 
clear mesh hosts captures true connectivity wide range internet web clients 
mesh enable measurement range client network stacks majority traffic internet 
may able adapt approaches needs feel strengths approach ample provided rich variety data web clients necessarily available methodologies 
approach chose benefits 
instance able tweak configuration web server measure effects larger initial congestion window outlined section 
approach allows measurement properties large number real clients tcp options supported stacks 
approach flaw believe outlined af perfect way assess internet behavior believe survey provide valuable insight performance web seen user perspective traffic studied comes web browsing happens wild 
study attempted measure properties subject large biases due observations single web server note biases believe data 
item take data number web servers gain richer understanding attributes client behavior 
rest organized follows 
section outlines data collection techniques discusses preliminary analysis data 
section outlines measurements web clients utilize tcp connections transfer web objects 
section discusses deployment status various tcp options data 
section reports round trip times data 
section discusses distribution packet sizes datasets 
section reports observations advertised window web clients possible impacts window sizes performance 
section gives analysis web server larger initial congestion windows 
section gives area 
preliminary analysis data collection data collected november march 
large majority data collection period server ran netbsd operating system 
february operating system upgraded netbsd 
roughly month data slightly different network stack 
believe influences results tcp implementation drastically changed versions 
web server entire data collection period apache 
main sources information data 
set data denoted consists apache generated logs request server 
second source data packet level traces web traffic server denoted packet level traces taken tcpdump web server 
captured bytes packets tcpdump reporting packets roughly dropped kernel consider acceptably low amount kernel packet loss attempt correlate kernel packet losses specific connections trace file effects kernel drops negligible effect results 
investigation examining traffic pattern web server removing data analysis various reasons 
traffic patterns unique particular web server observed general claims patterns observed 
section provided explanation datasets background analysis outlined remaining sections 
analysis section done terms web server hits 
number hits straightforward obtain dataset 
capturing full packet contents doing bit analysis directly get number hits dataset 
dataset report number tcp connections traced 
table shows number server hits connections reported data set 
purposes interested web hits traverse wide area internet 
trace files consisting packets failed report number kernel drops probably due tcpdump shutdown improperly 
likelihood kernel drops traces believe presents significant problem data analysis 
category total hits local hits wan hits zero length valid hits table web server hits data analysis conducted remove hits received server hosts network 
shown table number local hits relatively small 
note number local hits greater dataset compared dataset due lenient filter tcpdump 
filter captured traffic port 
roughly random web transfers occurred web server network web server question captured 
additionally remove connections transfer byte data direction 
connections indicate sort failure client machine server host network endpoints 
important note connections exist analyze 
indicated remainder includes analysis valid wide area hits 
note valid hits came distinct ip addresses 
expect indicates hits cross wide variety network paths connections share portion path web server 
sections analysis significantly altered single host small group hosts involved large portion connections examine 
created second dataset dataset removing connection host involved connections dataset 
denote second dataset removed connections involving ip addresses obtain dataset consisting tcp connections 
slightly modified version ost analyze dataset 
changes output easier analyze tool report particular piece information standard version program report 
note additions analysis contained remainder 
output data set analyzed short perl bourne shell scripts 
traffic patterns illustrates server activity function time 
number hits reported dataset greater number tcp connections dataset 
explored greater depth section 
shown datasets nearly identical number bytes transmitted server 
plots show increase traffic observation period 
due periodic addition content server 
server transfer sizes dictated content available particular server observed 
instance median response size observed server roughly thirds size median response size reported mah mean response size dataset twice value reported mah data 
illustrates response sizes different server observed 
provide context results sections 
shows mean median transfer sizes time 
illustrated mean transfer size order magnitude greater median size 
dec may oct feb hits month month server log packet trace server hits month 
dec may oct feb bytes sent server month month server log packet trace bytes sent web server month 
web server activity time 
dec may oct feb transfer sizes bytes month month mean median web transfer sizes time 
cdf transfer size bytes distribution transfer sizes march 
median transfer size order packets 
shows distribution transfer sizes month dataset 
shown transfer sizes mean transfer size reported previous 
note nearly transfers bytes long 
transfers consist headers short html pages indicate errors file forbidden 
delve reasons spikes dips plots expect phenomena property particular server content general network behavior 
studies consider diverse set web server data verify assumption 
connection usage utilizes tcp connections different ways 
browsers parallel tcp connections transfer various objects web page html code graphics 
method browser opens connections time requests different objects connection 
method supported protocol client server persistent tcp connections mog 
method tcp connection transfer multiple web objects 
section attempt quantify degree parallel persistent connections utilized transfer data web server 
web server supports persistent connections pipelining 
necessarily mean web clients request features 
connections performance congestion control resource utilization implications 
instance persistent connections pipelining option shown improve web transfer speeds satellite channels 
parallel connections negative impact congestion control bps ff 
specifically single loss causes tcp connection reduce cwnd half 
single loss group connections causes aggregate cwnd reduced yielding aggressive congestion control response 
busy web servers manage system resources effectively 
instance web server may want keep idle persistent connection connection requires memory may slow control block lookups 
dec may oct feb percentage difference month month percent difference reported hits number tcp connections dataset 
shows percent difference number hits reported dataset number tcp connections dataset 
indicates persistent connections transfer multiple web objects tcp connection 
noisy indicate persistent connections reducing time 
additional data diverse set web servers needed stronger 
discuss parallel connections 
define degree parallelism dop maximum number tcp connections open time web server particular client course observation period 
server communicated clients ip addresses observation period 
clients single connection server 
removed analysis section chance client parallel tcp connections 
fraction transfers number transfers client considered dop dop dop dop parallel transfers 
shows parallel tcp connections function number transfers server particular client considered 
words far right hand bar chart includes data clients took part tcp connections dataset 
axis shows percentage clients particular dop 
thing note nearly connections dop fewer tcp connections observed dops high connections 
illustrated dop increases number transfers client increases 
may indicate clients making small number connections server connections may wide intervals parallel connections 
clients transfer objects likelihood multiple parallel connections increases note increase percentage connections dop connection 
see approximately thirds web clients parallel tcp connections download web pages popular dop connections 
quantifying persistent parallel connections difficult datasets 
analysis tentative questions answered conclusively data 
currently modifying web server logging routines include information analysis straightforward accurate 
particular addition logs unique connection identifier cid logged object request 
cid allow correlation exactly connections persistent utilized parallel 
tcp options tcp evolved options added protocol perform better certain environments 
goal analysis section assess deployment status various tcp options 
serves purposes 
gives network engineers idea features may able expect hosts internet 
addition analysis sheds light options researchers may want simulate investigating tcp 
note discussion tcp maximum segment size mss option deferred section 
features supported particular connection dataset largely determined operating system user running 
mah provides list features supported current operating systems 
data may indicate proportion hosts various operating systems date user os version kept 
interesting delve topic 
section analyze tcp options looking percentage connections bytes transmitted server clients support option 
number bytes transmitted option may somewhat biased size content provided web server 
likewise percentage connections may biased number hits required load web pages server different pages different servers 
addition large number connections come relatively small number clients dataset biased 
measure percentage hosts option biased particular web server 
results biased web server logs indicate large number parallel tcp connection usually caused client harvesting large number mail messages web archives various mailing lists 
sample clients dataset representative 
dataset large believe case 
high performance options focus attention options added tcp rfc jbb high performance network paths large amounts bandwidth long delays 
rfc added window scaling timestamp options 
window scaling option way handshake starts tcp connection 
host announces scale factor 
sending host right shifts desired advertised window scale factor transmitting advertised window 
receiving host left shift advertised window incoming packets scale factor advertised window size 
allows tcp connections utilize advertised window kb provided original tcp specification pos required operation long high bandwidth networks jbb 
dec may oct feb fraction option month month bytes connections hosts window scaling option time 
gain idea deployment window scaling option analyzed dataset determine prevalence option 
shows window scaling option measurement period 
shown plot percentage hosts supporting window scaling option fairly stable measurement period 
percentage connections window scaling varies widely survey 
months survey number connections supporting window scaling rose sharply roughly 
see similar percentages number hosts supporting window scaling plot indicates relatively small number hosts upgraded support window scaling responsible disproportionate number connections 
verified analyzing trace files noting majority connections window scaling came clients ip addresses started window scaling 
number bytes transmitted server window scaling option varied somewhat measurement period 
analyzed scale factor advertised web clients 
just clients advertised scale factor zero 
indicates willing scale peer server advertised window scaling advertised window 
nearly remaining hosts advertised scale factor observed scale factors high hosts 
note implications advertised window sizes dataset explored section 
rfc introduces timestamp option conjunction window scaling 
tcp window scaling option cycle sequence space provided tcp faster advertised window limited kb tcp needs additional protection passing old data application 
timestamp option calls sender insert timestamp packet transmitted 
addition timestamp received remote host echoed 
timestamp option purposes 
timestamps conjunction window scaling protect wrapped sequences paws algorithm 
second timestamps obtain better frequent rtt measurements evidence timestamps particularly useful ap 
dec may oct feb fraction option month month bytes connections hosts timestamp option time 
shows prevalence timestamp option web clients 
history timestamp option similar window scale option 
percentage connections timestamps varies widely quite large dataset 
hosts majority connections server started support window scaling months discussed started timestamps 
explains increase connections supporting timestamp option dataset 
window scaling option appears percentage hosts timestamps roughly stable slowly increasing observation period 
note total web clients observed survey timestamps window scaling timestamps window scaling 
selective acknowledgments focus selective acknowledgment sack option defined rfc mmfr 
sacks improve tcp original method informing sender segments arrived receiver 
defined pos tcp uses cumulative acknowledgment informs sender inorder byte data arrived receiver 
sack option receiver inform sender arbitrary segments received regardless order arrived 
allows sender tcp employ advanced loss recovery congestion control algorithms ff 
dec may oct feb fraction option month month bytes connections hosts sack option time 
shows prevalence sack option dataset 
note web server support sack 
percentages reported number connections hosts bytes selective acknowledgments server supported 
words number clients advertised sack permitted way handshake 
shown number clients supporting sack steadily growing roughly nearly march 
number connections bytes utilizing sack lagging percentage hosts supporting option 
indicates number web crawlers hit server times month support sack option 
believe sack deployment shown plot consistent recommendation af sack part tcp investigations sack clearly steadily deployed internet 
round trip times section focuses examining distribution round trip times rtt server clients 
produce average median rtt connection dataset 
tool takes rtt sample non retransmitted segment corresponding ack 
purpose investigating distribution rtts twofold 
data provides researchers realistic rtts build simulations 
suggested pf af range parameters simulating networks 
data section provides guidance reasonable range rtts look 
second goal assess degree saving rtts transfers important rtt negligible detected user need spend time trying squeeze possible extraneous rtt transport application layer protocols 
instances bias may introduced measurements 
transfers server remote clients share portion network path 
portion path congested imposes large delay measurements biased location server 
note observed rtt samples ms dataset 
dataset minimum rtt appears approximately ms indicates location server generally imposes modest minimum rtt samples obtained 
note may true server data required claim 
distribution rtts concentrated minimum rtt dataset believe shared portion network path seriously biasing measurements 
second form bias karn algorithm kp take rtt measurements 
particular segment needlessly retransmitted observe rtt associated original data packet corresponding acknowledgment 
ap shows standard bsd retransmission timeout rto mechanism rarely causes needless retransmissions 
bps shows reordering necessarily rare occurrence internet 
reordering cause tcp retransmit segments prematurely fast retransmit algorithm jac 
believe event necessarily triggers change rtt misses ignoring ambiguous rtt sample 
cdf rtt ms connections sanitized distribution average rtts 
shows distribution average rtts connection datasets 
note rtt reported composed time required data packet corresponding ack traverse network path processing time receiver 
instance client delayed acks bra aps may refrain transmitting ack ms inflate rtt 
delayed ack mechanism skew average rtt reported 
implementations ms heartbeat timer trigger delayed acks 
causes ms delay average transmitting timer acks 
expect effect small transfer size increases get larger number rtt samples 
transfers short delayed ack timer may skewing data bit quantifying skew difficult dataset 
distributions shown basic shape note connections dataset longer rtts considering connections indicates connections removed yield dataset skewing distribution smaller rtts 
host names ip addresses included dataset indicate clients web crawlers surveying content server search engines 
expect clients enjoy connectivity internet explaining generally lower rtts rest clients 
indicated approximately rtts ms gives nice range rtt values researchers constructing internetworking simulations 
minimum rtt ms comparison minimum median rtts connection observes 
provides comparison minimum rtt observed median rtt connection 
axis minimum rtt milliseconds axis median rtt connection multiple minimum rtt 
data dataset shown plot 
highlight behavior vast majority connections axis limited second minimum rtts plot 
dataset shows median rtts high times observed minimum rtt limited axis factor better illustrate behavior vast majority connections dataset 
median rtt factor minimum rtt slightly connections considering connections dataset 
plot illustrates shorter rtts variability connections quite large 
connection median rtt times minimum rtt 
explanation decrease variability rtt grows network link high delay satellite channel effect variability rest network path 
investigated additional data 
note data minimum rtt may come short segment syn 
slow links transmission time short packet significantly shorter full sized data segment explain variability shown 
tcp implementations aware take packet size account measuring rtts 
believe presents accurate view network perspective tcp data sender 
note shown section majority transfers web server short 
indicates rtts change significantly short time scales network paths 
possible area assess stationarity rtts network done routes loss rate throughput 
turn attention second goal section 
rfc jac suggests ms amount time users perceive regards responses networks 
note shows nearly connections dataset experience average rtt delays ms nearly rtts observed exceed ms indicates paying careful attention making transport application protocols fewer rtts possible important 
instance proposals limited transmit allows tcp transmit new data segments duplicate acks save retransmission timeouts abf important changes 
indicated data saving rtts may represent significant improvement users 
additional note rtt distribution slightly connections dataset observed rtt seconds 
furthermore slightly connections averaged rtts seconds 
indicates tcp minimum initial retransmission timeout rto seconds specified bra pa continues conservative choice 
packet sizes analyze packet sizes server transfering data clients dataset 
analysis draw sections 
addition understanding packet sizes real networks enable researchers simulate wisely 
cdf bytes mss requested max segment size transfer size distribution packet sizes 
shows distributions maximum segment size mss requested clients syn exchange largest packet size connection transfer size dataset 
shown nearly connections advertised mss roughly bytes syn segment 
roughly connections advertised lower mss bytes 
approximately transfers advertised maximum segment sizes bytes 
connections advertised mss bytes connections single client host 
snmp query hop router clients advertising mss bytes 
router answered query supported mtu bytes interfaces mtu bytes rest 
explain large advertised mss 
suggests bug tcp stack causing large mss advertised network changed time connection snmp query 
shows expected maximum packet size total transfer size track quite transfer size bytes 
transfer sizes exceed roughly bytes transfer size longer tracks maximum packet size 
see roughly transfers maximum packet size approximately bytes expected mss advertisements 
remaining transfers maximum segment size roughly bytes predicted mss options observed note transfers packet sizes greater bytes server connected mbps ethernet byte mtu send larger packets 
conclude sample byte packets vast majority time transfer size large support 
stronger result datasets additional servers believe researchers fairly safe byte packets simulations 
advertised windows section focuses advertised window size web clients 
advertised window represents data receiver upper bound amount outstanding data data transmitted acknowledgment arrived 
advertised window direct impact performance data transfer outlined smm af 
addition advertised window congestion window cwnd sender side state variable represents actual amount outstanding data sender permitted inject network 
value cwnd limited advertised window 
tcp uses slow start algorithm jac aps increase value cwnd transfer 
algorithm starts setting cwnd segment sending segment small number segments see section waiting corresponding acknowledgment ack 
ack received slow start cwnd increased segment 
algorithm ends congestion detected inferred observing packet drops explicit congestion notification ecn flo rf cwnd reaches advertised window 
dec may oct feb advertised window bytes month month mean median minimum maximum advertised windows web clients time 
shows advertised window sizes dataset time 
advertised windows represent maximum advertised window connection reported 
shown mean median advertised window size remained approximately course observation 
median transfer size bytes packets byte segments suggested data section 
average advertised window roughly kb approximately packets 
mean advertised window jumps noticeably january february 
spikes caused connections large advertised window shown maximum advertised window line 
connections removed analysis months question longer distinguishable months study terms average advertised window 
note analysis dataset yields nearly identical results 
tcp uses fast retransmit algorithm quickly detect packet loss aps jac 
tcp receivers send duplicate acknowledgments response segments arriving order 
tcp senders receipt duplicate acks indication segment lost 
segment retransmitted cwnd halved drop assumed indicate network congestion 
cwnd segments prevents tcp fast retransmit algorithm triggered 
instance cwnd segments segment dropped network sender receive duplicate acks assuming ack loss wait retransmission timer expire resend dropped packet 
morris mor extends argument 
order stay regime tcp frequently uses rto recover loss minimum cwnd segments 
order segments network cwnd needs able grow segments congestion detected cwnd halved cwnd segments 
data collected advertised window prevent cwnd reaching segments majority cases 
argues default advertised windows increased 
increasing advertised window size researchers suggested tcp send new segments reception duplicate acks bps lk abf 
trigger additional duplicate acks appropriate fast retransmit invoked 
algorithm aid short connections new data transmit response duplicate acks 
ecn flo rf provides possible mitigation problem 
dropping segments network simply mark experiencing congestion 
allow connection quickly complete requiring costly retransmission timeout 
possibility tcp detect duplicate ack arrived ii data send iii number outstanding segments duplicate acks expected 
case tcp trigger fast retransmit smaller number duplicate acks 
semke smm argues automatic socket buffer tuning algorithm notion network dictate performance tcp connection limited arbitrary limit placed transfer endpoints advertised window 
note advertised window arbitrary believe little current network host conditions 
noted advertised window limit connection performance 
maximum throughput tcp obtain equation pos throughput advertised window size rtt round trip time sender receiver 
rtt indicated equation small available bandwidth connection able utilize available resources network 
automatic buffer tuning smm effectively removes advertised window limitation cases host needs limit buffer size due memory constraints 
assuming congestion indications tcp required send delta bytes data open fill congestion window equal advertised window bytes 
connections congestion window reaches advertised window limited systems connection capacity network 
interested assessing happens 
transfers dataset long advertised window factor 
caused content web server provides 
note shows typical web transfers kb small fill utilize median advertised window sizes 
connections dataset failed send data limited advertised window 
remaining connections connections nearly limited advertised window size 
indicates cases tcp able obtain better performance advertised window size hindered throughput obtained 
believe result provides evidence default advertised window sizes increased automatic buffer tuning smm employed 
related bps reports connections busy web server limited client advertised window size 
sample total number connections limited advertised window 
looking total percentage connections regard transfer size distort results 
larger initial congestion window current tcp congestion control specification aps allows tcp implementations initial congestion window segments 
cwnd increased initial value slow start algorithm 
rfc afp experimental document ietf proposes allowing tcp initial cwnd values segments depending segment size 
specifically afp proposes equation set initial cwnd size 
cwnd min delta mss max delta mss bytes netbsd implements larger initial congestion windows equation option enabled system administrator experimentation 
enabled option web server investigate impact larger initial cwnd realistic internet traffic 
hope provides input ietf community proposal initial cwnd segments moves standards track 
netbsd keeps cwnd terms bytes segments 
distinction important spirit equation places upper bound number segments initial burst data sent network netbsd implementation necessarily 
example data quite occurs mss bytes 
equation yield initial cwnd bytes full sized segments server uses write system call write chunks consisting bytes 
yields segments initial cwnd segments 
third segments bytes second fourth bytes 
writing large chunk data initially server causes initial burst data network segments allowed bytes allowed equation 
addition netbsd contains known tcp bug ack syn ack way handshake causes cwnd incremented connection slow start pad 
allows initial congestion windows segment allowed equation 
dataset size initial value cwnd bytes equal value predicted equation plus mss number segments ranged 
assessing performance impact larger initial cwnd data difficult 
connections opportunity larger initial cwnd data transmitted particular connection 
connections small initial cwnd values transferred small amount data 
difficult comparison connections larger initial cwnd transfered data 
currently second set data enables larger initial cwnd option transfers 
allow easily compare performance connections various initial cwnd values studies 
initial cwnd loss segments cwnd initial cwnd table initial cwnd sizes corresponding loss rates 
analyze amount additional loss larger initial burst data creates burst traffic 
table shows percentage connections dataset initial cwnd size 
percentage percentage connections dataset second value percentage dataset removing heaviest users web server detailed previous sections 
column table shows percentage connections initial cwnd value retransmitted segments initial window data percentages 
row table reporting initial cwnd zero indicates percentage connections syn lost 
distribution initial cwnd values determined segment sizes discussed section amount data sent particular tcp connection 
shown table observed initial cwnd sizes segments due implementation issues discussed 
table shows connections initial window segment 
agrees transfer size distribution shown roughly transfers bytes segment cases 
table shows initial cwnd values segments suggested afp slightly increases percentage connections experience loss window data transmitted compared segment initial cwnd 
consistent previous studies aho 
table shows segment initial window increase chance loss initial burst data segments 
indication segment initial windows safe general internet 
initial cwnd sizes segments increase initial loss rate compared standard initial window size 
indicates initial cwnd sizes may note required modifications report number retransmits initial window data 
inappropriate shared networks 
cdf initial congestion window bytes distribution initial cwnd terms bytes 
shows distribution value initial cwnd terms bytes 
expected pronounced plateaus plot representing initial cwnd obtained popular segment sizes equation 
discussed problems expectation 
sizes transfers dictated initial cwnd utilized 
second web server write system call cause short segments transmitted influences results 
say certainty apache writing small chunks transfer common observed single server apache popular web server 
recommend application developers send larger chunks data tcp writing data way causes tcp send small segments data immediately available 
especially important write transfer bytes possible handle larger initial congestion windows 
bare minimum roughly bytes cover initial congestion window allowed rfc popular byte segment size 
key results recommendations analysis performed 
ffl sack option steadily deployed web client tcp stacks 
researchers conducting tcp simulations include sack tcps suggested af 
ffl data indicates web client advertised window sizes currently small general 
small advertised windows limit performance roughly transfers long fully utilize advertised window 
addition small advertised windows may hinder loss recovery 
mitigated increasing advertised window size improving tcp loss recovery algorithms outlined section abf 
ffl larger initial congestion windows proposed afp drastically increase number tcp connections experience loss burst data indicating larger initial values cwnd appropriate network paths 
ffl approximately average rtts observed ms giving researchers nice range rtts simulations 
ffl www clients persistent connections declining parallel tcp connections transfer web objects remained fairly stable 
data useful clarifying points 
addition suggested items follows 
ffl collecting data multiple web servers analysis provide stronger results allow general 
ffl survey web servers information useful 
ffl instrumenting web servers better study client parallel persistent connections useful 
acknowledgments shawn ostermann provided needed assistance nice analysis tool 
ethan sally floyd joseph vern paxson provided detailed feedback discussions early draft 
ccr reviewers provided number excellent suggestions ways improve 

abf mark allman hari balakrishnan sally floyd 
enhancing tcp loss recovery limited transmit august 
internet draft draft limited xmit txt progress 
af mark allman aaron falk 
effective evaluation tcp 
computer communication review october 
afp mark allman sally floyd craig partridge 
increasing tcp initial window september 
rfc 
aho mark allman chris hayes shawn ostermann 
evaluation tcp larger initial windows 
computer communication review july 
mark allman 
fixing bsd tcp bugs 
technical report cr nasa lewis research center october 
ap mark allman vern paxson 
estimating endto network path properties 
acm sigcomm september 
aps mark allman vern paxson richard stevens 
tcp congestion control april 
rfc 
bps hari balakrishnan venkata padmanabhan srinivasan seshan mark stemm randy katz 
tcp behavior busy internet server analysis improvements 
ieee infocom march 
bps jon bennett craig partridge nicholas 
packet reordering pathological network behavior 
ieee acm transactions networking december 
bra robert braden 
requirements internet hosts communication layers october 
rfc 
case 
simple network management protocol august 
rfc 
ff kevin fall sally floyd 
simulation comparisons tahoe reno sack tcp 
computer communications review july 
ff sally floyd kevin fall 
promoting congestion control internet 
ieee networking august 
fielding jim gettys jeffrey mogul frystyk tim berners lee 
hypertext transfer protocol january 
rfc 
flo sally floyd 
tcp explicit congestion notification 
computer communications review october 
jac van jacobson 
congestion avoidance control 
acm sigcomm 
jac van jacobson 
compressing tcp ip headers low speed serial links february 
rfc 
jbb van jacobson robert braden david borman 
tcp extensions high performance may 
rfc 
van jacobson craig leres steven mccanne 
tcpdump june 
available anonymous ftp ftp ee lbl gov ka balachander krishnamurthy martin arlitt 
protocol compliance web 
technical report tm labs august 
hans kruse mark allman jim tran 
experimentation modeling satellite channels 
international journal satellite communication 
appear 
kp phil karn craig partridge 
improving round trip time estimates reliable transport protocols 
acm sigcomm pages august 
lk dong lin kung 
tcp fast recovery strategies analysis improvements 
proceedings infocom march 
mah bruce mah 
empirical model network traffic 
proceedings infocom april 
mah jamshid mahdavi 
enabling high performance data transfers hosts 
technical report pittsburgh supercomputer center june 
www psc edu networking perf tune html 
mmfr matt mathis jamshid mahdavi sally floyd allyn romanow 
tcp selective options october 
rfc 
mog jeffrey mogul 
case persistent connection 
acm sigcomm pages 
mor robert morris 
scalable tcp congestion control 
ieee infocom march 
ost shawn ostermann 

available cs edu 
pa vern paxson mark allman 
computing tcp retransmission timer april 
internet draft draft paxson tcp rto txt progress 
pad vern paxson mark allman scott dawson william fenner jim ian kevin jeff semke volz 
known tcp implementation problems march 
rfc 
pf vern paxson sally floyd 
don know simulate internet 
proceedings winter simulation conference december 
vern paxson jamshid mahdavi andrew adams matt mathis 
architecture large scale internet measurement 
ieee communications 
pos jon postel 
transmission control protocol september 
rfc 
rf ramakrishnan sally floyd 
proposal add explicit congestion notification ecn ip january 
rfc 
smm jeff semke jamshid mahdavi matt mathis 
automatic tcp buffer tuning 
acm sigcomm september 
sp jonathan stone craig partridge 
crc tcp checksum disagree 
acm sigcomm september 
kevin thompson gregory miller rick wilder 
wide area internet traffic patterns characteristics 
ieee network november december 
yin zhang vern paxson scott shenker 
stationarity internet path properties routing loss throughput 
technical report aciri may 

