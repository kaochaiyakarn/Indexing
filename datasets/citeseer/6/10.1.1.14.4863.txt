plug play composition features feature interactions statechart diagrams christian prehofer euro labs 
munich germany prehofer euro com 
presents new approach modular design highly entangled software components statechart diagrams 
structure components features represent reusable self contained services 
modeled individually statechart diagrams 
composition components features need consider interactions features 
feature interactions known telecommunications area typically describe special cases cooperations occur features combined 
describe interactions graphically partial statecharts 
main novelty full component descriptions created automatically plug play fashion combining statecharts required features interactions 
furthermore develop different classes statecharts show interactions case case basis 
composition semantic refinement concepts statecharts preserve original behavior 
keywords graphic description techniques plug play composition feature interaction statechart diagrams semantic refinement uml talking piece software speak feature software 
instance collecting requirements features software system common terminology 
propose graphic description method feature centric software development supports composition components features modular way 
behavior features modeled statechart diagrams 
features independent interact ways 
main contribution describe features interactions graphically model composition stepwise refinement relations statecharts 
key problem features cooperate interact unforeseen ways 
larger systems features interactions lead highly entangled code difficult maintain 
problem feature interactions established telecommunications area 
area focuses detecting interaction focus software design methods consider interactions 
problem handling interactions cases violates modularity 
fix special case feature occurs particular feature 
code implementing features overloaded obscures core functionality feature dependencies 
development method employ graphic design features statechart diagrams state machines 
novel point model features interactions partial statecharts transitions combined automatically needed 
approach allows cross cut large statechart diagrams smaller features interactions 
semantic refinement concepts statecharts rules create component models combining statecharts required features 
graphic refinement rules ensure feature behavior change composition 
design method aims graphic plug play feature composition essential application scenarios different versions software component needed having different alternative features 
applications monolithic software unsuitable features needed customer delivered 
instance downloading software limited mobile device download time storage space mobile device kept minimal 
applications entangled features added updated frequently live cycle software component 
example consider email server analyzed common features discovered feature interactions :10.1.1.156.4510
instance encryption auto responder interact follows 
auto responder answers emails automatically quoting subject field incoming email 
encrypted email decrypted processed auto responder email subject email returned 
leaks originally encrypted subject outgoing email sent plain 
combining seemingly independent features consider special cases 
sequel email example 
main features see encryption decryption encrypted mails :10.1.1.156.4510
filtering particular emails virus protection 
auto reply feature automatic answers incoming emails 
section background statecharts 
modular construction statecharts modeling behavior features interactions combination discussed section section 
statechart diagrams semantic refinement graphic description method developing software components uml statechart diagrams 
model software component statecharts aim specifying behavior functions 
label transitions functions trigger transitions 
external function call triggers transition labeled function depending current state statechart 
note finite number states statechart usually represents abstraction internal states component 
uml notation labeling transitions called function condition action transition initiated external event called function 
may condition may action initiates 
action describes behavior triggered function 
note labels may empty 
case trigger function omitted internal transition external event called spontaneous transition 
example statechart describing basic functionality email system feature called basicemail 
states called waiting email called 
initial state waiting 
transition labeled incoming triggered email arrived issues operation get retrieve email 
transition labeled deliver actual processing new email triggers store function save email 
simple model email system handles email time 
note indicate functions parentheses mean parameter functions implementation 
introduce parallel statechart diagrams hierarchical diagrams uml notation 
email arrived basicemail feature deliver store incoming get waiting semantics semantic model employs external black box view component 
function calls outside trigger transitions 
input output considered internal states 
possible run specified trace externally called functions resulting actions statechart 
instance consider example traces statechart incoming deliver transitions triggered external function calls 
input sequence incoming deliver incoming deliver incoming deliver ouput sequence get store get store get store adopt loose chaos semantics semantics component set possible traces 
set traces includes possible trace transitions specified statechart 
addition unspecified function call function call transition defined current state leaves statechart chaos state behavior permitted 
instance output input deliver waiting state defined statechart permitted 
semantic model specify happens case deliver function called waiting state 
statechart fully specify single implementation permits possible implementations fulfill specified input output relation 
formally describe semantics set deterministic monotonic functions compatible statechart 
function represents possible deterministic implementation 
implementations possible set functions 
set possible implementations reduced view refinement 
note statechart model permits non deterministic choice transitions possible state just special case loose semantics 
detailed treatment semantic background refer 
refinement notion semantic refinement statecharts aims specifying component detail reduce specification 
speak semantic refinement statechart refined fewer possible traces 
loose semantics statechart set functions formally expressed reducing set functions 
way suitable specifications enables step wise refinement adding specific behavior 
details semantic refinement relations automata models similar statecharts refer 
main benefit graphic refinement rules ease 
graphic refinement rules syntactic input output events 
cases conditions transitions considered 
note rules cover properties possible input output parameter internal state variables 
include semantic models case deeper reasoning required 
practice means refinement shallow just implies compatibility respect input output messages 
graphic operations statecharts refinements respect semantics 
elementary statecharts refinement operations proven semantically correct add new behavior unspecified add new state add new transition state exist state 
transition specified chaotic behavior set traces decreased 
eliminate alternative transitions alternative transitions exit 
reduces nondeterminism specifies behavior precisely 
note adding condition transition handled way removes possible transitions run time 
add internal compatible behavior adds new internal behavior change original output 
case new behavior additional behavior old behavior remains unchanged 
abstraction original behavior preserved 
eliminating transitions exceptional cases 
case refinement holds exceptional case occur 
called conditional refinement 
note adding conditions transitions viewed removing transitions 
sections refinement rules described 
modeling features interactions statecharts section describe graphic techniques model behavior features 
feature class object oriented design offers interface functions encapsulates internal state 
describe features interactions partial statecharts describe high level view behavior 
novel point describe features interactions modularly fragments statecharts 
concrete feature combination show combine automatically statechart combined functionality 
combination extensive hierarchical statecharts parallel composition statecharts 
modeling features statecharts distinguish kinds base features complete statechart including initial state final states 
transition features refine transition locally add externally visible input transitions statechart 
features typically represent service aspect added feature combination base feature 
state extending features add global states externally visible transitions 
features extend states features extend externally visible interface 
consider classes features order 
base features base features self contained features 
example kind statechart describing basic functionality email system feature called basicemail 
base features typically form basis feature implementation 
contrast independently 
combination base features parallel statecharts shown 
transition features transition features provide services modelled internal transitions persistent global state 
features typically model auxiliary services change global control flow 
add externally visible input transitions statechart 
transition feature may produce additional output trigger transitions parallel statecharts shown 
transition features examples forwarding reply features offers function name 
show internal states forward reply functions 
feature forwarding includes function call forward detailed 
reply feature similar 
note small circles denote start states transitions determined composing features 
feature forwarding forward forward active forward forward forward inactive feature reply reply reply active reply reply inactive internal view forwarding reply features reply transition features internal states 
examples email application encryption decryption features consist single transition 
actual implementation features may persistent state modeled 
encrypt decrypt encryption decryption features general transition feature modeled number transition functions specify detailing start states 
furthermore may internal statechart model internal behavior feature 
refinement assumption local statechart consists internal spontaneous transitions 
schematic example shown 
start state feature transition state internal transitions state local automaton partial statechart transition oriented features 
state global state extending features main category features state extending features extend set states add global transitions 
way extend external interface 
instance consider feature new state called 
partial statechart initial final states states reached transitions states features 
specified separately feature interactions 
note statechart extends external interface new functions 
feature ance definition partial statecharts statechart special transitions entering leaving statechart 
start states respectively 
indicates statechart shall isolation shall combined 
introduce named start states feature combination case require rename states cause complications features interactions refer state 
combination start transitions mapped specific states 
permit start function may triggered states exit function 
compared transition oriented features new state maintenance global functions transition visible externally 
show section composition features consists steps 
merge partial statechart statechart 
addition adaptations may needed 
resolving feature interactions interaction handling adapts feature context order resolve feature interactions 
adaptor defines refinement composed statechart includes feature possibly feature statecharts techniques refine feature context new feature transitions feature may refined 
model restricting transition inserting local statechart leading hierarchical statecharts 
kind refinement specify start states transition shown 
new transitions states states triggered function calls added state oriented 
refer kind refinement 
goal denote refinement just describing necessary refinement steps isolation context features 
addition important describe adaptor generically combination features including feature essential abstraction permits compose features flexible way 
interaction transition oriented features section describe features refine transitions local statecharts 
precisely seen hierarchical statechart 
focus adapting base features transition oriented features 
instance shows deliver function adapted decryption feature 
note specify refinement individual transitions functions labeling transitions 
transitions label refined way 
example function deliver expanded statechart transitions newly added state decrypt function added feature 
way refine deliver function execute decrypt operation original deliver operation 
note basicemail deliver special internal operation externally triggered 
denote adding feature name italics 
denotes internal operation triggered deliver implicitly triggered 
externally viewed spontaneous transition 
important refinement steps refine transition 
simplifies technical treatment refine local statecharts transitions 
basicemail decryption deliver decrypt basicemail 
plain mail deliver adapting basicemail decryption similar way adapt basicemail forwarding shown 
function forward defined shown detail 
basicemail forwarding deliver forward fwd mail adapting basicemail forwarding consider case adaptor transition oriented features 
interaction automatic reply decryption typical special case modeled adding restricting transitions 
interaction handled similar shown 
furthermore restrict transitions adding conditions 
see reply occur action transition refine statechart 
reply decryption reply mail reply basicemail 
deliver adapting method reply feature reply decryption feature general case adaptor refine transition adapted feature extending transition local statechart internal states transitions 
permit externally triggered functions refinement may affect external semantic behavior 
externally visible transitions local statecharts syntactically possible follow notion semantic refinement 
require different complex notion refinement 
see detailed treatment refinement 
function refined operation associated internal transition 
express general case schematic adaptor shown 
adapt transitions labeled function way adaptor 
case transitions different states triggered function may different refinements 
inner black box statechart functions feature functions features allowed feature adaptors generic added feature combination includes adapted feature 
furthermore internal spontaneous transitions permitted external input behavior shall change 
note notation denote function feature assumes 


schematic adaptor transition triggered feature interaction state extending features interaction case defines merging statecharts adding transitions states features 
need map anonymous start states state oriented feature states feature 
furthermore transitions may refined conditions actions 
consider possible interactions classification features 
typical interaction base feature illustrated example adding basicemail feature feature 
show relevant states features indicate feature gray area 
interaction defines feature reached waiting state basicemail feature 
view interaction refinement feature transitions feature refined specific start states 
basicemail ance waiting interaction basicemail feature example shown feature called state functions error resume 
email arrived basicemail error email error interaction error basicemail features resume waiting general case adaptation base state extending feature means add new transitions states states labeled functions instance example direction adaptation possible 
alternative adapting basicemail allow add transitions labeled deliver incoming basicemail state 
regarding semantic refinement variation sure transition defined 
instance legal variation add transition labeled deliver waiting defined 
hand possible state overlap existing transition 
viewed non deterministic statechart leads semantic refinement problems discussed 
case adaptation state extending features similar 
difference combination features interaction may define exit transition new statechart 
hand show transitions labeled function entering new feature 
example case adaptation shown 
add new transition labeled state 
way reachable error case resolves important interaction 
note fix state exit transition maintenance assume done base feature basicemail feature 
general rule feature combination define exit state 
contrast transitions entering maintenance state 
instance transitions error basicemail features 
addition mapping may refine transitions transition features 
example transition restricted 
refine message leave maintenance state errors exist 
words possible enter maintenance error state error fixed maintenance state 
email error ance interaction basicemail feature adaptation transition oriented state extending feature restricted may add transitions local global states 
transition refinement conditions actions possible 
discussed combination state extending base features 
remaining case adaptation state extending transition oriented feature analogous case base features shown 
interaction base features base features distinguish cases 
cases base feature interacts transition state extending feature treated 
case interactions base features parallel statecharts combination shown 
statecharts operate separately restrict transitions base feature shown examples 
adding transitions parallel statecharts permitted 
combining features interactions refinement show combine features interaction handlers automatic way 
adaptor features exists assume features combined arbitrary order 
feature adapted presence clearly added way interaction handling defines order feature combination 
selection features possible sequence composition inferred 
alternatively particular order explicitly 
statechart concrete feature combination determined show section 
forms statecharts refinement including transition refinement parallel statecharts 
detailed semantic treatment refinement refer 
order obtain practical composition schemes follow design principles discussed limit model feature interactions features 
focus general purpose software development method focus modeling way interactions 
refer detailed discussion 
asymmetric interaction handling case interaction feature adapted 
composition features sequential order simplest natural composition technique 
transition refinement cover case adding transition features 
case combined statechart obtained unfolding interaction handlers statechart 
adding features global control state considered section 
consider example typical case base feature externally visible add auxiliary features change external interface 
consider adding features base feature look kinds interactions 
combination proceeds sequentially produces typical pipeline architecture input passed feature 
instance message forwarded decrypted delivered client 
interaction consists extending message delivery function basic email feature 
reverse direction shown extend message incoming function similar way 
deliver forward forward active email arrived forward forward inactive basicemail deliver store incoming get fwd mail plain mail waiting combination basic email decryption forwarding decrypt hierarchical statechart shows combination features extending basic email feature 
note delivery function refined twice feature interactions 
new behavior added refinement abstraction easy show 
similar fashion combine features including reply decrypt features 
define interaction reply basicemail feature shown 
function forward defined shown detail 
basicemail reply deliver basicemail 
deliver fwd mail reply adapting basicemail reply combination features illustrates interaction reply decrypt features shown explicitly 
interaction refine reply function account interaction function case email encrypted 
function handle interaction leaking previously encrypted header email detailed 
decrypt deliver plain mail email arrived reply inactive reply active basicemail deliver store incoming store reply reply done waiting combination basic email auto reply decryption reply respect original basicemail refinement relation clear new output operations abstracted 
refinement combination basicemail auto reply combination features exceptions considered 
normal reply function case encrypted emails consider exception 
exception occurs refinement holds appropriate abstraction new output 
combination base features far expanded transitions combination 
base features method insufficient 
case base features combine features individual statecharts 
obtain parallel statecharts disjoint function labels 
typically needed features add external methods may affect control state 
instance consider generic locking feature disables function calls object change state 
case may receiving sending configure inspect 
lock feature externally visible functions lock unlock states 
shown 
unlock locked unlocked lock lock feature combining basicemail lock features interaction handling shall block transitions statechart locked 
show combined statechart uses interaction adaptors shown separately 
interaction blocking transitions adding conditions transitions particular form transition refinement 
adaptors extend functions parallel statecharts add function calls statecharts 
instance adaptor lock may invoke lock operation lock feature 
illustrating show new function basic email feature called reset 
adapting function lock transition unlock lock 
adding feature may adapt previously adapted functions 
parallel statecharts transitions statechart adapted 
furthermore need restrict transitions basicemail feature conditions check statechart locked 
conditions detailed specified adaptor similar cases 
unlocked deliver email arrived unlocked incoming waiting unlock locked unlocked lock reset unlock parallel statechart adapted basicemail lock features interesting case occurs state oriented feature added email interacts lock 
case adaptation transitions permitted 
permitted interaction handling creates transitions states parallel composed statecharts 
lead semantic problems contradicts concept parallel composition 
new statechart adds new behavior refinement easy show 
features add global states discuss combination features add global states 
steps merge statecharts new feature existing statechart features 
adapt previously added features 
add transitions transition refinements adaptor features added earlier 
instance combine maintenance error basicemail features shown 
note add maintenance feature adapted error feature basicemail feature 
adaptations adds transitions labeled 
transitions states new easy see semantic refinement relation holds 
email error email arrived error resume deliver store incoming get ance waiting combination maintenance error basicemail features set graphic specification techniques allow structure highly entangled software systems 
graphic design techniques shown plug play concepts construction complex statecharts describe component features 
main contribution graphic combination rules features semantic refinement 
way select combination set features complete statechart created automatically 
feature time selected set ordered implicitly feature interaction handlers exponential number possible feature combinations 
quadratic number interactions 
exist interesting extensions area parallel statecharts 
instance focused sequential composition statecharts 
parallel statecharts may specify features affect parallel statecharts add feature twice parallel statecharts 
furthermore considered hiding operations external interface 
parallel statecharts possible controlled externally visible 
case extension syntactical interface hiding may useful 
approach guided semantic refinement concepts black box component view 
shown combination methods preserve external interface reduce set possible execution traces 
nature approach considered syntactic criteria compatible semantic refinement 
deeper semantic analysis behavior components formal specification technologies considered 
similar aims incremental refinement different levels abstraction graphic description 
little modularization statecharts description 
covers incremental development statecharts consider features independent entities consider interactions 
feature interaction aims detecting interaction consider systematic development features 
modeling telecommunication features statecharts aims formal verification model checking 
broy stolen specification development interactive systems 
springer verlag filman bader aspect oriented programming communications acm volume issue october workshops feature interaction proceedings published ios press netherlands www nl site html tel html hall feature interactions electronic mail ieee workshop feature interaction ios press klein prehofer und rumpe feature specification refinement state transition diagrams dini ed fourth ieee workshop feature interactions telecommunications networks distributed systems ios press :10.1.1.156.4510
prehofer feature oriented programming fresh look objects ecoop object oriented programming springer lncs 
prehofer flexible construction software components feature oriented approach habilitation thesis technical university munich prehofer feature oriented programming new way object composition concurrency computation 
rumpe klein statecharts describing object behavior specification behavioral semantics object oriented information modeling kilov harvey eds kluwer omg unified modelling language version www omg org uml bengt jonsson tiziana margaria jan nystr bernhard steffen 
incremental requirement specification evolving systems 
nordic journal computing spring 
gregory bond nils klarlund richard eclipse feature logic analysis internet telephony workshop april columbia university new york city usa magill 
second feature interaction contest results 
calder magill editors feature interaction telecommunications software systems vi ios press glasgow may 
