software practice experience vol 
february efficient implementation suffix trees arne andersson stefan nilsson department computer science lund university box lund sweden mail arne andersson dna lth se stefan nilsson dna lth se summary study problem string searching traditional approach storing unique substrings text suffix tree 
methods path compression level compression data compression combined build simple compact efficient implementation suffix tree 
comparative discussion extensive experiments argue new data structure superior previous methods practical situations 
key words lc trie path compression level compression data compression suffix tree suffix array locating substrings text documents commonly occurring task 
large documents books dictionaries encyclopedias dna sequences choice data structure algorithms noticeable effect computer capacity requirements response times 
document small speed concern answer query scanning entire text 
text long expect perform searches worthwhile perform preprocessing step build data structure speed searches 
comprehensive survey string searching preprocessed text section 
common method accelerate string searching store sistrings text trie 
semi infinite string substring text defined starting position continuing right far necessary string unique 
resulting trie known suffix tree 
data structure wide range applications including approximate string matching compression schemes genetic sequences 
papers apostolico manber myers contain extensive lists 
article discuss suffix tree string searching 
examine unconventional representation trie uses adaptive branching number descendants node depends elements distributed 
data structure level compressed trie lc trie constitutes efficient representation binary trie 
show new approach combined standard compression methods gives fast compact data structure easy implement 
ccc received september john wiley sons andersson nilsson level compressed patricia tree section discuss new implementation level compressed patricia tree accelerate string searching large texts 
essence structure compact version trie tree structure uses characters key guide branching 
standard implementation internal nodes trie contain set pointers nodes 
search performed way root uses character search string select subtree continue search direct descendants root second character 
example trie shown 
detailed explanation refer reader example section 
focus attention binary tries particularly easy implement 
example binary trie 
path compression known method decrease search cost binary tries path compression 
internal node index indicate character branching node 
additional information available nodes remove internal nodes empty subtree 
path compressed binary trie called patricia tree 
patricia tree corresponding binary trie shown 
observe size patricia tree depend length strings total number strings 
patricia tree storing strings exactly nodes 
patricia tree represented space efficiently storing nodes array 
node represented numbers indicates number bits skipped pointer left child node 
pointer right child needed siblings stored consecutive positions array 
leaf represents unique may contain pointer data structure 
level compression level compression reduce size patricia tree 
description easier follow start considering plain binary trie patricia compression 
highest levels trie complete level replace highest levels single node degree replacement repeated top get structure adapts nicely distribution input 
refer data structure level compressed trie lc trie 
random independent data expected average depth lc trie smaller trie log lc trie log trie 
clear path compression level compression combined 
internal node degree empty subtree removed internal node index indicates number bits skipped 
version patricia tree shown 
lc trie easy implement 
fact essentially implementation 
store nodes array siblings stored consecutive positions 
node represented numbers indicate number bits skipped position leftmost child 
third number indicates function log iterated logarithm function log log log log 
efficient implementation suffix trees 
trie binary trie patricia tree lc trie 
andersson nilsson table array representation lc trie 
branch skip pointer number children 
number power represented small number bits 
fact tree leaves log log bits suffice 
example dna sequences strings nucleotide bases adenine 
example consider nucleotide bases epstein barr virus show sistrings string represented different trie structures 
numbers inside nodes pointers string 
traditional trie internal nodes degree 
corresponding binary trie 
coded respectively 
string appended sequence sure sistrings unique 
corresponding patricia tree 
long path replaced skip value 
corresponding lc trie 
efficient implementation suffix trees table shows array representation lc trie entry represents node 
number branch column indicates number bits branching node 
value indicates node children 
value indicates node leaf 
number skip column patricia skip value number bits skipped search operation 
value pointer column different interpretations 
internal node pointer leftmost child leaf pointer position string text 
example search string tcg 
binary code string 
start root node number 
see branch skip extract bits search string 
bits value added pointer leading position 
node branch skip extract bits 
value 
adding pointer arrive position 
node bits equal implies leaf 
pointer value gives position string text 
observe necessary check constitutes true hit 
example search tcg exactly mirrored search tca string text 
compression experiments simple strategy reduce size lc trie 
internal nodes restricted positive patricia skip value branching factor larger 
replace fields branch skip integer bit distinguish different types values 
reduce size nodes fact may somewhat fewer skip values turns little effect practice 
compared original lc trie number nodes increase small fraction get size reduction 
new data structure string searching section discuss lc trie string location 
particular discuss binary encoding text affects behavior data structure texts large fit main memory managed 
suffix tree document length may viewed consisting sistrings starting position text 
traditional method store sistrings suitable subset path compressed trie resulting structure called suffix tree 
shown experiments data structure substantially improved level compression 
keep data structure simple common practice sure text proper prefix 
achieved appending unique string text 
frequently method augment alphabet new character solely purpose 
new character appended text 
solution especially attractive handling binary strings append string text 
fact non periodic string may 
andersson nilsson huffman coding text represented ascii code character represented bit integer 
possible characters 
fact normal text uses characters 
superfluous bits ascii code increase search time binary trie path compression 
suggest huffman coding easiest known data compression method 
huffman coding advantage generating evenly distributed binary strings get balanced lc trie high branching factors 
observe possible huffman coded version characters trie text stored different format 
construction suffix tree implemented level compressed patricia tree constructed log time space size text size alphabet 
brute force method achieves starts constructing ordinary suffix tree path compressed ary trie containing sistrings text 
algorithms log time space 
assume text ends special marker assume binary encodings characters equal length 
lc trie constructed steps 
node suffix tree replaced binary patricia tree skip values updated 
takes time total number nodes original modified tree 
observe skip value updated constant time assume binary encodings characters equal length 
level compression performed top traversal modified tree 
topmost complete levels tree replaced single node degree replacement performed recursively subtree 
step performed time total number nodes tree 
practice simpler method 
construct array pointers sistrings text sort array standard sorting algorithm log time suffix sort algorithm manber myers fast string sorting algorithm forward radix sort 
sorted array easy topdown construction lc trie 
algorithm quite easy implement quadratic worst case running time 
approach quite efficient input data 
text dna sequence containing long repeated substrings took noticeably time construct 
secondary memory applications need handle large texts fit main memory 
reduce number time consuming accesses secondary memory partial data structure fits main memory employed 
suggest partial lc trie stored main memory index suffix array pat array stored secondary memory 
suffix array consists array pointers 
pointer points text pointers sorted sistrings point 
partial lc trie constructed way soon reach node covers strings constant tree building algorithm add pointer efficient implementation suffix trees suffix array 
number called cutoff value 
implementations section describe common data structures speed string searching 
trie implementations implementation suffix tree commonly referred literature ary trie size alphabet 
trie may implemented ways 
data structure extensively studied just briefly mention common implementations 
internal node consists array pointers descendants 
length array equals size alphabet 
ii non null outgoing pointers stored linked list 
iii non null outgoing pointers stored balanced binary search tree 
implementations give rise large space overhead reducing usefulness practical applications 
possibility patricia tree 
case ignore size alphabet binary encoding strings 
space requirement patricia tree smaller corresponding alphabetic trie 
hand binary strings longer alphabetic counterparts search time increase 
array implementations natural method suggested manber myers store sistrings suffix array 
suffix array consists array pointers 
pointer points text pointers sorted sistrings point 
string location performed making binary search array 
possible drawback simple structure worst case time searching high 
text accessed step search costly text stored secondary memory 
order achieve low worst case cost manber myers introduced augmented suffix array numbers added entry 
numbers indicate characters string skipped comparisons 
way worst time search cost reduced 
case text accessed step search 
augmented suffix array large space overhead method combines suffix array bucket array suggested practical 
strings ary alphabet treated ary numbers universe split number buckets 
bucket contains pointer suffix array 
string location reduced binary search small part suffix array 
choosing buckets total space requirement increases fourth compared suffix array 
comparison traditional implementations suffix trees demonstrated suffix array bucket array combination required roughly search time suffix tree space requirements considerably smaller 
andersson nilsson secondary memory combination bucket array suffix array suited large texts 
bucket array may stored main memory suffix array secondary memory 
way number accesses secondary memory binary search small 
method adapt gracefully data deviates markedly uniform distribution 
buckets may contain elements empty 
experiment main memory order study real world behavior various trie structures discussed carried number experiments 
order get reproducible results chosen experiments specific architecture specific programming language 
performed simulations measuring critical operations 
method estimate space requirements characters branching values occupy byte small integers skip values occupy bytes pointers occupy bytes 
order measure search costs counted average number steps required successful search 
steps count number traversed nodes trie average depth leaf number string comparisons suffix array 
experiments performed data random text text consisting zeroes ones independently chosen equal probability 
ii dna longest available complete dna sequence epstein barr virus 
iii faq ascii english text ascii format frequently asked questions list newsgroup comp windows sep 
iv faq huffman text huffman coded 
case performed experiments cent cent cent input text 
data structures examined augmented suffix array worst case efficient data structure manber myers 
entry array contains address bytes skip values bytes 
augmented suffix array length occupy bytes 
ii trie linked list implementation alphabetic trie internal node outgoing pointers stored linked list 
path compression 
internal node trie degree represented list nodes contains character skip value pointers total bytes list node 
external nodes marked specially designated skip value contain pointer document requiring bytes node 
leaves internal nodes total space 
iii trie array implementation alphabetic trie array length equal size alphabet internal node 
path compression 
internal node uses bytes pointers bytes skip value 
external nodes efficient implementation suffix trees table ii 
empirical results suffix array suffix trees 
sizes measured kbytes 
input suffix array trie list trie array patricia tree lc trie file size steps size depth size depth size depth size depth size random text dna faq ascii faq huffman represented 
external nodes internal nodes total space 
iv patricia tree binary trie implemented patricia tree 
trie stored array node represented skip value address requiring bytes 
total number nodes patricia trie space required 
lc trie implement trie space efficient way described node represented integers short integer holds skip branch value long integer holds pointer total bytes node 
lc trie leaves internal nodes requires bytes 
combinations input texts data structures sense 
alphabetic trie difference characters encoded 
alphabetic trie binary trie coincide binary string 
performed experiments trie internal node represented binary search tree 
structure achieved roughly average depth patricia trie cost considerably space 
results included 
discussion simulation results table ii 
starting space requirements observe various trie structures lc trie requires smallest space kinds input 
data structure uses space lc trie suffix array 
dna sequence smooth character distribution results input similar results random data 
cases average depth lc trie considerably smaller tries 
expected smaller number binary search steps required suffix array average depth andersson nilsson lc trie log independent random data 
english text lc trie markedly better performance ordinary trie array implementation achieves smaller average depth price prohibitively large space overhead 
observe ascii coding best alternative building lc trie huffman coded text search cost significantly reduced 
huffman coding binary trie gives slight improvement 
combination huffman coding level compression main difference 
huffman coding smoothes text level compression effective 
argue branching operation lc trie expensive patricia trie just bit branching node varying number bits 
argument shows total search cost lc trie fact smaller 
note search lc trie examine exactly bits query string search patricia trie 
difference lc trie consecutive bits examined groups examined time patricia trie 
example node lc trie uses bits branching extract bits query string treat digit binary number 
depending value number determine subtree search continued 
corresponding patricia trie extract bits time traversing nodes tree 
summary respect space average depth lc trie clear winner various trie structures 
real advantage suffix array fact uses slightly memory trie structure 
recall suffix array opposed trie requires access document step binary search 
experiment secondary memory applications text data base large fit main memory 
case conducted extensive experiment different kinds texts 
method studied data structures large texts described 
suffix array bucket array experiments approximately buckets suggested manber myers 
chosen number buckets way proper bucket computed truncating number bits 
cases exception digit coding chosen number buckets power 
bucket represented pointer total space buckets 
ii suffix array lc trie cutoff value maximal number elements stored leaf lc trie chosen way time space measurements data structures easily compared measurements better structure 
ignored time spent internal structure counted number accesses secondary memory required binary search typically expensive 
counted space required internal structures 
efficient implementation suffix trees natural way try improve behavior bucketing method better encoding 
sake completeness tried arithmetic coding suggested manber myers combination bucketing huffman coding 
methods enhance performance slightly come close performance lc trie 
addition texts experiment performed experiments selection standard texts calgary canterbury text compression corpus 
pictures geophysical data object code texts large easily handled simulation program excluded 
additional texts bib bibliographic files refer format 
ii witten neal cleary arithmetic coding data compression 
iii witten computer security 
iv source code compress version 
lisp source code system software 
vi pascal source code prediction partial matching evaluation program 
vii trans transcript session terminal 
discussion looking table iii observe texts lc trie lower average number accesses secondary memory smaller size 
exception random string dna sequence bucket array slightly better 
expected bucketing efficient uniformly distributed data 
experimental results accentuate problems plain bucketing scheme 
major drawback nonuniform distributions elements may buckets buckets empty 
space inefficient accumulation elements increase number accesses secondary memory 
lc trie suffix array implementation advantage number elements represented leaf bounded 
experiments cutoff value greater 
bucket array suffix array text faq largest bucket contained elements maximum search cost higher bucket array 
experimental results strongly indicate combination path compression data compression level compression gives time space efficient data structure string searching easy implement real world applications 
particular believe lc trie suffix array combination prove efficient large texts minimizes number accesses slow secondary memory time small amount main memory 
acknowledgments wish anonymous referee valuable comments 
andersson nilsson table iii 
empirical results partial data structures 
sizes measured kbytes 
input bucket array lc trie file size accesses size accesses size aver 
worst aver 
worst random text dna faq ascii faq digit faq huffman bib ascii bib digit bib huffman ascii digit huffman ascii digit huffman ascii digit huffman ascii digit huffman ascii digit huffman trans ascii trans digit trans huffman 
gonnet baeza yates handbook algorithms data structures addison wesley 

apostolico myriad virtues subword trees apostolico galil editors combinatorial algorithms words nato asi series computer system sciences volume pp 

springer verlag 

manber myers suffix arrays new method line string searches proc 
st acm siam soda pp 

efficient implementation suffix trees 
andersson nilsson improved behaviour tries adaptive branching information processing letters 

huffman method construction minimum redundancy codes proc ire 

mccreight space economical suffix tree construction algorithm journal acm 

ukkonen line construction suffix trees technical report department computer science university helsinki 

nilsson andersson new efficient radix sort proc 
th annual ieee sympos 
focs 
appear 

bell cleary witten text compression 
prentice hall englewood cliffs nj 
