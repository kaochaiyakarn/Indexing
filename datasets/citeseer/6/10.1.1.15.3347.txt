databases peer peer 
steven gribble alon halevy zachary ives maya dan suciu gribble alon suciu cs washington edu university washington seattle wa usa internet community focused peer peer systems napster gnutella freenet 
grand vision decentralized community machines pooling resources benefit compelling reasons scalability robustness lack need administration anonymity resistance censorship 
existing peer peer systems focused specific application domains music files providing filesystem capabilities systems ignore semantics data 
important question database community data management applied learn contribute area 
address questions identify number potential research ideas overlap data management systems preliminary fundamental results describe initial constructing data management system 
long standing tenet distributed systems strength distributed system grow hosts participate 
participant may contribute data computing resources unused cpu cycles storage system wealth community scale number participants 
peer peer distributed system participants rely service solely relying dedicated centralized infrastructure 
strictly decomposing system clients consume services servers provide peers system elect provide services consume 
membership system relatively unpredictable service provided peers happen participating time 
examples systems emerged wide area large scale systems provide content sharing storage services distributed grid computation 
smaller scale systems exist federated serverless file systems collaborative workgroup tools 
success systems mixed napster enjoyed enormous popularity perform scale 
including gnutella failed attract large community possibly due combination weak application semantics technical flaws limit scaling 
exciting possibility peer peer computing desirable properties system amplified new peers join decentralization system robustness availability performance grow number peers 
subtle possibility richness diversity system similarly scale new peers introduce specialized data resources system previously lacking 
decentralization helps eliminate proprietary interests system infrastructure trust placed dedicated servers trust diffused participants system 
need administration diminished dedicated infrastructure manage 
routing requests peers replicating content system able hide identity content publishers consumers making resilient censorship 
vision systems grand technical challenges associated immense result realization vision elusive 
membership system ad hoc dynamic difficult predict reason location quality system resources 
example placement data content sharing systems na data placement largely demand driven little regard network bandwidth load historical trustworthiness peer data placed 
system decentralized optimizations data placement done completely distributed manner system necessarily presume existence single oracle coordinates activity systems peers 
furthermore dynamic nature system may impose fundamental limitations data consistency availability rate data changes system high overhead maintaining globally accessible indexes may prohibitive number peers system grows 
systems designers large extent failed overcome challenges semantics provided systems typically quite weak 
content sharing systems popular content readily accessible content popularity driven zipf distributions large fraction requests directed unpopular content 
similarly current content sharing systems ignore problems updates content typically support retrieval objects name 
glance challenges designing systems fall clearly banner distributed systems community 
closer examination fundamental problem systems placement retrieval data 
topic worthy database community interest fact data management techniques great relevance field 
current systems focus strictly handling semantics free large granularity requests objects identifier typically name limits utility restricts techniques employed distribute data 
current content sharing systems largely limited applications objects large opaque atomic content described name instance today systems highly ineffective content retrieval text files fetching abstracts set atex documents 
limited caching prefetching pushing content object level know overlap objects 
limitations arise world lacking areas semantics data transformation data relationships core strengths data management community 
queries views integrity constraints express relationships existing objects define new objects terms old ones 
complex queries posed multiple sources results query materialized answer queries 
data management techniques develop better solutions data placement problem heart system design data placed strategic locations improve query performance 
database field benefit results new query processing systems leverage increased scalability reliability performance successful architecture 
proceed define data placement problem detail identify impact design dimensions problem 
conclude description piazza system building university washington investigate data placement schemes peer peer domains dynamic membership data workloads 
data placement peer peer define data placement problem system follows 
assume set cooperating nodes connected network typically necessarily internet limited bandwidth link 
nodes know exchange data collection participating peers may serve roles 
data origin provides original content system authoritative source data 
storage provider peer stores materialized views consuming disk resources replacing previously materialized views insufficient space query evaluator uses portion cpu resources evaluate set queries forming workload 
query initiators peers act clients system pose new queries 
node may initiate new queries behalf query attempting evaluate 
cost answering query includes transfer cost storage provider data origin query evaluator cost resources utilized query evaluator nodes cost transfer results query initiator 
data placement problem distribute data full query workload answered lowest cost existing resource bandwidth constraints 
cursory glance data placement problem suggests similarities multi query optimization distributed database substantial fundamental differences 
example general case system centralized schema central administration 
shall see section data placement problem come forms depending design underlying system 
specific case data placement problem appears distributed cooperative web caching problem optimal placement requested web pages caches 
observed proxy caches yield limited benefits web data placement problem show better results client cache integral part system separate component expressive query language data model allow greater reuse cached data queries utilize views overlapping just identical data 
peer peer design choices affecting data placement globally optimal peer peer concept conceptually simple define ideal environment practice system certain limitations 
compromises due factors constrained bandwidth resources message propagation delays 
important dimensions affect data placement problem include scope decision making major factor scale query processing view materialization decisions 
extreme queries entire system optimized complete knowledge available materialized views resources network bandwidth constraints poses challenges multi query optimization plus number additional difficulties 
particular distributed globally peers decisions materialize results 
spectrum decision single node single query basis familiar problem query optimization distributed data 
clearly query optimization data placement strategy beneficial global system local decisions expensive global scale real system forced smaller scope 
extent knowledge sharing related problem question knowledge available system query optimization process 
particular step choosing query evaluation strategy identifying nodes materialized views speed query processing 
simple technique centralized catalog available views locations analogous central directory napster 
model introduces single point failure potential scalability bottleneck 
alternatively may attempt replicate complete catalog peers requires update traffic feasible 
third solution construct hierarchical organization dns ldap peer contacts known site holding fragment global catalog requested data resolved request forwarded peer higher hierarchy 
discuss fourth technique piazza system 
basic challenge scheme achieve reasonable degree consistency number peers system grows placement data changes data updated 
heterogeneity information sources data may originate authoritative sources alternatively participant allowed expected contribute data community 
level heterogeneity data influences degree system ensure uniform global semantics data 
system impose single schema participants enforce uniform global semantics applications restrictive 
alternatively limited number data sources schemas may allowed traditional schema data integration techniques apply restriction central authority 
case fully heterogeneous data global semantic integration extremely challenging 
dynamicity participants systems assume fixed set nodes system 
greatest potential strengths systems eschew reliance dedicated infrastructure allow peers leave system 
conditions participants typically broadly varying availability characteristics 
peers akin servers membership system stays largely static 
dynamic membership joining leaving system 
configuration original data distributed uniformly network including nodes frequently disappear may impossible reliably access certain items 
extreme data placed cached set static servers system greatly reduced flexibility performance configuration equivalent yesterday web prior proxy caches content distributors akamai 
intermediate approach places original content consistently available nodes provide availability replicates caches data dynamic peers 
data granularity data system accessible degrees granularity 
atomic granularity level data consists collection indivisible objects complete mp files 
data placement level place entire object peer semantics currently supported today systems 
hierarchical granularity level sets objects grouped larger objects forming hierarchies 
example multiple mp files may grouped album albums collections data placement problem level place single file entire album peer 
value granularity data objects aggregated atomic hierarchical values 
example tuples relation consist values 
data placement problem new dimension data restructured integrated placed 
degrees replication data items replicated sparingly 
obviously large degree replication improves query time efficiency updates harder increases retrieval complexity discuss 
maintaining consistency replicated objects known difficult database problem 
typical solution quite acceptable object owned single master solely responsible freshness 
freshness update consistency possible ways propagating updates data origins intermediate nodes materialized views data 
possible solutions invalidation messages pushed server client initiated validation messages incur overhead limits scalability 
approach timeout expiration protocol employed dns web caches 
approach lower overhead cost providing looser guarantees freshness consistency 
stronger currently gives guarantee 
surprising data placement problem intractable extreme points dimensions listed 
fact show simplest form problem np complete 
complexity data placement problem simplified form problem defined follows 
assume model containing peer nodes node associated storage query workload pair nodes connected edge cost unit data transferred 
data model query capabilities assume data model object atomic consumes units space identified object identifier query language supports form request object queries object identifier return object appropriate choice data maintain particular node highly dependent set queries expect 
model expected queries node query workload set queries query associated non negative weight weight describes frequency relative combined workload nodes 
require weights sum 
data placing data placement assignment set objects stored peer network 
data may replicated objects may stored nodes 
data placement may described extensionally set oids peer set views peer evaluation return objects stored peer 
cost data placing subtle define context specific define simple case object queries 
object query node cost zero stored node containing cheapest cost edge node query cost object size edge cost 
cost workload node weighted sum costs constituent queries 
cost data placement sum costs workloads peers network 
definition static data placement problem graph describing network peers static data placement problem perform data placement optimal cost queries zero cost object lookups 
observe special cases slight variations problem occur data management contexts 
simple version problem considered context data placement distributed databases see survey 
view selection data warehouses specific instance data placement problem network includes nodes database warehouse 
initial theoretical investigation data placement problem shown result theorem graph describing peer peer network 
static data placement problem npcomplete queries workloads object queries 
proof theorem reduction vertex cover problem 
theorem shows restricted case problem intractable 
setting especially simple consider non trivial queries data 
important note np hardness size network 
theorem dampen enthusiasm regarding data placement problem quite contrary 
challenge find specific settings study problem network workloads interesting properties exploited 
version problem especially interesting dynamic data placement problem includes dynamic data dynamic query workloads dynamic peer membership 
solution problem required build decentralized globally distributed query processor 
similar needs arise context data management ubiquitous computing 
data integrated accessed devices desktops laptops pdas cell phones devices local store retrieve data different rates various points network 
sphere cooperation data origin sphere cooperation data origin bw sphere cooperation query request advertisements system diagram detailed view disk resources cpu resources materialized views query workload piazza system architecture 
data origins serve original content peer nodes cooperate store materialized views answer queries limited disk cpu resources 
nodes connected bandwidth constrained links advertise materialized views 
nodes belong spheres cooperation share resources spheres may nested successively larger spheres 
exploring peer peer piazza system conclude description preliminary architectural design piazza system focuses dynamic data placement problem mentioned 
goals scalability large numbers nodes moderately frequent updates 
model data origin entity distinct peers system peer serve roles piazza guarantee availability data origin member network origin may update data 
peer nodes belong spheres cooperation pool resources cooperative decisions 
sphere cooperation may turn nested successively larger sphere cooperates lesser extent 
spheres cooperation mirror particular administrative boundaries local isp ways resemble cooperative cache 
configuration piazza focuses aspects data placement problem query optimization exploiting commonalities available data heart problem lies variation traditional multi query optimization 
ideally piazza system take current query workload find commonalities queries exploit materialized views cost effective distribute resource bandwidth constraints determine certain results materialized considering likelihood updates data 
scalability reasons decisions level sphere cooperation global basis 
order perform optimization piazza address important sub problems propagating information materialized views query posed step consider answered data nearby storage providers evaluate costs doing 
requires query initiator aware existing materialized views properties location data freshness 
direction exploring propagate information materialized views techniques derived routing protocols 
particular node advertises materialized views neighbors 
node advertisements receives propagates neighbors 
constrained resources node arbitrarily drop advertisements system correctness query posed terms data origins 
routing protocol avoids scalability problems caused broadcasting view materialization caused broadcasting query request 
consolidating query evaluation data placement node may pose query evaluated data available known peers 
case data retrieved directly data origins 
point may similar un evaluable queries sphere cooperation sphere choose optimal strategy evaluating 
un evaluable queries broadcast cluster cluster identifies commonalities query set assigns roles evaluation query subquery materialization results specific nodes best expected cost 
guaranteeing data freshness wish support dynamic data dynamic workloads piazza refresh materialized views original data updated 
scalability reasons discussed section query results data elected expiration times data items coherence protocol 
reduces network traffic provides better guarantees current systems achieve strong semantics traditional databases 
solutions problems listed generally applicable system peerto peer distributed system supports dynamic data dynamic workloads 
process building piazza system believe design strategies hold promise hope experimentally validate near 
goal scalable reliable distributed query answering system leveraging ideas data management techniques reach 
anderson dahlin neefe patterson roselli wang 
serverless network file systems 
sosp volume pages december 
bolosky douceur ely theimer 
feasibility serverless distributed file system deployed existing set desktop pcs 
proc 
measurement modeling computer systems pages june 
cao zhang beach 
active cache caching dynamic contents web 
middleware sept 
entropia works 
world wide web www entropia com asp 
fan cao almeida broder 
summary cache scalable wide area web cache sharing protocol 
proc 
acm sigcomm august 
gray neil shasha 
dangers replication solution 
sigmod pages 
groove 
world wide web www groove net 
ives levy madhavan pottinger saroiu tatarinov chen su yeung 
self organizing data sharing communities 
sigmod page 

state art distributed query processing 
acm computing surveys september 
kubiatowicz bindel chen czerwinski eaton geels gummadi rhea weatherspoon weimer wells zhao 
oceanstore architecture global scale persistent storage 
asplos pages november 
legion grid os 
world wide web www com legion html 
napster 
world wide web www napster com 
rabinovich chase gadde 
hits created equal cooperative proxy caching wide area network 
proc 
rd int 
www caching workshop june 
tanenbaum 
computer networks 
prentice hall ptr rd edition 
wolman voelker sharma cardwell karlin levy 
scale performance cooperative web proxy caching 
sosp kiawah island sc dec 
