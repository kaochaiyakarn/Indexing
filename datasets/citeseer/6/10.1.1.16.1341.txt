centro la ricerca scientifica tecnologica povo trento italy tel fax mail itc url www itc integrating sat solvers math reasoners foundations basic algorithms sebastiani november technical report istituto di cultura limited distribution notice report outside itc probably copyrighted accepted publication 
issued technical dissemination contents 
view copy right tot outside publisher distribution outside publication limited peer communications outside publication material available form authorized copyright owner 
integrating sat solvers math reasoners foundations basic algorithms roberto sebastiani dept mathematics university trento povo tn italy 
itc irst povo tn italy 
science unitn 
years witnessed impressive advance eciency sat techniques brought large previously intractable problems reach state art solvers 
unfortunately simple boolean expressions expressive representing real world problems require handling integer real values operators 
hand mathematical reasoners computer algebra systems constraint solvers handle eciently problems involving heavy boolean search handle 
foundations basic algorithms new class procedures solving boolean combinations mathematical propositions combine sat solvers mathematical reasoners 
motivation goals years witnessed impressive advance eciency sat techniques brought large previously intractable problems reach state art solvers 
consequence hard real world problems successfully solved encoding sat 
propositional planning boolean model checking best achievements 
unfortunately simple boolean expressions expressive representing real world problems 
example problem domains temporal reasoning resource planning veri cation systems numerical data values timed systems require handling constraints integer real valued quantities see :10.1.1.15.6244:10.1.1.15.6244
problem domains model checking require explicit representation integers arithmetic operators simple boolean expressions representing eciently see 
hand mathematical reasoners computer algebra systems constraint solvers handle eciently problems involving heavy boolean search handle 
proposed new general approach called sat building decision procedures top sat solvers 
basic idea decompose bene ted discussions alessandro armando bertoli alessandro cimatti enrico giunchiglia fausto giunchiglia armando paolo traverso 
fausto giunchiglia played special role author sat approach modal logics inspired 
part 
rtn ec project contract code ct bene ted nancial contribution commission programme 
search orthogonal components purely propositional component boolean free domain speci component modi ed davis putnam loveland dpll sat solver pure domain speci procedure 
far sat approach proved ective various problem domains modal description logics temporal reasoning resource planning :10.1.1.15.6244
foundations basic algorithms new class procedures solving boolean combinations mathematical propositions combine sat solvers mathematical reasoners 
ultimate goal develop solvers able handle complex veri cation problems hinted 
structured follows 
section describe formally problem addressing 
section logic framework procedures 
section generalized search procedure prove basic properties introduce eciency issues 
section basic procedure dpll prove basic properties suggest algorithmic improvements 
section describe related 
problem address problem checking satis ability boolean combinations primitive mathematical propositions 
domain integer numbers real numbers respective set opd arithmetical operators 

respectively 
denote false true boolean values 
standard boolean connectives math operators fa set primitive propositions fc fv respectively set numerical constants variables domain call terms mathematical expressions built constants variables arithmetical operators constant term variable term term term terms term opd instance 
term real variables whilst 
mod term integer 
call formulas mathematical formulas built primitive propositions terms operators boolean connectives primitive proposition formula terms formula formula formula formulas formula 
instance 
formula real variables 
mod formula integer 
assumption domain restrictive restrict domain variable adding formula constraints notationally letters denote terms greek letters denote formulas 
standard abbreviations valid formula 
call set terms formulas respectively 
cause ambiguities associativity precedence rules arithmetical operators simplify appearance terms write 



call interpretation map assigns values boolean values terms formulas respectively preserves constants arithmetical operators def hi 
id 
id terms opd binary relation interpretation formula written satis es satis es de ned follows id id say formula satis able satis able exist interpretation 

satis ed interpretation id id 
say say valid easy verify unsatis able 
standard boolean formulas strict subcase formulas follows trivially satis ability hard boolean satis ability 
proposition 
problem deciding satis ability formula np hard 
deciding satis ability computationally expensive 
complexity upper bound may depend kind mathematical problems dealing 
instance dealing boolean combinations arithmetical expressions bounded integers verify polynomial amount time problem np complete 
little abuse notation constants operators opd fact denote symbol language symbol id arithmetic operator id id 
discourse holds constants operators formal framework de nition 
call atom formula decomposed propositionally formula main connective boolean operator 
literal atom positive literal negation negative literal 
examples literals mod 
negative literal conventionally mean denote atoms set atoms 
notice atoms atoms atoms atoms atoms 
de nition 
call total truth assignment formula set ar ar atom atoms occurs positive negative literal 
partial truth assignment subset total truth assignment 
say extends subsumes total truth assignment interpreted truth value assignment atoms means assigned means assigned 
syntactically identical instances atom assigned identical truth values syntactically di erent atoms treated di erently may assigned di erent truth values 
notationally greek letters represent truth assignments 
furthermore write truth assignment conjunction elements conjunction propositional literals 
say assignment satis able meaning corresponding formula satis able 
indi erently represent truth assignment set formula 
de nition 
say total truth assignment propositionally satis es written evaluate sub formulas atoms say partial truth assignment propositionally satis es total truth assignments extend propositionally satisfy 
speci ed dealing propositional satis ability distinguish total partial assignments 
say propositionally satis able exist assignment 
intuitively consider formula propositional formulas atoms standard satis ability propositional logic 
say say propositionally valid assignment 
easy verify propositionally unsatis able 
notice stronger vice versa 

example 
consider formula fa fa partial truth assignment underlined literals partial assignment propositionally satis es sets true literal disjunction total assignment extends propositionally satis es 
notice satis able sub assignment rows satisfying interpretation 
de nition 
say collection partial assignments propositionally satisfying complete complete sense total assignment exists 
compact representation set total assignments propositionally satisfying 
notice stronger interpretation formula de ne total truth assignment induced written def atoms atoms intuitively total truth assignment truth values implicitly assigned atoms 
example 
consider formula example interpretation id id 
induced assignment properties follow straightforwardly de nition property 

property 
truth assignment 
property 

property 
lemma 
proof 
induction 
atom 
thesis holds de nition de nition ind hypothesis property de nition de nition ind hypothesis property de nition consequence lemma result 
theorem 
formula satis able exists satis able total truth assignment 
proof 
atoms de nition trivially follows 
property lemma 
example 
consider formula example interpretation induced assignment example 
easy verify 
satis able 
boolean math sat formula assignment interpretation assign enumerator ng null provider null null null return true satis able assignment return false satis able assignment fig 

schema generalized search procedure satis ability 
generalized search procedures theorem allows split notion satis ability orthogonal components purely boolean component consisting existence propositional model purely mathematical component consisting existence interpretation set atomic possibly negated mathematical propositions 
aspects handled respectively truth assignment enumerator mathematical service provider 
de nition 
call truth assignment enumerator total function assign enumerator takes input formula returns complete collection assignments satisfying 
de nition 
call mathematical service provider total function provider takes input set possibly negated atomic formulas returns interpretation satisfying null 
general schema search procedure satis ability reported 
math sat takes input formula initially empty assignment initially null interpretation assignment collection generated assign enumerator math sat invokes provider returns interpretation satisfying null 
done satis able assignment assignments available case satis able case 
important notice search procedure schema completely independent kind mathematical domain addressing mathematical service provider 
termination correctness completeness math sat performs loops 
call provider terminates math sat terminates 
show provider correct complete math sat correct complete 
lemma 
formula complete collection truth assignments satisfying 
interpretation proof 
total assignment extending 
proof theorem 
immediate consequence lemma theorem 
theorem 
formula complete collection truth assignments propositionally satisfying 
satis able satis able follows theorem math sat correct complete provider correct complete 
notice theorem necessary check set total truth assignments satisfying suf cient check complete collection partial assignments propositionally satisfying typically smaller 
eciency issues apart eciency provider varies kind problem addressed technique adopted discussed critical point eciency math sat number assignments complete set exponential worst case typically big average 
induces considerations 
don want procedure require exponential space 
adopt generate check drop paradigm step generate assignment check satis ability drop drop part common assignment passing step 
means assign enumerator able generate assignments time 
avoid techniques reduction disjunctive normal form ordered binary decision diagrams 
second want reduce possible number assignments generated checked 
key issue choosing procedure assign enumerator generates non redundant complete sets assignments 
de nition 
say complete collection assignments propositionally satisfying non redundant complete redundant 
de nition 
say complete collection assignments propositionally satisfying strongly non redundant propositionally unsatis able 
consequently say assign enumerator strongly non redundant assign enumerator strongly non redundant non redundant assign enumerator non redundant redundant 
example 

gg set total assignments propositionally satisfying complete redundant assignment dropped loosing completeness complete non redundant strongly redundant 
fact assignment mutually propositionally inconsistent subsume assignment strongly non redundant assignments mutually inconsistent 
easy verify strongly non redundant non redundant vice versa hold 
redundant non redundant assignment generators avoid generating partial assignments unsatis ability propositional consequence generated ones 
strongly non redundant total assignment propositionally satisfying represented represents jj total assignments 
strongly nonredundant assignment generators avoid generating partial assignments covering areas search space covered generated ones 
dpll algorithm exploit maximum eciency modify standard dpll algorithm strongly non redundant truth assignment enumerator 
basic dpll algorithm basic non cnf dpll procedure math sat reported 
mathsat takes input formula returns truth value asserting satis able 
math sat invokes math dpll passing arguments empty assignment null interpretation math dpll tries build satis able truth assignment satisfying 
done recursively steps base propositionally satis es 
satis able satis able 
math dpll invokes provider returns interpretation satis able null 
math dpll returns rue rst case alse 
see dpll non cnf formulas see 
particular indirectly provide notion unit clause non cnf propositional formulas 
boolean math sat formula fg null return math dpll boolean math dpll formula assignment interpretation base provider return null backtrack return false fl occurs unit unit return math dpll assign flg choose literal split return math dpll assign flg math dpll assign lg fig 

basic version math sat algorithm 
backtrack lead propositional contradiction 
returns alse 
unit literal occurs unit clause assigned obtain math dpll invoked recursively arguments formula returned assign assignment obtained adding 
assign substitutes occurrence propositionally simpli es result 
split situations occurs choose literal returns unassigned literal heuristic criterion 
math dpll rst invoked recursively arguments assign flg 
result alse invoked arguments assign lg 
math dpll variant non cnf version dpll modi ed enumerator truth assignments satis ability recursively checked provider accordance generate check drop paradigm 
key di erence standard dpll base step standard dpll simply returns rue needs nding satisfying assignment 
termination correctness completeness recursive call math dpll eliminates nitely atoms atoms 
call provider terminates math sat terminates 
prove correctness completeness math sat need result 
theorem 
formula set assignments generated checked call math sat complete strongly non redundant 
proof 
possibly empty assignment null 
prove set assignments generated checked call math dpll reason induction number propositions occurring 
rue holds trivially alse holds trivially 
occurs unit clause sets assignments generated checked call math dpll assign flg 
inductive hypothesis occurs unit clause holds 
general case sets assignments generated checked respectively calls math dpll assign flg math dpll assign lg 
inductive hypothesis fg follows set assignments generated checked call math sat complete set assignments 
straightforward notice generated checked call math dpll literal propositionally unsatis able 
set assignments generated checked call math sat strongly non redundant 
follows theorems math sat correct complete provider correct complete 
notice theorem hold sat solvers 
instance sets assignments generated dpll pure literal rule may incomplete sets generated standard analytic tableaux complete may redundant ordered binary decision diagrams obdds sets paths leading complete strongly non redundant generated generate check drop policy 
improvements optimizations math dpll describe possible improvements optimizations math dpll come adapting domain improvements optimizations dpll procedures modal logics temporal reasoning resource planning proved extremely ective respective domains :10.1.1.15.6244:10.1.1.15.6244
preprocessing atoms 
potential source ineciency procedures figures fact semantically equivalent syntactically di erent atoms recognized identical resp 
negation may assigned di erent resp 
identical truth values 
instance syntactically di erent atoms may equivalent modulo ordering associativity factorization simple arithmetical term rewriting may negation 
causes undesired generation potentially big amount intrinsically unsatis able assignments instance atoms assignments kind 
avoid problems wise preprocess atoms map semantically equivalent atoms syntactically identical ones 
course mapping depends problem addressed integers reals linear nonlinear equalities inequalities 
common steps exploit associativity sorting factoring exploiting negation exploiting integer properties 
intermediate assignment checking 
improvement starts observation typically assignments math dpll trivially unsatis able sense unsatis ability caused smaller subsets call con ict sets 
assignment unsatis able extensions unsatis able 
unsatis ability assignment detected recursive construction prevents checking satis ability jj truth assignments extend suggests introduce intermediate satis ability test incomplete assignments just split step unsatis able intermediate assignment check provider null return false heuristic unsatis able returns rue provider invoked current assignment 
provider returns null possible extensions unsatis able math dpll returns alse avoiding possibly big amount useless search 
example 
consider formula example 
suppose recursive calls math dpll builds intermediate assignment rows 
provider invoked returns null math dpll backtracks exploring extension unsatis able avoids invoking provider call new literals added cause inconsistency 
instance case added literals purely propositional contain new variables 
theory intermediate consistency check split negatively ect global worst case performance 
practice sucient average pruning single split branch intermediate consistency check worth doing 
backjumping :10.1.1.15.6244
alternative optimization starts observations intermediate assignment checking 
branch containing con ict set unsatis able 
suppose provider modi ed return con ict set causing unsatis ability input assignment 
math dpll jump back search deepest branching point literal assigned truth value pruning search space 
example 
consider formula assignment example 
suppose math dpll generates order occurrence provider returns con ict set 
math dpll directly branching point branching rst 
learning 
provider returns con ict set clause added conjunction 
math dpll generate branch containing 
example 
example suppose provider returns con ict set 
clause added conjunction 
branch contains elements math dpll assign third alse unit propagation 
learning technique care may cause explosion size 
avoid introduce techniques discarding learned clauses necessary 
strictly related learning preprocessing technique described 
starting search small possible clauses combination non elementary literals provider run returns null added 
math dpll forced learn priori possible incompatibility constraints length preprocess step requires steps 
related extends previous decision procedures modal description logics sat procedures 
rst procedures modal logic description logic alc outperformed standard tableau translation procedures provided general schema sat procedures normal modal logic general formal framework build sat procedures sat procedures non normal modal logics :10.1.1.15.6244
optimized sat procedure sets disjunctive temporal constraints outperformed previous tableau procedures problem sat procedure sets disjunctive equalities non strict inequalities solve eciently problems domain resource planning :10.1.1.15.6244
procedures integrate dpll simplex lp tool accept non negated atomic constraints 
model checking community integrating obdds numerical information order handle complex veri cation problems 
integrated obdds quadratic constraint solver verify transition systems integer data values developed di erence decision diagrams obdd data structures handling boolean combinations temporal constraints verify timed systems developed library procedures combining obdds solver arithmetic verify nite state systems 
unfortunately approaches inherit obdds drawback requiring exponential space worst case 

armando giunchiglia 
sat procedures temporal reasoning 
proc 
european conference planning cp 

armando giunchiglia 
embedding complex decision procedures inside interactive theorem prover 
annals mathematics arti cial intelligence 

bayardo jr schrag 
csp look back techniques solve real world sat instances 
proc aaai pages 
aaai press 

biere cimatti clarke zhu 
symbolic model checking bdds 
proc 
cav 

bryant 
symbolic boolean ordered binary decision diagrams 
acm computing surveys september 

davis loveland 
machine program theorem proving 
journal acm 

giunchiglia giunchiglia sebastiani 
evaluation decision procedures modal logics 
proc 
sixth international conference principles knowledge representation reasoning kr trento italy 

giunchiglia giunchiglia 
sat decision procedures classical modal logics 
journal automated reasoning 
appear 

giunchiglia sebastiani 
applying davis putnam procedure non clausal formulas 
proc 
ai ia number lecture notes arti cial intelligence 
springer verlag 

giunchiglia sebastiani 
building decision procedures modal logics propositional decision procedures case study modal proc 
th conference automated deduction lnai new brunswick nj usa august 
springer verlag 

giunchiglia sebastiani 
sat decision procedure alc 
proc 
th international conference principles knowledge representation reasoning kr cambridge ma usa november 

giunchiglia sebastiani 
building decision procedures modal logics propositional decision procedures case study modal 
information computation october november 

horrocks patel schneider 
fact dlp 
proceedings international conference automated reasoning analytic tableaux related methods tableaux number lecture notes arti cial intelligence pages 
springer verlag 

henrik andersen jesper moeller jakob henrik 
fully symbolic model checking timed systems di erence decision diagrams 
proc 
workshop symbolic model checking smc federated logic conference floc trento italy july 

kautz mcallester bart selman 
encoding plans propositional logic 
proc 
kr 

roberto sebastiani villa 
sat decision procedures normal modal logics theoretical framework 
proc 
th international conference arti cial intelligence methodology systems applications number lnai bulgaria september 
springer verlag 

beame chan anderson notkin 
combining constraint solving symbolic model checking class systems non linear constraints 
proc 
cav volume lncs pages haifa israel june 
springer verlag 

wolfman weld 
lpsat engine application resource planning 
proc 
ijcai 


library composite symbolic representation 
proc 
tacas tools algorithms construction analysis systems volume lncs 
springer verlag 
