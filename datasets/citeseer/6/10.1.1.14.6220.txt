control effects typed continuation passing thielecke school computer science university birmingham birmingham tt united kingdom thielecke cs bham ac uk class continuations powerful computational effect allowing programmer express form jumping 
types effect systems reason continuations source language target language continuation passing transform 
establish connection effect system class continuations typed versions continuationpassing style 
region effect system determines local answer type continuations continuation transforms pure expressions parametrically polymorphic answer types 
polymorphism derive transforms effect information particular mixed linear non linear continuation passing transform expressions control effects passed continuations linearly 
categories subject descriptors programming languages formal definitions theory programming languages language con structs features general terms languages theory keywords continuations control effects type effect systems polymorphism 
transformation program continuation pass ing style cps control transfers jumps procedure calls explicit 
cps language compiling 
cps easy accommodate powerful control operators permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers lists requires prior specific permission fee 
popl january new orleans louisiana usa 
acm 
programming language including class continuations easily transformed cps 
modern programming languages tend advanced type systems increasingly type systems intermediate low level languages 
continuations quite different levels types play role source target language cps transform 
types continuation operators source call cc scheme proposed griffin incorporated new jersey dialect standard ml :10.1.1.26.6893
refinement types type effect systems fx programming language super imposes type effect discipline scheme language 
effect system originally concerned assignments gifford jouvelot extended control effects 
output cps transform highly stylized formalized types :10.1.1.44.7943
concretely ex pression type cps transform type ans ans typing refined ways part continuations folklore 
answer type polymorphism answer type assume free type variable relatively little abstractness answer type proof 
furthermore control operators fact quantify answer type variable vo naturality priori quite different property expression cps may enjoy equational reason ing possibly untyped setting 
suppose supply continuation expression continuation passing style 
may may supplying identity continuation wrapping 
say natural equation holds 
naturality holds expressions simply return current continuation may fail expressions control effects 
instance jumps discarding current continuation discard mk ax discard ax applied answer 
naturality possible notion purity 
different perspective con trol delimiters 
specifically felleisen defines control delimiter prompt passes identity continuation wraps current continuation answer naturality read insensitive insertion prompt sense linear continuation passing expression may continuation linearly linear function type indicates continuation passed linearly discard current continuation invoke multiple times 
linear continuation passing restricted languages control surprisingly idioms control con class adhere linearity 
absence control operators local answer type polymorphism naturality linearity easy see prove straightforward induction 
addition call cc source language break properties repair worst case continuation linearly answer types albeit free type variable expression natural 
contribution main contribution recover far possible properties cps transform presence call cc class continuations effect system source language 
technical side opens door bring parametricity machinery bear control effects 
practical side suggests effect systems statically deriving linearity cps code possibility stack allocation acti vation records 
outline section presents effect system control 
show regions source language relate answer type polymorphism target language cps transform section 
building answer type polymorphism modify cps transform parametricity arguments section 
pass continuations expressions control effects linearly show section 
section concludes 

control effect system define type effect system calculus call cc closely subset jouvelot gifford control effects 
effect systems effect system quite generic different kinds effects 
judgement type effect system ascribes expression context type effect effects typically form semilattice join operation element usually just finite sets 
effect represents absence effects expression effect said pure 
basic ideas application rule un leashes effects operator operand application may 
conversely abstraction rule delays effects body ab may turning latent effects happen procedure applied 
elide type region abstraction application expressions curry church style system 
example expression type vo rule vo written explicit type ab ao consider expressions source language type effect derivation term annotations reconstructed 
assume countable infinite sets type region variables 
range type variables range region variables 
set free type variables defined follows tyvar tyvar tyvar vp tyvar vo tyvar tyvar tyvar tyvar analogously set free regions defined follows reg reg reg reg reg reg vp reg reg vo control effects inference rule specific control call wth current operator call cc short 
call cc operation annotated effects places continuation thrown 
jouvelot gifford differentiate calling goto perspective effects amount non linearity 
drop goto annotations control effect simply finite set regions 
simplification consider fragment effect system effects singletons empty effect single region write singleton amounts effect joining operation partial defined cases oup pup restriction singleton effects type rule ca cc boils cases depending argument ca cc control effect call cc reg tyvar reg reg var 
vp 
voe vo 
weaken fh type effect system ca cc type effect rule call cc cc types note particular may contain free 
shown harper lillibridge adding operator call cc polymorphic calculus type system unsound rules polymorphism restricted value restriction standard ml avoids unsoundness 
restrict rules dealing polymorphism apply values 
usual values comprise abstractions variables constants case call cc ax call cc note operator ca cc value application argument ca cc course value 
briefly revisit soundness issue 
effect masking features effect system re effect masking rule masking 
suppose free intuitively communication effect side world shared variables return values type effect private far rest program concerned masked seen outside appears effect 
control effect system simple 
appears reasonably expressive regarding masking control effects 
examples consider small examples illustrate control effect masking 
instance downward second upward continuation 
example downward continuation consider ap plication possibly jumping function hw effect masked appears context 
supply required application ca cc kc cc hw assuming free control effect masked kc cc intuitively thrown ca cc discarded outside see expression evaluates appears pure 
example upward continuation consider ex pression free ca cc control effect masked free type expression 
suppose apply pure control effect masked ca cc ik iz iy alternatively suppose effectful expression iz 
ca cc ik iz iy region bound function type iz 
ca cc ik iz iy vp expression example harper lillibridge show unsoundness presence ca cc 
specifically type fresh type vari able ca cc ak 
ax ay type effect system defined quantify ca cc ak 
ax ay vo allowed type system application call cc value restriction sufficient avoid unsoundness 
discussed example region polymorphism effect masking quite analogous 
section explain terms answer type polymorphism 

effects polymorphism transform source language expressions cps effect judgements give finegrained typing transformed expressions 
basic cps transform starting point basic call value cps transform enriched call cc transforms standard continuations literature 
fischer style variant cps continuation comes transform function types symmetric way 
definition basic cps transform defined follows mn call cc ak kx ak ak 
mk ak ak ak kx basic cps transform works irrespective effects construct ignored delete applying cps transform 
operator call cc typically abstraction idiom call cc ah trans formed follows type system target language cps transform polymorphic calculus see 
definition assume region variable unique type variable cps transform types defined follows fresh ab vo vp transform types extends contexts evident way pointwise 
easy see lemma vo vo 
vop 
lemma region free type type variable free cps transformed type regions answer type polymorphism linked 
precisely proposition fresh proof 
proof induction effect derivation central step effect masking 
suppose masked free free induction hypothesis renaming bound variable fresh required judgement proposition states region determines local answer type 
masking control effects hiding region amounts quantifying local answer type 
example revisit example 
expression type transformed follows note shared effect forces answer types sme accepting continuation accepting continuation answer type required cps transformed expression typed 
example consider expression control effects expression type transformed follows az 
ax cps transformed judgement vo afx ai az 
ffm 
tyvar ffm ffn ff vo polymorphic typing target language continuation ki bound answer type sharing answer types due absence control effects 
example note answer type polymorphism exclude latent control effects simplest example variable latent control effect pbh ap 

xk kh vo example conversely effectful function may applied pure argument aaa ax cps transformation vo cps transform section effect information types judgements terms 
goal sections effects purity particular guide transform terms 

parametricity answer type polymorphism having established answer type polymorphism pure expressions aim restricted pure expression continuation 
considering map vo fresh answer type equality mk ax amounts naturality natural trans formation covariant horn functor identity functor 
ak naturality fundamental notions uniform 
naturality square weak induction hypothesis clear naturality supposed mean type example 
need general notion wellbehaved op specializes naturality effect masked 
relational parametricity pro vides notion 
property aiming essence basic instances reynolds isomorphism vo free 
basics parametricity recall basics parametricity prove wadler calls theorems free equational prop erties follow type expression 
follow pitts working directly syntax 
write relation relations 
define relation fm function maps relations relations 
define relation vt follows vt iff closed types relations 
environment maps type variables relations interpret type relation follows el rl tel vo define el rl el rl el rl hold environments mapping type variables relations closed types substitutions rr rr rr rr el rl case met rr el rl 
need lemma building expressions lemma relation compatible fol lowing sense iff moc andf ax free mm vo iff vo 
proof 
straightforward induction 
polymorphism naturality need answer type polymorphism pure expressions naturality typed pure expression meaningful supply identity top level continuation 
assume free 
instantiate affecting aa fact answer type polymorphism connection parametricity sucient naturality hold sense 
insert control delimiter front pure term affecting meaning 
consider prompts control operators inserting fect pointless 
motivation terms implementation prompt limits amount control information ma ca cc facilitating stack allocation 
proposition basis cps transform inserts control delimiter new region 
section ferent version control delimiters 
prompt wraps current continuation expression control delimiter works sz 
connection need lemma 
lemma va free proof 
environment mapping type variables relations closed types substitutions el need prove ma sz el vo closed types relation free el el el define relation iff fk hw kn sz sz kn vo hw met rr tel tl 
sx tel implies sx definition ofr xs sx required 
effect cps transform instantiating answer type polymorphic cps transform allows obtain complex cps transforms simpler ones 
particular instantiating answer type fi gives form continuation passing state passing transform 
observation generalize continuations monad state continuations monad 
state merely passed typed polymorphically 
need change transform expressions tl expansions may clearer state passed aks ax aks ak xs mk mn aks ams ansa cc aks ak fs fk ak xs xs particular type variable fi specialized continuation type giving composable continuations style danvy filinski call meta continuation passing style 
answer type polymorphism fact switch meta continuation passing style locally time effect masked cps transform 
definition effect cps transform de fined follows cc ak kx ak ak 
application xxs sx clause related danvy reset control operators 
considered issue reductions straightforward modify transform light danvy nielsen pass ps transform avoid generating administrative re done adding values applications 
proposition 

vo see sense cps transform amounts meta continuation passing consider typing answer type variable type get op op sx 
result shows sense effect cps transform agrees usual 
proposition vo proof 
proof induction derivation lemma 
clause effect masking need lemma 
example illustrates insertion con trol delimiters effect information useful implementation 
example consider transform ex pression call cc kh kx ky 
applied huge continuation keep live indefinitely kx ky keeps invoked fact control effect masked 
insert new region allowing cps transform delimit control cc refers sx benefit effect information insert control de evident combine lin ear continuation passing section 

effect linear non linear cps transform building effect cps transform aim section effect information pass continuations linearly control effects 
target language linear typing defined 
essentially target language studying linear continuation passing earlier barber plotkin dual intuitionistic linear logic 
addition usual intuitionistic application abstraction target language contains linear application linear abstraction passing continuations 
continuations linear arguments number times 
pure expression passed continuation linearly 
expression control effects passed continuation intuitionistically restrictions copying discarding 
continuation constrained passed linearly pass non linear function type system prevents 
interface linear non linear continuation passing meta continuations control delimiters 
effect cps transform defined effect judgements simply terms 
able write concisely abuse notation follows 
assume term type effect ascribed derivation writing dm eb 
effect annotations right hand side meant read guards determining clause chosen 
instance transform applications mn mn depends procedural value returned pure 
pure corresponding continuation passed linearly passed non linearly 
separate cases transform application 
definition cps transform defined terms 
corresponding cps transform types bb vo fresh vp 
ab pure function types transformed linear con transformers 
por transform proposition rp pb flap fresh 
consider case effect masking crucial part mixed linear non linear gps transform interfacing unrestricted continuation passing effectful expressions linear continuation passing pure expressions 
suppose control effect masked fm alp free rp pb flap si ot rp flap pin quantifying instantiating 
specialize flap fo om fh 
thi mo introducing linear state passing ab accepting con 
pb ab ab kx 
ss sx fb ss sx free fb quantify xx 
ss sx vo ab type required pure expression ss sx fx pfm 
pq af 
afm vo tyvar tyvar pfx pq fn afm fn vo target language linear typing ak kx kt kt ak ak kt kt ak ak ak 
ax 
ss sx effect linear non linear cps transform application ax 
ss sx amounts control delimiter expression passed composable continuation ax ss sx liberty discard copy 
outer portion continuation unaffected merely passed linearly 
relate mixed linear non linear cps transform linearity define translation simply forgets linearity sx ax non linear abstractions applications translation ax ax mn mn vo vo erasing linearity gives previous transform 
proposition example consider transforming expression cc ah hw continuation passing style values containing intuitively applied control jump past application application mask control effect application call cc 
hope pass continuation corresponding application linearly 
standard cps transform possible 
cc ak cc ak ak ah hw af 
fk appears twice application fk replace abstraction ak linear abstraction 
mixed linear non linear cps trans form effect masking inserts control delimiter qg xn nw qn xn nw pb 
xk 
nw 
composable continuation ax ss sx ca cc manipulated non linear fashion 
outer continuation corresponding application passed linearly 
works effect system guarantees control effects extend far application 
establishes connection control effects source answer type polymorphism target cps transform equational properties naturality answer type polymorphism connection polymorphism linearity meta continuation passing transform 
lets define cps transforms effect information 
main ideas linking effects cps summarized follows effect system polymorphic cps region answer type effect sharing constraint answer types purity quantified fresh answer type effect masking answer type simplified control effect system cps transform polymorphic calculus relevant study programming languages logical perspective specifically correspondence control opera tors classical logic :10.1.1.26.6893
logical level known cps transforms correspond double negation translations classical intuitionistic logic 
translations falsity arbitrary proposition answer type 
cps transforms defined precise different answer types quantification delimit extent classical reasoning proof 
related gifford jouvelot pioneered control effect systems continuation semantics consider typed cps 
establishing linearity presence call cc addresses loose ends left earlier linear continuation pass ing 
control delimiters studied felleisen danvy filinski similar aim confining control parts program 
nielsen defined selective cps trans form leaves expressions control effects direct style 
effect system contains regions effect masking 
harper lillibridge study cps transforms polymorphic ml languages 
concern polymorphism due source language additional binders introduced transform con sider 
fact source language poly morphism answer type polymorphism target cps transform 
banerjee heintze riecke encode tofte talpin region calculus polymorphic calculus 
remains seen approach combined 
directions considered simple source language remains extend results realistic lan guage 
effect masking extended 
typing store continuation passing transform require addition recursire types target language accommodate implicit mutual recursion procedure store types procedures passed stores contain pro 
presence recursion parametricity arguments subtle requiring strictness taken account 
problem need arguments continuations assumed strict 
establishing connections polymorphic cps operational semantics operational techniques developed pitts ful 
extending language direction research move closer machine 
polymorphic linear typing cps code deriving efficient representation control typed inter mediate assembly languages 
linear continuation passing eliminate dynamic checks imple shot continuations 
starting mixed linear non linear cps transform possible derive implementation continuations expressions control effects stack allo cated continuations expressions control effects allocated stack regions 
acknowledgments josh discussions anonymous referees yang spotting typos 

amal ahmed david walker 
logical approach stack typing 
acm sigplan workshop types language design implementation 
andrew appel 
compiling continuations 
cambridge university press 
anindya banerjee nevin heintze jon riecke 
region analysis polymorphic lambda calculus 
proceedings fourteenth annual ieee symposium logic computer science pages 
josh peter hearn reddy thielecke 
linear continuation passing 
higher order symbolic computation 
carl bruggeman oscar waddell kent dybvig 
representing control presence shot continuations 
acm notices may 
olivier danvy 
formalizing implementation strategies class continuations 
gert smolka editor programming languages systems th european symposium programming esop number lncs pages 
springer verlag 
olivier danvy andrzej filinski 
representing control study cps transformation 
mathematical structures computer science december 
olivier danvy nielsen 
order pass cps transformation 
foundations software science computation structures fossacs number lncs 
springer 
bruce duba robert harper david macqueen 
typing class continuations ml 
principles programming languages popl pages 
acm january 
matthias felleisen 
theory practice class prompts 
principles programming languages popl pages 
acm january 
carsten 
varieties effects 
foundations software science computation structures fossacs volume lncs pages 
springer 
timothy griffin :10.1.1.26.6893
formulae types notion control 
principles programming languages popl pages 
acm 
robert harper mark lillibridge 
polymorphic type assignment cps conversion 
olivier danvy carolyn talcott editors proceedings acm sigplan workshop continuations cw pages 
department computer science stanford university june 
published technical report stan cs 
robert harper mark lillibridge 
explicit polymorphism cps conversion 
principles programming languages popl pages 
acm 
pierre jouvelot david gifford 
reasoning continuations control effects 
language design implementation pldi pages 
acm 
richard kelsey william clinger jonathan rees editors 
revised report algorithmic language scheme 
higher order symbolic computation 
john lucassen david gifford 
polymorphic effect systems 
principles programming languages popl pages 
acm 
saunders mac lane 
categories working mathematician 
springer verlag 
albert meyer mitchell wand :10.1.1.44.7943
continuation semantics typed lambda calculi summary 
rohit parikh editor logics programs number lecture notes computer science pages 
springer verlag 
robin milner mads torre robert harper david macqueen 
standard ml revised 
mit press 
greg david walker karl crary neal 
system typed assembly language 
principles programming languages popl pages 
acm 
nielsen 
selective cps transformation 
th annual conference mathematical foundations programming semantics mfps number entcs 
elsevier 
andrew pitts 
parametric polymorphism operational equivalence 
mathematical structures computer science 
john reynolds 
types abstraction parametric polymorphism 
mason editor information processing pages amsterdam 
elsevier science publishers 
north holland 
jon riecke thielecke 
typed exceptions continuations macro express 
proceedings th international colloquium automata languages programming icalp volume lncs pages 
springer verlag 
guy steele 
rabbit compiler scheme 
technical report ai tr artificial intelligence laboratory massachusetts institute technology may 
mads tofte jean pierre talpin 
implementation typed call value lambda calculus stack regions 
principles programming languages popl pages 
acm 
philip 
theorems free 
th international conference functional programming computer architecture fpca pages 
acm 
