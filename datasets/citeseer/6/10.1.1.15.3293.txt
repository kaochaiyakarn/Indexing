polyglot extensible compiler framework java nathaniel nystrom michael clarkson andrew myers cornell university nystrom clarkson cs cornell edu 
polyglot extensible compiler framework supports easy creation compilers languages similar java avoiding code duplication 
polyglot framework useful domain specific languages exploration language design simplified versions java pedagogical 
polyglot implement major minor modifications java cost implementing language extensions scales degree language differs java 
focuses design choices polyglot important making framework usable highly extensible 
polyglot source code available 
domain specific extension modification existing programming language enables concise maintainable programs 
programmers construct domainspecific language extensions infrequently building maintaining compiler onerous 
better technology needed 
presents methodology construction extensible compilers application methodology implementation polyglot compiler framework creating extensions java 
language extension modification useful reasons security 
systems enforce security language level may find useful add security annotations rule unsafe language constructs 
static checking 
language extended support annotations necessary static verification program correctness powerful static checking program invariants heuristic methods 
language design 
implementation helps validate programming language designs 
optimization 
new passes may added implement optimizations performed base compiler permitted base language specification 
style 
language features idioms may deemed violate style may easy detect simple syntactic analysis 
teaching 
students may learn better language expose difficult features inner classes confusing error messages 
research supported part darpa contract monitored usaf rome laboratory part onr part nsf awards 
views interpreted representing policies endorsement nsf darpa afrl 
refer original unmodified language base language call modified language language extension backwards compatible 
developing compiler language extension clearly desirable build existing compiler base language 
simplest approach copy source code base compiler edit place 
may fairly effective base compiler carefully written duplicates code 
changes base compiler fix bugs may difficult apply extended compiler 
considerable discipline code compilers diverges leading duplication effort 
approach different polyglot framework implements extensible compiler base language java 
framework written java default simply semantic checker java 
programmer implementing language extension may extend framework define necessary changes compilation process including syntax tree ast semantic analysis 
important goal polyglot scalable extensibility extension require programming effort proportional magnitude difference extended base languages 
adding new ast node types new compiler passes require writing code size proportional change 
language extensions require uniformly adding new fields methods ast node subclasses require uniform mixin extension implementable subclassing extended node classes 
scalable extensibility challenge difficult simultaneously extend types procedures manipulate 
existing programming methodologies visitors improve extensibility complete solution 
methodology supports extension compiler passes ast nodes including mixin extension 
methodology uses factories delegation proxies permit greater extensibility code reuse previous extensible compiler designs 
polyglot implement dozen java language extensions varying complexity 
experience polyglot suggests useful framework developing compilers new java languages 
complex extensions implemented jif extends java security types regulate information flow adds bounded parametric polymorphism java extends java pattern matching iteration features 
compilers built polyglot extensible complex extensions jif extended 
framework difficult learn users able build interesting extensions java day starting polyglot 
polyglot source code available 
rest structured follows 
section gives overview polyglot compiler 
section describes detail methodology providing scalable extensibility 
polyglot features writing extensible compiler convenient described section 
experience polyglot system build various languages reported section 
related extensible compilers macro systems discussed section conclude section 
www cs cornell edu projects polyglot ext source code extended parser polyglot overview ext ast scheduled compiler passes fig 

polyglot architecture java ast serialized type info code generation bytecode serialized type info section presents overview various components polyglot describes extended implement language extension 
example small extension illustrate process 
architecture polyglot extension source source compiler accepts program written language extension translates java source code 
may invoke java compiler javac convert output bytecode 
compilation process offers opportunities language extension implementer customize behavior framework 
process including eventual compilation java bytecode shown fig 

name ext stands particular extended language 
step compilation parsing input source code produce ast 
polyglot includes extensible parser generator allows implementer define syntax language extension set changes base grammar java 
provides grammar inheritance add modify remove productions symbols base grammar 
implemented preprocessor cup lalr parser generator 
extended ast may contain new kinds nodes represent syntax added base language record new information ast 
new node types added implementing node interface optionally subclassing existing node implementation 
core compilation process series compilation passes applied syntax tree 
semantic analysis translation java may comprise passes 
pass scheduler selects passes run ast single source file order defined extension ensuring dependencies source files violated 
compilation pass successful rewrites ast producing new ast input pass 
analysis passes type checking may halt compilation report errors rewriting ast 
language extension may modify base language pass schedule adding replacing reordering removing compiler passes 
rewriting process entirely functional compilation passes destructively modify ast 
details methodology described section 
compilation passes objects define important characteristics source target languages 
type system object acts factory objects tracked class file throws ioexception 
int read throws ioexception 
void close 
free fig 

example representing types related constructs method signatures 
type system object provides type checking functionality 
node factory constructs ast nodes extension 
extensions rely intermediate language multiple type systems node factories may compilation 
compilation passes complete usual result java ast 
java compiler javac invoked compile java code bytecode 
bytecode may contain serialized extension specific type information enable separate compilation discuss separate compilation detail section 
example motivate design describe simple extension java supports resource management facilities vault language 
language called challenge extensible compilers substantial changes syntax semantics java requires identical modifications ast node types 
allows linear capability key associated object 
methods object may invoked key held 
key allocated object created deallocated free statement method object 
type system regulates allocation freeing keys guarantee statically keys deallocated 
fig 
shows small program declaring class guarantees program read closed reader 
annotation tracked line associates key named instances 
pre post conditions method constructor signatures written brackets specify set held keys changes invocation 
example line precondition indicates key need held invoke constructor postcondition specifies held constructor returns normally 
close method line frees key subsequent method requires invoked 
extension example section 
implemented adding new compiler passes computing checking held key sets program point 
free statements additional type annotations implemented adding new ast nodes extending existing nodes passes 
methodology scalable extensibility goal mechanism supports scalable extension syntax semantics base language 
programmer effort required add extend pass proportional number ast nodes non trivially affected pass effort required add extend node proportional number passes node implement interesting way 
extending overriding behavior existing ast nodes necessary extend node class subclass 
instance extension adds identical pre post condition syntax methods constructors avoid code duplication annotations added common base class method constructor nodes 
programmer effort changes constant irrespective number subclasses base class 
inheritance appropriate mechanism adding new field method single class 
adding member different classes quickly tedious 
true languages multiple inheritance new subclass created class affected change 
modifying subclasses requires making identical changes subclass 
mixin extensibility key goal methodology change affects multiple classes require code duplication 
compilers written object oriented languages implement compiler passes visitor design pattern 
visitors problems scalable extensibility 
non extensible compiler set ast nodes usually fixed 
visitor pattern permits scalable addition new passes sacrifices scalable addition ast node types 
allow specialization visitor behavior ast node type visitor visitor class implements separate callback method node type 
adding new kind ast node requires modifying existing visitors insert callback method node 
visitors written knowledge new node new node implement callback 
visitor pattern provide mixin extensibility 
separate mechanism needed address problem 
alternative visitor pattern ast node class implement method compiler pass 
technique suffers dual problem adding new pass requires adding method existing node types 
remainder section presents mechanism achieves goal scalable extensibility 
describe approach providing mixin extensibility 
show solution addresses aspects scalable extensibility 
node extension objects delegates implement passes methods associated ast node objects provide scalable extensibility introduce delegation mechanism illustrated fig 
enables orthogonal extension method override nodes 
subclassing node classes adequately address orthogonal extension methods classes multiple subclasses add node object field labeled ext fig 
points possibly null node extension object 
extension object provides implementations new methods fields extending node interface subclassing 
members accessed ext pointer casting extension object type 
example extends node methods 
ast node class extended implementation members uses node typecheck 
print 
node del ext node typecheck 
print node print 

ext fig 

delegates extensions del possible extension node extension object class 
node classes orthogonally extended single implementation avoiding code duplication 
language extensions extended extension object ext field similar located node object 
effect node extension object considered single node 
extension objects adequately handle method override base language extended multiple times 
problem node extension objects implement overridden method mechanism needed invoke correct implementation 
possible solution problem introduce delegate object method node interface 
method field node points object implementing method 
calls method delegate object language extensions override method simply replacing delegate 
delegate may implement method may invoke methods node node extension objects 
maintaining object method cumbersome solution polyglot combine delegate objects introduce single delegate field node object illustrated del field fig 

field points object implementing entire node interface default node 
override method language extension writer creates new delegate object containing new implementation code dispatch new implementation 
delegate implements node methods dispatching back node 
extension objects contain del field override methods declared extension object interface 
calls node methods del pointer ensuring correct implementation method invoked delegate object replaced language extension 
example node typecheck method invoked del typecheck method invoked node ext pointer invoking extension object delegate ext del 
extension replace extension object delegate override methods declared extension replace node delegate override methods node 
access type checking functionality new node delegate may subclass node delegate class may contain pointer old delegate object 
overhead del pointer accounts total compilation time 
ast passes polyglot structured functional ast rewriting passes 
factoring ast traversal code eliminates need duplicate code implementing new passes 
pass implements ast rewriter object traverse ast invoke pass method node 
node rewriter invokes method recursively rewrite node children rewriter reconstruct node children modified 
key implementation detail node reconstructed node cloned clone returned 
cloning ensures class members added language extensions correctly copied new node 
node delegates extensions cloned node 
rewriter implements enter leave methods take node argument 
enter method invoked rewriter recurses node children may return new rewriter rewriting children 
provides convenient means maintaining symbol table information rewriter crosses lexical scopes programmer need write code explicitly manage stack scopes eliminating potential source errors 
leave method called visiting children returns rewritten ast rooted node 
scalable extensibility language extension may extend interface ast node class extension object interface 
new pass method added extension object interface rewriter class created invoke method node 
nodes single extension object class implemented define default behavior pass typically just identity transformation ast node 
class overridden individual nodes non trivial performed pass 
change behavior existing pass node programmer creates new delegate class implementing new behavior associates delegate node construction time 
extension classes delegate class may different ast node classes allowing functionality added node classes arbitrary points class hierarchy code duplication 
new kinds nodes defined new node classes existing node types extended adding extension object instances class 
factory method new node type added node factory construct node necessary delegate extension objects 
new node inherits default implementations compiler passes base class extension base class 
new node may provide new implementations method override possibly delegation 
methods need overridden passes need perform non trivial node type 
fig 
shows portion code implementing key checking pass checks set keys held control enters node 
code simplified interests space clarity 
node ast pass invokes del pointer method extension passing set held keys computed previous data flow analysis pass 
ast nodes affected key checking pass default method class extends rewriter node leave node ext del held keys return class node node del void set held keys empty class extends void set held keys node callee 
held keys error held fig 

key checking implemented base class nodes 
nodes non trivial implementation key checking required 
fig 
contains extension class compute held keys method constructor calls 
interface implemented classes ast nodes invoke methods constructors method calls new expressions explicit constructor calls super 
nodes implement method identically 
extension object need write code 
implementation details section consider aspects polyglot implementation directly related scalable extensibility 
data flow analysis 
polyglot provides extensible data flow analysis framework 
java implementation framework check variables initialized statements reachable extensions may perform additional data flow analyses enable optimizations perform transformations 
polyglot provides rewriter base compiler framework constructs controlflow graph program 
intraprocedural data flow analyses performed graph implementing meet transfer functions analysis 
separate compilation 
java compilers type information stored java class files support separate compilation 
extensions standard java type information class file insufficient 
polyglot injects type information class files read invocations compiler provide separate compilation 
code need written language extension functionality extended types 
performing java code generation polyglot uses java serialization facility encode type information class string compressed inserted final static field ast class serialized 
compiling class time class encountered polyglot loads class file referenced class extracts serialized type information 
type information decoded may immediately extension 

generate java output language extensions translate asts java asts rely code generator base compiler output java code 
enable ast rewriting extend polyglot java parser ability generate ast string java code collection ast nodes substitute generated ast 
feature provides benefits scheme 
experience dozen extensions varying sizes implemented polyglot example jif java extension provides information flow control features ensure confidentiality integrity data 
jif split extension jif partitions programs multiple hosts security requirements 
java extension supports bounded parametric polymorphism 
param extension provides support parameterized classes 
extension complete language includes code implementing lazy substitution type parameters 
jif extend param 
java extension supports pattern matching logic programming features 
previously described adds resource management facilities java 
pao primitives objects allows primitive values transparently objects automatic boxing unboxing covariant return extension restores subtyping rules java beta return type method covariant subclasses 
language changed final version java require invariance return types 
major extensions add new syntax substantial changes language semantics 
describe changes jif detail 
simpler extensions support covariant return types require localized changes 
jif jif extension java permits static checking information flow policies 
jif type variable may annotated label specifying set principals data set principals permitted read data 
labels checked compiler ensure information flow policies violated 
base polyglot parser extended recognize security annotations new statement forms 
new ast node classes added labels new statement expression forms concerning security checks 
new ast nodes nearly existing ast nodes extended security context annotations 
new fields added jif extension class 
implement information flow checking method declared jif extension object 
nodes pass inherit default implementation declared base jif extension class 
extension objects installed expression statement nodes override method implement security typing judgment node 
delegates override type checking ast nodes disallow static fields inner classes may provide avenue information leaks 
label checking jif ast translated java ast largely erasing security annotations 
new statement expression forms rewritten java syntax facility discussed section 
jif split extends jif partition programs multiple hosts security requirements 
syntax jif modified slightly support integrity annotations 
new passes implemented extension objects partition jif split program jif programs run separate host 
extension java supports parametric polymorphism 
classes interfaces may declared zero type parameters constrained clauses 
base java parser extended ast node classes added clauses new type syntax 
ast node class declarations extended inheritance allow type parameters clauses 
type system customizes behavior base java type system introduces judgments parameterized instantiated types 
new pass introduced check types parameterized class instantiated satisfy constraints parameter described 
base compiler code generator extended generate code source class adapter class instantiation parameterized class 
results measure programmer effort required implement extensions discussed sizes code extensions shown table 
eliminate bias due length identifiers source sizes number tokens source files including java cup files 
results demonstrate cost implementing language extensions scales degree extension differs base language 
simple extensions covariant return extension differ java small localized table 
extension size extension token count percent base polyglot base polyglot jif pao param covariant return empty ways implemented writing small amounts code 
measure overhead simply creating language extension implemented empty extension changes java language overhead includes empty subclasses base compiler node factory type system classes empty parser specification code allocating subclasses 
large changes type system code generation requires half code base java compiler 
historical reasons generates code overriding polyglot code generator directly output java 
size code reduced 
jif requires large amount extension code label checking jif complex java type checking extends 
overhead accounted extensive changes add complex statement expression translations 
point comparison base polyglot compiler implements java java compiler javac nearly size measured tokens 
base polyglot compiler implementation reasonably efficient 
fair javac count code bytecode generation 
base polyglot compiler consists interfaces separate interface hierarchy class hierarchy 
javac compiler implemented way 
implementing small extensions proved fairly easy 
asked programmer previously unfamiliar framework implement covariant return type extension took day 
programmer implemented small extensions days 
discussion implementing polyglot surprisingly application objectoriented design principles greatly enhances polyglot extensibility 
rigorous separation interfaces classes permit implementations easily extended replaced calls interfaces ensure framework bound particular implementation interface 
polyglot framework exclusively uses factory methods create objects giving language extensions freedom change implementation provided base compiler avoiding explicitly tying code particular class 
chose implement polyglot standard java features clear language extensions implemented polyglot easier implement polyglot 
multimethods simplified dispatching mechanism needed methodology 
open classes provide cleaner solution extensibility problem particularly conjunction multimethods 
aspect oriented programming technique adding overriding methods existing class hierarchy 
hierarchically extensible datatypes functions offer solution extensibility problem 
multiple inheritance particular mixins facilitate application extension ast nodes 
built support translation efficient need support target languages introduce difficulties 
covariant modification method return types eliminate unnecessary type casts parametric polymorphism 
related related polyglot including extensible compilers macro systems visitor patterns 
jaco extensible compiler java written extended version java supports ml style pattern matching 
jaco provide mixin extensibility 
relies new language feature extensible algebraic datatypes address difficulty handling new data types changing existing code 
polyglot achieves scalable extensibility relying features available java 
cosy framework combining compiler phases create optimizing compiler 
compiler phases added reused multiple contexts changing existing code 
framework designed syntax extension 
suif compiler data structures extended annotations similar polyglot extension objects new annotations ignored existing compiler passes 
meta programming environment similar extension mechanism 
suif mechanism polyglot delegate objects mix method overrides 
compiler framework uses aspect oriented programming add methods fields ast node class hierarchy implement new passes override existing passes 
ast node hierarchy may extended inheritance duplicate code may need written pass support new nodes 
macro systems preprocessors generally concerned syntactic extensions language 
systems java include epp 
maya generalization macro systems uses generic functions multimethods allow extension java syntax 
semantic actions defined multimethods generic functions 
clear systems scale support semantic checking large extensions base language 
jakarta tools suite jts toolkit implementing java preprocessors create domain specific languages 
extensions base language encapsulated components define syntax semantics extension 
fundamental difference jts polyglot jts concerned primarily syntactic analysis extension language semantic analysis section 
jts macro system macros defined extending compiler declaring source code 
openjava uses meta object protocol mop similar java reflection api allow manipulation program structure 
openjava allows limited extension syntax mop exposes semantic structure program 
original visitor design pattern led refinements 
extensible visitors staggered visitors enhance extensibility visitor pattern facilitate adding new node types refinements mentioned support mixin extensibility 
staggered visitors rely multiple inheritance extend visitors support new nodes 
original motivation developing polyglot compiler framework simply provide publicly available java front easily extended support new languages 
discovered existing approaches extensible compiler construction java solve satisfaction problem scalable extensibility including mixins 
extended visitor methodology simple improves previous solutions extensibility problem 
polyglot features extensible parsing pass scheduling type signature insertion useful 
experience polyglot shown effective way produce compilers java languages 
framework significant language extensions modify java syntax semantics complex ways 
hope public release software source code form facilitate experimentation new features object oriented languages 

martin alt uwe mann hans van someren 
cosy compiler phase embedding cosy compiler model 
peter fritzson editor proceedings th international compiler construction conference cc volume lecture notes computer science pages edinburgh uk april 

jason baker wilson hsieh 
maya multiple dispatch syntax extension java 
proc 
acm sigplan conference programming language design implementation pldi pages berlin germany june 

don batory yannis smaragdakis 
jts tools implementing domainspecific languages 
proceedings fifth international conference software reuse pages victoria bc canada 
ieee 

gilad bracha 
programming language jigsaw mixins modularity multiple inheritance 
phd thesis university utah 

craig chambers 
object oriented multi methods cecil 
ole lehrmann madsen editor proceedings th european conference object oriented programming ecoop volume pages berlin heidelberg new york tokyo 
springer verlag 

curtis clifton gary leavens craig chambers todd millstein 
multijava modular open classes symmetric multiple dispatch java 
oopsla conference object oriented programming systems languages applications minneapolis minnesota volume pages 

robert deline manuel hndrich 
enforcing high level protocols low level software 
proceedings acm conference programming language design implementation pages june 

dawson engler benjamin chelf andy chou seth hallem 
checking system rules system specific programmer written compiler extensions 
proceedings fourth usenix symposium operating systems design implementation san diego california october 

robert bruce findler cormac flanagan matthew flatt shriram krishnamurthi matthias felleisen 
drscheme pedagogic programming environment scheme 
proc 
international symposium programming languages implementations logics programs pages 

cormac flanagan rustan leino mark lillibridge greg nelson james saxe raymie stata 
extended static checking java 
proc 
acm sigplan conference programming language design implementation pldi pages berlin germany june 

matthew flatt shriram krishnamurthi matthias felleisen 
classes mixins 
conference record popl th acm sigplan sigact symposium principles programming languages san diego california pages new york ny 

keith 
java syntactic extender 
proceedings conference object oriented programming systems languages applications oopsla pages tampa fl usa 

erich gamma richard helm ralph johnson john vlissides 
design patterns elements reusable object oriented software 
addison wesley reading ma 

james gosling bill joy guy steele 
java language specification 
addison wesley august 
isbn 

carl gunter john mitchell editors 
theoretical aspects object oriented programming 
mit press 

rel eva magnusson 
aspect oriented compiler construction system 
science computer programming november 

scott hudson frank flannery scott dan wang andrew appel 
cup lalr parser generator java 
software release 
www cs princeton edu appel modern java cup 

yves 
extensible java preprocessor kit tiny data parallel java 
proc 
lncs pages 
springer 

richard kelsey william clinger jonathan rees editors 
revised report algorithmic language scheme 
acm sigplan notices october 
available www org documents standards rs 

gregor kiczales john lamping anurag mendhekar chris maeda cristina lopes jean marc loingtier john irwin 
aspect oriented programming 
proceedings th european conference object oriented programming ecoop number lecture notes computer science pages jyv skyl finland june 
springer verlag 

joseph elaine 
java pre processor 
technical report cs tr california institute technology pasadena ca september 

shriram krishnamurthi matthias felleisen daniel friedman 
synthesizing objectoriented functional design promote re 
proc 
ecoop pages 

gary leavens rustan leino erik poll clyde ruby bart jacobs 
jml notations tools supporting detailed design java 
oopsla companion pages minneapolis minnesota 

todd millstein colin craig chambers 
modular typechecking hierarchically extensible datatypes functions 
proc 
th acm sigplan international conference functional programming icfp pages philadelphia pa usa october 

andrew myers 
jflow practical static information flow control 
proc 
th acm symp 
principles programming languages popl pages san antonio tx january 

andrew myers joseph bank barbara liskov 
parameterized types java 
proc 
th acm symp 
principles programming languages popl pages paris france january 

andrew myers liu 
pattern matching java 
proc 
th int symp 
practical aspects declarative languages new orleans la january 

martin odersky philip wadler 
pizza java translating theory practice 
proc 
th acm symp 
principles programming languages popl pages paris france january 

terence parr russell quong 
antlr predicated ll parser generator 
journal software practice experience 

john reynolds 
user defined types procedural data structures complementary approaches data abstraction 
stephen editor new directions algorithmic languages pages 
institut de recherche informatique automatique le chesnay france 
reprinted pages 

richard snodgrass 
system 
software release 
located ftp ftp cs arizona edu august 

richard snodgrass karen shannon 
supporting flexible efficient tool integration 
proceedings international workshop advanced programming environments number lecture notes computer science pages trondheim norway june 

sun microsystems 
java language specification version beta edition october 
available ftp ftp javasoft com docs ps zip 

shigeru chiba marc oliver 
openjava class macro system java 
walter robert stroud francesco editors reflection software engineering lncs pages 
springer verlag july 

vlissides 
visitors frameworks 
report november 

wilson french wilson amarasinghe anderson tjiang 
liao 
tseng hall lam hennessy 
suif infrastructure research parallelizing optimizing compilers 
sigplan notices 

steve zdancewic zheng nathaniel nystrom andrew myers 
untrusted hosts confidentiality secure program partitioning 
proc 
th acm symp 
operating system principles sosp pages banff canada october 

matthias zenger martin odersky 
extensible algebraic datatypes defaults 
proc 
th acm sigplan international conference functional programming icfp firenze italy september 

matthias zenger martin odersky 
implementing extensible compilers 
ecoop workshop multiparadigm programming object oriented languages budapest hungary june 
