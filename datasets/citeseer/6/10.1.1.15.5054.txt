software practice experience softw 
pract 
exper 
prepared cl version taxonomy survey grid resource management systems distributed computing klaus rajkumar buyya maheswaran advanced networking research laboratory department computer science university manitoba canada school computer science software engineering monash university melbourne australia summary resource management system central component distributed network computing systems 
projects focused network computing designed implemented resource management systems variety architectures services 
model comprehensive taxonomy describing resource management architectures developed 
taxonomy identify approaches followed implementation existing resource management systems large scale network computing systems known grids 
taxonomy survey results identify architectural approaches issues fully explored research 
key words distributed computing grids resource management scheduling taxonomies 
distributed network computing nc system virtual computer formed networked set heterogeneous machines agree share local resources 
grid large scale generalized distributed nc system scale internet size environments machines distributed multiple organizations administrative domains 
emergence variety new applications demand grids support ecient data resource management mechanisms 
designing grid architecture meet requirements challenging due issues :10.1.1.34.281
issues supporting mail ca com ca received oj june copyright john wiley sons revised september buyya maheswaran adaptability extensibility scalability allowing systems different administrative policies inter operate preserving site autonomy allocating resources supporting quality service meeting computational cost constraints 
grid efficiently support variety applications resource management system rms central operation address issues addition issues fault tolerance stability 
rms manages pool resources available grid scheduling processors network bandwidth disk storage 
grid pool include resources different providers requiring rms hold trust resource providers 
maintaining required level trust hinder efficiency rms increasing overhead basic operations 
resource providers may participate grid unconditionally may different policies govern resources grid resources meet local resource demands 
responsibility rms ensure handles various resources adhering different usage policies 
different administrative policies resource heterogeneity expected proportions grid may necessary employ federation rmss single rms 
rmss federation interoperate agreed set protocols manage resources 
applications may directly indirectly request resources grid 
resource requests considered jobs grid 
depending application job may specify quality service qos requirements accept best effort service levels 
rms required perform resource management decisions maximizing qos metrics delivered clients jobs qos constraints 
practice grid rms may required handle different jobs different policies 
example jobs may require qos support may require best effort processing 
general requiring rms support multiple policies compel scheduling mechanisms solve multi criteria optimization problem 
model succinctly captures essential components functions grid rms 
significance different components functions model discussed 
taxonomy classifies approaches form design space various components model 
taxonomy illustrated applying categorize approaches taken selected set existing grid rmss 
application taxonomy reveals areas researched fully 

related distributed computing scheduling taxonomy 
taxonomy includes static scheduling techniques addressed taxonomy 
consider scheduling state estimation resource models separately classifying dynamic scheduling 
taxonomy dynamic scheduling considers aspects resource management scheduling state estimation 
taxonomy provides classification resource models examines scheduling state estimation finer level 
advances distributed resource management publication incorporated taxonomy 
copyright john wiley sons softw 
pract 
exper 
prepared cl taxonomy survey grid rms grid systems computational grid data grid service grid distributed supercomputing high throughput demand collaborative multimedia 
grid systems taxonomy 
taxonomy heterogeneous computing environments 
taxonomy covers application model target platform model mapping heuristic model 
application models covered taxonomy differentiation target platform model focus issues relevant designers rmss issues relevant application toolkit designers 
taxonomies characterizing distributed system 
em taxonomy classifies heterogeneous computing system number execution modes machine models 
extended version taxonomy developed characterize scheduling algorithms heterogeneous computing systems 
taxonomy focused rms design issues differs taxonomies 
taxonomy provides broad characterization external interfaces internal system design class hardware software resource support resource management issues 
taxonomy rms detailed 

grid system taxonomy design objectives target applications grid motivate architecture rms 
groups design objectives themes improving application performance data access enhanced services 
themes grid systems placed categories shown 
computational grid category denotes systems higher aggregate computational capacity available single applications capacity constituent machine system 
depending capacity utilized systems subdivided distributed supercomputing high throughput categories 
distributed supercomputing grid executes application parallel multiple machines reduce completion time job 
typically applications require distributed supercomputing grand challenge problems weather modeling nuclear simulation 
high throughput grid increases completion rate stream jobs suited parameter sweep type applications monte carlo simulations tt 
copyright john wiley sons 
pract 
exper 
prepared cl buyya maheswaran data grid category systems provide infrastructure synthesizing new information data repositories digital libraries data warehouses distributed wide area network 
computational grids need provide data services major difference data grid computational grid specialized infrastructure provided applications storage management data access 
computational grid applications implement storage management schemes grid provided services 
typical applications systems include special purpose data mining correlates information multiple different data sources 
data grid initiatives european datagrid project globus working developing large scale data organization catalog management access technologies :10.1.1.32.6963
service grid category systems provide services provided single machine 
category subdivided demand collaborative multimedia grid systems 
collaborative grid connects users applications collaborative workgroups 
systems enable real time interaction humans applications virtual workspace 
demand grid category dynamically aggregates different resources provide new services 
data visualization workbench allows scientist dynamically increase fidelity simulation allocating machines simulation example demand grid system 
multimedia grid provides infrastructure real time multimedia applications 
requires supporting qos multiple different machines multimedia application single dedicated machine may deployed qos :10.1.1.21.1251
ongoing research activities developing grid systems fall categories 
development truly general purpose grid systems support multiple categories remains hard problem 

rms definitions requirements section develops model resource management systems outline different architectural choices existing upcoming rmss 
keep model compact core functions rms included 
essential definitions key resource management issues describing proposed model 
grids resource reusable entity employed fulfill job resource request 
machine network service synthesized combination machines networks software 
resource provider defined agent controls resource 
example resource broker acts resource provider resource provide consumers value added resource 
similarly resource consumer defined agent controls consumer 
resource management system defined service provided distributed nc system manages pool named resources available nc system job centric performance metric optimized 
due issues extensibility adaptability site autonomy qos allocation resource management grid systems challenging traditional distributed computing environments 
addition issues scalability copyright john wiley sons softw 
pract 
exper 
prepared speauth cls taxonomy survey grid rms responsiveness fault tolerance stability encountered rmss traditional grid rmss deal issues arise due distributed ownership resources 
issue may addressed differently dce grid rmss 
example traditional dce rmss may conserving grid rmss may conserving 
grids due resource heterogeneity security concerns may best execute job subset resources 
example way qos issue handled 
traditional typically span single administrative domain handle jobs originate clients belong organization 
qos implemented systems certain extent job priorities 
grid jobs different owners providing qos challenging 
essential rms consider jobs access privileges type subscription resource requirements determining level qos 
depending type qos assurances contract may formed rms job 
contract assurances rms may contingent job operating predefined resource limits 
order forge meaningful contract expected resource usage job determined 
accurately predicting resource requirements network applications remains hard problem 
job overruns resource usage predictions rms ensure resource allocations jobs grid rmss provide isolation jobs fair resource management 
general grid application components different components mapped different resources 
situations rms global abstraction application allocate resources 
abstraction able handle various application requirements allocation qos deadlines 

rms model experience large scale network computing systems shown efficient application system performances necessarily 
specifically may possible scheduler optimize application system performances 
solution multi layer rms 
example application scheduler apples conjunction resource scheduler globus form layer rms :10.1.1.25.8254
due expected scale grid systems grid rms interconnection various rmss cooperating accepted framework 
shows block diagram system multiple interconnected rmss rms having multiple levels 
user applications services grid toolkits implement functionality 
grid toolkits rms service interfaces suitable application layer abstractions 
model represent different instances rmss different layers instance 
different instances may implement model distinctly 
shows model core functions supported rms 
model intended generic specialized application specific manager resource specific manager 
model contains functional units interfaces rce mer tfa rc po tfa rp ge copyright john wiley sons softw 
pract 
exper 
prepared cl buyya maheswaran consumers grid toolkits support resources 
rms system context 
support interface resource manager peer interface 
resource consumers interface rci actual applications rms implements higher layer 
similarly resource provider interfaces rpi actual resource rms implements lower layer 
support functions naming security essential operation rms interface 
needed support functions may interface 
provides protocols interconnect rmss 
protocols including resource discovery resource dissemination trading resolution allocation may supported 
resource dissemination discovery protocols provide way rms determine state resources managed rmss interoperate 
resource dissemination protocol provides information resources pointer information server 
resource discovery protocol provides mechanism resource information demand 
rms architectures distinction protocols 
example rms replicated network directory contains resource information 
resource dissemination protocol implemented directory replication protocol 
resource discovery function consist searching nearest network directory 
alternatively grid maintain central network directory dissemination consists advertising resource status discovery consists querying central directory 
resource dissemination discovery protocols rmss resource trading protocols :10.1.1.111.8497
typically trading protocols encapsulate resource capabilities statuses price 
resource trading takes place price differentials 
price may fixed auctioning mechanisms price functions 
copyright john wiley sons softw 
pract 
exper 
prepared cl taxonomy survey grid rms resource consumer interface qos broker request naming interpreter diss emi trader scheduler oth allocator prox resource job monitor agent sat ons 
rms system structure 
peer protocols include resource resolution allocation protocols 
rms aware remote resource suitable service job local resources contact remote rms schedule job remote resource 
resource resolution protocol rmss supports process 
operation protocol depends organization rmss rmss hierarchically organized 
jobs may necessary simultaneously acquire multiple resources 
resource allocation protocol supports process 
implementations resolution allocation protocols may combined 
extensible interface supports functions essential operation rms 
naming security placed support functions proxy inside rms efficient operation 
naming function enforces namespace rules resources maintains database resource information 
structure content maintenance resource database important differentiating factors 
external internal naming function facilitates interoperability rmss resources uniform naming 
resource qos broker function responsible examining resource requests specified resource specification language translating requests internal resource management protocols rms 
copyright john wiley sons softw 
pract 
exper 
prepared cl buyya maheswaran flat flat cells organization cells hierarchical cells hierarchical 
organization taxonomy 

rms taxonomy overview taxonomy classifies rmss characterizing different attributes 
intent different parts taxonomy differentiate rms implementations view impact grid system scalability reliability 
rms classified machine organization grid resource model dissemination protocols namespace organization data store organization resource discovery qos support scheduler organization scheduling policy state estimation rescheduling approach 
sections resource requester identifies machine requesting resource resource provider identifies machine providing resource resource controller identifies machine responsible allocating resource 
current grid systems machines function roles 

machine organization organization machines grid affects communication patterns rms determines scalability resultant architecture 
shows taxonomy machine organization 
organization describes machines involved resource management scheduling decisions communication structure machines different roles machines play scheduling decision 
previous taxonomies centralized decentralized categories 
centralized organization single controller designated set controllers performs scheduling machines 
approach grid systems centralized organizations suffer scalability issues 
decentralized organization roles distributed machines grid 
decentralized organizations previously divided sender receiver initiated categories 
simple need distinguish resource requesters resource providers resource controllers organize dialogue 
example resource requester may utilize agent approach search resource providers allocate resources behalf originator 
sender initiated approach 
resource requester may consult locally globally available resources requests resource providers 
sender initiated approach significantly different architecture agent approach 
different approach 
organization structure resource management implementation copyright john wiley sons softw 
pract 
exper 
prepared cl taxonomy survey grid rms fixed resource schema extensible model object model fixed extensible 
resource model taxonomy 
characterized separately 
section describes organization section describes resource management implementation 
fiat organization machines directly communicate going intermediary 
hierarchical organization machines level directly communicate machines directly peer hierarchy 
fan machine hierarchy relevant classification 
current grid systems organization proven scalability 
cell structure machines cell communicate fiat organization 
designated machines cell function acts boundary elements responsible communication outside cell 
internal structure cell visible cell boundary machines 
cells organized fiat hierarchical structures 
grid fiat cell structure level cells hierarchical cell structure cells contain cells 
major difference cell structure hierarchical structure cell structure designated boundary hidden internal structure hierarchical structure structure hierarchy visible elements grid 

resources taxonomies section describe different aspects rms provide interface resources managed grid rms 
arguably interfaces resource components important scheduling components ultimately applications toolkits implement functionality 
resource interfaces provide correct abstractions efficient implementations grid effectively 

resource model resource model determines applications rms describe grid resources 
shows resource model taxonomy 
taxonomy focused resources operations resources described 
copyright john wiley sons softw 
pract 
exper 
prepared cl buyya maheswaran resource namespace relational hybrid hierarchical graph 
namespace organization taxonomy 
schema approach data comprises resource described description language integrity constraints 
systems query language integrated schema language 
schema languages characterized ability extend schemas 
extensible schema new schema types resource descriptions added 
predefined attribute value resource models fixed schema category 
condor classad approach semi structured data approach extensible schema category 
object model operations resources defined part resource model 
schemas object model predetermined fixed part definition rms 
object model extensible approach resource model provides mechanism extend definition object model managed rms 
legion approach provides extensible object model oriented resource management 
may difficult implement high performance extensible object model 
current fixed object models basic provide primitive operations resources 

resource namespace organization grid rms operates pool globally named resources 
organization namespace created maintained entity external rms greatly influences design resource management protocols affects discovery methods 
shows taxonomy namespace organization 
relational namespace divides resources relations uses concepts relational databases indicate relationships tuples different relations 
hierarchical namespace divides resources grid hierarchies 
hierarchies typically organized physical logical network structures 
relational hierarchical namespace hybrid consists relations contents relations broken hierarchy order distribute machines grid 
network directory namespaces utilize hybrid structure 
globus mds example network directory utilizes hybrid structure 
graph namespace uses nodes pointers nodes may may complex entities 
namespaces implemented object oriented paradigm typically graph namespaces object nodes inter object pointers 
provides graph namespace corba object model 
resource hierarchical namespace may occur different part hierarchy copyright john wiley sons softw 
pract 
exper 
prepared speauth cls taxonomy survey grid rms oos soft support hard 
qos support taxonomy 
embedded part hierarchy 
considered graph namespace fundamental navigation method descend hierarchy chase object oriented approaches 

quality service support grid systems qos limited network bandwidth extends processing storage capabilities nodes 
focus degree grid provide qos providing qos network 
grid job qos requirements may necessary negotiate service level agreement sla enforce desired level service 
resource reservation ways providing guaranteed qos grid dedicated resources 
globus provides resource reservation capabilities 
guarantee network bandwidth guarantee processing cycles application components communicating link 
resource reservation considered fundamental qos attribute 
grid provides ability specify qos job submission time reserve resources advance considered provide partial solution qos 
current grid implementations provide partial qos processor operating system provide strict performance guarantees 
parts qos admission control policing 
admission control determines requested level service policing ensures job violate agreed level service 
shows taxonomy qos support 
arms provides explicit qos attributes resource requests enforce slas policing provides soft qos support 
hard qos support provided nodes grid police slas guaranteed rms 
darwin provide hard qos support oriented supporting network applications 

resource information store organization resource information store organization determines cost implementing resource management protocols resource dissemination discovery may provided data store implementation 
shows taxonomy resource information data store organizations 
distributed object data stores utilize persistent object services provided language independent object models corba language model copyright john wiley sons 
pract 
exper 
prepared cl buyya maheswaran resource information store organization network directory distributed objects ldap ora nal object model language 
resource information store taxonomy 
provided persistent java object implementations 
javelin provide object oriented information stores respective underlying object models 
network directory data stores database engine utilize standard interface language operate schema data 
existing network directories ldap interfaces access underlying relational database specialized distributed database implementation 
network directories may provide access underlying databases query interfaces ldap 
network directories implemented relational databases may provide access sql restricted subset 
original implementation globus mds standard ldap implementation converted specialized implementation increase performance 
important difference distributed object network directory approaches network directories schema operations separated operations defined externally data store schema 
object oriented approach schema defines data operations 
approaches sun microsystem jini provide network information store oriented underlying language facilities 
jini utilizes features java rmi code mobility 
jini implement generalized grid resource information store 

resource discovery dissemination resource discovery dissemination may viewed providing complementary functions 
discovery initiated network application find suitable resources grid 
dissemination initiated resource trying find suitable application utilize 
shows taxonomy resource discovery shows taxonomy resource dissemination 
implementation resource description database current systems determine approach resource discovery 
network directory systems mechanisms globus mds parameterized queries sent network nearest directory 
query systems characterized depending query executed distributed database centralized database 
updating resource description database characterized resource dissemination approaches 
agent approaches send active code fragments machines grid interpreted copyright john wiley sons 
pract 
exper 
prepared cl taxonomy survey grid rms queries resource discovery agents centralized distributed 
resource discovery taxonomy 
push resource batch periodic pull dissemination online demand 
resource dissemination taxonomy 
locally machine 
bond system agents kqml agent communication language 
agents passively monitor periodically distribute resource information response agent 
agents mimic query resource discovery scheme 
major difference query approach agent approach agent systems allow agent control query process resource discovery decisions internal logic rely fixed function query engine 
resource dissemination categorized approach taken updating resource information 
mechanisms implement dissemination determine amount data sent machines grid 
example aggregate resource status may sent different protocol detailed resource description information order reduce data transferred latency time 
batch periodic approach resource information batched grid machine periodically disseminated grid 
information sent originating machine machines case pushing information machine grid request information originating machine case pulls information machine 
condor european datagrid examples utilize batch approach 
online demand approach information disseminated originating machine immediately 
case information pushed machines grid 
set machines information sent depends organization grid resource database implementation 
system uses demand resource dissemination model 
copyright john wiley sons 
pract 
exper 
prepared cl buyya maheswaran 
summary research issues section taxonomies describing resource models resource namespace organization qos support resource information store organization resource discovery resource dissemination 
solutions problems determine functionality resources efficiency managed components rms 
example qos support issue determines kind qos support application receive resource 
organization resource information store determine efficiency scheduling allocation algorithms 
sampling research issues area problems considered subsection need examination 
assumes rms operates globally named pool resources 
current generation rmss naming internal function rms 
research necessary closely examine trade offs placing naming function 
motivation making naming global function facilitates interoperability different rmss may essential grid scale internet proportions 
resource discovery dissemination key functions wide area rms 
status information resources central functions change dynamically 
schemes consider fact information stale certain time period 
grid rms handle highly heterogeneous set resources significant 
dissemination schemes reduce message overhead scalable issues quantify significance measure efficiently addressed 
qos support significant issue grids 
variety resources capable supporting qos varying degrees essential develop flexible qos abstraction mechanisms 

scheduling previous section examined taxonomies described functionality resources management system user applications 
section examines taxonomies describe scheduling resource allocation operation rms discusses management schemes relate schemes examined previous sections 
particular taxonomies organization scheduling components degree extensibility rescheduling approaches state estimation 

scheduler organization scheduling component rms organized different ways shown 
centralized organization scheduling controller responsible system wide decision making 
organization advantages including easy management simple deployment ability allocate resources 
grid rms disadvantages organization lack scalability lack fault copyright john wiley sons softw 
pract 
exper 
prepared speauth cls taxonomy survey grid rms scheduler centralized organ 
scheduler organization taxonomy 
tolerance difficulty accommodating multiple policies outweigh advantages 
condor utilizes centralized scheme classad matchmaker 
organizations hierarchical decentralized suitable properties grid rms scheduler organization 
hierarchical organization scheduling controllers organized hierarchy 
obvious way organizing controllers higher level controllers manage larger sets resources lower level controllers manage smaller sets resources 
compared centralized scheduling mode hierarchical scheduling addresses scalability fault tolerance issues 
retains advantages centralized scheme allocation 
grid systems darwin legion utilize hierarchical scheduler 
key issues hierarchical scheme provide site autonomy multi policy scheduling 
severe drawback grids various resources participate grid want preserve control usage varying degrees 
grid resources dedicate grid applications 
hierarchical scheduling schemes deal dynamic resource usage policies 
decentralized organization alternative 
naturally addresses important issues fault tolerance scalability site autonomy multi policy scheduling 
decentralized organizations introduces problems include management usage tracking allocation 
scheme expected scale large network sizes necessary scheduling controllers coordinate form resource discovery resource trading protocols 
overhead operation protocols determining factor scalability system 
lack protocols may reduce overhead efficiency scheduling may decrease 
systems bond mol ninf utilize decentralized scheduling approaches 

state estimation previous taxonomies state estimation concentrated degree information available estimated state communication organization information distributed 
grid systems state estimation done partial stale information due information propagation delay large distributed systems 
focus taxonomy copyright john wiley sons softw 
pract 
exper 
prepared cl buyya maheswaran heuristics predictive pricing models state machine learning estimation non predictive heuristics probability distribution 
state estimation taxonomy 
mechanism estimate state affects implementation current historical data stores model 
shows state estimation taxonomy 
non predictive state estimation uses current job resource status information need take account historical information 
non predictive approaches heuristics job resource characteristics probability distribution model offline statistical analysis expected job characteristics 
predictive approach takes current historical information previous runs application account order estimate state 
predictive models heuristic pricing model machine learning approaches 
heuristic approach predefined rules guide state estimation expected behavior grid applications 
pricing model approach resources bought sold market dynamics take account resource availability resource demand :10.1.1.34.281
machine learning online offline learning schemes estimate state potentially unknown distributions 
note heuristics statistics techniques predictive non predictive state estimation approaches 
punch system uses machine learning predictive approach ninf system uses pricing model approach state estimation 

rescheduling rescheduling characteristic rms determines current schedule re examined job executions reordered 
jobs reordered maximize resource utilization job throughput metrics depending scheduling policy 
rescheduling approach determines suitability rms different types grid systems 
shows rescheduling taxonomy 
periodic batch rescheduling approaches group resource requests system events processed intervals 
interval may periodic may triggered certain system events 
key point rescheduling done batches individual requests events 
event driven online rescheduling performs rescheduling soon rms receives resource request system event 
batch rescheduling allows potentially effective utilization grid resources requests considered time 
predictive state estimation schemes may copyright john wiley sons 
pract 
exper 
prepared cl taxonomy survey grid rms rescheduling periodic batch event driven online 
rescheduling taxonomy 
scheduling policy fixed extensible system oriented application oriented ad hoc structured 
scheduling policy taxonomy 
better periodic batch rescheduling 
hard qos difficult provide batch rescheduling approach violation service level cause immediate rescheduling offending job 
online schemes reactive show latency jobs 
may quite difficult implement general purpose online rms scheme address different types grid systems 
difficult determine rescheduling approach grid systems usually explicitly stated 
systems darwin provide online scheduling application oriented grids punch utilize batch oriented rescheduling approach 

scheduling policy rms uses scheduling policy determine relative ordering requests jobs rescheduling 
shows scheduling policy taxonomy 
taxonomy focuses degree scheduling policy altered entities outside rms 
large grid systems different administrative domains different resource utilization policies 
scheduling policy suffice different needs 
fixed approach policy implemented resource manager predetermined 
fixed policies subdivided maximizing system throughput schemes maximizing application oriented schemes 
application oriented schemes try optimize specific metric application completion time 
fixed policy schemes allow fine tuning providing specific control parameters fine tune gross level scheduling objective maximizing resource utilization 
application oriented schedulers netsolve apples fixed scheduling policies 
copyright john wiley sons softw 
pract 
exper 
prepared cl buyya maheswaran extensible scheduling policy schemes allow external entities ability change scheduling policy 
ad hoc extensible scheme resource manager implements fixed scheduling policy provides interface external agent change resulting schedule 
typically done specific resources demand special treatment 
structured extensible scheme resource manager provides model scheduling process associated semantics 
external agents allowed override default rms supplied behaviors changing default scheduling policy 
legion system provides structured extensible scheduling scheme 
grid system provide level ad hoc scheduling extensibility 

summary research issues subsection discusses taxonomies describe approaches scheduling state estimation rms 
wide area rms grid rms resource discovery dissemination protocol expected conjunction state estimation 
concept different previous generation utopia 
systems state estimation algorithms maintain state system scheduling algorithm allocate jobs resources 
wide area rms state estimation schemes may maintain distributed independent status databases may interoperate resource discovery dissemination protocols 
scheduling area investigated long time distributed computing areas grid computing systems unique characteristics demand reexamination 
issues area scheduling include development grid level resource container abstractions similar resource containers developed uni processor machines multi policy scheduling schemes 

grid resource management systems survey example system surveyed section exhaustive comprehensive cover classes developed taxonomy 
summary architectural design choices representative set grid systems shown table table groups choices groups grid resources scheduling 
grid group classifies system grid type machine organization taxonomies 
systems support grid type 
resource group specifies values resource taxonomies section 
scheduling group specifies values scheduling taxonomies section 
systems fully classified information required completely place taxonomies determined operate conjunction grid rms systems provide rms features considered taxonomy 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls taxonomy survey grid rms table grid rmss architecture choices 
system grid type resources scheduling extensible object model demand graph namespace soft hierarchical network resource hierarchical network qos object model scheduler decentralized store agent discovery online scheduler resources dissemination hierarchical scheduler apples high throughput resource model provided predictive heuristics globus legion netsolve online rescheduling fixed application oriented policy extensible object model decentralized scheduler pre bond demand graph namespace hard qos pricing models flat language object store line rescheduling fixed discovery periodic cation oriented policy push dissemination extensible schema model hy condor computational namespace qos net directory store central centralized scheduler flat ized queries discovery periodic push dissemination hierarchical scheduler fixed schema model graph predictive online darwin hierarchical namespace hard qos ing fixed system oriented policy extensible schema model european hierarchical namespace hierarchical scheduler exten datagrid data hierarchical qos network directory store distributed queries discovery sible scheduling policy periodic push dissemination extensible schema model decentralized scheduler various hierarchical namespace soft scheduling hierarchical qos network directory store vided external schedulers cell distributed queries discovery apples nimrod periodic push dissemination fixed object model graph javelin computational namespace soft qos network directory store dis decentralized scheduler fixed hierarchical tributed queries discovery pe application oriented policy push dissemination multimedia extensible object model decentralized scheduler ad flat graph namespace hard qos hoc extensible policy extensible object model graph namespace soft hierarchical scheduler exten computational qos object model store sible structured scheduling legion hierarchical distributed queries discovery policy periodic pull dissemination copyright john wiley sons softw 
pract 
exper 
prepared cl buyya maheswaran table grid rmss architecture choices 
system grid type resources scheduling extensible schema model hierarchical namespace decentralized scheduler mol computational hierarchical cell object model store extensible ad hoc scheduling distributed queries discovery policies periodic push dissemination extensible schema model hierarchical namespace soft netsolve computational qos distributed queries decentralized scheduler fixed hierarchical discovery periodic push application oriented policy dissemination extensible schema model hierarchical namespace hierarchical decentralized nimrod high throughput relational network directory scheduler predictive pricing hierarchical cell data store soft qos models fixed application distributed queries discovery oriented policy periodic fixed schema model rela ninf computational tional namespace qos decentralized scheduler centralized queries discovery periodic push dissemination extensible schema model hy hierarchical decentralized punch computational namespace soft qos dis scheduler predictive machine hierarchical tributed queries discovery pe learning fixed application push dissemination oriented policy 
distributed operating system system distributed operating system provides flexible adaptable architecture providing distributed services wide variety platforms ranging personal digital assistants pdas large scale computers 
intended development deployment distributed service applications high performance grand challenge applications 
core dynamic reflective corba object request broker orb called dynamictao extension tao orb 
dynamictao orb provides ability dynamically create environments applications move grid machines mobile reconfiguration agents 
code service distribution managed facilities 
classification comes mainly corba underlying substrate system 
system considered demand service grid uses fiat rms organization 
extension current fiat model hierarchical model described corba traders name servers 
system uses extensible object model graph resource namespace provides soft network qos 
resource information store object model corba object model 
resource discovery performed agents 
locating services resource performed corba trading copyright john wiley sons softw 
pract 
exper 
prepared cl taxonomy survey grid rms services 
resource dissemination performed demand injecting mobile agents system 
system uses level hierarchical controller scheduling network bandwidth 
resources scheduled locally dynamic soft real time scheduling resource provider 
uses decentralized controller resources 
appear state estimation function rescheduling approach system provided underlying native operating system 
scheduling policy system fixed 

apples network enabled scheduler application level scheduling apples project primarily focuses developing scheduling agents individual applications production computational grids 
apples agents application system information select viable set resources 
apples uses services rmss globus legion netsolve execute application tasks 
applications embedded apples agents performing resource scheduling grid 
apples applications areas including gene sequence comparison satellite radar images visualization tomography :10.1.1.26.4797
apples framework contains templates applied applications structurally similar computational model 
templates allow reuse application specific schedulers apples agents 
templates developed parametric master slave type applications 
focus apples scheduling follows resource management model supported underlying grid middleware systems 
apples scheduler central application performs mapping jobs resources local resource schedulers perform actual execution application units 
apples schedulers offer qos support 
apples classified predictive heuristic state estimation model online rescheduling fixed application oriented scheduling policy 

bond java distributed agents bond java object oriented middleware system network computing 
bond agents communicate knowledge querying manipulation language kqml inter object communication 
kqml inter agent communications lower level java mechanisms order provide uniform base operation semantics agents 
bond defines uniform agent structure agent extension mechanism 
agents structured finite state machines strategy objects define behavior different states 
external events cause state transitions turn trigger strategy objects 
agents dynamically assembled components blueprint 
agents checkpointed migrated bond 
agents discover interface information interface discovery service accessed kqml message 
agent extensions done subprotocols 
subprotocols small closed subsets kqml commands dynamically extend objects provided bond library 
bond level scheduler stock market computational economy approach 
copyright john wiley sons softw 
pract 
exper 
prepared cl buyya maheswaran extension bond supports hard qos provides general purpose real time os platform multi resource reservation scheduling signaling 
tempo bandwidth manager component schedules network bandwidth 
implemented extension sun solaris 
bond provides infrastructure demand service grid flat organization concept autonomous domains border 
organizations implemented top bond require extending resource management function substrate provided bond 
resource model extensible object model hard qos support graph namespace 
resource information store language distributed objects 
resources implement interfaces java exchange information kqml 
resource discovery agent 
resource dissemination accomplished periodic push probes 
schedulers decentralized predictive pricing models state estimation 
rescheduling online 
scheduling policy fixed application oriented 

condor cycle stealing technology high throughput computing condor high throughput computing environment manage large collection owned machines networks 
known harnessing idle computers configured share resources 
condor environment follows layered architecture supports sequential parallel applications 
condor system allocates resources condor pool usage conditions defined resource owners 
remote system call capabilities condor preserves job originating machine environment execution machine originating execution machines share common file system user id scheme 
condor jobs single process automatically checkpointed migrated workstations needed ensure eventual completion 
condor multiple condor pools pool follows flat rms organization 
condor collector provides resource information store listens advertisements resource availability 
condor resource agent runs machine periodically advertising services collector 
customer agents advertise requests resources collector 
condor matchmaker queries collector resource discovery uses determine compatible resource requests offers 
compatible agents contact directly satisfied customer agents initiate computation resources 
resource requests offers described condor advertisement classad language :10.1.1.21.1251
classads semi structured data model resource description 
classad language includes query language part data model allowing advertising agents specify compatibility including constraints resource offers requests 
condor considered computational grid flat organization 
uses extensible schema hybrid namespace 
qos support information store network directory ldap technology 
resource discovery centralized queries periodic push dissemination 
scheduler centralized 
copyright john wiley sons softw 
pract 
exper 
prepared cl taxonomy survey grid rms 
darwin resource management network services darwin customizable rms creating value added network services 
oriented resource management network equipment provide mechanisms scheduling computation non network nodes 
darwin provides virtual network mesh distributed applications 
application provides application input graph describes resource requirement 
input graph describes set nodes network connections 
graph annotated qos specifications darwin allocating resources 
darwin provide hard network qos darwin components run routers control bandwidth network flow level built router functions 
core component darwin request broker performs global allocation resources 
control delegates perform runtime adaptations initial resource assignment 
data delegates operate network flows provide services encryption decryption data compression 
local resource managers provide low level resource allocation coordinate activity beagle signaling protocol 
darwin uses hierarchical fair service curve scheduling algorithm fsc higher level resource allocation 
fsc algorithm designed efficiently support virtual networks distributed applications 
rms organized darwin level hierarchy requests sent request broker interacts peer request brokers 
resource model fixed schema hard qos support resource namespace graph 
darwin provide separate resource information store resource discovery protocol resource dissemination protocol 
scheduling hierarchical non predictive state estimation 
rescheduling event driven implemented control delegates 
scheduling policy fixed system oriented 

european datagrid global physics data storage analysis european datagrid project focuses development middleware services order enable distributed analysis physics data 
core middleware system globus toolkit hooks data grids 
data order petabytes distributed hierarchical fashion multiple sites worldwide 
global namespaces required handle creation access distributed replicated data items 
special workload distribution facilities balance analysis jobs physicists different places grid order maximum throughput large user community 
application monitoring collecting user access patterns provide information access data distribution optimization 
datagrid project multi tier hierarchical rms organization 
example tier cern stores relevant data tier regional centers italy france uk usa japan support smaller amounts data 
extensible schema resource model hierarchical namespace organization 
offer qos resource information store expected ldap network directory 
resource dissemination batched periodically pushed parts grid 
resource copyright john wiley sons softw 
pract 
exper 
prepared cl buyya maheswaran discovery data grid decentralized query 
scheduler uses hierarchical organization extensible scheduling policy 

globus toolkit grid computing globus system enables modular deployment grid systems providing required basic services capabilities globus metacomputing toolkit gmt 
toolkit consists set components implement basic services security resource location resource management data management resource reservation communications 
globus constructed layered architecture higher level services developed lower level core services 
emphasis hierarchical integration grid components services 
globus offers grid information services ldap network directory called metacomputing directory services mds :10.1.1.21.987
mds currently consists components grid index information service grid resource information service gris 
gris provides resources discovery services globus grid 
directory information provided globus component running resource external information providers 
resource information providers push protocol update gris periodically 
provides global view grid resources pulls information multiple gris combine single coherent view grid 
globus placed push resource dissemination category resource information initially periodically pushed resource providers 
resource discovery performed querying mds 
globus supports soft qos resource reservation :10.1.1.102.2733
predefined globus scheduling policies extended application level schedulers nimrod apples condor globus scheduler absence application level scheduler decentralized organization ad hoc extensible scheduling policy 

javelin java parallel computing javelin java infrastructure internet wide parallel computing 
javelin consists clients seek resources hosts offer resources brokers coordinate allocations 
javelin supports branch bound computational models 
model adaptively parallel computations decomposed set subcomputations 
sub computations autonomous terms communication apart scheduling communicating results 
model suitable parameter sweep master applications ray tracing monte carlo simulations 
branch model achieves scalability fault tolerance integrating distributed deterministic stealing distributed deterministic eager scheduler 
additional fault tolerance mechanism implemented replacing hosts failed 
javelin system considered computational grid high throughput computing 
hierarchical rms organization broker manages tree hosts 
resource model simple fixed objects graph namespace organization 
resources simply hosts attached broker 
copyright john wiley sons softw 
pract 
exper 
prepared cl taxonomy survey grid rms host wants part javelin contacts system javelin information backbone maintains list available brokers 
host communicates brokers chooses suitable broker part broker managed resources 
information store network directory implemented components 
hosts brokers update result scheduling javelin uses resource dissemination 
resource discovery uses decentralized query approach queries handled distributed set brokers 
javelin follows decentralized approach scheduling fixed application oriented scheduling policy 

generic object platform infrastructure generic object platform infrastructure project developed platform corba rm odp extension provides extensible architecture adaptive multimedia applications 
provides api core services extended network protocol extensions called application specific protocols 
extensions stacked top transport protocols implement application specific scheduling policies scheduling framework provided 
resource namespace rm odp computational model specified corba idl 
reflective middleware open bindings support qos annotation interfaces ability application inspect adapt behavior underlying network 
organization flat extensible object oriented resource model corba 
resource namespace graph 
system provides hard qos underlying operating systems network provide support 
research focused delivering multimedia application support lacks infrastructure resource information directory resource discovery protocol resource dissemination protocol 
scheduler framework provided application specific schedulers loaded 
scheduler framework scheduling extensions operate node basis scheduler organization decentralized ad hoc extensible scheduling policy 
state estimation rescheduling determined application specification extensions classified 

legion grid operating system legion object provides software infrastructure grid 
legion grid objects represent different components grid 
legion objects defined managed corresponding class metaclass 
classes create new instances schedule execution activate deactivate object provide state information client objects 
object active process responds method invocations objects system 
legion defines api object interaction specify programming language communication protocol 
legion appears complete vertically integrated system architecture follows hierarchical model 
uses object information store organization collection objects 
collections periodically pull resource state information host objects 
host objects track load users call individual host directly get resource copyright john wiley sons 
pract 
exper 
prepared cl buyya maheswaran information 
information multiple objects aggregated collection objects 
users system administrators organize collections suitable arrangements 
classes legion organized hierarchically top host vault classes bottom 
supports mechanism control load hosts 
provides resource reservation capability ability application level schedulers perform periodic batch scheduling 
legion machine architecture hierarchical decentralized scheduler 
legion supplies default system oriented scheduling policies allows policy extensibility structured scheduling extension interface 

mol metacomputing online metacomputing online mol system follows toolkit approach mol kernel central component 
mol kernel services provide resource management supporting dynamic communication fault management access provision 
mol kernel follows tier architecture consisting resource abstraction management access layers containing resource module rm center management modules cmms access module am respectively customizable predefined event handlers 
rms encapsulate metacomputing resources services 
different rms institution coordinated cmm 
cmm responsible keeping network components resources consistent state 
cmm acts gatekeeper control access resources external networks 
large institutions multiple cmms institution 
mol kernel components fails institute inaccessible 
long single cmm available mol kernel remains operational 
mol kernel dynamically reconfigures organizations come online go offline 
mol kernel guarantees collective cmms maintain consistent state transaction oriented protocol top virtual shared memory objects associated cmm 
mirror instances shared active objects maintained cmm order global state available entry points 
higher level functionality mol kernel typed messages event handlers 
module kernel send messages component 
usually triggered user interacting am incoming message changed state available resources services 
event management unit associated kernel module checks incoming messages invokes appropriate event handlers 
mol follows service grid model hierarchical cell machine organization 
schema resource model hierarchical name space organization 
object resource state information maintained shared objects cmm 
resources services utilize push protocol resource dissemination 
ams schedulers perform resource discovery scheduling querying shared objects 

netsolve network enabled computational kernel netsolve client agent server paradigm network enabled application server 
designed solve computational science problems distributed environment 
netsolve copyright john wiley sons softw 
pract 
exper 
prepared cl taxonomy survey grid rms system integrates network resources including hardware computational software packages desktop application 
netsolve clients written fortran matlab web pages interact server 
netsolve server scientific package provide computational software 
communications netsolve clients agents servers performed tcp ip sockets 
netsolve agents search resources network choose best available execute client request return answer user 
netsolve system computational grid hierarchical machine organization 
netsolve agents maintain information resources available network 
netsolve servers resources netsolve grid responsible making existence aware netsolve agent push protocol resource dissemination 
netsolve agents perform resource discovery scheduling 
agent may request assistance agents identifying best resources scheduling 
netsolve considered network directory implemented netsolve agents decentralized scheduling fixed application oriented scheduling policy 

nimrod resource broker economy grid nimrod grid resource broker managing steering task farming applications parameter studies computational grids :10.1.1.111.8497:10.1.1.34.281
follows computational market model resource management 
nimrod provides support formulation parameter studies single window manage control experiments resource discovery resource trading scheduling 
task farming engine nimrod coordinates resource management results gathering 
engine creating user defined scheduling policies 
example execute microsoft excel computations cells grid 
nimrod scheduling component new framework called grid architecture computational economy grace economic theories grid resource management system 
nimrod hierarchical machine organization uses computational market model model resource management :10.1.1.34.281
uses services systems globus legion resource discovery dissemination 
state estimation performed heuristics historical pricing information 
scheduling policy fixed application oriented driven user defined requirements deadline budget limitations 
load balancing performed periodic rescheduling 

ninf network enabled server ninf client server network infrastructure global computing 
ninf system functionality similar netsolve 
ninf allows access multiple remote compute database servers 
ninf clients semi transparently access remote computational resources languages fortran 
programmers build global computing application ninf remote libraries components aware complexities underlying system programming 
procedural parameters including arrays marshaled sent ninf server remote host responsible executing copyright john wiley sons softw 
pract 
exper 
prepared speauth cls buyya maheswaran requested library functions returning results 
ninf client library calls synchronous asynchronous nature 
key components ninf system include ninf client interfaces ninf ninf remote libraries 
ninf applications invoke ninf library functions generate requests go maintains network directory ninf servers network 
allocates resources remote library calls routing appropriate servers querying information store behalf client request 
ninf utilizes centralized query resource discovery 
ninf computational resources register details available library services ninf push protocol resource dissemination 
ninf follows flat model machine organization fixed schema resource model relational name space organization 
ninf performs level scheduling routing requests actual scheduling client request performed server resulting decentralized scheduler organization 

punch purdue university network computing hubs punch middleware testbed provides operating system services network computing environment 
provides transparent access remote programs resources access control job control functionality multi user multi process environment 
punch supports virtual grid organization supporting decentralized autonomous management resources 
punch infrastructure consists collection services allow management applications data machines distributed wide area networks 
user applications accessed standard web browsers 
applications written particular language access source object code required allowing punch existing applications grid enabling 
punch employs hierarchically distributed architecture layers 
computing portal services layer provides web access distributed network computing environment 
layer primarily deals content management user interface issues 
network os layer provides distributed process management data browsing services 
application middleware layer allows infrastructure interoperate application level support systems message passing interface 
virtual file system layer consists services provide local access distributed data application transparent manner 
os middleware layer interfaces local os services available individual machines clusters machines 
layers interoperate distributed rms predictive performance modeling sub system order intelligent decisions terms selecting different application implementations data storage sites hardware resources 
example punch choose sequential parallel implementation running dedicated server condor pool 
punch uses hierarchical decentralized scheduler predictive machine learning state estimation matching user requests appropriate grid resources fixed application oriented scheduler policy 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls taxonomy survey grid rms 
discussion different approaches models developing grid resource management systems 
systems surveyed part focused computational grid service grid 
data grid project surveyed european datagrid project initial stages development 
category system grid scheduler nimrod apples integrated grid rms globus legion 
combinations create application oriented computational grids provide certain levels qos 
extensibility resource model feature surveyed rms exception darwin javelin 
darwin oriented network services require extensibility javelin oriented internet parallel computing require rich resource model 
degree extensibility quite different systems 
extensible schema models range semi structured data models condor ldap structure globus 
object model extensibility typically follows available underlying technology corba java 
legion system exception builds object model primitives 
topic research investigate extent extensible features various resource models grid applications 
may possible resource model extensions internally rms components 
systems employ periodic push approach resource dissemination hierarchical machine organization 
resource discovery approach correlated resource model 
schema system queries object model uses agent approach 
systems aware schema resource model agent queries 
topic research investigate relative efficiency different dissemination schemes conjunction machine organization resource model 
survey indicates different aspects taxonomy explored different systems 
flat hierarchical machine organizations quite common 
cell organizations far appeared schema resource models 
different resource models developed comparisons performances schemes 
scheduling aspect taxonomy fully explored 
decentralized online rescheduling system extensible scheduling policy knowledge developed grid system 
taxonomy grid rmss 
requirements rmss described functional model developed 
requirements model develop taxonomy 
taxonomy focused type grid system machine organization resource model characterization scheduling characterization 
representative grid systems surveyed placed different categories 
helped identifying key grid resource management approaches issues explored topics research 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls buyya maheswaran authors acknowledge developers grid systems described 
particular jim henri casanova geoff coulson ian foster colin gan kapadia john fabio kon jarek michael dan andre omer rana heinz stockinger achim intellectual communications preparation manuscript 

poster kesselman eds 
grid blueprint new computing infrastructure 
morgan kaufmann san fransisco ca 

buyya giddy abramson 
evaluation economy resource trading scheduling computational power grids parameter sweep applications 
nd int workshop active middleware services ams aug 

sinha 
distributed operating systems concepts design 
ieee press new york ny 

maheswaran 
quality service driven resource management algorithms network computing 
int conference parallel distributed processing technologies applications pdpta pages june 


taxonomy scheduling general purpose distributed computing systems 
ieee transactions software engineering 


taxonomy dynamic task scheduling schemes distributed computing systems 
iee proceedings computer digital techniques jan 

braun siegel beck maheswaran robertson yao 
taxonomy describing matching scheduling heuristics mixed machine heterogeneous computing systems 
ieee workshop advances parallel distributed systems pages oct 


survey heterogeneous computing concepts systems 
proceedings ieee aug 

kapadia 
design demand network computing system purdue network computing hubs 
phd thesis school electrical computer engineering purdue university aug 

abramson giddy 
high performance parametric modeling nimrod killer application global grid 
international parallel distributed processing symposium ipdps april 

buyya abramson giddy 
nimrod architecture resource management scheduling system global computational grid 
int conference high performance computing asia pacific region hpc asia 

martinez samar stockinger stockinger 
data management international data grid project 
ieee acm int workshop grid computing grid dec 

chervenak foster kesselman salisbury tuecke 
data grid architecture distributed management analysis large scientific datasets 
journal network computer applications appear 

nahrstedt chu narayan 
qos aware resource management distributed multimedia 
journal high speed networking special issue multimedia networking dec 

buyya chapin 
architectural models resource management grid 
st ieee acm int workshop grid computing grid dec 

vahdat 
wide area resource allocation 
int conference parallel distributed processing techniques applications volume ii pages june 

berman 
high performance schedulers 
foster kesselman editors grid blueprint new computing infrastructure pages 
morgan kaufmann san fransisco ca 

livny raman 
high throughput resource management 
foster kesselman editors grid blueprint new computing infrastructure pages 
morgan kaufmann san fransisco ca 

berman wolski 
apples project status report 
th nec research symposium may 
copyright john wiley sons softw 
pract 
exper 
prepared cl taxonomy survey grid rms 
foster kesselman 
globus metacomputing infrastructure toolkit 
int journal supercomputer applications high performance computing summer 

mitzenmacher 
useful old information 
ieee transactions parallel distributed systems jan 

maheswaran 
parameter approach resource discovery grid computing systems 
st ieee acm int workshop grid computing grid dec 

stankovic humphrey 
case hierarchical schedulers performance guarantees 
technical report cs university virginia mar 

zhou zheng wang delisle 
utopia load sharing facility large heterogeneous distributed computing systems 
software practice experience dec 

banga druschel mogul 
resource containers new facility resource management server systems 
rd usenix symposium operating systems design implementation osdi feb 

carvalho kon ballesteros campbell 
management execution environments 
th int conference parallel distributed systems pages july 

kon campbell nahrstedt 
distributed operation system dynamic heterogeneous environments 
th ieee int symposium high performance distributed computing hpdc aug 

kon liu mao campbell 
monitoring security dynamic configuration dynamictao reflective orb 
ifip int conference distributed systems platforms open distributed processing middleware apr 

kon hess campbell 
dynamic resource management automatic configuration distributed component systems 
usenix conference object oriented technologies systems coots feb 

berman wolski grimshaw 
application aware scheduling application legion 
th ieee heterogeneous computing workshop hcw may 

cirne frey berman wolski su kesselman young 
combining workstations supercomputers support grid applications parallel tomography experience 
th ieee heterogeneous computing workshop hcw may 


object oriented framework building collaborative network agents 
kandel hoffmann editors intelligent systems interfaces pages 
kluwer publishing 

jun 
agent resource discovery 
th ieee heterogeneous computing workshop hcw oct 

yau jun middleware qos agents native kernel schedulers adaptive multimedia services cluster servers 
real time system symposium 

litzkow livny mutka 
condor hunter idle workstations 
th int conference distributed computing systems june 

livny 
deploying high throughput computing cluster 
buyya editor high performance cluster computing volume 
prentice hall upper saddle river nj 

raman livny 
matchmaking distributed resource management high throughput computing 
th ieee int symposium high performance distributed computing july 

chandra fisher ng steenkiste takahashi zhang 
darwin customizable resource management value added network services 
th ieee int conference network protocols oct 

chandra fisher steenkiste 
signaling protocol structured resource allocation 
ieee mar 

czajkowski foster kesselman karonis martin smith tuecke 
resource management architecture metacomputing systems 
workshop job scheduling strategies parallel processing 

fitzgerald foster kesselman von laszewski smith tuecke 
directory service configuring high performance distributed computations 
sixth ieee syrup 
high performance distributed computing pages 

foster roy sander 
quality service architecture combines resource reservation application adaptation 
th int workshop quality service iwqos june 
copyright john wiley sons softw 
pract 
exper 
prepared cl buyya maheswaran 
richman 
java parallel computing internet 
european parallel computing conference euro par 

coulson 
configurable multimedia middleware platform 
ieee multimedia jan mar 

coulson clarke 
distributed object platform infrastructure multimedia applications 
computer communications july 

chapin grimshaw 
legion resource management system 
th workshop job scheduling strategies parallel processing apr 


robust resource management 
th ieee int symposium high performance distributed computing 

casanova dongarra 
netsolve network enabled server solving computational science problems 
int journal supercomputer applications high performance computing fall 

abramson roe 
super computing spreadsheets 
high performance computing symposium hpc advanced simulation technologies conference april 

sato 
design implementation ninf global computing infrastructure 
generation computing systems metacomputing special issue oct 

kapadia fortes 
punch architecture web enabled wide area network computing 
cluster computing journal networks software tools applications special issue high performance distributed computing sep 

kapadia figueiredo fortes 
punch web portal running tools 
ieee micro may june 

gropp lusk skjellum 
high performance portable implementation message passing interface mpi standard 
parallel computing sep 
copyright john wiley sons softw 
pract 
exper 
prepared cl 
