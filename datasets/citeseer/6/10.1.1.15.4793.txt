submission ieee transactions software engineering probabilistic model software defect prediction norman fenton paul krause martin neil please address correspondence paul krause index terms software reliability graphical probabilistic models defect estimation software process improvement 
contact details professor norman fenton queen mary university london mile road london ns tel mobile fax mail norman dcs qmw ac uk contact details dr paul krause philips research laboratories lane surrey rh ha tel fax mail paul krause philips com contact details dr martin neil queen mary university london mile road london ns tel mobile fax mail martin dcs qmw ac uk probabilistic model software defect prediction number approaches taken quality prediction software achieved widespread applicability 
aim produce single model combine diverse forms causal evidence available software development natural efficient way done previously 
graphical probability models known bayesian belief networks appropriate formalism representing evidence 
subjective judgements experienced project managers build probability model model produce forecasts software quality development life cycle 
causal influence structure model naturally mirrors real world sequence events relations achieved formalisms 
focuses particular model developed philips software centre psc expert knowledge philips research labs 
model especially predict defect rates various testing operational phases 
model usable software quality managers developed tool aid validate model diverse projects psc 
projects extensive historical records available 
results validation encouraging 
cases model provides accurate predictions defect rates projects size outside original scope model 
important decisions need course developing software products 
important decision release software product 
consequences making ill judged decision potentially critical reputation product supplier 
decisions informally basis objective accountable criteria 
software project quality managers juggle combination uncertain factors tools personnel development methods testing strategies achieve delivery quality product budget time 
uncertain factors influences detection correction defects stages development life cycle initial requirements product delivery 
order achieve software quality development special emphasis needs applied activities particular defect prevention defect detection defect correction 
probabilistic model software defect prediction decision challenge software development apply finite resources activities division resources applied predict quality achieved product delivered 
date majority software projects tended rely judgement project quality manager 
unfortunately mathematical statistical procedures applied contribution marginal best 
briefly outline problems current approaches section 
aim extend introduced produce single model combine diverse forms causal evidence available software development natural efficient way done previously 
graphical probability models known bayesian belief networks appropriate formalism representing evidence 
subjective judgements experienced project managers build probability model model produce forecasts software quality development life cycle 
causal influence structure model naturally mirrors real world sequence events relations achieved formalisms 
outlining problems current approaches defect prediction provide probabilistic modelling 
describe probabilistic model defect prediction built philips software development organisations provide results initial validation studies 
problems software defect prediction fenton neil provide detailed critique software defect prediction models 
essential problem oversimplification generally associated simple regression models 
typically search simple relationship predictor number defects delivered 
size probabilistic model software defect prediction complexity measures predictors 
result na model represented graph 

difficulty whilst model explain data set obtained specific context far subject form controlled statistical experimentation needed establish causal relationship 
analysis fenton neil suggests models fail include causal explanatory variables needed order models generalisable 
strong empirical support arguments demonstrated 
example investigating relationship variables wish differentiate direct causal relationship influence common cause hidden variable 
example hypothesise problem complexity pc common cause variables 
model simulate model certain circumstances 
greater explanatory power lead quite different interpretation set data 
take smoking higher grades high school analogy 
just looking covariance variables see correlation smoking achieving higher grades 
age included model different interpretation data 
student age increases likelihood smoking 
mature grades typically improve 
covariance explained 
fixed age group smokers may achieve lower grades non smokers 
believe relationships product process attributes numbers defects complex admit straightforward curve fitting models 
predicting defects discovered particular project certainly want add additional variables model 
example number defects discovered depend effectiveness software tested 
may depend level detail specifications test cases derived care requirements managed product development 
believe graphical probabilistic models best candidates situations rich causal structure 
probabilistic model software defect prediction probabilistic models conditional probability probabilities conform basic axioms probability event outcome consequence number means impossible means certain provided disjoint 
merely refer probability event hypothesis oversimplification 
general probabilities context sensitive 
example probability suffering certain forms cancer higher europe asia 
strictly probability event hypothesis conditional available evidence current context 
explicit notation read probability evidence 
coin example heads event explicit evidence coin fair 
evidence coin double sided heads 
soon start thinking terms conditional probabilities need think structure problems assignment numbers 
say probability hypothesis conditional items identify information relevant problem hand 
say identification item evidence influences probability hypothesis valid place directionality links evidences hypotheses 
direction corresponding causal influence meaningful 
example medical diagnosis certain sense say measles causes red spots causes 
assigning value conditional red spots measles wish provide explicit graphical representation problem 
case simply draw arrow measles red spots 
note say red spots measles means assign probability red spots measles observed measles observed 
evidence observed required determine red spots measles 
comma inside parentheses denotes conjunction 
probabilistic model software defect prediction building graphical representation great aid framing problem 
significant advance probability theory demonstration formal equivalence structure graphical model dependencies expressed numerical probability distribution 
numerical terms say event independent event observation difference probability occur 
graphical terms indicate independent absence direct arrow nodes representing graphical model 
far concentrated static aspects assessing probabilities indicating influences 
probability dynamic theory provides mechanism coherently revising probabilities events evidence available 
conditional probability bayes theorem play central role 
simple example illustrate bayesian updating introduce bayes theorem section 
suppose interested number defects detected fixed certain testing phase 
software test developed high standards undergoing formal reviews release test phase high quality software sense cause low number defects detected test phase 
testing ineffective superficial provide alternative cause low number defects detected test phase 
precisely common empirical scenario identified 
situation represented simple graphical model 
nodes graph represent simple binary variables states low high 
general node may alternative states represent continuous variable 
stay binary states ease discussion 

helpful think fragment larger model 
particular node sq software quality synthesis example review effectiveness developer skill level quality input specifications resource availability 
appropriate probability assignments model variety reasoning styles modelled 
straightforward reasoning cause effect possible 
te test effectiveness low model predict dd defects discovered probabilistic model software defect prediction fixed low 
earlier evidence indicates sq software quality high dd low 
important feature conditional probabilities may assessed terms effect cause bayes rule enables inference performed reverse direction provide probabilities potential causes observation effect 
case dd observed low model tell low test effectiveness high software quality possible explanations indication explanation 
concept explaining away modelled 
example independent evidence software quality high provide sufficient explanation observed value dd probability test effectiveness low reduced 
situation formally summarised follows 
knowledge state dd nodes te sq marginally independent knowledge state influence probability possible states 
nodes te sq conditionally dependent dd state dd known influence dd te sq described 
see section models complex situations built composing relatively simple local sub models kind see 
enormously valuable 
able structure problem way virtually impossible assess probability distributions large numbers variables 
addition computational problem updating probability distribution new evidence intractable 
bayes theorem graphical models indicated previous section probability dynamic theory provides mechanism coherently revising probabilities events evidence available 
bayes theorem fundamental component dynamic aspects 
mentioned earlier write represent probability event hypothesis conditional occurrence event evidence 
counting sample events universe interested fraction events true 
effect probabilistic model software defect prediction focusing attention universe restricted subset holds 
clear comma denoting conjunction events simplest form bayes rule 
usually rewritten form tells obtain posterior probability hypothesis observation evidence prior probability likelihood observing case theorem immense practical importance 
means reason forward direction causes effects reverse direction bayes rule effects possible causes 
deductive abductive modes reasoning possible 
significant problems need addressed 
principle generalisations bayes rule update probability distributions sets variables practice eliciting probability distributions sets variables major problem 
example suppose problem describable variables possible states 
need elicit distinct values order able define probability distribution completely 
seen problem knowledge elicitation intractable general case 
computations required update probability distribution set variables similarly intractable general case 
late problems major obstacles rigorous probabilistic methods computer reasoning models 
initiated lauritzen spiegelhalter pearl provided resolution problems wide class problems 
related independence conditions described graphical models joint distributions sets variables 
seen simple examples models previous section 
probabilistic terms variables independent probability distribution variables independent distributions 
expressed probabilistic model software defect prediction graphic absence direct arrow expressing influence variables 

introduce third variable say state conditionally independent 
expressed graphically 
expression terms probability distributions significant feature graphical structure decompose joint probability distribution variables product terms involving variables similar way decompose joint probability distribution variables associated nodes dd te sq dd te sq dd te sq te sq gives series example cases graph admitted simple factorisation corresponding joint probability distribution 
graph directed arrows associated direction cycles graph property general 
graphs called directed acyclic graphs dags 
slightly imprecise notation simplicity proposition xn associated dag joint probability distribution admits direct factorisation xi pa xi pa xi denotes value assignment parents xi 
arrow graph directed parent node child node 
net result probability distribution large set variables may represented product conditional probability relationships small clusters semantically related propositions 
needing elicit joint probability distribution set complex events problem broken assessment conditional probabilities parameters graphical representation 
probabilistic model software defect prediction lessons section summarised quite succinctly 
graphs may represent qualitative influences domain 
secondly conditional independence statements implied graph associated probability distribution 
factorisation exploited ease problem eliciting global probability distribution allow development computationally efficient algorithms updating probabilities receipt evidence 
describe techniques exploited produce probabilistic model software defect prediction 
probabilistic model defect prediction probabilistic models candidate solution effective model software defect prediction reasons 
easily model causal influences variables specified domain 
bayesian approach enables statistical inference augmented expert judgement areas problem domain empirical data sparse 
result possible include variables software reliability model correspond process product attributes 
assigning probabilities reliability predictions means sound decision making approaches classical decision theory supported 
goal build module level defect prediction model evaluated real project data 
possible members philips development organisations directly perform extensive knowledge elicitation prl able act surrogate experience working directly philips business units 
added advantage probabilistic network built relatively quickly 
fact probability tables effect built rough information sources strengths relations necessarily limits precision model 
remainder section provide overview model indicate product process factors taken account quality assessment performed 
probabilistic model software defect prediction structure probabilistic network probabilistic network executed generic probabilistic inference engine hugin see www hugin com details 
size complexity network realistic attempt build network directly hugin tool 
methods tools built top hugin propagation engine method tool enables large networks built smaller ones modular fashion large probability tables built pre defined mathematical functions probability distributions 
impress method tool extends tool enabling users generate complex probability distributions simply drawing distribution shapes visual editor 
resulting network takes account range product process factors lifecycle software module 
size model impractical display single 
provide schematic view terms sub nets 
modular structure actual decomposition build network tool 
main sub nets high level structure correspond key software life cycle phases development software module 
sub nets representing specification phase specification review phase design coding phase various testing phases 
sub nets cover influence requirements management defect levels operational usage defect discovery 
final defect density sub net simply computes industry standard defect density metric terms residual defects delivered divided module size 

structure developed software development processes number philips development units models 
common software development process currently place philips 
resulting structure necessarily abstraction 
limit precision resulting predictions 
progress develop tools enable structure customised specific development processes 
arc labels represent joined nodes underlying sub nets 
means information variables representing joined nodes passed directly sub nets 
probabilistic model software defect prediction example quality defect density sub nets joined arc labelled module size 
node common sub nets 
result information module size arising specification quality sub net passed directly defect density sub net 
refer module size output node specification quality sub net input node defect density sub net 
figures sub sections show details number sub nets 
figures dark shaded nodes dotted edges output nodes dark shaded ones solid edges input nodes 
specification quality sub net illustrates specification quality sub net 
explained way specification quality influenced major factors 
intrinsic complexity module complexity requirements module ranges simple complex internal resources turn defined terms staff quality ranging poor outstanding document quality meaning quality initial requirements specification document ranging poor schedule constraints ranges tight flexible stability requirements turn defined terms novelty module requirements ranging high low stakeholder involvement ranging low high 
stability node defined way low novelty stakeholder involvement irrelevant philips built similar relevant module stakeholder involvement crucial 
specification quality directly influences number specification defects output node ordinal scale ranges represents defects whilst represents complete rewrite document 
stability specification quality influences number new requirements output node ordinal scale ranging introduced development testing process 
node sub net output node module size measured lines code loc 
position taken constructing model probabilistic model software defect prediction module size conditionally dependent intrinsic complexity link 
indicator complexity relationship fairly weak node probability table npt node models shallow distribution 
requirements match sub net requirements match sub net contains just nodes 
incorporated specification quality sub net separated sub net highlight importance attach notion requirements match 
crucial output variable ranging poor represents extent implementation matches real requirements 
influenced number new requirements quality configuration traceability management 
new requirements introduced quality configuration traceability management poor requirements match poor 
negative impact subsequent testing phases node input sub nets model testing phases 
example requirements match poor matter internal development comes integration independent testing phases testers inevitably testing wrong requirements 

specification review test process sub nets specification review unit integration independent testing process operational usage sub nets common testing idiom 
basic structure receive defects previous life cycle phase inputs accuracy testing rework dependent resources available 
output case unknown number residual defects simply number inserted defects minus number discovered defects 
design coding process sub net 
design coding process sub net example called process product idiom 
various input resources produced design code certain attributes outputs sub net 
inputs specification quality specification quality sub net development staff quality resources 
variables define design coding quality 
output attributes design coding process design document probabilistic model software defect prediction quality crucial number code defects introduced 
influenced just quality design coding process number residual specification defects input specification sub net 
defect density sub net final sub net defect density sub net 
sub net simply computes industry standard defect density metric terms residual defects delivered divided module size 
notice defect density example node related parents deterministic opposed probabilistic relationship 
ability incorporate deterministic nodes important contribution project 
probability tables graphical probabilistic models outlined section means problem building models stages qualitative stage consider general relationships variables interest terms relevance variable specified circumstances quantitative stage numerical specification parameters model 
numerical specification parameters means building node probability tables nodes network 
problem eliciting tables node node basis cognitively easier eliciting global distributions sheer number parameters elicited remains serious handicap successful building probabilistic models 
outline techniques handle problem sub section 
note reasons commercial sensitivity parameter values may correspond actual values 
leaf nodes parents easiest deal elicit associated marginal probabilities expert simply asking frequencies individual states 
example consider leaf node novelty 
node states high high average low low 
suppose expert judgement modules typically novel giving weights surrogates probability distribution respectively basis knowledge previous modules development organisation 
probabilistic model software defect prediction turned probabilities note slight change scale normalise distribution 
leaf nodes determined similar manner eliciting weightings drawing shape marginal distribution 
nodes parents difficult define possible value node take provide conditional probability value respect possible combination values parent nodes 
general done eliciting individual probability just total bbn 
variety methods tools developed projects impress 
example consider node specification quality 
parent nodes resources intrinsic complexity stability takes values values 
value specification quality define probabilities 
eliciting directly elicit sample including extreme values typical ask expert provide rough shape distribution specification quality case 
generate actual probability distribution case extrapolate distributions intermediate values 
see done table shows actual data elicited case 
columns represent specific sample values final column rough shape distribution specification quality values 
table 
best case scenario row resources stability high complexity low distribution peaks sharply close close best quality specification 
complexity high row distribution skewed best sharply peaked 
worst case scenario row resources bad stability low complexity high distribution peaks sharply close close worst quality specification 
basis distributions drawn expert derive function compute mean specification quality distribution terms parents variables 
example case mean min resource effects resource effects intrinsic complexity stability effects probabilistic model software defect prediction example arrive distribution shapes drawn expert intermediate nodes described section 
example intermediate node stability parent node stability effects 
stability effects node npt defined beta distribution generated impress tool beta stability stability shows actual distribution final bbn hugin tool node specification quality number scenarios table 
provides consistency check excellent match distributions specified expert 

comments basic probabilistic network methods construct model illustrated section 
resulting network models entire development testing life cycle typical software module 
believe contains critical causal factors appropriate level granularity context software development philips 
node probability tables built eliciting probability distributions experience philips 
historical records subjective judgements 
non leaf nodes network large elicit relevant probability distributions expert judgement 
novel techniques developed impress projects extrapolate distributions small number samples 
applying numerous consistency checks believe resulting fair representation experience philips 
stands network provide range predictions analyses stage software development testing 
quality control process improvement 
areas needed tool considered ready extended trials 
firstly importantly network needed validated real world data 
secondly user friendly interface needed engineered tool require users experience probabilistic modelling techniques wider range reporting functions probabilistic model software defect prediction provided 
validation exercise described section way illustrates probabilistic network packaged form aid tool aid assess improve decide 
validation aid tool method philips software centre psc bangalore india validation data available 
gratefully acknowledge support way 
psc centre excellence software development philips data available wide diversity projects various business divisions psc 
data collected projects business divisions mainstream consumer electronics philips medical systems digital networks 
gave spread different sizes types projects 
data collected sources pre release post release defect data collected performance indicators database 
extensive project data available project database 
completed questionnaires selected projects 
addition network demonstrated detail basis experienced quality test engineers obtain reaction behaviour number hypothetical scenarios 
data project entered probabilistic model 
project 
data available nodes prior unit test sub net entered 

available data unit test sub net entered exception data defects discovered fixed 

pre release defect data available predicted probability distribution defects detected fixed unit test phase compared actual number pre release defects 
distinction major minor defects total numbers 
actual value pre release defects entered 
probabilistic model software defect prediction 
data test phases entered available exception number defects fixed independent testing post release defects 
predicted probability distribution defects fixed independent testing compared actual value 

available actual value number defects fixed independent testing entered 
prediction number residual defects noted 
unfortunately data available validate operational usage sub net 
need data field call rates currently available 
size probabilistic network insufficient data perform rigorous statistical tests validity 
sufficient data able confirm network predictions reliable warrant recommending extensive controlled trial set 
summary results validation exercise high degree consistency behaviour network data collected 
significant amount data needed order reasonably precise predictions specific project 
extensive data filled questionnaire plus project data plus defect data available projects 
projects showed similar degree consistency project studied sub section 
remaining projects show similar effects probability distributions broader precise significant amounts missing information results supportive convincing studied detail 
emphasised defect data refers total major minor defects 
residual defects may result failure perceptible user 
particularly case user interface projects 
note detailed contents questionnaires held confidence 
publish example data entry early phases software life cycle 
defect data reported keep details project anonymous 
example run aid probabilistic model software defect prediction screen shots aid tool illustrate questionnaire user interface typical validation run 
concerns original network nodes values simple ordinal scale range poor 
leaves open possibility different users apply different calibrations scales 
reliability predictions may vary dependent specific user system 
address providing questionnaire front system 
ordinal values associated specific question answers 
answers phrased categorical non statements 

screen shows entire network 
network modularised windows explorer style view navigate quickly network 
check boxes provided indicate questions answered specific project 
questions associated specific sub net displayed 
question answered selecting alternative suggested answers best matches state current project 
shows question alternative answers configuration traceability management node requirements control sub network 
example project answers available questions preceding defects discovered fixed unit test 
answers questions entered predicted probability distribution defects discovered fixed unit test mean median see monitor window displayed order show complete probability distribution prediction 
summary statistics displayed 
actual value 
probability distribution skewed median appropriate summary statistic see apparently close agreement predicted actual values 
agreement surprising optimistic qualitative behaviour network transferable organisation organisation expecting scaling defect numbers vary 
note median imprecise estimate number defects centre value probabilistic model software defect prediction associated bin histogram 
appropriate quote median order imprecision estimate explicit 

actual value defects discovered fixed entered 
answers staff quality resources available integration test independent test sub networks 
entered prediction defects discovered fixed independent test mean median standard deviation 
actual value 
case unit test close agreement median prediction actual value 
test developed psc module sub system specific philips development group 
integrated test product tested complete product 
test phase refer independent test 
code size test kloc 
modules sub system better term size validation study ranged size kloc 
probabilistic reliability model incorporates relatively weak coupling module size numbers defects 
results validation continue support view product process factors significant impact numbers defects 
modification specification quality sub net result experience gained validation 
intrinsic complexity sole direct influence module size explicitly factored problem size joint influence intrinsic complexity module size 
disadvantage reliability model complexity amount data needed support statistically significant validation study 
metrics programme psc relatively young organisation amount data available 
result able carry formal validation study 
outcome study positive 
feedback obtained various aspects functionality provided aid interface reliability model results indicated minor changes needed underlying model 
preparing extended trial wider range projects 
early part 
probabilistic model software defect prediction limit realistically expect achieve way statistical validation 
inherent nature software engineering 
development organisation conforms defined processes produce homogenous products project differ extent 
large relevant sample sizes necessary statistical process control 
primarily reasons augment empirical evidence expert judgement bayesian framework described 
data available possible critique revise model probability tables move subjective estimates statement physical properties world see 
absence extensive expensive reliability testing phase model provide estimate residual defects sufficiently precise software project decisions 
summary described probabilistic model software defect prediction 
model assessing ongoing projects exploring possible effects range software process improvement activities 
costs associated process improvements benefits assessed predicted improvement software quality model support sound decision making spi software process improvement 
model performed preliminary validation experiments 
addition user interface developed tool enables easily variety different modes product assessment spi 
anticipate model need additional refinement experience gained extended trials confident significant contribution sound effective decision making software development organisations 
simon carried user interface development aid contribution project invaluable 
nagarajan lahiri jitendra psc bangalore helped validation study 
validation study started mainstream ce projects psc valuable support software quality engineering team division 
figures probabilistic model software defect prediction alternative models influence predictor typically size measure number software defects 
graphical representation na regression model 
influence mediated common cause ps 
model behave way certain specific circumstances 
pc probabilistic model software defect prediction te sq dd subtle interactions variables captured simple graphical model 
node te represents test effectiveness sq represents software quality dd represents defects detected fixed 
probabilistic model software defect prediction conditionally independent spec quality specification review residual specification defects design coding process design doc quality probabilistic model software defect prediction specification defects code defects design doc quality specification quality intrinsic complexity unit testing process integration testing process residual defects residual defects network structure 
module size new requirements requirements match matching requirements independent testing process defect density operational usage residual defects delivered schedule staff quality intrinsic complexity module size probabilistic model software defect prediction spec 
defects internal resources specification quality specification quality sub net 
document quality stability stakeholder involvement new effects new novelty probabilistic model software defect prediction new match requirements match sub net 
config 
traceability management code defects 
design doc 
probabilistic model software defect prediction residual defects spec 
defects discovered fixed integration testing integration testing process sub net 
example generic testing idiom 
integration testing residual spec 
defects code defects introduced probabilistic model software defect prediction specification quality design coding quality design doc 
quality development staff quality resources design coding process sub net example process product idiom 
resources worst best probabilistic model software defect prediction stability worst best intrinsic complexity complex table eliciting probability table specification quality 
specification quality resources high stability high complexity low probabilistic model software defect prediction resources high stability high complexity high actual distributions specification quality various scenarios 
resources low stability low complexity low probabilistic model software defect prediction entire aid network illustrated windows explorer style view 
probabilistic model software defect prediction question associated configuration traceability management node 
probabilistic model software defect prediction prediction defects discovered fixed unit test project test 
probabilistic model software defect prediction bayesian belief nets www uk bbn article bbns html 
fenton pfleeger software metrics rigorous practical approach nd edition pws publishing 
fenton neil critique software defect prediction research ieee trans 
software eng 
fenton quantitative analysis faults failures complex software system ieee trans 
software eng 
hugin expert brochure 
hugin expert box dk aalborg denmark 
impress improving software process bayesian nets epsrc project gr www csr city ac uk csr city projects impress html 
krause 
learning probabilistic networks knowledge engineering review lauritzen spiegelhalter local computations probabilities graphical structures application expert systems roy 
stat 
soc 
ser pp 

mccall richards walters factors software quality 
volumes 
springfield va ntis ad 
musa software reliability engineering mcgraw hill 
neil fenton nielson building large scale bayesian networks knowledge engineering review appear 
pearl probabilistic reasoning intelligent systems networks plausible inference morgan kauffman 
revised consortium safety risk evaluation bayesian nets method manual esprit project www dcs qmw ac uk norman htm 

