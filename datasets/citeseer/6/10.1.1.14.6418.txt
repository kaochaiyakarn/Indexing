preliminary version functional perspective ssa optimisation algorithms manuel chakravarty gabriele keller school computer science engineering university new south wales sydney australia static single assignment ssa form central range optimisation algorithms relying data ow information correctness compilers employing algorithms 
known ssa form closely related lambda terms functional programs considering large amount energy expended theories frameworks formal reasoning lambda calculus natural leverage connection improve capabilities reason compiler optimisations 
discuss new formalisation mapping ssa programs restricted form lambda terms called administrative normal form anf 
conjecture connection improves ability reason ssa optimisation algorithms provide rst data point presenting anf variant known ssa conditional constant propagation algorithm 
static single assignment ssa form popular intermediate representation compiler optimisations considerable signi cance comes reasoning correctness optimisations 
unfortunately formal treatment semantics ssa programs optimisation algorithms complicated due called functions control merging data ow edges entering code blocks 
kelsey appel pointed correspondence programs ssa form lambda terms functional programs :10.1.1.3.6773
believe correspondence leveraged simplify reasoning compiler optimisations hitherto ssa form 
particular email keller cse unsw edu au preliminary version 
nal version published electronic notes theoretical computer science url www elsevier nl locate entcs chakravarty keller suggest intermediate forms lambda calculus lead clearer algorithms expect positively impact correctness concrete implementations formally veri ed 
concentrate restricted form lambda terms called administrative normal form anf clearly de ned operational interpretation general lambda terms 
kelsey related ssa form di erent form restricted lambda terms called continuation passing style cps :10.1.1.3.6773
flanagan showed data ow analysis real advantage cps direct style representations anf 
fact cps requires additional transformations special measures non distributive ow analysis cps costly necessary 
kelsey approach prefer formalise mapping programs ssa anf section formally appel 
section exploits correspondence ssa anf rephrasing wegman zadeck sparse conditional constants algorithm performs constant propagation unreachable code elimination 
call wegman zadeck original ssa algorithm scc ssa call new anf algorithm scc anf scc anf notation de ned semantics opposed informal notation wegman zadeck 
believe semantic rigour notation combination de ned semantics intermediate language anf implies scc anf signi cantly better suited formal analysis 
summary technical contributions formalise mapping programs ssa form programs anf section 
introduce algorithm scc anf claim implements analysis anf programs scc ssa ssa programs section 
scc anf rigorously de ned 
establish scc anf conservative variables marked constant constant section 
prove scc anf scc ssa implement analysis 
fact hard achieve due wegman zadeck informal presentation 
formal statements soundness mapping ssa programs anf programs soundness scc anf regard results step established bene ts typed functional intermediate languages compilers conventional languages 
bene ts include simpli ed reasoning correctness compiler optimisations type validation optimised code compile time support generation certi ed binaries :10.1.1.27.353
anf naturally integrates intra procedural inter procedural analysis 
chakravarty keller making data ow explicit section de ne concrete notation ssa anf 
addition characterise relationship intermediate forms translation procedure takes programs ssa form equivalent programs anf 
static single assignment form static single assignment ssa form imperative representation programs encodes data ow information explicitly requiring exactly assignment variable 
presents factorial function ssa form 
functions program resembles standard address code fac consists basic blocks connected jumps second labelled constituting main loop program 
brevity allow inlining blocks branches conditional statement reality assignments statement placed separate block represents conditional jump 
values variables updated places fac 
achieve single assignment property create new variable update splitting similarly block reached start block merge sources values called function selects value source block jump 
note ssa single assignment property purely syntactic loop variables updated runtime iteration 
procedure put ssa form arranging basic blocks dominator tree parent node dominates children 
assignment dominates expression path expression start procedure includes assignment 
ssa form cytron describe algorithm computing dominance information linear time demonstrate ssa increases power optimisations require data ow analysis 
presents syntax structured ssa form variant ssa dominator tree explicitely encoded block structure 
body procedure consists sequence labelled expressions structured dominator tree rst block group dominates remaining blocks group 
intuitively braces provide traditional scoping hierarchy block labels 
packing variables cfg follow kelsey annotating parameter function label basic block computes corresponding value start value computed unlabelled entry block procedure :10.1.1.3.6773
complete ssa program consists set possibly recursive procedures entry point ssa expression consists sequence chakravarty keller proc goto ret ret start variable label constant letrec variable constant ssa anf fig 

static single assignment normal forms assignments jump 
purpose discussion leave set constants unspeci ed general include integers oating point numbers machine opcodes primitives 
simplicity assume variables labels program unique 
administrative normal form right hand side presents syntax programs administrative normal form anf direct style form lambda terms ssa restricts function parameters atomic expressions 
demonstrated example anf code functions introduced letrec expressions correspond complete program cfg structure particular procedure ssa form 
tail calls explicit placement expression function applications appearing right hand side variable binding represent normal calls appearing body represent tail calls jumps 
ssa form anf encodes data ow explicitly naming subexpressions program permitting single de nition particular variable 
anf restriction dynamic runtime new scope created invocation function 
formulation anf semantics straight forward intuitive 
reduces number mechanisms expressing data ow functions procedures parameters parameters simplifying program analysis eliminating arti cial distinction intra inter procedural data ow ssa 
syntactically clear scoping de nitions simpli es formulation valid useful optimisations involve code motion basic blocks 
ssa design algorithms hampered need preserve dominance property program 
formal operational semantics ssa anf programs chakravarty keller proc fac goto start start mul sub goto ret ret fac letrec fac letrec fac mul sub fac fac fac ssa anf fig 

ssa anf representations factorial function version 
variants anf intermediate representation compilers functional languages including ghc haskell til ml 
ssa anf similarities ssa anf forms factorial function immediately obvious ssa blocks translated anf functions list arguments derived list expressions block 
de ne function formalises translation formed structured ssa program anf 
translation follows structure program ssa form 
complete program translated encompassing outermost letrec 
procedure generate anf function ssa block level dominator tree translated separate nested letrec 
variables de ned dominator path visible usual scoping rules nested procedures constructing new dynamic scope iteration translated ssa block 
dominator group selected body expression letrec 
leaves dominator tree reached immediate dominator scoping rules anf enforce dominance property ssa form 
desired nested letrec structure resulting program attened standard transformation 
ssa block translated separate anf function 
jump translated tail call corresponding function list parameters obtained list nodes destination block 
translating block function corresponding list formal parameters computed ssa variable de ned dominator path accessed node enforces formedness resulting program 
chakravarty keller translation function letrec start hi collect ssa procedures outer letrec jek pk start hi construct inner letrec structure dominator tree jek letrec collect ssa blocks inner letrec list jek jb ek jb convert ssa block anf expression jx ek jx ek jx ek jif jgoto construct list function parameters nodes jx ek jx ek jx ek jif jek construct argument list translated jump jx ek jx ek jx ek jif jek find entry expression program jek pk find entry block procedure jek jb ek jb construct label list procedure jek jb ek 
jb 
search list parameters label jx gk look label environment jb 
ek auxiliary syntax label environment hi 
fig 

translation ssa anf chakravarty keller theorem formed ssa program generates wellformed anf program 
proof theorem relies formedness ssa anf version 
sparse conditional constants functional form demonstrate advantages anf ssa introduce anf variant ssa sparse conditional constants algorithm scc ssa due space constraints able original algorithm please refer article wegman zadeck comparison 
reminder section de nes scc anf claim discovers constants scc ssa removes unreachable code anf term computed ssa program function 
prerequisites assume analysed program anf de ned rst order variable names unique contained set var 
discuss higher order programs section set prim var contains names primitive functions 
analysis proceeds domain abs const const constant values concrete value domain 
partial order de ned abs element largest element 
precisely constant const 
addition de ne abs value abs intuition underlying domain variable function maps receives concrete value maps constant value assumes maps non constant 
require function implements evaluation primitives prim prim const computes result applying abs extends domain abs argument primitive yields respectively behaves apart input program central data structure algorithm environment var abs maps variable names values domain 
environment includes entries value function variables determine result value function 
write interpretation convention represents result represents con icting values 
opposite symbols data ow analysis literature 
note includes non terminating functions sucient condition concluding function dead code 
chakravarty keller denote lookup value associated environment 
denote updating value associated addition dom denotes variables entry de ne re nement entry 
dom 

initial value environment prim 
prim 
fv denote variables free body function note includes argument variables case recursive function function name 
conversely occ denotes functions program fv algorithm maintains list names functions need processed initially empty 
algorithm algorithm computes optimised form program phases rst phase analyses program computing variable environment second phase computes optimised version phases syntax directed proceed anf grammar fig 

note de nition meta variable may constant value variable assume canonical extension constant values denote notation understood version purely functional programming language haskell 
consequently semantics algorithm accurately de ned language de nition haskell 
rst phase program analysis function displayed see page gets arguments anf expression traversed recursively current variable environment current list returns triple containing value updated variable environment new list 
contains functions de ned usage increased knowledge range argument values functions invoked 
computationally costly case letrec expressions need iterate collect new information 
program anf prim fg ha fgi distinguish cases program terminate 
constant program invariably results environment characterises usage variables chakravarty keller prim abs jf changed ff de ned 


changed indicates changed ha 
changed ected occ dom dom removes functions changed ected true false ha ha ha ek ha fg jf ha ek fun ha fg 
ff fun occ dom fun fig 

analysis function scc anf chakravarty keller program 
particular variables mapping constant values may replaced said constants 
functions dom constitute unreachable code 
various equations operate follows 
analysed expression simply constant variable determine value 
case application primitive obtain values arguments apply evaluation function abs interesting case application user de ned function 
environment re ned re ning mapping formal parameters concrete values called 
changes re nement added list need re process de nition view new environment 
re nement 
important ensure occurs agged reachable code 
analysed expression form re ne mapping value re nement changes functions contain free variable added list value may change consequence 
note need intersect occ dom ensure functions guaranteed reachable added list 
analysed expression conditional form meet values branches condition variable non constant choose branch determined case expression letrec rst traverse body expression collect uses functions mutually recursive set bindings modi ed list analyse auxiliary function recursive function call picks function occurs current list analyses right hand side 
uses result re ne entry case plain bindings list extended occ changes 
function terminates occur list anymore 
mean necessarily empty may contain functions de ned enclosing letrec expressions 
second phase program specialisation basis assignment values variables function transforms original program optimised program constant variables unreachable code removed 
function operates single sweep program exploits properties maps variable function constant variable function contain return possible run program uses variable invokes function 
value function indicates terminate 
occurrence function may replaced arbitrary diverging computation denote 
chakravarty keller function dom dead code 
specialisation function takes original program combination environment computed optimised program de ned follows constant non constant sjf eval ng eval prim ng const constant true false sjf ek dom unused code constant function ek letrec sjf sjf side ects far discussed scc anf treats side ecting primitives operations 
require extra care pose fundamental problems 
encounters side ecting primitive second equation result evaluating application assumed 
function body contains side ecting primitive mapped rationale function constant removed invocation carries ect 
note existence side ecting primitives reason need able distinguish functions dead code non terminating functions 
non terminating function ect replace arbitrary diverging computation 
words functions unde ned unde ned ones write char ones need treated di erently assign 
chakravarty keller inlining anf includes notion function abstraction lends uniform representation set functions procedures opens path inter procedural analysis case inter procedural constant propagation 
known combining inlining procedure integration constant propagation improves results 
non recursive functions contain side ecting primitives easily achieved scc anf treating primitives precisely second equation de nition replace condition prim liberal condition form prim non recursive 
extend abs ability evaluate non recursive functions 
higher order functions scc anf requires rst order program explicitly handle higherorder variables 
treatment higher order variables important modern object oriented functional languages 
various ways varying sophistication scc anf extended handle higher order variables 
simplest scheme giving precise results re nes 

functions assigned variable opposed invoked 
re ects gain knowledge range argument values invoked 
needs return higher order call site unknown function value 
mapping correct conservative may able statically infer call sites functions assigned variables 
particular improve basic scheme constant propagation identify higher order call sites possible executions program invoke function 
suces extend set constants contained domain abs symbols representing various functions values 
derives call site treat call site 
noting similarity scc anf interpretation fact scc anf corresponds known cfa analysis power sets closures domain higher order variables 
detailed description resulting algorithm scope related constant propagation algorithm studied sabry felleisen 
soundness new algorithm establish soundness need auxiliary de nitions 
rst relates environments free variables expression 
oblivious chakravarty keller entries relating bound variables 
de nition fv fv dom de nitions cover validity algorithm auxiliary function particular expression 
de nition valid expression denoted environments fv fg ha implies abs jek abs js furthermore fg abs jek de nition valid set function bindings fs list denoted environments fv fs binding implies abs jek abs js relation fv oblivious bound variables validity implies algorithm yields suitable environment bound variables input environment di er actual value assigned variable 
property important algorithm optimistic intermediate environments constructed execution algorithm may incorrect assumptions values variables 
algorithm terminate bindings replaced 
theorem soundness valid anf expressions proof proceeds induction nesting depth expression contains main steps base case assert anf expression contains letrec expression 
ii auxiliary step list function bindings fs list assert holds bindings fs holds 
iii inductive step list function bindings fs anf expression assert imply fs ek 
detail steps version 
formalised mapping programs ssa form anf anf version wegman zadeck conditional constant propagation algorithm called scc anf outlined anf algorithm extended include inlining higher order functions 
interested assessing usefulness typed functional intermediate languages compilers conventional languages 
algorithm chakravarty keller scc anf rigorously de ned wegman zadeck original algorithm rstly anf de ned semantics secondly notation essentially nicely typeset version programming language haskell 
semantic clarity prerequisite rigorous formal reasoning compiler optimisations 
prerequisite serious comparison interpretation classic data ow analysis literature 
alternative method formalising conditional constant propagation graph framework introduced lerner 
focus modular composition data ow analyses 

referees helpful comments 
alpern wegman zadeck detecting equality variables programs th acm sigplan sigact symposium principles programming languages pp 

appel modern compiler implementation ml cambridge university press 
appel ssa functional programming acm sigplan notices pp 

maccabe ottenstein program dependence web representation supporting control data demand driven interpretation imperative languages proceedings conference programming language design implementation pp 

chakravarty keller functional perspective ssa optimisation algorithms technical report university new south wales 
cousot cousot interpretation uni ed lattice model static analysis programs construction approximation xpoints proceedings th acm sigact sigplan symposium principles programming languages pp 

cytron ferrante rosen wegman zadeck eciently computing static single assignment form control dependence graph acm transactions programming languages systems pp 

flanagan sabry duba felleisen essence compiling continuations proceedings acm sigplan conf 
programming language design implementation pldi pp 

concrete implementation functions haskell available www cse unsw edu au ssa lambda 
chakravarty keller harper morrisett compiling polymorphism intensional type analysis nd acm sigplan sigact symposium principles programming languages pp 

johnsson lambda lifting transforming programs recursive equations jouannaud editor proceedings international conference functional programming computer architecture number lecture notes computer science 
jones santos transformation optimiser haskell science computer programming pp 

kelsey correspondence continuation passing style static single assignment form acm sigplan notices pp :10.1.1.3.6773

lerner grove chambers composing data ow analyses transformations proceedings th acm sigact sigplan symposium principles programming languages pp 

morrisett walker crary glew system typed assembly language acm transactions programming languages systems pp 

peyton jones haskell non strict purely functional language 
url haskell org definition peyton jones compiling haskell program transformation report nielson editor proceedings european symposium programming lecture notes computer science pp 

sabry felleisen continuation passing useful data ow analysis proceedings acm sigplan conference programming language design implementation pldi pp 

schneider morrisett harper language approach security informatics years back years ahead lecture notes computer science pp 

shivers control ow analysis scheme proceedings sigplan conference programming language design implementation 
tarditi morrisett cheng stone harper lee til type directed optimizing compiler ml sigplan conference programming language design implementation pp 

tolmach external representation ghc core language 
wegman zadeck constant propagation conditional branches acm transactions programming languages systems pp 


