robust efficient cartesian mesh generation component geometry air force wright laboratory nasa ames moffett field ca berger melton courant institute nasa ames research center new york ny moffett field ca documents new method rapid robust cartesian mesh generation componentbased geometry 
new algorithm adopts novel strategy intersects components extract surface proceeding volume mesh generation second phase 
intersection scheme robust geometry engine uses adaptive precision arithmetic automatically consistently handles geometric degeneracies algorithmic tie breaking routine 
intersection procedure worse case computational complexity logn demonstrated test cases overlapping intersecting components including variety geometric degeneracies 
volume mesh generation takes intersected surface triangulation input generates mesh cell division initially uniform coarse grid 
refining hexagonal cells resolve geometry new approach preserves ability directionally divide cells aligned local geometry 
mesh generation scheme linear asymptotic complexity memory requirements total approximately words cell 
mesh generation speed approximately cells minute mhz risc workstation 
past years seen large resurgence interest adaptive cartesian mesh algorithms application problems involving complex geometries 
refs 
proposed flow solvers mesh generation schemes intended arbitrary geometries 
generating suitable cartesian meshes relatively quick process fully automated going research focuses quick extraction cfd ready geometry cad databases provide easy access accurate solutions euler equations design cycle 
viewing configurations component basis conceptual advantages treatments single complete configuration 
obvious components translated 
aerospace engineer senior member aiaa 
prof dept comp 
sci member aiaa 
aerospace engineer senior member aiaa declared government subject copyright protection united states 
rotated respect requiring user intervention time consuming return cad order extract new intersection information new cfd ready description surface 
approaches surface triangulation constrained intersection curves components starting upstream process component approach requires piece geometry described single closed entity 
relative motion parts may pre programmed computed result design analysis 
approach offers obvious advantages automation external macroscopic control 
flexibility comes expense added complexity grid generation process 
components may overlap possibility exists cartesian cell surface intersection detected mesh generation may entirely internal configuration intersections classified exposed retain internal reject 
vast majority intersections part surface intersections possibility internal tested 
analysis mesh generation procedure documented refs revealed computation dedicated resolution issue 
approaches streamlining process exist attractive appears avoids issue intersection classification altogether 
intersecting components extract precisely surface subsequent cartesian cell intersections guaranteed exposed retained 
remaining mesh generation problem may treated single component problem 
conceptually straightforward efficient implementation intersection algorithm delicate 
component assumed described surface triangulation solution involves sequence problems computational geometry 
algorithm requires intersecting number non convex polyhedra arbitrary genus 
convex polyhedra intersection algorithms inappropriate 
intersected triangle broken smaller ones problem constrained triangulation 
deletion interior triangles requires inside outside determination neighbor painting 
intersecting triangles different components considered general position robustness finite precision mathematics considered 
section ii presents robust algorithm computing intersections extracting surface realistically complex examples 
algorithm quite general numerous applications outside specific field cfd 
section iii presents volume mesh generation algorithm particular attention efficiency data structures speed intersection tests 
approach preserves ability directionally refine mesh cells 
feature comes response earlier concluded isotropic cell division may lead excessive numbers cartesian cells dimensions suggested lower dimensional features may frequently resolved directional division cartesian cells 
ii 
component intersection problem intersecting various components configuration extracting surface may viewed series smaller problems uncommon computational geometry 
section briefly discusses key aspects involved process 
focus centers topics proximity searching primitive geometric operations exact arithmetic algorithms breaking geometric degeneracies 
proximity queries special care intersection algorithm result implementations asymptotic complexity 
primary culprit repetition geometric searches determine list candidate triangles components may intersect triangle polyhedron consideration 
number data structures proposed speed process particularly suitable method alternating digital tree adt algorithm developed ref 
inserting triangles adt possible identify list candidate triangles logn operations 
result intersections need checked candidate triangles list spanning triangles returned tree 
basic algorithm outlined follows implemented balanced tree approach detailed ref 

adt hyperspace search technique converts problem searching finite sized objects dimensions simpler partitioning space dimensions 
searches conducted physical space objects physically close necessarily close search space 
fact hamper tree performance instances effort improve lookup times apply component bounding box filter triangles inserting tree 
possibly participate intersection triangles contained bounding box component inserted tree 
filtering reduces tree size improves probability encountering intersection candidate tree structure crowded irrelevant geometry 
intersection generally positioned triangles task intersecting particular triangle reduced intersection test triangle list candidates provided adt intersection problem re cast series tri tri intersection computations 
shows view intersecting triangles model discussion 
intersecting tri tri pair contribute segment final polyhedra comprise surface configuration 
assumption data general opposed arbitrary position implies intersection nondegenerate 
triangles may share vertices edges tri tri pairs intersect exactly 
intersections proper 
restriction lifted sections automatic tie breaking algorithm 
intersecting pair generally positioned triangles dimensions 
approaches exist compute intersections particularly attractive technique comes form boolean test 
predicate performed robustly quickly multiplication addition avoiding inaccuracy robustness pitfalls associated division fixed width representations floating point numbers 
useful comprehensive treatment intersection primitive subsequent sections robustness return relations 
triangles properly intersect dimensional space conditions exist 
edges triangle cross plane 

condition exists total edges available pierce boundaries triangles 
approach checking conditions directly compute pierce points edges triangle plane 
pierce locations triangle edges may tested containment boundary triangle 
approach conceptually simple error prone implemented finite precision mathematics 
addition demanding special effort trap zeros floating point division required approach may result numbers exactly representable finite width words 
results loss control precision may cause serious problems robustness 
alternative slope pierce test consider boolean check computation triple product division 
series logical checks attractive property permit establish existence connectivity segments relying problematic computation pierce locations 
final step computing locations points may relegated post processing may grouped connectivity established floating point errors fatal consequences 
boolean primitive intersection edge triangle concept signed volume tetrahedron signed volume established relationship computation volume simplex dimensions determinate form see ex 

signed volume simplex vertices dimensions vt det dd denotes jth coordinate kth vertex jk dimensions eq 
gives times signed volume tetrahedron 
vt abcd volume serves fundamental building block geometry routines 
positive forms counterclockwise circuit viewed observation point located side plane defined opposite positive negative volumes define states boolean test zero indicates vertices exactly coplanar 
vertices coplanar situation constitutes tie resolved general tie breaking algorithm shortly 
applying logical test edge ab triangle fig 
ab crosses plane iff signed volumes opposite signs 
presents graphical look application test 
vol vol boolean test check edge ab crosses plane defined triangle computation signed volumes 
established opposite sides plane remains determine ab boundary triangle 
case tetrahedra formed connecting points ab vertices triangle taken time sign ta ta ta ta ta ta illustrates test case volumes positive 
ta ta ta boolean test pierce line segment ab boundary triangle 
determining existence segments result intersections tri tri pairs connecting linked list segments triangles intersect produce remains compute locations pierce points 
accomplished parametric representation intersected triangle edge 
technique straightforward dimensional generalization method 
intersected triangles final result intersection step list segments linked intersected triangle 
segments divide intersected triangles polygonal regions completely inside outside body 
order remove portions triangles inside triangulate polygonal regions intersected triangle reject triangles lie inside body 
shows typical intersected triangle divided polygonal regions segments resulting intersection calculation highlighted 
sketch polygonal regions formed triangle boundary segments intersection decomposed sets triangles 
segments may cut triangle arbitrarily pre disposition creating triangles arbitrarily small angles exists 
effort keep triangulations wel behaved possible employ dimensional delaunay algorithm original intersected triangle 
intersection segments constraints algorithm runs intersected triangle producing new triangles may uniquely characterized inside outside configuration 
decomposition intersected triangle constrained delaunay triangulation algorithm constraining segments shown heavy solid lines 
variety approaches constructing delaunay triangulation planar graph exist see surveys refs 
triangulation constructed starts vertices original intersected triangle vertices fig 
incremental algorithm green sibson appealing 
starting vertices defining original triangle pierce points successively inserted evolving triangulation 
pierce points inserted constraints enforced simple recursive edge swapping routine 
incircle testing point containment circumcircle 
contained diagonal quadrilateral abcd swapped cb ad 
green sibson algorithm extensively documented literature 
central operation local application incircle predicate determines edges need swapping triangulation delaunay successive point insertion 
predicate examines points quadrilateral formed triangles share common edge 
point falls circle defined diagonal quad swapped cb ad 
relating discussion signed volume calculation eq starts recognizing projects coordinates point incircle test unit paraboloid mapping kx ky kx ky kx ky abcd points quadrilateral form tetrahedron incircle predicate may viewed precisely evaluation volume tetrahedron 
ta point lies circle defined edge cb swapped da triangulation delaunay 
shows example procedure applied single triangle intersected wing leading edge 
example interesting demonstrates need robustness intersection algorithms 
example wing leading edge triangle 
intersection involves constraining segments 
component data considered exact single precision intersection points computed double precision 
example involved tie breaking succession embedded fig clear irregularity resulting triangulations demand robust implementation fundamental geometry routines 
large triangle wing leading edge component significantly higher resolution 
segments describing intersection leading edge constrain triangulation 
inside outside determination intersection constrained triangulation routines preceding sections resulted set triangles may uniquely classified internal exposed surface configuration 
step left delete triangles internal configuration 
specific application classic point polyhedron problem adopt ray casting approach 
method fits particularly framework proximity testing primitive geometric computations described sections ii 
simply stated determine point ith component configuration ray cast intersects closed boundary odd number times 
preceding sections demonstrated intersection triangulation algorithms boolean operations checking sign determinant eq true ray casting step 
assuming cast coordinate axis example may truncated just outside face bounding box entire configuration ray may represented line segment test point problem reduces proximity query ii segment triangle intersection algorithm ii adt returns list intersection candidates logical tests figs 
eq check intersections 
counting number intersections determines triangle status inside outside 
avoid casting rays triangles painting algorithm allows tested triangle pass status triangles share edges 
algorithm recurses neighboring triangles constrained edge encountered time stops 
way entire configuration painted ray casts 
recursive algorithm implemented stack avoid overhead associated recursion 
figures brief examples 
helicopter example problem containing components triangles 
configuration includes external stores 
complete intersection removal interior geometry required sec workstation mhz mips processor 
shows close ups inboard transport configuration 
frame left shows final geometry intersection trimming right frame shows view inside removing outboard section wing cutting plane center 
configuration consisted components described triangles 
helicopter example containing components external stores 
left close inboard high wing transport intersection removal interior geometry frame shows leading edge wing section various engine components 
right view inside removal internal geometry 
configuration consisted components described triangles geometric degeneracies floating point arithmetic tie breaking intersection ray casting algorithms wholly dependent determinant computation eq imperative insure accurate evaluation volume 
fact operations establish connectivity final exterior surface triangulation involve computation sign determinant design 
result choice robustness procedure ultimately equates robust implementation signed volume calculation 
fortunately evaluation determinant long subject study computational geometry computer science :10.1.1.1.6545
computing sign eq constitutes topological primitive operation tests input results constant number cases 
primitives classify constructed objects actual locations pierce points ii determined processing 
primitives provide intersections implicitly information suffices establish connectivity segment list describing intersection 
signed volume computation arbitrarily positioned geometry return result positive negative zero non degenerate cases zero represents geometric degeneracy 
implementation predicate tricky requires distinguish round error exact zero 
considerations usually lead practitioners implement predicate exact arbitrary precision arithmetic strictly integer math 
unfortunately hardware development gone rapid floating point computation hardware architectures optimized arbitrary precision integer math alternatives 
floating point filtering exact arithmetic effort perform computation possible floating point hardware compute eq floating point aposteriori estimate maximum possible value round error re max error larger computed signed volume case considered indeterminate invoke adaptive precision exact arithmetic procedure developed shewchuk case turns identically zero resolve degeneracy general tie breaking algorithm virtual perturbation approach :10.1.1.1.6545
error bound re max floating point computation determinant eq derived ref :10.1.1.1.6545
derivation accounts error computing determinant error associated floating point computation bound 
bound may expressed circle indicates operations evaluated floating point operations ieee compliant hardware 
eq precisely number bits significand machine 
may evaluated determining largest exponent sum equality tested floating point 
bit platforms exact rounding double precision single 
practice small fraction determinant evaluations fail pass test eq 
helicopter example problem shown earlier intersection required evaluations determinant failed pass floating point filter eq 
tie breaking degeneracy degenerate geometry identified exact arithmetic routines remove restriction imposed initial assumption input geometric data lie general position 
richness possible degeneracies dimensions systematic method identifying coping handling special cases dominate design geometric algorithm attempt implement ad hoc tie breaking algorithm intuition programmer skill seek algorithmic approach problem 
simulation simplicity sos category general approaches degenerate geometry known generically virtual perturbation algorithms basic premise assume input data undergoes unique ordered perturbation ties broken data special position perturbed general position 
tie exact zero eq encountered rely perturbations break tie 
perturbations unique constant tie input geometry resolved topologically consistent manner 
perturbations virtual geometric data altered 
perturbation point function point index coordinate direction ref 
advocates tion form choice indicates perturbation applied ij greater kl iff 
illustrate consider dimensional version simplex determinant eq 
det det points assumed indexed respectively perturbation matrix gives determinant perturbed matrix yields data span finite region space intuitively choose perturbation small increasing powers lead terms decreasing magnitude 
ref shows observation holds perturbation form eq 
evaluates exact zero sign determinant determined sign significant coefficient expansion 
term yields exact zero continue checking signs coefficients non zero term appears 
eq coefficient fifth term det det constant sign negative term degenerate 
dimensional variant simplex determinant eq non zero coefficients constant encountered 
appendix lists hierarchy terms expansion 
hot det improperly intersecting right degeneracies resolved virtual perturbations exact arithmetic 
contains deceptively simple looking application tie breaking algorithm 
large small cubes sketch abut exactly 
addition sharing geometry location cubes planar faces exact improper intersections edge bc ad 
shows result computing intersection re triangulating extracting surface 
sos resolved case imposing virtual perturbations polyhedra overlapped properly consistently resolving planar degeneracy improper edge edge intersections 
geometry required evaluations eq evaluated zero required sos tie breaking iii 
volume mesh generation generation cartesian volume mesh begins final surface triangulation resulting process section ii 
approach relieves volume concerns internal geometry substantially reduces complexity task 
approach domain coordinate aligned cartesian mesh may defined minimum maximum coordinates initially region uniformly discretized nj divisions cartesian dimension repeatedly dividing body intersecting cells neighbors final geometry adapted mesh obtained 
mesh considered unstructured collection cartesian 
authors elect traverse adaptively refined cartesian meshes data structure adopting unstructured approach readily preserves ability directionally refine cells 
flexibility important earlier suggested permitting isotropic refinement dimensions may lead excessive numbers cells geometries length scales high aspect ratio components proximity testing initially nt surface triangles inserted adt 
insures returning subset ti 
triangles intersected ith xo cartesian cell complexity proportional log nt cell subdivided child cell inherits triangle list parent 
mesh subdivision continues triangle lists connected surface intersecting cut cartesian cell get shorter approximately factor successive subdivision 
observation implies machine dependent crossover faster perform exhaustive search parent cell triangle list perform adt lookup get list intersection candidates cell crossover level primarily determined number elements nt processor instruction cache size 
conducting searches parent triangle list implies progressively smaller cartesian cells may intersected decreasing computational complexity 
large example problems crossover adt exhaustive lookup usually occurs cells geometric refinement surface intersecting cartesian cells domain initially automatically refined specified number times rmin default level set divisions maximum allowable number divisions rmax direction 
cut cell tagged division refinement propagated usually layers mesh buffering algorithm operates sweeps faces cells 
refinement curvature detection strategy similar originally ref 
pass strategy detects angular variation surface normal cut cell examines average surface normal behavior adjacent cut cells 
running index sweep set triangles ti jth component vector subtraction maximum minimum normal vectors cartesian direction 
min max performed elements ti angular variation cell simply direction cosines similarly measures jth component angular variation adjacent cut cells denoting unweighted unit normal vector cut cell components cell exceeds angle threshold usually set offending cell tagged subdivision direction data structures adopted unstructured approach intend construct meshes vides cell geometry cell vertex pointers bits 
shows model cartesian mesh covering region cell mesh uniquely located integer coordinates correspond vertex closest allocate bits memory store integer ij upper bound permissible total number vertices coordinate direction cells imperative data structures compact possible 
system described section pro mesh nj prescribed nodes performing rj cell refinements direction produce mesh maximum integer coordinate resolvable bits 
maximum number cell subdivisions may performed direction floor indicates rounding lower integer 
substituting back eq gives total number vertices address coordinate direction 
floor eq insures mj exceed xo vj max min kj kj ti max nk min kj cos ij rs jr js cos rs cartesian mesh mj divisions direction discretizing region xo 
currently permit bits direction gives locations coordinate permitting indices packed single bit integer 
gives example vertex numbering individual cell 
system rj rj nj rmax log log rmax xo xo xo partitions partitions partitions adopted study crystalline structures specialized cubic lattices analogy cell vertices numbered boolean index low high direction 
crystal direction vertex shown square brackets 
reinterpreting bit pattern integer yields unique numbering scheme vertex cell 
vertex numbering cell numbers square brackets crystal directions vertex 
cell integer position vector know number times divided direction rj express vertices directly 
powers expression simply left shift bitwise representation integer subtraction rmax rj vertices computed rj low cost 
addition total number refinements direction relatively small integer possible pack components single bit word 
cut cell intersection rmax rmax rmax rmax rmax rmax rmax rmax rmax rmax rmax rmax central algorithm cartesian mesh generation strategy involves testing surface intersection cartesian cells 
general intersection algorithm section ii 
systems quite general describe cubic tetrahedral hexagonal cells 
see 
provide method testing intersections attractive alternative comes literature computer graphics algorithm highly specialized coordinate aligned regions extended non cartesian cells cell types speed simplicity compromised 
rapid cut cell intersection important part cartesian mesh generation central operations algorithm detail 
shows dimensional cartesian cell covers region cd points assumed vertices candidate triangle list tc vertex assigned associated location respect cell boolean code bits coordinate direction 
region coordinate aligned single inequality evaluated set bit vertices 
setup coordinate aligned region cd dimensions 
operators denote bitwise applications boolean candidate edges rs trivially rejected similarly segment completely contained 
edges triangle tuv trivially rejected possibility intersects region 
polygon tested face planes region constructing logical bounding box bitwise testing region 
fig 
testing results non zero face 
intersection point computed classified tested containment boundary cd examination code 
points lie xx boundary contents bit may trustworthy 
reason mask ques bit examining contents 
applying bitwise manner yields indicates face 
clearly alternative approaches implementing types simple queries section describes 
efficient implementation operations central success cartesian mesh code 
bitwise operations comparisons detailed proceeding paragraphs generally execute single machine instruction making particularly attractive approach 
iv 
results intersection algorithm described ii mesh generator iii exercised variety example problems 
presentation numerical results includes example meshes examination asymptotic performance algorithm 
computations performed mips workstation mhz cpu 
example meshes high speed civil transport depicts views cell mesh constructed proposed supersonic transport design 
geometry consists polyhedra non zero genus 
components include wing engine 
original component triangulation comprised triangles intersection intersection algorithm re triangulated intersections extracted surface 
calls placed determinant computation eq degenerate required tie breaking 
intersection required seconds workstation time 
mesh shown contains levels cells divisions isotropic 
mesh generation required minutes seconds 
maximum memory required mb 
helicopter configuration contains views mesh produced non symmetric helicopter configuration similar shown earlier fig 
example began triangles describing components 
intersection re triangulation triangles remained exterior 
final mesh contained cartesian cells intersecting geometry 
mesh shown refined times produce cells levels refinement final mesh 
wing components span bounding boxes components virtually triangles loaded adt resulting sluggish intersection computation required just minutes cpu time 
mesh computed approximately minutes seconds 
upper cutting planes cell cartesian mesh proposed geometry 
lower close mesh near outboard 
upper cartesian mesh attack helicopter configuration cells final mesh 
lower close mesh left wing stores 
multiple aircraft final mesh adds twin tailed fighter geometries helicopter example 
helicopter offset axis lead fighter emphasize asymmetry mesh 
fighter flow described component triangulations 
entire configuration contained components described triangles intersection 
total determinant evaluations degenerate invoked sos routines 
presents overview mesh 
upper frame shows portions cutting planes geometry 
lower frame shows cutting plane tail rear aircraft just helicopter geometry 
final mesh includes cells required maximum mb compute 
mesh generation time approximately minutes seconds 
cutting planes mesh multiple aircraft configuration cells triangles triangulation surface 
asymptotic performance number triangles surface percentage mesh cells cut triangulation primary factors effect mesh generation speed 
examples previous section chosen demonstrate mesh generation speed realistically complex geometries 
order assess asymptotic behavior algorithm mesh generator run teardrop geometry described triangles 
prevent variation percentage cut cells divided successive refinements angle thresholds triggering mesh refinement set zero 
choice forced cut cells tagged refinement level 
series meshes produced investigation cells final grids 
initial meshes consisted cells subjected levels refinement 
contains scatter plot cell number vs cpu time including file reading writing 
solid line fitted data result linear regression 
line slope seconds cell correlation coefficient 
equates cells second cells minute example 
strong correlation straight line indicates mesh generator produces cells linear asymptotic complexity 
result optimal method operates cell cell 
cpu time seconds timing data scatter plot mesh size vs computation time 
mhz misc cpu 
number cells developed new cartesian mesh generation algorithm efficiently robustly producing geometry adapted cartesian meshes complex configurations 
method uses component approach surface geometry pre processes intersection components surface passed mesh generator 
surface intersection algorithm uses exact arithmetic adopts algorithmic approach handling degenerate geometry 
robustness approach demonstrated examples nearly degenerate geometry evaluations 
mesh generation algorithm exercised variety cases complex geometries involving components described triangles 
mesh generation operates order cells minute moderately powered workstations 
memory usage approximately words cell typically mb required generate mesh cells 
example meshes contained cells 
evaluation asymptotic performance algorithm indicated cells generated linear computational complexity 
aspect completely addressed degree anisotropic cell division improve efficiency adaptive cartesian simulations realistic geometries 
current method ability refine cells directionally topic addressed 
vi 
acknowledgments berger supported afosr doe de fg er er riacs nasa ames 
authors gratefully acknowledge jonathan shewchuk adaptive precision floating point software 
addition acknowledge chien rourke helpful conversations mail contributions 
vii 
melton automated dimensional cartesian grid generation euler flow solutions arbitrary geometries 
ph thesis ca dept mech 
eng davis ca apr 
hassan euler calculations wings cartesian grids aiaa 
jan 
berger leveque adaptive cartesian mesh algorithm euler equations arbitrary geometries aiaa 
jun 
powell accuracy assessment cartesian mesh approaches euler equations aiaa cp 
jun 
quirk alternative unstructured grids computing gas dynamic flows arbitrarily complex dimensional bodies computers fluids vol pp 

gooch solution navier stokes equations locally refined cartesian meshes state vector splitting 
ph dissertation department aeronautics astronautics stanford university palo alto ca dec 
melton berger automatic cartesian grid generation euler flows aiaa cp 
jun 
melton berger wong applications cartesian grid euler method aiaa 
jan 
jr unstructured cartesian prismatic grid cfd code complex geometries aiaa 
jan 
melton steger euler flow solutions unstructured cartesian prismatic grids aiaa 
jan 
adaptively refined cartesian cell method euler navier stokes equations 
ph dissertation department aerospace engineering univ michigan ann arbor mi sep 
bell colella crutchfield welcome adaptive cartesian grid methods representing geometry inviscid compressible flow aiaa cp 
jun 
melton berger adaptation surface modeling cartesian mesh methods aiaa cp jun 
bonet alternating digital tree adt algorithm geometric searching intersection problems int 
num 
meth 
engng 
samet design analysis spatial data structures 
addison wesley 
rourke computational geometry cambridge univ press 
unstructured mesh generation adaptivity th computational fluid dynamics lecture series von institute mar 
barth aspects unstructured grids finite volume solvers euler navier stokes equations th computational fluid dynamics lecture series von institute mar 
green sibson computing dirichlet plane computer journal 
chv tal linear programming 
freeman san francisco ca 
knuth axioms hulls 
lecture notes comp 
sci 
springer verlag heidelberg 
shewchuk adaptive precision floating point arithmetic fast robust geometric predicates cmu cs school computer science carnegie mellon univ :10.1.1.1.6545
currently available www cs cmu edu afs cs project quake public papers robust predicates ps chazelle application challenges computational geometry cg impact task force report tr 
princeton univ apr 
edelsbrunner cke simulation simplicity technique cope degenerate cases geometric algorithms acm transactions graphics jan 
van elements material science engineering 
addison wesley 
cohen mathematical tools modeler workbench ieee comp 
graph 
app oct 
graphics gems ii triangle cube intersections 
academic press 
appendix performing expansion section ii determinant eq results non constant coefficients constant encountered power 
unique 
illustrate compute determinant perturbed dimensional simplex matrix det det table lists terms expansion 
table coefficient det det det det det det det det det det det det det det 
