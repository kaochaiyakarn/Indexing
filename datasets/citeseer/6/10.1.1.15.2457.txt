brian babcock maintaining variance medians data stream windows datar sliding window model useful discounting stale data data stream applications 
model data elements arrive continually elements answering queries 
novel technique solving important related problems sliding window model maintaining variance maintaining median clustering 
solution problem maintaining variance provides continually updated estimate variance values data stream relative error log memory 
constant factor approximation algorithm maintains approximate median solution data points log memory parameter trades space bound approximation factor 

data stream model computation useful modeling massive data sets larger available main memory need processed single pass 
motivating applications include networking traffic engineering network monitoring intrusion detection telecommunications fraud detection data mining financial services arbitrage financial monitoring commerce clickstream analysis personalization sensor networks 
model supported part rambus stanford graduate fellowship nsf iis 
supported part scholarship nsf iis 
supported part nsf iis foundation research microsoft veritas 
supported part nsf graduate fellowship arcs fellowship nsf iis 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
pods june san diego ca 
copyright acm 
rajeev motwani department computer science stanford university stanford ca babcock datar rajeev loc cs stanford edu callaghan data treated possibly infinite sequence records captures characteristics massive data sets distinct standard data sets loaded traditional rdbms analyzed offline 
data streams unbounded length impossible guarantee storage entire data set applications important able execute queries data fit main memory 
making queries possible major challenge data stream processing 
memory constraints necessary devise techniques maintaining summaries synopses history stream 
research focused techniques building summaries data seen far 
applications old data points considered useful relevant data 
necessary old stale data overly influence statistics models built analysis 
common approaches deal problem staleness historical data 
method aging data elements associated weights decrease time 
algorithms aging weights decrease computationally simple exponential decay model gilbert linear decay models 
sliding window model commonly mechanism discounting stale data :10.1.1.106.9846:10.1.1.24.7941
elements arrive stream considered relevant answering queries window size 
datar gionis indyk motwani considered problem maintaining simple statistics sliding windows important tool processing data stream queries 
general framework novel data structure called exponential histogram eh estimate class aggregate functions sliding windows 
result applies function satisfying properties multisets property 

property 
poly 
property 

property 
cf cf constant 
furthermore technique efficient possible compute estimate small sketch sketch synopsis structure small size additive sketches multisets sketch quickly computed 
observe sum vector norms satisfy properties 
interesting statistics satisfy properties estimated techniques 
expand applicability eh technique extending statistics obey properties 
consider important statistics variance median 
variance fundamental statistical measure widely data analysis 
median clustering problem studied extensively disciplines effective means summarizing data building model visualization analysis 
example clustering data customer information database may help advertisers discover market segments clustering telephone call records may expose fraudulent telephone 
systems community median clustering general long areas active research 
previous stream clustering algorithms aim maintain clusters valid points stream old points expire 
algorithms address important issue concept drift major problem online learning caused model old data fails correctly reflect current state world 
domingos hulten spencer sliding windows deal problem context learning decision trees data streams :10.1.1.134.4166
contribution address problem concept drift providing data stream clustering algorithm sliding windows median clustering 
note variance median cost special case continuous median data points dimensional space sum squared distances metric 
similarity translates common technique computing may possible technique computing similar statistics synopses sliding windows 
technique solve problems summarize intervals data stream composable synopses 
order efficient memory synopses adjacent intervals combined doing increase relative error significantly 
synopsis interval straddles sliding window boundary inaccurate points summarizes longer fall sliding window expired 
able contain inaccuracy ensuring size interval terms objective function trying estimate variance median clustering cost large compared intervals 
main technical innovation distinguishes algorithms ones described datar gionis indyk motwani estimate contribution interval treating expired points typical points interval 
main results follows 
show estimate variance sliding windows relative error log memory 
algorithm median clustering slid ing windows log memory 
constant factor bicriteria approximation algorithm median problem uses centers objective function value constant factor optimal parameter captures trade space bound approximation ratio 
build solution devise algorithm exactly centers providing approximation guarantee having asymptotic memory requirement log 
median clustering introduce sliding window algorithm incorporates techniques pass data stream clustering algorithm guha mishra motwani callaghan 
algorithm uses memory provides constant factor approximation median problem 
sliding window algorithm eh estimate value median objective function direct application techniques datar gionis indyk motwani impossible variance median objective function satisfy property :10.1.1.24.7941
sets data points tightly clustered mean variance set small means sets far apart variance union arbitrarily large 
true clustering sets points may cluster nicely clusters sets cluster centers far apart union sets difficult cluster 
demonstrate new technique gets problem enables maintain ehs small space low relative error 
related algorithms streaming data area research interest 
detailed survey algorithmic database research data streams available 
domingos hulten spencer study problem maintaining decision trees sliding windows data streams 
results median extends earlier guha mishra motwani callaghan pass clustering data streams sliding window model :10.1.1.32.1927
large body previous median clustering :10.1.1.129.4996
datar gionis indyk motwani considered problem maintaining simple statistics sliding windows 
considered extension estimate functions sliding windows estimated techniques 
babcock datar motwani study sampling sliding window model 
gibbons improved results datar computing counts sums sliding windows 
new data structure called waves worst case update time compared log eh data structure extensions sliding window model distributed scenario 
efficiency waves data structure crucially hinges additivity function estimating sliding windows terms notation introduced section satisfy 
reason waves data structure appear applicable nonadditive functions consider 
model summary results sliding window model data elements arrive stream elements arrived considered relevant moment 
elements called active data elements rest called expired longer contribute query answers statistics data set 
data element processed retrieved computation time explicitly stored memory 
amount memory available assumed limited particular sublinear size sliding window 
algorithms require storing entire set active elements acceptable model 
employ notion timestamp corresponds position active data element current window 
timestamp active data elements oldest arrived data element having timestamp 
xi denote data element timestamp clearly timestamps change new arrival wish explicit updates 
simple solution record arrival times counter log bits timestamp extracted comparison counter value current arrival 
maintain histogram active data elements data stream 
notion histograms far general traditional database literature 
particular bucket histograms stores summary synopsis structure contiguous set data elements histogram partitioned buckets arrival time data elements 
synopsis bucket keep timestamp data element bucket bucket timestamp 
timestamp bucket reaches data elements bucket expired drop bucket reclaim memory 
buckets numbered 
bm starting oldest bm 
tm denote bucket timestamps 
buckets save oldest contain active elements oldest bucket may contain expired elements active element 
formally state problems considered describe results detail 
problem variance 
stream numbers maintain instant variance values var xi xi denotes mean values 
decide buffer entire sliding window memory hope compute variance exactly instant 
section small space algorithm solve problem approximately 
algorithm uses log memory provides estimate instant relative error 
time required new element amortized 
extend median clustering problem 
multiset objects metric space distance function median problem pick points 
ck minimize closest 
ck ci said assigned ci ci called formulation median called continuous assignment distance objective function sum assignment distances 
problem 
stream points metric space distance function window size parameter maintain instant median set 
ck minimizing xt xt multiset points time section show maintain approximate median solution sliding windows memory amortized insertion time data point 
assume space required store point metric space time required compute distance pair points 
strictly speaking points belong dimensional space quantities multiplicative factor apply memory time requirement 
ignore rest discussion 
algorithm produces medians sum assignment distances points xt constant multiplicative factor optimal 

maintaining variance sliding windows datar gionis indyk motwani space lower bound log log log bits approxi mately error maintaining sum sliding window size data value assuming poly translates lower bound log words maintaining sum variance elements 
gap lower bound upper bound obtained 
describe algorithm solving problem compute estimate variance relative error 
mentioned elements data stream partitioned buckets algorithm 
bucket bi maintaining timestamp ti data element bucket algorithm maintains summary information number elements bucket ni mean elements bucket variance elements bucket vi 
actual data elements assigned bucket stored 
addition buckets maintained algorithm define set suffix buckets denoted 
bj represent suffixes data stream 
bucket bi represents elements data stream arrived elements bucket bi bi bl 
bucket bm represents points arriving oldest non expired bucket suffix buckets maintained algorithm statistics calculated temporarily course algorithm 
pseudocode maintaining histogram new elements arrive algorithm 
combination rule maintaining histogram algorithm needs combine adjacent buckets 
consider buckets bi bj get combined form new bucket bi statistics count mean variance median 
discrete median medians chosen set median refer continuous version 
algorithm insert xt denotes element 

xt extend bucket include xt incrementing 
create new bucket xt 
new bucket xt 
old bucket bi bi 
oldest bucket bm timestamp greater delete bucket 
bucket bm new oldest bucket 
maintain statistics bm bm computed previously maintained statistics bm statistics bm 
vi denote variance bucket obtained combining buckets bi bi 
exists index vi find smallest combine buckets bi bi combination rule described 
note statistics bi computed incrementally statistics bi bi 

output estimated variance time estimation procedure 
bm current window size illustration histogram 
bi computed statistics bi bj follows ni ni nj ini jnj vi vi ni vj ni note combination rule delete set points larger set calculate statistics corresponding difference statistics sets lemma shows correctness statistics computed combination rule 
lemma 
bucket combination procedure correctly computes ni vi new bucket 
proof 
note ni correctly computed definitions count average 
define time vi xl xl xl xl xl xl xl vi vj ni nj xi xj vi vj ni nj nj vi vj ni ni nj nj ni ni nj vi vj ni estimation 
bm set histogram buckets time describe procedure estimate variance current active window 
bm oldest active bucket 
contains active elements including timestamp may contain expired data 
maintain statistics corresponding bm suffix bucket containing elements arrived bucket bm 
combination rule new data element arrives 
oldest bucket gets deleted find new bm deleting contribution new oldest active bucket previous bm combination rule 
refer non expired portion bucket bm set elements bm active 
see illustration 
know statistics corresponding bucket estimate follows est tm est est vm note exact nest statistics bm sufficient accurately compute variance time instant fact variance variance corresponding bucket obtained combining bm 
combination rule actual variance var current active window var mnm vm nm time instant estimate variance computing variance estimates estimate time provided maintain statistics bm 
error estimate arises due error estimate statistics shall prove error small factor compared exact answer var provided maintain invariant invariant 
bucket bi vi vi 
easy see algorithm maintains invariant 
bucket non zero variance formed combination buckets condition combining buckets guarantees invariant holds combined bucket formed 
invariant holds bucket bi continues hold variance suffix bucket bi non decreasing time 
additionally algorithm maintains invariant ensures total number buckets small invariant 
bucket bi vi vi 
lemma 
number buckets maintained point time algorithm preserves invariant log nr upper bound absolute value data elements 
proof sketch 
follows combination rule variance union buckets sum individual variances 
easy see algorithm preserves invariant variance suffix bucket bi doubles buckets 
total number buckets maintained algorithm log variance points 
upper bound absolute value data elements nr claim follows 
note require log bits memory represent data element 
need technical lemma analyse performance algorithm 
lemma 
choice set data elements mean proof 
proof follows calculations 
ax theorem summarizes algorithm performance 
theorem 
var variance estimate provided algorithm maintaining invariants var actual variance 
var var var 
algorithm requires log nr memory 
proof 
memory usage demonstrated lemma 
define est combination rule estimates var var est mnm vm nm est mnm vm nm vm mnm nm vm mnm nm mnm nm 
show additive terms error small 
subinterval bm know vm 
variance non negative follows vm vm lemma know est vm implies mn vm 
define constant derived analysis 
third error term consider cases case mnm nm case mnm nm vm actual variance var mn nm ratio error term variance invariant know vm vm 
error terms contribute combined additive error vm multiplicative error vm var 
third error term contributes additive error vm case represents multiplicative error 
case multi error third error term 
assume trivial algorithm returns zero suffices 
cases total error strictly fraction variance proving theorem 
algorithm earlier requires log nr time new element 
time spent step sweep combine buckets 
time proportional size histogram log nr 
simple trick skip step seen log nr data points 
ensures running time algorithm amortized 
may violate invariant temporarily restore log nr data points execute step 
ensures number buckets log nr 

clustering sliding windows bicriteria approximate clustering solution problem problem 
mentioned earlier focus continuous median techniques apply discrete median approximation ratios different 
solution incorporates techniques guha mishra motwani callaghan ensures highquality sliding window clustering :10.1.1.32.1927
roughly speaking algorithm guha divide conquer algorithm builds clusters incrementally hierarchically stream grows 
algorithm maintains medians cluster centers various levels original input points considered level 
seeing level medians input points clusters bicriteria clustering algorithm cluster centers form level medians 
level medians accumulate clustered level medians 
general medians level clustered form level medians 
moment algorithm maintains medians level 
cluster groups size hierarchical tree formed due clustering depth original input points 
authors prove level hierarchical tree increases approximation factor constant multiple 
result algorithm approximation guarantee memory requirement describe algorithm sliding window median uses techniques described algorithm ideas previous section 
section organized follows describe eh data structure algorithm method associating cost bucket describe combination step combining buckets discuss estimation procedure final clustering current active window data point arrives clustering desired algorithm maintains data structure new points arrive 
data structure previous case data structure maintained eh buckets numbered 
bm oldest buckets containing expired points discarded 
variance bucket stores summary structure set contiguous points timestamp point bucket 
case variance summary structure contained triplet ni vi clustering bucket consists collection data points intermediate medians 
consistency refer original points level medians 
median represented triple 
value identifier euclidean space example coordinates general metric simply index point set 
value weight median number points represents 
similar algorithm guha level level sum weights level points assigned level clustering performed 
estimated cost estimate sum costs assigning leaves subtree rooted level level sum assignment distances members level sum members 
overestimate true cost algorithm guha maintain medians intermediate levels medians level cluster medians higher level 
bucket bi split maximum number different levels groups 
contains medians level group contains medians 
collection medians algorithm maintains bucket bi bucket cost conservative overestimate assignment cost clustering points represented bucket 
cost function bucket cost function estimate assignment cost clustering points represented bucket 
consider bucket bi yi rj set medians bucket 
explained earlier median associated cost estimate sum distances points assigned clustering algorithm 
cluster points yi produce medians 
ck 
cost function bucket bi bi 
ck median closest clearly bi overestimate assignment cost clustering original points assigned medians yi 
ck medians 
combination bi bj typically adjacent buckets need combined form merged bucket bi 

groups medians buckets resp represents group medians level bucket bi resp rj 
cluster bj 
set points set empty 
denote set medians obtained clustering empty set need clustered 
carry level medians group set 
rj medians cluster get carry set 
general unions possibly followed clustering get combined bucket bi bucket cost computed clustering medians bucket levels 
estimation 
bm denote buckets time instant bm oldest bucket contains medians represent data points expired 
query posed moment asks clustering active elements consider oldest buckets 
bm 
contain medians 
prove number buckets log 
log medians 
cluster produce medians 
similarly cluster bucket bm produce additional medians 
medians answer 
required procedure provide estimate assignment cost technique computing cost function buckets 
algorithm algorithm combining maintaining buckets similar estimating variance 
define suffix buckets bi represent combination buckets particular bucket bi 
maintained times computed required case variance 
pseudocode algorithm 
algorithm insert xt denotes element 

fewer level medians add point xt level median bucket 
create new bucket contain xt existing buckets accordingly 

bucket bm timestamp delete 

sweep buckets exists index bi bi find smallest combine buckets bi bi combination procedure described 
suffix bucket bi computed incrementally sweep 
algorithm maintains invariants useful proofs lemmas 
invariant 
bucket bi bi bi 
invariant 
bucket bi bi bi 
lemma 
algorithm maintains invariant produces solution medians cost multiplicative factor cost optimal median solution 
proof sketch 
bm oldest bucket histogram 
recall bm may contain medians represent points expired 
consider suffix bucket bm representing points arriving oldest non expired bucket compare algorithm performance set points optimal solution set points 
cluster medians level medians level depth hierarchical clustering tree guaranteed exceed discussed level tree conquer approach introduces constant multiplicative approximation factor 
approximation factors accumulate clustering cost algorithm clustering bm times cost optimal median clustering bm 
consider non expired points bucket bm 
invariant guarantees bm bm 
means bm algorithm cost clustering bm twice bm factor optimal clustering cost bm 
cost clus tering non expired portion bm counts clustering cost summing bm entirety 
costs algorithm solution points bm points bm factor optimal clustering cost bm 
bm subset active points cost optimal median clustering active points greater cost optimal clustering bm 
lemma 
algorithm maintains invariant number buckets exceeds log proof sketch 
invariant guarantees number buckets log cost function entire sliding window 
lemma proves cost function times cost optimal median solution 
optimal median cost log 
points poly gives log median algorithm efficient terms memory running time 
element arrives algorithm checks buckets see invariant violated case combines adjacent buckets restore invariant 
order reduce processing time batch processing technique section reduce amortized time 
draw distinction data structure maintenance output production 
assume algorithm called produce updated clustering new point added 
may maintain sufficient statistics able request quickly generate valid clustering 
requests current clusters may come arbitrary points time assume come frequently 
short distinguish update time query time data structure 
modify algorithm execute bucket combination procedure log points accumulated bucket 
effort maintain invariants bucket fills log points time points clustered replaced level medians 
original data points discarded retained bucket satisfies satisfy invariant 
bucket combined bucket resulting combined bucket necessarily satisfy invariant 
clustering points execute remaining steps algorithm discarding expired buckets maintaining invariant 
consider happens invariants points accumulate bucket 
value bi increasing possible invariant may longer satisfied 
temporary failure invariant important recall lemma invariant assume bounded polynomial essential correctness answer provided algorithm ensures number buckets remains small 
algorithm filling bucket number buckets increase soon bucket complete invariant restored combining buckets necessary 
number buckets maintained algorithm log lemma remains valid invariant may temporarily get violated 
invariant cause trouble bucket bi bi fills increase bi buckets strengthens invariant 
may buckets invariant hold 
batch processing changes described guarantee buckets retain original data points 
recall proof lemma invariant analysis ensure bucket cost bm oldest bucket twice combined bucket cost bm times optimal clustering cost bm 
necessary bound performance original algorithm terms clustering cost bucket bm terms bm bm potentially includes cost clustering expired points 
long maintain original data points bucket bi violates invariant problem 
invariant holds oldest bucket bm estimation procedure described earlier invariant fails bm original data points bucket distinguish expired elements active ones cluster 
cluster level medians randomized algorithm indyk local search algorithm charikar guha subroutine 
procedure requires linear space takes time nk number points clustered providing constant factor approximation high probability 
higher level level medians clustered local search algorithm charikar guha 
algorithm uses centers number reduced final answer primal dual algorithm jain vazirani 
consider running time modified algorithm 
current clustering desired cluster medians oldest bucket bm medians suffix buckets bm 
bucket bm violates invariant cluster active elements nk algorithm indyk produce medians clustered medians suffix bucket bm 
total number medians log 
running time clustering active elements bm dominates giving total query time 
putting theorem 
memory bound follows lemma 
space maintain original data points buckets violating invariant dominates space maintain eh 
approximation guarantee follows lemma amortized maintenance time query time follow discussion paragraphs 
theorem 
algorithm provides bicriteria approximation problem 
uses log memory requires amortized maintenance time data element 
query time data structure maintain 
described bicriteria approximation algorithm produces centers opposed build algorithm get algorithm produces exactly centers preserving approximation guarantee producing exactly clusters order produce exactly centers need change algorithm ways median maintain additional information lets estimate constant factor number active data points assigned change estimation procedure produces solution request current clusters 
separately clustering oldest bucket bm suffix bucket bm cluster medians buckets 
weights medians bucket bm adjusted reflect contribution active data points discounting contribution expired points 
costs bm bm times cost optimal median solution bm times cost optimal median solution current window 
assignment cost active points bm total cost bm 
facts theorem guha easy prove lemma modified estimation procedure 
lemma 
bm bm cost oldest bucket 
assign weights medians bm weight median constant factor number active points assigned median optimal median solution instance weighted medians bm bm bm bm cc optimal median solution current window 
proof sketch 
cost assigning original points bm medians bm bm cost assigning original points bm medians bm bm bm consider median problem instance consist ing active original points bm original points bm 
constitutes current window def optimal clustering cost instance assigned original point weight cost clustering instance cc medians bm weighted weight times number active points assigned 
words thought medians original points bm original point weight applying theorem guha get cost optimal median solution instance weighted medians bm bm bm bm cc case estimating variance knew exactly points oldest bucket active 
similarly case clustering knew median oldest bucket active data points assigned cluster medians medians suffix bucket bm get exactly centers 
fact lemma tells exact counts estimate number active points assigned median bm get constant factor approximation exactly centers 
show estimate number active data points assigned median factor log space median 
median cj consider imaginary stream values actual data point xi xi assigned median cj 
note zero median cj belongs particular bucket outside interval covered bucket 
estimating number active data points assigned cj counting number ones elements stream explicitly problem solved eh data structure uses log memory provides estimate times error shown datar 
set equal estimation 
unfortunately stream zj explicitly 
medians level produced combination lower level medians 
points previously assigned lower level medians assigned higher level median way reconstruct exact arrival order timestamps points simulate stream original points discarded 
order estimate number active points higher level medians observations ehs data streams 
consider exponential histograms eh eh corresponding data streams error parameter window size eh arrival times strictly greater arrival times eh combine ehs get eh union streams time log 
say ehs non overlapping 
combination easily achieved placing buckets ehs making sweep right left combine buckets 
process takes log time combined eh uses log buckets words memory 

data streams respectively ehs overlapping satisfy property arrive maintain separate ehs corresponding answer count queries union streams 
ehs corresponding overlapping streams called overlapping ehs 
higher level median formed clustering lower level medians assign ehs lower level medians higher level medians 
combine non overlapping ehs possible overlapping maintained separately 
claim median level needs maintain ehs eh requires log memory 
maximum level median amount extra memory required median log 
prove claim induction level medians 
original points level medians maintain eh simply maintain timestamps 
corresponding exactly position zero 
level medians clustered form level medians level median formed insert level medians assigned sorted decreasing order timestamps get single eh level median 
note level medians obtained clustering may overlapping ehs 
pair level medians called conflicting created time overlapping ehs 
level median conflict level medians ones created clustering level medians 
consider happens cluster level medians form level median 
level medians assigned single level median level median conflict level medians 
consequently organize assigned medians groups group conflicting medians 
groups corresponding ehs non overlapping combined form single eh 
level median ehs 
inductive hypothesis assume level median overlapping ehs 
arguments level median formed level medians assigned organized groups group conflicting medians 
level median group contribute overlapping ehs combine form overlapping ehs 
groups level median total ehs 
proves claim 
combination procedure ehs described executed clustering higher level medians medians level 
done phase points assigned cluster centers 
time taken assign point log 
quadratic running time algorithm cluster higher level medians affect asymptotic running time clustering provided log asymptotic space requirement algorithm remains unchanged 
follows considering different types bucket buckets violate invariant retain original points log original points level medians 
buckets formed combination buckets retain original points 
contain higher level medians explained median requires log memory estimating number active points assigned 
log memory requirement bucket 
gives total memory requirement log 
established approximation factor algorithm lemma 
gives final result summarized theorem 
theorem 
algorithm provides approximation 
uses log memory requires amortized maintenance time data element provided log 
open problems goal algorithms data stream processing sliding window model maintain statistics information members point set growing real time operating memory asymptotically smaller window size 
introduced algorithms 
uses log memory maintains estimate variance real numbers growing stream relative error 
closing gap upper bound memory usage lower bound log datar open problem 
second algorithm uses log memory maintains solution median problem points stream 
algorithm maintains medians cost points constant factor cost optimal medians points 
possible maintain approximately optimal medians polylogarithmic space charikar stream model sliding windows polynomial space open problem 

arya garg pandit meyerson 
local search heuristics median facility location problems proc 
rd acm symp 
theory computing stoc pages 
babcock babu datar motwani widom 
models issues data stream systems proceedings st acm symposium principles databases systems pods pages 
babcock datar motwani 
sampling moving window streaming data proceedings th annual acm siam symposium discrete algorithms soda pages 
bradley fayyad reina 
scaling clustering algorithms large databases proceedings th international conference knowledge discovery data mining kdd pages 
charikar guha 
improved combinatorial algorithms facility location median problems proc 
th annual ieee symposium foundations computer science focs pages 
charikar callaghan panigrahy 
better streaming algorithms clustering problems proc 
th acm symposium theory computing stoc 
datar gionis indyk motwani 
maintaining stream statistics sliding windows proceedings thirteenth annual acm siam symposium discrete algorithms soda pages 
domingos hulten 
mining high speed data streams proceedings th international conference knowledge discovery data mining kdd pages 
domingos hulten spencer :10.1.1.134.4166
mining time changing data streams proceedings th international conference knowledge discovery data mining kdd pages 
gibbons 
distributed streams algorithms sliding windows proc 
acm symposium parallelism algorithms architectures spaa 
gilbert kotidis muthukrishnan strauss 
surfing wavelets streams pass summaries approximate aggregate queries proc 
th conf 
large data bases vldb pages 
guha mishra motwani callaghan 
clustering data streams proceedings st annual ieee symposium foundations computer science focs pages 
guha rastogi shim 
cure efficient clustering algorithm large databases proc 
acm sigmod intl 
conference management data sigmod pages 
henzinger raghavan rajagopalan computing data streams technical report compaq systems research center palo alto ca may 
indyk 
sublinear time algorithms metric space problems proceedings st annual acm symposium theory computing stoc pages 
jain vazirani 
primal dual approximation algorithms metric facility location median problems proc 
th ieee symp 
foundations computer science focs pages 
plaxton 
online median problem proceedings st annual ieee symposium foundations computer science focs pages 
mishra pitt 
sublinear time approximate clustering proceedings th annual acm siam symposium discrete algorithms soda pages 
callaghan mishra meyerson guha motwani 
streaming data algorithms high quality clustering proceedings th annual ieee international conference data engineering icde 
palmer faloutsos 
density biased sampling improved method data mining clustering proc 
acm sigmod intl 
conference management data sigmod pages 
pelleg moore 
accelerating exact means algorithms geometric reasoning proceedings th international conference knowledge discovery data mining kdd 
zhang ramakrishnan livny 
birch efficient data clustering method large databases proc 
acm sigmod intl 
conference management data sigmod pages 
