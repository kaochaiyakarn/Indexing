average sophisticated sensing queries joseph hellerstein wei hong samuel madden kyle uc berkeley cs berkeley edu berkeley edu madden intel research berkeley intel research net 
high level query languages attractive interface sensor networks potentially relieving application programmers burdens distributed embedded programming 
research date proposed applications interfaces limited simple data collection aggregation schemes 
initial results extend tinydb sensornet query engine support sophisticated data analyses focusing applications topographic mapping wavelet compression vehicle tracking 
examples motivate feasibility implementing sophisticated sensing applications query system initial results research questions raised agenda 
sensor networks daunting challenges potential application developers 
sensornet programming mixes complexities distributed embedded systems design amplified unreliable network connections extremely limited physical resources 
sensor network applications expected run unattended months time 
challenges motivated research higher level programming interfaces execution environments try relieve programmers burdens distributed embedded programming :10.1.1.117.1253:10.1.1.19.9247
designed framework called tag sensornet data aggregation sql language 
implemented tag framework system called tinydb runs networks tinyos berkeley motes 
received initial feedback indicating tinydb sql interface attractive number users interested distributed sensing 
heard concerns apparent limits functionality simple sql queries 
feedback resulted part early performed fairly traditional sql queries relatively simple tasks periodically collecting raw readings computing simple summarizations averages counts 
status report efforts deploy complex sensing tasks tinydb 
intention illustrate tinydb potential vehicle complex sensing algorithms highlight unique features constraints embedding sensing algorithms extensible declarative query framework 
review extend tag framework show implement sensing applications relatively distant vanilla database queries 
distributed mapping commonly cited application sensor networks produce contour maps sensor readings 
simple topographic extensions declarative query interface tag allow efficiently build maps distributions space 
approach finding contiguous regions approximately sensor value 
show maps built small amounts ram radio bandwidth remaining useful face significant amounts missing information dropped data regions sensor nodes 
results initial simulation included 

multiresolution compression summarization traditional sql supports simple aggregates summarizing data distributions 
develop sophisticated aggregation scheme compressing summarizing set readings 
technique ability produce results increasing resolution time 
describe hierarchical wavelet encoding scheme integrates naturally standard tag framework tuned low function devices berkeley motes 
discuss number open research questions arise context 

vehicle tracking research papers investigated distributed sensornet algorithms track moving objects 
show declarative event query infrastructure serve framework algorithms discuss tag approach extended allow sensor nodes remain idle vehicles near 
progress instantiate infrastructure sophisticated tracking algorithm hope framework seed efforts combine intelligent tracking ad hoc query facilities afforded sensornet query process tinydb 
remainder organized follows section summarizes tag approach network aggregation extend remaining sections 
section discusses new language features added publication tag enable tracking scenario 
section discusses distributed mapping problem section discusses techniques compressing summarizing section discusses vehicle tracking 
section discusses related section concludes discussion 
background section describe declarative sql language developed querying sensor networks 
describe processing queries sensor network focus aggregation queries 
query language sensor networks tag simple query language sensor networks implemented tinydb 
basic overview scheme 
tinydb queries posed powered basestation typically pc parsed simple binary representation flooded sensors network 
query flooded network sensors organize routing tree allows basestation collect query results 
flooding works follows basestation injects query request root sensor broadcasts query radio child nodes hear query process re broadcast children entire network heard query schemes prune query flooding process 
request contains hop count level indicating distance broadcaster root 
determine level nodes pick parent node definition level closer root 
parent responsible forwarding node query results children results recursively basestation 
note node may possible choices parent purposes discussion assume single parent chosen uniformly random available parents 
practice sophisticated schemes parent selection issue impact discussion 
queries tinydb basic structure select 
sensors 
group 
sample period clause lists fields attributes retrieve sensors specifies transform single field 
transform may simple arithmetic expression light aggregate function specifies way readings combined nodes time aggregation discussed detail section 
standard sql aggregates non aggregates may appear select clause non aggregate fields appear clause 
clause specifies table data retrieved language table sensors contains attribute types sensors available devices network light acceleration temperature 
device small catalog uses determine attributes locally available catalog includes cost information metadata associated accessing attribute pointer function allows tinydb retrieve value attribute 
optional clause filters readings satisfy boolean combination predicates 
predicates tinydb currently restricted simple boolean arithmetic operations single attribute 
optional group clause conjunction aggregate expressions 
specifies partitioning input records aggregation aggregates select clause computed partition 
absence group aggregates computed entire set sensors group partitions sensors groups group expressions value 
example query fragment select avg light group partitions sensors groups value attribute computes average light reading group 
period clause specifies time successive samples epochs 
node samples sensors epoch applies query processing operators sensor 
aggregation sensor networks basic description query language discuss tinydb processes queries focusing aggregate queries handled 
structure aggregates recall aggregation expression may specified select clause query 
standard sql expression contains basic aggregation functions min max average count 
tag tinydb provides extensible mechanism registering new aggregates derived literature extensible database languages 
tinydb aggregates implemented functions merging function initializer evaluator general structure multi valued partial state records psrs computed sensor values representing intermediate state aggregation processing values 
partial state record resulting application function example merging function partial state record consist pair values sum specified follows state records initializer needed specify instantiate state record single sensor value average sensor value initializer returns tuple evaluator takes partial state record computes actual value aggregate 
evaluator simply returns processing aggregate queries aggregate queries produce result group epoch 
query disseminated described leaf node routing tree produces single tuple sensor readings epoch applies initialization function column forwards initialized result parent 
epoch parent merges psr previous epoch psrs children previous epoch forwards result parent 
results propagate tree epoch complete psr epochs ago arrives root routing tree depth tree 
depending sample period may time epoch send aggregates multiple levels routing tree see tag information 
result arrived root basestation applies evaluation function produce complete aggregate record outputs result user 
group queries processed similar way 
partial state record initialized tagged unique group id parents combine readings come group propagate separate psr group heard previous epoch contribute groups 
root state record arrives groups evaluation function applied times 
temporal aggregates aggregates described aggregate sensor values sampled multiple nodes epoch 
extended framework support temporal aggregates aggregate sensors values multiple consecutive epochs different nodes 
temporal aggregates typically take extra arguments window size sliding distance 
window size specifies number consecutive epochs temporal aggregate operates sliding distance specifies number epochs skip window samples 
frequently temporal aggregates tinydb running average window size sliding dist arg 
typically reduce noise sensor signals 
example light computes sample running average light sensor readings 
accumulates light readings consecutive epochs averages replaces oldest value average window latest light sensor reading keeps computing averages window samples 
addition tinydb supports similar temporal aggregates sophisticated custom temporal aggregates computes trajectory moving vehicle developed extensible aggregate framework described 
tinydb default aggregates operate sensor values entire network 
group nodeid specified limit temporal aggregates operate values individual nodes 
new language features query language described provides foundation kinds simple monitoring queries 
sensor networks autonomous language needs move passive querying simply monitoring environment relaying results sensors need detect initiate automatic responses nearby events 
furthermore sensor networks need collect store information locally possible advantageous get data network powered storage rich pc 
introduce extensions query language handle situations 
events events provide mechanism initiating data collection response external stimulus 
events generated explicitly query software operating system specialized hardware node triggers operating system 
consider query monitoring occupancy bird nests event bird detect loc select avg light avg temp sensors dist loc event loc sample interval bird detected nest pressure switch nest query executed collect average light temperature level sensors near nest send results root network 
alternatively results stored locally detecting node storage point mechanism described section 
semantics query follows detect event occurs query issued detecting node average light temperature collected nearby nodes nodes meters collecting node seconds seconds 
storage points storage points accumulate small buffer data may referenced queries 
consider example create storage point size select nodeid light sensors sample interval storage point command provides shared global location store streaming view data similar materialized views conventional databases 
note data structure accessible read write node network exact location network fixed moved optimization 
typically storage points partitioned sensor stores values locally 
specific example stores previous seconds worth light readings taken second nodes network 
storage points mechanism storage offline delivery query results 
queries select results storage point compute aggregate storage point allowed consider example select max light query selects maximum light reading storage point defined 
storage point continually updated query returns maximum values time query posed 
mapping section explore problem building topographic contour map space populated sensors 
maps provide important way visualize sensor fields applications variety biological environmental monitoring scenarios 
show tinydb aggregation framework leveraged build maps 
conceptually problem similar computing space quantized sensor readings algorithms partition sensors contiguous space approximately equal sensor value 
network aggregation storage communication costs producing topographic map substantially cost collecting individual sensor readings building map centrally 
discuss algorithms map building centralized naive approach exact network approach approximate lossy approach 
illustrates general process aggregation build topological map sensor builds small representation local area sends map parent combined maps neighbors ancestors eventually part complete map space root tree 
support topographic operations sensors require simple geometric operators primitives 
determine adjacency maps impose rectangular grid sensors assign sensor cell grid 
goal construct orthogonal polygons holes need basic operations determine polygons overlap find union 
operations performed polygon time number edges polygon algorithm 
number free libraries implement functionality 
discussion algorithms assuming cell grid occupied 
reserve discussion mapping sparse grids section 
naive algorithm naive algorithm run aggregate free query network select attr sensors sample period fig 

aggregation contours data flows routing tree 
query returns location attribute value sensors network results combined code outside network produce map 
implemented lossless lossy missing information fig 

screenshots visualization imposed grid sensors 
cell represents sensor intensity background color indicates sensor value black lines frame 
shows computed network naive algorithms 
shows lossy approximation approximate polygon bounding box original polygon maximally sized cuts 
shows visualization topological map incomplete information squares 
black circles indicate nodes value missing inferred algorithm 
approach simulation visualization shown 
simulation sensors arranged grid communicate immediate neighbors 
aggregated node center network 
network consisted nodes depth routing tree 
screenshot saturation grid cell indicates sensor value thick black lines show 
network algorithm network approach define aggregate called contour map partial state record set container polygon holes possibly attribute value sensors 
structure query select contour map floor attr sensors defines width attribute space 
define aggregation functions follows initialization function takes generates partial state record singleton set containing value container polygon corresponding grid cell sensor lies 
merging function combines sets new set element disjoint polygon union polygons new set may non contiguous attribute value 
conversely merging cause disjoint joined connects vice versa 
shows example happening sets merged 
evaluation function generates topographic map contiguous labeled attribute value 
lossy algorithm lossy algorithm works similarly network algorithm number vertices define bounding polygon limited parameter fig 

sets elements element merged new set element 
aggregate 
reduces communication cost approach possible overlap longer perfectly trace edges contours 
lossy algorithm network case 
compute partial state record 
containing polygon set compute bounding box take number maximally sized rectangular cuts overlap continue cuts contains vertices cut produces polygon vertices 
omit details compute maximal cuts polygons orthogonal done scan vertices cut bounding boxes approximations containing polygons psrs resulting merge function 
shows containing polygon approximated bounding rectangle single cut 
lossy evaluation function final aggregate state record may overlap policy needed choose assign particular cell 
simple containment principle completely contains assume true value cell specified innermost 
containment principle apply assign grid cells nearest terms number grid cells breaking ties randomly 
simulated lossy algorithm psr fig 

lossy approximation containing polygon bounding box single cut psr 
sensor value distribution shown maximum cuts 
results shown notice shape preserved 
compared total amount data transmitted simulation lossy naive algorithms shown naive algorithms algorithm factor communication lossy algorithm communication network algorithm 
sparse grids consider case sparse grids sensors exist cell grid 
sparse grids lossy algorithm described infer missing points 
merging function longer tracks exact contours uses bounding boxes cells sensors part 
cells aren assigned part merging assigned nearest method described lossy algorithm 
similar situation arises dense topologies network loss sensor values reported particular epoch 
implemented sparse grid approach visualize high loss radio model probability sensors communicate falls distance sensors 
adjacent sensors loss rates sensors cells away maximum communication range loss rates 
result shown black circles nodes values lost epoch visualized 
notice despite large number losses shape largely preserved 
wavelet histograms hierarchical aggregation sql built aggregates provide basic statistical information distribution set readings 
cases useful get richer representation distribution histogram 
sensornet environment multiresolution histogram optionally provide additional resolution buckets expense additional communication 
explore wavelet histograms wavelets best known effective multiresolution coding techniques 
section sketch tag aggregate function encoding set readings sensor network haar wavelets simplest widely wavelet encoding discussion focuses wavelet histograms capture information statistical distribution sensor values placing significance ordering values 
drop coefficients low absolute values keep communication costs retain value coefficient haar wavelets th coefficient represents average values interest users 
wavelet compression setting somewhat unique 
recall aggregates tinydb computed incrementally data passed network communication tree 
computing wavelets piecewise combining pairs wavelets go access complete underlying set values 
second processors floating point arithmetic generally slow integer wavelets possible place minimize copies devise techniques process wavelets need decompress 
constrained memory bandwidth dropping low coefficients sparse array representation coefficients keep 
core logic merging function takes psrs subtrees wavelets combines new psr wavelet 
wavelet psr sparse array represented short integers 
order maintain wavelet properties power current implementation 
values capture non zero elements sparse array array offsets data values coefficients offsets 
short integer count tracks number actual sensor readings rolled wavelet 
additional short called represents number array entries possibly zero padded wavelet 
merging function considers cases merging state records andr 
count count case compress simply store values 
concatenate values data ofr data interest brevity overview wavelets interested reader referred practical overview wavelets simple haar wavelets 
note choice arbitrary assume network topology scheduling determines input second 
update ofr accordingly 
variable remains initialization value 
count count sum case need compress output 
conceptually think input arrays array length lifting scheme wavelet compress double length array place 
keep top coefficients fields appropriately 
addr count value inr count increment ther variable reflect effective doubling array 

inputs case need merge wavelets 
merge technique assume inputs 
input need zero pad smaller match larger 
example ifr zero equal length 
pseudocode efficiently doubling haar wavelet 
wavelets need merge form wavelet twice coefficients 
run pseudocode merger decoding re encoding 
copy top coefficients result data updater appropriately addr count tor count reflect doubling array 

exactly input larger case zero pad smaller array entries convert wavelet coefficients 
invoke case 
coefficients th bump offsets carefully offsets floor log offsets keep track min coefficient abs data min min abs data new st coefficient old th coefficient 
top room data offsets arrays abs data min move offsets offsets position rightward move data data position rightward offsets data data average halved reflecting padding 
data data floor data doubled size fig 

double haar wavelet coefficients zero padding place decoding recoding 
result coefficients drop lowest th coefficient keep position arrays 
note computed efficiently bit shifting floor average data integer wavelets 
top aggregation tree technique produces wavelet represents concatenation readings network large number padded count variables pc root network discard extraneous perform appropriate normalization recreate average somewhat finer approximations densities values 
note coefficients produced recursive application merge procedure top coefficients haar wavelet full array readings 
particular st coefficient network subtree discarded may larger top coefficients subtree 
effect error may spread higher order coefficients merges happen 
investigating heuristics improving situation including probabilistic updating schemes rank merging techniques coefficient confidence intervals 
double bump rightward extra factor 
offsets floor log offsets offsets floor log offsets merge offsets data pairs sorted offset cursor cursor cursor offsets cursor offsets cursor smaller cursor smaller cursor offsets smaller offsets data smaller data th coefficient avg old st diff offsets offsets data floor data data data data data pack top coefficients slots data update offsets appropriately copy data offsets data offsets count count fig 

haar wavelets non zero coefficients merges decoding recoding 
copy temporary size logic done place replacing merge step quicksort spans coordinates data offset arrays appropriately 
multiresolution snapshots temporal queries spirit image coding online aggregation databases want answer snapshot query improve additional rounds communication 
order achieve augment logic lowest point tree merge function dropped coefficients sends second highest set coefficients round 
top tree second round coefficients needs merged previous coefficients right left order spread updates correctly 
process repeated additional rounds 
scheme low valued coefficients stored recomputed base snapshot readings 
relative costs storage communication modern sensor networks expect store coefficients practice storage limitations dictate bound number rounds support 
multiresolution snapshot queries complicated consider change time dimension 
online aggregation described targeted traditional databases snapshot semantics guaranteed transactional mechanisms 
online aggregation requires multiple rounds quite possible sensor readings change data propagated output 
continuous queries time varying results supported tinydb buffering state aggregates multiple epochs network delivering better estimations prior epochs alongside new estimations 
increases storage overhead network factor depth network 
exploring ideas intelligently managing total storage time space 
mix multiresolution results time varying data raises number questions respect encoding may analogous video humancomputer issues performance metrics 
driving question performance metrics may consider different possible interfaces users specify desires fixing resources dimensions 
course principle pareto optimal set strategies dimensions naive users able reason fashion 
imagine fairly natural temporal controls animation speed sliders spatial controls terms visual selection zoom foveation 
imagine dependency dimensions demonstrated having adjustments dimension reflected controls dimension 
hope explore inter disciplinary issues 
vehicle tracking section provide rough illustration tinydb support vehicle tracking application fixed field nodes detects magnetic field sound vibration vehicle moving 
choose tracking application representative collaborative signal processing csp application sensor networks demonstrates relative ease applications expressed tinydb 
clear focus date sophisticated algorithms tracking extending platform reasonably naturally collaborative signal processing applications 
target tracking wireless sensor network researched area 
different versions tracking problem varying degrees complexities 
ease illustration discussion deal simple version tracking problem assumptions constraints single target track 
target detected running average magnetometer sensor readings go pre defined threshold 
target location point time reported node location largest running average sensor reading time 
application expects receive time series target locations sensor network target detected 
believe sophisticated versions tracking supported tinydb sophisticated signal processing logic dynamic threshold adjustment signal strength localization multiple targets clear advantages implementing tracking applications top tinydb 
tinydb generic query language available resource allowing applications mix match existing spatial temporal aggregates filters query 
applications run multiple queries sensor network time example tracking query network health monitoring query 
second tinydb takes care sensor network systems programming issues multi hop routing coordination node sleeping query event third registering tracking subroutines user defined aggregates tinydb reusable tinydb queries natural way 
fourth optimistic tinydb query optimization techniques benefit tracking queries 
example node snoop messages neighboring nodes suppress output neighbor detected stronger sensor signal 
describe implementations tracking application tinydb increasing levels query complexity better energy efficiency 
describe implementations tinydb sql query language tinydb sql statements tinydb attribute magnetometer reading attribute returns cur rent timestamp integer 
assume sensor nodes time synchronized language features section available tinydb 
millisecond protocols 
tinydb attribute unique identifier node 
assume target detected magnetometer reading goes constant value threshold 
sample running average magnetometer readings 
tinydb aggregate returns value corresponding maximum value implementations find largest average magnetometer reading 
mentioned represent location target assume basestation capable mapping spatial coordinate 
really place holder replaced target localization aggregates 
implementations need apply group values timestamp 
values grouped accomodate minor time variations nodes 
naive implementation shows tinydb queries implement initial tracking application 
implementation sensor node samples magnetometer computes sample running average magnetometer readings 
running average magnetometer readings detection threshold current time nodeid average value magnetometer inserted storage point recall storage points tinydb provide temporary network storage query results facilitate applications issue nested queries 
second query query runs storage point second computes target locations aggregate 
query handoff implementation problem naive implementation sensor nodes continuously sample magnetometer milliseconds typically consume substantial power sample 
example magnetometer berkeley motes consumes mw power sample light sensor consumes mw sample 
assuming sensor nodes spread wide area point time target detected small number nodes 
large percentage nodes energy spent sampling magnetometer wasted 
ideally start target tracking query node target near query target moves away 
means need tinydb event trigger tracking query 
query handoff implementation describe requires special standalone hardware motion detector detects possible presence target interrupts mote processor pulls sleep mode 
tinydb event corresponding external interrupt 
unrealistic require special hardware installed node 
feasible install small number nodes near possible entry points target enter sensor field endpoints line sensors road 
nodes woken event start sampling magnetometer determine current target locations 
time try predict possible locations target may move custom aggregate signal remote event nodes locations alert start sampling tracking incoming target 
nodes receive event basically 
tinydb queries implementation shown 
call query handoff implementation node hands tracking queries set nodes set nodes target movement 
query handoff probably unique query processing feature required tracking applications expected provide low level network routing infrastructure 
pleased realize event queries storage points allow handoff expressed reasonably simply query language level 
prototyping application specific communication patterns simple queries 
ongoing question decide patterns deserving efficient low level implementation inside tinydb 
create storage point holding second worth running average magnetometer readings sample period filter running average target detection threshold 
create storage point running avg sp size select time nodeid mag sensors group nodeid having threshold sample period ms query storage point second compute target location timestamp 
select time max nodeid running avg sp group time sample period fig 

naive implementation related create empty storage point create storage point running avg sp size time nodeid target detected run query compute running average 
event target detected select time nodeid mag running avg sp sensors group nodeid having threshold sample period ms threshold query storage point sec 
compute target location send result base signal target approaching possible places target may move 
select time max nodeid running avg sp group time sample period output action signal event target approaching location select location time nodeid running avg sp target approaching event signaled start sampling inserting results storage point 
event target approaching select time nodeid mag running avg sp sensors group nodeid having threshold sample period ms threshold fig 

handoff implementation groups proposed high level declarative interfaces sensor networks :10.1.1.117.1253
aggregation operations sensor networks 
bodies specifically addresses sophisticated types queries discuss 
building contour maps frequently mentioned target application sensor networks see example knowledge previously described viable algorithm constructing maps sensor networks 
large body building contour maps image processing segmentation literature see excellent overview state art image processing 
computer vision algorithms sophisticated assume global view entire image hand 
wavelets myriad applications data compression analysis practical 
wavelet histograms proposed summarizing database tables number publications 
sensor network environment short position proposed wavelets network storage summarization 
related spirit different focus system architecture coding level 
sketches routing level approach relatively power rich devices focused encoding regularly gridded spatial wavelets timeseries 
contrast focus highly constrained devices integrate multi purpose tinydb query execution framework 
provide efficient algorithms hierarchically encoding haar wavelets focus wavelet histograms 
query handoff implementation tracking application section single target tracking problem discussed 
tracking algorithms described implemented top uw api location centric api developing collaborative signal processing applications sensor networks 
uw api implemented top directed diffusion focusing routing data operations dynamically created geographical regions 
tinydb shield application developers complexities lower level api potentially leverage location event query 
event queries implement query handoff resembles content routing scheme ways dissimilar basic ideas directed diffusion 
course schemes represent different design points tinydb relatively high level system intended shield application writers network considerations directed diffusion lower level multi hop routing scheme exposes content routing policies users 
distinctions high level low level blurry illustrated routing handoff tinydb query aggregation examples directed diffusion 
clearly open questions regarding possible synergies tradeoffs approaches different settings merit investigation 
potential users sensor networks computer scientists 
order users develop new applications sensor networks high level languages corresponding execution environments desirable 
optimistic query approach general purpose platform application development 
described attempts justify optimism non trivial applications outside realm traditional sql queries 
addition pursuing hope continue thrust collaborating domain experts development new applications includes application experts outside computing experts aspects computing including collaborative signal processing robotics 
intent tinydb serve infrastructure allows experts focus issues expertise leaving problems data collection movement hands tinydb adaptive query engine 
traditional database systems necessarily expect tinydb implementation efficient hand coded implementation hope ease additional functionality tinydb justify modest performance overheads 
acknowledgments kannan ramchandran michael franklin helpful discussions 
bibliography calderbank daubechies sweldens 
yeo 
wavelet transforms map integers integers 
applied computational harmonic analysis 
dan li kerry wong 
detection classification tracking targets distributed sensor networks 
ieee signal processing magazine mar 
elson girod estrin 
fine grained network time synchronization broadcasts 
osdi appear 
estrin 
embedded networked sensing monitoring 
keynote circuits systems workshop 
slides available cs ucla edu estrin talks cas jpl sept ppt 
fagin lotem naor 
optimal aggregation algorithms middleware 
pods santa barbara ca may 
ganesan estrin heidemann 
dimensions need new data handling architecture sensor networks 
proceedings workshop hot topics networks hotnets princeton new jersey oct 
garofalakis gibbons 
wavelet synopses error guarantees 
proc 
acm sig mod pages madison wi june 
heidemann silva intanagonwiwat govindan estrin ganesan 
building efficient wireless sensor networks low level naming 
sosp october 
hellerstein avnur chou olston raman roth haas 
interactive data analysis control 
ieee computer august 
hellerstein haas wang 
online aggregation 
proceedings acm sigmod pages tucson az may 
hill szewczyk woo hollar pister 
system architecture directions networked sensors 
asplos november 
intanagonwiwat estrin govindan heidemann 
impact network density data aggregation wireless sensor networks 
submitted publication icdcs november 
intanagonwiwat govindan estrin 
directed diffusion scalable robust communication paradigm sensor networks 
mobicom boston ma august 

comparison algorithms polygon boolean operations 
web page home com html 

efficient algorithm closed set boolean operations polygonal regions plane 
technical report ershov institute informatics systems 
preprint russian 
english translation available home com html 
madden franklin hellerstein hong 
design query processor sensor networks 
submitted publication 
madden franklin hellerstein hong 
tag tiny aggregation service ad hoc sensor networks 
osdi appear 
madden hong hellerstein franklin 
tinydb web page 
telegraph cs berkeley edu tinydb 
malik leung shi 
contour texture analysis image segmentation 
international journal computer vision 
matias vitter wang 
wavelet histograms selectivity estimation 
sigmod pages seattle washington june 
ramanathan 
wang 
uw api network routing application programmer interface 
draft version january 
sweldens 
lifting scheme construction second generation wavelets 
siam math 
anal 
sweldens schr der 
building wavelets home 
wavelets computer graphics pages 
acm siggraph course notes 
cm bell labs 
com wim papers pdf 
yao gehrke 
cougar approach network query processing sensor networks 
sigmod record september 
zhao govindan estrin 
computing aggregates monitoring wireless sensor networks 
technical report usc september 
