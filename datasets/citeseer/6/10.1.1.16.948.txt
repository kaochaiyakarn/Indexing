automated recovery secure bootstrap process integrity rarely valid presupposition systems architectures necessary security guarantees 
address problem designed secure bootstrap process aegis presumes minimal amount integrity prototyped intel architecture 
basic principle sequencing bootstrap process chain progressively higher levels abstraction requiring layer check digital signature layer control passed 
major design decision consequence failed integrity check 
simplistic strategy simply halt bootstrap process 
show aegis bootstrap process augmented automated recovery procedures preserve security properties aegis additional assumption availability trusted repository 
describe means repository implemented focus attention network accessible repository 
systems organized layered levels abstraction effect defining series virtual machines 
virtual machine presumes correctness integrity virtual real machines underlie operation 
integrity system secure conversely system secure foundation smith farber supported darpa contracts dabt mda additional support hewlett packard intel corporations 
william angelos keromytis david farber jonathan smith university pennsylvania distributed systems laboratory philadelphia pa angelos farber dsl cis upenn edu built 
secure bootstrap operating system kernel trusted invoked untrusted process 
believe designing trusted systems explicitly trusting boot components provides false sense security users operating system important unnecessary 
previously reported design preliminary implementation results aegis secure bootstrap process 
aegis increases security boot process ensuring integrity bootstrap code 
constructing chain integrity checks power continuing final transfer control bootstrap components operating system 
integrity checks compare computed cryptographic hash value stored digital signature associated component 
importance integrity bootstrap process highlighted disclosure intel pentium pro pentium ii processors microcode dynamically updated process bootstrap capabilities basic input output system bios power self test post 
useful upgrade capability dangerous 
aegis provides integrity guarantees bios code updates processor microcode microcode 
integrity guarantees aegis provide secure automatic updates bootstrap components including processor microcode 
order provide integrity guarantees aegis model relies explicitly assumptions 
motherboard processor portion system rom bios compromised adversary unable unwilling replace motherboard bios 

existence cryptographic certificate authority infrastructure bind identity public key limits placed type infrastructure 

trusted repository exists recovery purposes 
repository may host network reachable secure communications protocol may trusted rom card located protected host 
aegis architecture outline section includes recovery mechanism repairing integrity failures protection classes denial service attacks 
added benefit recovery mechanism potential reducing total cost operation tco computer system reducing trouble calls time associated failures upgrades boot process 
start aegis targeted commercial operating systems commodity hardware making practical real world system 
aegis boot process guaranteed secure state event integrity failures outside minimal section trusted code 
define guaranteed secure boot process parts 
code executed explicitly trusted integrity verified prior 
second integrity failure detected process recover suitable verified replacement module 
recovery process focus current 
responses integrity failure system detects integrity failure possible courses action taken 
continue normally issue warning 
unfortunately may result execution corrupt malicious component 
second execute component 
approach typically called fail secure creates potential denial service attack 
final approach recover correct inconsistency trusted repository execution component 
approaches unacceptable systems important network elements switches intrusion detection monitors associated electronic commerce component unavailable service results untrustworthy 
goals main goals aegis recovery protocol 

allow aegis client trusted repository mutually authenticate identities limited prior contact mobility domains 

prevent man middle attacks 

prevent replay attacks 

mitigate certain classes denial service attacks 

allow participating parties agree shared secret secure manner order optimize message authentication 

kiss keep simple secure complexity design implementation vulnerabilities 
outline section goals aegis design explicit 
sections form core giving overview aegis ibm pc boot process 
section provides cryptographic system tools needed build secure recovery protocol describes protocol 
section describes details adding recovery protocol existing dynamic host configuration protocol dhcp trivial file transfer protocol tftp implementations provides performance information 
discuss system status steps section conclude 
aegis architecture overview practical impact aegis able commodity hardware minimal changes ideally existing architecture 
ibm pc architecture selected prototype platform large user community availability source code operating systems 
freebsd operating system aegis architecture limited specific operating system 
porting new operating system requires minor changes boot sector code kernel verified prior passing control 
verification code contained bios changes substantially increase size boot loader boot sector 
aegis modifies standard pc boot process shown executable code small section trusted code verified prior execution digital signature 
accomplished modifications additions bios 
bios contains verification code public key certificate 
essence trusted software serves root authentication chain extends operating system potentially application software 
aegis boot process operating system kernel started recovery process entered repair integrity failure detected 
repair completed system warm booted ensure system starts 
entire process occurs user intervention 
addition ensuring system starts secure manner aegis maintain hardware software configuration machine 
aegis maintains copy signature expansion card additional expansion cards fail integrity test 
similarly new operating system started os kernel change new kernel fail integrity test 
aegis boot process computer ibm pc architecture follows approximately boot process 
divided process levels abstraction see correspond phases bootstrap operation 
phase power self test post 
post invoked ways 
applying power computer automatically invokes post causing processor jump entry point indicated processor reset vector 

hardware reset causes processor jump entry point indicated processor reset vector 

warm boot ctrl alt del dos invokes post testing initializing upper system memory 

software programs permitted operating system jump processor reset vector 
cases sequence tests conducted 
tests initial processor self test control system bios 
bios performed power tests begins searching expansion card roms identified memory specific signature 
valid ideally signature embedded firmware rom 
rom signature bios control immediately passed 
rom completes execution control returned bios 
final step post process calls bios operating system bootstrap interrupt int 
bootstrap code finds disk searching disk search order defined cmos 
finds disk loads primary boot sector memory passes control 
code contained boot block proceeds load operating system secondary boot sector depending operating system boot loader 
ideally boot process proceed series levels level passing control operating system kernel running 
unfortunately ibm architecture uses star model shown 
expansion roms operating system boot block system bios initiate post level level expansion roms level level 
ibm pc boot process layered boot process divided boot process levels simplify organize aegis bios modifications shown 
increasing level adds functionality system providing correspondingly higher levels abstraction 
lowest level level 
level contains small section trusted software digital signatures public key certificates recovery code 
integrity level assumed valid 
perform initial checksum test identify prom failures 
level contains remainder usual bios code cmos 
second level contains expansion cards associated roms 
third level contains operating system boot sector 
resident device responsible loading operating system kernel 
fourth level contains operating system fifth final level contains user level programs network hosts 
transition levels traditional boot process accomplished jump call instruction attempt verifying integrity level 
aegis hand uses public key cryptography cryptographic hashes protect transition lower level higher recovery process ensures integrity level event failures 
pseudo code action taken level transition level shown 
func int level certificate int result result return sha return result goto recovery 
layer transition pseudo code tion finds component certificate level ideally stored component initially stored table contained level 
certificate 
verifies certificate form chain trust component certificate root certificate authority public key 
return error code recovery procedure entered 
returns true signature contained certificate verified public key contained certificate 
integrity certificate failures identified process recovered trusted repository 
integrity policy formalizing discussion section aegis integrity policy prevents execution component integrity validated 
reasons integrity component invalid 
integrity component change hardware software malfunction change malicious act 
component certificate timestamp may longer valid 
case client attempt recover trusted repository 
trusted repository unavailable attempts client action depends integrity policy user 
instance user may choose continue operation limited manner may choose halt operations altogether 
trusted repository trusted repository expansion rom board contains verified copies required software network host 
repository rom board simple memory copies repair shadow failures 
repository network host protocol strong authentication required 
case network host detection integrity failure causes system boot recovery kernel contained network card rom 
recovery kernel contacts trusted repository secure protocol described recover signed copy failed component certificate 
failed component shadowed repaired system restarted warm boot 
resultant aegis boot process shown 
note boot process enters recovery procedure isomorphic secure network boot purpose retrieving valid bootstrap components operating system 
leverage fact adding authentication known network protocols supporting remote program loading rpl dhcp tftp recovery protocol 
result approach similar proposed specification 
biggest difference approach approach addition noted addition security 
currently specification contain form security 
authors specification developing security architecture announced conference date 
aegis network recovery protocol aegis network recovery protocol combines protocols algorithms networking cryptography ensure security protocol 
section provides material needed fully understand recovery protocol 
describe protocol provide examples 
network host expansion roms aegis rom operating system boot block bios section bios section initiate post user programs level level level level level level legend control transition recovery transition 
aegis boot control flow certificates usual purpose certificate respect public key cryptography bind public key identity 
binding essential strong authentication severely limits potential certificates anonymous transactions 
widely certificate standard variants provide binding 
standard suffers serious problems 
significant ambiguity parsing compliant certificates basic encoding rules ber 
encoding rules require great deal space implement encoded certificates usually large 
specification eliminates problems remaining ones prevent 
limits problems certificate standard subset proposed sdsi spki certificate structure 
sdsi spki format suffer problems offers additional functionality 
sdsi spki lite sdsi spki standard development chosen support small subset sdsi spki needed aegis 
call subset sdsi spki lite 
sdsi spki provides functionality simple binding identity public key 
identity certificates require existence access control list acl describe access rights entity 
maintaining lists distributed environment complex difficult task 
contrast sdsi spki provides notion capability 
capability model certificate carries authorizations holder eliminating need identity infrastructure access control lists 
aegis capabilities server client obvious meanings 
aegis types certificates 
authorization certificate 
certificate signed trusted third party certificate authority key holder machine holds private key capability generate second type certificate authentication certificate 
authentication certificate demonstrates client server hold private key corresponding public key identified authentication certificate 
nonce field corresponding nonce server authentication certificate ensure authentication protocol fail detecting preventing active attacks man middle 
msg hash field ensures entire message containing certificates modified 
msg hash authentication certificate eliminates signature verification operation entire message longer needs signed 
additional server fields pass optional diffie helman parameters client parameters need global values 
clients free set validity period authentication certificate desire expect clients keep period short 
current sdsi spki draft rfc proposes encoding schemes 
shown figures advanced transport format 
basically ascii representation certificate binary information keys represented base encoding 
unfortunately proposed representation schemes sdsi spki produce certificates small purposes 
propose new encoding scheme call binary transport format 
uses fixed identifiers various certificate types direct mapping binary data network byte order representation 
resulting encoding scheme reduces size certificate approximately bytes encoded slightly bytes encoded 
space saved combining spki fields single type 
subject hash key hash sha bytes maps subject publickey dsa hash sha 
expands name space significantly saves significant amount space 
table lists sample type identifiers 
uses formats 
tuple identifier size data 
identifier bytes size bytes data variable size 
second implied size format identifier 
format possible save space 
examples certificates shown figures cert issuer hash key hash sha subject hash key hash sha tag client signature hash sha public key dsa sha spki type identifier cert issuer issuer publickey dsa hash sha subject subject publickey dsa hash sha sha hash tag signature signature publickey dsa hash sha signature publickey dsa table 
sample binary transport format identifiers 
shows authorization certificate forms 
remaining figures readability purposes 
third final certificate format component signature certificate shown 
certificate embedded component stored table 
aegis boot process described earlier 
certificate revocation lists requiring client maintain certificate revocation list crl places significant burden non volatile storage client 
choose keep validity period certificates short sdsi spki model require client update certificates expire 
serves purposes ability handle key revocation 
eliminate cert issuer publickey dsa hash sha subject publickey dsa hash sha tag client signature publickey dsa 
aegis authorization certificate size bytes total cert issuer hash key hash sha subject hash key hash sha tag client msg hash hash sha signature hash sha public key dsa sha 
aegis client authentication certificate storage requirements client 
second potentially reduce amount system maintenance required client 
client connect server regular basis update component certificates server time update actual component new version available 
diffie hellman key agreement diffie hellman key agreement dh permits parties establish shared secret :10.1.1.37.9720
unfortunately algorithm originally proposed susceptible man middle attack 
attack defeated combining dh public key algorithm dsa proposed station station protocol sts :10.1.1.59.6682
recovery protocol extension sts 
cert issuer hash key hash sha subject hash key hash sha tag server dh gbytes dh dh msg hash hash sha signature hash sha public key dsa sha 
aegis server authentication certificate cert issuer hash key hash sha subject hash sha signature hash sha public key dsa sha 
aegis component certificate dh algorithm difficulty calculating discrete logarithms finite field 
participant agrees primes primitive mod values need protected order ensure strength system public values 
participant generates large random integer 
bob generates large random integer computes mod sends alice 
alice generates large random integer computes mod sends bob 
bob alice compute shared secret computing mod mod respectively 
digital signature standard digital signature standard dss includes digital signature algorithm dsa cryptographic hash algorithm sha 
dsa produces bit signature parameters bits length 
size prime multiple 
bit prime factor ofp 
mod greater 
wherex mod parameters andg public 
private key public key signature message computed manner 
signer generates random number computes mod mod sha xr mod values bits length comprise signature 
receiver verifies signature computing mod sha mod mod mod mod signature verified comparing equal signature valid 
ipsec authentication header ipsec authentication header ah provides authentication integrity ip datagram 
format ipsec authentication header shown 
header field describes type header ah 
length field indicates size header byte units minus 
instance entire header size bits length field value 
security parameters index spi determines security association defined source destination 
sequence number bit field prevent replay attacks authentication data field variable length aligned bits field containing appropriate authentication information 
case aegis bit mac 
hdr length reserved security parameters index sequence number field authentication data variable 
ipsec ah format sha message authentication code message authentication codes mac utilize secret shared communicating parties message digest 
secure hash algorithm sha hmac described rfc draft rfc 
mac defined sha xor sha xor message datagram array bytes value array bytes value 
zero padded bytes 
result mac bit sha digest truncated bits 
bits mac 
dynamic host configuration protocol dhcp protocol provides clients ability configure networking host specific parameters dynamically boot process 
typical parameters ip addresses client gateways dns server 
dhcp supports configuration parameters options 
currently approximately options defined dhcp 
options authentication option described section 
format dhcp message shown 
field dhcp message opcode 
opcode values opcode secs hlen hops xid flags client ip address client ip address ip address server bootstrap relay agent ip address client hardware address bytes optional server name bytes boot file name bytes options variable 
dhcp message format message message 
field hardware address type defined assigned numbers rfc 
hlen indicates length hardware address 
hops set zero client relay agents determine forward message 
xid random number chosen client 
permit client server associate messages 
secs set client number seconds elapsed start address acquisition process 
currently leftmost bit flags field help solve ip multicast problem 
remaining bits zero 
client address client knows address set server client know bad address 
relay agent address 
client hardware address 
sname optional null terminated string containing server name 
file name boot file 
aegis name component recover 
options variable length field containing options associated message 
initial message exchange client server shown 
client begins process sending cover message broadcast message local area time client discover offer offer request ack server 
initial dhcp message exchange network 
broadcast message may may forwarded lan depending existence relay agents gateways 
dhcp servers respond message 
client selects messages responds server message server acknowledges 
addition providing networking host specific parameters dhcp provide name server location bootstrap program support diskless clients 
client receives ip address boot server name bootstrap program client uses tftp contact server transfer file 
trivial file transfer protocol tftp designed simple small fit rom diskless client 
tftp uses udp tcp authentication included protocol 
tftp unique messages identified byte opcode value packet 
read request write request packets share format options capability 
unfortunately option capability apply remaining packet types data ack error 
problematic mac tftp changing protocol 
initial mutual authentication protocol client aegis server trusted repository wish communicate establish shared secret authenticating identity 
prior contact client server agree trusted third party public key infrastructure sign authorization certificates car 
server client need copy trusted third party public key pca 
client sends message server containing client authorization authentication certificates 
server receives message verifies client signature authentication certificate hash contained authentication certificate matches message signature ca authorization certificate verified chain certificates 
valid timestamp authentication certificate bounds server sends client message containing authorization authentication certificates 
server authentication certificate may include optional dh parameters andy mod dh parameters identified certificate default values 
currently default values skip 
server nonce client nonce included message 
client receives message verifies signatures authentication authorization certificates hash servers authentication certificate matches message hash matches sent message 
valid timestamp value authentication certificate bounds matches sent message client sends signed message server containing dh parameter mod server nonce 
server receives message verifies signature matches sent previous message 
valid server generate shared secret dh mod client similarly generates shared secret mod shared secret authenticate messages server client time agree change depicts entire exchange client server dhcp messages identified 
authentication certificate assists ensuring protocol fail nonces short validity period certificate 
permits server reuse limited period 
reduces computational overhead server high activity periods 
potential denial service attack mitigated manner authentication certificate 
authorization certificate prevents clients masquerading server client server capability tag 
benefit possible basic certificates 
subsequent message authentication establishment shared secret protocol described subsequent dhcp messages authenticated sha hmac defined section augmented counter prevent client server pca pca hash server ca car server server mod mod client car client server ar server client sha mac hash car client client client mod client mod 
authentication message exchange replays 
counter initially set zero shared secret derived 
computing mac fields hops zeroed fields mutable relay agents 
authentication subsequent tftp messages require ipsec authentication header option described section 
implementation moving high level design implementation requires great deal 
section take protocol certificates described section describe implementation dhcp tftp 
provide message formats type information 
conclude section providing performance information discussing related 
dhcp authentication option dhcp extensible variable length options field dhcp message 
format field currently defined internet rfc 
option authentication defined draft rfc 
format authentication option shown 
dhcp authentication option designed support wide variety authentication schemes single byte protocol length fields 
unfortunately single byte value size octets authentication information severely limits ability include public key certificates reasonable key sizes length protocol authentication information 
dhcp authentication option format type value authorization certificate client authentication certificate server authentication certificate component authentication certificate signature sha mac table 
aegis types data field option 
fortunately format described earlier multiple authentication option fields 
approach technically violates dhcp authentication option protocol cause interoperability problems 
alternate approach required increasing option size field bytes 
interoperability issues mitigated approach significant change dhcp protocol 
multiple authentication option fields dhcp message add field identify information contained option 
resultant aegis authentication option format shown table describing various types shown table 
length gis aegis information 
aegis authentication option format client server option format exchange information required protocol 
ip hdr ah hdr udp hdr tftp frame 
authenticated tftp datagram format addition formatted spki certificates support new dhcp option permit continuation previous option field 
option information exceeds bytes available dhcp option extended field 
permits certificates desired 
trivial file transfer protocol authentication discussed earlier adding authentication tftp packets currently defined protocol problematic 
suffer potential interoperability problems ipsec authentication header 
approach benefits 
foremost doesn require changes tftp protocol uses proposed standard authentication 
resulting tftp datagram shown 
dhcp tftp recovery protocol authentication added dhcp tftp aegis modifications recovery protocol 
aegis client follows dhcp protocol adds message name required component needed followed sha hash component boot file name field 
dhcp protocol completed shared secret established aegis client contacts trusted repository tftp authentication downloads new component 
prototype information currently process completing internet software consortium dhcp server gnu multi precision arithmetic package package portions 
currently prototype rom image approximately kb 
includes subset dhcp protocol cryptographic code described 
currently contain certificate parsing code 
algorithm time sha mb sec dsa verify bit msec dsa sign bit msec generate bit msec generate bit msec table 
cryptographic benchmarks performance information section provides performance estimates recovery protocol current implementation 
timings obtained mhz pentium mb main memory intel pro network interface card aegis recovery rom code 
sha code beta dsa diffie hellman implementations done gnu mp 
times cryptographic operations shown table 
times dsa verify sign include cost computing sha digest resultant dhcp message 
initial exchange initial authentication exchange includes dhcp messages 
requires client perform signature operation server perform verify operations 
total cost message msec 
message requires server generate perform signature operation 
client perform verify operations 
results message cost msec 
final message requires client generate perform signature operation 
server perform verify operation generate resulting message cost msec 
summing cost messages gives total cost msec 
time may high cost pay security total time small compared total time spent booting computer system 
users see increase time required perform authentication 
times unoptimized point prototype 
subsequent exchanges subsequent dhcp tftp messages mac described earlier lan situation bounded speed sha mb sec 
related knowledge previous academic involving secure recovery bootstrap components 
commercial products announced allow system administrators automatically update manually repair bootstrap components 
proposed products include automatic recovery repair 
efforts incorporating authentication dhcp 
microsoft intel working developing security architecture specification uses dhcp tftp 
early draft provided members group group revealed draft architecture 
draft rfcs 
effort involves shared secret dhcp client server 
approach secure severely limits mobility clients domains shared secret previously established 
furthermore maintenance protection shared secrets difficult process 
effort incorporating authentication dhcp tis 
proposal combines dhcp 
approach provides mobility dhcp clients significant increase cost terms complexity 
client implementation order support approach include implementation 
significantly increase size client code possibly rom size available client 
intel proposed authentication support dhcp 
proposal uses phase approach 
phase computer system boots normally dhcp 
second phase begins system completes dhcp process uses isakmp exchange security association 
security association obtain configuration information dhcp server secure channel channel established 
information compared obtained phase 
differ secure channel established boot fails 
benefit approach requires changes dhcp 
drawbacks approach addition problems 
possible race condition vulnerability time configurations compared 
second approach protect denial service attacks 
major goals aegis research development new ideas construction secure systems additional constraint ideas realizable today near term com platforms 
confining constraint ensures aegis results impact simply academic community 
intend investigate centralized management bootstrap process 
practical uses including desktop management lan attached pcs integrity failures stimulated viruses user inserted cards secure recoverable bootstrap network elements processors bridges ip routers active networks 
recovery protocol fully incorporated dhcp model intend propose authentication rfc standard 
intend propose dhcp option continuation standard 
expect proposals december internet engineering task force meeting 
introduced aegis secure bootstrap architecture explained approach integrity assumptions operating environment discussed general idea automated recovery secure bootstrap process trusted repository 
currently implementing new automated recovery process context pc architecture small portion bios 
shown extended recovery networks cryptographic protocols provided protocol expected data structures packet formats 
believe significant impact administration manage ability systems 
previously demonstrated need provided architecture secure bootstrap trusted system shown architecture utilized realistic environment loss security 
build distributed computer systems nodes logical states non operational recovering operational trusted 
simple states transitions ease sense possible verification applications built distributed systems 
alexander keromytis smith 
secure active network environment architecture 
technical report ms cis university pennsylvania november 
alexander 
dhcp options vendor extensions 
internet rfc march 

technical overview version edition may 
farber smith 
secure reliable bootstrap architecture 
proceedings ieee symposium security privacy pages may 
aziz 
assigned numbers skip protocols 
skip com spec numbers html 
committee 
recommendation specification basic encoding rules syntax notation asn 
committee 
directory authentication framework 
international telephone telegraph international telecommunications union geneva 
computer computer packard intel corporations 
network pc system design guidelines edition july 
diffie hellman :10.1.1.37.9720
new directions cryptography 
ieee transactions information theory nov 
diffie van oorschot wiener :10.1.1.59.6682
authentication authenticated key exchanges 
designs codes cryptography 

authentication dhcp messages 
progress august 

dynamic host configuration protocol rfc march 
kaufman 
dynamic name service security 
internet rfc january 

boot 
sys boot readme july 
freebsd 
ellison 
sdsi spki bnf 
private email july 
ellison rivest thomas 
simple public key certificate 
progress april 
finlayson 
bootstrap loading tftp 
internet rfc june 
matt 
defending systems viruses cryptographic authentication 
ieee symposium security privacy pages 
ieee 

re re pentium pro floating point patch 
usenet posting intel pentium pro november 
gong syverson 
fail protocols approach designing secure protocols 
proceedings ifip september 
granlund 
gnu multiple precision arithmetic library 
tmg edition june 
grimes 
protected mode bootstrap loader 
sys boot readme mach october 
freebsd 
yap 

www dit csiro au staff ken personal july 
heberlein bishop 
attack class address spoofing 
proceedings th national information systems security conference pages october 
kent atkinson 
progress october 
krawczyk bellare canetti 
hmac keyed hashing message authentication 
internet rfc february 
lacy mitchell blaze 
beta 
email research att com 
lemon 
dynamic host configuration server 
ftp ftp fugue com pub 
levy 
capability computer systems 
digital press 
system bios ibm pcs computers 
addison wesley nd edition 
glenn 
hmac sha esp ah 
progress november 
malkin 
tftp option extension 
internet rfc march 
schneider turner 
internet security association key management protocol isakmp 
internet draft ipsec working group june 
microsoft 

microsoft developer network library october 
standards 
digital signature standard 
technical report fips department commerce may 
standards 
secure hash standard 
technical report fips department commerce april 
known fed reg 
patel 
securing dhcp 
progress july 
gray 
model containment computer viruses 
ieee symposium security privacy pages 
ieee 
reynolds postel 
assigned numbers 
internet rfc october 
sollins 
tftp protocol revision 
internet rfc july 
