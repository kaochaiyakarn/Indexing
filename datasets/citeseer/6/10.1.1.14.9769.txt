software development re nement douglas smith kestrel institute palo alto california usa presents framework software development re nement 
framework category higher order speci cations 
key idea representing knowledge programming concepts algorithm design datatype re nement expression simpli cation means taxonomies speci cations morphisms 
framework partially implemented research systems specware planware 
specware provides basic support composing speci cations re nements colimit generating code logic morphisms 
specware intended general purpose industrial settings 
extends specware taxonomies software design theories support constructing re nements 
planware builds provide highly automated support requirements acquisition synthesis high performance scheduling algorithms 
overview software system viewed composition information variety sources including application domain requirements system behavior software design knowledge system architectures algorithms data structures code optimization techniques run time hardware software physical execute 
presents framework representing various sources information composing context re nement process 
framework founded category speci cations 
morphisms preprint submitted elsevier preprint draft august structure parameterize speci cations re ne 
colimits compose speci cations 
diagrams express structure large speci cations re nement speci cations code application design knowledge speci cation 
framework features collection techniques constructing re nements formal representations programming knowledge 
algorithmic concepts datatype re nements program optimization rules software architectures user interfaces represented diagrams speci cations morphisms 
arrange diagrams taxonomies allow incremental access construction re nements particular requirement speci cations 
example user may specify scheduling problem select theory global search algorithms algorithm library 
global search theory construct re nement ofthe scheduling problem speci cation speci cation containing global search algorithm particular scheduling problem 
framework partially implemented research systems specware planware 
specware provides basic support composing speci cations re nements generating code 
code generation specware supported inter logic morphisms translate speci cation language logic logic particular programming language 
specware intended general purpose industrial settings 
extends specware taxonomies software design theories support constructing re nements 
planware provides highly automated support requirements acquisition synthesis high performance scheduling algorithms 
remainder covers basic concepts key ideas approach software development re nement particular concept design classi cation 
discuss application techniques domain speci re nement 
detailed presentation derivation basic concepts speci cations speci cation nite presentation theory :10.1.1.18.4784
signature specication provides vocabulary describing objects operations properties domain interest axioms constrain meaning symbols 
theory domain closure axioms spec container sorts container op empty 
container op singleton 
container op join container container 
container singleton construct container axiom container join empty empty join op container boolean de nition axiom empty false axiom singleton axiom join de nition spec rules inference 
fig 

speci cation containers example speci cation partial orders notation adapted specware 
introduces sort binary predicate called le constrained usual axioms 
specware allows higher order speci cations rst order formulations su cient 
spec order sort op le boolean axiom re exivity axiom transitivity axiom antisymmetry spec example containers constructed binary join operator represent nite collections elements sort speci cation shown includes de nition means axioms 
operators required total 
constructor clause asserts singleton construct sort container providing basis induction container 
generic term expression refer term formula sentence 
model speci cation structure sets total functions satisfy axioms 
software development purposes ned notion semantics mind speci cation denotes set possible implementations computational model 
currently regard functional programs 
denotational semantics maps classical models 
morphisms speci cation morphism translates language speci cation language speci cation preserving property theorem source speci cation remains theorem translation 
speci cation morphism 
map sort operator symbols domain spec symbols codomain spec speci cation morphism required axiom translates theorem 
follows speci cation morphism translates theorems domain speci cation theorems codomain 
example speci cation morphism partial order integer morphism order integer fe 
integer le translation expression straightforward application symbol map example partial order axiom axioms partial order remain provable integer theory translation 
morphisms come variety avors 
extension import inclusion specs 
example build theory partial orders importing theory preorders 
import morphism 
le 
leg 
spec reorder sort op le boolean axiom re exivity axiom transitivity spec spec order import reorder axiom antisymmetry spec de nitional extension written import morphism new symbol axiom de nes 
de nitions implicit axioms existence uniqueness 
semantically de nitional extension property model domain unique expansion model codomain 
example container formulated de nitional extension pre container spec pre container sorts container op empty container op singleton 
container op join container container 
container singleton construct container axiom container join empty empty join spec spec container imports pre container de nition axiom empty false axiom singleton axiom join de nition spec parameterized speci cation treated syntactically morphism 
example speci cation container parameterized spec triv single sort spec triv sort spec parameterized spec container triv 
container fe 
functorial semantics rst order parameterized speci cations coherent functors pavlovic 
speci cation morphisms compose straightforward way composition nite maps 
easily checked speci cations speci cation morphisms form category spec 
colimits exist spec easily oo computed 
suppose want compute colimit form disjoint union sort operator symbols de ne equivalence relation symbols signature colimit known pushout case collection equivalence classes wrt cocone morphisms equivalence class 
axioms colimit obtained translating collecting axiom andc 
example suppose want build theory partial orders composing simpler theories 
spec sort op le boolean spec spec antisymmetry import axiom antisymmetry spec spec preorder import axiom re exivity axiom transitivity spec pushout antisymmetry preorder isomorphic speci cation partial order section 
detail morphisms fe 
le 
leg preorder antisymmetry 
equivalence classes fle le colimit spec sort rename operator rename le 
furthermore axioms antisymmetry translated axioms colimit 
partial order 
example pushout operation instantiate parameter parameterized speci cation 
binding argument parameter represented morphism 
form speci cation containers integers compute pushout container triv 
integer container triv 

integer 

example speci cation sequences built container pushouts 
regard container parameterized binary operator spec binop sort op bop spec morphism container parameterization binop 
container fe 
bop 
de ne re nement arrow extends binary operator semigroup spec associativity import binop axiom associativity join xjoin spec pushout associativity binop 
container produces collection speci cation associative join operator seq core sequence theory see appendix :10.1.1.18.4784
extending proto seq commutativity axiom obtain proto bag theory core bag multiset theory 
diagrams roughly graph morphism category usually category speci cations 
example pushout described started diagram comprised arrows antisymmetry reorder computing pushout diagram produces diagram antisymmetry reorder partial order diagram commutes composition arrows paths start nish node yields equal arrows 
structuring speci cations colimits construct large speci cation diagram specs morphisms 
morphisms express various relationships speci cations including sharing structure inclusion structure parametric structure 
examples appear 
example nest grain way order colimit ss re exivity antisymmetry re nement diagrams described speci cation morphisms help structure speci cation re ne speci cation 
morphism re nement intended ect reduce number possible implementations passing domain spec codomain 
sense re nement viewed embodying particular design decision property corresponds subset possible implementations domain spec possible implementations codomain 
software re nement wewant preserve extend structure structured speci cation versus attening colimit 
speci cation structured diagram corresponding notion structured re nement diagram morphism 
diagram morphism diagram diagram consists set speci cation morphisms node spec certain squares commute functor underlies diagram natural transformation underlies diagram morphism 
notation diagram morphisms 
example datatype re nement re nes bags sequences pre sented diagram morphism bag bag seq seq jj bag oo bag triv bag triv oo bag seq triv bag seq domain codomain shown boxes square commutes 
bag seq de nitional extension seq provides image bag theory 
specs bag seq bag seq details re nement appendix :10.1.1.18.4784
interesting content bag morphism bag bag 
bag seq 
bag seq empty bag 
bag empty empty bag 
bag empty nonempty 
bag nonempty singleton bag 
bag singleton singleton bag 
bag singleton nonsingleton bag 
bag nonsingleton 
bag bag union 
bag union bag 
bag size 
bag diagram morphisms compose straightforward way spec morphism composition 
easily checked diagrams diagram morphisms form category 
colimits category computed left kan extensions colimits spec 
sequel generally term re nement mean diagram morphism 
logic morphisms code generation inter logic morphisms translate speci cations speci cation logic logic programming language 
see details 
useful translating speci cation logic logic supported various theorem provers analysis tools 
useful translating theory libraries various systems 
software development re nement code development correct construction code formal re nement process shown left 
re nement process starts speci cation requirements desired software artifact 
represents structured speci cation diagram arrows re nements represented diagram morphisms 
re nement embodies design decision cuts number possible implementations 
inter logic morphism translates low level speci cation code programming language 
semantically ect narrow set possible implementations just speci cation re nement constructive process proving existence implementation speci cation proving consistency 
clearly key issues supporting software re nement construct speci cations construct re nements 
sequel treats techniques constructing re nements 
constructing speci cations speci cation supplies tools creating new speci cations morphisms structuring specs diagrams composing speci cations importation parameterization colimit 
addition software needs support large library reusable speci cations typically including specs common datatypes sequences nite sets common mathematical structures partial orders monoids vector spaces addition generic operations libraries system may support specialized construction tools libraries domain speci theories resource theories generic theories domains satellite control transportation 
constructing re nements re nement development environment supplies tools creating new re nements 
innovations showing library re nements applied produce re nements speci cation 
focus mainly re nements embody design knowledge algorithm design datatype re nement expression optimization 
believe types design knowledge similarly expressed exploited including interface design software architectures domain speci requirements capture 
addition generic operations libraries system may support specialized construction tools libraries domain speci re nements 
key concept design knowledge datatype re nement algorithm design software architectures program optimization rules visualization displays expressed re nements diagram morphisms 
domain re nement represents structure required user speci cation order apply embodied design knowledge 
re nement embodies design constraint ect reduction set possible implementations 
codomain re nement contains new structures de nitions composed user requirement speci cation 
scaling gure left shows application library re nement structured speci cation 
library re nement selected 
applicability tos shown constructing classi cation arrow classi es having structure making explicit structure re nement applied computing pushout category diagrams 
creative lies constructing classi cation arrow 
process re ning speci cation described basic steps select re nement library construct classi cation arrow compute pushout 
resulting re nement cocone arrow 
basic re nement process repeated relevant sorts operators spec ciently explicit de nitions easily translated programming language compiled 
section address issue basic process developed order scale size complexity library specs re nements grows 
rst key idea organize libraries specs container seq bag bag proto set oo ooo ooooo woo ll nnn nnn nnn nnn seq fig 

taxonomy datatypes re nements taxonomies 
second key idea support tactics levels theory speci tactics constructing classi cation arrows task speci tactics compose common sequences basic re nement process larger re nement step 
design classi cation taxonomies re nements productive software development environment large library reusable re nements letting user tactic select re nements decide apply 
need arises way organize library support access support cient construction classi cation arrows 
library re nements organized taxonomies re nements indexed nodes taxonomies nodes include domains various re nements library 
taxonomic links re nements indicating re nement applies stronger setting 
sketches taxonomy datatypes collections 
details appendix arrows nodes express re nement relationship morphism proto seq proto bag extension axiom commutativity applied join constructor proto seqs 
datatype re nements indexed speci cations taxonomy re nement nite bags nite sequences indexed node specifying nite bag theory 
gives taxonomy algorithm design theories :10.1.1.18.4784:10.1.1.18.4784
re nements indexed node correspond families program schemes 
algorithm theory associated scheme su cient prove consistency instance scheme 
nodes deeper taxonomy correspond speci cations structure shallower levels 
generally wish select re nements indexed deeply taxonomy possible maximal amount structure requirement speci cation exploited 
algorithm taxonomy deeper node structure exploited problem problem solving power brought bear 
roughly speaking narrowly scoped faster algorithms deeper taxonomy widely applicable general algorithms shallower nodes 
problems arise library re nements selecting appropriate re nement constructing classi cation arrow 
organize library re nements taxonomy ladder construction process provides incremental access applicable re nements simultaneously incremental construction classi cation arrows 
spec spec spec process incrementally constructing re nement illustrated ladder construction diagram left 
left side ladder path taxonomy starting root 
ladder constructed rung time top 
initial interpretation spec simple construct 
ladder constructed constraint solving process involves user choices propagation consistency constraints calculation colimits constructive theorem proving 
generally rung construction stronger colimit cocone constructed 
intent ing speci speci su cient de ned symbols serve codomain 
words implicitly de ned symbols ai translated explicitly de ned symbols speci 
wehave constructed classi cation arrow spec selected re nement indexed node taxonomy constructing re nement straightforward compute pushout yielding spec compose arrows right side ladder pushout square obtain spec spec nal constructed re nement 
rung construction simply matter computing colimit 
example distinct arrows divide conquer sorting corresponding mergesort quicksort distinct cocones universal sorting algorithm corresponding colimit 
applying re select node taxonomy simple matter computing pushout 
algorithm design pushout simply instantiates de nition schemes axiom schemes 
general automated method exists constructing ladder creative decisions 
generalpurpose design users involved guiding rung construction process 
domain speci settings certain conditions possible automate rung construction discussed section 
goal build interface providing user various general automated operations libraries standard components 
user applies various operators goal lling partial morphisms speci cations rung complete 
user directed operation constraint propagation rules automatically invoked perform sound extensions partial morphisms speci cations rung diagram 
constructive theorem proving provides basis important techniques constructing classi cation arrows 
tactics design process described far uses primitive operations selecting spec re nement library computing pushout colimit diagram diagram morphisms translating formula morphism witness nding translations construction classi cation arrows 
operations accessible gui inevitably users notice certain patterns operations arising wish macros parameterized procedures 
higher level semiautomatic operations user 
need kinds tactics discerned 
classi cation tactics control operations constructing classi cation arrows 
divide conquer theory admits common tactics constructing classi cation arrow 
tactic procedurally described follows user selects operator symbol dro requirement spec system analyzes spec obtain translations dro symbols user prompted supply standard set constructors input domain tactic performs composition relation soundness axiom derive translations ci 
tactic followed mergesort derivation 
tactic similar tactic selects constructors composition relations versus step uses solve decomposition relations step 
tactic followed quicksort derivation 
classi cation tactic context dependent simpli cation provides example 
procedurally user selects expression expr simplify type analysis infer translations input output sorts expr context analysis routine called obtain contextual properties expr yielding translation witness nding derive translation new expr 
re nement tactics control application collection re nements may compose common sequence re nements larger step 
planware code generation tactic automatically applying spec code morphisms 
example re nement tactic context dependent simpli cation procedurally classi cation tactic construct classi cation arrow compute pushout apply substitution operation spec replace expr simpli ed form create isomorphism 
finite di erencing requires complex tactic applies tactic context dependent simpli cation repeatedly order incremental expressions set applying expression 
abstracted op re nement 
envision possibility construct tactics class tasks 
example algorithm theory may ways analyze sorts ops axioms determine various orders constructing translations classi cation arrows 
tactics divide conquer mentioned example 
summary main message formal software re nement process supported automated tools particular libraries design knowledge brought bear constructing re nements requirement speci cation 
goal show diagram morphisms adequate capture design knowledge algorithms data structures expression optimization techniques re nement process 
showed apply library re nement requirement speci cation constructing classi cation arrow computing pushout 
discussed library re nements organized taxonomies techniques constructing classi cation arrows incrementally 
examples concepts described working specware planware systems 
reported result extended col colleagues kestrel institute 
particularly acknowledge contributions david espinosa liu pavlovic stephen 
research partially supported air force research lab rome ny defense advanced research projects agency 
liu smith planware domain speci synthesis high performance schedulers 
proceedings thirteenth automated software engineering conference october ieee computer society press pp 

burstall goguen semantics clear speci cation 
proceedings copenhagen winter school software speci cation bjorner ed 
springer lncs 
meseguer general logics 
logic colloquium ebbinghaus ed 
north holland amsterdam pp 

pavlovic semantics rst order parametric speci cations 
formal methods woodcock wing eds lecture notes computer science springer verlag 
appear 
smith constructing speci cation morphisms 
journal symbolic computation special issue automatic programming may june 
smith classi cation approach design 
proceedings fifth international conference methodology software technology amast vol 
lncs springer verlag pp 

smith mechanizing development software :10.1.1.18.4784
calculational system design proceedings nato advanced study institute broy eds 
ios press amsterdam pp 

srinivas specware formal support composing software 
proceedings conference mathematics program construction moeller ed 
lncs springer verlag berlin pp 


