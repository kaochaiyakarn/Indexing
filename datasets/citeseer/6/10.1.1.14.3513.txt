real time computer vision platform mobile robot applications szabo david coombs martin herman ted liu liu nist gov isd cme nist gov national institute standards technology intelligent systems division building room gaithersburg md portable platform described supports real time computer vision applications mobile robots 
platform includes conventional processors image processing front system controller pan tilt vergence head 
platform withstand vibration road driving 
platform successfully supported experiments video stabilization detection moving objects outdoor surveillance gradient correlation image flow estimators indoor mobility divergence flow 
applications able run rates ranging hz image sizes 
applications autonomous mobile robots including military scout missions urban patrol missions surveillance security highway driving lunar planetary exploration hazardous waste handling delivery material machines manufacture delivery hospitals household cleaning 
applications common fact behaviors composed common set generic activities 
generic activities may vision primary form perception 
examples generic activities include detecting avoiding obstacles detecting stationary moving targets tracking moving targets camera fixation image stabilization landmark recognition localization landmark pose determination egomotion determination 
describes real time computer vision platform designed mobile robot applications particularly outdoors 
platform consists stand enclosure containing electronic computing equipment 
enclosure shock mounted withstand vigorous vibration encountered road driving 
enclosure contains sparc computers image frame grabber real time image processing board motion control board operating pan tilt vergence head 
platform designed handle target acquisition tracking task vision activities enumerated 
task designed involves reconnaissance surveillance target acquisition moving vehicle termed move 
scenario vehicle moving camera mounted computer controlled pan tilt platform scans terrain searching moving targets tanks trucks vehicles 
target detected tracked camera control pan tilt platform 
task requires generic activities including digital image stabilization detection independently moving targets tracking targets computer control pan tilt head 
provides examples computer vision platform performing real time image stabilization real time moving target detection 
platform experiment real time optical flow extraction 
different algorithms implemented uses image derivatives find flow uses correlation matching method 
platform perform experiments real time obstacle avoidance indoor mobile robot optical flow navigation 
organized follows 
section describes nist hierarchical control architecture computer vision platform designed 
description design system components platform 
followed overview applications implemented tested platform 
include move real time optical flow extraction realtime obstacle avoidance 
architecture computer vision platform described designed readily systems designed real time control system rcs hierarchical architecture 
rcs decomposes goals spatially temporally meet system objectives 
monitors environment sensors updates models states system world 
maps functionality application levels rcs hierarchy 
maps functionality indoor obstacle avoidance system levels rcs hierarchy 
rcs composed parallel legs sensory processing sp world modeling wm behavior generation bg interact control complex systems 
hierarchical levels run parallel labelled highest lowest tribe group task move elemental move prim primitive servo 
bg modules control physical devices 
wm modules supply information bg hierarchy sp hierarchy 
maintains database system variables filters analyzes data support modules 
sp modules monitor analyze sensory information multiple sources order recognize objects detect events filter integrate information 
world model uses information maintain system best estimate past current states world predict states world 
system description design requirements architectures described useful determining requirements met computer vision platform 
nature research evaluation goals requirements entirely fixed 
considerable amount flexibility necessary order experiment types algorithms 
variety researchers typically implementing evaluating improving algorithms long period time easily understood environment essential 
implemented algorithms components may obtained multitude sources common platform desirable 
complexity vision processing indoor outdoor moving robots demands real time performance achievable single processor systems 
clear path exist add additional general purpose processors specialized processors 
functional requirements outlined architectures platform flexible easy support common open architecture achieve real time performance 
design criteria sparc vme multiprocessor system running solaris operating environment selected core computer system 
solaris provides real time performance multiprocessor resource management 
move task move prim servo sp moving target detection correlation target tracking feature extraction image flow extraction image matching filtering bg determine pursuit saccade acquire follow target compute trajectory velocity profiles servo pan tilt zoom motors wm update target data tracking moving targets size position velocity trajectory predicted position image warping image stabilization cameras pan tilt zoom encoders ins camera pan tilt zoom motors target selection design move system described rcs architecture 
vme backplane provides ability integrate wide range specialized board components compact card cage 
entire system hard drive electronics power conditioning housed shock isolated inch rack mount enclosure 
enclosure allows system easily mounted vehicle provides volts dc 
order provide additional computational bandwidth low level functions implemented dedicated boards 
low level image processing performed datacube mv 
low level servo control trc head performed delta tau 
certain commercial equipment instruments materials identified order adequately specify experimental procedure 
identification imply recommendation endorsement nist imply materials equipment identified necessarily best purpose 
memory industry pack delta tau datacube mv mp camera electronics trc amps spare slots electronics enclosure 
volt power supply shock isolated rack sealed enclosure wheels motion controller 
details system component section 
system components sparc bus architecture sparc multiprocessor computer mp vme board 
board slots cards capable holding 
current system configured mhz mhz processors 
processor contains floating point unit memory management cache controller local cache 
cards provide communications processors memory vme bus interface 
bit multiplexed address bit data bit bus operates mhz 
burst transfers achieve peak bandwidth mbytes sec 
vme bit address bit data bus operates mhz achieve peak bandwidth mbytes sec 
operating environment operating environment solaris sunos svr unix system release operating system 
solaris compliant existing posix standards nist posix conformance test suite certificate validation sun see appendix detailed description environment 
datacube mv vme image processing board capable performing types image operations real time 
imageflow extensive library software program interact mv 
mv concept image pipelines 
pipeline consists dimensional stream pixels may operated maximum clock rate mhz 
rs formatted video requires bandwidth mhz 
heart mv switch routes pipelines image processing modules 
mv performs arithmetic operations multiply add normalize logic operations table look ups convolutions statistics sums min max feature listings maximum frame histograms morphological operations 
mv configured mini module performs second order polynomial image warps images large 
trc head transitions research trc head consists pan tilt base supports vergence head 
axis independently driven encoded dc brush motors 
absolute position accurate arc minute 
maximum angular velocities deg sec pan deg sec tilt deg sec vergence axes 
maximum angular accelerations deg sec pan tilt axes deg sec vergence axes 
delta tau general purpose vme motion control board performs low level control trc head 
board contains digital signal processor capable performing servo updates frequency khz 
provides high level programming interface contains suite trajectory generation algorithms 
linear blended move motor commanded move goal constant velocity 
acceleration constant resulting trapezoidal velocity profile ramped yielding curve velocity profile 
provides direct interface programmer specify position distance velocity time period move 
computes third order position trajectory goal ramped acceleration 
programmer provide new goals prior specified time period 
time period small enabling programmer specify precise trajectories visual saccade pursuit behaviors 
experiments applications tested vision platform 
section examine implementation algorithms show results experiments 
move algorithms move system tested vision platform 
algorithm performs image stabilization purely image registration 
second algorithm identifies pixels image represent motion scene independent camera induced motion 
image stabilization algorithm registering features images 
registration assumes image motion attributable motion parameters translations trc head types lens 
image plane rotation image axis scale 
perspective taken account model algorithm works best stabilizing distant portions scene 
appropriate applications targets usually significant distance 
detailed description algorithm 
shows components algorithm run vision platform 
basically algorithm consists extracting matching features consecutive image frames 
affine image motion model fit frame frame 
images aligned image 
implementation details 
new image filtered remove noise accentuate features 
image convolved feature detector kernel 
image divided vertical rectangular strips convolution maxima located strips attempt find maxima located horizon scene 
patch convolution maximum correlated patch previous frame 
best correlations chosen fit rotation translation scale parameters 
obtain subpixel displacement second order polynomial surface fit correlation peak original grey lev allocation stabilization functions hardware resources 
monitor compute stabilization sparc video filter image mv overlay video warp image stabilized image camera els 
scale estimated euclidean distance feature points 
rotation translation parameters obtained solving overdetermined linear system derived set matched features 
transformations consecutive frames composed compute transformation frame current frame 
current frame warped frame bilinear interpolation 
results algorithm shown 
images obtained army traveling cross country approximately kmph mph 
images shown right 
cross hair graphically inserted show image moves due camera motion 
left stabilized frames sequence 
cross hairs sequence help illustrate central portion image remains fixed 
algorithm operates real time video imagery rate frames second imagery digitized pixels 
independent motion detection algorithm developed nelson takes advantage fact images translating camera appear expand flow outwards radially focus expansion foe 
foe lies point image camera moving 
world full stationary objects predict flow point image 
objects exhibit flow inconsistent predicted flow flagged independently moving objects 
algorithm computes normal gradient parallel flow field image spatial temporal derivatives 
estimate camera motion required order create expected motion flow field 
algorithm hough transform develop coarse representation motion field motion field quantized directions transform accumulates flows background independently moving objects assumes background motion dominant contributing factor 
general case algorithm elements transform matrix form feature vector index library canonical motion fields 
canonical motion fields correspond expected flows various translations rotations camera 
optimization purposes algorithm implemented vision platform search motion field library assumes flow due forward moving camera 
expected forward motion field construct filter compared original flow field 
flow vectors inconsistent predicted vectors assumed caused motion independent objects 
shows algorithm mapped vision platform 
shows sequence imagery moving van highlighted travels van 
highlighted pixels determined algorithm lie independently moving objects 
algorithm operates real time video imagery rate frames second imagery digitized pixels 
gradient optical flow gradient algorithm computing optical flow implemented tested vision platform 
algorithm developed liu uses third order spatio temporal derivatives generalized motion model accommodates ex stabilized frames left column vs frames sequence 
cross hairs highlight stability instability image 
translation 
approach spatial temporal derivatives fit single coherent motion model corresponding single object leads linear system multiple motion constraint equations 
goodness image derivatives fit model determines confidence assigned motion estimated linear system 
speed roughly frames second depending window size median filtering order derivatives density output real time implementation depicted 
successive image frames smoothed subsampled pixels 
image derivatives third order obtained applying separable hermite polynomial differentiation filters neighborhood pixel 
produces overdetermined linear system solved squared error lse method 
estimate optical flow pixel obtained 
accuracy efficiency algorithm compared state art optical flow algorithms including horn schunck lucas kanade uras anandan fleet jepson kittler allocation independently moving object functions hardware resources 
compute independent motion filters sparc video compute flow mv overlay video filter independent motion independent motion monitor camera depicted see 
shows accuracy error coordinate efficiency execution time 
dimensional accuracy efficiency ae curves characterize algorithm performance 
curve generated setting parameters algorithm different values 
optical flow correlation methods template window size search window size common parameters 
gradient methods smoothing differentiation filter size common parameter 
complex algorithms may parameters consider 
detecting independently moving objects moving vehicle 
images obtained army traveling cross country approximately kmph mph 
optical flow accuracy extensively researched barron 
uses error measure angle error computed flow ground truth flow quantitative criterion 
efficiency throughput number output frames unit time reciprocal execution time output frame quantitative criterion 
axis represents angle error axis execution time 
results derived running algorithm diverging tree sequence 
point performance diagram corresponds certain parameter setting 
closer performance point origin small error low execution time optical flow hermite polynomial differentiation filters ship frames vme bus processing datacube side processing sun sparc side smoothed subsampled delay second frame rate video loop digitized image real time implementation optical flow algorithm liu diverging tree sequence ter algorithm 
algorithm different parameter settings spans curve usually negative slope 
distance origin ae curve represents algorithm ae performance 
ae curves points seen algorithms fleet jepson may accurate slow algorithms may fast accurate 
algorithm liu hand flexible accurate parameter settings fast settings 
algorithm achieved high efficiency accuracy clever design exploiting vision platform capabilities 
uses real time digitizing convolution image scaling capabilities datacube mv smooth subsample input images 
way avoids overwhelmingly huge volume input data sparc time reduces aliasing pre smoothing 
fast floating point operations provided sparc general motion modeling differentiation filtering feasible 
separable filter design contributes efficiency algorithm 

implementations algorithms liu provided barron 
algorithms produce different output density simply project error extrapolation 
liu curve filter size ranges 
curve template size ranges 
execution time algorithms approximate elapsed time running vision platform single mhz board 
performance diagram time seconds frame error degrees horn uras anandan lucas fleet jepson liu algorithm capable handling motion velocities quarter filter size 
extracting small motion 
generally handle pixels frame motion 
implementation depicted successive image frames compute flow 
flow computed point time middle frame acquired 
past frames frames 
throughput frames second latency algorithm times frame latency ms frame normal frame rate plus algorithm computation time ms 
fact transport frames images vme bus limits undesirable latency incurred symmetric filtering algorithm 
bandwidth slowly ship images host images captured live datacube mv 
increase latency allow larger image motions detected 
correlation optical flow real time correlation algorithm computing optical flow developed implemented tested vision platform 
speed frames second running platform configured single mhz images 
currently efficient general purpose optical flow algorithms 
basic idea algorithm subsample image constrain motion velocity quadratic search space reduced linear search time 
temporal matching concept depicted 
algorithm produces quantized flow estimates 
number quantization levels magnitude orientation related range temporal search 
performance mentioned temporal search range frames 
algorithm computational complexity linear temporal search range image size optical flow may computed video rates frames second images temporal search range frames 
template window size affect algorithm computational complexity 
despite algorithm simplicity quantization sufficiently accurate computing time contact robustly 
ms ms ms image image image image image image visualization pixel image moving pixel image optical flow pixels frame 
visualization pixel image moving pixel image optical flow pixels frame 
correlation measure sum absolute differences intensity values corresponding pixels template window 
due dimensional scope matching window algorithm generally suffer aperture problem extreme cases tends resistant random noise 
patch pixel largely overlaps adjacent pixel match strengths displacements adjacent pixels tend similar motion boundaries resultant optical flow field tends relatively smooth requiring additional smoothing steps 
conversely noise gradient flow method result errors basic optical flow measurements due sensitivity numerical differentiation 
fact correlation algorithm winner take nature require calculated match strengths relation whatsoever values theoretically necessary best match value correspond correct motion 
example change illumination frames adversely affect individual match strengths need change best matching pixel shift 
conversely gradient algorithm image intensity constraint equation apply total image intensity remain constant 
robustness sum absolute differences correlation match demonstrated images extremely low texture 
result optical flow measurement density algorithm percent 
real time obstacle avoidance flow divergence real time obstacle avoidance system implemented vision platform 
system uses divergence optical flow field steering control collision detection 
robot lab cm long minutes collision entire system implemented vision platform configured single mhz advantage real time operating system support able improve performance 
dense optical flow estimates calculated real time described section entire wide angle image 
divergence optical flow field calculated control steering collision behavior 
divergence proven sufficient steering past objects detecting imminent collision 
major contribution demonstration simple robust minimal system uses flow derived measures control steering speed avoid collision real time extended periods 
sketches obstacle avoidance system 
video images obtained board uncalibrated camera field view 
robot view camera shown 
camera mounted pan motor 
images subsampled full flow computed half height image 
flow divergence estimated spatio temporal median filters applied reduce momentary fluctuations divergence field 
hazard maps derived divergence field middle row previous steering decision goal direction 
composite hazard map case simply row vector steer robot objects drives goal direction 
temporal concatenation dimensional hazard vectors shown 
active gaze control camera rotationally stabilized reduce magnitude flows image stream 
camera points far away heading saccade gaze anticipated heading 
saccades introduce momentary disturbances flow data temporal median filter effectively eliminates disruptive effects 
divergence data indicate imminent collision ahead robot stops turns away resumes wandering 
inputs body gaze controllers consist driving steering gaze velocities 
path robot appears office chairs seen robot viewpoint trial began 
accumulated composite hazard map shows succession dimensional maps robot control driving trial 
sp wm bg servo prim motors wide angle video 
obstacle avoidance architecture compute flow divergence derive hazard maps divergence goal previous choice compute full optical flow generate steering command detect imminent collision determine steering speed determine gaze control issue steering speed gaze commands apply spatial temporal medians xy xy path robot view office chairs trial hazard map time increasing upward xy path trace begins 
selected heading highlighted path seen veer right back chairs left 
software modules produce consume data various rates interactions unequal cycle times considerable consequences 
flow divergence estimates produced approximately ms hz 
robot accepts speed steering commands hz 
robot velocity cm visual data available cm robot travel steering adjusted cm 
avoid losing valuable data especially time critical impending collision indications behavior controller runs hz evaluating fresh data writing appropriate steering speed commands 
commands single buffered command read robot controller ready new 
systems designed require approximate knowledge robot current motion state 
robust data filters employed ignore momentary noise artifacts result system module interactions 
approach enables modules cooperate delicate synchronization 
image motion long considered fundamental element perception space attempts real world mobility tasks hampered noise brittleness computational complexity 
results demonstrate real time robot vision control achieved careful implementations ordinary computing platforms environments 
similarly extensible framework combine simple robust components manner minimizes requirements tight synchronization 
portable computer vision platform described 
platform implement test fundamental computer vision functionality image flow estimation applications supported capabilities including outdoor surveillance indoor mobility 
platform served focal point bringing components developed separate sites partners project 
systems developed datacube ordinary workstations code readily ported 
platform provides convenience workstation development testing environment rugged portability field unit 
focus integrating platform performing real time field tests 
albus outline theory intelligence ieee transactions systems man cybernetics 
anandan measuring visual motion image sequences ph thesis coins tr university massachusetts amherst ma 
barron fleet beauchemin performance optical flow techniques international journal computer vision vol 
pp 

kittler robust motion analysis proceedings ieee conference computer vision pattern recognition seattle wa pp 

coombs herman hong real time single workstation obstacle avoidance wide field flow divergence nistir gaithersburg md press 
real time quantized optical flow proceedings ieee conference computer architectures machine perception como italy 
real time quantized optical flow appear journal real time imaging special issue real time motion analysis academic press 
calculating time contact real time quantized optical flow nistir gaithersburg md 
multiprocessor system architectures sun microsystems mountain view ca 
davis bajcsy herman nelson move proceedings arpa image understanding workshop monterey ca november 
davis bajcsy herman nelson move detection tracking moving objects autonomous mobile platform proceedings arpa image understanding workshop palm springs ca february 
delta tau users manual version december 
fleet jepson computation component image velocity local phase information international journal computer vision vol 
pp 

horn schunck determining optical flow artificial intelligence vol 
pp 

liu general motion model spatio temporal filters motion implementation ph 
dissertation university maryland september nist ir gaithersburg md march 
liu hong herman chellappa general motion model spatio temporal filters computing optical flow university maryland tr november nist ir gaithersburg md november appear international journal computer vision 
liu hong herman chellappa accuracy vs efficiency trade offs optical flow algorithms proceedings fourth european conference computer vision cambridge england 
lucas kanade iterative image registration technique application stereo vision proceedings darpa image understanding workshop pp 
hardware manual datacube ma october 
morimoto dementhon davies chellappa nelson detection independently moving objects passive video proc 
ieee intelligent vehicles symposium ed detroit mi sept 
nelson qualitative detection motion moving observer international journal computer vision november 
manual solaris product sol rd sun microsystems mountain view ca 
solaris multithreaded programming guide sun microsystems mountain view ca 
trc pan tilt vergence platform specifications transitions research ct 
uras girosi verri torre computational approach motion perception biological cybernetics vol 
pp 

specification vme international trade association scottsdale az october 
solaris description solaris environment sunos svr unix system release operating system 
features environment desirable operating system general purpose real time image processing platform 
environment defines application binary interface abi standard enables developers run applications wide variety hosts 
different abi exist processor architecture including sparc mips risc 
abi lets developer write application executable code run processor architecture 
source code compiled produce executable code processor architecture 
applications developed sparc architectures ported run lower cost personal computers 
environment provides extensive set utilities multiprocessor applications 
core utilities multithreaded kernel supports symmetric multiprocessing smp 
multithreaded process execute instruction streams concurrently individual processors 
smp system processor shares kernel image processor execute kernel instructions simultaneously 
alternatively asymmetric mp system processor run kernel operations simultaneously 
mp systems processor copy operating system major disadvantage increased complexity communications instructions streams 
environment parallelism efficient processors achieved threads 
sunos uses level thread model 
user level threads identified programmer 
threads contain sequences instructions programmer determines may executed parallel 
second level involves interface operating system 
level threads mapped light weight processes lwps 
lwps termed virtual processors scheduled kernel 
programmer rely thread scheduler part thread library handle mapping threads lwps called unbound threads explicitly map threads lwps called bound threads 
threads scheduler maps threads available lwps relative priority threads process 
advantage bounded threads programmer explicitly assign thread physical processor 
done order create optimal processor architecture reflects programmer insight best parallelize algorithm 
second advantage programmer explicitly specify priority bound thread lwp may critical real time application 
scheduling lwps handled kernel 
kernel scheduler fully preemptive supports classes scheduling lwps 
lowest level class called time share ts lwp scheduled fixed time quantum milliseconds switching takes place round robin fashion 
higher level priority system class consists kernel processes 
programmer schedule lwps run system class 
highest priority level scheduling real time class rt 
real time lwps scheduled basis priority time quantum 
lwp infinite time quantum runs terminates blocks preempted higher priority real time process typically result interrupt 
lwp finite time quantum conditions ceases run time quantum expires 
