unu iist international institute software technology unu iist report contract oriented component software development jifeng zhiming liu li march unu iist unu iist reports unu iist united nations university international institute software technology research training centre united nations university unu 
macau founded 
started operations july 
unu iist jointly funded governor macau governments people republic china portugal contribution unu fund 
providing fund macau authorities supply unu iist office premises furniture fellow accommodation 
mission unu iist assist developing countries application development software technology 
unu iist contributes programmatic activities 
advanced development projects software techniques supported tools applied 
research projects new techniques software development investigated 
curriculum development projects courses software technology universities developing countries developed 
university development projects complement curriculum development projects aiming strengthen aspects computer science teaching universities developing countries 
schools courses typically teach advanced software development techniques 
events conferences workshops organised supported unu iist 
dissemination unu iist regularly distributes developing countries information international progress software technology 
fellows young scientists engineers developing countries invited actively participate projects 
doing projects trained 
technical focus unu iist formal methods software development 
unu iist internationally recognised center area formal methods 
software technique universally applicable 
prepared choose complementary techniques projects necessary 
unu iist produces report series 
reports research technical administrative records unu iist activities research development achievements 
reports published conference proceedings journals 
please write unu iist box macau visit unu iist home page www iist unu edu know unu iist report series 
chris george acting director unu iist international institute software technology box macau contract oriented component software development jifeng zhiming liu li approach modelling component software 
describe components specified interface level design level components composed 
user system assembler external point view component provides interface consisting set attributes set provided services set required services 
designer internal point view component consists collection collaborating objects classes realize interface 
verification component verify internal view meets external view 
keywords component composition contract interface inheritance object orientation refinement jifeng senior research fellow unu iist 
professor computer science east china normal university shanghai tong university 
research interests include mathematical theory programming refined methods design techniques mixed software hardware systems 
mail iist unu edu 
liu zhiming research fellow unu iist leave department mathematics computer science university england lecture computer science 
research interests include theory computing systems including sound methods specification verification refinement fault tolerant real time concurrent systems formal techniques oo development 
teaching interests communication concurrency concurrent distributed programming internet security software engineering formal specification design computer systems 
mail liu iis unu edu 
li assistant professor university macau 
research areas interval temporal logic formal specification simulation computer systems formal methods system design implementation 
mail xsl mo copyright unu iist jifeng zhiming liu li contents contents example interface primitive interface 
merge interfaces 
inheritance 
contracts contracts 
merge refinement 
contract inheritance method hiding 
component defining components 
refinement interface hiding composition components 
client server systems discussion report march unu iist box macau components build maintain software systems new idea 
today growing complexity systems forces turn idea practice 
component technologies com corba enterprise javabeans widely far agreement standard technologies designing creating components methods composing 
finding appropriate formal approaches specifying components architectures composing methods component software construction correspondingly challenging 
consider contract oriented approach specification design composition components 
component specification essential possible manage change substitution composition components successfully components properly specified 
specify component important separate different views component 
user external point view component consists set provided services 
provided services form provided interface component 
provided interface defines operations component provides signatures 
specify effects interface operations necessary partially know conceptual state component 
consequently interface specification contains called information model conceptual model 
effect operation op described terms design hoare unifying theories programming precondition post condition 
determines contract component clients service op client ensure pre condition true component guarantee postcondition define contract interface assignment mapping assigns design interface operation 
contract provided interface component taken goal designers component design implement component provided services 
designers may decide services provided components design implementation 
services called required services component consideration 
designer build components provide required services 
components built implemented team designers bought component self cots 
build larger component components verify formally describe required services contracts set interfaces called required interfaces 
required interfaces define required operations signatures 
cases designers component specification required services asked build component provide provided services 
client wants services component interested knowing provided services 
component assemble system assembler needs know specification bother provided required services 
specify design component assigning operation op provided interface program text def op described specification notation 
object oriented notation proposed 
def op calls operations required interface allowed 
notation verify def op refines specification op contract provided report march unu iist box macau example interface 
verifier component needs know contract provided interface contracts required interfaces program text def op operation op provided interface 
sense understand component relation contracts required interfaces contracts provided interface 
contract required interface calculate contract provided interface program text def op op 
assemble system components connect compose components linking methods provided interface component methods required 
check provided interface component contains operations required interface component contract provided interface refinement contract required interface match composition forms component 
provided interface merge provided interfaces required interfaces union required interfaces excluding hiding matched interfaces defining composition interfaces hidden renamed 
model allows multiple inheritance interfaces contracts 
refinement contracts components defined 
illustrating approach take example system 
european research technology development project looking creating parcel localization system open distributed system integrated legacy systems transport logistic companies 
demonstrate logic formalizing component specification 
treatment example show simplicity model advantages separation concerns framework 
introduce system example section 
section define notations interfaces composition interfaces merging interface inheritance 
define notation specification contract interface section 
contract interface defines effect methods interface terms pre post conditions 
composition refinement contracts contract inheritance method hiding defined section 
devote section definition components compositions 
section briefly discusses client server application generally modelled approach 
section concludes discussions 
system illustrate concepts 
example example discussion give description example 
project explores development low cost information infrastructure enable continuous information exact geographic position parcels time 
logistic transportation companies referred carriers able offer additional services customers customer query location status transportation goods 
report march unu iist box macau example system main components mobile logistic server mls exchange point transport unit container trailer freight 
transport units carry parcels 
containers insider containers form hierarchy 
know current location gps satellite positioning system 
goods tracing server gts comprises databases contains mls hierarchies 
keeps track parcels registered system 
gts component integrated legacy systems transport logistic companies 
goods information server gis component interacts customers provides authorized customers current location parcel keeps informed case delivery delays simplicity address integration carrier system arising dependability issues see section 
show component approach modelling different views system 
focus specification interfaces interactions components localization system triggered request localize parcel 
partially specify design components gis gts ideas verification 
stereotypes comp spec interface type introduced describe component specifications interfaces respectively 
uml notation interfaces components describe system architecture 
taken architecture system 
gis gts mls architecture report march unu iist box macau interface shows main components described earlier interfaces component dependencies 
example gis component offers interface provides services requires service component gts interface 
shows legacy system carrier going integrated 
interfaces gis component establish communication customer instance customer enter request find current location parcel 
interface specification component start section definition interfaces 
show finite number interfaces composed 
leads definition interface inheritance 
interfaces just java interfaces information model described attributes 
primitive interface primitive interface collection features feature attribute method op value parameters result parameters 
interface named pair denotes set attributes set methods interface assume attribute names method names taken disjoint sets 
meth denote sets attributes methods respectively 
family interfaces meth denote set methods interfaces primitive interface specified format interface attribute 
am tm method op 
op method op takes type input parameters type output parameters 
assume variables appears set example interfaces gis component establish communication customer instance customer enter request find current location parcel 
report march unu iist box macau interface specification interface described interface attribute set pname set parcel names set cname set customer names owns cname pname owns customer owns loc pname returns location method pname pid cname sid location pname pid cname sid type coordinates represent locations 
description easily shown uml class box interface type stereotype 
merge interfaces case required interface specified specification component number components provides part operations required interface 
need put components provide single interface match required interface 
fact original description provided interface 
merged interfaces 
interfaces composable conditions met 

shared attribute name equipped type interfaces 
share method name assign signature method furthermore possess attribute set op condition restrictive definition refinement contracts allows add attributes interface 
conditions imply components system talk common conceptual model 
bank system example hope making components reconfigurable definition basic concepts customers account money interfaces internally 
tries component designed application specialize generic component special application renaming adding connector component 
report march unu iist box macau interface definition merge composable interfaces finite family composable interfaces 
merge defined df inheritance section deals issue interface inheritance 
motivation interface inheritance component may provide part services needs provided operations quite suitable need 
may component rewriting operations extending operations attributes 
newly provided services may realized component may programmed inherited operations rewriting inherited operations 
component realizes inherited interface design extending interface component changed provided operations design newly added operations overwritten inherited operations 
purpose inheritance reuse extension evolution 
consider simple case interface inherits 
interface 
assume set attributes set methods attribute appears method assigned different signature notation extends represents interface attribute method sets defined df df multiple inheritance denoted form extends defined interface extends set interfaces 
report march unu iist box macau contracts contracts useful way view interface specification contract client interface provider implementation interface client needs interface provider implement meet services promised interface 
contracts give formal definition contract section 
definition specification method interface define alphabet set attributes input output parameters methods 
df df op df op variables record values attributes input parameters activation op variables values corresponding attributes outgoing parameters termination method 
specification method op interface framed design subset called frame op containing variables changed op design describing behaviour method df predicate assumption attributes input parameters method rely activated predicate commitment true execution terminates 
contract defined interface assignment operation specification 
report march unu iist box macau contracts definition contract contract triple init interface function maps method specification init assigns values attributes initial values 
example system contract interface assigns method specification written follows op specification name op operation contract cs interface attr set pname set parcel names set cname set customer names owns cname pname owns owns loc pname loc location init meth pname pid cname sid position location pid sid owns sid pid location loc pid pname pid cname sid pid pid sid owns owns sid pid loc loc pid fact primitive contract specification module modular programming defines behaviour methods interface 
see contracts merged form contract corresponds merge number modules 
term programming primitive contract specifies initialized class object public methods interface 
java specification language contract specified interface meth meth class implements attr att meth df meth main new main provides condition init 
report march unu iist box macau contracts notice description attributes interface taken attributes class need write interface anymore 
merge number contracts set created objects 
merge refinement interfaces merged specifications merged 
meaningfully merged interfaces composable contracts consistent 
definition consistent contracts contracts init consistent 
composable 

init init 
op op op consistent contracts merged form composite contract 
definition merge contracts init finite family consistent contracts 
merge denoted defined df init df init df denotes overriding operator 
op op op op op op op 
notice framing operation apply alphabet merged interface union component interfaces 
definition ensures attributes declared outside accessed methods 
contract refined introducing new attributes new methods data refinement 
precisely definition 
definition contract refinement interfaces 
contract init refined init denoted mapping satisfying report march unu iist box macau contracts 
initial state preserved init init list variables defined list variables 
behaviour methods preserved method op declared declared easy prove refinement relation contracts enjoys properties program refinement 
theorem reflective transitive 

merge family contracts refines contract family 
theorem family consistent contracts refinement relation preserved merge operation contracts 
theorem families consistent contracts 
report march unu iist box macau contracts contract inheritance method hiding interface inherited contract inherited 
definition contract inheritance init contracts 
assume attribute defined redefined notation extends denotes contract extends init init df init init df indicates override definition method refinement relation preserved inheritance 
theorem extends extends extends extends allow hide interface methods contract order offer different services different customers 
definition hiding init contract hm set methods 
notation hm represents contract hm hm init represents mapping restricted domain report march unu iist box macau component theorem hiding operator enjoys properties 

hm 

hm hm 
hm hm hm hm hm hm 
hm hm 
extends hm hm extends hm interfaces allow multiple inheritance contracts 
definition multiple interface inheritance family composable interfaces 
assume attributes defined notation extends represents interface extends init contract init family consistent contracts 
assume attribute defined appears attribute set define extends df extends component section show define components compose components 
report march unu iist box macau component defining components defined basic elements component 
slightly generalize definition contract allow internal methods public methods 
internal methods specification methods contracts specification methods external contract 
definition component component triple generalised contract init set attributes 
set public methods 
rim set private methods 
maps method declared set rim pair program text written specification language alphabet obtained input output parameters method 
denote set methods referenced program text op contained op set composable output interfaces merge methods meth set composable input interfaces merge method set meth contract called required service contract interface provided service 
methods seen holes component specifications implementation component plugged 
provided service component depends required service plugged components 
leads definition semantics component 
definition introduced private methods hide public method hidden public method changed private method 
keep definition valid public method may called op 
introduce private attributes local variables declared program text op 
report march unu iist box macau component definition semantics component component identified binary relation required services corresponding provided services df variable takes arbitrary required service value takes provided service notation denotes provided service init mapping defined required service init recursive equations op op replaces call op corresponding specification 
op df var op op op df var op op df df context notice component empty set input interfaces notation constant semantics closed program definition part specification language proposed 
require object oriented features language design implementation component object oriented 
modular programming paradigm component designed implemented module methods output interfaces programmed procedures functions report march unu iist box macau component defined locally module externally modules 
case external modules component calls methods declared types attribute values parameters methods 
component fact single module artifact contains declared types modules 
object oriented paradigm java component seen class implements interfaces class implements attr public df private op df op op definition language class formed types types parameters methods methods called definition op declared 
component fact package contains definitions 
define program specification form sequence class declarations classdecl 
classdecl class declaration classdecl form class public protect private public command 
protected private 
command method definition composed number primitive commands framed designs high level specification commands java language including calls methods class 
semantics deals visibility dynamic binding recursive method calls 
language expressive specify design component 
adding notation interfaces contracts extended language provides formal model components 
report march unu iist box macau component example define component gis system provide services customers 
component gis output interface attr set pname set parcel names set cname set customer names owns cname pname owns owns loc pname loc returns location init meth pname pid location pid sid owns sid pid call required method location pid pname pid cname sid pid sid pid sid owns owns sid pid deal pid input interface attr set pname set parcel names loc pname loc returns location meth pname pid coordinates location deal pname pid contract init pname pid location pid location loc pid deal pname pid pid loc pid calculate gis cs 
kept attribute loc pname avoid defining state mapping proof refinement 
part example report march unu iist box macau component provide definition component gts implement contract 
declare class parcel id pname location return location specify component gts follows 
component gts ouput interface attr parcels set parcel init parcels meth deal pname pid var pid parcels parcels pname location var parcel find pid location loc define refinement mapping attributes parcel df id parcel loc pid location pid parcel id pid gts 
refinement interface hiding composition components component output input interfaces defined earlier semantics binary relation input services output services required service able check component realizes provided service 
obviously required service component realizes provided service required service refines realize 
way realizes realizes provided service refines 
formalized theorem monotonicity component 
report march unu iist box macau component theorem monotonicity refinement relations contracts contracts respectively 
denotes relational composition 
required services provided services component refinement component required service provides refined services component refined definition 
definition component refinement component refined denoted 


notice upwards closure property monotonicity theorem ensures component provides service required service provide service refined required service 
definition interface hiding component init 
set hi interfaces meth hi set methods hi notation hi denotes component removes methods defined interfaces hi provided service 
hi df hi hi hi df meth hi hi init report march unu iist box macau component semantics hi defined hi df meth hi equations interface hiding 
theorem 

hi hi 
hi hi hi hi hi hi ready define components connected networks components 
definition network component init general contracts components 
assume 
composition defined merge contracts output interfaces input interfaces remove input interfaces component matched output interfaces def df df behaviour network defined df meth meth meth meth meth meth meth meth report march unu iist box macau client server systems definition allows output interface part provided service component shared number components 
hiding internalize part provided service component component 
example definition compose gis gts composite component 
gis gts 
gis gts required interface consider relation gts components system closed system provides services defined contract cs customer service interface 
complete system add required service interface get new location parcel mobile logistic server component mls 
alternatively add provided interface needed required interface mobile logistic server component mls update location parcel 
client server systems client server systems seen applications component software 
architecture system organized layered structure illustrated 
top layers clients require services components second layer 
components middle layer provide services components layer requires services layer 
components bottom basic server components provide services components bottom layer 
components layer disjoint provided interfaces 
layers organized interface dependencies 
system composition components interfaces hidden df nkn denotes linked interfaces 
construction system top def df 
df nkn resulting component iij linked interfaces 
report march unu iist box macau discussion pn pn client server systems system construction bottom def nkn kn df kn 
df discussion proposed model software components defined composition refinement components 
model separate different views component 
different views specified different levels abstraction 
component constructed provide certain services services specified terms component interface contract 
specification taken requirement specification component 
designer component design implement component satisfy requirement specification 
design may provided services existing components 
design specified object oriented specification notation developed supports step wise construction component 
verifier component take design specification specification required interfaces verify design correct respect requirement specification 
composing components verified check provided service component specification required service march unu iist box macau discussion semantically 
syntactic check check signature interface methods 
semantic check ensure provided service component ensure service required component 
check pre post conditions specification services 
points discussion model components simplified version sense protocols interfaces described 
keep definition simpler task checking easier 
possible ways address problem protocols 
introduce control state variables interface contracts components 
allow define contract state machine statechart 
components composed deadlock freedom needs verified easy task 
second addition state information add csp specification order interface methods contract 
matching protocols different components checked deadlock problem needs looked 
know model csp trivial task 
may adopt compromise approach 
provide protocol provided interface protocol required interface independently 
protocol described terms regular language method names interface 
check provided interface required interface check provided interface protocol subset required interface protocol terms regular languages defined protocols 
procedure automated 
model components allow mutual dependency components theory check live lock design specifications components experts formal methods aware difficult practice 
suggest designers try avoid mutual dependencies component software development 
introduced special concepts connectors 
treat components may special components 
interesting important define special class components connectors study properties uses 
include 
communication components modelled synchronous method invocation 
asynchronous communication achieved introducing buffer components 
includes applying framework bigger case studies combine uml provide formalization corba com 
looking adding non functional features timing resources interfaces components 
related take views components component provides requires components 
define notation specification provided required services contracts 
concept contracts similar meyer 
purpose meyer contracts support development object methods context client server relationships objects 
contracts support specification development services components 
component object approach supports objectoriented module oriented development 
opinion development meyer notion contracts 
report march unu iist box macau notion contract model collaboration behavioural relationships objects 
approach provide separation specification contract interface specification behaviour component realizes contract 
notion contract emerged model action systems 
promotes separation specification agent system need coordinated achieve required global behaviour system 
architectural components explored 
notion contracts defined notation specification 
contract describes coordinations number partners components objects 
main purpose support system architectural evolution deal changes business rules system application 
contracts specifies services components treat interaction coordinations part implementation components 
aim support construction software components component software systems 
interesting investigate notions contracts combined provide better support system construction evolution 
formal model components notions provided required interfaces 
aim required interface support specification design implementation component set provided services 
clear notion contracts interfaces provided interface method component specified terms method calls methods required interface 
specification provided services reveals unnecessary implementation details 
simple relational logic differs modal logic 
allen garlan 
formal basis architectural connection 
acm transactions software engineering methodology 
andrade fiadeiro 
contracts supporting architectural evolution 
andrade fiadeiro 
interconnecting objects contracts 
france rumpe editors uml standard lncs 
springer verlag 
back petre 
formalizing uml cases refinement calculus 
technical report turku centre computer science turku finland may 
daniels 
uml components 
component software series 
addison wesley 
souza wills 
objects components framework uml catalysis approach 
addison wesley 

logic formalization component specification 
journal object technology 
liu li 
relational model object oriented programming 
technical report unu iist report unu iist box macau march 
report march unu iist box macau liu li 
refinement calculus object oriented systems 
appear keynote talk august alberta canada 

component software engineering putting pieces 
addison wesley 
helm holland 
contracts specifying behavioral compositions object oriented systems 
proc 
oopsla ecoop pages 
acm 
hoare 
unifying theories programming 
prentice hall international 
fiadeiro lopes 
semantics architectural connectors 
bidoit dauchet editors proc 
tapsoft lncs 
springer verlag 
liu li 
transition systems unify uml models 
technical report dept maths computer science university leicester england may 
liu li chen 
relational model object oriented analysis 
technical report unu iist unu iist box macau july 
meyer 
applying design contract 
ieee computer may 
selic 
uml modelling complex real time systems 
mueller bestavros editors language compilers tools embedded systems volume lecture notes computer science pages 
springer 
szyperski 
component software object oriented programming 
addison wesley 
report march unu iist box macau 
