statecharts requirements specification simple possible rich needed statecharts evolved widely instrument specifying system behavior interaction 
variants statecharts developed example harel original statecharts uml state machines derived concepts state machines rsml 
investigate statechart variant requirements models look want simple possible easy understand suited expressing requirements models 
categories subject descriptors software engineering requirements specifications languages logics meanings programs specifying verifying reasoning programs specification techniques general terms languages theory keywords statecharts statechart semantics requirements engineering 
statecharts widespread successful means specifying system behavior user system interaction :10.1.1.20.461
original inception david harel variants statecharts introduced attempts underpin intuitive meaning statecharts precise semantics 
harel published different versions statechart semantics example 
uml adopted statecharts semantics differ martin institut informatik universit rich ch zurich switzerland ifi unizh ch harel points 
definition state machines behavior omg definition uml vague incomplete points 
von der formalized uml statecharts 
leveson heimdahl variant statecharts creating requirements language rsml 
demonstrated statecharts specifying integrating scenarios defined semantics statecharts uses approach 
von der done comprehensive comparison statechart variants existing 
examine distinguishing features approaches discuss needed useful statecharts requirements specification 
course model kinds requirements statecharts 
naturally statechart models concentrate requirements concerning dynamic system behavior interaction 
models model aspects data functionality expect statechart models aspect models fit smooth defined way 
goal arrive statechart concepts semantics small intuitive easy understand suitable specifying requirements system behavior user system interaction 
concretely goals follows ease understanding simple possible avoid counter intuitive behavior avoid global coupling enable modularity local understanding 
suitability requirements engineering typical behavioral interaction requirements expressible reasonable effort statechart models models data functionality smoothly fit state state transition explosion avoided 

examining essential fea tures existing statechart variants section assess concepts semantics features existing statechart variants relevant requirements models 
proceedings icse international workshop scenarios state machines models algorithms tools orlando may 
hierarchical states orthogonal states 
core features statecharts master state state transition explosion problem state machines usable practical settings 
statechart variant 
single event assumption 
statechart semantics employ called single event assumption meaning external event may happen point time 
quite reasonable assumption point time concept anyway 
observe concurrent events reality know really happened concurrently smallest observable time interval finite greater zero 
arbitrarily serialize concurrent events losing distorting essential information 
hand single event assumption simplifies definition statechart semantics quite useful feature 
broadcasting events 
classic statecharts event broadcasting 
simple convenient small models turn nightmare large ones results global coupling components 
uml quite unspecific issue way events transported source event queues state machines take effect undefined 
state machine dispatched event broadcast 
rsml uses component model broadcasting happens components components communicate channels 
uml rt proposal find level scheme event propagation capsule events broadcast event propagation capsule asynchronous requires explicit connections 
software engineering viewpoint level scheme uses broadcasting local level clearly better global broadcasting 
reduces coupling events visible components take effect 
source event lies far away model component produces effect channels provide information event comes 
synchronous event processing 
classic statecharts employ synchronous event processing 
means state machine immediately reacts external event state transitions processing events triggered state transitions instantaneously zero time 
particular reactions external event completed external event happen fulfilling single event assumption see 
uml queues events immediately reacting 
event dequeued processed synchronously 
synchronous event processing may nice formal properties comes bunch semantic problems see may lead counter intuitive behavior 
example expect event leads states depending treat cascading events 
harel statechart semantics event non deterministically leads clearly counter intuitive 
quasi synchronous event processing timing scheme proposed gets rid problems 
scheme 
event processing example takes time time intervals infinitesimally short 
basically works follows event happens transitions enabled having source state currently active taken 
source states triggered transitions left immediately 
time interval destination states entered 
actions triggered transitions executed 
transition execution follows sequence actions specified 
transition taken concurrently order transitions nondeterministic 
action generates event event processed completely action taken 
example consider statechart 
suppose actions generate events currently states event happens time te quasi synchronous event processing works follows happens left left entered entered produced produced produced left entered produced produced 
external event happens time holds 
means execution time infinitesimally short 
alternatively produced prior order concurrent transitions processed non deterministic 
powerful intuitive abstraction requirements engineering models things take time happen sequence neglect actual implementation dependent duration 
kinds actions 
harel statecharts quite simple action scheme actions triggered state transitions synchronously zero time 
uml hand introduced elaborate action scheme distinguishing entry actions triggered completed prior entering state exit actions triggered exiting state completed proceeding state actions executed system particular state 
modeling requirements suffices kinds actions triggered completed state transition executed system particular state 
having kinds employ simple powerful action triggering system see section 

inter level transition problem statechart inter level transitions 
equivalent statechart inter level transitions 
statechart compositional viewed composition black box components 
event queues 
uml event queues concept omitted requirements models yielding simpler event semantics 
history 
harel uml statecharts provide history mechanism allows easily re entering substate statechart active statechart left 
specifying dialogs may attractive feature 
seen requirements models crucially needed history mechanism 
hand incurs cost terms comprehensibility simplicity semantics 
inter level entry exit transitions 
statechart variants transition may directly enter exit nested substate statechart crossing nesting layers 
convenient model writer bad model readers maintainers breaks abstraction comes nesting statecharts 
bad constructing large models components hinders prevents composition statecharts 
urgent need inter level transitions replaced set layer conforming ones 
state transition trigger conditions 
harel uml statecharts events guard predicates controlling triggering transition 
usually trigger conditions triggered actions written annotations state transition arrows cf 
figures 
notation quickly breaks comes complex triggering conditions 
rsml introduced tables fact just decision tables representing complex trigger conditions clear comprehensible way practical models need trigger single event decision table overkill 
hand complex conditions easier comprehend written separately tabular form 
treating prioritizing competing state transitions 
active state transition triggered event statechart semantics decide transition take 
simplest semantics take random decision 
frequently adequate 
alternatively define hierarchy rules inner level example define transition priorities explicitly 
states data 
major statechart variants model state system exclusively states variables 
variables may written statechart actions value may evaluated state transition conditions 
variables pragmatic way reduce number required states 
allows modeler express essence behavior interactions states system memory modeled variables 
variables straightforward way integrating statecharts models oriented data functions objects 
requirements models express aspects need variables domains 
variables care variables breaks abstraction leads global coupling components 
integrating statecharts models 
existing statechart variants solve problem integrating statechart disjunction events obvious may wonder event conjunction works single event assumption conjunction events true 
model variables see subsection states data frequently want specify events happen set variables takes combination values 
expressed conjunctive predicate example mode operational cruising speed 
point time predicate true event generated 
possible define conjunction event happening predicate true trigger 
table basically disjunctive collection conjunctive predicates 
models function data object oriented models convincingly 
harel models behavior functionality separate models decomposition hierarchy 
models communicate variables invocation operations 
separately modeled behavior hierarchy allows specification behavior levels global behavior detailed local behavior strong focus aspect separation 
approach quite weak considering aspect integration 
uml hand considers statecharts auxiliary models embedded specification classifiers order describe internal behavior 
uml integrates models classifier behavior easy model local behavior 
uml true composition components composite higher level abstraction components see awkward specify global behavior uml 
uml rt proposal room uml rt derived hierarchical composition components components called capsules uml rt 
uml rt way simple 
uml profile eventually mapped ordinary uml concepts 
inherits problems plague uml example complexity precise semantics difficulty specifying global behavior 
simple integration objects behavior 
object decomposition hierarchy serves backbone system model 
objects may viewed composite states may refined pure statecharts elementary levels 
object hierarchy forms statechart hierarchy time allows model behavior interaction place level abstraction expressed best 

recommendation require ments modeling oriented statechart variant findings section considering goals stated propose statechart structure semantics modeling functional requirements specifications 
basic features hierarchical orthogonal states single event assumption 
quite obviously constituent features statecharts serious statechart variant 
state transition syntax notations state transition triggers inter level transitions history 
discussed section sense notations state transitions 
simple event action pairs keep original notation event action attached arrow denotes state transition 
complex triggering conditions written tabular form disjunctive columns conjunctive rows analogous tables rsml 
notation allows formulation state transition guards easy straightforward way 
inter level transitions forbidden break abstraction statechart composition hard impossible 
history omitted add value requirements modeling comparison complexity adds 
event processing level distribution quasi synchronous event processing quasi synchronous asynchronous actions event queues simple prioritization scheme competing transitions 
local level broadcasting events simple powerful 
global level breaks modularity due global coupling bad 
follow level concept rsml object events broadcast synchronously 
object transmitted explicitly channels 
transmission asynchronous 
quasi synchronous event processing intuitive takes time reality expressing requirements need care actual duration 
furthermore avoids semantic problems come traditional synchronous event processing 
concept action processing aligned concept event processing distinguish quasi synchronous actions asynchronous actions 
quasi synchronous action runs completion infinitesimally short time 
quasi synchronous action triggered state transition runs completion time interval transition 
asynchronous action triggered just started runs asynchronously 
completion asynchronous action sensed completion event 
leaving state terminates asynchronous actions triggered entering state completed 
event queues normally needed modeling requirements omit 
rare cases event queue modeled modeled explicitly 
problem non determinism event triggers competing transitions solved simple priority scheme may overridden explicitly set priorities default innermost competing transitions taken 
competing transitions hierarchical level behavior non deterministic 
scheme imposed explicitly adding priorities transitions 
integration integration statechart object hierarchies 
nearly requirements model need combination object model model behavior interaction 
employ concept object decomposition hierarchy object regarded state 
object may comprise objects states 
states may refined statecharts 
syntax object composition logically composing states statecharts semantics entering exiting objects triggered events states statecharts 
integration statecharts object hierarchy helps solve problems broadcasting referencing variables 
event received object broadcast elements contained neighbor receives event explicitly sent channel 
object structure yields natural scoping structure names names visible inside vice versa 
objects may export names order visible outside 
trigger conditions actions refer variables visible avoiding global coupling enforcing modularity 
gives rough idea model requirements integrated object statechart model 
component larger model describes requirements heating control system 
object high level modes 
contains data object settings behavioral object controller scenario 
component indicated dots name may refined statechart 
embedding scenario object express belongs specification 
receives events asynchronously channel object 
events broadcast 
settings data object having explicitly modeled state 
contains variables holding current default temperature settings operations current temp read values variables 
note variable operation definitions modeled graphically 
object controller refined statechart parallel threads transitions modeled tabular form 
controller contains variable 
value evaluated transition table specifies state transitions init modifying monitoring modifying 
basically table says local control comparison value determines radiator valve opened closed 
controller uses default temperature value obtained settings 
table acts guard equal desired value obtained settings column table evaluates true transition triggered 
settings controller reading 
init modifying monitoring local control local control 
example integrated object statechart hierarchy showing room control requirements heating control system note dashed lines separating orthogonal statecharts 
states objects linked transition arrow considered orthogonal 
modifying modifying reading monitoring reading reading init monitoring modifying settings settings settings settings send open send close 
transition tables state transitions object controller 
tate hart variant achieve goals stated 
considerably simpler important existing variants harel statecharts uml state machines 
quasi synchronous paradigm intuitive avoids counter intuitive behavior 
supports basic software engineering principles hierarchical object structure scoping names limited broadcast avoids global coupling fosters modularity local understanding 
forbidding inter level transitions statecharts compositional contributes modularity 
experience requirements models claim powerful expressive modeling typical behavioral interaction requirements easy convenient way 
integrates statecharts hierarchical object model 
modeling framework statechart models models interaction behavior functionality data fit smooth defined way 
possibility variables avoids state explosion 
proposal empirically validated remember position 
motivation evidence stem personal experience general software engineering requirements engineering principles 
concentrated requirements models 
applicability usability proposed statechart variant purposes particular architecture detailed design remains investigated 


integrated formal model scenarios statecharts 
sch fer botella 
eds software engineering esec 
berlin springer 



problems deficiencies uml requirements specification language 
proceedings tenth international workshop software specification design 
san diego 

xia 
approach object oriented modeling software 
dittrich norrie eds advanced information systems engineering proceedings caise 
berlin springer 

harel 

statecharts visual formalism complex systems 
science computer programming 

harel naamad 

statemate semantics statecharts 
acm transactions software engineering methodology 

harel 

executable object modeling statecharts 
ieee computer 

leveson heimdahl hildreth reese 

requirements specification process control sys tems 
ieee transactions software engineering 

omg 
omg unified modeling language specification version 
omg document ad 
ftp ftp omg org pub docs ad pdf selic ward 

real time object oriented modeling 
new york john wiley sons 
selic rumbaugh 

uml modeling complex real time systems 
white rational software 
www rational com media whitepapers pdf von der 

comparison statechart variants 
langmaack 
de roever eds formal techniques real time fault tolerant systems 
berlin springer 

von der 

formalization uml statecharts 
gogolla eds uml unified modeling language modeling languages concepts tools 
berlin springer 

