pddl modelling continuous time dependent effects adoption common formalism describing planning domains fosters far greater reuse research allows direct comparison systems approaches supports faster progress field 
common formalism compromise expressive power development strongly driven potential applications progress basic research encourages development understood foundations 
role common formalism communication medium exchange demands provided clear semantics 
describes extensions pddl rd international planning competition support modelling continuous time dependent effects illustrates play critical role modelling real domains 
describes pddl significant extension pddl intended support representation deterministic real time problem domains involving resources 
pddl supports modelling durative actions metric quantities aips planning competition 
comprises core drawn mcdermott pddl mcdermott aips planning competition committee mcdermott supplemented numeric durative action extensions fox long 
pddl limited discrete modelling time 
time points identified plan associated start points actions selected planner 
language represent exogenous events limited utility modelling realistic problems activity constrained factors outside planner control 
important contribution pddl ability model predictable exogenous events 
enables planner reason consequences certain execution failures plan avoid exploit consequences actions brought maria fox derek long university durham uk emails maria fox dur ac uk long dur ac uk world 
example event instrument malfunctioning occur temperature satellite drops threshold 
planner plan avoid happening ensuring maintains temperature threshold charged battery 
may involve advance planning ensure battery adequately charged heat satellite entire period sunlight 
pddl powerful model domains containing discrete continuous behaviours 
key extension pddl provides ability express temporal behaviour terms initiation termination processes act numeric components states 
concurrent processes interact resulting continuous change 
logical state changes effected instantaneous initiation termination activities marking points active processes 
pddl supports modelling situations pddl insufficiently expressive capture important aspects time critical concurrent behaviours 
discuss features pddl demonstrate modelling situations continuous change 
compare operator centric view pddl related modelling action change explain advantages view planning 
modelling continuous time pddl numerically varying quantities time 
objective able model continuous processes arise planning problems 
agent able interact continuously changing quantities plan date information values 
model time pddl real valued continuous 
researchers addressed problem modelling time numeric quantities discretized way bacchus kabanza smith weld :10.1.1.3.2139
basic idea add value action specification indicating duration action 
example action rover driving waypoints associated duration say minutes asso process increasing process increasing process increasing interactions actions events 
action event indicated numeric precondition constant increasing influence active process 
ciated energy consumption 
difficulty immediately arises describing effect energy consumption energy level rover 
discretized effects necessary step function model energy consumption 
step function applied start action execution energy level appear lower duration action applied energy level appear higher 
case concurrent actions depend energy level forced consult inaccurate value leading possibly flawed behaviour 
safe way avoid problem adopt conservative requirement energy level undefined execution action forcing actions access value sequenced move 
action associated duration action effect duration intervention planner 
prevents modelling effects occur consequence action initiating process needs explicitly terminated 
realistic situations environment brings change consequence unintended activities executive 
example sinks overflow water source left open shanahan soup spill tilted far direction sufficient compensating tilt side gelfond lifschitz 
enable correct modelling situations supplemented pddl additional modelling components processes events 
pddl pddl precedents non durative actions instantaneous effects result change logical state domain 
change modelled deterministic planner perfect knowledge action outcomes 
course simplification real world behaviour classical assumption pddl 
grounded remove quantifiers conditional effects action semantics supplied straightforward mappings finite transition systems 
actions numeric pre post conditions consult modify nu variables 
actions events modelled instantaneous state transition functions numeric pre postconditions 
distinguished actions fact planner select development plan 
enables change domain modelled means transition system transitions perform mappings states actions events whilst model continuous numeric change 
pddl domains modelled hybrid automata providing simple clean semantic basis language 
actions events initiate execution processes run time 
process maintains logical aspects state whilst modifying numeric aspects state time passes 
processes terminated deliberate action executive environment 
events control executive role plan signal occurrence predictable exogenous events 
example foreseeable event triggered happen absolute time 
events consequences initiated actions event sink overflowing soup bowl spilling instrument exposed sunlight rover sun lit occur preconditions satisfied period time processes active 
hybrid automata theory distinction actions control executive events control world 
planning key difference matter plan executive executing events take priority actions enabled state satisfies preconditions action 
shows conflicts actions events resolved interpretation pddl plans 
crucial detail semantics ensures preconditions event satisfied event transition executed 
gives rise questions concerning relationship actions events 
depicts situations considered action event conflict 
max data stored max data stored actual profile continuous constant rate record downlink record time record link link time step function model late consumption late release storage step function model early release early consumption storage discrete models continuous behaviours fail adequately account concurrent interactions 
part consider action ill defined relies executive able apply action precise point time precondition true instantaneously exploit require capacity measure time arbitrary degree accuracy 
argue executive access level precision world able synchronize activity precisely 
part defined occur 
plan includes timed execute moment valid provided order fact occur affect outcome orderings result state reached 
part conflict applicable instant 
note events preconditions precisely synchronized world control executive world capacity respond situations arbitrary precision 
processes events distinguished fact numeric post conditions events timedependent whilst process 
process terminated action event occurs world pan boiling dry vehicle running fuel 
processes events means activities resulting change occuring time modelled pddl part structure consisting point initiation process point termination 
points initiation termination points application actions events points effects active processes cause numeric values reach critical thresholds 
refer model 
pddl supplies additional expressive power earlier pddl variants including pddl 
primary tion ability model occurrence events produced environment direct consequences executive action 
possible model situations lie outside capabilities expressive languages 
particular possible model domains events world controls exploited planner achieve desired effect 
processes events durative actions examples described section demonstrate need main modelling components pddl durative actions flexible durations events processes 
refer actions durations determined planner flexible durative actions 
components support modelling continuous change flexible durative actions encapsulate change period time quantity changing point terminate predicted planner change control planner 
events required changes triggered lie outside control planner planner need plan avoid 
processes required event initiates period change 
examples motivating describing fragments pddl successfully capture intended behaviours 
parts hybrid automata model descriptions order provide semantic intuitions 
detailed bnf description pddl available fox long 
modelling data downlink satellite domain satellite observation scheduling domain important features downlink opportunities coincide windows time satellite communication ground station 
times windows open close computed information orbit satellite positions ground stations 
opening times predicted planner opportunity downlink data wants maximise amount data collected transmitted finite amount storage space board 
purpose example demonstrate necessary ability model continuous change 
suppose behaviour board storage medium abstracted level reading writing store treated happening concurrently 
situation possible satellite observations downlink stored data concurrently observation window overlaps part downlink window 
sight appear storage downlink data situation just described modelled durative actions step function effects 
shows records performed concurrently accessing data store maximum capacity 
seen step function effects impossible true status storage device correctly modelled 
storage capacity device exceeded point step function applied 
equally data recorded 
reason difficulty recording data really continuously affecting amount stored data way tightly interacts 
planner determine point storage capacity exceeded plan halt recording process consequence occurs 
order necessary model recording action durative action duration determined time takes desired observation 
action terminates invariant condition capacity exceeded violated 
similarly action models data flexible duration determined data transmit 
actions affect amount data stored way determined rate storage transmission executed concurrently 
point execution amount data stored amount far transmitted computed known values 
shows durative actions modelled 
special literal denote time period action executing 
possible access arbitrary time points execution interval 
durative action observe parameters recorder instrument observation duration duration condition start targetted targetted data capacity effect increase data durative action downlink parameters recorder duration duration condition start data effect increase decrease data durative actions encoding continuous behaviours recording data 
maintaining satellite operating temperatures recording example possible model continuous behaviour durative actions durations expressed duration inequalities 
actual duration action instance computed variables values predicted advance point storage tape filled capacity tape amount data holds start action rate data stored 
examples periods continuous change bounded advance 
orbit satellite takes sun begins cool continuous rate 
cooling period battery power keep warm prevent instruments malfunctioning 
temperature satellite changes continuously result interaction cooling warming processes 
battery runs charge point satellite cool point reached instruments malfunction 
critical point brought event triggers temperature reaches critical threshold 
cooling satellite triggered event occurs satellite removed heat sources 
event turn triggers process cooling process continues long satellite remains cold 
cooling process operation temperature satellite falling events may triggered thresholds passed 
possible model processes autonomously triggered events durative action framework 
planner may know care know extent processes active 
may able plan counter cooling effects example battery power 
important reason cooling process modelled durative action planner control choose action heat parameters satellite precondition energy effect process cooling parameters satellite precondition effect decrease temperature temperature event freeze parameters satellite instrument precondition functional onboard temperature effect functional process warming parameters satellite precondition energy effect increase temperature decrease energy fragment satellite domain encoding heating cooling effects 
expression temperature indicates cooling effect due radiation written explicitly complete encoding 
corresponding heating process occurs due radiation sun satellite shade 
cooling effect 
satellite physical nature world 
planner plan counter effect ensuring battery charged sufficiently heat satellite period cold demonstrating difference processes triggered actions processes triggered events 
planner control long operate triggered actions encapsulated flexible durative actions 
planner may know care long autonomously triggered process triggered events modelled differently 
shows pddl description cooling heating example 
literal denote time period process instance runs 
separate continuous period preconditions process satisfied duration value denoted process instance 
seen heating action offsets effects cooling process affecting time taken reach critical threshold 
planning store charge prior entering cold region planner avoid critical threshold reached 
modelling continuous recharging process recharging situation similar detail cooling heating example described 
robot enters sunlight recharging process begins triggered event arriving sun 
planner need care long recharging process continues provided charge available robot activities completed 
driving digging activities action activate charger parameters rover precondition sun charge capacity effect charging process charging parameters rover precondition charge capacity sun charging effect increase charge charge rate event charging parameters rover precondition charge capacity sun effect charging fragment rover domain showing recharging process initiating action concluding event 
consume charge resulting interacting increasing decreasing effects charge activities place sun 
planner plan exploit charging effect sunlight dictate long charging process 
difference example cooling example reasonable charging effect modelled durative action charging effect desirable planner choose 
fact charging sun controlled planner happens positive effect planner exploit 
furthermore durative action necessitate identifying upper bound time charging take place 
reasonable upper bound suggested charge capacity fact potential continue charging long robot sun long robot remains sunlight charging resumes soon stored charge depleted 
modelling charging process accurate durative actions world responsible length charging period interaction charging charge consumption 
details seen 
plan metrics important extension introduced pddl available pddl optional field description problems enable specification plan metrics 
plan metrics specify benefit planner basis plan evaluated particular problem 
initial goal states yield entirely different optimal plans different plan metrics 
metric evaluates satellite observation plan amount data successfully 
metric maximize expression value incremented amount data transmitted time operation completed plan 
ability encode metrics possible plans evaluated realistic notions quality sequential length 
length coarse measure quality take account cost utility specific actions 
enriched descriptive power evaluation plans crucial extension practical planners case real plans evaluated solely number actions contain 
semantics domain models traditional semantics planning languages rests state transition models natural consider temporal metric extensions finite automata foundation planning language extensions 
theory hybrid automata henzinger gupta jagadeesan henzinger raskin focus interest model checking community years provides ideal formal basis development semantics pddl 
examination theory revealed issues considered development pddl considered important cases resolved research done field 
main contribution develop language succinct encodings hybrid automata form directed planning 
hope formal semantics properties practical modelchecking techniques results hybrid automata theory able exploited planning community addressing problem planning discrete continuous planning domains 
developed semantics pddl means mapping hybrid automata effectively demonstrating succinct encoding domain pddl construct explicit hybrid automaton model 
depicts fragment hybrid automaton model rover recharging domain 
example variable charge represents charge level rover recharge rate represents rate recharging 
variable dt charge represents rate change charge charge represents value charge discrete change 
control mode rover sun rover charge rover dt rover charge unchanging rover fully charged 
activate charger control switch causes rover enter new control mode rover charging level charge changing rate recharging time 
mode rover sun rover charge rover dt sunrise event time dawn activate charger rover dark rover charge rover dt fully charged event charge rover capacity rover rover charging rover sun rover charge rover recharge rate rover dt sunset event time fragment rover domain modelled hybrid automaton maintained charge level capacity rover constraint invariant condition rover sun 
sun goes rover fully charged charging 
depicts state transition semantics cooling heating example shown 
related representation reasoning statements time temporal extent propositions long subject research ai including planning research allen mcdermott sandewall kowalski sergot ghallab muscettola bacchus kabanza :10.1.1.3.2139
important issues raised extension pddl handle temporal features course examined researchers example shanahan continuous change event calculus shanahan shoham shoham reichgelt reichgelt temporal reasoning non reified temporal systems bacchus tenenberg 
vila vila provides excellent survey temporal reasoning ai 
section briefly review central issues addressed treatment literature set pddl pddl context research temporal logics 
researchers temporal logics considered problems reasoning concurrency continuous change temporal extent 
works focussed problem reasoning change world described arbitrary logical formulae 
need handle complex logical formulae frame problem difficult resolve approach circumscription mccarthy default reasoning reiter typical 
strips assumption provides simple solution frame problem states described atomic formulae 
classical planning assumption states described atomically general heating heating warming sat sat functional instr temperature sat heating due sun dt dt energy sat sat sat dt temperature sat functional instr dt energy sat temperature sat dt dt temperature sat sat sat sat sat functional instr heating due sun heater enter shadow event functional instr dt heat energy sat sat enter shadow event cooling cooling warming dt cooling radiation heat cooling radiation offset heater energy sat sat freeze event freeze event cooling cooling warming sat dt temperature sat sat dt energy sat sat heat dt temperature sat sat energy sat sat dt fragment satellite domain modelled hybrid automaton 
active processes denoted loops states corresponding processes contribute non zero components values derivatives 
actions cause energy draining processes affect derivative energy level 
view modelling change 
simplifying assumption surprisingly expressive 
bench mark domains introduced third international planning competition suggest atomic modelling powerful capture complex domains closely approximate real problems 
temporal reasoning issues confront simplified consequence having simplifying assumption states updated 
remain concerned major issues temporal reasoning concurrency continuous change temporal extent 
development pddl basic decision consider actions events instantaneous state transitions 
allows concentrate truth propositions points intervals 
decision consider actions events instantaneous state transitions similar temporal reasoning researchers shanahan mccarthy hayes mcdermott 
context pddl approach advantage smoothly integrating classical planning view actions state transitions 
remainder section compare pddl extensions propose previous temporal reasoning considering central issues identified 
objective claim extensions improve previous demonstrate implementation solutions problems pddl framework exploitation directly accessible planning way embedded logic accompanying proof theory 
continuous change temporal reasoning frameworks began consideration discrete change extended handle continuous change 
example shanahan shanahan extended event calculus kowalski sergot kowalski sergot enable modelling continuous change 
process extension mirrors situation faced extending pddl system modelling discrete change existed 
interesting compare pddl systems extended event calculus 
sink filling example shanahan describes shanahan discusses issues termination events self termination termination events identification level water sink filling process effect rate change level water sink filled sources simultaneously 
behaviour filling process effects state sink time modelled axioms allow inference engine predict state sink points execution process 
pddl allows representation complex interactions arise sink filled multiple independently controlled water sources means decomposition initiation filling process filling termination water sources turned flooding 
model robust easily accommodates multiple water sources simply modifying rate flow appropriately correctly affects process filling 
contrast shanahan extension event calculus approach require filling process point view logical axiomatisation terminated restarted new rate water source opened closed process simply remains active change rate filling reflected piecewise linear profile depth water sink just shanahan model 
important consequences continuous behaviour triggering events 
shanahan extensions achieved axiomatisation causal relationships events distinguished syntactically actions fact happening axiomatically consequence certain conditions 
believe important planner direct access distinction determines planner consequences expect interactions world 
shanahan add additional axioms capture difference action oriented representation pddl tradition distinction natural convenient 
concurrency opportunity concurrent activities complicates aspects temporal reasoning 
firstly necessary account actions concurrent secondly necessary describe concurrent activities interact effects world 
formalisms points achieved relying underlying logic deliver inconsistency attempt apply incompatible actions simultaneously 
example axioms event calculus yield simultaneous truth falsity fluent incompatible actions applied simultaneously consequently yield inconsistency 
unfortunately recognising inconsistency general undecidable sufficiently expressive language 
pddl adopt solution exploits restricted form action centred formalism defining circumstances actions lead inconsistency mutex rejecting simultaneous application actions 
shanahan shanahan discusses gelfond gelfond lifschitz example soup bowl problem concerns raising soup bowl spilling soup 
actions lift left lift right applied bowl 
applied soup spill argued applied simultaneously bowl raised table soup spills 
model situation shanahan uses explicit assertion interaction lift left lift right actions ensure effect cancelled pair executed simultaneously 
assumption reasoner rely successful simultaneity order exploit effect 
pddl reject solution grounds precise simultaneity outside control physical executive 
pddl supports modelling soup bowl situation way 
lift left lift right independently initiate tilting processes measurable amount time result soup 
provided lift actions occur appropriate tolerance tilting corrected avoided need model cancellation effects 
argue executive execute actions fine non zero tolerance successfully lift bowl 
temporal extent common concern temporal reasoning frameworks discussed detail vila vila van divided instant problem 
problem apparent considering happens moment transition say truth falsity propositional variable 
question addressed proposition true false undefined inconsistently true false instant transition 
clearly possibilities undesirable 
solution adopt combination pragmatic philosophically principled 
pragmatic element choose model actions instantaneous transitions effects instant application 
actions mark points intervals persistence state closed left open right 
ensures intervals nest inconsistency truth values propositions defined 
half open half closed solution adopted shanahan 
plan generation validation semantics provided pddl suggests model checking techniques appropriate hybrid automata provide basis development plan generation algorithms pddl 
explored plan generation problem focussed question validation essential plans verifiable efficiently 
necessary automate validation plans produced complex domains considered reliable feasible non trivial plans checked human experts 
validation problem decidable pddl plans finite validated simply simulation execution 
issue complicated pddl pddl validity plan depends confirming actions applicable states result events processes triggered initial state actions plan 
events processes visible finished plan longer safe assume actions plan chain pddl plans actions rely preconditions established active processes events 
plan validation confirm actions interact active processes events perform successful state transition initial goal states 
ability validate plans crucial practicality language consider restrictions imposed pddl pddl validation decidable 
plan validation decidable domains including discretized continuous durative actions events processes activity encapsulated durative actions explicitly identified plan 
trace induced plan finite checkable 
observe validation problem pddl decidable actions contain duration inequalities 
determining duration inequalities solved completed finished plan validation plan proceed simulation execution case pddl plans 
situation complex pddl 
hybrid automaton semantics powerful allows give meaning far plans validate 
general sequence actions question valid plan undecidable 
events introduced possible create domains entering certain state trigger cascade events number important happenings plan longer finite number actions 
checking cascade terminates action executed undecidable 
solution allow finite number events occur time points insisting separated minimum fixed amount time 
results finite trace decidable validation problem 
place arbitrary constraint domains correctly modelled 
identifying restrictions validation done efficiently focus current research 
pddl enables representation class deterministic mixed discrete continuous domains planning domains 
important modelling realistic problem domains interacting processes arise resulting continuous change terminated direct control planner 
examples situations arises simplification discrete models result failure capture true meaning domain 
semantics language means mapping showing hybrid automata constructed pddl domains 
power hybrid automata means interpret plans efficiently validate currently working identifying conditions efficient validation possible 
development pddl sequence greater expressive power important planning community pddl family languages provided common foundation research effort past decade 
problems involved modelling behaviour mixed discrete continuous systems explored widely adopted models planning community 
pddl begins bridge gap basic research applications oriented planning providing expressive power necessary capture real problems 
allen 
general theory action time 
artificial intelligence 
bacchus kabanza 
temporal logic express search control knowledge planning 
artificial intelligence 
bacchus tenenberg 
temporal logic ai 
artificial intelligence 
fox long 
pddl extension pddl expressing temporal planning domains 
technical report department computer science durham university uk 
available www dur ac uk long competition html 
gelfond lifschitz 
limitations situation calculus 
boyer ed essays honor woody bledsoe 
kluwer academic 

gupta jagadeesan 
robust timed automata 
hart hybrid real time systems lncs 
springer verlag 
henzinger raskin 

robust undecidability timed hybrid systems 
proceedings rd international workshop hybrid systems computation control 
lncs 
springer verlag 
henzinger 
theory hybrid automata 
proceedings th annual symposium computer science 
invited tutorial 
ieee computer society press 
kowalski sergot 
logic calculus events 
new generation computing 
ghallab 
planning sharable resource constraints 
proc 
th international joint conference ai 
morgan kaufmann 
mccarthy hayes 
philosophical problems standpoint artificial intelligence 
meltzer michie eds machine intelligence 
edinburgh university press 

reprinted mcc 
mccarthy 
circumscription form nonmonotonic reasoning 
artificial intelligence 
mcdermott aips planning competition committee 

pddl planning domain definition language 
technical report available www cs yale edu homes dvm 
mcdermott 
temporal logic reasoning processes plans 
cognitive science 
mcdermott 
ai planning systems competition 
ai magazine 
muscettola 
hsts integrating planning scheduling 
zweben fox eds intelligent scheduling 
san mateo ca morgan kaufmann 

reichgelt 
comparison order modal theories time 
jackson reichgelt van harmelen eds logic knowledge representation 
mit press 

reiter 
logic default reasoning 
artificial intelligence 
sandewall 
features fluents representation knowledge dynamical systems volume oxford university press 
shanahan 
representing continuous change event calculus 
proceedings ecai 
shanahan 
event calculus explained 
wooldridge veloso eds artificial intelligence today 
springer lecture notes artificial intelligence 

shoham 
requirements theory change 
new generation computing 
smith weld 
temporal planning mutual exclusion reasoning 
proceedings ijcai stockholm 
van 
logic time 
kluwer academic press dordrecht 
vila 
survey temporal reasoning artificial intelligence 
ai communications 
