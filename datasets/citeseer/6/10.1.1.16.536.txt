design space characterization architecture compiler exploration dirk fischer urgen teich ralph department ee university paderborn str 
paderborn germany fischer teich date de uwe kastens michael department computer science university paderborn paderborn germany uwe de design application specific instruction set processors asips tight interplay architecture compiler utmost importance 
try characterize design space compiler frontend intermediate code optimization backend code generation order architecture compiler exploration search optimal architecture compiler combinations 
described results state development framework called 
categories subject descriptors computer systems organization general modeling computer architecture systems specification methodology software programming languages processors code generation optimization retargetable compilers general terms design 
special application domains digital signal processing require design special instruction set processors asips order fulfill ciency cost design criteria 
code ciency retargetability asip compiler important 
code generation techniques transferable broad class target architectures 
performance architecture directly depends quality associated compiler 
design flow asip results iterative process adaptation architecture compiler 
term architecture compiler exploration denote problem simultaneously optimizing digital hard copies part personal classroom granted fee provided copies distributed prot commercial advantage copies bear notice full citation rst page 
copy republish post servers redistribute lists requires prior specic permission fee 
cases november atlanta georgia usa 
copyright acm 
processor architecture compiler generates code class benchmark programs 
design space explored characterized allowed choices modify processor architecture including computing functional units communication interconnection buses storage elements distributed versus homogeneous register files instruction set possible ways control compiler generate optimal code 
lot done characterize architectural design space done characterize design space retargetable compilers 
approach characterize architecture compiler design space case spanned order number kind intermediate code optimizations choice code generator optimizations schedulers 
scripting language composing intermediate code optimizers fly architecture notation machine markup language specification compiler backends 
methodology part build ing special computer architectures architecture compiler generation project 
structured follows give overview project related 
section introduce retargetable compiler especially frontend including novel strategy intermediate code optimization 
compiler backend design space described subsequent section 
hardware description language 

name project university paderborn aims architecture compiler generation special purpose processors 
software architecture shown fig 

project consists phases development phase architecture entry composition object oriented tool hierarchical graphical entry composition processor architecture architec see developed 
graphical description allows generate mixed behavioral structural profiling code code asm assembler rules opt area handwritten code generated code user input output file tool legend generated tool filename assembler code block block block block block block procedure code generator generator instruction set rules parser code tcl tk user xml code protocol optimization strategy machine model application program asip compiler code rules spec simulator debugger phase filename til code dependence analysis filename ana simulator generator asm compiler phase compiler phase filename vhdl hw design filename xml xml code phase software architecture project tools architecture entry composition automatic simulator generation retargetable compiler generation compiler composer analysis architecture compiler generation 
model processor formalism gurevich state machines asms see details 
precisely asm specification language 
phase architecture simulation generates executable simulator cycle accurate bit true 
generation description compiler translates description code calls gcc compiler compile files 
subsequently resulting object files linked predefined simulation library runtime library 
result interactive simulation debugging environment controlled tcl tk scripts 
phase compiler generation retargeting order allow compiler exploit architectural changes number functional units distributed register files necessary information code generation including instruction scheduling extracted graphical description editor phase 
description compiler features design space major topic 
phase architecture compiler optimization final goal project provide exploration framework joint architecture compiler 
purpose exploration tool ar adds profiling functions asm machine behavior description evaluated simulation responsible explore design space architecture compiler changes developed 
introduced tools phase automatic generation bit true cycle accurate instruction set simulators asips operational model asms 
current state project implementation phase phase 

related design application specific architecture iterative process prototyping order fulfill certain design criteria 
utmost importance formalism architecture specification easily allows changes architecture 
purpose hardware description languages various levels abstraction exist benefits special application areas architectural synthesis hardware simulation program analysis code generation aspect retargetability 
list significant approaches aiming retargetable code generation application specific instruction set processors asips 
note due space limitations list far complete 
hardware description language nml permits concise hierarchical processor descriptions behavioral style 
nml cbc sim framework chess system 
cbc sim consists retargetable code generator cbc instruction set simulator sim 
chess retargetable code generation environment fixed point dsp processors supported simulator tool checkers 
machine description language lisa basis retargetable compiled simulator approach developed rwth aachen germany 
project focuses fast simulator generation existing architectures modeled lisa 
far lisa regard optimization techniques code optimization 
laboratory university california irvine architecture description language expression developed 
expression description architecture retargetable compiler express cycle accurate simulator automatically generated 
tool supported graphical design environment sat 
sgs thompson bell northern research framework consists retargetable code generator instruction set simulator insulin 
machine model mainly consists components instruction set available resources graph denoting interconnects resources 
lcc portable compiler originally developed teaching 
lcc frontend performs stable analysis ansi code supports local optimizations elimination common subexpressions 
global optimizations completely missing 
system designed generate cient vliw code 
fixed basic architecture hpl pd number registers number functional units operation latencies 
parameters machine specified description language 
frontend impact generates optimized intermediate representations programs standard optimizations executed static order 
backend performing instruction scheduling software pipelining register allocation machine dependent optimizations 
system includes cycle accurate simulator providing information execution time resource utilization 
lance university dortmund germany development environment compilers 
system serves basis developing new code generation optimization techniques embedded processors emphasis dsps 
cosy system ace associated compiler experts bv flexible compiler development toolkit vliw code generation 
user builds compiler generator plugging custom tailored modules fixed core 
example cosy includes various frontends java called optimizer engine automatic generation optimizer user specification 
university saarbrucken germany retargetable framework postpass optimizations analyses 
input consists tdl target description language specification target machine assembly program optimized analysed 
focuses code optimization approach integer linear programming techniques code optimization integrated framework 

frontend design space section introduce compiler tool 
explain frontend backend functions 
give brief overview compiler intermediate language til intermediate representation compiler optimization 
code optimizer flexible sense optimization strategies generated fly 
describe set transformations language expressing compiler optimization strategies 
span design space compiler front 
compiler environment retargetable optimizing ansi compiler architectures instruction level parallelism vliw architectures 
designed exploit application inherent parallelism integrate multiple functional units architecture design 
existing application programs portable new architecture necessity user change source code 
illustrates frontend backend functions phases tool 
tool compiler environment introduced 
realistic backends sparc powerpc architecture successfully implemented tool 
want write new parser lcc compiler frontend generate intermediate representation starting point optimization final code generation 
language called til 
interfaces programming languages integrated stringent separation frontend backend 
major advantage capability specifying intermediate code optimizations fly 
simple standard optimizations activated command line options user opportunity control sequence optimizations dedicated scripting language 
design space code optimizations including scripting language described section 
phase retargetable backend til program parsed analyzed 
analysis generates list procedures turn control dependence graph cdg generated 
cdg nodes represent basic blocks directed edges express control dependences basic blocks 
basic block directed acyclic operation program ansi lcc frontend til code fu assignment scheduler register assignment code selection optimizer code vliw description instruction set optimization strategy compiler specification backend frontend java program class registers latency cycles functional units communication type pipeline stages operands number machine model operations interconnections ports buses dependence analysis code architecture dependence graph generated 
nodes represent basic operations edges denote data dependences operations inside basic block 
code generation phase code selection 
uses code generator generator burg 
instruction set architecture rules costs tree parser specified far hand see 
code selection assembler code annotated respective operations 
operands represented unlimited number virtual registers certain classes integer float status registers depending respective operand type 
phase assignment operations functional units 
number type capabilities respective units extracted machine markup language specification machine see section subsequent scheduling build reservation table indicates allocation functional units time step 
scheduler tries find valid schedule strategy list scheduling software pipelining specified respective command line option 
scheduler operates supports local scheduling basic blocks 
due defined interface integration newly defined schedulers cause problems 
assignment physical registers performed phase 
restrictions scheduler drawback generating additional spill code case architecture physical registers 
optimizer optimizer frontend includes library standard code optimization techniques including code motion conditional pruning constant folding copy propagation dead code elimination block fusion loop merging loop unrolling constant propagation elimination tail recursion unreachable code elimination algebraic transformations dead jump elimination faint variable elimination branch swapping 
strategy proc tail rec elimination constant propagation constant folding stable dead code elim stable conditional pruning loop merging stable iter block fusion unreach code elim stable example strategy script conventional compilers user choice set special command line flags access compiler build optimizer 
usually select di erent levels optimization optimization rules execution order statically fixed 
user ability activate preferred optimizations determine order execution script file 
opens new code optimization design space architecture compiler codesign 
fourth phase project tool developed near explores resulting design space automatically generating sets optimization strategy scripts order investigate ect strategies quality generated code 
example optimization script illustrated 
strategy file interpreted optimizer inner body executed sequentially 
listed code optimization routines executed 
note scripting language supports constructs specify iterative applications optimization modules 
inner loop executed long inner optimization routines working intermediate data structure cdg leads change code stable 
major advantage optimizer scripting language described fully optimization strategies number order kind intermediate transformations may generated fly 
altogether set possible strategies specifies design space frontend strategy strategy stmts stmts stmt stmts stmt function cond stmts stmts cond proc stmts cond stmts stmts cond terms terms term terms term identifier identifier op term op function identifier integer identifier grammar specification optimization scripting language compiler 
denotes grammar specification optimization script language 
conditionals evaluated left right sharing level precedence 
identifiers generally case insensitive keywords written upper case 
statements loops behave expected loops apply body procedure current unit turn 
identifiers represent specific optimization transformation function 
operate current procedure stored cdg 
optimizations denoted functions statements inside conditional expressions 
optimization returns value true changes current procedure transformation 
refers integer value specified brackets name optimization 
default value conditional value optimization true default changes current procedure 
stable evaluates true default may omitted changes current procedure iteration enclosing loop body loop case stable part loop condition 
analogous statement instable evaluates true default changes 
order define upper bounds iteration control functions max iter order limit loops iter limitation loops defined 

backend design space backend design space including architecture microprocessor manipulated editor exploration tool see 
briefly discuss main features architecture composer details especially generation code see 
section focus description language describes architecture parameters needed retarget backend 
powerful tool graphical entry high level processor architecture generation specification code machine model language simulator generator language 
shows typical session compose simple architecture 
corresponding specification listed extracts re 
shown simple architecture described provides rich library customizable building blocks register files arithmetic logical units buses memories caches peripheral components embedded microprocessors timers hardware components 
basic elements modeled generic possible parametrized bit width number inputs outputs parameters element manipulated time dialog 
interconnections automatically validated 
example bit widths ports connected output port connected input port 
allows cluster nets define new components way 
architecture represented hierarchically parts design reused designs library generation 
backend generation machine model machine markup language upgrade specification language machine specification language introduced 
xml notation describing architecture parameters required backend modules functional unit assignment scheduling register assignment see 
reason interface rtl architecture due complexity reasons backend compiled retargeted automatically architectural change 
number code header files describing architecture number files enabling access backend modules data structures described header files generated 
description shorter notation introduced sequel allows create files automatically simple compiler see 
design space design space architectural parameters may large general including architecture changes multiple element unique element legend optional element attribute size register operations xor xor xor bus get bus get operand operand name name name name name name bus xor operand operand get bus get xor cycle cycle cycle read read write operands input cycle cycle output units bus bank case bus bank get exe stage unit case unit bank get case name unit bus exe stages unit num memory resources direction name resource bank name name name name num name case bank get bank case unit get fu cycle structure specification instruction set 
prototype intend limit design space possible architecture transformations data path 
design space parameters number types functional units number types register banks including size number read write ports number buses 
limitations able ciently optimize functional unit assignment operation scheduling register allocation including parallel access unit 
demonstrated description simple architecture notation able describe pipelined data paths multiple cycle operations 
notation main constructs notation listed 
important structures explained example simple architecture shown including register files read write port arithmetic units alu alu buses bus bus 
components resource 
notation listed 
illustrates structure 
shown legend specification consists types elements distinguished number appearances attributes optionally associated elements 
give overview basic elements 
resources definition communication ports functional units communication units buses 
resource parameterized name number instances 
register register files memories specified 
memory specification consists annotated number bytes registers belong register bank registers purpose 
register bank specified name number registers 
specification heterogenous register sets easy handle 
registers assigned dedicated register bank 
general name number registers specified automatically case special registers user name respective register assign dedicated position inside register bank 
example special register null located position register bank 
listing architecture instructions 
operations indication operation specific parameters 
latency operand communication directions inout resource requirements operation specified 
operations resource requirements latency communication directions form operation set 
elements handled identically 
element describes resource requirement operation set 
oper 
specification architecture ation phases distinguished input execution output phase 
element phase duplicated operation number source operands target operands stages execution unit 
flag cycle indicates new cycle begins cycle current instruction phase runs parallel previous cycle cycle 
input output element assigned fixed communication unit read resp 
write port communication path constructed dynamically respective resources allocated functions get bus get resp 
get 
possible results function determined element 
architecture functional unit alu consists stages pipeline exe alu exe alu exe alu input operands read parallel source operand passed alu register bank read port bus second operand register bank read port bus 
pipeline stage starts new cycle indicated flag 
result operand written register bank register bank 
total latency operation mul cycles 
units source target operands operation specified operations bound functional units 

introduced design space framework doing architecture compiler explorations asips 
design space compiler frontend spanned set optimizers intermediate code kind number order optimizations specified strategy file 
design space compiler backend results architectural parameters described xml notation called 
target specific backend generated automatically 
far exploration results obtained phase exist 
hope exploration results near 
version simulator generator downloadable 


extensible component state machines language 
gurevich kutter odersky thiele editors international workshop state machines lecture notes computer science lncs pages 
springer 
fischer kutter teich 
hierarchical microprocessor design 
formal methods tools computer science proceedings th international conference computer aided systems theory technology pages las palmas de gran canary islands spain february 
www date de research html 
www ace nl products cosy html 

tool specific machine descriptions 
marwedel goossens editors code generation embedded processors pages 
kluwer academic publishers 
van 
describing instruction set processors nml 
proceedings european design test conference paris france pages march 
fraser hanson 
retargetable compiler design implementation 
addison wesley 
goossens van 
programmable chips consumer electronics telecommunications 
de micheli sami editors hardware software design volume nato asi series applied sciences pages 
kluwer academic publishers 
gurevich 
evolving algebras guide 
borger editor specification validation methods pages oxford university press 
khare ganesh dutt nicolau 
expression language architecture exploration compiler simulator retargetability 
proceedings design automation test europe date 

retargetable postpass optimisation integer linear programming 
verlag saarbrucken october 
phd thesis 
ls www informatik uni dortmund de leupers html 
van goossens 
chess retargetable code generation embedded dsp processors 
marwedel goossens editors code generation embedded processors pages 
kluwer academic publishers 
paulin may 
flexible firmware development environment embedded systems 
marwedel goossens editors code generation embedded processors pages 
kluwer academic publishers 
ho mann meyr 
retargeting compiled simulators digital signal processors machine description language 
proceedings design automation test europe date paris march 

comparison modulo scheduling techniques software pipelining 
proc 
th international conference compiler construction cc volume pages 
lecture notes computer science springer verlag 
proebsting 
burs automata generation 
acm transaction programming languages systems may 
kastens 
vliw compilation techniques superscalar architectures 
koskimies editor proceedings th international conference compiler construction cc number lecture notes computer science pages 
springer march 
teich kutter 
description simulation microprocessor instruction sets asms 
gurevich kutter odersky thiele editors international workshop state machines lecture notes computer science lncs pages 
springer 
teich fischer 
joined architecture compiler design environment asips 
acm sig proceedings international conference compilers architectures synthesis embedded systems cases pages san jose ca november 
www org 

compilation fine grained parallelism code generator intel 
technical report university paderborn october 
internal report tr ri 
