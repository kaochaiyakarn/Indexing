knowledge anytime computation abdel mouaddib iut de lens inria rue de universit lens cedex france mouaddib lens fr shlomo zilberstein computer science department university massachusetts amherst ma shlomo cs umass edu describes real time decisionmaking model combines expressiveness flexibility knowledge systems real time advantages anytime algorithms 
anytime algorithms offer simple means intelligent system trade computation time quality results 
previous attempts develop knowledge anytime algorithms failed produce consistent predictable improvement quality time 
performance profiles describe output quality function time hard exploit flexibility anytime algorithms 
model progressive reasoning hierarchy reasoning units allow gradual improvement decision quality predictable manner 
result important step application knowledge systems time critical domains 
describes real time decision making model combines expressiveness flexibility knowledge systems real time advantages anytime algorithms 
application knowledgebased systems real time domains process control automated navigation systems medical monitoring robotics important problem artificial intelligence 
major difficulty solving problem arises real time domains require continuous operation predictable performance knowledge systems rely time consuming algorithms highly variable performance 
performance variability limited application knowledge systems real time domains 
author continues collaborate inria september address loria bp france 
mail loria fr author provided part na tional science foundation iri 
avoid problems ai community constructed general paradigms anytime algo rithms dean boddy horvitz design garvey lesser various types progressive reasoning techniques winston mouaddib 
approach con struct special architectures particular problem domains guardian system monitoring patient condition intensive care unit hayes roth 
general paradigms anytime algorithms particular increasingly ai applications easy construct monitor efficiently combined produce larger real time systems zilberstein 
success ful control anytime algorithms require performance profiles describe dependency output quality computation time 
knowledge anytime algorithms proposed past exhibit high correlation computation time output quality 
performance profiles constructed anytime algorithms limited 
describe model knowledge progressive reasoning meets requirements behaved anytime algorithm 
model consists rule language associated inference mechanism 
problem solving performed iterative process produces quickly solution refines step step interrupted control mechanism 
section describe problem constructing knowledge anytime algorithms difficulties current solutions problem 
section describes model progressive reasoning detail 
section describe application model collision avoidance system 
conclude summary contribution research directions 
anytime computation knowledge systems section presents advantages anytime algorithms real time decision making 
section de th international joint conference artificial intelligence montreal canada august efforts develop knowledge systems anytime algorithms explains difficulty combining paradigms 
anytime algorithms anytime algorithms algorithms quality improve gradually computation time increases offer tradeoff resource consumption output quality 
quality results produced anytime algorithms measured level certainty accuracy specificity 
performance profile dean boddy probabilistic descrip tion dependency output quality computation time 
zilberstein russell generalized notion capturing dependency input quality conditional performance profiles 
optimally compose real time systems library anytime algorithms zilberstein 
solve composition problem important distinction types anytime algorithms interruptible contract algorithms 
interruptible algorithm interrupted time produce results quality described performance profile 
contract algorithm offers similar trade computation time quality results know total allocation time advance 
interruptible algorithms flexible complicated construct 
zilberstein solved problem general construction produces interruptible version contract algorithm requires small constant penalty 
subsequently set programming tools composition monitoring anytime algorithms developed grass zilberstein 
late anytime algorithms applied real time problems mobile robot navigation medical diagnosis monitoring information gathering model diagnosis 
addition anytime algorithms developed evaluation probabilistic networks dynamic programming 
technique successful area knowledge systems 
real time knowledge systems comprehensive survey real time knowledge systems authors concluded currently ad hoc techniques making system produce response specified time interval 
unfortunately changed survey conducted 
primary method achieving real time performance cases speeding individual algorithms generate manner 
method slows development real time systems inefficient operating dynamic environments 
approach deal problem develop specialized architectures particular domains 
successful example guardian system monitoring patient condition intensive care unit hayes roth 
system inte perceptual capabilities real time reasoning action 
closer approach patient moni system developed ash 
sys tem exhibits anytime behavior accomplished organizing actions hierarchical structure 
result integrated guardian system provide response slower deliberative methods complete tasks 
described extends hierarchical decomposition approach general knowledge systems 
motivation best summarized survey concluded main reasons situation expert systems developers tried apply traditional tools applications suited 
tools specifically built real time monitoring control applications need built 
immediate goal development high performance inference engines guarantee response times 
knowledge anytime computation knowledge systems rely inference engine combined body knowledge 
amount relevant knowledge varies situation situation hard predict problem solving progress function time 
naive implementation progressive reasoning techniques lead behaved anytime algorithms 
section describe attempts construct anytime knowledge systems limitations 
elkan presents abductive strategy dis covering revising plausible plans 
approach candidate plans quickly allowing depend assumptions 
formalism explicit antecedents rules status default conditions 
candidate plans refined incrementally trying justify assumptions depend 
implementation model replaces standard depth exploration strategy prolog iterative deepening version 
result anytime algorithm incremental approximate planning 
pointed earlier hard find performance profile planner 
context particular domain knowledge performance inference engine theorem prover going highly dependent particular query hard predict advance 
difficulty measure quality results meaningful way 
model progressive reasoning addresses successfully issues 
smith liu propose monotone query pro cessing algorithm derives approximate answers directly relational algebra query expressions 
ap proximate relation standard relation subset cartesian product domains partitioned blocks certain set possible set cup 
algorithm assumes information stored database complete input data precise 
incomplete answer query generated time complete processing query relation read accessible 
liu implemented approximate query processing algorithm system called approx liu 
operation associ ated leaf node tree returns segment requested relation time 
approximate relational algebra order evaluate tree 
initially certain set empty approximate object possible set complete range values particular object 
approximate read better approximate answer query produced 
exact answer returned system allowed run completion 
approximate suffers problem elkan approximate planning technique difficulty derive performance profile system due dependence contents database complexity query 
hard evaluate quality approximate relation represent quantitatively 
summarize existing knowledgebased techniques hard convert anytime algorithms due wide variability performance improve ment time 
progressive reasoning progressive reasoning important technique design knowledge systems exhibit highly predictable time quality tradeoff 
technique uses multilevel deliberation order gradually transform approximate solution precise 
mapping set inputs problem instance set outputs solution progressive exploration data knowledge name progressive reasoning 
progressive exploration facilitated hierarchical structure input elements defined weights system designer attaches input importance 
correspondingly knowledge organized hierarchical way 
mapping especially suitable domains reasoner uses abstraction structure search space hierarchical planning problems require result expressed varying levels detail model diagnosis 
furthermore organization important factor reducing unpredictability knowledge systems limiting amount knowledge data focus system level hierarchy 
result characterize precisely tradeoff computation time quality results offered progressive reasoning systems 
section explains progressive reasoning works 
major issues progressive reasoning hierarchical organization knowledge control evolution solution quality 
cover issues describing conceptual model implementation properties 
implementation great guaranteed reasoning time model mouaddib 
conceptual model distinctive features progressive reasoning ap proach result combination generic knowledge representation language facilitates pro problem solving control mechanism progressively feeds data knowledge inference engine preference criterion 
knowledge represented rule language refers data set attributes 
progressive problem solving process assumes solutions different qualities represents intermediate approximate view final solution 
transition solution precise done additional attributes rules precise previously 
rule change current solution adding deleting modifying attributes contained current solution 
process shown schematically 
ai ak attributes granularity attributes aj ao am attributes lap granularity schematic structure progressive reasoning 
organization defined preference criterion representing accuracy attributes specified system designer 
attributes preference criterion allows solution represented different levels detail 
preference criterion named crit knoblock generalized notion granularity great model 
certainty attributes control progressive manipulation data granularity 
attributes preference criterion preference criterion rules computed automatically shown section 
preference criterion defines aggregations attributes aggregations rules referred regions packages respectively 
leads definition hierarchy reasoning levels improves solution quality previous 
reasoning level performed execution cycles include reasoning cycle evaluation cycle described 
upper levels level eva sufficient solution ali level reasoning level vel lower levels single execution cycle consists reasoning cycle evaluation cycle distinct level reasoning 
reasoning cycles reasoning cycle consists region package rules corresponding current level reasoning 
approach limits amount relevant data knowledge level 
reasoning performed exploring rules current package attributes current region 
cycle reasoning consists activating relevant rules 
execution rules modifies quality solution evaluated cycle 
quality unsatisfactory execution cycle activated 
process repeated quality satisfactory deadline reached 
evaluation cycle reasoning cycle evaluator judges quality actual solution decides improvement needed 
reasoning required evaluator decides pursued level necessary change reasoning level precise attributes 
quality evaluated multi dimensional criterion measures level completeness certainty preci sion solution 
evaluator checks completeness certainty insufficient case reasoning cycle level executed 
evaluator verifies precision quality solution 
acceptable solution returned process terminates 
evaluator indicates reasoning level required 
means solution needs additional attributes precise current level 
implementation great model section describe great model implementation real time progressive reasoning 
particular show build hierarchy reasoning levels perform progressive reasoning leads high performance predictability 
problem characterized main data attributes rule base di data component 
ri rule form ri di dj dt true false define detail concepts introduced earlier 
context focus great context represents point view adopted handle situation 
control data structure possible adapt task particular situation 
context defines focus task consists subset data subset knowledge production rules consequently focus limits size data knowledge cycle 
granularity attributes operating time pressure human experts focus attention relevant data order build quickly approximate solution 
order formalize intuitive notion relevance concept granularity 
indicated earlier granularity data components specified system designer 
represent information function defined follows set contexts focus set natural numbers 
general means granularity attribute focus context order attribute hierarchy current context 
granularity rules progressive data data hierarchy accompanied similar progressive knowledge 
order achieve extend notion granularity rules 
granularity rule computed automatically attribute granularity 
implementation granularity rule maximum granularities attributes matching left hand side 
definition means rule manipulating attributes certain level accuracy level accuracy 
eo ci aggregations hierarchy reasoning levels granularities attributes rules determine set regions ri set packages rules follows rs flg context ri kr context ri 
reasoning levels li represented ri pi consists rules package data region hierarchy sequence reasoning levels 
length sequence depth reasoning 
quality measures assigning precise quality approximate results knowledge system hard problem 
implementation great dimensional quality measure certainty completeness precision judge quality solution 
evaluator bases judgement library evaluation tables 
context level evaluator uses different evaluation table 
table determines quality solution characteristics completeness specified list attributes solution contain order complete 
precision determined minimal granularity attributes previous list 
certainty determined minimal level certainty attributes previous list 
progressive knowledge problem solving hierarchy reasoning levels created progressive reasoning process starts serie reasoning cycles followed evaluation cycles 
process summarized es initial solution 
ses result activating level allowing add new attributes delete modify attributes 
li general result acti res level li receives previous level solution 
activation li consists ri pi 
qr es built tributes ri attributes formalize activation level li gp ai ri consists activation rules belonging pi 
evaluation cycle invoked level li assess quality solution checking completeness certainty 
evaluation fails processing resumes level li evaluation suc deadline reached 
evaluation succeeds evaluator invokes level order improve precision solution 
construction reasoning levels li improvement solution quality sys tem moves level 
true attributes computed new level li precise contained current result 
level li deletes current solution attributes judged incorrect current level granularity example attribute time contains value replaced level granularity takes minutes account value min 
quality solution preferred application collision avoidance system consider problem collision avoidance railway network 
assume railway network consists horizontal railway tracks vertical tracks train 
horizontal track intersects vertical ones 
main objective prevent trains colliding crossings 
system needs detect potential collisions optimally modify speeds train avoid chance collision 
rest section describes great model construct collision avoidance system mouaddib 
collision avoidance progressive reasoning implementation collision avoidance task achieved different levels approximation depending time available 
deadline defined time remaining collision may occur 
domain different policies avoid collision 
system control train qualitative manner slow speed compute actual speed various levels precision 
different constraints taken account passenger comfort means acceleration slowing limited time table train priorities time dependent utilities different trains 
capture types knowledge components great follows set data attributes defined speed tendency distance timetable context situation defined 
context set speed xt cross distance granularity tendency rail priority granularity sped speed precise data hierarchy collision avoidance context 
quality tit deadline reduced speed tendency distance note attribute timetable omitted 
granularities attributes shown fig ure 
granularities rules calculated granularities attributes formula section 
example rule detecting sion rl collision speed distance 
rl max speed distance max regions packages rules reasoning levels created accordingly 
experimental results performance great summarized graphs shown 
examine performance function parameters deadline causes gradual improvement solution quality creases size network causes grad ual degradation solution quality increases 
control time increases function size deadline decreases 
measuring precise objective quality solution hard knowledgebased systems level reasoning indication solution quality system 
ratio number activated levels total number levels quality measure 
currently investigating possible improvements measuring quality measure sufficient show system exhibits gradual improve ment degradation quality computational time increases decreases 
summarize experimental results show great establishes correlation solution qual control time quality siz size quality function time size 
ity computation time quantitatively described performance profile 
model progressive reasoning knowledge approach real time decision making implementation 
preliminary results show structuring available knowledge hierarchical way limiting amount data knowledge level construct knowledgebased systems characteristics wellbehaved anytime algorithm 
particular system exhibits gradual improvement degradation quality computation time increases decreases problem size decreases increases 
behavior sys tem consistent characterized performance profile typically control anytime computation 
result important step adaptation knowledge systems normally exhibit high variability performance real time domains predictability performance essential 
needed aspects implementation including designer task mapping domain knowledge hierarchical structure development precise quality measures utility approach control operation system 
research directions include application model construct multi agent system implementation larger application 
ash ash gold hayes roth 
guaranteeing real time response limited resources 
artificial intelligence medicine 
boddy dean iv 
boddy dean 
ing time dependent planning problems 
technical report cs department computer science brown university providence 
dean boddy dean iv 
boddy 
analysis time dependent planning 
proceedings seventh national conference artificial intelligence pages minneapolis minnesota 
elkan elkan 
incremental approximate plan ning 
proceedings eighth national conference artificial intelligence pages boston massachusetts 
garvey lesser garvey lesser 
design time real time scheduling ieee transactions systems man cybernetics 
grass zilberstein grass stein 
programming anytime algorithms 
proceedings ijcai workshop anytime algorithms deliberation scheduling montreal canada 
hayes roth hayes roth guardian prototype intelligent agent intensive care monitoring 
technical report ksl stanford knowledge systems laboratory stanford california 
horvitz horvitz 
reasoning beliefs actions computational resource constraints 
proceedings workshop uncertainty artificial intelligence seattle washington 
knoblock knoblock tenenberg ang 
characterizing abstraction hierarchies planning 
proceedings th national conference artificial intelligence pages anaheim california 
cox schmidt iv 
kao read 
real time knowl edge systems 
ai magazine spring 
mouaddib mouaddib charpillet 
progressive reasoning approximation 
proceeding aaai workshop imprecise approximate computation san jose california 
mouaddib mouaddib 
contribution au temps rel dans un univers multi agents 
de doctorat es science informatique universit de nancy 
mouaddib mouaddib 
progressive goal directed reasoning real time systems 
international journal engineering intelligent systems june 
smith liu smith liu 
monotonically improving approximate answers relational algebra queries 
compsac orlando florida 
liu liu 
producing monotonically improving approximate answers database queries 
proceedings ieee workshop imprecise approximate computation pages phoenix arizona 
winston winston 
progressive deepen ing keeps computation time bounds 
artificial intelligence nd ed pp 
addison wesley reading massachusetts 
zilberstein zilberstein 
operational rational ity compilation anytime algorithms 
ph dissertation computer science division university california berkeley 
zilberstein zilberstein 
utility planning 
pollack ed sigart bulletin special issue evaluating plans planners planning systems 
zilberstein russell zilberstein russell 
anytime sensing planning action practical model robot control 
proceedings thirteenth international joint conference artificial intelligence pages chambery france 
zilberstein russell zilberstein russell 
optimal composition real time systems 
artificial intelligence forthcoming 
