electronic notes theoretical computer science url www elsevier nl locate entcs volume html pages jass java assertions detlef gmbh 
oldenburg germany clemens fischer btc business technology consulting ag 
oldenburg germany michael ller universit oldenburg fachbereich informatik postfach oldenburg germany design contract proposed meyer programming language eiffel technique allows run time checks specification violation treatment program execution 
jass java assertions design contract extension java allowing annotate java programs specifications form assertions 
jass tool pre compiler translates annotated pure java programs compliance specification dynamically tested 
standard design contract features known classical program verification pre postconditions invariants jass additionally supports refinement subtyping checks novel concept trace assertions 
trace assertions monitor dynamic behaviour objects time 
partially funded german research council dfg ol 
email detlef com email clemens fischer de email michael moeller informatik uni oldenburg de email informatik uni oldenburg de published elsevier science correctness major issue design large software systems 
correctness concerns question design implementation system meets requirements specifications set earlier phases development 
modelchecking finite state systems successfully applied areas check systems satisfy specifications 
modelchecking suffers called state explosion problem forbids verification complexity 
classical program verification techniques hand scale large programs 
development program verification techniques object oriented languages support theorem provers topic current research see instance 
design contract proposed meyer object oriented language eiffel lightweight formal technique allows dynamic run time checks specification violation 
name refers contract client supplier component 
contract governs relation client objects requesting services calling feature supplier objects providing services 
specification contract directly written program form assertions 
ideally syntax assertions close programming language easy programmers 
assertions checked program execution violation amenable exception handling correction 
design contract extensions simply assertions proposed number languages eiffel instance ada anna see www com eiffel feature dbc java ge directly incorporated new languages instance promela language spin 
java number proposals design contract extensions sun currently developing simple assertion facility java tools icontract specification languages jml bsl allow rich set assertions written java code 
tool jass standard design contract facilities pre postconditions class invariants additionally offers refinement checks trace assertions 
trace assertions monitor dynamic behaviour object ordering method invocations calls time 
especially useful design concurrent reactive systems 
idea concept standard assertions design contract counterpart state formal specifications trace assertions counterpart behaviour oriented specifications process algebras temporal logic 
design trace assertions jass influenced process algebra csp syntax trace assertions number operators close csp operators appear 
fact ultimate goal generation assertions formal specifications case specifications writ csp oz combination object csp 
trace assertions novel concept design contract best knowledge mentioned tools currently support similar facility 
refinement checks inspired important design technique formal methods 
refinement usually relates specifications different levels abstraction saying concrete class instance efficient data types correct implementation class 
jass refinement checks check subclass behavioural subtype sense superclass 
subtype method preconditions weakened postconditions strengthened 
furthermore invariant superclass preserved subclass 
refinement check subtypes jass carried interface jass runtime refinement implemented subclass 
method plays role usual abstraction representation function refinement relating concrete states 
jass pre compiler written java 
translates annotated pure java programs compliance specification dynamically tested run time 
contrast static checkers esc lclint perform static check assertions actual program code employing dataflow analysis techniques case esc theorem provers 
modelchecking approaches java bandera tool translating java programs input assertions temporal logic requirements java pathfinder operating directly java programs 
concerned run time checks specification violation 
assertions jass written comments java code formed jass program formed java program 
assertions simply boolean expressions java extended certain keywords existential universal quantification finite sets 
jass available free charge tool implemented part master thesis general ideas developed gives formal semantics jass 
basic jass features design contract aims dynamic run time checks specification violations 
program code decorated assertions provide specification program 
jass translates assertions java code violation specification indicated java exception 
section explain basic features jass referring spin fdr course check compliance respect specified allowed traces 
semantik informatik uni oldenburg de jass buffer example 
type assertions discussed section provided java design contract tools 
sections discuss advanced features jass 
public class buffer implements private int count private object store public buffer int capacity 
public boolean empty 
public boolean full 
public int capacity 
private boolean inrange int 
public void add object 
public object remove 
public boolean contains object 
buffer stores objects method add may recalled method remove basis fifo 
buffer limited capacity objects stored buffer full 
course objects returned buffer empty 
method inrange check index accessing store range 
specify behaviour buffer design contract jass allows insert different kinds assertions java source code method pre postconditions class invariants loop invariants variants additional checks similar predicates proof outlines 
jass source file assertions written code special comments formed jass program formed java program 
may help get familiar jass easily minimize threshold jass industrial context jass precompiler suitable stage project code change 
assertions boolean expressions jass insert java code output 
addition standard java boolean expressions jass allows universal existential quantifications range finite sets 
feature helps shorten description conditions interface introduced technical reasons 
loop variant integer expression 
possible state condition varying finite number objects 
instance invariant class buffer 
example universal quantification forall 
capacity inrange store null boolean expression evaluate true runtime indicates violation contract thrown 
help developer debugging program assertions may decorated labels reused exceptions 
facilitates identification point failure 
discuss basic assertions jass provides detail 
pre postconditions methods precondition specify valid states method invocation 
states assertion expression evaluated true legal calling method 
satisfying precondition duty caller 
precondition checked methods body 
place precondition declared introducing keyword require 
example precondition method public object remove require empty 
precondition called methods variables visible method appear 
availability rule introduced bertrand meyer ensures caller understand conditions method invoked 
implies protected method may public protected members precondition 
postcondition specifies legal states method invocation 
leaving method postcondition evaluate true 
satisfaction postcondition duty developer method 
postcondition checked normal return points methods return statements method body 
postcondition declared method body introducing keyword ensure 
special feature jass return value method accessed postcondition special variable result 
additionally objects state method stored special variable old access facility interface java lang implemented 
method clone interface fixes way copies states 
variable developer specify relations entry exit states example monotonicity counter 
special construct keyword followed list attributes 
list specified postcondition declared attributes allowed change values frame condition 
feature inspired lists object 
example postcondition method old public object remove return ensure count old contains result result equals old store old give just impression translation java done gives java code checking pre postconditions 
public object remove examples buffer examples buffer clone precondition empty throw new jass runtime postcondition jass runtime tool store store throw new jass runtime contains throw new jass runtime equals store throw new jass runtime return copy object old value precondition checked precondition exception thrown negation precondition holds body method executed return statements replaced assignment 
postcondition checked result returned 
postcondition check requires comparison old value object stored result method call stored 
pre postcondition checks call special methods empty contains body methods empty contains pre postcondition checks 
method jass runtime tool tests equality contents arrays 
class invariant class invariant specifies allowed global states class 
expresses restrictions relationships values attributes 
class invariant declared introducing keyword invariant located class body 
class invariant checked state class stable method class called ends analogous postcondition method return statements body 
local variables formal parameters allowed class invariant assertions evaluable method 
example class invariant public class buffer 
invariant count count capacity loop variant invariant purpose loop variants invariants catch typical programming errors loops loop terminate body loop executed special cases zero iterations handled 
facilitate programming loops loop invariant loop variant introduced 
declared head body loop 
loop invariant starts keyword invariant specifies condition satisfied loop iteration loop terminated 
express global properties loop range loop variable 
loop variant introducing keyword variant declares integer expression decreased loop iteration limited zero 
loop variant guarantees termination loop 
violation contract external access attributes adequate check method termination 
example loops public boolean contains object int capacity invariant capacity variant capacity inrange store equals return true return false note loop invariant hold termination loop may require capacity capacity 
miscellaneous basic facilities jass shortly discuss see jass homepage thorough 
features check statements rescue retry statements 
check statements appear places normal java statement stand 
boolean expressions evaluated program control reaches 
check statements closely match assert statement sun currently adding java 
rescue retry statements handle exceptions thrown contract violation 
placed method body specify assertion exceptions caught code blocks executed 
indicating keyword rescue 
jass rescue statement translated java try catch block 
additionally special keyword retry rescue blocks re initiate method call possibly changed parameter values 
describe advanced features jass 
refinement checks refinement checks validate concrete class refinement behavioural subtype class refinement important concept stepwise design systems supporting specification classes different abstraction levels 
jass refinement checks carried way programmer implement interface jass runtime refinement class jass class requires method implemented java class modifier classes declare methods implement 
word refers general class inheritance hierarchy 
general classes may java sense refinement check jass able create instance class 
class returning object type plays role abstraction representation relation refinement relating concrete state 
implements function general representation relations test functional refinement 
interface implemented class jass carries dynamic refinement checks state reached object class invariant satisfied corresponding state invariant satisfied method called particular state holding precondition corresponding state imply holding precondition concrete state weakening preconditions returning method precondition fulfilled state corresponding concrete state method holding concrete postcondition imply holding postcondition considering particular state counterpart strengthening postconditions 
standard forward simulation rules data refinement invariant preservation applicability correctness operations instance known widely part subtyping checks exception dynamically check conditions states reached program execution 
example buffer demonstrate refinement checks 
time consider buffer derived version uses multi set limited capacity store elements 
remove operation return arbitrary element multi set 
concrete buffer uses fifo strategy storing postcondition remove stronger concrete class specifies fixed element returned 
consider class buffer subclass indicate refinement checks carried implementing jass refinement interface 
implementation build represents current state concrete buffer creating new instance superclass capacity inserting objects currently stored 
postcondition remove buffer stronger preconditions equivalent refinement check succeed 
example refinement public class implements private buffer 
public object remove require empty 
ensure old contains result public class buffer extends implements jass runtime refinement public object remove require empty 
ensure count old contains result result equals old store old private int capacity store length new capacity int capacity count capacity add store capacity return shortly discuss approaches subtyping 
eiffel adopts principle subclass pre postconditions methods combined corresponding pre postconditions superclass 
preconditions combined logical postconditions achieving weakening pre strengthening postconditions 
state spaces sub superclass identical concerning attributes accessed assertions representation functions applied 
jml uses elaborate treatment subtyping close jass supplies 
represents clause relate concrete state space class invariants method specifications inherited superclass 
furthermore concept history constraints included 
jml subtyping relationships mainly facilitate specification subtype assertions inherited superclass 
difference jass jml point 
jml uses concept model variables specifications model variables actual variables classes specification purposes 
pre postconditions written refering model variables 
allows clearer separation specification code currently thinking adopting similar approach jass 
trace assertions specify intended dynamical behaviour jass uses csp notation describing allowed traces events 
context jass events beginnings ends method invocations 
consequently events written method invocations followed indicate method entry exit event 
method invocation suffixes abbreviates entry event followed exit event 
allowed traces specified csp processes 
jass processes defined process name parameters process formal parameters java methods local variables process expression 
example gives impression trace assertions jass 
class factorial calculate factorial positive integer value recursively calling method factorial 
process trace assertion monitor correct invocation method recursive invocation factorial initiate process accept call factorial parameter reduced zero 
trace assertions describe observable behaviour class declared class invariant 
generated code check trace current program execution included traces main process trace exception thrown 
example observing recursive method calls public class factorial public int factorial int value require value value return return value factorial value ensure result invariant variant trace main int value factorial value call decrease value decrease int variant int variant execute throw new negative method variant factorial variant call decrease number features trace assertions seen example 
trace assertions defines processes main decrease second parameterised 
processes local variables value input variables events event factorial value matches method call factorial value parameter value execution current value parameter bound local variable value 
analogously output variables prefixing local variable 
allowed values input variables restricted clause 
furthermore example shows number csp operators prefixing process calls call process 
jass additionally allows processes term accepting event just successful termination class respectively operators external choice parallel composition 
parallel composition restricted synchronisation intersection components alphabets ensuring specification deterministic processes 
execute event example special feature jass allows developer execute java statements trace testing 
check trace assertions events monitored alphabet trace assertion 
alphabet implicitly trace assertion set events occurring explicitly stated 
additional features prototype state jass provides additional features far rudimentary implemented 
features described way limitations removed 
interference checks jass provides simple facility detect possible interferences parallel program 
threads run parallel jass classes started main method 
case jass able detect assertions thread may invalid statements thread 
currently jass able detect possible interferences guarded synchronized statements statement assertion refers object instance 
javadoc support jass able add pre postcondition class invariant javadoc conform comment method class 
currently done adding html code assertions javadoc comment generated java source code 
tool jass precompiler annotated java programs 
assertion language jass allows standard design contract assertions written programs additionally supports novel concept trace assertions refinement checks 
envisage automatic generation assertions formal specifications case specifications written csp oz formal method combining csp object 
concerning jass precompiler plan change translation way jass assertions directly translated new assert statement java 
evaluation assertions fixed time class loaded may enabled certain classes disabled 

michael implemented trace assertions jass dieter version assertion precompiler jochen general support concerning java 
america designing object oriented programming language behavioural subtyping de bakker de roever rozenberg editors rex workshop foundations object oriented languages number lncs 
apt 

olderog verification sequential concurrent programs springer verlag nd edition 
und beim mit master thesis universit oldenburg german 
clarke emerson sistla automatic verification finite state concurrent systems temporal logic specifications practical approach conference record tenth annual acm symposium principles programming languages acm pp 

corbett dwyer hatcliff robby language framework expressing checkable properties dynamic software spin number lncs pp 

de roever 
engelhardt data refinement model oriented proof methods comparison cambridge university press 
detlefs leino nelson saxe extended static checking technical report compaq systems research center 
leavens forcing behavioral subtyping specification inheritance proceedings th international conference software engineering berlin germany pp 

fischer csp oz combination object csp bowman derrick editors formal methods open object distributed systems ifip pp 

fischer combination implementation processes data csp oz java ph thesis university oldenburg 
hoare axiomatic basis computer programming comm 
acm pp 

hoare communicating sequential processes prentice hall 
holzmann design validation computer protocols prentice hall 
huisman jacobs java program verification hoare logic abrupt termination maibaum editor fase fundamental approaches software engineering lecture notes computer science pp 

verification object oriented programs class invariants maibaum editor fase fundamental approaches software engineering lecture notes computer science pp 

kramer icontract java design contract tool technical report reliable systems www reliable systems com 
leavens baker ruby preliminary design jml behavioral interface specification language java technical report department computer science iowa state university revised 
liskov wing behavioural notion subtyping acm transactions programming languages systems pp 

luckham von henke krieg br owe anna language annotating ada programs lecture notes computer science springer 
mit java master thesis universit oldenburg german 
meyer object oriented software construction ise nd edition 
ller poetzsch heffter modular specification verification techniques object oriented software components leavens sitaraman editors foundations component systems cambridge university press appear 
trace jass erweiterung des mit master thesis universit oldenburg german 
sun microsystems simple assertions facility java programming language jcp org jsr detail jsp 
visser brat havelund park model checking programs international conference automated software engineering 
woodcock davies specification refinement proof prentice hall international 

