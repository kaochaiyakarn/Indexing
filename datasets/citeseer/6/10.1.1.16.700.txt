vldb journal digital object identifier doi survey approaches automatic schema matching rahm philip bernstein universit leipzig institut informatik leipzig germany mail rahm informatik uni leipzig de microsoft research redmond wa usa mail microsoft com edited scheuermann 
received february accepted september published online november springer verlag 
schema matching basic problem database application domains data integration ebusiness data warehousing processing 
current implementations schema matching typically performed manually significant limitations 
hand previous research papers proposed techniques achieve partial automation match operation specific application domains 
taxonomy covers existing approaches describe approaches detail 
particular distinguish schema level instance level element level structure level language constraint matchers 
classification review previous match implementations indicating part solution space cover 
intend taxonomy review past useful comparing different approaches schema matching developing new match algorithm implementing schema matching component 
keywords schema matching schema integration graph matching model management machine learning 
fundamental operation manipulation schema information match takes schemas input produces mapping elements schemas correspond semantically lc mir mz psu ddl 
match plays central role numerous applications web oriented data integration electronic commerce schema integration schema evolution migration application evolution data warehousing database design web site creation management component development 
currently schema matching typically performed manually supported graphical user interface 
obviously manually specifying schema matches tedious timeconsuming error prone expensive process 
growing problem rapidly increasing number web data sources businesses integrate 
systems able handle complex databases applications schemas larger increasing number matches performed 
level effort linear number matches performed worse linear needs evaluate match context possible matches elements 
faster labor intensive integration approach needed 
requires automated support schema matching 
provide automated support see generic customizable implementation match usable application areas 
easier build application specific tools include automatic schema match 
generic implementation key component comprehensive model management approach proposed br mapping returned match operation may input operations merge schemas compose mappings 
fortunately lot previous schema matching developed context schema translation integration knowledge representation machine learning information retrieval 
main goals survey past approaches taxonomy explains common features 
expect survey helpful designers new approaches users need select library approaches 
section summarize example applications schema matching 
section defines match operator section describes high level architecture implementing 
section provides classification different ways perform match automatically 
section illustrates complexity problem part solution space 
classification sects 
organize presentation previously proposed techniques explain may applied architecture 
section literature review describes integrated solutions fit classification 
section 

application domains motivate importance schema matching summarize database application domains 
rahm bernstein survey approaches automatic schema matching 
schema integration schema match motivated schema integration problem investigated early set independently developed schemas construct global view ep sl ps 
artificial intelligence setting problem integrating independently developed ontologies single ontology 
schemas independently developed different structure terminology 
obviously occur schemas different domains real estate schema property tax schema 
occurs model real world domain just developed different people different real world contexts 
step integrating schemas identify characterize interschema relationships 
process schema matching 
identified matching elements unified coherent integrated schema view 
integration separate step programs queries created permit translation data original schemas integrated representation 
variation schema integration problem integrate independently developed schema conceptual schema 
requires reconciling structure terminology schemas involves schema matching 

data warehouses variation schema integration problem popular integrating data sources data warehouse 
data warehouse decision support database extracted set data sources 
extraction process requires transforming data source format warehouse format 
shown br match operation useful designing transformations 
data source approach creating appropriate transformations start finding elements source warehouse 
match operation 
initial mapping created data warehouse designer needs examine detailed semantics source element create transformations reconcile semantics target 
approach integrating new data source reuse existing source warehouse transformation common elements match operation reused common elements 

commerce current decade commerce led new motivation schema matching message translation 
trading partners frequently exchange messages describe business transactions 
usually trading partner uses message format 
message formats may differ syntax edi electronic data interchange structures xml custom data structures 
may different message schemas 
enable systems exchange messages application developers need convert messages formats required different trading partners 
part message translation problem translating different message schemas 
message schemas may different names somewhat different data types different ranges allowable values 
fields grouped structures may differ formats 
example may flat structure simply lists fields may group related fields 
formats may nested structures may group fields different combinations 
translating different message schemas part schema matching problem 
today application designers need specify manually message formats related 
match operation reduce amount manual generating draft mapping message schemas application designer subsequently validate modify needed 
schema match may helpful applications considered semantic web mapping messages autonomous agents matching declarative mediator definitions 

semantic query processing schema integration data warehousing commerce similar involve design time analysis schemas produce mappings possibly integrated schema 
somewhat different scenario semantic query processing run time scenario user specifies output query select clause sql system figures produce output determining clauses sql 
user specification stated terms concepts familiar may names elements specified database schema 
phase processing query system map user specified concepts query output schema elements 
natural application match operation 
mapping query output schema elements system derive qualification clause gives semantics mapping 
techniques deriving qualification developed past years mrss ws 
expect techniques generalized specify semantics mapping produced match operation 
investigation hypothesis scope 

match operator define match operator match need choose representation input schemas output mapping 
want explore approaches match 
approaches depend lot kinds schema information interpret 
depend hardly information internal representation extent expressive represent information interest 
purposes define rahm bernstein survey approaches automatic schema matching table 
sample input schemas elements elements cust cname firstname lastname customer contact phone schema simply set elements connected structure 
practice particular representation chosen entity relationship er model object oriented oo model xml directed graphs 
case natural correspondence building blocks representation notions elements structure entities relationships er models objects relationships oo models elements subelements idrefs xml nodes edges graphs 
define mapping set mapping elements indicates certain elements schema mapped certain elements 
furthermore mapping element mapping expression specifies elements related 
mapping expression may directional example certain function elements referenced mapping element elements referenced mapping element may non directional relation combination elements 
may simple relations scalars functions addition concatenation er style relationships part set oriented relationships overlaps contains terms defined expression language 
example table shows schemas representing customer information 
mapping contain mapping element relating cust customer mapping expression cust customer 
mapping element expression concatenate cust firstname cust lastname customer contact describes mapping elements element 
define match operation function takes schemas input returns mapping schemas output called match result 
mapping element match result specifies certain elements schema logically correspond match certain elements semantics correspondence expressed mapping element mapping expression 
unfortunately criteria match elements heuristics easily captured precise mathematical way guide implementation match 
left practical mathematically unsatisfying goal producing mapping consistent heuristics approximate understanding users consider match 
similar previous focus match algorithms return mapping include mapping expressions 
represent mapping similarity relation powersets pair represents mapping element mapping 
example result calling match schemas table cust customer cust cname customer cust firstname cust lastname customer contact 
complete specification result invocation match include mapping expression element cust customer cust cname customer 
concatenate cust firstname cust lastname customer contact 
follows mapping expressions involved explicitly mention 
simply 
see implementations match similar join processing relational databases match join binary operations determine pairs corresponding elements input operands 
differences course 
match operates metadata schema elements join data rows tables 
match complex join 
element join result combines element matching element second input element match result relate multiple elements inputs 
furthermore join semantics specified single comparison expression equality condition natural join hold matching input elements 
contrast element match result may different mapping expression 
semantics match restricted join difficult capture consistent way 
similarity match join extends operations useful counterparts match way counterpart join 
right left ensures element referenced mapping full ensures element referenced mapping 
ensuring element schema referenced mapping returned match mapping easily composed mappings refer examples compositions appear br introduced operation 
usage involves subtlety implementation straightforward extension match algorithm match operation easily computed adding elements match result non referenced elements 
consider outer match 

architecture generic match reviewing comparing approaches match helps implementation architecture mind 
describe high level architecture generic customizable implementation match 
illustrates architecture 
clients schema related applications tools different domains business portals data warehousing 
client uses generic implementation match automatically determine matches input schemas 
xml schema editors portal development kits database modeling tools may access libraries select existing schemas shown lower left fig 

implementation match may rahm bernstein survey approaches automatic schema matching tool portal schemas global libraries dictionaries schemas tool business schemas schema import export generic match implementation table 
full vs partial structural match example elements elements address street city state zip name address birthdate tool data warehousing schemas tool database design schemas internal schema representation fig 

high level architecture generic match street city customer cname libraries auxiliary information dictionaries thesauri help find matches 
assume match represents schemas matched uniform internal representation 
uniform representation significantly reduces complexity match having deal large number different heterogeneous representations schemas 
tools tightly integrated framework directly internal representation 
tools need import export programs translate native schema representation xml sql uml internal representation 
semantics preserving translates input schemas native representation internal representation 
similarly translates mappings produced generic implementation match internal representation representation required tool 
allows generic implementation match operate exclusively internal representation 
general possible determine fully automatically matches schemas primarily schemas semantics affects matching criteria formally expressed documented 
implementation match determine match candidates user accept reject change 
furthermore user able specify matches elements system unable find satisfactory match candidates 

classification schema matching approaches section classify major approaches schema matching 
fig 
shows part classification scheme sample approaches 
full structural match address partial structural match customer implementation match may multiple match algorithms matchers 
allows select matchers depending application domain schema types 
want multiple matchers distinguish subproblems 
realization individual matchers computes mapping single matching criterion 
second combination individual matchers multiple matching criteria name type equality integrated hybrid matcher combining multiple match results produced different match algorithms composite matcher 
individual matchers consider largely orthogonal classification criteria instance vs schema matching approaches consider instance data data contents schema level information 
element vs structure matching match performed individual schema elements attributes combinations elements complex schema structures 
language vs constraint matcher approach names textual descriptions schema elements constraint approach keys relationships 
matching cardinality match result may relate elements schema elements yielding cases addition mapping element may interrelate elements schemas 
furthermore may different match cardinalities instance level 
auxiliary information matchers rely input schemas auxiliary information dictionaries global schemas previous matching decisions user input 
rahm bernstein survey approaches automatic schema matching element level schema matching approaches individual matcher approaches combining matchers schema instance contents linguistic constraint linguistic type similarity key properties structure level constraintbased graph matching linguistic element level constraintbased name similarity description similarity global namespaces fig 

classification schema matching approaches note classification distinguish different types schemas relational xml object oriented internal representation algorithms depend kind information exploit representation 
sections discuss main alternatives classification criteria 
discuss schema level matching sect 
instance level matching sect 
combinations multiple matchers sect 

schema level matchers schema level matchers consider schema information instance data 
available information includes usual properties schema elements name description data type relationship types part constraints schema structure 
general matcher find multiple match candidates 
candidate customary estimate degree similarity normalized range order identify best match candidates psu bcv ddl cdd 
discuss main alternatives match granularity match cardinality 
cover linguistic constraintbased matchers 
outline approaches reuse auxiliary data previously defined schemas previous match results 

granularity match element level vs structure level distinguish main alternatives granularity match element level structure level matching 
hybrid matchers manual composition composite matchers automatic composition criteria match cardinality auxiliary information ir techniques value pattern word frequencies ranges key terms sample approaches element schema element level matching determines matching elements second input schema 
simplest case elements finest level granularity considered call atomic level attributes xml schema columns relational schema 
schema fragments shown table sample match address zip recall means matches 
structure level matching hand refers matching combinations elements appear structure range cases possible depending complete precise match structure required 
ideal case components structures schemas fully match 
alternatively components may required match partial structural match 
examples cases shown table 
need partial matches arises different domains compared 
example second row table may come finance database customer comes sales database 
complex cases effectiveness structure matching enhanced considering known equivalence patterns may kept library 
simple pattern shown fig 
relating structures hierarchy single structure 
subclass schema represented boolean attribute second schema 
known pattern consists structures interconnected referential relationship equivalent single structure essentially join 
see example sect 

element level matching restricted atomic level may applied coarser grained higher non atomic rahm bernstein survey approaches automatic schema matching fig 

equivalence pattern level elements 
sample higher level granularities include file records entities classes relational tables xml elements 
contrast structure level matcher element level approach considers higher level element isolation ignoring substructure components 
instance fact elements address table match derived name element level matching considering underlying components 
element level matching implemented algorithms similar relational join processing 
depending matcher type match comparison properties name description data type schema element 
element schema elements schema similar value match property identified 
general implementation similar join processing compares element element determines similarity pair 
combinations similarity value certain threshold considered match candidates 
special cases efficient implementations possible 
example equi joins checking equality properties done hashing sort merge 
join implementation feasible hybrid matchers consider multiple properties time name data type 

match cardinality element participate zero mapping elements match result input schemas 
individual mapping element elements match elements 
usual relationship cardinalities set oriented cases matching elements respect different mapping elements global cardinality respect individual mapping element local cardinality 
matching typically restricted local cardinalities obtaining mapping elements usually table 
match cardinalities examples local match cardinalities element element matching expression 
element level price amount amount price 
element level price tax cost cost price tax 
element level name firstname lastname 
structure level element level title name book publisher requires considering structural embedding schema elements requires structure level matching 
table shows examples local cardinality cases individual mapping elements 
row match 
previous concentrated matches difficulty automatically determining mapping expressions cases 
matching multiple elements time see expressions specify elements related 
example row explains firstname lastname extracted name 
example row uses sql expression combining attributes tables 
corresponds relationship attribute level attributes match attributes relationship structure level tables match table 
structure level match ensures elements derived order obtain correct book publisher combinations 
global cardinality cases respect mapping elements largely orthogonal cases individual mapping elements 
instance example row global match elements elements match price 
hand price matches elements cost row obtain global match combination local matches 
note addition match cardinalities schema level may different match cardinalities instance level 
examples table instance matched instance instance level match 
example row corresponds match combines instances example instance level matching association individual sale instances different aggregate sale instances month quarter 
existing approaches map element schema element schema highest similarity 
results local matches global mappings 
needed explore sophisticated criteria generating local global mappings currently hardly treated 

linguistic approaches language names text words sentences find semantically similar schema firstname lastname extract name 
book publisher select title name rahm bernstein survey approaches automatic schema matching elements 
discuss schema level approaches name matching description matching 
name matching name matching matches schema elements equal similar names 
similarity names defined measured various ways including equality names 
important subcase equality names xml namespace ensures names bear semantics 
equality canonical name representations stemming preprocessing 
important deal special prefix suffix symbols cname customer name empno employee number equality synonyms 
car automobile brand equality hypernyms 
book publication article publication imply book publication article publication book article similarity names common substrings edit distance pronunciation soundex encoding names sound spelled bs 
representative shipto ship user provided name matches 
manager issue bug exploiting synonyms hypernyms requires thesauri dictionaries 
general natural language dictionaries may useful multi language dictionaries english german deal input schemas different languages 
addition name matching domain enterprise specific dictionaries taxonomies containing common names synonyms descriptions schema elements abbreviations specific dictionaries require substantial effort built consistent way 
effort worth investment especially schemas relatively flat structure dictionaries provide valuable matching hints 
furthermore tools needed enable names accessed re schema editor defining new schemas 
homonyms equal similar names refer different elements 
clearly homonyms mislead matching algorithm 
homonyms may part natural language stud meaning fastener male horse may specific domain line meaning line business line item row order 
name matcher reduce number wrong match candidates exploiting mismatch information supplied users dictionaries 
matcher offer warning potential ambiguity due multiple meanings name 
automated mismatch information may possible context information example distinguish order line hypernym ofy ify kind instance hypernyms oak include tree plant 
business line 
technique blurs distinction linguistic structure techniques 
name matching possible elements different levels granularity 
furthermore applied levels lower level schema element consider names schema elements belongs find author name 
similar disambiguation homonyms 
name matching limited finding matches 
identify multiple relevant matches schema element 
example match phone home phone office phone 
name matching driven element level matching introduced sect 

case synonyms hypernyms join processing involves dictionary input 
think relation representation name 
row schema element name 
row schema element name name similarity similarity score name name list match candidates generated way join operation select name name similarity name name name name similarity threshold assumes contains relevant pairs transitive closure similar names 
instance expect contain possibly 
intuitively expect similarity value depends type similarity homonyms factors 
example ship boat deliver boat similarity value 
approach assigning different weights different types similarity relationships discussed 
description matching schemas contain comments natural language express intended semantics schema elements 
comments evaluated linguistically determine similarity schema elements 
instance help find elements match linguistic analysis comments associated schema element employee name name name employee linguistic analysis simple extracting keywords description synonym comparison names 
sophisticated natural language understanding technology look semantically equivalent expressions 
rahm bernstein survey approaches automatic schema matching table 
constraint matching example elements elements employee personnel empno int primary key pno int unique varchar pname string int department dept string salary dec born date birthdate date department int primary key varchar 
constraint approaches schemas contain constraints define data types value ranges uniqueness optionality relationship types cardinalities input schemas contain information matcher determine similarity schema elements 
example similarity equivalence data types domains key characteristics unique primary foreign relationship cardinality relationships relationships 
implementation performed described sect 
join element level matching data types structures constraints comparisons 
equivalent data types constraint names string varchar primary key unique provided special synonym table 
example table type key information suggest born matches birthdate pno matches empno 
remaining elements pname dept strings match 
example illustrates constraint information leads imperfect matches match clusters may elements schema comparable constraints 
approach helps limit number match candidates may combined matchers name matchers 
certain structural information interpreted constraints intra schema foreign keys adjacency related information part relationships 
information tells elements belong higher level schema element transitively multi level structures 
constraints interpreted structures exploited structure matching approaches 
matching consider topology structures different element types attributes tables elements domains possibly different types structural connections part usage relationships 
schema structures hierarchical form containment relationship 
performing match hierarchical structures algorithm traverse structure top bottom top algorithm usually expensive bottom matches high level schema structure restrict choices matching finer grained structure combinations matching ancestors 
top algorithm misled top level schema structures different finer grained elements match 
contrast bottom algorithm compares combinations fine grained elements finds matches level intermediate higher level structures differ considerably 
referring back table previously identified matches sufficient correctly match need join employee department obtain personnel 
detected automatically observing components personnel match components employee department employee department interconnected foreign key employee referencing department 
allows determine correct sql match mapping personnel pno pname dept born select employee empno employee department employee birthdate employee department employee department inferencing needed know join added 
inferencing done mapping problem determining required joins universal relation model 

reusing schema mapping information discussed auxiliary information addition input schemas dictionaries thesauri user provided match mismatch information 
way auxiliary information improve effectiveness match support exploit reuse common schema components previously determined mappings 
reuse oriented approaches promising expect schemas need matched schemas similar previously matched schemas 
example commerce substructures repeat different message formats address fields name fields 
names xml namespaces specific dictionaries reuse oriented general approach reuse globally defined names entire schema fragments including features data types keys constraints 
especially rewarding frequently entities address customer employee purchase order invoice defined maintained schema library 
world agrees schemas specified enterprise trading partners relevant standards bodies similar organizations reduce degree variability 
schema editors access libraries encourage reuse predefined schema fragments defined terms wizard observes new schema definition similar identical library 
elements reused way contain id originating library rahm bernstein survey approaches automatic schema matching xml namespaces implementation match easily identify match schema fragments names come library 
reuse existing mappings 
want reuse previously determined element level matches may simply added thesaurus 
want reuse entire structures useful matching different similar schemas destination schema may occur integrating new sources data warehouse digital library 
instance useful schema mapped schema schema mapped 
similar simplify automatic generation match candidates reusing matches existing result match care needed matches transitive 
things allows reuse manually specified matches 
example re shown fig 
purchase order schemas 
match result illustrated arrows 
new purchase order schema similar element structure corresponding element fully matching structure existing mapping 
ideal case reuse matches fully covered additional match done 
reuse previous matches may possible part new schema 
major problem determine part new schema similar part previously matched match problem 
similarity values determined previous match task may depend application domain reuse restricted related applications 
example salary income may considered identical payroll application tax reporting application 
knowledge reuse issues addressed deserve 

instance level approaches instance level data give important insight contents meaning schema elements 
especially true useful schema information limited case semistructured data 
extreme case schema schema constructed instance data manually automatically data guide gw fig 

scenario reuse existing mapping approximate schema graph may constructed automatically xml documents 
substantial schema information available instance level matching valuable uncover incorrect interpretations schema information 
example help disambiguate equally plausible schema level matches choosing match elements instances similar 
approaches discussed previously matching applied instance level matching 
especially applicable 
example text elements linguistic characterization information retrieval techniques preferred approach extracting keywords themes relative frequencies words combinations words example table looking dept instances may conclude better match candidate dept 
structured data numerical string elements apply constraint characterization numerical value ranges averages character patterns 
instance may allow recognizing phone numbers zip codes geographical names addresses ssns date entries money related entries currency symbols 
table instance information may help empno primary match candidate pno similar value ranges opposed value range 
main benefit evaluating instances precise characterization actual contents schema elements 
characterization employed ways 
approach characterization enhance schema level matchers 
instance constraint matcher accurately determine corresponding data types example discovered value ranges character pattern improving effectiveness match 
requires characterizing content input schemas matching schemas 
second approach perform instance level matching 
instances evaluated characterize content elements 
instances matched characterizations elements 
instance match results need merged abstracted schema level generate ranked list match candidates schema level element rahm bernstein survey approaches automatic schema matching 
various approaches proposed perform instance matching classification rules neural networks machine learning techniques bm ddl ddh lc lc lcl 
instance level matching performed utilizing auxiliary information previous mappings obtained matching different schemas 
approach especially helpful matching text elements providing match candidates individual keywords 
instance previous analysis may revealed keyword microsoft frequently occurs schema elements manufacturer new match task schema element frequently contains term microsoft generate match candidate microsoft occur instances 
approaches instance level matching primarily finding element level matches 
finding matches sets schema elements structures require characterizing content sets 
obviously main problem explosion number possible combinations schema elements instances evaluated 

combining different matchers reviewed types matchers different variations 
utilizes different information different applicability value match task 
matcher uses just approach achieve match candidates combines approaches 
done ways hybrid matcher integrates multiple matching criteria composite matchers combine results independently executed matchers 
combining multiple matching approaches opens possibility evaluate simultaneously specific order 
hybrid matchers directly combine matching approaches determine match candidates multiple criteria information sources name matching namespaces thesauri combined data type compatibility 
provide better match candidates plus better performance separate execution multiple matchers 
effectiveness may improved poor match candidates matching criteria filtered early complex matches requiring joint consideration multiple criteria solved keys data types names table 
structure level matching benefits combined approaches name matching 
way combine structure element level matching algorithm generate partial mapping complete mapping 
hybrid matcher offer better performance execution multiple matchers reducing number passes schema 
instance element level matching hybrid matchers test multiple criteria time element continuing element 
hand composite matcher combines results independently executed matchers including hybrid matchers 
ability combine matchers flexible hybrid matchers 
hybrid matcher typically uses hard wired combination particular matching techniques executed simultaneously fixed order 
contrast composite matcher allows select repertoire modular matchers example application domain schema languages different approaches structured vs semi structured schemas 
example machine learning combine independent matchers ddh matchers ejx combination schema level matchers 
composite matcher allow flexible ordering matchers executed simultaneously sequentially 
case match result matcher consumed extended second matcher achieve iterative improvement match result 
selection matchers determining execution order combination independently determined match results done automatically implementation match clients tools manually human user 
automatic approach reduce number user interactions difficult achieve generic solution adaptable different application domains approach controlled tuning parameters 
alternatively user directly select matchers executed execution order combine results 
manual approach easier implement leaves control user 
discussed sect 
user interaction necessary case implementation match determine match candidates user accept reject change 
deal complex match tasks implementation match support iterative development match results multiple user interactions 
composite match approach supporting sequential execution matchers user supplied matches considered special matcher provides input automatic matchers 
matchers aware user provided match input change focus unmatched parts input schemas 

sample approaches literature 
prototype schema matchers table show published prototype implementations fit classification criteria introduced sect 

table indicates part solution space covered implementations supporting comparison approaches 
specifies supported schema types internal metadata representation format tasks performed manually application domain 
indicate suitability approaches respect key requirements particular degree automation dependence manual input genericity respect different application domains schema languages 
achievable matching accuracy related degree solution spectrum covered 
table shows systems support multiple matching criteria form hybrid matcher lsd composite match approach 
flexible ordering rahm bernstein survey approaches automatic schema matching table 
characteristics proposed schema match approaches lc lc lcl schema types relational files metadata representation unspecified match granularity attributes attribute clusters lsd ddl ddh mz dike psu cdd bcc cupid mbr xml xml idl sgml oo er relational oo xml rela text er tional xml schema graph labeled graph graph hybrid extended er trees oo data relational oo model data model element element element level element element element level level level attributes entities entities classes relationships relationships attributes attributes match cardinality schema name name name name name equality name equality name level equality equality equality synonyms synonyms equality match synonyms synonyms synonyms hypernyms hypernyms synonyms homonyms homonyms hypernyms hypernyms hypernyms homonyms abbreviations constraint domain domain data type criteria data inclusion inclusion compatibility compatibility 
domain type length relationship relationship compatibility key info 
cardinalities cardinalities uses keys referential foreign keys aggregation constraints structure match xml similarity similarity matching matching matching ing classifier neighborhood neighborhood subtrees matching related related weighted non leaf elements ddh elements elements leaves instance text oriented whirl level matchers bayesian learners constraint character list valid oriented numerical domain data pattern value distribution averages values reuse auxiliary informa comparison reuse provision thesauri thesauri tion training general glossaries matches matching synonyms lookup rules inclusions valid domain similarity values probabilities combination matchers hybrid composite hybrid hybrid hybrid hybrid hybrid matcher matchers automatic fixed order combination matcher results matchers rahm bernstein survey approaches automatic schema matching table 
continued lc lc lcl manual user input selection match criteria optional selection matching attributes attribute clusters application area data integration remarks neural networks implementation lsd ddl ddh user supplied matches training sources user specify tuning parameters integrity constraints guide selection match candidates ddh data integration pre defined global schema match mismatch rules iterative refinement different matchers discussed sect 
supported 
systems provide structure level element level matching particular name constraint matching 
systems consider instance data systems focus local matches systems support global matches 
prototypes developed specific application domain mind data schema integration cupid strives general applicability 
systems support multiple schema types lsd limited xml dike er sources 
systems allow user validate generated match results shown table require additional manual instrument system providing prior match knowledge tuning parameters similarity thresholds 
main forms auxiliary information reuse support provision thesauri glossaries specification specific match knowledge 
reuse previous match results supported 
section discuss specific features approaches 
sect 
briefly highlight additional schemes 
offer support respect automatic matching included table 
northwestern univ match prototype lc lc lcl creates mapping individual attributes schemas match cardinality 
exploits constraint content matching criteria 
schema level con ontology composition data integration interoperability algorithms implicitly represented rules mz resolving multiple matches adding new matching rules data translation rules implemented java dike psu resolving structural conflicts preprocessing schema integration algorithms calculate new synonyms homonyms similarity metrics cdd bcc user adjust weights match calculations schema integration embedded mediator extensions cupid mbr user adjust threshold weights data translation intended generic straints information available catalog relational dbms 
instance data enhance information providing actual value distributions numerical averages criterion system uses function map possible value interval 
functions determines match signature attribute consisting value interval matching criteria selected subset supported criteria 
signatures correspond points dimensional space euclidian distance signatures measure degree similarity determining ordered list match candidates 
main approach uses neural networks determine match candidates 
approach requires similar attributes input schema foreign primary keys clustered 
clustering automatic assigning attributes distance threshold value cluster 
neural network trained signatures cluster centers 
signatures attributes second schema fed neural network determine best matching attribute cluster schema 
experiments authors straightforward match approach euclidian distance finding identical attributes neural network better identifying similar attributes match neural network approach sub evaluate effectiveness match approach authors ir metrics recall precision 
recall indicates percentage matches schemas correctly determined 
precision indicates fraction determined matches correct 
rahm bernstein survey approaches automatic schema matching performance problems larger schemas chr 
improve efficiency approach identifies match attribute clusters leaving user select matching attributes cluster 
represents powerful flexible approach hybrid matching multiple match criteria selected evaluated 
contrast hybrid matchers criteria hard wired fashion support name matching graph matching may difficult determine useful mapping interval 
lsd univ washington lsd learning source descriptions system uses machine learning techniques match new data source previously determined global schema producing atomic level mapping ddl ddh 
represents composite match scheme automatic combination match results 
addition name matcher instance level matchers learners trained preprocessing step 
user supplied mapping data source global schema preprocessing step looks instances data source train learner discovering characteristic instance patterns matching rules 
patterns rules applied match data sources global schema 
new data source matcher determines list match candidates 
global matcher uses machine learning technology merge lists combined list match candidates schema element 
trained schemas user supplied mapping known learning weight give component matcher 
new component matchers added improve global matcher accuracy 
approach primarily instance oriented exploit schema information 
learner take input xml matching decisions focusing schema tags ignoring data instance values 
lsd extended consider domain constraints global schema eliminate previously determined match candidates improving match accuracy ddh 
stanford univ tool prototype follows rule approach semi automatically determine matches ontologies schemas 
rules formulated order express match mismatch relationships methods defined derive new matches 
user initially provide application specific match mismatch relationships approve reject generated matches 
description deals name matching simple structural matches characterization sect 
composite matcher combine independently calculated match results 
hierarchies leaves open details implemented 
onion architecture ontology integration 
onion ontologies transformed graph object oriented database model 
matching rules ontologies construct articulation ontology covers intersection source ontologies 
matching heavily relationships articulation ontology source ontologies 
articulation ontology queries adding sources 
tel aviv univ prototype mz uses schema matching derive automatic data translation schema instances 
input schemas transformed labeled graphs internal schema representation 
edges schema graphs represent component relationships 
schema information name optionality children represented properties nodes 
matching performed node node element level starting top presumes high degree similarity schemas 
matchers checked fixed order 
matcher rule implemented java 
require match determined exactly matcher node pair 
match matcher determines multiple match candidates user intervention required provide new rule matcher select match candidate 
matchers typically consider multiple criteria represent hybrid approaches 
example matchers tests name properties number children 
node matching dependent partial full match nodes descendents 
dike univ reggio univ psu propose algorithms automatically determine synonym inclusion hypernym relationships objects different entityrelationship schemas 
algorithms set user specified synonym inclusion properties include numerical plausibility factor certainty relationship expected hold 
order probabilistically derive new synonyms homonyms associated plausibility factors authors perform pairwise comparison objects input schemas considering similarity properties related objects attributes relationships objects participate 
psu focus find pairs objects schemas similar sense attributes relationships different types type entity attribute relationship 
similarity objects value range 
similarity exceeds threshold regard objects matching regard type conflict significant 
schema matching main step algorithm 
pair objects compared objects related rahm bernstein survey approaches automatic schema matching contribute degree similarity weight inversely proportional distance distance minimum number relationships path 
objects closely related attributes objects directly count heavily reachable paths relationships 
algorithms embodied dike system described ptu ur 
related algorithms authors tu 
univ milano univ univ reggio schema integration tool cdd cd 
computes affinities range attributes match step 
completes schema integration clustering attributes affinities constructing views clusters 
algorithm operates hybrid relational oo model includes name data types cardinalities attributes target object types attributes refer objects 
computes matches weighted sum name data type affinity structural affinity 
name affinity generic domain specific thesauri association names synonym hypernym general relationship fixed affinity type association 
data type affinity data type compatibilities 
structural affinity entities similarity relationships emanating entities 
component heterogeneous database mediator called mediator multiple information sources bcv bcc 
integrates independently developed schemas virtual global schema basis objectbased data model uses represent relational objectoriented semi structured source schemas 
relies lexical system wordnet description logic inference tool tools produce integrated virtual schema 
offers query processor optimization query heterogeneous data sources 
cupid microsoft research cupid hybrid matcher element structure level matching mbr 
intended generic data models applied xml relational examples 
uses auxiliary information sources synonyms abbreviations acronyms 
dike entry auxiliary sources include plausibility factor range 
dike cupid exploit entries ordinary words invoice synonym bill requiring exactly match compound names elements bill address 
algorithm phases 
phase linguistic element level matching categorizes elements names data types domains making cupid hybrid 
parses compound element names tokens delimiters product id product id categorizes data types calculates linguistic similarity coefficient data type linguistic content compatible pairs names substring matching auxiliary sources 
second phase transforms original schema tree bottom structure matching resulting structural similarity pairs element 
transformation encodes referential constraints structures matched just structures making cupid constraint 
similarity elements root structures similarity leaf sets 
similarity exceeds threshold leaf set similarity incremented 
focus leaf sets assumption information content represented leaves leaves variation schemas internal structure 
phase concludes calculating weighted mean linguistic structural similarity pairs elements 
third phase uses weighted mean decide mapping 
phase regarded application dependent emphasized algorithm 
experiments run compare cupid dike schema examples 
cupid performed somewhat better 
interesting results value particular features algorithm particular aspects examples detailed summarize 

related prototypes section describes prototypes offer functionality related schema matching approaches discussed 
clio ibm almaden univ toronto clio tool development ibm research almaden aims semi automatic user assisted creation match mappings target schema new data source schema 
consists set schema readers read schema translate internal representation correspondence engine ce identify matching parts schemas databases mapping generator generates view definitions map data source schema data target schema mi 
correspondence engine matches obtained knowledge base entered user graphical user interface 
miller algorithm deriving mapping target source set element substructure matches match expressions 
selects matches cover maximal set columns target schema uses constraint reasoning suggest join clauses tie components source schema 
proposes sample data instances input schemas interactively guide construction mapping query verify correctness 
similarity flooding stanford univ univ leipzig mgr melnik graph matching algorithm called similarity flooding sf explore usability rahm bernstein survey approaches automatic schema matching schema matching 
approach converts schemas directed labeled graphs uses fixpoint computation determine matches corresponding nodes graphs 
produces local global mapping schema elements 
sf algorithm implemented operators prototype manipulation tool 
addition structural sf matcher tool supports operators name matcher schema converters filters combined scripts 
typical match script starts converting input schemas internal graph representation 
name matcher suggest initial element level mapping fed structural sf matcher 
step various filters applied select relevant subsets match results produced structural matcher 
tool accepts input formats particular sql ddl xml rdf 
delta mitre delta represents simple approach determining attribute correspondences utilizing attribute descriptions chr 
available metadata attribute text description attribute name type information grouped converted simple text string document full text information retrieval tool 
ir tool interpret document query 
documents schema matching attributes determined ranked 
selection matches result list left user 
approach easy implement depends availability expressiveness text descriptions attributes 
chr compares experimental match results obtained delta obtained tool proposes combine approaches result composite matcher 
univ massachusetts amherst system helping cope schema evolution le 
schema set types 
takes definition old new type produces program transform data conforms old type data conforms new type 
accomplish automatically creates mapping old new type schema level matching algorithm 
presumes high degree similarity schemas 
identifies pairs types match candidates recursively tries match substructure top fashion 
elements match candidates name pair subelements match type type constructor order preference name matching preferred 
recursion bottoms scalar subelements 
recursive calls percolate back matching decisions coarser grained elements results finer grained subelements 
sense performs structure level element level matching 
tree matching nyu zhang shasha developed algorithm find mapping labeled trees zs zs implemented system approximate tree matching 
purely structural match notion synonym hypernym 
cope name mismatches treating rename transformations map tree 
implementations available 
course large literature graph isomorphism useful 
investigation relevance specific problem schema matching scope 

schema matching basic problem database application domains heterogeneous database integration commerce data warehousing semantic query processing 
proposed taxonomy covers existing approaches described approaches detail 
particular distinguished instance level element structure level constraint matchers discussed combination multiple matchers 
taxonomy characterize compare variety previous match implementations 
hope taxonomy useful programmers need implement match algorithm researchers looking develop effective comprehensive schema matching algorithms 
instance attention utilization instance level information reuse opportunities perform match 
past schema matching done context particular application domain 
problem fundamental believe field benefit treating independent problem begun doing 
see quantitative relative performance accuracy different approaches 
results tell existing approaches dominate help identify weaknesses existing approaches suggest opportunities research 

grateful helpful suggestions sonia bergamaschi castano chris clifton hai hong hai doan alon halevy jayant madhavan sergey melnik ren miller rachel pottinger rosenthal dennis shasha anonymous referees 
bbc bergamaschi castano information integration project demonstration 
proc th int conf large data bases pp 
batini lenzerini navathe sb comparative analysis methodologies database schema integration 
acm comput surv rahm bernstein survey approaches automatic schema matching data element tool analysis delta 
mitre technical report mtr bm berlin motro automated discovery content virtual databases 
proc th int conf cooperative information systems coopis lecture notes computer science vol 

springer berlin heidelberg new york pp 
bcv bergamaschi castano semantic integration semistructured structured data sources 
acm sigmod record bergamaschi castano heterogeneous information sources 
data knowl eng bs bell gs sethi matching records national medical patient index 
cacm berners lee hendler lassila semanticweb 
sci am bernstein pa management feasible 
panel overview 
proc th int conf onvery large data bases pp 
bernstein pa halevy pottinger ra vision management complex models 
vision management complex models 
acm sigmod record br bernstein pa rahm data warehouse scenarios model management 
proc th int conf entity relationship modeling lecture notes computer science vol 

springer berlin heidelberg new york pp 
bright mw hurson ar sh automated resolution multidatabases 
tods cd castano de schema analysis reconciliation tool environment 
proc int database eng appl symp ideas ieee computer new york pp 
cdd castano de de di global viewing heterogeneous data sources 
ieee trans data knowl eng chr clifton rosenthal experience combined approach attribute matching databases 
proc ifip working conf 
database semantics cohen ww integration heterogeneous databases common domains queries textual similarity 
sigmod conf pp 
ddl doan ah domingos levy learning source descriptions data integration 
proc webdb workshop pp 
ddh doan ah domingos halevy reconciling schemas disparate data sources machine learning approach 
proc acm sigmod conf pp 
ep elmagarmid ak pu guest editors special issue heterogeneous databases 
acm comput surv ejx embley dw xu multifaceted exploitation metadata attribute match discovery information integration 
workshop information integration web pp 
gw goldman widom dataguides enabling query formulation optimization semistructured databases 
proc th int conf large data bases pp 
haas lm miller rj roth schwarz pm wimmers el transforming heterogeneous data database middleware integration 
ieee tech bull data eng korth hf kuper gm feigenbaum van gelder ullman jd system database system universal relation assumption 
acm tods larson ja navathe sb elmasri theory attribute equivalence databases application schema integration 
software eng lc li clifton heterogeneous databases neural networks 
proc th int conf large data bases pp 
lc li clifton tool identifying attribute correspondences heterogeneous databases neural network 
data knowl eng lcl li clifton liu database integration neural network implementation experiences 
knowl inf syst le lerner bs model compound type changes encountered schema evolution 
acm tods mbr madhavan bernstein pa rahm generic schema matching cupid 
proc th int conf large data bases pp 
mrss maier sc stein warren ds logical data independence relational query language relations 
sigmod conf pp 
mgr melnik garcia molina rahm similarity flooding versatile graph matching algorithm 
proc th int conf data eng appear miller rj haas hern andez ma schema mapping query discovery 
proc th int conf large data bases pp 
mir miller ye ioannidis ramakrishnan schema equivalence heterogeneous systems bridging theory practice 
inf syst mi miller clio project managing heterogeneity 
acm sigmod record mz milo zohar schema matching simplify heterogeneous data translation 
proc th int conf large data bases pp 
mitra wiederhold jannink knowledge sources 
proc fusion sunnyvale usa mitra wiederhold kersten model articulation ontology interdependencies 
proc extending database technologies lecture notes computer science vol 

springer berlin heidelberg new york pp 
ps parent spaccapietra issues approaches database integration 
cacm unified graph framework deriving nominal properties type conflicts object cluster similarities 
proc th ifcis int conf cooperative information systems coopis ieee comput pp 
psu semi automatic properties database schemas 
proc int 
database engineering applications symp 
ideas ieee comput pp 
rahm bernstein survey approaches automatic schema matching psu automatic technique detecting type conflicts database schemas 
proc th int conf information knowledge management cikm pp 
ptu system dike semi cooperative information systems data warehouses 
proc adbis dasfaa conf pp 
deriving similarities heterogeneous semi structured information sources 
proc th int conf cooperative information systems coopis lecture notes computer science vol 

springer berlin heidelberg new york pp 
yuan chen sc lu ma semantic access semantic interface querying databases 
proc th int conf large data bases pp 
sl sheth ap larson ja federated database systems managing distributed heterogeneous autonomous databases 
acm comput surv tu deriving object classes semi structured information sources 
advances data management tata mcgraw hill pp 
ur tools extraction exploitation intentional knowledge heterogeneous information sources 
ph thesis 
www ing inform zip ws wald ja sorenson pg explaining ambiguity formal query language 
acm tods wang yu wong approximate graph schema extraction semi structured data 
proc extending database technologies lecture notes computer science vol 

springer berlin heidelberg new york pp 
wang zhang jeong shasha system approximate tree matching 
ieee trans data knowl eng yan miller rj haas lm fagin data driven understanding refinement schema mappings 
sigmod conf pp 
zs zhang shasha simple fast algorithms editing distance trees related problems 
siam comput zs zhang shasha approximate tree pattern matching 
galil eds pattern matching strings trees arrays 
oxford university oxford pp 
zhang shasha wang fast serial parallel algorithms approximate tree matching vldc conf combinatorial pattern matching pp 
zhang shasha wang cs nyu edu cs faculty shasha papers agm html cs nyu edu cs faculty shasha papers tree html cs nyu edu cs faculty shasha papers html 
