formalisation java exception mechanism bart jacobs dep 
comp 
sci univ nijmegen box gl nijmegen netherlands 
bart cs kun nl www cs kun nl bart 
examines java exception mechanism formalises main operations throw try catch try catch type theoretic setting 
formalisation uses called coalgebras modeling java statements expressions providing convenient setting handling various termination options may arise exception handling closely java language speci cation semantics exceptions loop project java program veri cation 
illustrated example veri cations pvs 
loop project university nijmegen aims java program veri cation proof tools pvs isabelle special purpose front compiler called loop tool see translating java classes logic back proof tools 
incorporated loop tool semantics sequential java higher order logic pvs isabelle 
distinguishing feature semantics mathematical basis called coalgebras 
aspects semantics described see semantics exceptions published 
topic 
aim formalisation clarify existing informal speci cation provide semantical basis tool assisted veri cation java programs 
currently main application area javacard 
earlier publications shall describe java semantics language pvs isabelle hol type theoretic common abstraction incorporates essentials higher order logic 
described brie section 
main type constructors labeled product coproduct function space list 
information see 
higher order logic need exists pvs isabelle hol take granted 
exceptions form integrated aspect java programming language contribute reliability robustness programs written java semantics exception mechanism clear 
exceptions occur programs certain constraints violated division zero array access arrays bounds object creation unused memory left situation seen unexpected inappropriate programmer 
occurrence exception program leads called abrupt termination means subsequent statements skipped locks released possibly exception handler reached 
says exception thrown point occurs caught point handled 
shall see exception handling exceptions type 
restore normal operation exception handled properly 
java exception mechanism integrated synchronisation model relevant consider means exceptions thrown caught ects ow control multi threaded scenario 
describe part java pre de ned exception hierarchy superclasses sitting subclasses 
object throwable error exception user de ned exceptions nullpointerexception class throwable direct subclass root class object 
subclasses error exception 
errors instances error exceptions programs ordinarily expected recover xx 
instances error special called unchecked exceptions 
checked exceptions java compiler sure method handles exception catch statement declares method header void throws ioexception throws clause may understood contract implementor user style design contract see xx 
overriding method subclass respect throws clause method overridden superclass throw exceptions 
exception checked play ole java semantics loop project 
return break continue statement java leads abrupt termination 
normal termination restored point exception arises java called termination model exceptions resumption model see 
semantics programming languages exceptions forms illustration appropriateness coalgebras organise relevant structure di erent termination modes distinguished coproduct types 
general coalgebra transition function form 

structured result type captures certain kind computation set states 
see :10.1.1.37.1418
semantics described terms monads :10.1.1.34.8403
monadic view emphasises inputoutput relation coalgebraic view emphasises state aspect computations leads notions invariant bisimilarity logic appropriate modalities shall brie describe hoare logic :10.1.1.15.9976
advantage coalgebraic approach reason emphasise type system forces explicitly handle possible termination options box 
see instance cases de nitions try catch try catch section closely corresponding cases distinguished java language speci cation 
di erent alternative incorporate exceptions state space continuation approach operational axiomatic approaches 
simpli es type state transformers expense complicating state space certainly forms abrupt termination taken account handling various cases transparent 
axiomatic semantics exceptions studied example weakest precondition calculus involving single possible exception forms abrupt termination java 
starts introductory sections 
brief account simple type theory concentrating labeled products 
coalgebraic representation java statements expressions explained associated hoare logic dealing di erent termination modes 
forms basis formalisations exception throwing section exception handling section 
section parts try catch try catch 
part contains extensive quote java language speci cation containing informal explanations exception handling 
subsequently section describes example programs involving tricky aspects exception handling 
appropriate speci cations provided language jml proved translation loop tool pvs :10.1.1.34.8403
brief look type theory type theory 
basic types bool string unit singleton type plus function types labeled products coproducts list type constructors 
assume familiar wish mention notation labeled product function types 
types form product record type lab lab labeled coproduct variant type lab lab labels lab assumed di erent 
example known lift type constructor lift bot unit adds bottom element arbitrary type terms labeled tuple lab lab mn inhabiting corresponding product type lab lab 
term lab lab product type write lab selection term type similarly term labeled tagged term lab coproduct type lab lab term lab lab coproduct type terms containing free variable case term cases lab 
lab xn 
ln type binds function types shall standard notation lambda abstraction 
application 
basics java semantics described earlier loop tool provides semantics sequential java translating java classes higher order logic pvs isabelle 
section introduce basic aspects semantics provide setting description exception handling remainder 
concentrate special types coalgebraic representation statements expressions basic language constructs 
memory model constructed speci type om object memory 
consists heap stack static memory consisting nite series memory cells 
memory cells store contents objects arrays 
type om comes various put get operations reading writing object memory 
precise structure relevant follows interested reader referred information 
elements om called states 
values type 
type theory reftype type def null unit ref null non null consisting memory location inhabiting appropriate type pointing memory cell heap 
included type information shall assume part memory cells 
function type theory gettype om classname classname def string gives speci memory location type object stored heap 
type represented string 
special predicate type theory subclass 
classname classname bool incorporating subtype relationship classes strings 
statements expressions java may di erent termination modes hang nite loop terminate normally terminate abruptly typically exception statements return break continue 
options captured appropriate datatypes 
abnormal termination leads types statements expressions 
type theory type def excp es om ex reftype om break bs om blab lift string cont cs om lift string type def es om ex reftype types de ne result types statements expressions type theory statresult type def hang unit norm om abnorm type def hang unit norm ns om res abnorm java statement translated state transformer function om statresult java expression type function om 
statements expressions coalgebras 
result functions applied state om yields hang norm abnorm appropriate parameters indicating sort outcome 
basis representation statements expressions language constructs sequential java translated 
instance composition statements de ned type theory om statresult om statresult def om cases 
hang 
hang norm 

abnorm 
abnorm important note hangs terminates abruptly composition particular exception thrown subsequent statements executed 
recall throwable root class exceptions 
constructors call native method creating exception object 
loop semantics corresponding function called exception 
takes string argument exceptions message performs basic memory operations allocating appropriate new memory cell heap storing message skip details exception mention type type theory exception string om es om ex reftype takes string state produces appropriately adapted return state non null exception object created return state 
exception classes java api typically call constructors throwable create new instances 
exception classes directly 
speci cations exceptions coalgebraic representation statements expressions formalises different termination modes occur 
naturally gives rise hoare logic di erent corresponding modes reasoning normal abnormal states see 
example partial hoare triple stat post informally says precondition pre holds statement stat terminates abruptly throwing non null exception see exception belongs class postcondition post holds 
formally semantics take backtrace eld throwable account 
type theory pre om bool post om reftype bool stat om statresult classname stat post bool def om pre 
cases stat 
hang 
true norm 
true abnorm 
cases excp 
cases ex null 
true ref 
subclass 
gettype 

es 
post 
es 
ex 
true break 
true cont 
true notice postcondition type om reftype bool say exception object example subsection 
similar hoare triples de ned termination modes 
essential reasoning java programs example proving suitable postcondition program involves exception inside loop see 
di erent termination modes occur behavioural interface speci cation language jml section :10.1.1.34.8403:10.1.1.34.8403
jml preand post conditions describe normal exceptional behaviour 
loop tool translates jml speci cations suitable hoare formulas combining termination options see details 
throwing exceptions programmer java explicitly throw exception command throw expression expression belong throwable subclasses 
statement immediately lead abrupt termination 
java language speci cation xx says throw statement rst evaluates expression 
evaluation expression completes abruptly reason throw completes abruptly reason 
evaluation expression completes normally producing non null value throw statement completes abruptly reason throw value evaluation expression completes normally producing null value instance class nullpointerexception created thrown null 
throw statement completes abruptly reason throw value 
loop tool uses translation throw statements 
throw expression def throw 
expression function throw captures explanation ordinary language type theoretic formulation 
type theory om reftype throw 
om statresult def om cases 
hang 
hang norm 
cases res null 
exception 
nullpointerexception 
ns abnorm excp es es ex ex ref 
abnorm excp es ns ex ref abnorm 
abnorm interestingly formalisations loop project bali project see revealed omission rst edition java language speci cation xx case expression evaluates null covered :10.1.1.34.8403
subsequent suggestion improvement repaired second edition described quote 
important implicit assumption java related thrown exception null 
invariant holds clearly exceptions thrown users seen de nition throw explanation throw holds exceptions thrown java virtual machine synchronous asynchronous exceptions see 
assumption explicit hard wired bali semantics automatically holds syntactic distinction valid locations null exceptions return valid locations 
play ole way formalise catching mechanism 
catching exceptions neatly handling possible exceptional cases statement java uses try followed series catch blocks di erent exceptions possibly followed block 
terminates normally catch block executed block 
results exception say belonging class rst catch block series handles exceptions executed followed block 
list catches try statement translated list type theory consisting pairs strings label exc functions label handler reftype statements corresponding handler code 
possible input functions exception thrown try statement 
parameter exceptions treated local variables 
initialised reftype input handler function 
interpretations loop tool look follows 
fh catch en en def try catch 
tb 
exc handler reftype 
exc en handler vn reftype en en vn hn fh catch en en def try catch 
tb 
exc handler reftype 
exc en handler vn reftype en en vn hn 
fb type theoretic functions try catch try catch interpretations described separately 
involve subtle case distinctions easy understand direct access relevant descriptions java language speci cation 
included 
try catch java language speci cation xx says try statement block executed rst executing try block 
choice execution try block completes normally action taken try statement completes normally 
execution try block completes abruptly throw value choice run time type assignable parameter catch clause try statement rst leftmost catch clause selected 
value assigned parameter selected catch clause block catch clause executed 
block completes normally try statement completes normally block completes abruptly reason try statement completes abruptly reason 
run time type assignable parameter catch clause try statement try statement completes abruptly throw value execution try block completes abruptly reason try statement completes abruptly reason 
behaviour realised try catch function 
rst executes rst argument meaning try block exception occurs calls recursive function try loop 
earlier mentioned invariant exception assumed non null 
choose arbitrary outcome hang null case distinguished 
type theory om statresult list exc classname handler reftype om statresult try catch 

om statresult def om cases 
hang 
hang norm 
norm abnorm 
cases excp 
cases ex null 
hang don care see ref 
try loop 

es 
break 
break cont 
cont try loop function recursively goes list exception class names corresponding handler functions checking exception assignable parameter 
uses subclass 
predicate 
list reached exception handled returned 
type theory list exc classname handler reftype om statresult try loop 

om statresult def om cases nil 
abnorm excp es ex ref cons 
subclass 
gettype 


exc handler 
ref 
try loop 


endif try catch nally starting point java language speci cation xx 
cases distinguished 
try statement block executed rst executing try block 
choice execution try block completes normally block executed choice block completes normally try statement completes normally 
block completes abruptly reason try statement completes abruptly reason execution try block completes abruptly throw value choice run time type assignable parameter catch clause try statement rst leftmost catch clause selected 
value assigned parameter selected catch clause block catch clause executed 
choice catch block completes normally block executed 
choice 
block completes normally try statement completes normally 
block completes abruptly reason try statement completes abruptly reason 
catch block completes abruptly reason nally block executed 
choice 
block completes normally try statement completes abruptly reason 
block completes abruptly reason try statement completes abruptly reason reason discarded 
run time type assignable parameter catch clause try statement block executed 
choice block completes normally try statement completes abruptly throw value block completes abruptly reason try statement completes abruptly reason throw value discarded forgotten 
execution try block completes abruptly reason block executed 
choice block completes normally try statement completes abruptly reason block completes abruptly reason try statement completes abruptly reason reason discarded type theory om statresult list exc classname handler reftype om statresult try catch 

om statresult def om cases 
hang 
hang norm 


cases excp 
cases ex null 
hang don care see ref 
try loop 


es 
cases 
hang 
hang norm 
abnorm abnorm 
break 
cases 
bs hang 
hang norm 
abnorm break bs blab blab abnorm 
cont 
cases 
cs hang 
hang norm 
abnorm cont cs abnorm 
fig 

formalisation java try catch formalised steps see figures 
main di erence try catch function occurrence additional nally statement executed possible outcome try statement catch statements 
subtle point case statement terminates abruptly return break continue nally clause terminates normally side ect passed eventual result state 
explicitly stated quote xx explicit type theoretic formalisation 
illustrated example section 
function try loop handles actual catching nally statement needs executed possibility 
involves appropriate handling side ects 
results expected 
lemma 
skip om statresult function om directly terminates normally 
locations statements om statresult lists list exc classname handler reftype om statresult 
try loop 

skip try loop 


try catch 

skip try catch 

proof 
rst statement follows induction 
second unpacking de nitions distinguishing cases 
ut examples order illustrate ole formalisation java exception mechanism shall discuss examples 
arti cial java programs concentrating exception handling 
relevant properties programs stated annotations written behavioural speci cation language jml :10.1.1.34.8403
shall describe language detail hope annotations largely self explanatory 
examples translated pvs loop tool 
jml annotations predicates class implementations 
actual java code translated speci implementation 
possible prove pvs implementation satis es jml speci cation 
done examples 
proofs proceed entirely automatic rewriting unfolding particular type theoretic functions exception handling previous section require real user interaction 
say proofs 
hope reader organisational semantical complications involved 
side ects clauses previous section formalisations try catch try showed handling side ects nally clause state 
shall see ects take place java 
purpose java program 
java class int int aux test try return normal behavior requires true modifiable ensures result old old old old int test return aux test class public static void main string args new system println test example contains classes 
printing speci result outcome test method initialised default value 
main method print 
subtle points 
course clause ect return statement leads abrupt termination 
secondly result aux test method shows ect value bound result method clause increment statement uence outcome 
jml speci cation test method involves higher degree generality restricted case 
states test method terminates normally result equals sum values method call plus 
states method may modify modi cation shown result method 
said speci cation holds method implementation 
proof pvs relies try catch formalisation subsection 
exception selection second example concentrates selection appropriate catch clause thrown exception 
requires auxiliary exception classes suitable inheritance relations exception java class extends exception public string super class extends public string super class extends exception public string super class int void throws exception throw new oops exceptional behavior requires true modifiable signals old equals oops void test throws exception string try catch catch throw new bla catch exception throw new exception thrown method handled second catch subclass 
subsequently third catch clause executed course clause incremented 
exception thrown clause eventually appears 
jml speci cation method test tells method terminate abruptly 
resulting abnormal state value original state method call message exception oops 
veri cation pvs proceeds entirely automatic involves small rewrite steps 
java exception handling mechanism powerful technique increasing reliability robustness programs written java 
proper requires proper understanding behaviour 
type theoretic semantics helps clarify di erent termination possibilities may occur describing coalgebras precise formal language 
allows precisely formalise throw catch behaviour informal language speci cation 
semantics forms basis java program veri cation appropriate hoare logic proof tools 
illustrated java programs involving non trivial exception handling speci cations jml veri ed pvs 
gilad bracha tobias nipkow david von oheimb discussing con rming exception invariant 
joachim van den berg marieke huisman hans meijer erik poll provided useful feedback rst draft 

alves foss lam 
dynamic denotational semantics java 
editor formal syntax semantics java number lect 
notes comp 
sci pages 
springer berlin 

van den berg huisman jacobs poll 
type theoretic memory model veri cation sequential java programs 
bert choppy mosses editors trends algebraic development techniques number lect 
notes comp 
sci pages 
springer berlin 

van den berg jacobs 
loop compiler java jml 
techn 
rep csi comput 
sci 
inst univ nijmegen 
appear tacas 

budd 
understanding object oriented programming java 
addison wesley 
updated edition 

christian 
correct robust programs 
ieee trans 
software eng 

gosling joy steele 
java language speci cation 
java series 
addison wesley 

gosling joy steele bracha 
java language speci cation second edition 
java series 
addison wesley 

huisman 
reasoning java programs higher order logic pvs isabelle 
phd thesis univ nijmegen 

huisman jacobs 
inheritance higher order logic modeling reasoning 
harrison editors theorem proving higher order logics number lect 
notes comp 
sci pages 
springer berlin 

huisman jacobs 
java program veri cation hoare logic abrupt termination 
maibaum editor fundamental approaches software engineering number lect 
notes comp 
sci pages 
springer berlin 

huisman jacobs van den berg 
case study class library veri cation java vector class 
techn 
rep csi comput 
sci 
inst univ nijmegen 
appear software tools technology transfer 

jacobs poll 
logic java modeling language jml 
techn 
rep csi comput 
sci 
inst univ nijmegen 
appear fase 

jacobs poll 
monad basic java semantics 
rus editor algebraic methodology software technology number lect 
notes comp 
sci pages 
springer berlin 

jacobs rutten 
tutorial algebras induction 
eatcs bulletin 

jacobs van den berg huisman van 
reasoning classes java preliminary report 
object oriented programming systems languages applications oopsla pages 
acm press 

leavens baker ruby 
jml notation detailed design 
kilov rumpe editors behavioral speci cations business systems pages 
kluwer 

leino 
reliable modular programs 
phd thesis california inst 
techn 

leino van de 
semantics exceptions 
olderog editor programming concepts methods calculi pages 
north holland 

lindholm yellin 
java virtual machine speci cation second edition 
java series 
addison wesley 

meyer 
object oriented software construction 
prentice hall nd rev edition 

von oheimb 
analyzing java isabelle hol formalization type safety hoare logic 
phd thesis techn 
univ unchen 

von oheimb nipkow 
machine checking java speci cation proving type safety 
alves foss editor formal syntax semantics java number lect 
notes comp 
sci pages 
springer berlin 

owre rushby shankar von henke 
formal veri cation fault tolerant architectures prolegomena design pvs 
ieee trans 
softw 
eng 

paulson 
isabelle theorem provers 
odifreddi editor logic computer science pages 
academic press london 
apic series vol 


poll van den berg jacobs 
speci cation javacard api jml 
ferrer chan watson editors smart card research advanced application pages 
kluwer acad 
publ 

poll van den berg jacobs 
formal speci cation javacard api jml class 
comp 
networks mag 
appear 

loop project 
www cs kun nl bart loop 
type theory om statresult list exc classname handler reftype om statresult try loop 

om statresult def om cases nil 
cases 
hang 
hang norm 
abnorm excp es ex ref abnorm 
cons 
subclass 
gettype 


exc cases handler 
ref 
hang 
hang norm 


cases excp 
cases 
es hang 
hang norm 
abnorm excp es ex ex 
abnorm 
cases 
hang 
hang norm 
abnorm 
abnorm break 
cases 
bs hang 
hang norm 
abnorm break bs blab blab 
abnorm cont 
cases 
cs hang 
hang norm 
abnorm cont cs 
abnorm try loop 



endif fig 

formalisation auxiliary function try loop 
