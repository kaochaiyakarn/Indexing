self monitoring self adapting operating systems margo seltzer christopher small harvard university extensible operating systems allow applications modify kernel behavior providing mechanisms application code run kernel address space 
extensibility enables system support broader class applications currently supported 
discusses key challenge making extensible systems practical determining parts system need extended 
determination parts system need extended requires self monitoring capturing significant quantity data performance system 
determining extend system requires self adaptation 
describe extensible operating system vino situ simulation explore efficacy policy changes 
automatic exploration applicable extensible operating systems systems self adapting workload demands 
today extensible operating systems allow applications modify kernel behavior providing mechanisms application code run kernel address space 
advantage approach provides improved application flexibility performance disadvantages buggy malicious code jeopardize integrity kernel great deal left application application designer 
demonstrated feasible simple mechanisms software fault isolation transactions protect kernel errant extensions 
understood identify modules critical application performance replace modify better meet application needs 
ability applications modify kernel key extensible operating systems cal drawback 
power derived enabling applica tions control resource allocation kernel policy lead improved performance increased functionality better system integration imposes tremendous burden application developer 
application designer determine kernel modules critical application performance modifications modules required 
determining parts kernel critical application performance requires depth understanding demands application places operating system 
application areas data base management demands understood 
application domains case emerging applications demands understood convenient method obtain ing information 
need data lessons learned major software development project data system operating going wrong 
saltzer reminds designers measurement trustworthy intuition reveal problems users detected 
encourages designers focus understanding inner workings system relying response changes workload 
lucas conveys similar message encouraging system designers regularly run benchmarks build instrumentation possible 
systems words wisdom built significant performance evaluation tools today systems show surprising dearth native mea tools 
produced noticeable absence systems 
today common research platform unix initially little way perfor mance measurement tools standard set utilities provide constant monitoring system state netstat 
utilities designed output read humans processed automatically 
system collection performance monitoring tools benefit line analysis regularly captured output 
second source readily available data comes hardware 
today microprocessors contain instrumentation counters provide invaluable data performance analysis 
example ieee pentium processor family contains bit cycle counter bit counters configured count number hardware events tlb misses cache misses segment register loads 
sparc alpha microprocessors performance counters extensive set available pentium processors 
regular monitoring collection hardware counters provide source information insight sys tem behavior 
self monitoring section introduces methods making ing system self monitoring 
details context vino operating system prototype self adapting system built 
principles approaches applicable number systems support extensibility spin 
vino extensible operating system designed provide resource intensive applications greater control resource management 
vino supports downloading kernel extensions written protected software fault isolation 
facilitate graceful recovery extension failure vino runs invocation extension context transac tion 
invocation fails aborted resources transaction mechanism undoes actions taken invocation extension 
vino kernel constructed collection objects consists inner kernel set resources 
vino provides different modes extensibility 
process replace implementation member function method object type extension override default policies cache replacement read ahead 
second process register handler event kernel establishment connection particular tcp port 
extensions type construct new kernel services nfs servers 
vino approach self monitoring adaptability takes advantage extensible architecture vino system providing features 
continuous monitoring system construct database performance statistics 

correlation database process process type process group 

collection traces logs process activity 

deriving heuristics algorithms improve performance observed patterns 

situ simulation new algorithms logs traces 

adapting system results sim ulation 
steps described detail sections 
monitoring vino subsystem includes statistics module maintains counts important events handled subsystem 
example transaction system records number transactions begun committed aborted number nested transactions begun committed aborted 
locking system maintains statistics number lock requests time obtain release locks 
module system records statistics relevant module provides interfaces access statistics 
step making vino self monitoring periodically record statistics kernel modules accumulate database performance activity 
vino mechanism provided constructing event graft responds timer event polls kernel modules records statistics collects 
factor overhead measure ment thread running measurement graft thread normal thread accounting pro 
compiler profile output second source system performance information comes compiler 
harvard project produced version suif compilation system collects detailed profiling information 
compiling vino suif compiler collect detailed statistics concerning code path coverage branch prediction accuracy kernel 
statistics augment collected measurement thread described previous section 
tracing logging measurement thread output compiler profile output represent static data characterizes behavior system 
task capture dynamic data behavior system 
vino grafting architecture facilitate collection dynamic data 
attach simple inputs outputs modules system 
input methods record incoming request stream pass requests original destination module 
record incoming requests called trace captures workload module drive module replacement simulation 
similarly placed output methods module record outgoing messages data passing module 
record outgoing results called log captures results particular module compare efficacy number different modules policy decisions module 
set traces logs available simulation 
simulation combination statically gathered data traces logs creates complete picture system asked 
step evaluate currently implemented policy determine efficacy potential possible policies 
vino grafting mechanism provides ability perform situ simulation 
significant improvement conventional simulation methodology entirely separate simulation systems typically evaluate design decisions 
vino provides mechanism replace kernel module process basis simulation process simply replace module investigation alternate implementation rerun trace record result log produced system alternate implementation 
result logs multiple simulation runs compared determine simulations produced best results 
modules inside vino kernel instantiated simulation modules 
simulation modules iden tical real modules modify global state 
simulations run affecting rest system 
simulators real modules share code increase code size substantially results realistic 
similar technology employed design analysis file systems encouraging results 
modules support simulation consist logical sets states set writable real simulation instances module cated instance modules second set writable real instance module states shared system wide 
returning example buffer cache module meta data buffer headers falls category actual data falls second 
simulation modules run affecting rest system affected activities system 
allows simulations run different configurations 
self adaptation components described section provide framework building self monitoring adaptable operating system 
statistics gathered provide invaluable feedback identifying performance critical portions kernel 
impor data gathered context actual loads reflects demands workload practice demands artificial bench marking workload 
data collected access low level interface provides detailed data typically available user level ties 
step making system self modifying endow proper analytic tools allow detect unusual problematic occurrences 
different types analysis system changes 
online analysis takes advantage data collected line analysis consists post processing phase 
general line system responsible monitoring long term behavior system identifying common uncommon profiles suggesting thresholds online system evaluating feasibility system changes 
online system responsible monitoring current state system posing questions line system identifying trouble spots arise 
show sections online line systems gathering data performing analysis task best suited system 
line analysis described section part measurement system kernel thread polls subsystems regular intervals records state performance counters 
collection data written system wide database statistics processing 
line analysis phase uses database specific queries online system input 
line analysis system consists collection user level processes process system data accomplish goals construct characterization system normal behavior detect anomalous behavior anomalous behavior suggest performance thresholds online system 
goal depends significantly goal order identify behavior accurate view normal behavior 
consider selection measurement inter val example line system works provide useful information online system change system behaves 
normal system characterization time series analyses resource utilizations 
resource memory disk network processor maintain utilization statistics 
initially kernel thread collects utilization statistics ms periodically hour data collected millisecond 
data writ system wide database 
night line system performs variance analysis 
examines ms data determines default measurement interval sufficiently short fail capture important utilization patterns 
current measurement interval determined appropriate offline system performs variance analysis normal intervals determine measurement interval increased loss information 
resource line system feeds interval information back measurement thread modifies behavior recommendation line system 
way online line systems interact allow measurement thread run infrequently possible loss important information 
task line system examine day resource usage profile identifying periods anomalous behavior informing online system suggested thresholds resource utilization 
analyzed behavior systems comprise central computing facility general system usage follows regular pattern course week 
analyzing system profiles compare day profile profiles constructed profiles previous day day previous week day previous month 
profiles generate profile day compare daily profile profile looking periods abnormal utilization 
detect abnormally high utilization trigger detailed analysis 
order perform detailed profile analysis decompose daily profile process profiles 
process profiles determine anomaly caused single process small group processes increase system load 
results profile analysis fed back line system derives expected loads thresholds day 
expected loads analysis current day profile previous week month profile 
thresholds observed variances profiles 
day thresholds expected profiles fed back online system 
online analysis online system responsible monitoring instantaneous resource utilization rate change utilization 
addition maintains efficiency statistics hit rates cached objects system contention rates locking system disk queue lengths voluntary involuntary context switch counts 
expected behavior thresholds line system online system responsible detecting red flag conditions cases resource zation outside expected variance climbing 
condition detected online system options select adaptation heuristic install appropriate trace generating graft resource question producing data line sys tem 
approach effective system designers priori understanding types algorithmic changes beneficial 
techniques similar dynamic operating system algorithms multi level feedback scheduling working set virtual memory management 
discuss heuristics section 
approach method resort effort develop new algorithms improve performance particular workload 
system detects red flag condition heuristic improve generates trace poorly performing module signals line system analyze trace 
line system computes optimal behavior system imposed load compares optimal behavior actual behavior 
actual behavior acceptable margin optimal line system concludes module question significantly improve performance invokes detailed system analysis identify suspect modules 
current algorithm significantly effective optimally possible goal offline system suggest new heuristics online system 
surprisingly key areas research development system 
adaptation heuristics typical goal adaptation decrease latency application 
rule latency caused application waiting availability resource 
waiting caused application blocking user input outside control system caused application blocking resource unavailable due operating system policy deci sion 
call form blocking compulsory form needless 
goal adaptation heuristics reduce needless blocking 
rest section discuss causes needless blocking heuristics identifying causes methods decreasing amount needless blocking system 
paging techniques dealing high paging overhead known decades 
general application paging assumed working set application larger number physical pages assigned physical memory 
allocating additional pages application reduces number pages application working set size application swapped order increase amount physical memory available 
similar techniques environment 
application paging heavily generate trace pages faulted application value program counter page fault 
collect detailed traces pages address space generating full trace page accesses 
technique adds considerable overhead provides complete page access history 
page access traces look simple known patterns linear memory traversal correlation function calls page 
case perform simple prefetching case perform slightly complex prefetching faulting appropriate data pages application enters function data referenced 
disk wait similar system modifications alleviate disk waiting 
detect application spending time waiting disk generate trace disk block requests capturing satisfied cache required operations 
case page faults look common patterns 
application performing linear pass file common case normal read ahead policy performing aggressive read ahead 
application spending time processing page takes system read page disk read ahead reduce eliminate amount time application spends waiting disk 
case compulsory component disk waiting time removed 
application appears randomly accessing file compare traces multiple runs applica tion determine blocks file accessed repeatable order 
graft application specific read ahead policy knows ordering 
patterns easily construct application specific read ahead policies include strided reads common scientific applications clustered reads seek followed fixed size sequential read 
cpu bound processes application simply cpu bound techniques improve performance 
suif gather information branch mispredictions 
chip counters pentium gather information cache misses code data tlb misses branch target buffer hits misses 
find application suffering large number branch mispredictions poor code layout request recompilation poorly performing kernel functions context particular application 
install recompiled kernel segment application specific graft 
interrupt latency time spent waiting interrupt take place compulsory time occurrence interrupt application runs needless 
previous studies latency point slow systems users 
reducing latency improve application performance user satisfaction 
order measure latency time stamp interrupts arrive compute difference time process interrupt delivered scheduled 
goal detect interrupt handling latencies variance latencies perceptible users 
detect cases try determine cause modify system behavior appropriately notify application potential areas improvement 
example process blocks long higher priority processes recommend raising priority 
find process typically faults immediately scheduled sign event handling code paged 
case pin code pages event handler memory 
process ready event mouse interrupt arrives process performs select mouse device recommend application restructured check events frequently 
lock contention lock highly contended queue processes waiting lock long problem structure applications lock 
detect processes waiting unusually long lock queues decrease granularity locked resource pos sible reduce contention 
note reduction granularity frequently possible resource question kernel resource structure understand may possible resource applica tion resource 
case signal application contention particular resource abnormally high 
summary summary construct framework system self monitoring may adapt changes workload supports providing improved service functionality 
accomplish 
grafting necessary components vino system self monitoring 
designing developing system collect analyze performance data 
developing heuristics algorithms adapting system changes workload 
situ simulation compare competing policy implementations 
baker hartman kupfer shirriff ousterhout measurements distributed file system proceedings th sosp pacific grove ca oct pp 

bershad savage pardyak sirer fiuczynski becker eggers chambers extensibility safety performance spin operating system proceedings th symposium operating system principles copper mountain dec 
bosch mullender cut past file systems integrating simulators filesystems proceedings usenix technical conference jan pp 

computer systems research group university california berkeley bsd system manager manual reilly associates 
computer systems research group university california berkeley bsd user manual reilly associates 
digital semiconductor alpha microprocessor hardware manual order number ec te 
digital equipment maynard ma 
endo wang chen seltzer latency evaluate interactive system performance proceedings nd osdi seattle wa october 
ferrari computer systems performance evaluation prentice hall englewood cliffs nj 
hall anderson amarasinghe murphy liao bugnion lain getting performance multiprocessors suif compiler ieee computer december 
intel pentium processor family developer manual 
volume architecture programming manual intel 
lucas henry performance evaluation monitoring acm computing surveys vol 
september pp 

park development systematic approach bottleneck identification unix systems 
harvard university computer systems technical report tr april 
saltzer instrumentation multics communications acm vol 
august pp 

seltzer small smith symbiotic systems software proceedings workshop compiler support systems software 
seltzer endo small smith dealing disaster surviving misbehaving kernel extensions proceedings second symposium operating system design implementation seattle wa october 
stonebraker operating support database management communications acm july 
sun stp ii addendum controller user manual revision spare technology business sun microsystems business mountain view ca 

