design distributed rating scheme peer peer systems dutta ashish goel ramesh govindan hui zhang exist successful examples online reputation rating systems line markets ratings 
peer peer applications explicit ratings subsystem ignored system design implicit assumption trust altruism users 
assumption true matter network infancy relatively small size 
assumption break increase size diversity network 
discuss issues design rating schemes systems 
keeping design philosophy system consider design distributed rating systems 
case study illustrate different approaches distributed rating system aimed tackling free rider problem networks 
key challenge designing rating schemes collusion proof discuss efforts direction 
rating people goods services fundamental way add value entities 
rating user system creates perception influences users interact system 
consider widely rating systems ebay com epinions com 
com 
sites thrive providing ratings sellers goods stores respectively 
provide valuable advice users collective experience users 
ratings generally reputation systems useful especially communities independent users preferences choose users interact 
reputation system ebay com popular approach build trust internet 
existing examples systems centralized nature 
posit applications need distributed rating schemes inter related reasons 

systems distributed nature 
building centralized rating mechanism may compatible philosophy open distributed sys department computer science university southern california 
ramesh usc edu 
department management science engineering courtesy computer science stanford university 
stanford edu 
tems 
example truly distributed systems promote free exchange information grass roots level making difficult authorities monitor transactions occurring systems 

users prefer distributed systems central point keep track private actions 
centralized system easier monitor users activities 
distributed system single user aware transactions user 
absence central server avoids central point failure 
discuss issues arise design distributed reputation schemes section ii 
section iii efficient techniques randomization design efficient distributed mechanisms rating users 
show techniques design distributed reputation systems improve performance scalability peer peer systems 
years file sharing applications napster gnutella kazaa freenet morpheus gained tremendous popularity internet 
systems classified unstructured napster gnutella freenet structured distributed hash table dht systems type overlay topologies create 
focus distributed rating scheme tackling free rider phenomenon observed systems napster gnutella section iv distributed rating mechanism different ratings validation schemes 
validation scheme structured verification scheme svs relies supervisory overlay 
second validation scheme lightweight unstructured verification scheme uses simple random sampling technique require structured overlay 
note key challenge designing rating schemes collusion proof discuss efforts section ii 
problem statement objectives open economic community maximize quality service qos different entities users 
translate file loads fast data transfers system example translate better customer service provided 
performance system better users participate actively providing better services 
basic characteristic open economic system users freedom decide want contribute system 
users choose cooperate 
users classified behaved misbehaving 
misbehaving users divided selfish greedy selfish users interested benefit 
moment get utility change actions strategies 
systems called strategyproof resistant single user misbehaving 
users collude order satisfy individual selfish needs 
systems resistant collusion called group strategy proof 
adversarial malicious adversarial users bothered 
goal subvert system 
subverting system context may include worms fake files example 
ratings systems rely altruism users rate interactions users expect rating system need protect selfish malicious users 
free rider phenomenon practical problem brings need distributed rating system free rider phenomenon observed file sharing systems 
phenomenon characteristics files reported belong small percentage users respectively 
ratio number queries number users respond queries similar 
quality availability system dependent small subset users 
majority users time hour users 
just download files resources available 
users really participate network goes basic premise systems 
prevalence free riders harder deploy large robust systems users system effectively clustered centralized loose sense leads possibility system collapse increased vulnerability 
clearly rating scheme user level service concomitant participation system help alleviate free rider problem 
argued rating scheme needs distributed keeping grass roots nature systems 
discussing distributed ratings scheme systems list general issues design schemes 
iii 
solution space section discuss basic design issues building reputation system distributed fashion 
address questions 
kind rating information 

manage rating information distributed fashion 

system resilient greed 

system resilient 
deferring section discussion 
rating component rating architecture property rating information 
issue 
briefly discuss different options ratings positive vs negative positive rating quantitatively describes services user provided community 
negative rating users start zero incentive users change names identifiers 
see discussion social cost cheap pseudonyms 
user assigned negative ratings bad fraudulent transactions 
want users cases 
way detect isolate misbehaving users 
negative rating effective malicious users change identities 
positive rating negative rating design goals needed handle different types users practical reputation system 
continuous vs steps raw rating value user may represent accumulation feedback users may represented integer variable increases monotonically 
directly rating values steps 
example level positive rating system defined difference level require user get order magnitude recommendations users 
show discrete rating system useful handling 
full window vs sliding window consider complete history user transaction ratings received past sliding window 
sliding window motivates users contribute community continuously 
ratings sliding windows alleviate effect user dynamics users joining leaving rating verification techniques discussed 
managing rating information central server consider possible approaches answer second question 
clearly general approaches take 
self maintaining supervisor 
self maintaining approach user maintains related information rating locally 
user wants know user rating information asks directly 
efficient approach information stored locally users willing keep track positive rating information benefit 
approach problems 
user exaggerate positive rating complete control rating information 
solution verify rating information randomly sampling users claims served turn requires user record list servers received services successfully 
second problem user unwilling record negative information 
solved complicated monitoring scheme just maintaining negative information users approach 
supervisor approach user behavior monitored users called supervisors 
message related rating directed supervisors 
approach robust malicious users decisions group supervisors takes subjected voting 
supervisors chosen appear random users supervised user 
cheating 
addition small loops supervisory graph order prevent formation small groups control ratings 
iv 
distributed rating scheme cooperation section positive rating distributed rating scheme free rider problem 
verification rating scheme assume network selfish users 
place important restriction users support basic routing operations keep system running normal state 
request fail due lack resources asked fail discarded middle routing operation 
restriction reasonable observed real systems past studies measurements 
assume routing operations compromised users 
user rate users service receives store ratings 
service includes factors number successful requests response delay download speed file transferring transaction rating user defined set users served sliding window 
satisfied request certain user increased certain value 
actively user participates system requests satisfy higher 
believe giving better services users higher rating information introduce incentives cooperation 
generic description distributed rating scheme requesting user claim rating value encapsulate query message 
responder decide satisfy request claimed rating exact mechanism satisfying user request rating somewhat application dependent 
example keep single queue order requests rating values 
provide differentiated service information return initial part music file users lower ratings 
key problem generic description verify rating 
discuss kinds ratings verification schemes 
structured verification scheme structured scheme user random designated supervisors 
transaction user supervisors update rating value appropriate value 
break verification problem subproblems set supervising network distributed fashion 
perform cheat proof supervising 
supervising overlay mentioned section iii supervising network contain small loops order collusion 
graphs satisfy condition rings binary trees star topologies 
choose ring overlay topology user supervises immediate successors 
simplicity choose user supervises immediate successors ring 
main supervisor immediate successor 
successor suc cessor works backup supervisor 
reputation related transactions happen user main supervisor backup supervisor periodically refreshes rating information corresponding main supervisor 
choose give equal responsibility supervisors considering 
chord ideal infrastructure setting maintaining ring supervisory overlays 
chord organizes users ring user mapped fixed point ring hashing ip address 
neighbors chord may relation 
relationship user supervisor 
cheat proof supervising suppose user sends request satisfied user super denote main supervisor user additional supervising operations incorporated regular request operation receives request decides accept request sends message notifies super ongoing transaction transaction notifies super chord protocol update rate transaction information 
way hand shaking procedure needed confirm id clearly operations add extra latency regular request operations done transaction 
rating verification chord infrastructure verification rating information simple 
user needs verify rating information gets id ring topology hashing ip address sends rating query supervising overlay id target key 
chord protocol guarantees query intercepted take log hops deliver main supervisor implies hard user indulge small group collusion 
lightweight unstructured verification scheme section propose lightweight unstructured verification scheme 
require additional supervising overlay verification simple random sampling technique 

random sampling verification basic idea simple 
user keep list customers served list servers served details transactions 
user wants service user sends list customers request 
user decides verify rating samples subset customer list conform received claimed service 
members sample say trusts provides service depending rating cheat proof properties due random sampling 
scheme raises privacy concerns due disclosure customer list certificate 
communication cost associated transfer customer list high 
transferring complete customer list scheme incurs little communication cost randomly sample customers requesting user customer list 

randomly sampling accessing complete customer list assume requesting user server 
wants verify rating information randomly sampling customers 
dimensional key space say hashes customers point ip addresses 
customers distributed randomly evenly space 
key space divided say equal bins 
counts number customers hashed bin records numbers entry vector 
sends vector constant communication cost bytes kb despite real size customer list 
randomly picks bins probability proportional number customers bin asks send detailed information customers chosen bins 
follows rest steps described previous section 
collusion clearly verification schemes easily detect non cooperative users lie 
strategy proof 
avoid collusion 
positive rating user give credit users effortlessly 
discuss techniques alleviate collusion problem 
discrete rating choose star rating system mentioned section iii clique group lying users members benefit collusion 
dynamic characteristic users high cost effort organizing large colluding group prohibit behavior 
negative rating negative rating defined payment user service receives 
negative ratings positive ratings selfish users incentives give credits collusion discouraged group selfish users net gain group rating summation rating group members equal due collusion 
easily implemented proposed structured rating scheme 
additional operation successful request notify requestor supervisors rating reduced accordingly 
unstructured rating scheme naive implementation idea design rule user claim user customer service customer time 
simple colluding schemes defeat rule 
example colluding group organized ordered subgroups ga gb gc ga member subgroup may claim members subgroup customers 
improving design unstructured rating scheme collusion proof ongoing 
non selfish collusion non selfish collusion group tries act way members benefit collusion 
example non selfish collusion single physical user generating multiple virtual ids users ids gets higher rating 
example non selfish collusion group adversarial users subvert system bother individual reputation 
thing note collusion benefit individual negative rating 
user get rid bad reputation changing id reputation system equipped positive rating negative rating biases new users positive rating costly commit successful malicious attack 
note hard detect non selfish efficiently 
network user claims successfully downloaded file difficult determine download 
detect download proxy forwarding monitoring difficult determine normal action 
vi 
related quick ratings nicely 
authors schemes calculate reputation vectors similar 
study methods cheat proof scheme distributed 
architectures extensively studied past 
example systems napster gnutella unstructured chord structured 
survey research scope 
trend incentive compatible distributed system design 
authors concise survey incentives design better wireless ad hoc networks 
authors reputation scheme isolate malicious content providers systems 
scheme protection collusion relies set known pre trusted users calculation global reputation values requires synchronization network 
clear reputation calculation algorithm scale network size 
vii 
discussed general design issues involved building distributed rating scheme 
schemes wide applicability 
specific problem systems free rider problem positive rating reputation system distinct mechanisms validate rating information 
current direction design efficient distributed rating schemes collusion free 
resnick kuwabara zeckhauser friedman reputation systems communications acm vol 
pp 

ratnasamy francis handley karp shenker scalable content addressable network acm sigcomm 
stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications acm sigcomm 
adar huberman free riding gnutella monday oct 
saroiu gummadi gribble measurement study peer peer file sharing systems tech 
report uw cse university washington 
kollock production trust online markets advances group processes vol 
edited lawler walker 
greenwich ct jai press 
friedman resnick social cost cheap pseudonyms journal economics management strategy 

moukas maes collaborative reputation mechanisms electronic marketplaces hicss 
kamvar schlosser garcia molina eigentrust algorithm reputation management networks appear th www conference 
feigenbaum shenker distributed algorithmic mechanism design results directions th international workshop discrete algorithms methods mobile computing communications acm press new york 
koenig ries klein stimulating cooperative behavior autonomous devices analysis requirements existing approaches second international workshop wireless information systems wis 
