enforcing high level protocols low level software reliability infrastructure software operating systems web servers hampered resources memory network connections 
vault programming language allows programmer describe resource management protocols compiler statically enforce 
protocol specify operations performed certain order certain operations performed accessing data object 
furthermore vault enforces statically resources leaked 
validate utility approach enforcing protocols interface windows kernel device drivers 

past years witnessed wide spread acceptance safe programming languages due popularity java 
safe language uses combination exhaustive static analysis run time checks management ensure program free entire classes errors type errors memory management errors 
ironically class software safe language movement low level infrastructure software needs highly reliable operating systems database management systems internet servers 
exhaustive analysis safe language provides promising way increase reliability class software methods testing previously proved useful incapable achieving goal high reliability 
infrastructure software manipulates resources memory blocks files network connections database transactions graphics contexts 
correctness software depends correctly managing resources dangling leaks race conditions obeying resource specific usage rules example order operations resource applied 
refer resource management protocols 
today protocols typically recorded documentation enforced testing 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
pldi snowbird utah copyright acm robert deline manuel hndrich microsoft research microsoft microsoft way redmond wa vault microsoft com vault programming language provides new feature called type guards programmer specify domain specific resource management protocols 
protocol specify operations performed certain order certain operations performed accessing data object operation thread computational vault type checker exhaustively seeks reports violation protocol 
short move description resource management protocols software project documentation source code automatically enforced compile time 
validate utility type guards describe enforce resource management protocols existing interface windows kernel device drivers 
describes resource management features vault keys type guards application windows device drivers 
section discuss general framework type guards instantiation vault current design 
informally introduce keys widely known examples memory regions unix sockets 
section explains vault type system enforces resource management protocols 
section describes protocols interface window kernel drivers enforce 
section discusses related section concludes 

describing resource protocols check resource management protocols vault uses extended notion type checking 
typical type checker uses types discriminate values program manipulates ensure operation applied appropriate values 
vault type system extends type predicate called type guard auxiliary condition value type 
vault type checker tracks abstraction computation global state program point 
program access value program point value type guard true computation global state point 
light say type describes operations valid type guard describes operations valid 
keys track resources current design vault global state computation predicate language type guards intentionally statically checking thread reaches operation clearly undecidable 
accessing value means applying primitive operation reading writing pointer arithmetic operation numerical value 
kept simple enable efficient decision procedure 
global state called held key set consists set keys simply compile time tokens representing run time resources 
distinct key represents unique run time resource context distinct keys represent distinct resources 
keys duplicated lost providing fundamental mechanism tracking resource management compile time 
keys purely compile time entities impact runtime representations execution time 
atomic predicate type guards key held key set 
type guard true conjunction atomic predicates 
data object guarded zero keys program point object keys held key set order program access data object point 
type checker evaluates predicates compile time 
type guards impact run time representation execution time 
vault statement expression syntax programming language declaration declares variable type declaration declares variable guarded type means variable type key held key set point program variable accessed 
expressiveness held key set tracks local state called key state key 
key states simply names 
instance programmer may choose describe files having local states open closed 
variation previous declaration declares key local state guards variable order access variable key held key set local state examples local key states importance simply omit 
depending syntactic context omitted key states default fixed unique state represent possible state 
summary keys model properties resources resource accessible key held key set conceptual state resource key local state 
features vault manipulate keys tracked types associate keys resources functions filter keys held key set types key parameters specialize types particular keys keyed variants turn keys values static checks dynamic checks 
tracked types 
vault keeps track availability state individual run time objects vault type checker needs way distinguish identities run time objects confuse 
challenge program text may contain names run time object aliases 
vault key provides symbolic name object identity tracked type provides correspondence compile time key run time object 
declaration states usual variable names run time object type call 
declaration provides alias information type checker checks scope key program names type refer object program names refer ob ject vault type rules guarantee calls functions manipulate object reflect state changes key 
short benefit giving object tracked type vault type checker trace availability state object program text cost limitations program names may alias object 
tracked allocation acts primitive key granting mechanism run time operation allocates fresh object heap 
compile time compiler generates fresh key named associated fresh data object adds key held key set 
key represents availability memory resource heap allocated data structure 
example uses key guard integer programmer chosen tie availability variable availability program points key held key set program may access points key set program may access 
local name key important 
cases programmer may compiler manage key names 
code similar refer key name scope directly 
pass value functions key may named scopes 
primitive key revoking mechanism vault operation 
example operation takes argument type requires key held key set 
compile time operation key longer set 
run time operation deletes heap allocated data structure 
functions 
vault function type pre postcondition respectively state keys held key set call function keys held key set function returns 
brevity sake pre postconditions written effect clause states function changes key set 
effect clause written square brackets 
key effect clause states key held state held function returns state 
effect clause states key held state won held function returns 
effect clause states key held held function call 
effect clause states return fresh key unknown context held state shorthand write common case omit key states altogether importance 
example function signature akin function prototype describes function takes tracked file parameter key key names bound referenced scope program variable bound point 
restrictions type context operation 
restrictions keys embedded consumed calling function 
types key parameters 
vault supports parameterized types 
familiar case parameterize types types 
instance dimensional array types data declared follows type definition type array floating point numbers 
vault type may parameterized key set 
currently restrict key set parameters singleton sets 
instance type declaration declares type abbreviation single integer guarded key type instantiated 
example signature describes function takes parameters tracked file key called record field guarded key guards keys purely compile time entities function compiled function ordinary parameter ordinary parameter 
keyed variants 
vault supports algebraic data types called variants functional languages 
example optional integer described type declaration variant constructors constant constructor called constant takes parameters construc tor takes integer parameter 
values type value type vault statement supports pattern matching variants 
variants important key management vault constructors may key parameters written braces 
example variant declaration constructing value type constructor requires key held key set re moves key set 
pattern matching value type restores key held key set case 
example code template default bit width type parameter bits 
widths explicitly declared vault 
vault interface describing region abstraction 
key appear held key set follows 
key held entry foo 
code determines close file early 
true branch key longer held record fact variable 
false branch record fact hold key 
note creating value removes key held key set conceptually attaching flag value run time representation keys 
code section key held key set 
recover testing value case code section hold key case type checker knows code section key held 
assuming code section consume key call section valid code paths state key held corresponds declared effect 
detail glossed code type variable tracked 
necessary variant type may hold key 
allowed variable copied tracking aliases key extracted multiple times worse extracted lost 
code show key associated variable forgetting test flag manifest extra key function 
keyed variants programmer turn static knowledge particular key held dynamic value variant 
pattern matching keyed variants enables programmer help compiler recover static knowledge particular key held dynamic values 
variant type acts invariant enables type checker safely move static dynamic knowledge regarding held key set 
variant types useful expressing correlations different state changes return values functions 
aspect variants illustrated section encode failure conditions 
features allow programmer describe useful variety resource management protocols 
provide features remainder section applies simple examples 
section shows features check resource protocols interface windows device driver kernel 
checking memory regions keys typical program uses functions allo cate deallocate individual heap objects 
alternative regions called arenas heaps 
region named subset heap 
program individually allocates objects region deallocates region deallocating individual objects 
crary walker morrisett create safe region abstraction vault shown :10.1.1.1.3704
interface declares type called type representation private mod ule implements interface 
vault program uses region abstraction 
function correctly uses function accesses dangling function contains region memory leak 
function creates new region individually tracked 
function deletes region removes key key set 
allocate object region vault provides primitive operation form tracked region key new construct returns object type object guarded key object accessible long region accessible 
call delete objects allocated region inaccessible 
shows functions region abstraction errors 
function correctly uses region abstraction 
calling creates new region key label point object allocated region guarded key increment field requires guarding key held key set call deletes region removes key held key set invalidating access variables function reverses region delete operation increment field effect calling removes key set increment expression incorrect requires key function contains subtle error 
function explicit effect clause promises pre post key set keys added keys removed 
call function extra key held key set function 
function implementation violates implicit effect clause error 
region interface catches dangling memory leaks 
ignore possibility allocation failure 
practice returns variant indicating success failure 
vault interface describes socket abstraction 
checking sockets keys connection oriented sockets popular software abstraction inter process inter machine communication client server architectures 
developing server architecture error prone setting socket accept connections communicate involves steps omitting steps common beginner mistake 
prevent mistakes create vault interface socket library 
interface uses ability keys states enforce necessary steps create connection oriented socket ready receive messages 
function creates new socket key raw state 
see order receive message socket key ready state 
effect clauses functions show functions change state key raw named named listening respectively 
function takes tracked socket key listening state returns new tracked socket key ready state state needed receive message 
interface sockets somewhat naive ignores possibility failure 
describe example fact operation fail change function signature function consumes tracked socket key raw state returns variant 
variant constructors constructor describes failure case parameter provides error code explains error constructor describes success case 
constructors attached key different states 
case socket correctly changed named state case socket remains raw state 
variant type forces programmer check status result calling consider program forgets check status result call removes socket key held key set precondition violated 
order call programmer check status result checking return status case puts socket key back held key set state named call legal 
case key raw state example try operation 
limitations approach extending type system track compile time names resources limitations consider resources kept collections anonymous types values agree program join points 
tracking arbitrary numbers resources 
vault uses compile time names track resources vault statically track unbounded number resources 
previous examples programs dealt fixed numbers resources keys names statically bound program text 
programmer obviously write static names unknown number resources 
anonymous tracked types gets problem 
instance declare type list contains unbounded number tracked regions type allows program store unbounded number regions 
placing region list anonymous lose track exactly key guards region 
example program creates region allocates point data structure region 
access point guarding key held key set 
put region list lose key 
keys duplicated put region key list retain key 
take region back list pattern matching 
placing region list key anonymous type checker knows key associated tracked region know key key incrementing field illegal requires key held key set contains fresh key 
fix error program list pairs regions points list type maintains correlation region key point key guard 
short vault type checker track fixed number resources keys statically bound names arbitrary number resources keys anonymous 
illegal vault program illustrates anonymizing aspect tracked collections 
illegal vault program uses data correlation encode region availability 
type theory anonymity discussed section 
type agreement join points 
consider program correlates value variable region deletion status 
program fact memory safe vault type checker reject 
commented join point held key set contain key depending branch taken 
result type checker know precondition subse quent call satisfied 
limitation types agree program join points common limitation type checking approach program verification 
order example acceptable vault sign hold key needs explicit keyed variant similarly example section 
correlating tests condition second branch switch variant initialized branches test 

vault type system vault type system capability calculus alias types :10.1.1.1.3704
language complete typing rules lengthy 
sketch tracked types type guards represented underlying type language structure type checker 
vault typing rules similar capability calculus rely soundness proof ensure soundness vault type checking 
type checker job translate vault surface syntax kinds variables contexts key set key set variable empty key set key mapping key set union key key token state state variable bounded variable state token default state existentials existential type types universal type guarded type named type singleton type tuple type type variable function type variant type underlying type language types internal type language assign internal types program terms statements expressions 
discuss roles various types play 
part type checking standard lexical scope type checker keeps environment maps program names types keys checks inductively program term applied subterms correct type 
addition type checker ensures type guards violated 
type checker forms control flow graph function computes held key set node graph 
held key set function entry node precondition key set function effect clause 
type checker ensures held key set function exit nodes postcondition key set function effect clause 
control flow join points actual names local keys incoming key sets analyze remainder control flow graph distinct alias relationships local variables 
imperative loops may require declared loop invariants invariant inferred fixed number iterations 
loop invariants take form function type multiple outcomes possible loop exit 
inputs function variables loop 
loops device driver case study type checker automatically infers loop invariants trivial 
tracking aliases key ensuring program resource resource released keep track various names program refers resource 
tracking aliases program delete resource name 
vault key serves unique name resource type checker uses key refer resource matter aliases resource program text contains 
type surface syntax gives rise key translated singleton type internal type language 
singleton type represents run time value handle manipulate unique resource key alias resource program text singleton type pair assignments variables assigned singleton type fresh calling deletes key held key set prevents region referenced name deletion 
important aspect tracking aliases ensuring keys duplicated 
instance type system allow region key twice held key set program deletes region twice type check correctly cause error run time 
functions vault surface syntax functions combines function pre postcondition single effect clause internal function type separates key set held call function key set held function returns 
functions vault polymorphic 
function polymorphic keys arguments 
example function signature called tracked file regardless particular key 
second state key omitted function polymorphic state third function affects keys mentioned signature keys held key set irrelevant 
vault function callable different contexts type polymorphic rest set mentioned function signature 
forms polymorphism function assigned type variable refers rest held key set function affect variable refers key variable refers state key 
function called value type program point held key set includes key associated type existential types existential types useful encoding certain values carry capabilities 
existential type represents value type holding capabilities existentially bound variables provide way actual names keys states types instance consider function signature calling function returns tracked region returns capability calculus key called resource key set called capability 
new resource key needed access resource 
function assigned type returned existential type binds new region singleton type key needed access region 
access value existential type type unpacked 
unpacking means creating fresh names existentially bound variables acquiring capability carried value 
clearly unpacking yields capability values existential types freely copied program capabilities duplicated 
control duplication existential types carry capabilities maintain invariant environments map program variables unpacked types 
existential types unpacked bound environment 
example function parameters unpacked entry function 
existential types basis keeping anonymous tracked resources collections 
instance type previous section type internal type language element list existential type 
element list unpacked generates fresh name existentially bound key 
technical sense keys anonymous existential types related unique types programming language concurrent clean 
clean unique type written equivalent vault type anonymous tracked type 
clean support named tracked types unable express alias relationships 

case study windows drivers device drivers pose important reliability risk operating systems drivers generally execute kernel protected mode 
device driver different machine configurations sits multithreaded kernel reproducing erroneous behavior driver difficult 
testing proven way achieve high reliability drivers 
section describe vault type checker catches compile time errors difficult reproduce run time 
difficulty writing correct device driver 
typically manufactures device provides device driver 
developer creating device driver familiar device interface driver hardware complex source errors 
faults lie interface device driver kernel 
interface quite complex part due variety devices interact kernel part due need performance 
source complexity interface kernel driver asynchronous nature 
driver provides collection services kernel starting device reading device writing device shutting device 
driver implemented module function service 
lifetime request driver lifetime call corresponding service function 
keep kernel blocking driver request driver service function expected return quickly regardless driver completed request 
achieve desired asynchronous interface windows request encapsulated data structure called request packet irp 
kernel passes data structure driver calls service functions driver handles request updating data structure time 
driver completes request calls function irp signal completion kernel return irp 
complication driver isolation sits driver stack 
example kernel floppy disk drive typically sit drivers order file system driver driver generic storage device floppy disk driver bus driver 
driver stack may choose handle request pass request driver stack pass new request set requests driver stack 
part kernel device driver deal contingencies kernel level programming 
instance moment processor interrupt levels 
processor current interrupt level governs kernel functions called memory available 
kernel memory space divided pages virtual memory system manages locked accessible 
pointer block paged memory accessed particular page known resident current interrupt level virtual memory system handle page fault page resident 
driver dereferences pointer non resident paged block interrupt level prevents virtual memory system running entire operating system deadlocks 
section shows aspects device drivers described vault 
test ideas wrote vault description interface windows kernel device driver 
translated existing driver floppy disk device lines vault lines 
vault driver uses vault interface interact kernel subject checking describe section 
vault compiler compile driver source code cases chose deviate original kernel interface example choosing represent status code variant integer order allow static checking 
driver directly linked original kernel 
wrote thin wrapper differences data representation 
driver linked wrapper runs successfully windows production quality due incomplete modeling memory allocations 
run performance measurements resulting code 
requests packets windows documentation describes ownership model request packets 
initially irp belongs kernel 
kernel calls driver service function gives ownership irp driver 
driver take actions complete request calling gives ownership irp back kernel call pass ownership irp driver stack call far concentrated keeping vault syntactically close possible numbers reflect inherent blow vault type system 
evaluating programming burden vault annotations 
retain ownership irp call service function 
driver may legally access irp ownership 
irp ownership model corresponds naturally tracked types 
vault typical driver service routine signature signature states service routine obtains ownership parameter irp pass ownership back caller 
furthermore service routine return value type enforce possible functions mentioned called keep type service routine type return status parameterized key irp request way service routine generate value calling functions context particular invocation 
avoids common error drivers exhibit code paths completed passed 
leave driver manage queues pending irp requests consume irp key 
driver consumes key storing irp pending list anonymizing packaging key irp 
thread coordination windows kernel provides thread coordination mechanisms events 
event allows thread block thread takes action 
vault description events pass key thread coordinating access data key protects initialization function takes tracked object key transferred thread 
multithreaded program key set thread 
pass key threads thread calls blocks second thread calls call second thread longer key held key set thread unblocks gains key held key set 
typical windows drivers floppy driver uses event mechanism pass irp ownership driver described section 
similarly describe kernel spin locks vault interface protects common locking errors 
lock created tracked data object way access object acquire lock 
second way vault detect memory leaks finding keys function final held key set promised signature post key set vault similarly detect missing lock releases 
third key appear held key set multiple times vault detect program acquires lock holds second acquire introduce key held key set 
approach inadequate model reentrant locks 
request completion routines mentioned earlier driver passes irp driver stack calling loses ownership irp 
driver needs pass irp lower driver regain ownership irp lower driver completed 
driver attaches completion routine irp function called irp lower driver completes 
driver completion routine returns status processing required driver gains ownership irp 
describe completion routines vault definitions function sets irp completion routine function takes device object tracked irp consumes irp key 
code shows shows common idiom ownership irp passed lower driver 
code uses completion routine learn lower driver finished event resume processing left calling lower driver 
shows service function plug play request request shut device 
function declares event parameterized irp key declares local function function sets irp completion routine function passes irp driver call call ownership irp passed driver reflected fact key longer held key set 
function waits event lower driver completes irp kernel owns irp calls completion routine completion routine turn signals event passing ownership back function 
completion routine returns status tell kernel driver accepted ownership irp 
call careful reader concerned completion routine signal driver owns irp forget return situation lead dangling 
fact happen constructor variant takes irp key parameter key longer held key set call defi driver uses event completion routine regain ownership irp passing lower driver 
returns key appears held key set 
code call free ac cess variable interrupt levels paging represent processor interrupt level windows terminology details vault previously 
keys typically arise tracked types programmer statically declare key 
second optionally define partial order states key constrain state variables states 
features represent current processor interrupt level global key definitions describe preconditions various kernel functions 
function re quires interrupt level kernel function flexible 
requires interrupt level equal function polymorphic local state key captured explicit state variable upper bounded state function complicated 
requires interrupt level equal entry nition variant completion routine consumes irp parameter choice re turn option type check 
raises interrupt level exit 
returns result value represents interrupt level entry 
definitions type parameterized state similar having type parameterized key describe complex behavior previous kernel function function uses bounded polymorphism local state key uses state variable refer state key call site order reflect level result type 
uses arrow notation state function changes key state state represented state examples constrained state variables form type checker uses partial order specified declarations determine constraints satisfied 
constrained states describe types paged memory introducing type guard interrupt level 
value paged type may accessed program points interrupt request level ensuring page handler service possible page faults 
internally paged type represented driver accesses data paged kernel memory interrupt level prevents virtual memory system running result unpredictable behavior data page happens resident access fine kernel deadlocks tries run virtual memory system 
subtle error difficult reproduce correct 
interrupt level guard data paged memory vault type checker finds errors compile time 

related inspired part typestate approach provided programming language nil 
nil states attached objects types 
nil allow aliasing objects severely restricting class programs expressed nil 
involving calculus capabilities crary walker smith morrisett shows track states objects presence aliasing :10.1.1.1.5638:10.1.1.1.3704
essential improvement typestate approach add level indirection objects state keys 
non aliasing requirement confined keys aliasing relationships objects explicit 
provides theoretical basis vault type system 
system differs minor details direct pre post conditions functions continuation passing style leads infer join point abstractions path fragments different key sets 
fundamental difference introducing number complications exposing rich type language programmer intuitive way 
order allow general graph structures objects tracked individually tracked groups 
canon ical example group tracking memory regions safe explicit deallocation 
region annotations types particular kind predicate stating named region freed order access data 
related approach tracking individual objects programming language concurrent clean 
concurrent clean uses unique types represent objects 
operations array updates may performed destructively objects unique type purely functional language modification distinguished copy 
clean unique types correspond vault anonymous tracked types key remains unnamed 
technically unique types correspond singleton types key existentially bound :10.1.1.1.5638
sagiv reps wilhelm provide framework intraprocedural shape analysis valued logic 
framework express detailed alias relations currently expressible vault example function returning pointer element list leaving list intact 
glance type guards similar type qualifiers 
type qualifiers refine type object manipulated guarding access object accessed 
furthermore type qualifiers constant change state 
guarded types viewed form qualified types qualification quantifies store type instantiable current store predicate satisfied framework qualified types lacks notion state 
vault shares motivation extended static checking esc 
esc starts memory safe language module java precludes lowlevel system code device drivers 
furthermore esc takes pragmatic approach aliasing tracking aliasing correctly procedure consider possible aliasing relationships created procedure calls 
esc order logic arithmetic pre post conditions 
presence specification ghost variables allows tracking state object similarly local key states 
describe creation disappearance resources possible keys key sets object available attach presence information 
hand vault formalism ambitious terms expressible pre post conditions example express arithmetic relationships 
techniques described complement esc 
flanagan propose type system java statically detect data races 
approach compiler tracks held lock sets checks lock guards class fields 
similar keys type guards system differs lock acquire releases syntactically scoped synchronize expression 
method call change lock set 
furthermore locks class values restricted form syntactic expressions 
possible system pass object separate lock protecting object method 
vault project slam project microsoft research focussed exhaustive static analysis enforce protocols low level software 
vault slam focusses existing software written slam tools iterative approach slam tools create precise ab walker shows express lists pointers element explicitly point alias relationships need anticipated don sagiv 
program model checker search abstraction protocol violations 
refinement stops violation violation limitation tools reached 
context metal project engler programmer written compiler extensions check properties code compile time 
properties system able check similar ones described proper matching lock acquire release 
contrast vault metal approach relies syntactically recognizing state transitions lock acquire release matching names specific functions 
sufficient checking stylized properties acquiring releasing lock function approach require annotations similar ones proposed check invariants established inter procedurally 

case study windows drivers gives initial confidence resource management features vault sufficient model real world interfaces 
need continue validating features domains graphic interfaces parts kernel interface 
providing resource management features new language existing allows design language type checking tractable 
downside new language investment existing languages terms legacy code terms training 
hope basing syntax popular language leverage training cost 
wrapping vault interfaces existing code allows legacy code reused 
wrapper code new source errors looking tool support area 
considering adding keys new language currently deployed microsoft 
device driver complex single compilation unit 
ensure vault typing rules restrictive prevent useful programs writing front vault vault 
system multi stage pipeline stage results stored region 
experience allow evaluate burden vault annotations typing restrictions 

ball rajamani 
automatically validating temporal safety properties software 
proceedings acm sigplan conference programming language design implementation june 
barendsen smetsers 
conventional uniqueness typing graph rewrite systems 
th conference foundations software technology theoretical computer science lncs pages dec 
crary walker morrisett 
typed memory management calculus capabilities 
popl 
detlefs leino nelson 
rep exposure 
technical report compaq src jul 
engler chelf chou hallem 
checking system rules system specific programmer written compiler extensions 
symposium operating systems design implementation osdi oct 
flanagan freund 
type race detection java 
proceedings acm sigplan conference programming language design implementation june 
foster hndrich aiken 
theory type qualifiers 
proceedings acm sigplan conference programming language design implementation pages may 
gay aiken 
memory management explicit regions 
proceedings acm sigplan conference programming language design implementation number sigplan notices pages june 
jones 
theory qualified types 
science computer programming june 
selected papers fourth european symposium programming rennes 
jones 
simplifying improving qualified types 
proceedings conference functional programming languages computer architecture pages june 
kernighan ritchie 
programming language 
prentice hall nd edition 
leino nelson 
extended static checker modula 
koskimies editor compiler construction cc pages lisbon 
springer lncs 
conference record th annual acm sigplan sigact symposium principles programming languages 
acm press jan 
sagiv reps wilhelm 
parametric shape analysis valued logic 
popl pages 
smith walker morrisett 
alias types 
proceedings european symposium programming mar 
strom yellin 
extending typestate checking conditional liveness analysis 
ieee transactions software engineering may 
strom yemini 
typestate programming language concept enhancing software reliability 
se jan 
tofte 
talpin 
implementation typed call value calculus stack regions 
conference record st annual acm principles programming languages pages jan 
walker crary morrisett 
typed memory management calculus capabilities 
transactions programming languages systems 
walker morrisett 
alias types recursive data structures 
proceedings th workshop types compilation sept 
