computer networks experienced explosive growth past years growth come severe congestion problems 
example common see internet gateways drop incoming packets local buffer overflows 
investigation problems shown cause lies transport protocol implementations protocols obvious ways implement window transport protocol result exactly wrong behavior response network congestion 
give examples wrong behavior describe simple algorithms right things happen 
algorithms rooted idea achieving network stability forcing transport connection obey packet conservation principle 
show algorithms derive principle effect traffic congested networks 
october internet series congestion collapses 
period data throughput lbl uc berkeley sites separated yards imp hops dropped kbps bps 
sudden factor drop bandwidth embarked investigation things gotten bad 
particular wondered bsd berkeley unix tcp mis behaving tuned better network conditions 
answer questions 
note slightly revised version originally sigcomm 
wish please cite 
supported part department energy contract number de ac sf 
supported department commerce national bureau standards number 
congestion avoidance control van jacobson lawrence berkeley laboratory michael karels university california berkeley november time put new algorithms bsd tcp round trip time variance estimation ii exponential retransmit timer backoff iii slow start iv aggressive receiver ack policy dynamic window sizing congestion vi karn clamped retransmit backoff vii fast retransmit measurements reports beta testers suggest final product fairly dealing congested conditions internet 
brief description rationale 
vi algorithm developed phil karn bell communications research described 
vii described soon published rfc arpanet request comments 
algorithms spring observation flow tcp connection iso tp xerox ns spp connection obey conservation packets principle 
principle obeyed congestion collapse exception rule 
congestion control involves finding places violate conservation fixing 
conservation packets mean connection equilibrium running stably full window data transit packet flow physicist call conservative new packet isn put network old packet leaves 
physics flow predicts systems property robust face congestion 
observation internet suggests particularly robust 
discrepancy 
conservative flow means time integral packet density sender receiver sender loop constant 
conservation equilibrium round trip timing ways packet conservation fail 
connection doesn get equilibrium 
sender injects new packet old packet exited 
equilibrium reached resource limits path 
sections treat turn 
getting equilibrium slow start failure connection starting restarting packet loss 
way look conservation property say sender uses acks clock strobe new packets network 
receiver generate acks faster data packets get network protocol self clocking fig 

self clocking systems automatically adjust bandwidth delay variations wide dynamic range important considering tcp spans range mbps cray channels bps packet radio links 
thing self clocked system stable running hard start get data flowing acks clock packets get acks data flowing 
start clock developed slow start algorithm gradually increase amount data transit 
flatter design algorithm subtle implementation trivial new state variable lines code sender add congestion window cwnd connection state 
starting restarting loss set cwnd packet 
ack new data increase cwnd packet 
packets diffuse loop integral sufficiently continuous lyapunov function system 
constant function trivially meets conditions lyapunov stability system stable superposition systems stable 
see chap 
chap 
excellent introductions system stability theory 
slow start quite similar cute algorithm described 
didn know cute time developing slow start cute preceded months 
describing algorithm feb internet engineering task force ietf meeting called soft start electronics engineer technique limit rush current 
name slow start coined john nagle message ietf mailing list march 
name clearly superior promptly adopted 
sending send minimum receiver advertised window cwnd 
slow start window increase isn slow takes time log round trip time window size packets fig 

means window opens quickly negligible effect performance links large bandwidth delay product 
algorithm guarantees connection source data rate twice maximum possible path 
slow start contrast mbps ethernet hosts talk kbps arpanet ip gateways hop gateway sees burst packets delivered times path bandwidth 
burst packets puts connection persistent failure mode continuous retransmissions figures 
conservation equilibrium round trip timing data flowing reliably problems addressed 
assuming protocol implementation correct represent failure sender retransmit timer 
round trip time estimator core retransmit timer single important feature protocol implementation expects survive heavy load 
frequently describe typical problems 
mistake estimating variation round trip time queuing theory know variation increase quickly load 
load ratio average arrival rate average departure rate scale concrete network running capacity arpanet april collapse expect round trip time vary factor sixteen 
tcp protocol specification suggests estimating mean round trip time low pass filter average rtt estimate round trip time measurement acked data packet filter gain constant suggested value 
estimate updated retransmit timeout interval packet sent set parameter accounts rtt variation see section 
suggested adapt loads 
point connection respond load increases retransmitting packets delayed transit 
forces network useless conservation equilibrium round trip timing sender window flow control self clocking receiver schematic representation sender receiver high bandwidth networks connected slower long haul net 
sender just starting shipped window worth packets back back 
ack packets arrive back sender vertical line mouth lower left funnel 
vertical dimension bandwidth horizontal dimension time 
shaded boxes packet 
bandwidth time bits area box packet size 
number bits doesn change packet goes network packet squeezed smaller long haul bandwidth spread time 
time represents minimum packet spacing slowest link path bottleneck 
packets leave bottleneck destination net changes inter packet interval receiver net packet spacing receiver processing time packets spacing acks receiver net time slot big packet big ack ack spacing preserved return path 
ack spacing sender net packets burst sent response ack sender packet spacing exactly match packet time slowest link path 
wasting bandwidth duplicates packets eventually delivered time known having trouble useful 
network equivalent pouring gasoline fire 
developed cheap method estimating variation see appendix resulting retransmit timer essentially eliminates spurious retransmissions 
pleasant side effect estimating fixed value low load high load performance improves particularly high delay paths satellite links figures 
timer mistake backoff retransmit packet retransmitted retransmits spaced 
transport endpoint embedded network unknown topology far recognize transport needs estimate mean variation 
see example 
think estimator simpler 
unknown constantly changing population competing conversations scheme hope working exponential backoff proof scope 
finesse proof note network approximation linear system 
composed elements behave linear operators integrators delays gain stages linear system theory says system stable stability exponential 
suggests unstable system network subject see 
authors shown backoffs slower exponential stable finite populations knowledge global traffic 
shows slower exponential behavior general case 
feed intuition consider ip gateway essentially behavior ether aloha net ethernet 
justifying exponential retransmit backoff showing collision backoff slower exponential guarantee stability ethernet 
unfortunately infinite user population exponential backoff won guarantee stability see 
fortunately don deal infinite user population 
adapting path congestion avoidance chronology slow start round trip time packet time horizontal direction time 
continuous time line chopped round trip time pieces stacked vertically increasing time going page 
grey numbered boxes packets 
white numbered boxes corresponding acks 
ack arrives packets generated ack ack says packet left system new packet added take place ack opens congestion window packet 
may clear add packet window policy opens window exponentially time 
local net faster long haul net ack packets arrive bottleneck essentially time 
packets shown stacked top indicating occupy space gateway outbound queue 
short term queue demand gateway increasing exponentially opening window size packets require packets buffer capacity bottleneck 
random load shocks prone congestive collapse stabilized adding exponential damping exponential timer backoff primary excitation senders traffic sources 
adapting path congestion avoidance timers shape possible state confidence timeout indicates lost packet phrase congestion collapse describing positive feedback instability due poor retransmit timers john nagle time 
broken timer 
point done 
packets get lost reasons damaged transit network congested path insufficient buffer capacity 
network paths loss due damage rare probable packet loss due congestion network 
packet loss empties window throughput window flow control protocol quite sensitive damage loss 
rfc standard tcp running window product loss probability degrades throughput factor damage loss rate arpanet path packet window degrades tcp throughput 
congestion control scheme propose insensitive damage loss loss rate order window equilibration length number packets takes window regain original size loss 
pre loss size equilibration takes roughly packets adapting path congestion avoidance congestion avoidance strategy proposed components network able signal transport endpoints congestion occurring occur 
endpoints policy decreases utilization signal received increases utilization signal isn received 
packet loss due congestion timeout due lost packet candidate network congested signal 
particularly signal delivered automatically existing networks special modification opposed requires new bit packet headers modification existing gateways set bit 
part congestion avoidance strategy action identical dec iso scheme tcp follows directly order time series model network say network load measured average queue length fixed intervals appropriate length near round trip time 
load interval uncongested network modeled saying changes slowly compared sampling time 
constant 
network subject congestion zeroth order model breaks 
average queue length sum terms accounts average arrival rate new traffic intrinsic delay new term accounts fraction traffic left time interval effect left traffic induced retransmits terms taylor series expansion reason believe eventually need term second order model internet grown substantially 
arpanet loss sensitivity threshold 
high loss rate empty window effect described degraded throughput additional degradation congestion avoidance window shrinking problems 
concerned congestion control noise sensitivity quadratic take generation network evolution reach window sizes significant 
experience shows sensitivity liability trivial modification algorithm linear progress explores subject detail 
accident copied jain scheme hearing presentation realizing scheme sense universal 
see control theory text relationship system model admissible controls system 
nice appears chap 

network congested large queue lengths start increasing exponentially 
system stabilize traffic sources throttle back quickly queues growing 
source controls load window protocol adjusting size window sender policy congestion multiplicative decrease window size exponential decrease time congestion persists 
congestion near zero load approximately constant 
network announces dropped packet demand excessive says connection fair share network stateless know 
connection increase bandwidth utilization find current limit 
sharing path converged window gives half available bandwidth 
shuts bandwidth wasted window size increased 
increase policy 
thought symmetric multiplicative increase possibly longer time constant mistake 
result oscillate wildly average deliver poor throughput 
analytic reason fact easy drive net saturation hard net recover chap 
calls rush hour effect 
system behaves difference equation solution goes exponentially infinity 
fig 
note packets path sender window packets 
excess packets form queue entry bottleneck queue shrink sender carefully clocks packets bottleneck link rate 
stable queue unfortunate aspect conservation queue shrink gateway move packets skinny pipe faster sender dumped packets fat pipe 
system tunes time gateway pulls packet front queue sender lays new packet 
gateway needs excess output capacity dissipate queue clearing time scale chap 
excellent discussion 
equilibrium transport connection wants run bottleneck link sure non equilibrium window adjustment control policy allows gateway free bandwidth dissipate queues inevitably form due path testing traffic fluctuations 
argument similar show exponential timer backoff necessary possible show exponential multiplicative window increase policy faster dissipation time traffic mix leads unbounded growth bottleneck queue 
gateway side congestion control overestimating available bandwidth costly 
exponential regardless time constant increases quickly overestimates inevitable 
ll state best increase policy small constant changes window size congestion delay bandwidth product path minus protocol overhead largest sensible window unloaded path 
additive increase multiplicative decrease policy suggested policy implemented tcp 
difference implementations choice constants reasons partially explained appendix complete analysis progress 
preceding probably congestion control algorithm sound hairy 
slow start lines code timeout set cwnd half current window size multiplicative decrease 
ack new data increase cwnd cwnd additive increase 
sending send minimum receiver advertised window cwnd 
note algorithm congestion avoidance doesn include previously described slow start 
packet loss signals congestion result re start certainly necessary slow start addition 
congestion avoidance slow start triggered timeout manipulate congestion window frequently confused 
independent algorithms completely different objectives 
emphasize difference algorithms see complete analysis increase decrease policies 
see control theoretic analysis similar class control policies 
increment rule may obvious 
want increase window packet time interval length round trip time 
algorithm self clocked increment small amount ack large amount interval 
assuming course sender effective silly window avoidance see section doesn attempt send packet fragments fractionally sized window 
window size cwnd packets generate cwnd acks increment cwnd ack increase window packet tcp windows packet sizes bytes increment translates maximum segment size cwnd expressed bytes packets 
separately practise implemented 
appendix describes combined slow start congestion avoidance algorithm 
figures show behavior tcp connections congestion avoidance 
test conditions kb windows deliberately chosen stimulate congestion test scenario isn far common practice arpanet imp protocol allows packets transit pair gateways 
default bsd window size packets kb 
simultaneous conversations say hosts berkeley hosts mit exceed network capacity ucb mit imp path lead type behavior shown 
gateway side congestion control algorithms transport endpoints insure network capacity isn exceeded insure fair sharing capacity 
gateways convergence flows information control sharing fair allocation 
view gateway congestion detection algorithm big step 
goal algorithm send signal early possible early gateway developed rate variant congestion avoidance algorithm apply connectionless traffic domain server queries rpc requests 
remembering goal increase decrease policies bandwidth adjustment time controlled parameter rate scheme appears denominator bandwidth algorithm follows immediately multiplicative decrease remains multiplicative decrease double interval packets 
subtracting constant amount interval result additive increase bandwidth 
approach tried appears oscillate badly 
see note inter packet interval decrement bandwidth change decrease interval constant policy non linear increase 
update policy result linear increase bandwidth time interval sends th packet sent desired rate increase packets packet sec 
simulated algorithm appears perform 
test predictions simulation reality cooperative project sun microsystems prototype rpc dynamic congestion control algorithms nfs test bed nfs known congestion problems desirable range networks tcp 
lead 
gateway side congestion control starved traffic 
plan continue packet drops congestion signal gateway self protection mis behaving host fall free host simply packets dropped gateway tell fair share 
algorithm gateway algorithm reduce congestion modified congestion avoidance 
nodes implement congestion avoidance get fair share bandwidth minimum number packet drops 
congestion grows exponentially detecting early important 
detected early small adjustments senders windows cure 
massive adjustments necessary give net spare capacity pump backlog 
bursty nature traffic reliable detection non trivial problem 
jain proposes scheme averaging queue regeneration points 
yield burst filtering think convergence problems high load significant second order dynamics traffic 
plan earlier models round trip time queue length prediction basis detection 
preliminary results suggest approach works high load immune second order effects traffic computationally cheap slow second gateways 
weare grateful members internet activity board internet engineering task forces past year interest encouragement cogent questions network insights 
bob braden isi craig partridge bbn particularly helpful preparation careful reading early drafts improved immensely 
author deeply debt jeff mogul dec western research lab 
jeff interest patient existed 
problems stem fact average time regeneration points scales variance see feller chap 
vi 
congestion detector sluggish congestion increases signal noise ratio decreases dramatically 
gateway side congestion control packet sequence number kb startup behavior tcp slow start send time sec trace data start tcp conversation sun running sun os bsd tcp 
different ethernets connected ip gateways driving kbps point point link essentially setup shown fig 

window size connection kb byte packets packets buffer available bottleneck gateway 
actual path contains store forward hops pipe plus gateway queue capacity full window gateway queue 
dot data byte packet 
axis time packet sent 
axis sequence number packet header 
vertical array dots indicate back back packets dots different indicate retransmit 
desirable behavior graph relatively smooth line dots extending diagonally lower left upper right 
slope line equal available bandwidth 
trace resembles desirable behavior 
dashed line shows kbps bandwidth available connection 
bandwidth rest wasted retransmits 
retransmitted data kb sent times 
gateway side congestion control packet sequence number kb startup behavior tcp slow start send time sec conditions previous time day network path buffer window sizes machines running tcp slow start 
bandwidth wasted retransmits seconds spent slow start effective bandwidth part trace kbps times better 
slightly misleading previous slope trace kbps effect second offset decreases trace 
trace run minute effective bandwidth kbps 
effective bandwidth slow start stays kbps matter long trace 
gateway side congestion control rtt sec 
performance rfc retransmit timer packet trace data showing packet round trip time behaved arpanet connection 
axis packet number packets numbered sequentially starting axis elapsed time send packet sender receipt ack 
portion trace packets dropped retransmitted 
packets indicated dot 
dashed line connects sequence easier follow 
solid line shows behavior retransmit timer computed rules rfc 
rtt sec 
performance mean variance retransmit timer data solid line shows retransmit timer computed algorithm appendix packet gateway side congestion control sun hot sun surf sun vs sun multiple conversation test setup kbs cartan microwave mbs ethernets vax vax monet vax cci test setup examine interaction multiple simultaneous tcp conversations sharing bottleneck link 
mbyte transfers data byte packets initiated seconds apart machines lbl machines ucb conversation machine pair dotted lines show pairing 
traffic went kbps link connecting ip router lbl ip router cartan ucb 
microwave link queue hold packets 
connection window kb byte packets 
connections overflow available buffering connections exceeded queue capacity 
gateway side congestion control sequence number kb multiple simultaneous tcps congestion avoidance time sec trace data simultaneous tcp conversations congestion avoidance paths shown 
packets sent retransmissions half data packets retransmitted 
link data bandwidth kbps conversations received kbps 
conversation got kbps got kbps got kbps kbps vanished 
gateway side congestion control sequence number kb multiple simultaneous tcps congestion avoidance time sec trace data simultaneous tcp conversations congestion avoidance paths shown 
packets sent retransmissions data packets retransmitted 
conversations got kbps got kbps link bandwidth accounted see fig 

difference high low bandwidth senders due receivers 
kbps senders talking bsd receivers delay ack window filled ms passed ack delayed packets average 
meant sender deliver bursts packets ack 
kbps senders talking bsd receivers delay ack packet ack clock le authors believe minimum ack frequency packet 
sender deliver bursts packets 
probability loss increases rapidly burst size senders talking old style receivers saw times loss rate vs 
higher loss rate meant time spent retransmit wait congestion avoidance smaller average window sizes 
gateway side congestion control relative bandwidth total bandwidth old new tcps time sec thin line shows total bandwidth senders congestion avoidance fig 
averaged second intervals normalized kbps link bandwidth 
note senders send average fit wire 
thick line data senders congestion avoidance fig 

second interval low slow start seconds damped oscillation congestion control regulator tcp finds correct window size 
remaining time senders run wire bandwidth 
activity seconds bandwidth re negotiation due connection shutting 
activity seconds reflection flat spot fig 
conversation bandwidth suddenly shifted conversations competing conversations frequently exhibit type punctuated equilibrium behavior hope investigate dynamics 
gateway side congestion control relative bandwidth effective bandwidth old new tcps time sec showed old tcps bottleneck link bandwidth 
bottleneck queue filled senders packets discarded 
discards discards retransmitted senders received full kbps link bandwidth behavior anti social self destructive 
fig 
noted link bandwidth unaccounted 
average total amount data acked second interval 
gives effective delivered bandwidth link 
thin line old tcps 
note link bandwidth data remainder retransmissions packets didn need retransmitted 
thick line shows delivered bandwidth new tcps 
slow start turn transient followed long period operation right link bandwidth 
gateway side congestion control relative bandwidth window adjustment detail time sec second averaging time needed smooth spikes old tcp data congestion avoidance window policy difficult figures 
show effective throughput data acked tcps congestion control averaged second interval 
packet dropped sender sends fills window stops retransmission timeout 
receiver ack data dropped packet plot expect see negative going spike amplitude equals sender window size minus packet 
retransmit happens interval intervals chosen match retransmit timeout expect see positive going spike amplitude receiver acks order data cached 
height spikes direct measure sender window size 
data clearly shows events seconds window size appears decreasing exponentially 
dotted line squares fit window size measurements obtained events 
fit time constant seconds 
long time constant due lack congestion avoidance algorithm gateway 
drop algorithm running gateway time constant seconds fast algorithm rtt mean variation fast algorithm rtt mean variation theory rfc algorithm estimating mean round trip time simplest examples class estimators called recursive prediction error stochastic gradient algorithms 
past years algorithms revolutionized estimation control theory probably worth looking rfc estimator detail 
new measurement rtt round trip time tcp updates estimate average rtt gain related signal noise ratio equivalently variance sense computes faster rearrange collect terms multiplied get think prediction measurement 
error prediction expression says new prediction old prediction plus fraction prediction error 
prediction error sum components error due noise measurement random unpredictable effects fluctuations competing traffic error due bad choice calling random error estimation error term gives kick right direction term gives kick random direction 
number samples random kicks cancel algorithm tends converge correct average 
represents compromise want large get mileage small minimize damage terms move real average matter value better gain small large 
typical gain choices idea take long look raw data picking gain 
obvious oscillate randomly true average standard deviation converges true average exponentially time constant smaller gives expense longer time get true average 
want measure variation say compute value tcp retransmit timer alternatives 
variance conventional choice nice mathematical properties 
computing variance requires squaring estimator contain multiply danger integer overflow 
applications want variation units ll forced take square root variance divide multiply adds 
variation measure easy compute mean prediction error mean deviation average mean deviation conservative larger estimate variation standard deviation 
simple relation 
prediction errors normally distributed common distributions factor go near 
approximation easier compute 
practice fast estimators average mean deviation measurement follow directly 
estimators compute means instances rfc algorithm computed quickly done integer arithmetic 
expressions contain fractions scaling needed keep integer 
reciprocal power particularly choice scaling implemented shifts 
multiplying gives minimize round error scaled versions kept unscaled versions 
picking close suggested rfc expressing may note elided factor number samples previous inequality 
difference result 
slow start congestion avoidance algorithm update average estimator sa sa update deviation estimator sv sv necessary gain force timer go quickly response changes rtt idea give larger gain 
particular window delay mismatch rtt artifacts integer multiples window size 
filter estimator large window size packets estimator window size 
gain deviation computing retransmit timer final timer code looks sa sa sv sv rto sa sv computation correctly round truncation computing converge true mean rounded tick 
likewise average half tick bias 
computation rounded half tick tick needs added account sends phased randomly respect clock 
tick bias contribution approximately equals desired half tick rounding plus tick phase correction 
see packets 
note window effects due characteristics arpa subnet 
general window effects timer second order consideration depend great deal underlying network 
wideband packet window gain 
may obvious absolute value calculation introduces asymmetry timer sign increase opposite sign decrease gain timer go quickly come slowly automatically giving behavior suggested 
see region packets 
combined slow start congestion avoidance algorithm sender keeps state variables congestion control slow start congestion window cwnd threshold size ssthresh switch algorithms 
sender output routine sends minimum cwnd window advertised receiver 
timeout half current window size recorded ssthresh multiplicative decrease part congestion avoidance algorithm cwnd set packet initiates slowstart 
new data acked sender cwnd ssthresh re doing slow start open window exponentially cwnd congestion avoidance increment cwnd cwnd slow start opens window quickly congestion avoidance thinks safe operating point half window got trouble congestion avoidance takes slowly increases window size probe bandwidth available path 
note clause code malfunction cwnd integer unscaled packet units 
maximum window path packets cwnd cover range resolution sending packets smaller maximum transmission unit path lowers efficiency implementor take care fractionally sized cwnd result small packets sent 
reasonable tcp implementations existing silly window avoidance code prevent runt packets point carefully checked 
window adjustment interaction round trip timing tcp connections particularly low speed link dial slip line may experience tcp happens automatically windows expressed bytes packets 
protocols iso tp implementor scale cwnd calculations done integer arithmetic scale factor large avoid fixed point zero congestion avoidance increment 
window adjustment interaction round trip timing unfortunate interaction congestion window adjustment retransmit timing network paths tend divide classes delay dominated forward transit delays determine rtt bandwidth dominated bottleneck link bandwidth average packet size determine rtt 
path bandwidth congestion avoidance window increment increase rtt post increment packets path rtt variation small may exceed cushion retransmit timeout occur cycles ssthresh cwnd clamped small values 
calculation appendix designed prevent type spurious retransmission timeout slowstart 
particular rtt variation multiplied calculation spurious retransmit occurs retransmit timeout computed slow start round equal actual rtt round 
worst case delay due window doubles round window size doubles 
measured rtt slow start round 
spurious retransmit timeouts occur 
spurious retransmission due window increase occur congestion avoidance window increment window changed packet increments packet size may packets increments long increase due window increment decay away 
problem bandwidth dominated path tcp baud packet radio link bandwidth dominated transmission time typical byte ip packet seconds longer possible terrestrial transit delay 
original sigcomm version suggested calculating time experience low speed slip links observed spurious retransmissions connection startup 
investigation occured led analysis change calculation app 
increments twelve packets apart decay time filter times gain calculation implies large window path 
regard timeouts appropriate punishment gross mis tuning effect simply reduce window appropriate path 
slow start congestion avoidance designed trigger kind spurious retransmission interaction higher level protocols frequently application protocols smtp nntp negotiation phase packets exchanged wait followed data transfer phase mail message news article sent 
unfortunately negotiation exchanges open congestion window start data transfer phase dump packets network slow start bandwidth dominated path faster track rtt increase caused packets 
root cause problem described sec 
dumping packets empty pipe pipe empty negotiation exchange conducted wait ack clock 
fix proposed sec 
slow start prevent problem tcp implementation detect phase change 
detection simple pipe empty haven sent round trip time way view rtt time takes pipe empty send 
sent rtt send set cwnd packet force slow start 
connection state variable holds time packet sent code appear early tcp output routine int idle snd max snd una idle rto cwnd boolean idle true data transit data sent acked says transit haven sent long time slow start experience current rtt estimate estimate long time results largest sensible window path bottleneck bandwidth times round trip delay definition delay negligible bandwidth dominated path window packets 
estimate convenient kept units time rtt scaled 
send receive symmetry time receive send protocol implements state variable may exist 
window adjustment policy reason decrease term opposed packet dropped re starting restarting drop steady state sending 
re starting know half current window size worked window worth packets exchanged drops slow start guarantees 
congestion set window largest size know works slowly increase size 
connection steady state running packet dropped probably new connection started took bandwidth 
usually run nets probable exactly conversations sharing bandwidth 
reduce window half bandwidth available reduced half 
conversations sharing bandwidth halving window conservative conservative high traffic intensities probably wise 
factor change window size large performance penalty system terms cost negligible currently packets dropped large queue formed 
iso ip congestion experienced bit force senders reduce windows re stuck queue bottleneck running utilization excess bandwidth available dissipate queue 
packet tossed sender shuts rtt exactly time needed empty queue 
sender restarts correct window size queue won reform 
delay reduced minimum system losing bottleneck bandwidth 
packet increase justification decrease 
fact certainly large 
gorithm converges window size packets drops additive increase policy 
shooting average drop rate arpanet worst case networks tested windows converged packets 
yields packet increments average drop rate 
done gateways window converge maximum gateway accept dropping packets 
terms just left cliff just right knee 
gateways fixed start dropping packets queue gets pushed past knee increment aggressive dropped factor measurements unloaded arpanet place pipe size packets 
appears trivial implement second order control loop adaptively determine appropriate increment path 
second order problems hold spent time order part algorithm gateways 
aldous ultimate instability exponential back protocol acknowledgment transmission control random access communication channels 
ieee transactions information theory mar 
coleman differential equations 
prentice hall 
chiu jain networks connectionless network layer part iii analysis increase decrease algorithms 
tech 
rep dec tr digital equipment stanford ca aug 
clark window strategy tcp 
arpanet working group requests comment ddn network information center sri international menlo park ca july 
rfc 
edge adaptive timeout algorithm retransmission packet switching network 
proceedings sigcomm mar acm 
feller probability theory applications second ed vol 
ii 
john wiley sons 
hajek stochastic approximation methods decentralized control multiaccess communications 
ieee transactions information theory mar 
hajek van decentralized dynamic control multiaccess broadcast channel 
ieee transactions automatic control ac june 
proceedings sixth internet engineering task force boston ma apr 
proceedings available nic document ietf ddn network information center sri international menlo park ca 
international organization tion 
iso international standard information open systems interconnection connectionless mode network service protocol specification mar 
jacobson congestion avoidance control 
proceedings sigcomm stanford ca aug acm 
jain divergence timeout algorithms packet retransmissions 
proceedings fifth annual international phoenix conference computers communications scottsdale az mar 
jain timeout congestion control scheme window flow controlled networks 
ieee journal selected areas communications sac oct 
jain ramakrishnan chiu 
congestion avoidance computer networks connectionless network layer 
tech 
rep dec tr digital equipment aug 
karn partridge estimating round trip times reliable transport protocols 
proceedings sigcomm aug acm 
kelly stochastic models computer communication systems 
journal royal statistical society 
kleinrock queueing systems vol 
ii 
john wiley sons 
kline supercomputers internet case study 
proceedings sigcomm aug acm 
ljung theory practice recursive identification 
mit press 
luenberger dynamic systems 
john wiley sons 
mills internet delay experiments 
arpanet working group requests comment ddn network information center sri international menlo park ca dec 
rfc 
nagle congestion control ip tcp internetworks 
arpanet working group requests comment ddn network information center sri international menlo park ca jan 
rfc 
postel ed 
transmission control protocol specification 
sri international menlo park ca sept 
rfc 
postel host source quench 
arpanet working group requests comment ddn network information center sri international menlo park ca july 
rfc 
nonstandard transmission ip datagrams serial lines slip 
arpanet working group requests comment ddn network information center sri international menlo park ca june 
rfc 
zhang tcp timers don 
proceedings sigcomm aug acm 
