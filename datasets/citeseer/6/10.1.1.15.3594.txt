sesame generic architecture storing querying rdf rdf schema jeen broekstra kampman frank van harmelen aidministrator netherlands jeen broekstra kampman aidministrator nl faculty sciences vrije universiteit amsterdam netherlands frank van harmelen cs vu nl 
rdf rdf schema standards aimed enriching web machine processable semantic data 
developed sesame architecture efficient storage expressive querying large quantities metadata rdf rdf schema 
sesame design implementation independent specific storage device 
sesame deployed top variety storage devices relational databases triple stores object oriented databases having change query engine functional modules 
sesame offers support concurrency control independent export rdf rdfs information query engine rql query language rdf offers native support rdf schema semantics 
overview sesame generic architecture implementation experiences implementation 
resource description framework rdf recommendation formulation metadata world wide web 
rdf schema rdfs extends standard means specify domain vocabulary object structures 
techniques enable enrichment web machine processable semantics giving rise dubbed semantic web 
developed sesame architecture storage rdf rdfs information 
sesame developed aidministrator part european ist project knowledge 
sesame allows persistent storage rdf data schema information provides access methods information export querying modules 
features ways caching information offers support concurrency control 
organized follows 
section give short rdf rdfs 
readers familiar languages see www aidministrator nl knowledge ist 
see www ontoknowledge org jeen broekstra kampman frank van harmelen safely skip section 
section discuss query language specifically tailored rdf rdfs needed existing query languages xquery 
section look sesame modular architecture detail 
section give overview sail api brief comparison rdf api approaches 
section discusses experiences sesame section looks possible developments 
provide section 
rdf rdfs rdf recommendation originally designed standardize definition metadata descriptions web resources 
rdf equally suited representing arbitrary data metadata 
basic building block rdf subject predicate object triple commonly written 
subject predicate property value way think relationship labeled edge nodes 
notation useful rdf allows subjects objects interchanged 
object triple play role subject triple amounts chaining labeled edges graphic representation 
graph example expresses statements 
rdf allows form twain mark isbn reification title rdf statement subject object mark twain adventures tom sawyer triple 
means graphs fig 
example rdf graph 
nested chained 
web allows example express doubt support statements created people 
rdf model syntax specification proposes xml syntax rdf data models 
possible serialization relations syntax looks rdf description rdf www org twain mark mark twain rdf resource www books org isbn rdf description rdf description rdf www books org isbn title adventures tom sawyer title rdf type rdf resource www description org schema book rdf description proposed xml syntax allows alternative ways writing information xml syntax just possibilities writing rdf model xml 
important note rdf designed provide basic object model web data 
intended semantics de sesame storing querying rdf rdfs scribed informally standard rdf data modeling commitments 
particular reserved terms defined data modeling 
xml rdf data model provides mechanisms declaring vocabulary 
rdf schema mechanism lets developers define particular vocabulary rdf data predicate specify kinds objects predicates applied class writer 
rdfs pre specifying terminology class subclassof property application specific schemata 
rdfs expressions valid rdf expressions fact difference normal rdf expressions rdfs agreement semantics certain terms interpretation certain statements 
example subclassof property allows developer specify hierarchical organization classes 
objects declared instances classes type property 
constraints properties specified domain range constructs 
dotted line domain range writer book see example subclassof rdf schema defines vocabulary rdf ex schema ample saw earlier book type type data writer twain mark isbn introduced classes introduced fig 
example rdf schema 
property 
specific instance described dotted line terms vocabulary 
need rdfs query language rdf documents rdf schemata considered different levels abstraction 
syntactic level xml documents 

structure level consist set triples 

semantic level constitute graphs partially predefined semantics 
query documents levels 
briefly consider pros cons doing level sections 
lead conclude rdf documents really queried semantic level 
briefly discuss rql language querying rdf documents semantic level implemented sesame architecture 
necessarily true non xml syntaxes rdf exist xml widely syntax rdf 
jeen broekstra kampman frank van harmelen querying syntactic level seen section rdf model rdf schema written xml notation 
reasonable assume query rdf xml query language example xquery 
approach disregards fact rdf just xml notation data model different xml tree structure 
relationships rdf data model apparent xml tree structure hard query 
example consider xml description rdf model 
xml query language xquery expressions traverse data structure tailored traversing node labeled tree 
rdf data model graph tree edges properties nodes subjects objects labeled 
querying syntax level literally left query builder query relation resource signifying mark twain resource signifying adventures tom sawyer knowledge syntax encode rdf data xml 
ideally want formulate query give relationships exist mark twain adventures tom sawyer 
xml syntax stuck formulating awkward query give elements nested description element attribute value www org twain mark value resource attribute occurs attribute value description element nested element title value adventures tom sawyer approach inconvenient disregards fact xml syntax rdf unique rdf graph serialized xml variety ways 
means query guaranteed retrieve answers rdf model 
querying structure level syntax rdf document represents set triples triple representing statement form subject predicate object 
number query languages proposed implemented regard rdf documents set triples allow query triple set various ways 
look example 
rdf query language example allow query resources known type select rdf type sesame storing querying rdf rdfs clear advantage query directly addresses rdf data model independent specific syntax chosen represent data 
disadvantage query language level interprets rdf model set triples including elements special semantics rdfs 
example twain mark type subclass writer twain mark type writer virtue intended rdfs semantics type sub 
triple explicitly asserts fact 
result query select rdf type writer fail query looks explicit triples store triple twain mark type writer explicitly store implied semantics rdfs 
querying semantic level clearly required means query semantic level querying full knowledge rdfs description entails just explicitly asserted statements 
options achieve goal 
compute store closure graph basis querying 

query processor infer new statements needed query 
choice rdf query language principle independent choice respect fact remains rdf query languages designed query simple triple base specific functionality semantics discriminate schema data information 
rql proposal declarative query language capture semantics language design :10.1.1.16.3666
language initially developed institute computer science forth heraklion greece context european ist project briefly describe language detailed description language see 
rql adopts syntax oql oql language defined means set core queries set basic filters way build new queries functional composition iterators 
core queries basic building blocks rql give access rdfs specific contents rdf triple store 
rql allows queries class retrieving classes property retrieving properties writer returning see www ics forth gr see inria fr projects jeen broekstra kampman frank van harmelen instances class name writer 
query returns course instances subclasses writer instances class writer virtue semantics rdfs 
notice rql semantics defined query language formal query language definition commitment interpret semantics rdfs 
notably different approach designer implementer liberty interpret rdfs entailment options mentioned earlier 
composing complex queries rql select construction 
clause query specify path expression 
allow match patterns entire paths rdf rdfs graphs 
example query select returns things written famous writers type thing effectively doing pattern matching path graph 
notice rql path expressions explicitly enable free mixing data schema information 
sesame architecture sesame architecture allows persistent storage rdf data schema information subsequent querying information 
section overview sesame architecture 
sections look detail components 
overview overview sesame architecture shown 
section give brief overview main components 
persistent storage rdf data sesame needs scalable repository 
naturally data base management system dbms comes mind decades storing large quantities data 
decades large number dbms developed having strengths weaknesses targeted platforms api dbms rdf data stored numerous ways 
keep sesame dbms independent impossible know way storing data best fitted dbms application domain dbms specific code concentrated single architectural layer sesame storage inference layer sail 
sail application programming interface api offers methods clients translates methods calls specific dbms 
important advantage separate layer possible implement sesame top wide variety sesame storing querying rdf rdfs repositories changing sesame components 
section looks api detail 
sesame functional modules clients sail api 
currently modules rql query engine rdf ad client client client min module rdf export module 
modules described detail protocol handler soap protocol handler section 
depending environment request router deployed different ways communicate sesame modules may desirable 
example communication may admin module query module export module preferable web context contexts protocols remote method invocation rmi simple object access protocol soap may suited 
order allow maximal flexibility rdf sail actual handling protocols placed outside scope functional repository modules 
protocol handlers pro fig 
sesame architecture 
vided intermediaries modules clients handling specific protocol 
sail protocol handlers sesame generic architecture rdfs storage querying just particular implementation system 
adding additional protocol handlers easy connect sesame different operating environments 
construction concrete sail implementations discussed section 
sesame architecture designed extensibility adaptability mind 
possibility kinds repositories mentioned 
adding additional modules protocol handlers possible 
sesame functional modules rql query module seen modules currently implemented sesame rql query engine 
sesame version rql implemented slightly different language proposed :10.1.1.16.3666
sesame version rql features better compliance specifications including support optional domain range restrictions multiple domain range restrictions 
feature support proposed original language proposal 
see details 
query module follows path depicted handling query 
parsing query building query tree model model fed query optimizer transforms query model equivalent model evaluate efficiently 
optimizations mainly consist sesame soap jeen broekstra kampman frank van harmelen set heuristics query move 
notice optimizations dependent domain storage method 
optimized model query subsequently evaluated streaming fashion tree struc rql query rql parser query model query optimizer optimized query model ture query fig 
query parsing optimization model 
broken 
object represents basic unit original query evaluates fetching data sail needed 
main advantage approach results returned streaming fashion having build entire result set memory 
sesame rql queries translated object model set calls sail 
approach means main bulk actual evaluation rql query done rql query engine 
example query contains semi join operation subqueries subqueries evaluated semi join operation executed query engine results 
approach directly translate rql query possible query specific underlying repository 
advantage approach dbms get sophisticated query evaluation optimization mechanisms free 
large disadvantage implementation query engine directly dependent repository architecture lose ability easily switch repositories 
design decision major differences sesame rdf suite implementation rql ics forth see 
rdf suite implementation relies underlying dbms query optimization 
dependency means rdf suite easily transported run top storage engine 
natural consequence choice evaluate queries sail need devise optimization techniques engine sail api implementation rely dbms 
admin module order able insert rdf data schema information repository sesame provides admin module 
current implementation simple offers main functions 
incrementally adding rdf data schema information 
clearing repository 
partial delete statement basis functionality available current admin module support feature development 
admin module retrieves information rdf source usually online rdf document xml serialized form parses streaming rdf parser currently arp rdf parser part jena toolkit 
parser delivers information admin module sesame storing querying rdf rdfs statement basis subject predicate object 
admin subsequently tries assert statement repository communicating sail reports back errors warnings occurred 
current implementation explicit transaction functionality sail expect implement near 
rdf export module rdf export module simple module 
module able export contents repository formatted rdf 
idea module supplies basis sesame combination rdf tools rdf tools able read format 
tools ontology editors need schema part data 
hand tools don support rdfs semantics probably need non schema part data 
reasons rdf export module able selectively export schema data 
sail api sail api set java interfaces specifically designed storage retrieval rdfs information 
main design principles sail api define basic interface storing rdf rdfs retrieving deleting rdf rdfs persistent repositories 
actual storage mechanism applicable rdbmss file systems memory storage example 
usable low hardware pdas offer freedom optimizations handle huge amounts data efficiently enterprise level database clusters 
extendable rdf languages daml oil 
proposals rdf apis currently development 
prominent jena toolkit redland application framework 
sail shares characteristics approaches 
important difference proposals sail sail api specifically deals rdfs retrieval side offers methods querying class property subsumption domain range restrictions 
contrast jena redland focus exclusively rdf triple set leaving interpretation triples user 
sail rdfs inferencing tasks handled internally 
main reason strong relationship efficiency inferencing actual storage model 
sail implementation complete understanding storage model database schema case rdbms knowledge exploited infer example class subsumption efficiently 
jeen broekstra kampman frank van harmelen difference sail rdf apis sail considerably lightweight basic interfaces pre defined offering basic storage retrieval functionality transaction support 
feel applications minimality may preferable api features complex understand implement 
current sesame system offers implementations sail api 
important sql sail generic implementation sql 
aim able connect rdbms having re implement little possible 
sql sail definitions datatypes part sql standard changed switching different database platform 
sql sail features inferencing module rdfs rdfs entailment rules specified rdf model theory 
inferencing module computes schema closure rdfs uploaded asserts implicates schema derived statements 
example statement form foo rdfs domain bar encountered inferencing module asserts foo rdf type property implied statement 
sql sail tested dbmss including postgresql mysql see section 
important feature sail api possible put top 
sail top perform action modules calls forward calls sail beneath 
process continues handles actual retrieval request propagating result back 
implemented sail caches schema data dedicated data structure main memory 
schema data limited size requested frequently 
time schema data difficult query dbms transitivity subclassof subpropertyof properties 
schema caching sail placed top arbitrary handling calls concerning schema data 
rest calls forwarded underlying sail 
important task handled sail concurrency handling 
rql query broken operations sail level important preserve repository consistency multiple operations 
implemented sail selectively blocks releases read write access repositories come serve basis 
setup allows support concurrency control type repository 
experiences implementation sesame sesame aidministrator 
nl freely available non commercial 
implementation follows see www postgresql org see www mysql com sesame storing querying rdf rdfs generic architecture described concrete implementation choices modules postgresql mysql database platforms 
reason running platforms simultaneously mainly development choice wish compare real life performance 
platforms 
various repository setups running combining different stacks including sql sail postgresql sail mysql sail schema cache concurrency handler top repository 
protocol handler realised 
admin module uses arp rdf parser 
section briefly report experiences various aspects implementation 
rdfs practice developing sesame rdfs specification uncovered 
reasons rdfs defined natural language formal description semantics 
result rdfs specification contains inconsistencies 
attempt solve rdf core working group revise rdf rdfs specifications 
results formal model theory rdf specifies model schema semantics precisely includes formal procedure computing closure schema 
mentioned section sql sail features inferencing module follows procedure described model theory 
experiences naive implementation formal procedure painfully slow relative ease optimized perform quite satisfactory 
improving performance currently progress 
postgresql sail test setup sesame postgresql 
postgresql freely available open source object relational dbms supports features normally commercial dbms implementations see www postgresql org 
main reasons choosing postgresql dbms meaning supports relations tables 
relations transitive model class property subsumption relations rdfs 
sail setup specifically tailored postgresql support standard sql feature 
uses dynamic database schema inspired schema shown :10.1.1.16.3666
jeen broekstra kampman frank van harmelen new tables added database new class property added repository 
class subclass classes table created tables superclasses 
likewise properties subproperties properties 
instances classes properties inserted values appropriate tables 
gives impression contents database containing data 
actual schema involves table called resources 
table contains resources literal values mapped unique id ids tables shown refer resources literal values 
resources table minimize size database 
ensures resources literal values quite long occur database saving potentially large amounts memory 
test setup optimizations sail implementation selective caching namespaces frequently requested resources avoid repetitive table lookups 
experiences database schema postgresql completely satisfactory 
data insertion fast 
especially uploads schema data slow table creation expensive postgresql 
worse adding new subclassof relation existing classes complete class hierarchy starting subclass needs broken rebuilt relations added existing table relations specified table created 
created relations fixed 
disadvantage cycles class hi modeled properly class uri resource writer book property uri writer uri uri twain mark resource subclassof source target writer resource writer book resource domain uri source uri writer target book isbn source twain mark subpropertyof range source target source book target target isbn schema data fig 
impression object relational schema postgresql fashion 
new setup sql sail connect postgresql 
current version sail implementation takes radically different approach rdf statements inserted single table columns subject predicate object 
perform structured testing analysis approach perform significantly better especially scenarios rdfs changes 
querying purposes original postgresql sail performed quite satisfactory especially combined schema caching sail stacked top see section 
perform structured testing querying new sql sail initial results show performs somewhat slower earlier postgresql sail expected 
mysql sesame storing querying rdf rdfs initial tests mysql implemented sail strictly relational database schema see 
seen number dependencies arise due storage schema information separate tables 
order keep overhead minimum resource literal encoding integer value id field enable faster lookups 
encode particular statement explicitly asserted derived schema information extra column derived added appropriate 
main difference schema schema subclass superclass derived type resource class derived labels comment subclassof class id derived resource literal derived resource literal derived namespaces id prefix name literals domain property class derived resources id namespace triples subject predicate object derived id language value range property class derived property id derived subpropertyof derived fig 
impression relational schema mysql 
setup see setup database schema change rdfs changes 
application scenarios rdfs ontology unstable advantage typically adding new tables database requires time resources simply inserting row existing table 
postgresql sail selective caching namespaces optimization techniques implemented setup 
approach performed significantly better test scenarios especially uploading 
transaction rollback support sail api support transactions currently transaction rollback feature 
transaction rollbacks especially case uploading information crucial wish guarantee database consistency 
case rdf uploads transaction rollbacks supported levels single upload set rdf statements seen single transaction alternatively single upload chunked smaller sets support partial rollback error occurs upload session 
single rdfs statement assertion seen transaction tables database need updated 
user point view schema assertion atomic class repository point view may consist table updates instance schema new table created new rows inserted resources classes table 
jeen broekstra kampman frank van harmelen levels transaction rollback support may help ensure database consistency 
concurrency support sesame system help move sesame acid compliant storage system note guaranteed platform storage supports 
versioning support current version sesame support versioning 
concrete plans implementing statement form versioning exist 
basic type versioning enable elaborate versioning schemes 
adding extending functional modules sesame currently features functional modules 
plan extend functionality modules add new modules 
current admin module implementation incremental upload rdf statements supported 
plan implement advanced update support importantly support deleting individual triples repository 
prototype implementation new feature exists tested extended 
plans new modules include graphical visualization component query engines different query languages example 
daml oil support mentioned section rdf sail api designed allow extension functionality example include support daml oil 
current implementation support 
plan implement partial support daml oil storage inferencing 
sesame generic architecture storing querying rdf rdfs information 
sesame important step currently available storage query devices rdf publicly available implementation query language aware rdfs semantics 
important feature sesame architecture abstraction details particular repository actual storage 
possible port sesame large variety different repositories including relational databases rdf triple stores remote storage services web 
atomicity concurrency isolation durability 
properties transaction ensure database robustness aborted partially failed transactions 
sesame storing querying rdf rdfs sesame server application remote service storing querying data semantic web 
storage layer sesame abstracts particular communication protocol sesame easily connected different clients writing different protocol handlers 
constructed concrete implementations generic architecture postgresql mysql repositories communication protocol handlers 
important steps expand sesame full fledged storage querying service semantic web include implementing transaction rollback support versioning extension rdfs daml oil implementations different repositories 
feature especially greatly facilitated fact current sail implementation generic sql implementation specific particular dbms 

sofia alexaki vassilis christophides greg karvounarakis dimitris plexousakis karsten tolle 
managing voluminous rdf description bases 
technical report institute computer science forth heraklion greece 
see www ics forth gr proj rdf pdf 

david beckett 
design implementation redland rdf application framework 
proceedings semantic web workshop th international world wide web conference hong kong china may 

don box david gopal andrew layman noah mendelsohn henrik frystyk nielsen satish thatte dave 
simple object access protocol soap 
note world wide web consortium may 
see www org tr soap 

brickley guha 
resource description framework rdf schema specification 
candidate recommendation world wide web consortium march 
see www org tr cr rdf schema 

jeen broekstra kampman 
query language definition 
knowledge ist deliverable aidministrator april 
see www ontoknowledge org 

jeremy brian mcbride 
jena semantic web toolkit 
public api hp labs bristol 
see www hpl hp com semweb jena top html 

douglas barry mark jeff eastman david jordan craig russell olaf torsten fernando velez 
object database standard odmg 
morgan kaufmann 

don chamberlin daniela florescu jonathan robie jerome simeon stefanescu 
xquery query language xml 
working draft world wide web consortium february 
see www org tr xquery 

dieter fensel frank van harmelen michel klein hans akkermans jeen broekstra fluit jos van der meer hans peter schnurr rudi studer john hughes uwe krohn john davies robert engels bernt fredrik ygge thorsten lau bernd ulrich reimer ian horrocks 
knowledge ontology tools knowledge management 
proceedings ebusiness conference madrid spain october 
jeen broekstra kampman frank van harmelen 
patrick hayes 
rdf model theory 
working draft world wide web consortium september 
see www org tr rdf mt 

ian horrocks frank van harmelen peter patel schneider tim berners lee dan brickley dan mike dean stefan decker dieter fensel pat hayes jeff heflin jim hendler ora lassila deborah mcguinness lynn andrea stein 
daml oil 
www daml org daml oil index html march 

iso 
information technology database language sql 
standard 
iso iec international organization standardization iso 
available american national standards institute new york ny 

gregory karvounarakis vassilis christophides dimitris plexousakis sofia alexaki 
querying community web portals 
technical report institute computer science forth heraklion greece 
see www ics forth gr proj rdf rql rql pdf 

lassila swick 
resource description framework rdf model syntax specification 
recommendation world wide web consortium february 
see www org tr rec rdf syntax 

miller 
rdf query language java implementation 
public draft institute learning research technology 
see org discovery 
