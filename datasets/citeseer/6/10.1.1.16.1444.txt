quantifying information flow gavin lowe february extend definitions information flow quantify amount information passed words give formal definition capacity covert channels 
definition uses process algebra csp counting number di erent behaviours high level user distinguished low level user 
previous sought capture notion information flow called non interference independence multi level security system question high level user high pass information low level user low covert channel 
common approach produce definition information flow process algebraic setting see example 
definitions asking low distinguish di erent behaviours high high system pass bit information low 
circumstances flow information inevitable acceptable providing high 
example orange book includes requirements estimation capacity covert channels recommendations acceptable values 
extend previous defining information flow produce definition process algebra csp quantity information flow 
define information flow quantity number behaviours high distinguishable low point view 
distinguishable behaviours high system encode arbitrary number range 
send low words log bits information passed 
feature definition reader author address oxford university computing laboratory wolfson building parks road oxford ox qd uk mail gavin lowe comlab ox ac uk 
aware absence information flow represented information flow quantity 
important consideration models information flow treatment nondeterminism 
nondeterminism occurs models systems number reasons example noise caused users system inherent nondeterminism system aspects system resolved lower level abstraction model built 
previous formal approaches quantity information flow modelled nondeterminism probabilistically 
capacity covert channels defined making shannon theory information flow 
see example 
clearly probabilistic models useful accurately assign probabilities nondeterminism system 
rarely case simply knows system behave ways knowing relative probabilities 
believe better consider possible ways nondeterminism resolved consider worst case maximum information flow obtain upper bound channel capacity fact nondeterminism resolved di erently estimated capacity safe way err 
additional form nondeterminism underspecification designs 
formal analysis normally applied designs implementations time produced implementation detail formal analysis practical 
known earlier error discovered easier cheaper fix sense perform analysis early development possible 
nondeterminism designs represents underspecification intention stages development resolve nondeterminism 
design considered correct ways resolving nondeterminism lead correct implementation considering information flow quantity want consider maximum flow ways nondeterminism resolved 
information passed high low time events available necessary include notion time order obtain realistic models 
reasonable assume limit accurately agents tell time ectively time quantum 
order model turns convenient discrete time model time quantum time unit 
principle continuous time model timed csp approach taken earlier version 
tends lead tractable models discrete time models 
advantage working timed model define quantity information flow finite time period rate information flow 
section give brief syntax se mantics discrete time csp 
section consider example processes give information flow quantity helping describe intuitions 
section formalise notion give main definition illustrate examples 
definition slightly non intuitive proved surprisingly di cult get right number simpler definitions fail give right answer example processes 
section show processes definition gives information flow quantity information flow precisely processes satisfy intuitive definition lack information flow similar 
section consider amount information passed bounded amount time leading definition capacity covert channels bits time unit 
sum give pointers section 
brief overview discrete time csp section give brief overview discrete time csp 
details obtained 
untimed syntax event represents atomic communication processes process environment 
channels carry sets events example event channel represents set events channel distinguished event tock represents passage unit time 
processes system participate event prevent happening process time 
represents set standard non tock events tock tock 
process perform standard events simply allows time progress 
process perform event act process allows time progress progress remove availability process ers set events particular event performed process acts process allows time progress progress remove availability events process wait time units acts process represents external choice initial events processes ered environment event performed resolves choice 
process allows time progress tock events resolve choice 
represents internal nondeterministic choice process act choice criteria model 
process initially acts standard events occur time units timeout occurs process acts contrast process initially acts control transferred time units regardless progress acts events set hidden internal 
internal events urgent sense occur soon available tock events 
process run perform events refuse events 
process chaos nondeterministic process alphabet perform sequence events refuse events 
represents parallel composition synchronising events processes synchronise event tock represents interleaving processes parallel composition synchronising event tock semantics refusal set events representing process stable state internal activity possible events available null refusal representing absence refusal information possibly process enter stable state 
refusal trace alternating sequence refusals events starting finishing refusal example tock representing process alternately exhibit refusal information perform events 
discrete time refusal traces model csp represents process set refusal traces denoted 
compositional denotational semantic equations giving refusal traces compound process terms components 
thought experiments help motivate problem consider example processes case quantify information passed explaining intuitions 
set events high names set events low names assume partitioned assume high low observe tock events 
refusal traces normally known refusal tests term test somewhat di erent view processes adopt term refusal trace avoid confusion 
example consider process assume low able detect precise time events occur 
processes give unbounded amount information flow high pass arbitrary real number range performing event time low observe time event available deduce value high trying send counter intuitive 
assume finite speed low assume time quantum low vary behaviour rapidly time quantum 
notational ease take time quantum equal time unit 
low tell time observing tock events performed tell di erence times time unit 
tell event available seeing event refused tock process information flow quantity high chooses perform time unit low able perform high chooses perform time unit low see event refused tock high pass bit information low 
example consider process information flow capacity 
high pass arbitrary value range 
performing event time units low able perform event observing tock high pass additional value performing event low observe unable perform event time units 
note di erence example previous previous example low tell high performed event example additional information timing considerations 
rest section restrict information flow kind allowing events occur time unit including explicit timeout time 
example consider process certainly information flow low tell high performed event 
question low distinguish behaviours system events 
nondeterministic choices implemented identically clearly answer information flow quantity 
normal intuition csp nondeterministic choice represents specification resolved implementer deciding implement underspecification resolved mechanism run time 
example nondeterministic choice implemented select argument second nondeterministic choice implemented select second argument low able distinguish behaviours information flow quantity 
take information flow quantity process higher possible values words consider worst case scenario 
example information flow quantity process branch add information flow low perform deduce high performed tell similarly low perform deduce high performed tell 
assuming low copies system perform repeated experiments able copy system repeated experiments observe events corresponding di erent resolutions nondeterministic choice deduce performed 
example high performs event tock low see event refused high try perform event low able perform event 
low able perform tell high attempting perform high preempted low high low able process pass bit information sure reliably 
normal csp intuition high low attempt events time nondeterministic succeeds 
consider worst case scenario take information flow quantity clearly possibility flow information 
process scheduler gives priority high high get event low attempt event time unit 
defining information flow quantity section formalise information flow quantity considering way high low interact system order high pass information low 
assume behaviour system modelled csp process high act di erent ways depending value trying send low interact system try deduce value sent 
section consider way low interact system induces equivalence systems corresponding indistinguishability low derive alternative characterisation 
section consider high behaviour turns give high limited control events bring threads section define information flow quantity system give examples section 
low strategy testing equivalence low interact system repeatedly ering set events seeing accepted seeing refused low associate results particular sequences event acceptances refusals 
call low strategy interacting process test 
precise form tests reflect assumptions low discussed informally 
traditional approaches testing test process success perform distinguished event representing successful completion test 
extend test processes form success perform events form take representing successful completion test result success represent low behaviour process alphabet tock define test set processes 
process interact system give results events consider compositions form consider results composition produce results tock 
note results set possibility nondeterminism 
testing equivalence definition results invokes natural equivalence systems call testing equivalence systems equivalent tests give set possible results invokes natural refinement pre order results results results results 
note general interested low distinguish systems 
section consider testing equivalence 
note firstly equivalence may equivalence tests simply succeed fail giving numeric result processes may equivalent test succeed process succeed 
testing equivalence slightly weaker semantic equality ignores refusals immediately precede tock obtained replacing refusals immediately precede tock tock tock tock 
note 
lemma shows testing equivalence distinguish processes basis refusal tests lemma 
proof right left shows right hand side holds perform events proof left right constructs test distinguish right hand side hold 
full proof appendix lemma shows testing equivalence fits intuition low tell time total accuracy detect event available seeing refused tock performed 
illustrate di erence semantic equality testing equivalence consider processes 
semantically equivalent refuse perform performs unstable state 
processes testing equivalent test detect refused refused time unit tock performed tock withdrawn processes 
untimed models may equivalence traces equivalence real time models finite failures equivalence interesting discrete time model equivalence lies 
high strategy natural model high behaviour csp process alphabet tock write set processes 
case low view system turns won allow model assumptions high section especially example 
particular need assume high able arrange events occur events low 
take process represent high behaviour behaviour scheduler resolves event occur available 
include low events alphabet process low view system process example recall process example 
high pass value performing event modelled process combination ensures low event preempt alternatively high pass di erent value performing event modelled process allows low perform event 
want allow processes state events low available high able block low events high prevent events low occurring preempting events 
example process allowed run allowed 
order capture requirement need pieces notation say trace urgent refusal set immediately precedes tock case traces process context write tock tock trace obtained replacing refusal set immediately precedes tock restrict processes satisfying condition urgent tock tock 
says events blocked environment urgent events refused refusing events 
condition prevents examples shouldn allowed high shouldn able determine available low 
forbidden condition urgent refusal trace tock trace tock 
fact explained earlier consider ways nondeterminism resolved considering refinements ways act require refinements satisfy equation urgent tock tock 
condition satisfied process run frequent process defining strategies high 
lemma shows condition considering compositions form pairs processes distinguishable low point view considering compositions form lemma satisfy equation exist 
conjecture lemma strengthen result talks refinement lemma proved appendix defining information flow quantity presume high low devised strategy passing values range 

form strategy take 
suppose value high wants pass act process model high behaviour function form csp satisfies equation 
particular high strategy low possible views system 
strategy low distinguishes 
ask particular test low distinguishes processes consider results obtained testing process interacting processes ask results obtained high trying send 
recall write results results obtained test interacting system talking system composed process high level process overload results function take processes separate arguments results results 
example recall consider strategy defined run run success success 
results results 
consider strategies high low compatible sense high wants send value low obtains result write ok capture condition ok results satisfies 
example process satisfies condition strategy 
process strategy represented csp test ok associated information flow number di erent values sent 
discussed section particularly example want consider just refinements information flow quantity maximum flow achievable corresponding ok max csp test csp ok 
notation represents partial functions set definition unbounded define information flow quantity infinite 
example definition gives information flow quantity process illustrated clearly high pass information ways high interact system 
examples recall process appropriate strategy high low adopt run run success success 
note prevents initial occurring preempting strategy results results 
note processes satisfy equation particular refuse occurred block events timeout occurred refuses process information flow quantity 
example consider 
information flow quantity obtained strategy run run run success success success 
higher information flow quantity obtained example exploiting branches low commit exploring branches exploring branches nondeterministically searching example test success success success success success 
distinguish high behaviours run run run case low explore resulting process tree 
example shows adopted testing style definition opposed definition csp additional restrictions number di erent ways process look low point view 
definition information flow quantity process run run run run run cause system look di erent low point view 
consider example shows insist ok predicate results caused particular precisely di erent processes simply lead di erent sets results 
consider success success success give di erent sets results high level processes run run run run results results obtained high level behaviours contribute additional information flow 
consider example gives infinite information flow quantity 
wait high pass arbitrary value performing events run wait wait success 
strategy test pass arbitrary value information flow quantity process infinite 
information flow section give number results model definition 
main goal understand circumstances definition gives process information flow quantity information flow 
focardi gorrieri define security properties jointly termed non deducibility composition ndc written csp sat ndc nature equivalence depends security property question 
argued earlier testing equivalence appropriate setting define testing non deducibility composition sat condition equivalent propose strengthening process satisfies strong testing non deducibility composition follows sat sat main result definition gives information flow quantity precisely processes satisfy 
prefer condition composition properties overcomes objection forster roscoe 
leak insecure process consider processes leak chaos leak chaos 
processes clearly insecure behaviours coming leak satisfy composition properties insecure behaviour masked behaviours chaos 
processes satisfy refined leak focardi rossi introduce notion persistent non deducibility compositions reachable states process satisfy non deducibility compositions 
property appears similar strong non deducibility compositions intend investigate relationship 
high level processes system look di erent low point view find testing strategy give information flow quantity 
lemma exist csp satisfying equation test results results 
proof test lemma distinguishes processes particular refusal trace proof constructs suitable refinement suitable high level processes resulting systems exhibit trace system exhibit trace 
full proof appendix 
theorem identifies circumstances definition identifies information flow gives information flow quantity theorem process information flow quantity refinements high change way process appears low theorem equivalent sat proof prove contrapositive 
direction lemma csp test results results satisfy 
direction csp test results results satisfy csp satisfy lemma 
bounded time information flow processes pass unbounded amount information su cient time finite rate information flow 
section extend previous section consider amount information passed finite interval define rate information flow 
define results obtainable system test time follows results tock 
note consider observations containing observations finishing time 
definitions obvious adaptations previous ones 
results results ok results satisfies max csp test csp ok 
define long term information flow rate bits time unit follows lim log limit exists 
course definition doesn give story 
process leaked gigabyte information time subsequently long term information flow rate zero probably acceptable secure system 
examples example consider fix consider strategy wait 
success 
success 
results 
observations contain tock clearly low distinguish behaviours time units able perform zero events 
long term information flow rate zero 
example consider processor shared high low scheduled round robin scheduler time quantum scheduling consists phases execution phase agent control processor contention phase decided processor 
proc denote behaviour processor scheduled low high respectively 
execution phase processor acts proc period interrupted moving contention phase contention exec proc contention phase high low request processor events req req respectively 
scheduler repeatedly er req event accepted time er withdrawn req event ered 
execution phase processor ered agent 
req contention contention req exec initially high priority scheduler turns high low able pass bit time units 
fix number bits time 
strategy involve high processor pass bit processor pass bit 
pass bits time significant bit 
high strategy pass value modelled process run mod req wait div wait div 
low strategy attempt req events times form modelled test wait 
test accumulates result parameter parameter records number bits received far 
req wait wait 
success 
note high succeed performing req times multiples low perform req times form high perform req corresponding time strategy achieves information flow quantity long term information flow rate formal definition quantity information passed high level user low level user system number behaviours high accurately distinguished low point view 
correct definition proved remarkably di cult find alternative definitions failed give correct values example processes 
aspect proved hardest get right high able prevent events low occurring preempting events 
model appears accurate gives expected results examples considered 
proved agrees intuitive definition processes exhibit flow information 
consider possible extensions 
clearly useful automated procedure calculating quantity information flow system 
believe scope considering possible high processes successfully interact system high processes attempt events system er corresponding low tests tests attempt events system er identifying subsets satisfy ok predicate 
making cient prove challenging 
useful develop systematic ways calculating quantity information flow system proving lower bounds done simply exhibiting suitable strategy proofs upper bounds tend ad hoc 
explained treated nondeterminism considering worst case attempting assign probabilities di erent possibilities 
interesting compare approaches 
formally need semantic model correctly treats interplay probabilities nondeterminism building semantic model proved remarkably di cult existing models allow nondeterminism component system resolved way depends probabilistic behaviour component flow information component 
assumed low time quantum degree accuracy low tell time equal time unit 
assumption valid interesting relax 
delays system assumed integer number time units necessarily achieve equality rescaling time unit particularly time quantum greater time unit 
ectively ignored refusals immediately precede tock believe semantic model ignores refusal traces model worthy study right captures intuitive notion process equivalence shown lemma 
bill roscoe steve schneider useful discussions information flow 
partially supported ce naval research 
allen 
comparison non interference non deducibility csp 
proceedings th ieee computer security foundations workshop 
de nicola hennessy 
testing equivalences processes 
theoretical computer science 
riccardo focardi 
comparing information flow security properties 
proceedings th ieee computer security foundations workshop pages 
riccardo focardi roberto gorrieri 
classification security properties 
journal computer security 
riccardo focardi roberto gorrieri fabio 
information flow analysis discrete time process algebra 
proceedings th ieee computer security foundations workshop pages 
riccardo focardi rossi 
security property processes dynamic contexts 
proceedings workshop issues theory security wits 
richard forster 
non interference properties nondeterministic processes 
phil oxford university 
available www comlab ox ac uk research areas concurrency papers thesis ps gz 
james gray iii 
mathematical foundation information flow security 
proceedings ieee computer society symposium research computer security privacy 
jonathan millen 
covert channel capacity 
proceedings ieee computer society symposium computer security privacy 
joel ouaknine 
discrete analysis continuous behaviour real time concurrent systems 
phil thesis oxford university 
iain phillips 
refusal testing 
proceedings th international colloquium automata languages programming lncs pages 
spring verlag 
roscoe 
csp determinism security modelling 
proceedings ieee symposium security privacy 
roscoe 
theory practice concurrency 
prentice hall 
ryan 
csp formulation non interference 
cipher pages 
proceedings rd ieee computer security foundations workshop 
steve schneider 
concurrent real time systems csp approach 
wiley 
shannon weaver 
mathematical theory communication 
university illinois press 
department defense 
dod trusted computer system evaluation criteria 
dod std 
todd dale johnson 
information flow nondeterministic systems 
proceedings ieee computer society symposium research computer security privacy 
proofs lemmas proofs testing proving results testing scheme 
show refining process reduces set results obtained test 
lemma results results 
proof suppose test 
results tock tock results 
prove lemma 
proof lemma right left implication noting 

urgent urgent 
suppose pick test semantic definitions urgent assumption urgent observations urgent urgent vice versa 
trace trace results results converse prove contrapositive 
suppose loss generality 

tock 
tock 


convenience define syntactic operator attempts event time unit giving result accepted success construct test succeed value trace succeed value 
success 
success 

success 
results results 
forcing refusal traces prove technical lemma shows process particular refusal trace construct refinement follow suitable environment words remove nondeterminism cause process deviate lemma 
construct process forces refuse events perform events refusal sets proof obtained replacing refusal set 
represent behaviour trace 
note process provided 
define rq tock rq tock rq tock tock 
straightforward prove induction rq provided maximal 
construction refuse events perform events refusal sets note lemma strengthened talk refinement standard refusal testing model 

suppose satisfies conditions lemma 
axiom giving contradiction case 
construction give refinement refinement 
note holds 
includes event refused tock trace trace 
includes refusal including events performed tock trace trace inits lemma useful 
lemma suppose tock tock defined lemma force tock tock tock tock 
proof suppose observation 
trace trace tock tock tock tock 
giving contradiction 

trace trace tock tock tock inits tock giving contradiction 
lemma trace write tr trace process process perform just events tr tr tr tr tock wait tr 
prove lemma satisfy equation proof lemma consider equivalent loss generality assume take consider cases follows case 
trace urgent 
tock tock equation 
tr trace 

required 
case 
take minimal 

lemma forced 
tock tock 
urgent 
tock tock equation 
lemma tock tock 
tr trace 
init init represents trace element removed init init tock init tock tock tock equation 
tock 
required 
case tock tock 
take minimal 
tock 
lemma tock forced 

urgent 
tock tock equation 
lemma tock tock 

tock 

urgent 
tock tock equation 
tr trace 
required 
lemma prove lemma high level processes system look di erent low point view find testing strategy give information flow quantity exist csp satisfying equation test results results 
proof lemma lemma suppose lemma 
results lemma show results results 
sure member results possibility nondeterminism 
suppose corresponds trace traces respectively trace trace pre tock refusals include events corresponding refusal lemma forced 
run tock run run 
consider test construction combination force perform trace states event due forces happen states event due prevents events happening selects appropriate event hidden event happen silently tock states tock refusal due prevents events prevents events refuses refuses test selects tock refuse events 
results 
note satisfies equation urgent traces refusing states ers run 
note satisfies equation 
results results results lemma 
construction gives result results 

