distributing xml repositories xml increasingly data exchange represent arbitrary data sources virtual xml repositories 
application scenarios fragments repository distributed web 
design query models distributed xml data studied detail 
introduce distribution approach virtual xml repository 
fragmentation method outline allocation model distributed xml fragments 
discuss efficient realization small local index structures 
index structures encode global path information provide efficient local evaluation common types global queries 

advancements development native xml database systems clearly indicate xml considered data exchange data representation format 
management xml data native systems compared managing xml object relational database systems leads new application research perspectives 
particular conjecture distribution aspects xml play important role 
fact application domains xml web services commerce collaborative authoring large electronic documents webdav management large scale network directories show xml data inherently distributed web 
systems managing distributed xml data take aspect account allow efficient reliable usage xml data different sites 
concepts distribution xml data clearly important day little related deals distribution aspects xml 
distributed query evaluation techniques investigated 
problem distributed replicated dynamic xml documents studied time fundamental query processing models proposed 
interestingly published candidate recommendation xml fragment interchange respective concepts founded practice 
works address distribution copyright held author owner 
international workshop web databases webdb 
june san diego california 
jan marco michael gertz department computer science university california davis shields ave davis ca gertz cs ucdavis edu xml best knowledge investigates top design distributed xml data source traditional studied distribution design principles relational databases 
lay groundwork distribution design xml data context large scale xml repositories manage xml data web application scenarios mentioned 
particular fragmentation scheme global conceptual schema structure outline fragments xml data allocated different sites 
realization distribution design small index structures site efficiently encode information local remote fragments 
index structures allow processing global queries local sites accessing sites 
section introduce data schema query model underlying approach 
fragmentation allocation schemes discussed section 
section detail representation local remote xml fragment information local sites illustrate local global queries efficiently evaluated 

foundations data model customary assume xml data modeled single rooted node labeled tree root label text 
nodes set connected edges form tree root node root function label assigns element name label node presentation purposes assume element attributes modeled regular nodes 
function text assigns text strings nodes 
assume partial order nodes relative positions sibling nodes carrying label considered significant 
order criterion sufficient support types queries 
example book element order authors child nodes matters order title author child nodes book element relevant 
notion data source just source refer representation xml data tree model 
data source considered single large xml document 
data source furthermore adopt common definitions rooted label paths sequences node labels starting label root node analogously rooted data paths sequences source nodes 
naturally rooted data paths associated single rooted label path 
example highlights rooted data path rooted label path loc books bk underlying xml distribution approach global conceptual schema 
conceivable schema exists form dtd xml schema chose simplified schema structure 
structure called rg resembles basic features dataguide tree structured data admissible rooted label path enumerated 
reasons choice 
treestructured schema representation easier fragment decompose grammar schema specification 
second case large scale xml repository local sites express information data representation needs schema formalisms expressive local rg 
schemas form dtd xml schema translated local rg combined global rg model data managed distributed xml repository resembling basic concepts view integration process 
strictly expressive dtd xml schema 
assume preserve information get lost transforming dtds xml schemas exist tree structure erg represents rg 
particular assume node rg tree minimum maximum number vmin vmax times node element type occurs child node recorded 
instance node child node pair specifies optional child element occurs times child obviously different min max values associated nodes having label 
depending constructed scratch combining local dtds xml schemas information associated nodes rg 
includes particular occurrence information pairs rooted label paths rg 
occurrence information describes document contains data path corresponding label path contain data path corresponding label path 
required siblings node simple case occurrences query optimization schemes verifying fragmentation correctness discussed section 
query model distribution scheme assume query issued local site query results complete data fragments delivered site 
queries consist path tree patterns matched distributed source 
path tree pattern queries build core xml query languages 
edges patterns represent parent child ancestor descendant relationships 
node labels text values certain nodes constrain patterns 
distinguished node called selection node determines roots fragments returned query result 
gives examples patterns matches form book titles data source shown center 
selection node location books title path pattern parent child ancestor descendant books location id title zurich tree pattern path tree pattern queries common approach process path tree pattern queries structural joins :10.1.1.21.8854:10.1.1.21.8854
structural joins sjs index structures store lists logical identifiers nodes source 
list related certain node predicate common node label label path word occurrence 
node identifiers allow query engine determine parent child relationships nodes 
turn allows reassembling instances full pattern occur source joining node id lists represent atomic patterns 

distribution design objective distribution design xml repository formally describe xml repository data fragmented allocated local sites 
design strategy follows basic distribution principles known relational object oriented databases hierarchical structure mix schema information data xml requires substantial adjustments respective design approaches 
introduce basic properties fragmentation approaches illustrate specific fragmentation scheme outline fragments allocated local sites 
fragmentation alternatives fragmentation scheme satisfy certain correctness criteria order ensure semantics data fragmented change fragment data distributed managed local sites 
context relational databases criteria known completeness reconstruction disjointness rules 
similar rules devised fragmenting xml data illustrated 
assume set sr local sites 
site si set queries qs associated typical access patterns form sublanguage xpath derived 
access patterns include path tree patterns local site specific queries formulated xquery xpath xslt 
representing global schema serves basis queries specify fragments 
informally fragmentation scheme ensure decomposed disjoint complete set tree structured fragments 
allocation scheme applied respective fragments ensure reconstruction repository outlined section 
specification xml fragments sublanguage xpath called xf includes context node descendant child axis wildcard 
fragment specification sf ef consists components selection fragment sf optional set ef exclusion fragments 
types fragments xf expressions 
semantics fragment specifications fairly straightforward selection fragment sf evaluated rg results set nodes 
evaluation done efficiently rg single xml document smaller source corresponding rg 
node determines subtree rg called rg fragment 
optional specifications ef exclusion fragments evaluated subtrees determine rg fragments 
example assume fragment specification 
subtrees rg selected rooted node node ancestor subtrees describe selection fragments 
fragments subtrees cut rooted node node grandparent child node selected fs expression 
illustrates case fragment excluded fragment 
xf expressions represent path expressions subtree containment easily verified fragment specifications prefixes rooted label paths 
desc denote nodes rg contained fragment excluding nodes specified optional ef 
set fl fragment specifications 
said complete nodes contained fragment desc fi 
elements said disjoint fragment specifications fi fj desc fi desc fj 
fragment specifications disjointness verified naive fashion marking node rg number fragment specification fi contains node number assigned 
complete complete set obtained identifying rooted label paths subtrees marked including exclusions marked 
practical point view local sites interested fragments close leaf nodes fragments contain data 
upper part rg including root node see fragment provides hook fragments located lower portion rg 
illustrate allocation approach complete disjoint set fragment specifications important note language underlying fragment specifications easily extended include branching conditions attribute text values 
far language xf supports vertical fragmentation approach schema structures rooted label paths fragments disjoint common prefixes label paths serve join attributes reconstruction 
addition branching conditions text attribute values naturally leads horizontal fragmentation approach root nodes fragments allowed label path 
adding branching lead undesirable features regarding checks disjointness completeness 
example assume fragment specifications containing exclusion fragments 
known node node children occurrence information rg see section specifications disjoint 
naturally complex branching expressions selection exclusion fragments complex decision problem regarding disjointness 
currently studying types language extension context expressive fragmentation schemes utilizing results query containment presence schema information 
site partially duplicated structure instances site fragmentation distribution fragment instances sites inclusion conditions attributes text nodes dealt fashion analogous horizontal fragmentation relational databases 
example fragment specification easily derive complement fragment ensure completeness 
fragment allocation allocation set complete disjoint fragment specifications involves determining fragments allocate sites placing schema structures local sites placing suitable instances fragments local sites 
outline approach underlying steps 
step dealt existing allocation models relational databases 
assume site fs fragment specifications associated 
assume fragment replicated sites fragment exactly master site 
local schema structures 
recall rg serves global conceptual schema proposed distribution approach 
support global queries local sites rg fully distributed site extended way 
node site stores fragment recorded 
case replicated fragments master site replicating sites recorded 
call extension rg distribution rg 
placing fragments sites 
fragments site consist local structure text content fragment specification 
addition global context fragment kept form data path global root node local fragment root 
loc books bk loc ation position number loc id id id berlin boston delhi loc 
loc 
zurich title id loc loc books bk bk bk 
bk 

journals locations log bits label sufficient distinguish nodes max 
books bits max 
authors bits encoding data path loc books bk example source 
global context serves join attribute reconstruction full source distributed fragments 
adding new data virtual xml repository involves steps independent site operation issued 
consulted determine fragment contains root node inserted data 
add operation sent site holds master copy operation executed time propagated replicating sites proper protocols ensure consistency sites 
parts added data reach distribution fragment master site propagate add operation content related master site procedure described applied 
instance example new node related content added master sites involved 
notice fragments local sites replicate global context path necessary involve sites related distribution fragments higher tree example placing new fragments 
furthermore global context data paths exist site suffice compute global context path newly added data 
update operations insertions propagated fashion analogous placing new data 

realization efficiency distribution scheme duplicating global path information leads xml fragments local sites 
global context available locally possible answer global queries locally ii easily reconstruct fragments distributed multiple sites 
storing global context local fragment potentially expensive 
address issue utilizing new node identification scheme called pids micro path ids effectively encodes rooted data paths global context 
furthermore employ dense storage node ids path term index structures 
introduce node id scheme index structures sections respectively 
section outline distributed query processing approach 
section evaluate approach experimentally 
pid node identification scheme pid node ids approach consist pair integers 
integer called node number identifier rooted label path distribution 
second number called position number contains information identify particular instance label path distributed source 
shows construction position number data path loc books bk source shown center data path highlighted black nodes 
position number bit accurately encodes sibling positions multiple siblings label occur 
case loc ation bk nodes 
node types multiple siblings explicit sibling number encoded books example 
number bits required step data path determined maximum fanout vmax section certain node type source 
assuming books node source bk children bits sufficient encode bk sibling positions 
maximum fanout information part rg 
static source exists time distribution fanout derived source 
fanout derived estimates specific schema information exist parts repository 
procedure determine fanout state art node id schemes suitable support distributed storage querying :10.1.1.21.8854
furthermore empirical studies real world data sources show node types vary little number siblings encoding node ids quite effective section 
position numbers constructed appending bits related single sibling numbers rooted data path 
position numbers related certain node number rooted label path bit length 
interpreted bit integers shown left side 
node pid allows directly deriving node parent node ancestors preceding siblings 
node relationships need derived related approaches structural joins 
relationships nodes simply determined comparing node numbers matching position number prefixes 
furthermore pids require structural joins branch positions query pattern edge 
source size index index index index total pos max pos avg big reuters xmark gb fin times dblp swissprot table source index size mb source size pos length bits xml sources index structures core design 
distribution scheme employs core index structures centralized structural join approaches :10.1.1.21.8854
approach lists pids grouped node number 
avoid having structurally join node id lists matches label path 
furthermore list pids pid position numbers need stored repeatedly 
list numbers fixed length path identifiers general vary length 
scheme path index index maps node numbers lists position numbers document order 
position numbers index stored 
way pids constructed position numbers document order consecutive sequences bit integers gaps 
consecutive sub sequences store position number index position full sequence 
index positions function direct pointers second index structure 
additional index address index index maps logical pids physical data addresses 
analogously path index term index index maps terms lists pids nodes terms occur 
lists grouped node number utilize sparse storage structure outlined 
pid index index allow query engine process path pattern queries having reconstruct patterns ancestor descendant relationships expensive structural join operations 
path patterns matched result pid lists node numbers match patterns 
path pattern ends term containment condition index accessed index 
tree patterns resembled path patterns 
lists related path patterns joined branch point tree pattern 
left side shows core db book author list joiner index index distribute xml repository document fragments duplicate site index index structures distribution index structures access paths employed centralized indexing query processing approach 
rest presents index distribution scheme discussed 
index distribution 
distribution scheme distributes nodes source common label paths 
label paths uniquely relate node numbers rg relate defined units index structures 
straightforward distribute source fragments accompanying index portions indicated sites 
depending size index structures beneficial replicate frequently index portions sites keep related fragments 
particular assume fully replicated site 
furthermore indexes remarkably small shown section 
cases fully replicating index possible little overhead 
index duplicating parts related frequently terms cheap effective speeding query processing 
index portions provide translation logical node ids physical addresses step query processing need kept related source fragments single replicating site 
distributed query processing queries processed follows 
query tree pattern matched local determine potential matches label paths 
instances pattern matches stitched locally available index 
term conditions related index portions locally replicated remote site accessed 
information sites providing missing index parts directly 
distributed query processing prominent cost factors process pattern queries transfer node id lists common site order join lists 
main goal efficient distribution scheme structural joins minimize transfers lists 
example source books related fragments index portions stored site information stored site tree pattern query processed site matching location books title pattern locally 
node ids location id fragments contain term zurich fetched site joined earlier matches 
local result small option process query send matches site site execute structural join site send results back 
optimization options analogous optimizations distributed query processing relational database subject current research 
evaluation goal section clearly show index parts index small fully replicated reducing distributed query processing local query processing 
efficiency local query processing shown 
extensive fully distributed prototype system observations allow conclude xml distribution approach realistic efficient terms storage space query processing 
table summarizes sizes indexes different non distributed sources 
sizes distributed replicated index structures directly derived numbers table 
implementation physical addresses stored index offsets underlying plain text source 
sources table generated xmark xml generator originate trec disk reuters corpus web 
different structural complexity main reason variations relative index sizes 
instance financial times little structure source depth small indexes 
swissprot hand unusually rich structure path index particular relatively large 
big composite source consisting sources aforementioned sites 
table lists maximum average left index right pid position number length 
earlier equivalent indexing approaches index size frequently ignored reported times large shown providing mapping logical node ids physical addresses 

complete distribution approach xml repositories including fragmentation allocation efficient realization 
fragmentation xml data allocation fragments local sites build known concepts relational databases extended account tree structured data 
particular identified label path fragmentation xml analogous vertical fragmentation relational system 
path value conditions provide analogy horizontal fragmentation 
realization expense replicating global data paths order identify fragments local sites offset efficient encoding path information new node identification indexing scheme xml 
path index structure particular small fully distributed local sites bringing performance query processing close centralized systems 
indicated earlier currently investigating monetdb cwi nl xml generator html trec nist gov www reuters com corpus www cs washington edu research expressive fragment specifications distribution approach similar derived horizontal fragmentation primary foreign keys 
particular context data modifications complex global queries studying cost models management replicated fragments span multiple sites 

abiteboul cob na manolescu milo 
dynamic xml documents distribution replication 
appear proc 
acm sigmod conf 

jagadish koudas patel srivastava wu 
structural joins primitive efficient xml query pattern matching 
proc 
ieee int conf 
data engineering 
apers 
data allocation distributed database systems 
acm transactions database systems tods 
gertz 
efficient xml node identification indexing scheme 
technical report cse dept computer science university california davis 

moerkotte neumann schiele 
anatomy native xml base management system 
vldb journal 
grosso 
xml fragment interchange 
candidate recommendation february 
www org tr xml fragment 
jagadish laks lakshmanan milo srivastava vista 
querying network directories 
proc 
acm sigmod conf 

li partitioning schemes object oriented databases 
th int workshop research issues data engineering distributed object management ieee 
li moon :10.1.1.21.8854
indexing querying xml data regular path expressions 
proc 
th int conf 
large data bases vldb 
miklau suciu 
containment equivalence xpath fragment 
th acm symposium principles database systems pods 
neven schwentick 
xpath containment presence disjunction dtds variables 
th int conf 
database theory lncs 
zsu valduriez principles distributed database systems nd ed 
prentice hall 
suciu 
distributed query evaluation semistructured data 
acm transactions database systems tods march 
whitehead jr wiggins 
webdav ietf standard collaborative authoring web 
ieee internet computing september 
zhang naughton dewitt luo lohman 
supporting containment queries relational database management systems 
proc 
acm sigmod conf 

university michigan timber project 
www eecs umich edu db timber 
