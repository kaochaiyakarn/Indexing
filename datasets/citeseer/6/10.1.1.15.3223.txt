stampede distributed programming system ubiquitous computing sameer paul ramachandran college computing georgia institute technology atlantic drive nw atlanta ga usa rama cc gatech edu focus important problem space ubiquitous computing programming support distributed heterogeneous computing elements environment 
address interactive dynamic stream oriented nature application class develop appropriate computational abstractions stampede distributed programming system 
key features stampede include indexing data streams temporally correlating different data streams temporally performing automatic distributed garbage collection unnecessary stream data supporting high performance exploiting hardware parallelism available supporting platform language heterogeneity dealing application level dynamism 
discuss features stampede programming ease affords performance 
complex ubiquitous computing applications require acquisition processing synthesis correlation temporally streaming data video audio 
applications usually span multitude devices physically distributed heterogeneous 
different kinds sensors data aggregators collect raw data limited processing 
extraction higher order information content raw data requires significantly processing power 
example microphones may collect audio data voice recognition requires processing 
continuum computation communication resources depicted 
applications highly dynamic 
unique characteristics emerging class distributed applications calls novel solutions 
particular need appear nd icdcs july 
funded part nsf itr ccr nsf ccr compaq cambridge research lab project state georgia georgia tech broadband institute 
equipment experimental studies funded part nsf research infrastructure award eia intel distributed programming system 

octopus hardware model developed novel distributed programming system called stampede enables coupling network spatially distributed sensors data aggregators cluster 
main features 
octopus architectural model cluster body supports network sensors data aggregators 
supports heterogeneous hardware continuum encompassing networked sensors data aggregators connected sensors backend computational clusters 
supports heterogeneous programming environment parts application programmed java 
parts access set abstractions 
supports sharing streaming data multiple nodes address spaces 
system aspects sharing primitives automatic garbage collection facility governed common trait application domain time sequenced data 
designed high performance supports task data parallelism applications 
stampede system operational developing prototype ubiquitous computing applications researchers georgia tech 
studied performance stampede system levels 
overhead stampede high level api compared basic message transports udp tcp 
application level scalability workload akin distributed telepresence implemented top stampede 
projects mit oxygen berkeley endeavour ogi georgia tech infosphere share high level objectives support ubiquitous computing 
differ specific research goals 
oxygen focus develop fundamental technology ubiquitous computing fabric address issues networking developing adaptive applications top 
endeavour focus develop scalable services file systems planetary scales top ubiquitous infrastructure varied network connectivity 
infosphere focus devise middleware help user combat explosive growth information internet allow information infrastructure scale world wide web grows 
research goal seamless distributed programming system complementary projects 
messaging layers mpi pvm middleware corba rmi provide basic transport remote procedure call mechanisms needed distributed applications 
language proposals parallel distributed computing linda orca cid 
languages provide fairly generic programming capabilities data sharing synchronization offer specific help characteristics ubiquitous computing applications 
discuss requirements ubiquitous computing applications section 
architecture implementation stampede section 
programming experience stampede section performance stampede section section 
requirements enumerate programming requirements ubiquitous computing applications stream handling consider gesture speech inputs ubiquitous application 
gesture stream images speech audio samples 
ubiquitous computing prevalent expect preponderance stream data 
efficient support streams needed 
temporal indexing correlation datasets different sources may combined correlating temporally 
example stereo vision combine images captured cameras 
analyzers may multi modally combining vision audio suggests programming system offer support indexing data time 
distributed heterogeneous components nature applications suggests distributed heterogeneous components 
heterogeneity may level hardware software runs components 
real time guarantees due interactive nature certain events application may need soft real time guarantees 
example telepresence timely visual audio feedback participants essential 
dynamic start natural way components application join leave 
example telepresence application participants free come go please 
plumbing ubiquitous computing applications components connected complex dynamic fashion 
programming system allow intuitive efficient flexible ways dynamic generation complex graphs computational modules 
stampede programming system thread channel thread input conn thread output conn thread channel channel 
computational model dynamic thread channel graph thread computational model supported stampede shown thread channel graph 
model captures huge class distributed ubiquitous computing applications 
threads map computing devices scattered octopus hardware model 
channels serve application level conduits time sequenced stream data threads 
architecture stampede architecture main components channels queues threads garbage collection handler functions real time guarantees nameserver support heterogeneity 
threads channels queues stampede provides uniform set abstractions entire hardware continuum threads channels queues 
stampede threads created different protection domains address spaces 
channels queues system wide unique names serve containers time sequenced data 
facilitate inter thread communication synchronization regardless physical location threads channels queues 
thread dynamically connects channel queue input output 
connected thread get put items channel queue 
items represent application defined stream data video frames 
timestamps associated item channel queue user defined 
collection time sequenced data channels queues referred space time memory 
conceptually stampede computation threads channels queues akin distributed set processes connected sockets 
power stampede ability reason program behavior time temporal correlation data generated different sources 
garbage collection api calls stampede facilitate thread indicate item set items channel queue garbage far concerned 
thread knowledge stampede automatically performs distributed garbage collection timestamps items timestamps interest thread stampede computation 
handler functions stampede allows association handler functions channels queues applying user defined function item channel queue 
handler functions handy various situations 
transport complex data structure channels functions define serialization stampede 
similarly stampede invoke handler registered thread item garbage 
real time guarantees timestamp associated item indexing system data items 
pacing thread relative real time stampede provides api borrowed beehive system 
essentially thread declare real time interval resynchronize real time tolerance exception handler 
thread executes tick performs stampede call attempting synchronize real time 
early thread blocked synchrony achieved 
late specified tolerance stampede calls thread registered exception handler attempt recovery application specific manner 
name server stampede infrastructure includes name server 
application threads register de register information channels queues intended name server 
thread application entire octopus model query name server determine resources interest may want connect computation model 
facilitates dynamic start feature referred section 
heterogeneity architected stampede system client libraries devices octopus server library cluster octopus head 
organization bearing generality computational abstractions provided stampede 
api calls stampede available thread regardless executing 
stampede accommodates component heterogeneity ways 
firstly server library ported multiple platforms alpha tru linux solaris nt 
secondly stampede supports language heterogeneity clients programmed java 
application parts written parts java sharing abstractions 
detailed discussion stampede api scope stampede provides api thread channel creation thread channel connection setup actual connections 
system takes care buffer management synchronization garbage collection allowing programmer concentrate application specifics 
implementation client java client client interface exporting stampede api surrogate thread surrogate thread surrogate thread surrogate thread cluster stampede resources working threads 
stampede implementation stampede implemented runtime library parts server written running cluster clients java run distributed system 
shows organization 
programming model uniform distinguish client server dichotomy exists historical reason stampede originally developed cluster computing system reflection octopus analogy 
distributed points clients usually connected sensors serve capture access points heavy duty computation tracking performed cluster server 
client library stampede apis exported distributed points manner analogous rpc 
client libraries available java 
java client library encapsulates stampede apis objects 
application level stampede programs running devices clients written java coexist parts single application 
tcp ip socket transport client server library communication 
java client library uses stampede api header file may www cc gatech edu rama stampede api txt data representation perform marshalling unmarshalling arguments client library uses xdr 
server library server library implemented top message passing substrate called clf 
clf provides reliable ordered point point packet transport stampede address spaces cluster illusion infinite packet queue 
exploits shared memory smp 
cluster nodes memory channel myrinet 
available udp lan 
listener thread server listens new devices joining stampede computation 
joining specific surrogate thread see created cluster new device 
subsequent stampede calls device carried specific surrogate thread 
state information pertaining device maintained associated surrogate thread 
surrogate thread ceases exist device goes away mirroring joining leaving device 
supporting heterogeneity java clients run device jvm 
server library client library ported platforms dec alpha tru unix linux solaris nt 
implementation supports combinations bit bit platforms devices cluster 
combination devices cluster platform host single stampede application 
supporting handler functions devices mentioned earlier section stampede allows userdefined actions performed item channel queue handler function 
garbage collection example mechanism 
stampede runtime determining item channel garbage calls user registered notification handler 
easily implemented cluster threads stampede devices need special handling 
requested device install handler surrogate installs generic handler function cluster 
stampede invokes generic handler handler collects information behalf device communicates device opportune time 
programming stampede consider video conferencing application 
application involves combining streams audio video data multiple participants sending composite streams back participants 
simplicity consider video streams 
implementation application stampede components server program cluster set channels device storing video streams prod disp prod disp ck cluster high speed interconnect external clients prod put mixer 
chan prod disp disp threads get 
video conferencing application mixer thread takes corresponding timestamped frames channels create composite channel placing composite video output mixer thread 
camera display devices participant 
client program device comprised producer thread puts timestamped video stream assigned channel display thread gets composite video displays 
shows structure application 
server program starts happens server creates multiple address spaces cluster 
server spawns listener thread address space 
server creates address space mixer thread output channel created 
id channel cj created th client ni passed id channel passed client nameserver 
mixer thread create input connections channels cj 
create output connection channel get matching timestamped images cj 
create composite item image 
put composite item channel th client program client communicates listener thread address spaces ni 
client program creates channel cj address space ni 
client program starts producer thread creates output connection channel cj puts images cj 
client program starts display thread creates input connection channel gets composite images seen example high level abstraction provided stampede ease task developing application 
performance experimentally evaluated performance stampede system 
measured performance system levels 
micro level determine latency stampede operations 
second level video conferencing application section 
hardware setup experiments follows cluster way smps interconnected gigabit ethernet 
processor mhz pentium iii xeon 
cluster node runs redhat linux gb ram gb scsi disk 
experiments involve java client libraries cluster node acts device 
setup ensures measurements reflect impact stampede runtime perturbed device hardware capabilities 
micro measurements server producer channel 
experiment client server producer consumer channel 
experiment configuration client server producer consumer channel 
experiment configuration micro level measurements compare data exchange stampede threads similar data exchange underlying messaging layer 
intent show overhead incurred highlevel data abstractions stampede minimal compared raw messaging 
raw messaging data exchange amounts send receive combination 
put get combination logical equivalent stampede 
conduct experiments involving pair threads 
experiment compare different configurations producer consumer pair performing data exchange stampede commensurate send receive data exchange 
graphs correspond experiments figures message size bytes plotted axis latency microseconds plotted axis 
readings shown data sizes ranging bytes steps bytes 
restricted readings bytes client server client producer consumer channel 
experiment configuration time microseconds cluster stampede stampede tcp udp message size bytes 
intra cluster experiment udp raw messaging layers compare allow messages greater kb 
experiment experiment pictorially shown producer consumer threads different nodes cluster 
channel communication located consumer address space 
producer puts items channel 
consumer gets items channel 
ensure put get overlap 
latency measured sum put get operations 
stampede configuration compared alternatives 
uses udp communication tcp ip producer consumer pair 
cluster stampede uses clf reliable packet transport layer built top udp 
clf connection management overheads tcp ip choice alternative scenarios compared stampede 
ensure send receive overlap alternatives producer sends message consumer receives 
consumer sends message producer receives 
exchange latency assumed half time taken time microseconds distributed clients tcp configuration configuration configuration message size bytes 
clients experiment time microseconds java distributed clients tcp configuration configuration configuration message size bytes 
java clients experiment cycle 
programs experiment written performance results shown 
seen data exchange stampede adds overhead ranges microseconds kb payload microseconds kb payload compared udp alternative 
overhead compared tcp ip alternative starts microseconds kb falls microseconds kb 
overhead incurred stampede fairly low reasonably high payloads compared udp best better tcp ip worst compared tcp ip 
experiment experiment involves client library stampede 
producer thread runs device client program 
configurations experiment differing location consumer thread 
configuration shown consumer thread located channel cluster node 
configuration involves device cluster network traversal 
get operation local cluster node 
client library uses tcp ip communicate server library configuration shows exact overhead stampede runtime adds tcp ip 
example data size bytes tcp ip latency stampede latency configuration shown consumer thread located cluster 
channel different address space consumer 
configuration involves device cluster network traversal put operation intra cluster network traversal get operation 
configuration overhead previous 
bytes payload stampede latency configuration shown consumer thread located device 
configuration involves device cluster network traversals put get operations 
configuration maximum overhead 
bytes payload stampede latency experiment involves client library uses tcp ip communicating server library tcp ip producer consumer pair written comparison 
ensure producer consumer overlap communication 
results shown 
expected shape stampede curves track tcp ip curve configurations 
configuration device cluster network traversal stampede runtime overhead tcp ip fairly nominal best 
experiment experiment previous difference java client library stampede comparison tcp ip program java 
results shown payload bytes stampede latency approximately configuration corresponds approximately configuration corresponds approximately configuration corresponds 
results experiments summarized result stampede intra cluster data exchange performs slightly better device cluster data exchange turn performs better java device cluster data exchange 
example latency data size bytes case second third case 
hardware data exchanges disparity simply due software 
mentioned earlier stampede uses clf intra cluster communication overhead compared tcp ip 
result tcp ip data exchange program results java program results similar 
stampede data exchange better compared java 
marshalling unmarshalling arguments involve pointer manipulation java involve construction objects 
disparity 
application level measurements application described section study 
camera display application study scalability stampede system 
producer thread reads virtual camera memory buffer sends server program continuously 
similarly display thread simply absorbs composite output mixer displaying 
structure allows stress communication infrastructure stampede affected devices 
sustained frame rate performance metric interest application 
developed versions application 
version uses unix tcp ip socket communication client programs server program 
mixer single thread obtains images client serially generates composite sends clients serially 
chose tcp ip sockets alternatives java rmi corba higher overhead 
second version single threaded mixer stampede channels 
mixer nm single threaded 
third version multi threaded mixer stampede channels mixer nm multi threaded 
thread mixer client program get image client perform part composite image generation 
composite complete placed channel designated thread client programs pick display 
frame rate frames sec serial version stampede clients tcp ip version clients data size kb 
single threaded version frame rate frames sec parallel version kb kb kb kb kb 
clients 
multi threaded version data size kb delivered bandwidth mbps number clients table 
delivered bandwidth mbps function data size number clients 
figures show readings sustained display thread frame rate higher frames sec 
feel lesser frame rate threshold unacceptable video conferencing 
shows performance single threaded versions clients image sizes kb kb client 
plots sustained frame rate axis function image data size xaxis 
seen performance socket version stampede channel version comparable 
example data size kb deliver frames second 
exercise proved things 
takes effort write application sockets compared stampede 
performance stampede socket versions comparable 
performance multi threaded version shown plotting sustained frame rate axis function number participants axis 
line graph different client image size 
instance application clients display thread client receives frame times bigger client image size 
sustained frame rates measured different participants varied narrow band client image size 
chose slowest display frame rate participants representative client image size 
comparing figures see multithreaded version performs better single threaded versions 
clients image size kb single threaded version delivers approximately frames sec 
versus approximately frames second multithreaded version 
clearly thread parallelism mixer helps boost sustained frame rate seen display threads 
despite thread parallelism mixer seen sustained frame rate achieved function number participating clients client image data size 
image size kb see frame rate frames sec clients drops frames sec clients 
similarly clients kb image size get approximately frames sec drops approximately frames sec kb image size 
version application threads mixer run node way smp cluster 
client display threads feed node get composite image data channel 
mixing compute intensive operation application pipeline highly requests display threads composite image serviced simultaneously 
bandwidth probably limiting factor application scalability 
clients client image size anda frame rate required bandwidth cluster node sf clients composite size ks 
table summarizes actual delivered bandwidth cluster node various client image sizes number clients 
table derived measurements plotted 
table seen sustained frame rate falls frames sec required bandwidth exceeds mbps suggesting maximum available network bandwidth cluster node 
situation happens clients image size kb clients lesser image sizes 
point emphasize observed limit scalability application structure limitation stampede implementation 
stampede programming system designed supporting interactive stream distributed ubiquitous computing applications 
key features stampede provides indexing correlating different data streams temporally performing automatic distributed garbage collection unnecessary stream data providing support parallelism supporting platform language heterogeneity dealing dynamism applications 
illustrated ease developing ubiquitous computing applications stampede 
micro level application level measurements shown programming ease attained stampede adversely affect performance 
stampede available runtime library runs variety platforms 
number system issues currently working 
generalizing hardware model stampede intended 
extend stampede support heterogeneous clusters connected plethora devices participating application 
second area research dealing failures developing computational model efficient runtime support model 
area ongoing research security privacy issues ubiquitous computing 
acknowledgments number people contributed stampede 
nikhil jim rehg knobe nissim harel contributed space time memory abstraction 
bert halstead chris leonidas hicks contributed early stages project 
dave developed version clf alpha tru microsoft nt 
members ubiquitous presence group georgia tech continue contribute stampede 
matt phil jeong post deserve special mention 
russ anand lakshminarayanan developed audio video meeting application 
mpi forum 
message passing interface standard 
mar 
sunderam 
pvm framework parallel distributed computing 
concurrency practice experience vol 
dec 
object management group 
corba www corba org sun microsystems 
java rmi www java sun com ahuja carriero gelernter 
linda friends 
ieee computer vol 
aug 
bal kaashoek tanenbaum 
orca language parallel programming distributed systems 
ieee trans 
se vol 
mar 
nikhil 
cid parallel shared memory distributed memory machines 
th intl 
workshop languages compilers parallel computing aug 
oxygen 
oxygen lcs mit edu katz 
endeavour expedition charting fluid information utility 
endeavour cs berkeley edu infosphere www cc gatech edu projects infosphere nikhil ramachandran rehg halstead jr joerg 
stampede programming system emerging scalable interactive multimedia applications 
th intl 
workshop languages compilers parallel computing 
ramachandran nikhil harel rehg knobe 
space time memory parallel programming abstraction interactive multimedia applications 
th acm sigplan symposium ppopp may 
nikhil ramachandran 
garbage collection timestamped data stampede 
podc jul 
ramachandran hodgins temporal notions synchronization consistency beehive th annual acm spaa jun 
birrell nelson 
implementing remote procedure calls acm tocs vol 
feb 
srinivasan 
rfc xdr external data representation standard 
aug 
collins 
overview network memory channel pci 
ieee spring compcon feb 
boden cohen seitz su 
myrinet gigabit second local area network 
ieee micro feb 
