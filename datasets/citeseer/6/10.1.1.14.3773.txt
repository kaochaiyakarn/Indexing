text joins data cleansing integration rdbms luis gravano panagiotis ipeirotis nick koudas divesh srivastava columbia university labs research gravano cs columbia edu koudas divesh research att com organization data records noisy transcription errors incomplete information lack standard formats textual data combinations thereof 
fundamental task data cleaning system matching textual attributes refer entity organization name address 
matching effectively performed cosine similarity metric information retrieval field 
robustness scalability text joins best done inside rdbms data reside 
unfortunately computing exact answer text join expensive 
propose approximate text join execution strategy robustly executed standard unmodified rdbms 

fundamental task data cleaning detection records database refer entity different representations relations databases 
approaches data cleaning text matching step similar textual entries matched potential duplicates 
text matching important component data cleaning systems little emphasis put efficiency operation 
scalability robustness reasons important perform matching rdbms place data reside 
propose technique implementing text matching step completely unmodified rdbms plain sql statements 
cosine similarity metric textual similarity identify potential text matches relations :10.1.1.117.7676
consider loss generality relations textual attribute 
textual attribute decomposed collection atomic entities generally refer tokens defined variety ways discussion treats term token generic choice token orthogonal design algorithms 
luis gravano panagiotis ipeirotis funded part nsf 
iis iis 
tokens words appear textual attribute 
alternatively divide textual attribute grams substrings consecutive characters 
example la ab bs grams labs add dummy characters text 
vector space retrieval model conceptually map tuple ri vector vt value th component vt vt real number corresponds weight token exploit instance wellestablished tf idf weighting scheme assign weights tokens :10.1.1.117.7676
scheme weight token tuple high appears large number times tuple tf factor sufficiently rare token relation idf factor 
scheme say relation names relatively infrequent tokens ibm higher weights frequent tokens variant general weighting scheme successfully task cohen whirl system 
technique viewed bringing whirl functionality inside rdbms 
simplify computation vector similarities normalize vector vt unit length 
definition cosine similarity tuples vt vt corresponding normalized weight vectors set tokens 
cosine similarity just similarity brevity vt vt defined sim vt vt vt vt 
similarity metric values 
intuitively vectors similar share important tokens 
example ibm highly similar ibm differ token appear different tuples low weight 
hand ibm research research lower similarity share relatively common token research 
similarity metric define text join relations textual attributes definition text join relations user specified similarity threshold text join returns pairs tuples sim vt vt 

sample text joins sql text join relations computed number ways 
cohen whirl system stand procedure 
contrast section focus computing text joins inside rdbms robustness select tid tid tid tid weights weights token token group tid tid having sum weight weight 
baseline approach computing exact value 
scalability relying standard unmodified sql 
section defines auxiliary relations 
section discusses efficient sampling implementation text joins sql 

creating weight vectors tuples compute text join need weight vector associated tokens tuple specific choice tokens grams words 
initially create relations tid token contain entry token ri tuple id tid 
relation implemented sql implementation varies choice tokens 
relations create sql relations tid token weight tuple tid token indicates token normalized weight ri tuple identified tid 
create relations token total store token total added weight total relation ri indicated relation 
sql statements create relations available www cs columbia edu 

implementing text joins sql baseline approach adapted compute shown 
sql statement computes similarity pair tuples filters pair similarity threshold 
approach produces exact answer 
result contains pairs tuples similarity higher 
usually interested high values threshold typically result tuples matching tuple 
baseline approach calculates similarity pairs tuples share token 
result baseline approach inefficient candidate tuple pairs considers final result text join 
sampling technique execute text joins efficiently drastically reducing number candidate tuple pairs considered query processing 
intuition sampling approach viewed specialization technique fol lowing cosine similarity tuples equal vt vt 
compute tuple pairs high similarity consider partial products vt vt select rw tid rw token rw weight rs total rw rs rw token rs token 
creating auxiliary relation sample create tid token 
insert tid token select rw tid rw token round rw weight rs total rw rs rw token rs token round rw weight rs total 
deterministic version sampling step results compact representation 
high values 
product vt vt high vt vt small effectively ignore tokens low weight vt vt get approximation correct similarities 
relation smaller relation contains subset tokens 
create weighted sampling uni form sampling sample token vector probability sum sum ri vtk 
perform trials row yielding approximately samples token sampling parameter larger values result higher accuracy expense query processing time 
implement sampling step sql 
conceptually join relations token attribute 
attribute result probability pick particular tuple 
tuple output query need perform trials picking time tuple probability insert tuples form tid number successful trials 
trials implemented various ways 
open cursor result query read tuple time perform trials tuple write back result 
alternatively pure sql simulation sampling step deterministically defines tuple result round weight total successes trials average 
deterministic version query shown 
implemented run experiments deterministic version obtained virtually performance cursor implementation sampling query 
creating weighted sample relation sample join relation approximate 
sampling step token weights sampling ignoring weights tokens relation 
cosine similarity uses products weights relations 
join step token weights non sampled select tid tid tid tid weights sample sum sum token token token sum token group tid tid having sum weight sum total 
implementing sampling text join sql sampling weighting sample 
relation get estimates cosine similarity follows 
focus tq token non zero weight 
sample tuple compute value sum approximation vti sum partial products tokens estimate similarity tq ti multiplied output answer tuple pairs associated sum greater user specified threshold 
implement join step sql statement 
weight tuple sample weights weight sum total sample corresponds sum sum partial products tuple pair see group clause 
group result sum estimated similarity tuple pair multiplied apply filter simple comparison having clause check similarity tuple pair exceeds threshold 
final output sql operation set tuple id pairs estimated similarity exceeding threshold 

related problem approximate string matching attracted interest algorithms combinatorial pattern matching communities results area data integration cleansing applications 
string edit distance numerous variants frequently approximate string matching 
gravano method integrate approximate string matching edit distance database realize sql statements 
information retrieval field produced approaches speed query execution involve computation cosine similarity metric inverted indexes 
techniques pruning inverted index close spirit especially implement sampling step round function effectively prunes tokens small weights 
cohen whirl system highly relevant 
whirl reasons explicitly text similarity compute text joins cosine similarity metric 
key difference proposed techniques goal perform text joins unmodified rdbms robustness scalability 
grossman share goal techniques representing text documents associated term frequencies relational tables mapping boolean vector space queries standard sql queries 
query pruning technique word frequencies speed query execution 
sampling algorithm section viewed instance approximate multiplication algorithm 
main difference technique adapted efficient join execution 
direct application algorithm approximate text joins require nested loop evaluation join 

discussion performed thorough evaluation technique different token choices words grams different values comparing alternative strategies 
report evaluation space constraints 
summary results proposed technique orders magnitude faster baseline technique 
furthermore answers produce approximation exact text joins 
performed comparison whirl showed importance leveraging rdbms scalability 
whirl contrast problematic large data sets grams tokens 
experiments provide evidence proposed technique robust scalable approximate text join computation 
chaudhuri ganti 
eliminating fuzzy duplicates data warehouses 
vldb 
cohen lewis 
approximating matrix multiplication pattern recognition tasks 
soda 
cohen 
integration heterogeneous databases common domains queries textual similarity 
sigmod 
galhardas florescu shasha simon 

declarative data cleaning language model algorithms 
vldb 
gravano ipeirotis jagadish koudas muthukrishnan srivastava 
approximate string joins database free 
vldb 
grossman frieder holmes roberts 
integrating structured data text relational approach 
ja sis 
levenshtein 
binary codes capable correcting deletions insertions reversals 
doklady nauk sssr 
navarro 
guided tour approximate string matching 
acm computing surveys 
sarawagi 
interactive deduplication active learning 
kdd 
singhal :10.1.1.117.7676
modern information retrieval brief overview 
ieee data engineering bulletin 
carmel cohen fagin maarek 
static index pruning information retrieval systems 
sigir 
vo de moffat 
vector space ranking effective early termination 
sigir 
witten moffat bell 
managing gigabytes compressing indexing documents images second edition 
morgan kaufmann publishing 
