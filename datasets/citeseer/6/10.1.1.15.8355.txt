lisp symbolic computation international journal kluwer academic publishers manufactured netherlands lambda calculus schemata michael fischer department computer science yale university box yale station new haven ct 
fischer michael cs yale edu keywords lambda calculus lisp continuation passing style closures functional objects retention strategy deletion strategy bindings stack 
lambda calculus schema expression lambda calculus augmented uninterpreted constant operator symbols 
abstraction programming languages lisp permit functions passed returned functions 
interpretation constant operator symbols certain schemata called lambda abstractions naturally define partial functions domain interpretation 
implementation strategies considered retention strategy variable bindings retained longer needed implying sort garbage collected store deletion strategy modeled usual stack implementation algol variable bindings destroyed control leaves procedure block created 
lambda abstractions evaluate correctly deletion strategy 
strategies equally powerful sense lambda abstraction mechanically translated evaluates correctly deletion strategy defines partial function domain interpretation original 
proof translation continuation passing style 
prologue late early exciting time theoretical programming languages 
language translation compilation major focus previous decade 
syntax understood parsers generated automatically grammars 
semantics understood real programming languages defined user manual compiler 
preliminary version appeared proceedings acm conference proving assertions programs las cruces new mexico january 
reported conducted artificial intelligence laboratory massachusetts institute technology research program supported part advanced research projects agency department defense monitored office naval research contract number 
michael fischer general approaches taken order programming languages fully specified semantics better specification methods developed adequate fully describe existing large programming languages pl 
ii new languages developed clean mathematical structure amenable formal description 
mccarthy pioneered approach basing lisp programming language simpler functional language called pure lisp expressions defined mathematical style independent particular machine implementation :10.1.1.141.7869
pure lisp allows definition evaluation functions 
lambda notation functional abstraction borrowed church lambda calculus little similarity systems 
pure lisp higher order functions callby value evaluation order implicitly assumed 
special constructs conditional expressions label operator allow recursive functions defined 
limited pure lisp powerful express partial recursive functions provides adequate basis theory computation 
lisp programming language extends pure lisp ways useful practice time tend destroy clean mathematical properties 
semantics defined interpreter written mixture pure lisp english 
distinction programs data blurred 
higher order functions assignment global symbol table added 
simple substitution model define pure lisp replaced variable bindings hierarchical environments 
substituting actual arguments formal parameters applying function environment changed creating associations called bindings formal parameters corresponding actual arguments 
environment consulted value variable needed 
absence higher order functions environment maintained simple pushdown stack 
new bindings pushed stack function called retained evaluation body function discarded done 
functional arguments values complicate picture 
free variables lambda form interpreted environment lambda form occurs environment effect function eventually applied arguments 
lambda forms intended denote functions free variables receive interpretation function 
standard method implementation attaches caller environment lambda form resulting closure 
closure applied actual arguments body lambda form evalu lambda calculus schemata ated attached environment binding formal parameters actual arguments 
early lisp implementations represent environments explicitly lists bindings called lists 
value variable needed current list searched 
closure points environment list storage occupied inaccessible environments recovered garbage collector 
maclisp compromises semantics functional arguments order achieve greater efficiency shallow access model discussed moses 
bindings stack discarded evaluation form creating complete 
environments represented pointers stack 
consequences handling closures closure passed argument function relatively expensive evaluate environment temporarily changed attached closure evaluating restored temporarily popping stack point saved environment putting additional bindings stack shadow changed subsequent saved environment 
way entails considerable cost time storage 
closure passed function created environment closure destroyed stack popped 
backdrop hewitt raised question just powerful shallow access lisp 
pure lisp universal easily encode turing machine tape question refined ask powerful lisp cons function list implicitly uses cons 
particular hewitt asked possible write cons free function test argument expressions frontier 
define frontier expression list non nil atoms sequence 
frontier 
frontier computed lisp function defun frontier cond null nil atom list append frontier car frontier cdr list append usual lisp meanings easily defined cons 
michael fischer formal treatment hewitt question requires way comparing expressive power programming languages 
people intuitive feeling languages powerful 
realistic programming languages universal sense simulate turing machines compute partial recursive function 
attempts classify real languages functions compute inevitably fail language simulating 
dilemma arguments relative expressive power stuck simulations apparent distinctions languages evaporate close scrutiny known turing tar pit major obstacle development comparative theory programming languages 
schemata offer way dilemma 
schema program primitive data operations left unspecified schemata considered equivalent compute result matter constants basic operators interpreted 
precludes encoding tricks lead turing tar pit schemata various kinds differ expressive power defined way 
program schemata called program schemes introduced subsequently studied see 
recursive program schemes allow recursive definition functions studied 
lambda calculus schemata natural extensions recursive schemes obtained addition full lambda abstraction 
surveys state provided chandra manna 
intrigued hewitt question eventually solved affirmative reformulating question lambda calculus schemata showing translate lambda calculus schema correctly shallow access implementation 
lisp cons operator represented lambda form church encoding pairs possible translate lisp program lambda calculus schema equivalent original program interpreted domain expressions 
translated program cons construct expression final result computation 
see section 
original lisp program atomic valued cons 
process solving problem rediscovered notion continuation invented transformation converting arbitrary expression continuation passing style cps didn call time 
cps am aware van wijngaarden 
cps independently discovered years 
reynolds pro lambda calculus schemata vides fascinating historical account early discovery rediscovery concept 
alerted historical mentioned 
preliminary form acm conference proving assertions programs 
am pleased years final version 

algol implemented stack storage variables variables 
storage created stack control enters block discarded exit 
called deletion strategy values local variables deleted exit block stack popped 
algol provides way variables subsequently referenced deleted variables longer needed stack implementation correct language 
languages lisp pal provide ways variables bound inner block procedure may referenced outside bindings retained name retention strategy 
berry shown copy rule algol extended natural way powerful languages equivalent retention strategy deletion strategy 
retention strategy seemingly powerful deletion strategy 
show classes programs corresponding strategies equivalent strong sense retention strategy program find equivalent program works correctly deletion strategy 
translation done independently particular primitive operations data language happens contain corresponding schemata programs primitive operations data left unspecified equivalent interpretations 
ideas precise languages common feature permit procedures take procedures arguments return procedures results 
languages addition number primitive operations defined domain primitive data objects need concern results true interpretation primitive constant operator symbols 
define lambda calculus schemata lambda calculus expressions augmented constant operator symbols stand respectively primitive data elements operations underlying interpretation 
schemata similar ap michael fischer expressions ae landin schemata hewitt defined precisely section 
interpretation assigns constant element domain interpretation operator partial function domain called operation 
operations pure side effects 
interpretation closed lambda abstractions schemata form 
xn having free variables define partial functions domain usual rules generalized functions 
lisp consider call value order evaluation arguments function evaluated function called 
say schemata data equivalent compute partial function data domain interpretations 
correct implementation lambda calculus schema requires retention strategy course evaluation function may return value function containing free variables 
simple example composition functional comp fg 

returns function 
containing free variables bindings established application comp retained long returned function existence 
program correctly deletion strategy schema happens return value procedure containing free variables properly certain 
call schemata deletion tolerant 
informally main theorem theorem states closed lambda abstraction data equivalent deletion tolerant lambda abstraction effectively obtained original lambda abstraction 
programs correctly deletion strategy implementation converted equivalent form correctly 

lambda calculus schemata lambda calculus schemata expressions lambda calculus augmented uninterpreted names constants operations 
definition positive natural numbers 
set symbols called constants 
ranked alphabet symbols called operators 
arity number arguments takes 
set symbols called variables 
assume pairwise disjoint 
lambda calculus schemata lambda calculus schema member formal language syntax bnf grammar shown 
notation 
denotes occurrences square brackets denote optional items curly brackets grouping 
impose side conditions expressed bnf 
prim appl 
qn equal 

abstraction 
xn variables 
xn distinct 
schema variable constant abstraction prim appl fun appl conditional abstraction variable 
schema prim appl operator schema 
fun appl schema schema 
conditional schema schema schema variable constant operator syntax lambda calculus schemata 
expressions classified syntactic categories belong 
names categories shown table 
define set schemata set expressions belonging category schema usual lambda calculus variables 
xn occur dot lambda abstraction 
xn considered formal parameters occurrences body said bound 
variable free schema bound enclosing lambda abstraction 
var set variables appear free schema say closed var 
assume contains symbols representing truth values true false respectively countably infinite 
technical convenience definition allow operators appear arguments particular operator michael fischer table terminology notation syntactic expressions 
syntactic category terminology schema schema abstraction lambda abstraction prim appl primitive application fun appl function application conditional conditional variable variable constant constant operator operator schema 
restrict power schemata operator symbol may replaced equivalent lambda abstraction 
xn 

xn 
closed lambda calculus schema program interpretation constants operators 
definition interpretation pair val domain interpretation val map associates symbol element val symbol primitive operation val partial function 
require val val 
reader note formalism keeps program data completely separate 
primitive operations associated primitive operators defined arguments data domain 
lambda calculus schemata program elements automatically included data domain possible execute data element 
denying practical importance able dynamically construct execute programs feel distinction programs data useful analyzing programming situations allows systematic static translation program leaving domain data operates unchanged 
programs reside data domain constructed dynamically dialects lisp static translation clearly impossible 
lambda calculus schemata 
semantics lambda calculus schemata define semantics lambda calculus schemata giving recursive evaluator similar eval apply lisp 
lisp call byvalue order evaluation call name perform string substitution variables schemata maintain environment gives current bindings free variables schema consideration 
value free variable obtained needed environment 

environments closures binding ordered pair variable value bound 
environment finite set bindings containing binding variable 
may identify environment finite function binding undefined 
write var set variables defined 
notation denote environment results binding leaving bindings variables unchanged 
var var var case may simply write place 
values variables bound called objects 
object may element data domain pair called closure lambda abstraction environment contains bindings free variables closure ways behaves data may binding variable may passed returned function 
addition may applied arguments behaving function 
closures interest vehicles defining lambda schemata evaluation products evaluations 
consider ultimate purpose program function data domain defines transformations programs designed preserve 
note environments contain closures vice versa formal definition mutual recursion 
equivalent notion environment lisp implementations environment list bindings restrictions number bindings variable binding encountered 
michael fischer definition interpretation val inductively define set closures set environments 

empty set 
lambda abstraction free variable contained var 
convenience denote set objects 

retention strategy evaluation retention strategy evaluation defined recursive program fixed interpretation defines consider correct semantics 
takes arguments schema environment 
result program terminates object called value schema 
value undefined 
evaluation strategy uses call byvalue evaluation order means actual arguments passed function evaluated function called 
lisp evaluator defined functions 
evr evaluates schema interpreting free variables environment ap applies closure objects vector evaluation rules differ lisp schemata function argument positions function application evaluated way lambda abstraction appears arguments evaluates closure regardless position appears 
definition retention strategy evaluation specified partial functions evr apr 
vn values evr apr 
vn defined recursive equations shown 
equations interpreted defining recursive programs computing evr apr compute evr find case definition condition true 
compute result specified case 
course evaluation may necessary compute evr apr arguments 
computations performed recursively 
fail terminate infinite chain recursive calls occurs cases apply var evr undefined 
similar remarks apply computation apr lambda calculus schemata evr df val lambda abstraction 
qn primitive application val 
vn vi evr qi 

qn function application ap 
vn evr vi evr qi 
evr evr val evr evr val undefined 
evr 
xn 
xn vn apr 
vn df undefined 
defining equations retention strategy evaluation 
define partial function data domain computed closed lambda abstraction retention strategy implementation 
definition 
xn lambda abstraction val interpretation environment var var 
associate closure partial function fcnr follows 

ap 

fcnr 
df fcnr 
undefined 
closed fcnr depend omit mention write simply fcnr 

deletion strategy evaluation deletion strategy implementation lambda calculus schemata evaluation approximates correct retention strategy evaluation 
programs correctly give answers retention strategy programs fail 
think michael fischer deletion strategy implementation defined functions evd ap approximate correct functions evr ap define precisely deletion strategy implementation attempt exact characterization set arguments deletion strategy implementation correct 
need purposes evd ap correct sufficiently broad subclass programs 
particular require evd respectively ap defined give correct answer case value returned ap recursive evaluation evr respectively ap element data domain closure 
assuming correctness evaluating schemata function returned value function 
restriction enforced algol prevents deleted bindings referenced computation 
definition deletion strategy evaluation specified recursively defined functions evd 
vn defining equations evd shown evr occurrence evr ap replaced evd ap respectively 
defining equation ap shown 
evd 
xn evd 
xn vn df undefined 
defining equation deletion strategy application 
partial function computed closed lambda abstraction deletion strategy implementation definition 
xn lambda abstraction val interpretation environment var var 
associate closure partial function fcnr defined 
df ap 

lambda calculus schemata closed depend omit mention write simply 
lemma schema environment closure vector objects 

evd defined evd evr 
ap defined ap ap 
proof sketch retention deletion strategy evaluation differ closure applied arguments body evaluates closure 
case deletion strategy evaluation undefined 
cf 
definition 
call value evaluation order causes evaluation entire schema undefined 
occurs evaluation strategies identical produce result 
say closed lambda abstraction correct deletion strategy implementation fcnr 
follows easily definitions correct deletion strategy implementation closure result ap recursive evaluation ap argument vector fcnr defined 

safety define syntactic condition ensure correctness deletion strategy implementation 
definition schema said safe function application 
qn primitive application 
qn occurs subformula qi lambda abstraction constant variable primitive application 
follows subformula safe schema safe particular body safe lambda abstraction safe schema function application conditional appear function position safe function application appear argument safe function primitive application 
safe schema result function application conditional eventually propagate top level final result evaluation 
extend notion safety objects environments obvious way 
michael fischer definition set safe objects safe environments defined recursively follows 

empty set safe 

safe 

safe safe 

safe safe 
lemma provides partial converse lemma safe schemata 
lemma safe schema safe environment safe closure vector safe objects 

evr evd evr 

ap ap ap 
proof sketch recall retention deletion strategy evaluation differ application closure arguments results closure 
safe schema retention strategy evaluation result final result evaluation 
expression evaluates data element case application closure arguments results closure case retention strategy deletion strategy evaluation coincide 
corollary safe closed lambda abstraction 
fcnr 

equivalence interested transformations schemata preserve meaning 
view schemata vehicles defining partial functions domain interpretation say schemata data equivalent define partial function interpretations evaluation 
definition define relation pairs closures closed lambda abstractions data elements call pairs relation data equivalent 
closures 
xn 
xn 
write fcnr fcnr lambda calculus schemata interpretations val 
fcnr fcnr defined points 
vn agree points 
closed lambda abstractions 
write write immediate definitions 
lemma closed lambda abstractions 
fcnr fcnr 
data equivalence coarse relation 
example schema data equivalent schema 



define partial functions domain includes data elements val val val domain produce result val val 
data element val val val application results closure application terminate 
data equivalence difficult 
suppose closed subformula larger formula results replacing data equivalent follow data equivalent example example domain interpretation natural numbers numerals receive usual meanings 
fcnr fcnr undefined 
led define stronger notion equivalence 
intuitively say schemata equivalent context distinguish terms data behavior 
equivalent schema evaluate data element evaluates data element true environment binds free variables order extend notion equivalence closures supply closure context binding new variable necessary closures part syntax lambda calculus schemata expressions schemata 
imagine extension lambda calculus schemata data elements appear constants allowed closures appear michael fischer definition define relation pairs arbitrary schemata closures data elements call pairs relation equivalent 
schemata necessarily closed 
write interpretations val schemata environments var var var var evr evr evr evr 
closures 
write interpretations val schemata containing free variable environments var var evr evr evr evr 
write note equivalent closed lambda abstractions equivalent objects data equivalent 

translation continuation passing form define function translate arbitrary lambda calculus schema safe schema 
exact semantic relation complicated subject section 
true closed schema evaluates data element evaluates closure applied closure returns result applying schemata equivalent similar remarks hold free variables evaluated environment variables bound data elements 
intuition modify schema subformula passing evaluation result back enclosing context context passed functional argument called continuation requires modified receive continuation argument 
lambda abstraction additional parameter added purpose 
turned lambda abstraction argument 
case modified applies continuation argument result return avoiding necessity returning immediately 
syntactically avoids possible safety primitive operators allowed 
system admit substitution semantics commonly define pure lambda calculus provide technical advantages operational semantics evr ap 
pursue idea 
term continuation appear version coined 
lambda calculus schemata violation having appear argument application modified schema safe 
example turn inside get 

assuming modified versions respectively 
may variables bound object whatsoever clearly necessary uniformly add extra argument lambda abstraction appearing entire schema regardless making schema unsafe 
replace add additional formal parameter call abstracts context resulting 



actual translation gives result somewhat different example wish able translate subformula independently context appears 
roughly equivalent exactly equivalent happens return closure applies argument closure encoded version additional argument described 
precise statement relation lemma 
definition auxiliary function adds new argument lambda abstraction translates body 
definition transformations lambda calculus schemata defined recursively 
note bears relation evr ap 
defining equations shown 
symbols 
denote distinct variables appear free intuition translations may gained examples 
examples symbols 
variables 



historical choice placing continuation parameter modified lambda abstraction arbitrary just easily followed modern convention placing 
effect transformations change kx 
xn 
definition change 

definition 
working framework functions curried placing continuation argument permit definition 
xn simplified 
xn 
curry functions converting application 
curried form 

destroy safety trying achieve 
simplifications transformation possible require global information expression see 
michael fischer df 

lambda abstraction 




primitive application 





function application 

conditional undefined 

xn df kx 
xn 

xn free defining equations continuation passing form transformation 








kx 




kx 





kx 













lambda calculus schemata 
equivalence retention deletion strategies section state properties continuation passing transformation give main theorem equivalence power evaluation strategies 
closed schema evaluates data element interpretation 
turns 

evaluates closure equivalent 
applies functional argument argument encoding includes continuation argument 
case equivalent obtained adding extra continuation argument lambda abstraction occurs example 
equivalent 
hx 

state precisely relation need define encoding function 
star encoding encoding function bit continuation passing transformation result safe schema adds extra continuation parameter lambda abstractions function applications 
greater detail obtained schema replacing lambda abstraction 
xn appears subformula kx 
xn 
replacing function application 
appears subformula 

transformation applied recursively subformulas 
similarly transformed 
uniformly add continuation parameter lambda abstraction uniformly pass identity function continuation transformed function application 
effect evaluate identically evaluates closure evaluates closure definition schema 
encoding function defined recursively equation 
essentially differing possibly choice names bound variables 
michael fischer df kx 
xn 

xn lambda abstraction var 
xn 

qn primitive application 

qn function application conditional undefined 
defining equation star encoding 
definition extend objects environments obvious way 

df undefined 
lemma expresses intuitively obvious property evr commutes lemma schema environment var var 
evr evr 
proof sketch proof induction number steps compute evr 
base cases 
evr val val val evr 
evr evr 

xn lambda abstraction evr evr 
step follows lambda abstraction 
interesting case function application 

qn 
suppose evr 
xn 
show evr evr undefined 
vi evr qi 
evr evr 
qn lambda calculus schemata ap 
xn 
vn evr 
xn vn 
definition star encoding 

induction evr evr 
evr 
xn kx 
xn 

wi evr 
wn applying line gives evr evr 
ap kx 
xn 
evr 
xn wn 
evr 
xn vn evr 
xn vn evr 
xn wn line follows induction line uses facts wi 
follow induction 
combining lines gives evr evr desired 
remaining cases handled similarly 
corollary schema var 
xn 

xn 
xn 
proof conditions corollary ensure 
xn 
xn closed lambda abstractions 

vn 
xn vn 
evr ap 
xn 
vn evr ap 
xn 
vn 
lemma definition follows definition 
conversely michael fischer definition fact definition follows fcnr 
xn fcnr 
xn 
definition gives desired 

xn 
xn lemma 
schemata 



proof sketch suppose 
xn 

xn 
var 


xn 


xn 

xn 



lambda abstraction lemma evaluate closures 
case lemma relate argument similar applied 
case sides equivalence undefined call value semantics 

properties continuation passing transformation lemma relates meaning encoding function lemma schema var 


proof sketch proof induction structure lemma obvious suppose function application 
simplicity notation assume argument 
induction lambda calculus schemata 
















lemma 



cases handled similarly 
lemma schema 
safe 
proof safety requires arguments function application primitive application function applications conditionals 
inspection equations show schema defined lambda abstraction 
inspection shows function application 
qn primitive application 
qn occurs subformula qi lambda abstraction constant variable primitive application 
safe 
position state prove main theorem 
theorem closed lambda abstraction 
effectively find closed lambda abstraction interpretations fcnr fcnr 
proof assumption 
xn schema var 
xn 

xn 

lambda abstraction lemma safe 
safe fcnr corollary 
lemma corollary 
xn 

xn 


xn 

xn 
xn 
lines give lemma fcnr fcnr 
fcnr fcnr desired 
michael fischer 
applications lisp original motivation question lisp compute deletion strategy implementation lisp shallow access implementation cons function implicitly uses cons allowing functional arguments function 
obvious approach defining cons church pairing function see directly deletion strategy implementation lisp 
cps transformation described section translate resulting expression equivalent safe form 
section describe greater detail relationship lisp lambda calculus schemata 
proceeding need clarify mean lisp 
pure lisp various dialects lisp maclisp common lisp share common core significant differences respect crucial issues variable binding strategy evaluation rules 
example variable bound function maclisp allows application common lisp requires write funcall 
tie particular version lisp take alternate tack 
set lisp expressions 
ds member ds consists expression preceded single quote 
fs cons car cdr eq atom 
set lisp symbols 
ds vals interpretation ds vals ds maps constant name form expression vals fs gives primitive operator usual lisp interpretation 
identify nil 
call lambda calculus schemata alphabets interpreted basic lisp programs 
example basic lisp program funny list df 
atom cons foo corresponds naturally maclisp program defun funny list cond atom cons foo cons operation lisp allocates word storage heap 
disallowing cons prohibiting explicit heap storage program question really extent memory allocated function replace heap storage context lisp 
lambda calculus schemata defining symbol funny list important difference 
regard funny list meta symbol abbreviates particular schema part language lambdacalculus schemata 
versions lisp include defined symbols part language allow circular definitions express recursion defun cond atom cdr car cdr recursion expressed circular definitions call value version operator see lose expressive power providing defined symbols basic lisp 
reformulate question compute deletion strategy implementation basic lisp clear cons required construct non atomic answer happen appear program constant restrict atomic valued functions get theorem cons free basic lisp deletion strategy implementation universal sense compute computable partial function expressions 
proof sketch general method implement function basic lisp 
replace occurrences cons car cdr new lambda abstractions mycar respectively define ordered pairs church encoding 
defined follows df xy 

mycar df 
df 
modified program correctly necessary input expression constant 
done function enc df 
atom enc car enc cdr resulting basic lisp expression converted theorem data equivalent safe program 
obtain similar theorem versions lisp principle write lisp interpreter basic lisp eliminate cons proof theorem 
michael fischer consequence theorem free storage may saved expense increased stack 
absence cons stack grow arbitrarily large form unbounded storage necessary order universal stack storage permitting 
consequence implementation lisp properly handles pure pushdown store pointers stack free storage purposes implementing cons list implementation device know machine just pure pushdown store universal 
obtain corollary automaton theoretic result easy prove directly 
stack implementation lisp may thought stack automaton sense ginsburg augmented addition pointers may point elements lower stack 
pointers represent bindings 
careful analysis pointers reveals head stack automaton need able move stack ways lower element destination pointer top 
theorem says machine universal know stack automaton lacking pointers 
contrasts fact pointers increase power pushdown store machine see cole hewitt 
grateful olivier danvy numerous technical suggestions greatly improved original exposition especially encouragement assistance making available published literature 
carolyn talcott helpful comments pointing serious error earlier draft anonymous referee helpful suggestions 
express gratitude dan rabin helpful conversations supplying historical 

berry daniel 
sigplan notices february 

berry daniel block structure retention deletion 
proceedings third annual acm symposium theory computing 
lambda calculus schemata 
chandra ashok properties applications program schemas 
phd thesis computer science department stanford university 
appears report 
cs ai february 

church 
calculi lambda conversion 
annals mathematics studies princeton university press princeton new jersey 

cole steven pushdown store machines real time computation 
proceedings annual acm symposium theory computing 

cooper mathematical proofs computer programs 
machine intelligence oliver boyd 

danvy olivier filinski andrzej 
representing control study cps transformation 
mathematical structures computer science december 

dijkstra recursive programming 
rosen editor programming systems languages mcgraw hill new york 

evans arthur 
pal language designed teaching programming linguistics 
proceedings acm rd national conference august 

friedman daniel felleisen matthias 
little 
mit press trade edition chapter 

ginsburg seymour greibach sheila harrison michael 
way stack automata 
journal acm april 

jones block concept possible implementations proofs equivalence 
technical report tr ibm vienna april 

hewitt carl 

personal communication 

hewitt carl 
comparative 
artificial intelligence memo project mac august 

iu 
logical schemes algorithms russian 
problems cybernetics 
english translation pergamon press pp 

michael fischer 
landin peter mechanical evaluation expressions 
computer journal january 

luckham david park david paterson michael formalised computer programs 
journal computer system sciences june 

manna zohar 
program schemas 
aho alfred editor currents theory computing prentice hall 


mazurkiewicz proving algorithms tail functions 
information control april 

mccarthy john 
basis mathematical theory computation 
hirschberg editors computer programming formal systems north holland amsterdam 

mccarthy john lisp programmers manual 
press 

moon david maclisp manual revision 
project mac cambridge massachusetts april 

morris lockwood 
programming language descriptions 
lisp symbolic computation 
appears issue 
original manuscript dated november 

morris jr james bonus van wijngaarden device 
communications acm august page 

moses joel 
function function lisp fu problem called environment problem 
bulletin july 

paterson michael equivalence problems model computation 
phd thesis cambridge university august 
appears artificial intelligence technical memo lab cambridge massachusetts issued november 

paterson michael program schemata 
michie editor machine intelligence chapter edinburgh university press 

paterson michael hewitt carl comparative 
record project mac conference concurrent systems parallel computation acm december 
lambda calculus schemata 
randell russell algol implementation 
academic press new york 

reynolds john definitional interpreters higher order programming languages 
proceedings acm annual conference boston august 

reynolds john discoveries continuations 
lisp symbolic computation 
appears issue 

rutledge program schemata 
journal acm january 

sabry amr felleisen matthias 
reasoning programs continuation passing style 
lisp symbolic computation 
appears issue 

steele jr guy common lisp 
digital press second edition 

strachey christopher wadsworth christopher continuations mathematical semantics handling full jumps 
technical monograph prg oxford university computing laboratory january 

strong raymond 
translating recursion equations flow charts 
journal computer system sciences 

van wijngaarden 
recursive definition syntax semantics 
steel jr editor formal language description languages computer programming north holland amsterdam 
