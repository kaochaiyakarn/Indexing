designing dccp congestion control reliability dccp datagram congestion control protocol new transport protocol tcp udp family provides congestion controlled flow unreliable datagrams 
delay sensitive applications streaming media telephony prefer timeliness reliability 
applications historically udp implemented congestion control mechanisms difficult task congestion control 
dccp easy deploy applications risking congestion collapse 
aims add udp foundation minimum mechanisms necessary support congestion control possibly reliable transmission information 
minimal design dccp suitable building block advanced application semantics selective reliability 
introduce motivate protocol discuss design principles 
principles particularly shed light ways tcp reliable byte stream semantics influence implementation congestion control 
providing just right set functionality network protocol subtle art touches issues modularity efficiency flexibility fate sharing 
best examples getting right split original arpanet functionality tcp ip 
argue details port numbers ip tcp benefit years hindsight original functional decomposition looks remarkably 
key omission tcp ip clearly congestion control retro fitted tcp 
network protocols tcp left thing probably reasonable tcp congestion control isn appropriate applications 
years seen large increase applica eddie kohler mark handley sally floyd icsi center internet research kohler floyd icir org tions udp long lived flows applications reluctant congestion control 
part may don list priorities part may don necessary expertise right 
importance congestion control correct functioning internet decided time re evaluate alternative udp provided applications tcp semantics inappropriate 
aim provide simple minimal congestion control protocol higher level protocols built 
called datagram congestion control protocol dccp expected simple provide unreliable alternative tcp 
issues turned complex expected 
discuss motivations designing dccp particular set functionality dccp eventually included subtle issues involved designing congestion control protocol unreliable flows 
motivation years steady growth applications internet telephony streaming video line games generate long lived flows udp datagrams share preference timeliness reliability 
applications data delivered deadline typically small number round trip times useful receiver 
tcp introduce arbitrary delay reliability order delivery requirements applications non congestion controlled udp 
lack congestion control poses threat network applications usage continued grow internet real risk congestion collapse 
applications implement congestion control mechanisms case case basis top udp 
implementing congestion control difficult error prone long history buggy tcp implementations clear new applications correctly 
believe new transport protocol needed combines unreliable datagram delivery built congestion control 
protocol act enabling technology new existing applications easily transfer timely data destabilizing internet 
application requirements protocol designed serve specific group applications consider applications need needs balanced carefully desire proof general 
group applications concerned requirements include choice congestion control mechanism 
applications usually able adjust transmission rate congestion feedback constraints adaptation performed minimize effect quality 
tend need control short term dynamics congestion control algorithm fair traffic medium timescales 
control includes influence congestion control algorithm example tfrc strict tcp congestion control 
low packet overhead 
internet telephony games particular tend send small packets frequently achieve low delay quick response time 
protocol overhead expand packets unduly 
ecn support 
explicit congestion notification lets congested routers mark packets dropping :10.1.1.22.5685
ecn capability turned flows react congestion particularly desirable applications tight timing constraints insufficient time retransmit dropped packet data needed receiver 
traversal 
udp lack explicit connection setup teardown presents unpleasant dif tcp friendly rate control tfrc congestion control mechanism adjusts sending rate smoothly tcp maintaining long term fair bandwidth sharing tcp 
network address translators firewalls result middleboxes don udp 
new protocol improve udp friendliness middleboxes 
design alternatives designing new transport protocol udp provide provide congestion control 
alternative modify alternate transport protocol sctp mechanisms partial reliability 
congestion control udp unproductive force burden implementing congestion control applications congestion control difficult implement part applications core needs 
design disseminate user level library congestion control algorithms new transport protocol better terms ecn usage traversal features interoperability 
allow ecn user level library udp socket api allow application direct control ecn fields ip header 
somewhat risky easy send flow claims react ecn marking fact 
absence widespread deployment mechanisms routers detect flows unreasonable bandwidth advise adding ecn capability udp sockets time 
new transport protocol implemented kernel certainly provide speed features generic udp socket adapted congestion control 
packets generated instantly network interrupt packet receipt upcalls exactly congestion control algorithm declared packet sent 
believe transport protocol effectively achieves level interoperability higher libraries 
example transport protocol generic specification accessible embedded system designers 
congestion control udp second possibility provide congestion control unreliable applications layer low udp applications udp transport protocol congestion feedback application layer layer udp 
congestion manager example approach :10.1.1.17.3677
unfortunately necessarily provide access multiple congestion control mechanisms address udp traversal issues approaches rely application level feedback push congestion control complexity application 
note new transport protocol congestion manager approach share congestion state flows congestion control algorithm deemed desirable 
congestion control transport layer possible modify tcp sctp provide unreliable semantics modify rtp provide congestion control 
tcp particularly inappropriate byte stream semantics reliance cumulative changing semantics extent significantly complicate tcp implementations cause serious confusion firewalls monitoring systems 
sctp better match originally designed packet semantics order delivery mind 
overlap requirements partial best sctp hardly minimal provides functionality unnecessary applications dccp currently allow negotiation different congestion control semantics 
adding congestion control rtp reasonable option audio video applications :10.1.1.165.7150
udp issues apply rtp 
addition rtp carries application semantics really form general purpose building block 
carrying rtp dccp cleaner separation functionality 
dccp requirements examining success tcp udp years observe applications originally supported secondary importance today 
applications change transport protocols useful services provide simple general 
applicationspecific semantics tcp possible complete evaluation sctp purpose see 
tion urgent pointer 
requiring reliable order delivery layered tcp order delivery constraints imposed socket api tcp protocol 
equivalent protocol providing unreliable congestion controlled packet stream 
clearly protocol provide udp demultiplexing checksum functionality 
congestion control take place context flow packets need sequence number space able discuss packet arrivals losses 
congestion control requires feedback channel convey congestion information back sender including support ecn 
strictly speaking required 
provide functionality require band mechanisms flow setup port allocation negotiation congestion control parameters 
benefit doing outof band 
band mechanism satisfy timeliness reliability constraints today internet outweighed difficulties traversal protocols don explicitly signal setup teardown inconvenience additional failure modes protocols parallel 
wise include connection setup teardown functionality protocol 
different applications different requirements congestion control mechanism negotiation congestion control parameters needed 
support applications currently envisage features desirable packet level fec selective reliability limited retransmission support multiple data streams flow 
features supported just efficiently top simple protocol 
believe better include functionality equally provided higher layer avoids inadvertently tailoring protocol transient semantics today applications prove useless baggage tomorrow 
functionality layered simple protocol short list mobility security 
section describes dccp security issues detail 
mobility advantages designing mobility transport protocol source port destination port type sequence number data offset ndp checksum reserved number dccp packet headers 
generic header comes dccp datagram 
individual packet types may add additional information number 
case packet header followed space options payload starts data offset words datagram 
relying layers mobile ip applicationlevel connection restart 
congestion control naturally aware address shifting respond appropriately 
second security parameters associated normal flow processing leveraged securing move 
ipv avoids triangle routing caused endpoint unable assume ip mobility capability party 
reasons dccp includes simple mobility mechanism authors completely convinced right choice 
fundamentals framework goal motivations design protocol lightweight minimal providing transport mechanisms layered 
primary purpose support congestion control 
different applications different requirements congestion control protocol support negotiation congestion control mechanisms 
congestion control involves keeping state flow points need defined mechanisms set cleanly tear state 
pragmatics deployment today internet mean nat firewall traversal taken account 
section describes dccp basic design choices consequences requirements 
dccp header structure feature negotiation mechanism problem reliable unreliable connection justify bidirectionality 
packet structure dccp datagrams byte generic header showed 
bit type field marks difference tcp currently different types dccp packet single packet type meaning depends collection flags 
compared tcp design increases number packet types available field represents types flags eliminates possibility confusing flag combinations christmas tree packets smallest dccp headers small possible individual packet types add information number generic header 
dccp option mechanism similar tcp options reporting parameter negotiation example header allows option space bytes times tcp 
course expect packets carry options 
feature negotiation dccp connection endpoints agree set parameters clearly congestion control mechanisms 
endpoints capabilities mechanisms implement application requirements mechanism application prefer capabilities application requirements able influence outcome 
tcp similar problem applying ecn sack window scaling timestamps solves ad hoc different options bits case 
dccp contrast provides minimal set options negotiating values general features feature simply value meant negotiated 
change option sent asks change value feature 
respond prefer says prefer different value confirm confirms feature value changed 
change prefer options retransmitted response received making negotiation reliable 
endpoint thinks negotiation long may reset connection 
features values endpoints 
single packet sent contain change confirm options referring feature located second referring feature located feature negotiations different features may take place parallel 
hindsight decision provide generic re liable feature negotiation allowed additional functionality added easily need consider interactions feature negotiation congestion control differing styles required congestion control mechanism 
reliable tcp built cumulative field 
cumulative ack convey information tcp mechanisms ack clocking retransmit persist timers reliable 
result tcp receiver needs keep fixed amount state 
ideally congestion control protocol unreliable data nicely integrated efficient safe problem turns significantly complex 
firstly cumulative meaning unreliable protocol retransmit packet 
secondly depending congestion control mechanism ecn nonce verification section application reporting may require receiver report exactly packets received 
result state required receiver grow bound 
way cut back state growth sender occasionally acknowledge receiver 
receiver knows acks arrived sender throw away state sent ack 
protocol unreliable may need partially reliable 
potential ways treat features explicit handshake transfer information 
add option occasionally sender means received feedback sequence number 
take sequence number space 
sender reports received packet receiver knows options received 
dccp chooses approach cleanest general solution problem 
modulo sack information advisory 
handshake approach high overhead adhoc solution wouldn apply 
dccp sequence number bit number increases packet sent including 
packet sequence numbers happy sideeffect congestion controlled 
tcp way re effectively equivalent tell dropped network 
dccp pure acks take sequence space detecting reverse path congestion trivial 
side effects packet sequence numbers happy see section sequence number validity example design decision win 
bidirectionality dccp tcp provides single bidirectional connection data flow directions 
appropriate dccp tcp 
particular streaming media roles asymmetric 
server may transmit huge live video feed client dccp congestion control fullest client may transmitted filename 
originally considered making dccp unidirectional protocol data flows server client initial client server request congestion controlled 
practice number reasons approach undesirable 
clear client server channel cease 
part request dropped application needed retransmit client wanted pause play rewind functionality 
retransmissions communication congestion controlled 
second unidirectional connections telephony prevent information piggybacked data packets flowing direction inefficient 
nats firewalls complicate picture traversal somewhat simplified single connection required usually initiated inside bidirectional communication 
faced possibility asymmetric functionality single connection 
solution break dccp connection log half connection half connection full dccp session data host data host host host host data piggybacked ack host ack data ack ack data piggybacked ack half connections dccp connection 
ical half connections 
connection half connection comprises data packets data comprises data acks see 
feature negotiation half connections completely independent may happen simultaneously 
example half connections may different congestion control mechanisms 
adds complexity protocol 
example congestion control mechanisms may need cooperate produce single piggybacked ack packet quiescence mechanism required reduce packet overhead common case unidirectional communication see 
significant benefits flexibility 
quiescence expect applications dccp essentially data flowing server client 
quiescence mechanism ensures protocol handle unidirectional communication unreasonable overhead 
endpoint say stops sending data amount time currently rtts constraints endpoint detects gone quiescent shifts unidirectional pattern communication 
affects sends 
quiescent endpoint sends definition 
demand ack vector feedback data packets require precise feedback feedback 
non quiescent endpoint limit sends exactly acks acks required congestion control mechanism 
congestion control dccp application choice congestion control mechanisms 
unreliable applications prefer tfrc congestion control avoiding tcp abrupt halving sending rate response congestion applications prefer aggressive tcp probing available bandwidth 
selection done congestion control ids indicate choice standardized congestion control mechanisms connection negotiated connection start 
profile selection allows specific options features avoid polluting global option feature space 
example option numbers specific meaning space split half connections relevant piggybacked data plus ack 
tcp congestion control describe dccp congestion control mechanisms section provides quick overview tcp serve point comparison 
tcp congestion control mechanisms involve intertwining flow control congestion control reliability order delivery 
example question send conflated question send packet 
tcp flow control mechanisms closely related tcp order delivery 
tcp receiver tells sender receiver advertised window lowest byte delivered application restricts sender able send 
tcp congestion control framework natural outgrowth flow control framework sender maintaining congestion window cumulative informing sender old data left network 
need tcp receiver check arrived sender 
information tcp cumulative ignoring sack information advisory subsequent provide newer information 
importantly tcp packets lost tcp receive congestion windows mean sender quickly sending new required move window forward 
tcp congestion control dccp provides tcp congestion control mechanism labeled 
operates context unreliable transfer congestion control framework differs tcp 
tcp stringent flow control mechanism needed dccp 
packet received read application packet arrives dccp choose drop packet receive buffer buffer space store packet 
dccp tcp congestion control uses sender congestion window limit number unacknowledged packets outstanding network cumulative field control 
mechanism needed ensure packets lost sender halves sending rate appropriately 
number ways accomplished unreliable transfer 
possibility mechanism similar tcp sack option receiver sends packets received repeated subsequent packets robustness 
sender hear receiver packets window data received reports ecn status packets sender compelled halve congestion window 
safe sender back result unnecessary reductions congestion window lost sender hear receipt packet 
exception ecn sender congestion window reduced cwr flag acts confirm ecn congestion experienced ece set received 
alternate mechanism dccp reliably transmit information receiver sender ack vector acks 
essentially receiver keeps telling sender packet received sender acknowledges receiver message included ack vector covering ack vector describes exactly packets received packets ecn marked network 
congestion control algorithm react information closely resembles sack tcp 
second vector may optionally inform sending application packet payloads dropped receiving endpoint receive buffer full example 
ensures ambiguity regarding metadata receipt packet reported received primary ack vector metadata processed packet payload subsequently discarded 
section describes issue 
limitations tcp congestion control sent receiver sender 
ack congestion control useful time congestion reverse path particularly important networks packet radio subnetworks 
dccp tcp detect reverse path congestion packet sequence numbers respond appropriate 
dccp sender responds modifying ack ratio controls rate stream receiver 
algorithm set ack ratio gives ack sending rate roughly tcp friendly 
tfrc congestion control tfrc congestion control dccp uses completely different approach tcp congestion control 
congestion window sender uses sending rate receiver sends feedback sender roughly round trip time reporting loss event rate calculated receiver 
sender uses reported loss event rate determine sending rate 
sender receives feedback receiver round trip times sender halves sending rate 
reasonably straightforward require reliable delivery feedback packets long sender trusts receiver reports loss event rate 
complications arise sender wants verify receiver reported loss rate accurate 
receiver reports ecn nonce sum long sequence packets reported received ecn marked loss interval 
key point note feedback information required tfrc substantially different required tcp style congestion control 
protocol basic feedback mechanism sufficiently flexible difficulties state art congestion control evolves 
course sending application want know exactly packets received receiver reasons 
cases half connection additionally include ack vectors acks acks 
partial checksums design dccp allows dccp checksum cover packet just dccp header dccp header number bytes payload 
follows proposal partial checksum udp lite motivation partial checksums applications voice video prefer partially damaged payloads delivered discarded network 
dccp congestion controlled transport protocol design issues adding partial checksums dccp complex compelling issues udp 
dccp congestion control dccp allowed checksum covered packet payload bit error payload result dropped packet packet drop necessarily possibly incorrectly treated dccp indication congestion network 
corrupted packet generally indication congestion unnecessary transport protocol reduce sending rate response single packet corrupted payload 
address issue inappropriate congestion control response packet corrupted payload dccp allows separate checksums header payload 
allows dccp detect payload corruption mistake corruption network congestion 
note usefulness partial checksums remains determined 
example crc noisy links discarded corrupted packets limit usefulness partial checksums 
addition discussed partial checksums exist ip level authentication mechanisms ipsec ah cover entire packet cryptographic hash 
balance belief dccp partial checksums potential enable uses difficult 
cost complexity supporting small worth including time 
guarding misbehavior dccp includes tools endpoints need prevent misbehavior 
specifically addresses misbehaving receiver attacks greedy endpoint tries get fair share network bandwidth hijacking attacks man middle takes connection denial service attacks malicious simply broken partner sends useless messages take cpu memory resources 
goal dccp safe misbehavior state art modern tcp implementation 
issues encountered preventing misbehavior deserve description particular issues difficult tcp dccp unreliability 
dccp protected misbehavior tcp 
misbehaving receiver attacks internet congestion control voluntary today sense routers enforce congestion control compliance flows 
unfortunately endpoints particularly receivers incentives violate congestion control get data faster 
example misbehaving receivers pretend lost packets received ecn marked packets received unmarked avoiding congestion control responses sender 
receivers acknowledge data arrives 
tcp risk packet loss deter misbehaving receivers action missing data violates tcp reliable order semantics handled application 
dccp applications tolerate loss case making deliberate receiver misbehavior masking implementation bugs 
combat misbehaving receivers data sender verify receives pun ish misbehavior 
incentive treating clients fairly 
sender provides unpredictable nonce packet receiver echoes 
dccp uses ecn nonce purpose encodes bit unpredictable information destroyed loss ecn marking 
need verification affected aspects protocol including things fundamental definition packets received purposes 
receiver report acknowledged packet ecn nonce bit individually limits compressibility 
tcp receiver reports ecn nonce echo case exclusive ecn nonces packets positively acknowledged particular 
dccp options encode single bit option number ack vector nonce echo ack vector nonce echo bit option data 
dccp simplifies nonce verification somewhat relative tcp 
nonces assigned packet tcp refer byte sequence numbers making identities acknowledged packets potentially ambiguous packets overlapping sequence numbers example 
practice major problem dccp packet sequence numbers match cleanly packet nonces 
packets received 
protocol descriptions define packet may acknowledged 
depends network host 
example tcp data acknowledged guaranteed application get data assuming wants data tcp receive buffer allowed drop data acknowledging 
dccp unreliable reason minimize delivery old data application 
dccp stack allow application request front drop receive buffer explicitly preferring new data old 
receive buffer dropped packets acknowledged 
essentially separate events delivery network delivery application 
network congestion control cares refers cumulative data acknowledged sacks may dropped 
loss rate round trip time sending application cares 
want tell sending application receiving application receive packet payload simultaneously telling sending dccp stack drop due congestion 
receiving endpoint claiming network delivered dropped packets report ecn nonces allow misbehaving receiver cheat 
cleanest way implement report valid packets received received ecn marked received dccp protocol irrespective application 
note differs tcp 
sender assume dccp options metadata processed received packets 
separate option called data dropped report received packets payload discarded making application receive buffer overflow payload corruption example 
division information options targeted congestion control targeted sending application classic example separation concerns 
misbehavior opportunities dccp options opportunities receiver misbehavior 
example timestamp elapsed time options receiver declare long sat packet acknowledging 
sender verify interval receiver reason inflate shorter round trip times lead higher transfer rates tfrc 
far addressed issues ad hoc manner 
hijacking attacks serious kind attack user point view connection hijacking role endpoint connection taken third party attacker endpoint noticing 
hijacking attacks insert bad data connection causing inappropriate application actions confusion eventually serious security breach 
early decision include cryptographic mechanisms public key cryptography base protocol mechanisms tend expensive ipsec provides similar functionality 
decision limits kinds threats dccp withstand 
mechanisms band way bootstrap security robust eavesdroppers 
attacker read insert remove arbitrary network packets hijack connection 
explicitly limit threats dccp address attacker snoop packets bets 
tcp addresses hijacking attacks sequence numbers 
attacker guess connection sequence numbers force way existing connection partner tcp usually notice intrusion 
modern tcps address problem randomly chosen initial sequence numbers 
dccp adopts similar solution 
sequence number validity unfortunately dccp unreliability packet sequence numbers add determining sequence number validity tell packet sequence number valid part current connection 
old packet dating previous connection endpoints ports attack packet 
tcp receive window defines range valid sequence numbers 
note difficult set receive window correctly receive windows limit data transfer rates probably inappropriately 
dccp congestion control protocol protocol applications unreliable transport generally prefer receive data making tcp style flow control inappropriate 
receive window flow control dccp defines loss window define valid sequence number range 
generally set larger tcp receive window goal cover number rtts packets window 
tcp receive window moves greatest valid sequence number received middle window 
unfortunately dccp packet sequence numbers mean dccp endpoint get sync partner sequence numbers matter big loss window imagine link starts dropping packets 
packet sent gets new sequence number acks get sequence numbers packets necessity eventually pass loss window packets probes sent test link status 
dccp connections need mechanism getting endpoints back sync burst loss 
dccp endpoint wholly discard packet bad sequence number 
responds partner challenge says effectively sequence number really far sequence number expect 
sequence number partner replies acknowledging connection updated new sequence number 
intervening packets including packet prompted challenge considered lost 
naive mechanism provides security snoop 
instance attacker needs guess valid sequence number successful number dccp supports slightly complex identification option md hash shared secrets sequence numbers prevent replay provides incrementally security band mechanism exchange secrets 
mobility dccp provides support mobility endpoint move new ip address inform partner new address 
somewhat resembles mobile ip semantics 
sctp complex mechanism supports example multiple ip addresses redundancy retransmissions sent secondary addresses 
mobility increases protocol functionality relative tcp possibilities attack 
particular attacker guess sequence numbers move dccp connection address leaving real endpoint idea connection gone 
partially address forcing dccp move packets carry valid identification options md hash mentioned attacker generate identification options inappropriately move connections 
mobility open door kinds attacks 
example dccp totally ignores inappropriate dccp move packets 
security basis dccp responded instance sending resets attackers extract information connection currently valid sequence numbers simply sending inappropriate move packets 
summary summarize dccp anti hijacking properties connections meant safe attackers guess valid sequence numbers instance snooping 
dccp leak sequence numbers ip addresses involved connection 
dccp reveals shared secrets generate identification options 
note limited coverage md hash shared secrets sequence numbers 
better cover packet preventing data manipulations break dccp ability traverse conventional network address translators modify packets addresses ports checksums 
illustrates tangled world modern transport protocol live 
true security provided ipsec certain circumstances ipsec usable cases application level authentication provide benefits 
transport protocol needs remain agnostic issues possible robust 
denial service attacks transport level denial service attack attacker tries break endpoint network stack overwhelming data calculations 
example attacker send thousands tcp syn packets fake real addresses filling victim memory useless half open connections 
generally attacks executed servers clients 
dccp addresses potential service attacks pushing state clients possible allowing endpoints rate limit responses invalid packets 
half open connections responding dccp request packet server encapsulate connection state init cookie option client echo completes handshake 
tcp syn cookies lets server keep information whatsoever connections syn cookies encapsulate lots state 
dccp servers require cooperating clients hold time wait state connection 
state remains endpoints minutes prevent confusion case network delivers packets late 
dccp connection closed sequence close reset 
receiver close sender reset need hold time wait state protocol designed server force client send close 
attackers overwhelm dccp endpoint making perform expensive calculations actions checking generating md hashes dccp mobility challenge mechanisms 
line defense sequence number validity checks connection currently live active way endpoint lost sequence number validity packets invalid sequence numbers require checking hash generation ignored 
case attacker cause sequence number validity failure flooding link example require challenge include md identification hash 
receipt bad challenge may cause receiver ignore challenges short time determined attacker prevent dccp session recovering sessions tasks victim handling protected 
reasonably assumed designing unreliable alternative tcp simple process assumption 
tcp congestion control tightly coupled reliable semantics tcp mechanisms directly applicable substantial change 
example cumulative tcp serves purposes including reliability liveness flow control congestion control 
appear simple equivalent mechanism unreliable protocol 
current internet hostile environment great care needs taken design protocol robust 
tcp gained robustness time important learn mistakes 
problem unreliable protocol harder ways application semantics constrained degrees freedom attacker 
current internet confused environment protocol wishes irrelevance design easy deploy world nats firewalls justifiably paranoid network administrators 
attempted sketch issues arose design dccp obvious subtle 
deliberately avoided describing details dccp interested reader referred dccp specification 
note dccp progress may change fundamental issues discussed relevant protocol attempting operate space 
dccp benefitted conversations feedback people including jitendra padhye coauthor dccp documents aaron falk members dccp working group transport area working group research group 
balakrishnan padmanabhan 
tcp performance implications network path asymmetry 
rfc internet engineering task force dec 
balakrishnan rahul seshan 
integrated congestion management architecture internet hosts 
proc 
sigcomm aug 
balakrishnan seshan 
congestion manager 
rfc internet engineering task force june 
bellovin 
defending sequence number attacks 
rfc internet engineering task force may 
bernstein 
syn cookies 
web page 
cr yp html 
allman fall wang 
conservative selective acknowledgment sack loss recovery algorithm tcp 
rfc internet engineering task force apr 
floyd handley kohler 
problem statement dccp 
internet draft draft ietf internet engineering task force oct 
progress 
floyd handley padhye widmer 
equation congestion control unicast applications 
proc 
sigcomm aug 
floyd kohler 
profile dccp congestion control id tcp congestion control 
internet draft draft ietf dccp internet engineering task force may 
progress 
floyd kohler padhye 
profile dccp congestion control id tfrc congestion control 
internet draft draft ietf dccp internet engineering task force may 
progress 
huitema 
case packet level fec 
protocols high speed networks pages 
jacobson 
congestion avoidance control 
sigcomm aug 
kohler handley floyd padhye 
datagram congestion control protocol dccp 
internet draft draft ietf dccp spec internet engineering task force may 
progress 

pink 
jonsson 
udp lite protocol 
internet draft draft ietf udp lite internet engineering task force dec 
progress 
morris 
weakness bsd unix tcp ip software 
computer science technical report bell laboratories feb 
padhye floyd 
inferring tcp behavior 
proc 
sigcomm pages aug 
paxson allman dawson fenner semke volz 
known tcp implementation problems 
rfc internet engineering task force mar 
stewart stream control transmission protocol 
rfc internet engineering task force oct 
ramakrishnan floyd black 
addition explicit congestion notification ecn ip 
rfc internet engineering task force sept 
savage cardwell wetherall anderson 
tcp congestion control misbehaving receiver 
acm computer communication review 
schulzrinne casner frederick jacobson :10.1.1.165.7150
rtp transport protocol real time applications 
rfc internet engineering task force jan 
spring wetherall ely 
robust ecn signaling nonces 
internet draft draft ietf nonce txt internet engineering task force oct 
progress 
zhang breslau paxson shenker 
characteristics origins internet flow rates 
proc 
sigcomm aug 
