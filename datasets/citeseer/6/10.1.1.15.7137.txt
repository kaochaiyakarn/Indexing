designing extensible distributed language meta level architecture shigeru chiba takashi masuda department information science university mail tokyo ac jp proceedings th european conference oriented programming ecoop kaiserslautern july lncs pp presents methodology designing extensible languages distributed computing 
sample product methodology meta level re ective technique describes variant called open inwhich programmer alter implementation method calls obtain new language functionalities suitable programmer applications 
presents framework called object communities help obtain various functionalities distributed computing top open 
overhead due meta level computation negligible distributed computing methodology applicable practical programming 
languages distributed computing designed provide general functionality broad range application domains 
designers languages developed numerous language primitives functionalities ada rendezvous remote procedure call orca shared data object 
functionalities suitable domain applications language single functionalities small simple suitable applications 
hand possible design language functionalities language large awkward 
goal demonstrate approach language extensible 
approach able design language time simple elegant applicable wide range domains 
programmer tailor language exploit various functionalities 
language extensibility long important issue kiczales example discussed designing extensible class libraries 
atypical approach supporting various functionalities single language provide set reusable code called library program implements functionalities supported japan society promotion science fellow dc language 
functionalities implemented approach may show lower performance ones implemented altering language system compiler approach broadly employed su cient performance usually obtained approach practice 
library program approach limited implement functionality deals non rst class entities language 
proposes methodology object oriented meta level technique designing extensible language distributed computing 
demonstrate methodology open isac variant including simple metaobject protocol mop :10.1.1.26.9545
open implementation method call object oriented terminology message passing open ended mop 
obtain new functionality ts application programmer easily extend implementation open 
performance overheads major issues meta level techniques critical domains distributed computing open deals 
seriousness overheads depends inherent cost functionalities achieved meta level technique 
overhead open negligible comparison implemented functionalities believe approach library program approach useful spite relative slowness applicable actual problems 
systems meta level techniques extension open described meta code meta level program 
meta code usually written system specialist mop complicated extension frequent expect normal programmers wizards write meta code open new functionality required applications 
open mop designed provide abstraction encapsulates implementation details unnecessary extension method call 
facilitate extension normal programmers provides framework called object communities includes basic functionalities extending method call distributed computing 
framework normal programmers easily obtain various functionalities distributed computing top open 
open simple mop imperative languages distributed computing procedure calls object oriented terminology method calls extended support remote communication network 
extended method calls provide functionality invoking procedure method remote machine functionality synchronizing multiple threads control 
ada concurrent example statement syntactically similar procedure call executing rendezvous procedure call extended block sender thread receiver ready 
method call smalltalk extended synchronous asynchronous asynchronous method call lets sender thread continue execution blocking synchronous method call blocks sender thread receiver thread nishes requested task 
meta level called re ection technique open ers normal programmers ability extend method call 
normal programmers modify implementation method call user program obtain various functionalities remote communication 
implementation method call exposed programmers metaobject model implementation conceals implementation details unnecessary extension 
metaobject normal object behavior corresponds actual execution method call 
object base level metaobject meta level execution methods controlled metaobject 
method object invoked speci method metaobject default implementation embedded compiler execute invoked method 
metaobject de ned programmer alter implementation method call de ning metaobject substituting 
approach require rebuilding compiler done user program 
base level directives open provides simple mop metaobject protocol method call extensible 
objects controlled metaobjects called re ective objects 
control metaobject imposes performance memory overhead open programmer specify object re ective 
ective object compiled normal object metaobject executed overhead 
distinguish re ective ective objects re ective object identi ed di erent class name 
class object may re ective re ective object refl ective object current implementation class refl subclass create re ective object class object metaobject declared special directives comments start mop 
note program includes directives open program valid program 
declaration re ective object takes form mop reflect class declaration means object class refl re ective metaobject class note means classes refl subclasses class normal class inherit class 
extend implementation method call metaobject re ective object controlled meta metaobject 
open allows ascending tower metaobjects 
methods re ective object divided groups depending invocation method controlled metaobject 
methods controlled metaobject called reflect methods reflect methods invoked extended manner methods invoked plain method call semantics 
example specifying reflect method 
class public mop reflect int func int metaobject protocol meta protocol organized object oriented techniques 
meta protocol protocol behavior implementation protocol functionality 
private int methods directive mop reflect speci ed reflect methods 
example func reflect method 
methods may category name enable metaobject recognize role methods 
metaobject may alter execution method call category name 
consider example method update category name write 
class public 
mop reflect write int update int mop reflect void meta operation 
category name special meaning call meta methods metaobject base level boundary levels 
calling reflect method category regarded calling meta method method name 
reflect methods having category name executed 
metaobject protocol reflect method called execution controlled metaobject 
metaobject de ned class inherit base class mainly de nes methods 
void meta methodcall id method id category args reply method implements method call base level 
invoked reflect method called 
void meta id method args method execute reflect method 
reply alter implementation method call programmer de nes subclass methods rede ned metaobject acts intended way 
suppose reflect method called 
method called method meta methodcall invoked meta level 
rst argument method meta methodcall bound integer identi er called method type id represents integers second argument represents category name method 
actual arguments method call passed third argument args 
note metaobject actual argument list method call rst class entity third argument args normal object class 
argument args interface stack programmer access actual argument 
programmer transfer argument args metaobject may reside di erent machine 
converting actual arguments class object corresponds reifying process impossible support open compiler 
method meta methodcall carries certain computation stores result fourth argument reply 
stored result returned return value caller calls reflect method 
method meta methodcall usually uses method meta handle methodcall compute result value 
method takes method identi er actual argument list returns result value speci ed method 
method allows reflect method executed time 
example metaobject execute reflect method compute result value 
illustrate open mop consider simple example metaobject prints message executing reflect method called base level class public public void meta methodcall id method id category args reply printf reflect method called meta method meta method args reply metaobject class speci ed message printed console time reflect method called 
method meta methodcall speci es metaobject prints name called method executing method 
note eliminate line printf method implementation method call metaobject implementation plain 
shows metaobject class controls method call 
metaobject controls object class refl previously shown re ective object class 
reflect method func object called metaobject traps method call executes method func method meta methodcall 
converting actual arguments class object similar marshaling unmarshaling process remote procedure calls 
current implementation class refl open compiler generates rede nes reflect method method carries conversion invokes method meta methodcall metaobject 
current open compiler converts atomic types integers pointers implicitly class types objects 
class types argument method speci methods conversion 
similar limitation appears marshaling unmarshaling process ciency converting complex data object depends program semantics 
conversion programmer control 
open provides convenient library implement methods conversion provides prede ned classes facilitate character string argument method 
limitation argument types reflect call return methods awkward 
trap meta 
pros cons metaobject void meta methodcall printf meta meta level object refl int func metaobject protocol open base level open expose implementation method call directly interface 
original implementation method call compiler described assembly code programmer attempts extend method call describes new implementation methods methodcall assembly code 
description interface programmer need consider details implementation stack image number arguments 
programmer concentrate matters strongly relevant extension 
feature open due meta level technique open uses 
method object invoked computation method call rei ed entities available program operations entities re ected actual computation 
di erence pseudo open systems directly expose internal structure extensible 
smalltalk example provides source code runtime system 
sense open ended system user programmers freely modify classes kernel objects extend system behavior 
feature smalltalk may kind re ection modi cation kernel objects easily lead system collapse programmer deals complicated kernel code directly interface 
hand reifying process implies performance open degenerates 
cost reifying re ecting negligible compared original implementation fully described assembly code 
reifying process bridges wide gap assembly level level 
higher interface open provides extension bigger performance degeneration reifying process 
peter deutsch pointed session workshop re ection meta level architecture 
tion negligible open distributed computing 
method call extended distributed computing slow performance degeneration relatively insigni cant 
issue discussed detail section 
bene open meta code de nes extension independently object meta code high reusability 
meta code extend method calls di erent objects 
meta code organized metaobject protocol furthermore part reusable class inheritance 
open improves expressive power class library technique supporting various functionalities single language 
functionality remote method calls implemented solely means class libraries translation argument list network message responsibility programmer 
class library deal entities available base level argument list available base level meta level 
hand open enables class library deal entity available meta level metaobject 
example metaobject transferring argument list di erent machine execute remote method 
object communities additional mop distributed computing method call basis functionalities distributed computing various functionalities implemented top open 
imperative languages include method call statement implement lot existing functionalities distributed computing 
method call extended support remote method call asynchronous message passing message broadcasting 
extended synchronization mechanism rendezvous distributed semaphore 
obtain functionality suitable application normal programmers describe meta code extend method call 
previous systems usually expected meta code written specialist simple mop open meta programming possible programmers little knowledge specialists 
mop open support distributed computing provides platform top functionality distributed computing implemented 
section proposes framework called object communities facilitates implement functionality top open 
framework class library metaobjects includes facilities commonly extend method call 
object communities add layered protocol mop open 
provides classes metaobjects implement functionalities distributed computing programmers obtain functionalities tailored applications rede ning methods classes 
background problem object communities designed framework implementing various application speci functionalities distributed computing distributed shared data distributed transactions process object metaobject process object community communication object community process meta level base level method call remote procedure calls 
framework provide facility managing computation distributed multiple processes di erent machines 
simple client server framework remote procedure calls su cient framework request computation process synchronize computation processes 
simple client server framework example easily understandable way implement functionality required groupware multiuser applications supports collaborative multiple users 
essential feature groupware application program consists multiple autonomous processes responsible interaction user 
processes interfere users manipulate shared entities shared documents pictures actions restricted actions users 
processes may notify shared entities updated request computation displays consistent images entities displays 
things application needs functionality possible block execution processes request computation processes 
overview object communities fundamental functionality object communities management distributed di erent machines 
group called object community 
assume object belongs single process address space separated communicates processes network 
process invoked explicitly user performs cooperatively processes application 
object object community acts manner depends behavior objects object community 
method calls objects executed cooperatively metaobjects objects provide certain functionality distributed computing 
note group objects provides functionality de nition objects include distributed concepts appear de nition metaobjects 
functionality provided implemented meta level base level programmer know method call extended base level 
object communities provide clear separation distributed computation substantial computation executed application 
object communities metaobject additional abilities 
concurrency control 
metaobject controls internal concurrency object 
ignore delay execution called method object condition satis ed 
metaobject execute multiple methods object concurrently 
metaobject execute method object metaobjects request method executed 
communication 
metaobject means communicating metaobjects object community remote method call message broadcasting 
metaobject call remote method metaobjects 
done manner similar local method call 
caller metaobject blocked reply returned called object 
metaobject send message metaobjects object community 
broadcast messages serialized underlying system metaobjects receive messages order 
broadcast message delivered metaobject sent message 
metaobject controls internal concurrency object exceptions internal concurrency metaobject default 
methods metaobject executed sequentially behavior metaobject easily understandable 
internal concurrency metaobject necessary controlled explicitly speci ed meta metaobject 
mop object communities append concurrency control communication abilities object communities provide class subclass classes metaobjects implement functionalities object communities inherit subclass 
class de nes methods manipulating object community network communication controlling concurrency 
methods manipulate object community 
meta 
creates object community 
meta 
destroys existing object community 
meta join 
lets object join speci ed object community 
meta leave 
lets object leave speci ed object community 
object community treated communication channel 
object join leave object community time object community remains object belongs 
exists destroyed explicitly 
initial information metaobject joins object community underlying system holds initializing message object community 
message dynamically updated metaobject passed metaobject object joins object community 
class de nes methods communication metaobjects 
meta 
broadcasts message metaobjects object community 
meta query 
calls method metaobjects manner remote procedure call 
metaobject blocked reply message arrives 
meta 
blocks metaobject ready receive broadcast message 
metaobject method wait message broadcast 
message sent rst methods pair consisting method identi er id actual argument list 
sending message metaobject requests metaobjects execute method object methods executed cooperatively 
behavior metaobject receiving message de ned methods 
class declares methods bodies de ned subclasses alter behavior metaobject 
meta 
executed broadcast message received 
meta 
executed broadcast message metaobject sent received 
meta 
method exported metaobjects 
method called metaobjects method meta query 
basically internal concurrency metaobject methods may executed concurrently metaobject blocked method meta query meta 
exception necessary prevent deadlock 
current implementation object communities provide preemptive scheduler 
programmer voluntarily cause context switch short intervals 
class de nes methods cause context switch 
note implementing preemptive scheduler possible preemptive scheduler fact obtained timer signal handler available 
reason nonpreemptive scheduler selected prevent concurrency metaobject meta metaobject 
methods metaobject executed atomically preempted 
examples method call extension functionalities distributed computing implemented group objects different machines 
object communities provide ability manage group objects intermediate class class hierarchy metaobjects refl functionality implemented top open de ning subclass class 
infact object communities include subclasses implement various functionalities distributed computing 
illustrates class hierarchy metaobjects provided object communities default 
class irrelevant communities implements method call done original manner method calls 
subclasses correspond various functionalities 
implement distributed shared data transactions remote procedure calls 
implement remote object pointers object transparently call method object di erent machine 
implementation remote object pointers exploits programming techniques smart pointers naturally available :10.1.1.26.9545
furthermore subclass implements persistent objects ability open deal instance variables object metaobject 
space limitation details ability 
explain subclasses object communities distributed shared data transactions 
distributed shared data implemented class 
shared data replicated held objects belong object community 
metaobjects control objects hold consistent values shared data 
suppose shared data integer represented variable class base level 
update variable class method update 
variable updated method graphical display new value class public mop reflect void update int new new private void int inaccessible outside object mop reflect class object class re ective object class metaobject 
method update reflect method 
object class refl created metaobject object join speci ed object community 
variable object maintained metaobject hold value values objects object community 
method update called metaobject requests metaobjects argument new execute method objects 
method update object object community called methods objects executed values updated keeping consistency 
note de nition class include code concerning distributed computation code de nition metaobject 
methods metaobject de ned follows void meta methodcall id method id id category args reply notifying method call id event meta method id args waiting noti cation serialized meta event args executing called method meta method id args reply void meta id method id args reply metaobjects report method call metaobject executes called method 
meta method id args reply consistency values guaranteed metaobjects attempt execute method update 
noti cations metaobjects serialized metaobject receives noti cations order 
restriction terms de nition method update programmer de ne action executed shared data updated 
kind processing adequately treated mechanisms distributed shared data distributed shared memory support functionality invokes ned actions machine shares data 
example metaobjects noti ed method call immediately mechanisms distributed shared data improve performance algorithm noti cation delayed 
algorithm available open programmer de nes subclass implement 
implementing algorithm necessary distinguish methods modify shared data methods simply read data 
category names reflect methods useful 
example class public mop reflect write void update int new new mop reflect read int get return 
category names metaobject identify method update write method method get read 
show subclass object communities 
class metaobjects implements atomic transactions 
concept atomic transactions includes recoverability transaction causes side ect fails class support recoverability 
guarantees atomicity sequence operations transaction executed continuously 
method meta methodcall class follows 
void meta methodcall id method id id category args reply locked meta block lock released 
method id event meta method id args meta event args meta method id args reply metaobject class delays method execution execution locked 
transaction programmer calls method metaobject locks method execution broadcast message 
receiving message metaobjects object community method execution metaobject releases lock 
variable lock indicates execution locked unlocked 
maintained messages metaobjects 
overheads due having meta level cient implementation meta level techniques major research topic 
execution re ective object open partly interpreted metaobject execution slower ective object 
section brie shows result measurements terms execution speed 
current open compiler preprocessor compiler 
modi cation added compiler open program translated plain code 
calling reflect method imposes overhead standards small 
show result performance measurements method calls 
table lists latency time kinds null method calls 
values measured station sunos compiler sun 
latency measured di erent numbers arguments 
int data rightmost column type double 
argument method initial version open compiler showed reflect method call times slower virtual method call 
table average latency sec 
null method call number arguments double function virtual method reflect method reflect virtual ratio sparc mhz mips sun return methods return int value 
method takes double arguments returns double value 
kinds null method calls function virtual method reflect method 
rst supported open available open 
function call call method object pointed avariable 
takes form ptr func 
method call call method object class unknown compile time method name dynamically bound method body 
reflect method call controlled metaobject class implements method call behavior function call 
line table shows ratio latency reflect method call virtual method call 
ratio increases number arguments overhead reflect method call mainly due reifying process argument list method call 
arguments copied class object separately reflect method called 
overhead copying increases proportion number arguments 
argument method takes argument overhead smaller methods 
result measurements shows reflect method call times slower virtual method call 
overhead important negligible open distributed computing network latency time microseconds milliseconds 
overhead reduced proper designing applications 
carefully designed applications distributed computation localized small number objects re ective objects executed overhead open allows specify object re ective 
believe meta level techniques applicable practical programming programmer selects domain overhead negligible comparison overhead performance functionality implemented meta level technique 
furthermore viewpoint distributed computing overhead open due cost marshaling unmarshaling process transferred data converted network message 
process commonly appears distributed computing overhead open equivalent approaches sun rpc 
sun rpc library conversion int argument takes microseconds library general nested function calls needed converting routine xdr routine called 
increased overhead meta level technique limited factor advantage meta level technique worthwhile 
concurrent language abcl example execution involves meta level operation times slower normal execution 
open programmer select object controlled metaobject 
result abcl improves execution speed program meta level technique 
related provides meta level operations 
macro set handling variable argument list considered provide restricted meta level operations 
allows programmer traverse argument list length element types variable argument list rst class entity 
operator overloading meta level operation enables replacement prede ned operators user de ned procedures 
metalevel information available overloading procedure operator overloading implemented concept re ection 
stub generator remote procedure calls sun functionality similar open compiler 
reads description le remote procedure generates stub routine utility routine calling remote procedure 
open compiler stub generator expose inside stub routine programmer alter implementation stub routine organized manner 
fog compiler provides ability extending generated code 
allows fragmented object fo distributed object 
fog compiler programmer specify communication protocol remote procedure call 
meta level re ection techniques applied various domains active area research 
clos mop rst try apply meta level techniques practical language 
provides extensible implementation clos speci cations clos modi able 
mechanism method lookup example extensible metaobject 
re ective language systems clos mop 
abcl applies meta level technique parallel computation tries minimize run time kernel extensible 
provides multiple models aspect implementation ective aspects implementation exposed 
programmer alter aspect independently considering aspects 
meta level techniques commercial systems 
meta information protocol mip commercial systems mechanism accessing type information object run time 
represents type information metaobject typesafe downcast available 
metaobject mip exposes internal information change metaobject uence behavior object overheads mip obviously small respect execution speed compared open 
metalevel techniques developing systems languages operating system window system 
operating system completely metalevel technique window system programmer alter system draws image window relationship windows maintained 
choices operating system uses meta level technique implement kernel subsystems 
macros programmer conventions choices exploits meta level technique con nes plain 
researchers try reduce cost associated having meta level 
clos mop example costs plain clos 
achieved careful protocol design implementation devices example calls meta level functions partially evaluated 
execution mechanism clos inherent complexity costs cost due meta level recovered techniques 
hand designed program directly translated cient assembly code 
method call example compiled machine instructions 
techniques clos mop insu cient implement open mop overhead 
intrigue support compile time mops reduce cost due meta level 
lisp compilers extensible mop 
compile time mops modify compilers compile program di erent scheme 
meta code replaces internal code compilers compiled code approach clos mop generate overheads 
approach meta code describe object behaves compiler generates compiled code object behave programmer intention 
approach overhead meta code straightforward clos mop open 
described open order demonstrate methodology designing extensible languages distributed computing 
open designed basis object oriented meta level re ection technique implementation method call open ended 
programmer alter implementation method call simple metaobject protocol mop obtain top open new language functionality distributed computing 
open mop simple easily understandable programmers familiar meta system implement new functionality top open 
mop exposes implementation method call abstraction 
open provides object communities facilitates meta level programming implementing functionality distributed computing 
open clearly separates distributed computation computation substantial programmer 
computation concerning communication synchronization notions appears meta level need considered programmer writing program base level 
feature open program understandable easier describe 
overhead associated open mop negligible open distributed computing small negligible comparison network latency time 
performance system mop achieve depends operations controlled mop 
meta level techniques di cult implement ciently applicable practical programming domain selected properly 
clos mop introduces meta level technique compiler language 
open bridge abstraction gap assembly language design considered implementation issues design clos mop 
restricts extensible part language speci cations order reduce cost associated meta level 
entities mop rei es necessary distributed computing 
apply open application domains parallel computing distributed computing overhead due extensibility needs reduced 
acknowledgments satoshi matsuoka suggestions clarifying organizing 
gregor kiczales frank buschmann helpful comments earlier drafts 
bal kaashoek tanenbaum orca language parallel programming distributed systems ieee trans 
softw 
eng vol 
pp 

birrell nelson implementing remote procedure calls acm trans 
comp 
syst vol 
pp 

buschmann kiefer stal meta information protocol run time type information proc 
int workshop re ection meta level architecture yonezawa smith eds pp 

ellis gibbs rein groupware issues experiences commun 
acm vol 
pp 

gehani concurrent software practice experience vol 
pp 

goldberg robson smalltalk language implementation 
addison wesley 
shapiro fog fragmented object generator proc 
usenix conference pp 

herlihy liskov value transmission method data types acm trans 
prog 
lang 
syst vol 
pp 

matsuoka yonezawa re ective object oriented concurrent language run time kernel proc 
int workshop re ection meta level architecture yonezawa smith eds pp 

kiczales des rivieres bobrow art metaobject protocol 
mit press 
kiczales lamping issues design speci cation class libraries proc 
acm conf 
object oriented programming systems languages applications pp 

lamping kiczales rodriguez ruf architecture open compiler proc 
int workshop re ection meta level architecture yonezawa smith eds pp 

li shared virtual memory loosely coupled multiprocessors 
phd thesis dept computer science yale univ 
islam campbell practical examples rei cation re ection proc 
int workshop re ection meta level architecture yonezawa smith eds pp 

maes concepts experiments computational re ection proc 
acm conf 
object oriented programming systems languages applications pp 

matsuoka watanabe yonezawa object oriented concurrent re ective languages implemented ciently proc 
acm conf 
object oriented programming systems languages applications pp 

matsuoka watanabe yonezawa hybrid group re ective architecture object oriented concurrent re ective programming proc 
european conf 
object oriented programming lncs pp 
springer verlag 
okamura ishikawa andm tokoro distributed programming system multi model re ection framework proc 
int workshop re ection meta level architecture yonezawa smith eds pp 

rao implementational re ection proc 
european conf 
object oriented programming lncs pp 
springer verlag 
rodriguez jr coarse grained parallelism metaobject protocols report ssl xerox parc palo alto ca 
smith re ection semantics lisp proc 
acm symp 
principles programming languages pp 

steele common lisp language 
digital press nd ed 
stroustrup programming language :10.1.1.26.9545
addison wesley nd ed 
stumm zhou algorithms implementing distributed shared memory ieee computer vol 
pp 

sun microsystems network programming guide 
sun microsystems 
dept defense manual ada programming language 
ansi mil std 
re ective operating system concept implementation proc 
acm conf 
object oriented programming systems languages applications pp 

tokoro design implementation proc 
acm conf 
object oriented programming systems languages applications pp 


