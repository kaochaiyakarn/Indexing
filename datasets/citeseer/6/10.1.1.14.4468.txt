parsing dependency relations robust parsing jacques damien clips imag campus bp grenoble cedex phone mail jacques imag fr damien imag fr short recall view dependency grammars dependency parsers 
uses dependency relations concise expression dependency rules get efficiency parsing 
second uses typed feature structures add se mantic knowledge dependency trees parses robust left right manner 

team working dependency grammars years 
dependency parsers built team 
uses notion dependency relations order implement dependency grammars effi ciently described part text 
second built objectives adding semantic knowledge process syntactic parsing obtaining robust parser second part text 

parsing dependency relations linguistic model dependency inspired model re recall shortly order define precisely terminology 

linguistic model relationship words fundamental concept associated dependency structures ds 
words language rela tion established defining dominated word dependent domi word governor 
relation represented arc nodes node labelled word 
arc de governor dependent 
example dependency structure sen tence parsers parsers linear notation brackets write parsers 
graphical representation read able shows clearly hierarchy governor dependents course dependents 
dependency grammars dependency grammar formalism hays vocabulary family parts ci union ci equal set rules having forms ii xi 
xi xi 
xn ci word classes lexico syntactic categories denoted name determiner noun adjective 
xi rules category names 
star shows place governor rela tively dependents type ii rule xi left dependents governor xi 
xn right dependents 
rule written terminating rule type rules initial rules 
grammar example categories determiner noun adjective verb 
drinks eats dog cat cup milk white hot grammar build structure drinks cat milk hot generation dependency grammars generative working generating rules choose type rule determines main governor choose apply type ii rules ob tain complete structure entirely terminating rules 
example grammar derivation matches sentence black cat drinks hot milk ivi cnc governor dependency grammar contain rules possible configurations dependents 
example want nominal phrases noun optional determiner adjectives noun grammar formalism proposed shows better way describe things 

dependency relations method system build dependency structures direct analysis transform input word chain dependency tree form depend ency grammar intermediate structure 
algorithm directly re au fran ais interactive linguistic procedures applied french type dependency grammars seen grammars impose combinatorial description possible configurations dependents governor 
overcome drawback introduce dependency rela tions lexico syntactic categories 
example say governs simply write jt dependency relations dr code relation relative positions dependent governor left dependent right relative positions dependents governor 
example want describe sentence black cat drinks hot milk gives sequence categories dependency tree 
dependency relations stipulate noun appear left fight verb noun determiner pre adjective 
attach relation vector integers positive negative write dep 
xn says dependents dep category governor gov category 
integers ascending order showing relative position dep gory 
governor integer values determine relative positions different possible dependents 
example positive integers concern right dependents negative integers left dependents 
integer second relation stipulate determiner placed adjectives cause 
relation see word placed noun adjectives integer 
relations drawn trees important thing noted inte ger position gives possibility dependent position imposes presence 
relations equivalent dependency grammar noted relations sense similar disjunctive forms sleator link grammars sleator temperley 

parsing algorithm algorithm supposes morphological step finished produced se quence lexico syntactic categories input sentence word corresponding category word ambiguous 
parser inputs sequence xi xn categories computed morphological parser set dependency relations asso ciated integer vectors 
add xi sequence pseudo category si help determining possible governor sentence initiate parsing process 
example possible main governors sentence coordination con junction el verb relations sent sent governor sen tence relations mutually exclusive 
expressed value integer possible depend ents sent 
order build dependency tree trees associated sequence categories parser initializes square array 
sleator temperley want projective structures planar structures trees traversed left right infix algorithm find original linear order sentence 
motivations tion projective structures important able retrieve tree original linear form sentence limitation leads greater parsing effi ciency governor search dependents separate spaces left right space 
oov xo xx xa xn dep sent go pol pc port sent xa zn pij set integers determined relations xj pif square array fo sentence governor xj left depend ents index index order matches word order sentence 
true right dependents index remove top right triangle array positive numbers bottom left triangle negative ones 
properties pij pij wehave vp pij having initialized array removed useless parts parser builds de recursive algorithm depend ency structures compatible array possible governor sentence sent column build left sub trees right sub trees build final structures merging partial fight left ones 
say catch sent category pull structures array 
algorithm succeeds pulled structure contains words input sentence 
real sentences course lexical ambiguities structural ambiguities 
cases algorithm non deterministic builds possible solutions blind enumeration 
dependency relations associated algo rithm described constitute grammatical model constraints 
quickly state parser succeed sen tences language sentences 
feature viewed advantage framework man machine communication system essential quality utterance interpretable syntactically correct close file example un grammatical interpret execute associated command 
contrary lack constraints pe efficiency algorithm build lot incorrect structures state example governor dependent position relation apply context 
limits necessary addition semantic knowledge syntactic parsing process lead design new method dependency tree construction second part 

despite relatively limited power expres sion parser builds dependency structures extremely quickly instantaneously personal computer long input sentence long ambiguous say number produced trees 
parser put system detection correction syntactic errors strube de lima 
main purpose check numerous rules gen der number person written french sen tences 
type application course essential parser take account morphological properties words building dependency structures 
lack constraints high practical efficiency algorithm ap plications man machine interfaces exchanges short language ap 

robust parsing preceding parser system detection correction syntactic errors french raised problems simple task detection correction agreement errors written texts need powerful parsing mecha nism able determine example relative pronoun system error correction rely correctness inputs order build structure essential mini mal 
improve knowledge system case add semantic information words order determine precisely rela tions syntactic parser system robust produce output input completely ill formed 
problems lead define new depend ency parser able manipulate semantic information error resistant 
results prototype called dependency tree transducer describe sections 

language writing depend ency grammars attempted design language description dependency structures retaining precision re grammars appropriate automatic treatment 
basic idea governor dependent relation expressed categories general words tions categories sentence 
think necessary describing governor dependent relation indicate context relation valid 
build dependency structures able determine words lexical category determiner noun verb governs 
generally dependency trees know merge unique tree 
example defined language rewriting rules rule applies dependency forest de typed dependency trees builder 
produces dependency tree 
set rules constitutes dependency grammar applied sentence means interpreter 
interpreter fact tree transducer driven rules 
example simple rule begins comments name rule sf pv forest resulting tree rule applies forest includes sequence left dependents particles pv 
builds new tree added dependent advantage rules compared sim ple binary relations possible ex press context category appears 
possible restrict governor dependents forbid occurrence category 
define linked pairs binary rela tions coordination conjunctions hand drawback primitive dependency grammars rule pair lexical ries lc 
avoid problem cho sen hierarchy lcs usual linear set lcs 
hierarchy set partially ordered relation 
manner express general rules nv specific ones aux pas means verb relations rule instance may ap plied pairs categories verb verb define set basic categories describe words specific way categories lexical indexing 
categories grouped meta categories structures want build 
write rules effectively build structures 
write grammars incremental fashion starting highest categories testing rules cor pus progressively adding precise rules lowest categories treat specific 
method avoid usual compromise fine set lcs multiplies morphological ambiguities syntactic rules general set multiplies syntactic ambiguities 
obtain fairly robust syntactic parsing un known words general cate gory cls rule apply unknown word parsing process 
similar type hierarchies language semantics represent taxonomy semantic types 
shall formalism representation syntactic semantic knowledge see 
abbreviations common proper nouns auxiliaries past participle adjective preposition coordination conjunction 
example hierarchy 
building dependency structures set rewriting rules tree transducer proceeds left right scanning input text 
time word recognized morphological parser transmitted syntactic module includes current state analysis 
data manipulated tree transducer trees forests word transformed node tree root bears information associated word 
order manage multiple interpretations word sentence transducer maintains list forests 
forests current state analysis called stacks time new word recognized node tree pushed forest parsing resumes top forest 
list stacks transducer applies applicable rule top stacks time rule applies new stack produced added list 
doing trans apply rules new stacks produced cyclically 
rule ap plies particular stack stack produced rule applies stack stack removed list 
example adapted french consider categories determiner adjective noun verb give simple rules shows evolution list stacks parsing french nominal stacks evolution phrase la belle ambiguous leads sequence example gives correct structures ties la belle firm beauty la belle beauty closes dia la belle beautiful farm lv algorithm introduce word la node added constraint rewriting rules tree bearing category 
rule apply tree introduce word belle ambiguous 
ambiguity written way length stack reduce time rule applied 
detailed discussion termination gives forests described list 
evaluation algorithm rule applies list gives list 

introducing word leads list 
type hierarchies detail rule application 
rule chosen represent knowledge applied second stack list produces new forest stack appended list 
transducer ends words trees unique formalism ait kaci 
terms typed features original list finds new produced stacks structures permit description types proceeds applying grammar rules 
rule applied new sense classical programming guages pascal sets values 
forest 
process stops example transducer reaches list ul lex eats removing stacks rule cat verb applied obtain list 
subj ul sem dia correct interpretation obj ul ta grammar input sentence agent stack contains exactly tree patient tree dependency structure sentence 
tags allows structure sharing terms trees graphs 
simple types defined signature set partially ordered relation 
order extended terms unique operation manipulate unification 
unification simple types defined set lower bounds types relation 
unification allows implicit inheritance properties efficiently implemented ai kaci 
parser term attached node tree transduction rules added expressions enable test modify terms 
ously build syntactic structure dependency tree semantic structure term contains morphological syntactical information built unification see unification dependency parsing 
example rules application words ul lex dog cat canine ul lex eats cat verb subj ul sem animate obj ul sem sem agent patient rule subject unif 
subj conditions assign 
subj actions root resulting tree decorated ul lex eats cat verb subj ul lex dog cat canine obj ul sem sem agent patient 
category hierarchy simplifies writing rules introduces way manipulating unknown words part mechanisms system integrated objects manipulates 
write rules thinking ill formedness necessary rules tolerant tolerance implicit system 
generally unification con junction dependency parsing allow build syntactic structures efficiently having fine descriptions terms 
hassan ait kaci 
lattice theoretic approach computation calculus partially ordered type structures 
ph university penn 
hassan air kaci 

efficient implementa tion lattice operations 
acm transactions programming languages systems pp 

jacques 
un inter pour la communication machine 
intl conference computational linguistics italy august vol 
jacques 
algorithmes pour le traitement des 
th se tat grenoble 
damien jacques irene 
contribution category hierarchy robustness syntactic parsing 
th coling hel finland august vol 
pp 
damien 
contribution la construction un syst analyse du 
th se uni joseph fourier 
hays 
dependency theory formalism cowl observations 
language pp 

peter 
dependency unification gram mar lth coling bonn frg august pp 
daniel sleator davy temperley 
parsing english link grammar 
technical report cmu cs school computer science pittsburgh october 
xa lucia strube de lima 
contribution tude du traitement des au niveau lexico un crit en 
th se uni joseph fourier mars 
re 
de tu rale 
paris 
