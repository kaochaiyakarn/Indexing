karma secure economic framework peer peer resource sharing vivek emin sirer department computer science cornell university ithaca ny peer peer systems typically designed assumption peers willingly contribute resources global pool 
suffer participants consume resources contribute 
propose general economic framework avoiding peer peer systems 
system works keeping track resource consumption resource contribution participant 
standing participant system represented single scalar value called karma 
set nodes called bank set keeps track node karma increasing resources contributed decreasing consumed 
framework resistant malicious attempts resource provider consumer fraction members bank set 
illustrate application framework peer peer filesharing application 
years seen peer peer systems design relies centrally exchange resources peers 
utility systems proportional aggregate amount resources peers willing pool 
peer peer systems implicitly assumed peers contribute resources global pool assist empirical studies shown large fraction participants engage napster gnutella peers share little files 
surprising little concrete incentive peers contribute resources 
outlines design peer peer system participating nodes contribute resources global pool illustrates economic framework filesharing system 
system called karma economic works keeping track resource purchasing capability peer 
resource karma exchanged peers files messages result computation 
single scalar value called karma captures amount resources peer contributed con sumed represents user standing global system 
groups nodes called bank sets keep track karma belonging users 
user initially awarded seed amount karma joins system 
karma balance adjusted upwards user contributes resources downwards consumes resources 
transaction allowed proceed resource consumer karma takes payment resources involved 
participants ultimately forced achieve parity resources contribute consume 
economic framework provides properties non repudiation certification atomicity 
karma protects malicious providers promise resource deliver completely malicious consumers receive resource claim transient states system participants observe intermediate states process transferring karma account 
karma uses atomic transaction scheme provides resource consumer key decrypt resource simultaneously provides provider certificate receipt 
karma limits effects large scale inflation deflation applying periodic corrections outstanding karma system 
overview section describe basic operation karma context file sharing application 
filesharing useful tangible example note basic transfer protocols karma equally kinds resources file blocks files messages publish subscribe system results computation grid computing system 
karma maintains internal state fashion distributed participants employs secure routing primitive reliable delivery messages :10.1.1.118.1870
prototype implementation layered top pastry design extended top distributed hash table dht corresponding secure routing property :10.1.1.28.5987
design system guided fundamental properties stemming peer peer domain 
local store file file epoch node balance operations seq file bank file file set file file set file file overview system state stores account balance karma paid file file sequence number current epoch number 
file file store list nodes store respective files 
karma designed complement peer peer systems system needs completely distributed require centralized functionality trust 
second failure proof components network peers account data needs replicated possibly extensively insure loss tampering 
third transaction system needs perform coordination replicas kept minimum 
karma design strives achieve goals 
karma relies principally replication deter nodes try subvert protocol 
assumes nodes system times uses protocols ensure system operate correctly substantial fraction nodes malicious 
maintenance bank set information bank set node maintains karma balance node updates account upload download 
define bank set node leaf set node closest nodeid space hash nodeid nodes bank set equally responsible maintaining required information 
critical assignment nodes bank set secure targeted attacks take bank set 
mapping scheme particular approach allows layer implementation top existing dht pastry secure routing primitive suggested :10.1.1.118.1870:10.1.1.28.5987
denote size leaf set bank root denote hash nodeid 
member stores amount karma account information regarding payments nodes files 
extra information acts proof payment comes play party transaction sent file payment 
bank set corresponding node stores sequence number part message sent node authorizing bank set transfer karma account account member ii current epoch number 
epoch spans fixed length time typically months epoch currency adjustments capita karma system constant eliminating effects inflation deflation see section 
sequence number node incremented transaction eliminates possibility replay attacks 
shows snapshot karma 
maintenance file information file system filesharing application uses dht store list nodes copy particular file fileid file 
fileid derived md hash file name file information replicated set nodes called file set file 
define file set set consisting nodes closest fileid direction dht 
earlier possible definition file set 
node joins network sends messages file sets files nodes receive messages add nodeid list nodes store file 
name dropped list certain period time renew files registrations different file sets 
arrival new nodes file set departure nodes file set handled easily periodic file refresh messages 
offsetting inflation deflation time capita karma total karma divided number active users varies 
inflates nodes money go nodes accrue karma go 
uncontrolled value unit karma go bounds 
prevent outstanding karma system periodically re valued capita karma maintained constant level 
correction factor applied karma computed epoch nnew total karma epoch total active nodes epoch 
epoch node bank set transmits nodes message containing number nodes bank set went inactive epoch unused karma balance ii number new nodes joined system epoch 
node receives messages nodes system computes current number nodes system nnew current total karma system 
previously stored values node computes adjustment applied applies accounts part bank set increments epoch number 
distributed nature correction nodes differ new node joining system gets required account information querying nodes leaf sets ent epochs time 
nodes engage transaction appropriate currency conversion maintain consistency 
scheme needs messages transmitted epoch number nodes system epoch typically spans months cost global correction acceptable 
initialization section describes new node part karma 
node enters overlay assigned bank set 
assignment performed securely manipulating bank set assignment may allow node adjust karma balance 
cryptographic puzzle ensures assignment random limits rate node join system 
join karma new node selects random key pair value md equals md lower digits parameter limit difficulty puzzle 
nodeid set md node certifies completed computation encrypting challenges provided bank set nodes private key 
node assigned id immediate control acquires public private key pair stages protocol having rely public key infrastructure 
node enters system potential bank set members check see member system looking entry databases 
bank set node sends member bank set message account information finds entry ii message indicating new member find entry 
messages signed private keys corresponding bank set members forged 
majority bank set indicates new node node initializes account system wide constant amount sequence number zero 
bank node uses balance sequence number values supported majority bank set 
consequently karma assignment persistent previous solutions cryptographic puzzle reused acquire new karma 
new node comes fig start functioning bank node nodes bank sets include order receive account updates relevant bank nodes sends messages nodes identifier space informs entrance system 
response nearby nodes report karma balances holding node maps bank set includes analyzes reported bank balances corresponding account picks value supported majority nodes bank set 
note non malicious members bank set engaged simultaneous karma transfers different stages protocol may legitimately disagree current value account balance 
majority consensus reached newly joining node waits period time selectively polling account value majority consensus established 
similar majority voting protocol establish sequence number 
handling change bank set due bank node failure similar case new bank node comes 
bank node goes new node part bank set 
underlying dht detects failure initiates similar discovery mechanism accounts bank sets include karma file exchange karma file exchange forms heart system 
exchange karma conserving fair file receiver say account decremented karma amount file sender say account incremented amount sends required file 
ensured making provable karma transfer account account making provable file transfer node wishes download file submits download query file set starts set auctions file 
root node file set forwards query nodes store required file say nodes 
receive query submit bids auction chooses bids say submitted node karma file exchange initiated 
karma transferred account account followed file chunk transfer 
auctions continued held chunk file till entire file downloaded 
karma transfer karma transfer payer payee entails deduction karma amount payer account deposit exactly amount payee account 
section describes done securely satisfying properties required karma 
initialization procedures described section require majority bank nodes agree account value node 
requirement satisfied 
transfer bank phase 
deposit 
query 
confirm phase 
transfer file transfer receipt file transfer phase 
inform transfer karma file exchange bank ensuring required property maintained account values change karma transfer simple synchronization mechanism 
feature karma transfer protocol described protocol bank set node decides proceed transfer independently nodes bank set 
karma takes advantage properties credit debit interface tolerate temporary inconsistencies bank set members 
obviates need expensive byzantine consensus protocols 
karma transfer node node involves bankb 
transfer broadly split phases communication different pairs entities bankb bankb see fig 
sends request transfer amount karma account 
amount account communicates bankb 
bankb credits amount account informs karma transfer proceed file transfer security protocol take care see messages authenticated 
explain authentication carried step protocol 
transfer request sent signed private key request includes unique sequence number avoid message replay 
phase nodes generate store log contains details transfer karma transfer provable 
second phase member sends messages members bankb requesting amount credited account 
bankb nodes send query nodes asking confirm sent previous messages 
nodes respond positive acks negative nacks 
bankb node say receives acks 
confirm 
query nacks proceeds transfer 
receives acks aborts transaction 
receives acks nacks means spurious nodes currently part bank set trying influence outcome transaction 
filter spurious responses sends member random challenge authentic members respond challenge decrypted private keys nodeid tuple nodeid generation see section 
valid responses challenges picks sent nodeid closest bank root direction 
bankb nodes allow transaction valid responses contain acks 
third phase bankb nodes inform transfer 
verifies majority quorum exists mechanism similar described 
proceeds file transfer verification succeeds 
maintain requirement majority agreement account values karma transfer members involved bank sets synchronize sending account values choosing value suggested majority 
synchronization done part karma transfer chain transfers message losses high probability result correct bank nodes disagreeing account values property majority agreement violated 
stage protocol bank nodes independently decide proceed transaction 
prevent malicious nodes exploiting lack complete synchronization different bank nodes incorporate features phase protocol automatic deduction karma account node karma pay transfer 
means account balance fall zero 
ii attempt ensure bank node bank set gets transfer request randomly pick bank node bank set forward request 
features transfer process commutative presence multiple requests account balance irrespective transfer request seen bank node 
features prevent malicious users trying illegally high account balances sending requests exactly majority bank set keeping bank nodes dark transaction 
allows execute karma transfer resorting expensive agreement protocols bank nodes 
obvious observation preceding discussion karma system requires participating nodes perform behalf nodes karma may suffer keep accounts system load 
prevent karma compensate bank set members part transactions awarding small amount karma 
care taken avoid potential problems 
performing transaction response single transaction create chain reaction grind system halt 
suitable dampening function awarding nodes extra karma node performed transactions address problem 
second providing extra karma participants violate zero sum properties karma transactions exacerbate inflation resource provider consumer simpler solution preserves zero sum property 
karma transfer overlay routing time required karma transfer greatly reduced sending messages overlay suggested earlier messages transmitted directly communicating parties bypassing overlay 
run phase transfer resorting overlay routing need node explicitly know ip addresses members bank set 
realized challenge response protocol node joins bank bank node responds challenge provided node proving nodeid membership node bank 
second phase node payer proves payee bank set nodeid responding challenges 
failure test suggested bank nodes ascertain communicating set nodes form legitimate bank set node bank set sure received messages majority bank set sends message informing transfer :10.1.1.118.1870:10.1.1.118.1870
knows transfer successful receives messages majority 
strategy eliminates transmissions overlay karma transfer cost computational burden participating nodes lead significant improvement earlier method 
file transfer certified mail scheme provable file transfer mechanism 
proof delivery receipt delivery file signed receiver private key 
briefly sender sends receiver file encrypted secret des key sender receiver run protocol receiver gets key decrypt file sender gets required receipt 
transfer carried directly nodes involved overlay 
node payment node certain file send file informs talks bankb bankb asks produce appropriate receipt 
send file required receipt bankb transfer karma back note mechanism limited filesharing applications scenario required resource expressed sequence bytes 
sequence bytes file filesharing application result computationally intensive function grid computing system 
mechanism transfer result karma transfer 
currency independent single type resource means karma implemented different resource sharing applications time 
possible attacks list possible attacks launched system describe system handles attacks 
replay attacks replay attacks ruled sequence numbers signatures node authorizes bank set transfer karma step karma transfer protocol verification mechanism employed bank set bank set wants deposit karma 
malicious provider provider accepts payment fails complete transaction contested karma back consumer 
malicious consumer malicious consumer claims receive services thwarted certificates 
provider simply provides certificate bank set transaction complete 
corrupt bank set secure entry algorithm ensures feasible target bank set 
assume attacker compromised node network 
denoting number nodes controlled attacker bank set exp probability attacker acquiring majority member bank set probability attacker controls majority bank set value multiplied total number bank sets attacks dht routing secure routing appropriate signing messages ensures reliable message delivery nodes system adhere prescribed routing protocol :10.1.1.118.1870:10.1.1.118.1870
denial service attack malicious nodes send dummy nacks break karma transfer thwarted checks employed see nacks originate authentic bank set 
sybil attacks peer peer domain external identifiers node manufacture number identi ties :10.1.1.17.1073
fundamental problem system 
external identifier credit card number unique processor id address problem loss privacy 
permit sybil attacks limit rate launched secure entry algorithm spurious files malicious members put dummy files giving popular names leading downloads spurious files unsuspecting users 
inherently difficult counter attack security achieved generating fileid content hash file name file 
users seeking particular file choose common fileid associated file name 
related fair sharing resources systems ngan design enforces fair sharing storage systems 
goal ensure disk space user willing put storing users files greater space consumed user files disks 
user really storing files says storing verified random audits 
design fact resource contention spatial nature user claim storing files users verified claim 
design extended scenario concerned contention temporal resources bandwidth resource contribution continuous time 
schemes number schemes proposed support lightweight transactions internet making small payment accessing page restricted site 
primary aim schemes enable level security commensurate value transaction having negligible overhead 
schemes provide degree anonymity parties transaction trusted common brokers 
unfortunately schemes require trusted centralized server 
schemes assume existence brokers give currency users handle deposit currency vendors 
assumptions trusted parties translate peer peer domain 
microeconomic models resource allocation distributed systems various decentralized microeconomic schemes proposed solve resource allocation problems load balancing network flow problems computer systems :10.1.1.113.3912
karma economy similar pricing economic models proposed systems 
systems different resource consumers resource consumers act independent agents selfish manner maximize respective utility values 
proposed strategies maximize individual utility values overlaid top karma economy 
applying mechanism design systems advocate mechanism design systems users behave globally manner 
karma tracking user resource contribution aims 
propose economic framework discouraging behavior peer peer system provide design file sharing application framework 
framework node associated bank set keeps track node karma balance indicator standing peer community 
bank set allows resource consuming operation node node sufficient karma account allow operation 
safeguards protect system malicious nodes may attempt manufacture karma acquire services peers providing karma acquire karma refuse provide services 
built top peer peer overlay proposed design complement peer peer services force nodes achieve parity resources provide resources consume 
referees helpful comments 
saroiu gummadi gribble 
measurement study peer peer file sharing systems 
proc 
mmcn san jose jan 
adar huberman 
free riding gnutella 
monday oct 
rowstron druschel :10.1.1.28.5987
pastry scalable distributed object location routing large scale peer peer systems proc 
ifip acm middleware heidelberg germany nov 
castro druschel ganesh rowstron wallach :10.1.1.118.1870
secure routing structured peer peer overlay networks 
proc 
osdi boston dec 
goel robson sirer 
herbivore scalable efficient protocol anonymous communication 
cornell univ cis tech 
rep tr feb 
schneier applied cryptography john wiley sons nd edition 
douceur :10.1.1.17.1073
sybil attack 
proc 
iptps cambridge mar 
ngan wallach druschel 
enforcing fair sharing peer peer resources 
proc 
iptps berkeley feb 
wayner 
digital cash commerce net morgan kaufmann nd edition apr 
ferguson nikolaou sairamesh yemini :10.1.1.113.3912
economic models allocating resources computer systems 
clearwater editor market control distributed systems 
world scientific press 
parkes 
rationality self interest peer peer networks 
proc 
iptps berkeley feb 
