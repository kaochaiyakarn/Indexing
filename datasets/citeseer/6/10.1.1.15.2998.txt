hybrid layout algorithm sub quadratic multidimensional scaling alistair morrison greg ross matthew chalmers department computing science university glasgow www dcs gla ac uk gr matthew dcs gla ac uk clustering layout techniques structuring visualising complex data 
inspired number contemporary techniques presents novel hybrid approach stochastic sampling interpolation spring models 
chalmers spring model benchmark evaluating technique comparing layout quality run times data sets synthetic real data 
algorithm runs executes significantly faster chalmers algorithm whilst producing superior layouts 
reducing complexity run time allow visualisation data sets previously infeasible size 
results indicate method solid foundation interactive visual exploration data 

visualisation multivariate data fundamental task fields 
bioinformatics financial sector great deal interest data inherent mapping space 
graphical means conveying information subsequently relied provide insight patterns relationships 
critical requirement production representation means generate layouts multivariate data lower dimensional space 
created visualisation preserve relationships existing data comprehensible allow user perceive patterns 
multidimensional scaling mds means mapping data set smaller number dimensions may visualised manageable form 
resulting presentation contain dimensional cartesian space directly dimensional embedding objects high dimensional inter object relationships approximated low dimensional space 
focuses creating dimensional representations 
effective generating layouts standard mds operates means eigenvector analysis matrix producing layout linear combination dimensions 
results procedure producing layouts 
cubic complexity noted computation performed entirety data set slightly altered 
iterative techniques overcome difficulties 
possible calculate measure quality layout visual representation conveys relationships initial data 
treated loss error function iteratively minimised gain optimal arrangement 
chalmers iterative mds algorithm capable producing representative layout time proportional 
additionally removing necessity creating layout linear combination dimensions system find optimum layout 
describe combination iterative techniques generates layout subquadratic time 
example layout tool interacting shown 
focus tool terms interaction data new layout algorithms 
section describes spring models general approach iterative layout algorithms 
section outlines model working report results experiments comparing new technique chalmers algorithm 
reflect results find number avenues research open 
outline concluding 

spring models spring models force directed placement techniques simplest mds algorithms 
goal mds create representation preserves relationships set objects spring models determine point laid inter object similarities 
high dimensional dissimilarity calculated pairs objects approximated closely possible lower dimensional space layout 
usually measured euclidean distance 

example layout close completion visualisation tool shown top right 
components tool offer control spring model parameters bottom right histograms left individual dimensions attributes allow filtering selection 
layout points sampled shape test sets described section 
points layout coloured coordinates original shape 
late stages processing may resolve folds distortions set chosen inherently impossible lay perfectly 
simulations physical forces drive layout process 
pair objects considered spring ends attached points 
relaxed spring length rest distance ideal proximity objects highdimensional distance dissimilarity 
similar objects far apart pulled dissimilar objects close pushed apart 
final layout produced system reflect spring system equilibrium 
spring simulated pair objects springs considered 
system maintains properties object position velocity force 
iteration force calculation performed object 
magnitude force object object time run proportional calculation performed order produce force acting object force update velocity turn updating object position layout 
note force calculations performed iteration spring model objects 
number iterations required produce stable layout commonly proportional size data set resulting algorithm 
pairwise interactions step obvious area improvement 
analogous known body problem computational physics 
chalmers algorithm technique chalmers employs caching stochastic sampling perform iteration spring model linear time permitting construction stable layout time 
achieved reducing number force calculations performed object iteration 
distinct sets object set stored list neighbours objects far low high dimensional distance expected laid nearby space 
second set reconstructed iteration contains random selection objects neighbour set 
random objects selected tested determine high dimensional distance lower current neighbours 
case new object swapped neighbour set 
object added manner neighbour set representative similar objects successive iterations 
sets constructed forces calculated object members sets 
number force calculations required iteration algorithm reduced vmax smax vmax maximum size set smax maximum size set sizes bounded constants computational cost iteration linear respect evaluation technique indicated layout quality despite reduction force calculations 
constant values low vmax smax respectively yielded favourable results 
terms computational time currently best model springs algorithm basis comparison new techniques 
noted despite improvements offered chalmers model practically data sets objects size 

hybrid methods clustering layout clustering algorithm may effectively tackle areas weaker 
number researchers explored combinations algorithms view maximising benefits different approaches diminishing impact shortcomings 
example kohonen self organising feature map som unsupervised learning algorithm applied classification information 
soms partition data set grid useful clustering visualisation applications quite time consuming construction 
su claim means known iterative centroid divisive clustering algorithm lower time complexity som employ gather representative classes clusters data set 
representative centroids organised discrete accurately grid som fine tune 
su suggest variant som approach faster traditional line som 
conversely example hybrid approach som initial phase creation layout 
som shown computational bottleneck previous example exhibit complexity spring model 
consisting discrete grid cells soms show topological structure detail spring model layout quicker scale larger data sets 
basis comparison som find representative clusters neurons spring model lay neurons distortion imposed discrete nature som 
effect process produced set cluster centroids arranged way preserve high dimensional relationships 
useful layout template placement entire data set original interpolation algorithm 
accuracy interpolation largely determined set constants govern process higher values resulting longer run times accurate placements 
example figures showed layouts produced strikingly similar generated full spring model 
time taken achieve described order hours days 

novel hybrid approach mds section outlines original method generating layouts high dimensional data dimensional space 
show combination sampling spring techniques layout construction possible sub quadratic time 
techniques build interpolation strategy described previous section 
initial step take simple sample data set running som 
layout subset chalmers spring model 
model run 
choice measures exists determining halt spring model execution 
main termination criteria difference velocity system iterations difference system stress 
stress sum squared errors inter object distances may defined dij denotes desired high dimensional distance objects gij denotes low dimensional layout distance ij stress ij ij practice terminate stage difference velocity falls scalar threshold 
complete layout entire data set modified version original interpolation strategy 
interpolation process described illustrated 
object 
find object highdimensional distance original subset 
define circle round radius proportional high dimensional distance objects 

comparing differences actual layout distances desired distances determine quadrant circle satisfactory positioning 
perform binary search quadrant determine best location ic place 

select random sample original subset base calculations 

determine aggregate force vector members 
add vector position 

repeat steps constant number times refine placement 
strategy improves original model respect position placement 
quadrant comparison binary search replace original method comparing constant number positions circumference 
simplified vector addition step previous strategy selecting best position number random locations vector reliably better adding unscaled force vector 
changes contributed far accurate object placement resulting representative layouts 
extra time spent performing version interpolation negligible comparison saving post interpolation spring model refinement 
sizes random samples original interpolation strategy kept constants interpolation achieved complexity linear respect case variant extra routine required step outline 
method initial som stage partitions data set clusters spring model lays cluster centroids 
interpolating object determine original subset basis calculations 
information objects belong clusters initial pre processing stage required 
objects interpolated compared samples 
best match points consequently calculated time 
pre processing stage dominant factor making layout 
final stage mds technique run constant number iterations chalmers spring model full data set refine placement 
interpolation scheme accurate initial layout sample 
may case sample perfectly representative full data set spring model terminated local minimum 
tests synthetic data known structure see section expected shape place layout looked jigsaw puzzle piece lying 
individual points interpolated correctly parent original subset parent misplaced initial layout 
full data set spring model iterations sufficient considerably lower stress visually slot errant sections place 
previously discussed chalmers model linear iteration 
constant number iterations run complexity final phase linear respect algorithm remains 

placement object begins finding similar member initial layout finding best position ic circumference circle radius position refined iteratively adding aggregate forces subset moving object positions reaches final location iz 

experimental results section offer number comparisons new layout algorithm chalmers algorithm current best spring model algorithm respect computational complexity 
evaluate compare layout models subjective quality explored interactive screen objective quantities stress 
stress calculated experiments defined section 
noted metric caution stress necessarily perfect indication perceived quality final clustering layout 
may serve rule thumb layouts may comparable stress layouts may different lower stress necessarily mean better interpretable layout particular context 
visualisation tool carry experiments written java sdk version 
tests run pc intel pentium mhz mb ram running microsoft time ms time ms data set size hybrid approach spring model 
run time completion different sizes data 
data set size hybrid approach spring model 
run time completion different sizes financial data 
windows professional 
tool available download homepages authors 
distinct collections data selected experiments 
collection synthetically stress created sampling points structure band shape dimensions 
reconstructing shape possible layout algorithm may seen structure forced fold certain areas impossible exactly represent distances dimension available 
sampling different frequencies sets different cardinalities created collection elements 
second collection data set dimensional financial data containing historical performance volatility information investment funds 
sets time 
decided synthetic data set part evaluation strategy compare generated layouts layout processes easily 
able clearly see recognised structure forming able subjectively measure quality layout produced 
figures compare technique chalmers algorithm terms layout time stress data set size hybrid approach spring model 
stress completed layout different sizes data 
data set size hybrid approach spring model 
stress completed layout different sizes financial data 
stress 
seen hybrid approach far quicker times faster data 
worthy note time taken run hybrid algorithm appears increasingly linearly data sets elements 
may unusual parent finding step computationally complex phase method 
practice size data sets tested interpolation phase time consuming step 
illustrates stress lower hybrid model 
consistent observed examining resultant layouts 
interpolation phase resulted accurate positioning layout looked regularly spaced resulting smoother shape 
solo spring algorithm produced structure characterised rough edges tight clusters gaps 
similar reductions computational time stress spring algorithm time observed second data set see figures hybrid approach achieving lower stress time 
illustrate degree improvement offered methods standard mds techniques experiments performed full spring model run sets data size objects 
smaller data sets laid seconds minutes compared seconds hybrid method 
data set objects took seconds hour converge compared seconds average runs approach 
interesting note stress higher cubic time model compared interpolation model finished stresses roughly 
velocity threshold reached layout higher number springs model 

experiments suggested variety possible areas 
section outline number possible benefits 
hashing hybrid model bottleneck terms computational complexity assignment remaining data points parent sample 
precursor interpolation layout samples 
currently requires time worst case brute force linear search parent 
example nearest neighbour search may possible employ hashing function stage reduce complexity 
attempts hashing functions perform similarity searching high dimensions 
indyk proposed technique locality sensitive hashing lsh aid retrieval data element approximate nearest neighbours 
approach assumption computation required determine absolute nearest neighbour unnecessary approximation suffice value fraction cost full search 
method reduce lookup sub linear time pre processing phase required place points hash tables require nl operations 
favour performed sample full data set 
shown constant number hash tables regardless data size result high probability finding close neighbours 
preprocessing stage lookup technique bounded constant resulting interpolation algorithm requiring operations 
area certainly worth exploring 
results indicate approximation nearest neighbour sub linear time process possibly applied areas 
example possible select object interest unordered space similar elements data set techniques included spring model domain help identify neighbour sets 
lead fundamentally rethink spring model algorithm 
pivots family algorithms predominantly nearest neighbour searches indexing applications 
idea select number points pivots dataset store distance points point set 
triangular inequality discarding rule applied number distance calculations find close objects query reduced 
idea described follows point data set pivot store distance points 
query define distance pivot 
possible triangular inequality discard distance calculation query point predefined maximum distance object may considered close 
speed operation building neighbour sets force calculations parent finding operation 
dynamically resizing asserted earlier possible create layouts values respectively sizes neighbour random sample sets 
minimise iteration time obviously advisable set values low possible 
certain conditions may wise alter size sets dynamically program execution 
instance analysis stress values indicated little change certain period iterations case layout converged stable state stuck locally optimal layout 
increasing size set neighbours data point receive greater force pulling rightful position 
increase probability layout breaking state moving minimum 
proximity grid grid structure determine topological layout images beneficial browsing 
algorithms creating grid structure proposed 
essence algorithms mds routine basis transform continuous layout inter object distances discrete topology similar array su 
thought discrete layout implemented way output algorithm create alternative som topological ordering layout near optimal providing better interface browsing 
propose data set large grid series nested grids toplevel layout cluster centroids user semantic zooming function 

novel method performing multidimensional scaling combination sampling interpolation spring models 
modified version interpolation scheme coupled original combination techniques offers sub quadratic run times layouts low stress 
shown improvement complexity chalmers benchmark algorithm reflected significantly faster run times 
reducing complexity run time manner effectively increasing size data sets mds layout techniques may performed 
significant proportion dedicated number avenues research partly show area visualisation offers promising lines 
techniques hashing suggest spring model algorithms may run linear time applicable large complex data sets significant development testing required say potential realised 

luc dominique openness help algorithm data sets andrew early hybrid algorithm 


proximity visualisation data phd thesis university cambridge computer laboratory 

combining topological clustering multidimensional scaling visualising large data sets unpublished accepted published proc 
ieee information visualization 

chalmers linear iteration time layout algorithm visualising high dimensional data proc ieee visualization san francisco pp 


chatfield collins multivariate analysis chapman hall london 

ch vez navarro fixed queries array fast economical data structure proximity searching multimedia tools applications pp 


fruchterman reingold 
graph drawing placement software practice experience pp 


gionis indyk motwani similarity search high dimensions hashing proceedings th international conference large data bases pp 


indyk motwani approximate nearest neighbors removing curse dimensionality proceedings sigmod pp 


kohonen kaski lagus rvi honkela saarela self organization massive document collection ieee transactions neural networks pp 


macqueen methods classification analysis multivariate observations proc 
th berkeley symposium mathematics probability pp 


rodden sinclair wood organisation similarity assist image browsing proceedings sigchi human factors computing systems pp 


su 
chang fast self organizing feature map algorithm ieee transactions neural networks vol 

