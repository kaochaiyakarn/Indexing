logic java modeling language jml bart jacobs erik poll dept computer science univ nijmegen box gl nijmegen netherlands 
cs kun nl www cs kun nl 
describes specialised logic proving speci cations java modeling language jml 
jml interface speci cation language java 
allows assertions invariants constraints pre post conditions modi able clauses annotations java classes design contract style 
loop project university nijmegen jml speci cation veri cation java programs 
special compiler developed translates java classes jml annotations logical theories theorem prover pvs isabelle 
logic jml described consists tailor proof rules higher order logic back theorem prover verifying translated jml speci cations 
rules eciently combine partial total correctness hoare logic possible termination modes java single correctness formula 
jml java modeling language speci cation language tailored java primarily developed iowa state university :10.1.1.34.8403:10.1.1.34.8403:10.1.1.34.8403
allows assertions included java code specifying instance pre postconditions invariants style ei el design contract approach 
jml integrated speci cation language esc java extended static checker developed compaq system research center 
nijmegen formal denotational semantics developed essentially sequential java 
compiler built loop tool translates java program logical theories describing semantics :10.1.1.34.8093
logical theories format serve input theorem provers prove properties java program achieving high level reliability program 
loop tool supports output theorem provers pvs isabelle 
approach veri cation java demonstrated usefulness instance proof non trivial invariant vector class standard java api 
current main application area javacard see 
loop tool extended jml verify jml annotated java source code 
moment works kernel jml 
advantage formal speci cation language tool support possible 
tool support jml focuses generation runtime checks preconditions testing iowa state university extended static checking compaq system research center veri cation loop tool university nijmegen 
ers wide range validation options key advantage jml 
presents logic reasoning sequential java programs result years experience area 
semantical logical approach java loop project bottom starts automatic translation java programs ultimately series low level get put operations suitable memory model 
point onwards steps taken abstraction ladder 

rst results proved java program consideration formulated higher order logic back theorem prover pvs isabelle proved fully unpacking meaning terms low level get put operations memory 
relatively small programs handled despite usefulness automatic rewriting 

suitable hoare logic java introduced pvs isabelle compositional reasoning programs higher level abstraction 
logic di erent hoare triples corresponding partial total correctness possible termination modes java statements expressions normal exception return break continue 
theory logic appropriate practice involves rules leads duplications proof obligations di erent termination modes 

abstraction step results proved longer formulated pvs isabelle suitable speci cation language java jml 
jml possible write speci cations java programs need know details programs pvs isabelle 
translation kernel jml pvs isabelle done automatically 

nal step topic tailor logic developed proving pvs isabelle jml speci cations 
logic involves syntax driven rules pvs isabelle supported appropriate proof strategies enabling user go step step method body 
logic combines partial total correctness di erent termination modes single correctness formula resembling jml method speci cations 
logic powerful ecient 
soundness rules proved basis underlying semantics java 
proofs easy just involve case distinctions 
soundness rule see subsection non trivial 
rules describe handle standard imperative part sequential java typically object oriented features dealing ex ample dynamic binding 
need rules fall back low level semantics issues handled automatically 
crucial point 
logic jml directly java source code level standard hoare logics see translated java code back theorem prover semantical level 
translation performed loop tool compositional di erence proofs logic jml follows original code structurally 
forward approach execution order typically leading statements step step adapting precondition suitable way 
step prove adaptation precondition result leading statement 
approach typically done logic jml going lowest semantical level making ecient automatic rewriting 
mentioned works small programs 
note important consequence working semantic level combination high level proof rules low level automatic rewriting basis underlying semantics forms strength pragmatic approach introduce logical rules really suits order achieve higher level abstraction proofs 
consequence working semantical level really de ne notion completeness higher level rules completeness de ned syntactic level lower semantic level 
shall talk proving jml speci cations certain java implementations 
shall certain cases proofs may rely jml speci cations example methods native implemented language java may overridden 
case rely speci implementation may di erent subclasses 
behavioural approach subtyping see assumes implementations subclasses satisfy speci cation class method rst introduced 
speci cation form basis veri cations 
order explain logic jml introduce quite languages java jml annotations section higher order logic pvs isabelle representation java statements expressions section meaning jml method speci cations logic section nally rules 
necessarily describe details forced concentrate essentials 
involves example speci cation jml veri ed pvs logic jml 
example time abstraction level level described 
class method speci cations jml section gives brief impression jml concentrating method speci cations 
information see :10.1.1.34.8403:10.1.1.34.8403:10.1.1.34.8403
jml adds assertions java writing special comments 

assertions java boolean expressions extended special operators 
classes enriched invariants predicates preserved methods history constraints relations hold pre post states methods 
methods annotated behaviour speci cations normal behavior exceptional behavior simply behavior 
typically follows specifying method behavior diverges requires modifiable ensures signals void 
roughly says precondition holds method hangs terminates normally terminates abruptly diverges ensures signals clause holds respectively 
diverges true resp 
false partial resp 
total correctness 
note false method terminate abruptly 
normal behavior exceptional behavior describes situation method terminate normally exceptionally assuming precondition holds 
example class contains annotated method searches certain pattern array single loop 
non trivial postcondition 
semantics java statements expressions section introduces denotational semantics java statements expressions higher order logic 
logic common abstraction logics pvs isabelle hol introduced proceed 
complicated type om object memory various put operations see 
internal structure om relevant 
type om serves state space statements expressions act functions om statresult om suitable result type result types introduced labeled coproduct called variant sum types statresult type def hang unit norm om abnorm type def hang unit norm ns om res abnorm labels hang norm abnorm corresponding termination modes java non termination normal termination abrupt termination 
notice class pattern int base pattern normal behavior requires base null pattern null pattern length modifiable ensures pattern occurs result result result gives start position forall int pattern base result pattern occur earlier forall int exists int pattern base pattern occur result forall int exists int pattern base int find occurrence int true pattern length return base length return base pattern fig 

pattern search method java jml annotation normally termination expression returns state incorporating possible side ect result value 
indicated labeled product record type ns om res 
result types abrupt termination subdivided di erently statements expressions type def excp es om ex reftype om break bs om blab lift string cont cs om lift string type def es om ex reftype type reftype containing null pointer memory location 
describes exception object case exception thrown 
lift type constructor adds bottom element bot arbitrary type keeps original elements break continue statements java label represented string 
basis representation statements expressions language constructs sequential java formalised type theory translation performed loop tool 
instance composition statements om statresult de ned def om cases 
hang 
hang norm 

abnorm 
abnorm 
function application cases pattern matching labels statresult coproduct type 
important note statement hangs terminates abruptly composition space describe constructs detail 
mention 
need execute expression side ect 
done function de ned 
om statresult def om cases 
hang 
hang norm 
norm ns abnorm 
abnorm excp es es ex ex om 
notation ns describes eld selection associated labeled product ns om res 
line expression abnormality exception transformed statement abnormality 
java 


om statresult def om cases 
hang 
hang norm 

ns 
ns abnorm 
abnorm excp es es ex ex om bool om statresult 
formalisation java return statement argument return om statresult def om abnorm statement produces abnormal return state 
return abnormality undone appropriate catch return functions 
translation java programs function catch return wrapped method body returns void 
method body executed 
may result abnormal state return 
case function turns state back normal 
leaves unchanged 
catch return 
om statresult om def om cases 
hang 
hang norm 
norm abnorm 
cases excp 
abnorm excp 
norm break 
abnorm break cont 
abnorm cont formalisation creating catching break continue abnormalities works similarly function catch break catch continue 
semantics method speci cations start de ne labeled product types incorporating appropriately typed predicates various termination modes statements expressions 
type def diverges om boolean requires om boolean statement om statresult ensures om boolean signals om reftype boolean return om boolean break om lift string boolean continue om lift string boolean type def diverges om boolean requires om boolean expression om ensures om boolean signals om reftype boolean notice type entries precisely statement java terminate abruptly reasons expression 
associated predicates give obvious meaning 
sb 
sbs boolean def om sbs requires 
cases sbs statement 
hang 
sbs diverges 
norm 
sbs ensures 
abnorm 
cases excp 
sbs signals 
es 
ex 
sbs return 
break 
sbs break 
bs 
blab cont 
sbs continue 
cs 
eb 
ebs boolean def om ebs requires 
cases ebs expression 
hang 
ebs diverges 
norm 
ebs ensures 
ns 
res abnorm 
ebs signals 
es 
ex sbs ebs 
notice diverges predicate evaluated pre state case statement expression hangs case simply post state 
predicates evaluated post state 
loop compiler translates jml method speci cations elements depending method produces result 
additional entries occur jml speci cations ones lled default values 
may lled values proofs typically catching abnormalities see subsection 
example consider jml method speci cation behavior diverges requires modifiable mod ensures signals void 
class invariant speci cation gets translated loop compiler om sb 
diverges requires om 

statement ensures om 


mod signals om reftype 
instanceof 


mod return om false break om lift string false continue om lift string false variable logical variable records pre state 
needed normal exceptional postconditions may involve operator requiring evaluation pre state 
term mod appropriate translation modi able clause expressing elds mentioned modi able clause translating normal behavior diverges signals elds set constant predicate false similarly exceptional behavior diverges ensures elds false 
rules proving method speci cations section discusses representative selection inference rules verifying jml method speci cations 
rules bureaucratic syntax driven 
goal oriented view read side 
diverges usually diverges clause jml constant true false 
rules example composition rule require constant 
enforced rule expense duplication number proof obligations see 
illustrate soundness rule 
assume assumptions line hold 
order prove distinguish main cases arbitrary state om satisfying 

hangs 
de nition sb prove 

leads false second assumption 
convenient weaken precondition om 

mod obtain symmetric correctness formula 
sb 
diverges om true requires om 

statement ensures signals return break continue sb 
diverges om false requires om 

statement ensures signals return break continue sb 
diverges requires statement ensures signals return break continue fig 

rule force diverges predicates constant 
terminates normally 
normal postcondition follows cases 

assumptions 

terminates abruptly 
similarly gets appropriate postcondition assumptions 
soundness rules similarly easy 
soundness rules proved pvs 
composition rule composition rule 
possible step piece code handling single statements time introducing appropriate intermediate conditions 
special case rule useful practice intermediate condition form om 

precondition goal addition precondition holds rst statement return recall section return statement immediately terminates abruptly creating return abnormality 
associated rule skip rule see 
sb 
diverges om requires statement ensures signals return break continue sb 
diverges om requires statement ensures signals return break continue sb 
diverges om requires statement ensures signals return break continue fig 

composition rule catching returns recall loop compiler wraps catch return function translated method body order turn possible return abnormalities normal termination 
associated rule puts normal postcondition goal return position 
notice rule entry jml speci cations return get non default value proofs 
reason including additional entries de nition type section 
java conditional statements 
describe relevant rule see 
deals possible side ect result condition intermediate predicate qc 
nal rule consider java fsg statement 
involves condition statement iterated condition false form abrupt termination arises 
especially break continue statement possibly label may statement jump loop jump cycle 
refer detailed description om 

sb 
diverges requires statement return ensures signals return break continue sb 
diverges requires statement ensures signals return break continue sb 
diverges requires statement catch return 
ensures signals return break continue fig 

rules return catch return statements eb 
diverges om requires expression ensures qc signals sb 
diverges om requires om qc 

true statement ensures signals return break continue sb 
diverges om requires om qc 

false statement ensures signals return break continue sb 
diverges om requires statement 


ensures signals return break continue fig 

rule formalisation statement restrict relevant rule see 
eb 
diverges om requires om invariant 
variant 
expression ensures om bool qc 
variant 

signals sb 
diverges om requires om qc 
variant 
statement catch continue 
ensures om invariant 
variant 
signals return break continue sb 
diverges om requires invariant statement 

ensures signals return break continue fig 

rule total reasoning parameter lift string goal statement 

lab label lab immediately statement java bot 
statement continue continue lab executed loop body resulting continue abnormality caught wrapper catch continue 
cycle start normally 
loop tool puts catch break function statement order catch breaks statement variant function om founded order required decrease normally executed cycle notice auxiliary predicate qc values pass ect condition statement case condition evaluates true 
way variant decrease execution condition statement ect catch break catch continue functions incorporated rule adapting break continue predicates assumptions complicates rule 
note requiring existence variant restricts rule terminating loops 
total rule really sense divergence clause constantly false 
example veri cation pvs rules previous section plus rules formulated pvs proven correct 
possible rules prove java methods meet jml speci cations pvs 
translations speci cations boolean expressions form sb 
diverges 
eb 
diverges 
involving suitable labeled tuples 
tuples big proofs explicit labels keep reasonably manageable 
proof rules allow rewrite labeled tuples adapted tuples structure java code body method correctness proved 
rewriting continued statement expression labeled tuple suciently simple proceed proof purely semantical level rule return subsection 
way example jml speci cation pattern search proved java implementation 
involves return statements inside loop leading abrupt termination break loop clear pattern absent 
presents non trivial veri cation challenge return statements non trivial variant involved see 
proof essential rule ifthen times composition times structure java code 
example veri ed special hoare logic separate triples di erent termination modes java 
re enable comparison 
comparison slightly tricky proof re done proof rules jml variant invariant known 
time spent formulating required correctness property pvs done conveniently jml 
account new rules give considerable speed proof 
veri cation longer matter days matter hours 
main reason correctness formulas new logic jml combine termination modes single formula requires rule language construct fewer assumptions 
jml method speci cation transformed correctness formulas associated logic 
formulas extend standard hoare triples combining possible termination modes java naturally coalgebraic representation statements expressions 
correctness formulas capture essential ingredients axiomatic semantics java 
combination underlying low level memory semantics java rules jml provide ecient powerful exible setting tool assisted veri cation java programs jml annotations 
due joachim van den berg marieke huisman discussing various aspects rules jml 

javacard api 
java sun com products javacard 

america 
designing object oriented language behavioural subtyping 
de bakker de roever rozenberg editors foundations object oriented languages number lect 
notes comp 
sci pages 
springer berlin 

apt 
years hoare logic survey part acm trans 
progr 
lang 
systems 

van den berg huisman jacobs poll 
type theoretic memory model veri cation sequential java programs 
bert choppy mosses editors trends algebraic development techniques number lect 
notes comp 
sci pages 
springer berlin 

van den berg jacobs 
loop compiler java jml 
techn 
rep csi comput 
sci 
inst univ nijmegen 
appear tacas 


run time assertion checker java jml 
techn 
rep dep 
comp 
science iowa state univ 
www cs iastate edu leavens jml html 

de boer 
wp calculus oo 
thomas editor foundations software science computation structures number lect 
notes comp 
sci pages 
springer berlin 

huisman 
reasoning java programs higher order logic pvs isabelle 
phd thesis univ nijmegen 

huisman jacobs 
inheritance higher order logic modeling reasoning 
harrison editors theorem proving higher order logics number lect 
notes comp 
sci pages 
springer berlin 

huisman jacobs 
java program veri cation hoare logic abrupt termination 
maibaum editor fundamental approaches software engineering number lect 
notes comp 
sci pages 
springer berlin 

huisman jacobs van den berg 
case study class library veri cation java vector class 
techn 
rep csi comput 
sci 
inst univ nijmegen 
appear software tools technology transfer 

jacobs 
formalisation java exception mechanism 
techn 
rep csi comput 
sci 
inst univ nijmegen 
appear esop 

jacobs van den berg huisman van 
reasoning classes java preliminary report 
object oriented programming systems languages applications oopsla pages 
acm press 

leavens baker ruby 
jml notation detailed design 
kilov rumpe editors behavioral speci cations business systems pages 
kluwer 

leavens baker ruby 
preliminary design jml behavioral interface speci cation language java 
techn 
rep dep 
comp 
sci iowa state univ 
www cs iastate edu leavens jml html 

leino 
reliable modular programs 
phd thesis california inst 
techn 

leino saxe stata 
checking java programs guarded commands 
jacobs leavens uller poetzsch ter editors formal techniques java programs 
proceedings ecoop workshop 
techn 
rep hagen 
technical note compaq systems research center palo alto 

meyer 
object oriented software construction 
prentice hall nd rev edition 

von oheimb 
axiomatic semantics java ight isabelle hol 
technical report cse oregon graduate inst 
tphols supplemental proceedings 

owre rajan rushby shankar srivas 
pvs combining speci cation proof checking model checking 
alur henzinger editors computer aided veri cation number lect 
notes comp 
sci pages 
springer berlin 

paulson 
isabelle generic theorem prover 
number lect 
notes comp 
sci 
springer berlin 

poetzsch ter uller 
programming logic sequential java 
swierstra editor programming languages systems number lect 
notes comp 
sci pages 
springer berlin 

poll 
coalgebraic semantics subtyping 
reichel editor coalgebraic methods computer science number elect 
notes theor 
comp 
sci 
elsevier amsterdam 

poll van den berg jacobs 
speci cation javacard api jml 
ferrer chan watson editors smart card research advanced application pages 
kluwer acad 
publ 

poll van den berg jacobs 
formal speci cation javacard api jml class 
comp 
networks mag 
appear 

loop project 
www cs kun nl bart loop 

extended static checker esc java 
compaq system research center 
www research digital com src esc esc html 

