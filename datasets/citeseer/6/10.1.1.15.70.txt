software practice experience vol 
july antlr predicated ll parser generator parr university minnesota washington ave ste minneapolis mn 
email acm org quong school electrical engineering purdue university lafayette 
email quong ecn purdue edu summary despite parsing power lr lalr algorithms yacc programmers choose write recursive descent parsers hand obtain increased flexibility better error handling ease debugging 
introduce antlr public domain parser generator combines flexibility hand coded parsing convenience parser generator component pccts 
antlr features easier language tools 
important antlr provides predicates programmer systematically direct parse arbitrary expressions semantic syntactic context practice predicates eliminates need hand tweak antlr output difficult parsing problems 
antlr integrates description lexical syntactic analysis accepts ll grammars extended bnf notation automatically generate syntax trees 
antlr widely registered industrial academic users countries 
ported popular systems pc macintosh variety unix platforms commercial front developed result industrial collaborations 
key words parsing compiler parser generator predicates ll parser programmers want tools employ mechanisms understand sufficiently powerful solve problem flexible automate tedious tasks generate output easily folded application 
consider parser generators 
existing parser generators fail criteria 
consequently parsers written hand especially languages context sensitive require large amounts lookahead 
compared hand built recursive descent parser table driven lr ll parsers parsing strength difficult understand debug 
parser just recognize languages 
particular parsers interact lexical analyzer scanner report parsing errors construct syntax trees call user actions 
existing parsing tools focused mainly language recognition strategy ignoring aforementioned tasks 
ccc received june john wiley sons revised november parr quong introduce antlr tool language recognition parser generator addresses issues 
antlr component purdue compiler construction tool set pccts 
constructs human readable recursive descent parsers pred ll grammars ll grammars support predicates 
predicates allow arbitrary semantic syntactic context direct parse systematic way 
result antlr generate parsers context sensitive languages non ll lr context free languages 
semantic predicates indicate semantic validity applying production syntactic predicates grammar fragments describe syntactic context satisfied recognizing associated production 
practice antlr users report developing pred ll grammar easier developing corresponding lr grammar :10.1.1.111.230
addition strong parsing strategy antlr features programmer friendly majority lr lalr ll parser generators 

antlr integrates specification lexical syntactic analysis 
separate lexical specification unnecessary lexical regular expressions token descriptions placed double quotes normal token antlr grammar 

antlr accepts grammar constructs extended backus naur form ebnf notation 

antlr provides facilities automatic syntax tree construction 

antlr generates recursive descent parsers clear correspondence grammar specification antlr output 
consequently relatively easy non parsing experts design debug antlr grammar 

antlr automatic manual facilities error recovery reporting 
automatic mechanism simple effective parsing situations manual mechanism called parser exception handling simplifies development high quality error handling 

antlr allows grammar rule parameters return values facilitating attribute passing parse 
antlr converts rule function recursive descent parser rule parameter simply function parameter 
additionally antlr rules multiple return values 

antlr numerous features product research project 
antlr written highly portable output debugged existing source level debuggers easily integrated programmers applications 
ultimately true test language tool usefulness lies vast industrial programmer community 
antlr widely commercial academic communities 
registered users countries acquired software original release 
universities currently teach courses antlr 
commercial programmers antlr list examples appendix 
example major nearly completed currently testing unified objective compiler antlr grammar derived directly june ansi grammar 
preliminary measurements show antlr parser cent slower terms pure parsing speed recursive descent parser parses objective 
traditionally difficult ll tools lr tools yacc :10.1.1.111.230
yacc grammars extremely fragile regards action placement insertion antlr predicated ll parser generator table antlr description elements item description example token begins uppercase letter id set tokens token class operators complement set keyword wild card token class match id id rule name begins lowercase letter expr label item label token rule id user defined semantic action printf name 
subrule int id storage class closure id id positive closure slist stat semicolon 
optional stat 
semantic predicate type type str 
id 
syntactic predicate list eq 
list eq list list action introduce conflicts grammar 
contrast antlr grammars insensitive action placement due ll nature 
sections illustrate antlr specification language features distinguish parser generators 
overview omitted details 
refer current pccts antlr release notes complete usage details 
description language antlr description specification collection rules actions preceded header user defines required data types type attribute 
originally borrowed notation yacc reduce learning curve added numerous extensions new antlr features predicates specification lexical analysis error reporting ebnf grouping 
table summarizes elements antlr description 
antlr rule list productions alternatives separated rule alternative alternative alternative production composed list elements element item table table grouping constructs lists alternatives items 
rules may define arguments return values 
line arguments return values 
rule arg argn retval 
syntax rule mirrors definition parr quong rule arg argn vm 
various vi receive return values rule rule vi value 
illustrate major features antlr description language small example 
consider parsing simple assembly language 
segment data ds ds segment code load load add print contains complete antlr specification problem 
header include main antlr prog stdin opcode add store load call ret print register token token prog segment data data segment code stat stat opcode operands operands id register register num register register register data id ds num token num token id za 
antlr recognizer simple assembly language antlr predicated ll parser generator description antlr differs parser generators regular expressions specifying tokens specified token id directly referenced segment grammar 
grammatical lexical specification contained single file eliminating need maintain specifications 
antlr automatically assigns token types generates scanner description dlg lexical analyzer generator pccts 
regular expression ambiguities keyword code token id input code token type resolved matching token specification mentioned antlr grammar 
antlr accepts input ebnf shown table simplifies grammar development grammar readability 
strict bnf accepts closures optional items grammar specification 
notational shorthand antlr accepts arbitrary sets tokens called token classes 
user specifies token class set tokens token classes 
token class functionally equivalent subrule alternatives member tokens referencing token class register referencing token class efficient subrule referencing token class simple set membership test 
contrast referencing equivalent subrule causes sequential search alternative items subrule items predicates rules 
code test set membership smaller series statements subrule 
note automaton parsers lr ll automatically perform type set membership specifically table lookup lack flexibility recursive descent parsers recursive descent parsers directly support stack local variables 
note grammar ll left factored :10.1.1.111.230
antlr generates ll recursive descent parsers antlr grammars require ll grammars :10.1.1.111.230
grammar ll symbols lookahead suffice differentiate alternatives operands left edge operands 
fact grammar contains decisions require lookahead symbol subrule data symbols rule prog 
antlr optimizes lookahead decisions little lookahead possible decision 
example rule operands requires lookahead symbols distinguish alternatives antlr generates decision uses lookahead symbol distinguish alternative 
programmer power lookahead worrying efficiency 
user defined actions inserted antlr production 
actions perform semantic tests generate intermediate representation directly generate translation 
action placed production rule subrule special actions init actions define local variables execute code executed production attempted 
init action applies productions rule 
local variables useful recursively invoked rules new copy variable available rule invocation contrast simulating local variables table driven parser requires software stack inconvenient tedious implement 
parr quong actions antlr grammar may access attributes labels attached token rule form label conventional integer symbols integer identifiers grammars readable actions sensitive positional changes rule elements 
parsing strength ll parsing antlr pred ll parsers compare favorably lr parsers :10.1.1.111.230
theory practice languages lr ll vice versa :10.1.1.111.230
significantly reduces need left factor rules 
cases antlr computes uses minimum lookahead necessary decision grammar speeding grammar analysis parsing speed reducing parser code size 
practice lookahead token suffices decisions antlr parsers nearly efficient ll recursive descent parsers :10.1.1.111.230
illustrate ll grammar simpler design ll grammar :10.1.1.111.230
consider distinguishing labels id assignment statements id parsing 
grammar fragment rule stat requires lookahead symbols easily expressed ll grammar 
common language feature hard express ll grammar id matched grammar locations making difficult left factor rules stat expr :10.1.1.111.230
stat id stat statement label expr assignment stat expr id expr int symbols lookahead useful language constructs ll finite typically constructs context sensitive require unbounded lookahead entire construct seen may uniquely identified 
outline predicate mechanism allows antlr handle nasty recognition problems section 
predicates antlr supports semantic syntactic predicates programmer indicate semantic syntactic validity applying production allowing antlr naturally handle difficult parsing situations 
predicates described fully 
simple examples demonstrating power 
example illustrates semantic predicates 
consider fortran array function calls syntactically identical semantically different 
depending type val expression array function call 
val antlr predicated ll parser generator common solution resolve syntactic ambiguity lexical analyzer examine symbol table return different lookahead token type input identifier val variable function 
grammar different token types say func var context free 
semantic predicates provide elegant general solution 
expression normally return different token types may alter normal ll parsing strategy annotating grammar expr isvar :10.1.1.111.230
id expr list array ref action :10.1.1.111.230
id expr list fn call action isvar user defined functions examine symbol table return true lookahead symbol variable function respectively :10.1.1.111.230
semantic predicate user defined action evaluates true success false failure broadly speaking indicates semantic validity continuing parse predicate 
semantic predicates specified predicate may interspersed grammar elements right hand side productions normal actions 
show syntactic predicates example 
occasionally programmer face language construct parsed lr ll parser help semantic predicates 
constructs simply require unbounded lookahead finite lookahead buffer parser unable determine set alternative productions predict 
turn parsing nasty example 
quoting ellis stroustrup ambiguity grammar involving expression statements declarations 
general cases resolved backtracking 
particular lookahead needed disambiguate case limited authors examples point represents type expression statement type cast int pointer function declaration clearly types statements distinguishable left arbitrary number symbols may seen decision symbol indication example statement 
quoting ellis stroustrup parser backtracking disambiguating rule stated simply 
looks declaration 
looks expression 
syntax error solution antlr syntactic predicate simply exactly ellis stroustrup indicate parr quong stat declaration 
declaration expression production rule stat syntactic predicate declaration 
indicates declaration syntactic context rest production succeed 
interpret declaration am sure declaration match try match shall try alternative encountering valid declaration rule declaration recognized twice syntactic predicate actual parse execute semantic actions 
expression declaration rule attempted declaration attempted obvious expressions 
syntactic predicates form may appear left edge production rule subrule 
required syntactic condition may valid context free grammar fragment 
syntactic predicates introduced antlr version represent form selective backtracking significantly enhances recognition strength normal ll parsing significantly increasing parse time 
example parse local variable declarations twice declarations typically comprised symbols int furthermore declaration attempted obvious statements statements normal finite lookahead prediction 
attribute parsing top parser pass information rules attribute inheritance rules perform attributed translations antlr exception 
illustrate attribute passing facilities antlr simple example 
consider rule recognizes declarations variable function parameters 
distinguish variables parameters pass current scope context rule 
enum global parameter globals declaration global func type id declaration parameter declaration context type id define variable context adapted attribute access notation context represents value attribute passed declaration yacc 
attribute valid type 
high level programmer support antlr contains number features significantly increase usability 
section describe antlr integrated lexical syntactic descriptions error reporting facility automatic tree construction mechanism 
antlr predicated ll parser generator integration lexical syntactic analysis antlr description contains lexical analyzer specification tokens parser specification grammar eliminates need separate files 
antlr automatically extracts lexical analyzer description integrated antlr description passes dlg lexical analyzer generator pccts token int stat expr stat return expr expr int int match separated integers tokens declared token declaration direct grammar method especially convenient keywords 
tokens specified regular expressions enclosed double quotes 
example preceding grammar declares token int token directly refers keyword token 
labeled specification int clarity 
consequently dlg receive token specifications double quoted regular expression 
lexer generators actions attached token specifications 
action executed corresponding token recognized input stream 
example token specification interface token indicates encounter newline character increment predefined line number variable call lexical analyzer find token parser need see newlines 
antlr allows multiple lexical analyzers antlr description ability simplify parsing languages wildly varying input formats 
tools lex allow multiple lexer automata description programmer required switch automata lexical actions 
process difficult knowing grammatical context easier parser action 
versions antlr anticipate allowing pred ll constructs describe input tokens 
idea yacc provide consistent powerful description language 
error handling antlr mechanisms error reporting recovery 
mechanism antlr automatically generates error messages simple effective heuristic sufficient applications 
sophisticated error handling required say commercial quality software antlr provides second mechanism called yacc registered trademark compiler resources parr quong parser exception handling provides flexibility hand built reporting recovery convenient framework 
describing antlr automatic mechanism 
automatic error handler reports error detected expected recovery discussed 
example consider matching rule stat grammar fragment stat expr stat stat expr stat var expr stat expr atom atom atom int float int float var defined integer float identifier tokens respectively 
input antlr automatically generates error message line syntax error missing var indicates token syntax error set tokens permissible 
reading input error message line syntax error missing int float 
correct messages clearer 
consequently user specify error classes named sets tokens antlr report meaningful string default error messages 
example adding statement var grammar input result error message line syntax error missing statement 
description error class ec consists tokens error classes rules 
ec contains rule add ec 
feature convenient example specify error class statement statement stat 
token rule start antlr predicated ll parser generator recover parsing error rule antlr consumes tokens token set 
simple recovery heuristic works cases 
example reporting error message due incomplete expr input parser look token follow expr 
follow expr need consume tokens 
error message parser returns expr gone continues parsing part statement 
default error mechanism insufficient programmers sophisticated error mechanism called parser exception handling common exception handling exceptions implementation parser exception handling antlr interface 
parser exception handling provides unified framework reporting recovering semantic syntactic errors note automatic mechanisms typically consider semantic errors 
parser exception handling provides nearly flexibility hand built parser 
illustrate parser exception handlers demonstrating generate better error message line syntax error missing int float 
input know context expr production attempted improved error message indicate expression statement conditional opposed right hand side assignment statement example 
better message line statement malformed conditional way achieve error message modify original stat grammar follows stat expr stat stat exception catch catch fprintf stderr line statement malformed conditional expr stat token rule rule followed immediately parr quong return :10.1.1.111.230
syntax tree resulting return 
left child sibling links current line number text token lookahead interface token type associated :10.1.1.111.230
notation expr attaches label expr rule 
labels allows exception handler catch errors encountered specifically 
error handling requires programmer intervention 
automatic mechanisms typically perform easily analyze state parser symbol stack table driven parser program counter recursive descent parser 
knowing report errors recover done programmer experience 
programming effort required automatic mechanisms antlr parser exception handling provides convenient sophisticated mechanism rivals flexibility hand coded schemes 
tree construction parser constructs intermediate form manipulated phases translation compilation process 
simple grammar annotations antlr parsers automatically construct syntax trees ast saving user having explicitly call tree constructor routines 
nodes ast linked left child sibling pointers 
create ast user annotates grammar indicate root node leaf node excluded ast 
tokens grammar immediately followed considered subtree root nodes 
tokens excluded tree 
tokens considered leaf nodes 
example antlr specification input return get tree 
root tree returned root main 
generated parsers antlr generates code recursive descent parser grammar rule realized function 
illustrate structure functions example 
information output programmer interface refer pccts release notes 
antlr predicated ll parser generator header include define ast fields int token required function convert attribute ast node void ast ast node attrib cur int token char text node token token node atoi text main ast root null antlr root stdin stat 
stat 
return 
antlr grammar showing ast construction directives interface antlr generated function sequence clauses plus error clause 
clause matches alternative corresponding rule condition prediction expression determining validity alternative 
example rule stat grammar stat id colon stat statement label expr semicolon assignment stat return expr expr id assign expr int result slightly sanitized code void stat void la id la colon parr quong id colon stat la id la int la semicolon la assign expr semicolon la return return expr error clause return fail standard error case code la token type ith symbol lookahead terms bookkeeping macros attribute manipulation :10.1.1.111.230
note refrained specifying lexical regular expressions token type labels symbols appear output integer token types 
note antlr adjusts amount lookahead tested parsing decision effort reduce grammar analysis time size resulting parser 
prediction expressions examine lookahead symbols possible 
example lookahead symbols examined distinguish alternatives id colon stat expr semicolon start id lookahead symbol return tested third alternative return token distinguishes productions 
efficiency considered switch statements sequence switches turned restrictive 
example switches predicates needed prediction expression 
parsing speed problem antlr generated parsers 
semantic predicates needed disambiguate alternative productions add predicate prediction expression lookahead membership expression 
example grammar fragment expr isvar :10.1.1.111.230
id expr list array ref action :10.1.1.111.230
id expr list fn call action result code lightly sanitized code clarity void expr void antlr predicated ll parser generator la id isvar id expr list token type refers array ref action token type refers la id id expr list token type refers fn call action error clause token type refers return fail standard error case code implementing syntactic predicates simple implementing semantic predicates backtracking involved :10.1.1.111.230
example rule stat declaration 
declaration expression result code void stat void block la declaration declaration syntactic predicate parr quong done declaration done la expression expression error clause return fail standard error case code done bookkeeping macros handle backtracking :10.1.1.111.230
evaluating syntactic predicate state runtime stack saved predicate fails longjmp restore parser prior state attempted predicate 
actions executed evaluation syntactic predicate avoid side effects 
predicate succeeds parsing continues production predicated syntactic predicate executing longjmp 
particular example syntactic predicate declaration verifies input match declaration 
declaration predict 
declaration matched twice syntactic predicate actual parse perform actions specified declaration 
parsers generating recursive descent parsers antlr uses flexibility classes ways create modular reusable code 
antlr generate parser classes class member functions global functions contain code recognize rules ii perform semantic actions 
second antlr uses classes input lexer token buffer 
antlr parser consists classes called parser classes 
parser class recognizes translates part language 
recursive descent recognition routines semantic actions member functions class 
parser object instantiation variable parser class 
specify name parser class antlr grammar description enclose appropriate rules actions class definition follows 
class expr int public void print int int grammar rules antlr predicated ll parser generator antlr generate parser class expr looks follows 
types discussed 
class expr public public expr input expr input eof void int void print private internal expr specific data natural separate parser objects 
example parsing ansi code parser classes expressions declarations statements 
parsing multiple languages parts languages simply involves switching parsers objects 
example working language front compiler evaluate expressions debugger just parser object expressions modify semantic actions virtual functions described 
parser classes standard advantages classes involving namespaces encapsulation state 
routines class member functions belong class namespace clutter global namespace reducing greatly simplifying problem name clashes 
programmer specify rules public start rule rest rules private clearly indicating rules general 
lastly parser object encapsulates various state needed parse translation 
ability cleanly instantiate invoke multiple parsers useful main advantage parser classes extended object oriented fashion 
inheritance virtual functions mechanisms parser class base class superclass variety similar non identical uses 
derived parser classes specialized different activities cases derived classes need redefine translation actions inherit grammar rules recursive descent routines member functions base class 
example assume constructed antlr specification frontend unified ansi compiler parser class handle structs classes 
semantic actions add entries symbol table defined virtual member functions 
class public virtual void char struct classname sym tab insert struct classname parr quong virtual void char sym tab struct class name id name mem decl mem decl 
create unified browser specify second class derived simply redefines semantic actions browser actions 
sample code routine display represents action show string browser 
recursive descent recognition routines member functions base class inherited browser class need grammar 
actions virtual browser semantic actions called automatically browser object 
class public public void char cl display struct cl void char display member second way antlr uses classes separate classes input stream lexical analyzer scanner token buffer parser 
conceptually classes fit shown fact antlr generated classes snap identical fashion 
initialize parser programmer simply 
attaches input stream object dlg scanner 
attaches scanner token buffer object 
attaches token buffer parser object generated antlr 
output 
overview classes antlr code illustrates parser object expr classes fit 
user constructed scanner attach 
antlr predicated ll parser generator main stdin get input stream dlg scan connect scanner input stream pipe scan connect scanner parser pipe scan dlg needs vtbl access virtual fn expr parser pipe parser connected pipe parser init initialize parser parser parsing start symbol defined programmer subclass 
start parsing sufficient call expr member function associated grammar rule start symbol 
ensure compatibility different input streams lexers token buffers parsers objects derived common bases classes 
particular parsers derived common base class 
antlr continues heavily influenced feedback industrial user community 
currently developing prototype graphical user interface displays grammars set syntax diagrams 
interface highlight conflicting syntax diagram paths invalid grammar construct simplifying debugging grammar 
currently ambiguities reported single line text somewhat cryptic 
addition plan add single step facility antlr generated parsers dynamically display portions syntax diagram parse parse tree built far 
introduce antlr parser generator pccts 
foremost antlr practical programmer friendly tool convenient features 
antlr integrates specification lexical syntactic analysis supports extended bnf notation automatically construct syntax trees reports recovers syntax errors automatically provides significant semantic flexibility 
antlr generates fast compact readable recursive descent parsers easy integrate applications 
antlr uses new parsing strategy possible develop natural easy read grammars difficult languages 
antlr uses pred ll grammars ll grammars augmented predicates 
predicates allow arbitrary semantic syntactic information direct parse 
due power convenience antlr known users countries second popular parser generator commercially yacc bison leader 
antlr free public domain software 
antlr rest pccts available anonymous ftp everest ee umn edu directory pub pccts parr quong sending email pccts ecn purdue edu 
pccts papers directory file predicates ps compressed postscript 
newsgroup antlr pccts comp compilers tools pccts 
describes antlr version 
cohen hank dietz authors original pccts 
gary technology extensive testing antlr provided constant stream excellent suggestions 
tom written remarkable set notes introductory notes 
ariel spent week christmas vacation minnesota helping output 
thom wood randy influenced output 
anthony green visible decisions john hall worcester polytechnic institute hooker systems kenneth information handling services steve roy florida atlantic university faithful beta testers pccts 
scott lawrence livermore labs developed macintosh mpw port 
srinivasan mike steve provided extensive help definition antlr output developed grammar provided pccts 
cathy tanner drafts 
multitude pccts users helped refine antlr suggestions 
partial support come army research office contract number daal army high performance computing research center university minnesota 

johnson yacc compiler compiler bell laboratories murray hill nj 

parr dietz cohen pccts purdue compiler construction tool set sigplan notices 

terence parr russell quong hank dietz predicates ll lr parser generators technical report tree purdue university school electrical engineering july 

terence parr russell quong adding semantic syntactic predicates ll pred ll proceedings international conference compiler construction edinburgh scotland april 

srinivasan steve mike private communications computer incorporated october 

donald knuth translation languages left right information control 

margaret ellis bjarne stroustrup annotated manual addison wesley publishing reading ma 

terence parr cohen hank dietz purdue compiler construction tool set version release notes technical report preprint army high performance computing research center august 

lewis rosenkrantz stearns attributed translations journal computer system sciences 

charles fischer richard leblanc crafting compiler benjamin cummings publishing redwood city ca 
antlr predicated ll parser generator appendix grammatical structure rules grammar antlr description antlr rule meta language 
complete antlr grammar including lexical rules semantic actions removed clarity full source available ftp site mentioned 
rule nonterminal string block action exception group block alt exception group alt exception group alt element element label id element element label terminal 
terminal nonterminal action semantic predicate block block exception group exception label id exception handler default action exception handler catch id action parr quong appendix ii 
sample projects substantiate claims broad usage asked users pccts mailing list provide synopses projects 
edited versions replies order arrived 
gary technology gary com ken information handling services com jim federated software group david seidel innovative data concepts incorporated com kerr national institute medical research mrc ac uk tom mechanical engineering toronto utoronto ca sys com peter dahl university minnesota dahl ee umn edu sriram sankar sun microsystems labs sriram sankar sun com ivan cadence design systems ivan cadence com philip university cincinnati phil uc edu ross bell northern research ross uk steve engineering orange net steve rockwell international steve rockwell com vladimir aachen univ tech germany vladimir informatik rwth aachen de james cox uk dana interactive natural language mathematics mdbs com glen gordon anderson school mgmt 
ucla edu pascal ada translator 
sgml translation vendor data format user language specifying data translation form 
compiler forms interface management system proposed iso ansi standard target ncsc mandatory access controlled systems 
antlr dlg create parser engine written symantec inclusion major release compiler system 
production protein parser analyze categorize protein secondary structure protein family grammar 
am currently pccts command language interpreter user interface inhouse developed phd numerical analysis package nonlinear finite element analysis 
extension language linked products cae applications extending functionality ui 
antlr grammar parse dlx assembly code scheduler alpha code converter dlx compiled instruction level simulator 
antlr front compiler 
application software testing environment formal specifications 
antlr generate independent parsers wide character mode 

parser analog hardware description language commercially released 

translator analog behavioral modeling language profile analog hardware description language released 
vhdl parser code code generation 
rewriting backend code generation semantic modeling project supported arpa air force 
ll grammar 
application parses sdl system description language specification design language telecoms output sdt tool rewrites language ses workbench performance modeling tool allowing models designed sdt automatically input ses workbench performance analysis 
oberon compiler os powerpc architectures :10.1.1.111.230
fortran translator preprocessor antlr dlg plotting program command interpreter antlr dlg graphics database translator antlr dlg language layer introducing explicit definition events rules development multiparadigm systems fully integrable forward chaining expert system data model 
describing interest rate derivative deals implementing command line parsers query manipulation languages dealing support software 
tell computer want calculate tells answer 
keyboard 
screen 
done voice recognition speech synthesis 
investigating verbal programming techniques radically different visual programming languages today 
translate specially formatted text files lotus spreadsheets formulas 
