building data structures untrusted peer peer storage participant logs chen gil muthitacharoen robert morris mit laboratory computer science technology square cambridge ma rtm lcs mit edu technique building multi user distributed data structures untrusted peer peer distributed hash tables dhts 
uses multiple logs log participant store changes data structure 
participant finds data consulting logs performs modifications appending log 
decentralized structure allows maintain meta data consistency locking isolate users changes appropriate arrangement unreliable users 
applications maintain consistent data structures 
interleaves multiple logs deterministically decentralized clients agree order completed operations operations issued concurrently 
data structure quiescent guarantees clients agree state data structure 
optionally provides mutual exclusion applications need ensure atomicity multistep operations 
ivy file system built top demonstrates consistency guarantees useful implemented efficiently 
peer peer distributed hash tables dhts promise support new approach certain kinds network storage applications :10.1.1.110.5867:10.1.1.159.9358:10.1.1.111.1818:10.1.1.16.4785
dhts provide simple api allowing read write key value pairs called blocks 
dht typically takes care finding network host store key value pair replicating data availability checking retrieved blocks tampered 
dht interface fairly low level sector read write interface disk drive 
applications build complex data structures top dhts blocks containing pointers keys blocks 
example cfs builds file system top dht storing file directory separate block directory contains list dht keys referring files directory :10.1.1.159.9358
dhts defend availability integrity individual blocks unreliable malicious dht nodes clients application uses dht typically additional consistency invariants maintain data structure stores dht 
example client crash file rename dht file system leave file system incorrect state 
clients dht application typically manipulate shared data structure independently sending operations single server server cluster application concurrent clients faces challenge providing consistency direct serialization 
additionally peerto peer systems situations clients fully trust problem defend clients maliciously damage shared data structure 
dhts typically replicate data way multiple partitions may complete copy data structure network outage occurs applications dhts may experience conflicting updates different partitions 
presents set techniques maintaining consistent data structures dhts 
represents data structure log operations dht separate log client 
application directly store data structure dht data structure implied history operations logs stores log records dht 
clients communicate dht directly talk single server 
client updates data structure appending records log client reads current state data structure scanning clients logs 
logging allows clients perform complex operations atomically respect client failure 
logging operations log client deterministic log ordering mean concurrent updates data produce acceptable outcome reflecting operations corrupted data structure 
heart algorithm resolving order log records different clients logs 
algorithm deterministically produces single ordering log records 
chooses order log records clients 
property means clients agree order completed updates updates issued concurrently 
higher level applications api implement consistent data structures 
data structure quiescent guarantees clients agree state data structure 
optionally provides mutual exclusion applications need ensure atomicity multi step operations 
applications benefit able choose consistency model strong consistency incurs higher cost typically necessary 
built multi user peer peer read write file system ivy uses store file system data meta data :10.1.1.119.567
participant logs allows ivy support concurrent updates file system locks maintain meta data consistency 
ivy implements file system operations mutual exclusion exceptions file directory creation 
file directory creation require mutual exclusion avoid duplicate files directories 
despite logs easy build applications performance ivy caches aggressively checks validity cache just checking logs changed 
section describes dhash dht layered 
section describes structure logs api 
section describes maintains consistent data structures 
section describes deals stale data attacks malicious dhash servers network partition 
section presents example construct serverless multi user read write file system 
section discusses related section concludes 
dhash stores logs dhash :10.1.1.159.9358
dhash distributed peer peer hash table mapping keys arbitrary values 
dhash stores key value pair set internet hosts determined hashing key 
refers dhash key value pair dhash block 
dhash replicates blocks avoid losing nodes crash 
dhash ensures integrity block methods 
content hash block requires block key sha cryptographic hash block value allows fetching block verify value ensuring sha hash matches key 
public key block requires block key public key value signed corresponding private key 
dhash refuses store value hash signature match key 
checks authenticity data retrieves dhash 
checks prevent malicious buggy dhash node forging data limiting denying existence block producing stale copy public key block 
dhash offers simple interface put key value get key 
assumes network partition dhash provides write read consistency put completes subsequent get yield current dhash implementation provides write read consistency partitions healing potential solutions problem exist 
dhash assumes writer public key block active time 
public key block includes sequence number dhash uses prevent overwriting newer data stale data 
furthermore concurrent put get get returns value put 
designed untrusted network storage technologies similar properties past tapestry kademlia 
participant logs represents data structure set logs log participant 
log describes participant changes data structure 
participant appends log reads logs 
uses dhash content hash blocks store log records 
log record contains dhash key previous log record participant log 
log record immutable log record changed dhash key change 
stores dhash key participant log record mutable dhash public key block called log head 
participant log obtained key store participant log head 
user data structure may multiple key pairs log head blocks host user uses 
formally define participant follows 
definition 
participant entity key pair log head block 
instance participant active time 
field prev dhash key oldest log record seq log sequence number version version vector head dhash key log head table fields log head objects log records 
view block log head log head log records example view logs 
white boxes dhash content hash blocks gray boxes publickey blocks 
table describes fields appear log heads log records 
prev field contains previous record dhash key 
seq field incrementing sequence number 
version field version vector uses decide interleave multiple logs 
head field contains dhash key 
participants share data structure agree view set logs comprise data structure maintained application 
view stored view block dhash content hash block containing pointers log heads view 
view block key immutable data structure participants decide accept new participant conscious decision trust new participant adopt new view block new key includes new participant log 
lack support automatically adding new participant view intentional 
uses view block key verify view block contents 
contents public keys name verify participants log heads 
log head contains content hash key names verifies log record 
reasoning allows verify retrieved correct log records untrusted dhash storage system 
summarizes structure participant logs view block 
provides api applications access logs 
participant modifies data structure appending new log records log changing log head point newest log record 
multiple participants modify data structure concurrently acquiring locks participant modifies log head 
participant constructs response query data structure reading logs 
avoid expense repeatedly reading log participants create snapshots summarizing data structure 
needs impose order log records different logs 
order obey causality update completes update ordered earlier participants concurrently created log records 
creates order version vector log record 
combining logs log record includes pieces information order record 
seq field contains numerically increasing sequence number log separately numbers records zero 
version field version vector 
log record version vector records pointers record log time created 
vector contains tuple log view including participant log 
dhash key log head log described dhash key log record time version vector created 
saves dhash keys just sequence numbers recover corrupted logs malicious participant retroactively changing log pointing log head newly constructed log 
simplicity rest replaces name participant numeric value refers sequence number contained record pointed tuple 
definition 
version vector participant sequence number recorded participant log appear definition 
version vector comparison version vectors iff participant exists participant 
concurrent iff simplicity log records uses expression relationship version vectors 
example short version version 
order list log heads callback cb list log records sort decreasing order dhash key size dhash get prev int latest log record nil size nil continue nil latest nil break int cb return prev nil nil dhash get prev nil fatal load block return order interleaves multiple logs reverse order starting log record 
order calls application callbacks log record 
log record contains pointer oldest log record traverses log reverse chronological order starting log record 
applications uses read logs record record finds information needs 
orders log records causality 
log records version vectors participant log created 
reflects causality log records 
participants update logs concurrently new log records contain concurrent version vectors 
application tolerate order chooses impose concurrent log records application may depend ordering records way participants 
describes order procedure list log heads interleaves multiple logs reverse order starting log record 
order takes callback function application order calls function log record 
order similar merging sorted version vector latest local participant traverse callback cb version vector list log heads participant current view hi dhash get key hi seq push back hi latest latest return order cb append log head ha list log records seq ha seq version latest prev ha prev head ha head ha seq ha seq ha prev sha latest ha seq dhash put ha prev dhash put sha ha key ha api applications traverse append maintain data structures 
lists 
order works phases 
phase order sorts log heads dhash key log head highest key 
fetches log record log array order log heads 
second phase order iterates looking log record ordered dhash keys log heads essentially orders log records concurrent version vectors log head keys 
third phase order passes callback function 
callback function log traversal order fetches prev dhash 
order repeats second phase log records processed 
api offers simple api procedures traverse append 
application uses traverse perform lookup operations data structure 
constructs response lookup traversing logs 
applications append append new log records update log head 
call append essence modifies data structure 
describes traverse append procedures 
program typically modifies data structure performing lookup 
new log record append uses version vector latest created previous traverse call 
latest maintained internally captures state participant log 
log head fetch requests arrive different dhash servers different times participants concurrently update logs possible participant call traverse initially includes subset concurrent updates 
short time call traverse includes remaining updates ordered subset 
section describes cope brief period inconsistency 
network partition case network partition design maximizes availability expense consistency allowing updates proceed partitions 
approach similar ficus 
directly aware partitions directly ensure partition complete copy logs 
depends dhash replicate data times distinct locations partition complete set data 
succeeds practice depends sizes partitions degree dhash replication total number dhash blocks involved application data structure 
particular case user intentionally disconnecting laptop network handled instructing laptop dhash server keep replicas log heads log records currently way ask dhash 
partition contain blocks needed stops working 
network partitions dhash provide write read consistency 
get partition return value written put partition 
partition heals fact log head updated just host prevents conflicts individual logs sufficient system newest version log head 
section describes recovery partition detail 
consistency section describes maintains consistent data structures 
interleaves multiple logs deterministically decentralized clients agree order completed updates updates concurrently 
data structure quiescent guarantees clients agree state data structure 
optionally provides mutual exclusion applications need ensure atomicity multi step operations checking file exists create 
applications benefit able choose consistency model strong consistency incurs higher cost typically necessary 
section assumes cooperating dhash servers full network connectivity 
recall assumptions dhash provides write read consistency 
ordering log records application uses single server server cluster maintain data structure depends server server cluster data structure consistency 
typically single server executes operations serially participants agree state data structure operation 
server cluster guarantees bounded time distributed participants agree state data structure 
impossible maintain data structure consistency offers similar guarantees applications 
multiple participants middle updating logs possible calls traverse see updates see different set updates 
consequently guarantee participants see set log records time 
ensures order passes log records callback function order participant 
participants agree order completed updates updates issued concurrently 
prove property 
simplicity order passes callback function passes callback function 
big refer log record log 
recall order contains log record order passed callback 
recall sorted keys log heads 
lemma 
log records order orders proof 
proof contradiction 
assume order orders point prior cb consider cases head head vice versa 
case look inner loop compares lines 
assume head head 
inner loop variable refers log loop ex log 
cb called case inner loop 
impossible 
contradiction 
assume head head 
point inner loop variable refers log 
long cb called replaces value long cb called 
ordered contradiction 
lemma 
log records concurrent version vectors 
order orders head head exists log record head head proof 
point prior cb head head inner loop variable refers log 
look possible values point time 
cb called case inner loop 
ordered ahead contradiction 
log head head 
case inner loop 
ordered ahead contradiction 
left head head happen point instances inner loop return case 
fits criteria theorem 
order orders log records order participant time 
proof 
lemma theorem holds 
proof shows theorem holds 
loss generality assume head head 
show proof contradiction impossible lemma exists log record head head 
participant sees see loss data system halts 
examine happens order orders head head point time inner loop variable refers log head writes atomic log head write visible completes possible participant sees refers log participant knows stale version log fetched re tries sees log 
head head contradicts existence head head theorem implies participants agree order completed updates updates issued concurrently 
theorem implies partition heals updates issued separate partitions ordered deterministically 
relaxed fetch modify consistency common consistency model distributed systems fetch modify consistency totally orders fetches modifies object guarantees fetch sees results modify operations ordered 
traverse append offer similar slightly weaker semantics 
definition 
issue time traverse participant issues log head fetch request 
completion time append log head write completes append 
definition 
call append occurs call traverse iff append completion time earlier traverse issue time 
lemma 
call append occurs call traverse traverse calls order order sees log records written append 
proof 
participant issued append 
append occurs traverse traverse issues fetch request log head log head changed point new log records 
dhash offers write read consistency order sees log records written append 
lemma deviates fetch modify consistency call traverse may return log records appended issue time traverse 
worse log head fetch requests arrive different dhash servers different times multiple participants middle updating logs calls traverse different participants may return different log records 
shared memory models offer similarly weak concurrency semantics concurrent processes agree order updates process order updates concurrent processes 
differs models concurrent updates seen different times participants agree ordering updates final state data structure eventually 
theorem 
application uses traverse append perform operations data structure full network connectivity updates completed participant sees identical date state data structure 
proof 
lemma theorem 
practice different participants typically update different parts data structure 
application level updates conflict concurrent lookup update modifies files different directory theorem holds lookup 
theorem adequate operations affect issued serially 
applications need atomicity multi step operations mutual exclusion algorithm 
mutual exclusion traverse append provide strong concurrency guarantees 
example call traverse may see log records written call append append occur traverse 
result concurrent updates data structure take place noticing effects 
behavior result non sequential execution traces 
applications cope weak concurrency semantics mutual exclusion implemented traverse append 
mutual exclusion algorithm uses non data structure specific log records 
participant appends prepare log record announce intention mutual exclusion 
prepare specifies handle identifies part data structure 
participant appends exclusive log record achieves mutual exclusion 
cancel log record cancels previous prepare exclusive log record 
definition 
prepare exclusive log record participant log invalid iff 
cancel log record log identify handle 

seconds passed seen 
valid 
mutual exclusion algorithm works phases 
phase participant checks participant wants mutual exclusion 
announces intention mutual exclusion appending prepare log record 
backs random amount time re tries 
second phase acquire handle log record null check conflict log record valid prepare exclusive return return int traverse check conflict backoff seconds return acquire prepare append traverse check conflict append cancel backoff seconds return acquire append exclusive return ok release handle append cancel participants acquire release implement mutual exclusion 
acquire passes callback traverse checks contention 
checks participants logs 
participant wants mutual exclusion backs re tries 
achieves mutual exclusion appends exclusive log record 
mutual exclusion algorithm assumes synchrony 
network delay latency dhash servers processing delay latency code protected mutual exclusion exceeds seconds 
section assumes case 
presents pseudocode algorithm 
rest section describes properties acquire release 
assume participants update part data structure 
prepare exclusive cancel handle 
lemma 
log records different participants prior append traverse call participant calls callback proof 
participants wrote assume prior append traverse call passed callback 
traverse latest seq version 
true version version contradicts lemma 
participants 
ex ey exclusive records 
cx log record invalidates ex cy log record invalidates ey true 
cx ex cy ey 

cy ey cx ex 
proof 
clear cx ex cy ey 
show proof contradiction cy ex ey impossible 
similar argument cx ey ex impossible 
assume cy ex ey possible 
px py prepare records ex ey respectively 
look happens call acquire 
lemma know prior append ex traverse call passed cy callback 
turn implies traverse call passed ey py callback append ex execute 
traverse call prior append ex pass py callback completion time append py occur issue time traverse 
means completion time append py occur completion time append px 
case dhash write read consistency guarantees traverse call append py passes px callback 
append ey execute 
contradiction 
definition 
critical region sequence operations surrounded calls acquire release protect operations 
critical region executes acquire succeeds 
duration critical region extends issue time operation sequence completion time operation sequence 
theorem proves acquire release provides mutual exclusion critical regions 
theorem 
assuming network processing delays exceed seconds critical regions protected handle durations overlap 
proof 
operations operations 
ex cx ey cy exclusive cancel log records protect loss generality assume cx ex cy ey lemma 
means issued append ex issued append cy 
issued 
forking far focused semantics assuming dhash provides write read consistency 
assumption breaks scenarios 
cryptographic techniques useful checking integrity data returned untrusted dhash servers ensure freshness data 
untrusted server mount stale data attack serving old copy log head block 
second participants receive stale data operate different network partitions 
call scenarios forking 
section describes detect stale data attacks recover forking 
detection dhash server mounts stale data attack serving old copy log head block 
observe happens stale data attack suppose participants participant log heads hx hy hz sequence number 
means log record log sequence number 
sx sy sz dhash servers serve hx hy hz respectively 
consider cases 
suppose sz mounts stale data attack giving seq hz effect sz tricks believing log record written sequence number 
detect attack immediately attack evident appends log record log subsequently fetches new hy 
sy malicious hy prev version 
notices hy prev version prev seq 
general stale data attack servers detected checking inconsistencies logs 
log records log disagree log log head log records second log log head second log stale 
log head writes atomic participant fetch stale log heads absence stale data attack 
consider attack involves dhash server stores log head 
example suppose sx sy sz collude sx sy return seq seq latest copy hx hy sz returns seq latest version hz logs remain consistent attack partitions updates vice versa 
fortunately attack detected outof band communication mail notification updates 
scenario similar described 
recovery stale data attacks network partition merge participants see log records written fork concurrent version vectors 
orders version vectors order participants agree state data structure partition heals 
assuming participant writes partition data structure meta data set logs remains internally correct partition heals 
log records appear logs partition added partition remain accessible partition 
application level partitioned updates may affected program correctness 
leaves conflict detection resolution application notifies application sees log records concurrent version vectors 
experience built multi user peer peer read write file system ivy ivy log record contains information single file system modification :10.1.1.119.567:10.1.1.119.567
example link log record contain information link file foo directory bar 
avoid unnecessary conflicts concurrent updates different participants ivy log records contain minimum possible information 
example write log record describes data written file 
write record contains newly written data file new length modification time 
attributes computed correctly time write record created true state file known concurrent updates known 
ivy computes information incrementally traversing logs 
ivy uses traverse append implement file system operations 
answer lookup ivy calls traverse stopping scanning log gathered data handle request 
example perform directory listing ivy accumulates file names relevant link log records log records remove rename files account 
ivy modifies file system append 
modify operations follow lookups 
example create string handle dir check exists log record file directory named exists return return acquire dir int traverse check conflict release dir return exists list log records create dir append release dir return ok ivy uses mutual exclusion implement file creation 
applications create lock files serialize operations file directory 
prior creating new file ivy checks file exists 
ivy implements file system operations mutual exclusion 
design choice affect program correctness users operations modify different files directories 
concurrent updates file directory may result nonsequential execution history 
example program issues rename program concurrently operations may succeed 
operations execute sequentially fails 
case file system remains consistent looks system calls correctly executed order 
ivy uses mutual exclusion implement file directory creation 
file directory creation require strong concurrency semantics programs create duplicate files directories 
applications create lock files serialize conflicting updates described 
ivy achieves performance aggressive client side caching 
participant ivy software caches entire state file system 
logs allows ivy easily validate entire cache changed cache updated cache date 
typical ivy operation involves fetching log heads dhash fetching new log records completing operation entirely local cache 
related sprite lfs represents file system log operations snapshot number node location mappings 
lfs uses single log managed single server order speed small write performance 
uses multiple logs multiple participants update data structure central server server cluster 
existing systems bayou explored idea merging operation logs multiple clients order resolve concurrent updates data structure 
novel contribution idea implement real time access shared data structure 
bayou represents changes database log updates 
update includes application specific merge procedure resolve conflicts 
node maintains local log updates knows nodes 
nodes operate primarily disconnected mode merge logs pairwise talk 
log merge procedures allow bayou node re build database adding updates past nodes 
updates reach special primary node primary node decides final permanent order log entries 
differs bayou number ways 
logs allow nodes trust bayou 
uses distributed algorithm order logs avoids bayou potentially unreliable primary node 
ensures updates leave data structure consistent bayou shifts burden application supplied merge procedures 
design focuses providing useful semantics connected clients bayou focuses managing conflicts caused updates disconnected clients 
tdb pfs logging tdb pfs collision resistant hashes allow modifications malicious users corrupted storage devices detected undone uses similar techniques 
presents set techniques maintaining consistent data structures dhts 
represents data log operations dht separate log participant 
participants communicate dht directly talk single server 
participant updates data structure appending records log participant reads current state data structure scanning participants logs 
log structure log participant means concurrent updates data result new log records multiple logs corrupted data structure 
interleaves multiple logs deterministically decentralized clients agree order completed updates updates issued concurrently 
data structure quiescent guarantees clients agree state data structure 
applications implement mutual exclusion achieve stronger concurrency semantics 
built multi user peer peer read write file system ivy uses store file system data meta data 
aggressive client side caching ivy achieves performance 
dabek frans kaashoek karger morris stoica :10.1.1.159.9358
wide area cooperative storage cfs 
proc 
acm symposium operating system principles october 
lynch malkhi 
atomic data access content addressable networks 
proc 
international workshop peer peer systems march 
maheshwari shapiro 
build trusted database system untrusted storage 
proc 
usenix symposium operating systems design implementation pages october 
maymounkov mazi res 
kademlia peerto peer information system xor metric 
proc 
international workshop peer peer systems march 
mazi res shasha 
building secure file systems byzantine storage 
proc 
acm symposium principles distributed computing podc july 
muthitacharoen morris gil chen 
ivy read write peer peer file system 
proceedings th usenix symposium operating systems design implementation osdi boston massachusetts december 
page guy popek heidemann 
architecture ficus scalable replicated file system 
technical report ucla csd 
parker popek stoughton walker walton chow edwards kline 
detection mutual inconsistency distributed systems 
ieee transactions software engineering volume pages 
ratnasamy francis handley karp shenker 
scalable content addressable network 
proc 
acm sigcomm pages august 
rosenblum ousterhout 
design implementation log structured file system 
acm transactions computer systems 
rowstron druschel 
storage management caching past large scale persistent peer peer storage utility 
proc 
acm symposium operating system principles october 
stein howard seltzer 
unifying file system protection 
proc 
usenix technical conference pages 
strunk goodson soules 
self securing storage protecting data compromised systems 
proc 
usenix symposium operating systems design implementation pages october 
terry theimer petersen demers spreitzer hauser 
managing update conflicts bayou weakly connected replicated storage system 
proc 
acm symposium operating system principles pages december 
yu vahdat 
design evaluation continuous consistency model replicated services 
acm transactions computer systems august 
zhao kubiatowicz joseph 
tapestry infrastructure fault tolerant wide area location routing 
technical report ucb csd computer science division berkeley april 

