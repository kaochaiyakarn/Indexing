william pugh skip lists probabilistic alternative balanced trees skip lists data structure place balanced trees 
skip lists probabilistic balancing strictly enforced balancing result algorithms insertion deletion skip lists simpler significantly faster equivalent algorithms balanced trees 
binary trees representing data types dictionaries ordered lists 
elements inserted random order 
sequences operations inserting elements order produce degenerate data structures give poor performance 
possible randomly permute list items inserted trees high probability input sequence 
cases queries answered line randomly permuting input impractical 
balanced tree algorithms re arrange tree operations performed maintain certain balance conditions assure performance 
skip lists probabilistic alternative balanced trees 
skip lists balanced consulting random number generator 
skip lists bad worst case performance input sequence consistently produces worst case performance quicksort pivot element chosen randomly 
skip list data structure significantly unbalanced dictionary elements chance search take times expected time 
skip lists balance properties similar search trees built random insertions require insertions random 
balancing data structure probabilistically easier explicitly maintaining balance 
applications skip lists natural representation trees leading simpler algorithms 
simplicity skip list algorithms easier implement provides significant constant factor speed improvements balanced tree self adjusting tree algorithms 
skip lists space efficient 
easily configured require average pointers element require balance priority information stored node 
skip lists need examine node list searching linked list 
list stored sorted order node list pointer node ahead list examine nodes length list 
giving fourth node pointer ahead requires nodes examined 
th node pointer nodes ahead number nodes examined reduced log doubling number pointers 
data structure fast searching insertion deletion impractical 
node forward pointers called level node 
th node pointer nodes ahead levels nodes distributed simple pattern level level level 
happen levels nodes chosen randomly proportions 
node th forward pointer pointing nodes ahead points node level higher 
insertions deletions require local modifications level node chosen randomly node inserted need change 
arrangements levels give poor execution times see arrangements rare 
data structures linked lists extra pointers skip intermediate nodes named skip lists 
skip list algorithms section gives algorithms search insert delete elements dictionary symbol table 
search operation returns contents value associated desired key failure key 
insert operation associates specified key new value inserting key 
delete operation deletes specified key 
easy support additional operations find minimum key find key 
element represented node level chosen randomly node inserted regard number elements data structure 
level node forward pointers indexed need store level node node 
levels capped appropriate constant maxlevel 
level list maximum level currently list list empty 
header list forward pointers levels maxlevel 
forward pointers header levels higher current maximum level list point nil 
initialization element nil allocated key greater legal key 
levels skip lists terminated nil 
new list initialized level list equal forward pointers list header point nil 
search algorithm search element traversing forward pointers overshoot node containing element searched 
progress current level forward pointers search moves level 
progress level immediately front node contains desired element list 
insertion deletion algorithms insert delete node simply search splice shown 
gives algorithms insertion deletion 
vector update maintained search complete ready perform splice update contains pointer rightmost node level higher left location insertion deletion 
insertion generates node level greater search list searchkey list header loop invariant key searchkey list level downto forward key searchkey forward key searchkey forward key forward key searchkey return value return failure skip list search algorithm linked lists additional pointers nil nil nil nil nil previous maximum level list update maximum level list initialize appropriate portions update vector 
deletion check deleted maximum element list decrease maximum level list 
choosing random level initially discussed probability distribution half nodes level pointers level pointers 
get away magic constants say fraction nodes level pointers level pointers 
original discussion 
levels generated randomly algorithm equivalent 
levels generated number elements list 
level start search 
defining skip list elements generated happen elements level elements level elements level element level happen 
handle 
standard algorithm start search level lot useless 
start search 
analysis suggests ideally start search level expect nodes 
happens log referring frequently formula denote log number solutions problem deciding handle case element unusually large level list 
don worry happy 
simply start search highest level list 
see analysis probability maximum level list elements significantly larger small 
starting search maximum level list add small constant expected search time 
approach algorithms described 
search path update forward lvl random returns random value random lvl maxlevel lvl lvl return lvl algorithm calculate random level original list inserted list insertion updated pointers grey pictorial description steps involved performing insertion 
element may contain room pointers don need 
choose utilize levels 
number ways implement complicate algorithms noticeably improve performance approach recommended 
fix dice 
generate random level greater current maximum level list simply plus current maximum level list level new node 
practice intuitively change 
totally destroys ability analyze resulting algorithms level node longer completely random 
programmers probably feel free implement avoid 
determining maxlevel safely cap levels choose maxlevel upper bound number elements skip list 
maxlevel appropriate data structures containing elements 
analysis skip list algorithms time required execute search delete insert operations dominated time required search appropriate element 
insert delete operations additional cost proportional level node inserted deleted 
time required find element proportional length search path determined pattern elements different levels appear traverse list 
probabilistic philosophy structure skip list determined number insert list searchkey local update maxlevel list header list level downto forward key searchkey forward key searchkey forward key update forward key searchkey value lvl lvl list level list level lvl update list header list level lvl lvl searchkey value level forward update forward update forward delete list searchkey local update maxlevel list header list level downto forward key searchkey forward update forward key searchkey list level update forward break update forward forward free list level list header forward list level nil list level list level skip list insertion deletion algorithms nil nil elements skip list results consulting random number generator 
sequence operations produced current skip list matter 
assume adversarial user access levels nodes create situations worst case running times deleting nodes level 
probabilities poor running times successive operations data structure independent successive searches element take exactly time 
said 
analysis expected search cost analyze search path backwards travelling left 
levels nodes list known fixed search performed act level node determined observed backtracking search path 
particular point climb situation similar situation th forward pointer node knowledge levels nodes left level level assume header equivalent assuming list extends infinitely left 
level equal situation level greater situation probability situation time situation climb level 
expected cost length search path climbs levels infinite list cost situation cost situation substituting simplifying get need climb levels probability situation probability need climb levels situation assumption list infinite pessimistic assumption 
bump header backwards climb simply climb performing leftward movements 
gives upper bound expected length path climbs level level list elements 
analysis go level different analysis technique rest journey 
number leftward movements remaining bounded number elements level higher entire list expected value move upwards level maximum level list 
probability maximum level list greater equal np calculate expected maximum level 
putting results find total expected cost climb list elements log 
number comparisons result analysis length search path 
number comparisons required plus length search path comparison performed position search path length search path number hops positions search path 
probabilistic analysis possible analyze probability distribution search costs 
probabilistic analysis somewhat complicated see box 
probabilistic analysis calculate upper bound probability actual cost search exceeds expected cost specified ratio 
results analysis shown 
choosing table gives relative times space requirements different values decreasing increases situation possible situations backwards traversal search path need climb levels ity running times 
power easy generate random level stream random bits requires average log random bits generate random level 
constant overheads related choosing slightly improves constant factors speed algorithms 
suggest value variability running times primary concern case 
sequences operations expected total time sequence operations equal sum expected times operations sequence 
expected time sequence searches data structure contains elements log 
pattern searches affects probability distribution actual time perform entire sequence operations 
search item twice data structure searches take exactly amount time 
variance total time times variance single search 
search times elements independent variance total time equal sum variances individual searches 
searching element maximizes variance 
alternative data structures balanced trees avl trees knu wir trees st problems skip lists 
techniques performance bounds order 
choice schemes involves factors difficulty implementing algorithms constant factors type bound amortized probabilistic worst case performance non uniform distribution queries 
implementation difficulty applications implementers generally agree skip lists significantly easier implement balanced tree algorithms self adjusting tree algorithms 
normalized search avg 
pointers times normalized node 





table relative search speed space requirements depending value constant factors constant factors significant difference practical application algorithm 
particularly true sub linear algorithms 
example assume algorithms require log time process query twice fast time algorithm takes process query data set size algorithm process query data set size important qualitatively different contributions constant factors algorithm 
inherent complexity algorithm places lower bound implementation 
self adjusting trees continuously rearranged searches performed imposes significant overhead implementation self adjusting trees 
skip list algorithms low inherent constant factor overheads inner loop deletion algorithm skip lists compiles just instructions 
second algorithm complex programmers implementing optimizations 
example balanced tree algorithms normally described recursive insert delete procedures simple intuitive method describing algorithms 
recursive insert delete procedure incurs procedure call overhead 
non recursive insert delete procedures overhead eliminated 
complexity nonrecursive algorithms insertion deletion balanced tree complexity programmers eliminating recursion routines 
skip list ratio actual cost expected cost graph shows plot upper bound probability search substantially longer expected 
vertical axis show probability length search path search exceeds average length ratio horizontal axis 
example probability search path times expected length 
graph calculated probabilistic upper bound 
prob 
implementation search time insertion time deletion time skip lists msec msec msec non recursive avl trees msec msec msec recursive trees msec msec msec self adjusting trees top msec msec msec bottom msec msec msec gorithms non recursive simple programmers performing optimizations 
table compares performance implementations skip lists techniques 
implementations optimized efficiency 
avl tree algorithms written james wir 
tree algorithms ahu 
existing balanced tree packages timed slower results 
self adjusting tree algorithms st 
times table reflect cpu time sun perform operation data structure containing elements integer keys 
values parenthesis show results relative skip list time times insertion deletion include time memory management programs calls malloc free 
note skip lists perform comparisons methods skip list algorithms require average comparisons 
tests real numbers keys skip lists slightly slower non recursive avl tree algorithms search skip list slightly slower search tree insertion deletion skip list algorithms faster recursive tree algorithms 
comparisons expensive possible change algorithms compare search key key node search 
produces upper bound expected number comparisons log modification discussed pug 
type performance bound classes algorithm different kinds performance bounds 
balanced trees worst case time bounds self adjusting trees amortized time bounds skip lists probabilistic time bounds 
self adjusting trees individual operation take time time bound holds long sequence operations 
skip lists operation sequence operations take longer expected probability operation significantly longer expected negligible 
certain real time applications assured operation complete certain time bound 
applications self adjusting trees may undesirable take significantly longer individual operation expected individual search take time log time 
real time systems skip lists may usable adequate safety margin provided chance search skip lists containing ele table timings implementations different algorithms ments takes times expected time non uniform query distribution self adjusting trees property adjust nonuniform query distributions 
skip lists faster self adjusting trees significant constant factor uniform query distribution encountered self adjusting trees faster skip lists highly skewed distributions 
attempt devise self adjusting skip lists 
little practical motivation tamper simplicity fast performance skip lists application highly skewed distributions expected trees skip list augmented cache may preferable pug 
additional skip lists described set algorithms allow multiple processors concurrently update skip list shared memory pug 
algorithms simpler concurrent balanced tree algorithms 
allow unlimited number readers busy writers skip list elements little lock contention 
skip lists easy 
sorts operations wish balanced tree search fingers merge skip lists allow ranking operations determine th element skip list pug 
tom ian munro pmp done exact analysis expected search time skip list 
upper bound described close exact bound techniques needed derive exact analysis complicated sophisticated 
exact analysis shows upper bound expected cost search comparisons exact expected cost 
adapted idea probabilistic balancing problems arising data structures incremental computation pt 
generate level node result applying hash function element opposed random number generator 
results scheme set unique data structure represents high probability data structure approximately balanced 
combine idea applicative persistent probabilistically balanced data structure scheme hashed consing allows constant time structural equality tests applicative data structures get number interesting properties constant time equality tests representations sequences 
scheme number applications incremental computation 
skip lists somewhat awkward applicative probabilistically balanced tree scheme 
related james pointed suggested method randomly balancing search trees spr 
approach state data structure independent sequence operations built 
harder impossible formally analyze algorithms 
gives empirical evidence algorithm expected performance theoretical results 
randomized data structure ordered sets described 
search data structure requires expected time 
aragon seidel describe probabilistically balanced search trees scheme ac 
discuss adapt data structure non uniform query distributions 
source code availability skip list source code libraries pascal available anonymous ftp ftp cs umd edu 
theoretical point view need skip lists 
balanced trees done skip lists worst case time bounds skip lists 
implementing balanced trees task result balanced tree algorithms rarely implemented part programming assignment data structures class 
skip lists simple data structure place balanced trees applications 
skip lists algorithms easy implement extend modify 
skip lists fast highly optimized balanced tree algorithms substantially faster casually implemented balanced tree algorithms 
referees helpful comments 
special people supplied enthusiasm encouragement years struggled get published especially alan demers tim teitelbaum doug mcilroy 
partially supported bell labs fellowship nsf ccr 
ac aragon seidel randomized search trees proceedings th ann 
ieee symp foundations computer science pp october 
ahu aho hopcroft ullman data structures algorithms addison wesley publishing 
john allen 
anatomy lisp mcgraw hill book ny 
bentley leighton steele randomized data structure ordered sets mit lcs technical memo may 
knu knuth sorting searching art computer programming vol 
addison wesley publishing 
pmp thomas ian munro exact analysis expected search cost skip lists tech report dept computer science univ waterloo january 
pt pugh teitelbaum incremental computation function caching proc 
sixteenth conference principles programming languages 
pug pugh concurrent maintenance skip lists tech report tr cs dept computer science university maryland college park 
pug pugh want balanced trees faster simply skip lists tech report cs tr dept computer science university maryland college park july 
pug pugh slow optimally balanced search strategies vs cached fast uniformly balanced search strategies appear information processing letters 
spr randomly balanced binary trees pp 
st sleator tarjan self adjusting binary search trees journal acm vol july pp 

wir wirth algorithms data structures programs prentice hall 
probabilistic analysis addition analyzing expected performance skip lists analyze probabilistic performance skip lists 
allow calculate probability operation takes longer specified time 
analysis ideas analysis expected cost analysis understood 
random variable fixed unpredictable value predictable probability distribution average 
random variable prob denotes probability equals prob denotes probability greater example number obtained throwing unbiased die prob 
preferable find simple upper bounds values exact value difficult calculate 
discuss upper bounds random variables need define partial ordering equality probability distributions nonnegative random variables 
definitions prob prob 
non negative independent random variables typically denote time execute algorithms 
define prob true value probability exceeds probability exceeds formally prob iff prob prob prob iff prob prob 
example graph shows probability distribution random variables probability distribution curve completely curves prob prob probability curves intersect prob prob expected value random variable simply area curve prob prob average equal average probability distributions definition binomial distributions 
non negative integer probability 
term denotes random variable equal number successes seen series independent random trials probability success trial average variance tp tp respectively 
definition negative binomial distributions nb 
non negative integer probability 
term nb denotes random variable equal number failures seen th success series random independent trials probability success trial average variance nb respectively 
prob prob prob prob plots probability distributions probabilistic analysis search cost number leftward movements need move level infinite list negative binomial distribution number failures situations see see success situation series independent random trials probability success probabilistic notation introduced cost climb level infinite list prob nb 
sum costs climbing level get total cost climb level cost climb level infinite list prob nb 
assumption list infinite pessimistic assumption cost climb level list elements prob nb 
climbed level number leftward movements bounded number elements level greater list elements 
number elements level greater list elements random variable form np 
random variable corresponding maximum level list elements 
probability level node greater prob np np prob nb get probabilistic upper bound prob nb 
note average nb 
gives probabilistic upper bound cost reached level np nb 
combining results get probabilistic upper bound total length search path cost entire search total cost climb list elements prob nb np nb expected value upper bound equal previously calculated upper bound expected cost search 
variance upper bound np show plot upper bound probability actual search substantially longer average probabilistic upper bound 
