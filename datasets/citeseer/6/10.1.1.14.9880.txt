challenges making pervasive systems dependable christof fetzer karin labs research park avenue florham park nj usa christof karin research att com due moore law witnessing exponential increase processing power disk capacity network bandwidth decades 
fueled underlying exponential increase circuit density expected continue decade economically feasible build pervasive systems 
pervasive system consists large set networked devices seemingly invisibly embedded environment 
pervasive systems research started late xerox parc 
variety application domains proposed pervasive systems education public spaces health care home control systems 
past current pervasive systems focusing human computer interface 
focuses dependability issues reliability availability security manageability issues pervasive systems 
recognized dependability pervasive systems important issue research done area 
notable exception describes dependable infrastructure home automation 
focuses mainly soft state approach home automation questions remain open 
pervasive systems dependable deployable larger scale 
particular pervasive systems widely deployed require users invest substantial amounts time money keep operating 
goal find dependability mechanisms policies maximize dependability pervasive systems minimizing cost operation including deployment maintenance costs 
informally term pervasive dependability refer requirements 
succeed pervasive system sufficiently dependable deployed widely integral part infrastructure society depends 
pervasive systems safety mission critical health care related systems society critical unavailability systems mere inconvenience concurrent outage large number systems broad economical consequences 
example acceptable pervasive home networks go large number fail concurrently society adversely impacted added traffic lost productivity 
pervasive dependability needs address problems raised society critical systems 
appear directions distributed computing research position papers springer verlag lncs 
fetzer achieving pervasive dependability difficult due large number hardware software components pervasive systems cost constraints limits amount manual labor system administration 
approach achieving pervasive dependability harness power moore law scientific method 
idea keep run time data possible exponentially increasing disk sizes perform automated data mining exponentially increasing network speeds collect distributed data automated fault injection experiments exponentially increasing processor speeds automatically increase dependability pervasive systems need human intervention 
automation achieved mechanizing scientific method 
properties software components system automatically selects appropriate dependability mechanisms 
particular derive properties software components system tests set hypotheses function crashes argument negative fault injection reject invalid hypotheses 
non rejected hypotheses system selects set appropriate dependability mechanisms creates wrapper checks argument negative 
scientific method incorrect hypotheses rejected thorough experimentation hypothesis explains experimentation results accepted 
previously accepted hypothesis rejected replaced precise hypothesis point experimental data available 
automated system previously accepted hypothesis rejected due logged field data 
optimality correctness dependability mechanism depends validity hypothesis guarantee optimality correctness new data lead rejection hypothesis 
safety critical systems believe potential benefits higher availability lower operational cost outweigh potential risks incorrect failure masking 
investigating idea context pervasive home systems 
initial results demonstrate increase dependability libraries automatically automated fault injection experiments 
currently building new middleware platform pervasive systems designed support automated experiments 
state art fundamental challenge making pervasive systems dependable complexity 
sheer number devices software components requirement facilitate cooperation devices result complex systems 
furthermore large number pervasive systems different 
example consider context pervasive home systems 
sensors actuators sufficiently inexpensive homes deploy pervasive systems consisting hundreds thousands devices 
expect home different set devices software components 
managing devices challenge diagnosing complex system non trivial frequently needed failure frequency increases number devices software components 
challenges making pervasive systems dependable complexity pervasive systems aspects 
marc weiser articulated aspects follows computational system invisible extensive hard know controlling connected information flowing broken 
consequences action 

statement valid human interface level software level 
approach attempt address issue complexity systematic way 
designing implementing middleware infrastructure pervasive systems 
focus platform help deal complexity pervasive systems 
achieve facilitating automated fault injection data collection application software components middleware platform 
decided design implement data flow oriented system 
system application designed set components connected explicit links 
communication data control restricted links 
way system keep track data control flow 
logging data flowing links permits system track components determine broken 
fault injection system determine consequences faults 
data flow oriented systems investigated different contexts years 
example data flow oriented systems facilitate adaptation throughput optimization threading optimization media streaming 
investigation focuses applicability data flow oriented systems pervasive dependability 
major questions addressing context performs self configuration self tuning see section 
large body addressing issue reconfiguration component systems 
possible exceptions provide non trivial automatic reconfiguration pipelined applications approaches require amount user system administrator involvement inappropriate pervasive dependable systems 
addressing target domain need develop general system requires user involvement handles arbitrary component graphs failure types 
research directions currently see challenges achieving pervasive dependability self diagnosis self tuning 
self configuration self configuration mean automatically modify application optimize dependability configuration time 
dependability aspects application availability timeliness depend heavily available hardware software resources failure frequency underlying computing system 
pervasive system expect wide range processing speeds network speeds disk capacity failure rates 
due moore law time range widen new hardware added system old hardware stays system 
self configuration challenge automatically determine fetzer dependability application improved automatically selecting appropriate replication mechanism replication degree 
self diagnosis term self diagnosis refer process automatic fault diagnosis 
example cause high delay link experiencing excessive failure rates 
application configured appropriately increase dependability cope certain number failures 
number failures high application able mask failures reconfiguration change application structure needed 
guide reconfiguration fault diagnosis needed 
experiences collected context adaptation indicate diagnosis situations time consuming perform reconfiguration performed quickly 
view challenge configure application redundancy able perform fault diagnosis reconfiguration 
self tuning term self tuning refer optimization dependability application run time 
application dependability tuned changing structure application changing links software components changing behavior components changing sending rate component 
challenge find appropriate combination behavioral structural changes optimizes dependability application 

abowd 
classroom experiment instrumentation living educational environment 
ibm systems journal 

barbacci weinstock doubleday gardner 
structure description language developing distributed applications 
iee software engineering journal 

bloom day 
reconfiguration module replacement argus theory practice 
software engineering journal 

bond cheung forrest jackson zave 
basis eclipse ip communications software platform 
proceedings ip telecom services workshop pages sept 
chen muntz yuen park srivastava 
support infrastructure smart 
ieee pervasive computing 

davies 
prototypes challenges deploying ubiquitous systems 
ieee pervasive computing 

kidd aware home living laboratory ubiquitous computing research 
nd international workshop cooperative buildings 


cheng architectural style basis self repair 
ieee ifip conference software architecture 

fetzer 
self component data flow oriented framework pervasive dependability 
eighth ieee international workshop object oriented realtime dependable systems words jan 

fetzer xiao 
automated approach increasing robustness libraries 
international conference dependable systems networks washington dc june 
challenges making pervasive systems dependable 
fleck kindberg brien strain 
informing remembering ubiquitous systems interactive museums 
ieee pervasive computing 

fu shi karamcheti 
cans composable adaptive network services infrastructure 
usenix symposium internet technologies systems usits march 


weaves software construction analysis 
th international conference software engineering pages 

white 
surgeon dynamically reconfigurable distributed applications 
iee system engineering journal march 

intille 
designing home 
ieee pervasive computing 

koster black huang walpole pu 
composing distributed information flows 
international workshop multimedia middleware 

kramer magee 
evolving philosophers problem dynamic change management 
ieee transactions software engineering 

martin schwan 
ili adaptive infrastructure dynamic interactive distributed applications 
proceedings fourth international conference configurable distributed systems pages 

gordon moore 
components integrated circuits 
electronics april 

mozer 
neural network house environment adapts inhabitants 
aaai spring symposium intelligent environments pages 

taylor johnson medvidovic quilici rosenblum wolf 
architecture approach self adaptive software 
ieee intelligent systems may june 

james 
polylith software bus 
acm transactions programming languages systems toplas 

stanford 
pervasive computing deliver elder care 
ieee pervasive computing 

wang russell arora 
toolkit building dependable extensible home networking applications 
proceedings th usenix windows systems symposium august 

weiser gold brown 
origins ubiquitous computing research parc late 
ibm systems journal 

welsh culler brewer 
seda architecture conditioned scalable internet services 
proceedings eighteenth symposium operating systems principles sosp october 
