software practice experience vol 
november engineering sort function jon bentley douglas mcilroy bell laboratories mountain avenue murray hill nj summary history function library 
function clearer faster robust existing sorts 
chooses partitioning elements new sampling scheme partitions novel solution dijkstra dutch national flag problem swaps efficiently 
behavior assessed timing debugging testbeds program certify performance 
design techniques apply domains sorting 
key words quicksort sorting algorithms performance tuning algorithm design implementation testing libraries long included qsort function sort array usually implemented hoare quicksort 
existing flawed built new 
summarizes evolution 
compared existing library sorts new qsort faster typically twice fast clearer robust nonrandom inputs 
uses standard quicksort tricks abandons introduces new tricks 
approach building relevant engineering algorithms 
qsort home system served faithfully lee mcmahon wrote decades ago 
shipped landmark seventh edition unix system model 
summer colleagues allan wilks rick becker run taken minutes hours cpu time 
interrupted gone weeks 
took comparisons sort array integers nn 

shopping written berkeley consume quadratic time arrays contain elements repeated times particular arrays random zeros ones 
fact dozen different unix libraries easily driven quadratic behavior derived seventh edition berkeley function 
seventh received august john wiley sons revised may engineering sort function edition qsort problem 
static storage fail called recursively comparison function multithreaded computation 
unable find qsort set build better 
algorithm avoid extreme slowdowns reasonable inputs fast random inputs 
efficient data space code space 
sort need stable specification promise preserve order equal elements 
qsort interface despite suggestive name qsort function need implemented quicksort 
ll implement function insertion sort slow prove useful industrial strength sort 
starting point sorts integers array lacks qsort interface 
naming scheme stands integer second insertion 
algorithm varies index second element array sift th element proper place preceding subarray 
void int int int function exchanges integers 
insertion sort uses comparisons randomly permuted array uses comparisons 
function sorts integers 
moment take general qsort interface void qsort char int int es int cmp parameter points array sorted 
parameters tell number elements element size bytes 
parameter comparison function takes pointer arguments 
function returns integer equal greater zero argument points value equal greater second 
typical comparison function sample call sort array nonnegative integers 
simple parameter declarations readability 
official prototype ansi standard header file void qsort void size size int const void const void declaration honestly 
argument casting source qsort casting programs call 
practical terms declaration precludes portable compatibility library 
change int parameters size production model program 
bentley mcilroy void swap char char int char program 
simple swap function int int int return qsort char sizeof int sort array len byte strings terminal null characters standard routine strcmp qsort len strcmp sort array pointers strings level indirection 
int char char return strcmp qsort sizeof char straightforward rewriting handle interface 
void isort char int int es int cmp char pi pj pi es pi es pi es pj pi pj cmp pj es pj pj es swap pj pj es es function swap defined program interchanges byte fields pointed 
say swapping 
simple qsort quicksort divide conquer algorithm partition array placing small elements left large elements right recursively sort subarrays 
sedgewick studied quicksort ph thesis papers widely described texts bibliographies 
program trivial quicksort uses partitioning scheme due 
code partitions element array placed 
sort left subarray call 
sort right subarray pointer arithmetic 
hoare proves randomly permuted distinct elements quicksort cn ln lg comparisons 
unfortunately program slower 
arrays sorted roughly comparisons 
avoid problem hoare suggests partitioning random element adopt technique program 
program takes quadratic time arrays identical elements 
void int int int return swap swap engineering sort function program 
toy quicksort unfit general efficient familiar partitioning method uses indexes index scans bottom array reaches large element greater equal partition value reaches small element 
array elements swapped scans continue pointers cross 
algorithm easy describe easy get wrong knuth tells horror stories inefficient partitioning algorithms 
avoid problems invariant due sedgewick partition element abbreviate increment elements reaching element greater equal start moving 
scans swap elements continue process 
important inner loops equal element 
takes quadratic time random zeros ones precisely scans equal elements try example understand 
partitioning 
anda yield recursively anda 
program combines ideas clean efficient quicksort specialized integers fine starting point building elaborate functions 
elaboration program supports interface 
third size seventh percent faster average avoids bad quadratic case 
seed final algorithm 
cost model speed program need idea costs critical operations 
bentley kernighan van wyk describe program generates cost estimates common operations particular hardware software system 
modified program mea bentley mcilroy void int int int return rand swap break swap swap program 
simple quicksort integers void qsort char int int es int cmp int char pi pj pn return pi rand es swap pi es pi pj pn es pi es pi pn cmp pi pj es cmp pj pj pi break swap pi pj es swap pj es pj es qsort es cmp qsort es es cmp program 
simple qsort sure cost common sorting operations 
table shows cost dozen representative operations compiler ansi vax 
system bookkeeping operations cost tenths microsecond comparisons start microseconds go swapping byte fields weighs dozen microseconds 
strcmp time comparing byte strings differ byte 
outlier swap function program 
appendix reports expensive systems 
reasons bytes swapped loop loop maintains pointers count function calling sequence takes couple microseconds 
benchmark swapping integers inline code takes just microsecond 
appendix swap code tuned exploit common spe engineering sort function table cpu microseconds int operations pointer operations es es control structures comparison functions strcmp swap functions swap cial case inline swaps integer sized objects function call 
reduces cost swapping byte fields microsecond 
costs times bookkeeping operations comparisons cost times swaps 
ratios differ dramatically costs sorts specialized integers heavily textbook analyses 
integer models knuth mix programs classic examples comparison costs bookkeeping swapping times expensive 
cost models summarized mix overhead comparisons swaps qsort overhead swaps comparisons second model reflects generality qsort interface comparison function machine primitive 
mix model pointed discussing utility comparison interpretive generally time consuming standard paradigm comparing integers 
colleague modified sort improve reliability efficiency techniques improved performance sorting applications degraded performance choosing partitioning element partitioning random element takes lg comparisons 
whittle away constant formula 
lucky choose median subarray partitioning element reduce number comparisons lg default true median expensive compute seek cheap approximation 
hoare proposed median small sample array elements 
singleton suggested median middle elements array 
partitioning median random elements reduces expected number comparisons bentley mcilroy abc acb cab bac bca static char med char char char int cmp return cmp 
cmp cmp cmp cmp program 
decision tree program median ln lg quicksort originally took swaps median partition increases swaps increase percent 
program finds median elements qsort comparison function 
takes comparisons average swaps evaluate decision tree shown 
effort finding central element push number comparisons closer lg adopted tukey median medians samples elements 
weide analyzes quality pseudo medians 
yields better balanced recursion tree cost twelve extra comparisons 
cheap large arrays expensive small arrays 
final code chooses middle element smaller arrays median middle elements mid sized array pseudo median evenly spaced elements large array 
code size breaks determined empirically 
pm es small arrays middle element pl pn es big arrays es pl med pl pl pl cmp pm med pm pm pm cmp pn med pn pn pn cmp pm med pl pm pn cmp mid size med scheme performs kinds nonrandom inputs increasing decreasing sequences 
get randomize sample library sort business side effecting random number generator 
experimented find average number comparisons algorithm 
set power generated sets random bit integers counted number comparisons program 
weighted squares regression fit data function lg close theoretical lg 
similar experiments program uses adaptive scheme cba engineering sort function showed lg comparisons 
substantial improvement choosing random element close lower bound lg 
timing testbed built simple testbed measure times random data 
takes inputs name sort routine number kind data sort modulus numbers reduced count number experiments perform 
interactive session user typed line requesting seventh edition qsort run array integers taken modulo experiments 
program writes second line echoes input fields followed run times software clock ticks second vax 
final field says sort required average lg microseconds 
third line requests similar experiments program fourth line reports average run time lg microseconds percent faster seventh 
integers cheap compare swap sorting highlights overhead costs 
sorting sets values representations testbed reveals performance spectrum relative costs overhead swaps comparisons 
single precision floating point numbers size integers swap slightly expensive compare doubles expensive categories 
byte records bytes integer keys yield fast comparisons slow swaps 
character strings spaces followed decimal representation integers slow compare swap 
pointers slow compare fast swap 
opportunity equal elements original performance goal running time inputs 
deliberately decided tune code fast particular classes inputs sorted approach fruitful 
soon moved extreme position 
version qsort offered locally essentially program adaptive partitioning 
friendly user new qsort typically percent faster existing function 
reported arrays identical elements qsort slowed slightly seventh edition qsort ran wind 
explained philosophical position rightly replied replace library routine program inferior common class inputs users sort precisely bring equal elements 
testbed shows program takes times long sort array random integers mod zeros ones seventh bentley mcilroy array equal elements program exchanges possible pair elements perfectly balanced recursion tree 
seventh uses fat partition finishes single scan elements 
sought sort identical elements efficiently slowing distinct elements 
sedgewick analyzes performance standard equal elements 
previous partitioning code divided input subsequences fat partition divides input partitioning recur subarrays ends ignore equal elements middle 
tripartite partitioning equivalent dijkstra dutch national flag problem 
programs including dijkstra seventh invariant gives code complex slow 
equal elements left array take extra swaps sift middle 
get efficient fat partition turn invariant partitioning bring equals middle swapping outer ends left portions 
invariant workable symmetric version leads clearer code index moves scan lesser elements swap equal elements element pointed bya greater element 
move similarly swap elements pointed adjust pointers continue 
wegner proposes exactly invariant maintains complex way exchanges 
reaching state swap equals ends back middle 
program shows integer quicksort employs split partitioning 
brevity uses random partitioning element 
split partitioning usually efficient 
elements distinct swaps pairs elements order 
equals predominate wastes time swapping back middle 
may amortize effort recursive calls equal elements 
arrays random zeros ones final engineering sort function void int int int return rand break min min program 
integer qsort split partitioning quicksort split partitioning program twice fast seventh 
fat partitioning allows alleviate drawback programs 
disorder induced swapping partition element costly input ordered reverse near reverse 
try example see 
swapping program copies partition value auxiliary variable trick helps speedup impressive order magnitude 
average degrades performance slightly partition scan visit elements 
justify small loss average speed percent final program psychological grounds fat partitioning place users complain easy inputs don sort quickly 
improvements ingredients combine split partitioning adaptively sampled partitioning element 
program incorporates additional features speed portability 
macro macro set appendix 

appendix arranges keep partition value temporary variable program convenient program 
bentley mcilroy 
quicksort efficient large arrays overhead severe small arrays 
old trick sorting small subarrays insertion sort 

guard recursive calls quicksort 

program calls swap function loop bring equal elements middle array call new function 
data highly repetitive keys saves percent sorting time 

program contains integer constants choosing insertion sort various partition methods 
values tuned home machine settings appear robust 
range consists single integer eliminated left adjustable machines larger ranges percent better 

vax object code seventh edition qsort occupies bytes berkeley qsort requires kilobyte 
early version sort grew excessive kilobytes 
help space profiler displays number bytes devoted source line beat code kilobyte 
largest space reductions came moving code macros functions 

size parameters conform prototype standard header file parameters 
conformance require casts 
type mismatches usually benign program verbatim library routine systems 
adopted customary improvements 
managing private stack cut stack space nearly variables level 
sorting larger side partition eliminating tail recursion reduce worst case stack growth linear logarithmic 
trick worth effort 
expected stack size logarithmic stack negligible compared data bytes 
tests described section stack depth reached times minimum possible depth 
worst case performance important quicksort wrong algorithm 
quick memory fault preferred wasting weeks cycles worst case run 
known roads optimization traveled 

sedgewick big final insertion sort little insertion sorts bottom recursion 
replaces bookkeeping operations single comparison array elements 
wins mix cost model loses 

ends array gain speed mix cost model lose specification anyway 

various improvements insertion sort including binary search loop unrolling handling special case helpful 
simplest code fastest 

elaborate sampling schemes choose partitioning element effective 

declined special case ifdef register tuning particular machines compilers see cases win 
certifying performance heed wirth advice evident sorting basis quicksort somewhat gamble aware may afford engineering sort function lose bad luck strike assurance qsort degrade inputs 
emulated knuth approach testing tex get frame mind manage write code think turn embed constructions comparatively simple qsort concerned performance void qsort char size size es int cmp char pa pb pc pd pl pm pn pv int word size es insertion sort smallest arrays pm es pm es pm es pl pm pl cmp pl es pl pl es swap pl pl es return pm es small arrays middle element pl pn es big arrays es pl med pl pl pl cmp pm med pm pm pm cmp pn med pn pn pn cmp pm med pl pm pn cmp mid size med pv pm pv points partition value pa pb pc pd es pb pc cmp pb pv swap pa pb pa es pb es pc pb cmp pc pv swap pc pd pd es pc es pb pc break swap pb pc pb es pc es pn es min pa pb pa pb min pd pc pn pd es pb pn pb pa es qsort es es cmp pd pc es qsort pn es es cmp program 
final qsort see appendix macro type definitions bentley mcilroy dist sawtooth rand stagger plateau shuffle switch dist case sawtooth case rand rand case stagger case plateau min case shuffle rand 
type int double test copy copy test reverse reversed copy test reverse front half reversed test reverse back half reversed test sort ordered copy test dither add 
qsort certification program pseudocode correctness certifier produces call performance profile generates adverse inputs including hard cases literature sorts complains uses comparisons 
tests ints doubles assess different treatments partition element 
details sketched 
function counts number comparisons reports cases number exceeds lg typically 
number comparisons huge typically sort aborted longjmp 
program lists different values qsort recursively calls lesser values flush bugs lurking near algorithmic breakpoints 
function test checks answers trusted sort bugs way 
performance test reported organ pipe bug seventh edition qsort discovered quadratic time random zeros ones problems berkeley code 
instance mod sawtooth front half reversed ran factor slower expected 
contrast program proved quite robust program expected heapsort merge sort 
number comparisons program exceeded warning threshold lg fewer percent test cases long size keys fewer percent 
number exceeded lg consistently adverse tests reversed shuffles 
comparing sorts compared main competitors seventh edition program pleasantly short despite elaborate partition selection method 
central function comprises lines code versus seventh edition berkeley 
course quadratic behavior possible 
generate inputs quicksort consider key values unknown initially 
code selecting partition element assign values increasing order unknown keys encountered 
partitioning code unknown keys compare high 
engineering sort function table ii type vax mips th edition berkeley new th edition berkeley new integer float double record pointer string counts source pretty printed utility lines respectively 
program exhibits quadratic behavior simple inputs predecessors 
assess timing ran programs computers disparate architectures vax mhz mips kilobyte data instruction caches secondary cache megabyte compiling 
table ii reports times seconds sort integers chosen randomly range testbed input types 
time average runs 
machines qsort strictly faster berkeley function turn faster seventh edition function 
faster 
running time improvements vary machine data type percent factor twelve 
biggest factors due largely better swapping described appendix 
event new code represents improvement adopted lab berkeley 
considered qsort implementations quicksort 
mcilroy merge sort guaranteed log worst case performance optimally adaptive data residual order runs highly nonrandom certification suite twice fast program requires additional memory 
ancient little known modification heapsort due floyd uses lg comparisons requires swaps times quicksort 
algorithms beat qsort contexts lose balance function remains implementation choice 
illustrate cost interface benefits optimizations program specialized ways 
specialization sorts pointer sized objects eliminating parameter es reducing cost swaps 
specialization sorts integers eliminating parameter cmp overhead calling 
table iii compares specializations basic program sorting random integers 
conventional vax useful specialization eliminating overhead calling cmp 
highly pipelined mips useful specialization simplifying swap code eliminates conditional branch 
relative simple program improvements program med pay modestly 
surprising improvements intended retain efficiency face nonrandom inputs inputs comparison expensive 
random integers demands 
program variables depends heavily macros 
observing ken thompson extended program simpler direction gives highly consistent performance 
thompson program uses median partitioning inner procedure function parameters swapping comparison iteration tail recursion 
compiles half space program runs percent slower average 
low entropy inputs program beats bentley mcilroy table iii cpu seconds sort vax mips program specialized toes sizeof char specialized basic integer quicksort program dramatically 
comparison counts summed certification suite differed factor lies justification complications program 
added new tricks quicksort bag adaptive sampling scheme choosing partition element new partitioning algorithm fast swapping code appropriate cost model 
mixed old tricks ignored arrived champion program 
techniques apply immediately sorting selection algorithms 
history algorithm illustrates lessons apply sorting simplicity 
key performance elegance special cases 
terrible temptation tweak resisted payoff really noticeable 
profiling tools 
function time profiler tells cpu cycles go profiler tells 
cost model gives estimates key operations 
algorithm animation system movies sort functions 
testbeds timing debugging 
tiny driver gives glimpse program complex testbed exercises interesting ways 
testbeds check correctness count comparisons measure cpu times 
testing certification 
correctness performance key routines validated certification programs 
grateful helpful input daniel ken clarkson steve fortune chris fraser eric grosse dave hanson andrew hume david johnson brian kernighan john peter mcilroy bob sedgewick ken thompson howard trickey peter weinberger 
appendix tuning swap function tuning issues swapping sensitive differences hardware compilers 
table iv shows widely swapping vary 
entry gives times swapping byte words line entries give times subroutines swap byte strings word wise byte wise 
vax world predictable inline swap fastest function call overhead subtracted chars take times long swapping 
mips machine time ratio 
factor size ratio long char second factor engineering sort function table iv cpu microseconds swap vax mips inline long bytes long bytes char bytes long bytes char due cache interference writing byte word read 
seventh edition wise quite slow machine 
table iv leads prefer line swaps swapping word sized chunks 
important special case word sized objects typically pointers integers swap line 
complicated swaps call function turn distinguishes objects occupy exact number properly aligned words 
chosen long generally appropriate word size 
kind swapping variable value single word swaps general swapping words swapping bytes 
variable set macro typedef long word define sizeof word power define es char es es swap function macro chooses function call line exchange 
define exch define swap es void exch word word macro swaps sequences records 
define function called macros straightforward 
include static void char char size int word exch word word char exch strange formula check data size alignment works cray computers plausible code long es sizeof long fails significant part byte address occupies significant part 
bentley mcilroy explained opportunity equal elements prefer store partition value line swapping position 
improvement inconvenient element size fixed adopt important special case word size objects 
point line whichever 
macro setup define pv pm pv swap pv pm pv char word pm 
hoare quicksort computer journal 

algorithm communications acm 

kernighan mcilroy eds unix programmer manual th edition bell telephone laboratories murray hill nj 
republished holt rinehart winston 

bentley software trouble qsort unix review 

bentley software history heapsort unix review 

american national standards institute american national standard information systems programming language ansi new york 

sedgewick quicksort phd thesis stanford university 

sedgewick implementing quicksort programs communications acm 

sedgewick quicksort equal keys siam comp 

sedgewick analysis quicksort programs acta informatica 

sedgewick algorithms addison wesley reading ma 

knuth art computer programming volume sorting searching addison wesley reading ma 

rivest knuth bibliography computer sorting computing reviews 

bentley programming pearls addison wesley reading ma 

knuth structured programming goto statements computing surveys 

bentley kernighan van wyk elementary cost model unix review 

fraser hanson retargetable compiler ansi acm sigplan notices 

theory practice construction working sort routine bell system technical journal 

singleton algorithm efficient algorithm sorting minimal storage communications acm 

weide space efficient line selection algorithms computer science statistics eleventh annual symposium interface pp 


mcilroy optimistic sorting information theoretic complexity proceedings fourth annual acm siam symposium discrete algorithms austin pp 


petersson moffat framework adaptive sorting proc 
third scandinavian workshop algorithms theory ukkonen eds springer verlag lecture notes comp 
sci 
pp 


dijkstra discipline programming prentice hall englewood cliffs nj 

wegner quicksort equal keys ieee transactions computers 

wirth algorithms data structures programs prentice hall englewood cliffs nj 

knuth errors tex software practice experience 

comments nature automatic quadrature routines acm transactions mathematical software 
