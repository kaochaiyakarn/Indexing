road utopia generative programming don batory department computer sciences university texas austin austin texas batory cs utexas edu software engineering lies automation exploit combined strengths generative programming domain specific languages automatic programming 
areas infancy spectacularly successful example combination realized years ago relational query optimization 
chart successes mindset database researchers generate efficient query processing programs automatically 
argue road successfully followed road generative programming domain specific languages automatic programming communities traversing 
just structure matter fundamental chemistry physics structure software fundamental computer science 
term structure mean modules modules composed build programs 
unfortunately structure software understood 
software design process structure application defined art form 
long remains abilities automate software development software engineering true engineering discipline limited 
goal create mathematical science software design 
need create general purpose theories customized software synthesized automatically 
object oriented models adequate implement programs manually higher level representations programs required program synthesis 
theories embody advances generative programming gp 
want understand programs domain generated automatically 
want generators synthesize programs hard 
shared goal generative programming metaprogramming skeleton communities creating theories program generation just ad hoc set implementation techniques essential 
need advances domain specific languages dsls special purpose programming languages extensions general purpose languages allow 
author note text keynote presentation dagstuhl seminar domain specific program generation march 
quotations taken pre seminar surveys identified key research issues 
programmers easily express programs terms domain specific abstractions state machines ejb declarations 
want programming java years 
want elevate program specifications compact domain specific notations easier write understand maintain 
need advances automatic programming ap 
extreme gp dsls 
challenge ap synthesize efficient program declarative specification 
hard problem early researchers abandoned ap existing techniques simply scale programs lines 
ap undergoing renaissance need fault tolerance critical 
advances simultaneously fronts impossible 
exists spectacular example gp dsls ap fundamental area computer science 
ironically achieved time giving ap 
area databases result relational query optimizers 
review successes mindset database researchers generate efficient query processing programs automatically explain road followed successfully road gp dsl ap communities traversing 
cite lessons learned chart road map follow achieve comparable successes domains 
utopia name objective lies road 
lessons learned lessons learned relational query processing relational queries expressed sql select statements 
parser translates select statement inefficient relational algebra expression query optimizer rewrites expression equivalent expression better optimal performance properties code generator translates optimized expression executable program 
sql select statement declarative dsl parser inefficient relational algebra expression optimizer automatic programming sql classic example declarative dsl 
language specific tabular representations data 
code generator maps relational algebra expression executable program example gp 
query optimizer key efficient relational algebra expression fig 

relational query optimization code generator generative programming efficient program ap searches space semantically equivalent equations locate equation optimal performance characteristics 
relational query processing instance powerful successful paradigm researchers gp strive replicate domains 
achieved utopia 
road cognitive systems world changes quickly applications need adapt changes quickly 
program generation useful link long chain calton pu 
software evolution inevitable evolution part maintenance 
maintenance expensive part program life cycle 
minimize costs ideally automate maintenance tasks possible 
cognitive systems exciting area contemporary research 
cognitive system program performance improves gains knowledge experience 
effect program automates maintenance tasks 
relational optimizers 
turns relational optimizers cognitive systems 
query optimization relies cost models driven database statistics 
example statistics include number tuples relation selectivity predicates fraction relation tuples satisfy predicate length attribute values statistics change time data inserted removed tables 
keeping statistics date key problem optimizer maintenance 
interestingly optimizers simple ones refresh database statistics automatically 
generated query evaluation programs execute statistics gathered data retrieved refresh update previously stored statistics 
allows optimizer improve programs subsequently generates 
way optimizers learn new behaviors automatically cognitive systems 
optim database statistics efficient relational algebra expression replicated domains utopia 
road cognitive programming code generator efficient program fig 

cognitive programming relational query processing generating non code artifacts cope non binary non code artifacts manuals tutorials help files specific generated product ulrich eisenecker generating non code artifacts important problem reason generating source code target program insufficient 
architects routinely multiple representations programs express system design representations process models uml models makefiles documents 
productivity gains generators automatically synthesize source code negated representations needed integrating program larger system written manually 
clearly needed representations program generated 
experiences database researchers regard 
interestingly relational optimizers multiple representations programs 
fact different representations maintained relational algebra operator 
source code representation operator second cost model representation needed optimization 
relational algebra expression join select select optimizer derives cost model program composing cost model representations operators cost join cost select cost select cost similar manner optimizer derive source code representation expression composing code representations operators code join code select code select code modularity structure imposed code code generators exactly cost models align operator boundaries 
optimization optimizers synthesize cost models program evaluate 
search space equivalent programs synthesize cost model program cost model estimate performance program identify program efficient 
code synthesized efficient program 
need multiple representations approach sufficiently developed general purpose needs 
suggests possible synthesize arbitrary representations programs algebraic approach 
quality performance cost model estimates performance estimate quality especially modern hierarchical parallel systems needed holger bischof especially important rules methods composing skeletons large scale applications reliable performance prediction sergei quality performance estimates long known critical identifying access plans query optimization 
interestingly cost estimates query optimizers historically simple crude averages 
known way joins large estimates known poor 
performance estimates page caching knowing pages disk cache highly unreliable 
despite limited capabilities relational optimizers done quite 
fortunate sure domains query processing require precise estimates 
case problems solved utopia 
road extensibility domain algebras key technical problem expressiveness fix general purpose set skeletons read operators covers interesting structures 
different skeleton sets different application domains skeleton frameworks studied 
programming model skeletons provide open source skeleton libraries frameworks marco dsls best understood terms negative space don just important 
avoid mission creep languages shriram krishnamurthi domain algebras closed meaning fixed set operators domain algebras open allowing new operators added subsequently 
fundamental question answer immediately obvious 
experience database researchers quite interesting respect topic 
appreciate lessons learned lessons learn instructive see database researchers right 
success relational query optimization creation science specify optimize query evaluation programs 
specifically researchers identified fundamental operators domain relational algebra represented programs equations expressions compositions operators defined algebraic relationships operators optimize equations 
compositional programming holy grail programming paradigms defines set building blocks build different programs 
key property compositionality possible algebraic models 
compositionality hallmark great engineering relational query optimization example 
return open closed nature domain algebras 
relational algebra originally defined project select join cross product operators 
years definition closed 
time people understanding implications classic selinger system optimizer revolutionized query evaluation set standard relational optimizers decades 
dealt queries formed compositions basic relational operators 
onward series papers approximately titled useful operator add relational algebra 
operators data cube aggregation transitive closure parallelization query evaluation programs map sequential program parallel program new operators time series just mention 
relational algebra complete 
obvious closed complete 

true domains 
database systems deal open algebras new operators added needed type extensible hooks provided optimizer account peculiarities new operators hellerstein user defined queries 
core model remains fixed query optimization algebra programs represented equationally algebraic paradigm simply powerful abandon 
implications open algebras synthesis system solves non trivial problems usually gets lost vast search spaces spanned different ways derive specific program set possible programs satisfying specification 
control search major problem specifically comparison choice different equivalent programs bernd fischer represent space possible optimization alternatives component read operator best combination optimizations chosen component paul kelly fact open algebras common impacted query processing research 
guess database community lucky 
original optimizers supported initial set relational operators 
constraint query optimization amenable dynamic programming solution admitted rea heuristics 
result database people legitimately claim optimization algorithms guaranteed find best query evaluation program 
guarantee absolutely crucial early acceptance 
prior query optimization heuristics results unsatisfying 
providing hard guarantees difference world acceptance relational optimizers 
ironically advanced databases today rule optimizers offer fewer guarantees 
database people willing live 
utopia 
road domain analysis 
key problem exactly common algorithmic structures underpin parallel algorithms interesting 
reasonable expect generic collection exists appropriate look domain specific ways murray cole target domain core question generator technologies 
analysis domain called domain analysis identifies building blocks programs 
generators implement output domain analysis 
exactly domain analysis output 
today domain analysis meaningless term 
oddly agree domain analysis important 
instance domain engineering synthesis system useful users able generate large number non trivial programs implies cover substantial part domain interest 
formalizing organizing domain major effort building synthesis system bernd fischer need methodology systematically map domain analysis dsl design implementation charles consel need systematic way design dsls krzysztof czarnecki improve existing methodologies dsls laurent database people 
different outputs domain analysis 
defined relational algebra set operators compositions defined domain query evaluation programs 
defining domain algebra equivalent defining domain programs generate 
related analysis produced sql language defined declarative specifications data retrieval hid relational algebra 
database people created integrated 
general separable tasks 
define dsl map program directly introducing optimizations way 
define dsl map algebra equations optimize 
brings fundamental result hierarchies dsls optimizations 
time saw result jim neighbor thesis 
idea simple programs written dsls 
transform map unoptimized dsl program optimized dsl program domain abstractions visible 
stated way optimize abstractions compiled away 
optimized dsl program translate unoptimized program lower level abstraction dsl repeat process get machine code 
zig zag series translations characterize hierarchies dsls optimizations 
unoptimized programs dsl program unoptimized dsl program unoptimized dsl machine program code optimized dsl program optimized dsl program optimized dsl program fig 

dsl hierarchies optimizations depicts view relational query optimization 
sql select statement 
parser produces unoptimized relational algebra expression 
query optimizer optimizes expression produces optimized relational algebra expression 
code generator translates unoptimized java program java compiler applies optimization techniques produce optimized java program 
gp occurs mapping levels abstraction ap occurs optimizing level abstraction 
commonly optimizations done internally dsl compilers 
dsl program mapped unoptimized internal representation representation optimized translating executable 
point different outputs domain analysis different optimizations occur various translations 
significant optimizations assert occur architectural algebraic level 
utopia 
road ized algebra expression ized java program parser parser query optimizer code code generator generator java optimizer sql statement optimized algebra expression optimized java class file software design software technology domain specific programming involves getting interface right getting split right separate domain specific domain independent chris lengauer essential component software standardize defined interfaces wolfgang fundamental problems software design 
ll sketch common problem show database approach solves 
need understand relationship operator compositions layered designs 
depicts layered design layer bottom layer sits atop layer atop operator implementations correspond layers layers abstraction 
design corresponds composition layers implement respective operators 
general systems conceptually physically layered 
interfaces delineate boundaries operators layers interfaces java interfaces dsl specifications 
example 
suppose program maintains set records form age tag records stored ascending age ordered linked list 
record age tag record age tag 
periodically want count records satisfy predicate age tag code retrieval 
try write ordered list data type 
retrieval simple examine record apply full predicate 
program easy write 
unfortunately inefficient 
int count node node container node null node tag node age count node node try exploits property ordered lists 
observation skip records don satisfy key predicate age soon find interfaces fig 

layering interpretation composition fig 

linked list example record satisfies predicate know records past point satisfy predicate need apply residual predicate tag remaining records 
leads loop program 
takes longer write longer debug result efficient 
int count node node container node null node age node node node null node tag count node node alternative java programmer ask java library 
library classes write code 
sdk implements 
desired subcollection extracted operation called tail 
iterating extracted elements applying residual predicate produce desired result 
code shorter int count ts elements ts tail iterator iterator hasnext node node node node tag count unfortunately code slower slower original list implementation 

reason creates index records sorts 
apply tail operation creates index extracted elements 
index construction slow 
raises classical dilemma want execution speed stay customized code 
want write code fast libraries 
problem selecting right interfaces right abstractions classical situation dsls gp 
review database solution problem 
depicts code wrote 
users write code users left horizontal line user program traversal loop 
look happens swap data struc users writing user program write ds generic code tures change record ordering 
traversal loop program breaks 
reason implementation details specifically code code record storage order data structure leaked program 
details change program change 
importing generic data structure generated need higher level bad better tions dsl specify data structure traversals 
means fig 

generate users write data structure generic code rest loop data structure generated 
users write code right horizontal line 
database solution sql specify retrieval predicates declarative relation implementation specifications implement container 
container relation 
predicates cursors iterators declaratively specified sql sql compiler generates cursor iterator class specific retrieval 
user program data structure relation implementation independent 
exploits dsls algebraic optimizations relational optimizers amazingly code user write simpler generics 
code efficient 
cursor new cursor int count count utopia 
road scalability algebraic approaches algebraic approaches scale 
face query evaluation programs data structures tiny 
algebraic approach synthesize large systems 
pack bags try 
interestingly scale 
brings key result scaling 
feature oriented domain analysis pioneering kang 
deals product lines producing family related applications composing primitives 
goal synthesize large application primitives 
primitives 
consider thought experiment 
suppose programs want 
describe 
shouldn say dlls object oriented classes uses 
care 
describe program features 
feature characteristic useful distinguishing programs family related programs 
example say program features program better features reason clients understanding requirements see features relate requirements 
common way specify products set features 
software common lots engineering disciplines 
example go dell web site 
ll find lots web pages provide declarative dsl specifications menu lists specify features want customized pc 
completing specification initiate order 
want software 
program synthesis vision evolved concurrently 
program package classes class class 
algebraic definition composition features feature operators 
example starts encapsulates fragments class class 
added extends class class introduces class extends classes 
composing features encapsulate fragments classes package fully formed classes synthesized 
class class class class fig 

program algebraic approach consistent age old concept step wise refinement asserts complex program constructed simple program adding features time 
means feature operators implemented program refinements 
program created starting simple program 
program extended classic example step wise refinement 
example problem illustrates scalability algebraic approaches 
students building customized tools processing programs written extensible java languages 
tools belong integrated development environments ides 
gui shown declarative dsl 
allow architects select set optional java extensions want left panel set optional tools want middle panel pressing generate ton selected tools synthesized specified dialect java 
generating java loc simple specifications internally driven equations 
algebraic approaches scale limit size system produced 
utopia 
road tool support fig 

declarative gui interface customized ide specification generation biggest technical problems metaprogramming generative programming directly supported programming languages 
cleaner safer mechanism ab template mechanism type system clearly needed andrew lumsdaine big technical challenge getting infrastructure developing generators includes extensible programming languages transformation systems metaprogramming libraries yannis smaragdakis type safe program generation efficient implementation multi stage languages important walid taha long ago realized scale programs impact tools 
domains operators implemented comparatively simple macro expanding techniques 
shows pair classes implement bare bones singly linked list program shown black non italic font 
applying doubly linked list operator program extended program list 
extension code shown red italic font 
relatively simple tools built achieve kind program rewriting 
surprisingly simple approach worked large applications 
smaller programs algorithm synthesis needed 
kestrel synthesizing scheduling algorithms synthesis optimization orbital algorithms nasa ames really impressive 
require nontrivial domain theories non trivial programming infrastructure 
simple data structures domain requires sophistication macros 
class list node node reason domain specific optimizations level relational algebraic rewrites break encapsulation abstractions achieve better performance 
operations functions seemingly complicated 
oddly synthesis large systems different requirements 
architects generally don care low level optimization issues 
problem gluing operators breaking encapsulations optimize rarely done 
years thought lisp quote unquote features critical generative tools 
think domains don need sophistication 
tools synthesis large different synthesis small 
pleasing result way conceptualize program families features operators implemented domain dependent 
lots ways implement operators macros lisp quote unquote program transformation systems objects matter choosing right implementation technology 
process identifies fundamental operators domain largely independent operator implementation 
utopia 
road verification void insert node null prior null class node node string value node prior fig 

refinement singly linked list doubly linked list kinds verifications appropriate feasible kinds languages approaches appropriate carry verifications 
languages designed facilitate verification julia lawall want guarantees generated programs 
want proofs properties algorithms implement operators violated operators composed 
lessons learned database researchers 
far tell verification issue 
surprising 
historically trivial synchronization issues real time issues query evaluation programs 
query evaluation programs database systems scale performance correctness issues 
want point important verifying programs features 
properties preserved compositions local properties features 
want prove feature properties violated composition 
recommend reading li get flavor important line 
utopia 
road technology transfer concepts accessible joe parallel programmer knows fortran mpi threads unhappy murray cole need reduce necessary expertise generative programming metaprogramming tools dsl definition implementation 
current systems craft david technology transfer tough issues 
far technology transfer hardest problem 
education key 
demonstrate gp dsls ap relevant beneficial 
constantly looking new applications demonstrate value 
sadly fear large companies microsoft see advantage progress 
heard year lag discovery ideas practice think things longer software engineering simply inertia great 
utopia 
road 
relative merits different programming models prem devanbu language design hiding meta level important problem joerg economic issues cost time market maintenance flexibility understood chris lack issues 
issue raised important 
progress field hinges economics 
understand economic ramifications benefits transfer ideas industry slow 
epilog solved previously mentioned problems utopia 

utopia small place easy people different backgrounds different opinions fundamental problems principles software engineering amazingly stan am convinced problems concretely defined solved recognize solution big advance 
believe area state agreement constitute big step yannis smaragdakis response science 
signs road strange obscure 
expect 
observations results difficult impossible explain 
eventually sense 
don look ll just drive right past utopia knowing missed 
message simple database researchers got right understood significance generative programming domain specific languages automatic programming lots concepts relationships 
software engineering challenges designing building programs 
software engineering require making programs class objects algebras operators manipulate programs 
ideas place reach utopia 
challenge replicate success database researchers domains 
believe respective communities generative programming metaprogramming skeleton communities represent software engineering today 
hope see road 
balzer fifteen year perspective automatic programming ieee transactions software engineering november 
batory malley design implementation hierarchical software systems reusable components acm october 
batory chen robertson wang design wizards visual programming environments genvoca generators ieee transactions software engineering may 
batory scaling step wise refinement international conference software engineering icse 
batory lopez martin generating product lines product families automated software engineering conference 
planware domain specific synthesis high performance schedulers automated software engineering conference 
brachman systems know re doing ieee intelligent systems vol 
nov 
dewitt gamma database machine project ieee transactions data knowledge engineering march 
gray data cube relational aggregation operator generalizing group cross tab sub totals data mining knowledge discovery 
griss implementing product line features composing component aspects software product line conference denver august 
habermann modularization hierarchy family operating systems cacm may 
hein schlick martins applying feature models industrial settings software product line conference august 
hellerstein predicate migration optimizing queries expensive predicates sigmod 
ioannidis christodoulakis propagation errors size join results acm sigmod 
ioannidis computation transitive closure relational operators large database conference 
kang cohen hess nowak peterson 
feature oriented domain analysis feasibility study 
technical report cmu sei tr software engineering institute carnegie mellon university pittsburgh pa november 
li krishnamurthi interfaces modular feature verification automated software engineering conference 
neighbors software construction components 
ph 
thesis technical report tr university california irvine 
selinger astrahan chamberlin lorie price access path selection relational database system acm sigmod 
stickel waldinger lowry underwood deductive composition astronomical software subroutine libraries automated deduction bundy ed springer verlag lecture notes computer science vol 

stonebraker inclusion new types relational data base systems ieee data engineering conference los angeles ca february 

