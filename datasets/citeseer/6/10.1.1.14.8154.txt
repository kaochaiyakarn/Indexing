large scale newscast computing internet ark jelasity maarten van steen vrije universiteit amsterdam cs vu nl internal report ir october introduces newscast model computation large scale computing internet 
engine realizing model lazy fully distributed information propagation protocol participants responsible membership management communication 
maintains constantly changing communication graph participants 
graph useful emergent properties small diameter sufficiently random structure deploying special purpose protocols achieve properties 
adding new participant address arbitrary member needed removal action necessary 
provide theoretical empirical evidence simple lightweight newscast computing engine extremely scalable robust 
suggest interesting application areas including information dissemination monitoring large systems resource sharing efficient multicasting 
keywords epidemic protocols dissemination oriented communication large scale distributed systems probabilistic reliable multicasting complex adaptive systems vrije universiteit department computer science internet gradually making transition original role computer network distributed system 
contrast computer network essentially supports data transfer form messages distributed system aims provide single coherent view potentially large collection independent computers 
essence distributed system aims underlying resources available applications distribution data processes control transparent 
distribution transparency quite successfully realized local area systems distributed systems span local area network 
combining scalability transparency difficult simply trying port local area solutions networks internet generally fail reasons 
existing solutions client server architecture scales badly number clients grow 
alleviate scalability problems special measures client side caching server replication need taken 
applying scaling techniques may require considerable development effort notably strong consistency issues stake 
second reason local area solutions simply ported large scale networks solutions powerful multicasting facilities underlying hardware 
facilities available internet generally rendering original solution useless 
special measures need taken adopt original solution changes 
example design pgm scalable reliable multicast protocol strongly motivated need support local area publish subscribe solutions deploy multicasting 
main advantage multicast solutions client server solutions inherent decentralized nature 
solutions particularly attractive large scale networks building scalable reliable multicasting schemes notoriously difficult 
fortunately matters improve dealing probabilistic schemes hard guarantees concerning delivery multicast message 
multicast message required eventually delivered high probability current group members appears scalable solutions quite feasible 
key idea underlying probabilistic multicasting simple scheme reliably disseminating information 
epidemic protocols shown highly effective purpose sufficient information available group membership 
describe novel gossip scheme information dissemination distinguishes similar solutions simplicity scalability 
approach deploys lazy propagation information simultaneously disseminating membership application specific data 
function information propagation protocol maintaining stable environment minimal effort provide certain guarantees interfaces applications 
call environment newscast model computation 
applications model include evolutionary computation ec subfield computational intelligence originally motivated research probabilistic effective reliable multicasting large scale distributed file sharing resource discovery allocation 
important distinguishing feature scheme requires extremely simple membership protocol 
join group process contact arbitrarily chosen member merely copy member list current neighbors 
messages need sent leave group process merely stops communication 
model computations performed agents main activity generate process news 
exchanging news form communication 
news item generated agent overridden item agent agent processed 
communication model generative sense agents temporally referentially uncoupled 
words news recipient need known exist time news item published news item need explicitly identify sender receivers 
shall see referential coupling easily implemented newscast applications necessary 
key underlying idea model works completely statistical basis 
news agents supposed large quantities 
relevant individual news items agents dynamics system 
dynamics leads stable equilibrium control follow changes environment information dissemination react events quickly reaching special state monitoring evolve direction problem solving 
case ant colonies swarms insects applications define dynamics system defining behavior components way leads desired macro behavior 
applications inherit feature graceful degradation extra investment 
words parts system damaged fail properly dynamics continue similar system come partial complete halt 
possible write badly designed applications model see newscast applications arbitrarily partitioned resulting parts simply continuing computation re merged 
implementation newscast model rely central services servers 
main contribution highly reliable fully distributed dissemination scheme implementing main functions information dissemination membership management 
scheme scale extremely large networks internet 
features model section iii emergent implementation 
example full membership list known system small portions stored distributed fashion 
mathematical analysis simulations support claims scalability robustness prove specifications newscast model hold 
demonstrate simple local mechanisms needed establish highly robust communication graphs exhibit desirable small world properties high connectivity small diameter 
section ii gives overview related 
section iii gives formal specification newscast model computation 
section iv elaborates possible types applications 
gives classification illustrated examples including information dissemination file sharing distributed resource allocation 
section describes implementation model epidemic protocol 
theoretical simulation results prove engine fulfills requirements specified section iii 
ii 
related different ways view order compare systems 
view focus model computation describes operations semantics offered applications 
concentrate algorithms mechanisms model computation realized 
intentionally provided explicit description newscast model computation 
description important application developers comparable separation services protocols models computer networks 
functional perspective newscast model best compared cheriton coined dissemination oriented communication 
systems sender receiver explicitly establish connection 
process attaches channel need reveal identity 
channel generally allows communication number receivers potentially large 
model currently deployed publish subscribe systems channel associated specific subject see 
advanced approach content addressing principle arbitrary attribute value pairs specified express receiver interest specific messages 
newscast model forms basis dissemination oriented communication deploying lazy message propagation essentially broadcast system 
important distinction existing approaches broadcasting achieved special application level measures 
particular sender need repeatedly pass message news agency need deployed assist message propagation 
filtering subjects actual message content done receiver side 
sense newscast model different core components internet wide peer topeer systems chord pastry tapestry 
systems provide key routing searching possibly replication improve fault tolerance client perceived performance 
major difficulty systems content searching issue solved newscast model nature potentially cost higher resource usage 
implementation perspective newscast model gossip systems developed 
systems deploy epidemic protocol disseminating information collection nodes 
known examples dissemination style replicated databases probabilistic multicasting applications failure detection 
important drawback gossip systems order epidemic protocol effective iteration requires node communicates randomly chosen node 
words iteration set neighbors node corresponds uniformly selected subset nodes 
consequence necessary know entire set nodes turn leading scalability problems 
special membership protocol needed nodes join leave keeping randomness properties underlying communication graph 
contrast newscast model node fixed size partial view total member set 
show order node join contact current members 
just iterations protocol underlying communication graphs exhibit properties 
likewise leaving simple requires additional communication whatsoever 
words newscast model requires minimal membership protocol think contacting existing member joining 
see major important improvement existing gossip systems 
perspective information dissemination research probabilistic reliable multicasting described closest multicasting application newscast computing 
similar approach nodes model maintain partial view entire system single node global knowledge nodes connected 
node gossips timestamp creation time news item content news content possibly empty table fields news item 
messages nodes partial view doing dynamically adapts current view 
authors show size partial views log total number nodes 
important difference newscast model probabilistic reliable multicasting constructing maintaining random graph see 
sophisticated membership protocol needed 
advantage protocol allows nodes grouped network proximity account property explored model 
hand protocol relatively complex 
unclear extent randomness underlying communication graphs maintained proven verified 
experience believe caution place 
example initial assumption newscast computing leads random communication graphs turned false 
graphs small world topology result line analyses experimental results reported complex networks 
iii 
probabilistic newscast computing main building blocks newscast computing application collective agents news agency 
basic idea news agency asks agents regularly news provides news agents collective 
definition counts news application dependent fact important aspect application 
agents live lives perform computations listen sensors news computations completed information collected provide news agency news asked 
examples apply framework define useful applications section iv 
note news agency sort server model computation functionality implemented fully distributed fashion discuss section definitions operators operators applied news agency exclusively agents passive initiate communication news agency 
news agency applies operators news 
implemented agents called news agency regularly 
fields news item shown table able discuss semantics operators introduce notations 
denote cache size 
maximal size array parameter 
denote refresh rate 
defines time interval determines frequency operators called agent 
denote size agent collective 
note deal case intended normal setting operators defined follows 
method implemented agent 

return data unspecified type possibly null news agency initialize content field new news item see table 

news agency calls method times time units agent random variable poisson distribution 
expected value variance 
news 
method implemented agent 

return value 

news agency calls method times time units agent random variable poisson distribution 
expected value variance 
array news contains min random news items see table submitted agents collective 

news item agent collective 
agents represented 

guaranteed agent set defined news statistically independent agent set defined previous call 
guaranteed unspecified subset size represents unbiased random sample agents 

guaranteed news item news contains latest contribution corresponding agent 

guaranteed timestamp item news younger ct additional comments framework usual comments may help clarify basic concepts 
characteristic feature concept news 
term emphasize fact contribution agent immediately outdated contribution 
mean older submissions completely irrelevant 
means application optimal situation know latest news agent news better 
view consistency forms major difference shared memory consistency models piece information put shared memory count consistency defined model 
case old information treated differently thrown away item source available 
hand way information removed possible remove news items news agency directly 
model allows degree control information removal 
implementation keep returning empty content news 
news items eventually replace previous news items immediately news agency follows item specification 
time bound removal determined item 
major feature probabilistic nature 
agent control set news items receives control time reception 
note set news items time reception obeys probabilistic constraints 
point constraints represent sufficient basis quite diverse class applications discussed 
filter agent news agency processor external input data fig 

general organization agent 
sake completeness mentioned newscast computing engine described section allows size collective change dynamically number agents fluctuate lifetime application 
see removing agent requires action 
adding agent straightforward basically costs 
iv 
example applications core newscast application formed agents 
general organization agent relation news agency shown 
delivered news items generally passed local news processor passed filter selects items agent interested 
depending type agent processor generate new items passed news agency asked 
cases processor external input producing news items 
likewise output may depend previously accepted input produced output processor stateless 
organization distinguish types agents 
source agent produces news items independent items delivered news agency 
agents typically report information local resources resource usage case system monitoring information file content case file sharing 
sink agent merely consumes incoming news items provides news news agency 
typically sink agents attach external applications newscast system 
discuss application 
computing agent takes incoming news items input doing computation reports results news item 
computing agents typically aggregate results produced agents 
example case systems monitoring separate agents may process resource usage reports order attain information global status system 
information may fed back news system local measures taken optimize system 
repeating agent simply takes content incoming news item produces new item exactly content 
main purpose repeating agent simply ensure certain news items quickly spread agents 
information dissemination multicast important application newscast model reliable dissemination information 
simplistic approach collective source agents merely report states 
state agent defined weather sensors example consisting data pressure temperature looking news updates arbitrary agent receives connecting sink agent serves user interface get random selections sensor information 
proved items specification eventually receive information agent waiting time nt average 
statistical properties waiting time extensively discussed section 
better 
improve speed news item disseminated place system repeat certain types news receive 
fact implement multicasting scheme way 
suppose agent discovers important news tornado staying previous weather example 
initially time tornado known agent probability agent collective know tornado time know approximate consider agent know tornado time know probability learn 
give bound probability term assumption having unbiased random sample size item assumed news items maximal age ct probability reporting tornado item 
assumed called time units lower bound item 
cycles value starts converge zero quickly actual constant proves implementation shown section 
note fact called twice average seconds 
expression similar pull epidemic protocol assumes contact randomly chosen agent cycle check tornado information 
case implementation multicasting realized outside newscast model membership information gained news updates provided news agency 
operator return multicast address agent 
agent sees tornado hears multicast address sends information addresses received latest news update 
theoretical analysis approach done item tools developed 
accordingly probability reaching agent source lim log means case increased logarithmically going back epidemic style model implemented newscast model consider possible implement arbitrary intermediate solution lazy dissemination multicast scheme simply probabilistic repeat certain kinds news items different probabilities 
lazy case probability news item hot news rest news items epidemic multicast scheme 
file sharing applications popularity internet peer peer systems comes capabilities sharing files users completely decentralized fashion 
newscast system allows users easily share files 
agent assumed maintain local collection files willing share agents 
collection associated directory entry identifies describes single file 
different approaches newscast file sharing combined hybrid 
push approach operator agent passes local directory news agency 
directory repeatedly passed agency guaranteed eventually delivered agents 
assume local file collection changes guarantees local directory delivered date 
agent receives entry identifying file wants contacts owner file transfers file band local file collection able contact owner content field corresponding news item contain address 
agent apply filtering techniques prevent delivery entries interested 
push approach commonly applied modern file sharing peer peer systems 
disseminating information shared files user forced search files wants 
newscast system behavior mimicked pull approach directory wanted files passed news agency 
directory delivered agent having listed entries agent contacts agent identified directory allowing transfer required files local collection 
course approaches easily combined directory simultaneously list files agent willing share requested 
interesting aspect newscast model soon file popular different collections file easy find file 
due fact search soon delivered agent file 
hand presence popular files announced may waste network resources 
file popular agent longer announce presence accept requests file 
determining announcing presence file subject current research 
distributed resource machine application implemented distributed resource machine drm sketch briefly 
idea participating agents offer environment computational resources libraries perform computations 
collective consists different types agents controllers contributors observers 
content news items fields list commands resources 
observers sink agents attached software collects organizes displays information received 
agents provide user interface people want monitor system 
controllers normally controlled directly human system administrators 
implementation operator returns commands issued administrator time interval 
commands represent way drm controlled 
controller normally timestamp creation time news item content news content possibly empty id uniquely identifies agent address network address correspondent agent table ii fields news item stored correspondent 
observer 
vast majority agents contributor 
behave respect commands sources respect resource information 
operator returns content field contains commands agent received timestamp older bound addition list resources currently available computations 
behavior results effective multicasting commands disseminating information resources 
running computations access drm contributor launch computation 
computation allowed listen find resources needs start spreading accordingly 
drm currently implemented java easy transfer code implement certain security solutions 
newscast computing engine section presents fully distributed scalable implementation specification newscast model computation section iii 
core epidemic algorithm assume agent located host wide area network 
agent assigned local correspondent represents news agency point view agent 
correspondent run host agent 
correspondent local cache containing news items 
correspondent maintains additional fields news item cache address id shown table ii 
field address contains network address correspondent agent identified id field news item 
field id generated correspondent agent question uniquely identifies agent 
time units correspondent runs algorithm 
shows architecture 
algorithm similar traditional push pull epidemic protocol spreading database updates case fresh news items 
important difference correspondent knows complete member list random fraction 
importantly member list subject information dissemination 
partial member list known news items represented news items stored cache correspondent copy complete database news items knows small random part news items available system normal setting 
time plays important role algorithm global time synchronization 
pick random agent peer cache peer collective accessible 

cache add new agent 
remove items older ct cache 

peer 
peer cache peer 
agent peer cache 
cache peer cache 
keep newest item agent 

keep items timestamps 
fig 

algorithm run correspondent time units 
agent local agent correspondent serves implements required interface methods 
cache list correspondent uses storing news items 
parameter gives maximal cache size 
algorithm run passive participant peer correspondent step missing step lifted step 
correspondent agent correspondent agent news agency wan node wan node cache cache fig 

newscast computing architecture agents 
note normally huge number agents assumed illustration main concepts 
finer details agent see 
correspondents required 
keeping time consistent single cache necessary easily achieved exchanging local time exchanging caches correspondents modify timestamps received news items accordingly 
filling field id done calculating id agent call time constructing news item 
note id identifies agent address correspondent change lifetime agent 
membership management adding new correspondent news agency done initializing cache known addresses correspondents 
different ways get addresses explain section 
removing correspondent requires action fact handled node failure 
guaranteed step correspondent simply forgotten limited time compliant item specification see section 
furthermore shown section network sensitive node removal stability danger 
communication graph series knows relation correspondents time defines communication digraph directed graph vertex set contains correspondents 
correspondents iff address cache time denotes set neighbors defined edges directed clearly algorithm defines random series digraphs started information exchange sessions normally change set neighbors time choice peer random step algorithm 
series defined decreasing increasing number correspondents different ways algorithm running 
define communication graph get dropping orientation graph expresses possibility information flow 
recall information flow bidirectional independently initiator 
remaining part concentrate dynamic properties particular examine subseries 
motivation interval correspondent initiates exactly information exchange connection 
say time interval complete cycle executed 
simulations assumptions information exchange sessions run sequentially correspondent correspondent single threaded correspondent able finish communication initiates time interval length starting time 
information exchange session sufficiently short relative requirements achieved 
relatively low guaranteed calling frequency assumption unrealistic 
indicate parameters simulation possibly settings graph notation clear context 
statistical properties communication graph show graphs generated random series described traditional random graph models 
aspects theory random graphs understood introduce random graph model provide basis comparison 
adopt model introduced 
random digraph defined follows vertex chooses set random sources edges directed set random targets edges directed call digraph digraph 
edges chosen replacement graph edges jv write order provide basis comparison aware properties model chose relatively small differences result significant changes behavior 
example increase logarithmically log achieve probability limit reachability vertex specified source 
strong connectivity high probability probability 
words key feature vertex incoming edges number outgoing edges average path length clustering coefficient fig 

average path length fixed vertex left clustering coefficient right function collective size points connected solid line averages fixed vertex tr tr points connected dotted line averages vertices randomly generated 
symbols correspond respectively 
symbol means ltm size see section remain small constant 
note means drop orientation alternatively resulting undirected graph connected high probability 
examine properties relevant context random networks particular newscast computing engine average path length fixed vertex clustering coefficient 
properties degree distribution connectivity discussed context robustness 
average path length average minimal path lengths vertex 
graph connected value infinity 
clustering coefficient vertex fraction pairs neighbors neighbors 
shows properties communication graphs function average path length shows clear logarithmic growth 
important speed information dissemination depends mainly minimal path lengths network 
clearly shown relatively high clustering 
case model easy show clustering coefficient example 
tells assumptions randomness maintained sets neighboring vertices clear correlation 
properties indicate communication graphs small world structure defined short minimal path lengths combined high clustering 
sorts topologies tend emergent topologies result large number components interacting central control 
wide variety phenomena structures described small world graphs 
include www link graph author graph scientific publications social relationships food chains chemical reactions cells 
notable aspect results properties stable series conserved information exchange sessions 
seen comparing averages vertex series vertices graph values agree closely 
words matter graph look series see properties 
average path length node complete cycles lattice growing cycle growing cycle random average clustering complete cycles lattice growing cycle random fig 

convergence different bootstrapping methods 
experiments 
methods differ 
random lattice dimensional lattice vertices ordered linearly fv jj 
growing fv tr fv jv edge new vertex random old vertex clustering coefficients averages fixed vertices growing method omitted clarity similar 
bootstrapping convergence argue communication graph series sensitive initial conditions convergent 
means approach sensitive particular implementation bootstrapping way building actual news agency 
suggests system converges equilibrium state quickly disturbed external event instance 
property convergence validates approach starting simulations initial random communication graph paying special attention problem bootstrapping discussing properties communication graphs 
shows properties graph remain stable cycles ignored simulation started order support claim convergence simulation experiments conducted different bootstrapping methods see 
realistic random method realistic ones growing methods 
note rapid convergence clustering coefficient 
case growing methods clustering coefficient reaches final value way reaching maximal size 
evolution average path length vertex interesting 
limit value slightly larger corresponding random value spite large clustering small diameter illustrated 
lattice method started large average path length converges complete cycles 
take closer look growing method new vertex connected worst possible case server responsible accepting newly added correspondents 
new arrivals cycle cycle cache eventually filled newcomers partitioning results slight increase average path length due fact newcomers talk hold link newcomers hold links rest network 
final size reached cycle limit value average path length restored quickly 
protocol cope worst case scenario note efficient methods implemented easily closer method 
example server easily provide large lists larger members newcomers select connect initially 
addresses collected simply adding addresses flow cache database storing longer time stored cache 
conformance specification calling frequency case constraint satisfy refer 
items specification non trivial meet calling frequency item statistical properties news updates item 
freshness received news items item trivially satisfied step algorithm touch actual observed freshness simulations 
necessary step violate size specification item called creating sample smaller note specification assumes size collective constant 
extreme events serious damage agent removal significant growth temporary effect satisfaction specification simulation results stability suggested results robustness suggest 
calling frequency specification defines calling frequency item 
property important gives guarantee having large number connections short time interval extremely low probability fact practically zero 
probability having sessions time units example means expected happen days average 
network consisting nodes possibly low bandwidth network connection property essential 
constant member sum corresponds actively initiated information exchange connection passively received connections 
show relatively weak assumptions communication digraph property proved hold demonstrate empirically observed distribution close required 
communication digraph randomly generated algorithm time pick vertex randomly assume vertex probability value 
assume events completely independent 
expect assumption hold simply due fact algorithm vertices completely symmetric roles 
note assumption imply probabilities take information relationship account 
instance results clustering suggest neighbors higher chance point assumption holds vertex equal chance neighbor recall considering digraph 
assumption weaker assumption randomly drawn vertex set independently vertex 
assumption fixed vertex picked fixed vertex probability 
vertices pick complete cycle due independence assumption number vertices pick binomial distribution parameters 
distribution empirical probability information exchange sessions poisson fig 

information exchange calls correspondents time interval empirical probabilities come sample generated recording calls complete cycle fixed vertex series randomly generated 
average empirical variance maximum values respectively 
approximated closely poisson distribution large 
interested networks sufficient 
shows empirical distributions observed different collective cache sizes plotted poisson distribution 
cases similar confirming specification calling frequency holds acceptable accuracy 
news updates demonstrating item fulfilled easy subset size item refers specified 
indirect evidence usual verifying randomness 
purpose define random variable just number communication sessions news item member agent set size shows news update counted fixed time point 
compare random variable variable assumption entire update set represents unbiased random sample 
expect item satisfied expect shape distributions similar 
shows distribution functions different parameter settings 
plot different values similar shown 
clear bounded way expected shape distributions obviously exponential 
furthermore observed distribution closer get cache unbiased random sample case guaranteed specification 
looking distribution functions elaborate expected values 
inequality distribution functions follows inequality expected values waiting time fig 

distribution functions solid lines dotted lines varying fixed 
vertical axis log scale 
settings left right ltm size see section 
values left right 
waiting time optimal waiting time waiting time optimal waiting time percentage searched property domain fig 

experimental values solid lines dotted lines varying fixed left varying fixed right 
note dotted lines omitted left graph 
symbols correspond respectively 
symbol means ltm size see section looking actual difference give insight effect parameters randomness news update 
independence assumption geometric distribution probability member set agents size shows news update 
means 
shows experimental results expected waiting time 
see waiting time independent fixed indicates scaling properties 
waiting time moves close optimal value cache size increased 
indicates factor constraint tight bound especially larger cache size necessary 
observation increasing move randomness 
add illustrating effect slightly misleading increasing approaches 
upper bound 
note particular 
region search interesting anymore set searching represented news updates 
draw seen high clustering earlier proved graphs described uniform random model important aspect dynamics newscast engine approximates assumption randomness reasonable accuracy 
freshness news items mentioned prove step information exchange algorithm violates size specification item called fact simulations step removed news items 
give stronger argument give statistics age oldest value cache sample size obtained 
note larger higher probability see older news items 
largest cache looked 
comparison guaranteed observed statistics maximum suggests normal setting item seen reaches age activates step 
robustness spontaneous partitioning long term memory point series graph partitioned subgraph disconnected talk spontaneous partitioning 
topology constantly changes information exchange algorithm important understand probability phenomenon function parameters suggest techniques help prevent 
face methodological problem setting previous simulations far phenomenon occur 
saw accident preliminary experiments simulation cycle cluster vertices separated 
collecting statistical data directly infeasible 
reason statistics smaller graphs caches collected 
settings possible run long simulations results draw cautious extrapolating larger values importantly test techniques supposed prevent partitioning 
results simulations shown table iii 
table shows statistics cycle index spontaneous partitioning happens size smaller cluster splits away network result partitioning 
values correspond independent runs partitioning complete cycles starting line contains percentages runs partitioning happened cycle 
accordingly values marked lower bounds runs lead partitioning 
empirical average variance size separated small cluster partitioning resulted large small component calculated runs average maximum minimum cluster size cluster size table iii spontaneous partitioning statistics 
lead partitioning 
average waiting time spontaneous partitioning grow fast lower bounds fact resources able perform experiment unfortunately minimal observed waiting time grow fast allow conclude partitioning larger values may case 
lacking hard evidence partitioning happen suggest solution preventing partitioning long term memory ltm 
implement idea add cache ltm size ltm new parameter needed probability ltm modifications algorithm straightforward step peer picked ltm cache probability ltm receiving connection peer stored ltm probability ltm size ltm exceeds ltm remove random element 
performing simulations ltm ltm unable find single case partitioning 
demonstrate power approach decreased 
ltm tr partitioned started mentioned known connected high probability confirmed experiments 
couple cycles graph falls apart forming disconnected clusters 
adding ltm size ltm keeps graph 
simulation run complete cycles 
graph usually partitioned simulation statistics number clusters run calculated sample size max 
partitioning connectivity restored connected example 
general ltm interfere conformance specification contrary moves important properties communication graphs random graph 
shows results ltm ltm 
seen clustering decreased average path length slightly reduced 
effect seen 
time having demonstrated ability ltm repair damage extremely unstable setting conclude spontaneous partitioning restored effectively especially considering damage happens rarely 
average number independent clusters percentage removed nodes random graph random graph random graph size largest cluster percentage removed nodes random graph remaining nodes fig 

partitioning communication graph function percentage removed nodes node failures 
depicted values averages independent experiments fixed time starting performing simulation node failures random graph tr node failures effect node failures connectivity communication graphs tested see 
graph shows similar behavior random graph especially cache large 
results indicate considerable robustness node failures especially considering size largest cluster 
see possible remove fact number random vertices vast majority remaining vertices forms single connected cluster 
important aspect degree distribution 
particular know network scale free degree distribution follows power law graph robust random vertex removal vulnerable removal vertices high degree 
shows degree distribution communication graph 
see distribution clearly non linear log log scale case power law tail heavier random distribution 
consider graph series single graph 
tested series degree fixed vertex keeps changing range distribution extremely practice vertices large degree removed time 
vi 
introduced newscast model computation 
specification model implemented fully distributed fashion 
key component lazy probabilistic information dissemination technique responsible membership management communication 
technique serves engine newscast model computation supports different types applications including efficient reliable multicasting resource sharing monitoring controlling large systems possibly result ongoing research computational intelligence distributed datamining modeling social phenomena 
major contribution protocol information dissemination extremely scalable robust provides continuously changing communication graph set correspondents useful properties small diameter sufficient level randomness neighborhood proportion instances degree random converged fig 

degree distribution linear log log scale inset range 
depicted values averages independent experiments fixed time starting collecting data tr structure 
properties emergent achieved explicitly trying increase randomness special purpose protocol natural consequence interaction correspondents simple protocol uses local information 
consequence approach emergent behavior need special protocols adding removing correspondents 
addition minimal information necessary address member removal action necessary stopping communication 
demonstrated specifications model fulfilled proposed information propagation approach 
shown system converges state different starting conditions 
system robust node failures due random characteristics emergent communication graph 
acknowledgments authors members dream project fruitful discussions early pioneers rest dream staff arenas emin pierre especially mike worked aspects earlier versions framework 
funded part european commission information society technologies program emerging technologies 
authors sole responsibility represent opinion european community european community responsible may data appearing 
andrew tanenbaum maarten van steen distributed systems principles paradigms prentice hall upper saddle river 
iso open distributed processing model international standard iso iec 
crowcroft gemmell farinacci lin luby montgomery rizzo bhaskar vicisano pgm reliable transport protocol specification rfc dec 
brian neil levine jose garcia luna aceves comparison reliable multicast protocols multimedia systems vol 
pp 

katia obraczka multicast transport protocols survey taxonomy ieee communications magazine vol 
pp 
jan 
kenneth birman mark hayden zhen xiao mihai budiu yaron minsky bimodal multicast acm transactions computer systems vol 
pp 
may 
meng jang lin keith marzullo directional gossip gossip wide area network dependable computing jan erik eds 
vol 
lecture notes computer science pp 
springer verlag 
patrick th 
eugster rachid guerraoui probabilistic multicast proceedings international conference dependable systems networks dsn los alamitos ca june ieee pp 
ieee computer society press 
ben paechter thomas back marc schoenauer michele sebag eiben juan merelo terry fogarty distributed evolutionary algorithm machine dream proceedings congress evolutionary computation cec 
ieee pp 
ieee press 
giacomo letizia leonardi franco zambonelli mobile agent coordination models internet applications ieee computer vol 
pp 
feb 
david gelernter generative communication linda acm transactions programming languages systems vol 
pp 
jan 
mark newman models small world journal statistical physics vol 
pp 
nov 
andrew tanenbaum computer networks prentice hall upper saddle river th edition 
david cheriton dissemination oriented communication systems computer science department stanford university 
patrick th 
eugster pascal felber rachid guerraoui anne marie kermarrec faces publish subscribe tech 
rep dsc id swiss federal institute technology epfl lausanne switzerland jan 
marcos aguilera robert strom daniel sturman mark tushar chandra matching events content subscription system proceedings th annual acm symposium principles distributed computing podc atlanta ga apr acm pp 

banavar tushar chandra bodhi mukherjee jay robert strom daniel sturman efficient multicast protocol content publish subscribe systems proceedings th ieee international conference distributed computing systems icdcs austin tx june ieee pp 

antonio carzaniga david rosenblum alexander wolf design evaluation wide area event notification service acm transactions computer systems vol 
pp 
aug 
ion stoica robert morris david karger frans kaashoek hari balakrishnan chord scalable peer peer lookup service internet applications proceedings conference applications technologies architectures protocols computer communications sigcomm san diego ca acm pp 
acm press 
antony rowstron peter druschel pastry scalable distributed object location routing large scale peer peer systems middleware rachid guerraoui ed 
vol 
lecture notes computer science pp 
springer verlag 
ben zhao john kubiatowicz anthony joseph tapestry infrastructure fault tolerant wide area location routing tech 
rep ucb csd computer science division university california berkeley apr 
sylvia ratnasamy paul francis mark handley richard karp scott schenker scalable content addressable network proceedings conference applications technologies architectures protocols computer communications sigcomm san diego ca acm pp 
acm press 
steven gribble alon halevy zachary ives maya dan suciu databases peer peer proceedings th international workshop web databases webdb may 
matthew harren joseph hellerstein ryan huebsch boon loo scott shenker ion stoica complex queries dht peer peer networks proceedings st international workshop peer peer systems iptps mar 
agrawal amr el abbadi robert epidemic algorithms replicated databases proceedings th acm sigact sigmod sigart symposium principles database systems pods tucson az may acm pp 

alan demers dan greene carl hauser wes irish john larson scott shenker howard sturgis dan swinehart doug terry epidemic algorithms replicated database management proceedings th annual acm symposium principles distributed computing podc vancouver aug acm pp 

michael rabinovich gehani alex scalable update propagation epidemic replicated databases advances database technology edbt peter apers bouzeghoub georges eds 
vol 
lecture notes computer science pp 
springer 
robbert van renesse yaron minsky mark hayden gossip style failure detection service middleware nigel davies kerry raymond jochen seitz eds 
pp 
springer 
sridharan ranganathan alan george robert todd matthew gossip style failure detection distributed consensus scalable heterogeneous clusters cluster computing vol 
pp 
july 
anne marie kermarrec laurent massoulie ganesh probablistic reliable dissemination large scale systems ieee transactions parallel distributed systems appear 
bollobas random graphs cambridge university press cambridge uk nd edition 
ganesh anne marie kermarrec laurent massoulie peer peer membership management gossip protocols ieee transactions computers appear 
albert albert laszlo barabasi statistical mechanics complex networks reviews modern physics vol 
pp 
jan 
david mosberger memory consistency models acm sigops operating systems review vol 
pp 
jan 
sarita adve kourosh gharachorloo shared memory consistency models tutorial ieee computer vol 
pp 
dec 
arenas pierre eiben mark jelasity juan merelo ben paechter mike marc schoenauer framework distributed evolutionary algorithms parallel problem solving nature ppsn vii juan julian merelo panagiotis hans georg beyer jose luis fernandez hans paul schwefel eds 
vol 
lecture notes computer science pp 
springer verlag 
dr ea project www dr ea org trevor fenner alan frieze connectivity random orientable graphs digraphs combinatorica vol 
pp 

