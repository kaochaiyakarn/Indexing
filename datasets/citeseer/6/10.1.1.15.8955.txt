symmetry interactivity programming 
curien october recall early occurrences notions interactivity symmetry operational denotational semantics programming languages 
suggest connections 
proof theory programming deeply research areas 
short address compare ideas sides appropriate recalling general interplay enter speci topic mind symmetry interactivity computation 
disclaimer order encounter logic programming far limited commonly called logic programming 
expression refers programming style computation proof search 
am speaking larger match kinds wide range activities writing programs piece structured software proving correctness respect speci cation designing language implementing compiler programming language may amenable kind analysis formalizing proofs interesting ones rely various lemmas 
checking searching designing logical system encoding logic 
correspondence lexicon working extremely past decades mutual bene disciplines 
underpinned development logic programming functional programming paradigms proof search proof transformation respectively proof assistants system coq calculus constructions coquand huet 
lexicon just term term correspondence 
concerns internal structure underlying engine deeply 
hand cut elimination procedure transforms implicit proof lemmas called cuts logic entirely explicit proof bene allows analysis resulting cut free proof enjoys subformula property formula appearing proof appears hand normalization procedure generally operational semantics programming language describes formally computation steps programs 
turns cut elimination logic normalization formal semantics programming languages match closely 
remarked howard pointed exists correspondence proofs natural deduction style typed terms celebrated curry howard isomorphism 
herbelin noticed seen matching gentzen sequent calculus closely directly door open exhibiting symmetries syntax 
fundamental new theoretical input period girard linear logic entailed thorough revisiting proof theory semantics programming languages 
keyword linear logic resource consciousness turn may declination time space 
linear logic focused time latest body girard concerned space 
time space think favourite home dictionary may times poor condition may decide put away discover room left shelves 
important transfers inspired lexicon include revisiting proof search logic programming uenced linear logic turn uential design principles extension curry howard correspondence pure ect free programs ones ects raising exceptions 
called continuation passing style translations developed computer scientists capture meaning ects happen match precisely called double negation translations classical intuitionistic logic designed logicians earlier 
dual pairs remarkable largely independent developments converged recognition importance symmetries worlds paradigm computation interaction 
emphasize computer science standpoint rst 
related complementary pairs memory cell location register versus actual contents value object oriented style record eld names versus values method names versus actual de nition input output sending receiving messages program context libraries program environment larger program program focus subpart module programmer computer programs call 
may add helpful complementary pairs taken human life questions answers attack defence 
male female plugs 
computer man style helpful informally sentences programmer interacts computer top level loop typing commands waiting prompts error messages program computing function arguments boolean type rst arguments precisely rst explored second argument argument output program program passed control program waiting output response nished passes control back may proceed wait output program computing rst argument 
programming language community mechanism known coroutines 
interactive nature exchange questions answers incremental way resumed starts point control reached moment returned answer model computation important simple deserves illustration simple example 
suppose tree leaves labelled numbers internal nodes labels don matter 
say add numbers leaves 
simple recursive de nition embodies commitment inorder traversal tree 
coroutine view allows parameterize choice traversal algorithm program computation want labels leaves program 
example may take program post order traversal procedure program simple procedure adds argument contents xed register returns new value register 
interaction central models concurrent computation milner ccs calculus 
programs agents may active simultaneously synchronize appropriate points execution 
synchronization may involve transmission value process sender receiver 
logical counterpart process calculi 
believed nd linear logic 
may er better chances importance naming calculi names channels intermediate data computations clearly names memory locations 
logic related pairs hypotheses gentzen sequent calculus manipulates formal sequents form 

sequences formulas interpreted conjunction formulas entails disjunction formulas 
sequent calculus connective comes rules left right 
symmetry goes involutive character negation lost intuitionistic logic 
sequent calculus classical logic enhances symmetries cut elimination inherently non deterministic restrictions intuitionistic subsystems clumsy due boring commutative conver sions 
novelty linear logic er symmetry satisfactory computational behaviour con uence normalization 
proofs dialogue game interpretation called strategies 
rst observed lorenzen coworkers early see 
interpretation formula checked correctness dialogue opponent doubts formulas player justi es proof step exhibiting rules top bottom way 
dialogue begins follows opponent challenges player justify player exhibits inference rule say antecedents 
opponent picks formulas say challenges player justify reached intermediate 
note approach dialogue far amounting full proof collection dialogues experiments characterizes proof 
related notion observation basis study equivalence programs processes computer science 
unfortunately dialogue games school remained static descriptive level 
full comes cut elimination interpreted play see 
computation interaction computer science perspective history computation paradigm inseparable study sequentiality 
vuillemin milner rst denotational de nitions sequential function generalized kahn plotkin framework concrete data structures see 
intuitively sequential function sequential schedule 
best way grasp exactly think sequential function programs system coroutines 
example program true true true partial speci cation logical function rst arguments 
function associated program sequential scheduled rst compute arguments needed 
note sequential schedule function true true true functions denotational semantics scheduled way simplest example plotkin parallel function por por true true por true true 
subtle example berry known function berry kleene function kleene encountered variant function bk true false true bk false true true bk true false true mid seventies berry worked modelling notion sequential computation isolated important intermediate notion stability led girard independently linear logic 
functions por bk typical examples continuous non stable function stable non sequential function respectively 
berry insight model sequential computational behaviours move traditional framework appropriate ordered sets domains jargon denotational semantics functions setting retaining ordinary input output behaviour programs 
example schedules logical function di erent interpretations model 
insight resulted model sequential algorithms spring school calculus la ch atre 
model morphisms functions pairs function computation strategy speci es schedule interaction function argument 
model turned syntax programming language called cds developped 
operational semantics language joint french workshop held far know rst appearance notion function composition dialogue operational point view 
function application illustrated gure 
brie explain works 
concrete data structure collection cells collection values 
represented sets pairs example triplet true false may represented true false cells values function type form xc valof output respectively 
sequential algorithm xc output roughly expresses xc valof expresses input order compute value output cell needs waits value cell computation works lazy stream way illustrated gures page request consults state internal table stands part input read far initially internal table empty set 
function asked question yc may answer cf 
valof output 
rst case control transfered argument value cell requested 
answers internal table updated allowing informed question asked 
way loop formed trace consists sequence alternating opponent player moves dictionary dual pairs 
loop terminates received information internal table large yc answers output yields answer initial request 
fair interactive sort semantics intended goal started 
motivation provide denotational description fully model pcf 
language pcf simply typed calculus constants recursion encodes partial recursive functions fully model terms receive interpretation separated observation cf 
dialogue interpretation proofs 
observation term de ned help context term base type hole evaluates yields base constant terminate 
programs separated exists context evaluate way 
application output internal table argument function yc output internal table application interaction loop argument function valof yc sequential algorithms provide fully model pcf extensions pcf control primitives ered language cds pcf extended operation catch 
model ective sense observational equivalence classes ectively enumerated nite base types nite booleans 
full abstraction result intended goal wanted fully model pcf short 
loader result settled question negatively showed observational equivalence pcf ective 
matter fact game theoretic models pcf abramsky jagadeesan malacaria ajm hyland ong er syntax free presentations term models fully model pcf obtained quotient called extensional collapse gives little information milner term model construction fully model 
hindsight full abstraction problem interesting poorly speci ed problem 
looked domain theory presentation fully model known exist unique 
domain meant exactly really spelled 
particular ectivity criterion came light possible contrast di erent sorts game models 
model sequential algorithms game theoretic presentation lamarche main di erence ajm ho models lies de nition connective set sequential algorithms nitary character multiset ajm ho models 
poorly stated long standing open problem trigger important amount works important side ects 
variety games models created new era denotational semantics ho presentation games led important classi cation features sequential programming languages control see survey 
approach received insights developments linear logic particular geometry interaction interpretation linear logic 
instance lamarche decomposition function space model sequential algorithms allowed give symmetric presentation ane sequential algorithms pairs functions input data strategies game theoretic terms output data output counter strategies input 
terms discussion functions take care pairs xc output input piece output xc valof input output respectively 
discovered kleene experience need record internal information addition plain underlying functions matter fact essentially built sequential algorithms lower order types 
vocabulary modelled higher order recursive computations machines communicating oracles envelopes handed sender opened receiver 
early nineties felleisen presentation sequential algorithms input output functions 
achieved error values semantics 
presence new values computation strategy visible interactively part input output behaviour 
take true true true true true true forgetting dummy argument err err err di erent functions note functions di er data containing errors values 
informal explanation values follows needs second argument output second argument needs rst argument argument err stands error occurred computing rst argument terminates computation value err propagated toplevel second occurrence err err err 
striking discovery realize girard introduced notion logical side dynamic dictionary calls demon 
demon placed proof player want justify completely counter proof observation opponent wants terminate 
think human situation questions ask want conversation got answers wanted get 
way errors help terminate computation reveals part behaviour program observation encoded argument counter strategy err reveals starts examining rst argument 
interactive types game theoretic approach semantics allows achieve better match primitive base types de ned data types 
illustrate point booleans 
interpretation usually partial order true falseg order true false 
logicians shown booleans de ned second order logic 

observed laird exists suitable game 
isomorphic 
note true usual domains consists just 
singleton map sends non bottom element easy see elements interpretation 

games may consider structure just cell called 
value 
sequential algorithm viewed strategy sequences moves write place corresponding subscripts unique move copy empty sequence moves notation fg fg 
valof fg 
valof output algorithms mere schedulers 
straightforward match algorithms true false respectively agreement calculus encoding xy true xy false 
girard notion behaviour interactive approach allows enlarge notion type 
type collection programs behave way reaction set experiences tests programs 
images ordinary life perfect sense nd examples change environment may ected behaviour 
give example type behaviour may potential applications 
may take test set single program type examines argument algorithm arguments returns error value say function says needs ith argument 
argument directly value looking argument says needs jth argument proceed particular deliver error non error value 
formally write 
err easy see behaviour consisting programs orthogonal interaction yields error demon cf 
set algorithms start examining second argument equivalently err err sort analysis extremely useful practice 
remember ariane bug due ow due piece useless data 
notion type suited semantics subtyping subtype behaviour set tests just behaviour form larger set tests 
example type records elds year price colour subtype type records elds year price 
record type interactively recognized testing presence elds year price third test presence colour needed typecheck membership subtype 
intersection types just usual intersections girard calls locative point view exposition refer 
collection examples bridges logic programming languages hope convinced reader dictionary started continues receive great part triggered concepts born computer science mentioned subtyping 
abramsky jagadeesan new foundations geometry interaction information computation 
abramsky jagadeesan malacaria full abstraction pcf information computation 
manuscript circulated 
abramsky mccusker game semantics computational logic berger schwichtenberg eds springer verlag 
amadio 
curien domains lambda calculi cambridge university press 

andreoli pareschi linear objects logical processes built inheritance new generation computing 
berry 
curien sequential algorithms concrete data structures theoretical computer science 
berry 
curien theory practice sequential algorithms kernel applicative language cds algebraic methods semantics nivat reynolds eds cambridge university press 

curien symmetry sequentiality proc 
mathematical foundations programming semantics springer lect 
notes comp 
science 

cartwright 
curien felleisen fully semantics observably sequential languages information computation 

curien herbelin duality computation proc 
international conference functional programming montr eal acm press 
coquand semantics evidence classical arithmetic journal symbolic logic 
dialogues foundation intuitionistic logic handbook philosophical logic 

girard linear logic theoretical computer science 

girard geometry interaction interpretation system proc 
logic colloquium north holland 

girard locus mathematical structures computer science 
grin formulae types notion control proc 
principles programming languages acm press 
herbelin qu th ese de doctorat universit paris 
howard formulas types notion construction curry festschrift hindley seldin eds academic press 
manuscript circulated 
hyland ong full abstraction pcf information computation 
manuscript circulated 
kahn macqueen coroutines networks parallel processes proc 
information processing north holland 
kleene recursive functionals quanti ers finite types revisited ii iii iv proc 
general recursion theory ii fenstad eds north holland proc 
kleene symposium barwise eds north holland proc 
patras logic symposium north holland proc 
symposia pure mathematics respectively 
laird semantic analysis control ph thesis university edinburgh 
lamarche sequentiality games linear logic manuscript 
loader finitary pcf undecidable manuscript university oxford 
milner fully models typed lambda calculi theoretical computer science 
milner communicating mobile systems calculus cambridge university press 

