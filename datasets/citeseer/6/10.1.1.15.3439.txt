accepted ieee trans 
sofware engineering july controlled experiments assessing usefulness design pattern documentation program maintenance lutz prechelt barbara unger michael philippsen walter tichy informatik karlsruhe karlsruhe germany phone fax prechelt unger tichy ira uka de www ira uka de eir design patterns claimed improve programmer productivity software quality 
improvements may manifest construction time faster better program design maintenance time faster accurate program comprehension 
focuses maintenance context reports experimental tests question help maintainer design patterns program code documented explicitly source code comments compared commented pro gram explicit design patterns 
subjects performed maintenance tasks programs ranging loc including comments 
programs contained design patterns 
controlled variable de sign patterns documented explicitly 
experiments tested pattern com ment lines pcl help maintenance pat terns relevant sufficient program comments 
turns question challenge experimental methodology setup leading relevant results quite difficult find 
discuss issues detail suggest general approach situations 
experiment performed java german graduate students repeated american undergraduate students 
conservative analysis results supports hypothesis pattern relevant maintenance tasks completed faster fewer errors redundant design pattern information provided 
redundant means information carried pattern comments available different form comments 
contribution article twofold provides controlled experiment results design pattern usage presents solution approach important class experiment design problems experiments regarding tation 
keywords controlled experiment design pattern comments documentation maintenance software design pattern describes proven solution software design problem goal making solution reusable 
design patterns provide proven solutions known problems encouraging reuse relieving programmers 
idea design patterns quickly caught attention practitioners researchers pattern literature burgeoning 
systematic collection design patterns published gamma helms johnson gang book 
shortly additional patterns reported buschmann 
book shaw garlan provides wealth patterns software architecture 
annual workshops ing held promote pattern mining consistent style reporting patterns 
pattern papers published software conferences reporting new patterns pattern taxonomies pattern tools 
formalizations patterns sought tools built pattern mining identifying known patterns existing software programming patterns 
main advantages claimed design patterns pattern literature follows 
patterns improves programmer productivity program quality 
novices increase design skills significantly studying applying design pat terns 
patterns encourage best practices experienced designers 
design patterns improve communication developers developers maintainers 
exists coherent theory explain advantages specifically context design patterns 
experiments experiments reported represent attempts formally testing aspects claim 
experiments set main context 
assume maintainer knows design patterns 
furthermore assume program designed implemented patterns 
question help maintainer design patterns program code docu mented explicitly source code comments compared commented program explicit design patterns 
investigate question manner subjects receive program source code change requests program subjects provide appropriate changes sketched experiment operational program code second experiment 
change requests concern aspects program implemented design patterns 
program commented detail subjects control group receive explicit information design patterns program may derive pattern information program comments 
experiment group contrast receives program comments plus additional lines comment called pattern comment lines pcl describe pattern usage applicable 
note experiment group slightly comments program 
threaten validity experiments 
discuss resolve important methodological issue section 
subjects assigned randomly groups 
investigate performance groups differs measuring completion time grading answers counting correct solutions 
experiments performed total student subjects working single session hours 
tasks different programs printed pages length 
experiment rationale note experiments test presence absence patterns merely documentation patterns 
question cleaner unclear alternative program design comparison testing presence absence patterns 
think adding pcl useful proposition theories program comprehension state comprehension process driven hypotheses formed validated understanding process 
nice overview view program comprehension 
research papers 
program understood meaning represented hierarchy hypotheses 
prior knowledge systematic program understanding bottom inducing meaning purpose program parts step starting individual declarations statements 
completely bottom approach unrealistic larger programs 
programmer finds hints called beacons familiar kinds structures code switch top approach understanding allows generating validating hypotheses quicker 
beacons struc tural code idioms simply names program entities 
view correct pcl probably powerful aid program understanding description design pattern usage directly leads large grain hypothesis spans multiple classes relatively easy verify topdown 
case highly efficient engineering practice document design patterns pcl writing pcl requires little effort 
slightly different views program comprehension discussed section provide support idea adding pcl may highly worthwhile 
related program comprehension theory brooks suggests pcl may highly ef sort comment specifically aims bridging different knowledge domains 
different view provided notion delocalized plans introduced soloway experiments showed plans account effort program understand ing 
wilde argue object oriented programs full delocalized plans due inheritance delegation 
design pattern instances delocalized plans single design idea spread multiple classes methods 
perspective pcl may helpful links parts important plans 
empirical shneiderman mayer confirms basic assumptions com ments mnemonic names comments useful program understanding higher level com ments useful comments level abstraction close individual program statements 
know experiments comparing different forms program comments context object oriented programs 
mentioned far concerned design patterns se fact published long notion software design patterns popular 
published evidence effectiveness design patterns scarce 
case study reports anecdotal evidence positive effects instance 
part program maintenance literature loosely relevant pattern effectiveness empirical specifically addresses design patterns aid maintenance 
likewise far know design pattern community undertaken controlled experiments test design pattern claims 
aware reports usage density pcl software containing design pattern uses 
appears thoroughly designed apis libraries frameworks surrogate pcl increasingly common naming conventions indicate usage frequent design patterns instance class name components listener event composite container observer sun java develop ment kit jdk structure article section describes design implementation experiments including statement hypotheses description subjects background description program including program comment examples tasks discussion possible threats internal external validity experiments 
section discusses methodological problems caused adding comments handle similar situations 
section presents results section summarizes raises questions research 
provide short description programs tasks 
detailed information including original experiment materials task descriptions source program listings available 
description experi ments experiment performed january university karlsruhe uka second may washington university st louis wustl 
experiments similar variations 
strengths weaknesses data spots experiments complement quite nicely 
describe experiments separately refer uka wustl respectively 
appropriate provide information uka append corresponding information wustl angle parentheses 
hypotheses need define concept 
maintenance task program pattern relevant program contains software design patterns grasp patterns program expected simplify maintenance task 
experiments aimed testing hypotheses straightforwardly derived claims design pattern literature hypothesis hi adding pcl pattern relevant maintenance tasks completed faster 
hypothesis adding pcl fewer errors committed pattern relevant maintenance tasks 
speed task completion measured minutes 
number errors quantified assigning points see section counting correct 
subjects environments subjects uka wustl experiment graduate undergrad computer science students 
taken week week intensive standard lecture lab course java design patterns experiment 
course included practical implementations programs involving design patterns composite visitor observer template method strategy wrapper adapter template method bridge sin facade strategy factory method visitor interpreter builder 
average subjects previous programming experience years years different languages largest program loc loc 
course subjects previous experience object oriented program ming programming guis 
subjects knowledgeable design patterns indicated pattern knowledge test con start experiment 
patterns relevant experiments uka subjects pattern knowledge better wustl subjects uka course directly targeted experiment wustl course 
relevant patterns wustl subjects practical experience patterns contrast uka subjects 
experiments performed single session hours 
uka subjects write solutions 
wustl subjects implemented solutions unix workstations 
programs subject worked different programs 
programs written java design patterns thoroughly commented 
program tree library handling trees strings simple application 
loc classes loc contain comments additional lines pcl added version pcl 
section discusses adding pcl acceptable meaningful tion 
tree uses composite visitor design pattern 
program phonebook gui program reading tuples name name phone number entered user showing different views screenshot uka phonebook program screen see screenshot 
wustl subjects learned gui library course version phonebook stream reads inputs keyboard completely views standard output change 
phonebook loc classes loc contain comments additional lines pcl added version pcl 
phonebook uses observer tem plate method design pattern 
see examples pcl sections program com ments 
contain full commented source code programs 
experiment controls group sizes independent variable experiments presence absence design pattern comment lines pcl comments source pro grams 
counterbalanced experiment design random subject assignment see table variable order subject receives programs 
programs supplied pcl 
design results second variable order pcl non pcl pcl vice versa 
combination variables re suits groups 
subjects know advance program contain pcl know existence pcl treatment variable 
tasks tree subject received task consisting subtasks find 

class implements adding new tuple 
select es tuple added hen moves place presentation compare converts ino desired display forma 
design pattern wih auxiliary method forms template method 
empty spots ha filled subclasses methods forma compare 
synchronized void tuple displays 
tuples wih empty number lef ou 
tuples sorted las name tuple objects tuple results 
design pattern template method final class main program 
main window wih wo wo 
adds 
saic ype actual tuple ype tuple ype ha expected 
design pattern wo registered observers 
public final class frame pcl example comments containing pcl sections uka phonebook program original line numbers 
added pcl sections lines line global program comment shown 
note pcl header line contain semantic information considered part pcl existence may quite useful program understanding 
program contains total lines lines normal comments 
note original program german pattern comment line due different line breaks 
right spot particular output format change give expression compute number variants represented tree create addi tional visitor class computes number variants faster similar existing class computing depth information instantiate visitor print result 
subtasks pattern relevant 
subtask explicitly required wustl 
phonebook uka subject received task consisting subtasks find spots small program changes output format change window size change create ad ditional observer class template method instantiate register observer create additional observer class similar existing template method 
subtasks pattern relevant 
course task descriptions mentioned design patterns 
important differences uka wustl regarding phonebook 
uka subtask similar class program 
subtask solved imitation true wustl 
second subtask required wustl subtask stated part separate subtask 
class creation subtasks interface class needed written actual implementation required wustl participants asked provide complete solution 
measurements task subtask subject measured time handing collecting experiment materials 
un table experiment groups sizes 
number data points subject subjects complete respective task dropped experiment 
uka mortality 
see section 
stands perform tree pcl perform phonebook pcl 
pcl pcl pcl pcl groups tree phonebook uka initial 
subjects uka 
data points tasks wustl initial 
subjects wustl 
data points phonebook wustl 
data points tree groups phonebook tree uka initial 
subjects uka 
data points tasks wustl initial 
subjects wustl 
data points phonebook wustl 
data points tree clear time spent general program understanding distributed subtasks subtask time information collected 
subtask rarer graded answers degree requirements fulfillment provided 
grades expressed points 
total points uka wustl subtasks tree points points phonebook see rating scales 
threats internal validity relevant external variables subjects program ming experience aptitude motivation environ mental conditions equalized groups randomized group assignment 
bad luck produced groups unbalanced subject ability counter balanced experiment design put capable subjects experiment group control group 
dominant control problem mortality wustl students gave task thought difficult take long 
tendency give relatively strong experiment event semester students told catch busses planes students gave tasks 
nice mortality lower results meaningful mortality occurred exactly groups pcl pcl 
ignoring incomplete tasks entirely mortality bias results 
see table resulting group sizes mortality uka 
total working time subjects exhibits perfectly symmetric distribution 
evidence slower subjects having finished subjects worked room time 
experiment setup lacked acceptance test 
consequence working time solution quality judged short working times may reflect defects solution 
threat validity complicates discussion results section 
uka number subjects comparatively large resulting data scarce 
threats external validity sources differences experimental real software maintenance situ ations limit generalizability external validity experiments real situations subjects experience working teams programs maintenance tasks different size structure 
experience frequent concern experiments student subjects results generalized professionals experienced 
case professional programmers may need pcl may able exploit pcl profitably student subjects 
team 
realistic programs usually team 
individual tasks maintenance may performed programmer 
cooperation requires additional communication program 
case pcl may advantages visible exper iments major purported ad design patterns common design ter 
program size complexity 
compared typical industrial size programs experiment programs small simple neatly designed commented 
necessarily invalidate results experiments 
positive effect increasing program complexity may magnify effect having pcl provides program slicing information 
pattern relevant tasks pcl information points parts program relevant enables ignore rest information may useful program size increases code ignored 
program task unknown programs tasks experiments representative realistic maintenance situations 
indication programs totally different programs constructed design patterns ratio total number classes program number design pattern instances programs ranges 
values comparable java awt nextstep :10.1.1.135.5430
article claim maintenance tasks pattern relevant 
see section discussion pattern relevant tasks realistic programs 
maintenance situations realistic maintenance situations different subjects 
particular larger complex programs tasks may require making changes lower degree program understanding obtained small programs experiments 
hard say pcl useful useful experiments 
furthermore programmers master large design pattern repertoire understanding individual patterns may reduced pcl may helpful 
repetition similar experiments professionals real programs real maintenance tasks evaluate threats 
see sec tion hope experiments estimate conservatively 
methodology experiment design main independent variable experiments presence absence pattern com ment lines pcl addition normal pro gram comments 
readers may argue experiments uninteresting irrelevant valid design ses impure observations discriminate effects having specific type comments pcl effects simply having comments 
form content conflict note situation occur generically experiments attempt evaluation spe cific form information source 
specific information source pro gram development pcl uml diagrams certain form syntax appearance certain content semantics meaning 
experiment evaluating form information source ideally need experiment condition control group identical experiment group condition respects particular content form formation source 
alternative form rarely lend expressing exact content natural form 
example express realistic manner exactly detail communicated uml diagram different notation 
force content unrealistic instance accept difference content addition difference form experiment conditions mix effects 
call problem form content conflict experiment design 
arises usually impossible eliminate conflict reduced relevance experiment longer seriously threatened 
subsections argue specific experiment design conflict serious impact validity utility results 
subsection reformulates train thought argumentation general rule design experiments 
argue design purer hypotheses appear impossible evaluate second experiments useful third observed effect due increase comment information content 
purer hypotheses appear impossible evaluate hypothetical perfect experiment test specific form type comments represented pcl advantage written design pattern terminology 
change aspect program 
order aspects kept constant absolute information content com ments comments useful length comments lines words reading comments consumes time concentration amount repetition information comments repetition may aid standing finding information may reader understandability comments comments potential creating confusion comments program harder understand placement comments respect program entities refer determines easy information related program 
balancing aspects program change impossible 
choices experimental design 
compensate adding pcl removing comments pcl program version 
comments remove 
easily balance comment length reproducible way determine comments superfluous useful crucial 
guarantee held information content comments constant 
furthermore keep comment length amount repetition constant quantified section 
compensate adding pcl adding normal comments non pcl program version 
comments say 
keep comment length constant reproducible way give exact information content pcl pcl sure confuse annoy user 
add pcl compensation 
increase comment length small increase see section information content small increase see section repetition information large increase see section 
pick third solution realistic defined leads reproducible results 
experiments useful possible effect simply having comment consciously included hypotheses 
find positive effect adding pcl experiments suggest engineering advice add pcl programs addition commenting usually 
advice useful possible obtain similarly positive results types additional comments characterize terms comments look 
pcl characterization straightforward mention classes methods objects play roles pattern see example 
effect due comment type information content merely measuring effect providing information comments 
show information contained pcl rest comments just repeated different form pcl 
note repetition improve program understanding useful redundancy slow new information line 
see section opinion case 
compiled list design information units conveyed pcl counted mentioned pcl comments 
table list design information units provided pcl uka tree program left hand side uka phonebook program right hand side 
histograms indicate number occurrences design information unit important ones emphasized 
top histogram occurrences pcl 
bottom histogram occurrences rest comments 
id design information unit uka tree element container structure element superclass ele ment container structure element part element container structure part element container structure part element container structure multiple container classes container class container class element class element class iterator structure iterator structure iterates ele ment container structure superclass iterator structure depth part iterator structure perform part iterator structure perform dispatch method important information units design understanding 
design pattern terminology element container structure composite pattern container class composite class element class leaf class iterator structure visitor pattern dispatch method accept method 
design pattern terms non pcl comments 
lo data points pcl abcdefgh data points rest comments lo abcdefgh id design information unit uka phonebook model view structure model class superclass views skeleton algorithm skeleton algorithm varies selection ordering formatting tuples contains method skeleton algorithm view class skeleton algorithm auxiliary method select compare format primitive operations missing skeleton completes skeleton algorithm view class instances model class instance view class instances registered model class instance important information units design understanding 
design pattern terminology model view structure observer pattern model class subject class view class observer class skeleton algorithm template method 
design pattern terms non pcl comments 
data points pcl lo 
data points rest comments abcdefgh information vague ambiguous non pcl comments 
information distributed non pcl comments 
table results tree task 
columns left right line number name variable arithmetic average subjects provided design pattern information pcl ditto pcl confidence interval difference measured percent old significance difference lone sided 
computed bootstrap resampling ca simulation statistical estimation technique trials distributions distinctly non normal 
relevant points points pattern relevant subtasks 
mean means difference signifi pcl pcl 
cance variable uk program tree relevant points 
corr 
solutions time minutes 
corr 

wustl program tree relevant points 
corr 
solutions time minutes uka tree information shown left half table 
see histograms information pcl rest program com ments particular units labeled point existence design patterns program 
similar results somewhat weaker hold uka phonebook program see right hand side table 
pcl information entirely redundant plausibly specific type doc creates effects see information clearer expressed pcl form 
expect results mainly show effects specifically adding pcl effects adding documentation 
general methodological rule formulate step pro cess handling form content conflicts general methodological recipe 

analyze conceivable designs choose results differences con tent requiring unrealistic conditions group 
ensures better design research question 

demonstrate experiment result expected hypotheses interesting 
ideally leads practical software engineering rule 
case formulate rule explicitly 
ensures experiment useful despite content difference 

argue specific experiment setup small part observed effect due different content different form 
ensures form content conflict unimportant chosen experiment design 
results discussion section discusses results exper iments summarized tables 
wustl results subjects deliver particular task ignored task 
uka subjects delivered tasks 
results tree results summarized table fig ure 
line table indicates group pcl averaged slightly points pattern relevant subtasks relevant points 
value rightmost column indicates difference percent chance accidental 
time required pcl appears larger time pcl line 
observation misleading number correct solutions lower non pcl group fisher exact shown line 
real software maintenance incorrect solutions detected corrected additional time observed experiment 
contrast experiment non computerized working environment difficult subject check solution correct 
obviously time spent incorrect sensibly compared time spent correct 
comparing time required subjects compare time required subjects correct solutions 
result confidence interval time difference ranges far positive far negative 
consider times essentially see 
group pcl little slower larger fraction presumably contained capable subjects average 
uka uka wustl uka wustl time corr 
time time time line line line line phonebook display time entries minutes indicated lines tables lef plot pair represents group pcl right group pcl 
dot marks mean task completion time strip indicates confidence interval mean 
time uka tree minutes time versus solution quality pattern relevant part uka tree task 
trend line loess local linear regression confidence interval 
terms correctness larger fraction correct solutions pcl group suggests pcl allowed solutions capable programmers possible pcl 
furthermore tells pcl slower capable 
subjects produce solutions lower quality pcl quality largely independent time required 
suggests programmer able solve task pcl may help recognizing fact solution bad time longer 
wustl results tree indicate pcl group faster shown lower part table 
find clear difference num ber points line number completely correct solutions line presumably cause group designed implement test solution find large advantage time required group pcl line 
confidence percent having pcl saves zero percent maintenance time task 
due small number subjects evaluate statistically results just completely correct solutions trend remains 
learning effect uk subjects average significantly faster obtain points second task 
size effect independent presence absence pcl 
data shown table 
differences due learning compensated counterbalanced experiment design relevant interpretation results 
learning effect assessed wustl group sizes small 
shorter time second task explained pressure finish builds soon subjects finished left room 
effect result reduced quality solutions 
summing tree results suggest non trivial pattern relevant maintenance tasks presence pcl may save time help avoid mistakes 
results phonebook results summarized table fig ure 
phonebook results uka show essen tially difference total number points pattern relevant subtasks line number solutions completely correct line 
half participants mistake high relevant point values possible indicate task simple subjects 
despite simplicity group pcl managed solve task faster group pcl shown line 
advantage quantified expected table results phonebook task 
wustl results discarded subjects task subject group came correct solution 
variable uka program phonebook relevant points corr 
solutions time minutes mean means difference pcl pcl 

signifi cance size zero percent confidence see 
ensure time difference weird artifact related different behavior subjects making serious mistakes may compare times subjects mistake solution 
find time difference points direction shown table 
learning effect similar described tree 
pcl oo pcl time uka phonebook minutes ime distribution uka phonebook ask 
fa median box indicates whiskers indicate dashed line indicate mean plus minus error mean 
unfortunately wustl results task meaningless single correct solution group 
little sense compare results 
analysis subjects task difficult reasons 
non gui presentation style wustl phonebook program observer pattern unintuitive obscure 
second subjects implemented observer example class program imi tate contrast uk phonebook program 
results suggest circumstances pcl worthless 
summing phonebook results suggest simple pattern relevant maintenance tasks presence pcl may save time 
interpretation conclu sions summary find results support hypotheses introduced section 
results supports hypothesis pattern relevant maintenance tasks completed faster pcl added hypothesis fewer errors committed pattern relevant maintenance tasks pcl added 
uk phonebook wustl tree pcl group faster non pcl group 
size effect percent speedup considerable may generalize cases 
uka tree pcl group produced solu tions fewer mistakes non pcl group 
particular twice subjects arrived completely correct solution 
results supports hypotheses evidence opposite hypotheses 
note design experiments conservative design decisions biased showing effects adding pcl particular 
programs small pcl subjects achieve program understanding reasonable time 
real software projects pcl helpful fraction program understanding effort pcl save grows size program 

programs thoroughly commented statement level method class program levels 
subjects sufficient documentation available program understanding pcl see section 
contrast programs real world lack design documentation 
pcl probably efficient form design documentation compact 
circumstances performance advantages pcl may pronounced real situations experiments 
case percent reduction maintenance effort outweigh additional development cost inserting pcl source programs pcl inserted right development 
conclude depending particular program maintenance task pattern knowledge personnel pcl program may considerably reduce time required program change may help improve quality change 
recommend design patterns documented explicitly program source code 
pcl beneficial 
analysis design information units see section suggests answers question 
information provided pcl clearer comments vague ambiguous spread delocalized 
expected clear compact terminology considered primary advantages patterns 
second pcl repeats design information units normal comments particular respect mentioning presence pattern see table 
type repetition advantages reduces concentration required capture relation pattern parts readers aware pattern pick appropriate exploration path program text 
property pcl similar documentation soloway sug gest structured programs order overcome problems plans design decisions consequences spread multiple parts program 
wilde argue de localized plans frequent object oriented programs due inheritance large numbers small methods dynamic binding 
design patterns means understanding delocalized plans maintenance provided pcl provides powerful beacons point patterns explaining significant fraction program structure 
likewise effectiveness pcl explained theory brooks pcl con sidered provide bridge knowledge domains design idea understanding single method class design ideas ex mentioning design pattern pcl pcl attached individual class method heads 
perform related experiments different settings 
questions appear important 
effects change larger programs 
second change difficult tasks correct results enforced acceptance test 
third effects change larger numbers different patterns come play overlap instances 
fourth change multiple programmers cooperate communicate order change 
fifth effects programs largely general pcl interact documentation 
sixth fraction effect explained simply fact pcl form structured arbitrary style comments 
degree relevant pcl phrased formatted 
pcl helpful code inspections 
empirical studies existing software determine fraction change tasks change effort pattern relevant 
ques tion design stability needs addressed initial evidence pcl may slow architectural erosion drift described delay decay original soft ware design structure :10.1.1.135.5430
interestingly maintenance compare software patterns versus equivalent software 
douglas schmidt opportunity carry experiment washington university 
experimental subjects making project possible 
critical reviewers previous versions particular pointing methodological contribution waiting 
beck coplien crocker 
industrial experience design patterns 
proc 
th intl 
conf 
software engineering pages berlin march 
ieee cs press 
brooks 
behavioral theory program comprehension software engineering 
proc 
rd intl 
conf 
software engineering pages 
ieee cs press 
brooks 
theory com computer programs 
intl 
man machine studies june 
frank buschmann meunier hans rohnert peter michael stal 
pattern oriented software architecture system patterns 
john wiley sons chichester uk 
larry christensen 
experimental methodology 
allyn bacon needham heights ma th edition 
james coplien douglas schmidt ed 
pattern languages program design monticello il 
addison wesley 
bradley efron robert tibshirani :10.1.1.135.5430
bootstrap 
monographs statistics applied probability 
chapman hall new york london 
eir 
web pages karlsruhe empirical informatics research group 
ira uka de eir 
erich gamma richard helm ralph johnson john 
design patterns elements reusable object oriented software 
addison wesley reading ma 
edward curtis cook 
investigation procedure variable names beacons program comprehension 
pages :10.1.1.135.5430
koenemann thomas scott robertson editors :10.1.1.135.5430
empirical studies programmers fourth workshop new brunswick december 
ablex publishing oliver :10.1.1.135.5430
counting software design patterns java awt nextstep 
technical report fakult infor universit karlsruhe germany december 
ftp ira uka de 
stan letovsky 
cognitive processes program comprehension 
pages 
robert martin dirk riehle frank buschmann editors 
pattern languages program design monticello il 
addison wesley 
nancy pennington 
stimulus structures mental representations expert comprehension computer programs 
cognitive psychology 
perry alexander wolf 
foundations study software architecture 
cm sigsoft software engineering notes october 
lutz prechelt 
experiment usefulness design patterns detailed description evaluation 
technical report fakult informatik universit karlsruhe germany june 
ftp ira uka de 
lutz prechelt barbara unger douglas schmidt 
replication controlled experiment usefulness design patterns detailed description evaluation 
technical report wucs washington university dept cs st louis december 
www cs wustl edu cs cs publications html 
mary shaw david garlan 
software architecture perspectives emerging discipline 
prentice hall upper saddle river 
ben shneiderman richard mayer 
tic semantic interactions programmer havior model experimental results 
international journal computer informa tion sciences 
eliot soloway pinto stan letovsky david littman robin 
designing documentation compensate delocalized plans 
communications cm november 
elliot soloway iyengar editors 
empirical studies programmers workshop empirical studies program mers washington 
ablex publishing norwood june 
barbara unger walter tichy 
design patterns improve communication 
experiment pair design 
george stark editor wess international workshop empirical studies software maintenance members aol com wess unger tichy 
pdf october 
william brian ripley 
modern applied statistics plus 
springer verlag nd edition 
john james coplien man editors 
pattern languages program design monticello il 
addison wesley 
von mayrhauser stephen lang 
coding scheme support systematic analysis software comprehension 
ieee trans 
software engineering july 
norman wilde paul matthews ross 
maintaining object oriented software 
ieee software january 
proc 
th intl 
workshop program mi march 
ieee computer society 
proc 
th intl 
workshop program italy june 
ieee computer society 
proc 
th intl 
workshop program comprehension pittsburgh pa may 
ieee computer society 
proc 
th intl 
workshop program limerick ireland june 
ieee computer society 

