efficient augmented context free parsing algorithm masaru tomita computer science department center machine translation carnegie mellon university pittsburgh pa efficient parsing algorithm augmented context free grammars introduced application line natural language interfaces discussed 
algorithm generalized lr parsing algorithm lr shift reduce parsing table possibly multiple entries augmented context free grammar 
standard lr parsing algorithm handle arbitrary context free grammars including ambiguous grammars lr efficiency preserved introducing concept graph structured stack 
graph structured stack allows lr shift reduce parser maintain multiple parses parsing part input twice way 
view parsing algorithm extended chart parsing algorithm efficiently guided lr parsing tables 
algo rithm fast due lr table precomputation 
experiments different english grammars sentences timings indicate tenfold speed advantage earley context free parsing algo rithm 
algorithm parses sentence strictly left right line starts parsing soon user types word sentence waiting completion sentence 
practical line parser algorithm implemented common lisp running symbolics hp ai workstations 
parser multi lingual machine translation project cmu 
commercial line parser japanese language built intelligent technology incorporation technique developed cmu 
parsing efficiency crucial building practical natural language systems smaller computers personal workstations 
especially case interactive systems natural language database access interfaces expert systems interactive machine translation 
introduces efficient line parsing algorithm focuses practical application natural language interfaces 
algorithm viewed generalized lr pars ing algorithm handle arbitrary context free grammars including ambiguous grammars 
section describes algorithm extending standard lr parsing algorithm idea graph structured stack 
section describes represent parse trees efficiently possible parse trees parse forest take polynomial space ambiguity sentence grows exponentially 
section examples 
section presents empirical results algorithm practical performance including comparison earley algorithm 
section discuss enhance algorithm handle augmented context free grammars pure context free grammars 
section describes concept line parsing advantage left right oper ation parsing algorithm 
line parser parses sentence strictly left right starts parsing soon user types word waiting line 
benefits line parsing discussed 
versions line parser implemented mentioned section 
context free parsing algorithm lr parsing algorithms aho ullman aho johnson developed originally programming languages 
lr parsing algorithm copyright association computational linguistics 
permission copy fee part material granted provided copies direct commercial advantage cl copyright notice included page 
copy republish requires fee specific permission 
computational linguistics volume numbers january june masaru tomita efficient augmented context free parsing algorithm shift reduce parsing algorithm deterministically guided parsing table indicating action taken 
parsing table obtained automatically context free phrase structure grammar algorithm developed 
describe algorithms referring reader chapter aho ullman 
assume reader familiar standard lr parsing algo rithm necessarily parsing table construction algorithm 
lr algorithm efficient parsing algorithms 
totally deterministic backtracking search involved 
unfortunately directly adopt lr parsing technique natural languages applicable small subset context free grammars called lr grammars certain practical natural language grammars lr 
grammar non lr parsing table multiple entries action table entries multiply defined ber 
figures show example non lr grammar parsing table 
grammar symbols starting represent pre terminals 
entries sh action table left part table indicate action shift word input buffer stack go state 
entries re indicate action reduce constituents stack rule 
entry ace stands action accept blank spaces represent error 
goto table right part table decides state parser go reduce action 
operations shall clear trace algorithm example sentences section 
exact definition operation lr parser aho ullman 
see multiple entries action table rows state sh re np vp pp np np det np np pp pp prep np vp np 
example ambiguous grammar 
column labeled prep 
roughly speaking situation parser encounters preposition pp right np 
pp modify np parser go ahead reduce np higher nonterminal pp vp rule respectively re 
re multiple entries 
hand pp modify np parser wait sh pp completed build higher np rule 
thought lr parsing multiple entries fatal parsing table multiple entries deterministic parsing longer possible kind non determinism necessary 
handle multiple entries special technique named graph structured stack 
order introduce concept give simpler form non determinism refinements 
subsection describes simple straightforward non deterministic technique pseudo parallelism breadth search system maintains number stacks simultaneously called stack list 
disadvantage stack list described 
subsection describes idea stack combination introduced author earlier research tomita algorithm efficient 
idea stacks trees forest 
refinement graph structured stack described algo state det prep np pp vp sh sh sh acc sh re re rez re sh sh sh sh re re re re re re re re re re sh re re sh re 
lr parsing table multiple entries 
computational linguistics volume numbers january june masaru tomita efficient augmented context free parsing algorithm rithm efficient efficient run polynomial time 
handling multiple entries stack list simplest idea handle multiple entries non deterministically 
adopt pseudo parallelism breadth search maintaining list stacks stack list 
pseudo parallelism works follows 
number processes operated parallel 
process stack behaves basically standard lr parsing 
process encounters multi ple entry process split processes entry replicating stack 
process encounters error entry process killed removing stack stack list 
processes synchronized shift word time look word 
process encounters shift action waits processes encounter possibly different shift action 
shows snapshot stack list right shifting word sentence saw man bed apartment telescope grammar parsing table 
sake convenience denote stack vertices edges 
leftmost vertex bottom stack rightmost vertex top stack 
vertices represented circle called state vertices represent state number 
vertices represented square called symbol vertices represent grammar symbol 
stack exactly stack standard lr parsing algorithm 
distance vertices length edge significance may help reader understand status stacks 
figures stands prep stands det 
sentence way ambiguous stack split stacks 
example sixth stack np status saw man bed reduced apartment reduced np 
lr parsing table know top stack state expecting det eventually np 
telescope comes pp telescope formed pp modify np apart ment apartment modify saw man notice stacks stack list appear identical 
reached current state different ways 
example sixth seventh stacks identical saw man bed reduced different ways 
disadvantage stack list method interconnections stacks processes way process utilize processes done 
number stacks stack list grows exponentially ambiguities encountered 
example processes parse rest sentence telescope np qp np np np np np np np np ii np np np np np np ov np 
op np np 
stack list shifting saw man bed apartment telescope grammar table figures 
times exactly way 
avoided tree structured stack described subsection 
tree structure stack processes common state stacks common state number rightmost vertex behave exactly manner vertex popped stacks reduce action 
avoid redundant operation processes unified process combining stacks 
processes common state number top stacks top vertices unified stacks represented tree top vertex corresponds root tree 
call tree structured stack 
top vertex popped tree structured stack split original number stacks 
general system maintains number tree structured stacks parallel stacks represented forest 
shows snapshot tree structured stack immediately shifting word 
contrast previous example tele scope parsed 
amount computation significantly reduced stack combination technique number branches tree structured stack number computational linguistics volume numbers january june masaru tomita efficient augmented context free parsing algorithm mnp oq 
tree structured stack 

graph structured stack 
bottoms stack maintained grows exponentially ambiguities encountered 
subsection describe modification stacks represented directed acyclic graph order avoid inefficiency 
graph structure stack far stack split copy stack 
necessarily copy stack different parallel operations tree structured stack bottom portion stack may remain 
necessary portion stack split 
stack split stack represented tree bottom stack corresponds root tree 
stack combination technique described previous subsection stacks represented directed acyclic graph 
shows snapshot graph stack 
easy show algorithm graph struc tured stack parse part input sentence way 
processes parsed part sentence way state combined process 
graph structured stack looks similar chart chart parsing 
fact view algorithm extended chart parsing algorithm guided lr parsing tables 
major extension nodes chart contain information lr state numbers conventional chart parsing 
describe algorithm general ized lr parsing algorithm 
far focussed accept reject sentence 
practice parser accept reject sentences build syntactic structure sentence parse forest 
section describes represent parse forest build parsing algorithm 
efficient representation parse forest parsing algorithm path parsing algorithm produces possible parses case input sentence ambiguous 
path parsing needed natural language processing manage tempo absolutely ambiguous input sentences 
ambiguity number parses sentence may grow exponentially length sentence grows church patil 
notice efficient parsing algorithm described parser take exponential time exponential time required merely print parse trees parse forest 
provide efficient representation size parse forest grow exponentially 
section describes techniques providing efficient representation subtree sharing local packing 
mentioned techniques completely new ideas exist ing systems earley algorithm adopted techniques implicitly explicitly 
sub tree sharing trees common subtree subtree represented 
example parse forest sentence saw man park telescope represented 
implement longer push grammatical symbols stack push pointers node shared forest 
parser shifts word creates leaf node labeled word pre ter pre terminal symbol pointer newly created leaf node pushed stack 
exact leaf node node labeled word pre terminal exists pointer existing node pushed stack creating node 
parser reduces stack pops pointers stack computational linguistics volume numbers january june masaru efficient augmented context free parsing el saw man el apt tel 
unpacked shared forest 
creates new node successive nodes pointed popped pointers pushes pointer newly created node stack 
relatively simple procedure parsing algorithm produce shared forest output special book keeping mechanism reduce action twice manner 
local ambiguity packing say subtrees represent local ity common leaf nodes top nodes labeled non terminal symbol 
say fragment sentence locally ambiguous fragment reduced certain non terminal symbol ways 
sentence local ambiguities total ambiguity grow exponential ly 
avoid technique called local ty packing works way 
top nodes subtrees represent local ambiguity merged treated higher level structures node 
node called packed node nodes packing called subnodes packed node 
example shared packed forest shown 
packed nodes represented boxes 
packed nodes subnodes subnodes 
local ambiguity packing easily implemented parsing algorithm follows 
graph struc tured stack symbol vertices common state vertex immediately left common state vertex immediately right represent local ambiguity 
nodes pointed symbol vertices packed node 
example see way local ambiguity way local ambiguities 
algorithm clear example section 
tv dcl el saw man tel 
packed shared forest 
author tomita suggested tech nique disambiguate sentence shared packed forest representation asking user minimal number questions natural language show ing tree structures 
examples section presents examples 
example sentence saw man apartment telescope intended help reader understand algorithm re clearly 
second example sentence informa tion important doubtful demonstrate algorithm able handle multi part speech words special mechanism 
sentence multi part speech word determiner pronoun 
third example provided show algo rithm able handle unknown words consider ing unknown word special multi part speech word part speech 
example sentence represent unknown words 
example subsection gives trace algorithm grammar parsing table sentence saw man park telescope 
stack contains vertex labeled parse forest contains 
looking action table action shift determined standard lr parsing 
word isb computational linguistics volume numbers january june masaru tomita efficient augmented context free parsing algorithm shifting word algorithm creates leaf node parse forest labeled word pushes pointer leaf node word saw reduce stack basically manner standard lr parsing 
pops top vertex pointer stack creates new node parse forest successor node pointed pointer 
newly created node labeled word saw executing shift word executing shift word man executing shift word stack 
action reduce determined action table 
left hand side symbol rule np 
point er newly created node pushed stack 
action shift determined action 
aim dlh ww wp action reduce 
pops pointers creates new node parse forest node node successors 
newly word point encounter multiple entry reduce shift actions executed 
reduce actions executed shift actions executed remaining reduce action execute 
way parser works strictly left right done shifting word 
executing reduce stack parse forest look isb np np sl sa sh sa dot am met qw io ro 
np saw diet rl man created node labeled left hand side symbol rule np 
pointer newly created node pushed stack 
ir 

lsk la np saw det man np 
top vertex labeled popped away action executed 
top vertex generally vertices actions executed called active 
active vertices stack labeled labeled 
action reduce determined action table associated vertex 
computational linguistics volume numbers january june masaru tomita efficient augmented context free parsing algorithm word reduce actions higher priority shift actions algorithm executes reduce word shift parser creates new leaf node parse forest 
executing shift actions combines vertices word iii dlt steps see action accept executed 
returns top node parse forest halts process 
ii ill ii ii ire sl im sl ire sl ire zl lit sl ire ii lr 
say det man np vp vertex labeled 
action shift deter mined action table 

tier ui sl saw ot mn vp stack possible 
stack parse forest look shift determined action table action 
ish np saw det mn vp ts prep 
ii il ii computational linguistics volume numbers january june isi il masaru tomita 
ii 
final parse forest ire sl ire ire ire sl ire ire tl ire np sa cvp efficient augmented context free parsing algorithm ice oi re osl am 
ire ire ol ire dirk pp zl tz cpp tt zz cue zo tz fpp cup zt cvp zz ts zs cs sot prep eot tno tg np managing multi part speech words subsection gives trace algorithm sentence information important doubtful demonstrate algorithm handle multi part speech words sentence just multiple entries special mechanism 
gram mar right parsing table 
np vp np det np np vp state bo det np vp sh sh sh acc sh sh sh sh sh rot rot re re res computational linguistics volume numbers january june masaru tomita efficient augmented context free parsing algorithm parse forest contains noth ing stack contains vertex labeled 
word sentence cate det action table tells word executing shift actions word information note different leaf nodes created parse forest 
possibilities noun discarded immediately parser sees word time leaf node created parse forest shift actions regarded word belonging category noun 
word executing reduce word executing shift word important executing shift word categories legal 
algorithm behaves multiple entry encountered 
actions shift shift shift executed 
si ish lsh sh error word information 
actions ire ire det executing shift aet information active vertices reduce arbitrarily chosen action execute 
executing reduce lsh det re ion np sh aet dot 
qw mm sh xp ts mm mm det information np important computational linguistics volume numbers january june masaru tomita 
augmented context free parsing algorithm executing reduce word ways execute action reduce executing reduce ways word error action possibility determiner 
executing reduce word executing shift steps word parser accepts sentence returns top node parse forest 
forest consists tree desired structure information important doubtful 
managing unknown words previous subsection saw parsing algorithm handling multi part speech word just multiple entries special mechanism 
capability applied handle unknown words words ire sh sh 
qw oc ire re error det information np np ts important vp det information ha important iv 
vp net information np np ts important ire det information np np important vp lo tl np tz doubtful vp xs categories unknown 
unknown word thought special type multi part speech word categories 
trace parser sentence represent unknown word 
grammar parsing table exam ple figures 
sh computational linguistics volume numbers january june masaru tomita efficient augmented free parsing algorithm executing shift word point parser looking unknown word words word categories det prep 
row action table word row action table kinds actions shift shift 
means unknown word executing shift twice word point parser looking unknown word 
entry row action table uniquely deter word executing reduce word executing reduce reduce word ire sl kind action reduce 
algo rithm executes action reduce word possibilities preposition verb 
executing actions nn sh mhi 
np prep prep det mine category unknown word noun 
shifting unknown word noun re ire ire ire np prep aet prep net 

np np prep act 
cpp vp computational linguistics volume numbers january june tomita efficient augmented context free parsing algorithm executing reduce reduce word possibility unknown word preposition disappeared 
parser accepts sentence way returns root node parse forest 
shown parsing algorithm handle unknown words special mechanism 
empirical results section empirical results algorithm practical performance 
space limited show highlights results referring ooo oo oo sentence length words err lac ne prep det pp vp np reader chapter tomita detail 
shows relationship parsing time tomita algorithm length input sentence shows comparison earley algo rithm active chart parsing sample english grammar consists context free rules sample sentences taken actual publications 
programs run dec written maclisp compiled 
experiment informal result show tomita algorithm times faster earley algorithm due pre com grammar lr table 

oo 
parsing time sentence length 

earley tomita ratio 

grammar size ti number rules oo oo oo sentence length words 

ii 
sentence ambiguity number parses 
earley tomita ratio grammar size 

size parse forest ambiguity 
computational linguistics volume numbers january june masaru tomita efficient augmented context free parsing earley tomita ratio increase size grammar grows shown 
shows relationship size produced shared packed forest representation terms number nodes ambiguity input sentence number possible parses 
sample sentences created schema 
noun verb det noun prep det noun example sentence structure saw man park hill telescope 
result shows possible parses log space number possible parses sentence 
shows relationship parsing time ambiguity sentence 
recall time algorithm produces possible parses shared packed forest representation 
concluded algorithm parse produce forest ambiguous sentence possible parses reasonable time 
qb zoo ambiguity number parses 
parsing time ambiguity 
augmented context free grammars far described algorithm pure context free parsing algorithm 
practice desired grammar nonterminal attributes grammar rule define pass test attribute values 
desired produce functional structure sense functional grammar formalism kay bresnan kaplan context free forest 
subsection describes augmentation subsection discusses shared packed represen tation functional structures 
augmentation attach lisp function grammar rule augmentation 
parser reduces constituents higher level nonterminal phrase structure rule lisp program associated rule evalu ated 
lisp program handles aspects construction syntax semantic representation input sentence passing attribute values ents different levels checking syntactic semantic constraints subject verb agreement 
lisp function returns nil parser reduce action rule 
lisp function returns non nil value value newly created non terminal 
value includes attributes nonterminal partial syntactic semantic representation constructed far 
notice lisp functions precompiled machine code standard lisp compiler 
sharing packing functional structures functional structure functional grammar formalisms kay bresnan kaplan ber general directed acyclic graph dag tree 
value may shared different attributes sentence agreement attributes subject main verb 
pereira introduced method share dag structures 
dag structure sharing method complex computationally expensive tree structure sharing 
handle tree structured functional structures sake efficiency simplicity 
example agreement attri subject main verb may differ ent values 
identity values tested explicitly test augmentation 
sharing tree structured functional structures requires minor modification subtree sharing method shared packed forest representation described subsection 
local ambiguity packing augmented context free grammars easy 
suppose certain nodes packed packed node 
nodes category name np may different attribute values 
certain test lisp function refers attribute packed node value may uniquely determined 
case parser longer treat packed node node parser unpack packed node individual nodes 
question unpacking needs take place practice 
frequently takes place significant local ambiguity packing 
sentence ambiguity comes phenomena pp attachment conjunction scoping require unpacking cases 
instance consider noun phrase man park telescope locally ambiguous telescope modifies man park 
np nodes tion packed node np nodes different attribute values computational linguistics volume numbers january june masaru tomita efficient augmented context free parsing algorithm referred tests augmentation 
argument holds noun phrases pregnant women children large file equipment comprehensive experiments desired expected packed nodes need unpacked practical applications 
lfg compiler general painful create extend modify augmentations written lisp 
lisp functions generated automatically specifica tions 
implemented lfg compiler compiles augmentations higher level notation lisp functions 
notation similar lexical functional grammar lfg formalism bresnan kaplan patr ii shieber 
example lfg notation compiled lisp function shown figures 
generate non destructive functions side effects sure process alters processes parser control flow 
generated function takes list np vp lambda xi list list setq setq setq arguments value associated right ha side symbol returns value associ ated left hand side symbol 
value list structures case disjunction local ambiguity 
semantic grammar lfg notation generated automatically domain semantics specification purely syntactic grammar discussed tomita carbonell 
discussion scope 
np vp xl case nom 
form finite time xl agr 
agr time past xo xz xo mood dec xo subj xl example grammar rule lfg notation 
cons quote cons quote xi xi quote xi case quote nom quote form quote finite append setq quote time quote setq quote agr quote xl agr setq quote time quote past setq quote xo quote setq quote xo mood quote dec setq quote xo subj quote getvalue quote xo 
compiled grammar rule 
computational linguistics volume numbers january june masaru tomita efficient augmented con ext free parsing algorithm parsing algorithm parses sentence strictly left right 
characteristics line parsing possi ble parse sentence user types waiting completion sentence 
example session line parsing sample sentence saw man telescope 
sa saw saw saw saw saw saw bt 
saw big saw big saw big saw big ma saw big saw big saw big saw bi saw saw saw saw ma saw man saw man saw man saw man wt saw man wit saw man saw man saw man saw man saw man saw man saw man saw man tele saw man saw man saw man saw man saw man telescope saw man saw man starts accepting sentence 
starts parsing 
starts parsing saw 
starts parsing 
starts parsing big 
user changes mind 
starts unparsing big 
starts parsing man 
starts parsing 
starts parsing 
tel starts parsing telescope 
te 
user hits return 
ends parsing 
example line parsing 
example user wants hit backspace key correct previously input words 
case words proc parser parser able un parse words parsing sentence 
implement unparsing parser needs store system status time word parsed 
fortunately nicely done parsing algorithm pointers graph structured stack parse forest need stored 
noted parsing algorithm algorithm parses sentence strictly left right left right algorithms include earley algorithm active chart parsing algorithm winograd breadth version atn woods 
despite availability left right algorithms surprisingly line parsers exist 
adopted line parsing menu system typed inputs 
rest section discuss benefits line parsing quicker response time early error detection 
obvious benefit line parsing reduces parser response time significantly 
user finishes typing sentence input sentence processed parser 
affect cpu time reduce response time user point view significantly 
line parsing useful interactive systems input sentences typed user line particularly useful batch systems input sentences provided file 
benefit line parsing detect error soon error occurs warn user immediately 
way line parsing provide better man machine communication 
studies human factors necessary 
introduced efficient context free pars ing algorithm application line natural language interfaces discussed 
pilot line parser implemented maclisp computer science department gie mellon university cmu part author thesis tomita 
empirical results section parser 
cmu machine translation project carbonell tomita adopts line parsing multiple languages 
parse unsegmented sentences spaces words typical japanese 
handle unsegmented sentences grammar written char manner terminal symbols grammar characters words 
morphological rules syntactic rules written augmented context free grammar 
parser takes seconds cpu time sentence symbol ics grammar rules response time real time second due line parsing 
speed affected length sentence size grammar discussed section 
expect improve ments fully segmented sentences english words characters atomic units 
commercial line parser japanese language developed common lisp jointly intelligent technology incorporation ti carnegie group incorporation cgi technique developed cmu 
continuous speech recognition project cmu hayes line parsing algo computational linguistics volume numbers january june masaru tomita efficient augmented context free parsing algorithm rithm extended handle speech input speech parsing process efficient capable pipelined lower level processes acoustic phonetic level recognition tomita 
jaime carbonell phil hayes james allen herb simon tanaka ralph man helpful comments early version 
implemented runtime parser lr table compiler respectively common lisp 
lori levin watanabe peggy anderson donna gates developed japanese english grammars lfg notation 
hiroaki saito implemented algorithm speech input 
ron kaplan martin kay lauri karttunen stuart shieber provided useful comments implementation lfg dag struc ture sharing 
aho johnson lr parsing 
computing survey 
aho ullman theory parsing translation compiling 
prentice hall englewood cliffs new jersey 
aho principles compiler design 
addi son wesley 
bresnan kaplan functional grammar formal system grammatical representation 
mental repre sentation grammatical relations 
mit press cambridge massa 
carbonell tomita knowledge machine translation cmu approach 
machine translation theoretical methodological issues 
cambridge university press 
church patil coping syntactic ambiguity put block box table 
technical report mit lcs tm laboratory computer science massachusetts institute technology cambridge massachusetts 
practical translators lr languages 
ph thesis massachusetts institute technology cambridge massachusetts 
simple lr grammars 
communications acm 
earley efficient context free parsing algorithm 
communications acm 
hayes hauptmann carbonell tomita parsing spoken language semantic approach 
proceedings lth international conference computation linguistics coling 
kay functional unification grammar formalism machine translation 
proceedings loth international conference computational linguistics 
pereira structure sharing representation tion grammar formalisms 
proceedings rd annual meeting association computational linguistics 
shieber sentence disambiguation shift reduce pars ing technique 
proceedings st annual meeting association computational linguistics 
shieber design computer language linguis tic information 
proceedings loth international conference computational linguistics 
shieber restriction extend parsing algorithms complex feature grammar formalisms 
proceedings rd annual meeting association computational linguistics 
ross thompson miller menu natural language understanding 
proceedings st annual meeting association compu tational linguistics 
tomita lr parsers natural language 
proceedings loth international conference computational linguistics coling 
tomita efficient parsing natural language fast algo rithm practical systems 
kluwer academic publishers boston massachusetts 
tomita sentence disambiguation asking 
computers translation 
tomita efficient word lattice parsing algorithm continuous speech recognition 
proceedings ieee axi international conference acoustics speech signal processing icassp 
winograd language cognitive process 
addison wesley 
woods transition network grammars natural language analysis 
communications cm 
notes 
research sponsored defense advanced research projects agency dod arpa order monitored air force avionics laboratory contract 
views contained document author interpreted representing cial policies expressed implied defense advanced research projects agency government 

situation called conflict 

possibly reduced processes reach error entries die 

term node forest representation term vertex graph structured stack representation 

practice theory 

plan handle dag structures tree struc tures may adequate tree structures dag structures 
computational linguistics volume numbers january june 
