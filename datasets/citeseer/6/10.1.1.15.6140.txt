framework typed hoas semantics marino miculan miculan dimi ivan dimi department mathematics computer science university udine delle scienze udine italy investigate framework representing reasoning syntactic semantic aspects typed languages variable binders 
introduce typed binding signatures develop theory typed syntax binders 
signature associated category presentation models language typed signature initial model 
semantic level types computational meaning possibly different semantic category 
observe general semantic aspects terms variables reflected presentation category means adjunction 
category presentation models expressive represent syntactic semantic aspects languages 
introduce metalogical system inspired internal languages presentation category reasoning syntax semantics languages 
system composed core equational logic tailored reasoning syntactic aspects specific semantics chosen system modularly extended semantic notions needed 
categories subject descriptors programming languages formal definitions theory syntax semantics logics meanings programs semantics programming languages algebraic approaches semantics denotational semantics formal languages mathematical logic formal languages algebraic language theory general terms languages theory 
research supported italian project 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
ppdp august uppsala sweden 
copyright acm 
keywords typed syntax variable binding categorical metamodels metalanguages syntax semantics languages initial algebra semantics presheaf categories 
known order reason programs programming languages face problem representing syntax related machinery substitution conversion modeling underlying semantics 
sight abstraction layers may independent closely related instance interpretation terms fixed syntactic substitution usually uniquely determines corresponding notion semantic substitution called substitution lemma 
contact point pervasive notion intrinsic type 
syntactically types denote languages usually defined inductively grammars possibly binders equivalences 
inductive structure typed syntax fundamental recursive definitions inductive reasoning 
semantically types denote domains ranged variables syntactic expressions meaning 
syntactic semantic manipulations substitution respect types non wellformed terms meaningless structures arise 
framework metamodel aiming provide mathematical notions tools reasoning programming languages address syntactic semantic aspects par 
metamodel interactions dependencies abstraction levels 
aim define investigate framework 
setting inspired previous fiore hofmann plotkin turi 
works advocate presheaf categories satisfactory representation syntax typed languages variables binding operators 
turns presheaf categories address semantic aspects 
proceed follows 
give account typed higher order syntax semantics interconnection 
introduce notion typed binding signatures develop theory algebraic typed syntax variable binders 
types signature associate category presentation models modt set set suitable category typing contexts 
language typed signature defined initial algebra corresponding signature functor modt 
hand types semantics meaning suitable category depending particular computational notion focus 
category modt semantic models arises 
mild condition turns connected presentation category adjunction :10.1.1.23.7716
adjunction semantic aspects terms variables reflected syntactic level syntactic structural aspects recovered semantic level 
framework syntax complete semantics syntax reflected established presheaf category modt 
illustrate schema examples 
semantic category presentation category get monoidal closed category monoids fully typed heterogeneous substitutions higher order syntax 
application distinction names variables names common situation process algebras languages syntax manipulation formally clarified 
introduce metalogical system internal languages presentation category reasoning syntax semantics languages par 
metalogical system composed core equational logic tailored reasoning syntactic aspects 
system assumption intended meaning variables seen names :10.1.1.11.7844
allows represent faithfully typed languages binders defining programs structural recursion typed syntax binders 
main purpose act basis extensions types semantic interpretation core metalanguage enriched new type term constructors new propositions modular way 
exemplify approach case variables denoting names semantic interpretation induce rules theory contexts rules close nominal logic 
synopsis 
introduce typed binding signatures 
develop algebraic theory typed syntax means presheaf categories 
address problem connecting semantic syntactic aspects language adjunction 
case studies order illustrate generality applicability framework 
introduce metalanguage parametric signature object language allows reason typed languages higher order syntax 
drawn 
typed binding signatures section introduce category typed binding signatures direct extension typed signatures binding signatures 
definition 
typed binding signature triple countable set basic types set types variables set assigns tuple 
set function symbols 
denote set types signature 
set denoted ar chapter elements called arities signature ranged 
arities function symbols written usual arrow notation write 

notice types may appear negative positions arities 
get back traditional notion typed signature get notion binding signature 
notice symbol may overloaded may arities 
example 
signature untyped calculus app 
smallest set containing set atomic type symbols closed constructor 
signature simply typed calculus app 
signature calculus match output input 
morphism signatures consists function type sets extended arities obvious way arity function 

typed binding signatures morphisms form category sign 
terms 
signature var var indexed family infinite sets variables ranged 
set terms type defined grammar op 
xn tn op 
ti usual conventions free bound variables conversion apply 
precise definition terms generated binding signature type theoretic form 
var 
enumeration distinct elements called variable symbols typing context denoted list 
vn term calculus system deriving typing judgments usual form rules 
index dropped clear context 
system consists projection rule specific rule constructor op signature 
rules contexts premises extended new variable symbols shorthand vn 
vn usual terms taken conversion 
vi vi vn 
vk tk op 
xk tk vn vn vn vn vn vn vn vn vn vn vn vn vn op term calculus binding signature rules remaining rules usual ones structural manipulation contexts 
strictly speaking rules admissible omitted 
signature context type denote set equivalence classes terms type 

algebraic typed hoas section give algebraic presentation typed syntax bindings 
term calculus stratify sets terms typing contexts 
pointed adequate universe reflecting situation functor category form set index category suitable category contexts 
case typed syntax category contexts turns free cocartesian category category variable types features recall 
analyze category syntactic sort interpreted 
properties type constructors language generated typed binding signature described initial algebra suitable signature endofunctor category presentation models modt 
structure typed contexts signature 
context 
xn defined abstractly map set cardinal 
denoted 
maps objects comma category set inclusion functor full subcategory set finite cardinals 
morphisms type preserving renamings morphism 
context concatenation corresponds coproduct fact category typed cartesian contexts free cocartesian category abuse notation denote context object coproduct chosen inclusion maps fresh old notice morphisms generated closing composition families maps correspond structural rules exchange weakening contraction ambient category category syntactic sort interpreted set objects sets stratified typed contexts 
usual topoi called types category ranged notice correspond syntactic types syntactic types interpreted functor set terms type context 
variable substitution extension structural recursion terms type reason denote 
morphism natural transformations family functions satisfying naturality condition 
morphism lan guages type stratified accordingly context structure respect structural operations contexts 
notice naturality condition rules morphisms may expect define syntactic terms 
instance family functions nat set counting free variables terms language natural consider contraction map 
morphism nat counting free variables terms 
morphisms rich contain interesting maps fully typed simultaneous substitution see normalization functions 
mentioned sets terms indexed types complete description language generated signature indexed family functors families form functors objects category presentation models modt set set viewed discrete category 
interested simple type theories complex theories subtyping polymorphism modelled adding suitable structure category discrete structure modt essentially recall pattern 
limits colimits 
degenerate case set category rich interesting structure complete cocomplete cartesian category topos limits colimits computed pointwise 
automatically sums products exponentials 
recall exponential defined objects follows op yoneda embedding 
typed variables 
define presheaf variables type var context variable type 
explicitly var restriction cardinal elements type var var presheaf declared variables defined 
notice representable 
typed operations 
non syntactic construction types 
cartesian category functor 
op slice extension defined follows 
object presheaf typed operations functor set defined follows 
context extension 
define typed context extension constructor operation context extension level contexts 
explicitly id elements seen elements possibly hole type 
proposition 
var proof 
var var 
equivalence core higher order syntax representations type theory calculi see 
property shown observing right adjoint var var define var id 
hand var define old fresh 
left adjoint functor op 
words define hand define id 
proved proposition 
var corollary 
preserves limits colimits 
monad unit id multiplication contr arise structural rules contexts weakening contraction contexts contr way exchange map lifts natural transformation swap exchanges order holes 
notice swap swap ids 

list types denote composition observe coproduct diagram var old fresh var old old var var var fresh fresh var 
notice var var seen partial differentiation operator 
typed syntax binders initial algebras type constructors properties described previous section give algebraic characterization language generated typed binding signature 
recall set terms equivalence type defined 
definition extended presheaf adding obvious action morphisms 
xn object part functor syntax consider discrete action morphisms trivial 
language terms generated object modt 
see characterized initial algebra functor associated signature similarly specific case simply typed calculus 
signature associate functor modt modt defined follows var op syntactic shorthand 
consider category alg algebras pairs modt structure 
object category interpret syntactic constructors signature algebra operator op mapped corresponding component structure mapping component ir back functor endowed structure algebra syntactic constructor 
type context define follows var 
tn 
tn op 
xn tn xi list variables domain added 
theorem 
syntactic model associated signature endowed structure initial algebra initial object alg 
result allows define morphisms initiality structural recursion syntax typed terms binders see 
terms holes 
type consider functor functor seen language generated signature admit hole metalevel variable type 
generally list types consider functor term contexts holes 
need reason induction structure term contexts structure plain terms 
instance substitution defined structural recursion term contexts see untyped case 
important give characterization languages initial algebras 
consider functor modt 
swap isomorphism times 
proposition preserves products coproducts distributes op part follows var op coproduct var var number occurrences 
writing define endofunctor modt follows proved 
applying theorem lift initial algebras algebras 
formally characterization languages holes theorem 
initial algebra notice definition structure algebras essentially algebras possibly plus constant injections holes types variables 
means definitions structural recursion term contexts exactly pattern recursions terms possibly extended base cases needed holes correct type 

reflecting semantics seen previous section category modt suited characterization syntax generated typed signatures types may wonder category rich containing semantics typed languages 
section address question 
general give types terms interpretation category different denote intended meaning interpretation 
see variables type var ranging generals choice category depends particular computational notion focusing see :10.1.1.41.840
instance order interpret typed calculus choose cartesian closed category necessarily general preferred semantic model types category modt syntactic model modt 
need reason semantic objects structural properties terms structural recursion corresponds initiality algebras fact cocomplete adjunction connects semantic category preferred syntactic category :10.1.1.23.7716
typed binding signatures situation follows set op lan setting gives insights interplay syntactic semantic notions 
adjunction allows transfer constructions second vice versa 
framework syntax complete semantics syntax reflected established presheaf category section describe construction simple generalization :10.1.1.23.7716
exemplify interesting situations initial semantics simply typed calculus typed substitution monoidal category monoids generalize lawvere algebraic theories suitable semantics names nominal calculus calculus 
syntax semantics back cocomplete category modt functor meaning types 
definition presheaves typed operations extended functor adding action morphisms 
applying theorem left adjoint colim op category elements applying theorem obtain left kan extension yoneda embedding set usual 
proposition 
cocomplete category adjunction follows bijection natural lift adjunction model categories modt modt theorem 
cocomplete category adjunction modt modt fa defined gb proof 
sketch order prove result show bijection fa gb 
fa natural transformation gb 
follows morphism conclude sufficient define adjunction proposition 
doing required properties naturality follow 
abuse notation write respectively 
notice var var typed initial semantics consider signature simply typed calculus example 
case studied depth fiore semantic analysis normalisation evaluation 
consider case show application general setting may bring light new connections semantic syntactic aspects known language 
signature endofunctor modt modt var initial algebra theorem language simply typed terms 
type denote usual interpretation cartesian closed category see 
image modt adjunction clone typed operations generalization similar structure universal algebra 
properties give structure algebra var ev unfold fold curry exists unique homomorphism tr stage type map translates structural recursion term representation map tr tr acts compositional compiler 
easy see corresponds usual interpretation typed calculus 
hand consider modt 
elements equivalence classes tuples form 
tuples seen program equipped data right types associated free variables inputs 
algebra modt modt defined polynomial lifting recalling var prove theorem initial algebra exactly initial algebra 
structure exists unique homomorphism eval program equipped data eval evaluates value structural recursion eval acts interpreter 
notice tr eval images adjunction monoids typed substitution subsection give algebraic theory typed substitution lines 
theory naturally arises generals denoted variables terms 
op colim expressed coequalizer object maps indexed corresponding summand indexed means maps summand indexed means 
observing second coproduct written obtain aa equivalence relation generated coequalizer property 

bm 
turns modt closed monoidal category modt var monoids correspond typed heterogeneous substitutions intuitive meaning object 
bn suspended substitution respecting types bi 
similarly define internal language modt simultaneous typed substitution typed calculus case var ui app app lam lam var fresh var var app lam form algebraic structure 
worth noticing type set pointed monoids var correspond lawvere algebraic theories 
say typed monoids generalization interesting determine generalisation variables names apply framework address common issue hoas techniques variable name variable ranging names 
important languages hoas manipulation freshml nominal calculi calculus definiteness 
variables syntactic entities names semantic entities choose set subcategory injective morphisms 
pattern obtain aa equivalence relation defined 
maps injective possible define tensor set follows bn supp supp set supp stands support precise definition 
purposes think supp set free names fn 
follows recall examples type names calculus presheaf representing names set stands set pairs nm bm fn 
means adjunction transfer semantical notion presentation category defining sb choose var presheaf representing processes remember examples type calculus processes var ss var object term var ss natural transformation 
var ss corresponds datatype pairs var variable interpreted names occur free interpretation words represents freshness predicate holds iff interpretation name occurring free interpretation 
metalanguage typed hoas seen previous sections category rich provide suitable presentations syntax semantics object typed language binders 
formal system reasoning objects morphisms useful allow reasoning syntactic semantic aspects object systems higher order syntax 
section describe briefly metalanguage 
important point system modular structure 
required fact syntax may semantics properties rules syntactic part different semantics induce different properties rules 
design system composed semantic free core system called dealing purely syntactic aspects syntax signature focus 
variables free intended meaning strictly weaker specific logics theory contexts nominal logic rely variables names interpretation :10.1.1.11.7844
specific interpretation chosen core system extended reflecting metalanguage semantic aspects needed 
give example process show rules introduce variable intended denote names similar typed nominal logic 
system giving complete formal system describe term type constructors rules safely add ones favorite formal system modular fashion 
require formal system includes sorted equational logic linear calculi ruled 
types terms metalanguage ranged respectively 
contexts metalanguage denoted possibly indexes subject usual rules formation 
assume formal system judgments type formed type context formed term type context true propositions true context distinct type prop prop type derivable terms represent propositions prop formed proposition context 
section interested equational logic assume derive prop usual rules congruence 
improving readability rules drop common part contexts hypotheses assumptions giving rules natural deduction style flavour 
instance usual elimination rule sum types case written case strictly speaking require usual type constructors needed may provided underlying formal system interpreted usual see 
focus rules specific 
distinguished types var type constructor weak hoas paradigm var constructor terms normal form inhabiting var variables metalanguage 
adjunction means essentially variable abstraction type var term constructors corresponding variable abstraction variable instantiation rules respec formation rules types formation rules terms var type type type type var var var var var 
tn ns op 
tn op var case es rec es defined definition conversion rules var var ar case ar var case ar es fop 
tn bn rec var op 
tn fop 
var rec var ti ti bi var var 
xk var var var 
ym var mi mi system signature tively behave expected rule 
underlying logic contains typed calculus calculus constructions term constructors conveniently simulated abstraction application respectively 
var peculiar property coproduct true general abstraction types reflected rules 
encoding object language obtained adding specific constructor types constructor signature rule 
types variables suitable coercion added rule 
important feature system possibility defining terms mutual higher order recursion 
fact theorem type inductive theorem 
inductive 
types signature 
terms type represent syntactic terms type possibly holes type 
system allows elimination schemata datatypes terms holes definition 

set list signature types respectively 
indexed family formed types type derivable 
elimination schema set terms fop op fvar op bi fop 
xn 
xn bn fvar ar 
denote es class elimination schemata elimination schema rule defines term structural recursion term possibly holes conversion rule notice recursion cross binders creating local variables filling holes 
get case elimination schemata plain terms binders 
simple case rules respectively follows es rec es fop 
tn bn rec op 
tn fop 
var rec ti ti bi example 
example program provide definition mutual higher order recursion infinite family typed capture avoiding substitution functions subst parametric term 
intended meaning subst denotes hole filled fvar var fvar case var var app easy see lam rec define required substitution functions subst rec 
properties satisfies usual properties simply typed calculi underlying calculus 
kind normal form terms depends kind reduction underlying calculus usually variant head normal form redexes applied 
denote set terms head normal form type context 
theorem 
context terms types 
exists normal terms type metalanguage correspond faithfully terms type language generated signature 
proposition 

xn context object language bijection terms object language terms normal form metalanguage var 
xn var 
system prove var coproduct var equivalent var 
formally define syntactic shorthands fresh var old var fv proposition 
rules derivable var var type old var fresh var case fresh var case old var unfold old 
xn 
xn unfold old case old var 
xn xn 
denote contr var swap var var proposition 
rules derivable 
contr swap var var contr var var var var var contr var var var var prove monadic properties proposition 
rules derivable old old contr 
soundness 
internal language type interpreted object particular type prop interpreted usual subobject classifier topos 
semantics 
xn natural transformation means morphism propositions satisfied 
order prove soundness system check rule interpreted easily verified inspection fixed interpretation types term constructors 
constructors interpreted expected var var isomorphism adjunction 
particular recursion operators interpreted unique maps initiality alg 
proposition 
notice admits properties principles hold standard interpretation intuitionistic higher order logic topos particular principle unique choice ruled priori consistent 
things change extend rules derived semantic interpretation see 
extending semantic properties seen adjunction connecting category cocomplete adjunction build new types allows introducing new type constructors propositions metalanguage modular way 
instance case set add new rules tensor type freshness proposition type var type var prop var structural rules ti xi xi op 
tn op xij xi dom xij xik xi 
instance calculus rule dom var lam similar rules theory contexts 
predicate introduce multi sorted quantifier nominal logic corresponding formation elimination rules prop prop var prop var dom :10.1.1.11.7844
interpretation soundness semantic rules properties types reflected general may require define peculiar notions truth validity interpreting prop non standard subobject classifier 
case properties valid standard interpretation may valid anymore 
particular principles choice unique choice may invalid known 
reason preferred keep core system simple possible open possibilities 

framework representing reasoning syntax semantics languages types binders 
approach developed algebraic theory typed syntax suitable presentation category modt ultimately presheaf category :10.1.1.23.7716
pointed means general construction category interpret syntax semantics type theory mild condition 
instance shown semantic notion name related syntactic counterpart variable ranging names 
internal structure modt interesting useful 
metalogical system particular internal logic modt reason syntactic semantic aspects languages 
system composed core equational logic reasoning general aspects syntax specific semantic interpretation chosen system extended type term constructors deriving semantics streamlining approach followed 
general framework useful foundational point view allows illuminate relationships syntactic semantic layers programming languages 
related 
algebraic treatment typed binding signatures direct consequence untyped binding signatures specific case simply typed calculus 
metalogical systems reasoning datatypes variables binders different approaches 
opinion development carried tries close gap oriented algebraic point view hand inspired logical perspective 
seen reflect presentation level notion predicate freshness predicate metalanguage level retaining properties derived initial algebra semantics 

development generalized order cope complex languages semantics 
instance order represent faithfully typed calculus object calculi need take account notion subtyping 
easily partial order preorder viewed category 
important typing notions polymorphism equational theories types dependent types 
instance polymorphic types la ml cpo semantic category give formal setting languages freshml 
open problem formal modularization reflections semantic notions presentation category metalogical system 
task require modularization semantics moggi approach computational monads 
reflect monad logic practical side notions initial algebra initial algebra semantics useful implementation logical frameworks featuring recursion possibly higher order typed languages binders lines metalogical system 

hofmann honsell miculan 
consistency theory contexts 
submitted 
fiore turi 
semantics name value passing 
mairson editor proc 
th lics pages boston usa 
ieee computer society press 
fiore 
semantic analysis normalisation evaluation typed lambda calculus 
ppdp principles practice declarative programming 
acm press 
fiore plotkin turi 
syntax variable binding 
longo pages 
freshml fresh approach name binding metaprogramming languages 
www cl cam ac uk amp research freshml 
research project 
gabbay pitts 
new approach syntax involving binders 
longo pages 
hofmann 
semantical analysis higher order syntax 
longo pages 
honsell miculan 
axiomatic approach metareasoning systems higher order syntax 
proc 
icalp volume lecture notes computer science pages 
springer verlag 
honsell miculan 
calculus inductive type theory 
theoretical computer science 
inria 
coq proof assistant 
coq inria fr doc main html jacobs 
categorical logic type theory volume studies logic foundations mathematics 
elsevier 
longo editor 
proceedings fourteenth annual ieee symposium logic computer science 
ieee computer society press 
mac lane 
categories working mathematician 
springer verlag berlin 
mac lane moerdijk 
sheaves geometry logic topos theory 

springer verlag 
mcdowell miller 
logic reasoning higher order syntax 
proc 
th lics 
ieee 
moggi 
notions computation monads 
information computation 
nordstr petersson smith 
programming martin type theory volume international series monograph computer science 
oxford university press 
pitts 
categorical logic 
abramsky gabbay maibaum editors handbook logic computer science volume 
oxford university press 
pitts 
nominal logic order theory names binding 
information computation 
special issue tacs appear 
sch rmann 
recursion higher order encodings 
proc 
csl volume lecture notes computer science 
springer verlag 
