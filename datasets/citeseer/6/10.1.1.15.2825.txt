uc san diego cs ucsd edu efficient ir style keyword search relational databases applications plain text structured data pervasive 
commercial relational database management systems rdbmss generally provide querying capabilities text attributes incorporate state art information retrieval ir relevance ranking strategies search functionality requires queries specify exact column columns list keywords matched 
requirement cumbersome inflexible user perspective answers keyword query need assembled unforeseen ways joining tuples multiple relations 
observation motivated research free form keyword search rdbmss 
adapt ir style document relevance ranking strategies problem processing free form keyword queries rdbmss 
query model handle queries semantics exploits sophisticated single column text search functionality available commercial rdbmss 
develop query processing strategies build crucial characteristic ir style keyword search relevant matches definition relevance generally interest 
consequently computing matches keyword query leads inefficient executions techniques focus top matches query moderate values thorough experimental evaluation real data shows performance advantages approach 
luis gravano columbia university gravano cs columbia edu supported nsf 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference berlin germany yannis papakonstantinou uc san diego yannis cs ucsd edu applications plain text structured data pervasive 
furthermore text structured data stored side side standard relational database management systems rdbmss example illustrates 
example consider customer service database large vendor computer equipment 
table database complaints date comments logs complaint received tuple internal identifier customer complaint identifier main product involved complaint complaint date description problem reported customer comments 
example instance relation date comments disk crashed just week moderate ibm lower ibm caught fire starting apparently disk tuple instance corresponds complaint customer product see corresponds hard drive june 
commercial rdbmss generally provide querying capabilities text attributes incorporate state theart information retrieval ir relevance ranking strategies 
search functionality requires queries specify exact column columns list keywords matched 
example query select complaints contains comments disk crash order score desc oracle returns rows complaints table match keyword query disk crash sorted score determined ir relevance ranking algorithm 
intuitively score tuple measures comments field matches query disk crash 
requirement queries specify exact columns match cumbersome inflexible user perspective answers keyword query need assembled unforeseen ways joining tuples multiple relations www oracle com 
example cont 
additional relation example database products manufacturer model records manufacturer model associated product 
attribute complaints relation products 
consider instance relation complaints plus instance products relation manufacturer model maxtor ibm best answer keyword query maxtor ibm tuple results joining tuple relations attribute 
join correctly identifies complaint customer maxtor disk drive manufacturer attribute products relation ibm computer comments attribute complaints relation 
free form keyword search rdbmss attracted research interest 
keyword query systems discover join tuples multiple relations database identify tuple trees query keywords semantics 
tuple trees answer query 
discover rank tuple trees solely number joins needed creation 
rationale simple relevance ranking scheme joins needed create tuple tree query keywords clear result meaningful helpful 
unfortunately techniques consider ir style ranking heuristics proved effective text 
key contribution incorporation ir style relevance ranking tuple trees query processing framework 
particular scheme fully exploits single attribute relevance ranking results rdbms choice text indexing capabilities case oracle discussed 
leveraging state theart ir relevance ranking functionality modern rdbmss able produce high quality results free form keyword queries 
example query disk crash match comments attribute complaints tuple high relevance score word stemming crash matches crashed word elimination absence weighed highly 
scheme relies ir engines rdbmss perform relevance ranking attribute level handles semantics 
unfortunately existing query processing strategies keyword search rdbmss inherently inefficient attempt capture tuple trees query keywords 
strategies exploit crucial characteristic ir style keyword search top relevant matches keyword query definition relevance generally interest 
second contribution presentation efficient query processing techniques ir style queries rdbmss heavily exploit observation 
see techniques produce top matches query moderate values fraction time taken state art strategies compute query matches 
furthermore techniques pipelined sense execution efficiently resume compute matches user desires 
rest structured follows section discusses related 
sections define problem processing keyword search top queries rdbmss provide necessary notation describe general architecture system 
section introduces key query processing algorithms evaluate experimentally section 
section concludes 
related research addressed problem free form keyword search structured semi structured data 
banks views database graph database tuples objects nodes application specific relationships edges 
example edge may denote foreign key relationship 
banks answers keyword queries searching steiner trees containing keywords heuristics search 
goldman related graph view databases 
user query specifies sets objects find near objects may generated separate keyword sets 
system ranks objects find distance objects near algorithm efficiently calculates distances building hub indexes drawback approaches graph database tuples materialized maintained 
furthermore important structural information provided database schema ignored data graph built 
discover exploit rdbms schema leads relatively efficient algorithms answering keyword queries structural constraints expressed schema helpful query processing 
systems rely similar architecture build section 
discover techniques limited boolean semantics queries handle queries semantics 
contrast discover banks require query keywords appear tree nodes tuples returned answer query 
furthermore employ ranking techniques developed ir community ranking answers solely size result discover 
techniques improve previous terms efficiency exploiting fact free form keyword queries generally answered just relevant matches 
produces top matches query fast moderate values ir community focused decades improving quality relevance ranking functions text document collections 
refer reader survey :10.1.1.117.7676
proposed query processing system builds ir exploiting ir style functionality modern rdbmss routinely include typically individual text attributes 
example oracle text ibm db text information extender standard sql create full text indexes text attributes relations 
microsoft sql server provides tools generate full text indexes stored files outside database 
systems allow users create full text indexes single attributes perform keyword queries 
treating single attribute indexing modules black boxes query processing system separates peculiarities attribute domain application 
effect approach require semantic knowledge database cleanly separates relevance ranking problem specific database attribute performed appropriate rdbms modules problem combining individual attribute scores identifying top joining trees tuples see section query focus 
keyword search xml databases attracted interest 
florescu extend xml query languages enable keyword search granularity xml elements helps novice users formulate queries 
consider keyword proximity 
view xml database graph minimal xml segments find connections contain query keywords 
focus presentation results view materialization techniques provide fast response times 
proposes ranking function xml result trees combines scores individual nodes result tree 
tree nodes assigned pagerank style scores line :10.1.1.109.4049
scores query independent incorporate ir style keyword relevance 
problem processing top queries attracted attention number different scenarios 
design pipelined algorithms propose faces challenges related top :10.1.1.112.869
problem unique section need join ranked tuples coming multiple relations unpredictable ways produce final top results 
extend fagin allowing different objects appear source lists opposed assuming lists just attribute values common set objects 
result objects lists need joined done user defined aggregation functions 
single pipelined algorithm section regarded instance general algorithm 
oracle com products text content html 
www ibm com software data db 
msdn microsoft com library 
products manufacturer model complaints date comments customers name occupation schema complaints database 
complaints tupleid date comments disk crashed just week moderate ibm lower ibm caught fire starting apparently disk ibm unstable maxtor hd products tupleid manufacturer model maxtor ibm smart va customers tupleid name occupation john smith software engineer jack lucas architect john mayer student instance complaints database 
consider predicates connecting relations free tuple sets terminology section 
processing buffers incomplete results inefficient infeasible setting combinations tuples non free tuple sets candidate results may join free tuple sets 
framework section specify query model section family scoring functions consider identify top answers query section 
query model consider database relations rn 
relation ri mi attributes mi primary key possibly foreign keys relations 
schema graph directed graph captures foreign key relationships schema 
node relation ri edge ri rj primary key foreign key relationship ri rj 
shows schema graph complaints database running example shows possible instance database 
schema graphs definition forms basis query result specification definition joining trees tuples schema graph database joining tree tuples tree tuples edge ti tj ti ri tj rj satisfies properties ri rj ti tj ri rj 
size joining tree number tuples top keyword query list keywords wm 
result top query list joining trees tuples score score query highest score discussed 
ties broken arbitrarily 
query result sorted descending order scores 
require joining tree query result minimal tuple zero score removed tuples remaining disconnected form joining tree 
words leaf tuple zero score 
example choice ranking function score results top query maxtor complaints database 
allow tuple appear joining tree tuples 
ranking functions discuss rank joining trees tuples query 
result ranking addressed keyword search systems relational data 
query discover assign score joining tree tuples way contains words score size alternatively banks uses scoring scheme fr fn fp contains score words fr measures related relations tuples fn depends weight tuples determined pagerank inspired technique fp function weight edges approaches capture size structure query result score assigned leverage relevance ranking strategies developed ir community years 
discussed strategies developed exactly improve document ranking quality free form keyword queries naturally help improve quality keyword query results rdbmss 
furthermore modern rdbmss include ir style relevance ranking functionality individual text attributes exploit define ranking scheme 
specifically score assign joining tree tuples query relies single attribute ir style relevance scores score ai textual attribute ai query determined ir engine rdbms function combine combines scores final score example state art ir definition scoring function score follows score ai ln ln tf dl ln df avdl introduces variations scheme tuple edge terms multiplied added :10.1.1.117.7676:10.1.1.117.7676:10.1.1.117.7676
word tf frequency df number tuples ai relation word attribute dl size ai characters avdl average attribute value size total number tuples relation constant usually 
note single attribute scoring function easily extended incorporate pagerank style link scores 
turn problem combining scores joining tree tuples final score tree 
notice score single tuple defined viewing joining tree size 
vector textual attribute values define score score combine score size score score score 
notice size characteristics suited specifics application 
simple definition combine ai combine score size score ai size definition combine function natural course functions possible :10.1.1.117.7676
query processing algorithms handle combining function satisfies property definition tuple monotonicity combining function combine satisfies tuple monotonicity property query joining trees tuples derived cn consists tu ples tn consists tuples ii score ti score follows score score 
notice ranking function score single tuple arbitrary discussion assume formula equation calculates rank single tuple joining tree tuples 
ranking functions joining trees tuples aware including equation satisfy tuple monotonicity property execution algorithms discuss 
addition combining function queries specify boolean semantics 
semantics assigns score tuple tree include query keywords tuple trees query keywords receive score determined combine 
contrast semantics assigns tuple tree score determined combine tuple tree includes query keywords 
summary single attribute score function combine function choice assign relevance scores joining trees tuples semantics 
section outlines architecture query processing system efficiently identifies trees tuples highest relevance scores query 
architecture query processing system 
system architecture architecture query processing system relies possible existing unmodified rdbms components 
specifically architecture consists modules ir engine discussed modern rdbmss include ir style text indexing functionality attribute level 
ir engine module architecture exploits functionality identify database tuples non zero score query 
ir engine relies ir index inverted index associates keyword appears database list occurrences keyword occurrence keyword recorded pair 
implementation uses oracle text keeps separate index relation attribute 
combine individual indexes build ir index 
query arrives ir engine uses ir index extract relation tuple set score consists tuples non zero score tuples tuple sets ranked descending order score required top query processing algorithms described 
candidate network generator module pipeline candidate network cn generator receives input non empty principle exploit efficient indexing schemes text indexes tuple level rdbmss start support 
products complaints customers products complaints tuple set graph complaints database query maxtor 
tuple sets ir engine database schema parameter explain 
key role module produce cns join expressions create joining trees tuples considered potential answers query 
specifically cn join expression involves tuple sets plus additional base database relations 
refer base relation appears cn free tuple set denote intuitively free tuple sets cn occurrences query keywords help connect foreign key joins non free tuple sets non zero scores query 
result cn potential result keyword query 
say joining tree tuples belongs tree isomorphism mapping tuples tuple sets example complaints products 
input parameter bounds size number tuple sets free non free cns module produces 
notion cn introduced discover 
discussed discover require joining tree tuples query answer contain query keywords 
produce answers query semantics systems create multiple tuple sets database relation 
specifically separate tuple set created combination keywords relation 
generally leads number cns exponential query size query execution prohibitively expensive queries small number keywords values greater 
contrast create single tuple set relation specified 
queries semantics postprocessing step checks return tuple trees containing query keywords 
see characteristic system results significantly faster executions turn allows handle larger queries consider larger cns 
cn generation algorithm discover system explained full detail due lack space 
conceptually create tuple set graph database schema graph tuple sets returned ir engine module 
shows tuple set graph complaints database query maxtor 
initially set candidate cns consists non free tuple sets products complaints example 
progressively expand cn adding tuple set adjacent tuple set graph 
consider cn part refers cns join trees cq cq cq cq cq cq cn results complaints database query maxtor stands complaints products customers 
output module satisfies properties 
number non free tuple sets exceed number query keywords constraint guarantees generate minimum number cns missing result contains keywords crucial boolean semantics 
result contains keyword exactly cn exists example products complaints customers complaints cn query maxtor 
particular results subset results products complaints customers complaints 
leaf tuple sets free constraint ensures cn minimality example products complaints cn subsumed simpler cn products 
contain construct form construct existed resulting joining tree tuples contain tuple 
example products complaints products cn produced joining networks tuples form size cn number tuple sets 
cns size lower query maxtor shown 
execution engine final module pipeline execution engine receives input set cns non free tuple sets 
execution engine contacts rdbms query execution engine repeatedly identify top query results 
shows joining trees tuples produced cn scores query maxtor complaints example 
execution engine module challenging implement efficiently subject section 
execution algorithms algorithms core operation system set cns set non free tuple sets execution engine needs efficiently identify top joining trees tuples derived 
describe naive algorithm simple adaptation query processing algorithms prior 
second sparse algorithm improves naive algorithm dynamically pruning cns query evaluation 
third describe single pipelined algorithm calculates top results single cn pipelined way 
fourth global pipelined algorithm generalizes single pipelined algorithm multiple cns calculate final result top queries 
introduce hybrid algorithm combines virtues global pipelined sparse algorithms shown outperform approaches section 
naive algorithm naive algorithm issues sql query cn top query 
results cn combined sort merge manner identify final top results query 
approach adaptation execution algorithms prior keyword search queries 
simple optimization experiments get top results cn scoring function enable top hint functionality available oracle rdbms 
case boolean semantics naive algorithm sparse algorithm involves additional filtering step stream results check presence keywords 
sparse algorithm naive algorithm exhaustively processes cn associated query 
improve query processing performance discarding point time unprocessed cn guaranteed produce top match query 
specifically sparse algorithm computes bound mps maximum possible score tuple tree derived cn ci 
exceed actual score produced tuple trees cn safely removed consideration 
calculate mps apply combining function top tuples due monotonicity property definition non free tuple sets ci 
mps score hypothetical joining tree tuples contains top tuples non free tuple set optimization cns query evaluated ascending size order 
way smallest cns expensive process produce high score tuple trees combining function evaluated 
discuss section sparse algorithm method choice queries produce relatively results 
single pipelined algorithm single pipelined algorithm receives input candidate network non free tuple sets ts ts participate recall non free tuple sets corresponds relation contains tuples relation non zero match hint optimizer significantly improved performance experiments 
query 
furthermore tuples ts sorted descending order score query 
note attribute score ai tuple score scores associated tuple ts initially computed ir engine described need re calculated execution engine :10.1.1.117.7676
output single pipelined algorithm consists stream joining trees tuples descending score order 
intuition single pipelined algorithm follows 
keep track prefix ts retrieved tuple set ts iteration algorithm retrieve new tuple ts add associated retrieved prefix ts 
discuss choice ts 
proceed identify potential joining tree tuples participate 
prepare advance parameterized query performs appropriate joins involving retrieved prefixes 
shows parameterized query cn specifically invoke parameterized query tuple tm tm tv ti ts joining trees tuples include returned queries added queue output trees guarantee top joining trees original query 
notice naive execution algorithm prevent producing results candidate trees computed rank ordered 
discuss bound score tuple trees produced achieve circumventing limitation naive algorithms 
effect single pipelined algorithm start producing results examining entire tuple sets 
maintain effective estimate maximum possible score mpfs unseen result achieve information gathered algorithm 
specifically analyze status prefix ts bound maximum score tuple corresponding non free tuple set reach 
recall non free tuple sets ordered tuple scores 
compute mpfs calculate mpfs non free tuple set ts maximum possible score tuple tree contains tuple ts retrieved ts mpfs max score ts 
ts ts 
ts unfortunately precise calculation mpfs require multiple database queries cost similar computing possible tuple trees queries 
alternative expensive computation attempt produce hopefully tight overestimate mpfs computed score hypothetical tree tuples consisting unprocessed tuple ti ts tuple top tuple set ts notice notice mps defined section equivalent mpfs evaluation cn begins parameterized query executed 
mpfs ts tupleid score tupleid score ts ts ts iteration tree free tuple sets ts tupleid score mpfs mpfs ts mpfs queue results score snapshot single pipelined execution 
mpfs overestimate mpfs guarantee tuples ti top participate joining tree mpfs best estimate produce efficiently accessing database see results significant savings naive executions 
similar rationale define overestimate mpfs entire candidate network maxi mpfs tentative result see safely returned top results associated score mpfs key issue choice tuple set pick tuple simple possibility pick tuple sets randomly round robin way 
single pipelined algorithm picks promising tuple set defined tuple set produce highest ranked result 
heuristic pick tuple tuple set ts maximum value mpfs mpfs 
experiments section show choice tuple set results better performance random round robin choices 
example shows snapshot execution single pipelined algorithm hypothetical database 
candidate network free non free tuple sets 
thick dotted lines denote prefix tuple set retrieved far 
combining function equation 
result output score equal mpfs 
contrast second result safely output score mpfs 
suppose retrieve new tuple tuple set maximum mpfs assume results produced associated parameterized queries instantiated 
mpfs mpfs 
second result output 
correctness algorithm relies combining function satisfying tuple monotonicity property definition 
notice extra step needed queries semantics issuing parameterized query check query keywords contained tuples passed parameters 
see section single pipelined algorithm efficient choice separately cn main building block efficient global pipelined algorithm described 
single pipelined algorithm score ts ts 
ts top unprocessed tuple tsi added tsi 
ts prefix tsi retrieved far initially empty 
queue output results descending score 
execute parameterized query ts ts 
add results 
output results score max mpfs 
ts ts 
fewer results output 
get tuple tsm mpfs max mpfs 
move ts 
combination tm tm tv tuples ti ts 
execute parameterized query tm tm tv 
add results 
output new results score max mpfs single pipelined algorithm 
global pipelined algorithm cn score 
vi number non free tuple sets cn ci 
ts top unprocessed tuple ci th tuple set tsi 
ts prefix tsi retrieved far initially empty 
queue output results descending score 

execute parameterized query qi ts ts 
qi parameterized query cn ci 
add results qi 
vi move ts ts 
output results score 
fewer results output 
get tuple promising tuple set promising cn 
get tuple tsc mpfs cn cc highest 
move ts 
combination tm tm tuples tl ts 
execute parameterized query qc tm tm 
add results qc 
output new results score global pipelined algorithm 
global pipelined algorithm global pipelined algorithm builds single pipelined algorithm efficiently answer top keyword query multiple cns 
algorithm receives input set candidate networks associated non free tuple sets produces output stream joining trees tuples ranked score query 
key idea algorithm 
cns keyword query evaluated concurrently adaptation priority preemptive round robin protocol execution cn corresponds process 
cn evaluated modification single pipelined algorithm priority process mpfs value associated cn 
initially minimal portion promising cn cc cc highest mpfs value evaluated 
specifically minimal portion corresponds process hybrid algorithm cn score 
tuning constant 
estimate cn 
estimate execute global pipelined 
execute sparse hybrid algorithm 
ing tuple cc lines 
priority cc mpfs updated cn highest mpfs value picked 
tuple tree result output line score lower current value global mpfs defined maximum mpfs cns query 
note tuple set ts different cns processed separate identical tuple sets 
practice implemented maintaining open cursors ts example shows snapshot global pipelined evaluation query cns hypothetical database 
point process cn maximum mpfs maintain global queue potential results 
minimal portion current cn evaluated mpfs updated redefines priority example consider query maxtor running example 
consider cns size complaints products complaints products cns include free tuple sets restriction cn include free leaf tuple sets 
minimum size cn free tuple sets 
tuple sets associated cns ts ts tupleid score tupleid score ts ts tupleid score tupleid score get top tuple cn tuple set query database results containing tuples lines 
extract line respectively 
results produced join 
respectively 

output score 
hand output score 
get new tuple promising cn 
promising tuple set ts 
retrieved results parameterized query added notice query select ts ts complaints products ts tupleid 
ts tupleid 
ts tupleid tupleid ts tupleid tupleid 
mpfs bounds respectively 

output score ts mpfs tupleid score tupleid score ts ts ts iteration tree free tuple sets ts tupleid score mpfs mpfs output score 
just single pipelined correctness global pipelined relies combining function satisfying tuple monotonicity property definition 
see experimental evaluation global pipelined efficient algorithm queries produce results 
ts mpfs hybrid algorithm mentioned briefly see section details sparse efficient algorithm queries relatively results global pipelined performs best queries relatively large number results 
natural propose hybrid algorithm estimates expected number results query chooses best algorithm process query accordingly 
hybrid algorithm critically relies accuracy result size estimator 
queries semantics simply rely rdbms result size estimates reliable 
contrast estimation challenging queries semantics rdbms implementation oracle ignores text index producing estimates 
obtain rdbms estimate number tuples derived cn number tuples match associated join conditions need adjust estimate consider tuple trees contain query keywords 
illustrate simple adjustment consider keyword query non free tuple sets ts ts 
assume keywords appear independently tuples adjust estimate multiplying ts ts ts subset tsi contains keyword 
implicit simplifying assumption computation adjustment factor keywords appear tuple 
evaluate performance estimator section 
course alternative ways define hybrid algorithm 
example estimate number results cn queue cn processes ordered ascending mpfs processing unit output snapshot global pipelined execution 
experiments queue results score section experimentally compare various algorithms described 
evaluation dblp data set decomposed relations schema shown 
instance conference particular year 
pp relation describes pid cited pid pa lists authors aid pid 
notice arrows pp denote primary key connections pid pid pid pid 
citations papers contained dblp database randomly added set citations average number citations 
size database mb 
ran experiments oracle rdbms xeon ghz pc gb ram 
implemented query processing algorithms java connect rdbms jdbc 
ir index implemented oracle text extension 
created indexes join attributes 
cn generator methods execution time differences reflect performance execution engines associated various approaches 
cn generator time included measured times 
executions times include tuple set creation time common methods 
global pipelined needs maintain number jdbc cursors open time 
number small compared hundreds open cursors modern rdbmss handle 
notice number jdbc cursors required increase number tables schema depends number relations contain query keywords 
environments cursors scarce resource avoid maintaining open cursors reading tuple sets usually small memory decide execute single pipelined algorithm submit sql query dbms 
experimentally alternatives worse performance algorithm 
dblp uni trier de 
cid name year cid pid title aid name pp pid pid pa pid aid dblp schema graph stands conference conference year author 
global pipelined execution 
furthermore reduce overhead initiating closing jdbc connections maintain pool jdbc connections 
execution times reported include jdbc related overhead 
parameters vary experiments maximum size cns number results requested top queries number query keywords 
experiments hybrid algorithm set tuning constant empirically 
compared algorithms naive algorithm described section 
sparse algorithm described section 
single pipelined algorithm sa described section 
execute algorithm individually cn combine results naive algorithm 
global pipelined algorithm ga described section 
modifications sa ga respectively new tuple retrieved round robin fashion non free tuple sets cn considering promising cn scheduling 
hybrid algorithm described section 
rest section organized follows 
section consider queries boolean semantics keywords randomly chosen dblp database 
section repeat experiments boolean queries keywords randomly selected focused subset dblp 
boolean semantics effect maximum allowed cn size 
shows average query execution time keyword top queries keyword selected randomly set keywords dblp database 
ga hybrid orders magnitude faster approaches 
furthermore ga perform close drawn single line limited number non free tuple sets involved executions bounded number query keywords 
small number non free tuple sets restricts available choices select tuple process 
algorithms behave differently queries keywords show 
notice sa behave msec max cn size naive sparse sa ga hybrid semantics effect maximum allowed cn size 
msec naive sparse sa ga hybrid semantics effect number objects requested worse naive sparse evaluate top results cn long ones cost parameterized queries considerable 
effect number objects requested 
fix maximum cn size number keywords vary average execution times queries shown 
notice performance naive remains practically unchanged different values contrast pipelined algorithms execution time increases smoothly reason determines size prefixes tuple sets need retrieve process 
naive affected changes virtually potential query results calculated actual top results identified output 
sparse algorithm barely affected values experiment require evaluation identical number cns 
notice ga perform identically 
effect number query keywords 
experiment measure performance various approaches number query keywords increases 
sa included perform poorly query keywords due large number parameterized msec keywords naive sparse ga hybrid semantics effect number query keywords 
msec total results ga sparse semantics effect query result size 
queries need issued 
notice performs poorly relative ga larger number alternative non free tuple sets choose tuple 
notice hybrid ga orders magnitude faster naive 
rest graphs ignore naive sa clearly inferior performance 
effect query result size 
experiment discriminates performance ga sparse query result size 
shows results experiments averaged keyword top queries 
performance sparse degrades rapidly number results increases 
contrast ga scales number results extracts top results selective manner considering tuple trees coarser cns 
msec max cn size sparse ga hybrid semantics effect maximum allowed cn size 
msec sparse ga hybrid semantics effect number objects requested msec keywords sparse ga hybrid semantics effect number query keywords 
boolean semantics turn evaluation algorithms queries boolean semantics 
realistic query set query results empty part experiments extract query keywords restricted subset dblp 
specifically keywords names authors affiliated stanford database group 
compare sparse ga hybrid 
effect figures show hybrid performs identically sparse semantics number potential query results containing query keywords relatively small hybrid selects sparse queries 
notice execution time increases dramatically schema specific reason author keywords connected relation possible 
effect query result size 
shows execution time decreases total number results increases results final filtering step algorithms perform check keywords tends reject candidate results producing top results 
shows performance ga improves dramatically total number results increases 
contrast performance sparse improves slower pace 
reason ga needs process entire cns results query msec total results ga sparse semantics effect query result size 
query frequency results error actual estimate actual semantics semantics quality result size estimates keyword queries maximum cn size 
expensive executing sparse setting 
discussion main experiments hybrid algorithm performs competing method provided result size estimate algorithm relies accurate 
shows accuracy estimator set queries created randomly chosen keywords dblp 
hybrid usually resorts ga algorithm queries semantics results matching query 
reason ga efficient queries relatively large number results ga evaluates small prefix cns get top results 
hand hybrid usually resorts sparse algorithm queries semantics usually results 
sparse efficient ga case necessarily evaluate virtually cns 
ga evaluates prefix cn nested loops joins inferior performance exploit highly optimized execution plans underlying rdbms produce single sql query issued cn 
system efficient ir style keyword search relational databases 
query model simply list keywords need specify relation attribute names 
answer query consists rank tuple trees potentially query produces results sparse performance naive 
include tuples multiple relations combined joins 
rank tuple trees introduced ranking function leverages extends ability modern relational database systems provide keyword search individual text attributes rank tuples accordingly 
particular ranking function appropriately combines scores individual attributes tuples 
contribution introduced top query processing algorithms relative strengths depend example queries boolean semantics 
hybrid algorithm decides run time best strategy follow query result size estimates query 
hybrid algorithm best performance query semantics supported extensive experimental evaluation real data 
agrawal chaudhuri das 
system keyword search relational databases 
icde 
chakrabarti sudarshan 
keyword searching browsing databases banks 
icde 
brin page 
anatomy large scale hypertextual web search engine 
www 
bruno gravano marian 
evaluating top queries web accessible databases 
icde 
burns 
preemptive priority scheduling appropriate engineering approach 
advances real time systems pages 
son prentice hall 
fagin lotem naor 
optimal aggregation algorithms middleware 
acm pods 
florescu kossmann manolescu 
integrating keyword search xml query processing 
www 
goldman shivakumar venkatasubramanian garcia molina 
proximity search databases 
vldb 
guo shao shanmugasundaram 
ranked keyword search xml documents 
acm sigmod 
koudas papakonstantinou 
prefer system efficient execution multi parametric ranked queries 
acm sigmod 
papakonstantinou 
discover keyword search relational databases 
vldb 
papakonstantinou 
keyword proximity search xml graphs 
icde 
chang smith li vitter 
supporting incremental join queries ranked inputs 
vldb 
ortega rui chakrabarti mehrotra huang 
supporting ranked boolean similarity queries mars 
tkde 

bound steiner tree problem graphs 
math 

salton 
automatic text processing transformation analysis retrieval information computer 
addison wesley 
singhal :10.1.1.117.7676
modern information retrieval brief overview 
ieee data engineering bulletin special issue text databases dec 
