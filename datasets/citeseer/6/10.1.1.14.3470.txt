electronic notes theoretical computer science url www elsevier nl locate entcs volume html pages lazy rewriting context sensitive rewriting salvador lucas universidad polit de valencia spain lazy rewriting lr intended improve termination behavior trss 
attempted restricting reductions selected arguments functions 
similarly context sensitive rewriting csr forbids reduction arguments 
show certain conditions lr csr coincide 
basis result describe transformation permits proving termination lr termination csr transformed system 
number different techniques proving termination csr provides formal framework proving termination lazy rewriting 
syntactic annotations associated arguments symbols programming languages lisp haskell clean obj cafeobj maude improve termination efficiency computations 
lazy languages haskell clean interpret strictness annotations eager efficient 
eager languages lisp obj cafeobj maude replacement restrictions lazy hopefully avoiding nontermination 
instance fw studied implementations lisp list constructor operator cons evaluate arguments certain stages computation 
algebraic languages obj obj cafeobj fn maude admit explicit specification strategy annotations sequences integers parentheses 
interpreted replacement restrictions constrain underlying eager evaluation strategy argument function call index kg occur strategy partially supported cicyt tic hi ha hu gv 
email upv es www www upv es users elp html fl published elsevier science lucas annotation delta delta delta kg associated function symbol considered evaluation 
application rules top explicitly indicated means eke 
presence true replacement restrictions invoked justify despite underlying eager semantics obj programs able avoid nontermination section 
example obj program obj example sorts sort op 
sort op sort 
sort op cons sort sort 
sort strat op inf sort 
sort op nth sort sort 
sort var sort eq nth cons eq nth cons nth eq inf cons inf endo specifies explicit strategy annotation list constructor cons disables reductions second argument way evaluation expression nth inf finishes produces term infinite list inf part expression 
context sensitive rewriting csr luc provides suitable framework proving termination obj programs kind strategy annotations see luc luc 
csr mapping called replacement map satisfying kg ary symbol signature discriminate argument positions replacements allowed 
way restriction rewriting obtained see section 
terminating trss terminating term initiates infinite sequence csr 
csr achieve termination pruning infinite rewrite sequences 
methods developed formally prove termination csr blr fr gm gm luc sx zan see gm luc surveying comparison techniques 
instance trs corresponds obj program example proved terminating regarding csr see example 
luc luc proof ensures termination obj program 
obj mean obj obj cafeobj maude 
symbols default strategy annotation see 
see www upv es users elp tool mu term implements methods 
lucas restrictions rewriting may give rise incomplete computations 
instance normal forms terms unreachable restricted computation 
example cafeobj program borrowed mod 
test op 
op 
strat op 
strat op nd 
strat op 
strat vars eq nd eq specifies strategy annotation list constructor program terminating evaluating nd nd nd nd possible 
reason reductions second argument disallowed second reduction step longer possible 
hand local strategy evaluation possible infinite reduction sequence obtained nd nd nd delta delta delta example shows limits current interpretation syntactic annotations obj programs csr framework 
fokkink lazy graph rewriting provides different liberal operational model syntactic replacement restrictions specified replacement map section adapt fokkink framework lazy term rewriting lr 
lazy rewriting intended im prove termination behavior trss 
instance lazy rewriting compute value nd replacement restrictions correspond strategy annotation example nontermination 
reason reductions principle disallowed non replacing arguments symbols possible eventually contribute application rule replacing position term 
lucas example continuing example reduction step nd nd possible lazy rewriting 
fact contributes crucial step possible nd reduction step nd delta delta delta potentially originates infinite rewrite sequence allowed redex occurs non replacing position facilitating application rule rule program example trivially replacing term nd note programs examples optimal normalizing strategy techniques 
instance difficult see programs strongly sequential orthogonal admit computable normalizing strategy hl 
course strategy proceeds quite differently obj evaluation strategy general simulated obj computations 
obj programs normalizing strategy aforementioned techniques achieve normalizations basis proving termination program transformation techniques see luc luc 
unfortunately analysis termination lazy rewriting available 
section show conditions nonvariable subterms left hand sides rules replacing csr lr coincide 
regarding termination case termination lr equivalent termination csr studied techniques developed 
cases lr csr differ section provide transformation permits proving termination lazy rewriting termination csr transformed system 
way prove termination lr techniques proving termination csr 
transformation available mu term transformations proving termination csr implemented 
preliminaries set denotes set subsets binary relation set denote transitive closure reflexive transitive closure element normal form inductively sequential sense ant 
class trss strongly sequential see hlm 
lucas say normal form written ar normal form say terminating iff infinite sequence delta delta delta 
denotes countable set variables denotes signature set function symbols ff having fixed arity mapping ar set terms built 
term said linear multiple occurrences single variable 
terms viewed labelled trees usual way 
positions represented chains positive natural numbers address subterms positions denote concatenation position set positions fp qg 
denote empty chain set positions term pos 
positions non variable symbols denoted positions variables 
subterm position denoted tj term subterm position replaced symbol labelling root denoted root 
rewrite rule ordered pair written var var 
left hand side lhs rule right hand side rhs 
trs pair set rewrite rules 
denotes set lhs trs left linear linear term 
term rewrites position written just tj oe oe rule pos substitution oe 
context sensitive rewriting mapping replacement map map ar luc 
ordering mf set maps 
means considers positions reduction restrictive 
resp 


resp 
ar minimum maximum element mf set replacing positions pos pos fg pos fg root pos tj set replacing variables var var fx var pos pos context sensitive rewriting csr luc contract replacing redexes rewrites written 
pos 
example consider trs nd nd correspond cafeobj constant symbol remainder lucas program example 
nd 
nd pos nd rewriting stops 

normal forms called normal forms 
note trivial case set normal forms strictly includes normal forms term nd example normal form normal form 
trs terminating 
terminating 
remarked number techniques proving termination csr termination transformed trs 
example trs nth nth nth inf inf inf nth correspond obj program example cons see luc details correspondence 
zantema transformation zan obtain nth nth nth activate inf inf activate inf inf inf inf activate activate inf new symbols 
trs terminating recursive path ordering precedence nth activate inf nil inf inf giving nth usual lexicographic status 
terminating 
canonical replacement map restrictive replacement map ensuring non variable subterms left hand sides rules replacing 
note easily obtained ar iff root lj cmr mf set replacement maps equally restrictive example canonical replacement map example inf nth note example satisfies cmr explicit replacement map symbols 
lucas lazy rewriting lazy graph rewriting reductions issued labelled graphs 
adapt framework lazy term rewriting labelled terms 
going distinguish eager lazy positions terms 
label node position term eager positions lazy ones signature fe theta new signature labelled symbols 
labelling symbol denoted hf ei hf arities naturally extended ar ar ar labelled terms terms theta theta denote fl xl 
fl xl pos root tj root tj say eager resp 
lazy position example consider signature trs example labelled term nd eager positions positions lazy 
fokkink notion lazy signature signature supplied laziness predicate theta holds ar ith argument lazy definition 
laziness predicate identified replacement map ar mf mapping label fl xl just label confusion arises provides canonical labelling term topmost position label eager position pos label ar root sj position label lazy root sj eager definition 
formally label lucas label label label label label um label label um label label um example consider example 
labelling term nd label nd graphically label nd nd eager positions position lazy 
fl xl erase term obviously corresponds removing labels 
note erase ffi label id label ffi erase id remarked fl xl position pos eager resp 
lazy root tj labelled resp 
called active positions defined inductively follows active position pos active active eager position ar root tj definition 
active positions reachable root term path eager positions 
eager positions necessarily satisfy 
example continuing example positions active nd positions eager active position lazy lucas graphically nd active positions act set active positions labelled term fl xl 
mf set active positions label coincides pos 
proposition signature mf 
act label pos 
important feature lazy rewriting labelled terms set active nodes may increase reduction labelled terms proceeds 
lazy rewriting step labelled terms may different effects changing status active position labelled term ii performing rewriting step active position 
formally describe different binary relations labelled terms 
activating positions reduction activation status lazy position immediately active position labelled term modified position essential contraction may lead new redexes active nodes 
definition matching modulo laziness linear fl xl active position matches modulo laziness tj kg eager matches modulo laziness position lazy position called essential 
example consider trs example 
lhs nd matches modulo laziness labelled term nd 
definition position essential 
note matches modulo laziness active labelled subterm tj producing essential positions matches erase lucas usual sense 
changes activity positions formalized 
definition left linear trs 
activation relation labelled terms defined follows 
active fl xl matches modulo laziness tj essential position tj 
consider trs example 
shows activation step corresponds term example 
nd nd activated 
note terminating relation finite number lazy eager possible finite terms 
general confluent 
example consider ground trs normal form match term modulo laziness 
leading different normal form 
note activation relation information contained replacement map fact explicit putting arrow represent 
note obvious fact 
proposition left linear trs fl xl 
erase erase 
proposition establishes activating new positions lucas possible labelled term obtained labelling term replacement map cmr proposition left linear trs cmr 
label normal form 
reducing active positions lazy rewriting reduces active positions 
formally describe process 
note fokkink formulation lhs rhs rules trs labelled terms unlabelled terms reduce labelled terms 
definition deal labelled unlabelled terms 
reason description reduction process slightly involved pure rewriting 
definition linear term fl xl pos tj matches erase mapping oe var fl xl var oe uj oe definition obtain substitution oe labelled terms variables var homomorphic extension var oe oe xl oe oe oe xl oe fe going apply substitution labelled rhs label left linear rewrite rule var var definition suffices purposes see definition 
definition substitution oe labelled terms applies labelled term labelling corresponds symbol position oe variable position 
give 
definition left linear trs mf relation active rewriting labelled terms defined follows 
active position fl xl tj matches erase 
oe corresponding mapping 
oe label shows reduction step corresponds example lucas activation step 
nd nd note term nd obtained step normal form 
example consider trs 
notice label 
matches erase 
oe obtain substitution oe oe oe example shows steps indirectly activate lazy positions contracting labelled redex 
instance thought step activating lazy occurrence reduced 
note obvious fact 
proposition left linear trs mf fl xl 
erase erase 
lazy term rewriting lazy graph rewriting definition corresponds relation lr labelled terms lr 
lr permits reduction steps allowed definition simulated lr steps 
particular original formulation rewriting active position term application step tj allowed full lucas activation subterms tj obtaining normal form tj 
fact relevant regarding main results consider 
lr evaluating unlabelled term interested lr reductions issued label 
way done obj languages implicit define evaluation semantics mapping lr eval obtains evaluation term lr lr eval label lr gamma 
tg csr csr eval fs 
compare evaluation mechanisms 
example consider example nd 
lr evaluation sequence label nd nd nd nd lr eval nd desired follows discussion example 
contrast csr eval nd nd mf say lr terminating infinite lr rewrite sequence starting label 
lazy rewriting context sensitive rewriting connection csr interesting 
proposition left linear trs mf fl xl 
label 
label 
theorem expresses csr seen restriction lr considers canonically labelled terms 
theorem left linear trs mf 

label lr label 
lucas theorem expresses cmr lr simulated csr 
theorem left linear trs cmr fl xl 
label lr 
label 
way csr provides alternative simpler evaluation mechanism 
corollary left linear trs cmr lr eval csr eval example shows result hold cmr concerning lr termination theorem consequence 
corollary left linear trs cmr terminating lr terminating 
example consider example 
fokkink trs replacement map precisely corresponding laziness predicate motivate lazy rewriting hopefully able avoid infinite reductions page 
cmr see example corollary lr termination termination coincide 
terminating see example corollary proves fokkink claim 
proving termination lazy rewriting corollary quite limited regarding proofs lr termination 
provides basis proving lr termination termination csr transformed trs replacement map 
ngu transformation pairs hr trss replacement maps proposed force non variable subterms left hand sides rules replacing achieve transformation follows see section ngu trs mf root lj 
obtain mf follows ff new symbol arity ar ar fig hand gamma fl rg fl lj lj ar new variable 
example consider example 

lucas transformation proceeds way starting obtaining particular example continuing example 
notice note transformation non determinism due selection step 
instance different possibility step example 
corollary suggests transformation proving lr termination termination provided transformation preserves lr termination unfortunately true 
example consider example example 
note lr terminating label gamma 
delta delta delta lr terminating problem activations lazy subterms possible lazy subterm activated normal form 
label cm proposition normal form lr normal form 
formally proved corollary just need prove termination giesl middeldorp transformation described section gm gm available mu term termination transformed trs automatically proved cime system available cime lri fr dependency pairs criterion see ag previously activated 
lucas simple modification nguyen transformation provides sound technique proving lr termination 
trick include possible activations lazy problematic arguments considered symbol pos fi ar root lj gamma root lj assume fi root lj 
pi pi pi pi mf pi follows pi ff ng new symbol arity ar ar 
pi fi pi hand pi gamma fl rg fl ng lj lj ar new variable 
example consider example 
new transformation obtain pi obtained example 
hand symbol lhs considered obtain pi pi pi pi 
transformation proceeds way starting pi pi obtaining cmr example consider example 

notice able appropriately simulate lr reduction sequence lr reduction sequence example consider term example 
infinite lr reduction sequence label lucas gamma 
delta delta delta say transformation theta 
pairs trs replacement map kind pairs correct regarding lr termination lr termination implies lr termination say theta complete lr termination implies lr termination discussion termination lr termination coincide see corollary 
theorem correctness left linear trs mf terminating lr terminating 
example consider example 
nd nd nd nd 
fact case coincide see example ngu 
theorem prove lr termination open problem ngu termination proved zantema transformation zan trs nd nd nd activate activate activate obtained way activate new symbols introduced zantema transformation terminating note cmr corollary apply conjecture transformation correct complete 
conjecture completeness left linear trs mf lr terminating terminating 
way say termination lr completely equivalent termination csr 
provided adaptation lazy graph rewriting lazy term rewriting lr 
alternative presentation ngu 
cime system 
lucas believe formalization simpler closer 
replacement maps restrictive canonical replacement map csr lr coincide left linear trss case sense csr simplest 
interesting looking better implementations lr ngu pay attention developing transformation techniques achieving condition silently csr lr 
allows prove termination lr proving termination csr transformed rewrite system 
far author knows proposal technique proving termination lr 
hope results may contribute formally address problem specifying general strategy annotations obj programs see negative annotations proposed achieving desirable trade termination completeness discussed see examples 
negative indices indicate corresponding argument evaluated demand demand attempt match pattern term occurs argument position eke 
note luc csr lr restriction rewriting model obj computations programs positive strategy annotations 
instance cafeobj program example terminating corresponding trs terminating example 
proof termination easily achieved zantema transformation 
shown example case achieve completeness evaluations 
discussed example relaxing restrictions list constructor adding new positive annotation second argument dangerous 
completely satisfactory behavior obtained positive annotations considered program 
reason negative annotations proposed 
example version cafeobj program example borrowed mod 
test op 
op 
strat op 
strat op nd 
strat op 
strat vars eq nd eq lucas associates negative annotations operator 
unfortunately operational semantics cafeobj programs strategy annotations negative indices related csr lr 
luc proposed demand rewriting odr suitable extension csr cope negative annotations 
unfortunately contrast obj programs positive strategy annotations regarding csr clear computations obj programs negative strategy annotations appropriately easily expressed odr 
despite fact luc describes technique proving termination odr clear technique correctly applies cafeobj program example 
fokkink lazy rewriting invoked ngu kind underlying mechanism dealing negative indices strategies annotations 
clear connection lazy rewriting computations obj programs negative annotations established 
remains done applying lr odr framework modeling programs 
ag arts giesl 
termination term rewriting dependency pairs 
theoretical computer science 
ant antoy 
definitional trees 
kirchner levi editors proc 
rd international conference algebraic logic programming alp lncs springer verlag berlin 
blr lucas rubio 
recursive path orderings context sensitive 
voronkov editor proc 
th international conference automated deduction cade springer lnai appear 
clavel eker lincoln meseguer 
principles maude 
meseguer editor proc 
st international workshop rewriting logic applications electronic notes theoretical computer science volume pages elsevier sciences 
eke eker 
term rewriting operator evaluation strategies 
kirchner kirchner editors proc 
nd international workshop rewriting logic applications electronic notes computer science 
futatsugi goguen 
jouannaud meseguer 
principles obj 
conference record th annual acm symposium principles programming languages popl pages acm press 
lucas fokkink walters 
lazy rewriting eager machinery 
acm transactions programming languages systems 
fn futatsugi nakagawa 
overview cafe specification environment algebraic approach creating verifying maintaining formal specification networks 
proc 
st international conference formal engineering methods 
fr ferreira ribeiro 
context sensitive ac rewriting 
narendran rusinowitch editors proc 
th international conference rewriting techniques applications rta lncs springer verlag berlin 
fw friedman wise 
cons evaluate arguments 
michaelson milner editors automata languages programming pages edinburgh university press 
gm giesl middeldorp 
transforming context sensitive rewrite systems 
narendran rusinowitch editors proc 
th international conference rewriting techniques applications rta lncs springer verlag berlin 
gm giesl middeldorp 
transformation techniques context sensitive rewrite systems 
technical report aib department computer science rwth aachen 
goguen winkler meseguer futatsugi 
jouannaud 
introducing obj 
goguen malcolm editors software engineering obj algebraic specification action kluwer 
hl huet evy 
computations orthogonal term rewriting systems 
lassez plotkin editors computational logic essays honour alan robinson pages 
mit press cambridge ma 
hlm hanus lucas middeldorp 
strongly sequential inductively sequential term rewriting systems 
information processing letters 
luc lucas 
termination context sensitive rewriting rewriting 
meyer auf der heide monien editors proc 
rd 
international colloquium automata languages programming icalp lncs springer verlag berlin 
luc lucas 
context sensitive computations functional functional logic programs 
journal functional logic programming january 
lucas luc lucas 
termination demand rewriting termination obj programs 
proc 
rd international conference principles practice declarative programming ppdp pages acm press 
luc lucas 
termination rewriting strategy annotations 
nieuwenhuis voronkov editors proc 
th international conference logic programming artificial intelligence reasoning lpar lnai springer verlag berlin 
luc lucas 
context sensitive rewriting strategies 
information computation appear 
luc lucas 
context sensitive rewriting techniques programs strategy annotations tutorial 
montanari editor proc 
th international workshop rewriting logic applications electronic notes theoretical computer science appear 
luc lucas 
termination canonical context sensitive rewriting 
tison editor proc 
th international conference rewriting techniques applications rta lncs appear 
ngu 
nguyen 
compact normalisation trace lazy rewriting 
gramlich lucas editors proc 
international workshop reduction strategies rewriting programming wrs electronic notes theoretical computer science volume 
nakamura ogata 
evaluation strategy head normal form demand flags 
futatsugi editor proc 
rd international workshop rewriting logic applications electronic notes theoretical computer science volume pages 
ogata futatsugi 
operational semantics rewriting demand evaluation strategy 
proc international symposium applied computing sac pages acm press 
sx steinbach xi 
freezing termination proofs classical context sensitive innermost rewriting 
institut fur informatik munchen january 
zan zantema 
termination context sensitive rewriting 
comon editor proc 
th international conference rewriting techniques applications rta lncs springerverlag berlin 

