state compression spin recursive indexing compression training runs gerard holzmann bell laboratories lucent technologies murray hill new jersey verification algorithm spin explicit enumeration subset reachable state space system obtained formalization correctness requirement automaton 
automaton restricts state space precisely subset may contain counter examples original correctness requirement exist 
method verification conforms method automata theoretic verification outlined vw 
spin derives power efficient implementation explicit state enumeration method context 
maximum number reachable states stored main memory method explicitly implicitly determines maximum problem size solved 
review methods tried reduce amount memory state describe new methods achieve relatively high compression rates 
index terms model checking verification state compression 

reachable states consuming bits memory log bits information need stored state distinguish 
theory system log verified exhaustive state enumeration 
state vectors overlapped memory reusing common parts graph structure amount memory state may log 
obtain reductions graph structures needs find reasonable priori guess particulars reachable state space 
guess wrong memory requirements increase decrease cf 
variable ordering problem bdd encodings 
similarly explicit state representations needs find mapping function converts bits input log bits output minimal perfect hash function 
number reachable states priori unknown log unknown quantity verification completed storage problem solved means 
compression techniques scope verification runs explicit state enumeration limited general larger log 
reduction size increase scope 
reachable state uniquely characterized contiguous sequence bits memory 
sequence called state vector 
assumed state vector bits long 
general length state vectors stored vary processes channels created deleted execution system verified 
problem consider find loss compression technique allows store state vector fewer bits 
compression efficient possible worth noting requirements efficiency de compression application compression needs reversed 
comparison states determine state previously visited instance done compressed form 
spin algorithm cycle detection general verification temporal logic properties insensitive particular encoding states provided consistent encoding method change dynamically run 
parts memory requirements verification system necessarily reduced state vector compression methods 
example memory required depth search stack hash table structure various data structures store temporary information usually remain unchanged 
refer extraneous data structures overhead 
standard verification run compression overhead relatively small part memory requirements 
aggressive state vector compression methods overhead easily larger part remaining memory requirements 
results reported report total memory requirements verification runs compression 
possible indicate fraction final memory requirements due extraneous overhead fraction due state vector storage 
look methods 
predefined static compression methods section 
recursive indexing methods section 
phase compression methods section 
graph encodings section 

predefined static compression class techniques state vector reduced size single algorithm independent particular verification problem addressed 
look examples run length encoding static huffman compression byte masking 
performance methods compared table 
run length encoding straightforward technique apply direct run length encoding contents state vector 
experiments discussed size state vector rounded integer multiple bytes unit storage 
run length encoding method compressed state vector encoded sequence byte pairs number bytes long 
number pair gives number times byte value repeated number 
second number gives original byte value 
clearly method save memory average byte value appears consecutive positions state vector 
case method cause increase size state vector factor 
run length encoding method tried hgp applied sample data transfer protocol dtp experiments reported 
hgp run length encoding method significantly increased run time requirements search return relatively small reduction memory requirements table 

static huffman compression technique studied hgp predefined static huffman compression technique 
apply technique relative frequency byte values state vectors measured range applications 
value predefine dictionary huffman encoding frequently occurring values assigned shortest bit codes 
low byte values turned appear significantly frequently high byte values 
bytes encoded stored vector variable length bit sequences cf 

results table indicate encoding technique achieve better compression rates encoding somewhat lower run time penalty 

byte masking simpler predefined static compression technique part distributed version spin years 
method compression identifying byte values state vector known contain constant values 
examples padding bytes inserted compilers data structures rounded integer multiple word size data structures implement rendez vous channels 
rendez vous channels contain data values state transitions transition 
constant fields marked byte mask 
state vector stored non marked bytes copied ignored 
complete list fields state vector masked number active processes channels nr pr nr qs process instantiation numbers pid process type identifier masked unused elements state vector fields cycle detection cycle detection fairness counters fairness option selected channel contents rendez vous channels byte fields added compiler secure proper alignment variables data structures word boundaries 
prevent false partial matches state comparisons length state vector prefixed state vector compression 
note length change new processes instantiated 
maximum state vector size defined larger bytes adds bytes compressed state vector larger values 
masking operation reversible guarantees compression lossless 
note instance size process structure determined type similarly value process instantiation numbers reconstructed order processes appear state vector 
method applied application tests hgp obtain moderate reduction memory requirements slightly lower run time penalty 
table summarizes findings 
table predefined static compression method run time memory comments 
compression pan compiled 
run length table ii hgp 
static huffman table ii hgp 
byte masking default compression mode spin hgp compared compression ratios obtained methods reductions obtained application partial order reduction methods concluded partial order reduction effective reduction strategy 
reduction effects incremental 
partial order reduction method place hp see best reduce memory requirements 
results table indicate compared default compression spin today considerably larger compression achievable greater run time penalty 
consider alternatives compression methods 

recursive indexing spin version sept experimental new compression mode introduced attempts exploit recursive indexing method state vector storage 
method observation computational complexity verification asynchronous systems stems primarily non determinism process executions 
process data object reach relatively small number distinct values local states 
larger number reachable system states global states obtained numerous ways local states combined 
repeating complete description local state vector components global state inherently wasteful 

spin collapse mode collapse compression mode implemented spin version stores local component encoding local state single process channel separately hash table assigns unique index number 
index numbers components form compressed global state vector 
method applied recursively identifying smaller components process channel states local data objects process separate message fields channel storing extra level indirection 
spin implementation uses level indirection 
list state vector components defined follows 
component stored separately hashtable numbered represented number global state vector 
component encodes current state global variables message channels combined includes length field state vector 
remaining components encode state active process separately local variables excluding locally declared channels 
original implementation method global variables message channels stored separate indices 
variation available spin version compile time option 
cases choice turns increase memory requirements included measurements follow 
shortcoming implementation method user set upper bound largest index number component states expected 
bound allow index stored bytes default conservative estimate bytes allowing index numbers 
method applied application table bytes index measure increase run time combined reduction memory requirements just see table ii superior methods listed table required guess range component indices annoyance far prohibited method promoted default compression mode spin 

recursive indexing method revised collapse mode way avoid requirement specify upper bound number component indices store number components number bytes component index global state vector 
numbers allowed change state vectors precise method compression decompression state vector uniquely determined vector 
number bytes index 
store information just bits memory component needed 
revised implementation spin collapse mode table index widths added global variables component 
width global variables component stored separate byte global state vector 
vector contains local index bytes active process identifies component contains state including local variables excluding locally declared channels global index bytes single component contains global variables message channels table index widths local indices byte specifies number bytes global index 
reverse encoding show lossless byte determine size global index 
retrieving global component index read table local indices retrieve restore local components 
refer encoding method recursive indexing 
details taken care method implemented 
length separately stored component stored component sure false partial matches occur 
secondly observe different types components guaranteed form disjoint sets position corresponding indices compressed uniquely identifies associated component type components separate index counts 
helps keep average value counts smaller lower number bytes required index cases 
current implementation recursive indexing method uses different index counters types component indices distinguishable counter global components process components message channel components merged global components compile time option 
table ii byte masking recursive indexing compared method run time memory comments 
byte masking default compression mode spin 
original collapse bytes index predefined 
recursive indexing new collapse mode spin version table ii compares compression methods byte masking method table recursive indexing method achieves greatest reduction compared methods table incurs greatest run time penalty 

phase compression recursive indexing pushed step 
consider static huffman compression method table case compression dictionary precomputed measuring averaging byte value frequencies number verification runs 
possible actual byte frequencies specific verification run interested obtain greater reductions 
accept run time penalties double triple cost verification run table ii technique viable alternative 
perform verification runs 
run training run statistics particulars reachable state space collected 
training run approximate bitstate run samples large fraction reachable state space fast exhaustive run compression terminates normally verification attempts superfluous terminates running memory 
training run statistics part reachable state space visited generate code custom compression method subsequent runs 
new runs perform actual verification minimal memory 
statistics incomplete just part reachable state space visited training run may adjusted second run 
cases done fly interrupting run 
cases may require adjustment compression code followed automatic recompile restart run 
experimental version method implemented spin distributed version just 
method uses results training run build lookup table stores byte position number distinct byte values seen position uncompressed state vector 
lookup table compute number bits needed store individual byte log number distinct values defines mapping byte value encountered index value range 
final verification run byte value encountered seen training run added table provided available values corresponding byte position 
worst case number bits allocated byte position incremented doubling number available values appear position code recompiled 
likelihood happening depend accuracy statistics collected training run 
practice superficial training run turns collect statistics quality occurrence event rare 
different phases verification performed manual intervention phase new piece code generated fly source automatically recompiled linked source 
resulting executable verifier automatically restarted run time options phase 
rare case lookup table adjusted final verification run separate lookup table code recompiled relinked complete verifier 
case final verification run restarted 
table iii compares performance method recursive indexing method table ii application tables ii 
table iii lists run time expense memory requirements final verification run phase compression method 
seen run time requirements increased significantly especially take training runs account 
memory requirements reduced slightly case 
table iii recursive indexing phase compression compared method run time memory comments 
recursive indexing new collapse mode spin version 
phase compression final verification run assess relative performance different compression methods discussed single application quite inadequate 
repeated experiments techniques seventeen different applications 
results tests summarized table iv 
comparisons exhaustive run compression cf 
row table 
table iv relative performance compression methods application state vector nr states ri time tp time ri memory tp memory cambridge ring dining philosophers data transfer hajek protocol leader election bus logical link control file transfer partial order test snooping cache sorting sliding window test test test phone switch model universal receiver average table iv columns give results recursive indexing method table iii row marked columns marked tp give results phase compression method table iii row marked 
relative performance various methods significant metrics represented table 
cases give total memory requirements verification run including memory extraneous data structures affected specific compression method applied memory depth search stack hash table 
reductions just state storage seen isolation greater evident numbers numbers memory usage determine relative merit method 
amount memory data structures state vector contents proper depends part compression method chosen 
include memory required number states add length field round state vectors nearest word boundary 
aggressive compression methods extraneous data dominates total memory requirements 
best result row table iv indicated bold average rows shown bottom row 
reduction run time overhead phase method greater recursive indexing method 
best memory reduction obtained recursive indexing method application reduction original memory requirements overhead consumes memory requirements case 
phase method achieves greater reductions recursive indexing method cases bus sorting 
recursive indexing method hand lower run time overhead cases partial order test course cases factor time needed phase phase method 
cases reductions achieved methods differ roughly 
cases difference larger partial order test phone switch model phase method performing considerably better recursive indexing method 
run time overhead doubled compression techniques 
direct application bdd encodings studied gave similar reductions memory requirements run time overhead roughly order magnitude greater 
generic graphbased encoding gave similar run time overhead greater memory reduction 
briefly return section 
results table iv shown graphical form 
compression ratios plotted state vector sizes 
bullet indicates data point table iv 
connected bullet vertical line point indicates memory overhead contributed extraneous data run compression state vectors 
overhead expressed percentage total memory total amount memory state vector size number reachable states 
different compression schemes incur different overhead best estimate best performance expected 
compression ratios appear approach lower bound set extraneous overhead better state vectors get larger 
phase compression method seen behave predictably 
recursive indexing state vector size phase compression state vector size 
memory reduction percent state vector size 
graph encodings greater reductions described far possible compression method observations state vector finite sequence byte values integer component indices 
sequence may considered finite word finite alphabet integers 
storing state vector separately compression build finite state automaton accepts finite words correspond state vectors previously seen extended new word encountered 
finite state automaton kept minimal form reduce memory requirements 
state acceptor encoded finite directed acyclic graph similar generalized bdd 
acyclic graph structures context spin investigated 
studies noted direct construction graph structure uninterpreted bits state descriptor done bdd construction hardware model checking ineffective model checking asynchronous systems 
possible reason state vectors spin contain descriptors higher level data structures encoding relatively small numbers specific values 
data structures grouped stored units overhead graph structure pointers connecting nodes tends dominate storage requirements increase decrease memory 
memory reduction obtained techniques explored appear similar obtained graph techniques smaller 
greater reductions obtained appear large part du lower overhead hash table structure completely avoided graph encodings 
time writing experiments graph techniques possible inclusion spin pursued 
measurements techniques described indicate linear slightly better linear reduction memory requirements 
ideally course see exponential size reductions 
indications feasible 
briefly look point section 

compression combined partial order reduction graphs left hand side display results measurement leader election protocols varying numbers participating processes 
graphs hand side give results classic dining philosophers problem 
top graph column shows number reachable states exhaustive run run partial order reduction applied hp 
case improvement partial order reduction method linear case improvement exponential 
leader election protocol partial order reduction algorithm succeeds reducing exponential growth linear growth possible verify properties application virtually number participating processes 
remaining graphs show effect recursive indexing technique partial order reduction 
effect compression slightly better linear cases 
consider subsection necessarily case 
observed effect memory reductions bdd encoding diminished spin partial order reduction algorithm enabled 
effect observed methods studied 
example partial order reduction enabled leader election protocol verified participating processes seconds cpu time generating reachable states 
state example encoded state vector kbytes compression 
verification run equivalent exhaustive run order reachable states size 
recursive indexing method reduces state vector bytes average bytes just original size 
memory requirements reduced case due memory extraneous data structures 
results show effect compression state space generated exhaustive runs protocol smaller numbers processes 
run processes instance recursive indexing method reduces state vectors bytes bytes 
case state vector size grows compression ratio improves 
means effect compression memory requirements need remain fixed increase problem size 
trend detectable prominent relatively small range state vector sizes applications produced data table iv 
number reachable states log scale 

leader election 

number processes solid line reduction dashed line partial order reduction memory mb log scale 


number processes solid line compression dashed line recursive indexing run time sec 
log scale 


number processes solid line compression dashed line recursive indexing 





number reachable states log scale 
dining philosophers 
number processes solid line reduction dashed line partial order reduction memory mb log scale 
number processes solid line compression dashed line recursive indexing run time sec 
log scale number processes solid line compression dashed line recursive indexing 
recursive index compression problem size exhaustive search 

discussed different methods perform state vector compression systems spin briefly compared promising fourth method graph encodings 
predefined static compression methods behave poorly practice combining small reduction memory relatively large run time overhead 
recursive indexing method relatively simple robust method give reductions return doubling 






run time costs 
recursive indexing method requires major restructuring standard hash table storage method 
state vector recursively split smaller components level recursion hierarchy stored conventional way 
frequently occurring components stored just referred multiple times giving potential savings increase problem size 
effective compression method phase verification method discussed 
method uses initial training run learn appropriate statistics state space specific verification problem hand uses statistics second run optimize compression strategy 
trial implementation phase verification process completely automated hidden user 
run time requirements type search predictably twice single run 
savings cases larger obtained recursive indexing method dramatically 
phase method may combined computation appropriate encoding gets structure avoiding need manual intervention construction avoiding need hash table structures entirely opening way substantial improvements 
recursive indexing method implemented spin version override default byte masking method compiling verifier sources pan additional directive 
am grateful willem visser jean charles gr freely sharing code insights earlier 
provided sage feedback 

gr state space compression 
proc 
nd spin workshop held august rutgers university new jersey 
dimacs series 
american mathematical society 
hgp holzmann godefroid coverage preserving reduction strategies reachability analysis 
proc 
th int 
conf 
protocol specification testing verification orlando florida june 
hp holzmann peled improvement formal verification proc 
conf 
formal description techniques forte berne switzerland 
holzmann peled yannakakis nested depth search proc 
nd spin workshop held august rutgers university new jersey 
dimacs series 
american mathematical society 
holzmann model checker spin 
ieee trans 
software engineering appear 
knuth art computer programming vol addison wesley 
wormald havas czech family perfect hashing methods computer journal vol pp 

mcmillan symbolic model checking 
kluwer academic publishers 
vw vardi wolper automata theoretic approach automatic program verification proc 
symposium logic computer science cambridge june pp 

visser memory efficient storage spin 
proc 
nd spin workshop held august rutgers university new jersey 
dimacs series 
american mathematical society 
