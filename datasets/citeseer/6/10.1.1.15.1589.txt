dynamic maintenance web indexes landmarks li duke university durham nc usa 
cs duke edu min wang ibm watson research ctr 
hawthorne ny usa 
min ibm com sriram padmanabhan ibm watson research ctr 
hawthorne ny usa 
srp ibm com jeffrey scott vitter purdue university west lafayette usa jsv purdue edu ramesh agarwal ibm almaden research ctr 
san jose ca usa 
ibm com incremental crawling enabled search engine keep indexed document collection synchronized changing world wide web 
information synchronized collection immediately searchable keyword index rebuilt scratch frequently collection refreshed 
inverted index usually index documents crawled web 
complete index rebuild high frequency expensive 
previous incremental inverted index updates restricted adding removing documents 
updating inverted index previously indexed documents changed addressed 
propose efficient method update inverted index previously indexed documents contents changed 
method uses idea landmarks diff algorithm significantly reduce number postings inverted index need updated 
experiments verify method results significant savings number update operations inverted index 

inverted index indexing technique choice web documents 
search engines inverted index html documents dbmss support containment queries xml documents :10.1.1.21.8854
inverted index collection inverted lists list associated particular word 
inverted list word collection document ids documents contain word 
position word occurrence done author visiting ibm watson research center 
author supported part army research office daad national science foundation research ccr eia ibm faculty award 
copyright held author owner 
www may budapest hungary 
acm xxx 
document needed document id entry list contains list location ids 
positional formation words needed proximity queries query result ranking 
omitting positional information inverted index serious limitation 
positional formation usually stored form location ids 
location id word position document word occurs 
entry inverted file called posting encodes information word id doc id loc id 
web documents change frequently keeping inverted indexes date crucial making crawled web documents searchable 
crawler program collects web documents indexed 
cho shown place incremental crawler improve freshness inverted index 
index rebuild method commonly updating inverted index take advantage incremental crawler cause updated documents crawled inbetween rebuilds searchable index rebuild 
study problem keeping inverted indexes date 
approaches possible 
approach rebuild index frequently 
interval rebuilds gets smaller magnitude change snapshots indexed collection smaller 
large portion inverted index remain unchanged large portion done rebuild redundant 
second approach store updates rebuilds searchable update log 
similar press technique store postings doc uments need inserted indexed collection :10.1.1.51.7802
entry update log delete insert posting operation 
query processing need search inverted index update log merge results 
positional information stored posting case size update log prohibitively large 
frequent rebuild inefficient rebuilds portions index change 
update log unsatisfactory large affects query response time 
better way updating inverted index needed 
update method handle types changes documents longer exist henceforth deleted documents new documents henceforth inserted documents common documents changed 
order re index common documents change incremental update method needed 
previous incremental inverted index updates addressed changes due inserted documents deleted documents :10.1.1.36.5834
changes due common documents changed addressed 
propose landmark cliff update method addresses problem updating inverted index response changes common documents 
show solving particular problem results efficient solutions general index update problem 
landmark cliff method diff old updated documents encoding positional information landmarks document 
positional information stored landmark offset pair position landmark document stored separate landmark directory document 
landmark encoding scheme reduces number inverted index update operations obtained diff output postings landmarks shift invariant 
contributions method addresses incrementally update inverted index previously indexed documents contents changed 
problem addressed 
second method uses landmark offset pair represent positional information 
representation advantages renders postings shift invariant increase index size affect query processing section 
mapping landmark position document maintained landmark directory 
landmark directory small compared size document measurably affect query response time section 
show landmark offset representation significantly reduces number update operations inverted index diff approach 
third landmark diff method general method applied variety ways 
optimize existing methods 
possible applications discussed section 
fourth show landmark diff method times faster forward index method described section updating inverted index common documents changed 
show method partial rebuild method described section solve general inverted index update problem types changes deleted inserted common documents addressed 
par tial rebuild method twice fast complete rebuild 
partial rebuild method uses array implementation inverted index set inserted documents magnitude set common documents 
update frequency increases number inserted documents number update operations common documents small 
landmark diff update method tree implementation inverted index result dramatic speed 
rest section discuss related preliminaries 
section describe current indexing techniques landmark diff method 
section evaluate landmark diff method analytically section provide empirical validation 
prior information retrieval inverted indexes studied field :10.1.1.51.7802
update techniques generalize keyword searches web documents html xml files assumptions tech niques need re examined 
web documents dynamic text document collections assumed techniques 
past incremental updates inverted indexes deal addi tions new documents collection static documents :10.1.1.41.4893
static documents existing documents collection contents change time 
problem try solve deals existing documents contents change time 
second previous assume inverted index resides disk persistent storage try optimize propagation memory update posting operations inverted file persistent storage :10.1.1.36.5834
current search engines keep large portion inverted index memory especially frequently queried portions inverted index 
indexed collection growing reasons believe large portion inverted index kept memory query volume increasing demand increasing query processing speed cost memory chips relatively low decreasing ease scaling parallel architecture 
inverted index persistent storage need updated portion inverted index memory needs updated 
update method propose addresses problem updating inverted index data structure independent resides memory disk 
cases method conjunction existing techniques speed propagation updates memory inverted index 
existing techniques described greater detail 
append inverted index updates tomasic proposed dual inverted list data structure inmemory short list disk long list 
new postings appended corresponding short lists longest short list migrated long list storage area short lists full 
brown proposed incremental append strategy uses overflow buckets handle new postings relevant inverted lists 
overflow buckets chained sizes powers 
deal append incremental updates assume document changes indexed 
method tackles complementary problem updating previously indexed documents changed 
clarke addressed deficiency append inverted index techniques proposed block organization inverted index supports deletion example google thousands machines gb memory 
documents 
entire document collection concatenated long sequence words 
positional information posting reckoned document collection opposed document 
clarke inverted index supports updates postings level solve problem small changes documents causing shift positional information postings unrelated change 
fact positional shift problem exacerbated absolute positional information reckoned collection 
technique related landmarks called chunking glimpse context related text indexing 
idea reduce granularity pointers inverted lists pointers point pages individual words text 
page word appears actual occurrence fast sequential search knuth morris pratt boyer moore 
landmarks provide relative addressing 
offsets remain constant landmark locations landmark directory need updated 
preliminaries web data sample set web documents corresponding snapshot web particular time 
sampling interval samples time consecutive samples 
consider consecutive samples 
document belong partitions common documents deleted documents inserted documents 
operations needed update index reflects postings corresponding deleted documents need removed current index postings corresponding inserted documents need inserted index postings corresponding common documents changed need updated index 
data analysis showed common docu ments represents currently indexed collection common documents changes small changes spatially localized document 
update method landmarks propose scheme exploits properties 

updating inverted indexes current methods describe method detail briefly describe existing data structures update algorithms 
discuss naive methods index rebuild document update forward index methods 
forward index method represents best naive methods benchmark experiments 
index rebuild 
method old inverted index discarded entire updated document collection scanned sorted new inverted index constructed see details :10.1.1.51.7802
complete index rebuild consumes considerable amount resources 
entire document collection crawled periodic intervals data consists samples web documents crawled seed urls hours 
doc im yl doc old iw ate doc new today ate construct 
index forward index example forward index 
new version document today inserted forward index representation con structed 
forward index compared forward index old version stored system 
note location ids words changes 
word collection scanned construct inverted file 
distributed rebuilding technique pipelines process eliminate need scanning word document 
scanning re indexing words documents change wasteful 
rebuilding preferable common documents small set common word occurrences small large portion updated document changed 
data analysis showed case practice set common documents usually large changes common documents small clustered 
consequently large portion inverted index remain unchanged rebuilding large portion unchanged waste resources 
document delete insert 
improvement index rebuild process documents changed 
method web documents crawled different sampling intervals depending rate change 
incremental crawling addressed optimal crawling frequency discussed 
document changed delete postings old version document inverted index insert postings new document 
worst case number postings deleted inserted ra ra number words old new version document respectively 
inverted index update method efficient documents big percentage contents changed 
web documents small content changes consecutive 
forward index update 
forward indexes mentioned page brin describing google search engine 
document forward index stores words occur document posi tions occurrence see 
differs inverted index stores tuples word id doc id loc id sorted doc id word id loc id 
primarily auxiliary data structure speed index construction 
clear index updates deduce index updates described 
forward index representation old new document gener ins del postings operations updating inverted index forward indexes 
ate list postings operations insert posting delete posting transform forward index old document new document 
postings tuples tuples stored inverted index update inverted dex 
see data diagram process 
applying procedure common document changed update inverted index 
forward index method requires additional forward index stored document 
forward index document requires space document 
advantage forward index content change occurs near document postings corresponding words position change need deleted re inserted 
worst case number postings deleted inserted rn 
difference document small number posting operations rn 
example insertion word old document shift subsequent ids postings change 
landmark diff update method propose landmark diff update method 
landmark diff method encodes position words landmarks document performs diff old new document get edit transcript 
edit transcript list operations applied old version document transform new ver sion 
landmarks encoding scheme allow translate edit transcript document compact list update operations inverted index 
landmark en coding scheme achieves desirable property location information posting shift invariant insertion word document shift actual position subsequent words 
translation document diff output method achieves desirable property num ber update operations inverted index number postings deleted inserted independent document size depends size content change 
content changes small property highly desirable 
introduce landmark encoding scheme describe landmark diff update procedure 
landmarks 
purpose landmarks minimize changes location ids stored inverted index documents change 
idea location id take landmark document document 
location id word encoded landmark id offset pair 
offset landmark id offset pair position word occurrence relative landmark specified id document 
document contain land marks 
landmark id acts point words landmark 
landmarks chosen discussed section 
putting landmarks document thought partitioning document blocks block corresponds landmark location word block encoded offset block 
term block denotes words consecutive landmarks 
landmark corresponds block vice versa 
shows inverted index landmarks 
landmark encoding lo id offset doc dlo cl imi lo doc id pos inverted index landmarks 
increase index size 
suppose bits allocated loc id inverted index 
corresponding landmark id offset pair viewed significant bits original loc id landmark id significant bits offset 
recover actual position word landmark id offset pair actual position land mark document stored landmark direc tory 
performance analysis implementation issues landmark directory section 
update procedure landmarks 
update method idea edit transcripts 
update inverted index obtain edit tran script dill output old new inverted index apply old inverted index 
landmark encoding scheme allows construct edit transcript inverted index edit transcript document increasing number delete insert posting operations document rn rn number words old new version doc ument 
update procedure outlined data flow diagram 
document changed obtain edit transcript updating document diff procedure 
diff output transformed corresponding entries edit transcript inverted index landmark information 
recall edit transcript inverted index list update operations inverted index 
list update operations applied inverted index update 
procedures apply step old document landmark directory new version document procedures lend parallel processing 
words inserted deleted blocks document update absolute position landmarks document may change 
landmark directory updated 
ins today update inverted index update method land marks 
top diagram shows data flow middle diagram shows edit transcripts look example bottom diagram show landmark directory updated 
landmark directory represented conceptually table 
dating landmark directory done efficiently single sequential scan landmark directory data structure 
process linear size landmark directory number landmarks deleted inserted 
overhead incurred storing maintaining landmark directories insignificant compared savings gained number inverted update operations update time shown analytical empirical evaluations section section 
analysis landmark directories section 
application scenarios describe example scenarios illustrate landmark diff method applied 
cases goal update inverted index new sample web 
update log 
inverted index maintained update log similar press complete index rebuilds landmark diff method reduce size update log 
naive update log corresponds list inverted index update operations generated forward index update method section 
update method significantly reduce size update log query processing time 
partial 
contrast complete rebuild partial rebuild avoids re indexing common documents change 
suppose inverted index stored sorted array ai ae postings doc ids deleted documents stored bitmap postings inserted documents stored sorted array ai tea press 
landmark diff method maintain reduced size sorted update log common documents 
inverted index updated single merging pass sorted arrays ai ae ai tea checking deletes 
experiments described section show partial rebuild twice fast complete rebuild 
distributed index update 
suppose document collection partitioned machines indexed independently 
update machine updates index bitmap deleted documents landmark diff method common documents 
inserted documents processed free machine builds index 
free machines available indexes machines indexes small merged machine freed 
query processing landmarks section describe query processing types queries done inverted index landmarks 
overhead incurred computing actual position landmark query types depends specific implementations landmark directory defer analysis section section 
single keyword queries 
find documents contain particular keyword look inverted index entry keyword return list document ids 
positional information required single keyword queries positional constraints actual word positions computed keyword doc id landmark id offset tuple returned inverted index 
retrieve actual positions landmark ids landmark directory document containing keyword 
phrase queries 
search engines assigned unique word ids common phrases indexed single words 
approach query common phrase single keyword query 
consider case phrase mapped word id loss generality consider phrase query keywords 
keyword phrase query processed separate single keyword queries 
positional information required phrase query constraints phrase occurs document actual word position computed keyword way processing single keyword queries 
position information filter documents keywords adjacent 
positional information required perform filtering non adjacent occurrence tuples accessing landmark directory 
store additional field word occurrence block 
additional field stores id landmark 
phrase query key key obtain tuples corresponding occurrence keyword independently 
tuples document id grouped determine tuples keys doc id landmark ida offset key doc id landmark ida offsets keywords key keys respectively form phrase follows landmark id equal landmark id difference offset offset form phrase 
landmark id equal landmark ida check offset key zero 
zero tuple key additional landmark field equal landmark ida form phrase 
tuples form phrase 
approximate nearness queries 
fine grain positional information needed inverted index just store landmark ids offsets 
results significant time space savings landmark ids need updated 
posting inverted index store information word id doc id landmark id 
landmark id encodes approximate position bounded error block size 
queries 
query contains conjunctions multiple keywords retrieve tuples keyword single keyword queries 
tuples filtered tuples corresponding selective keyword detailed analysis section 
landmarking policy landmarking policy describes landmarks chosen document 
example landmarking policies fixed size partitioning html xml tags metadata seman tic structure document 
fixed size partitioning 
simplest landmarking policy fixed size partitioning size block fixed time index construction 
piece text inserted landmarking policy decide block bigger split block 
fragmentation occur large number updates index rebuild performed update performance degrades 
content changes updated documents small fragmentation occur frequently 
fixed size landmarking landmarks inherent structure document 
brute force diff required generate edit transcript landmarks shift versions document 
html xml tags 
html tags paragraph tag landmarks 
contrast fixed size policy landmarks case inherent document 
efficient block approximate diff procedure brute force diff 
example hash block original new versions diff substantially smaller sequence hashed values 
choose tags landmarking 
linear time heuristics check tags combinations tags suitable landmarks 
brief description landmarking tags stored landmark directory 
xml tags similar way 
landmarks shifted doe jg jjk deleted word unchanged words consider document words 
block size set words 
deletion words generates update posting operations inverted index 
set contains segments affected change 
landmark id deleted position landmark changed offset word changed position landmarks shifted 
method 
theorem 
number updates inverted index caused single edit operation deletes inserts words number words deleted modified block 
example provides intuition proof 
lemma follows analysis gap distribution 
positions landmarks document modeled random initially uniform landmark positions longer uniform sev eral random edit operations 
lemma 
landmarks particular document randomly located number updates inverted index caused single edit operation size document size ra words satisfies randomly located landmarks 
analytical evaluation section summary analytical evaluation landmark diff update method 
evaluate method complexity terms number update operations running time complexity 
show complexity diff operation bottleneck landmarking minimal impact query processing 
proofs omitted brevity 
update performance number operations recall single edit operation edit transcript document deletion insertion sequence contiguous words text consecutive landmarks called block 
ease presentation refer update operation inverted index update 
consider number inverted index update oper ations insert delete postings generated update keyword smallest frequency 
complexity diff operation edit transcripts dill output key idea method 
ukkonen showed edit tran script documents size rs words computed min rs time min space minimum edit distance 
unix cliff program uses output sensitive heuristic algorithm similar running time near linear small 
diff near linear small updates dates usual small consecutive samples diff bottleneck processing cases 
diff operation form bottleneck represent block document hashed value perform diff operation sequence hash values raw blocks directly 
false positives eliminated doing linear scan blocks reported identical check identical 
operation offset tree simple array insert log delete log log shift log find ros log find log find log update ops log generation query overhead mini sl sl log lmax space overhead table summary performance offset tree data structure versus array data structure landmark directories 
term number landmarks document number landmarks affected change range number words deleted inserted 
theorem 
number landmarks old new documents respectively 
block diff variant takes min time generate edit transcript block wise minimum edit distance 
implementing landmark directory running time complexity landmark diff method dependent landmark directory implemented 
briefly describe operations implementation landmark directory support 
insert pos inserts new landmark position pos 
delete landmark id deletes landmark landmark id 
landmark ida landmark id deletes land marks occurring landmark id landmark id 
shift landmark id value adds value position landmarks occur landmark id 
find pos landmark id returns position land mark landmark id 
find pos returns landmark corresponding position pos 
find pos range returns landmarks cor responding positions range pos range 
offset tree theoretically efficient data structure landmark directory 
practice array compactness locality memory 
analyzed array offset tree data structure landmark directory summary analysis table 
rest analysis assume landmark directories implemented arrays 
update performance arrays theorem 
number contiguous words deleted inserted number land marks existing document 
array time required generate update operations inverted index update landmark directory position word ids words deleted inserted 
query performance arrays theorem 
additional time required process conjunctive query ofk keywords key key 
key selectivity keyword key 
experimental evaluation section describe experiments eval landmark diff method 
measure number inverted index update operations generated method compare forward index method 
measure time generate operations time apply operations inverted index time bring inverted index date 
experiments answer important questions performance landmark diff method 
landmark diff method significantly reduce number edit operations inverted index compared methods forward index method 

reduction number inverted index update operations translate savings real execution time applying operations 

generating update operations method require time methods 

landmark diff method provide efficient solution general inverted index maintenance problem complete rebuild method especially change consecutive samples large 
implementation 
implemented text system implementations inverted index binary tree node corresponds posting way search structure implicitly represented linear array postings 
discuss tree representation section take better advantage landmark diff method updates frequent small magnitude 
linear arrays landmark directory forward indexes small data structures 
landmark diff update method forward index update method implemented comparison 
policy block size 
fixed size partitioning choose landmarks 
intuitively square root average document size block size 
experiments default block size words chosen average document size roughly words 
measured minimum number inverted index edit operations required different block sizes data set described verified block size gets smaller number operations decreases expense increasing landmark directory size number landmark directory update operations 
shows distribution documents respect number inverted index edit operations normalized sum sizes old new documents 
ex small block sizes block size gets smaller size landmark directory grows larger cost manipulating landmark directory increases 
performance measures 
evaluate performance landmark method measures reasoning similar level tree num ber blocks block size balanced 
loo lo cumulative distribution update ops blk size blk size blk size blk size blk size blk size cumulative update ops cumulative distribution documents respect number inverted index update opera tions different block sizes 

number inverted index update operations table 
time perform operations table 
time generate operations table 
time bring inverted index date partial rebuild method table 
edit operation defined delete posting insert posting operation 
number edit operations inverted index natural performance measure goal update method reduce number edit operations inverted index 
execution time number edit operations depends implementation system hardware architecture 
number edit operations measure update performance different search engine architectures implementations 
data set 
sets data crawled web 
data set consists samples web crawled seed web sites 
time start web crawls hours recursion depth limited levels 
sample documents second documents documents common 
sample contains gb worth html files 
data set ii consists samples web crawled seed web sites www cnn com www ebay 
com www yahoo com go corn www duke edu 
sampling interval hours recursion depth levels 
note listed web sites content dynamic fast changing 
document preprocessing 
html file preprocessed canonical form stripping html tags scripting code java code extra white space 
letter word capitalized different capital result different word ids 
canonical form file words discarded 
number update operations investigate number inverted index update operations generated forward index method landmark diff method data sets 
fixed size land marking policy block size words 
results table show landmark diff method generates significantly update operations inverted index forward index method represents best naive methods 
performance landmark ata docs docs fwd 
index landmark iia iib iic iid iie table number update operations generated update methods experiments 
symbol denotes number common documents isn sn symbol ac denotes portion changed 
fwd 
index landmark time table time required apply update operations binary tree implementation inverted index 
symbol isi denote number documents index corresponds index size 
diff update method consistent broad range web sites including web sites fast changing content 
section measure mirror real world performance updates frequent 
update time reductions number inverted index update operations translate savings time apply operations 
measure execution time applying update operations generated forward index method landmark diff method binary tree implementation inverted index data set experiment performed sun blade computer running sunos gb ram 
measure elapsed time updating inverted index inverted index edit operations generated update methods 
results summarized table show reduction number update operations translate proportional reduction time required update inverted index 
updating landmark directory requires linear pass done time generating update operations see section 
time update operations generating update operations method require prohibitively time naive methods 
measured time generate update operations data set configuration section 
table summarizes results 
recall forward index requires reading files old new document creating forward indexes files 
landmark diff method requires reading files order perform diff order generate update operations postings shifted due edits 
time diff operation remarkably fast compared construction forward indexes 
landmark directory stored disk additional time required read memory small compared reading document smaller size 
investigated landmark size affects time required generate update operations corn generation time method 
update ops ac fwd 
index landmark table time seconds required generate inverted index update operations landmark diff method forward index method 
column gives required time common files checked processed 
column gives required time incremental crawling system know priori common file modified crawl 
processing time vs landmark size landmark size words landmark size versus time generate update operations common documents changed 
mon documents data set changed see 
smaller landmark size results update operations changes document localized processing time generate update operations 
extremely small landmark size size words case produces big landmark directories require time manipulate 
partial rebuild landmark diff changes common documents shown landmark diff method results speed factor forward index method 
may suspect speedup cases changes consecutive samples small changes rk 
partial rebuild method old index updated index schematic diagram partial rebuild method 
landmark diff method produces list update operations sorted 
new documents processed sorted list postings inserted 
doc ids deleted documents stored bitmap 
data structures merged old inverted index linear pass 
docs 
postings ac partial rebuild complete rebuild table running time performance partial rebuild method landmark diff complete rebuild method 
symbols af denote deleted documents common documents common documents changed update opera tions common documents new documents inserted 
give sizes sets units documents postings 
large complete rebuild may perform better 
show landmark diff method partial rebuild method see section solve general inverted index update problem efficiently complete rebuild method 
inverted index implemented sorted array postings residing disk searching accomplished implicit complete way tree similar binary heap implemented array 
deleted document ids stored bit map memory 
inserted documents read postings stored sorted array memory 
update operations common documents generated landmark diff method sorted stored disk 
old inverted index bit map array new postings sorted update operations merged fashion similar mergesort updated inverted index disk see 
partial rebuild landmark diff method applied data set results summarized table 
partial rebuild landmark diff method results speed complete rebuild index way mergesort samples hours apart large number changed common documents inserted documents 
discussion updating inverted indexes new sample web involves sets items postings deleted documents postings inserted new documents postings common documents date operations existing inverted index consisting merged sets af deleted af inserted applied inverted index alternative rebuild scratch 
set processed efficiently storing doc ids bit map 
updating index done efficiently landmark cliff method times faster forward index method 
efficiency incorporating af inverted index depend size partial rebuild landmark cliff exploits facts achieve factor speed large af relative processed sequential manner efficiently landmark cliff method produces small relative efficiently 
goal investigate fast incremental update index 
sampling interval decreases sizes af decrease relative 
limit af small random access updates inverted index implemented tree faster array implementation 
similar trade random access data structures stream processing observed processing spatial joins 
speed incremental update time tree implementation approaches iai compared complete rebuild 
showed table array partial rebuild twice fast complete rebuild relatively large update interval hours 
update interval gets smaller speed significant dramatic tree implementation inverted index 

keeping web indexes date important problem research practice 
naive update methods index rebuild inadequate keeping inverted index date especially context place incremental crawling 
web document changes generally small clustered motivates incremental update algorithms diff 
storing positional information inverted index presents problem diff approach 
landmark representation proposed allows diff approach efficiently update inverted indexes store positional information 
show performance method theoretically sound experiments show results significant savings number edit operations performed inverted index update time 
showed landmark cliff method partial rebuild update inverted index half time takes rebuild index scratch 
arge procopiuc ramaswamy suel vitter 
unified approach indexed non indexed spatial joins 
proceedings th intl 
conf 
extending database technology edbt 
baeza yates ribeiro neto 
modern information retrieval 
addison wesley 
boyer moore 
fast string searching algorithm 
communications acm 
cybenko 
keeping changing web 
ieee computer may 
brown callan croft 
fast incremental indexing full text information retrieval 
th intl 
conf 
large data bases 
cho garcia molina 
estimating frequency change 
submitted publication 
cho garcia molina 
evolution web implications incremental crawler 
th intl 
conf 
large data bases 
clarke cormack 
dynamic inverted indexes distributed full text retrieval system 
tech 
report cs univ waterloo cs dept 
clarke cormack burkowski 
fast inverted indexes line update 
tech 
report cs jo univ waterloo cs dept 
cutting 
optimizations dynamic inverted index maintenance 
proceedings sigir 
frakes baeza yates editors 
information retrieval data structures algorithms 
prentice hall 
knuth morris pratt 
fast pattern matching strings 
siam journal computing 
lawrence giles 
accessibility information web 
nature 
li moon 
indexing querying xml data regular path expressions 
th intl 
conf 
large data bases 
lim wang padmanabhan vitter agarwal 
characterizing web document change 
advances web age information management nd intl 
conf 
manber wu 
glimpse tool search entire file systems 
proceedings winter usenix conf 
usenix 
melnik raghavan yang garcia molina 
building distributed full text index web 
proceedings loth intl 
www conf 
page brin 
anatomy large scale hypertextual web search engine 
proceedings th intl 
www conf 
tomasic garcia molina 
incremental updates inverted lists text document retrieval 
proceedings cm sigmod intl 
conf 
management data may 
ukkonen 
algorithms approximate string matching 
information control 
vitter 
faster methods random sampling 
communications acm july 
vitter 
efficient interface optical disks 
acm trans 
database systems june 
witten moffat bell :10.1.1.51.7802
managing gigabytes compressing indexing documents images 
morgan kaufmann publishers los altos ca usa second edition 
zhang naughton dewitt luo lohman 
supporting containment queries relational database management systems 
proceedings acm sigmod intl 
conf 
management data 
