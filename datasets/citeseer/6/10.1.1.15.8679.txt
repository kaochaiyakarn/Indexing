informal formal method systematic junit test case generation david stotts mark lindsey dept computer science univ north carolina chapel hill stotts cs unc edu lindsey cs unc edu cs unc edu 
junit testing tool widely support central xp concept test software development 
junit provides java classes expressing test cases test suites provide se guidelines deciding test cases ones particular class 
developed method systematically creating complete consistent test classes junit 
called jax junit axioms method guttag algebraic specification data types 
demonstrate informal adt semantics guiding junit test method generation programmer uses formal notation java procedure meshes xp test design principles 
preliminary experiments show informal jax testing finds errors ad hoc form junit testing 
motivation background regression testing long recognized necessary having confidence correctness evolving software 
programmers generally practice thorough tool supported regression testing significant industrial framework 
junit developed support test principle xp development process side effect bringing benefits regression testing average programmer including independent developers students 
junit small free easy learn obtained large user base brief time xp community 
audience go detail structure usage 
junit supporting documentation available www junit org basic junit testing methodology simple effective 
leaves software developers decide test methods written exercise features code thoroughly 
documentation supporting junit prescribe suggest systematic methodology creating complete consistent test suites 
designed provide automated bookkeeping accumulation execution support manner programmer accustomed developing test suites 
developed experimented systematic test suite generation method call jax junit axioms guttag algebraic semantics data types adts 
jax method leads junit test suites completely cover possible behaviors java class 
approach simple systematic 
tend generate test methods programmer basic junit practice preliminary experiments show extra produces test suites thorough effective uncovering defects 
refer jax informal formal method formal semantics data types java programmer junit user need formalisms java take advantage guidance provided method 
early experiments informal application jax 
ways automate method partially require reliance formal specs 
related formal spec testing methods pursuing automating jax similar 
system guttag algebraic specification data types write test oracle adt implemented functional language simpl 
expanded objectoriented domain solving problems related object creation copying functional languages 
automated creation test oracle leaving programmer write axiomatic specifications test points 
astoot related system testing formal specifications 
astoot uses notation similar parnas trace specs algebraic adt semantics 
context language eiffel carried forward commercial quality tools 
think functional notation algebraic adt axioms advantage trace spec approach axiom expressed functional programming language give examples ml giving executable specs 
larch research effort formal program specs gain leverage software problems 
larch program specifications portion written guttag functional style second portion written express semantic specific details particular programming language 
significant body exists larch program verification supported automated theorem provers 
know testing methodologies larch specs 
structure report sections brief explanation algebraic specifications data types appropriate formal semantics objects 
show adt specs manually systematically develop consistent complete junit test class 
discuss preliminary experiments adt implementations comparison number errors jax versus 
conclude discussion method meshes xp test design principle 
algebraic specification adts raison etre jax apply systematic discipline informal possibly haphazard process creating effective test methods junit test classes 
class developed treated adt data type formal algebraic specification adt guide create complete consistent set test methods 
guttag fundamental think modern software methodologies contribution recognized software pioneer dijkstra hoare brooks wirth kay parnas 
brief summary algebraic adt semantics fully explain jax 
note adt formalism explained intellectual guide developing tests 
effective ideas requires java reader overly concerned specific formalisms notations shown 
adt specified formally algebra meaning set operations defined set data values 
natural model class collection data members methods operate 
algebra specified sections syntax meaning functional signatures operations semantics meaning axioms defining behavior operations fashion 
example consider bst adt bounded stack elements generic type 
operation signatures new int bst push bst bst pop bst bst top bst isempty bst bool bst bool maxsize bst int bst int object oriented terms operation signatures correspond interfaces methods class 
guttag notation adt operations considered functions state object passed parameter altered object state passed back appropriate 
operation push guttag adt notation corresponds method push specific object class 
example new constructor takes integer maximum size bounded stack creates bst hold elements 
push operation takes element bst existing stack adds element top stack specified define semantics reflect desire pushing element full stack state stack effectively noop 
operation maxsize returns bound stack parameter new operation tells items currently stack 
operation exists convenience tells room stack elements done entirely maxsize 
remaining operations behave expected stack 
semantics operations defined formally axioms systematically generated operation signatures 
divide operations sets canonical operations 
canonical operations needed build elements type necessarily subset operations return element type 
example operations return bst new push pop canonical operations new push 
implies elements type bst built new push 
bst built pop built simpler sequence operations consisting new push example stack produced push pop push new pop equivalent stack produced push new pop 
set canonical operations identified axiom written combination non canonical operation applied result canonical operation 
form induction 
defining non canonical operations showing applied element type obtain element type output canonical operations arguments 
example considering bounded stack adt axiom pop new pop push 
canonical constructors non canonical operations write total axioms 
combinations generate mechanically left hand sides axioms specifying right hand sides design happens requires thought 
axiom thought re writing rule says sequence operations indicated left hand side replaced equivalent simpler sequence operations right hand side 
example top push ok normal stack bounded stack pop push ok normal stack bounded stack axioms normal stack behavior 
specifies element pushed top stack top operation applied resulting stack indicate top 
second says element pushed stack pop operation applied resulting stack return stack equivalent push done 
bounded stack proper behavior slightly complicated top push top pop push pop guttag uses term canonical constructor 
operation constructor avoid confusion method invoked object created 
constructor method called new guttag vocabulary 
evident simple example set canonical operations adt 
valid set 
says push element full stack happens pop popping original stack full goes comes pop similar reasoning applies top 
readers interested details full set adt axioms bst appendix jax lesson carry section class methods divided groups canonical non canonical combining non canonical method applied canonical define axiom test method junit test class see 
informal formality manual jax adt axioms specified target class systematically construct corresponding junit test class 
summary steps design method signatures java class written target class decide methods canonical dividing methods categories create left hand sides lhs axioms crossing non canonical methods canonical ones write equals function compare elements target class compare bsts example write test method test class axiom left hand side equals appropriate junit assert calls 
steps keys 
papers explaining junit provide examples method target class causes creation corresponding method test class 
jax calls creation test class method axiom 
level informality enters method 
need write axioms completely ml formalism formal notation 
need left hand sides axioms combinations noncanonical methods applied canonical ones 
programmer create right side behavior en encoding java directly methods corresponding junit test class 
formal adt semantics tell method combinations create test flesh axiomatic behavior directly junit 
example consider bst axiom pop push pop right hand side gives behavior definition showing expected outcomes method calls left hand side executed 
equality asserted method sequence left behavior right equality case equality stacks 
check equality programmer supply function deciding stacks equal function item list 
case get method called junit test class bst protected void setup new defined max ease new public void axiom pop push pop part axiom rhs intk push pop equals equals test part axiom rhs push element push full push element push 
full equals expect true push full push noop pop elt pop elt equals expect true note test method section part right hand side behavior 
example axiom written illustrative purposes 
fully informal jax application programmer may invented appropriate behavior wrote junit code expressed right hand side axiom way 
jax clearly going generate test methods systematically generated cover possible behaviors adt 
consistent complete coverage target class behavior guaranteed proof axioms formally define complete adt semantics 
note importance equals addition writing test classes axiom combinations tester write equals function override built method object 
equality test defines objects class thought equal respect unimportant internal storage representational issues 
gives chicken egg problem equals junit assert methods indicate correctness methods target class 
important tester confidence correctness equals trying demonstrate correctness methods 
follow procedure test methods generated equals methods applying objects generated various canonical operations target class 
example wrote populated junit test methods run 
effect checking canonical operations correct construction base elements methods tested checking equals correct comparisons 
doing extra structure tests including regression suite allows changes constructors checked target class evolved 
introspective nature equals tests programmer may wish create separate related junit test class bundling test class test methods 
junit suite bundle full jax test target class 
preliminary experimental results run experiments gauge effectiveness jax methods 
early studies fully controlled experiments think results encouraging continue extensive controlled experiments 
coded non trivial adts java tested ways basic junit testing test class method generated method target class jax testing test class method generated axiom adt specification 
preliminary experiments involved students author tester 
adt tested tester wrote axioms specifications target class 
axioms author wrote java code implement class 
author writing source class tester wrote test classes structured basic junit testing methodology structured jax methodology 
author completed source code target class tester ran junit test collection source class recorded number errors 
case source class sole difference structure number test methods test class 
course studies different testers different authors 
examined way java classes starting fairly simple ones establish approach progressing pair cooperating classes total methods non trivial cases jax test class uncovered source class errors basic junit test class 
warm wrote jax test class example distributed junit 
junit test class comes errors jax 
classes tested bounded stack bst discussed previously 
implemented twice different internal representations case jax testing error basic junit test uncovered 
complicated example studied pair cooperating classes implementing simple library books 
interface defined follows public book string title string author public void int pid public void int pid public void checkout int pid public void checkin int pid java code classes junit test classes corresponding obtained online cs cs unc edu jax public int public string public string public boolean int pid public boolean int pid public int int index public void int public void int public boolean equals book public int public int public int public int public library public book string title string author public void string title string author public void string title string author public void string title string author int pid public void string title string author int pid public boolean equals library public boolean string title string author public boolean isavailable string title string author public boolean string title string author int pid public int test involved different classes interacting 
particular methods library invoke methods book manage developed tested book developed tested library 
repeated step process normal junit tests jax methodology 
obviously errors book expect see error propagate errors library test 
results test class run junit test failures term error bit loosely 
table shows counts failed junit tests interactions tested jax single code error bad method cause junit failures 
suspected failures class book due errors propagate failures seen class library 
decided fix errors book retest 
examination distinct flaws implementation book 
rerunning junit failures jax test class remained test failures implications numbers jax manually require programmer write test methods test class normal junit discipline test class 
jax approach requires test method axiom 
example adt bounded stack bst methods canonical 
normal junit testing produced test methods constructor tested jax application produced methods axioms creation equals function dealing directly constructors brought total methods 
early experiments finding test methods written jax test suite small classes order methods 
larger book class methods canonical book checkout 
means wrote test methods 
combinatorial nature axiom creation rough estimate number test methods jax test class order number target class methods 
oo design encourages smaller classes quadratic factor major issue 
ibm fellow listening earlier talk commented ibm systems typically times test code application code don find overhead applying jax excessive compared industrial benchmark 
goal test thoroughly test writing 
tests run hundreds times written help uncover errors code class developed test writing phase false economy 
meshing jax test design philosophy xp xp programmers test case construction important component iterative design process 
martin give example process showing pair programming session small bowling score program developed test incrementally junit 
jax preclude important design approach see ways employ 
generate jax cross tests incrementally new methods discovered included design 
previous presentation jax showed fully designed adt methods final class generation cross tests 
illustrate adt theory method crossing approach covers class behavior structural induction 
applying cross testing principle require entire class 
generate jax cross test class go just generate junit test class 
incremental jax process follows 
add new state creation method design decide canonical write new cross tests existing non canonical methods applied state created new method 
canonical write new cross tests applying new method state created existing canonical methods 
designs builds class iteratively build suite cross tests iteratively 
point write methods class adt axioms call write cross tests methods included class due incremental design process 
allows adherence write minimal solution principle xp 
particular stack class need pop jax require create pop simply adt theory says beautiful complete stacks pop operations 
second way apply jax wait class designed implemented stable write jax cross test class way filling holes exist making regression test suite complete safety net possible continued system development 
quick illustration approach examined bowling scorer code junit tests martin 
set code tests created second junit test class augment ones wrote 
class game public methods add score addition constructor new 
canonical methods necessary state creators add new 
portions cross test methods score new score add new add public void score new game setup public void add score score avail frame ends add score ok legal score add score able add note frame treated strike buried public void exception handled public void add add add legal pin count allowed object see affects score adds pins pins frames add add adding pins means constant buried code class uncovered design issues game class 
shown prohibition adding pins frame 
results impossible scores 
shows pin count greater treated strike spare meaning direct comparison code equality comparison vs inequality 
shown see add illegal number pins algorithm correctly adding pin counts frames scoring marks adding constant design decision re thought 
note uncovering failure range check frame number test get score frame generates exception array bounds handled 
course way eliminate issues bowling game scoring object check input correct ranges 
authors specifically noted concern chose leave program completely control just won call 
flaws se illustrations jax cross tests semi mechanically uncover omissions specifically ignored 
omissions quite common program design 
definition errors escape thinking 
systematic method jax help find omissions covering behavior space class partially mechanical supplement omission prone raw thinking done design 
discussion jax systematic procedure generating consistent complete collections test methods junit test class 
jax formal semantics data types exploits method interactions keying individual methods 
theoretical results formal semantics indicate interactions generated jax cover possible behaviors class 
jax unique formal methods guidance programmer formalisms effective jax requires java 
method automatable ways designers don mind writing formal specifications 
preliminary studies show jax test classes find errors target class basic method compared writing test class method method target class 
studies initial investigations blind controlled experiments 
results encouraging thorough controlled experiments need performed findings considered conclusive 
pursuing studies large java applications lines obtained epa developed junit testing 
follow studies involve writing jax test classes compare junit classes supplied epa applications 
junit classes provided applications strictly written simple test method method approach supplemented ad hoc fashion test methods deemed needed programmers corresponding directly target method 
think comparing jax tests junit tests effective study jax procedure 
suggesting classes tested way 
think certain forms classes lend approach 
classes highly algorithmic example little gui interactivity especially applicable 
wish rob agile methods flexibility responsiveness thorough testing needed agile development traditional processes 
jax mechanical procedure producing thorough collections test methods 
issue studied impact jax refactoring 
test methods means code move alter target classes 
clear difficult refactor jax tests compared junit tests 
automation help axioms specs easier move full tests tests regenerated specs relocated refactored code 
research supported united states environmental protection agency project 
referees specifically brian dave thomas helpful comments suggestions revising presentation 

beck gamma junit test infected programmers love writing tests java report july volume number 
available line junit sourceforge net doc testing htm 
beck gamma junit cook tour java report may 
available line junit sourceforge net doc htm 
beck gamma junit cookbook available line junit sourceforge net doc cookbook cookbook htm 
beck extreme programming explained addison wesley 

guttag horning algebraic specification data types acta informatica pp 


guttag horowitz musser data types software validation communications acm dec pp 


guttag notes type abstraction ieee trans 
software engineering tr se jan pp 


gannon hamlet data abstraction implementation specification testing ieee trans 
programming languages systems 
july pp 


hughes stotts algebraic testing oo programs presence side effects proceedings international software testing analysis issta january 


frankl astoot approach testing object oriented programs acm trans 
software engineering methodology april pp 


hoffman snodgrass trace specifications methodology models ieee trans 
software engineering sept pp 


parnas wang trace assertion method module interface specification tech 
rep queen university ontario oct 

guttag horning wing larch family specification languages ieee software sept pp 


wing writing larch interface language specifications acm trans 
programming languages systems jan pp 


wing larch specify objects ieee trans 
software engineering sept pp 


proceedings software design management conference software pioneers bonn germany june audio video streams talks viewed www sdm de conf index htm 
martin engineer notebook extreme programming episode www com resources articles htm 
faults omission software testing quality engineering jan www testing com writings omissions html appendix full set axioms bounded set bst functional language ml formal specification notation specs fully executable download copy sml try 
datatype definition canonical constructors defined 
axioms ml function definitions pattern matching facility create pattern alternative axiom 
algebraic adt specification full axioms bst bounded set int datatype bst new int push bst int fun isempty new true isempty push false fun maxsize new maxsize push maxsize fun new push maxsize maxsize fun new push maxsize true false exception fun top new raise top push top fun pop new new pop push pop 
