diagrams meaning preservation wells detlef plump heriot watt university www hw ac uk ultra university york www cs york ac uk det 
presents framework multiple diagram methods proving meaning preservation rewrite steps rewriting system preserve meaning operational semantics rewriting strategy 
previous rewriting methods generally needed treated rewriting system properties confluence standardization termination boundedness developments methods conditions fail handle rewriting systems 
isolate new lift project termination diagram key proof idea show previous methods plotkin method confluence standardization turbak method distinct lift project properties implicitly diagram 
furthermore framework proof methods help reduce proof burden substantially supporting separate treatment partitions rewrite steps needing elementary diagrams rewrite step interactions excluding rewrite step interactions consideration needing weaker termination properties providing generic support developments combination method 
discussion background motivation programming language defined set programs way evaluate execute programs 
increasingly popular define evaluation program rewriting :10.1.1.23.4385:10.1.1.23.4385
approach evaluation rewrite rules repeatedly applied particular program positions typically specified evaluation contexts 
kinds program rewriting evaluation desirable 
potential uses rewriting program transformations include optimizing compilers partial evaluators program 
transformations may existing evaluation rules arbitrary contexts additional rewrite partly supported nsf ccr ccr eia epsrc gr gr sun microsystems equipment 
rules 
transformations may involve global reasoning entire program local match rewriting techniques 
important know program transformations preserve program meaning evaluation 
non rewriting approaches denotational semantics models logical relations applicative bisimulation coinduction discussed focuses rewriting techniques 
plotkin devised rewriting method prove meaning preservation call name call value calculus confluence standardization 
time plotkin proved evaluation rewriting equivalent evaluation machine 
subsequently approach applied systems including systems imperative features assignments continuations examples include :10.1.1.23.4385
warning quite observational equivalence call meaning preservation related observational equivalence called observational soundness operational equivalence consistency contextually closed rewriting systems 
terms meaning iff evaluating yields result divergence halted state 
terms observationally equivalent written iff meaning context places hole context proving rewriting relation meaning preserving implies contextually closed see corollary example 
presents syntax free framework features represent notions contexts discuss observational equivalence specific examples 
summary contributions existing rewriting tools proving meaning preservation difficult completely inapplicable 
address problem presents framework multiple diagram methods proving meaning preservation 
new knowledge improves known follows 

methods rewriting systems fail confluence standardization termination boundedness developments 
methods ask confluence standardization properties subsets rewrite steps 

isolate new lift project termination diagram lpt definition show key proof idea previous methods proving meaning preservation plotkin method confluence standardization turbak method lift project 
show confluence standardization method incomparable proving power lift project method 
new lpt methods handle systems previous methods systems standardization 

proof methods dealt including earlier methods plotkin turbak abstractly free syntax 
methods restrictions kinds rewrite rules 
rewrite rules may non left linear nonorthogonal overlapping non order approach need notion closed programs subset terms 

methods support partitioning rewrite steps subsets treated separately different methods 
subsets need closed informal intuitive notion residuals respect evaluation steps 
partitioning proving termination properties easier 

framework provides generic support developments contracting preexisting marked redexes method method needs marked rewrite steps 
proving termination properties easier 
notion residuals needed helpful systems highly overlapping rules defining residuals hard 

addition number high level diagram methods proving meaning preservation low level methods easier people researchers rewriting 
give possible details needed non specialist adapt proof methods 
low level methods simple termination properties diagrams 
termination properties needed ordinary rewriting rewriting rewrite step sequences called 
standardization methods 
different termination properties method requires simple easy non specialist understand ranging boundedness bnd weak normalization bound number evaluation steps rewrite sequence definition 
analyzing rewrite step interactions method needs completion elementary diagrams diagrams edges adjacent single rewrite steps 
contrast standardization methods require completing cubes 
method choice depend elementary diagrams 
methods exclude rewrite step interactions consideration 

help rewriting researchers possible identify intermediate diagrams easier new diagrams added needed 

methods simplest notion standardization rewrite sequence rearranged sequence indicate respectively evaluation non evaluation steps 
standardization literature rich interesting notion standardization definitions imply definition extra details useful omitted 
early informal presentation elena lift project diagrams gave significant inspiration proceeded indepen dently 
stefan blom elena vincent van lyn turbak carefully read drafts pointed confusing terminology errors 
ariola partly responsible convincing rewrite rules letrec difficult prove correct 
mathematical definitions denote undefined 
proof ih means induction hypothesis means loss generality 
range binary relations 
alternate notations usable infix stand turn stands define operators binary relations 
composition 
equality type intended ri ri ri ri rj useful diagrams existentially quantified 
transitive reflexive closure 
inverse 
symmetric closure 
symmetric entity normal form written nf iff exist entity entity normal form written nf iff exists nf 
nf relation nf iff nf 
relation bounded written bnd iff entity exist entity rk 
relation terminating strongly normalizing written trm iff exist total function domain natural numbers 
relation weakly normalizing written iff entity entity nf note bnd trm 
diagrams statements relations solid dotted edges indicate quantification 
metavariables mentioned outside diagram unquantified 
metavariables node names edge labels universally quantified attached solid edge existentially quantified attached dotted edges 
example context equivalence holds 
proofs reason diagram polygon usually written inside 
evaluation systems evaluation system aes tuple endpoints result satisfying conditions axioms immediately conditions 
carriers aes sets function endpoints maps set subset function result maps range range range range subsets intended meaning follows 
set terms 
set rewrite steps 
set evaluation results axiom contain symbol diverges members typically symbols halt error halt case subdivided possible constant values final results 
endpoints mean step rewrites term term 
members rewrite steps evaluation 
stands non evaluation 
result mean observable result evaluating term diverges reserved axiom non halting evaluations 
convention specific aes considered statements possible aes 
rewriting notation defined follows 
rewrite step set binary relation endpoints 
iff exists endpoints 
rewrite step set context requiring binary relation implicitly stand examples stands normal form simply normal form 
position requiring subset binary relation stand stand example stands binary relation required supplied relation implicitly supplied 
examples stands stands definition rewrite step set properties 
define rewrite step sets properties rewrite step sets standardization confluence std conf local confluence meaning preservation mp result result std abbreviate std 
abbreviate 
traditionally std std considered 
simple definition mp reasonable axiom means mp implies preservation existence normal forms 
see warning convention confuse mp observational equivalence 
axiom evaluation 
non deterministic evaluation useful rewriting systems non deterministic syntax system top syntax level set unordered components 
simpler evaluation deterministic implies 
axiom ensure strategy find normal forms exist 
strengthening axiom bottom right diagram edges length ensure needed 
axiom evaluation sanity 
diverges means evaluation diverges result diverges nf 

evaluation steps preserve meaning mp 

non evaluation steps preserve evaluation steps consequently nf nf 

non evaluation steps normal forms preserve meaning nf result result 
defining aes rewriting system trivial satisfy axioms auxiliary function result maps nf diverges defining result follows diverges nf result result nf model evaluation computed expects way 
nf expected computing result involves find ing nf computing result diverging exists 
value result unimportant nf 
reserving value diverges case simplifies things 
satisfying axioms requires care design rewriting system aes hard 
anyway axiom consequence properties wl wp wlp definition typically proven 
glance reader think axiom simpler needed diagram relationship required issue handled lpt diagram definition case relationship needed nf 
condition axiom appears frameworks early appears non form 
explicit statement condition axiom aware appears condition partially :10.1.1.23.4385
lemma non evaluation steps eval normal forms 
nf mp 
proof 
see appendix lift project diagrams meaning preservation section presents properties rewrite step sets definition shows prove meaning preservation important connection arbitrary strategy rewriting evaluation 
evaluation defined subset rewrite steps specified aes set necessary show arbitrary rewriting preserves evaluation result order confidence non evaluation rewrite steps meaningful 
traditionally done proving confluence conf standardization std preconditions plotkin approach lemma 
needing confluence standardization big weakness shown non confluent system letrec calculus mention section confluence standardization 
contrast new method theorem needs lift project termination lpt property 
lemma lpt obtained lift lift project proj properties 
lift project imply confluence lemma theorem need confluence 
furthermore lpt implies lift project lemma lift equivalent standardization lemma theorem need standardization lift 
theorem differs earlier turbak important ways 
syntax free 
second provides explicit support separately proving meaning preservation different subsets non evaluation rewrite steps 
vastly simplifies auxiliary termination proofs properties bnd definition vital single method fails cover steps section 
third needs weaker lpt property lift project 
vital lift equivalent standardization turbak method fails systems standardization section 
definition lift project related properties 
define rewrite step sets properties rewrite step sets strong lift lift lift lift strong project project lift proj strong lift project lift project slp lift project terminating lpt lp nf lift proj properties match properties names lift project properties defined entire rewriting system individual rewrite steps properties specify step left diagram edge step difference inessential 
weaker lift symmetrical proj needed proj obtain lpt lemma 
lift replace lift statement lemma 
lemma relationships lift project properties 

lift proj 

lift 

proj 

slp lp 

lift lift 
lift lift need true 

lift proj lp 

lp lift proj lp lift lp proj need true 

lp lpt 

lpt lp need true 
proof 
see appendix theorem relationships lift project meaning preservation 

lpt mp 

mp lpt need true 
proof 

suppose lpt 

suppose nf nf 
axiom holds result diverges result mp 
suppose nf nf 
suppose nf 
nf 
lpt holds 
nf lemma holds mp 
axiom induction lengths rewrite sequences holds mp mp 
mp 
mp 

consider term step aes results mp mp lpt 
comparison traditional approach subsection compares lift project method turbak lpt method traditional confluence standardization method 
plotkin traditional approach separated abstractly form similar combination proofs lemma lemma theorem 
reformulated argument aes framework modified subsets furthermore factored argument show goes lp lemma lpt reaching mp 
appears main previously known rewriting methods showing meaning preservation implicitly lpt diagram 
interestingly lemma shown confluence standardization method lift project method incomparable power address problems 
section develop method wb std definition proving lpt address problems require standardization 
equivalence lift standardization lemma appears parameterized rewrite step sets 
lemma lift equivalent standardization 

lift iff std 
consequently lift iff std 

statement need true lift replaced lift proof 

std lift immediate 
lift std proven induction length rewrite sequences 
see appendix full details 

consider term step aes results note lift lift lift 
desired std false 
lemma relationships confluence standardization lift project 

conf std lp 

consequently conf lift imply mp 

conf std proj need true 

conf lift proj need true 
proof 

suppose conf std hold 
reason indicated diagram proves lp lp conf 
lemmas theorem 

consider term step aes conf std proj 

consider term step aes results lift proj conf 
elementary diagrams strong lift project section prove rewrite step sets lpt property order prove meaning preservation 
furthermore lpt obtained stronger properties lift project properties 
proving properties difficult 
help section provides methods proving strong lift strong project strong lift project particular rewrite step sets 
definition defines rewrite step set behaved satisfies wb std wb std properties 
turn conjunctions small number specific properties termination property elementary diagrams diagrams edges adjacent single rewrite steps 
wb std wb std properties rewrite step sets individual steps necessary simultaneously treat steps set closed informal intuitive notion residuals respect evaluation steps 
section main result theorem behaved rewrite step set strong lift strong project properties strong lift project property 
wb std wb std particular advantages 
termination property wb std requires bound number steps rewrite sequence full termination 
methods section significantly weaker finite developments property needed proof methods allows infinite developments requirement developments completed cofinal 
contrast wb std requires stronger termination property replaces wl wp elementary diagrams weaker diagram wlp 
big advantage wlp require standardization 
wb std requires local confluence fact sufficient confluence lemmas local confluence requirement preconditions wb std elementary diagrams 
definition behaved rewrite step sets 
en relation 
define rewrite step set properties bounded steps steps create steps bnd en ne weak lift step weak project step wl wp weak lift project step standardization normal form wlp std nf nf nf nf behaved standardization wb std wl wl wp behaved standardization wb std trm ne wlp lemma confluence standardization properties 

wl std 

trm conf newman lemma 

conf trm ne std nf 
proof 
definition lemmas appendix lemma strong lift project properties 

wl std 

wp std 

conf trm std nf wlp slp 
proof 
definition lemmas appendix theorem behaved rewrite step sets 

wb std 

wb std slp 
proof 
definition lemmas 
marked rewriting developments desired termination property definition bnd trm fails step set generated rewrite rule holds set marked steps 
marks typically force termination forbidding contracting unmarked redexes ensuring created redexes unmarked 
method desired rewriting system embedded larger marked system additional marked terms rewrite steps proving larger system correct proves desired system correct 
section defines conditions marking theorem proves conditions hold proving lpt marked fragment larger marked system sufficient prove lpt marked unmarked steps larger system 
methods proving meaning preservation methods worth observing style proof theorem repeated properties lpt lift standardization 
section methods related developments 
development rewrite step sequence starting term step contracts redex represents created redexes contracted 
usually notions created defined residuals redexes rewrite steps defining residuals marks 
section methods need notion residual 
important ways define residuals rewriting systems highly overlapping rewrite rules 
mark structure aes tuple marks rename satisfying axiom conditions 
set marks nonempty contain 
function maps marks 
mark member marks 
function rename type marks marks range marks 

statement hold iff exist intended meaning follows 
set marks contain marks track redexes 
rewrite step marked mark 
special mark means mark 
symbol means considered mark track kind rewrite step marks convenience systems steps marked versions 
operation rename produce new term resulting renaming occurrences mark 
axiom marking sanity 
marked erasure 
marked rename rename rename rename 
erasing nonexistent mark rename 
marks introduced rewriting 

fresh marks term exists mark 
convention specific mark structure considered statements possible mark structure 
definition rewrite step set property marks 
step marked nm rename theorem lift project terminating marks 
lpt nm lpt 
proof 
axiom lemma definitions 
full proof details see appendix example call name calculus section gives example aes framework methods proving meaning preservation 
aes mark structure defined top level proof strategy 
choose call name calculus left outermost evaluation weak head normal forms small system needs mark structure features section familiar readers systems treated plotkin seminal 
system confluence standardization 
illustrate extra power proof methods preferred example system properties unfortunately smallest worked example takes pages lncs format define need features section 
define aes call name calculus follows 
define aes carrier sets evaluation step subset variable context hole redex hole diverges stuck halt term syntax indicate marked redex 
terms contexts identified modulo conversion usual 
contexts conversion rename bound variables scope includes hole 
substitution written defined usual 
placing term context hole hole context written defined usual 
finish defining aes supplying functions 
endpoints endpoints diverges nf result halt stuck nf nf define accompanying mark structure follows 
marks 
rename lemma framework user proof burden 

axioms hold 
wb std 
nm 

context proof 
standard proofs induction left reader 
difficult bit part wb std 
trm proven known argument see rearranging mark values rewriting decreases multiset marks term multiset extension 
rewriting system finitely branching equivalent bnd turn implies 
theorem meaning preservation 
mp 
proof 
implicitly relies lemma 
lemma theorem 
lemma lpt 
lemma theorem lpt 
theorem mp 
corollary observational equivalence 
result result 
proof 
suppose 
lemma 
theorem definition mp result result 
related closely related turbak 
discussed points 
property corresponds complicated notion development sec 

development idea may implicitly exact relationship unclear due complexity 
second requirement confluence evaluation incomparable requirement evaluation axiom 
confluence involves complicated development machinery prefer simpler requirement 
third proof diagrams lemmas similar simpler developments treat marks developments separately section 
ariola blom define notion ars rewriting system information content 
ordering obtain infinite normal form term information content terms show prove preserves infinite normal forms finding subset satisfying diagram roughly cor 
quickest explanation relation point closest corresponding diagram aes framework glp key differences ariola blom approach follows 
provide methods proving diagram corresponding elementary diagrams section prove individually 
second glp diagram stronger requirement lpt fact lp glp lpt methods section general 
third framework provide help showing correspondence needed prove observational equivalence rewriting system infinite normal forms notion meaning actual operational semantics burden left user 
fourth encourage notion information content complicated needed proving meaning preservation set fact information content build fully model 
odersky gives conditions proving proposed contextually closed transformation observational equivalence 
condition locally stable diagram relation parallel similarity simultaneously different presumably non overlapping positions 
condition preserves answers nf 
additional definitions conditions discuss 
odersky approach related follows 
odersky uses normal rewriting observational equivalence 
odersky approach versions 
version shown meaning preservation defined convertibility entire rewriting system set answers normal forms setting 
question rewrite rules safely added 
case diagram proven rewrite steps 
version takes evaluation strategy 
case bottom edge general practice diagram edge completed steps 
odersky uses typically combination behavedness conditions section marks section 
odersky parallel simultaneous rewriting corresponds termination property 
key differences odersky approach follows 
odersky approach tied syntactic extensions calculus approach 
odersky provide elementary diagrams edge single rewrite rule full parallel similarity 
odersky appears assume standardization proven approach proves standardization needed 
odersky approach requires notion preserving evaluation contexts fully understand fairly sure intended applications satisfy 
odersky distinguish terms go wrong diverge halt normally framework verify rewriting switch non wrong wrong 
generalizations aes framework lpt diagrams developed handle letrec calculus developing reasoning call value higher order programs mutable cells mutually recursive definitions letrec 
evaluation assignment statements introduce cycles store evaluation results may need letrec initial program letrec free 
specific evaluation strategy letrec calculus define meaning programs 
calculi assignments done letrec includes improvements simple evaluation contexts rules letrec style ariola blom 
previously known methods reasoning correctness ariola blom style letrec rules difficult 
development letrec nearing completion 
letrec due rules letrec ariola klop proved lift project method prove meaning preservation 
finite developments number rule subsets associated rewrite step sets satisfy property 
barrier completing proof meaning preservation critical pairs rule named lift name unrelated lift diagram definition 
par irritating critical pair follows lift lift lift lift lift unfortunately breaks standardization lift project proof method fails 
considered changing definition letrec felt changes fix critical pair probably break 
rules letrec clearly meaning preserving felt forcing letrec awkward fit weak proof method proof method fixed 
fortunately wb std property proven lift rule steps expect complete letrec soon 
letrec completed want apply proof methods equational reasoning assembly language explicit substitutions 
ariola blom 
cyclic lambda calculi 
theoretical aspects comput 
softw 
int conf berlin 
springer 
ariola blom 
skew confluence lambda calculus letrec 
ann 
pure appl 
logic 
ariola felleisen :10.1.1.23.4385
call need lambda calculus 
funct 
programming 
ariola felleisen odersky wadler 
call need lambda calculus 
conf 
rec 
nd ann 
acm symp 
princ 
prog 
langs 
ariola klop 
lambda calculus explicit recursion 
inform 
comput 
baader nipkow 
term rewriting 
cambridge university press 
barendregt 
lambda calculus syntax semantics 
north holland revised edition 
programming languages systems th european symp 
programming vol 
lncs 
springer verlag 
felleisen friedman 
control operators secd machine calculus 
wirsing ed formal description programming concepts iii 
north holland 
felleisen friedman 
syntactic theory sequential state 
theoret 
comput 
sci 
felleisen hieb 
revised report syntactic theories sequential control state 
theoret 
comput 
sci 
fisher reppy riecke 
calculus compiling linking classes 
esop 
gonthier 
vy 
melli standardisation theorem 
proc 
th ann 
ieee symp 
logic comput 
sci 
howe 
equality lazy computation systems 
proc 
th ann 
symp 
logic comput 
sci pacific grove ca 
ieee comput 
soc 
press 
howe 
proving congruence bisimulation functional programming languages 
inform 
comput 

techniques proving observational equivalence 
ascii notes turned 
sure year 
turbak 
calculus link time compilation 
esop 

computational soundness non confluent calculi applications modules linking 
phd thesis boston univ 
odersky wadler 
call need lambda calculus 
funct 
programming 

melli axiomatic rewriting theory iv diagrammatic standardization theorem 
submitted 
muller 
lisp representation independent dialect lisp reduction semantics 
acm trans 
prog 
langs 

newman 
theories combinatorial definition equivalence 
annals math 
odersky 
syntactic method proving observational equivalences 
research report yaleu dcs rr yale univ dept comp 
science 
pitts 
operationally theories program equivalence 
semantics logics computation vol 
publications newton institute 
cambridge university press 
plotkin 
call name call value lambda calculus 
theoret 
comput 
sci 
taha 
sound reduction semantics untyped cbn multi stage computation theory metaml non trivial 
proceedings acm sigplan workshop evaluation semantics program manipulation pepm 
acm press 
proofs section lemma multi step 


proof 
direction immediate proven induction suppose proven exists 
cases 
suppose 
consider case 


done 

suppose 


suppose 
consider case 
diagram ih ih lemma multi step evaluation 

proof 
axiom lemma 
lemma confluence unique normal forms evaluation 

conf 

nf nf 
proof 

immediate lemma 
suppose nf nf 
lemma exists 
nf nf holds 
done 
standard result 
proof lemma non evaluation steps eval normal forms 
proven mp nf imply suppose nf 
nf 
axiom holds nf 
axiom holds result result 
mp mp lemma claim follows induction 
proofs section proof lemma relationships lift project properties 

suppose proven lift proj 
suppose 
holds 
lift 
suppose 
lemma exists 
holds 
proj 

suppose lift lemma 
suppose suppose 
exists 
implies 
lift 

similar proof lemma 

similar proof lemma 

suppose lift 
suppose 
lift exists 
holds 
lift 
consider term step aes results lift lift lift 

suppose lift proj 
suppose 
cases true 
suppose 
proj exist 

lp 
suppose 
lift exist 

lp 

consider term step aes results lp lp lift lp proj 

lp exist 
suppose lp 
suppose nf 
nf holds 

lpt 

consider term step aes lpt lpt lp 
proof lemma lift equivalent standardization part 
suppose lift std proven 
suppose proven exists 
induction 
cases 
case 

done 

case lemma lift lift 
diagram lift suppose std 
suppose 

std ih exists 
lift 
proofs section lemma weak lift 
wl proof 
induction 
cases case 


done 
case 
diagram wl lemma standardization 
wl std 
ih proof 
max en 
note defined bound exists 
defined term suppose proven exists 
defined 
induction cases 

suppose 

done 

suppose hold 
fact holds depend step 
diagram observing wl lem 
ih lemma strong lift 
wl std proof 
diagram lem 
wl std lemma strong lift 
wl std 
proof 
suppose prove exists 
induction 
cases suppose 

done 
suppose 
diagram wl std lem 
ih lemma strong project 
wp std proof 
induction 
cases 
suppose 


done 

suppose 
diagram wp std ih lemma strong project 
wp std 
proof 
suppose prove exist 
induction 
cases 
suppose 



done 

suppose 
diagram wp std lemma lemma ih lemma local confluence boundedness imply confluence newman 
trm conf 
lemma standardization normal form 
conf trm ne std nf 
proof 
suppose nf 
trm holds trm 
exists nf 
conf exists 
nf holds 
nf 
nf nf induction ne holds nf 
exists nf nf 
lemma weak lift project 
wlp proof 
induction proof resembling proofs lemmas 
lemma strong lift project 
conf trm std nf wlp proof 
trm holds 
diagram nf wlp lem 
nf std nf conf nf std nf nf nf nf lemma strong lift project 
conf trm std nf wlp slp 
proof 
induction lemma 
proof nearly lemma 
proofs section lemma marking properties 

rename 
rename 
rename rename rename rename 


rename nf iff nf 
proof 
axiom induction length rewrite sequences needed 
proof theorem lift project terminating marks 
suppose lpt nm lpt proven 
suppose lpt lemma 
suppose suppose nf proven exists 
cases 

case 
mark exists axiom 
diagram rename lem 
nm lem 
lpt rename nf rename lemma holds 
rename axiom 

lpt 

case 
mark exists axiom 
diagram rename lem 
lem 
nf nm lem 
nf lpt rename rename lemma holds 
rename axiom 

lpt 

